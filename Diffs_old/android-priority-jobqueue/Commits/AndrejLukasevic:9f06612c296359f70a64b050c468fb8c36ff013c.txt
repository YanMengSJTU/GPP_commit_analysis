diff --git a/app/.gitignore b/app/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/app/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/app/build.gradle b/app/build.gradle
new file mode 100644
index 0000000..745d606
--- /dev/null
+++ b/app/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion "21.1.2"
+
+    defaultConfig {
+        applicationId "com.spix.jobmanager"
+        minSdkVersion 15
+        targetSdkVersion 21
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:appcompat-v7:21.0.3'
+}
diff --git a/jobqueue/proguard-project.txt b/app/proguard-rules.pro
similarity index 62%
rename from jobqueue/proguard-project.txt
rename to app/proguard-rules.pro
index f2fe155..7a1ad38 100644
--- a/jobqueue/proguard-project.txt
+++ b/app/proguard-rules.pro
@@ -1,11 +1,8 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
 # Add project specific ProGuard rules here.
 # By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
+# in C:\Programs\AndroidSDK/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
 #
 # For more details, see
 #   http://developer.android.com/guide/developing/tools/proguard.html
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..92ef8d2
--- /dev/null
+++ b/app/src/main/AndroidManifest.xml
@@ -0,0 +1,12 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.spix.jobmanagersample">
+
+    <application
+        android:allowBackup="true"
+        android:label="@string/app_name"
+        android:icon="@drawable/ic_launcher"
+        android:theme="@style/AppTheme">
+
+    </application>
+
+</manifest>
diff --git a/app/src/main/res/drawable-hdpi/ic_launcher.png b/app/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000..96a442e
Binary files /dev/null and b/app/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/app/src/main/res/drawable-mdpi/ic_launcher.png b/app/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000..359047d
Binary files /dev/null and b/app/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/app/src/main/res/drawable-xhdpi/ic_launcher.png b/app/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..71c6d76
Binary files /dev/null and b/app/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/app/src/main/res/drawable-xxhdpi/ic_launcher.png b/app/src/main/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..4df1894
Binary files /dev/null and b/app/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
new file mode 100644
index 0000000..7ca7457
--- /dev/null
+++ b/app/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">JobManager</string>
+</resources>
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
new file mode 100644
index 0000000..766ab99
--- /dev/null
+++ b/app/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..6356aab
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,19 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.0.0'
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
diff --git a/examples/twitter/DaoGenerator/src/TwitterDaoGenerator.java b/examples/twitter/DaoGenerator/src/TwitterDaoGenerator.java
deleted file mode 100644
index cc6255b..0000000
--- a/examples/twitter/DaoGenerator/src/TwitterDaoGenerator.java
+++ /dev/null
@@ -1,28 +0,0 @@
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Schema;
-
-import java.io.IOException;
-
-public class TwitterDaoGenerator extends DaoGenerator {
-    public TwitterDaoGenerator() throws IOException {
-    }
-    public static void main(String[] args) {
-        Schema schema = new Schema(3, "com.path.android.jobqueue.examples.twitter.entities");
-        schema.setDefaultJavaPackageTest("com.path.android.jobqueue.examples.twitter.test");
-        schema.setDefaultJavaPackageDao("com.path.android.jobqueue.examples.twitter.dao");
-        schema.enableKeepSectionsByDefault();
-        Entity tweet = schema.addEntity("Tweet");
-        tweet.addLongProperty("localId").primaryKey().autoincrement();
-        tweet.addLongProperty("serverId").unique();
-        tweet.addStringProperty("text");
-        tweet.addLongProperty("userId");
-        tweet.addBooleanProperty("isLocal");
-        tweet.addDateProperty("createdAt");
-        try {
-            new DaoGenerator().generateAll(schema, "src-gen", "src");
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-}
diff --git a/examples/twitter/README.md b/examples/twitter/README.md
deleted file mode 100644
index 04a8dca..0000000
--- a/examples/twitter/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-**build and run**
-gradle installDebug runTwitter
\ No newline at end of file
diff --git a/examples/twitter/TwitterClient/AndroidManifest.xml b/examples/twitter/TwitterClient/AndroidManifest.xml
deleted file mode 100644
index 6179257..0000000
--- a/examples/twitter/TwitterClient/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.path.android.jobqueue.examples.twitter"
-
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-
-    <application android:label="@string/app_name"
-                 android:debuggable="true"
-                 android:name=".TwitterApplication">
-        <activity android:name=".SampleTwitterClient"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-    </application>
-</manifest>
diff --git a/examples/twitter/TwitterClient/ant.properties b/examples/twitter/TwitterClient/ant.properties
deleted file mode 100644
index b0971e8..0000000
--- a/examples/twitter/TwitterClient/ant.properties
+++ /dev/null
@@ -1,17 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
diff --git a/examples/twitter/TwitterClient/build.gradle b/examples/twitter/TwitterClient/build.gradle
deleted file mode 100644
index cdc0a8d..0000000
--- a/examples/twitter/TwitterClient/build.gradle
+++ /dev/null
@@ -1,75 +0,0 @@
-task wrapper(type: Wrapper) {
-    gradleVersion = '1.10'
-}
-
-
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:0.8.+'
-    }
-}
-
-apply plugin: 'android'
-
-repositories {
-    mavenLocal()
-    mavenCentral()
-    maven {
-        url 'https://oss.sonatype.org/content/repositories/snapshots/'
-    }
-}
-
-class RunApk extends DefaultTask {
-    def adbExec;
-    @TaskAction
-    def runApp() {
-        println "running path on device or emulator"
-        println "adb:" + adbExec
-        def cmd = adbExec + " shell am start -a android.intent.action.MAIN -n com.path.android.jobqueue.examples.twitter/com.path.android.jobqueue.examples.twitter.SampleTwitterClient"
-        println cmd
-        def proc = cmd.execute()
-        proc.in.eachLine {line -> println line}
-        proc.err.eachLine {line -> println 'ERROR: ' + line}
-        proc.waitFor()
-    }
-}
-
-def Properties localProps = new Properties()
-localProps.load(new FileInputStream(file('local.properties')))
-println localProps["sdk.dir"]
-def adb = localProps['sdk.dir'] + "/platform-tools/adb"
-
-
-tasks.create(name: "runTwitter", type: RunApk){
-    adbExec = adb
-}
-
-android {
-    compileSdkVersion 17
-    buildToolsVersion "19.0.1"
-    defaultConfig {
-        minSdkVersion 15
-        targetSdkVersion 17
-    }
-
-    dependencies {
-        compile 'de.greenrobot:eventbus:2.1.0-beta-1'
-        compile 'org.twitter4j:twitter4j-core:3.0.5'
-        compile 'com.path:android-priority-jobqueue:1.1-SNAPSHOT'
-        compile files('external-libs/greenDAO.jar')
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src', 'src-gen']
-            resources.srcDirs = ['src']
-            res.srcDirs = ['res']
-            assets.srcDirs = ['assets']
-        }
-    }
-}
diff --git a/examples/twitter/TwitterClient/build.xml b/examples/twitter/TwitterClient/build.xml
deleted file mode 100644
index d75c6e0..0000000
--- a/examples/twitter/TwitterClient/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="TwitterClient" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/examples/twitter/TwitterClient/external-libs/greenDAO.jar b/examples/twitter/TwitterClient/external-libs/greenDAO.jar
deleted file mode 100644
index fb32d94..0000000
Binary files a/examples/twitter/TwitterClient/external-libs/greenDAO.jar and /dev/null differ
diff --git a/examples/twitter/TwitterClient/gradlew.bat b/examples/twitter/TwitterClient/gradlew.bat
deleted file mode 100644
index aec9973..0000000
--- a/examples/twitter/TwitterClient/gradlew.bat
+++ /dev/null
@@ -1,90 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/examples/twitter/TwitterClient/project.properties b/examples/twitter/TwitterClient/project.properties
deleted file mode 100644
index 92ae9d8..0000000
--- a/examples/twitter/TwitterClient/project.properties
+++ /dev/null
@@ -1,16 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-source.dir=src;src-gen;
-android.library.reference.1=../../../jobqueue
diff --git a/examples/twitter/TwitterClient/res/layout/list_tweet.xml b/examples/twitter/TwitterClient/res/layout/list_tweet.xml
deleted file mode 100644
index 7c8c7c2..0000000
--- a/examples/twitter/TwitterClient/res/layout/list_tweet.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent">
-    <TextView android:id="@+id/status"
-              android:autoLink="all"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"/>
-</LinearLayout>
\ No newline at end of file
diff --git a/examples/twitter/TwitterClient/res/layout/main.xml b/examples/twitter/TwitterClient/res/layout/main.xml
deleted file mode 100644
index 8293408..0000000
--- a/examples/twitter/TwitterClient/res/layout/main.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-        >
-    <TextView
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:text="Hello World, SampleTwitterClient"
-            />
-    <LinearLayout android:orientation="horizontal"
-                  android:layout_width="fill_parent"
-                  android:layout_height="wrap_content">
-        <EditText android:hint="@string/update_status"
-                  android:layout_width="wrap_content"
-                  android:layout_weight="1"
-                  android:layout_height="wrap_content"
-                  android:id="@+id/edit_status"/>
-        <Button android:id="@+id/send_tweet"
-                android:layout_weight="0"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/send_tweet"/>
-
-                  </LinearLayout>
-    <ListView android:id="@+id/tweet_list"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"/>
-</LinearLayout>
-
diff --git a/examples/twitter/TwitterClient/res/values/strings.xml b/examples/twitter/TwitterClient/res/values/strings.xml
deleted file mode 100644
index 1ec4eb2..0000000
--- a/examples/twitter/TwitterClient/res/values/strings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">TwitterClient</string>
-    <string name="update_status">Update your status</string>
-    <string name="send_tweet">Send</string>
-</resources>
diff --git a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/DaoMaster.java b/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/DaoMaster.java
deleted file mode 100644
index 8de6cf1..0000000
--- a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/DaoMaster.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.dao;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.util.Log;
-import de.greenrobot.dao.AbstractDaoMaster;
-import de.greenrobot.dao.IdentityScopeType;
-
-import com.path.android.jobqueue.examples.twitter.dao.TweetDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/**
- * Master of DAO (schema version 3): knows all DAOs.
-*/
-public class DaoMaster extends AbstractDaoMaster {
-    public static final int SCHEMA_VERSION = 3;
-
-    /** Creates underlying database table using DAOs. */
-    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
-        TweetDao.createTable(db, ifNotExists);
-    }
-
-    /** Drops underlying database table using DAOs. */
-    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
-        TweetDao.dropTable(db, ifExists);
-    }
-
-    public static abstract class OpenHelper extends SQLiteOpenHelper {
-
-        public OpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory, SCHEMA_VERSION);
-        }
-
-        @Override
-        public void onCreate(SQLiteDatabase db) {
-            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
-            createAllTables(db, false);
-        }
-    }
-
-    /** WARNING: Drops all table on Upgrade! Use only during development. */
-    public static class DevOpenHelper extends OpenHelper {
-        public DevOpenHelper(Context context, String name, CursorFactory factory) {
-            super(context, name, factory);
-        }
-
-        @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
-            dropAllTables(db, true);
-            onCreate(db);
-        }
-    }
-
-    public DaoMaster(SQLiteDatabase db) {
-        super(db, SCHEMA_VERSION);
-        registerDaoClass(TweetDao.class);
-    }
-
-    public DaoSession newSession() {
-        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
-    }
-
-    public DaoSession newSession(IdentityScopeType type) {
-        return new DaoSession(db, type, daoConfigMap);
-    }
-
-}
diff --git a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/DaoSession.java b/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/DaoSession.java
deleted file mode 100644
index 13e1191..0000000
--- a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/DaoSession.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.dao;
-
-import android.database.sqlite.SQLiteDatabase;
-
-import java.util.Map;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoConfig;
-import de.greenrobot.dao.AbstractDaoSession;
-import de.greenrobot.dao.IdentityScopeType;
-
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-
-import com.path.android.jobqueue.examples.twitter.dao.TweetDao;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-
-/**
- * {@inheritDoc}
- *
- * @see de.greenrobot.dao.AbstractDaoSession
- */
-public class DaoSession extends AbstractDaoSession {
-
-    private final DaoConfig tweetDaoConfig;
-
-    private final TweetDao tweetDao;
-
-    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
-            daoConfigMap) {
-        super(db);
-
-        tweetDaoConfig = daoConfigMap.get(TweetDao.class).clone();
-        tweetDaoConfig.initIdentityScope(type);
-
-        tweetDao = new TweetDao(tweetDaoConfig, this);
-
-        registerDao(Tweet.class, tweetDao);
-    }
-
-    public void clear() {
-        tweetDaoConfig.getIdentityScope().clear();
-    }
-
-    public void deleteAllData() {
-        tweetDao.deleteAll();
-    }
-
-
-    public TweetDao getTweetDao() {
-        return tweetDao;
-    }
-
-}
diff --git a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/TweetDao.java b/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/TweetDao.java
deleted file mode 100644
index f38a994..0000000
--- a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/dao/TweetDao.java
+++ /dev/null
@@ -1,159 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.dao;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoConfig;
-import de.greenrobot.dao.Property;
-
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/**
- * DAO for table TWEET.
-*/
-public class TweetDao extends AbstractDao<Tweet, Long> {
-
-    public static final String TABLENAME = "TWEET";
-
-    /**
-     * Properties of entity Tweet.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property LocalId =new Property(0, Long.class , "localId", true, "LOCAL_ID");
-        public final static Property ServerId =new Property(1, Long.class , "serverId", false, "SERVER_ID");
-        public final static Property Text =new Property(2, String.class , "text", false, "TEXT");
-        public final static Property UserId =new Property(3, Long.class , "userId", false, "USER_ID");
-        public final static Property IsLocal =new Property(4, Boolean.class , "isLocal", false, "IS_LOCAL");
-        public final static Property CreatedAt =new Property(5, java.util.Date.class , "createdAt", false, "CREATED_AT");
-    };
-
-
-    public TweetDao(DaoConfig config) {
-        super(config);
-    }
-
-    public TweetDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'TWEET' (" + //
-                "'LOCAL_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
-                "'SERVER_ID' INTEGER UNIQUE ," + // 1: serverId
-                "'TEXT' TEXT," + // 2: text
-                "'USER_ID' INTEGER," + // 3: userId
-                "'IS_LOCAL' INTEGER," + // 4: isLocal
-                "'CREATED_AT' INTEGER);"); // 5: createdAt
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TWEET'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Tweet entity) {
-        stmt.clearBindings();
-        entity.onBeforeSave();
- 
-        Long localId = entity.getLocalId();
-        if (localId != null) {
-            stmt.bindLong(1, localId);
-
-        }
- 
-        Long serverId = entity.getServerId();
-        if (serverId != null) {
-            stmt.bindLong(2, serverId);
-
-        }
- 
-        String text = entity.getText();
-        if (text != null) {
-            stmt.bindString(3, text);
-
-        }
- 
-        Long userId = entity.getUserId();
-        if (userId != null) {
-            stmt.bindLong(4, userId);
-
-        }
- 
-        Boolean isLocal = entity.getIsLocal();
-        if (isLocal != null) {
-            stmt.bindLong(5, isLocal ? 1l: 0l);
-
-        }
- 
-        java.util.Date createdAt = entity.getCreatedAt();
-        if (createdAt != null) {
-            stmt.bindLong(6, createdAt.getTime());
-
-        }
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Tweet readEntity(Cursor cursor, int offset) {
-        Tweet entity = new Tweet( //
-
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // localId
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) , // serverId
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) , // text
-            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) , // userId
-            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 , // isLocal
-            cursor.isNull(offset + 5) ? null : new java.util.Date( cursor.getLong(offset + 5) ) // createdAt
-        );
-        return entity;
-    }
-
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Tweet entity, int offset) {
-        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
-        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) );
-        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) );
-        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) );
-        entity.setIsLocal(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 );
-        entity.setCreatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date( cursor.getLong(offset + 5) ) );
-     }
-
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Tweet entity, long rowId) {
-        entity.setLocalId(rowId);
-        return rowId;
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Tweet entity) {
-        if(entity != null) {
-            return entity.getLocalId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-
-}
diff --git a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/entities/TweetBase.java b/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/entities/TweetBase.java
deleted file mode 100644
index b88d897..0000000
--- a/examples/twitter/TwitterClient/src-gen/com/path/android/jobqueue/examples/twitter/entities/TweetBase.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.entities;
-
-
-
-
-
-
-// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
-
-// KEEP INCLUDES - put your custom includes here
-// KEEP INCLUDES END
-/**
- * Entity mapped to table TWEET.
- */
-abstract public class TweetBase {
-
-    protected Long localId;
-    protected Long serverId;
-    protected String text;
-    protected Long userId;
-    protected Boolean isLocal;
-    protected java.util.Date createdAt;
-
-
-
-
-    // KEEP FIELDS - put your custom fields here
-    // KEEP FIELDS END
-
-    public TweetBase() {
-    }
-
-    public TweetBase(Long localId) {
-        this.localId = localId;
-    }
-
-    public TweetBase(Long localId, Long serverId, String text, Long userId, Boolean isLocal, java.util.Date createdAt) {
-        this.localId = localId;
-        this.serverId = serverId;
-        this.text = text;
-        this.userId = userId;
-        this.isLocal = isLocal;
-        this.createdAt = createdAt;
-    }
-
-    public Long getLocalId() {
-        return localId;
-    }
-
-    public void setLocalId(Long localId) {
-        this.localId = localId;
-    }
-
-    public Long getServerId() {
-        return serverId;
-    }
-
-    public void setServerId(Long serverId) {
-        this.serverId = serverId;
-    }
-
-    public String getText() {
-        return text;
-    }
-
-    public void setText(String text) {
-        this.text = text;
-    }
-
-    public Long getUserId() {
-        return userId;
-    }
-
-    public void setUserId(Long userId) {
-        this.userId = userId;
-    }
-
-    public Boolean getIsLocal() {
-        return isLocal;
-    }
-
-    public void setIsLocal(Boolean isLocal) {
-        this.isLocal = isLocal;
-    }
-
-    public java.util.Date getCreatedAt() {
-        return createdAt;
-    }
-
-    public void setCreatedAt(java.util.Date createdAt) {
-        this.createdAt = createdAt;
-    }
-
-    public void updateNotNull(Tweet other) {
-        if(this == other) {
-            return;//both came from db, no need to run this.
-        }
-
-        if(other.localId != null) {
-            this.localId = other.localId;
-        }
-
-
-        if(other.serverId != null) {
-            this.serverId = other.serverId;
-        }
-
-
-        if(other.text != null) {
-            this.text = other.text;
-        }
-
-
-        if(other.userId != null) {
-            this.userId = other.userId;
-        }
-
-
-        if(other.isLocal != null) {
-            this.isLocal = other.isLocal;
-        }
-
-
-        if(other.createdAt != null) {
-            this.createdAt = other.createdAt;
-        }
-
-        // relationships
-    }
-
-
-    // KEEP METHODS - put your custom methods here
-    // KEEP METHODS END
-
-    public void onBeforeSave() {
-        //you can override this method and do some stuff if you want to :)
-
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java
deleted file mode 100644
index 7c2e6a7..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/Config.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.path.android.jobqueue.examples.twitter;
-
-public class Config {
-    public static final String CONSUMER_KEY = "APEGHy66BMYzvgEktDfc1Q";
-    public static final String CONSUMER_SECRET = "wf8XXYwivxHQtiIqPSD3lpq6po9JGRyYBIX0lT0";
-
-    public static final String ACCESS_TOKEN = "1443060589-ZW0lPmcN0NOwy2AchLjZjixHLhPXClYOPQ0IhWG";
-    public static final String ACCESS_TOKEN_SECRET = "Tq8aVvT1PA6PXtKHgI5v1EL5UQj3JcGlFzXla2zethjYO";
-
-    public static final String REQUEST_TOKEN_URL = "https://api.twitter.com/oauth/request_token";
-    public static final String AUTHORIZE_URL = "https://api.twitter.com/oauth/authorize";
-    public static final String ACCESS_TOKEN_URL = "https://api.twitter.com/oauth/access_token";
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java
deleted file mode 100644
index 7584732..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/SampleTwitterClient.java
+++ /dev/null
@@ -1,172 +0,0 @@
-package com.path.android.jobqueue.examples.twitter;
-
-import android.graphics.Color;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.examples.twitter.activities.BaseActivity;
-import com.path.android.jobqueue.examples.twitter.adapters.LazyListAdapter;
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-import com.path.android.jobqueue.examples.twitter.events.DeletedTweetEvent;
-import com.path.android.jobqueue.examples.twitter.events.FetchedNewTweetsEvent;
-import com.path.android.jobqueue.examples.twitter.events.PostedTweetEvent;
-import com.path.android.jobqueue.examples.twitter.events.PostingTweetEvent;
-import com.path.android.jobqueue.examples.twitter.jobs.FetchTweetsJob;
-import com.path.android.jobqueue.examples.twitter.jobs.PostTweetJob;
-import com.path.android.jobqueue.examples.twitter.models.TweetModel;
-import com.path.android.jobqueue.examples.twitter.tasks.SimpleBackgroundTask;
-import de.greenrobot.dao.LazyList;
-import de.greenrobot.event.EventBus;
-
-public class SampleTwitterClient extends BaseActivity {
-    private TweetAdapter tweetAdapter;
-    private boolean dataDirty = true;
-    JobManager jobManager;
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        dataDirty = true;
-        setContentView(R.layout.main);
-        jobManager = TwitterApplication.getInstance().getJobManager();
-        ListView listView = (ListView) findViewById(R.id.tweet_list);
-        tweetAdapter = new TweetAdapter(getLayoutInflater());
-        findViewById(R.id.send_tweet).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                EditText text = (EditText) findViewById(R.id.edit_status);
-                if(text.getText().toString().trim().length() > 0) {
-                    sendTweet(text.getText().toString());
-                    text.setText("");
-                }
-            }
-        });
-        listView.setAdapter(tweetAdapter);
-        EventBus.getDefault().register(this);
-    }
-
-    private void sendTweet(final String text) {
-        jobManager.addJobInBackground(new PostTweetJob(text));
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        try {
-            EventBus.getDefault().unregister(this);
-        } catch (Throwable t){
-            //this may crash if registration did not go through. just be safe
-        }
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    public void onEventMainThread(FetchedNewTweetsEvent ignored) {
-        onUpdateEvent();
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    public void onEventMainThread(PostingTweetEvent ignored) {
-        //we could just add this to top or replace element instead of refreshing whole list
-        onUpdateEvent();
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    public void onEventMainThread(PostedTweetEvent ignored) {
-        //we could just add this to top or replace element instead of refreshing whole list
-        onUpdateEvent();
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    public void onEventMainThread(DeletedTweetEvent ignored) {
-        //we could just add this to top or replace element instead of refreshing whole list
-        Toast.makeText(this, "cannot send the tweet", Toast.LENGTH_SHORT).show();
-        onUpdateEvent();
-    }
-
-    private void onUpdateEvent() {
-        if(isVisible()) {
-            refreshList();
-        } else {
-            dataDirty = true;
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        jobManager.addJobInBackground(new FetchTweetsJob());
-        if(dataDirty) {
-            refreshList();
-            dataDirty = false;
-        }
-    }
-
-    private void refreshList() {
-        new SimpleBackgroundTask<LazyList<Tweet>>(this) {
-            @Override
-            protected LazyList<Tweet> onRun() {
-                return TweetModel.getInstance().lazyLoadTweets();
-            }
-
-            @Override
-            protected void onSuccess(LazyList<Tweet> result) {
-                tweetAdapter.replaceLazyList(result);
-            }
-        }.execute();
-    }
-
-    private static class TweetAdapter extends LazyListAdapter<Tweet> {
-        private final LayoutInflater layoutInflater;
-        public TweetAdapter(LayoutInflater layoutInflater) {
-            this.layoutInflater = layoutInflater;
-        }
-        @Override
-        public long getItemId(int i) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            ViewHolder holder;
-            if(view == null) {
-                view = layoutInflater.inflate(R.layout.list_tweet, viewGroup, false);
-                holder = new ViewHolder(view);
-            } else {
-                holder = ViewHolder.getFromView(view);
-            }
-            holder.render(getItem(i));
-            return view;
-        }
-
-        private static class ViewHolder {
-            TextView statusTextView;
-            public ViewHolder(View view) {
-                statusTextView = (TextView) view.findViewById(R.id.status);
-                view.setTag(this);
-            }
-
-            public static ViewHolder getFromView(View view) {
-                Object tag = view.getTag();
-                if(tag instanceof ViewHolder) {
-                    return (ViewHolder) tag;
-                } else {
-                    return new ViewHolder(view);
-                }
-            }
-
-            public void render(Tweet tweet) {
-                statusTextView.setText(tweet.getText());
-                if(tweet.getServerId() == null) {
-                    statusTextView.setTextColor(Color.YELLOW);
-                } else {
-                    statusTextView.setTextColor(Color.WHITE);
-                }
-            }
-        }
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/TwitterApplication.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/TwitterApplication.java
deleted file mode 100644
index e782af8..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/TwitterApplication.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.path.android.jobqueue.examples.twitter;
-
-import android.app.Application;
-import android.util.Log;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.log.CustomLogger;
-
-public class TwitterApplication extends Application {
-    private static TwitterApplication instance;
-    private JobManager jobManager;
-
-    public TwitterApplication() {
-        instance = this;
-    }
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        configureJobManager();
-
-    }
-
-    private void configureJobManager() {
-        Configuration configuration = new Configuration.Builder(this)
-        .customLogger(new CustomLogger() {
-            private static final String TAG = "JOBS";
-            @Override
-            public boolean isDebugEnabled() {
-                return true;
-            }
-
-            @Override
-            public void d(String text, Object... args) {
-                Log.d(TAG, String.format(text, args));
-            }
-
-            @Override
-            public void e(Throwable t, String text, Object... args) {
-                Log.e(TAG, String.format(text, args), t);
-            }
-
-            @Override
-            public void e(String text, Object... args) {
-                Log.e(TAG, String.format(text, args));
-            }
-        })
-        .minConsumerCount(1)//always keep at least one consumer alive
-        .maxConsumerCount(3)//up to 3 consumers at a time
-        .loadFactor(3)//3 jobs per consumer
-        .consumerKeepAlive(120)//wait 2 minute
-        .build();
-        jobManager = new JobManager(this, configuration);
-    }
-
-    public JobManager getJobManager() {
-        return jobManager;
-    }
-
-    public static TwitterApplication getInstance() {
-        return instance;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/activities/BaseActivity.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/activities/BaseActivity.java
deleted file mode 100644
index cbb1b47..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/activities/BaseActivity.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.activities;
-
-import android.app.Activity;
-
-public class BaseActivity extends Activity {
-    private boolean visible = false;
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        visible = true;
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        visible = false;
-    }
-
-    public boolean isVisible() {
-        return visible;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/adapters/LazyListAdapter.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/adapters/LazyListAdapter.java
deleted file mode 100644
index b19e76a..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/adapters/LazyListAdapter.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.adapters;
-
-import android.widget.BaseAdapter;
-import de.greenrobot.dao.LazyList;
-
-abstract public class LazyListAdapter<T> extends BaseAdapter {
-    LazyList<T> lazyList = null;
-    public LazyListAdapter() {
-
-    }
-
-    public LazyListAdapter(LazyList<T> initialList) {
-        lazyList = initialList;
-    }
-
-    public void replaceLazyList(LazyList<T> newList) {
-        if(lazyList != null) {
-            lazyList.close();
-        }
-        lazyList = newList;
-        notifyDataSetChanged();
-    }
-
-    @Override
-    public int getCount() {
-        return lazyList == null ? 0 : lazyList.size();
-    }
-
-    @Override
-    public T getItem(int i) {
-        return lazyList == null ? null : lazyList.get(i);
-    }
-
-    public void close() {
-        if(lazyList != null) {
-            lazyList.close();
-            lazyList = null;
-        }
-    }
-}
\ No newline at end of file
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/controllers/TwitterController.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/controllers/TwitterController.java
deleted file mode 100644
index abd4635..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/controllers/TwitterController.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.controllers;
-
-import com.path.android.jobqueue.examples.twitter.Config;
-import twitter4j.*;
-import twitter4j.auth.AccessToken;
-import twitter4j.conf.ConfigurationBuilder;
-
-import java.util.List;
-
-public class TwitterController {
-    private static TwitterController instance;
-    private Twitter twitter;
-    private Long userId;
-    public static final int PAGE_LENGTH = 20;
-
-
-    public synchronized static TwitterController getInstance() {
-        if(instance == null) {
-            instance = new TwitterController();
-        }
-        return instance;
-    }
-
-    public TwitterController() {
-        twitter = new TwitterFactory(new ConfigurationBuilder()
-        .setOAuthAccessToken(Config.ACCESS_TOKEN)
-        .setOAuthAccessTokenSecret(Config.ACCESS_TOKEN_SECRET)
-        .setDebugEnabled(true)
-        .setOAuthConsumerKey(Config.CONSUMER_KEY)
-        .setOAuthConsumerKey(Config.CONSUMER_SECRET)
-        .build()).getSingleton();
-        AccessToken accessToken = new AccessToken(Config.ACCESS_TOKEN, Config.ACCESS_TOKEN_SECRET);
-        twitter.setOAuthConsumer(Config.CONSUMER_KEY, Config.CONSUMER_SECRET);
-        twitter.setOAuthAccessToken(accessToken);
-    }
-
-    public List<Status> loadTweets(Long sinceId) throws TwitterException {
-        Paging paging = new Paging();
-        paging.setCount(PAGE_LENGTH);
-        if(sinceId != null) {
-            paging.setSinceId(sinceId);
-        }
-        return twitter.getHomeTimeline(paging);
-    }
-
-    public Status postTweet(String status) throws TwitterException {
-        return twitter.updateStatus(status);
-    }
-
-    public long getUserId() throws TwitterException {
-        if(userId == null) {
-            userId = twitter.getId();
-        }
-        return userId;
-
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/entities/Tweet.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/entities/Tweet.java
deleted file mode 100644
index fd2d10e..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/entities/Tweet.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.entities;
-
-
-
-// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
-
-// KEEP INCLUDES - put your custom includes here
-import twitter4j.Status;
-// KEEP INCLUDES END
-/**
- * Entity mapped to table TWEET.
- */
-public class Tweet extends TweetBase  {
-    // KEEP FIELDS - put your custom fields here
-    // KEEP FIELDS END
-    public Tweet() {
-    }
-
-    public Tweet(Long localId) {
-        super(localId);
-    }
-
-    public Tweet(Long localId, Long serverId, String text, Long userId, Boolean isLocal, java.util.Date createdAt) {
-        super(localId, serverId, text, userId, isLocal, createdAt);
-    }
-
-    // KEEP METHODS - put your custom methods here
-    public Tweet(Status status) {
-        super(null, status.getId(), status.getText(), status.getUser().getId(), false, status.getCreatedAt());
-    }
-
-    @Override
-    public void onBeforeSave() {
-        isLocal = serverId == null;
-        super.onBeforeSave();
-    }
-    // KEEP METHODS END
-
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/DeletedTweetEvent.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/DeletedTweetEvent.java
deleted file mode 100644
index 890961c..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/DeletedTweetEvent.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.events;
-
-public class DeletedTweetEvent {
-    private long id;
-    public DeletedTweetEvent(long id) {
-        this.id = id;
-    }
-
-    public long getId() {
-        return id;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/FetchedNewTweetsEvent.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/FetchedNewTweetsEvent.java
deleted file mode 100644
index b822541..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/FetchedNewTweetsEvent.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.events;
-
-public class FetchedNewTweetsEvent {
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/PostedTweetEvent.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/PostedTweetEvent.java
deleted file mode 100644
index 3d54b84..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/PostedTweetEvent.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.events;
-
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-
-public class PostedTweetEvent {
-    private Tweet tweet;
-    private long localId;
-
-    public PostedTweetEvent(Tweet tweet, long localId) {
-        this.tweet = tweet;
-        this.localId = localId;
-    }
-
-    public Tweet getTweet() {
-        return tweet;
-    }
-
-    public long getLocalId() {
-        return localId;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/PostingTweetEvent.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/PostingTweetEvent.java
deleted file mode 100644
index 3caae75..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/events/PostingTweetEvent.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.events;
-
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-
-public class PostingTweetEvent {
-    private Tweet tweeet;
-
-    public PostingTweetEvent(Tweet tweeet) {
-        this.tweeet = tweeet;
-    }
-
-    public Tweet getTweeet() {
-        return tweeet;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java
deleted file mode 100644
index 2276788..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/FetchTweetsJob.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.jobs;
-
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.examples.twitter.controllers.TwitterController;
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-import com.path.android.jobqueue.examples.twitter.events.FetchedNewTweetsEvent;
-import com.path.android.jobqueue.examples.twitter.models.TweetModel;
-import de.greenrobot.event.EventBus;
-import twitter4j.Status;
-import twitter4j.TwitterException;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicInteger;
-
-
-public class FetchTweetsJob extends Job {
-    private static final AtomicInteger jobCounter = new AtomicInteger(0);
-
-    private final int id;
-    public FetchTweetsJob() {
-        super(new Params(Priority.LOW).requireNetwork().groupBy("fetch-tweets"));
-        id = jobCounter.incrementAndGet();
-    }
-
-    @Override
-    public void onAdded() {
-
-    }
-
-    @Override
-    public void onRun() throws Throwable {
-        if(id != jobCounter.get()) {
-            //looks like other fetch jobs has been added after me. no reason to keep fetching
-            //many times, cancel me, let the other one fetch tweets.
-            return;
-        }
-        TweetModel tweetModel = TweetModel.getInstance();
-        Tweet lastTweet = tweetModel.getLastTweet();
-        List<Status> statusList = TwitterController.getInstance().loadTweets(lastTweet == null ? null : lastTweet.getServerId());
-        if(statusList.size() > 0) {
-            List<Tweet> tweets = new ArrayList<Tweet>(statusList.size());
-            for(Status status : statusList) {
-                Tweet tweet = new Tweet(status);
-                tweets.add(tweet);
-            }
-            tweetModel.insertOrReplaceAll(tweets);
-            EventBus.getDefault().post(new FetchedNewTweetsEvent());
-        }
-    }
-
-    @Override
-    protected void onCancel() {
-        //TODO show error notification
-    }
-
-    @Override
-    protected boolean shouldReRunOnThrowable(Throwable throwable) {
-        if(throwable instanceof TwitterException) {
-            //if it is a 4xx error, stop
-            TwitterException twitterException = (TwitterException) throwable;
-            return twitterException.getErrorCode() < 400 || twitterException.getErrorCode() > 499;
-        }
-        return true;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java
deleted file mode 100644
index a83ef66..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/PostTweetJob.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.jobs;
-
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.examples.twitter.controllers.TwitterController;
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-import com.path.android.jobqueue.examples.twitter.events.DeletedTweetEvent;
-import com.path.android.jobqueue.examples.twitter.events.PostedTweetEvent;
-import com.path.android.jobqueue.examples.twitter.events.PostingTweetEvent;
-import com.path.android.jobqueue.examples.twitter.models.TweetModel;
-import de.greenrobot.event.EventBus;
-import twitter4j.Status;
-import twitter4j.TwitterException;
-
-import java.util.Date;
-
-public class PostTweetJob extends Job {
-    private long localId;
-    private String text;
-    public PostTweetJob(String text) {
-        super(new Params(Priority.MID).requireNetwork().persist().groupBy("post_tweet"));//order of tweets matter, we don't want to send two in parallel
-        //use a negative id so that it cannot collide w/ twitter ids
-        //we have to set local id here so it gets serialized into job (to find tweet later on)
-        localId = -System.currentTimeMillis();
-        this.text = text;
-    }
-
-    @Override
-    public void onAdded() {
-        //job has been secured to disk, add item to database
-        try {
-            Tweet tweet = new Tweet(
-                    localId,
-                    null,
-                    text,
-                    TwitterController.getInstance().getUserId(),
-                    null,
-                    new Date(System.currentTimeMillis())
-            );
-            TweetModel.getInstance().insertOrReplace(tweet);
-            EventBus.getDefault().post(new PostingTweetEvent(tweet));
-        } catch (TwitterException exception) {
-            //if we cannot get user id, we won't add it locally for now.
-        }
-    }
-
-    @Override
-    public void onRun() throws Throwable {
-        Status status = TwitterController.getInstance().postTweet(text);
-        Tweet newTweet = new Tweet(status);
-        TweetModel tweetModel = TweetModel.getInstance();
-        Tweet existingTweet = tweetModel.getTweetByLocalId(localId);
-        if(existingTweet != null) {
-            existingTweet.updateNotNull(newTweet);
-            //don't set local to false. this way, next time we ask for history update, we'll send proper tweet id
-            tweetModel.insertOrReplace(existingTweet);
-        } else {
-            //somewhat local tweet does not exist. we might have crashed before onAdded is called.
-            //just insert as if it is a new tweet
-            tweetModel.insertOrReplace(newTweet);
-        }
-        EventBus.getDefault().post(new PostedTweetEvent(newTweet, localId));
-    }
-
-    @Override
-    protected void onCancel() {
-        //delete local tweet
-        Tweet localTweet = TweetModel.getInstance().getTweetByLocalId(localId);
-        if(localTweet != null) {
-            TweetModel.getInstance().deleteTweetById(localId);
-            EventBus.getDefault().post(new DeletedTweetEvent(localId));
-        }
-    }
-
-    @Override
-    protected boolean shouldReRunOnThrowable(Throwable throwable) {
-        if(throwable instanceof TwitterException) {
-            //if it is a 4xx error, stop
-            TwitterException twitterException = (TwitterException) throwable;
-            return twitterException.getStatusCode() < 400 || twitterException.getStatusCode() > 499;
-        }
-        return true;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/Priority.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/Priority.java
deleted file mode 100644
index 569aeea..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/jobs/Priority.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.jobs;
-
-public class Priority {
-    public static int LOW = 0;
-    public static int MID = 500;
-    public static int HIGH = 1000;
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/models/DbHelper.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/models/DbHelper.java
deleted file mode 100644
index 2632ed2..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/models/DbHelper.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.models;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import com.path.android.jobqueue.examples.twitter.TwitterApplication;
-import com.path.android.jobqueue.examples.twitter.dao.DaoMaster;
-import com.path.android.jobqueue.examples.twitter.dao.DaoSession;
-import com.path.android.jobqueue.persistentQueue.sqlite.DbOpenHelper;
-import de.greenrobot.dao.DbUtils;
-import de.greenrobot.dao.Query;
-
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class DbHelper {
-    private static DbHelper instance;
-    private DaoSession daoSession;
-    private DaoMaster daoMaster;
-    private SQLiteDatabase db;
-
-    public synchronized static DbHelper getInstance() {
-        if(instance == null) {
-            instance = new DbHelper();
-        }
-        return instance;
-    }
-
-    public DbHelper() {
-        Context appContext = TwitterApplication.getInstance().getApplicationContext();
-        DaoMaster.DevOpenHelper devOpenHelper = new DaoMaster.DevOpenHelper(appContext, "twitter", null);
-        db = devOpenHelper.getWritableDatabase();
-        daoMaster = new DaoMaster(db);
-        daoSession = daoMaster.newSession();
-    }
-
-    public DaoSession getDaoSession() {
-        return daoSession;
-    }
-
-    public DaoMaster getDaoMaster() {
-        return daoMaster;
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/models/TweetModel.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/models/TweetModel.java
deleted file mode 100644
index 5168ee8..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/models/TweetModel.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.models;
-
-import com.path.android.jobqueue.examples.twitter.dao.TweetDao;
-import com.path.android.jobqueue.examples.twitter.entities.Tweet;
-import de.greenrobot.dao.LazyList;
-
-import java.util.Collection;
-
-public class TweetModel {
-    private static TweetModel instance;
-    private TweetDao tweetDao;
-
-    public synchronized static TweetModel getInstance() {
-        if(instance == null) {
-            instance = new TweetModel();
-        }
-        return instance;
-    }
-
-    private TweetModel() {
-        tweetDao = DbHelper.getInstance().getDaoSession().getTweetDao();
-    }
-
-    public Tweet getLastTweet() {
-        return tweetDao.queryBuilder().where(TweetDao.Properties.ServerId.isNotNull())
-                .orderDesc(TweetDao.Properties.CreatedAt)
-                .limit(1).unique();
-    }
-
-    public void insertOrReplace(Tweet tweet) {
-        tweetDao.insertOrReplace(tweet);
-    }
-
-    public void insertOrReplaceAll(Collection<Tweet> tweets) {
-        tweetDao.insertOrReplaceInTx(tweets);
-    }
-
-    public LazyList<Tweet> lazyLoadTweets() {
-        return tweetDao.queryBuilder().orderDesc(TweetDao.Properties.IsLocal, TweetDao.Properties.CreatedAt).listLazy();
-
-    }
-
-    public Tweet getTweetByLocalId(long localId) {
-        return tweetDao.queryBuilder().where(TweetDao.Properties.LocalId.eq(localId)).limit(1).unique();
-    }
-
-    public void deleteTweetById(long localId) {
-        tweetDao.deleteByKey(localId);
-    }
-}
diff --git a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/tasks/SimpleBackgroundTask.java b/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/tasks/SimpleBackgroundTask.java
deleted file mode 100644
index 08935c8..0000000
--- a/examples/twitter/TwitterClient/src/com/path/android/jobqueue/examples/twitter/tasks/SimpleBackgroundTask.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.path.android.jobqueue.examples.twitter.tasks;
-
-import android.app.Activity;
-import android.os.AsyncTask;
-
-import java.lang.ref.WeakReference;
-
-abstract public class SimpleBackgroundTask<T> extends AsyncTask<Void, Void, T> {
-    WeakReference<Activity> weakActivity;
-    public SimpleBackgroundTask(Activity activity) {
-        weakActivity = new WeakReference<Activity>(activity);
-    }
-    @Override
-    protected final T doInBackground(Void... voids) {
-        return onRun();
-    }
-
-    private boolean canContinue() {
-        Activity activity = weakActivity.get();
-        return activity != null && activity.isFinishing() == false;
-    }
-
-    @Override
-    protected void onPostExecute(T t) {
-        if(canContinue()) {
-            onSuccess(t);
-        }
-    }
-
-    abstract protected T onRun();
-
-    abstract protected void onSuccess(T result);
-}
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000..1d3591c
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,18 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..8c0fb64
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
similarity index 52%
rename from jobqueue/gradle/wrapper/gradle-wrapper.properties
rename to gradle/wrapper/gradle-wrapper.properties
index 59739c3..0c71e76 100644
--- a/jobqueue/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Jan 30 14:19:18 PST 2014
+#Wed Apr 10 15:27:10 PDT 2013
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/examples/twitter/TwitterClient/gradlew b/gradlew
old mode 100755
new mode 100644
similarity index 100%
rename from examples/twitter/TwitterClient/gradlew
rename to gradlew
diff --git a/jobqueue/gradlew.bat b/gradlew.bat
similarity index 96%
rename from jobqueue/gradlew.bat
rename to gradlew.bat
index aec9973..8a0b282 100644
--- a/jobqueue/gradlew.bat
+++ b/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/jobmanagerlib/.gitignore b/jobmanagerlib/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/jobmanagerlib/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/jobmanagerlib/build.gradle b/jobmanagerlib/build.gradle
new file mode 100644
index 0000000..efba9c2
--- /dev/null
+++ b/jobmanagerlib/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion "21.1.2"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 21
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+}
diff --git a/examples/twitter/TwitterClient/proguard-project.txt b/jobmanagerlib/proguard-rules.pro
similarity index 62%
rename from examples/twitter/TwitterClient/proguard-project.txt
rename to jobmanagerlib/proguard-rules.pro
index f2fe155..70d7fe2 100644
--- a/examples/twitter/TwitterClient/proguard-project.txt
+++ b/jobmanagerlib/proguard-rules.pro
@@ -1,11 +1,8 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
 # Add project specific ProGuard rules here.
 # By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
+# in C:/Programs/AndroidSDK/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
 #
 # For more details, see
 #   http://developer.android.com/guide/developing/tools/proguard.html
diff --git a/jobmanagerlib/src/main/AndroidManifest.xml b/jobmanagerlib/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..29dedc3
--- /dev/null
+++ b/jobmanagerlib/src/main/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.spix.jobqueue">
+
+    <application android:allowBackup="true">
+
+    </application>
+
+</manifest>
diff --git a/jobqueue/src/com/path/android/jobqueue/AsyncAddCallback.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/AsyncAddCallback.java
similarity index 92%
rename from jobqueue/src/com/path/android/jobqueue/AsyncAddCallback.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/AsyncAddCallback.java
index 2b464e6..9740027 100644
--- a/jobqueue/src/com/path/android/jobqueue/AsyncAddCallback.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/AsyncAddCallback.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 import android.app.Activity;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/BaseJob.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/BaseJob.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
index 0343605..6139d92 100644
--- a/jobqueue/src/com/path/android/jobqueue/BaseJob.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
@@ -1,6 +1,6 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
-import com.path.android.jobqueue.log.JqLog;
+import com.spix.jobqueue.log.JqLog;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -134,7 +134,7 @@ public final boolean safeRun(int currentRunCount) {
     }
 
     /**
-     * before each run, JobManager sets this number. Might be useful for the {@link com.path.android.jobqueue.BaseJob#onRun()}
+     * before each run, JobManager sets this number. Might be useful for the {@link BaseJob#onRun()}
      * method
      * @return
      */
@@ -143,7 +143,7 @@ protected int getCurrentRunCount() {
     }
 
     /**
-     * if job is set to require network, it will not be called unless {@link com.path.android.jobqueue.network.NetworkUtil}
+     * if job is set to require network, it will not be called unless {@link com.spix.jobqueue.network.NetworkUtil}
      * reports that there is a network connection
      * @return
      */
diff --git a/jobqueue/src/com/path/android/jobqueue/CopyOnWriteGroupSet.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/CopyOnWriteGroupSet.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/CopyOnWriteGroupSet.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/CopyOnWriteGroupSet.java
index 9ac0e97..9d97c00 100644
--- a/jobqueue/src/com/path/android/jobqueue/CopyOnWriteGroupSet.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/CopyOnWriteGroupSet.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 import java.util.ArrayList;
 import java.util.Collection;
diff --git a/jobqueue/src/com/path/android/jobqueue/Job.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/Job.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/Job.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/Job.java
index 15011dc..f84016e 100644
--- a/jobqueue/src/com/path/android/jobqueue/Job.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/Job.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 import java.io.Serializable;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/JobHolder.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobHolder.java
similarity index 95%
rename from jobqueue/src/com/path/android/jobqueue/JobHolder.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/JobHolder.java
index d8a32ba..edb90c6 100644
--- a/jobqueue/src/com/path/android/jobqueue/JobHolder.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobHolder.java
@@ -1,143 +1,143 @@
-package com.path.android.jobqueue;
-
-/**
- * Container class to address Jobs inside job manager.
- */
-public class JobHolder {
-    protected Long id;
-    protected int priority;
-    protected String groupId;
-    protected int runCount;
-    /**
-     * job will be delayed until this nanotime
-     */
-    protected long delayUntilNs;
-    /**
-     * When job is created, System.nanoTime() is assigned to {@code createdNs} value so that we know when job is created
-     * in relation to others
-     */
-    protected long createdNs;
-    protected long runningSessionId;
-    protected boolean requiresNetwork;
-    transient BaseJob baseJob;
-
-    /**
-     * @param id               Unique ID for the job. Should be unique per queue
-     * @param priority         Higher is better
-     * @param groupId          which group does this job belong to? default null
-     * @param runCount         Incremented each time job is fetched to run, initial value should be 0
-     * @param baseJob          Actual job to run
-     * @param createdNs        System.nanotime
-     * @param delayUntilNs     System.nanotime value where job can be run the very first time
-     * @param runningSessionId
-     */
-    public JobHolder(Long id, int priority, String groupId, int runCount, BaseJob baseJob, long createdNs, long delayUntilNs, long runningSessionId) {
-        this.id = id;
-        this.priority = priority;
-        this.groupId = groupId;
-        this.runCount = runCount;
-        this.createdNs = createdNs;
-        this.delayUntilNs = delayUntilNs;
-        this.baseJob = baseJob;
-        this.runningSessionId = runningSessionId;
-        this.requiresNetwork = baseJob.requiresNetwork();
-    }
-
-    public JobHolder(int priority, BaseJob baseJob, long runningSessionId) {
-        this(null, priority, null, 0, baseJob, System.nanoTime(), Long.MIN_VALUE, runningSessionId);
-    }
-
-    public JobHolder(int priority, BaseJob baseJob, long delayUntilNs, long runningSessionId) {
-        this(null, priority, baseJob.getRunGroupId(), 0, baseJob, System.nanoTime(), delayUntilNs, runningSessionId);
-    }
-
-    /**
-     * runs the job w/o throwing any exceptions
-     * @param currentRunCount
-     * @return
-     */
-    public final boolean safeRun(int currentRunCount) {
-        return baseJob.safeRun(currentRunCount);
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public boolean requiresNetwork() {
-        return requiresNetwork;
-    }
-
-    public int getPriority() {
-        return priority;
-    }
-
-    public void setPriority(int priority) {
-        this.priority = priority;
-    }
-
-    public int getRunCount() {
-        return runCount;
-    }
-
-    public void setRunCount(int runCount) {
-        this.runCount = runCount;
-    }
-
-    public long getCreatedNs() {
-        return createdNs;
-    }
-
-    public void setCreatedNs(long createdNs) {
-        this.createdNs = createdNs;
-    }
-
-    public long getRunningSessionId() {
-        return runningSessionId;
-    }
-
-    public void setRunningSessionId(long runningSessionId) {
-        this.runningSessionId = runningSessionId;
-    }
-
-    public long getDelayUntilNs() {
-        return delayUntilNs;
-    }
-
-    public BaseJob getBaseJob() {
-        return baseJob;
-    }
-
-    public void setBaseJob(BaseJob baseJob) {
-        this.baseJob = baseJob;
-    }
-
-    public String getGroupId() {
-        return groupId;
-    }
-
-    @Override
-    public int hashCode() {
-        //we don't really care about overflow.
-        if(id == null) {
-            return super.hashCode();
-        }
-        return id.intValue();
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if(o instanceof JobHolder == false) {
-            return false;
-        }
-        JobHolder other = (JobHolder) o;
-        if(id == null || other.id == null) {
-            return false;
-        }
-        return id.equals(other.id);
-    }
-}
+package com.spix.jobqueue;
+
+/**
+ * Container class to address Jobs inside job manager.
+ */
+public class JobHolder {
+    protected Long id;
+    protected int priority;
+    protected String groupId;
+    protected int runCount;
+    /**
+     * job will be delayed until this nanotime
+     */
+    protected long delayUntilNs;
+    /**
+     * When job is created, System.nanoTime() is assigned to {@code createdNs} value so that we know when job is created
+     * in relation to others
+     */
+    protected long createdNs;
+    protected long runningSessionId;
+    protected boolean requiresNetwork;
+    transient BaseJob baseJob;
+
+    /**
+     * @param id               Unique ID for the job. Should be unique per queue
+     * @param priority         Higher is better
+     * @param groupId          which group does this job belong to? default null
+     * @param runCount         Incremented each time job is fetched to run, initial value should be 0
+     * @param baseJob          Actual job to run
+     * @param createdNs        System.nanotime
+     * @param delayUntilNs     System.nanotime value where job can be run the very first time
+     * @param runningSessionId
+     */
+    public JobHolder(Long id, int priority, String groupId, int runCount, BaseJob baseJob, long createdNs, long delayUntilNs, long runningSessionId) {
+        this.id = id;
+        this.priority = priority;
+        this.groupId = groupId;
+        this.runCount = runCount;
+        this.createdNs = createdNs;
+        this.delayUntilNs = delayUntilNs;
+        this.baseJob = baseJob;
+        this.runningSessionId = runningSessionId;
+        this.requiresNetwork = baseJob.requiresNetwork();
+    }
+
+    public JobHolder(int priority, BaseJob baseJob, long runningSessionId) {
+        this(null, priority, null, 0, baseJob, System.nanoTime(), Long.MIN_VALUE, runningSessionId);
+    }
+
+    public JobHolder(int priority, BaseJob baseJob, long delayUntilNs, long runningSessionId) {
+        this(null, priority, baseJob.getRunGroupId(), 0, baseJob, System.nanoTime(), delayUntilNs, runningSessionId);
+    }
+
+    /**
+     * runs the job w/o throwing any exceptions
+     * @param currentRunCount
+     * @return
+     */
+    public final boolean safeRun(int currentRunCount) {
+        return baseJob.safeRun(currentRunCount);
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public boolean requiresNetwork() {
+        return requiresNetwork;
+    }
+
+    public int getPriority() {
+        return priority;
+    }
+
+    public void setPriority(int priority) {
+        this.priority = priority;
+    }
+
+    public int getRunCount() {
+        return runCount;
+    }
+
+    public void setRunCount(int runCount) {
+        this.runCount = runCount;
+    }
+
+    public long getCreatedNs() {
+        return createdNs;
+    }
+
+    public void setCreatedNs(long createdNs) {
+        this.createdNs = createdNs;
+    }
+
+    public long getRunningSessionId() {
+        return runningSessionId;
+    }
+
+    public void setRunningSessionId(long runningSessionId) {
+        this.runningSessionId = runningSessionId;
+    }
+
+    public long getDelayUntilNs() {
+        return delayUntilNs;
+    }
+
+    public BaseJob getBaseJob() {
+        return baseJob;
+    }
+
+    public void setBaseJob(BaseJob baseJob) {
+        this.baseJob = baseJob;
+    }
+
+    public String getGroupId() {
+        return groupId;
+    }
+
+    @Override
+    public int hashCode() {
+        //we don't really care about overflow.
+        if(id == null) {
+            return super.hashCode();
+        }
+        return id.intValue();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if(o instanceof JobHolder == false) {
+            return false;
+        }
+        JobHolder other = (JobHolder) o;
+        if(id == null || other.id == null) {
+            return false;
+        }
+        return id.equals(other.id);
+    }
+}
diff --git a/jobqueue/src/com/path/android/jobqueue/JobManager.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
similarity index 97%
rename from jobqueue/src/com/path/android/jobqueue/JobManager.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
index 1ac6968..64d30a8 100644
--- a/jobqueue/src/com/path/android/jobqueue/JobManager.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
@@ -1,15 +1,15 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 import android.content.Context;
-import com.path.android.jobqueue.cachedQueue.CachedJobQueue;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.di.DependencyInjector;
-import com.path.android.jobqueue.executor.JobConsumerExecutor;
-import com.path.android.jobqueue.log.JqLog;
-import com.path.android.jobqueue.network.NetworkEventProvider;
-import com.path.android.jobqueue.network.NetworkUtil;
-import com.path.android.jobqueue.nonPersistentQueue.NonPersistentPriorityQueue;
-import com.path.android.jobqueue.persistentQueue.sqlite.SqliteJobQueue;
+import com.spix.jobqueue.cachedQueue.CachedJobQueue;
+import com.spix.jobqueue.config.Configuration;
+import com.spix.jobqueue.di.DependencyInjector;
+import com.spix.jobqueue.executor.JobConsumerExecutor;
+import com.spix.jobqueue.log.JqLog;
+import com.spix.jobqueue.network.NetworkEventProvider;
+import com.spix.jobqueue.network.NetworkUtil;
+import com.spix.jobqueue.nonPersistentQueue.NonPersistentPriorityQueue;
+import com.spix.jobqueue.sqlite.SqliteJobQueue;
 
 import java.util.Collection;
 import java.util.concurrent.*;
diff --git a/jobqueue/src/com/path/android/jobqueue/JobQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobQueue.java
similarity index 98%
rename from jobqueue/src/com/path/android/jobqueue/JobQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/JobQueue.java
index a149a00..0af8dfa 100644
--- a/jobqueue/src/com/path/android/jobqueue/JobQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobQueue.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 import java.util.Collection;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/JobStatus.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobStatus.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/JobStatus.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/JobStatus.java
index b687cc3..6ed2357 100644
--- a/jobqueue/src/com/path/android/jobqueue/JobStatus.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobStatus.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 /**
  * Identifies the current status of a job if it is in the queue
diff --git a/jobqueue/src/com/path/android/jobqueue/Params.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/Params.java
similarity index 98%
rename from jobqueue/src/com/path/android/jobqueue/Params.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/Params.java
index 1695d94..02e4783 100644
--- a/jobqueue/src/com/path/android/jobqueue/Params.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/Params.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 /**
  * BaseJob builder object to have a more readable design.
diff --git a/jobqueue/src/com/path/android/jobqueue/QueueFactory.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/QueueFactory.java
similarity index 89%
rename from jobqueue/src/com/path/android/jobqueue/QueueFactory.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/QueueFactory.java
index 5110677..58d77d3 100644
--- a/jobqueue/src/com/path/android/jobqueue/QueueFactory.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/QueueFactory.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue;
+package com.spix.jobqueue;
 
 import android.content.Context;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/cachedQueue/CachedJobQueue.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/cachedQueue/CachedJobQueue.java
index c373c99..724dd58 100644
--- a/jobqueue/src/com/path/android/jobqueue/cachedQueue/CachedJobQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/cachedQueue/CachedJobQueue.java
@@ -1,7 +1,7 @@
-package com.path.android.jobqueue.cachedQueue;
+package com.spix.jobqueue.cachedQueue;
 
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobQueue;
+import com.spix.jobqueue.JobHolder;
+import com.spix.jobqueue.JobQueue;
 
 import java.util.Collection;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/config/Configuration.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/config/Configuration.java
similarity index 91%
rename from jobqueue/src/com/path/android/jobqueue/config/Configuration.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/config/Configuration.java
index 6fb3fca..e9961a6 100644
--- a/jobqueue/src/com/path/android/jobqueue/config/Configuration.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/config/Configuration.java
@@ -1,19 +1,19 @@
-package com.path.android.jobqueue.config;
+package com.spix.jobqueue.config;
 
 import android.content.Context;
 import android.net.ConnectivityManager;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.QueueFactory;
-import com.path.android.jobqueue.di.DependencyInjector;
-import com.path.android.jobqueue.log.CustomLogger;
-import com.path.android.jobqueue.network.NetworkUtil;
-import com.path.android.jobqueue.network.NetworkUtilImpl;
-import com.path.android.jobqueue.nonPersistentQueue.NonPersistentPriorityQueue;
-import com.path.android.jobqueue.persistentQueue.sqlite.SqliteJobQueue;
+import com.spix.jobqueue.JobManager;
+import com.spix.jobqueue.JobQueue;
+import com.spix.jobqueue.QueueFactory;
+import com.spix.jobqueue.di.DependencyInjector;
+import com.spix.jobqueue.log.CustomLogger;
+import com.spix.jobqueue.network.NetworkUtil;
+import com.spix.jobqueue.network.NetworkUtilImpl;
+import com.spix.jobqueue.nonPersistentQueue.NonPersistentPriorityQueue;
+import com.spix.jobqueue.sqlite.SqliteJobQueue;
 
 /**
- * {@link com.path.android.jobqueue.JobManager} configuration object
+ * {@link com.spix.jobqueue.JobManager} configuration object
  */
 public class Configuration {
     public static final String DEFAULT_ID = "default_job_manager";
diff --git a/jobqueue/src/com/path/android/jobqueue/di/DependencyInjector.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/di/DependencyInjector.java
similarity index 53%
rename from jobqueue/src/com/path/android/jobqueue/di/DependencyInjector.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/di/DependencyInjector.java
index 7ff7b49..b7b868a 100644
--- a/jobqueue/src/com/path/android/jobqueue/di/DependencyInjector.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/di/DependencyInjector.java
@@ -1,9 +1,9 @@
-package com.path.android.jobqueue.di;
+package com.spix.jobqueue.di;
 
-import com.path.android.jobqueue.BaseJob;
+import com.spix.jobqueue.BaseJob;
 
 /**
- * interface that can be provided to {@link com.path.android.jobqueue.JobManager} for dependency injection
+ * interface that can be provided to {@link com.spix.jobqueue.JobManager} for dependency injection
  * it is called before the job's onAdded method is called. for persistent jobs, also run after job is brought
  * back from disk.
  */
diff --git a/jobqueue/src/com/path/android/jobqueue/executor/JobConsumerExecutor.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/executor/JobConsumerExecutor.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/executor/JobConsumerExecutor.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/executor/JobConsumerExecutor.java
index 139d92c..1e28fbb 100644
--- a/jobqueue/src/com/path/android/jobqueue/executor/JobConsumerExecutor.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/executor/JobConsumerExecutor.java
@@ -1,10 +1,10 @@
-package com.path.android.jobqueue.executor;
+package com.spix.jobqueue.executor;
 
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.log.JqLog;
+import com.spix.jobqueue.JobHolder;
+import com.spix.jobqueue.JobManager;
+import com.spix.jobqueue.JobQueue;
+import com.spix.jobqueue.config.Configuration;
+import com.spix.jobqueue.log.JqLog;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
diff --git a/jobqueue/src/com/path/android/jobqueue/log/CustomLogger.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/log/CustomLogger.java
similarity index 86%
rename from jobqueue/src/com/path/android/jobqueue/log/CustomLogger.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/log/CustomLogger.java
index 9e889ba..7be1085 100644
--- a/jobqueue/src/com/path/android/jobqueue/log/CustomLogger.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/log/CustomLogger.java
@@ -1,7 +1,7 @@
-package com.path.android.jobqueue.log;
+package com.spix.jobqueue.log;
 
 /**
- * You can provide your own logger implementation to {@link com.path.android.jobqueue.JobManager}
+ * You can provide your own logger implementation to {@link com.spix.jobqueue.JobManager}
  * it is very similar to Roboguice's logger
  */
 public interface CustomLogger {
diff --git a/jobqueue/src/com/path/android/jobqueue/log/JqLog.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/log/JqLog.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/log/JqLog.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/log/JqLog.java
index 2ae409b..fd84c0c 100644
--- a/jobqueue/src/com/path/android/jobqueue/log/JqLog.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/log/JqLog.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue.log;
+package com.spix.jobqueue.log;
 
 /**
  * Wrapper around {@link CustomLogger}. by default, logs to nowhere
diff --git a/jobqueue/src/com/path/android/jobqueue/network/NetworkEventProvider.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkEventProvider.java
similarity index 87%
rename from jobqueue/src/com/path/android/jobqueue/network/NetworkEventProvider.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkEventProvider.java
index 732664b..a50ee04 100644
--- a/jobqueue/src/com/path/android/jobqueue/network/NetworkEventProvider.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkEventProvider.java
@@ -1,8 +1,8 @@
-package com.path.android.jobqueue.network;
+package com.spix.jobqueue.network;
 
 /**
  * An interface that NetworkUtil can implement if it supports a callback method when network state is changed
- * This is not mandatory but highly suggested so that {@link com.path.android.jobqueue.JobManager} can avoid
+ * This is not mandatory but highly suggested so that {@link com.spix.jobqueue.JobManager} can avoid
  * busy loops when there is a job waiting for network and there is no network available
  */
 public interface NetworkEventProvider {
diff --git a/jobqueue/src/com/path/android/jobqueue/network/NetworkUtil.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkUtil.java
similarity index 87%
rename from jobqueue/src/com/path/android/jobqueue/network/NetworkUtil.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkUtil.java
index 0b58e38..45e9030 100644
--- a/jobqueue/src/com/path/android/jobqueue/network/NetworkUtil.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkUtil.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue.network;
+package com.spix.jobqueue.network;
 
 import android.content.Context;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/network/NetworkUtilImpl.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkUtilImpl.java
similarity index 97%
rename from jobqueue/src/com/path/android/jobqueue/network/NetworkUtilImpl.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkUtilImpl.java
index b5422a5..e747b41 100644
--- a/jobqueue/src/com/path/android/jobqueue/network/NetworkUtilImpl.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/network/NetworkUtilImpl.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue.network;
+package com.spix.jobqueue.network;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/ConsistentTimedComparator.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/ConsistentTimedComparator.java
similarity index 88%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/ConsistentTimedComparator.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/ConsistentTimedComparator.java
index 5316ae6..65ccb64 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/ConsistentTimedComparator.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/ConsistentTimedComparator.java
@@ -1,6 +1,6 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
+import com.spix.jobqueue.JobHolder;
 
 import java.util.Comparator;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/CountWithGroupIdsResult.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/CountWithGroupIdsResult.java
similarity index 95%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/CountWithGroupIdsResult.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/CountWithGroupIdsResult.java
index 1d5bb35..b99f241 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/CountWithGroupIdsResult.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/CountWithGroupIdsResult.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
 import java.util.Set;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/JobSet.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/JobSet.java
similarity index 86%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/JobSet.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/JobSet.java
index b084a0e..6cdc578 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/JobSet.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/JobSet.java
@@ -1,6 +1,6 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
+import com.spix.jobqueue.JobHolder;
 
 import java.util.Collection;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/MergedQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/MergedQueue.java
similarity index 95%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/MergedQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/MergedQueue.java
index f32fd7c..72f9e0d 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/MergedQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/MergedQueue.java
@@ -1,6 +1,6 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
+import com.spix.jobqueue.JobHolder;
 
 import java.util.*;
 
@@ -18,8 +18,8 @@
 
     /**
      *
-     * @param initialCapacity passed to {@link MergedQueue#createQueue(com.path.android.jobqueue.nonPersistentQueue.MergedQueue.SetId, int, java.util.Comparator)}
-     * @param comparator passed to {@link MergedQueue#createQueue(com.path.android.jobqueue.nonPersistentQueue.MergedQueue.SetId, int, java.util.Comparator)}
+     * @param initialCapacity passed to {@link MergedQueue#createQueue(com.spix.jobqueue.nonPersistentQueue.MergedQueue.SetId, int, java.util.Comparator)}
+     * @param comparator passed to {@link MergedQueue#createQueue(com.spix.jobqueue.nonPersistentQueue.MergedQueue.SetId, int, java.util.Comparator)}
      * @param retrieveComparator upon retrieval, if both queues return items, this comparator is used to decide which
      *                           one should be returned
      */
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NetworkAwarePriorityQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NetworkAwarePriorityQueue.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NetworkAwarePriorityQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NetworkAwarePriorityQueue.java
index 24f20b7..64324fb 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NetworkAwarePriorityQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NetworkAwarePriorityQueue.java
@@ -1,10 +1,9 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
+import com.spix.jobqueue.JobHolder;
 
 import java.util.Collection;
 import java.util.Comparator;
-import java.util.Queue;
 
 /**
  * A {@link MergedQueue} class that can separate jobs based on their network requirement
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NonPersistentJobSet.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NonPersistentJobSet.java
similarity index 97%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NonPersistentJobSet.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NonPersistentJobSet.java
index aec9272..eefe29f 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NonPersistentJobSet.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NonPersistentJobSet.java
@@ -1,7 +1,7 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.log.JqLog;
+import com.spix.jobqueue.JobHolder;
+import com.spix.jobqueue.log.JqLog;
 
 import java.util.Collection;
 import java.util.Comparator;
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
similarity index 95%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
index 627d09b..6b9306e 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/NonPersistentPriorityQueue.java
@@ -1,8 +1,8 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
+import com.spix.jobqueue.JobHolder;
+import com.spix.jobqueue.JobManager;
+import com.spix.jobqueue.JobQueue;
 
 import java.util.*;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/TimeAwareComparator.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/TimeAwareComparator.java
similarity index 93%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/TimeAwareComparator.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/TimeAwareComparator.java
index 252b4ab..e15906b 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/TimeAwareComparator.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/TimeAwareComparator.java
@@ -1,6 +1,6 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
+import com.spix.jobqueue.JobHolder;
 
 import java.util.Comparator;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/TimeAwarePriorityQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/TimeAwarePriorityQueue.java
similarity index 95%
rename from jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/TimeAwarePriorityQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/TimeAwarePriorityQueue.java
index 5d8863a..dda6fc9 100644
--- a/jobqueue/src/com/path/android/jobqueue/nonPersistentQueue/TimeAwarePriorityQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/nonPersistentQueue/TimeAwarePriorityQueue.java
@@ -1,6 +1,6 @@
-package com.path.android.jobqueue.nonPersistentQueue;
+package com.spix.jobqueue.nonPersistentQueue;
 
-import com.path.android.jobqueue.JobHolder;
+import com.spix.jobqueue.JobHolder;
 
 import java.util.*;
 
diff --git a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/DbOpenHelper.java
similarity index 97%
rename from jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/DbOpenHelper.java
index 2dd8dba..7ac6aaa 100644
--- a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/DbOpenHelper.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue.persistentQueue.sqlite;
+package com.spix.jobqueue.sqlite;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
diff --git a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/QueryCache.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/QueryCache.java
similarity index 96%
rename from jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/QueryCache.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/QueryCache.java
index 43eba4e..07a5988 100644
--- a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/QueryCache.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/QueryCache.java
@@ -1,4 +1,4 @@
-package com.path.android.jobqueue.persistentQueue.sqlite;
+package com.spix.jobqueue.sqlite;
 
 import java.util.Collection;
 import java.util.HashMap;
diff --git a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/SqlHelper.java
similarity index 98%
rename from jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/SqlHelper.java
index 50e3ad7..b540e37 100644
--- a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/SqlHelper.java
@@ -1,8 +1,8 @@
-package com.path.android.jobqueue.persistentQueue.sqlite;
+package com.spix.jobqueue.sqlite;
 
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
-import com.path.android.jobqueue.log.JqLog;
+import com.spix.jobqueue.log.JqLog;
 
 /**
  * Helper class for {@link SqliteJobQueue} to generate sql queries and statements.
diff --git a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/SqliteJobQueue.java
similarity index 97%
rename from jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
rename to jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/SqliteJobQueue.java
index eefc667..67ee62d 100644
--- a/jobqueue/src/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/sqlite/SqliteJobQueue.java
@@ -1,15 +1,15 @@
-package com.path.android.jobqueue.persistentQueue.sqlite;
+package com.spix.jobqueue.sqlite;
 
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteDoneException;
 import android.database.sqlite.SQLiteStatement;
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.log.JqLog;
+import com.spix.jobqueue.BaseJob;
+import com.spix.jobqueue.JobHolder;
+import com.spix.jobqueue.JobManager;
+import com.spix.jobqueue.JobQueue;
+import com.spix.jobqueue.log.JqLog;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
diff --git a/jobqueue/AndroidManifest.xml b/jobqueue/AndroidManifest.xml
deleted file mode 100644
index 7e37c4b..0000000
--- a/jobqueue/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.path.android.jobqueue"
-          android:versionCode="2"
-          android:versionName="1.1.2">
-    <application android:label="">
-    </application>
-</manifest>
diff --git a/jobqueue/LICENSE.txt b/jobqueue/LICENSE.txt
deleted file mode 100644
index bde5e4c..0000000
--- a/jobqueue/LICENSE.txt
+++ /dev/null
@@ -1,21 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) 2013 Path, Inc.
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
\ No newline at end of file
diff --git a/jobqueue/ant.properties b/jobqueue/ant.properties
deleted file mode 100644
index a756086..0000000
--- a/jobqueue/ant.properties
+++ /dev/null
@@ -1,21 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-test.dir=test
-test.external.libs.dir=test-libs
-source.dir=src
-tmp.dir=tmp
diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
deleted file mode 100644
index e6d5fbf..0000000
--- a/jobqueue/build.gradle
+++ /dev/null
@@ -1,156 +0,0 @@
-import java.util.regex.Pattern
-task wrapper(type: Wrapper) {
-    gradleVersion = '1.10'
-}
-
-apply plugin: 'maven'
-apply plugin: 'signing'
-
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:0.8.+'
-    }
-}
-
-configurations {
-    archives {
-        extendsFrom configurations.default
-    }
-}
-
-apply plugin: 'android-library'
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19.0.1"
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
-
-//READ VERSION NAME
-def manifestFile = file("AndroidManifest.xml")
-def pattern = Pattern.compile("versionName=\"([\\d\\.\\w\\-]+)\"")
-def manifestText = manifestFile.getText()
-def matcher = pattern.matcher(manifestText)
-matcher.find()
-def manifestVersionName = matcher.group(1)
-println "version name:${manifestVersionName}"
-
-//create jar tasks
-android.libraryVariants.all { variant ->
-    def name = variant.buildType.name
-    println "checking variant ${name}"
-    if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
-        return; // Skip debug builds.
-    }
-    def suffix = name.capitalize()
-    println "found release variant"
-    def jarTask = project.tasks.create(name: "jar${suffix}", type: Jar){
-        dependsOn variant.javaCompile
-        from variant.javaCompile.destinationDir
-        from 'LICENSE.txt'
-    }
-    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
-        source = variant.javaCompile.source
-        ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
-        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
-    }
-
-    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
-        classifier = 'javadoc'
-        from 'build/docs/javadoc'
-    }
-
-    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
-        from android.sourceSets.main.allSource
-        classifier = 'sources'
-    }
-    artifacts.add('archives', jarTask);
-    artifacts.add('archives', javadocJarTask);
-    artifacts.add('archives', sourcesJarTask);
-}
-//create jar tasks end
-
-
-afterEvaluate { project ->
-    uploadArchives {
-        repositories {
-            mavenDeployer {
-                beforeDeployment {
-                    MavenDeployment deployment -> signing.signPom(deployment)
-                }
-                println "sonatype username: ${sonatypeUsername}"
-
-                pom.artifactId = 'android-priority-jobqueue'
-
-                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
-                    authentication(userName: sonatypeUsername, password: sonotypePassword)
-                }
-
-                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
-                    authentication(userName: sonatypeUsername, password: sonotypePassword)
-                }
-
-                pom.project {
-                    modelVersion '4.0.0'
-                    groupId 'com.path'
-                    artifactId 'android-priority-jobqueue'
-                    packaging 'jar'
-                    name 'Android Priority Job Queue'
-                    version manifestVersionName
-                    description 'a Job Queue specifically written for Android to easily schedule jobs (tasks) that run in the background, improving UX and application stability.'
-                    url 'https://github.com/path/android-priority-jobqueue'
-
-                    parent {
-                        groupId 'org.sonatype.oss'
-                        artifactId 'oss-parent'
-                        version 7
-                    }
-
-                    scm {
-                        connection 'scm:git:git@github.com:path/android-priority-jobqueue.git'
-                        developerConnection 'scm:git:git@github.com:path/android-priority-jobqueue.git'
-                        url 'git@github.com:path/android-priority-jobqueue.git'
-                    }
-
-                    licenses {
-                        license {
-                            name 'The MIT License (MIT)'
-                            url 'http://opensource.org/licenses/MIT'
-                            distribution 'repo'
-                        }
-                    }
-
-                    developers {
-                        developer {
-                            id "yigit"
-                            name "Yigit Boyar"
-                        }
-                    }
-
-                    dependencies {
-                        dependency {
-                            groupId 'com.google.android'
-                            artifactId 'android'
-                            version '2.2.1'
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    signing {
-        required { gradle.taskGraph.hasTask("uploadArchives") }
-        sign configurations.archives
-    }
-}
diff --git a/jobqueue/build.xml b/jobqueue/build.xml
deleted file mode 100644
index 279be48..0000000
--- a/jobqueue/build.xml
+++ /dev/null
@@ -1,261 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="jobqueue" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <!-- <import file="custom_rules.xml" optional="true" /> -->
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-
-    <property name="test.absolute.dir" location="${test.dir}"/>
-    <property name="out.test-classes.dir" value="${out.absolute.dir}/testClasses"/>
-    <property name="out.test-classes.absolute.dir" value="${out.test-classes.dir}"/>
-    <property name="test.external.libs.absolute.dir" location="${test.external.libs.dir}"/>
-    <property name="publish.dir" location="${out.absolute.dir}/publish"/>
-
-    <property name="instrumented.dir" value="${out.absolute.dir}/instrumented"/>
-    <property name="cobertura.dir" value="${basedir}/cobertura"/>
-
-    <property name="cobertura.absolute" location="${basedir}/cobertura.ser"/>
-    <property name="instrumented.absolute.dir" location="${instrumented.dir}"/>
-
-    <property name="coverate.report.dir" value="coverage-report"/>
-    <property name="coverate.report.absolute.dir" location="${coverate.report.dir}"/>
-
-    <path id="cobertura.classpath">
-        <fileset dir="${cobertura.dir}">
-            <include name="cobertura.jar"/>
-            <include name="lib/**/*.jar"/>
-        </fileset>
-    </path>
-    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
-
-
-    <property environment="env"/>
-    <condition property="build.number" value="${env.BUILD_NUMBER}" else="unknown">
-        <isset property="env.BUILD_NUMBER"/>
-    </condition>
-    <exec executable="date" outputproperty="build.date"/>
-
-    <target name="-pre-compile">
-        <!-- android uses this property for its generated testing framework. We'll set it manually.-->
-        <property name="tested.project.absolute.dir" location="."/>
-        <property name="tested.project.test.absolute.dir" location="${tested.project.absolute.dir}/test"/>
-        <property name="out.test.classes.absolute.dir" location="${out.dir}/testClasses"/>
-    </target>
-
-    <target name="compile.tests" depends="-set-debug-files, -set-debug-mode, -compile">
-        <mkdir dir="${out.test.classes.absolute.dir}"/>
-
-        <path id="project.javac.classpath">
-            <path refid="project.all.jars.path"/>
-            <path refid="tested.project.classpath"/>
-        </path>
-
-        <javac encoding="${java.encoding}"
-               source="${java.source}"
-               target="${java.target}"
-               debug="true"
-               extdirs=""
-               destdir="${out.test.classes.absolute.dir}"
-               bootclasspathref="project.target.class.path"
-               verbose="${verbose}"
-               classpathref="project.javac.classpath"
-               includeantruntime="false">
-            <src path="${source.absolute.dir}"/>
-            <src path="${gen.absolute.dir}"/>
-            <!-- test src -->
-            <src path="${tested.project.test.absolute.dir}"/>
-            <classpath>
-                <pathelement path="${out.classes.absolute.dir}"/>
-                <fileset dir="${jar.libs.dir}" includes="*.jar"/>
-                <fileset dir="${tested.project.absolute.dir}/test-libs" includes="**/*.jar"/>
-            </classpath>
-        </javac>
-    </target>
-
-    <target name="coverage-report">
-        <cobertura-report format="html" destdir="${coveragereport.dir}" srcdir="${src.dir}"/>
-    </target>
-
-    <target name="build-jar" depends="release" description="builds jar from compiled code">
-        <mkdir dir="release" />
-        <xpath input="AndroidManifest.xml" expression="/manifest/@android:versionName"
-               output="versionName" default="unknown"/>
-        <jar jarfile="release/android-priority-jobqueue-${versionName}.jar">
-            <fileset dir="${out.dir}/classes">
-                <include name="com/path/android/jobqueue/**" />
-            </fileset>
-            <file name="LICENSE.txt"/>
-        </jar>
-    </target>
-
-    <target name="-pre-clean" description="cleanup module">
-        <delete dir="${out.test-classes.absolute.dir}"/>
-        <delete dir="${tmp.dir}"/>
-    </target>
-
-    <target name="test" depends="compile.tests" description="test all">
-        <delete file="${cobertura.absolute}"/>
-        <delete dir="${coverate.report.absolute.dir}"/>
-        <delete dir="${instrumented.absolute.dir}"/>
-        <cobertura-instrument todir="${instrumented.absolute.dir}">
-            <ignore regex="com.path.android.jobqueue.log.JqLog.*"/>
-            <fileset dir="${out.classes.absolute.dir}">
-                <include name="**/*.class"/>
-                <exclude name="com/path/android/jobqueue/log/**/*"/>
-                <exclude name="com/path/android/jobqueue/R**"/>
-            </fileset>
-        </cobertura-instrument>
-
-
-        <mkdir dir="${basedir}/out/reports/tests"/>
-        <junit showoutput="true" fork="no" haltonfailure="yes" failureproperty="junit.failure" printsummary="yes" logfailedtests="true">
-            <jvmarg value="-Xmx2g"/>
-            <formatter type="plain" usefile="false"/>
-            <formatter type="plain"/>
-            <sysproperty key="net.sourceforge.cobertura.datafile"
-                         file="${cobertura.absolute}"/>
-            <classpath location="${instrumented.absolute.dir}"/>
-            <classpath>
-                <pathelement path="${out.classes.absolute.dir}"/>
-                <pathelement path="${out.test-classes.absolute.dir}"/>
-                <fileset dir="${test.external.libs.absolute.dir}" includes="*.jar"/>
-                <fileset dir="${jar.libs.dir}" includes="*.jar"/>
-                <path refid="project.target.class.path"/>
-                <pathelement path="${sdk.dir}/extras/android/support/v4/android-support-v4.jar"/>
-            </classpath>
-            <classpath refid="cobertura.classpath"/>
-            <batchtest todir="${basedir}/out/reports/tests">
-                <fileset dir="${test.absolute.dir}">
-                    <include name="**/*Test.java"/>
-                </fileset>
-            </batchtest>
-        </junit>
-        <!-- Generate Cobertura html file report  containing the coverage data
-     -->
-        <cobertura-report format="html" srcdir="${source.absolute.dir}" destdir="${coverate.report.absolute.dir}"
-                          datafile="${cobertura.absolute}"/>
-        <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
-    </target>
-
-    <target name="javadoc">
-        <javadoc destdir="${basedir}/javadoc/"      additionalparam="-J-Dorg.apache.commons.attributes.javadoc.CATaglet.sources=${source.absolute.dir}">
-        <taglet name="org.apache.commons.attributes.javadoc.CATaglet" path="${ant.home}/lib/commons-attributes-compiler-2.2.jar"/>
-        <fileset dir="${source.absolute.dir}" includes="**/*.java"/>
-        </javadoc>
-    </target>
-
-    <target name="ensure-test-name" unless="test">
-        <fail message="You must run this target with -Dtest=TestName"/>
-    </target>
-
-    <target name="runtest" description="Runs the test you specify on the command
-    line with -Dtest=" depends="compile.tests, ensure-test-name">
-        <junit showoutput="true" fork="yes" failureproperty="junit.failure" printsummary="yes" logfailedtests="true">
-            <formatter type="plain" usefile="false"/>
-            <formatter type="plain"/>
-            <sysproperty key="net.sourceforge.cobertura.datafile"
-                         file="${cobertura.absolute}"/>
-            <sysproperty key="tests" value="${tests}"/>
-            <classpath location="${instrumented.absolute.dir}"/>
-            <classpath>
-                <pathelement path="${out.classes.absolute.dir}"/>
-                <pathelement path="${out.test-classes.absolute.dir}"/>
-                <fileset dir="${test.external.libs.absolute.dir}" includes="*.jar"/>
-                <fileset dir="${jar.libs.dir}" includes="*.jar"/>
-                <path refid="project.target.class.path"/>
-                <pathelement path="${sdk.dir}/extras/android/support/v4/android-support-v4.jar"/>
-            </classpath>
-            <classpath refid="cobertura.classpath"/>
-            <batchtest>
-                <fileset dir="${test.absolute.dir}">
-                    <include name="**/${test}.java"/>
-                </fileset>
-            </batchtest>
-        </junit>
-    </target>
-</project>
diff --git a/jobqueue/cobertura/cobertura.jar b/jobqueue/cobertura/cobertura.jar
deleted file mode 100644
index 438fe55..0000000
Binary files a/jobqueue/cobertura/cobertura.jar and /dev/null differ
diff --git a/jobqueue/cobertura/lib/asm-3.0.jar b/jobqueue/cobertura/lib/asm-3.0.jar
deleted file mode 100644
index 112f5bd..0000000
Binary files a/jobqueue/cobertura/lib/asm-3.0.jar and /dev/null differ
diff --git a/jobqueue/cobertura/lib/asm-tree-3.0.jar b/jobqueue/cobertura/lib/asm-tree-3.0.jar
deleted file mode 100644
index 2a4b208..0000000
Binary files a/jobqueue/cobertura/lib/asm-tree-3.0.jar and /dev/null differ
diff --git a/jobqueue/cobertura/lib/jakarta-oro-2.0.8.jar b/jobqueue/cobertura/lib/jakarta-oro-2.0.8.jar
deleted file mode 100644
index 23488d2..0000000
Binary files a/jobqueue/cobertura/lib/jakarta-oro-2.0.8.jar and /dev/null differ
diff --git a/jobqueue/cobertura/lib/jakarta-oro-license.txt b/jobqueue/cobertura/lib/jakarta-oro-license.txt
deleted file mode 100644
index 100f86b..0000000
--- a/jobqueue/cobertura/lib/jakarta-oro-license.txt
+++ /dev/null
@@ -1,53 +0,0 @@
-/* ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution,
- *    if any, must include the following acknowledgment:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgment may appear in the software itself,
- *    if and wherever such third-party acknowledgments normally appear.
- *
- * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro" 
- *    must not be used to endorse or promote products derived from this
- *    software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache" 
- *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their 
- *    name, without prior written permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- */
diff --git a/jobqueue/cobertura/lib/log4j-1.2.9.jar b/jobqueue/cobertura/lib/log4j-1.2.9.jar
deleted file mode 100644
index a6568b0..0000000
Binary files a/jobqueue/cobertura/lib/log4j-1.2.9.jar and /dev/null differ
diff --git a/jobqueue/cobertura/lib/log4j-license.txt b/jobqueue/cobertura/lib/log4j-license.txt
deleted file mode 100644
index 030564f..0000000
--- a/jobqueue/cobertura/lib/log4j-license.txt
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * ============================================================================
- *                   The Apache Software License, Version 1.1
- * ============================================================================
- * 
- *    Copyright (C) 1999 The Apache Software Foundation. All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without modifica-
- * tion, are permitted provided that the following conditions are met:
- * 
- * 1. Redistributions of  source code must  retain the above copyright  notice,
- *    this list of conditions and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 
- * 3. The end-user documentation included with the redistribution, if any, must
- *    include  the following  acknowledgment:  "This product includes  software
- *    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
- *    Alternately, this  acknowledgment may  appear in the software itself,  if
- *    and wherever such third-party acknowledgments normally appear.
- * 
- * 4. The names "log4j" and  "Apache Software Foundation"  must not be used to
- *    endorse  or promote  products derived  from this  software without  prior
- *    written permission. For written permission, please contact
- *    apache@apache.org.
- * 
- * 5. Products  derived from this software may not  be called "Apache", nor may
- *    "Apache" appear  in their name,  without prior written permission  of the
- *    Apache Software Foundation.
- * 
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
- * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
- * APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
- * DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
- * OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
- * ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
- * (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- * 
- * This software  consists of voluntary contributions made  by many individuals
- * on  behalf of the Apache Software  Foundation.  For more  information on the 
- * Apache Software Foundation, please see <http://www.apache.org/>.
- *
- */
diff --git a/jobqueue/gradle/wrapper/gradle-wrapper.jar b/jobqueue/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index 5838598..0000000
Binary files a/jobqueue/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/jobqueue/gradlew b/jobqueue/gradlew
deleted file mode 100755
index 91a7e26..0000000
--- a/jobqueue/gradlew
+++ /dev/null
@@ -1,164 +0,0 @@
-#!/usr/bin/env bash
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn ( ) {
-    echo "$*"
-}
-
-die ( ) {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-esac
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/jobqueue/project.properties b/jobqueue/project.properties
deleted file mode 100644
index bee96c2..0000000
--- a/jobqueue/project.properties
+++ /dev/null
@@ -1,16 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-android.library=true
-# Project target.
-target=android-7
-
diff --git a/jobqueue/res/values/strings.xml b/jobqueue/res/values/strings.xml
deleted file mode 100644
index 8ba55bc..0000000
--- a/jobqueue/res/values/strings.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">Android Priority Job Queue</string>
-</resources>
diff --git a/jobqueue/test-libs/fest-util-1.1.2.jar b/jobqueue/test-libs/fest-util-1.1.2.jar
deleted file mode 100644
index e2ef62f..0000000
Binary files a/jobqueue/test-libs/fest-util-1.1.2.jar and /dev/null differ
diff --git a/jobqueue/test-libs/hamcrest-core-1.3.jar b/jobqueue/test-libs/hamcrest-core-1.3.jar
deleted file mode 100644
index 9d5fe16..0000000
Binary files a/jobqueue/test-libs/hamcrest-core-1.3.jar and /dev/null differ
diff --git a/jobqueue/test-libs/junit-4.11.jar b/jobqueue/test-libs/junit-4.11.jar
deleted file mode 100644
index aaf7444..0000000
Binary files a/jobqueue/test-libs/junit-4.11.jar and /dev/null differ
diff --git a/jobqueue/test-libs/robolectric-2.0-alpha-3-20130412.000302-32-jar-with-dependencies.jar b/jobqueue/test-libs/robolectric-2.0-alpha-3-20130412.000302-32-jar-with-dependencies.jar
deleted file mode 100644
index 7be506e..0000000
Binary files a/jobqueue/test-libs/robolectric-2.0-alpha-3-20130412.000302-32-jar-with-dependencies.jar and /dev/null differ
diff --git a/jobqueue/test/com/path/android/jobqueue/test/TestBase.java b/jobqueue/test/com/path/android/jobqueue/test/TestBase.java
deleted file mode 100644
index 576452e..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/TestBase.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.path.android.jobqueue.test;
-
-import android.util.Log;
-import com.path.android.jobqueue.log.CustomLogger;
-import com.path.android.jobqueue.log.JqLog;
-import org.junit.Before;
-import org.robolectric.shadows.ShadowLog;
-
-public class TestBase {
-    protected static boolean ENABLE_DEBUG = false;
-    @Before
-    public void setUp() throws Exception {
-        if(ENABLE_DEBUG) {
-            enableDebug();
-        }
-    }
-
-    private void enableDebug() {
-        ShadowLog.stream = System.out;
-        JqLog.setCustomLogger(new CustomLogger() {
-            private String TAG = "test_logger";
-
-            @Override
-            public boolean isDebugEnabled() {
-                return true;
-            }
-
-            @Override
-            public void d(String text, Object... args) {
-                Log.d(TAG, String.format(text, args));
-            }
-
-            @Override
-            public void e(Throwable t, String text, Object... args) {
-                Log.e(TAG, String.format(text, args), t);
-            }
-
-            @Override
-            public void e(String text, Object... args) {
-                Log.e(TAG, String.format(text, args));
-            }
-        });
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java
deleted file mode 100644
index 454d3c5..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/AddInBackgroundTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.AsyncAddCallback;
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.fest.reflect.core.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicLong;
-
-@RunWith(RobolectricTestRunner.class)
-public class AddInBackgroundTest extends JobManagerTestBase {
-    @Test
-    public void testAddInBackground() throws InterruptedException {
-        for(boolean delay : new boolean[]{true, false}) {
-            for(boolean useCallback : new boolean[]{true, false}) {
-                addInBackground(delay, useCallback);
-            }
-        }
-    }
-
-    public void addInBackground(boolean delayed, boolean useCallback) throws InterruptedException {
-        long currentThreadId = Thread.currentThread().getId();
-        final AtomicLong onAddedThreadId = new AtomicLong();
-        final CountDownLatch addedLatch = new CountDownLatch(2);
-
-        Job dummyJob = new DummyJob(new Params(1).setDelayMs(delayed ? 1000 : 0)) {
-            @Override
-            public void onAdded() {
-                super.onAdded();
-                onAddedThreadId.set(Thread.currentThread().getId());
-                addedLatch.countDown();
-            }
-        };
-        JobManager jobManager = createJobManager();
-        jobManager.stop();
-        final AtomicLong jobId = new AtomicLong(0);
-        if(useCallback) {
-            jobManager.addJobInBackground(dummyJob, new AsyncAddCallback() {
-                @Override
-                public void onAdded(long id) {
-                    jobId.set(id);
-                    addedLatch.countDown();
-                }
-            });
-        } else {
-            addedLatch.countDown();
-            jobManager.addJobInBackground(dummyJob);
-        }
-        addedLatch.await();
-        MatcherAssert.assertThat("thread ids should be different. delayed:" + delayed, currentThreadId, CoreMatchers.not(onAddedThreadId.get()));
-        if(useCallback) {
-            JobQueue queue = getNonPersistentQueue(jobManager);
-            JobHolder holder = queue.findJobById(jobId.longValue());
-            MatcherAssert.assertThat("there should be a job in the holder. id:" + jobId.longValue() +", delayed:" + delayed + ", use cb:" + useCallback
-                    , holder, CoreMatchers.notNullValue());
-            MatcherAssert.assertThat("id callback should have the proper id:", holder.getBaseJob(), CoreMatchers.is((BaseJob) dummyJob));
-        }
-    }
-
-    protected JobQueue getNonPersistentQueue(JobManager jobManager) {
-        return Reflection.field("nonPersistentJobQueue").ofType(JobQueue.class).in(jobManager).get();
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java
deleted file mode 100644
index 327ea69..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/AddedCountTest.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.hamcrest.MatcherAssert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-
-@RunWith(RobolectricTestRunner.class)
-public class AddedCountTest extends JobManagerTestBase {
-    @Test
-    public void testAddedCount() throws Exception {
-        testAddedCount(new DummyJob(new Params(0)));
-        testAddedCount(new DummyJob(new Params(0).persist()));
-
-    }
-
-    private void testAddedCount(DummyJob dummyJob) {
-        JobManager jobManager = createJobManager();
-        jobManager.stop();
-        jobManager.addJob(dummyJob);
-        MatcherAssert.assertThat(1, equalTo(dummyJob.getOnAddedCnt()));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ClearTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ClearTest.java
deleted file mode 100644
index 89f2e81..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ClearTest.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class ClearTest extends JobManagerTestBase {
-    @Test
-    public void testClear() throws Exception {
-        JobManager jobManager = createJobManager();
-        final int LIMIT = 20;
-        for(int i = 0; i < LIMIT; i++) {
-            jobManager.addJob(new DummyJob(new Params(0).setPersistent(i % 2 == 1)));
-        }
-        jobManager.clear();
-        MatcherAssert.assertThat("after clear, count should be 0", jobManager.count(), equalTo(0));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java
deleted file mode 100644
index 5fb1537..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ConsumerCountTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.TimeUnit;
-
-@RunWith(RobolectricTestRunner.class)
-public class ConsumerCountTest extends JobManagerTestBase {
-    @Test
-    public void testMaxConsumerCount() throws Exception {
-        int maxConsumerCount = 2;
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
-                .maxConsumerCount(maxConsumerCount)
-                .loadFactor(maxConsumerCount));
-        Object runLock = new Object();
-        Semaphore semaphore = new Semaphore(maxConsumerCount);
-        int totalJobCount = maxConsumerCount * 3;
-        List<DummyJob> runningJobs = new ArrayList<DummyJob>(totalJobCount);
-        for(int i = 0; i < totalJobCount; i ++) {
-            DummyJob job = new NeverEndingDummyJob(new Params((int)(Math.random() * 3)), runLock, semaphore);
-            runningJobs.add(job);
-            jobManager.addJob(job);
-        }
-        //wait till enough jobs start
-        long now = System.nanoTime();
-        long waitTill = now + TimeUnit.SECONDS.toNanos(10);
-        while(System.nanoTime() < waitTill) {
-            if(semaphore.availablePermits() == 0) {
-                //enough # of jobs started
-                break;
-            }
-        }
-        //wait some more to ensure no more jobs are started
-        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
-        int totalRunningCount = 0;
-        for(DummyJob job : runningJobs) {
-            totalRunningCount += job.getOnRunCnt();
-        }
-        MatcherAssert.assertThat("only maxConsumerCount jobs should start", totalRunningCount, equalTo(maxConsumerCount));
-        //try to finish all jobs
-        //wait till enough jobs start
-        now = System.nanoTime();
-        waitTill = now + TimeUnit.SECONDS.toNanos(10);
-        while(System.nanoTime() < waitTill) {
-            synchronized (runLock) {
-                runLock.notifyAll();
-            }
-            totalRunningCount = 0;
-            for(DummyJob job : runningJobs) {
-                totalRunningCount += job.getOnRunCnt();
-            }
-            if(totalJobCount == totalRunningCount) {
-                //cool!
-                break;
-            }
-        }
-        MatcherAssert.assertThat("no jobs should remain", jobManager.count(), equalTo(0));
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/CountTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/CountTest.java
deleted file mode 100644
index 26a2604..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/CountTest.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class CountTest extends JobManagerTestBase {
-    @Test
-    public void testCount() throws Exception {
-        JobManager jobManager = createJobManager();
-        jobManager.stop();
-        for (int i = 0; i < 10; i++) {
-            jobManager.addJob(new DummyJob(new Params(0).persist()));
-            MatcherAssert.assertThat((int) jobManager.count(), equalTo(i * 2 + 1));
-            jobManager.addJob(new DummyJob(new Params(0).persist()));
-            MatcherAssert.assertThat((int) jobManager.count(), equalTo(i * 2 + 2));
-        }
-        jobManager.start();
-        Thread.sleep(2000);
-        MatcherAssert.assertThat((int) jobManager.count(), equalTo(0));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/DelayTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/DelayTest.java
deleted file mode 100644
index 6d0139e..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/DelayTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.fest.reflect.method.*;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class DelayTest extends JobManagerTestBase {
-    @Test
-    public void testDelay() throws Exception {
-        testDelay(false);
-        testDelay(true);
-    }
-
-    public void testDelay(boolean persist) throws Exception {
-        JobManager jobManager = createJobManager();
-        jobManager.stop();
-        DummyJob delayedJob = new DummyJob(new Params(10).delayInMs(1000).setPersistent(persist));
-        DummyJob nonDelayedJob = new DummyJob(new Params(0).setPersistent(persist));
-        long jobId = jobManager.addJob(delayedJob);
-        long nonDelayedJobId = jobManager.addJob(nonDelayedJob);
-
-        Invoker<JobHolder> nextJobMethod = getNextJobMethod(jobManager);
-        Invoker<Void> removeJobMethod = getRemoveJobMethod(jobManager);
-
-        JobHolder receivedJob = nextJobMethod.invoke();
-        MatcherAssert.assertThat("non-delayed job should be served", receivedJob, notNullValue());
-        MatcherAssert.assertThat("non-delayed job should id should match",  receivedJob.getId(), equalTo(nonDelayedJobId));
-        removeJobMethod.invoke(receivedJob);
-        MatcherAssert.assertThat("delayed job should not be served",  nextJobMethod.invoke(), nullValue());
-        MatcherAssert.assertThat("job count should still be 1",  jobManager.count(), equalTo(1));
-        Thread.sleep(500);
-        MatcherAssert.assertThat("delayed job should not be served",  nextJobMethod.invoke(), nullValue());
-        MatcherAssert.assertThat("job count should still be 1",  jobManager.count(), equalTo(1));
-        Thread.sleep(2000);
-        MatcherAssert.assertThat("job count should still be 1",  jobManager.count(), equalTo(1));
-        receivedJob = nextJobMethod.invoke();
-        MatcherAssert.assertThat("now should be able to receive the delayed job.", receivedJob, notNullValue());
-        if(receivedJob != null) {
-            MatcherAssert.assertThat("received job should be the delayed job", receivedJob.getId(), equalTo(jobId));
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
deleted file mode 100644
index f2d93e4..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class DelayedRunTest extends JobManagerTestBase {
-    @Test
-    public void testDelayedRun() throws Exception {
-        testDelayedRun(false, false);
-        testDelayedRun(true, false);
-        testDelayedRun(false, true);
-        testDelayedRun(true, true);
-    }
-    public void testDelayedRun(boolean persist, boolean tryToStop) throws Exception {
-        JobManager jobManager = createJobManager();
-        DummyJob delayedJob = new DummyJob(new Params(10).delayInMs(2000).setPersistent(persist));
-        DummyJob nonDelayedJob = new DummyJob(new Params(0).setPersistent(persist));
-        jobManager.addJob(delayedJob);
-        jobManager.addJob(nonDelayedJob);
-        Thread.sleep(500);
-        MatcherAssert.assertThat("there should be 1 delayed job waiting to be run", jobManager.count(), equalTo(1));
-        if(tryToStop) {//see issue #11
-            jobManager.stop();
-            Thread.sleep(3000);
-            MatcherAssert.assertThat("there should still be 1 delayed job waiting to be run when job manager is stopped",
-                    jobManager.count(), equalTo(1));
-            jobManager.start();
-        }
-        Thread.sleep(3000);
-        MatcherAssert.assertThat("all jobs should be completed", jobManager.count(), equalTo(0));
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/GroupingTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/GroupingTest.java
deleted file mode 100644
index 0739d3c..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/GroupingTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.fest.reflect.method.*;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicInteger;
-
-@RunWith(RobolectricTestRunner.class)
-public class GroupingTest extends JobManagerTestBase {
-    @Test
-    public void testGrouping() throws Exception {
-        JobManager jobManager = createJobManager();
-        jobManager.stop();
-        Invoker<JobHolder> nextJobMethod = getNextJobMethod(jobManager);
-        Invoker<Void> removeJobMethod = getRemoveJobMethod(jobManager);
-
-        long jobId1 = jobManager.addJob(new DummyJob(new Params(0).groupBy("group1")));
-        long jobId2 = jobManager.addJob(new DummyJob(new Params(0).groupBy("group1")));
-        long jobId3 = jobManager.addJob(new DummyJob(new Params(0).persist().groupBy("group2")));
-        long jobId4 = jobManager.addJob(new DummyJob(new Params(0).persist().groupBy("group1")));
-        JobHolder nextJob = nextJobMethod.invoke();
-        MatcherAssert.assertThat("next job should be the first job from group1", nextJob.getId(), equalTo(jobId1));
-        JobHolder group2Job = nextJobMethod.invoke();
-        MatcherAssert.assertThat("since group 1 is running now, next job should be from group 2", group2Job.getId(), equalTo(jobId3));
-        removeJobMethod.invoke(nextJob);
-        JobHolder group1NextJob =nextJobMethod.invoke();
-        MatcherAssert.assertThat("after removing job from group 1, another job from group1 should be returned", group1NextJob.getId(), equalTo(jobId2));
-        MatcherAssert.assertThat("when jobs from both groups are running, no job should be returned from next job", nextJobMethod.invoke(), is(nullValue()));
-        removeJobMethod.invoke(group2Job);
-        MatcherAssert.assertThat("even after group2 job is complete, no jobs should be returned since we only have group1 jobs left", nextJobMethod.invoke(), is(nullValue()));
-    }
-
-    @Test
-    public void testGroupingRaceCondition() throws Exception {
-        DummyNetworkUtilWithConnectivityEventSupport dummyNetworkUtil = new DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
-                .minConsumerCount(5).maxConsumerCount(10)
-                .networkUtil(dummyNetworkUtil));
-        dummyNetworkUtil.setHasNetwork(false, true);
-        //add a bunch of network requring jobs
-        final String GROUP_ID = "shared_group_id";
-        final int AFTER_ADDED_JOBS_COUNT = 5;
-        final int NOT_SET_JOB_ID = -1;
-        final AtomicInteger firstRunJob = new AtomicInteger(NOT_SET_JOB_ID);
-        final int FIRST_JOB_ID = -10;
-        final CountDownLatch onAddedCalled = new CountDownLatch(1);
-        final CountDownLatch remainingJobsOnAddedCalled = new CountDownLatch(AFTER_ADDED_JOBS_COUNT);
-        jobManager.addJobInBackground(new DummyJob(new Params(10).requireNetwork().groupBy(GROUP_ID)) {
-            @Override
-            public void onAdded() {
-                super.onAdded();
-                onAddedCalled.countDown();
-                try {
-                    //wait until all other jobs are added
-                    remainingJobsOnAddedCalled.await();
-                    //wait a bit after all are added,
-                    Thread.sleep(1000);
-                } catch (InterruptedException e) {
-                }
-            }
-
-            @Override
-            public void onRun() throws Throwable {
-                super.onRun();
-                firstRunJob.compareAndSet(NOT_SET_JOB_ID, FIRST_JOB_ID);
-            }
-        });
-        //ensure first jobs on added is called
-        onAddedCalled.await();
-        for(int i = 0; i < AFTER_ADDED_JOBS_COUNT; i ++) {
-            final int finalI = i;
-            jobManager.addJob(new DummyJob(new Params(5).groupBy(GROUP_ID).requireNetwork()) {
-                final int id = finalI + 1;
-
-                @Override
-                public void onAdded() {
-                    super.onAdded();
-                    remainingJobsOnAddedCalled.countDown();
-                }
-
-                @Override
-                public void onRun() throws Throwable {
-                    super.onRun();
-                    firstRunJob.compareAndSet(NOT_SET_JOB_ID, id);
-                }
-            });
-        }
-        dummyNetworkUtil.setHasNetwork(true, true);
-        //wait until all jobs are completed
-        while(firstRunJob.get() == NOT_SET_JOB_ID) {
-            Thread.sleep(100);
-        }
-        MatcherAssert.assertThat("highest priority job should run if it is added before others", firstRunJob.get(), is(FIRST_JOB_ID));
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/InjectorTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/InjectorTest.java
deleted file mode 100644
index 7129710..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/InjectorTest.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.di.DependencyInjector;
-import com.path.android.jobqueue.log.CustomLogger;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-@RunWith(RobolectricTestRunner.class)
-public class InjectorTest extends JobManagerTestBase {
-    @Test
-    public void testInjector() throws Exception {
-        Configuration.Builder builder = new Configuration.Builder(Robolectric.application);
-        final JobManagerTestBase.ObjectReference injectedJobReference = new JobManagerTestBase.ObjectReference();
-        final AtomicInteger injectionCallCount = new AtomicInteger(0);
-        DependencyInjector dependencyInjector = new DependencyInjector() {
-            @Override
-            public void inject(BaseJob job) {
-                injectedJobReference.setObject(job);
-                injectionCallCount.incrementAndGet();
-            }
-        };
-        builder.injector(dependencyInjector);
-        JobManager jobManager = createJobManager(builder);
-        jobManager.stop();
-        jobManager.addJob(new DummyJob(new Params(4)));
-        MatcherAssert.assertThat("injection should be called after adding a non-persistent job", injectionCallCount.get(), equalTo(1));
-        jobManager.addJob(new DummyJob(new Params(1).persist()));
-        MatcherAssert.assertThat("injection should be called after adding a persistent job", injectionCallCount.get(), equalTo(2));
-        JobHolder holder = getNextJobMethod(jobManager).invoke();
-        MatcherAssert.assertThat("injection should NOT be called for non persistent job", holder.getBaseJob(), not(injectedJobReference.getObject()));
-        MatcherAssert.assertThat("injection should be called once for non persistent job", injectionCallCount.get(), equalTo(2));
-        holder = getNextJobMethod(jobManager).invoke();
-        MatcherAssert.assertThat("injection should be called for persistent job", holder.getBaseJob(), equalTo(injectedJobReference.getObject()));
-        MatcherAssert.assertThat("injection should be called two times for persistent job", injectionCallCount.get(), equalTo(3));
-    }
-
-    @Test
-    public void testInjectorCrash() throws Exception {
-        final String EXCEPTION_MESSAGE = "could not inject for whatever reason :)";
-        DependencyInjector dummyDependencyInjector = new DependencyInjector() {
-            @Override
-            public void inject(BaseJob baseJob) {
-                throw new RuntimeException(EXCEPTION_MESSAGE);
-            }
-        };
-
-        final ObjectReference objectReference = new ObjectReference();
-        final CountDownLatch exceptionLatch = new CountDownLatch(1);
-        CustomLogger customLogger = new CustomLogger() {
-            @Override
-            public boolean isDebugEnabled() {
-                return false;
-            }
-
-            @Override
-            public void d(String s, Object... objects) {
-
-            }
-
-            @Override
-            public void e(Throwable throwable, String s, Object... objects) {
-                objectReference.setObject(throwable);
-                exceptionLatch.countDown();
-            }
-
-            @Override
-            public void e(String s, Object... objects) {
-                //
-            }
-        };
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).injector(dummyDependencyInjector).customLogger(customLogger));
-        Throwable addException = null;
-        try {
-            jobManager.addJob(new DummyJob(new Params(0)));
-        } catch (Throwable t) {
-            addException = t;
-        }
-        MatcherAssert.assertThat("addJob should throw exception if dependency injector throws exception", addException, notNullValue());
-        jobManager.addJobInBackground(new DummyJob(new Params(0)));
-        exceptionLatch.await(2, TimeUnit.SECONDS);
-        MatcherAssert.assertThat("there should be a received exception", objectReference.getObject(), notNullValue());
-        MatcherAssert.assertThat("logged exception should be a runtime exception", objectReference.getObject(), instanceOf(RuntimeException.class));
-        MatcherAssert.assertThat("logged exception should have expected message", ((Throwable)objectReference.getObject()).getMessage(), is(EXCEPTION_MESSAGE));
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java
deleted file mode 100644
index d416b76..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/JobManagerTestBase.java
+++ /dev/null
@@ -1,190 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import android.content.Context;
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.executor.JobConsumerExecutor;
-import com.path.android.jobqueue.network.NetworkEventProvider;
-import com.path.android.jobqueue.network.NetworkUtil;
-import com.path.android.jobqueue.test.TestBase;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.fest.reflect.core.*;
-import org.fest.reflect.method.*;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.robolectric.*;
-
-import java.util.UUID;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.atomic.AtomicInteger;
-
-public class JobManagerTestBase extends TestBase {
-    protected JobManager createJobManager() {
-        return new JobManager(Robolectric.application, UUID.randomUUID().toString());
-    }
-
-    protected JobManager createJobManager(Configuration.Builder configurationBuilder) {
-        return new JobManager(Robolectric.application, configurationBuilder.id(UUID.randomUUID().toString()).build());
-    }
-
-
-
-    protected static class DummyTwoLatchJob extends DummyJob {
-        private final CountDownLatch waitFor;
-        private final CountDownLatch trigger;
-        private final CountDownLatch onRunLatch;
-
-        protected DummyTwoLatchJob(Params params, CountDownLatch waitFor, CountDownLatch trigger) {
-            super(params);
-            this.waitFor = waitFor;
-            this.trigger = trigger;
-            onRunLatch = new CountDownLatch(1);
-        }
-
-        public void waitTillOnRun() throws InterruptedException {
-            onRunLatch.await();
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            onRunLatch.countDown();
-            waitFor.await();
-            super.onRun();
-            trigger.countDown();
-        }
-    }
-
-    protected static class DummyLatchJob extends DummyJob {
-        private final CountDownLatch latch;
-
-        protected DummyLatchJob(Params params, CountDownLatch latch) {
-            super(params);
-            this.latch = latch;
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            super.onRun();
-            latch.countDown();
-        }
-    }
-
-
-    protected static class DummyJobWithRunCount extends DummyJob {
-        public static int runCount;
-        protected DummyJobWithRunCount(boolean persistent) {
-            super(new Params(0).setPersistent(persistent));
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            runCount++;
-            super.onRun();
-            throw new RuntimeException("i am dummy, i throw exception when running");
-        }
-
-        @Override
-        protected boolean shouldReRunOnThrowable(Throwable throwable) {
-            return true;
-        }
-
-        @Override
-        protected int getRetryLimit() {
-            return 5;
-        }
-    }
-
-
-
-
-    protected static class DummyNetworkUtil implements NetworkUtil {
-        private boolean hasNetwork;
-
-        protected void setHasNetwork(boolean hasNetwork) {
-            this.hasNetwork = hasNetwork;
-        }
-
-        @Override
-        public boolean isConnected(Context context) {
-            return hasNetwork;
-        }
-    }
-
-    protected static class DummyNetworkUtilWithConnectivityEventSupport implements NetworkUtil, NetworkEventProvider {
-        private boolean hasNetwork;
-        private Listener listener;
-
-        protected void setHasNetwork(boolean hasNetwork, boolean notifyListener) {
-            this.hasNetwork = hasNetwork;
-            if(notifyListener && listener != null) {
-                listener.onNetworkChange(hasNetwork);
-            }
-        }
-
-        @Override
-        public boolean isConnected(Context context) {
-            return hasNetwork;
-        }
-
-        @Override
-        public void setListener(Listener listener) {
-            this.listener = listener;
-        }
-
-        public boolean isConnected() {
-            return hasNetwork;
-        }
-    }
-
-    protected static class ObjectReference {
-        Object object;
-
-        Object getObject() {
-            return object;
-        }
-
-        void setObject(Object object) {
-            this.object = object;
-        }
-    }
-
-    protected Invoker<JobHolder> getNextJobMethod(JobManager jobManager) {
-        return Reflection.method("getNextJob").withReturnType(JobHolder.class).in(jobManager);
-    }
-
-    protected Invoker<Void> getRemoveJobMethod(JobManager jobManager) {
-        return Reflection.method("removeJob").withParameterTypes(JobHolder.class).in(jobManager);
-    }
-
-    protected JobConsumerExecutor getConsumerExecutor(JobManager jobManager) {
-        return Reflection.field("jobConsumerExecutor").ofType(JobConsumerExecutor.class).in(jobManager).get();
-    }
-
-    protected org.fest.reflect.field.Invoker<AtomicInteger> getActiveConsumerCount(JobConsumerExecutor jobConsumerExecutor) {
-        return Reflection.field("activeConsumerCount").ofType(AtomicInteger.class).in(jobConsumerExecutor);
-    }
-
-    public static class NeverEndingDummyJob extends DummyJob {
-        final Object lock;
-        final Semaphore semaphore;
-        public NeverEndingDummyJob(Params params, Object lock, Semaphore semaphore) {
-            super(params);
-            this.lock = lock;
-            this.semaphore = semaphore;
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            super.onRun();
-            MatcherAssert.assertThat("job should be able to acquire a semaphore",
-                    semaphore.tryAcquire(), equalTo(true));
-            synchronized (lock) {
-                lock.wait();
-            }
-            semaphore.release();
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java
deleted file mode 100644
index 28656ba..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/JobStatusTest.java
+++ /dev/null
@@ -1,119 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobStatus;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import static org.hamcrest.MatcherAssert.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-
-@RunWith(RobolectricTestRunner.class)
-public class JobStatusTest extends JobManagerTestBase {
-    @Test
-    public void testJobStatus() throws InterruptedException {
-        DummyNetworkUtilWithConnectivityEventSupport networkUtil = new DummyNetworkUtilWithConnectivityEventSupport();
-        networkUtil.setHasNetwork(false, true);
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(networkUtil));
-        jobManager.stop();
-        List<Integer> networkRequiringJobIndices = new ArrayList<Integer>();
-        Job[] jobs = new Job[] {
-                new DummyJob(new Params(0)),
-                new DummyJob(new Params(0).persist()),
-                new DummyJob(new Params(0).persist().requireNetwork())
-        };
-        long[] ids = new long[jobs.length];
-        for(int i = 0; i < jobs.length; i ++) {
-            ids[i] = jobManager.addJob(jobs[i]);
-            if(jobs[i].requiresNetwork()) {
-                networkRequiringJobIndices.add(i);
-            }
-            JobStatus expectedStatus = (networkUtil.isConnected() || jobs[i].requiresNetwork() == false) ? JobStatus.WAITING_READY :
-                    JobStatus.WAITING_NOT_READY;
-            assertThat("job should have correct status after being added",
-                    jobManager.getJobStatus(ids[i], jobs[i].isPersistent()), is(expectedStatus));
-        }
-
-        //create an unknown id, ensure status for that
-
-        boolean exists;
-        long unknownId;
-        do {
-            unknownId = (long) (Math.random() * 10000 - 5000);
-            exists = false;
-            for(long id : ids) {
-                if(id == unknownId) {
-                    exists = true;
-                    continue;
-                }
-            }
-        } while (exists);
-        for(boolean persistent : new boolean[]{true, false}) {
-            assertThat("job with unknown id should return as expected", jobManager.getJobStatus(unknownId, persistent), is(JobStatus.UNKNOWN));
-        }
-
-        CountDownLatch startLatch = new CountDownLatch(1), endLatch = new CountDownLatch(1);
-        DummyTwoLatchJob twoLatchJob = new DummyTwoLatchJob(new Params(0), startLatch, endLatch);
-        jobManager.start();
-        long jobId = jobManager.addJob(twoLatchJob);
-        twoLatchJob.waitTillOnRun();
-        assertThat("job should be in running state", jobManager.getJobStatus(jobId, false), is(JobStatus.RUNNING));
-        startLatch.countDown();//let it run
-        endLatch.await();//wait till it finishes
-        Thread.sleep(500);//give some time to job manager to clear the job
-        assertThat("finished job should go to unknown state", jobManager.getJobStatus(jobId, false), is(JobStatus.UNKNOWN));
-
-        //network requiring job should not be ready
-        for(Integer i : networkRequiringJobIndices) {
-            assertThat("network requiring job should still be not-ready", jobManager.getJobStatus(ids[i], jobs[i].isPersistent()), is(JobStatus.WAITING_NOT_READY));
-        }
-        jobManager.stop();
-        networkUtil.setHasNetwork(true, true);
-        for(Integer i : networkRequiringJobIndices) {
-            assertThat("network requiring job should still be ready after network is there", jobManager.getJobStatus(ids[i], jobs[i].isPersistent()), is(JobStatus.WAITING_READY));
-        }
-
-        jobManager.start();
-        int limit = 10;
-        while (jobManager.count() > 0 && limit--  > 0) {
-            Thread.sleep(1000);
-        }
-        assertThat("jobs should finish", jobManager.count(), is(0));
-        for(int i = 0; i < jobs.length; i ++) {
-            //after all jobs finish, state should be unknown
-            assertThat("all jobs finished, states should be unknown", jobManager.getJobStatus(ids[i], jobs[i].isPersistent()), is(JobStatus.UNKNOWN));
-        }
-        final long SHORT_SLEEP = 1000;
-        Job[] delayedJobs = new Job[]{
-                new DummyJob(new Params(0).delayInMs(SHORT_SLEEP)),
-                new DummyJob(new Params(0).delayInMs(SHORT_SLEEP).persist()),
-                new DummyJob(new Params(0).delayInMs(SHORT_SLEEP * 10)),
-                new DummyJob(new Params(0).delayInMs(SHORT_SLEEP * 10).persist())};
-        long[] delayedIds = new long[delayedJobs.length];
-        for(int i = 0; i < delayedJobs.length; i ++) {
-            delayedIds[i] = jobManager.addJob(delayedJobs[i]);
-        }
-
-        for(int i = 0; i < delayedJobs.length; i ++) {
-            assertThat("delayed job(" + i + ") should receive not ready status", jobManager.getJobStatus(delayedIds[i], delayedJobs[i].isPersistent()), is(JobStatus.WAITING_NOT_READY));
-        }
-        jobManager.stop();
-        //sleep
-        Thread.sleep(SHORT_SLEEP * 2);
-        for(int i = 0; i < delayedJobs.length; i ++) {
-            if(delayedJobs[i].getDelayInMs() == SHORT_SLEEP) {
-                assertThat("when enough time passes, delayed jobs should move to ready state", jobManager.getJobStatus(delayedIds[i], delayedJobs[i].isPersistent()), is(JobStatus.WAITING_READY));
-            } else {
-                assertThat("delayed job should receive not ready status until their time comes", jobManager.getJobStatus(delayedIds[i], delayedJobs[i].isPersistent()), is(JobStatus.WAITING_NOT_READY));
-            }
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java
deleted file mode 100644
index fcdc80d..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/KeepAliveTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-@RunWith(RobolectricTestRunner.class)
-public class KeepAliveTest extends JobManagerTestBase {
-    @Test
-    public void testKeepAlive() throws Exception {
-        int keepAlive = 3 + (int)(Math.random() * 5);
-        DummyNetworkUtil networkUtilWithoutEventSupport = new DummyNetworkUtil();
-        DummyNetworkUtilWithConnectivityEventSupport networkUtilWithEventSupport = new DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager1 = createJobManager(new Configuration.Builder(Robolectric.application)
-                .consumerKeepAlive(keepAlive).networkUtil(networkUtilWithoutEventSupport));
-        JobManager jobManager2 = createJobManager(new Configuration.Builder(Robolectric.application)
-                .consumerKeepAlive(keepAlive)
-                .networkUtil(networkUtilWithEventSupport));
-        //give it a little time to create first consumer
-        jobManager1.addJob(new DummyJob(new Params(0)));
-        jobManager2.addJob(new DummyJob(new Params(0)));
-        AtomicInteger activeThreadCount1 = getActiveConsumerCount(getConsumerExecutor(jobManager1)).get();
-        AtomicInteger activeThreadCount2 = getActiveConsumerCount(getConsumerExecutor(jobManager2)).get();
-
-        Thread.sleep(1000);
-        MatcherAssert.assertThat("there should be 1 thread  actively waiting for jobs",
-                activeThreadCount1.get(), equalTo(1));
-        MatcherAssert.assertThat("there should be one thread actively waiting for jobs",
-                activeThreadCount2.get(), equalTo(1));
-        //sleep till it dies
-        Thread.sleep((long) (TimeUnit.SECONDS.toMillis(keepAlive) * 1.33));
-        MatcherAssert.assertThat("after keep alive timeout, there should NOT be any threads waiting",
-                activeThreadCount1.get(), equalTo(0));
-        MatcherAssert.assertThat("after keep alive timeout, there should NOT be any threads waiting",
-                activeThreadCount2.get(), equalTo(0));
-
-
-        //disable network and add a network bound job
-        networkUtilWithoutEventSupport.setHasNetwork(false);
-        networkUtilWithEventSupport.setHasNetwork(false, true);
-        jobManager1.addJob(new DummyJob(new Params(0).requireNetwork()));
-        jobManager2.addJob(new DummyJob(new Params(0).requireNetwork()));
-        Thread.sleep(1000 + (long) (TimeUnit.SECONDS.toMillis(keepAlive) * 2));
-        MatcherAssert.assertThat("when network changes cannot be detected, there should be a consumer waiting alive",
-                activeThreadCount1.get(), equalTo(1));
-        MatcherAssert.assertThat("when network changes can be detected, there should not be a consumer waiting alive",
-                activeThreadCount2.get(), equalTo(0));
-        networkUtilWithEventSupport.setHasNetwork(true, true);
-        networkUtilWithoutEventSupport.setHasNetwork(true);
-        Thread.sleep(500);
-        MatcherAssert.assertThat("when network is recovered, job should be handled",
-                jobManager2.count(), equalTo(0));
-        Thread.sleep(1000);
-        MatcherAssert.assertThat("when network is recovered, job should be handled",
-                jobManager1.count(), equalTo(0));
-
-
-    }
-
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java
deleted file mode 100644
index f713c47..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/LoadFactorTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.executor.JobConsumerExecutor;
-import com.path.android.jobqueue.log.CustomLogger;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-@RunWith(RobolectricTestRunner.class)
-public class LoadFactorTest extends JobManagerTestBase {
-    @Test
-    public void testLoadFactor() throws Exception {
-        //test adding zillions of jobs from the same group and ensure no more than 1 thread is created
-        int maxConsumerCount = 5;
-        int minConsumerCount = 2;
-        int loadFactor = 5;
-        com.path.android.jobqueue.JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
-                .maxConsumerCount(maxConsumerCount)
-                .minConsumerCount(minConsumerCount)
-                .customLogger(new CustomLogger() {
-                    public boolean isDebugEnabled() {return true;}
-                    public void d(String text, Object... args) {System.out.println(String.format(text, args));}
-                    public void e(Throwable t, String text, Object... args) {t.printStackTrace(); System.out.println(String.format(text, args));}
-                    public void e(String text, Object... args) {System.out.println(String.format(text, args));}
-                })
-                .loadFactor(loadFactor));
-        JobConsumerExecutor consumerExecutor = getConsumerExecutor(jobManager);
-        org.fest.reflect.field.Invoker<AtomicInteger> activeConsumerCnt = getActiveConsumerCount(consumerExecutor);
-        Object runLock = new Object();
-        Semaphore semaphore = new Semaphore(maxConsumerCount);
-        int totalJobCount = loadFactor * maxConsumerCount * 5;
-        List<DummyJob> runningJobs = new ArrayList<DummyJob>(totalJobCount);
-        for(int i = 0; i < totalJobCount; i ++) {
-            DummyJob job = new NeverEndingDummyJob(new Params((int)(Math.random() * 3)), runLock, semaphore);
-            runningJobs.add(job);
-            jobManager.addJob(job);
-
-            int expectedConsumerCount = Math.min(maxConsumerCount, (int)Math.ceil((float)(i+1) / loadFactor));
-            if(i >= minConsumerCount) {
-                expectedConsumerCount = Math.max(minConsumerCount, expectedConsumerCount);
-            }
-            //wait till enough jobs start
-            long now = System.nanoTime();
-            long waitTill = now + TimeUnit.SECONDS.toNanos(10);
-            while(System.nanoTime() < waitTill) {
-                if(semaphore.availablePermits() == maxConsumerCount - expectedConsumerCount) {
-                    //enough # of jobs started
-                    break;
-                }
-            }
-            if(i < loadFactor) {
-                //make sure there is only min job running
-                MatcherAssert.assertThat("while below load factor, active consumer count should be = min",
-                        activeConsumerCnt.get().get(), equalTo(Math.min(i + 1, minConsumerCount)));
-            }
-            if(i > loadFactor) {
-                //make sure there is only 1 job running
-                MatcherAssert.assertThat("while above load factor. there should be more job consumers. i=" + i,
-                        activeConsumerCnt.get().get(), equalTo(expectedConsumerCount));
-            }
-        }
-
-        //finish all jobs
-        long now = System.nanoTime();
-        long waitTill = now + TimeUnit.SECONDS.toNanos(10);
-        while(System.nanoTime() < waitTill) {
-            synchronized (runLock) {
-                runLock.notifyAll();
-            }
-            long totalRunningCount = 0;
-            for(DummyJob job : runningJobs) {
-                totalRunningCount += job.getOnRunCnt();
-            }
-            if(totalJobCount == totalRunningCount) {
-                //cool!
-                break;
-            }
-        }
-        MatcherAssert.assertThat("no jobs should remain", jobManager.count(), equalTo(0));
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java
deleted file mode 100644
index bbfcbed..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/MultiThreadTest.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import android.util.Log;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.Collection;
-import java.util.LinkedList;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-@RunWith(RobolectricTestRunner.class)
-public class MultiThreadTest extends JobManagerTestBase {
-    private static AtomicInteger multiThreadedJobCounter;
-    @Test
-    public void testMultiThreaded() throws Exception {
-        multiThreadedJobCounter = new AtomicInteger(0);
-        final JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application)
-            .loadFactor(3).maxConsumerCount(10));
-        int limit = 200;
-        ExecutorService executor = new ThreadPoolExecutor(20, 20, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(limit));
-        Collection<Future<?>> futures = new LinkedList<Future<?>>();
-        for(int i = 0; i < limit; i++) {
-            final int id = i;
-            futures.add(executor.submit(new Runnable() {
-                @Override
-                public void run() {
-                    final boolean persistent = Math.round(Math.random()) % 2 == 0;
-                    boolean requiresNetwork = Math.round(Math.random()) % 2 == 0;
-                    int priority = (int) (Math.round(Math.random()) % 10);
-                    multiThreadedJobCounter.incrementAndGet();
-                    jobManager.addJob(new DummyJobForMultiThread(id, new Params(priority).setRequiresNetwork(requiresNetwork).setPersistent(persistent)));
-                }
-            }));
-        }
-        for (Future<?> future:futures) {
-            future.get();
-        }
-        Log.d("TAG", "added all jobs");
-        //wait until all jobs are added
-        long start = System.nanoTime();
-        long timeLimit = JobManager.NS_PER_MS * 20000;//20 seconds
-        while(System.nanoTime() - start < timeLimit && multiThreadedJobCounter.get() != 0) {
-            Thread.sleep(1000);
-        }
-        Log.d("TAG", "did we reach timeout? " + (System.nanoTime() - start >= timeLimit));
-
-        MatcherAssert.assertThat("jobmanager count should be 0",
-                jobManager.count(), equalTo(0));
-
-        MatcherAssert.assertThat("multiThreadedJobCounter should be 0",
-                multiThreadedJobCounter.get(), equalTo(0));
-
-    }
-    public static class DummyJobForMultiThread extends DummyJob {
-        private int id;
-        private DummyJobForMultiThread(int id, Params params) {
-            super(params);
-            this.id = id;
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            super.onRun();
-            int remaining = multiThreadedJobCounter.decrementAndGet();
-            //take some time
-            Thread.sleep((long) (Math.random() * 1000));
-            //throw exception w/ small change
-            if(Math.random() < .1) {
-                throw new Exception("decided to die, will retry");
-            }
-            Log.d("DummyJobForMultiThread", "persistent:" + isPersistent() + ", requires network:" + requiresNetwork() + ", running " + id + ", remaining: " + remaining);
-        }
-
-        @Override
-        protected boolean shouldReRunOnThrowable(Throwable throwable) {
-            multiThreadedJobCounter.incrementAndGet();
-            return true;
-        }
-    };
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java
deleted file mode 100644
index 15e9819..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkJobTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class NetworkJobTest extends JobManagerTestBase {
-    @Test
-    public void testNetworkJob() throws Exception {
-        JobManagerTestBase.DummyNetworkUtil dummyNetworkUtil = new JobManagerTestBase.DummyNetworkUtil();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(dummyNetworkUtil));
-        jobManager.stop();
-
-        DummyJob networkDummyJob = new DummyJob(new Params(5).requireNetwork());
-        jobManager.addJob(networkDummyJob);
-
-        DummyJob noNetworkDummyJob = new DummyJob(new Params(2));
-        jobManager.addJob(noNetworkDummyJob);
-
-        DummyJob networkPersistentJob = new DummyJob(new Params(6).persist().requireNetwork());
-        jobManager.addJob(networkPersistentJob);
-
-        DummyJob noNetworkPersistentJob = new DummyJob(new Params(1).persist());
-        jobManager.addJob(noNetworkPersistentJob);
-
-        MatcherAssert.assertThat("count should be correct if there are network and non-network jobs w/o network", jobManager.count(), equalTo(4));
-        dummyNetworkUtil.setHasNetwork(true);
-        MatcherAssert.assertThat("count should be correct if there is network and non-network jobs w/o network", jobManager.count(), equalTo(4));
-        dummyNetworkUtil.setHasNetwork(false);
-        jobManager.start();
-        Thread.sleep(1000);//this should be enough to consume dummy jobs
-        MatcherAssert.assertThat("no network jobs should be executed even if there is no network", jobManager.count(), equalTo(2));
-        dummyNetworkUtil.setHasNetwork(true);
-        Thread.sleep(1000);//this should be enough to consume dummy jobs
-        MatcherAssert.assertThat("when network is recovered, all network jobs should be automatically consumed", jobManager.count(), equalTo(0));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java
deleted file mode 100644
index d275718..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkJobWithConnectivityListenerTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.hamcrest.MatcherAssert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-
-@RunWith(RobolectricTestRunner.class)
-public class NetworkJobWithConnectivityListenerTest extends JobManagerTestBase {
-    @Test
-    public void testNetworkJobWithConnectivityListener() throws Exception {
-        DummyNetworkUtilWithConnectivityEventSupport dummyNetworkUtil = new DummyNetworkUtilWithConnectivityEventSupport();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(dummyNetworkUtil));
-        dummyNetworkUtil.setHasNetwork(false, true);
-        DummyJob dummyJob = new DummyJob(new Params(0).requireNetwork());
-        long dummyJobId = jobManager.addJob(dummyJob);
-        Thread.sleep(2000);//sleep a while so that consumers die. they should die since we are using a network util
-        //with event support
-        MatcherAssert.assertThat("count should be 1 as no jobs should be consumed w/o network", jobManager.count(), equalTo(1));
-        dummyNetworkUtil.setHasNetwork(true, false);
-        Thread.sleep(1000); //wait a little bit more to consumer will run
-        MatcherAssert.assertThat("even though network is recovered, job manager should not consume any job because it " +
-                "does not know (we did not inform)", jobManager.count(), equalTo(1));
-        dummyNetworkUtil.setHasNetwork(true, true);
-        Thread.sleep(1000); //wait a little bit more to consumer will run
-        MatcherAssert.assertThat("job manager should consume network job after it is informed that network is recovered"
-                , jobManager.count(), equalTo(0));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java
deleted file mode 100644
index f07f629..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/NetworkNextJobTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.config.Configuration;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.fest.reflect.method.Invoker;
-import org.hamcrest.MatcherAssert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.hamcrest.CoreMatchers.nullValue;
-
-@RunWith(RobolectricTestRunner.class)
-public class NetworkNextJobTest extends JobManagerTestBase {
-    @Test
-    public void testNetworkNextJob() throws Exception {
-        DummyNetworkUtil dummyNetworkUtil = new DummyNetworkUtil();
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).networkUtil(dummyNetworkUtil));
-        jobManager.stop();
-        DummyJob dummyJob = new DummyJob(new Params(0).requireNetwork());
-        long dummyJobId = jobManager.addJob(dummyJob);
-        dummyNetworkUtil.setHasNetwork(false);
-        Invoker<JobHolder> nextJobMethod = getNextJobMethod(jobManager);
-        MatcherAssert.assertThat("when there isn't any network, next job should return null", nextJobMethod.invoke(), nullValue());
-        MatcherAssert.assertThat("even if there is network, job manager should return correct count", jobManager.count(), equalTo(1));
-        dummyNetworkUtil.setHasNetwork(true);
-        JobHolder retrieved = nextJobMethod.invoke();
-        MatcherAssert.assertThat("when network is recovered, next job should be retrieved", retrieved, notNullValue());
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java
deleted file mode 100644
index 2e1b721..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/PersistentJobTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-@RunWith(RobolectricTestRunner.class)
-public class PersistentJobTest extends JobManagerTestBase {
-    //TEST parallel running
-    public static CountDownLatch persistentRunLatch = new CountDownLatch(1);
-
-    @Test
-    public void testPersistentJob() throws Exception {
-        JobManager jobManager = createJobManager();
-        jobManager.addJob(0, new DummyPersistentLatchJob());
-        persistentRunLatch.await(5, TimeUnit.SECONDS);
-        MatcherAssert.assertThat((int) persistentRunLatch.getCount(), equalTo(0));
-    }
-
-    protected static class DummyPersistentLatchJob extends DummyJob {
-
-        public DummyPersistentLatchJob() {
-            super(new Params(0).persist());
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            PersistentJobTest.persistentRunLatch.countDown();
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/PriorityTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/PriorityTest.java
deleted file mode 100644
index 3f35e2b..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/PriorityTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.config.Configuration;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-@RunWith(RobolectricTestRunner.class)
-public class PriorityTest extends JobManagerTestBase {
-    private static CountDownLatch priorityRunLatch;
-
-    @Test
-    public void testPriority() throws Exception {
-        JobManager jobManager = createJobManager(new Configuration.Builder(Robolectric.application).maxConsumerCount(1));
-        testPriority(jobManager, false);
-    }
-
-    public void testPriority(JobManager jobManager, boolean persist) throws Exception {
-        priorityRunLatch = new CountDownLatch(2);
-        DummyJobWithRunOrderAssert.globalRunCount = new AtomicInteger(0);
-        BaseJob job1 = new DummyJobWithRunOrderAssert(2, persist);
-        BaseJob job2 = new DummyJobWithRunOrderAssert(1, persist);
-        jobManager.stop();
-        jobManager.addJob(1, job1);
-        jobManager.addJob(2, job2);
-        jobManager.start();
-        priorityRunLatch.await(4, TimeUnit.SECONDS);
-        //ensure both jobs did run
-        MatcherAssert.assertThat((int) priorityRunLatch.getCount(), equalTo(0));
-    }
-
-    public static class DummyJobWithRunOrderAssert extends BaseJob {
-        transient public static AtomicInteger globalRunCount;
-        private int expectedRunOrder;
-
-        public DummyJobWithRunOrderAssert(int expectedRunOrder, boolean persist) {
-            super(true, persist);
-            this.expectedRunOrder = expectedRunOrder;
-        }
-
-        @Override
-        public void onAdded() {
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            final int cnt = globalRunCount.incrementAndGet();
-            MatcherAssert.assertThat(expectedRunOrder, equalTo(cnt));
-            priorityRunLatch.countDown();
-        }
-
-        @Override
-        protected void onCancel() {
-
-        }
-
-        @Override
-        protected boolean shouldReRunOnThrowable(Throwable throwable) {
-            return false;
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java
deleted file mode 100644
index e936235..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/ReRunWithLimitTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import org.hamcrest.MatcherAssert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-
-@RunWith(RobolectricTestRunner.class)
-public class ReRunWithLimitTest extends JobManagerTestBase {
-    @Test
-    public void testReRunWithLimit() throws Exception {
-        JobManager jobManager = createJobManager();
-        testReRun(jobManager, false);
-        testReRun(jobManager, true);
-    }
-
-    private void testReRun(JobManager jobManager, boolean persist) throws InterruptedException {
-        DummyJobWithRunCount.runCount = 0;//reset
-        DummyJobWithRunCount job = new DummyJobWithRunCount(persist);
-        jobManager.addJob(0, job);
-        int limit = 25;
-        while (limit-- > 0 && DummyJobWithRunCount.runCount != 5) {
-            Thread.sleep(100);
-        }
-        MatcherAssert.assertThat(DummyJobWithRunCount.runCount, equalTo(job.getRetryLimit()));
-        MatcherAssert.assertThat((int) jobManager.count(), equalTo(0));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java
deleted file mode 100644
index 9d49dda..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/RunFailingJobTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.JobManager;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-@RunWith(RobolectricTestRunner.class)
-public class RunFailingJobTest extends JobManagerTestBase {
-    @Test
-    public void runFailingJob() throws Exception {
-        final CountDownLatch latch = new CountDownLatch(1);
-        JobManager jobManager = createJobManager();
-        jobManager.addJob(0, new BaseJob(true) {
-            @Override
-            public void onAdded() {
-
-            }
-
-            @Override
-            public void onRun() throws Throwable {
-                throw new RuntimeException();
-            }
-
-            @Override
-            protected void onCancel() {
-                latch.countDown();
-            }
-
-            @Override
-            protected boolean shouldReRunOnThrowable(Throwable throwable) {
-                return false;
-            }
-        });
-        latch.await(10, TimeUnit.SECONDS);
-        MatcherAssert.assertThat((int) latch.getCount(), equalTo(0));
-    }
-
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java
deleted file mode 100644
index 0828286..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/RunManyNonPersistentTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-@RunWith(RobolectricTestRunner.class)
-public class RunManyNonPersistentTest extends JobManagerTestBase {
-    @Test
-    public void runManyNonPersistentJobs() throws Exception {
-        JobManager jobManager = createJobManager();
-        jobManager.stop();
-        int limit = 2;
-        final CountDownLatch latch = new CountDownLatch(limit);
-        for (int i = 0; i < limit; i++) {
-            jobManager.addJob(new DummyLatchJob(new Params(i), latch));
-        }
-        jobManager.start();
-        latch.await(10, TimeUnit.SECONDS);
-        MatcherAssert.assertThat((int) latch.getCount(), equalTo(0));
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java
deleted file mode 100644
index 35e9aae..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/SessionIdTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import org.fest.reflect.core.*;
-import org.fest.reflect.method.*;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class SessionIdTest extends JobManagerTestBase {
-    @Test
-    public void testSessionId() throws Exception {
-        JobManager jobManager = createJobManager();
-        Long sessionId = Reflection.field("sessionId").ofType(long.class)
-                .in(jobManager).get();
-        jobManager.stop();
-        Job[] jobs = new Job[]{new DummyJob(new Params(0)), new DummyJob(new Params(0).persist())};
-        for (Job job : jobs) {
-            jobManager.addJob(job);
-        }
-
-        Invoker<JobHolder> nextJobMethod = getNextJobMethod(jobManager);
-        for (int i = 0; i < jobs.length; i++) {
-            JobHolder jobHolder = nextJobMethod.invoke();
-            MatcherAssert.assertThat("session id should be correct for job " + i, jobHolder.getRunningSessionId(), equalTo(sessionId));
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java
deleted file mode 100644
index fda6e29..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobmanager/SlowOnAddedTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.path.android.jobqueue.test.jobmanager;
-
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import static org.hamcrest.MatcherAssert.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-import java.util.concurrent.CountDownLatch;
-
-@RunWith(RobolectricTestRunner.class)
-public class SlowOnAddedTest extends JobManagerTestBase {
-    @Test
-    public void testNonPersistent() throws InterruptedException {
-        JobManager jobManager = createJobManager();
-        CountDownLatch runLatch = new CountDownLatch(1);
-        MyDummyJob job = new MyDummyJob(new Params(2), runLatch);
-        for(int i = 0; i < 50; i++) {
-            jobManager.addJob(new DummyJob(new Params(1)));
-        }
-        jobManager.addJob(job);
-        runLatch.await();
-        assertThat("on added should be called before on run", job.onAddedCntWhenRun, equalTo(1));
-    }
-
-    @Test
-    public void testPersistent() throws InterruptedException {
-        JobManager jobManager = createJobManager();
-        MyDummyPersistentJob.persistentJobLatch = new CountDownLatch(1);
-        for(int i = 0; i < 50; i++) {
-            jobManager.addJob(new DummyJob(new Params(1).persist()));
-        }
-        jobManager.addJob(new MyDummyPersistentJob(2));
-        MyDummyPersistentJob.persistentJobLatch.await();
-        assertThat("even if job is persistent, onAdded should be called b4 onRun",
-                MyDummyPersistentJob.onAddedCountWhenOnRun, equalTo(1));
-    }
-
-    public static class MyDummyPersistentJob extends Job {
-        private static CountDownLatch persistentJobLatch;
-        private static int persistentOnAdded = 0;
-        private static int onAddedCountWhenOnRun = -1;
-
-        protected MyDummyPersistentJob(int priority) {
-            super(new Params(priority).persist());
-        }
-
-        @Override
-        public void onAdded() {
-            try {
-                Thread.sleep(2000);
-            } catch (InterruptedException e) {
-                //
-            }
-            persistentOnAdded ++;
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            onAddedCountWhenOnRun = persistentOnAdded;
-            persistentJobLatch.countDown();
-        }
-
-        @Override
-        protected void onCancel() {
-
-        }
-
-        @Override
-        protected boolean shouldReRunOnThrowable(Throwable throwable) {
-            return true;
-        }
-    }
-
-    private static class MyDummyJob extends DummyLatchJob {
-        int onAddedCntWhenRun = -1;
-
-        protected MyDummyJob(Params params, CountDownLatch latch) {
-            super(params, latch);
-        }
-
-        @Override
-        public void onAdded() {
-            try {
-                Thread.sleep(2000);
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-            super.onAdded();
-        }
-
-        @Override
-        public void onRun() throws Throwable {
-            onAddedCntWhenRun = super.getOnAddedCnt();
-            super.onRun();
-        }
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java
deleted file mode 100644
index 013c1bd..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/CachedNonPersistentJobQueueTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.path.android.jobqueue.test.jobqueue;
-
-
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.cachedQueue.CachedJobQueue;
-import com.path.android.jobqueue.nonPersistentQueue.NonPersistentPriorityQueue;
-import com.path.android.jobqueue.test.util.JobQueueFactory;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class CachedNonPersistentJobQueueTest extends JobQueueTestBase {
-    public CachedNonPersistentJobQueueTest() {
-        super(new JobQueueFactory() {
-            @Override
-            public JobQueue createNew(long sessionId, String id) {
-                return new CachedJobQueue(new NonPersistentPriorityQueue(sessionId, id));
-            }
-        });
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java
deleted file mode 100644
index 80099c3..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/CachedPersistentJobQueueTest.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.path.android.jobqueue.test.jobqueue;
-
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.persistentQueue.sqlite.SqliteJobQueue;
-import com.path.android.jobqueue.test.util.JobQueueFactory;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class CachedPersistentJobQueueTest extends JobQueueTestBase {
-    public CachedPersistentJobQueueTest() {
-        super(new JobQueueFactory() {
-            @Override
-            public JobQueue createNew(long sessionId, String id) {
-                return new SqliteJobQueue(Robolectric.application, sessionId, id, new SqliteJobQueue.JavaSerializer());
-            }
-        });
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java
deleted file mode 100644
index fb60538..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/JobParamsTest.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.path.android.jobqueue.test.jobqueue;
-
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.TestBase;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import static org.hamcrest.CoreMatchers.*;
-import static org.hamcrest.MatcherAssert.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class JobParamsTest extends TestBase {
-    @Test
-    public void assertParamsUnderstood() {
-        DummyJob j1 = new DummyJob(new Params(1).requireNetwork());
-        assertThat("require network param should be understood properly", j1.requiresNetwork(), equalTo(true));
-        DummyJob j2 = new DummyJob(new Params(1).groupBy("blah"));
-        assertThat("group param should be understood properly", j2.getRunGroupId(), equalTo("blah"));
-        DummyJob j3 = new DummyJob(new Params(1).persist());
-        assertThat("group param should be understood properly", j3.isPersistent(), equalTo(true));
-        DummyJob j4 = new DummyJob(new Params(1).setPersistent(false).setRequiresNetwork(false).setGroupId(null));
-        assertThat("persist param should be understood properly", j4.isPersistent(), equalTo(false));
-        assertThat("require network param should be understood properly", j4.requiresNetwork(), equalTo(false));
-        assertThat("group param should be understood properly", j4.getRunGroupId(), nullValue());
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/JobQueueTestBase.java b/jobqueue/test/com/path/android/jobqueue/test/jobqueue/JobQueueTestBase.java
deleted file mode 100644
index 2805e54..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/JobQueueTestBase.java
+++ /dev/null
@@ -1,509 +0,0 @@
-package com.path.android.jobqueue.test.jobqueue;
-
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.test.TestBase;
-import com.path.android.jobqueue.test.jobs.DummyJob;
-import com.path.android.jobqueue.test.util.JobQueueFactory;
-import org.fest.reflect.core.*;
-import static org.hamcrest.CoreMatchers.*;
-import static org.hamcrest.MatcherAssert.*;
-import org.junit.Ignore;
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.concurrent.TimeUnit;
-
-@Ignore
-public abstract class JobQueueTestBase extends TestBase {
-    JobQueueFactory currentFactory;
-
-    public JobQueueTestBase(JobQueueFactory factory) {
-        currentFactory = factory;
-    }
-
-    @Test
-    public void testBasicAddRemoveCount() throws Exception {
-        final int ADD_COUNT = 6;
-        JobQueue jobQueue = createNewJobQueue();
-        assertThat((int) jobQueue.count(), equalTo(0));
-        assertThat(jobQueue.nextJobAndIncRunCount(true, null), nullValue());
-        for (int i = 0; i < ADD_COUNT; i++) {
-            JobHolder holder = createNewJobHolder();
-            jobQueue.insert(holder);
-            assertThat((int) jobQueue.count(), equalTo(i + 1));
-            assertThat(holder.getId(), notNullValue());
-            jobQueue.insertOrReplace(holder);
-            assertThat((int) jobQueue.count(), equalTo(i + 1));
-        }
-        JobHolder firstHolder = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat(firstHolder.getRunCount(), equalTo(1));
-        //size should be down 1
-        assertThat((int) jobQueue.count(), equalTo(ADD_COUNT - 1));
-        //should return another job
-        JobHolder secondHolder = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat(secondHolder.getRunCount(), equalTo(1));
-        //size should be down 2
-        assertThat((int) jobQueue.count(), equalTo(ADD_COUNT - 2));
-        //second holder and first holder should have different ids
-        assertThat(firstHolder.getId(), not(secondHolder.getId()));
-        jobQueue.remove(secondHolder);
-        assertThat((int) jobQueue.count(), equalTo(ADD_COUNT - 2));
-        jobQueue.remove(secondHolder);
-        //non existed job removed, count should be the same
-        assertThat((int) jobQueue.count(), equalTo(ADD_COUNT - 2));
-        jobQueue.remove(firstHolder);
-        assertThat((int) jobQueue.count(), equalTo(ADD_COUNT - 2));
-    }
-
-    @Test
-    public void testPriority() throws Exception {
-        int JOB_LIMIT = 20;
-        JobQueue jobQueue = createNewJobQueue();
-        //create and add JOB_LIMIT jobs with random priority
-        for (int i = 0; i < JOB_LIMIT; i++) {
-            jobQueue.insert(createNewJobHolder(new Params((int) (Math.random() * 10))));
-        }
-        //ensure we get jobs in correct priority order
-        int minPriority = Integer.MAX_VALUE;
-        for (int i = 0; i < JOB_LIMIT; i++) {
-            JobHolder holder = jobQueue.nextJobAndIncRunCount(true, null);
-            assertThat(holder.getPriority() <= minPriority, is(true));
-        }
-        assertThat(jobQueue.nextJobAndIncRunCount(true, null), nullValue());
-    }
-
-
-    @Test
-    public void testDelayUntilWithPriority() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        long now = System.nanoTime();
-        JobHolder lowPriorityHolder = createNewJobHolderWithDelayUntil(new Params(5), now + 10000 * JobManager.NS_PER_MS);
-        JobHolder highPriorityHolder = createNewJobHolderWithDelayUntil(new Params(10), now + 20000 * JobManager.NS_PER_MS);
-        jobQueue.insert(lowPriorityHolder);
-        jobQueue.insert(highPriorityHolder);
-        assertThat("when asked, if lower priority job has less delay until, we should return it",
-                jobQueue.getNextJobDelayUntilNs(true), equalTo(lowPriorityHolder.getDelayUntilNs()));
-
-    }
-
-    @Test
-    public void testGroupId() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        long jobId1 = jobQueue.insert(createNewJobHolder(new Params(0).groupBy("group1")));
-        long jobId2 = jobQueue.insert(createNewJobHolder(new Params(0).groupBy("group1")));
-        long jobId3 = jobQueue.insert(createNewJobHolder(new Params(0).groupBy("group2")));
-        long jobId4 = jobQueue.insert(createNewJobHolder(new Params(0).groupBy("group2")));
-        long jobId5 = jobQueue.insert(createNewJobHolder(new Params(0).groupBy("group1")));
-        JobHolder holder1 = jobQueue.nextJobAndIncRunCount(true, Arrays.asList(new String[]{"group2"}));
-        assertThat("first jobs should be from group group2 if group1 is excluded",
-                holder1.getBaseJob().getRunGroupId(), equalTo("group1"));
-        assertThat("correct job should be returned if groupId is provided",
-                holder1.getId(), equalTo(jobId1));
-        assertThat("no jobs should be returned if all groups are excluded",
-                jobQueue.nextJobAndIncRunCount(true,
-                        Arrays.asList(new String[]{"group1", "group2"})),
-                is(nullValue()));
-        long jobId6 = jobQueue.insert(createNewJobHolder(new Params(0)));
-        assertThat("both groups are disabled, null group job should be returned",
-                jobQueue.nextJobAndIncRunCount(true,
-                        Arrays.asList(new String[]{"group1", "group2"})).getId(),
-                is(jobId6));
-        assertThat("if group1 is excluded, next job should be from group2",
-                jobQueue.nextJobAndIncRunCount(true, Arrays.asList(new String[]{"group1"})).getBaseJob().getRunGroupId()
-                , equalTo("group2"));
-
-        //to test re-run case, add the job back in
-        jobQueue.insertOrReplace(holder1);
-        //ask for it again, should return the same holder because it is grouped
-        JobHolder holder2 = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat("for grouped jobs, re-fetching job should work fine",
-                holder2.getId(), equalTo(holder1.getId()));
-
-        JobHolder holder3 = jobQueue.nextJobAndIncRunCount(true,
-                        Arrays.asList(new String[]{"group1"}));
-        assertThat("if a group it excluded, next available from another group should be returned",
-                holder3.getId(), equalTo(jobId4));
-
-        //add two more non-grouped jobs
-        long jobId7 = jobQueue.insert(createNewJobHolder(new Params(0)));
-        long jobId8 = jobQueue.insert(createNewJobHolder(new Params(0)));
-        JobHolder holder4 = jobQueue.nextJobAndIncRunCount(true,
-                Arrays.asList(new String[]{"group1", "group2"}));
-        assertThat("if all grouped jobs are excluded, non-grouped jobs should be returned",
-                holder4.getId(),
-                equalTo(jobId7));
-        jobQueue.insertOrReplace(holder4);
-        //for non-grouped jobs, run counts should be respected
-        assertThat("if all grouped jobs are excluded, re-inserted highest priority job should still be returned",
-                jobQueue.nextJobAndIncRunCount(true,
-                        Arrays.asList(new String[]{"group1", "group2"})).getId(),
-                equalTo(jobId7));
-    }
-
-    @Test
-    public void testDueDelayUntilWithPriority() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        long now = System.nanoTime();
-        JobHolder lowPriorityHolder = createNewJobHolderWithDelayUntil(new Params(5),now - 1000 * JobManager.NS_PER_MS);
-        JobHolder highPriorityHolder = createNewJobHolderWithDelayUntil(new Params(10), now - 10000 * JobManager.NS_PER_MS);
-        jobQueue.insert(lowPriorityHolder);
-        jobQueue.insert(highPriorityHolder);
-        long soonJobDelay = 2000;
-        JobHolder highestPriorityDelayedJob = createNewJobHolderWithDelayUntil(new Params(12), now + soonJobDelay * JobManager.NS_PER_MS);
-        long highestPriorityDelayedJobId = jobQueue.insert(highestPriorityDelayedJob);
-        assertThat("when asked, if job's due has passed, highest priority jobs's delay until should be " +
-                "returned",
-                jobQueue.getNextJobDelayUntilNs(true), equalTo(highPriorityHolder.getDelayUntilNs()));
-        //make sure soon job is valid now
-        Thread.sleep(soonJobDelay);
-
-        assertThat("when a job's time come, it should be returned",
-                jobQueue.nextJobAndIncRunCount(true, null).getId(), equalTo(highestPriorityDelayedJobId));
-    }
-
-    @Test
-    public void testDelayUntil() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        long now = System.nanoTime();
-        JobHolder networkJobHolder = createNewJobHolderWithDelayUntil(new Params(0).requireNetwork(), now + 200000 * JobManager.NS_PER_MS);
-
-        JobHolder noNetworkJobHolder = createNewJobHolderWithDelayUntil(new Params(0), now + 500000 * JobManager.NS_PER_MS);
-
-        jobQueue.insert(networkJobHolder);
-        jobQueue.insert(noNetworkJobHolder);
-
-        assertThat("if there is no network, delay until should be provided for no network job",
-            jobQueue.getNextJobDelayUntilNs(false), equalTo(noNetworkJobHolder.getDelayUntilNs()));
-
-        assertThat("if there is network, delay until should be provided for network job because it is " +
-                "sooner", jobQueue.getNextJobDelayUntilNs(true), equalTo(networkJobHolder.getDelayUntilNs()));
-
-        JobHolder noNetworkJobHolder2 = createNewJobHolderWithDelayUntil(new Params(0), now + 100000 * JobManager.NS_PER_MS);
-
-        jobQueue.insert(noNetworkJobHolder2);
-        assertThat("if there is network, any job's delay until should be returned",
-                jobQueue.getNextJobDelayUntilNs(true), equalTo(noNetworkJobHolder2.getDelayUntilNs()));
-    }
-
-    @Test
-    public void testTruncate() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        final int LIMIT = 20;
-        for(int i = 0; i < LIMIT; i ++) {
-            jobQueue.insert(createNewJobHolder());
-        }
-        assertThat("queue should have all jobs", jobQueue.count(), equalTo(LIMIT));
-        jobQueue.clear();
-        assertThat("after clear, queue should be empty", jobQueue.count(), equalTo(0));
-        for(int i = 0; i < LIMIT; i ++) {
-            jobQueue.insert(createNewJobHolder());
-        }
-        assertThat("if we add jobs again, count should match", jobQueue.count(), equalTo(LIMIT));
-    }
-
-    @Test
-    public void testPriorityWithDelayedJobs() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        JobHolder delayedPriority_5 = createNewJobHolder(new Params(5));
-        org.fest.reflect.field.Invoker<Long> delayUntilField = getDelayUntilNsField(delayedPriority_5);
-        delayUntilField.set(System.nanoTime() - 1000);
-
-        JobHolder delayedPriority_2 = createNewJobHolder(new Params(2));
-        delayUntilField = getDelayUntilNsField(delayedPriority_2);
-        delayUntilField.set(System.nanoTime() - 500);
-
-
-
-        JobHolder nonDelayedPriority_6 = createNewJobHolder(new Params(6));
-        JobHolder nonDelayedPriority_3 = createNewJobHolder(new Params(3));
-        JobHolder nonDelayedPriority_2 = createNewJobHolder(new Params(2));
-
-
-        jobQueue.insert(delayedPriority_5);
-        jobQueue.insert(delayedPriority_2);
-        jobQueue.insert(nonDelayedPriority_6);
-        jobQueue.insert(nonDelayedPriority_2);
-        jobQueue.insert(nonDelayedPriority_3);
-
-        int lastPriority = Integer.MAX_VALUE;
-        for(int i = 0; i < 5; i++) {
-            JobHolder next = jobQueue.nextJobAndIncRunCount(true, null);
-            assertThat("next job should not be null", next, notNullValue());
-            assertThat("next job's priority should be lower then previous for job " + i, next.getPriority() <= lastPriority, is(true));
-            lastPriority = next.getPriority();
-        }
-
-    }
-
-    private org.fest.reflect.field.Invoker<Long> getDelayUntilNsField(JobHolder jobHolder) {
-        return Reflection.field("delayUntilNs").ofType(long.class).in(jobHolder);
-    }
-
-    private org.fest.reflect.field.Invoker<Integer> getPriorityField(Params params) {
-        return Reflection.field("priority").ofType(int.class).in(params);
-    }
-
-    private org.fest.reflect.field.Invoker<Long> getDelayMsField(Params params) {
-        return Reflection.field("delayMs").ofType(long.class).in(params);
-    }
-
-    private org.fest.reflect.field.Invoker<String> getGroupIdField(Params params) {
-        return Reflection.field("groupId").ofType(String.class).in(params);
-    }
-
-    @Test
-    public void testSessionId() throws Exception {
-        long sessionId = (long) (Math.random() * 100000);
-        JobQueue jobQueue = createNewJobQueueWithSessionId(sessionId);
-        JobHolder jobHolder = createNewJobHolder();
-        jobQueue.insert(jobHolder);
-        jobHolder = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat("session id should be attached to next job",
-                jobHolder.getRunningSessionId(), equalTo(sessionId));
-    }
-
-    @Test
-    public void testPriorityWithReAdd() throws Exception {
-        int JOB_LIMIT = 20;
-        JobQueue jobQueue = createNewJobQueue();
-        //create and add JOB_LIMIT jobs with random priority
-        for (int i = 0; i < JOB_LIMIT; i++) {
-            jobQueue.insert(createNewJobHolder(new Params((int) (Math.random() * 10))));
-        }
-        //ensure we get jobs in correct priority order
-        int minPriority = Integer.MAX_VALUE;
-        for (int i = 0; i < JOB_LIMIT; i++) {
-            JobHolder holder = jobQueue.nextJobAndIncRunCount(true, null);
-            assertThat(holder.getPriority() <= minPriority, is(true));
-            jobQueue.insertOrReplace(holder);
-        }
-        assertThat(jobQueue.nextJobAndIncRunCount(true, null), notNullValue());
-    }
-
-    @Test
-    public void testRemove() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        JobHolder holder = createNewJobHolder();
-        jobQueue.insert(holder);
-        Long jobId = holder.getId();
-        assertThat(jobQueue.nextJobAndIncRunCount(true, null).getId(), equalTo(jobId));
-        assertThat(jobQueue.nextJobAndIncRunCount(true, null), is(nullValue()));
-        jobQueue.remove(holder);
-        assertThat(jobQueue.nextJobAndIncRunCount(true, null), is(nullValue()));
-    }
-
-    @Test
-    public void testNetwork() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        JobHolder jobHolder = createNewJobHolder(new Params(0));
-        jobQueue.insert(jobHolder);
-        assertThat("no network job should be returned even if there is no netowrk",
-                jobQueue.nextJobAndIncRunCount(false, null), notNullValue());
-        jobQueue.remove(jobHolder);
-
-        jobHolder = createNewJobHolder(new Params(0).requireNetwork());
-        assertThat("if there isn't any network, job with network requirement should not return",
-                jobQueue.nextJobAndIncRunCount(false, null), nullValue());
-
-        assertThat("if there is network, job with network requirement should be returned",
-                jobQueue.nextJobAndIncRunCount(true, null), nullValue());
-
-        jobQueue.remove(jobHolder);
-
-        jobHolder = createNewJobHolder(new Params(1));
-        JobHolder jobHolder2 = createNewJobHolder(new Params(5).requireNetwork());
-        long firstJobId = jobQueue.insert(jobHolder);
-        long secondJobId = jobQueue.insert(jobHolder2);
-        JobHolder retrieved = jobQueue.nextJobAndIncRunCount(false, null);
-        assertThat("one job should be returned w/o network", retrieved, notNullValue());
-        if(retrieved != null) {
-            assertThat("no network job should be returned although it has lower priority", retrieved.getId(), equalTo(firstJobId));
-        }
-
-        assertThat("no other job should be returned w/o network", jobQueue.nextJobAndIncRunCount(false, null), nullValue());
-
-        retrieved = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat("if network is back, network requiring job should be returned", retrieved, notNullValue());
-        if(retrieved != null) {
-            assertThat("when there is network, network job should be returned", retrieved.getId(), equalTo(secondJobId));
-        }
-        //add first job back
-        jobQueue.insertOrReplace(jobHolder);
-        //add second job back
-        jobQueue.insertOrReplace(jobHolder2);
-
-        retrieved = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat("if network is back, job w/ higher priority should be returned", retrieved, notNullValue());
-        if(retrieved != null) {
-            assertThat("if network is back, job w/ higher priority should be returned", retrieved.getId(), equalTo(secondJobId));
-        }
-        jobQueue.insertOrReplace(jobHolder2);
-
-        JobHolder highestPriorityJob = createNewJobHolder(new Params(10));
-        long highestPriorityJobId = jobQueue.insert(highestPriorityJob);
-        retrieved = jobQueue.nextJobAndIncRunCount(true, null);
-        assertThat("w/ or w/o network, highest priority should be returned", retrieved, notNullValue());
-        if(retrieved != null) {
-            assertThat("w/ or w/o network, highest priority should be returned", retrieved.getId(), equalTo(highestPriorityJobId));
-        }
-
-        //TODO test delay until
-    }
-
-    @Test
-    public void testCountReadyJobs() throws Exception {
-        JobQueue jobQueue = createNewJobQueue();
-        assertThat("initial count should be 0 for ready jobs", jobQueue.countReadyJobs(true, null), equalTo(0));
-        //add some jobs
-        jobQueue.insert(createNewJobHolder());
-        jobQueue.insert(createNewJobHolder(new Params(0).requireNetwork()));
-        long now = System.nanoTime();
-        long delay = 1000;
-        jobQueue.insert(createNewJobHolderWithDelayUntil(new Params(0), now + TimeUnit.MILLISECONDS.toNanos(delay)));
-        assertThat("ready count should be 1 if there is no network", jobQueue.countReadyJobs(false, null), equalTo(1));
-        assertThat("ready count should be 2 if there is network", jobQueue.countReadyJobs(true, null), equalTo(2));
-        Thread.sleep(delay);
-        assertThat("when needed delay time passes, ready count should be 3", jobQueue.countReadyJobs(true, null), equalTo(3));
-        assertThat("when needed delay time passes but no network, ready count should be 2", jobQueue.countReadyJobs(false, null), equalTo(2));
-        jobQueue.insert(createNewJobHolder(new Params(5).groupBy("group1")));
-        jobQueue.insert(createNewJobHolder(new Params(5).groupBy("group1")));
-        assertThat("when more than 1 job from same group is created, ready jobs should increment only by 1",
-                jobQueue.countReadyJobs(true, null), equalTo(4));
-        assertThat("excluding groups should work",
-                jobQueue.countReadyJobs(true, Arrays.asList(new String[]{"group1"})), equalTo(3));
-        assertThat("giving a non-existing group should not fool the count",
-                jobQueue.countReadyJobs(true, Arrays.asList(new String[]{"group3423"})), equalTo(4));
-        jobQueue.insert(createNewJobHolder(new Params(3).groupBy("group2")));
-        assertThat("when a job from another group is added, ready job count should inc",
-                jobQueue.countReadyJobs(true, null), equalTo(5));
-        now = System.nanoTime();
-        jobQueue.insert(createNewJobHolderWithDelayUntil(new Params(3).groupBy("group3"), now + TimeUnit.MILLISECONDS.toNanos(delay)));
-        assertThat("when a delayed job from another group is added, ready count should not change",
-                jobQueue.countReadyJobs(true, null), equalTo(5));
-        jobQueue.insert(createNewJobHolder(new Params(3).groupBy("group3")));
-        assertThat("when another job from delayed group is added, ready job count should inc",
-                jobQueue.countReadyJobs(true, null), equalTo(6));
-        Thread.sleep(delay);
-        assertThat("when delay passes and a job from existing group becomes available, ready job count should not change",
-                jobQueue.countReadyJobs(true, null), equalTo(6));
-        assertThat("when some groups are excluded, count should be correct",
-                jobQueue.countReadyJobs(true, Arrays.asList(new String[]{"group1", "group3"})), equalTo(4));
-
-        //jobs w/ same group id but with different persistence constraints should not fool the count
-        now = System.nanoTime();
-        jobQueue.insert(createNewJobHolderWithDelayUntil(new Params(0).persist().groupBy("group10"), now + 1000));
-        jobQueue.insert(createNewJobHolderWithDelayUntil(new Params(0).groupBy("group10"), now + 1000));
-        jobQueue.insert(createNewJobHolderWithDelayUntil(new Params(0).persist().groupBy("group10"), now - 1000));
-        jobQueue.insert(createNewJobHolderWithDelayUntil(new Params(0).groupBy("group10"), now - 1000));
-        assertThat("when many jobs are added w/ different constraints but same group id, ready count should not be fooled",
-                jobQueue.countReadyJobs(true, Arrays.asList(new String[]{"group1", "group3"})), equalTo(5));
-        assertThat("when many jobs are added w/ different constraints but same group id, ready count should not be fooled",
-                jobQueue.countReadyJobs(true, null), equalTo(7));
-        assertThat("when many jobs are added w/ different constraints but same group id, ready count should not be fooled",
-                jobQueue.countReadyJobs(false, Arrays.asList(new String[]{"group1", "group3"})), equalTo(4));
-    }
-
-    @Test
-    public void testJobFields() throws Exception {
-        long sessionId = (long) (Math.random() * 1000);
-        JobQueue jobQueue = createNewJobQueueWithSessionId(sessionId);
-        JobHolder jobHolder = createNewJobHolder();
-
-
-        int priority = (int) (Math.random() * 1000);
-        jobHolder.setPriority(priority);
-        DummyJob dummyJob = new DummyJob(new Params(0));
-        jobHolder.setBaseJob(dummyJob);
-        int runCount = (int) (Math.random() * 10);
-        jobHolder.setRunCount(runCount);
-
-        long id = jobQueue.insert(jobHolder);
-
-
-        for (int i = 0; i < 2; i++) {
-            JobHolder received = jobQueue.nextJobAndIncRunCount(true, null);
-            assertThat("job id should be preserved", received.getId(), equalTo(id));
-            assertThat("job priority should be preserved", received.getPriority(), equalTo(priority));
-            assertThat("job session id should be assigned", received.getRunningSessionId(), equalTo(sessionId));
-            assertThat("job run count should be incremented", received.getRunCount(), equalTo(runCount + i + 1));
-            jobQueue.insertOrReplace(received);
-        }
-    }
-
-    private void assertJob(JobQueue jobQueue, String msg, long id, /*nullable*/ JobHolder holder) {
-        if(holder == null) {
-            assertThat(msg, jobQueue.findJobById(id), nullValue());
-            return;
-        }
-        assertThat(msg + "(existence check)", jobQueue.findJobById(id), notNullValue());
-        assertThat(msg + "(id check)", jobQueue.findJobById(id).getId(), is(holder.getId()));
-    }
-
-    @Test
-    public void testFindJobHolderById() {
-        JobQueue jobQueue = createNewJobQueue();
-        assertJob(jobQueue, "non existing job (negative id)", -4, null);
-        assertJob(jobQueue, "non existing job (positive id)", +4, null);
-        final int LIMIT = 100;
-        JobHolder[] holders = new JobHolder[LIMIT];
-        long[] ids = new long[LIMIT];
-        for(int i =  0; i < LIMIT; i++) {
-            holders[i] = createNewJobHolder(new Params((int) (Math.random() * 50)).setPersistent(Math.random() < .5).setRequiresNetwork(Math.random() < .5));
-            ids[i] = jobQueue.insert(holders[i]);
-            assertJob(jobQueue, "job by id should work for inserted job", ids[i], holders[i]);
-        }
-        final int REMOVE_CNT = LIMIT / 2;
-        for(int i = 0; i < REMOVE_CNT; i++) {
-            int ind = (int) (Math.random() * LIMIT);
-            if(holders[ind] == null) {
-                continue;
-            }
-            //remove some randomly, up to half
-            jobQueue.remove(holders[ind]);
-            holders[ind] = null;
-        }
-        //re-query all, ensure we can still find non-removed jobs and not find removed jobs
-        for(int i =  0; i < LIMIT; i++) {
-            if(holders[i] != null) {
-                assertJob(jobQueue, "if job is still in the Q, it should be returned", ids[i], holders[i]);
-                //re add job
-                jobQueue.insertOrReplace(holders[i]);
-                //re-test after re-add
-                assertJob(jobQueue, "after re-insert, if job is still in the Q, it should be returned", ids[i], holders[i]);
-            } else {
-                assertJob(jobQueue, "removed job should not be returned in id query", ids[i], null);
-            }
-        }
-        jobQueue.clear();
-        for(int i = 0; i < LIMIT; i++) {
-            assertJob(jobQueue, "after clear, find by id should return null", ids[i], null);
-        }
-    }
-
-    protected JobHolder createNewJobHolder() {
-        return createNewJobHolder(new Params(0));
-    }
-
-    protected JobHolder createNewJobHolder(Params params) {
-        long delay = getDelayMsField(params).get();
-        return new JobHolder(null, getPriorityField(params).get(), getGroupIdField(params).get(), 0, new DummyJob(params), System.nanoTime(),
-                delay > 0 ? System.nanoTime() +  delay * JobManager.NS_PER_MS : JobManager.NOT_DELAYED_JOB_DELAY, JobManager.NOT_RUNNING_SESSION_ID);
-    }
-
-    private JobHolder createNewJobHolderWithDelayUntil(Params params, long delayUntil) {
-        JobHolder jobHolder = createNewJobHolder(params);
-        getDelayUntilNsField(jobHolder).set(delayUntil);
-        return jobHolder;
-    }
-
-    protected JobQueue createNewJobQueue() {
-        return createNewJobQueueWithSessionId(System.nanoTime());
-    }
-
-    private JobQueue createNewJobQueueWithSessionId(Long sessionId) {
-        return currentFactory.createNew(sessionId, "id_" + sessionId);
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java
deleted file mode 100644
index aec3924..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/NonPersistentJobQueueTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.path.android.jobqueue.test.jobqueue;
-
-import com.path.android.jobqueue.JobHolder;
-import com.path.android.jobqueue.JobManager;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.nonPersistentQueue.NonPersistentPriorityQueue;
-import com.path.android.jobqueue.test.util.JobQueueFactory;
-import static org.hamcrest.CoreMatchers.*;
-import org.hamcrest.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.*;
-
-@RunWith(RobolectricTestRunner.class)
-public class NonPersistentJobQueueTest extends JobQueueTestBase {
-    public NonPersistentJobQueueTest() {
-        super(new JobQueueFactory() {
-            @Override
-            public JobQueue createNew(long sessionId, String id) {
-                return new NonPersistentPriorityQueue(sessionId, id);
-            }
-        });
-    }
-
-    /**
-     * issue #21 https://github.com/path/android-priority-jobqueue/issues/21
-     */
-    @Test
-    public void testTooManyQueueChanges() throws InterruptedException {
-        JobQueue jobQueue = createNewJobQueue();
-        int limit = 10000;
-        long delayMs = 2000;
-        long then = System.nanoTime() + delayMs * JobManager.NS_PER_MS;
-        for(int i = 0; i < limit; i++) {
-            jobQueue.insert(createNewJobHolder(new Params(0).requireNetwork().delayInMs(delayMs)));
-        }
-
-        MatcherAssert.assertThat("all jobs require network, should return null", jobQueue.nextJobAndIncRunCount(false, null), nullValue());
-        long sleep = then - System.nanoTime();
-        sleep += JobManager.NS_PER_MS * 1000;
-        if (sleep > 0) {
-            Thread.sleep(sleep / JobManager.NS_PER_MS);
-        }
-        //should be able to get it w/o an overflow
-        for(int i = 0; i < limit; i++) {
-            JobHolder holder = jobQueue.nextJobAndIncRunCount(true, null);
-            MatcherAssert.assertThat("should get a next job", holder, notNullValue());
-            jobQueue.remove(holder);
-        }
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java b/jobqueue/test/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java
deleted file mode 100644
index 7325e3d..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobqueue/SqliteJobQueueTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.path.android.jobqueue.test.jobqueue;
-
-import com.path.android.jobqueue.BaseJob;
-import com.path.android.jobqueue.JobQueue;
-import com.path.android.jobqueue.Params;
-import com.path.android.jobqueue.persistentQueue.sqlite.SqliteJobQueue;
-import com.path.android.jobqueue.test.util.JobQueueFactory;
-import org.hamcrest.CoreMatchers;
-import org.hamcrest.MatcherAssert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-@RunWith(RobolectricTestRunner.class)
-public class SqliteJobQueueTest extends JobQueueTestBase {
-    public SqliteJobQueueTest() {
-        super(new JobQueueFactory() {
-            @Override
-            public JobQueue createNew(long sessionId, String id) {
-                return new SqliteJobQueue(Robolectric.application, sessionId, id, new SqliteJobQueue.JavaSerializer());
-            }
-        });
-    }
-
-    @Test
-    public void testCustomSerializer() throws Exception {
-        final CountDownLatch calledForSerialize = new CountDownLatch(1);
-        final CountDownLatch calledForDeserialize = new CountDownLatch(1);
-        SqliteJobQueue.JobSerializer jobSerializer = new SqliteJobQueue.JavaSerializer() {
-            @Override
-            public byte[] serialize(Object object) throws IOException {
-                calledForSerialize.countDown();
-                return super.serialize(object);
-            }
-
-            @Override
-            public <T extends BaseJob> T deserialize(byte[] bytes) throws IOException, ClassNotFoundException {
-                calledForDeserialize.countDown();
-                return super.deserialize(bytes);
-            }
-        };
-        SqliteJobQueue jobQueue = new SqliteJobQueue(Robolectric.application, System.nanoTime(), "__" + System.nanoTime(),
-                jobSerializer);
-        jobQueue.insert(createNewJobHolder(new Params(0)));
-        calledForSerialize.await(1, TimeUnit.SECONDS);
-        MatcherAssert.assertThat("custom serializer should be called for serialize", (int) calledForSerialize.getCount(), CoreMatchers.equalTo(0));
-        MatcherAssert.assertThat("custom serializer should NOT be called for deserialize", (int) calledForDeserialize.getCount(), CoreMatchers.equalTo(1));
-        jobQueue.nextJobAndIncRunCount(true, null);
-        MatcherAssert.assertThat("custom serializer should be called for deserialize", (int) calledForDeserialize.getCount(), CoreMatchers.equalTo(0));
-
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/jobs/DummyJob.java b/jobqueue/test/com/path/android/jobqueue/test/jobs/DummyJob.java
deleted file mode 100644
index d931e1e..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/jobs/DummyJob.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.path.android.jobqueue.test.jobs;
-
-import com.path.android.jobqueue.Job;
-import com.path.android.jobqueue.Params;
-
-public class DummyJob extends Job {
-    int onAddedCnt = 0;
-    int onRunCnt = 0;
-    int onCancelCnt = 0;
-    int shouldReRunOnThrowableCnt = 0;
-
-    public DummyJob(Params params) {
-        super(params);
-    }
-
-    @Override
-    public void onAdded() {
-        onAddedCnt++;
-    }
-
-    @Override
-    public void onRun() throws Throwable {
-        onRunCnt++;
-    }
-
-    @Override
-    protected void onCancel() {
-        onCancelCnt++;
-    }
-
-    @Override
-    protected boolean shouldReRunOnThrowable(Throwable throwable) {
-        shouldReRunOnThrowableCnt++;
-        return false;
-    }
-
-    public int getOnAddedCnt() {
-        return onAddedCnt;
-    }
-
-    public int getOnRunCnt() {
-        return onRunCnt;
-    }
-
-    public int getOnCancelCnt() {
-        return onCancelCnt;
-    }
-
-    public int getShouldReRunOnThrowableCnt() {
-        return shouldReRunOnThrowableCnt;
-    }
-}
diff --git a/jobqueue/test/com/path/android/jobqueue/test/util/JobQueueFactory.java b/jobqueue/test/com/path/android/jobqueue/test/util/JobQueueFactory.java
deleted file mode 100644
index 8cb46ef..0000000
--- a/jobqueue/test/com/path/android/jobqueue/test/util/JobQueueFactory.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package com.path.android.jobqueue.test.util;
-
-import com.path.android.jobqueue.JobQueue;
-
-public interface JobQueueFactory {
-    public JobQueue createNew(long sessionId, String id);
-}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000..745d971
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':app', ':jobmanagerlib'
