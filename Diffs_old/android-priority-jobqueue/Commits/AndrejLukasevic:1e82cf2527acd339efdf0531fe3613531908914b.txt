diff --git a/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java b/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
index f5a1090..96a8422 100644
--- a/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
+++ b/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
@@ -22,7 +22,6 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_main);
         Configuration configs = new Configuration.Builder(getApplicationContext()).id("test").loadFactor(100).build();
         this.jobManager = new JobManager(getApplicationContext(), configs);
-        this.jobManager.start();
         jobManager.addJob(new SimpleJob());
     }
 
@@ -31,12 +30,11 @@ protected void onCreate(Bundle savedInstanceState) {
         private static AtomicInteger i = new AtomicInteger(0);
 
         protected SimpleJob() {
-            super(new Params(1).setRequiresNetwork(false).setPersistent(true));
+            super(new Params(1).setRequiresNetwork(false).setPersistent(true).setDelayMs(25000));
         }
 
         @Override
         public void onAdded() {
-
             Log.d("Job", "onAdded: ctx" + getContext());
 
         }
@@ -48,6 +46,7 @@ public void onRun() throws Throwable {
             Log.d("Job", "before sleep Threadid: " + Thread.currentThread().getId() + "  job Nr: " + i.get() + getContext().getString(R.string.abc_action_bar_home_description));
             Thread.sleep(10000);
             Log.d("Job", "after sleep Threadid: " + Thread.currentThread().getId() + "  job Nr: " + i.get());
+//            getJobManager().addJob(new SimpleJob());
 
         }
 
diff --git a/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
index 6983649..1daeebc 100644
--- a/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
@@ -22,6 +22,7 @@
     private boolean persistent;
     private transient int currentRunCount;
     private transient Context context;
+    private transient JobManager jobManager;
 
     protected BaseJob(boolean requiresNetwork) {
         this(requiresNetwork, false, null);
@@ -183,11 +184,19 @@ protected int getRetryLimit() {
     /**
      * Gets called automatically
      */
-    protected final void attachContext(Context context) {
+    protected void attachContext(Context context) {
         this.context = context;
     }
 
+    protected void attachJobManager(JobManager jobManager) {
+        this.jobManager = jobManager;
+    }
+
     public Context getContext() {
         return context;
     }
+
+    public JobManager getJobManager() {
+        return jobManager;
+    }
 }
diff --git a/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
index ec4e5c3..5f3d446 100644
--- a/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
@@ -315,6 +315,7 @@ private JobHolder getNextJob() {
         }
         if (jobHolder != null && jobHolder.baseJob != null) {
             jobHolder.baseJob.attachContext(appContext);
+            jobHolder.baseJob.attachJobManager(this);
         }
 
         return jobHolder;
