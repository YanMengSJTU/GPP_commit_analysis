diff --git a/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java b/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
index 7fc4975..ec7a868 100644
--- a/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
+++ b/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
@@ -20,7 +20,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
-        Configuration configs = new Configuration.Builder(getApplicationContext()).id("test").loadFactor(1).build();
+        Configuration configs = new Configuration.Builder(getApplicationContext()).id("test").loadFactor(100).build();
         this.jobManager = new JobManager(getApplicationContext(), configs);
         this.jobManager.start();
         this.jobManager.setOnAllJobsFinishedListener(new JobManager.OnAllJobsFinishedListener() {
@@ -29,7 +29,7 @@ public void onAllJobsFinished() {
                 Log.d("Job", "On all jobs finished callback");
             }
         });
-        jobManager.addJob(new SimpleJob(jobManager));
+        jobManager.addJobInBackground(new SimpleJob(jobManager));
     }
 
     private static class SimpleJob extends Job {
@@ -49,13 +49,13 @@ public void onAdded() {
         @Override
         public void onRun() throws Throwable {
             Log.d("Job", "Threadid: " + Thread.currentThread().getId() + "  job Nr: " + i.get());
-            Thread.sleep(300);
+            Thread.sleep(100);
 
-            if (i.get() > 40) {
+            if (i.get() > 20) {
                 return;
             }
 
-            jobManager.addJob(new SimpleJob(jobManager));
+            jobManager.addJobInBackground(new SimpleJob(jobManager));
 
             i.incrementAndGet();
         }
diff --git a/gradle.properties b/gradle.properties
index 1d3591c..ada1a03 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -15,4 +15,18 @@
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
\ No newline at end of file
+# org.gradle.parallel=true
+
+VERSION_NAME=1.2
+VERSION_CODE=1
+GROUP=com.survivingwithandroid
+POM_DESCRIPTION=Android Weather Lib
+POM_URL=https://github.com/survivingwithandroid/WeatherLib
+POM_SCM_URL=https://github.com/survivingwithandroid/WeatherLib
+POM_SCM_CONNECTION=scm:git@github.com:survivingwithandroid/weatherlib.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:survivingwithandroid/weatherlib.git
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+POM_DEVELOPER_ID=survivingwithandroid
+POM_DEVELOPER_NAME=Francesco Azzola
\ No newline at end of file
diff --git a/jobmanagerlib/build.gradle b/jobmanagerlib/build.gradle
index dcf4fce..53b1530 100644
--- a/jobmanagerlib/build.gradle
+++ b/jobmanagerlib/build.gradle
@@ -1,9 +1,105 @@
 apply plugin: 'com.android.library'
+//apply plugin: 'maven'
+//apply plugin: 'signing'
+//
+//def sonatypeRepositoryUrl
+//if (isReleaseBuild()) {
+//    println 'RELEASE BUILD'
+//    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+//            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+//} else {
+//    println 'SNAPSHOT BUILD'
+//    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+//            : "https://oss.sonatype.org/content/repositories/snapshots/"
+//
+//}
+//
+//def getRepositoryUsername() {
+//    return hasProperty('nexusUsername') ? nexusUsername : ""
+//}
+//
+//def getRepositoryPassword() {
+//    return hasProperty('nexusPassword') ? nexusPassword : ""
+//}
+//
+//afterEvaluate { project ->
+//    uploadArchives {
+//        repositories {
+//            mavenDeployer {
+//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+//
+//                pom.artifactId = POM_ARTIFACT_ID
+//
+//                repository(url: sonatypeRepositoryUrl) {
+//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+//                }
+//
+//                pom.project {
+//                    name POM_NAME
+//                    packaging POM_PACKAGING
+//                    description POM_DESCRIPTION
+//                    url POM_URL
+//
+//                    scm {
+//                        url POM_SCM_URL
+//                        connection POM_SCM_CONNECTION
+//                        developerConnection POM_SCM_DEV_CONNECTION
+//                    }
+//
+//                    licenses {
+//                        license {
+//                            name POM_LICENCE_NAME
+//                            url POM_LICENCE_URL
+//                            distribution POM_LICENCE_DIST
+//                        }
+//                    }
+//
+//                    developers {
+//                        developer {
+//                            id POM_DEVELOPER_ID
+//                            name POM_DEVELOPER_NAME
+//                        }
+//                    }
+//                }
+//            }
+//        }
+//    }
+//
+//    signing {
+//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+//        sign configurations.archives
+//    }
+//
+//    task androidJavadocs(type: Javadoc) {
+//        source = android.sourceSets.main.allJava
+//        classpath += project.files(android.plugin.getRuntimeJarList().join(File.pathSeparator))
+//    }
+//
+//    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+//        classifier = 'javadoc'
+//        //basename = artifact_id
+//        from androidJavadocs.destinationDir
+//    }
+//
+//    task androidSourcesJar(type: Jar) {
+//        classifier = 'sources'
+//        //basename = artifact_id
+//        from android.sourceSets.main.allSource
+//    }
+//
+//    artifacts {
+//        //archives packageReleaseJar
+//        archives androidSourcesJar
+//        archives androidJavadocsJar
+//    }
+//}
 
 android {
     compileSdkVersion 21
     buildToolsVersion "21.1.2"
 
+
+
     defaultConfig {
         minSdkVersion 15
         targetSdkVersion 21
diff --git a/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
index 49f367e..d2c33ff 100644
--- a/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
@@ -19,6 +19,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * a JobManager that supports;
@@ -37,6 +38,7 @@
     private boolean running;
     private OnAllJobsFinishedListener onAllJobsFinishedListener;
 
+    private final AtomicInteger counterForTimedExecutor = new AtomicInteger(0);
     private final Context appContext;
     private final NetworkUtil networkUtil;
     private final DependencyInjector dependencyInjector;
@@ -98,10 +100,6 @@ public JobManager(Context context, Configuration config) {
         start();
     }
 
-    /**
-     * Will not work properly with methods addJobInBackground
-     * @param onAllJobsFinishedListener
-     */
     public void setOnAllJobsFinishedListener(OnAllJobsFinishedListener onAllJobsFinishedListener) {
         this.onAllJobsFinishedListener = onAllJobsFinishedListener;
         if (onAllJobsFinishedListener != null) {
@@ -587,6 +585,7 @@ public void addJobInBackground(final int priority, final long delay, final BaseJ
     protected void addJobInBackground(final int priority, final long delay, final BaseJob baseJob,
         /*nullable*/final AsyncAddCallback callback) {
         final long callTime = System.nanoTime();
+        counterForTimedExecutor.incrementAndGet();
         timedExecutor.execute(new Runnable() {
             @Override
             public void run() {
@@ -596,6 +595,7 @@ public void run() {
                     if (callback != null) {
                         callback.onAdded(id);
                     }
+                    counterForTimedExecutor.decrementAndGet();
                 } catch (Throwable t) {
                     JqLog.e(t, "addJobInBackground received an exception. job class: %s", baseJob.getClass().getSimpleName());
                 }
@@ -606,7 +606,7 @@ public void run() {
     //Called when no more jobs are running
     @Override
     public void onAllRunningJobsFinished() {
-        if (count() == 0) {
+        if (count() == 0 && counterForTimedExecutor.get() == 0) {
             if (onAllJobsFinishedListener != null) {
                 onAllJobsFinishedListener.onAllJobsFinished();
             }
