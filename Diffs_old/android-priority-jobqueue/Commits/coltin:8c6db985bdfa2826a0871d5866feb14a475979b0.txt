diff --git a/README.md b/README.md
index e0c0f4c..493803b 100644
--- a/README.md
+++ b/README.md
@@ -128,7 +128,7 @@ At Path, we use [greenrobot's EventBus](https://github.com/greenrobot/EventBus);
 ### Getting Started
 We distribute artifacts through maven central repository.
 
-Gradle: `compile 'com.birbit:android-priority-jobqueue:1.3.1'`
+Gradle: `compile 'com.birbit:android-priority-jobqueue:1.3.2'`
 
 Maven:
 
@@ -136,7 +136,7 @@ Maven:
 <dependency>
     <groupId>com.birbit</groupId>
     <artifactId>android-priority-jobqueue</artifactId>
-    <version>1.3.1</version>
+    <version>1.3.2</version>
 </dependency>
 ```
 
@@ -149,6 +149,9 @@ We highly recommend checking how you can configure job manager and individual jo
 * [Review sample configuration][7]
 
 ### Version History
+  - 1.3.2 (July 5, 2015)
+   - Added ability to change a Job's priority or add delay before it is retried. This mechanism can be used to add exponential backoff to jobs.
+   - Added `Job#getApplicationContext` as a convenience method to get the Context inside a Job.
   - 1.3.1 (April 19, 2015)
    - Fixed issue #19 which was blocking a group forever if a job from that group is cancelled while running and then onRun fails.
    - Updated Robolectric version and moved all testing to Gradle.
diff --git a/jobqueue/src/main/AndroidManifest.xml b/jobqueue/src/main/AndroidManifest.xml
index 384b8c0..8ff88c3 100644
--- a/jobqueue/src/main/AndroidManifest.xml
+++ b/jobqueue/src/main/AndroidManifest.xml
@@ -2,7 +2,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.path.android.jobqueue"
           android:versionCode="2"
-          android:versionName="1.3.2-SNAPSHOT">
+          android:versionName="1.3.2">
     <application>
     </application>
 </manifest>
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java b/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java
index d7ccd83..56eda61 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java
@@ -1,13 +1,19 @@
 package com.path.android.jobqueue;
 
 /**
- * Created when a job fails in onRun method.
+ * Created by {@link Job#shouldReRunOnThrowable(Throwable, int, int)}.
  * <p>
- *
+ * This object keeps additional data about handling job failures. You can simply use
+ * {@link #RETRY} or {@link #CANCEL} if you just want to retry or cancel a job. Alternatively,
+ * you can create your own instance where you can add a delay {@link #setNewDelayInMs(Long)} or
+ * change Job's prioritiy {@link #setNewPriority(Integer)}.
+ * <p>
+ * A common use case is exponentially backing off a Job and you can use
+ * {@link #createExponentialBackoff(int, long)} method to do that.
  */
 public class RetryConstraint {
-    public static final RetryConstraint RETRY = new RetryConstraint(true);
-    public static final RetryConstraint CANCEL = new RetryConstraint(false);
+    public static final RetryConstraint RETRY = new ImmutableRetryConstraint(true);
+    public static final RetryConstraint CANCEL = new ImmutableRetryConstraint(false);
     private boolean retry;
     private Long newDelayInMs;
     private Integer newPriority;
@@ -16,14 +22,14 @@ public RetryConstraint(boolean retry) {
         this.retry = retry;
     }
 
-    public static RetryConstraint simpleResult(boolean reRun) {
-        return reRun ? RETRY : CANCEL;
-    }
-
     public boolean shouldRetry() {
         return retry;
     }
 
+    /**
+     * Set whether the Job should be run again or cancelled.
+     * @param retry
+     */
     public void setRetry(boolean retry) {
         this.retry = retry;
     }
@@ -32,6 +38,10 @@ public Long getNewDelayInMs() {
         return newDelayInMs;
     }
 
+    /**
+     * Sets a timeout until the Job is tried again.
+     * @param newDelayInMs
+     */
     public void setNewDelayInMs(Long newDelayInMs) {
         this.newDelayInMs = newDelayInMs;
     }
@@ -40,6 +50,10 @@ public Integer getNewPriority() {
         return newPriority;
     }
 
+    /**
+     * Updates the Job's prioritiy.
+     * @param newPriority
+     */
     public void setNewPriority(Integer newPriority) {
         this.newPriority = newPriority;
     }
@@ -49,4 +63,27 @@ public static RetryConstraint createExponentialBackoff(int runCount, long initia
         constraint.setNewDelayInMs((long) Math.pow(initialBackOffInMs, runCount));
         return constraint;
     }
+
+    private static class ImmutableRetryConstraint extends RetryConstraint {
+        private static final String MESSAGE = "This object is immutable. Create a new one using the"
+                + " constructor.";
+        public ImmutableRetryConstraint(boolean retry) {
+            super(retry);
+        }
+
+        @Override
+        public void setRetry(boolean retry) {
+            throw new IllegalStateException(MESSAGE);
+        }
+
+        @Override
+        public void setNewDelayInMs(Long newDelayInMs) {
+            throw new IllegalStateException(MESSAGE);
+        }
+
+        @Override
+        public void setNewPriority(Integer newPriority) {
+            throw new IllegalStateException(MESSAGE);
+        }
+    }
 }
