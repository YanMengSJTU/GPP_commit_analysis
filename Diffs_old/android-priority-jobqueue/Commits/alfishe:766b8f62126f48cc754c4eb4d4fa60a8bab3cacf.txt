diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
index bd8182a..973229c 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
@@ -305,6 +305,7 @@ private void notifyJobConsumer() {
         synchronized (newJobListeners) {
             newJobListeners.notifyAll();
         }
+
         jobConsumerExecutor.considerAddingConsumer();
     }
 
@@ -320,7 +321,9 @@ private void ensureConsumerOnTime(long waitMs) {
     }
 
     private boolean hasNetwork() {
-        return networkUtil == null || networkUtil.isConnected(appContext);
+        boolean result = networkUtil == null || networkUtil.isConnected(appContext);
+
+        return result;
     }
 
     private JobHolder getNextJob() {
@@ -391,31 +394,44 @@ private void reAddJob(JobHolder jobHolder) {
      * @return
      */
     public JobStatus getJobStatus(long id, boolean isPersistent) {
-        if(jobConsumerExecutor.isRunning(id, isPersistent)) {
-            return JobStatus.RUNNING;
+        JobStatus result;
+
+        if (jobConsumerExecutor.isRunning(id, isPersistent)) {
+            result = JobStatus.RUNNING;
         }
-        JobHolder holder;
-        if(isPersistent) {
-            synchronized (persistentJobQueue) {
-                holder = persistentJobQueue.findJobById(id);
+        else {
+            JobHolder holder;
+
+            if (isPersistent) {
+                synchronized (persistentJobQueue) {
+                    holder = persistentJobQueue.findJobById(id);
+                }
             }
-        } else {
-            synchronized (nonPersistentJobQueue) {
-                holder = nonPersistentJobQueue.findJobById(id);
+            else {
+                synchronized (nonPersistentJobQueue) {
+                    holder = nonPersistentJobQueue.findJobById(id);
+                }
+            }
+
+            if (holder == null) {
+                result = JobStatus.UNKNOWN;
+            }
+            else {
+                boolean network = hasNetwork();
+
+                if (holder.requiresNetwork() && !network) {
+                    result = JobStatus.WAITING_NOT_READY;
+                }
+                else if (holder.getDelayUntilNs() > System.nanoTime()) {
+                    result = JobStatus.WAITING_NOT_READY;
+                }
+                else {
+                    result = JobStatus.WAITING_READY;
+                }
             }
-        }
-        if(holder == null) {
-            return JobStatus.UNKNOWN;
-        }
-        boolean network = hasNetwork();
-        if(holder.requiresNetwork() && !network) {
-            return JobStatus.WAITING_NOT_READY;
-        }
-        if(holder.getDelayUntilNs() > System.nanoTime()) {
-            return JobStatus.WAITING_NOT_READY;
         }
 
-        return JobStatus.WAITING_READY;
+        return result;
     }
 
     private void removeJob(JobHolder jobHolder) {
@@ -438,10 +454,12 @@ public synchronized void clear() {
             nonPersistentJobQueue.clear();
             nonPersistentOnAddedLocks.clear();
         }
+
         synchronized (persistentJobQueue) {
             persistentJobQueue.clear();
             persistentOnAddedLocks.clear();
         }
+
         runningJobGroups.clear();
     }
 
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java b/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
index eefc667..2e04782 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
@@ -323,7 +323,8 @@ private BaseJob safeDeserialize(byte[] bytes) {
         try {
             return jobSerializer.serialize(object);
         } catch (Throwable t) {
-            JqLog.e(t, "error while serializing object %s", object.getClass().getSimpleName());
+            String errorMessage = String.format("error while serializing object %s", object.getClass().getSimpleName());
+            JqLog.e(t, errorMessage);
         }
         return null;
     }
