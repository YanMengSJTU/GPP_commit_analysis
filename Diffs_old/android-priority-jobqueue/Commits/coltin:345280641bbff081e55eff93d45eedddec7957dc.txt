diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
index e3c1ea0..6c0bbf7 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
@@ -189,7 +189,7 @@ public long addJob(Job job) {
                 clearOnAddedLock(nonPersistentOnAddedLocks, id);
             }
         }
-        notifyJobConsumer();
+        ensureConsumerWhenNeeded(null);
         return id;
     }
 
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
index 2b893f0..f13de6d 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/DelayedRunTest.java
@@ -2,14 +2,20 @@
 
 import com.path.android.jobqueue.JobManager;
 import com.path.android.jobqueue.Params;
+import com.path.android.jobqueue.config.Configuration;
 import com.path.android.jobqueue.test.jobs.DummyJob;
 import static org.hamcrest.CoreMatchers.*;
+import static org.hamcrest.MatcherAssert.*;
 import org.hamcrest.*;
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.*;
 import org.robolectric.annotation.Config;
 
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = com.path.android.jobqueue.BuildConfig.class)
 public class DelayedRunTest extends JobManagerTestBase {
@@ -20,6 +26,26 @@ public void testDelayedRun() throws Exception {
         testDelayedRun(false, true);
         testDelayedRun(true, true);
     }
+
+    @Test
+    public void testDelayWith0Consumers() throws InterruptedException {
+        JobManager jobManager = createJobManager(
+                new Configuration.Builder(RuntimeEnvironment.application)
+                        .minConsumerCount(0)
+                        .maxConsumerCount(3));
+        final CountDownLatch latch = new CountDownLatch(1);
+        DummyJob dummyJob = new DummyJob(new Params(0).delayInMs(2000)) {
+            @Override
+            public void onRun() throws Throwable {
+                super.onRun();
+                latch.countDown();
+            }
+        };
+        jobManager.addJob(dummyJob);
+        assertThat("job should run in 3 seconds", latch.await(3, TimeUnit.DAYS),
+                is(true));
+    }
+
     public void testDelayedRun(boolean persist, boolean tryToStop) throws Exception {
         JobManager jobManager = createJobManager();
         DummyJob delayedJob = new DummyJob(new Params(10).delayInMs(2000).setPersistent(persist));
@@ -37,6 +63,5 @@ public void testDelayedRun(boolean persist, boolean tryToStop) throws Exception
         }
         Thread.sleep(3000);
         MatcherAssert.assertThat("all jobs should be completed", jobManager.count(), equalTo(0));
-
     }
 }
