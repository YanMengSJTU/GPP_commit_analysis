diff --git a/README.md b/README.md
index 4774835..a43bbe6 100644
--- a/README.md
+++ b/README.md
@@ -128,7 +128,7 @@ At Path, we use [greenrobot's EventBus](https://github.com/greenrobot/EventBus);
 ### Getting Started
 We distribute artifacts through maven central repository.
 
-Gradle: `compile 'com.birbit:android-priority-jobqueue:1.3.2'`
+Gradle: `compile 'com.birbit:android-priority-jobqueue:1.3.3'`
 
 Maven:
 
@@ -136,7 +136,7 @@ Maven:
 <dependency>
     <groupId>com.birbit</groupId>
     <artifactId>android-priority-jobqueue</artifactId>
-    <version>1.3.2</version>
+    <version>1.3.3</version>
 </dependency>
 ```
 
@@ -149,6 +149,8 @@ We highly recommend checking how you can configure job manager and individual jo
 * [Review sample configuration][7]
 
 ### Version History
+  - 1.3.3 (July 12, 2015)
+   - Fixed default exponential backoff. Issue #33
   - 1.3.2 (July 5, 2015)
    - Added ability to change a Job's priority or add delay before it is retried. This mechanism can be used to add exponential backoff to jobs.
    - Added `Job#getApplicationContext` as a convenience method to get the Context inside a Job.
diff --git a/jobqueue/src/main/AndroidManifest.xml b/jobqueue/src/main/AndroidManifest.xml
index 8ff88c3..0a7b7c1 100644
--- a/jobqueue/src/main/AndroidManifest.xml
+++ b/jobqueue/src/main/AndroidManifest.xml
@@ -2,7 +2,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.path.android.jobqueue"
           android:versionCode="2"
-          android:versionName="1.3.2">
+          android:versionName="1.3.3">
     <application>
     </application>
 </manifest>
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java b/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java
index 56eda61..a725340 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/RetryConstraint.java
@@ -60,7 +60,8 @@ public void setNewPriority(Integer newPriority) {
 
     public static RetryConstraint createExponentialBackoff(int runCount, long initialBackOffInMs) {
         RetryConstraint constraint = new RetryConstraint(true);
-        constraint.setNewDelayInMs((long) Math.pow(initialBackOffInMs, runCount));
+        constraint.setNewDelayInMs(initialBackOffInMs *
+                (long) Math.pow(2, Math.max(0, runCount - 1)));
         return constraint;
     }
 
diff --git a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java
index 18dc14a..a37b036 100644
--- a/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java
+++ b/jobqueue/src/test/java/com/path/android/jobqueue/test/jobmanager/RetryLogicTest.java
@@ -53,9 +53,16 @@ public void testExponential() {
         assertThat("exp 1",RetryConstraint.createExponentialBackoff(1, 10).getNewDelayInMs(),
                 is(10L));
         assertThat("exp 2",RetryConstraint.createExponentialBackoff(2, 10).getNewDelayInMs(),
-                is(100L));
+                is(20L));
         assertThat("exp 3",RetryConstraint.createExponentialBackoff(3, 10).getNewDelayInMs(),
-                is(1000L));
+                is(40L));
+
+        assertThat("exp 1",RetryConstraint.createExponentialBackoff(1, 5).getNewDelayInMs(),
+                is(5L));
+        assertThat("exp 2",RetryConstraint.createExponentialBackoff(2, 5).getNewDelayInMs(),
+                is(10L));
+        assertThat("exp 3",RetryConstraint.createExponentialBackoff(3, 5).getNewDelayInMs(),
+                is(20L));
     }
 
     @Test
