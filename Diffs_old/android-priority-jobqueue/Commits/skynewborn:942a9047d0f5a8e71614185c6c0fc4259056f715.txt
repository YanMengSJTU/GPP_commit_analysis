diff --git a/build.gradle b/build.gradle
index e8cb2ac..f98a62c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.0'
+        classpath 'com.android.tools.build:gradle:1.3.3'
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 7a8d21a..11b395d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip
diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index 3fd88d8..69f568f 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -5,9 +5,9 @@ apply plugin: 'com.android.library'
 /*Properties releaseConfig = new Properties()
 releaseConfig.load(new FileInputStream("${projectDir}/releaseConfig.properties"))
 ext.releaseConfig = releaseConfig*/
-//task wrapper(type: Wrapper) {
-//    gradleVersion = '2.2.1'
-//}
+task wrapper(type: Wrapper) {
+    gradleVersion = '2.6'
+}
 
 apply plugin: 'maven'
 apply plugin: 'signing'
@@ -31,8 +31,8 @@ dependencies {
 
 
 android {
-    compileSdkVersion 22
-    buildToolsVersion "22.0.1"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
     buildTypes {
         debug {
             testCoverageEnabled = true
@@ -41,7 +41,7 @@ android {
 
     defaultConfig {
         minSdkVersion 7
-        targetSdkVersion 21
+        targetSdkVersion 23
     }
 }
 
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java b/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
index 06f2d16..15b96f8 100755
--- a/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
@@ -234,10 +234,13 @@ public int countReadyJobs(boolean hasNetwork, Collection<String> excludeGroups)
         }
         Cursor cursor = db.rawQuery(sql, new String[]{Long.toString(sessionId), Long.toString(System.nanoTime())});
         try {
-            if(!cursor.moveToNext()) {
+            if (!cursor.moveToFirst()) {
                 return 0;
             }
             return cursor.getInt(0);
+        } catch (Throwable e) {
+            JqLog.e(e, "count ready jobs with exception.");
+            return 0;
         } finally {
             cursor.close();
         }
@@ -250,7 +253,7 @@ public int countReadyJobs(boolean hasNetwork, Collection<String> excludeGroups)
     public JobHolder findJobById(long id) {
         Cursor cursor = db.rawQuery(sqlHelper.FIND_BY_ID_QUERY, new String[]{Long.toString(id)});
         try {
-            if(!cursor.moveToFirst()) {
+            if (!cursor.moveToFirst()) {
                 return null;
             }
             return createJobHolderFromCursor(cursor);
@@ -335,7 +338,7 @@ public JobHolder nextJobAndIncRunCount(boolean hasNetwork, Collection<String> ex
             Cursor cursor = db.rawQuery(selectQuery,
                     new String[]{Long.toString(sessionId), Long.toString(System.nanoTime())});
             try {
-                if (!cursor.moveToNext()) {
+                if (!cursor.moveToFirst()) {
                     return null;
                 }
                 JobHolder holder = createJobHolderFromCursor(cursor);
