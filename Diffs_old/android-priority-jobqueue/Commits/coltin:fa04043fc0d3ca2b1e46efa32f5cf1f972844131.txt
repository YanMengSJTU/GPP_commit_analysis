diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/Job.java b/jobqueue/src/main/java/com/path/android/jobqueue/Job.java
index 5b1ddb9..597f28a 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/Job.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/Job.java
@@ -2,6 +2,8 @@
 
 import com.path.android.jobqueue.log.JqLog;
 
+import android.content.Context;
+
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
@@ -28,6 +30,8 @@
     private transient long delayInMs;
     transient boolean cancelled;
 
+    private transient Context applicationContext;
+
 
     protected Job(Params params) {
         this.requiresNetwork = params.doesRequireNetwork();
@@ -240,4 +244,19 @@ public void assertNotCancelled() {
             throw new RuntimeException("job is cancelled");
         }
     }
+
+    /*package*/ void setApplicationContext(Context context) {
+        this.applicationContext = context;
+    }
+
+    /**
+     * Convenience method to get the application context in a Job.
+     * <p>
+     * This context is set when job is added to a JobManager.
+     *
+     * @return The application context
+     */
+    public Context getApplicationContext() {
+        return applicationContext;
+    }
 }
diff --git a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
index ffdf63f..e3c1ea0 100644
--- a/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
+++ b/jobqueue/src/main/java/com/path/android/jobqueue/JobManager.java
@@ -178,6 +178,7 @@ public long addJob(Job job) {
             //inject members b4 calling onAdded
             dependencyInjector.inject(job);
         }
+        jobHolder.getJob().setApplicationContext(appContext);
         jobHolder.getJob().onAdded();
         if(job.isPersistent()) {
             synchronized (persistentJobQueue) {
@@ -530,7 +531,7 @@ private JobHolder getNextJob() {
         } else {
             waitForOnAddedLock(nonPersistentOnAddedLocks, jobHolder.getId());
         }
-
+        jobHolder.getJob().setApplicationContext(appContext);
         return jobHolder;
     }
 
