diff --git a/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java b/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
index ec7a868..f5a1090 100644
--- a/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
+++ b/app/src/main/java/com/spix/jobmanager/activity/MainActivity.java
@@ -23,51 +23,46 @@ protected void onCreate(Bundle savedInstanceState) {
         Configuration configs = new Configuration.Builder(getApplicationContext()).id("test").loadFactor(100).build();
         this.jobManager = new JobManager(getApplicationContext(), configs);
         this.jobManager.start();
-        this.jobManager.setOnAllJobsFinishedListener(new JobManager.OnAllJobsFinishedListener() {
-            @Override
-            public void onAllJobsFinished() {
-                Log.d("Job", "On all jobs finished callback");
-            }
-        });
-        jobManager.addJobInBackground(new SimpleJob(jobManager));
+        jobManager.addJob(new SimpleJob());
     }
 
     private static class SimpleJob extends Job {
 
         private static AtomicInteger i = new AtomicInteger(0);
-        private final JobManager jobManager;
 
-        protected SimpleJob(JobManager jobManager) {
-            super(new Params(1).setRequiresNetwork(false));
-            this.jobManager = jobManager;
+        protected SimpleJob() {
+            super(new Params(1).setRequiresNetwork(false).setPersistent(true));
         }
 
         @Override
         public void onAdded() {
+
+            Log.d("Job", "onAdded: ctx" + getContext());
+
         }
 
         @Override
         public void onRun() throws Throwable {
-            Log.d("Job", "Threadid: " + Thread.currentThread().getId() + "  job Nr: " + i.get());
-            Thread.sleep(100);
 
-            if (i.get() > 20) {
-                return;
-            }
+            Log.d("Job", "onRun: ctx" + getContext());
+            Log.d("Job", "before sleep Threadid: " + Thread.currentThread().getId() + "  job Nr: " + i.get() + getContext().getString(R.string.abc_action_bar_home_description));
+            Thread.sleep(10000);
+            Log.d("Job", "after sleep Threadid: " + Thread.currentThread().getId() + "  job Nr: " + i.get());
 
-            jobManager.addJobInBackground(new SimpleJob(jobManager));
-
-            i.incrementAndGet();
         }
 
         @Override
         protected void onCancel() {
+            Log.d("Job", "onCancel: ctx" + getContext());
         }
 
         @Override
         protected boolean shouldReRunOnThrowable(Throwable throwable) {
+            Log.d("Job", "shouldReRunOnThrowable: ctx" + getContext());
+            Log.d("Job", "error: " + throwable.getMessage());
             return false;
         }
+
     }
 
 
diff --git a/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
index 6139d92..6983649 100644
--- a/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/BaseJob.java
@@ -1,5 +1,7 @@
 package com.spix.jobqueue;
 
+import android.content.Context;
+
 import com.spix.jobqueue.log.JqLog;
 
 import java.io.IOException;
@@ -19,6 +21,7 @@
     private String groupId;
     private boolean persistent;
     private transient int currentRunCount;
+    private transient Context context;
 
     protected BaseJob(boolean requiresNetwork) {
         this(requiresNetwork, false, null);
@@ -76,6 +79,7 @@ public final boolean isPersistent() {
      * The actual method that should to the work
      * It should finish w/o any exception. If it throws any exception, {@code shouldReRunOnThrowable} will be called to
      * decide either to dismiss the job or re-run it.
+     *
      * @throws Throwable
      */
     abstract public void onRun() throws Throwable;
@@ -94,6 +98,7 @@ public final boolean isPersistent() {
 
     /**
      * Runs the job and catches any exception
+     *
      * @param currentRunCount
      * @return
      */
@@ -113,7 +118,7 @@ public final boolean safeRun(int currentRunCount) {
             failed = true;
             JqLog.e(t, "error while executing job");
             reRun = currentRunCount < getRetryLimit();
-            if(reRun) {
+            if (reRun) {
                 try {
                     reRun = shouldReRunOnThrowable(t);
                 } catch (Throwable t2) {
@@ -136,6 +141,7 @@ public final boolean safeRun(int currentRunCount) {
     /**
      * before each run, JobManager sets this number. Might be useful for the {@link BaseJob#onRun()}
      * method
+     *
      * @return
      */
     protected int getCurrentRunCount() {
@@ -145,6 +151,7 @@ protected int getCurrentRunCount() {
     /**
      * if job is set to require network, it will not be called unless {@link com.spix.jobqueue.network.NetworkUtil}
      * reports that there is a network connection
+     *
      * @return
      */
     public final boolean requiresNetwork() {
@@ -156,6 +163,7 @@ public final boolean requiresNetwork() {
      * never run them in parallel (unless they are being sent to different conversations).
      * By assigning same groupId to jobs, you can ensure that that type of jobs will be run in the order they were given
      * (if their priority is the same).
+     *
      * @return
      */
     public final String getRunGroupId() {
@@ -165,9 +173,21 @@ public final String getRunGroupId() {
     /**
      * By default, jobs will be retried {@code DEFAULT_RETRY_LIMIT}  times.
      * If job fails this many times, onCancel will be called w/o calling {@code shouldReRunOnThrowable}
+     *
      * @return
      */
     protected int getRetryLimit() {
         return DEFAULT_RETRY_LIMIT;
     }
+
+    /**
+     * Gets called automatically
+     */
+    protected final void attachContext(Context context) {
+        this.context = context;
+    }
+
+    public Context getContext() {
+        return context;
+    }
 }
diff --git a/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
index c676fd9..ec4e5c3 100644
--- a/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
+++ b/jobmanagerlib/src/main/java/com/spix/jobqueue/JobManager.java
@@ -313,6 +313,9 @@ private JobHolder getNextJob() {
         } else {
             waitForOnAddedLock(nonPersistentOnAddedLocks, jobHolder.getId());
         }
+        if (jobHolder != null && jobHolder.baseJob != null) {
+            jobHolder.baseJob.attachContext(appContext);
+        }
 
         return jobHolder;
     }
