diff --git a/jobqueue/build.gradle b/jobqueue/build.gradle
index 913b260..08f0113 100644
--- a/jobqueue/build.gradle
+++ b/jobqueue/build.gradle
@@ -11,7 +11,7 @@ buildscript {
     }
 }
 
-apply plugin: 'android-library'
+apply plugin: 'com.android.library'
 apply plugin: 'robolectric'
 
 repositories {
diff --git a/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java b/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java
index 943e02e..730ba00 100644
--- a/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java
+++ b/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/DbOpenHelper.java
@@ -8,6 +8,8 @@
  * Helper class for {@link SqliteJobQueue} to handle database connection
  */
 public class DbOpenHelper extends SQLiteOpenHelper {
+    //region Constants
+
     private static final int DB_VERSION = 3;
     /*package*/ static final String JOB_HOLDER_TABLE_NAME = "job_holder";
     /*package*/ static final SqlHelper.Property ID_COLUMN = new SqlHelper.Property("_id", "integer", 0);
@@ -22,8 +24,50 @@
 
     /*package*/ static final int COLUMN_COUNT = 9;
 
+    //endregion
+
+    //region Fields
+
+    private Context context;
+    private int activeWritableDatabaseCount = 0;
+    private SQLiteDatabase writableDatabase;
+
+    //endregion
+
+    //region Constructors
+
     public DbOpenHelper(Context context, String name) {
         super(context, name, null, DB_VERSION);
+
+        this.context = context;
+    }
+
+    //endregion
+
+    //region Methods
+
+    @Override
+    public synchronized SQLiteDatabase getWritableDatabase() {
+        if (activeWritableDatabaseCount == 0 || writableDatabase == null) {
+            writableDatabase = super.getWritableDatabase();
+        }
+
+        activeWritableDatabaseCount++;
+
+        return writableDatabase;
+    }
+
+    @Override
+    public synchronized void close() {
+        activeWritableDatabaseCount--;
+
+        if (activeWritableDatabaseCount == 0) {
+            if (writableDatabase != null && writableDatabase.isOpen()) {
+                writableDatabase.close();
+            }
+
+            writableDatabase = null;
+        }
     }
 
     @Override
@@ -47,4 +91,6 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
         sqLiteDatabase.execSQL(SqlHelper.drop(JOB_HOLDER_TABLE_NAME));
         onCreate(sqLiteDatabase);
     }
+
+    //endregion
 }
diff --git a/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqlHelper.java b/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
index 8daf0a1..8e2324a 100644
--- a/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
+++ b/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqlHelper.java
@@ -10,6 +10,8 @@
  */
 public class SqlHelper {
 
+    //region Fields
+
     /**package**/ String FIND_BY_ID_QUERY;
 
     private SQLiteStatement insertStatement;
@@ -20,22 +22,30 @@
     private SQLiteStatement nextJobDelayedUntilWithNetworkStatement;
     private SQLiteStatement nextJobDelayedUntilWithoutNetworkStatement;
 
+    private final DbOpenHelper dbOpenHelper;
+    private final String tableName;
+    private final String primaryKeyColumnName;
+    private final int columnCount;
+    private final long sessionId;
+
+    //endregion
 
-    final SQLiteDatabase db;
-    final String tableName;
-    final String primaryKeyColumnName;
-    final int columnCount;
-    final long sessionId;
+    //region Constructors
 
-    public SqlHelper(SQLiteDatabase db, String tableName, String primaryKeyColumnName, int columnCount, long sessionId) {
-        this.db = db;
+    public SqlHelper(DbOpenHelper dbOpenHelper, String tableName, String primaryKeyColumnName, int columnCount, long sessionId) {
+        this.dbOpenHelper = dbOpenHelper;
         this.tableName = tableName;
         this.columnCount = columnCount;
         this.primaryKeyColumnName = primaryKeyColumnName;
         this.sessionId = sessionId;
+
         FIND_BY_ID_QUERY = "SELECT * FROM " + tableName + " WHERE " + DbOpenHelper.ID_COLUMN.columnName + " = ?";
     }
 
+    //endregion
+
+    //region Methods
+
     public static String create(String tableName, Property primaryKey, Property... properties) {
         StringBuilder builder = new StringBuilder("CREATE TABLE ");
         builder.append(tableName).append(" (");
@@ -54,125 +64,147 @@ public static String drop(String tableName) {
         return "DROP TABLE IF EXISTS " + tableName;
     }
 
-    public SQLiteStatement getInsertStatement() {
-        if (insertStatement == null) {
-            StringBuilder builder = new StringBuilder("INSERT INTO ").append(tableName);
-            builder.append(" VALUES (");
-            for (int i = 0; i < columnCount; i++) {
-                if (i != 0) {
-                    builder.append(",");
-                }
-                builder.append("?");
+    public SQLiteStatement getInsertStatement(SQLiteDatabase db) {
+        SQLiteStatement result;
+
+        StringBuilder builder = new StringBuilder("INSERT INTO ").append(tableName);
+        builder.append(" VALUES (");
+
+        for (int i = 0; i < columnCount; i++) {
+            if (i != 0) {
+                builder.append(",");
             }
-            builder.append(")");
-            insertStatement = db.compileStatement(builder.toString());
+
+            builder.append("?");
         }
-        return insertStatement;
+
+        builder.append(")");
+        result = db.compileStatement(builder.toString());
+
+        return result;
     }
 
-    public SQLiteStatement getCountStatement() {
-        if (countStatement == null) {
-            countStatement = db.compileStatement("SELECT COUNT(*) FROM " + tableName + " WHERE " +
+    public SQLiteStatement getCountStatement(SQLiteDatabase db) {
+        SQLiteStatement result = db.compileStatement("SELECT COUNT(*) FROM " + tableName + " WHERE " +
                     DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " != ?");
-        }
-        return countStatement;
-    }
-
-    public SQLiteStatement getInsertOrReplaceStatement() {
-        if (insertOrReplaceStatement == null) {
-            StringBuilder builder = new StringBuilder("INSERT OR REPLACE INTO ").append(tableName);
-            builder.append(" VALUES (");
-            for (int i = 0; i < columnCount; i++) {
-                if (i != 0) {
-                    builder.append(",");
-                }
-                builder.append("?");
+
+        return result;
+    }
+
+    public SQLiteStatement getInsertOrReplaceStatement(SQLiteDatabase db) {
+        SQLiteStatement result;
+
+        StringBuilder builder = new StringBuilder("INSERT OR REPLACE INTO ").append(tableName);
+        builder.append(" VALUES (");
+
+        for (int i = 0; i < columnCount; i++) {
+            if (i != 0) {
+                builder.append(",");
             }
-            builder.append(")");
-            insertOrReplaceStatement = db.compileStatement(builder.toString());
+
+            builder.append("?");
         }
-        return insertOrReplaceStatement;
+
+        builder.append(")");
+        result = db.compileStatement(builder.toString());
+
+        return result;
     }
 
-    public SQLiteStatement getDeleteStatement() {
-        if (deleteStatement == null) {
-            deleteStatement = db.compileStatement("DELETE FROM " + tableName + " WHERE " + primaryKeyColumnName + " = ?");
-        }
-        return deleteStatement;
+    public SQLiteStatement getDeleteStatement(SQLiteDatabase db) {
+        SQLiteStatement result = db.compileStatement("DELETE FROM " + tableName + " WHERE " + primaryKeyColumnName + " = ?");
+
+        return result;
     }
 
-    public SQLiteStatement getOnJobFetchedForRunningStatement() {
-        if (onJobFetchedForRunningStatement == null) {
-            String sql = "UPDATE " + tableName + " SET "
-                    + DbOpenHelper.RUN_COUNT_COLUMN.columnName + " = ? , "
-                    + DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " = ? "
-                    + " WHERE " + primaryKeyColumnName + " = ? ";
-            onJobFetchedForRunningStatement = db.compileStatement(sql);
-        }
-        return onJobFetchedForRunningStatement;
+    public SQLiteStatement getOnJobFetchedForRunningStatement(SQLiteDatabase db) {
+        SQLiteStatement result;
+
+        String sql = "UPDATE " + tableName + " SET "
+                + DbOpenHelper.RUN_COUNT_COLUMN.columnName + " = ? , "
+                + DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " = ? "
+                + " WHERE " + primaryKeyColumnName + " = ? ";
+        result = db.compileStatement(sql);
+
+        return result;
     }
 
-    public SQLiteStatement getNextJobDelayedUntilWithNetworkStatement() {
-        if(nextJobDelayedUntilWithNetworkStatement == null) {
-            String sql = "SELECT " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName
-                    + " FROM " + tableName + " WHERE "
-                    + DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " != " + sessionId
-                    + " ORDER BY " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName + " ASC"
-                    + " LIMIT 1";
-            nextJobDelayedUntilWithNetworkStatement = db.compileStatement(sql);
-        }
-        return nextJobDelayedUntilWithNetworkStatement;
-    }
-
-    public SQLiteStatement getNextJobDelayedUntilWithoutNetworkStatement() {
-        if(nextJobDelayedUntilWithoutNetworkStatement == null) {
-            String sql = "SELECT " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName
-                    + " FROM " + tableName + " WHERE "
-                    + DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " != " + sessionId
-                    + " AND " + DbOpenHelper.REQUIRES_NETWORK_COLUMN.columnName + " != 1"
-                    + " ORDER BY " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName + " ASC"
-                    + " LIMIT 1";
-            nextJobDelayedUntilWithoutNetworkStatement = db.compileStatement(sql);
-        }
-        return nextJobDelayedUntilWithoutNetworkStatement;
+    public SQLiteStatement getNextJobDelayedUntilWithNetworkStatement(SQLiteDatabase db) {
+        SQLiteStatement result;
+
+        String sql = "SELECT " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName
+                + " FROM " + tableName + " WHERE "
+                + DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " != " + sessionId
+                + " ORDER BY " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName + " ASC"
+                + " LIMIT 1";
+        result = db.compileStatement(sql);
+
+        return result;
+    }
+
+    public SQLiteStatement getNextJobDelayedUntilWithoutNetworkStatement(SQLiteDatabase db) {
+        SQLiteStatement result;
+
+        String sql = "SELECT " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName
+                + " FROM " + tableName + " WHERE "
+                + DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " != " + sessionId
+                + " AND " + DbOpenHelper.REQUIRES_NETWORK_COLUMN.columnName + " != 1"
+                + " ORDER BY " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName + " ASC"
+                + " LIMIT 1";
+        result = db.compileStatement(sql);
+
+        return result;
     }
 
     public String createSelect(String where, Integer limit, Order... orders) {
         StringBuilder builder = new StringBuilder("SELECT * FROM ");
         builder.append(tableName);
+
         if (where != null) {
             builder.append(" WHERE ").append(where);
         }
+
         boolean first = true;
+
         for (Order order : orders) {
             if (first) {
                 builder.append(" ORDER BY ");
-            } else {
+            }
+            else {
                 builder.append(",");
             }
+
             first = false;
             builder.append(order.property.columnName).append(" ").append(order.type);
         }
+
         if (limit != null) {
             builder.append(" LIMIT ").append(limit);
         }
+
         return builder.toString();
     }
 
-    public void truncate() {
+    public void truncate(SQLiteDatabase db) {
         db.execSQL("DELETE FROM " + DbOpenHelper.JOB_HOLDER_TABLE_NAME);
-        vacuum();
+        vacuum(db);
     }
 
-    public void vacuum() {
+    public void vacuum(SQLiteDatabase db) {
         db.execSQL("VACUUM");
     }
 
-    public void resetDelayTimesTo(long newDelayTime) {
-        db.execSQL("UPDATE " + DbOpenHelper.JOB_HOLDER_TABLE_NAME + " SET " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName + "=?"
-            , new Object[]{newDelayTime});
+    public void resetDelayTimesTo(SQLiteDatabase db, long newDelayTime) {
+        String query = String.format("UPDATE %s SET %s =?", DbOpenHelper.JOB_HOLDER_TABLE_NAME, DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName);
+        Object[] params = new Object[] { newDelayTime };
+
+        db.execSQL(query, params);
     }
 
+    //endregion
+
+    //region Inner classes
+
     public static class Property {
         /*package*/ final String columnName;
         /*package*/ final String type;
@@ -198,6 +230,7 @@ public Order(Property property, Type type) {
             ASC,
             DESC
         }
-
     }
+
+    //endregion
 }
diff --git a/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java b/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
index 1d57355..0197559 100644
--- a/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
+++ b/jobqueue/src/main/java/co/alfabits/android/jobqueue/persistentQueue/sqlite/SqliteJobQueue.java
@@ -26,7 +26,6 @@
 public class SqliteJobQueue implements JobQueue {
     DbOpenHelper dbOpenHelper;
     private final long sessionId;
-    SQLiteDatabase db;
     SqlHelper sqlHelper;
     JobSerializer jobSerializer;
     QueryCache readyJobsQueryCache;
@@ -39,13 +38,26 @@
      */
     public SqliteJobQueue(Context context, long sessionId, String id, JobSerializer jobSerializer) {
         this.sessionId = sessionId;
+
+        //region Init persistence DB
         dbOpenHelper = new DbOpenHelper(context, "db_" + id);
-        db = dbOpenHelper.getWritableDatabase();
-        sqlHelper = new SqlHelper(db, DbOpenHelper.JOB_HOLDER_TABLE_NAME, DbOpenHelper.ID_COLUMN.columnName, DbOpenHelper.COLUMN_COUNT, sessionId);
+        sqlHelper = new SqlHelper(dbOpenHelper, DbOpenHelper.JOB_HOLDER_TABLE_NAME, DbOpenHelper.ID_COLUMN.columnName, DbOpenHelper.COLUMN_COUNT, sessionId);
+        //endregion
+
         this.jobSerializer = jobSerializer;
         readyJobsQueryCache = new QueryCache();
         nextJobsQueryCache = new QueryCache();
-        sqlHelper.resetDelayTimesTo(JobManager.NOT_DELAYED_JOB_DELAY);
+
+        //region Reset delay times in DB
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+
+        try {
+            sqlHelper.resetDelayTimesTo(db, JobManager.NOT_DELAYED_JOB_DELAY);
+        }
+        finally {
+            dbOpenHelper.close();
+        }
+        //endregion
     }
 
     /**
@@ -53,14 +65,25 @@ public SqliteJobQueue(Context context, long sessionId, String id, JobSerializer
      */
     @Override
     public long insert(JobHolder jobHolder) {
-        SQLiteStatement stmt = sqlHelper.getInsertStatement();
         long id;
-        synchronized (stmt) {
-            stmt.clearBindings();
-            bindValues(stmt, jobHolder);
-            id = stmt.executeInsert();
+
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+
+        try {
+            SQLiteStatement stmt = sqlHelper.getInsertStatement(db);
+
+            synchronized (stmt) {
+                stmt.clearBindings();
+                bindValues(stmt, jobHolder);
+                id = stmt.executeInsert();
+            }
+        }
+        finally {
+            dbOpenHelper.close();
         }
+
         jobHolder.setId(id);
+
         return id;
     }
 
@@ -68,15 +91,18 @@ private void bindValues(SQLiteStatement stmt, JobHolder jobHolder) {
         if (jobHolder.getId() != null) {
             stmt.bindLong(DbOpenHelper.ID_COLUMN.columnIndex + 1, jobHolder.getId());
         }
+
         stmt.bindLong(DbOpenHelper.PRIORITY_COLUMN.columnIndex + 1, jobHolder.getPriority());
-        if(jobHolder.getGroupId() != null) {
+        if (jobHolder.getGroupId() != null) {
             stmt.bindString(DbOpenHelper.GROUP_ID_COLUMN.columnIndex + 1, jobHolder.getGroupId());
         }
+
         stmt.bindLong(DbOpenHelper.RUN_COUNT_COLUMN.columnIndex + 1, jobHolder.getRunCount());
         byte[] baseJob = getSerializeBaseJob(jobHolder);
         if (baseJob != null) {
             stmt.bindBlob(DbOpenHelper.BASE_JOB_COLUMN.columnIndex + 1, baseJob);
         }
+
         stmt.bindLong(DbOpenHelper.CREATED_NS_COLUMN.columnIndex + 1, jobHolder.getCreatedNs());
         stmt.bindLong(DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnIndex + 1, jobHolder.getDelayUntilNs());
         stmt.bindLong(DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnIndex + 1, jobHolder.getRunningSessionId());
@@ -91,14 +117,24 @@ public long insertOrReplace(JobHolder jobHolder) {
         if (jobHolder.getId() == null) {
             return insert(jobHolder);
         }
+
         jobHolder.setRunningSessionId(JobManager.NOT_RUNNING_SESSION_ID);
-        SQLiteStatement stmt = sqlHelper.getInsertOrReplaceStatement();
+
         long id;
-        synchronized (stmt) {
-            stmt.clearBindings();
-            bindValues(stmt, jobHolder);
-            id = stmt.executeInsert();
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+        try {
+            SQLiteStatement stmt = sqlHelper.getInsertOrReplaceStatement(db);
+
+            synchronized (stmt) {
+                stmt.clearBindings();
+                bindValues(stmt, jobHolder);
+                id = stmt.executeInsert();
+            }
+        }
+        finally {
+            dbOpenHelper.close();
         }
+
         jobHolder.setId(id);
         return id;
     }
@@ -112,15 +148,22 @@ public void remove(JobHolder jobHolder) {
             JqLog.e("called remove with null job id.");
             return;
         }
+
         delete(jobHolder.getId());
     }
 
     private void delete(Long id) {
-        SQLiteStatement stmt = sqlHelper.getDeleteStatement();
-        synchronized (stmt) {
-            stmt.clearBindings();
-            stmt.bindLong(1, id);
-            stmt.execute();
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+        try {
+            SQLiteStatement stmt = sqlHelper.getDeleteStatement(db);
+            synchronized (stmt) {
+                stmt.clearBindings();
+                stmt.bindLong(1, id);
+                stmt.execute();
+            }
+        }
+        finally {
+            dbOpenHelper.close();
         }
     }
 
@@ -129,35 +172,60 @@ private void delete(Long id) {
      */
     @Override
     public int count() {
-        SQLiteStatement stmt = sqlHelper.getCountStatement();
-        synchronized (stmt) {
-            stmt.clearBindings();
-            stmt.bindLong(1, sessionId);
-            return (int) stmt.simpleQueryForLong();
+        int result;
+
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+        try {
+            SQLiteStatement stmt = sqlHelper.getCountStatement(db);
+            synchronized (stmt) {
+                stmt.clearBindings();
+                stmt.bindLong(1, sessionId);
+                result = (int) stmt.simpleQueryForLong();
+            }
         }
+        finally {
+            dbOpenHelper.close();
+        }
+
+        return result;
     }
 
     @Override
     public int countReadyJobs(boolean hasNetwork, Collection<String> excludeGroups) {
+        int result = 0;
+
         String sql = readyJobsQueryCache.get(hasNetwork, excludeGroups);
-        if(sql == null) {
+        if (sql == null) {
             String where = createReadyJobWhereSql(hasNetwork, excludeGroups, true);
             String subSelect = "SELECT count(*) group_cnt, " + DbOpenHelper.GROUP_ID_COLUMN.columnName
                     + " FROM " + DbOpenHelper.JOB_HOLDER_TABLE_NAME
                     + " WHERE " + where;
             sql = "SELECT SUM(case WHEN " + DbOpenHelper.GROUP_ID_COLUMN.columnName
                     + " is null then group_cnt else 1 end) from (" + subSelect + ")";
+
             readyJobsQueryCache.set(sql, hasNetwork, excludeGroups);
         }
-        Cursor cursor = db.rawQuery(sql, new String[]{Long.toString(sessionId), Long.toString(System.nanoTime())});
+
+        SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
+        Cursor cursor = null;
         try {
-            if(!cursor.moveToNext()) {
-                return 0;
+            if (db != null && db.isOpen()) {
+                cursor = db.rawQuery(sql, new String[]{Long.toString(sessionId), Long.toString(System.nanoTime())});
+
+                if (cursor.moveToNext()) {
+                    result = cursor.getInt(0);
+                }
             }
-            return cursor.getInt(0);
-        } finally {
-            cursor.close();
         }
+        finally {
+            if (cursor != null && !cursor.isClosed())
+                cursor.close();
+
+            if (db != null && db.isOpen())
+                db.close();
+        }
+
+        return result;
     }
 
     /**
@@ -165,18 +233,31 @@ public int countReadyJobs(boolean hasNetwork, Collection<String> excludeGroups)
      */
     @Override
     public JobHolder findJobById(long id) {
-        Cursor cursor = db.rawQuery(sqlHelper.FIND_BY_ID_QUERY, new String[]{Long.toString(id)});
+        JobHolder result = null;
+
+        SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
+        Cursor cursor = null;
         try {
-            if(!cursor.moveToFirst()) {
-                return null;
+            if (db != null && db.isOpen()) {
+                cursor = db.rawQuery(sqlHelper.FIND_BY_ID_QUERY, new String[]{Long.toString(id)});
+
+                if (cursor.moveToFirst()) {
+                    result = createJobHolderFromCursor(cursor);
+                }
             }
-            return createJobHolderFromCursor(cursor);
-        } catch (InvalidBaseJobException e) {
+        }
+        catch (InvalidBaseJobException e) {
             JqLog.e(e, "invalid job on findJobById");
-            return null;
-        } finally {
-            cursor.close();
         }
+        finally {
+            if (cursor != null && !cursor.isClosed())
+                cursor.close();
+
+            if (db != null && db.isOpen())
+                db.close();
+        }
+
+        return result;
     }
 
     /**
@@ -184,9 +265,11 @@ public JobHolder findJobById(long id) {
      */
     @Override
     public JobHolder nextJobAndIncRunCount(boolean hasNetwork, Collection<String> excludeGroups) {
+        JobHolder result = null;
+
         //we can even keep these prepared but not sure the cost of them in db layer
         String selectQuery = nextJobsQueryCache.get(hasNetwork, excludeGroups);
-        if(selectQuery == null) {
+        if (selectQuery == null) {
             String where = createReadyJobWhereSql(hasNetwork, excludeGroups, false);
             selectQuery = sqlHelper.createSelect(
                     where,
@@ -195,56 +278,78 @@ public JobHolder nextJobAndIncRunCount(boolean hasNetwork, Collection<String> ex
                     new SqlHelper.Order(DbOpenHelper.CREATED_NS_COLUMN, SqlHelper.Order.Type.ASC),
                     new SqlHelper.Order(DbOpenHelper.ID_COLUMN, SqlHelper.Order.Type.ASC)
             );
+
             nextJobsQueryCache.set(selectQuery, hasNetwork, excludeGroups);
         }
-        Cursor cursor = db.rawQuery(selectQuery, new String[]{Long.toString(sessionId),Long.toString(System.nanoTime())});
+
+        SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
+        Cursor cursor = null;
         try {
-            if (!cursor.moveToNext()) {
-                return null;
+            if (db != null && db.isOpen()) {
+                cursor = db.rawQuery(selectQuery, new String[]{Long.toString(sessionId), Long.toString(System.nanoTime())});
+
+                if (cursor.moveToNext()) {
+                    JobHolder holder = createJobHolderFromCursor(cursor);
+                    onJobFetchedForRunning(holder);
+                    result = holder;
+                }
             }
-            JobHolder holder = createJobHolderFromCursor(cursor);
-            onJobFetchedForRunning(holder);
-            return holder;
-        } catch (InvalidBaseJobException e) {
+        }
+        catch (InvalidBaseJobException e) {
             //delete
             Long jobId = cursor.getLong(0);
             delete(jobId);
-            return nextJobAndIncRunCount(true, null);
-        } finally {
-            cursor.close();
+            result = nextJobAndIncRunCount(true, null);
+        }
+        finally {
+            if (cursor != null && !cursor.isClosed())
+                cursor.close();
+
+            if (db != null && db.isOpen())
+                db.close();
         }
+
+        return result;
     }
 
     private String createReadyJobWhereSql(boolean hasNetwork, Collection<String> excludeGroups, boolean groupByRunningGroup) {
         String where = DbOpenHelper.RUNNING_SESSION_ID_COLUMN.columnName + " != ? "
                 + " AND " + DbOpenHelper.DELAY_UNTIL_NS_COLUMN.columnName + " <= ? ";
-        if(hasNetwork == false) {
+
+        if (hasNetwork == false) {
             where += " AND " + DbOpenHelper.REQUIRES_NETWORK_COLUMN.columnName + " != 1 ";
         }
+
         String groupConstraint = null;
-        if(excludeGroups != null && excludeGroups.size() > 0) {
+        if (excludeGroups != null && excludeGroups.size() > 0) {
             groupConstraint = DbOpenHelper.GROUP_ID_COLUMN.columnName + " IS NULL OR " +
                     DbOpenHelper.GROUP_ID_COLUMN.columnName + " NOT IN('" + joinStrings("','", excludeGroups) + "')";
         }
-        if(groupByRunningGroup) {
+
+        if (groupByRunningGroup) {
             where += " GROUP BY " + DbOpenHelper.GROUP_ID_COLUMN.columnName;
             if(groupConstraint != null) {
                 where += " HAVING " + groupConstraint;
             }
-        } else if(groupConstraint != null) {
+        }
+        else if(groupConstraint != null) {
             where += " AND ( " + groupConstraint + " )";
         }
+
         return where;
     }
 
     private static String joinStrings(String glue, Collection<String> strings) {
         StringBuilder builder = new StringBuilder();
-        for(String str : strings) {
+
+        for (String str : strings) {
             if(builder.length() != 0) {
                 builder.append(glue);
             }
+
             builder.append(str);
         }
+
         return builder.toString();
     }
 
@@ -253,17 +358,31 @@ private static String joinStrings(String glue, Collection<String> strings) {
      */
     @Override
     public Long getNextJobDelayUntilNs(boolean hasNetwork) {
-        SQLiteStatement stmt =
-                hasNetwork ? sqlHelper.getNextJobDelayedUntilWithNetworkStatement()
-                : sqlHelper.getNextJobDelayedUntilWithoutNetworkStatement();
-        synchronized (stmt) {
-            try {
-                stmt.clearBindings();
-                return stmt.simpleQueryForLong();
-            } catch (SQLiteDoneException e){
-                return null;
+        Long result = null;
+
+        SQLiteStatement stmt;
+        SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
+        if (hasNetwork)
+            stmt = sqlHelper.getNextJobDelayedUntilWithNetworkStatement(db);
+        else
+            stmt = sqlHelper.getNextJobDelayedUntilWithoutNetworkStatement(db);
+
+        try {
+            synchronized (stmt) {
+                try {
+                    stmt.clearBindings();
+                    result = stmt.simpleQueryForLong();
+                }
+                catch (SQLiteDoneException e) {
+                }
             }
         }
+        finally {
+            if (db != null && db.isOpen())
+                db.close();
+        }
+
+       return result;
     }
 
     /**
@@ -271,21 +390,37 @@ public Long getNextJobDelayUntilNs(boolean hasNetwork) {
      */
     @Override
     public void clear() {
-        sqlHelper.truncate();
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+
+        try {
+            sqlHelper.truncate(db);
+        }
+        finally {
+            dbOpenHelper.close();
+        }
+
         readyJobsQueryCache.clear();
         nextJobsQueryCache.clear();
     }
 
     private void onJobFetchedForRunning(JobHolder jobHolder) {
-        SQLiteStatement stmt = sqlHelper.getOnJobFetchedForRunningStatement();
-        jobHolder.setRunCount(jobHolder.getRunCount() + 1);
-        jobHolder.setRunningSessionId(sessionId);
-        synchronized (stmt) {
-            stmt.clearBindings();
-            stmt.bindLong(1, jobHolder.getRunCount());
-            stmt.bindLong(2, sessionId);
-            stmt.bindLong(3, jobHolder.getId());
-            stmt.execute();
+        SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
+
+        try {
+            SQLiteStatement stmt = sqlHelper.getOnJobFetchedForRunningStatement(db);
+            jobHolder.setRunCount(jobHolder.getRunCount() + 1);
+            jobHolder.setRunningSessionId(sessionId);
+
+            synchronized (stmt) {
+                stmt.clearBindings();
+                stmt.bindLong(1, jobHolder.getRunCount());
+                stmt.bindLong(2, sessionId);
+                stmt.bindLong(3, jobHolder.getId());
+                stmt.execute();
+            }
+        }
+        finally {
+            dbOpenHelper.close();
         }
     }
 
