diff --git a/app/build.gradle b/app/build.gradle
new file mode 100755
index 00000000..82372d10
--- /dev/null
+++ b/app/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 28
+    buildToolsVersion '28.0.3'
+
+    defaultConfig {
+        applicationId "org.altbeacon.beaconreference"
+        minSdkVersion 19
+        targetSdkVersion 28
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:appcompat-v7:28.0.0'
+    compile project(':lib')
+//    compile 'org.altbeacon:android-beacon-library:2.15.4'
+}
\ No newline at end of file
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100755
index 00000000..20f603bc
--- /dev/null
+++ b/app/src/main/AndroidManifest.xml
@@ -0,0 +1,34 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="org.altbeacon.beaconreference"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" 
+        android:name="BeaconReferenceApplication">
+        <activity
+            android:name="org.altbeacon.beaconreference.MonitoringActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+				<action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="org.altbeacon.beaconreference.RangingActivity"
+            android:label="@string/app_name" >
+        </activity>
+        <!-- uncomment the following to enable scanning for over 30 minutes on Android 7+ -->
+        <service android:name="org.altbeacon.beacon.service.BeaconService"
+            tools:node="replace">
+            <meta-data android:name="longScanForcingEnabled" android:value="true"/>
+        </service>
+    </application>
+
+</manifest>
diff --git a/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java b/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
new file mode 100755
index 00000000..617a637d
--- /dev/null
+++ b/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
@@ -0,0 +1,120 @@
+package org.altbeacon.beacon;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+import android.util.Log;
+
+import org.altbeacon.beacon.Beacon;
+
+/**
+ * Created by Matt Tyler on 4/18/14.
+ */
+public class TimedBeaconSimulator implements org.altbeacon.beacon.simulator.BeaconSimulator {
+	protected static final String TAG = "TimedBeaconSimulator";
+	private List<Beacon> beacons;
+
+	/*
+	 * You may simulate detection of beacons by creating a class like this in your project.
+	 * This is especially useful for when you are testing in an Emulator or on a device without BluetoothLE capability.
+	 * 
+	 * Uncomment the lines in BeaconReferenceApplication starting with:
+	 *     // If you wish to test beacon detection in the Android Emulator, you can use code like this:
+	 * Then set USE_SIMULATED_BEACONS = true to initialize the sample code in this class.
+	 * If using a Bluetooth incapable test device (i.e. Emulator), you will want to comment
+	 * out the verifyBluetooth() in MonitoringActivity.java as well.
+	 * 
+	 * Any simulated beacons will automatically be ignored when building for production.
+	 */
+	public boolean USE_SIMULATED_BEACONS = false;
+
+	/**
+	 *  Creates empty beacons ArrayList.
+	 */
+	public TimedBeaconSimulator(){
+		beacons = new ArrayList<Beacon>();
+	}
+	
+	/**
+	 * Required getter method that is called regularly by the Android Beacon Library.
+	 * Any beacons returned by this method will appear within your test environment immediately.
+	 */
+	public List<Beacon> getBeacons(){
+		return beacons;
+	}
+	
+	/**
+	 * Creates simulated beacons all at once.
+	 */
+	public void createBasicSimulatedBeacons(){
+		if (USE_SIMULATED_BEACONS) {
+            Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
+            Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("2").setRssi(-55).setTxPower(-55).build();
+            Beacon beacon3 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("3").setRssi(-55).setTxPower(-55).build();
+            Beacon beacon4 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("4").setRssi(-55).setTxPower(-55).build();
+			beacons.add(beacon1);
+			beacons.add(beacon2);
+			beacons.add(beacon3);
+			beacons.add(beacon4);
+
+
+		}
+	}
+	
+	
+	private ScheduledExecutorService scheduleTaskExecutor;
+
+
+	/**
+	 * Simulates a new beacon every 10 seconds until it runs out of new ones to add.
+	 */
+	public void createTimedSimulatedBeacons(){
+		if (USE_SIMULATED_BEACONS){
+			beacons = new ArrayList<Beacon>();
+            Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
+            Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("2").setRssi(-55).setTxPower(-55).build();
+            Beacon beacon3 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("3").setRssi(-55).setTxPower(-55).build();
+            Beacon beacon4 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
+                    .setId2("1").setId3("4").setRssi(-55).setTxPower(-55).build();
+			beacons.add(beacon1);
+			beacons.add(beacon2);
+			beacons.add(beacon3);
+			beacons.add(beacon4);
+			
+			final List<Beacon> finalBeacons = new ArrayList<Beacon>(beacons);
+
+			//Clearing beacons list to prevent all beacons from appearing immediately.
+			//These will be added back into the beacons list from finalBeacons later.
+			beacons.clear();
+
+			scheduleTaskExecutor= Executors.newScheduledThreadPool(5);
+
+			// This schedules an beacon to appear every 10 seconds:
+			scheduleTaskExecutor.scheduleAtFixedRate(new Runnable() {
+				public void run() {
+					try{
+						//putting a single beacon back into the beacons list.
+						if (finalBeacons.size() > beacons.size())
+							beacons.add(finalBeacons.get(beacons.size()));
+						else 
+							scheduleTaskExecutor.shutdown();
+						
+					}catch(Exception e){
+						e.printStackTrace();
+					}
+				}
+			}, 0, 10, TimeUnit.SECONDS);
+		} 
+	}
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
new file mode 100755
index 00000000..f7aa5a29
--- /dev/null
+++ b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
@@ -0,0 +1,193 @@
+package org.altbeacon.beaconreference;
+
+import android.app.Application;
+import android.app.Notification;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.app.TaskStackBuilder;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build;
+import android.support.v4.app.NotificationCompat;
+import android.util.Log;
+
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.BeaconParser;
+import org.altbeacon.beacon.Region;
+import org.altbeacon.beacon.powersave.BackgroundPowerSaver;
+import org.altbeacon.beacon.startup.RegionBootstrap;
+import org.altbeacon.beacon.startup.BootstrapNotifier;
+
+/**
+ * Created by dyoung on 12/13/13.
+ */
+public class BeaconReferenceApplication extends Application implements BootstrapNotifier {
+    private static final String TAG = "BeaconReferenceApp";
+    private RegionBootstrap regionBootstrap;
+    private BackgroundPowerSaver backgroundPowerSaver;
+    private boolean haveDetectedBeaconsSinceBoot = false;
+    private MonitoringActivity monitoringActivity = null;
+    private String cumulativeLog = "";
+
+    public void onCreate() {
+        super.onCreate();
+        BeaconManager beaconManager = org.altbeacon.beacon.BeaconManager.getInstanceForApplication(this);
+
+        // By default the AndroidBeaconLibrary will only find AltBeacons.  If you wish to make it
+        // find a different type of beacon, you must specify the byte layout for that beacon's
+        // advertisement with a line like below.  The example shows how to find a beacon with the
+        // same byte layout as AltBeacon but with a beaconTypeCode of 0xaabb.  To find the proper
+        // layout expression for other beacon types, do a web search for "setBeaconLayout"
+        // including the quotes.
+        //
+        //beaconManager.getBeaconParsers().clear();
+        //beaconManager.getBeaconParsers().add(new BeaconParser().
+        //        setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"));
+
+        beaconManager.setDebug(true);
+
+
+        // Uncomment the code below to use a foreground service to scan for beacons. This unlocks
+        // the ability to continually scan for long periods of time in the background on Andorid 8+
+        // in exchange for showing an icon at the top of the screen and a always-on notification to
+        // communicate to users that your app is using resources in the background.
+        //
+
+        /*
+        Notification.Builder builder = new Notification.Builder(this);
+        builder.setSmallIcon(R.drawable.ic_launcher);
+        builder.setContentTitle("Scanning for Beacons");
+        Intent intent = new Intent(this, MonitoringActivity.class);
+        PendingIntent pendingIntent = PendingIntent.getActivity(
+                this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT
+        );
+        builder.setContentIntent(pendingIntent);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            NotificationChannel channel = new NotificationChannel("My Notification Channel ID",
+                    "My Notification Name", NotificationManager.IMPORTANCE_DEFAULT);
+            channel.setDescription("My Notification Channel Description");
+            NotificationManager notificationManager = (NotificationManager) getSystemService(
+                    Context.NOTIFICATION_SERVICE);
+            notificationManager.createNotificationChannel(channel);
+            builder.setChannelId(channel.getId());
+        }
+        beaconManager.enableForegroundServiceScanning(builder.build(), 456);
+
+        // For the above foreground scanning service to be useful, you need to disable
+        // JobScheduler-based scans (used on Android 8+) and set a fast background scan
+        // cycle that would otherwise be disallowed by the operating system.
+        //
+        beaconManager.setEnableScheduledScanJobs(false);
+        beaconManager.setBackgroundBetweenScanPeriod(0);
+        beaconManager.setBackgroundScanPeriod(1100);
+        */
+
+        Log.d(TAG, "setting up background monitoring for beacons and power saving");
+        // wake up the app when a beacon is seen
+        Region region = new Region("backgroundRegion",
+                null, null, null);
+        regionBootstrap = new RegionBootstrap(this, region);
+
+        // simply constructing this class and holding a reference to it in your custom Application
+        // class will automatically cause the BeaconLibrary to save battery whenever the application
+        // is not visible.  This reduces bluetooth power usage by about 60%
+        backgroundPowerSaver = new BackgroundPowerSaver(this);
+
+        // If you wish to test beacon detection in the Android Emulator, you can use code like this:
+        // BeaconManager.setBeaconSimulator(new TimedBeaconSimulator() );
+        // ((TimedBeaconSimulator) BeaconManager.getBeaconSimulator()).createTimedSimulatedBeacons();
+    }
+
+    public void disableMonitoring() {
+        if (regionBootstrap != null) {
+            regionBootstrap.disable();
+            regionBootstrap = null;
+        }
+    }
+    public void enableMonitoring() {
+        Region region = new Region("backgroundRegion",
+                null, null, null);
+        regionBootstrap = new RegionBootstrap(this, region);
+    }
+
+
+    @Override
+    public void didEnterRegion(Region arg0) {
+        // In this example, this class sends a notification to the user whenever a Beacon
+        // matching a Region (defined above) are first seen.
+        Log.d(TAG, "did enter region.");
+        if (!haveDetectedBeaconsSinceBoot) {
+            Log.d(TAG, "auto launching MainActivity");
+
+            // The very first time since boot that we detect an beacon, we launch the
+            // MainActivity
+            Intent intent = new Intent(this, MonitoringActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            // Important:  make sure to add android:launchMode="singleInstance" in the manifest
+            // to keep multiple copies of this activity from getting created if the user has
+            // already manually launched the app.
+            this.startActivity(intent);
+            haveDetectedBeaconsSinceBoot = true;
+        } else {
+            if (monitoringActivity != null) {
+                // If the Monitoring Activity is visible, we log info about the beacons we have
+                // seen on its display
+                logToDisplay("I see a beacon again" );
+            } else {
+                // If we have already seen beacons before, but the monitoring activity is not in
+                // the foreground, we send a notification to the user on subsequent detections.
+                Log.d(TAG, "Sending notification.");
+                sendNotification();
+            }
+        }
+
+
+    }
+
+    @Override
+    public void didExitRegion(Region region) {
+        logToDisplay("I no longer see a beacon.");
+    }
+
+    @Override
+    public void didDetermineStateForRegion(int state, Region region) {
+        logToDisplay("Current region state is: " + (state == 1 ? "INSIDE" : "OUTSIDE ("+state+")"));
+    }
+
+    private void sendNotification() {
+        NotificationCompat.Builder builder =
+                new NotificationCompat.Builder(this)
+                        .setContentTitle("Beacon Reference Application")
+                        .setContentText("An beacon is nearby.")
+                        .setSmallIcon(R.drawable.ic_launcher);
+
+        TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
+        stackBuilder.addNextIntent(new Intent(this, MonitoringActivity.class));
+        PendingIntent resultPendingIntent =
+                stackBuilder.getPendingIntent(
+                        0,
+                        PendingIntent.FLAG_UPDATE_CURRENT
+                );
+        builder.setContentIntent(resultPendingIntent);
+        NotificationManager notificationManager =
+                (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
+        notificationManager.notify(1, builder.build());
+    }
+
+    public void setMonitoringActivity(MonitoringActivity activity) {
+        this.monitoringActivity = activity;
+    }
+
+    private void logToDisplay(String line) {
+        cumulativeLog += (line + "\n");
+        if (this.monitoringActivity != null) {
+            this.monitoringActivity.updateLog(cumulativeLog);
+        }
+    }
+
+    public String getLog() {
+        return cumulativeLog;
+    }
+
+}
diff --git a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
new file mode 100755
index 00000000..0837795a
--- /dev/null
+++ b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
@@ -0,0 +1,171 @@
+package org.altbeacon.beaconreference;
+
+import android.Manifest;
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+
+import org.altbeacon.beacon.BeaconConsumer;
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.BeaconParser;
+import org.altbeacon.beacon.MonitorNotifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.Collection;
+
+/**
+ * 
+ * @author dyoung
+ * @author Matt Tyler
+ */
+public class MonitoringActivity extends Activity  {
+	protected static final String TAG = "MonitoringActivity";
+	private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
+
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		Log.d(TAG, "onCreate");
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.activity_monitoring);
+		verifyBluetooth();
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            // Android M Permission check
+            if (this.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+                final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                builder.setTitle("This app needs location access");
+                builder.setMessage("Please grant location access so this app can detect beacons in the background.");
+                builder.setPositiveButton(android.R.string.ok, null);
+                builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+
+                    @TargetApi(23)
+                    @Override
+                    public void onDismiss(DialogInterface dialog) {
+                        requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
+                                PERMISSION_REQUEST_COARSE_LOCATION);
+                    }
+
+                });
+                builder.show();
+            }
+        }
+	}
+
+	@Override
+	public void onRequestPermissionsResult(int requestCode,
+										   String permissions[], int[] grantResults) {
+		switch (requestCode) {
+			case PERMISSION_REQUEST_COARSE_LOCATION: {
+				if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+					Log.d(TAG, "coarse location permission granted");
+				} else {
+					final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+					builder.setTitle("Functionality limited");
+					builder.setMessage("Since location access has not been granted, this app will not be able to discover beacons when in the background.");
+					builder.setPositiveButton(android.R.string.ok, null);
+					builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+
+						@Override
+						public void onDismiss(DialogInterface dialog) {
+						}
+
+					});
+					builder.show();
+				}
+				return;
+			}
+		}
+	}
+
+	public void onRangingClicked(View view) {
+		Intent myIntent = new Intent(this, RangingActivity.class);
+		this.startActivity(myIntent);
+	}
+	public void onEnableClicked(View view) {
+		BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
+		if (BeaconManager.getInstanceForApplication(this).getMonitoredRegions().size() > 0) {
+			application.disableMonitoring();
+			((Button)findViewById(R.id.enableButton)).setText("Re-Enable Monitoring");
+		}
+		else {
+			((Button)findViewById(R.id.enableButton)).setText("Disable Monitoring");
+			application.enableMonitoring();
+		}
+
+	}
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
+        application.setMonitoringActivity(this);
+        updateLog(application.getLog());
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        ((BeaconReferenceApplication) this.getApplicationContext()).setMonitoringActivity(null);
+    }
+
+	private void verifyBluetooth() {
+
+		try {
+			if (!BeaconManager.getInstanceForApplication(this).checkAvailability()) {
+				final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+				builder.setTitle("Bluetooth not enabled");			
+				builder.setMessage("Please enable bluetooth in settings and restart this application.");
+				builder.setPositiveButton(android.R.string.ok, null);
+				builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+					@Override
+					public void onDismiss(DialogInterface dialog) {
+						//finish();
+			            //System.exit(0);
+					}					
+				});
+				builder.show();
+			}			
+		}
+		catch (RuntimeException e) {
+			final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+			builder.setTitle("Bluetooth LE not available");			
+			builder.setMessage("Sorry, this device does not support Bluetooth LE.");
+			builder.setPositiveButton(android.R.string.ok, null);
+			builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+
+				@Override
+				public void onDismiss(DialogInterface dialog) {
+					//finish();
+		            //System.exit(0);
+				}
+				
+			});
+			builder.show();
+			
+		}
+		
+	}	
+
+    public void updateLog(final String log) {
+    	runOnUiThread(new Runnable() {
+    	    public void run() {
+    	    	EditText editText = (EditText)MonitoringActivity.this
+    					.findViewById(R.id.monitoringText);
+       	    	editText.setText(log);
+    	    }
+    	});
+    }
+
+}
diff --git a/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java b/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
new file mode 100755
index 00000000..358cead0
--- /dev/null
+++ b/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
@@ -0,0 +1,77 @@
+package org.altbeacon.beaconreference;
+
+import java.util.Collection;
+
+import android.app.Activity;
+
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.util.Log;
+import android.widget.EditText;
+
+import org.altbeacon.beacon.AltBeacon;
+import org.altbeacon.beacon.Beacon;
+import org.altbeacon.beacon.BeaconConsumer;
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.BeaconParser;
+import org.altbeacon.beacon.RangeNotifier;
+import org.altbeacon.beacon.Region;
+
+public class RangingActivity extends Activity implements BeaconConsumer {
+    protected static final String TAG = "RangingActivity";
+    private BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_ranging);
+    }
+
+    @Override 
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override 
+    protected void onPause() {
+        super.onPause();
+        beaconManager.unbind(this);
+    }
+
+    @Override 
+    protected void onResume() {
+        super.onResume();
+        beaconManager.bind(this);
+    }
+
+    @Override
+    public void onBeaconServiceConnect() {
+
+        RangeNotifier rangeNotifier = new RangeNotifier() {
+           @Override
+           public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
+              if (beacons.size() > 0) {
+                  Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  "+beacons.size());
+                  Beacon firstBeacon = beacons.iterator().next();
+                  logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
+              }
+           }
+
+        };
+        try {
+            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
+            beaconManager.addRangeNotifier(rangeNotifier);
+            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
+            beaconManager.addRangeNotifier(rangeNotifier);
+        } catch (RemoteException e) {   }
+    }
+
+    private void logToDisplay(final String line) {
+        runOnUiThread(new Runnable() {
+            public void run() {
+                EditText editText = (EditText)RangingActivity.this.findViewById(R.id.rangingText);
+                editText.append(line+"\n");
+            }
+        });
+    }
+}
diff --git a/app/src/main/res/drawable-hdpi/ic_launcher.png b/app/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100755
index 00000000..96a442e5
Binary files /dev/null and b/app/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/app/src/main/res/drawable-mdpi/ic_launcher.png b/app/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100755
index 00000000..359047df
Binary files /dev/null and b/app/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/app/src/main/res/drawable-xhdpi/ic_launcher.png b/app/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100755
index 00000000..71c6d760
Binary files /dev/null and b/app/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/app/src/main/res/layout/activity_monitoring.xml b/app/src/main/res/layout/activity_monitoring.xml
new file mode 100755
index 00000000..2b53291b
--- /dev/null
+++ b/app/src/main/res/layout/activity_monitoring.xml
@@ -0,0 +1,45 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".MonitoringActivity" >
+    <TextView
+        android:id="@+id/textView1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginTop="17dp"
+        android:text="Monitoring Events:" />
+
+    <EditText
+        android:id="@+id/monitoringText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_below="@+id/textView1"
+        android:layout_marginTop="36dp"
+        android:ems="10"
+        android:gravity="left|top"
+        android:inputType="textMultiLine" >
+        <requestFocus />
+    </EditText>
+
+    <Button
+        android:id="@+id/Button01"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:onClick="onRangingClicked"
+        android:layout_below="@+id/monitoringText"
+        android:text="Start Ranging" />
+
+    <Button
+        android:id="@+id/enableButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:onClick="onEnableClicked"
+        android:layout_below="@+id/monitoringText"
+        android:layout_toRightOf="@id/Button01"
+        android:text="Disable monitoring" />
+</RelativeLayout>
diff --git a/app/src/main/res/layout/activity_ranging.xml b/app/src/main/res/layout/activity_ranging.xml
new file mode 100755
index 00000000..86af58da
--- /dev/null
+++ b/app/src/main/res/layout/activity_ranging.xml
@@ -0,0 +1,21 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".RangingActivity" >
+
+    <EditText
+        android:id="@+id/rangingText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginTop="14dp"
+        android:ems="10"
+        android:gravity="left|top"
+        android:inputType="textMultiLine" >
+
+    </EditText>
+    
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/values-v11/styles.xml b/app/src/main/res/values-v11/styles.xml
new file mode 100755
index 00000000..3c02242a
--- /dev/null
+++ b/app/src/main/res/values-v11/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!--
+        Base application theme for API 11+. This theme completely replaces
+        AppBaseTheme from res/values/styles.xml on API 11+ devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light">
+        <!-- API 11 theme customizations can go here. -->
+    </style>
+
+</resources>
diff --git a/app/src/main/res/values-v14/styles.xml b/app/src/main/res/values-v14/styles.xml
new file mode 100755
index 00000000..a91fd037
--- /dev/null
+++ b/app/src/main/res/values-v14/styles.xml
@@ -0,0 +1,12 @@
+<resources>
+
+    <!--
+        Base application theme for API 14+. This theme completely replaces
+        AppBaseTheme from BOTH res/values/styles.xml and
+        res/values-v11/styles.xml on API 14+ devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light.DarkActionBar">
+        <!-- API 14 theme customizations can go here. -->
+    </style>
+
+</resources>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
new file mode 100755
index 00000000..41452434
--- /dev/null
+++ b/app/src/main/res/values/strings.xml
@@ -0,0 +1,5 @@
+<resources>
+
+    <string name="app_name">BeaconReference</string>
+
+</resources>
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
new file mode 100755
index 00000000..6ce89c7b
--- /dev/null
+++ b/app/src/main/res/values/styles.xml
@@ -0,0 +1,20 @@
+<resources>
+
+    <!--
+        Base application theme, dependent on API level. This theme is replaced
+        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+        <!--
+            Theme customizations available in newer API levels can go in
+            res/values-vXX/styles.xml, while customizations related to
+            backward-compatibility can go here.
+        -->
+    </style>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
diff --git a/settings.gradle b/settings.gradle
index 2b49d90f..3621ac24 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1,2 @@
-include ':lib'
\ No newline at end of file
+include ':lib'
+include ':app'
\ No newline at end of file
