diff --git a/build.gradle b/build.gradle
index 1eacc358..a5b97c62 100644
--- a/build.gradle
+++ b/build.gradle
@@ -28,14 +28,12 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.0'
-        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
+        classpath 'com.android.tools.build:gradle:1.5.0'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
         classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.3'
     }
 }
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 
 apply from: 'gradle/eclipse.gradle'
@@ -150,21 +148,21 @@ task release(dependsOn: 'distribution') << {
     println('Doing release build')
 }
 
-android.libraryVariants.all { variant ->
-
-    task("generate${variant.name}Javadoc", type: Javadoc) {
-        title = "$name $version API"
-        description "Generates Javadoc for $variant.name."
-        source = variant.javaCompile.source
-        ext.androidJar =
-                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
-        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
-        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
-        exclude '**/BuildConfig.java'
-        exclude '**/R.java'
-    }
-
-}
+//android.libraryVariants.all { variant ->
+//
+//    task("generate${variant.name}Javadoc", type: Javadoc) {
+//        title = "$name $version API"
+//        description "Generates Javadoc for $variant.name."
+//        source = variant.javaCompile.source
+//        ext.androidJar =
+//                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
+//        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
+//        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
+//        exclude '**/BuildConfig.java'
+//        exclude '**/R.java'
+//    }
+//
+//}
 
 build.mustRunAfter clean
 
diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/src/main/java/org/altbeacon/beacon/Beacon.java
index 6526c69f..78e3a5c2 100644
--- a/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -25,6 +25,7 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.util.Log;
 
 import org.altbeacon.beacon.client.BeaconDataFactory;
 import org.altbeacon.beacon.client.NullBeaconDataFactory;
@@ -428,6 +429,7 @@ public double getBestAverageRssiAvailable() {
         else {
             LogManager.d(TAG, "Not using running average RSSI because it is null");
         }
+//        Log.e(TAG, String.valueOf(getId1()));
         return bestRssiAvailable;
     }
 
diff --git a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java b/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
index f351df06..5668b8ec 100644
--- a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
+++ b/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
@@ -15,15 +15,14 @@
 public class RunningAverageRssiFilter implements RssiFilter {
 
     private static final String TAG = "RunningAverageRssiFilter";
-    public static final long DEFAULT_MAX_TRACKING_AGE = 5000; /* 5 Seconds */
-    public static long maxTrackingAge = DEFAULT_MAX_TRACKING_AGE; /* 5 Seconds */
     public static final long DEFAULT_SAMPLE_EXPIRATION_MILLISECONDS = 20000; /* 20 seconds */
     private static long sampleExpirationMilliseconds = DEFAULT_SAMPLE_EXPIRATION_MILLISECONDS;
     public static final double DEFAULT_SAMPLE_QUANTILE = 0.5;
     private static double sampleQuantile = DEFAULT_SAMPLE_QUANTILE;
-    public static final long DEFAULT_SAMPLE_RATE = 500; /* 0.5 seconds */
+    public static final long DEFAULT_SAMPLE_RATE = 400; /* 0.5 seconds */
     private static long sampleRateMilliseconds = DEFAULT_SAMPLE_RATE;
     private ArrayList<Measurement> mMeasurements = new ArrayList<Measurement>();
+    private static Date firstMeasurement;
 
     @Override
     public void addMeasurement(Integer rssi) {
@@ -43,7 +42,8 @@ public boolean noMeasurementsAvailable() {
     public double calculateRssi() {
         refreshMeasurements();
 
-        int expected = (int) (sampleExpirationMilliseconds/sampleRateMilliseconds - 1);
+        long sampleTime = Math.min(new Date().getTime() - firstMeasurement.getTime(), sampleExpirationMilliseconds);
+        int expected = (int) (sampleTime/sampleRateMilliseconds - 1);
 
         // fill missing samples
         ArrayList<Measurement> calcMeasurements = new ArrayList<>(mMeasurements);
@@ -74,6 +74,10 @@ public double calculateRssi() {
 
     private synchronized void refreshMeasurements() {
         Date now = new Date();
+        if (firstMeasurement == null) {
+            firstMeasurement = now;
+        }
+
         ArrayList<Measurement> newMeasurements = new ArrayList<Measurement>();
         Iterator<Measurement> iterator = mMeasurements.iterator();
         while (iterator.hasNext()) {
