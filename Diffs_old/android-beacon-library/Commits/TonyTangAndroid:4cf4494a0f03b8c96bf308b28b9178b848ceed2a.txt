diff --git a/app/build.gradle b/app/build.gradle
index 82372d10..bea30243 100755
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -15,11 +15,15 @@ android {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
+    compileOptions {
+        targetCompatibility JavaVersion.VERSION_1_8
+        sourceCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile fileTree(include: ['*.jar'], dir: 'libs')
     compile 'com.android.support:appcompat-v7:28.0.0'
     compile project(':lib')
-//    compile 'org.altbeacon:android-beacon-library:2.15.4'
+    //    compile 'org.altbeacon:android-beacon-library:2.15.4'
 }
\ No newline at end of file
diff --git a/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java b/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
index af210f8a..314e52fc 100755
--- a/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
+++ b/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
@@ -10,7 +10,7 @@
  * Created by Matt Tyler on 4/18/14.
  */
 public class TimedBeaconSimulator implements org.altbeacon.beacon.simulator.BeaconSimulator {
-    protected static final String TAG = "TimedBeaconSimulator";
+
     /*
      * You may simulate detection of beacons by creating a class like this in your project.
      * This is especially useful for when you are testing in an Emulator or on a device without BluetoothLE capability.
@@ -31,7 +31,7 @@
      * Creates empty beacons ArrayList.
      */
     public TimedBeaconSimulator() {
-        beacons = new ArrayList<Beacon>();
+        beacons = new ArrayList<>();
     }
 
     /**
@@ -69,7 +69,7 @@ public void createBasicSimulatedBeacons() {
      */
     public void createTimedSimulatedBeacons() {
         if (USE_SIMULATED_BEACONS) {
-            beacons = new ArrayList<Beacon>();
+            beacons = new ArrayList<>();
             Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
                     .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
             Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
@@ -83,7 +83,7 @@ public void createTimedSimulatedBeacons() {
             beacons.add(beacon3);
             beacons.add(beacon4);
 
-            final List<Beacon> finalBeacons = new ArrayList<Beacon>(beacons);
+            final List<Beacon> finalBeacons = new ArrayList<>(beacons);
 
             //Clearing beacons list to prevent all beacons from appearing immediately.
             //These will be added back into the beacons list from finalBeacons later.
@@ -92,20 +92,20 @@ public void createTimedSimulatedBeacons() {
             scheduleTaskExecutor = Executors.newScheduledThreadPool(5);
 
             // This schedules an beacon to appear every 10 seconds:
-            scheduleTaskExecutor.scheduleAtFixedRate(new Runnable() {
-                public void run() {
-                    try {
-                        //putting a single beacon back into the beacons list.
-                        if (finalBeacons.size() > beacons.size())
-                            beacons.add(finalBeacons.get(beacons.size()));
-                        else
-                            scheduleTaskExecutor.shutdown();
-
-                    } catch (Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-            }, 0, 10, TimeUnit.SECONDS);
+            scheduleTaskExecutor.scheduleAtFixedRate(() -> run(finalBeacons), 0, 10, TimeUnit.SECONDS);
+        }
+    }
+
+    private void run(List<Beacon> finalBeacons) {
+        try {
+            //putting a single beacon back into the beacons list.
+            if (finalBeacons.size() > beacons.size())
+                beacons.add(finalBeacons.get(beacons.size()));
+            else
+                scheduleTaskExecutor.shutdown();
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
diff --git a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
index 36606d13..600da22c 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
@@ -21,6 +21,7 @@
 public class BeaconReferenceApplication extends Application implements BootstrapNotifier {
     private static final String TAG = "BeaconReferenceApp";
     private RegionBootstrap regionBootstrap;
+    @SuppressWarnings("FieldCanBeLocal")
     private BackgroundPowerSaver backgroundPowerSaver;
     private boolean haveDetectedBeaconsSinceBoot = false;
     private MonitoringActivity monitoringActivity = null;
@@ -41,7 +42,7 @@ public void onCreate() {
         //beaconManager.getBeaconParsers().add(new BeaconParser().
         //        setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"));
 
-        beaconManager.setDebug(true);
+        BeaconManager.setDebug(true);
 
 
         // Uncomment the code below to use a foreground service to scan for beacons. This unlocks
@@ -154,7 +155,7 @@ public void didDetermineStateForRegion(int state, Region region) {
 
     private void sendNotification() {
         NotificationCompat.Builder builder =
-                new NotificationCompat.Builder(this)
+                new NotificationCompat.Builder(this, "beacon_channel_id")
                         .setContentTitle("Beacon Reference Application")
                         .setContentText("An beacon is nearby.")
                         .setSmallIcon(R.drawable.ic_launcher);
diff --git a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
index 70e3ac55..cf380e67 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
@@ -1,13 +1,13 @@
 package org.altbeacon.beaconreference;
 
 import android.Manifest;
-import android.annotation.TargetApi;
+import android.annotation.SuppressLint;
 import android.app.AlertDialog;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -22,6 +22,7 @@
 public class MonitoringActivity extends android.support.v7.app.AppCompatActivity {
     protected static final String TAG = "MonitoringActivity";
     private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
+    private EditText et_log;
 
 
     @Override
@@ -29,8 +30,8 @@ protected void onCreate(Bundle savedInstanceState) {
         Log.d(TAG, "onCreate");
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_monitoring);
+        et_log = MonitoringActivity.this.findViewById(R.id.monitoringText);
         verifyBluetooth();
-
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             // Android M Permission check
             if (this.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
@@ -38,24 +39,16 @@ protected void onCreate(Bundle savedInstanceState) {
                 builder.setTitle("This app needs location access");
                 builder.setMessage("Please grant location access so this app can detect beacons in the background.");
                 builder.setPositiveButton(android.R.string.ok, null);
-                builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-
-                    @TargetApi(23)
-                    @Override
-                    public void onDismiss(DialogInterface dialog) {
-                        requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
-                                PERMISSION_REQUEST_COARSE_LOCATION);
-                    }
-
-                });
+                builder.setOnDismissListener(dialog -> requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
+                        PERMISSION_REQUEST_COARSE_LOCATION));
                 builder.show();
             }
         }
     }
 
     @Override
-    public void onRequestPermissionsResult(int requestCode,
-                                           String permissions[], int[] grantResults) {
+    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[],
+                                           @NonNull int[] grantResults) {
         switch (requestCode) {
             case PERMISSION_REQUEST_COARSE_LOCATION: {
                 if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
@@ -65,16 +58,8 @@ public void onRequestPermissionsResult(int requestCode,
                     builder.setTitle("Functionality limited");
                     builder.setMessage("Since location access has not been granted, this app will not be able to discover beacons when in the background.");
                     builder.setPositiveButton(android.R.string.ok, null);
-                    builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-
-                        @Override
-                        public void onDismiss(DialogInterface dialog) {
-                        }
-
-                    });
                     builder.show();
                 }
-                return;
             }
         }
     }
@@ -84,6 +69,7 @@ public void onRangingClicked(View view) {
         this.startActivity(myIntent);
     }
 
+    @SuppressLint("SetTextI18n")
     public void onEnableClicked(View view) {
         BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
         if (BeaconManager.getInstanceForApplication(this).getMonitoredRegions().size() > 0) {
@@ -118,13 +104,6 @@ private void verifyBluetooth() {
                 builder.setTitle("Bluetooth not enabled");
                 builder.setMessage("Please enable bluetooth in settings and restart this application.");
                 builder.setPositiveButton(android.R.string.ok, null);
-                builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-                    @Override
-                    public void onDismiss(DialogInterface dialog) {
-                        //finish();
-                        //System.exit(0);
-                    }
-                });
                 builder.show();
             }
         } catch (RuntimeException e) {
@@ -132,15 +111,6 @@ public void onDismiss(DialogInterface dialog) {
             builder.setTitle("Bluetooth LE not available");
             builder.setMessage("Sorry, this device does not support Bluetooth LE.");
             builder.setPositiveButton(android.R.string.ok, null);
-            builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-
-                @Override
-                public void onDismiss(DialogInterface dialog) {
-                    //finish();
-                    //System.exit(0);
-                }
-
-            });
             builder.show();
 
         }
@@ -148,13 +118,7 @@ public void onDismiss(DialogInterface dialog) {
     }
 
     public void updateLog(final String log) {
-        runOnUiThread(new Runnable() {
-            public void run() {
-                EditText editText = (EditText) MonitoringActivity.this
-                        .findViewById(R.id.monitoringText);
-                editText.setText(log);
-            }
-        });
+        runOnUiThread(() -> et_log.setText(log));
     }
 
 }
diff --git a/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java b/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
index bebb77a2..a4c82a59 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
@@ -16,11 +16,13 @@
 public class RangingActivity extends android.support.v7.app.AppCompatActivity implements BeaconConsumer {
     protected static final String TAG = "RangingActivity";
     private BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+    private EditText et_log;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_ranging);
+        et_log = RangingActivity.this.findViewById(R.id.rangingText);
     }
 
     @Override
@@ -43,32 +45,26 @@ protected void onResume() {
     @Override
     public void onBeaconServiceConnect() {
 
-        RangeNotifier rangeNotifier = new RangeNotifier() {
-            @Override
-            public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
-                if (beacons.size() > 0) {
-                    Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  " + beacons.size());
-                    Beacon firstBeacon = beacons.iterator().next();
-                    logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
-                }
-            }
-
-        };
+        RangeNotifier rangeNotifier = (beacons, region) -> rangeNotfier(beacons);
         try {
             beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
             beaconManager.addRangeNotifier(rangeNotifier);
             beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
             beaconManager.addRangeNotifier(rangeNotifier);
         } catch (RemoteException e) {
+            Log.e(TAG, "range error", e);
+        }
+    }
+
+    private void rangeNotfier(Collection<Beacon> beacons) {
+        if (beacons.size() > 0) {
+            Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  " + beacons.size());
+            Beacon firstBeacon = beacons.iterator().next();
+            logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
         }
     }
 
     private void logToDisplay(final String line) {
-        runOnUiThread(new Runnable() {
-            public void run() {
-                EditText editText = (EditText) RangingActivity.this.findViewById(R.id.rangingText);
-                editText.append(line + "\n");
-            }
-        });
+        runOnUiThread(() -> et_log.append(line + "\n"));
     }
 }
diff --git a/app/src/main/res/layout/activity_monitoring.xml b/app/src/main/res/layout/activity_monitoring.xml
index de89d59a..59ab4045 100755
--- a/app/src/main/res/layout/activity_monitoring.xml
+++ b/app/src/main/res/layout/activity_monitoring.xml
@@ -11,7 +11,8 @@
         android:layout_alignParentLeft="true"
         android:layout_alignParentTop="true"
         android:layout_marginTop="17dp"
-        android:text="Monitoring Events:"/>
+        android:text="@string/monitoring_events"
+        tools:ignore="RtlHardcoded"/>
 
     <EditText
         android:id="@+id/monitoringText"
@@ -22,7 +23,8 @@
         android:layout_marginTop="36dp"
         android:ems="10"
         android:gravity="left|top"
-        android:inputType="textMultiLine">
+        android:inputType="textMultiLine"
+        tools:ignore="Autofill,LabelFor,RtlHardcoded">
 
         <requestFocus/>
     </EditText>
@@ -34,7 +36,8 @@
         android:layout_below="@+id/monitoringText"
         android:layout_alignParentLeft="true"
         android:onClick="onRangingClicked"
-        android:text="Start Ranging"/>
+        android:text="@string/start_ranging"
+        tools:ignore="RtlHardcoded"/>
 
     <Button
         android:id="@+id/enableButton"
@@ -43,5 +46,6 @@
         android:layout_below="@+id/monitoringText"
         android:layout_toRightOf="@id/Button01"
         android:onClick="onEnableClicked"
-        android:text="Disable monitoring"/>
+        android:text="@string/disable_monitoring"
+        tools:ignore="RtlHardcoded"/>
 </RelativeLayout>
diff --git a/app/src/main/res/layout/activity_ranging.xml b/app/src/main/res/layout/activity_ranging.xml
index 0fe7d15e..5bb3e8da 100755
--- a/app/src/main/res/layout/activity_ranging.xml
+++ b/app/src/main/res/layout/activity_ranging.xml
@@ -14,8 +14,7 @@
         android:layout_marginTop="14dp"
         android:ems="10"
         android:gravity="left|top"
-        android:inputType="textMultiLine">
-
-    </EditText>
+        android:inputType="textMultiLine"
+        tools:ignore="Autofill,LabelFor,RtlHardcoded"/>
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 41452434..2ad265fe 100755
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -1,5 +1,8 @@
 <resources>
 
     <string name="app_name">BeaconReference</string>
+    <string name="disable_monitoring">Disable monitoring</string>
+    <string name="start_ranging">Start Ranging</string>
+    <string name="monitoring_events">Monitoring Events:</string>
 
 </resources>
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
index 845fb572..9486e57d 100755
--- a/app/src/main/res/values/styles.xml
+++ b/app/src/main/res/values/styles.xml
@@ -1,19 +1,7 @@
 <resources>
 
-    <!--
-        Base application theme, dependent on API level. This theme is replaced
-        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
-    -->
-    <style name="AppBaseTheme" parent="Theme.AppCompat.Light">
-        <!--
-            Theme customizations available in newer API levels can go in
-            res/values-vXX/styles.xml, while customizations related to
-            backward-compatibility can go here.
-        -->
-    </style>
-
     <!-- Application theme. -->
-    <style name="AppTheme" parent="AppBaseTheme">
+    <style name="AppTheme" parent="Theme.AppCompat.Light">
         <!-- All customizations that are NOT specific to a particular API-level can go here. -->
     </style>
 
