diff --git a/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java
index 1bb9f2e0..696414e2 100755
--- a/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java
+++ b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java
@@ -50,7 +50,7 @@ private void initUI() {
         if (bluetoothAvailable()) {
             boolean bluetoothEnabled = bluetoothEnabled();
             initBluetoothStatus(bluetoothEnabled);
-            updateSimulatorUI(bluetoothEnabled);
+            updateUI(bluetoothEnabled);
         } else {
             btn_scan.setEnabled(false);
             btn_enable_bluetooth.setEnabled(false);
@@ -63,7 +63,7 @@ private boolean bluetoothAvailable() {
         return BluetoothAdapter.getDefaultAdapter() != null;
     }
 
-    private void updateSimulatorUI(boolean bluetoothEnabled) {
+    private void updateUI(boolean bluetoothEnabled) {
         if (bluetoothEnabled) {
             bindBeaconManager();
         } else {
@@ -105,7 +105,7 @@ private void enableBluetooth() {
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         switch (requestCode) {
             case REQUEST_TURN_ON_BLUETOOTH:
-                updateSimulatorUI(bluetoothEnabled());
+                updateUI(bluetoothEnabled());
                 break;
             default:
                 super.onActivityResult(requestCode, resultCode, data);
@@ -124,7 +124,7 @@ public void append(final String log) {
         tv_log.append(log);
     }
 
-    public void toggleSimulate(View view) {
+    public void toggleScanStatus(View view) {
         if (btn_scan.getText().equals(getString(R.string.scan))) {
             onScanRequested();
         } else {
diff --git a/1_monitor/src/main/res/layout/activity_monitor.xml b/1_monitor/src/main/res/layout/activity_monitor.xml
index 0f978a2c..8b745b0d 100755
--- a/1_monitor/src/main/res/layout/activity_monitor.xml
+++ b/1_monitor/src/main/res/layout/activity_monitor.xml
@@ -27,7 +27,7 @@
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:onClick="toggleSimulate"
+            android:onClick="toggleScanStatus"
             android:text="@string/scan"
             tools:ignore="ButtonStyle"/>
 
diff --git a/1_ranging/build.gradle b/1_ranging/build.gradle
new file mode 100755
index 00000000..13691168
--- /dev/null
+++ b/1_ranging/build.gradle
@@ -0,0 +1,34 @@
+apply plugin: 'com.android.application'
+apply plugin: 'com.jakewharton.hugo'
+
+android {
+    compileSdkVersion 28
+    buildToolsVersion '28.0.3'
+
+    defaultConfig {
+        applicationId "org.altbeacon.beacon.demo.ranging"
+        minSdkVersion 21
+        //noinspection ExpiredTargetSdkVersion
+        targetSdkVersion 22
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        targetCompatibility JavaVersion.VERSION_1_8
+        sourceCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    compile 'com.android.support:appcompat-v7:28.0.0'
+    if (enableLib == 'true') {
+        compile project(':lib')
+    } else {
+        compile 'org.altbeacon:android-beacon-library:2.15.4'
+    }
+}
\ No newline at end of file
diff --git a/1_ranging/src/main/AndroidManifest.xml b/1_ranging/src/main/AndroidManifest.xml
new file mode 100755
index 00000000..acc711c7
--- /dev/null
+++ b/1_ranging/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="org.altbeacon.beacon.demo.ranging">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme"
+        tools:ignore="AllowBackup,GoogleAppIndexingWarning">
+        <activity
+            android:name=".RangingBeaconActivity"
+            android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/RangingBeaconActivity.java b/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/RangingBeaconActivity.java
new file mode 100755
index 00000000..f932fb85
--- /dev/null
+++ b/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/RangingBeaconActivity.java
@@ -0,0 +1,253 @@
+package org.altbeacon.beacon.demo.ranging;
+
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothManager;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.support.v7.app.AppCompatActivity;
+import android.text.method.ScrollingMovementMethod;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import org.altbeacon.beacon.Beacon;
+import org.altbeacon.beacon.BeaconConsumer;
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.MonitorNotifier;
+import org.altbeacon.beacon.RangeNotifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.Collection;
+import java.util.List;
+
+import hugo.weaving.DebugLog;
+
+@DebugLog
+public class RangingBeaconActivity extends AppCompatActivity
+        implements MonitorNotifier, BeaconConsumer, RangeNotifier {
+
+    private static final int REQUEST_TURN_ON_BLUETOOTH = 1;
+    private TextView tv_log;
+    private Button btn_scan;
+    private Button btn_enable_bluetooth;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_ranging);
+        tv_log = findViewById(R.id.tv_log);
+        tv_log.setMovementMethod(new ScrollingMovementMethod());
+        btn_scan = findViewById(R.id.btn_scan);
+        btn_enable_bluetooth = findViewById(R.id.btn_enable_bluetooth);
+        initBeaconScanSettings();
+        initUI();
+
+    }
+
+    private void initBeaconScanSettings() {
+        BeaconManager.setRegionExitPeriod(5000);
+    }
+
+    private void initUI() {
+        if (bluetoothAvailable()) {
+            boolean bluetoothEnabled = bluetoothEnabled();
+            initBluetoothStatus(bluetoothEnabled);
+            updateUI(bluetoothEnabled);
+        } else {
+            btn_scan.setEnabled(false);
+            btn_enable_bluetooth.setEnabled(false);
+            tv_log.setText(R.string.bluetooth_not_available);
+        }
+
+    }
+
+    private boolean bluetoothAvailable() {
+        return BluetoothAdapter.getDefaultAdapter() != null;
+    }
+
+    private void updateUI(boolean bluetoothEnabled) {
+        if (bluetoothEnabled) {
+            bindBeaconManager();
+        } else {
+            btn_scan.setEnabled(false);
+            clear();
+            log(getString(R.string.scan_not_ready));
+        }
+    }
+
+    private void clear() {
+        tv_log.setText(null);
+    }
+
+    private void initBluetoothStatus(boolean bluetoothEnabled) {
+        if (bluetoothEnabled) {
+            btn_enable_bluetooth.setText(R.string.bluetooth_enabled);
+            btn_enable_bluetooth.setEnabled(false);
+            btn_enable_bluetooth.setVisibility(View.INVISIBLE);
+        } else {
+            btn_enable_bluetooth.setText(R.string.enable_bluetooth);
+            btn_enable_bluetooth.setEnabled(true);
+            btn_enable_bluetooth.setVisibility(View.VISIBLE);
+        }
+
+    }
+
+    private boolean bluetoothEnabled() {
+        BluetoothManager manager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
+        BluetoothAdapter bluetoothAdapter = manager.getAdapter();
+        return bluetoothAdapter.isEnabled();
+    }
+
+    private void enableBluetooth() {
+        Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
+        startActivityForResult(enableBtIntent, REQUEST_TURN_ON_BLUETOOTH);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch (requestCode) {
+            case REQUEST_TURN_ON_BLUETOOTH:
+                updateUI(bluetoothEnabled());
+                break;
+            default:
+                super.onActivityResult(requestCode, resultCode, data);
+                break;
+        }
+    }
+
+
+    private void bindBeaconManager() {
+        BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+        beaconManager.addMonitorNotifier(this);
+        beaconManager.addRangeNotifier(this);
+        beaconManager.bind(this);
+    }
+
+    public void log(final String log) {
+        Log.v("monitor", log);
+    }
+
+    public void toggleScanStatus(View view) {
+        if (btn_scan.getText().equals(getString(R.string.scan))) {
+            onScanRequested();
+        } else {
+            onStopRequested();
+        }
+
+    }
+
+    private void onStopRequested() {
+        stopBeacon();
+        append("\nBeacon scanning stopped.\n");
+        btn_scan.setText(R.string.scan);
+    }
+
+    private void stopBeacon() {
+        deregisterBeaconToBeMonitored(UuidProvider.beaconToMonitored());
+    }
+
+    private void onScanRequested() {
+        append("\nBegin to scan beacon.\n");
+        btn_scan.setText(R.string.stop);
+        scanBeacon();
+    }
+
+    private void scanBeacon() {
+        registerBeaconToBeMonitored(UuidProvider.beaconToMonitored());
+    }
+
+
+    @Override
+    public void didEnterRegion(Region region) {
+        log("enter:" + region.getUniqueId() + "\n");
+        append("start ranging beacon uuid :" + region.getUniqueId() + "\n");
+        startRanging(region.getUniqueId());
+    }
+
+    private void startRanging(String uuid) {
+        try {
+            BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+            beaconManager.startRangingBeaconsInRegion(UuidMapper.constructRegion(uuid));
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void didExitRegion(Region region) {
+        log("exit:" + region.getUniqueId() + "\n");
+        append("stop ranging beacon uuid :" + region.getUniqueId() + "\n");
+        stopRanging(region.getUniqueId());
+    }
+
+    private void stopRanging(String uuid) {
+        try {
+            BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+            beaconManager.stopRangingBeaconsInRegion(UuidMapper.constructRegion(uuid));
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void didDetermineStateForRegion(int state, Region region) {
+
+    }
+
+    @Override
+    public void onBeaconServiceConnect() {
+        clear();
+        append(getString(R.string.scan_ready));
+        btn_scan.setEnabled(true);
+
+    }
+
+    private void registerBeaconToBeMonitored(List<String> beacons) {
+        try {
+            BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+            for (String beacon : beacons) {
+                log("monitor beacon : " + beacon + "\n");
+                beaconManager.startMonitoringBeaconsInRegion(UuidMapper.constructRegion(beacon));
+            }
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+
+    }
+
+    private void deregisterBeaconToBeMonitored(List<String> beacons) {
+        try {
+            BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+            for (String uuid : beacons) {
+                log("stop monitoring beacon : " + uuid + "\n");
+                beaconManager.stopMonitoringBeaconsInRegion(UuidMapper.constructRegion(uuid));
+                startRanging(uuid);
+            }
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+
+    }
+
+    public void enableBluetooth(View view) {
+        enableBluetooth();
+    }
+
+    @Override
+    public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
+        int index = 0;
+        for (Beacon beacon : beacons) {
+            index++;
+            append(index + " Ranging distance : " + beacon.getDistance() + "\n");
+        }
+    }
+
+    private void append(String log) {
+        tv_log.append(log);
+
+    }
+}
diff --git a/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/UuidMapper.java b/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/UuidMapper.java
new file mode 100755
index 00000000..8f645e45
--- /dev/null
+++ b/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/UuidMapper.java
@@ -0,0 +1,20 @@
+package org.altbeacon.beacon.demo.ranging;
+
+import org.altbeacon.beacon.Identifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UuidMapper {
+
+    public static Region constructRegion(String uuid) {
+        String[] parts = uuid.split(":");
+        List<Identifier> identifierList = new ArrayList<>();
+        identifierList.add(Identifier.parse(parts[0]));
+        identifierList.add(Identifier.parse(parts[1]));
+        identifierList.add(Identifier.parse(parts[2]));
+        return new Region(uuid, identifierList);
+    }
+
+}
\ No newline at end of file
diff --git a/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/UuidProvider.java b/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/UuidProvider.java
new file mode 100755
index 00000000..06592bc9
--- /dev/null
+++ b/1_ranging/src/main/java/org/altbeacon/beacon/demo/ranging/UuidProvider.java
@@ -0,0 +1,18 @@
+package org.altbeacon.beacon.demo.ranging;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UuidProvider {
+
+    /**
+     * define the beacon uuid that you want to scan.
+     *
+     * @return the list of beacon that you would like to scan.
+     */
+    public static List<String> beaconToMonitored() {
+        List<String> result = new ArrayList<>();
+        result.add("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6:1:2");
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/1_ranging/src/main/res/drawable-hdpi/ic_launcher.png b/1_ranging/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100755
index 00000000..96a442e5
Binary files /dev/null and b/1_ranging/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/1_ranging/src/main/res/drawable-mdpi/ic_launcher.png b/1_ranging/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100755
index 00000000..359047df
Binary files /dev/null and b/1_ranging/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/1_ranging/src/main/res/drawable-xhdpi/ic_launcher.png b/1_ranging/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100755
index 00000000..71c6d760
Binary files /dev/null and b/1_ranging/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/1_ranging/src/main/res/layout/activity_ranging.xml b/1_ranging/src/main/res/layout/activity_ranging.xml
new file mode 100755
index 00000000..b574a281
--- /dev/null
+++ b/1_ranging/src/main/res/layout/activity_ranging.xml
@@ -0,0 +1,43 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical"
+              android:padding="16dp">
+
+
+    <TextView
+        android:id="@+id/tv_log"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:maxLines="10000"
+        android:scrollbars="vertical"/>
+
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <Button
+            android:id="@+id/btn_scan"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="toggleScanStatus"
+            android:text="@string/scan"
+            tools:ignore="ButtonStyle"/>
+
+        <Button
+            android:id="@+id/btn_enable_bluetooth"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="enableBluetooth"
+            android:text="@string/enable_bluetooth"
+            tools:ignore="ButtonStyle"/>
+    </LinearLayout>
+
+
+</LinearLayout>
diff --git a/1_ranging/src/main/res/values/strings.xml b/1_ranging/src/main/res/values/strings.xml
new file mode 100755
index 00000000..9841c4e6
--- /dev/null
+++ b/1_ranging/src/main/res/values/strings.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <string name="app_name">Beacon Ranging Demo</string>
+    <string name="scan_ready">Press Start button to start ranging the beacon\n</string>
+    <string name="scan_not_ready">Press button to enable Bluetooth\n</string>
+    <string name="scan">Start</string>
+    <string name="stop">Stop</string>
+    <string name="enable_bluetooth">Enable Bluetooth</string>
+    <string name="bluetooth_enabled">Bluetooth Enabled</string>
+    <string name="bluetooth_not_available">Bluetooth Not Available. Please use a real device.</string>
+</resources>
diff --git a/1_ranging/src/main/res/values/styles.xml b/1_ranging/src/main/res/values/styles.xml
new file mode 100755
index 00000000..9486e57d
--- /dev/null
+++ b/1_ranging/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
diff --git a/settings.gradle b/settings.gradle
index a86fb497..61c8b29b 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -2,5 +2,6 @@ if (enableLib == 'true') {
     include ':lib'
 }
 include ':1_monitor'
+include ':1_ranging'
 include ':simulator'
 include ':app'
\ No newline at end of file
