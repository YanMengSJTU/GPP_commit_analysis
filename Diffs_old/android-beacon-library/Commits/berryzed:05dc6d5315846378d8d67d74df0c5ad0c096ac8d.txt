diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 5b443650..a6155268 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -576,7 +576,7 @@ public void setEnableScheduledScanJobs(boolean enabled) {
             return;
         }
         if (!enabled && android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            LogManager.w(TAG, "Disabling ScanJobs on Android 8+ may disable delivery of "+
+            LogManager.w(TAG, "Disabling ScanJobs on Android 8+ may disable delivery of " +
                     "beacon callbacks in the background unless a foreground service is active.");
         }
         mScheduledScanJobsEnabled = enabled;
@@ -1348,21 +1348,19 @@ public static boolean getManifestCheckingDisabled() {
      * that this method does not by itself enable constant scanning.  The scan intervals will work
      * as normal and must be configurd to specific values depending on how often you wish to scan.
      *
+     * @param notification - the notification that will be displayed when beacon scanning is active,
+     *                     along with the icon that shows up in the status bar.
+     * @throws IllegalStateException if called after consumers are already bound to the scanning
+     *                               service
      * @see #setForegroundScanPeriod(long)
      * @see #setForegroundBetweenScanPeriod(long)
-     *
+     * <p>
      * This method requires a notification to display a message to the user about why the app is
      * scanning in the background.  The notification must include an icon that will be displayed
      * in the top bar whenever the scanning service is running.
-     *
+     * <p>
      * If the BeaconService is configured to run in a different process, this call will have no
      * effect.
-     *
-     * @param notification - the notification that will be displayed when beacon scanning is active,
-     *                       along with the icon that shows up in the status bar.
-     *
-     * @throws IllegalStateException if called after consumers are already bound to the scanning
-     * service
      */
     public void enableForegroundServiceScanning(Notification notification, int notificationId)
             throws IllegalStateException {
@@ -1380,13 +1378,12 @@ public void enableForegroundServiceScanning(Notification notification, int notif
     /**
      * Disables a foreground scanning service, if previously configured.
      *
+     * @throws IllegalStateException if called after consumers are already bound to the scanning
+     *                               service
      * @see #enableForegroundServiceScanning
-     *
+     * <p>
      * In order to call this method to disable a foreground service, you must  unbind from the
      * BeaconManager.  You can then rebind after this call is made.
-     *
-     * @throws IllegalStateException if called after consumers are already bound to the scanning
-     * service
      */
     public void disableForegroundServiceScanning() throws IllegalStateException {
         if (isAnyConsumerBound()) {
@@ -1397,8 +1394,8 @@ public void disableForegroundServiceScanning() throws IllegalStateException {
     }
 
     /**
-     * @see #enableForegroundServiceScanning
      * @return The notification shown for the beacon scanning service, if so configured
+     * @see #enableForegroundServiceScanning
      */
     public Notification getForegroundServiceNotification() {
         return mForegroundServiceNotification;
@@ -1406,8 +1403,8 @@ public Notification getForegroundServiceNotification() {
 
 
     /**
-     * @see #enableForegroundServiceScanning
      * @return The notification shown for the beacon scanning service, if so configured
+     * @see #enableForegroundServiceScanning
      */
     public int getForegroundServiceNotificationId() {
         return mForegroundServiceNotificationId;
diff --git a/src/main/java/org/altbeacon/beacon/BeaconParser.java b/src/main/java/org/altbeacon/beacon/BeaconParser.java
index 24641739..2019a6de 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconParser.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconParser.java
@@ -517,7 +517,7 @@ protected Beacon fromScanData(byte[] bytesToProcess, int rssi, BluetoothDevice d
                         // If this is a variable length identifier, we truncate it to the size that
                         // is available in the packet
                         int start = mIdentifierStartOffsets.get(i) + startByte;
-                        int end = pduToParse.getEndIndex()+1;
+                        int end = pduToParse.getEndIndex() + 1;
                         if (end <= start) {
                             LogManager.d(TAG, "PDU is too short for identifer.  Packet is malformed");
                             return null;
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index f7bc12a7..f0d330ce 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -61,7 +61,6 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Map;
 
 import static android.app.PendingIntent.FLAG_ONE_SHOT;
 import static android.app.PendingIntent.getBroadcast;
@@ -210,8 +209,7 @@ public void onCreate() {
         beaconManager.setScannerInSameProcess(true);
         if (beaconManager.isMainProcess()) {
             LogManager.i(TAG, "beaconService version %s is starting up on the main process", BuildConfig.VERSION_NAME);
-        }
-        else {
+        } else {
             LogManager.i(TAG, "beaconService version %s is starting up on a separate process", BuildConfig.VERSION_NAME);
             ProcessUtils processUtils = new ProcessUtils(this);
             LogManager.i(TAG, "beaconService PID is "+processUtils.getPid()+" with process name "+processUtils.getProcessName());
@@ -265,8 +263,7 @@ private String getManifestMetadataValue(String key) {
             if (info != null && info.metaData != null) {
                 return info.metaData.get(key).toString();
             }
-        }
-        catch (PackageManager.NameNotFoundException e) {
+        } catch (PackageManager.NameNotFoundException e) {
         }
         return null;
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
index 280fa056..ef96ce43 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
@@ -21,7 +21,6 @@
 import org.altbeacon.beacon.service.DetectionTracker;
 import org.altbeacon.bluetooth.BluetoothCrashResolver;
 
-import java.security.Security;
 import java.util.ArrayList;
 import java.util.List;
 
