diff --git a/build.gradle b/build.gradle
index ac54f10a..4ab2e3c0 100644
--- a/build.gradle
+++ b/build.gradle
@@ -25,10 +25,13 @@ def getVersionName = {
 buildscript {
     repositories {
         jcenter()
+        maven {
+            url 'https://maven.google.com'
+        }
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.0'
+        classpath 'com.android.tools.build:gradle:2.3.1'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
         classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.3'
     }
@@ -48,12 +51,20 @@ allprojects {
 }
 
 android {
-    compileSdkVersion 24
-    buildToolsVersion "25.0.2"
+    // You cannot set a minSdk < Android O if targeting android-O.  Swap out the
+    // commented lines below to test on Android O devices vs. earlier devices.
+    //compileSdkVersion 25
+    compileSdkVersion 'android-O'
+    buildToolsVersion '26.0.0-rc2'
 
     defaultConfig {
-        minSdkVersion 7
-        targetSdkVersion 23
+        // Unfortunately 'com.android.support:appcompat-v7:26.0.0-alpha1
+        // requires minSdkVersion 14, forcing a bump verson minSdkVersion 7
+        minSdkVersion 14
+        // You cannot set a minSdk < Android O if targeting android-O.  Swap out the
+        // commented lines below to test on Android O devices vs. earlier devices.
+        //targetSdkVersion 25
+        targetSdkVersion 'O'
         versionCode 1
         versionName version
         testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
@@ -80,6 +91,8 @@ android {
 
 dependencies {
     compile fileTree ( dir: 'libs', include: ['*.jar'] )
+    // Docs say to use com.android.support:appcompat-v7:26.0.0-beta1, but that is not available
+    compile 'com.android.support:appcompat-v7:26.0.0-alpha1'
     compile 'com.android.support:support-annotations:24.2.1'
 
     testCompile('junit:junit:4.12') {
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index 9aa95ea1..7278cc5c 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -6,6 +6,8 @@
 import android.app.job.JobScheduler;
 import android.app.job.JobService;
 import android.bluetooth.BluetoothDevice;
+import android.bluetooth.le.ScanFilter;
+import android.bluetooth.le.ScanSettings;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
@@ -24,8 +26,10 @@
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.service.scanner.CycledLeScanCallback;
 import org.altbeacon.beacon.service.scanner.CycledLeScanner;
+import org.altbeacon.beacon.service.scanner.CycledLeScannerForAndroidO;
 import org.altbeacon.beacon.service.scanner.DistinctPacketDetector;
 import org.altbeacon.beacon.service.scanner.NonBeaconLeScanCallback;
+import org.altbeacon.beacon.service.scanner.ScanFilterUtils;
 import org.altbeacon.beacon.utils.ProcessUtils;
 
 import java.util.ArrayList;
@@ -97,6 +101,16 @@ public void run() {
                     LogManager.i(TAG, "Scan job runtime expired");
                     stopScanning();
                     mScanState.save();
+                    if (mScanState.getBackgroundMode()) {
+                        // TODO:  Ew. figure out a better way to know to call this
+                        if (mCycledScanner instanceof CycledLeScannerForAndroidO) {
+                            // We are in backround mode for Anrdoid O and the background scan cycle
+                            // has ended.  Now we kick off a background scan with a lower power
+                            // mode and set it to deliver an intent if it sees anything that will
+                            // wake us up and start this craziness all over again
+                            ((CycledLeScannerForAndroidO)mCycledScanner).startAndroidOBackgroundScan(mScanState.getBeaconParsers());
+                        }
+                    }
                     ScanJob.this.jobFinished(jobParameters , false);
                 }
             }, mScanState.getScanJobRuntimeMillis());
@@ -174,7 +188,6 @@ private void stopScanning() {
         LogManager.d(TAG, "Scanning stopped");
     }
 
-
     //TODO: Move this and the static methods below to its own utility class
 
     /*
@@ -185,10 +198,10 @@ private void stopScanning() {
     private static int sImmediateScanJobId = 1; // TODO: make this configurable
     private static int sPeriodicScanJobId = 2; // TODO: make this configurable
 
-    public static void applySettingsToScheduledJob(Context context, BeaconManager beaconManager, ScanState scanState) {
+    private static void applySettingsToScheduledJob(Context context, BeaconManager beaconManager, ScanState scanState) {
         scanState.applyChanges(beaconManager);
         LogManager.d(TAG, "Applying scan job settings with background mode "+scanState.getBackgroundMode());
-        schedule(context, scanState);
+        schedule(context, scanState, false);
     }
 
     public static void applySettingsToScheduledJob(Context context, BeaconManager beaconManager) {
@@ -197,37 +210,44 @@ public static void applySettingsToScheduledJob(Context context, BeaconManager be
         ScanState scanState = ScanState.restore(context);
         applySettingsToScheduledJob(context, beaconManager, scanState);
     }
+
+    public static void scheduleAfterBackgroundWakeup(Context context) {
+        ScanState scanState = ScanState.restore(context);
+        schedule(context, scanState, true);
+    }
     /**
      *
      * @param context
      */
-    public static void schedule(Context context, ScanState scanState) {
+    public static void schedule(Context context, ScanState scanState, boolean backgroundWakeup) {
         long betweenScanPeriod = scanState.getScanJobIntervalMillis() - scanState.getScanJobRuntimeMillis();
 
         long millisToNextJobStart = scanState.getScanJobIntervalMillis();
-        if (betweenScanPeriod > 0) {
-            // If we pause between scans, then we need to start scanning on a normalized time
-            millisToNextJobStart = (SystemClock.elapsedRealtime() % scanState.getScanJobIntervalMillis());
-        }
-        else {
+        if (backgroundWakeup) {
+            LogManager.d(TAG, "We just woke up in the background based on a new scan result.  Start scan job immediately.");
             millisToNextJobStart = 0;
         }
+        else {
+            if (betweenScanPeriod > 0) {
+                // If we pause between scans, then we need to start scanning on a normalized time
+                millisToNextJobStart = (SystemClock.elapsedRealtime() % scanState.getScanJobIntervalMillis());
+            }
+            else {
+                millisToNextJobStart = 0;
+            }
 
-        if (millisToNextJobStart < 50) {
-            // always wait a little bit to start scanning in case settings keep changing.
-            // by user restarting settings and scanning.  50ms should be fine
-            millisToNextJobStart = 50;
+            if (millisToNextJobStart < 50) {
+                // always wait a little bit to start scanning in case settings keep changing.
+                // by user restarting settings and scanning.  50ms should be fine
+                millisToNextJobStart = 50;
+            }
         }
 
         JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
 
-        if (scanState.getBackgroundMode()) {
-            LogManager.d(TAG, "Not scheduling an immediate scan because we are in background mode.   Cancelling existing immediate scan.");
-            jobScheduler.cancel(sImmediateScanJobId);
-        }
-        else {
+        if (backgroundWakeup || !scanState.getBackgroundMode()) {
             // If we are in the foreground, and we want to start a scan soon, we will schedule an
-            // immediat job
+            // immediate job
             if (millisToNextJobStart < scanState.getScanJobIntervalMillis() - 50) {
                 // If the next time we want to scan is less than 50ms from the periodic scan cycle, then]
                 // we schedule it for that specific time.
@@ -243,6 +263,10 @@ public static void schedule(Context context, ScanState scanState) {
                 }
             }
         }
+        else {
+            LogManager.d(TAG, "Not scheduling an immediate scan because we are in background mode.   Cancelling existing immediate scan.");
+            jobScheduler.cancel(sImmediateScanJobId);
+        }
 
         JobInfo.Builder periodicJobBuilder = new JobInfo.Builder(sPeriodicScanJobId, new ComponentName(context, ScanJob.class))
                 .setPersisted(true) // This makes it restart after reboot
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
index 4b678233..e829dce9 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
@@ -68,7 +68,8 @@ protected CycledLeScanner(Context context, long scanPeriod, long betweenScanPeri
     }
 
     public static CycledLeScanner createScanner(Context context, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, CycledLeScanCallback cycledLeScanCallback, BluetoothCrashResolver crashResolver) {
-        boolean useAndroidLScanner;
+        boolean useAndroidLScanner = false;
+        boolean useAndroidOScanner = false;
         if (android.os.Build.VERSION.SDK_INT < 18) {
             LogManager.w(TAG, "Not supported prior to API 18.");
             return null;
@@ -77,7 +78,7 @@ public static CycledLeScanner createScanner(Context context, long scanPeriod, lo
         if (android.os.Build.VERSION.SDK_INT < 21) {
             LogManager.i(TAG, "This is not Android 5.0.  We are using old scanning APIs");
             useAndroidLScanner = false;
-        } else {
+        } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
             if (BeaconManager.isAndroidLScanningDisabled()) {
                 LogManager.i(TAG, "This Android 5.0, but L scanning is disabled. We are using old scanning APIs");
                 useAndroidLScanner = false;
@@ -86,13 +87,19 @@ public static CycledLeScanner createScanner(Context context, long scanPeriod, lo
                 useAndroidLScanner = true;
             }
         }
+        else {
+            LogManager.i(TAG, "Using Android O scanner");
+            useAndroidOScanner = true;
+        }
 
-        if (useAndroidLScanner) {
+        if (useAndroidOScanner) {
+            return new CycledLeScannerForAndroidO(context, scanPeriod, betweenScanPeriod, backgroundFlag, cycledLeScanCallback, crashResolver);
+        }
+        else if (useAndroidLScanner) {
             return new CycledLeScannerForLollipop(context, scanPeriod, betweenScanPeriod, backgroundFlag, cycledLeScanCallback, crashResolver);
         } else {
             return new CycledLeScannerForJellyBeanMr2(context, scanPeriod, betweenScanPeriod, backgroundFlag, cycledLeScanCallback, crashResolver);
         }
-
     }
 
     /**
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
new file mode 100644
index 00000000..c7c4de96
--- /dev/null
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
@@ -0,0 +1,55 @@
+package org.altbeacon.beacon.service.scanner;
+
+import android.annotation.TargetApi;
+import android.app.PendingIntent;
+import android.bluetooth.le.ScanFilter;
+import android.bluetooth.le.ScanSettings;
+import android.content.Context;
+import android.content.Intent;
+
+import org.altbeacon.beacon.BeaconParser;
+import org.altbeacon.beacon.logging.LogManager;
+import org.altbeacon.beacon.startup.StartupBroadcastReceiver;
+import org.altbeacon.bluetooth.BluetoothCrashResolver;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Created by dyoung on 5/28/17.
+ */
+
+@TargetApi(25)
+public class CycledLeScannerForAndroidO extends CycledLeScannerForJellyBeanMr2 {
+    private static final String TAG = CycledLeScannerForAndroidO.class.getSimpleName();
+
+    public CycledLeScannerForAndroidO(Context context, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, CycledLeScanCallback cycledLeScanCallback, BluetoothCrashResolver crashResolver) {
+        super(context, scanPeriod, betweenScanPeriod, backgroundFlag, cycledLeScanCallback, crashResolver);
+    }
+
+    /**
+     * @param beaconParsers
+     */
+    public void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
+        ScanSettings settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
+        List<ScanFilter> filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
+                new ArrayList(beaconParsers));
+        try {
+            Intent intent = new Intent(mContext, StartupBroadcastReceiver.class);
+
+            PendingIntent callbackIntent = PendingIntent.getBroadcast(mContext,0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+            // We cannot build with a minSdk < Android O when using Android O preview APIs
+            // so if you set an earlier minSdk to test against pre-O devices, you must comment out
+            // the next few lines
+            //int result = getBluetoothAdapter().getBluetoothLeScanner().startScan(filters, settings, callbackIntent);
+            //if (result != 0) {
+            //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
+            //}
+         }
+        catch (SecurityException e) {
+            LogManager.e(TAG, "SecurityException making Android O background scanner");
+         }
+    }
+
+}
diff --git a/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java b/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
index 8964e607..88cc6be0 100644
--- a/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
+++ b/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
@@ -3,9 +3,11 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Bundle;
 
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.service.ScanJob;
 
 public class StartupBroadcastReceiver extends BroadcastReceiver
 {
@@ -21,6 +23,16 @@ public void onReceive(Context context, Intent intent) {
         BeaconManager beaconManager = BeaconManager.getInstanceForApplication(context.getApplicationContext());
         if (beaconManager.isAnyConsumerBound()) {
             if (intent.getBooleanExtra("wakeup", false)) {
+                LogManager.d(TAG, "got Android O background scan via intent");
+                Bundle bundle = intent.getExtras();
+                for (String key : bundle.keySet()) {
+                    LogManager.d(TAG, "Key found in Android O background scan delivery intent: "+key);
+                }
+                // TODO: figure out how to get the scan data out of the keys above so we can process
+                // Kick off a scan
+                ScanJob.scheduleAfterBackgroundWakeup(context);
+            }
+            else if (intent.getBooleanExtra("wakeup", false)) {
                 LogManager.d(TAG, "got wake up intent");
             }
             else {
