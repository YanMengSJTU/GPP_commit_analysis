diff --git a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java b/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
index 29d8ef6c..efd7c7a9 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
@@ -3,7 +3,9 @@
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.PendingIntent;
+import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
+import android.bluetooth.BluetoothManager;
 import android.bluetooth.le.ScanFilter;
 import android.bluetooth.le.ScanSettings;
 import android.content.Context;
@@ -144,31 +146,56 @@ void reloadParsers() {
         mExtraDataBeaconTracker = new ExtraDataBeaconTracker(matchBeaconsByServiceUUID);
     }
 
-    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
+    @RequiresApi(api = Build.VERSION_CODES.N_MR1)
     void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
         ScanSettings settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
         List<ScanFilter> filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
-                new ArrayList<>(beaconParsers));
+                new ArrayList<BeaconParser>(beaconParsers));
         try {
-            Intent intent = new Intent(mContext, StartupBroadcastReceiver.class);
-            intent.putExtra("o-scan", true);
-            PendingIntent callbackIntent = PendingIntent.getBroadcast(mContext,0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
-            // We cannot build with a minSdk < Android O when using Android O preview APIs
-            // This code is only enabled in a branch targeting Android O.  That will change
-            // upon the release of Android O.
-            //int result = getBluetoothAdapter().getBluetoothLeScanner().startScan(filters, settings, callbackIntent);
-            //if (result != 0) {
-            //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
-            //}
-            //else {
-            //    LogManager.d(TAG, "Started passive beacon scan");
-            //}
+            final BluetoothManager bluetoothManager =
+                    (BluetoothManager) mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
+            BluetoothAdapter bluetoothAdapter = bluetoothManager.getAdapter();
+            if (bluetoothAdapter == null) {
+                LogManager.w(TAG, "Failed to construct a BluetoothAdapter");
+            }
+            else {
+                //int result = bluetoothAdapter.getBluetoothLeScanner().startScan(filters, settings, getScanCallbackIntent());
+                //if (result != 0) {
+                //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
+                //}
+                //else {
+                //    LogManager.d(TAG, "Started passive beacon scan");
+                //}
+            }
         }
         catch (SecurityException e) {
             LogManager.e(TAG, "SecurityException making Android O background scanner");
         }
     }
 
+    @RequiresApi(api = Build.VERSION_CODES.O)
+    void stopAndroidOBackgroundScan() {
+        try {
+            final BluetoothManager bluetoothManager =
+                    (BluetoothManager) mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
+            BluetoothAdapter bluetoothAdapter = bluetoothManager.getAdapter();
+            if (bluetoothAdapter == null) {
+                LogManager.w(TAG, "Failed to construct a BluetoothAdapter");
+            } else {
+                bluetoothAdapter.getBluetoothLeScanner().stopScan(getScanCallbackIntent());
+            }
+        } catch (SecurityException e) {
+               LogManager.e(TAG, "SecurityException stopping Android O background scanner");
+            }
+    }
+
+    // Low power scan results in the background will be delivered via Intent
+    PendingIntent getScanCallbackIntent() {
+        Intent intent = new Intent(mContext, StartupBroadcastReceiver.class);
+        intent.putExtra("o-scan", true);
+        return PendingIntent.getBroadcast(mContext,0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+    }
+
     private final CycledLeScanCallback mCycledLeScanCallback = new CycledLeScanCallback() {
         @TargetApi(Build.VERSION_CODES.HONEYCOMB)
         @Override
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index 2a224245..6165ed4e 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -112,7 +112,7 @@ private void startPassiveScanIfNeeded() {
         }
         else {
             // TODO: Change this to >= Build.VERSION_CODES.O when the SDK is released
-            if (android.os.Build.VERSION.SDK_INT > Build.VERSION_CODES.N) {
+            if (android.os.Build.VERSION.SDK_INT > Build.VERSION_CODES.N_MR1) {
                 LogManager.i(TAG, "We are outside all beacon regions.  We will scan between cycles.");
                 mScanHelper.startAndroidOBackgroundScan(mScanState.getBeaconParsers());
             }
@@ -155,6 +155,10 @@ private boolean restartScanning() {
         if (mScanHelper.getCycledScanner() == null) {
             mScanHelper.createCycledLeScanner(mScanState.getBackgroundMode(), null);
         }
+        // TODO: Change this to >= Build.VERSION_CODES.O when the SDK is released
+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.N_MR1) {
+            mScanHelper.stopAndroidOBackgroundScan();
+        }
         mScanHelper.getCycledScanner().setScanPeriods(mScanState.getBackgroundMode() ? mScanState.getBackgroundScanPeriod() : mScanState.getForegroundScanPeriod(),
                                       mScanState.getBackgroundMode() ? mScanState.getBackgroundBetweenScanPeriod() : mScanState.getForegroundBetweenScanPeriod(),
                                       mScanState.getBackgroundMode());
