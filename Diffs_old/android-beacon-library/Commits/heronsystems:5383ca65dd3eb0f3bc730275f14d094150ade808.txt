diff --git a/src/main/AndroidManifest.xml b/src/main/AndroidManifest.xml
index a27fcf75..995136cf 100644
--- a/src/main/AndroidManifest.xml
+++ b/src/main/AndroidManifest.xml
@@ -5,6 +5,47 @@
     <uses-permission android:name="android.permission.BLUETOOTH" android:required="false"/>
     <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" android:required="false"/>
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
+    <!--
+06-04 23:00:12.489 3894-3894/? E/AndroidRuntime: FATAL EXCEPTION: main
+                                                 Process: org.altbeacon.beaconreference, PID: 3894
+                                                 java.lang.RuntimeException: Unable to create application org.altbeacon.beaconreference.BeaconReferenceApplication: java.lang.IllegalArgumentException: Error: requested job be persisted without holding RECEIVE_BOOT_COMPLETED permission.
+                                                     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5788)
+                                                     at android.app.ActivityThread.-wrap1(Unknown Source:0)
+                                                     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1659)
+                                                     at android.os.Handler.dispatchMessage(Handler.java:105)
+                                                     at android.os.Looper.loop(Looper.java:164)
+                                                     at android.app.ActivityThread.main(ActivityThread.java:6535)
+                                                     at java.lang.reflect.Method.invoke(Native Method)
+                                                     at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)
+                                                     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767)
+                                                  Caused by: java.lang.IllegalArgumentException: Error: requested job be persisted without holding RECEIVE_BOOT_COMPLETED permission.
+                                                     at android.os.Parcel.readException(Parcel.java:1940)
+                                                     at android.os.Parcel.readException(Parcel.java:1882)
+                                                     at android.app.job.IJobScheduler$Stub$Proxy.schedule(IJobScheduler.java:180)
+                                                     at android.app.JobSchedulerImpl.schedule(JobSchedulerImpl.java:44)
+                                                     at org.altbeacon.beacon.service.ScanJob.schedule(ScanJob.java:260)
+                                                     at org.altbeacon.beacon.service.ScanJob.applySettingsToScheduledJob(ScanJob.java:204)
+                                                     at org.altbeacon.beacon.service.ScanJob.applySettingsToScheduledJob(ScanJob.java:211)
+                                                     at org.altbeacon.beacon.BeaconManager.startMonitoringBeaconsInRegion(BeaconManager.java:874)
+                                                     at org.altbeacon.beacon.startup.RegionBootstrap$InternalBeaconConsumer.onBeaconServiceConnect(RegionBootstrap.java:155)
+                                                     at org.altbeacon.beacon.BeaconManager.bind(BeaconManager.java:378)
+                                                     at org.altbeacon.beacon.startup.RegionBootstrap.<init>(RegionBootstrap.java:58)
+                                                     at org.altbeacon.beaconreference.BeaconReferenceApplication.onCreate(BeaconReferenceApplication.java:60)
+                                                     at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1118)
+                                                     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5785)
+                                                     at android.app.ActivityThread.-wrap1(Unknown Source:0) 
+                                                     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1659) 
+                                                     at android.os.Handler.dispatchMessage(Handler.java:105) 
+                                                     at android.os.Looper.loop(Looper.java:164) 
+                                                     at android.app.ActivityThread.main(ActivityThread.java:6535) 
+                                                     at java.lang.reflect.Method.invoke(Native Method) 
+                                                     at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240) 
+                                                     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767) 
+
+    -->
+
+
+
     <uses-permission-sdk-23 android:name="android.permission.ACCESS_COARSE_LOCATION"/>
 
     <application>
diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 967b1962..242f19a0 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -39,6 +39,7 @@
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.logging.Loggers;
 import org.altbeacon.beacon.service.BeaconService;
+import org.altbeacon.beacon.service.Callback;
 import org.altbeacon.beacon.service.MonitoringStatus;
 import org.altbeacon.beacon.service.RangeState;
 import org.altbeacon.beacon.service.RangedBeacon;
@@ -496,6 +497,9 @@ public void setBackgroundMode(boolean backgroundMode) {
     public void setEnableScheduledScanJobs(boolean enabled) {
         this.mScheduledScanJobsEnabled = enabled;
     }
+    public boolean getScheduledScanJobsEnabled() {
+        return this.mScheduledScanJobsEnabled;
+    }
     public boolean getBackgroundMode() {
         return mBackgroundMode;
     }
@@ -871,6 +875,7 @@ public void startMonitoringBeaconsInRegion(Region region) throws RemoteException
             return;
         }
         if (mScheduledScanJobsEnabled) {
+            MonitoringStatus.getInstanceForApplication(mContext).addRegion(region, new Callback(callbackPackageName()));
             ScanJob.applySettingsToScheduledJob(mContext, this);
         }
         else {
@@ -909,6 +914,7 @@ public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException
             return;
         }
         if (mScheduledScanJobsEnabled) {
+            MonitoringStatus.getInstanceForApplication(mContext).removeRegion(region);
             ScanJob.applySettingsToScheduledJob(mContext, this);
         }
         else {
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index 7278cc5c..6cad816f 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -101,16 +101,9 @@ public void run() {
                     LogManager.i(TAG, "Scan job runtime expired");
                     stopScanning();
                     mScanState.save();
-                    if (mScanState.getBackgroundMode()) {
-                        // TODO:  Ew. figure out a better way to know to call this
-                        if (mCycledScanner instanceof CycledLeScannerForAndroidO) {
-                            // We are in backround mode for Anrdoid O and the background scan cycle
-                            // has ended.  Now we kick off a background scan with a lower power
-                            // mode and set it to deliver an intent if it sees anything that will
-                            // wake us up and start this craziness all over again
-                            ((CycledLeScannerForAndroidO)mCycledScanner).startAndroidOBackgroundScan(mScanState.getBeaconParsers());
-                        }
-                    }
+
+                    startPassiveScanIfNeeded();
+
                     ScanJob.this.jobFinished(jobParameters , false);
                 }
             }, mScanState.getScanJobRuntimeMillis());
@@ -122,6 +115,35 @@ public void run() {
         return true;
     }
 
+    private void startPassiveScanIfNeeded() {
+        LogManager.d(TAG, "Checking to see if we need to start a passive scan");
+        boolean insideAnyRegion = false;
+        for (Region region : mScanState.getMonitoringStatus().regions()) {
+            RegionMonitoringState state = mScanState.getMonitoringStatus().stateOf(region);
+            if (state != null && state.getInside()) {
+                insideAnyRegion = true;
+            }
+        }
+        if (insideAnyRegion) {
+            // TODO: Set up a scan filter for not detecting a beacon pattern
+            LogManager.i(TAG, "We are inside a beacon region.  We will not scan between cycles.");
+        }
+        else {
+            LogManager.i(TAG, "We are outside all beacon regions.  We will scan between cycles.");
+            // TODO:  Ew. figure out a better way to know to call this
+            if (mCycledScanner instanceof CycledLeScannerForAndroidO) {
+                // We are in backround mode for Anrdoid O and the background scan cycle
+                // has ended.  Now we kick off a background scan with a lower power
+                // mode and set it to deliver an intent if it sees anything that will
+                // wake us up and start this craziness all over again
+                ((CycledLeScannerForAndroidO)mCycledScanner).startAndroidOBackgroundScan(mScanState.getBeaconParsers());
+            }
+            else {
+                LogManager.d(TAG, "This is not an Android O scanner.  No scanning between cycles.");
+            }
+        }
+    }
+
     @Override
     public boolean onStopJob(JobParameters params) {
         if (params.getJobId() == sPeriodicScanJobId) {
@@ -133,6 +155,7 @@ public boolean onStopJob(JobParameters params) {
         // Cancel the stop timer.  The OS is stopping prematurely
         mStopHandler.removeCallbacksAndMessages(null);
         stopScanning();
+        startPassiveScanIfNeeded();
         return false;
     }
 
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
index c7c4de96..fda5f246 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
@@ -37,15 +37,18 @@ public void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
                 new ArrayList(beaconParsers));
         try {
             Intent intent = new Intent(mContext, StartupBroadcastReceiver.class);
-
+            intent.putExtra("o-scan", true);
             PendingIntent callbackIntent = PendingIntent.getBroadcast(mContext,0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
             // We cannot build with a minSdk < Android O when using Android O preview APIs
             // so if you set an earlier minSdk to test against pre-O devices, you must comment out
             // the next few lines
-            //int result = getBluetoothAdapter().getBluetoothLeScanner().startScan(filters, settings, callbackIntent);
-            //if (result != 0) {
-            //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
-            //}
+            int result = getBluetoothAdapter().getBluetoothLeScanner().startScan(filters, settings, callbackIntent);
+            if (result != 0) {
+                LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
+            }
+            else {
+                LogManager.d(TAG, "Started passive beacon scan");
+            }
          }
         catch (SecurityException e) {
             LogManager.e(TAG, "SecurityException making Android O background scanner");
diff --git a/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java b/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
index 88cc6be0..9711f5dd 100644
--- a/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
+++ b/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
@@ -21,24 +21,33 @@ public void onReceive(Context context, Intent intent) {
             return;
         }
         BeaconManager beaconManager = BeaconManager.getInstanceForApplication(context.getApplicationContext());
-        if (beaconManager.isAnyConsumerBound()) {
+        if (beaconManager.isAnyConsumerBound() || beaconManager.getScheduledScanJobsEnabled()) {
             if (intent.getBooleanExtra("wakeup", false)) {
+                LogManager.d(TAG, "got wake up intent");
+            }
+            else if (intent.getBooleanExtra("o-scan", false)) {
                 LogManager.d(TAG, "got Android O background scan via intent");
                 Bundle bundle = intent.getExtras();
+                /*
+06-05 22:31:14.277 7696-7696/org.altbeacon.beaconreference D/StartupBroadcastReceiver: Extra key found in Android O background scan delivery intent: o-scan
+06-05 22:31:14.278 7696-7696/org.altbeacon.beaconreference D/StartupBroadcastReceiver: Extra key found in Android O background scan delivery intent: android.bluetooth.le.extra.LIST_SCAN_RESULT
+06-05 22:31:14.278 7696-7696/org.altbeacon.beaconreference D/StartupBroadcastReceiver: Extra key found in Android O background scan delivery intent: android.bluetooth.le.extra.CALLBACK_TYPE
+                 */
+
                 for (String key : bundle.keySet()) {
-                    LogManager.d(TAG, "Key found in Android O background scan delivery intent: "+key);
+                    LogManager.d(TAG, "Extra key found in Android O background scan delivery intent: "+key);
                 }
                 // TODO: figure out how to get the scan data out of the keys above so we can process
                 // Kick off a scan
                 ScanJob.scheduleAfterBackgroundWakeup(context);
             }
-            else if (intent.getBooleanExtra("wakeup", false)) {
-                LogManager.d(TAG, "got wake up intent");
-            }
             else {
                 LogManager.d(TAG, "Already started.  Ignoring intent: %s of type: %s", intent,
                         intent.getStringExtra("wakeup"));
             }
         }
+        else {
+            LogManager.d(TAG, "No consumers are bound.  Ignoring broadcast receiver.");
+        }
      }
 }
