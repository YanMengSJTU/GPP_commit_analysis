diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 7429380a..410ade1f 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -298,6 +298,7 @@ public boolean isMainProcess() {
     }
 
     /**
+     * 
      * Determines if this BeaconManager instance is not part of the process hosting the beacon scanning
      * service.  This is normally false, except when scanning is hosted in a different process.
      * This will always return false until the scanning service starts up, at which time it will be
@@ -311,7 +312,7 @@ public boolean isScannerInDifferentProcess() {
     }
 
     /**
-     * Reserved for internal by the library.
+     * Reserved for internal use by the library.
      * @hide
      */
     public void setScannerInSameProcess(boolean isScanner) {
diff --git a/src/main/java/org/altbeacon/beacon/service/DataSerializer.java b/src/main/java/org/altbeacon/beacon/service/DataSerializer.java
deleted file mode 100644
index b00bce35..00000000
--- a/src/main/java/org/altbeacon/beacon/service/DataSerializer.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.altbeacon.beacon.service;
-
-import org.altbeacon.beacon.Beacon;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Collection;
-
-/**
- * Created by dyoung on 3/10/17.
- */
-
-public class DataSerializer {
-    /*
-    public Serializable getSerializableRegion(Region region) {
-        return new SerializableRegion(region);
-    }
-
-    public Serializable getSerializableBeacon(Beacon beacon) {
-        return new SerializableBeacon(beacon);
-    }
-    */
-
-    public Serializable getSerializableBeaconList(Collection<Beacon> beacons) {
-        ArrayList<Serializable> serializableBeacons = new ArrayList<Serializable>();
-        for (Beacon beacon : beacons) {
-            serializableBeacons.add(beacon);
-        }
-        return serializableBeacons;
-    }
-
-    /*
-    private class SerializableBeacon extends Beacon implements Serializable {
-        public SerializableBeacon(Beacon beacon)  {
-            super(beacon);
-        }
-    }
-
-    private class SerializableRegion extends Region implements Serializable {
-        public SerializableRegion(Region region)  {
-            super(region);
-        }
-    }
-    */
-
-}
diff --git a/src/main/java/org/altbeacon/beacon/service/RangingData.java b/src/main/java/org/altbeacon/beacon/service/RangingData.java
index 79e47240..d7bb44ff 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangingData.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangingData.java
@@ -23,6 +23,8 @@
  */
 package org.altbeacon.beacon.service;
 
+import java.io.Serializable;
+import java.util.ArrayList;
 import java.util.Collection;
 
 import org.altbeacon.beacon.Beacon;
@@ -30,6 +32,10 @@
 
 import android.os.Bundle;
 
+/**
+ * Internal class used to transfer ranging data between the BeaconService and the client
+ * @hide
+ */
 public class RangingData {
     private static final String TAG = "RangingData";
     private final Collection<Beacon> mBeacons;
@@ -54,7 +60,11 @@ public Region getRegion() {
     public Bundle toBundle() {
         Bundle bundle = new Bundle();
         bundle.putSerializable(REGION_KEY, mRegion);
-        bundle.putSerializable(BEACONS_KEY, new DataSerializer().getSerializableBeaconList(mBeacons));
+        ArrayList<Serializable> serializableBeacons = new ArrayList<Serializable>();
+        for (Beacon beacon : mBeacons) {
+            serializableBeacons.add(beacon);
+        }
+        bundle.putSerializable(BEACONS_KEY, serializableBeacons);
 
         return bundle;
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/SettingsData.java b/src/main/java/org/altbeacon/beacon/service/SettingsData.java
index dcb34ca5..d1202336 100644
--- a/src/main/java/org/altbeacon/beacon/service/SettingsData.java
+++ b/src/main/java/org/altbeacon/beacon/service/SettingsData.java
@@ -1,8 +1,8 @@
 package org.altbeacon.beacon.service;
 
-import android.app.Service;
 import android.content.Context;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 
 import org.altbeacon.beacon.Beacon;
 import org.altbeacon.beacon.BeaconManager;
@@ -16,8 +16,11 @@
 
 /**
  * Created by dyoung on 3/10/17.
+ *
+ * Internal class used to transfer settings between the BeaconService and the client
+ *
+ * @hide
  */
-
 public class SettingsData implements Serializable {
     private static final String TAG = SettingsData.class.getSimpleName();
     private static final String SETTINGS_DATA_KEY = "SettingsData";
@@ -29,21 +32,18 @@
     Boolean mHardwareEqualityEnforced;
 
     // The following configuration settings are not implemented here, so they cannot be set when
-    // the scanning service is running in anothr process
-    //   beaconSimulator *
-    //   rssiFilterImplClass *
-    //   distanceCalculator *
-    //   logger *
-    //   verboseLoggingEnabled *
-    //   mNonBeaconLeScanCallback *
-    //   manifestCheckingDisabled (no point in synchronizing this one... only used at startup)
+    // the scanning service is running in another process
+    //        BeaconManager.setDistanceModelUpdateUrl(...)
+    //        BeaconManager.setRssiFilterImplClass(...)
+    //        BeaconManager.setBeaconSimulator(...)
+    //        beaconManager.setNonBeaconLeScanCallback(...)
 
     public Bundle toBundle() {
         Bundle bundle = new Bundle();
         bundle.putSerializable(SETTINGS_DATA_KEY, this);
         return bundle;
     }
-    public static SettingsData fromBundle(Bundle bundle) {
+    public static SettingsData fromBundle(@NonNull Bundle bundle) {
         bundle.setClassLoader(Region.class.getClassLoader());
         SettingsData settingsData = null;
         if (bundle.get(SETTINGS_DATA_KEY) != null) {
@@ -52,7 +52,7 @@ public static SettingsData fromBundle(Bundle bundle) {
         return settingsData;
     }
 
-    public void apply(BeaconService scanService) {
+    public void apply(@NonNull BeaconService scanService) {
         LogManager.d(TAG, "Applying settings changes to scanner in other process");
         BeaconManager beaconManager = BeaconManager.getInstanceForApplication(scanService);
         List<BeaconParser> beaconParsers = beaconManager.getBeaconParsers();
@@ -94,7 +94,7 @@ else if (!monitoringStatus.isStatePreservationOn() &&
         Beacon.setHardwareEqualityEnforced(mHardwareEqualityEnforced);
     }
 
-    public SettingsData collect(Context context) {
+    public SettingsData collect(@NonNull Context context) {
         BeaconManager beaconManager = BeaconManager.getInstanceForApplication(context);
         mBeaconParsers = new ArrayList<>(beaconManager.getBeaconParsers());
         mRegionStatePersistenceEnabled = beaconManager.isRegionStatePersistenceEnabled();
diff --git a/src/main/java/org/altbeacon/beacon/service/StartRMData.java b/src/main/java/org/altbeacon/beacon/service/StartRMData.java
index ab7a58f5..1fa8a6d6 100644
--- a/src/main/java/org/altbeacon/beacon/service/StartRMData.java
+++ b/src/main/java/org/altbeacon/beacon/service/StartRMData.java
@@ -26,11 +26,18 @@
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.support.annotation.NonNull;
 
 import org.altbeacon.beacon.Region;
 
 import java.io.Serializable;
 
+/**
+ *
+ * Internal class used to transfer ranging and monitoring data between the BeaconService and client
+ *
+ * @hide
+ */
 public class StartRMData implements Serializable, Parcelable {
     private static final String SCAN_PERIOD_KEY = "scanPeriod";
     private static final String BETWEEN_SCAN_PERIOD_KEY = "betweenScanPeriod";
@@ -47,7 +54,7 @@
     private StartRMData() {
     }
 
-    public StartRMData(Region region, String callbackPackageName) {
+    public StartRMData(@NonNull Region region, @NonNull String callbackPackageName) {
         this.mRegion = region;
         this.mCallbackPackageName = callbackPackageName;
     }
@@ -57,7 +64,7 @@ public StartRMData(long scanPeriod, long betweenScanPeriod, boolean backgroundFl
         this.mBackgroundFlag = backgroundFlag;
     }
 
-    public StartRMData(Region region, String callbackPackageName, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag) {
+    public StartRMData(@NonNull Region region, @NonNull String callbackPackageName, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag) {
         this.mScanPeriod = scanPeriod;
         this.mBetweenScanPeriod = betweenScanPeriod;
         this.mRegion = region;
@@ -118,7 +125,7 @@ public Bundle toBundle() {
         return bundle;
     }
 
-    public static StartRMData fromBundle(Bundle bundle) {
+    public static StartRMData fromBundle(@NonNull Bundle bundle) {
         bundle.setClassLoader(Region.class.getClassLoader());
         boolean valid = false;
         StartRMData data = new StartRMData();
diff --git a/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java b/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java
index 229b3d7d..f0ffb0d7 100644
--- a/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java
+++ b/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java
@@ -2,15 +2,19 @@
 
 import android.app.ActivityManager;
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 /**
  * Created by dyoung on 3/10/17.
+ *
+ * Internal class used to determine current process state in multi-process setups
+ * @hide
  */
 
 public class ProcessUtils {
     Context mContext;
 
-    public ProcessUtils(Context context) {
+    public ProcessUtils(@NonNull Context context) {
         mContext = context;
     }
 
