diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9e3cdcf0..be72e1c0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,8 @@
 Bug Fixes:
  - Fix performance problems when using identifiers 3-15 bytes caused by
    Identifier#toHexString(). (#615, David G. Young)
+ - Restore missing runningAverageRssi values  (#621, David G. Young)
+ - Fix NPE on ExtraBeaconDataTracker (#626, David G. Young)
  - Fix regression with `RunningAverageRssiFilter.setSampleExpirationMilliseconds`
    being overwritten when committing ranged beacon measurements. (#629, Aaron Kromer)
 
diff --git a/circle.yml b/circle.yml
index b7306391..74b551da 100644
--- a/circle.yml
+++ b/circle.yml
@@ -4,7 +4,6 @@ machine:
 dependencies:
   pre:
     - echo y | android update sdk --no-ui --all --filter "tools,android-26,build-tools-26.0.2,platform-tools,extra-android-m2repository,extra-google-m2repository"
-
 general:
   branches:
     ignore:
diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/src/main/java/org/altbeacon/beacon/Beacon.java
index 8e1f183f..bace60ea 100644
--- a/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -112,6 +112,16 @@
      */
     protected String mBluetoothAddress;
 
+    /**
+     * The number of rssi samples available, if known
+     */
+    private int mRssiMeasurementCount = 0;
+
+    /**
+     * The number of packets detected in the last cycle
+     */
+    private int mPacketCount = 0;
+
     /**
      * If multiple RSSI samples were available, this is the running average
      */
@@ -244,6 +254,9 @@ protected Beacon(Parcel in) {
         mBluetoothName = in.readString();
         mParserIdentifier = in.readString();
         mMultiFrameBeacon = in.readByte() != 0;
+        mRunningAverageRssi = (Double) in.readValue(null);
+        mRssiMeasurementCount = in.readInt();
+        mPacketCount = in.readInt();
     }
 
     /**
@@ -257,6 +270,8 @@ protected Beacon(Beacon otherBeacon) {
         mExtraDataFields = new ArrayList<>(otherBeacon.mExtraDataFields);
         this.mDistance = otherBeacon.mDistance;
         this.mRunningAverageRssi = otherBeacon.mRunningAverageRssi;
+        this.mPacketCount = otherBeacon.mPacketCount;
+        this.mRssiMeasurementCount = otherBeacon.mRssiMeasurementCount;
         this.mRssi = otherBeacon.mRssi;
         this.mTxPower = otherBeacon.mTxPower;
         this.mBluetoothAddress = otherBeacon.mBluetoothAddress;
@@ -275,6 +290,38 @@ protected Beacon() {
         mExtraDataFields = new ArrayList<Long>(1);
     }
 
+
+    /**
+     * Sets the measurement count that went into the rssi sample
+     * @param rssiMeasurementCount
+     */
+    public void setRssiMeasurementCount(int rssiMeasurementCount) {
+        mRssiMeasurementCount = rssiMeasurementCount;
+    }
+
+    /**
+     * Returns the number of packet detections in the last ranging cycle
+     */
+    public int getPacketCount() {
+        return mPacketCount;
+    }
+
+    /**
+     * Sets the packet detections in the last ranging cycle
+     * @param packetCount
+     */
+    public void setPacketCount(int packetCount) {
+        mPacketCount = packetCount;
+    }
+
+    /**
+     * Returns the number of packet detections that went in to the runningAverageRssi, if known.
+     * If not known or inapplicable for the rssi filter used, this is zero.
+     */
+    public int getMeasurementCount() {
+        return mRssiMeasurementCount;
+    }
+
     /**
      * Sets the running average rssi for use in distance calculations
      * @param rssi the running average rssi
@@ -584,6 +631,9 @@ public void writeToParcel(Parcel out, int flags) {
         out.writeString(mBluetoothName);
         out.writeString(mParserIdentifier);
         out.writeByte((byte) (mMultiFrameBeacon ? 1: 0));
+        out.writeValue(mRunningAverageRssi);
+        out.writeInt(mRssiMeasurementCount);
+        out.writeInt(mPacketCount);
     }
 
     /**
diff --git a/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java b/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java
index 20858087..78c8eea6 100644
--- a/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java
+++ b/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java
@@ -40,6 +40,9 @@ public void addMeasurement(Integer rssi) {
         LogManager.d(TAG, "armaMeasurement: %s", armaMeasurement);
     }
 
+    @Override
+    public int getMeasurementCount() { return 0; }
+
     public boolean noMeasurementsAvailable() {
         return false;
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
index 9dbe1765..d02bef83 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
@@ -21,12 +21,14 @@
     protected long lastTrackedTimeMillis = 0;
     Beacon mBeacon;
     protected transient RssiFilter mFilter = null;
+    private int packetCount = 0;
 
     public RangedBeacon(Beacon beacon) {
         updateBeacon(beacon);
     }
 
     public void updateBeacon(Beacon beacon) {
+        packetCount += 1;
         mBeacon = beacon;
         addMeasurement(mBeacon.getRssi());
     }
@@ -48,11 +50,14 @@ public void commitMeasurements() {
          if (!getFilter().noMeasurementsAvailable()) {
              double runningAverage = getFilter().calculateRssi();
              mBeacon.setRunningAverageRssi(runningAverage);
+             mBeacon.setRssiMeasurementCount(getFilter().getMeasurementCount());
              LogManager.d(TAG, "calculated new runningAverageRssi: %s", runningAverage);
         }
         else {
             LogManager.d(TAG, "No measurements available to calculate running average");
         }
+        mBeacon.setPacketCount(packetCount);
+        packetCount = 0;
     }
 
     public void addMeasurement(Integer rssi) {
diff --git a/src/main/java/org/altbeacon/beacon/service/RssiFilter.java b/src/main/java/org/altbeacon/beacon/service/RssiFilter.java
index 57a587e8..d092c6ac 100644
--- a/src/main/java/org/altbeacon/beacon/service/RssiFilter.java
+++ b/src/main/java/org/altbeacon/beacon/service/RssiFilter.java
@@ -9,5 +9,6 @@
     public void addMeasurement(Integer rssi);
     public boolean noMeasurementsAvailable();
     public double calculateRssi();
+    public int getMeasurementCount();
 
 }
diff --git a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java b/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
index 3f45f7df..7672f3b1 100644
--- a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
+++ b/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
@@ -35,6 +35,10 @@ public boolean noMeasurementsAvailable() {
         return mMeasurements.size() == 0;
     }
 
+
+    @Override
+    public int getMeasurementCount() { return mMeasurements.size(); }
+
     @Override
     public double calculateRssi() {
         refreshMeasurements();
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index fcd01e4f..18482ffd 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -50,7 +50,7 @@
 
     @Override
     public boolean onStartJob(final JobParameters jobParameters) {
-        mScanHelper = new ScanHelper(this);
+        initialzeScanHelper();
         if (jobParameters.getJobId() == IMMEDIATE_SCAN_JOB_ID) {
             LogManager.i(TAG, "Running immediate scan job: instance is "+this);
         }
@@ -164,8 +164,8 @@ private void stopScanning() {
         LogManager.d(TAG, "Scanning stopped");
     }
 
-    // Returns true of scanning actually was started, false if it did not need to be
-    private boolean restartScanning() {
+    private void initialzeScanHelper() {
+        mScanHelper = new ScanHelper(this);
         mScanState = ScanState.restore(ScanJob.this);
         mScanState.setLastScanStartTimeMillis(System.currentTimeMillis());
         mScanHelper.setMonitoringStatus(mScanState.getMonitoringStatus());
@@ -175,10 +175,13 @@ private boolean restartScanning() {
         if (mScanHelper.getCycledScanner() == null) {
             mScanHelper.createCycledLeScanner(mScanState.getBackgroundMode(), null);
         }
+    }
+
+    // Returns true of scanning actually was started, false if it did not need to be
+    private boolean restartScanning() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             mScanHelper.stopAndroidOBackgroundScan();
         }
-
         long scanPeriod = mScanState.getBackgroundMode() ? mScanState.getBackgroundScanPeriod() : mScanState.getForegroundScanPeriod();
         long betweenScanPeriod = mScanState.getBackgroundMode() ? mScanState.getBackgroundBetweenScanPeriod() : mScanState.getForegroundBetweenScanPeriod();
         mScanHelper.getCycledScanner().setScanPeriods(scanPeriod,
