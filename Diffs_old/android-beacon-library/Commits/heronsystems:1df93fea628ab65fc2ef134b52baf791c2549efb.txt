diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 12171e37..967b1962 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -293,26 +293,6 @@ protected BeaconManager(Context context) {
         this.beaconParsers.add(new AltBeaconParser());
     }
 
-
-    public void setEnableScheduledScanJobs(boolean enabled) {
-        this.mScheduledScanJobsEnabled = enabled;
-    }
-    public boolean getBackgroundMode() {
-        return mBackgroundMode;
-    }
-    public long getBackgroundScanPeriod() {
-        return backgroundScanPeriod;
-    }
-    public long getBackgroundBetweenScanPeriod() {
-        return backgroundBetweenScanPeriod;
-    }
-    public long getForegroundScanPeriod() {
-        return foregroundScanPeriod;
-    }
-    public long getForegroundBetweenScanPeriod() {
-        return foregroundBetweenScanPeriod;
-    }
-
     /***
      * Determines if this BeaconManager instance is associated with the main application process that
      * hosts the user interface.  This is normally true unless the scanning service or another servide
@@ -513,7 +493,6 @@ public void setBackgroundMode(boolean backgroundMode) {
             }
         }
     }
-    private boolean mScheduledScanJobsEnabled = false;
     public void setEnableScheduledScanJobs(boolean enabled) {
         this.mScheduledScanJobsEnabled = enabled;
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
index b57f5faf..e19e92cf 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
@@ -64,7 +64,6 @@ public void addMeasurement(Integer rssi) {
             lastTrackedTimeMillis = SystemClock.elapsedRealtime();
             getFilter().addMeasurement(rssi);
         }
-        return mFilter;
     }
 
     //kept here for backward compatibility
