diff --git a/lib/src/main/java/org/altbeacon/beacon/Beacon.java b/lib/src/main/java/org/altbeacon/beacon/Beacon.java
index 2964376c..54ca0977 100644
--- a/lib/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/lib/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -112,6 +112,8 @@
      */
     protected int mTxPower;
 
+    protected int powerLevel;
+
     /**
      * The Bluetooth mac address
      */
@@ -394,6 +396,14 @@ public void setmAdvertismentByte(byte[] mAdvertismentByte) {
         this.mAdvertismentByte = mAdvertismentByte;
     }
 
+    public int getPowerLevel() {
+        return powerLevel;
+    }
+
+    public void setPowerLevel(int powerLevel) {
+        this.powerLevel = powerLevel;
+    }
+
     /**
      * Returns the specified identifier - 0 indexed
      * Note:  to read id1, call getIdentifier(0);
diff --git a/lib/src/main/java/org/altbeacon/beacon/BeaconParser.java b/lib/src/main/java/org/altbeacon/beacon/BeaconParser.java
index 190091a5..caa85e48 100644
--- a/lib/src/main/java/org/altbeacon/beacon/BeaconParser.java
+++ b/lib/src/main/java/org/altbeacon/beacon/BeaconParser.java
@@ -7,6 +7,7 @@
 
 import com.android.scanner.ScanBLERecord;
 import com.android.scanner.ScanBLEResult;
+import com.sensoro.beacon.kit.constants.TransmitPower;
 
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.bluetooth.BleAdvertisement;
@@ -86,8 +87,7 @@
     protected int[] mHardwareAssistManufacturers = new int[]{0x004c};
 
     protected List<BeaconParser> extraParsers = new ArrayList<BeaconParser>();
-    private HashMap<String, byte[]> sensoroBroadcastKeyMap = new HashMap<>();
-
+    private final HashMap<String, byte[]> sensoroBroadcastKeyMap = this.generateSensoroKey();
 
     /**
      * Makes a new BeaconParser.  Should normally be immediately followed by a call to #setLayout
@@ -624,8 +624,6 @@ protected Beacon fromScanData(byte[] bytesToProcess, int rssi, BluetoothDevice d
     }
 
     public Beacon parseSensoroBeacon(Beacon beacon, BluetoothDevice device) {
-        addSensoroKey();
-
         if (this.sensoroBroadcastKeyMap.isEmpty()) {
             return beacon;
         }
@@ -637,6 +635,8 @@ public Beacon parseSensoroBeacon(Beacon beacon, BluetoothDevice device) {
         if (e781 != null) {
             beacon.batteryLevel = e781.batteryLevel;
             beacon.temperature = e781.temperature;
+            beacon.mTxPower = e781.measuredPower;
+            beacon.powerLevel = powerLevelToInt(e781.transmitPower);
         }
 
         this.sensoroBroadcastKeyMap.clear();
@@ -644,13 +644,46 @@ public Beacon parseSensoroBeacon(Beacon beacon, BluetoothDevice device) {
         return beacon;
     }
 
-    private void addSensoroKey() {
+    private Integer powerLevelToInt(TransmitPower transmitPower) {
+        switch(transmitPower) {
+            case LEVEL0:
+                return 0;
+            case LEVEL1:
+                return 1;
+            case LEVEL2:
+                return 2;
+            case LEVEL3:
+                return 3;
+            case LEVEL4:
+                return 4;
+            case LEVEL5:
+                return 5;
+            case LEVEL6:
+                return 6;
+            case LEVEL7:
+                return 7;
+            case LEVEL8:
+                return 8;
+            case LEVEL9:
+                return 9;
+            case LEVEL10:
+                return 10;
+            case LEVEL11:
+                return 11;
+            default:
+                return -1;
+        }
+    }
+
+    private HashMap<String, byte[]> generateSensoroKey() {
+        HashMap<String, byte[]> sensoroBroadcastKeyMap = new HashMap<>();
+
         String secret = SENSORO_BROADCAST_KEY.substring(0, 28);
         byte[] secretBytes = this.hexToByte(secret);
         String keyId = SENSORO_BROADCAST_KEY.substring(28, 32);
-        if (this.sensoroBroadcastKeyMap != null) {
-            this.sensoroBroadcastKeyMap.put(keyId, secretBytes);
-        }
+        sensoroBroadcastKeyMap.put(keyId, secretBytes);
+
+        return sensoroBroadcastKeyMap;
     }
 
     private byte[] hexToByte(String hexString) {
