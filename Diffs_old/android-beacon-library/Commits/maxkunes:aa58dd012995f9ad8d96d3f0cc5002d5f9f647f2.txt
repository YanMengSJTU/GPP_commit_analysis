diff --git a/lib/src/main/java/org/altbeacon/beacon/Beacon.java b/lib/src/main/java/org/altbeacon/beacon/Beacon.java
index f46e9edc..65755c93 100644
--- a/lib/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/lib/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -72,6 +72,7 @@
 
     protected static DistanceCalculator sDistanceCalculator = null;
 
+    public byte[] scanRecord = null;
     /**
      * The a list of the multi-part identifiers of the beacon.  Together, these identifiers signify
      * a unique beacon.  The identifiers are ordered by significance for the purpose of grouping
diff --git a/lib/src/main/java/org/altbeacon/beacon/BeaconManager.java b/lib/src/main/java/org/altbeacon/beacon/BeaconManager.java
index ea834c98..7f6a2afa 100644
--- a/lib/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/lib/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -58,6 +58,7 @@
 import org.altbeacon.beacon.simulator.BeaconSimulator;
 import org.altbeacon.beacon.utils.ProcessUtils;
 
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -65,10 +66,12 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.function.Consumer;
 
 import org.altbeacon.beacon.service.ScanJob;
 import org.altbeacon.beacon.service.ScanState;
@@ -125,10 +128,10 @@
     private static final String TAG = "BeaconManager";
 
     @NonNull
-    private final Context mContext;
+    public Context mContext;
 
     @Nullable
-    protected static volatile BeaconManager sInstance = null;
+    public static volatile BeaconManager sInstance = null;
 
     @NonNull
     private final ConcurrentMap<BeaconConsumer, ConsumerInfo> consumers = new ConcurrentHashMap<>();
@@ -272,6 +275,10 @@ public void setBackgroundBetweenScanPeriod(long p) {
         }
     }
 
+    public void onBeaconAdvert(Beacon beacon) {
+
+    }
+
     /**
      * Set region exit period in milliseconds
      *
diff --git a/lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java b/lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
index ac91dcae..dfa1a11c 100644
--- a/lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
@@ -22,6 +22,7 @@
 import android.support.annotation.RestrictTo;
 import android.support.annotation.RestrictTo.Scope;
 
+import org.altbeacon.beacon.AltBeacon;
 import org.altbeacon.beacon.Beacon;
 import org.altbeacon.beacon.BeaconManager;
 import org.altbeacon.beacon.BeaconParser;
@@ -43,6 +44,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;
@@ -338,8 +340,11 @@ private void processBeaconFromScan(@NonNull Beacon beacon) {
             }
         } else {
 
+            mBeaconManager.onBeaconAdvert(beacon);
+
             mMonitoringStatus.updateNewlyInsideInRegionsContaining(beacon);
 
+
             List<Region> matchedRegions;
             Iterator<Region> matchedRegionIterator;
             LogManager.d(TAG, "looking for ranging region matches for this beacon");
@@ -396,6 +401,9 @@ protected Void doInBackground(ScanHelper.ScanData... params) {
                 beacon = parser.fromScanData(scanData.scanRecord,
                         scanData.rssi, scanData.device);
 
+                if(beacon != null)
+                    beacon.scanRecord = scanData.scanRecord;
+
                 if (beacon != null) {
                     break;
                 }
