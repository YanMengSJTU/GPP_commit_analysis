diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index b21c3a64..7d4140f4 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -30,20 +30,11 @@
 import android.content.Intent;
 import android.content.ServiceConnection;
 import android.content.pm.PackageManager;
-import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.RemoteException;
+import android.os.*;
 
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.logging.Loggers;
-import org.altbeacon.beacon.service.BeaconService;
-import org.altbeacon.beacon.service.MonitoringStatus;
-import org.altbeacon.beacon.service.RangeState;
-import org.altbeacon.beacon.service.RangedBeacon;
-import org.altbeacon.beacon.service.RegionMonitoringState;
-import org.altbeacon.beacon.service.RunningAverageRssiFilter;
-import org.altbeacon.beacon.service.StartRMData;
+import org.altbeacon.beacon.service.*;
 import org.altbeacon.beacon.service.scanner.NonBeaconLeScanCallback;
 import org.altbeacon.beacon.simulator.BeaconSimulator;
 
@@ -602,7 +593,7 @@ public void startRangingBeaconsInRegion(Region region) throws RemoteException {
         }
         Message msg = Message.obtain(null, BeaconService.MSG_START_RANGING, 0, 0);
         StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
-        msg.obj = obj;
+        msg.setData(createBundle(obj));
         serviceMessenger.send(msg);
         synchronized (rangedRegions) {
             rangedRegions.add(region);
@@ -630,7 +621,7 @@ public void stopRangingBeaconsInRegion(Region region) throws RemoteException {
         }
         Message msg = Message.obtain(null, BeaconService.MSG_STOP_RANGING, 0, 0);
         StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
-        msg.obj = obj;
+        msg.setData(createBundle(obj));
         serviceMessenger.send(msg);
         synchronized (rangedRegions) {
             Region regionToRemove = null;
@@ -666,7 +657,7 @@ public void startMonitoringBeaconsInRegion(Region region) throws RemoteException
         LogManager.d(TAG, "Starting monitoring region "+region+" with uniqueID: "+region.getUniqueId());
         Message msg = Message.obtain(null, BeaconService.MSG_START_MONITORING, 0, 0);
         StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
-        msg.obj = obj;
+        msg.setData(createBundle(obj));
         serviceMessenger.send(msg);
         synchronized (monitoredRegions) {
             // If we are already tracking the state of this region, send a callback about it
@@ -697,7 +688,7 @@ public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException
         }
         Message msg = Message.obtain(null, BeaconService.MSG_STOP_MONITORING, 0, 0);
         StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
-        msg.obj = obj;
+        msg.setData(createBundle(obj));
         serviceMessenger.send(msg);
         synchronized (monitoredRegions) {
             Region regionToRemove = null;
@@ -730,7 +721,7 @@ public void updateScanPeriods() throws RemoteException {
         LogManager.d(TAG, "updating background flag to %s", mBackgroundMode);
         LogManager.d(TAG, "updating scan period to %s, %s", this.getScanPeriod(), this.getBetweenScanPeriod());
         StartRMData obj = new StartRMData(this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
-        msg.obj = obj;
+        msg.setData(createBundle(obj));
         serviceMessenger.send(msg);
     }
 
@@ -911,6 +902,23 @@ private long getBetweenScanPeriod() {
         }
     }
 
+    private Bundle createBundle(StartRMData startRMData) {
+        Bundle bundle = new Bundle();
+        if (startRMData == null) {
+            return bundle;
+        }
+
+        if (startRMData.getRegionData() != null) {
+            bundle.putString(ParcelKey.REGION_KEY, startRMData.getRegionData().getUniqueId());
+        }
+        bundle.putString(ParcelKey.PACKAGE_NAME, startRMData.getCallbackPackageName());
+        bundle.putLong(ParcelKey.SCAN_PERIOD, startRMData.getScanPeriod());
+        bundle.putLong(ParcelKey.BETWEEN_SCAN_PERIOD, startRMData.getBetweenScanPeriod());
+        bundle.putBoolean(ParcelKey.BACKGROUND_FLAG, startRMData.getBackgroundFlag());
+
+        return bundle;
+    }
+
     private void verifyServiceDeclaration() {
         final PackageManager packageManager = mContext.getPackageManager();
         final Intent intent = new Intent(mContext, BeaconService.class);
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index 29ba031d..353abff2 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -32,13 +32,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
-import android.os.AsyncTask;
-import android.os.Binder;
-import android.os.Build;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
+import android.os.*;
 
 import org.altbeacon.beacon.Beacon;
 import org.altbeacon.beacon.BeaconManager;
@@ -147,36 +141,60 @@ public BeaconService getService() {
         @Override
         public void handleMessage(Message msg) {
             BeaconService service = mService.get();
-            StartRMData startRMData = (StartRMData) msg.obj;
 
             if (service != null) {
                 switch (msg.what) {
                     case MSG_START_RANGING:
-                        LogManager.i(TAG, "start ranging received");
-                        service.startRangingBeaconsInRegion(startRMData.getRegionData(), new org.altbeacon.beacon.service.Callback(startRMData.getCallbackPackageName()));
-                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        break;
                     case MSG_STOP_RANGING:
-                        LogManager.i(TAG, "stop ranging received");
-                        service.stopRangingBeaconsInRegion(startRMData.getRegionData());
-                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        break;
                     case MSG_START_MONITORING:
-                        LogManager.i(TAG, "start monitoring received");
-                        service.startMonitoringBeaconsInRegion(startRMData.getRegionData(), new org.altbeacon.beacon.service.Callback(startRMData.getCallbackPackageName()));
-                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        break;
                     case MSG_STOP_MONITORING:
-                        LogManager.i(TAG, "stop monitoring received");
-                        service.stopMonitoringBeaconsInRegion(startRMData.getRegionData());
-                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        break;
                     case MSG_SET_SCAN_PERIODS:
-                        LogManager.i(TAG, "set scan intervals received");
-                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
                         break;
                     default:
                         super.handleMessage(msg);
+                        return;
+                }
+
+              Bundle bundle = msg.getData();
+              if (bundle == null) {
+                  LogManager.w(TAG, "No bundle data");
+                  return;
+              }
+              Region region = null;
+              String uniqueId = bundle.getString(ParcelKey.REGION_KEY);
+              if (uniqueId != null) {
+                  region = new Region(uniqueId, null, null, null);
+              }
+              String packageName = bundle.getString(ParcelKey.PACKAGE_NAME);
+              long scanPeriod = bundle.getLong(ParcelKey.SCAN_PERIOD);
+              long betweenScanPeriod = bundle.getLong(ParcelKey.BETWEEN_SCAN_PERIOD);
+              boolean backgroundFlag = bundle.getBoolean(ParcelKey.BACKGROUND_FLAG);
+
+                switch (msg.what) {
+                    case MSG_START_RANGING:
+                      LogManager.i(TAG, "start ranging received");
+                      service.startRangingBeaconsInRegion(region, new org.altbeacon.beacon.service.Callback(packageName));
+                      service.setScanPeriods(scanPeriod, betweenScanPeriod, backgroundFlag);
+                      break;
+                  case MSG_STOP_RANGING:
+                      LogManager.i(TAG, "stop ranging received");
+                      service.stopRangingBeaconsInRegion(region);
+                      service.setScanPeriods(scanPeriod, betweenScanPeriod, backgroundFlag);
+                      break;
+                  case MSG_START_MONITORING:
+                      LogManager.i(TAG, "start monitoring received");
+                      service.startMonitoringBeaconsInRegion(region, new org.altbeacon.beacon.service.Callback(packageName));
+                      service.setScanPeriods(scanPeriod, betweenScanPeriod, backgroundFlag);
+                      break;
+                  case MSG_STOP_MONITORING:
+                      LogManager.i(TAG, "stop monitoring received");
+                      service.stopMonitoringBeaconsInRegion(region);
+                      service.setScanPeriods(scanPeriod, betweenScanPeriod, backgroundFlag);
+                      break;
+                  case MSG_SET_SCAN_PERIODS:
+                      LogManager.i(TAG, "set scan intervals received");
+                      service.setScanPeriods(scanPeriod, betweenScanPeriod, backgroundFlag);
+                      break;
                 }
             }
         }
@@ -190,7 +208,7 @@ public void handleMessage(Message msg) {
 
     @Override
     public void onCreate() {
-        LogManager.i(TAG, "beaconService version %s is starting up", BuildConfig.VERSION_NAME);
+        LogManager.i(TAG, "beaconService version %s is starting up", "Test");
         bluetoothCrashResolver = new BluetoothCrashResolver(this);
         bluetoothCrashResolver.start();
 
diff --git a/src/main/java/org/altbeacon/beacon/service/ParcelKey.java b/src/main/java/org/altbeacon/beacon/service/ParcelKey.java
new file mode 100644
index 00000000..f579a8ae
--- /dev/null
+++ b/src/main/java/org/altbeacon/beacon/service/ParcelKey.java
@@ -0,0 +1,12 @@
+package org.altbeacon.beacon.service;
+
+/**
+ * Created by mika on 2016. 11. 4..
+ */
+public class ParcelKey {
+  public static final String REGION_KEY = "REGION_KEY";
+  public static final String PACKAGE_NAME = "PACKAGE_NAME";
+  public static final String SCAN_PERIOD = "SCAN_PERIOD";
+  public static final String BETWEEN_SCAN_PERIOD = "BETWEEN_SCAN_PERIOD";
+  public static final String BACKGROUND_FLAG = "BACKGROUND_FLAG";
+}
