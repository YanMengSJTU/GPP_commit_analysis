diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3b45e72b..59bfa073 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+### Development
+
+- Update gradle and robolectric (#805, Tony Tang)
+- Fix problem on service shutdown that leaked threads and left scanning on (#804, David G. Young)
+
 ### 2.15.4 / 2018-12-11
 
 - Fix crash on BluetoothCrashResolver (#790, Michael Porter)
diff --git a/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index a869f913..e0bf75b9 100644
--- a/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -250,7 +250,7 @@ public void onDestroy() {
         LogManager.i(TAG, "onDestroy called.  stopping scanning");
         handler.removeCallbacksAndMessages(null);
 
-        if (mScanHelper.getCycledScanner() == null) {
+        if (mScanHelper.getCycledScanner() != null) {
             mScanHelper.getCycledScanner().stop();
             mScanHelper.getCycledScanner().destroy();
         }
diff --git a/lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java b/lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
index 25ed4b6a..8fa36849 100644
--- a/lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
@@ -32,6 +32,8 @@ public void before() {
         LogManager.setLogger(Loggers.verboseLogger());
         LogManager.setVerboseLoggingEnabled(true);
         BeaconManager.setManifestCheckingDisabled(true);
+        Context context = RuntimeEnvironment.application;
+        new MonitoringStatus(context).clear();
     }
 
     @Test
@@ -80,14 +82,13 @@ public void refusesToRestoreRegionsIfTooMuchTimeHasPassedSinceSavingTest() throw
     public void allowsAccessToRegionsAfterRestore() throws Exception {
         Context context = RuntimeEnvironment.application;
         BeaconManager beaconManager = BeaconManager.getInstanceForApplication(context);
-        MonitoringStatus.getInstanceForApplication(context).clear();
-        MonitoringStatus monitoringStatus = new MonitoringStatus(context);
+        MonitoringStatus monitoringStatus = MonitoringStatus.getInstanceForApplication(context);
         for (int i = 0; i < 50; i++) {
             Region region = new Region("" + i, null, null, null);
             monitoringStatus.addRegion(region, null);
         }
         monitoringStatus.saveMonitoringStatusIfOn();
-        MonitoringStatus.getInstanceForApplication(context).restoreMonitoringStatus();
+        monitoringStatus.restoreMonitoringStatus();
         Collection<Region> regions = beaconManager.getMonitoredRegions();
         assertEquals("beaconManager should return restored regions", 50, regions.size());
     }
