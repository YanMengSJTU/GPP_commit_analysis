diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 0c428657..df8deb40 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -235,7 +235,8 @@ public void setBackgroundBetweenScanPeriod(long p) {
     }
 
     public void setBackgroundRangeUpdatePeriod(long p) {
-        foregroundRangeMidScan = true;
+
+        backgroundRangeMidScan = true;
         backgroundRangeUpdatePeriod = p;
     }
 
@@ -245,7 +246,7 @@ public void setBackgroundBetweenRangeUpdatePeriod(long p) {
 
     public void setForegroundRangeUpdatePeriod(long p) {
 
-        backgroundRangeMidScan = true;
+        foregroundRangeMidScan = true;
         foregroundRangeUpdatePeriod = p;
     }
 
@@ -730,7 +731,13 @@ public void startMonitoringBeaconsInRegion(Region region) throws RemoteException
         }
         LogManager.d(TAG, "Starting monitoring region "+region+" with uniqueID: "+region.getUniqueId());
         Message msg = Message.obtain(null, BeaconService.MSG_START_MONITORING, 0, 0);
-        StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        StartRMData obj = null;
+        if (this.isRangeUpdateMidCycle()) {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        }
+        else {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
+        }
         msg.obj = obj;
         serviceMessenger.send(msg);
         this.requestStateForRegion(region);
