diff --git a/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java b/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java
index 303efdd4..7d689f09 100644
--- a/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java
+++ b/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java
@@ -1,5 +1,8 @@
 package org.altbeacon.beacon.service;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import org.altbeacon.beacon.Beacon;
 
 import java.io.Serializable;
@@ -12,11 +15,17 @@
  */
 public class ExtraDataBeaconTracker implements Serializable {
     private static final String TAG = "BeaconTracker";
-    // This is a lookup table to find tracked beacons by the calculated beacon key
-    private HashMap<String,HashMap<Integer,Beacon>> mBeaconsByKey = new HashMap<String,HashMap<Integer,Beacon>>();
 
-    private boolean matchBeaconsByServiceUUID = true;
+    /**
+     * This is a lookup table to find tracked beacons by the calculated beacon key
+     */
+    @NonNull
+    private final HashMap<String,HashMap<Integer,Beacon>> mBeaconsByKey = new HashMap<>();
+
+    private final boolean matchBeaconsByServiceUUID;
+
     public ExtraDataBeaconTracker() {
+        this(true);
     }
 
     public ExtraDataBeaconTracker(boolean matchBeaconsByServiceUUID) {
@@ -25,12 +34,10 @@ public ExtraDataBeaconTracker(boolean matchBeaconsByServiceUUID) {
 
     /**
      * Tracks a beacon. For Gatt-based beacons, returns a merged copy of fields from multiple
-     * frames.  Returns null when passed a Gatt-based beacon that has is only extra beacon data.
-     *
-     * @param beacon
-     * @return
+     * frames. Returns null when passed a Gatt-based beacon that has is only extra beacon data.
      */
-    public synchronized Beacon track(Beacon beacon) {
+    @Nullable
+    public synchronized Beacon track(@NonNull Beacon beacon) {
         Beacon trackedBeacon = null;
         if (beacon.isMultiFrameBeacon() || beacon.getServiceUuid() != -1) {
             trackedBeacon = trackGattBeacon(beacon);
@@ -41,8 +48,11 @@ public synchronized Beacon track(Beacon beacon) {
         return trackedBeacon;
     }
 
-    // The following code is for dealing with merging data fields in beacons
-    private Beacon trackGattBeacon(Beacon beacon) {
+    /**
+     * The following code is for dealing with merging data fields in beacons
+     */
+    @Nullable
+    private Beacon trackGattBeacon(@NonNull Beacon beacon) {
         Beacon trackedBeacon = null;
         HashMap<Integer,Beacon> matchingTrackedBeacons = mBeaconsByKey.get(getBeaconKey(beacon));
         if (matchingTrackedBeacons != null) {
@@ -68,15 +78,15 @@ private Beacon trackGattBeacon(Beacon beacon) {
         return trackedBeacon;
     }
 
-    private void updateTrackingHashes(Beacon trackedBeacon, HashMap<Integer,Beacon> matchingTrackedBeacons) {
+    private void updateTrackingHashes(@NonNull Beacon trackedBeacon, @Nullable HashMap<Integer,Beacon> matchingTrackedBeacons) {
         if (matchingTrackedBeacons == null) {
-            matchingTrackedBeacons = new HashMap<Integer,Beacon>();
+            matchingTrackedBeacons = new HashMap<>();
         }
         matchingTrackedBeacons.put(trackedBeacon.hashCode(), trackedBeacon);
         mBeaconsByKey.put(getBeaconKey(trackedBeacon), matchingTrackedBeacons);
     }
 
-    private String getBeaconKey(Beacon beacon) {
+    private String getBeaconKey(@NonNull Beacon beacon) {
         if (matchBeaconsByServiceUUID) {
             return beacon.getBluetoothAddress() + beacon.getServiceUuid();
         } else {
