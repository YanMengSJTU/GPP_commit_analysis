diff --git a/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java b/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java
index f375e2c9..44b6c740 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java
@@ -23,6 +23,10 @@
  */
 package org.altbeacon.beacon;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 import org.altbeacon.beacon.service.MonitoringData;
 import org.altbeacon.beacon.service.RangingData;
 
@@ -64,6 +68,11 @@ protected void onHandleIntent(Intent intent) {
             java.util.Collection<Beacon> beacons = rangingData.getBeacons();
 			if (notifier != null) {
 				notifier.didRangeBeaconsInRegion(beacons, rangingData.getRegion());
+				if(beacons.size() > 0) {
+					Collections.sort((List<Beacon>)beacons, new Utils.BeaconProximityComparator());
+					Beacon beacon = (Beacon) beacons.iterator().next();
+					notifier.didRangeNearestBeaconInRegion(beacon, rangingData.getRegion());
+				}
 			}
             else {
                 BeaconManager.logDebug(TAG, "but ranging notifier is null, so we're dropping it.");
diff --git a/src/main/java/org/altbeacon/beacon/RangeNotifier.java b/src/main/java/org/altbeacon/beacon/RangeNotifier.java
index ecbbaf18..90c94d82 100644
--- a/src/main/java/org/altbeacon/beacon/RangeNotifier.java
+++ b/src/main/java/org/altbeacon/beacon/RangeNotifier.java
@@ -42,4 +42,13 @@
 	 * @param region the <code>Region</code> object that defines the criteria for the ranged beacons
 	 */
 	public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region);
+	
+	/**
+	 * Similar to didRangeBeaconsInRegion
+	 * @see RangeNotifier#didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region)
+	 * Returns information about the nearest Beacon in Region.
+	 * @param beacon a <code>Beacon<code> object representing the nearest beacon that has been seen
+	 * @param region the <code>Region</code> object that defines the criteria for the ranged beacon
+	 */
+	public void didRangeNearestBeaconInRegion(Beacon beacon, Region region);
 }
diff --git a/src/main/java/org/altbeacon/beacon/Utils.java b/src/main/java/org/altbeacon/beacon/Utils.java
new file mode 100644
index 00000000..dbc9707e
--- /dev/null
+++ b/src/main/java/org/altbeacon/beacon/Utils.java
@@ -0,0 +1,32 @@
+/**
+ * 
+ * Metropolitano de Tenerife S.A.
+ * http://www.metrotenerife.com/
+ * 
+ */
+package org.altbeacon.beacon;
+
+import java.util.Comparator;
+
+/**
+ * The <code>Utils</code> class is used for utility classes and methods.
+ */
+public final class Utils {
+
+	private static final String TAG = "Utils";
+	
+	private Utils() { }
+	
+	/**
+	 * This class defines a way of comparing two beacons using their relative 
+	 * distance to the central device (e.g., mobile phone).
+	 */
+	public static class BeaconProximityComparator implements Comparator<Beacon> {
+		@Override
+		public int compare(Beacon b1, Beacon b2) {
+			if(b1.getDistance() < b2.getDistance()) return -1;
+			if(b1.getDistance() > b2.getDistance()) return 1;
+			return 0;
+		}
+	}
+}
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index 16ae3c51..34b9b7f6 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -200,7 +200,7 @@ public boolean onUnbind(Intent intent) {
 
     @Override
     public void onCreate() {
-        Log.i(TAG, "beaconService version "+ BuildConfig.VERSION_NAME+" is starting up");
+        //Log.i(TAG, "beaconService version "+ BuildConfig.VERSION_NAME+" is starting up");
         getBluetoothAdapter();
         bluetoothCrashResolver = new BluetoothCrashResolver(this);
         bluetoothCrashResolver.start();
