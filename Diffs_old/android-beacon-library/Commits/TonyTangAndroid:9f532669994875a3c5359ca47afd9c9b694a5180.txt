diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index ea00e949..8cdff851 100755
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -15,7 +15,7 @@
         android:theme="@style/AppTheme"
         tools:ignore="AllowBackup,GoogleAppIndexingWarning">
         <activity
-            android:name="org.altbeacon.beaconreference.MonitoringActivity"
+            android:name="org.altbeacon.beaconreference.MonitorSimulatedBeaconActivity"
             android:label="@string/app_name">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN"/>
diff --git a/build.gradle b/build.gradle
index ceead8f5..08e87900 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,6 +5,7 @@ buildscript {
     }
 
     dependencies {
+        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
         classpath 'com.android.tools.build:gradle:3.2.1'
         //noinspection GradleDependency
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
diff --git a/settings.gradle b/settings.gradle
index c03c8517..901a2d73 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,5 @@
 if (enableLib == 'true') {
     include ':lib'
 }
-include ':simulator'
\ No newline at end of file
+include ':simulator'
+include ':app'
\ No newline at end of file
diff --git a/simulator/build.gradle b/simulator/build.gradle
index 8a2438c0..eb169f74 100755
--- a/simulator/build.gradle
+++ b/simulator/build.gradle
@@ -1,13 +1,15 @@
 apply plugin: 'com.android.application'
+apply plugin: 'com.jakewharton.hugo'
 
 android {
     compileSdkVersion 28
     buildToolsVersion '28.0.3'
 
     defaultConfig {
-        applicationId "org.altbeacon.beaconreference"
+        applicationId "org.altbeacon.beacon.demo.simulator"
         minSdkVersion 21
-        targetSdkVersion 28
+        //noinspection ExpiredTargetSdkVersion
+        targetSdkVersion 22
     }
     buildTypes {
         release {
diff --git a/simulator/src/main/AndroidManifest.xml b/simulator/src/main/AndroidManifest.xml
index ea00e949..d713adc5 100755
--- a/simulator/src/main/AndroidManifest.xml
+++ b/simulator/src/main/AndroidManifest.xml
@@ -1,39 +1,21 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          xmlns:tools="http://schemas.android.com/tools"
-          package="org.altbeacon.beaconreference"
-          android:versionCode="1"
-          android:versionName="1.0">
-
-    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
+    xmlns:tools="http://schemas.android.com/tools"
+    package="org.altbeacon.beacon.demo.simulator">
 
     <application
-        android:name="BeaconReferenceApplication"
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
         android:theme="@style/AppTheme"
         tools:ignore="AllowBackup,GoogleAppIndexingWarning">
         <activity
-            android:name="org.altbeacon.beaconreference.MonitoringActivity"
+            android:name=".MonitorSimulatedBeaconActivity"
             android:label="@string/app_name">
             <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity
-            android:name="org.altbeacon.beaconreference.RangingActivity"
-            android:label="@string/app_name">
-        </activity>
-        <!-- uncomment the following to enable scanning for over 30 minutes on Android 7+ -->
-        <service
-            android:name="org.altbeacon.beacon.service.BeaconService"
-            tools:node="replace">
-            <meta-data
-                android:name="longScanForcingEnabled"
-                android:value="true"/>
-        </service>
     </application>
 
-</manifest>
+</manifest>
\ No newline at end of file
diff --git a/simulator/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java b/simulator/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
deleted file mode 100755
index 8e7e1af5..00000000
--- a/simulator/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package org.altbeacon.beacon;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
-
-/**
- * Created by Matt Tyler on 4/18/14.
- */
-public class TimedBeaconSimulator implements org.altbeacon.beacon.simulator.BeaconSimulator {
-
-    /*
-     * You may simulate detection of beacons by creating a class like this in your project.
-     * This is especially useful for when you are testing in an Emulator or on a device without BluetoothLE capability.
-     *
-     * Uncomment the lines in BeaconReferenceApplication starting with:
-     *     // If you wish to test beacon detection in the Android Emulator, you can use code like this:
-     * Then set USE_SIMULATED_BEACONS = true to initialize the sample code in this class.
-     * If using a Bluetooth incapable test device (i.e. Emulator), you will want to comment
-     * out the verifyBluetooth() in MonitoringActivity.java as well.
-     *
-     * Any simulated beacons will automatically be ignored when building for production.
-     */
-    public boolean USE_SIMULATED_BEACONS = true;
-    private List<Beacon> beacons;
-    private ScheduledExecutorService scheduleTaskExecutor;
-
-    /**
-     * Creates empty beacons ArrayList.
-     */
-    public TimedBeaconSimulator() {
-        beacons = new ArrayList<>();
-    }
-
-    /**
-     * Required getter method that is called regularly by the Android Beacon Library.
-     * Any beacons returned by this method will appear within your test environment immediately.
-     */
-    public List<Beacon> getBeacons() {
-        return beacons;
-    }
-
-    /**
-     * Creates simulated beacons all at once.
-     */
-    public void createBasicSimulatedBeacons() {
-        if (USE_SIMULATED_BEACONS) {
-            Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
-            Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("2").setRssi(-55).setTxPower(-55).build();
-            Beacon beacon3 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("3").setRssi(-55).setTxPower(-55).build();
-            Beacon beacon4 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("4").setRssi(-55).setTxPower(-55).build();
-            beacons.add(beacon1);
-            beacons.add(beacon2);
-            beacons.add(beacon3);
-            beacons.add(beacon4);
-
-
-        }
-    }
-
-    /**
-     * Simulates a new beacon every 10 seconds until it runs out of new ones to add.
-     */
-    public void createTimedSimulatedBeacons() {
-        if (USE_SIMULATED_BEACONS) {
-            beacons = new ArrayList<>();
-            Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
-            Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("2").setRssi(-55).setTxPower(-55).build();
-            Beacon beacon3 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("3").setRssi(-55).setTxPower(-55).build();
-            Beacon beacon4 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
-                    .setId2("1").setId3("4").setRssi(-55).setTxPower(-55).build();
-            beacons.add(beacon1);
-            beacons.add(beacon2);
-            beacons.add(beacon3);
-            beacons.add(beacon4);
-
-            final List<Beacon> finalBeacons = new ArrayList<>(beacons);
-
-            //Clearing beacons list to prevent all beacons from appearing immediately.
-            //These will be added back into the beacons list from finalBeacons later.
-            beacons.clear();
-
-            scheduleTaskExecutor = Executors.newScheduledThreadPool(5);
-
-            // This schedules an beacon to appear every 10 seconds:
-            scheduleTaskExecutor.scheduleAtFixedRate(() -> run(finalBeacons), 0, 10, TimeUnit.SECONDS);
-        }
-    }
-
-    private void run(List<Beacon> finalBeacons) {
-        try {
-            //putting a single beacon back into the beacons list.
-            if (finalBeacons.size() > beacons.size())
-                beacons.add(finalBeacons.get(beacons.size()));
-            else
-                scheduleTaskExecutor.shutdown();
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/MonitorSimulatedBeaconActivity.java b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/MonitorSimulatedBeaconActivity.java
new file mode 100755
index 00000000..56678cb1
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/MonitorSimulatedBeaconActivity.java
@@ -0,0 +1,177 @@
+package org.altbeacon.beacon.demo.simulator;
+
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothManager;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import org.altbeacon.beacon.BeaconConsumer;
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.MonitorNotifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.List;
+
+import hugo.weaving.DebugLog;
+
+@DebugLog
+public class MonitorSimulatedBeaconActivity extends AppCompatActivity
+        implements MonitorNotifier, BeaconConsumer, TimedBeaconSimulator.Callback {
+
+    private static final int REQUEST_TURN_ON_BLUETOOTH = 1;
+    private TextView tv_log;
+    private Button btn_simulate;
+    private Button btn_enable_bluetooth;
+    private TimedBeaconSimulator timedBeaconSimulator;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_simulator);
+        tv_log = findViewById(R.id.tv_log);
+        btn_simulate = findViewById(R.id.btn_simulate);
+        btn_enable_bluetooth = findViewById(R.id.btn_enable_bluetooth);
+        initUI();
+
+    }
+
+    private void initUI() {
+        if (bluetoothAvailable()) {
+            boolean bluetoothEnabled = bluetoothEnabled();
+            initBluetoothStatus(bluetoothEnabled);
+            updateSimulatorUI(bluetoothEnabled);
+        } else {
+            btn_simulate.setEnabled(false);
+            btn_enable_bluetooth.setEnabled(false);
+            tv_log.setText(R.string.bluetooth_not_available);
+        }
+
+    }
+
+    private boolean bluetoothAvailable() {
+        return BluetoothAdapter.getDefaultAdapter() != null;
+    }
+
+    private void updateSimulatorUI(boolean bluetoothEnabled) {
+        btn_simulate.setEnabled(bluetoothEnabled);
+        if (bluetoothEnabled) {
+            initSimulator();
+            scanBeacon();
+        }
+    }
+
+    private void initBluetoothStatus(boolean bluetoothEnabled) {
+        if (bluetoothEnabled) {
+            btn_enable_bluetooth.setText(R.string.bluetooth_enabled);
+            btn_enable_bluetooth.setEnabled(false);
+            btn_enable_bluetooth.setVisibility(View.INVISIBLE);
+        } else {
+            btn_enable_bluetooth.setText(R.string.enable_bluetooth);
+            btn_enable_bluetooth.setEnabled(true);
+            btn_enable_bluetooth.setVisibility(View.INVISIBLE);
+        }
+
+    }
+
+    private boolean bluetoothEnabled() {
+        BluetoothManager manager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
+        BluetoothAdapter bluetoothAdapter = manager.getAdapter();
+        return bluetoothAdapter.isEnabled();
+    }
+
+    private void enableBluetooth() {
+        Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
+        startActivityForResult(enableBtIntent, REQUEST_TURN_ON_BLUETOOTH);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch (requestCode) {
+            case REQUEST_TURN_ON_BLUETOOTH:
+                updateSimulatorUI(bluetoothEnabled());
+                break;
+            default:
+                super.onActivityResult(requestCode, resultCode, data);
+                break;
+        }
+    }
+
+
+    private void scanBeacon() {
+        BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+        beaconManager.addMonitorNotifier(this);
+        beaconManager.bind(this);
+    }
+
+    public void append(final String log) {
+        runOnUiThread(() -> tv_log.append(log));
+    }
+
+    public void toggleSimulate(View view) {
+        append("\nBegin to simulate beacon signal.\n");
+        begin();
+        btn_simulate.setEnabled(false);
+    }
+
+    private void begin() {
+        timedBeaconSimulator.createTimedSimulatedBeacons();
+    }
+
+    private void initSimulator() {
+        BeaconManager.setBeaconSimulator(new TimedBeaconSimulator(this));
+        timedBeaconSimulator = (TimedBeaconSimulator) BeaconManager.getBeaconSimulator();
+    }
+
+    @Override
+    public void didEnterRegion(Region region) {
+        append("enter:" + region.getUniqueId() + "\n");
+    }
+
+    @Override
+    public void didExitRegion(Region region) {
+        append("exit:" + region.getUniqueId() + "\n");
+    }
+
+    @Override
+    public void didDetermineStateForRegion(int state, Region region) {
+
+    }
+
+    @Override
+    public void onBeaconServiceConnect() {
+        registerBeaconToBeMonitored(UuidProvider.regionToBeSimulated());
+    }
+
+    private void registerBeaconToBeMonitored(List<String> beacons) {
+        try {
+            BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+            for (String beacon : beacons) {
+                beaconManager.startMonitoringBeaconsInRegion(UuidMapper.constructRegion(beacon));
+            }
+            tv_log.setText(R.string.ready_to_simulate_beacon);
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+
+    }
+
+    public void enableBluetooth(View view) {
+        enableBluetooth();
+    }
+
+    @Override
+    public void onShutdown() {
+        btn_simulate.post(this::updateUI);
+    }
+
+    private void updateUI() {
+        append(getString(R.string.pending_exit_event));
+    }
+}
diff --git a/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/TimedBeaconSimulator.java b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/TimedBeaconSimulator.java
new file mode 100755
index 00000000..6b637c4c
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/TimedBeaconSimulator.java
@@ -0,0 +1,69 @@
+package org.altbeacon.beacon.demo.simulator;
+
+import org.altbeacon.beacon.Beacon;
+import org.altbeacon.beacon.simulator.BeaconSimulator;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+public class TimedBeaconSimulator implements BeaconSimulator {
+
+    private final Callback callback;
+    private List<Beacon> beacons;
+    private ScheduledExecutorService scheduleTaskExecutor;
+
+    public TimedBeaconSimulator(Callback callback) {
+        this.callback = callback;
+        beacons = new ArrayList<>();
+    }
+
+
+    public List<Beacon> getBeacons() {
+        return beacons;
+    }
+
+    public void createTimedSimulatedBeacons() {
+
+        final List<Beacon> finalBeacons = new ArrayList<>(beaconToBeSimulated());
+        scheduleTaskExecutor = Executors.newScheduledThreadPool(5);
+        scheduleTaskExecutor.scheduleAtFixedRate(() -> run(finalBeacons), 1, 3, TimeUnit.SECONDS);
+
+    }
+
+    private List<Beacon> beaconToBeSimulated() {
+        List<Beacon> beacons = new ArrayList<>();
+        for (String uuid : UuidProvider.regionToBeSimulated()) {
+            Beacon beacon = UuidMapper.toBeacon(uuid);
+            beacons.add(beacon);
+        }
+        return beacons;
+    }
+
+    private void run(List<Beacon> finalBeacons) {
+        int index = beacons.size();
+        if (finalBeacons.size() > index) {
+            Beacon beacon = finalBeacons.get(index);
+            add(beacon);
+        } else {
+            shutdown();
+        }
+    }
+
+    public void shutdown() {
+        beacons.clear();
+        scheduleTaskExecutor.shutdown();
+        callback.onShutdown();
+    }
+
+    private void add(Beacon beacon) {
+        beacons.add(beacon);
+    }
+
+    public interface Callback {
+        void onShutdown();
+    }
+
+}
\ No newline at end of file
diff --git a/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/UuidMapper.java b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/UuidMapper.java
new file mode 100755
index 00000000..e75cdaa5
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/UuidMapper.java
@@ -0,0 +1,30 @@
+package org.altbeacon.beacon.demo.simulator;
+
+import org.altbeacon.beacon.AltBeacon;
+import org.altbeacon.beacon.Beacon;
+import org.altbeacon.beacon.Identifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UuidMapper {
+
+
+    public static Region constructRegion(String uuid) {
+        String[] parts = uuid.split(":");
+        List<Identifier> identifierList = new ArrayList<>();
+        identifierList.add(Identifier.parse(parts[0]));
+        identifierList.add(Identifier.parse(parts[1]));
+        identifierList.add(Identifier.parse(parts[2]));
+        return new Region(uuid, identifierList);
+    }
+
+    public static Beacon toBeacon(String uuid) {
+        String[] parts = uuid.split(":");
+        return new AltBeacon.Builder()
+                .setId1(parts[0]).setId2(parts[1]).setId3(parts[2])
+                .setRssi(-55).setTxPower(-55)
+                .build();
+    }
+}
\ No newline at end of file
diff --git a/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/UuidProvider.java b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/UuidProvider.java
new file mode 100755
index 00000000..5441d956
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beacon/demo/simulator/UuidProvider.java
@@ -0,0 +1,16 @@
+package org.altbeacon.beacon.demo.simulator;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UuidProvider {
+
+    public static List<String> regionToBeSimulated() {
+        List<String> result = new ArrayList<>();
+        result.add("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A:1:1");
+        result.add("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A:1:2");
+        result.add("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A:1:3");
+        result.add("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A:1:4");
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/simulator/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java b/simulator/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
deleted file mode 100755
index 24279618..00000000
--- a/simulator/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
+++ /dev/null
@@ -1,194 +0,0 @@
-package org.altbeacon.beaconreference;
-
-import android.app.Application;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.app.TaskStackBuilder;
-import android.content.Context;
-import android.content.Intent;
-import android.support.v4.app.NotificationCompat;
-import android.util.Log;
-
-import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.Region;
-import org.altbeacon.beacon.TimedBeaconSimulator;
-import org.altbeacon.beacon.powersave.BackgroundPowerSaver;
-import org.altbeacon.beacon.startup.BootstrapNotifier;
-import org.altbeacon.beacon.startup.RegionBootstrap;
-
-/**
- * Created by dyoung on 12/13/13.
- */
-public class BeaconReferenceApplication extends Application implements BootstrapNotifier {
-    private static final String TAG = "BeaconReferenceApp";
-    private RegionBootstrap regionBootstrap;
-    @SuppressWarnings("FieldCanBeLocal")
-    private BackgroundPowerSaver backgroundPowerSaver;
-    private boolean haveDetectedBeaconsSinceBoot = false;
-    private MonitoringActivity monitoringActivity = null;
-    private String cumulativeLog = "";
-
-    public void onCreate() {
-        super.onCreate();
-        BeaconManager beaconManager = org.altbeacon.beacon.BeaconManager.getInstanceForApplication(this);
-
-        // By default the AndroidBeaconLibrary will only find AltBeacons.  If you wish to make it
-        // find a different type of beacon, you must specify the byte layout for that beacon's
-        // advertisement with a line like below.  The example shows how to find a beacon with the
-        // same byte layout as AltBeacon but with a beaconTypeCode of 0xaabb.  To find the proper
-        // layout expression for other beacon types, do a web search for "setBeaconLayout"
-        // including the quotes.
-        //
-        //beaconManager.getBeaconParsers().clear();
-        //beaconManager.getBeaconParsers().add(new BeaconParser().
-        //        setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"));
-
-        BeaconManager.setDebug(true);
-
-
-        // Uncomment the code below to use a foreground service to scan for beacons. This unlocks
-        // the ability to continually scan for long periods of time in the background on Andorid 8+
-        // in exchange for showing an icon at the top of the screen and a always-on notification to
-        // communicate to users that your app is using resources in the background.
-        //
-
-        /*
-        Notification.Builder builder = new Notification.Builder(this);
-        builder.setSmallIcon(R.drawable.ic_launcher);
-        builder.setContentTitle("Scanning for Beacons");
-        Intent intent = new Intent(this, MonitoringActivity.class);
-        PendingIntent pendingIntent = PendingIntent.getActivity(
-                this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT
-        );
-        builder.setContentIntent(pendingIntent);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            NotificationChannel channel = new NotificationChannel("My Notification Channel ID",
-                    "My Notification Name", NotificationManager.IMPORTANCE_DEFAULT);
-            channel.setDescription("My Notification Channel Description");
-            NotificationManager notificationManager = (NotificationManager) getSystemService(
-                    Context.NOTIFICATION_SERVICE);
-            notificationManager.createNotificationChannel(channel);
-            builder.setChannelId(channel.getId());
-        }
-        beaconManager.enableForegroundServiceScanning(builder.build(), 456);
-
-        // For the above foreground scanning service to be useful, you need to disable
-        // JobScheduler-based scans (used on Android 8+) and set a fast background scan
-        // cycle that would otherwise be disallowed by the operating system.
-        //
-        beaconManager.setEnableScheduledScanJobs(false);
-        beaconManager.setBackgroundBetweenScanPeriod(0);
-        beaconManager.setBackgroundScanPeriod(1100);
-        */
-
-        Log.d(TAG, "setting up background monitoring for beacons and power saving");
-        // wake up the app when a beacon is seen
-        Region region = new Region("backgroundRegion",
-                null, null, null);
-        regionBootstrap = new RegionBootstrap(this, region);
-
-        // simply constructing this class and holding a reference to it in your custom Application
-        // class will automatically cause the BeaconLibrary to save battery whenever the application
-        // is not visible.  This reduces bluetooth power usage by about 60%
-        backgroundPowerSaver = new BackgroundPowerSaver(this);
-
-        // If you wish to test beacon detection in the Android Emulator, you can use code like this:
-        BeaconManager.setBeaconSimulator(new TimedBeaconSimulator());
-        TimedBeaconSimulator timedBeaconSimulator = (TimedBeaconSimulator) BeaconManager.getBeaconSimulator();
-        assert timedBeaconSimulator != null;
-        timedBeaconSimulator.createTimedSimulatedBeacons();
-    }
-
-    public void disableMonitoring() {
-        if (regionBootstrap != null) {
-            regionBootstrap.disable();
-            regionBootstrap = null;
-        }
-    }
-
-    public void enableMonitoring() {
-        Region region = new Region("backgroundRegion",
-                null, null, null);
-        regionBootstrap = new RegionBootstrap(this, region);
-    }
-
-
-    @Override
-    public void didEnterRegion(Region arg0) {
-        // In this example, this class sends a notification to the user whenever a Beacon
-        // matching a Region (defined above) are first seen.
-        Log.d(TAG, "did enter region.");
-        if (!haveDetectedBeaconsSinceBoot) {
-            Log.d(TAG, "auto launching MainActivity");
-
-            // The very first time since boot that we detect an beacon, we launch the
-            // MainActivity
-            Intent intent = new Intent(this, MonitoringActivity.class);
-            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-            // Important:  make sure to add android:launchMode="singleInstance" in the manifest
-            // to keep multiple copies of this activity from getting created if the user has
-            // already manually launched the app.
-            this.startActivity(intent);
-            haveDetectedBeaconsSinceBoot = true;
-        } else {
-            if (monitoringActivity != null) {
-                // If the Monitoring Activity is visible, we log info about the beacons we have
-                // seen on its display
-                logToDisplay("I see a beacon again");
-            } else {
-                // If we have already seen beacons before, but the monitoring activity is not in
-                // the foreground, we send a notification to the user on subsequent detections.
-                Log.d(TAG, "Sending notification.");
-                sendNotification();
-            }
-        }
-
-
-    }
-
-    @Override
-    public void didExitRegion(Region region) {
-        logToDisplay("I no longer see a beacon.");
-    }
-
-    @Override
-    public void didDetermineStateForRegion(int state, Region region) {
-        logToDisplay("Current region state is: " + (state == 1 ? "INSIDE" : "OUTSIDE (" + state + ")"));
-    }
-
-    private void sendNotification() {
-        NotificationCompat.Builder builder =
-                new NotificationCompat.Builder(this, "beacon_channel_id")
-                        .setContentTitle("Beacon Reference Application")
-                        .setContentText("An beacon is nearby.")
-                        .setSmallIcon(R.drawable.ic_launcher);
-
-        TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
-        stackBuilder.addNextIntent(new Intent(this, MonitoringActivity.class));
-        PendingIntent resultPendingIntent =
-                stackBuilder.getPendingIntent(
-                        0,
-                        PendingIntent.FLAG_UPDATE_CURRENT
-                );
-        builder.setContentIntent(resultPendingIntent);
-        NotificationManager notificationManager =
-                (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
-        notificationManager.notify(1, builder.build());
-    }
-
-    public void setMonitoringActivity(MonitoringActivity activity) {
-        this.monitoringActivity = activity;
-    }
-
-    private void logToDisplay(String line) {
-        cumulativeLog += (line + "\n");
-        if (this.monitoringActivity != null) {
-            this.monitoringActivity.updateLog(cumulativeLog);
-        }
-    }
-
-    public String getLog() {
-        return cumulativeLog;
-    }
-
-}
diff --git a/simulator/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java b/simulator/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
deleted file mode 100755
index 5a559af9..00000000
--- a/simulator/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package org.altbeacon.beaconreference;
-
-import android.Manifest;
-import android.annotation.SuppressLint;
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-
-import org.altbeacon.beacon.BeaconManager;
-
-/**
- * @author dyoung
- * @author Matt Tyler
- */
-public class MonitoringActivity extends AppCompatActivity {
-    protected static final String TAG = "MonitoringActivity";
-    private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
-    private EditText et_log;
-
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        Log.d(TAG, "onCreate");
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_monitoring);
-        et_log = MonitoringActivity.this.findViewById(R.id.monitoringText);
-        verifyBluetooth();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-            // Android M Permission check
-            if (this.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
-                final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setTitle("This app needs location access");
-                builder.setMessage("Please grant location access so this app can detect beacons in the background.");
-                builder.setPositiveButton(android.R.string.ok, null);
-                builder.setOnDismissListener(dialog -> requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
-                        PERMISSION_REQUEST_COARSE_LOCATION));
-                builder.show();
-            }
-        }
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[],
-                                           @NonNull int[] grantResults) {
-        switch (requestCode) {
-            case PERMISSION_REQUEST_COARSE_LOCATION: {
-                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-                    Log.d(TAG, "coarse location permission granted");
-                } else {
-                    final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                    builder.setTitle("Functionality limited");
-                    builder.setMessage("Since location access has not been granted, this app will not be able to discover beacons when in the background.");
-                    builder.setPositiveButton(android.R.string.ok, null);
-                    builder.show();
-                }
-            }
-        }
-    }
-
-    public void onRangingClicked(View view) {
-        Intent myIntent = new Intent(this, RangingActivity.class);
-        this.startActivity(myIntent);
-    }
-
-    @SuppressLint("SetTextI18n")
-    public void onEnableClicked(View view) {
-        BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
-        if (BeaconManager.getInstanceForApplication(this).getMonitoredRegions().size() > 0) {
-            application.disableMonitoring();
-            ((Button) findViewById(R.id.enableButton)).setText("Re-Enable Monitoring");
-        } else {
-            ((Button) findViewById(R.id.enableButton)).setText("Disable Monitoring");
-            application.enableMonitoring();
-        }
-
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
-        application.setMonitoringActivity(this);
-        updateLog(application.getLog());
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        ((BeaconReferenceApplication) this.getApplicationContext()).setMonitoringActivity(null);
-    }
-
-    private void verifyBluetooth() {
-
-        try {
-            if (!BeaconManager.getInstanceForApplication(this).checkAvailability()) {
-                final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setTitle("Bluetooth not enabled");
-                builder.setMessage("Please enable bluetooth in settings and restart this application.");
-                builder.setPositiveButton(android.R.string.ok, null);
-                builder.show();
-            }
-        } catch (RuntimeException e) {
-            final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-            builder.setTitle("Bluetooth LE not available");
-            builder.setMessage("Sorry, this device does not support Bluetooth LE.");
-            builder.setPositiveButton(android.R.string.ok, null);
-            builder.show();
-
-        }
-
-    }
-
-    public void updateLog(final String log) {
-        runOnUiThread(() -> et_log.setText(log));
-    }
-
-}
diff --git a/simulator/src/main/java/org/altbeacon/beaconreference/RangingActivity.java b/simulator/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
deleted file mode 100755
index a4c82a59..00000000
--- a/simulator/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package org.altbeacon.beaconreference;
-
-import android.os.Bundle;
-import android.os.RemoteException;
-import android.util.Log;
-import android.widget.EditText;
-
-import org.altbeacon.beacon.Beacon;
-import org.altbeacon.beacon.BeaconConsumer;
-import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.RangeNotifier;
-import org.altbeacon.beacon.Region;
-
-import java.util.Collection;
-
-public class RangingActivity extends android.support.v7.app.AppCompatActivity implements BeaconConsumer {
-    protected static final String TAG = "RangingActivity";
-    private BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
-    private EditText et_log;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_ranging);
-        et_log = RangingActivity.this.findViewById(R.id.rangingText);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        beaconManager.unbind(this);
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        beaconManager.bind(this);
-    }
-
-    @Override
-    public void onBeaconServiceConnect() {
-
-        RangeNotifier rangeNotifier = (beacons, region) -> rangeNotfier(beacons);
-        try {
-            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
-            beaconManager.addRangeNotifier(rangeNotifier);
-            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
-            beaconManager.addRangeNotifier(rangeNotifier);
-        } catch (RemoteException e) {
-            Log.e(TAG, "range error", e);
-        }
-    }
-
-    private void rangeNotfier(Collection<Beacon> beacons) {
-        if (beacons.size() > 0) {
-            Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  " + beacons.size());
-            Beacon firstBeacon = beacons.iterator().next();
-            logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
-        }
-    }
-
-    private void logToDisplay(final String line) {
-        runOnUiThread(() -> et_log.append(line + "\n"));
-    }
-}
diff --git a/simulator/src/main/res/layout/activity_monitoring.xml b/simulator/src/main/res/layout/activity_monitoring.xml
deleted file mode 100755
index 59ab4045..00000000
--- a/simulator/src/main/res/layout/activity_monitoring.xml
+++ /dev/null
@@ -1,51 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                xmlns:tools="http://schemas.android.com/tools"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                tools:context=".MonitoringActivity">
-
-    <TextView
-        android:id="@+id/textView1"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentTop="true"
-        android:layout_marginTop="17dp"
-        android:text="@string/monitoring_events"
-        tools:ignore="RtlHardcoded"/>
-
-    <EditText
-        android:id="@+id/monitoringText"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:layout_below="@+id/textView1"
-        android:layout_alignParentLeft="true"
-        android:layout_marginTop="36dp"
-        android:ems="10"
-        android:gravity="left|top"
-        android:inputType="textMultiLine"
-        tools:ignore="Autofill,LabelFor,RtlHardcoded">
-
-        <requestFocus/>
-    </EditText>
-
-    <Button
-        android:id="@+id/Button01"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_below="@+id/monitoringText"
-        android:layout_alignParentLeft="true"
-        android:onClick="onRangingClicked"
-        android:text="@string/start_ranging"
-        tools:ignore="RtlHardcoded"/>
-
-    <Button
-        android:id="@+id/enableButton"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_below="@+id/monitoringText"
-        android:layout_toRightOf="@id/Button01"
-        android:onClick="onEnableClicked"
-        android:text="@string/disable_monitoring"
-        tools:ignore="RtlHardcoded"/>
-</RelativeLayout>
diff --git a/simulator/src/main/res/layout/activity_ranging.xml b/simulator/src/main/res/layout/activity_ranging.xml
deleted file mode 100755
index 5bb3e8da..00000000
--- a/simulator/src/main/res/layout/activity_ranging.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                xmlns:tools="http://schemas.android.com/tools"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                tools:context=".RangingActivity">
-
-    <EditText
-        android:id="@+id/rangingText"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentRight="true"
-        android:layout_marginTop="14dp"
-        android:ems="10"
-        android:gravity="left|top"
-        android:inputType="textMultiLine"
-        tools:ignore="Autofill,LabelFor,RtlHardcoded"/>
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/simulator/src/main/res/layout/activity_simulator.xml b/simulator/src/main/res/layout/activity_simulator.xml
new file mode 100755
index 00000000..1d333833
--- /dev/null
+++ b/simulator/src/main/res/layout/activity_simulator.xml
@@ -0,0 +1,39 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:padding="16dp">
+
+    <TextView
+        android:id="@+id/tv_log"
+        android:layout_width="wrap_content"
+        android:layout_height="0dp"
+        android:layout_weight="1" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <Button
+            android:id="@+id/btn_simulate"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="toggleSimulate"
+            android:text="@string/begin"
+            tools:ignore="ButtonStyle" />
+
+        <Button
+            android:id="@+id/btn_enable_bluetooth"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="enableBluetooth"
+            android:text="@string/enable_bluetooth"
+            tools:ignore="ButtonStyle" />
+    </LinearLayout>
+
+
+</LinearLayout>
diff --git a/simulator/src/main/res/values/strings.xml b/simulator/src/main/res/values/strings.xml
index 2ad265fe..a12c5425 100755
--- a/simulator/src/main/res/values/strings.xml
+++ b/simulator/src/main/res/values/strings.xml
@@ -1,8 +1,12 @@
 <resources>
 
-    <string name="app_name">BeaconReference</string>
-    <string name="disable_monitoring">Disable monitoring</string>
-    <string name="start_ranging">Start Ranging</string>
-    <string name="monitoring_events">Monitoring Events:</string>
+    <string name="app_name">Beacon Simulator Demo</string>
+    <string name="begin">Begin</string>
+    <string name="stop">Stop</string>
+    <string name="enable_bluetooth">Enable Bluetooth</string>
+    <string name="bluetooth_enabled">Bluetooth Enabled</string>
+    <string name="ready_to_simulate_beacon">\nUuid has been registered. It is ready to simulate the beacon signal.\n</string>
+    <string name="pending_exit_event">\n\nAll simulated beacon Enter event is emitted. It is waiting Exit event now.\n\n</string>
+    <string name="bluetooth_not_available">Bluetooth Not Available. I know it sounds ironic, but emulator does NOT support Simulator. Please use a real device.</string>
 
 </resources>
