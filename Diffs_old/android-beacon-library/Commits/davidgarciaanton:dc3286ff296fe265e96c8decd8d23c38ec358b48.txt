diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/src/main/java/org/altbeacon/beacon/Beacon.java
index 89c284c3..7d6887ab 100644
--- a/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -292,7 +292,7 @@ public Identifier getId3() {
 	public double getDistance() {
 		if (mDistance == null) {
             double bestRssiAvailable = mRssi;
-            if (mRunningAverageRssi != null) {
+            if (mRunningAverageRssi != null && !Double.isNaN(mRunningAverageRssi)) {
                 bestRssiAvailable = mRunningAverageRssi;
             }
             else {
diff --git a/src/main/java/org/altbeacon/beacon/BeaconParser.java b/src/main/java/org/altbeacon/beacon/BeaconParser.java
index aa21e170..378b4a85 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconParser.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconParser.java
@@ -287,6 +287,7 @@ protected Beacon fromScanData(byte[] scanData, int rssi, BluetoothDevice device,
         }
         else {
             BeaconManager.logDebug(TAG, "This is a recognized beacon advertisement -- "+String.format("%04x", getMatchingBeaconTypeCode())+" seen");
+            BeaconManager.logDebug(TAG, "Bytes decoded = " + bytesToHex(scanData));
         }
 
         ArrayList<Identifier> identifiers = new ArrayList<Identifier>();
diff --git a/src/main/java/org/altbeacon/beacon/service/RangeState.java b/src/main/java/org/altbeacon/beacon/service/RangeState.java
index 1429843a..d5abea31 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangeState.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangeState.java
@@ -23,8 +23,6 @@
  */
 package org.altbeacon.beacon.service;
 
-import android.util.Log;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -71,7 +69,7 @@ public void addBeacon(Beacon beacon) {
                 RangedBeacon rangedBeacon = mRangedBeacons.get(beacon);
                 if (rangedBeacon.isTracked()) {
                     rangedBeacon.commitMeasurements(); // calculates accuracy
-                    if (!rangedBeacon.noMeasurementsAvailable()) {
+                    if (!rangedBeacon.noMeasurementsAvailable() || RangedBeacon.getSampleExpirationMilliseconds() <= 0) {
                         finalizedBeacons.add(rangedBeacon.getBeacon());
                     } else {
                         BeaconManager.logDebug(TAG, "Ranged beacon " + rangedBeacon + " has no more measurements, not returning it??");
diff --git a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
index 13479206..9aadab77 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
@@ -74,7 +74,11 @@ public boolean noMeasurementsAvailable() {
 		return mMeasurements.size() == 0;
 	}
 
-	private class Measurement implements Comparable<Measurement> {
+    public static long getSampleExpirationMilliseconds() {
+        return sampleExpirationMilliseconds;
+    }
+
+    private class Measurement implements Comparable<Measurement> {
 		Integer rssi;
 		long timestamp;
 		@Override
