diff --git a/README.md b/README.md
index d396de9e..6c9f8f01 100644
--- a/README.md
+++ b/README.md
@@ -22,7 +22,15 @@ at a frequency of approximately 1Hz.
 
 ## Documentation
 
-[Javadocs are available here.](http://altbeacon.github.io/android-beacon-library/javadoc/)
+The [project website](http://altbeacon.github.io/android-beacon-library/) has [full documentation](http://altbeacon.github.io/android-beacon-library/documentation.html) including [Javadocs.](http://altbeacon.github.io/android-beacon-library/javadoc/)
+
+
+## Binary Releases
+
+You may [download binary releases here.](http://altbeacon.github.io/android-beacon-library/download.html) 
+
+
+
 
 ## How to build this Library
 
diff --git a/src/main/java/org/altbeacon/beacon/BeaconConsumer.java b/src/main/java/org/altbeacon/beacon/BeaconConsumer.java
index cbe4c238..2528b7f9 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconConsumer.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconConsumer.java
@@ -58,7 +58,7 @@
  *        	 {@literal @}Override 
  *        	public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
  *     			if (beacons.size() > 0) {
- *	      			Log.i(TAG, "The first beacon I see is about "+beacons.iterator().next().getAccuracy()+" meters away.");
+ *	      			Log.i(TAG, "The first beacon I see is about "+beacons.iterator().next().getDistance()+" meters away.");
  *     			}
  *        	}
  *  		});
diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 454991eb..e8cb9986 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -77,7 +77,7 @@
  *        	 {@literal @}Override 
  *        	public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
  *     			if (beacons.size() > 0) {
- *	      			Log.i(TAG, "The first beacon I see is about "+beacons.iterator().next().getAccuracy()+" meters away.");		
+ *	      			Log.i(TAG, "The first beacon I see is about "+beacons.iterator().next().getDistance()+" meters away.");		
  *     			}
  *        	}
  *  		});
@@ -330,11 +330,11 @@ public void setRangeNotifier(RangeNotifier notifier) {
 	}
 
 	/**
-	 * Specifies a class that should be called each time the <code>BeaconService</code> gets sees
+	 * Specifies a class that should be called each time the <code>BeaconService</code> sees
 	 * or stops seeing a Region of beacons.
      *
      * IMPORTANT:  Only one MonitorNotifier may be active for a given application.  If two different
-     * activities or services set different RangeNotifier instances, the last one set will receive
+     * activities or services set different MonitorNotifier instances, the last one set will receive
      * all the notifications.
 	 *
 	 * @see MonitorNotifier 
@@ -348,7 +348,7 @@ public void setMonitorNotifier(MonitorNotifier notifier) {
 	
 	/**
 	 * Tells the <code>BeaconService</code> to start looking for beacons that match the passed
-	 * <code>Region</code> object, and providing updates on the estimated mDistance very seconds while
+	 * <code>Region</code> object, and providing updates on the estimated mDistance every seconds while
 	 * beacons in the Region are visible.  Note that the Region's unique identifier must be retained to
 	 * later call the stopRangingBeaconsInRegion method.
 	 *  
@@ -439,7 +439,7 @@ public void startMonitoringBeaconsInRegion(Region region) throws RemoteException
 	/**
 	 * Tells the <code>BeaconService</code> to stop looking for beacons that match the passed
 	 * <code>Region</code> object.  Note that the Region's unique identifier is used to match it to
-	 * and existing monitored Region.
+	 * an existing monitored Region.
 	 *  
 	 * @see BeaconManager#setMonitorNotifier(MonitorNotifier)
 	 * @see BeaconManager#startMonitoringBeaconsInRegion(Region region)
diff --git a/src/main/java/org/altbeacon/beacon/BeaconParser.java b/src/main/java/org/altbeacon/beacon/BeaconParser.java
index d855d8e2..78028838 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconParser.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconParser.java
@@ -225,7 +225,7 @@ protected Beacon fromScanData(byte[] scanData, int rssi, BluetoothDevice device,
             return null;
         }
         else {
-            BeaconManager.logDebug(TAG, "This a recognized beacon advertisement -- "+String.format("%04x", getMatchingBeaconTypeCode())+" seen");
+            BeaconManager.logDebug(TAG, "This is a recognized beacon advertisement -- "+String.format("%04x", getMatchingBeaconTypeCode())+" seen");
         }
 
         ArrayList<Identifier> identifiers = new ArrayList<Identifier>();
diff --git a/src/main/java/org/altbeacon/beacon/Region.java b/src/main/java/org/altbeacon/beacon/Region.java
index ab36cf44..3fdc96bc 100644
--- a/src/main/java/org/altbeacon/beacon/Region.java
+++ b/src/main/java/org/altbeacon/beacon/Region.java
@@ -220,8 +220,13 @@ protected Region(Parcel in) {
         int size = in.readInt();
         mIdentifiers = new ArrayList<Identifier>(size);
         for (int i = 0; i < size; i++) {
-            Identifier identifier = Identifier.parse(in.readString());
-            mIdentifiers.add(identifier);
+            String identifierString = in.readString();
+            if (identifierString == null) {
+                mIdentifiers.add(null);
+            } else {
+                Identifier identifier = Identifier.parse(identifierString);
+                mIdentifiers.add(identifier);
+            }
         }
     }
     @Override
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index ed636d9b..7fe4fcb5 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -231,7 +231,12 @@ public void onDestroy() {
         handler.removeCallbacksAndMessages(null);
         scanLeDevice(false);
         if (bluetoothAdapter != null) {
-            bluetoothAdapter.stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
+            try {
+                getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback) getLeScanCallback());
+            }
+            catch (Exception e) {
+                Log.w("Internal Android exception scanning for beacons: ", e);
+            }
             lastScanEndTime = new Date().getTime();
         }
     }
@@ -387,7 +392,12 @@ public void run() {
                             }
                             else {
                                 if (scanningEnabled) {
-                                    getBluetoothAdapter().startLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
+                                    try {
+                                        getBluetoothAdapter().startLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
+                                    }
+                                    catch (Exception e) {
+                                        Log.w("Internal Android exception scanning for beacons: ", e);
+                                    }
                                 }
                                 else {
                                     BeaconManager.logDebug(TAG, "Scanning unnecessary - no monitoring or ranging active.");
@@ -412,7 +422,12 @@ public void run() {
             BeaconManager.logDebug(TAG, "disabling scan");
             scanning = false;
             if (getBluetoothAdapter() != null) {
-                getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
+                try {
+                    getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback) getLeScanCallback());
+                }
+                catch (Exception e) {
+                    Log.w("Internal Android exception scanning for beacons: ", e);
+                }
                 lastScanEndTime = new Date().getTime();
             }
         }
@@ -477,7 +492,12 @@ private void finishScanCycle() {
             }
             if (getBluetoothAdapter() != null) {
                 if (getBluetoothAdapter().isEnabled()) {
-                    getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback)getLeScanCallback());
+                    try {
+                        getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback) getLeScanCallback());
+                    }
+                    catch (Exception e) {
+                        Log.w("Internal Android exception scanning for beacons: ", e);
+                    }
                     lastScanEndTime = new Date().getTime();
                 } else {
                     Log.w(TAG, "Bluetooth is disabled.  Cannot scan for beacons.");
diff --git a/src/test/java/org/altbeacon/beacon/RegionTest.java b/src/test/java/org/altbeacon/beacon/RegionTest.java
index 8f217052..c8ac23b2 100644
--- a/src/test/java/org/altbeacon/beacon/RegionTest.java
+++ b/src/test/java/org/altbeacon/beacon/RegionTest.java
@@ -4,6 +4,7 @@
 
 import static android.test.MoreAsserts.assertNotEqual;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 import org.robolectric.RobolectricTestRunner;
@@ -68,8 +69,8 @@ public void testCanSerializeParcelable() {
         assertEquals("uniqueId is same after deserialization", region.getUniqueId(), region2.getUniqueId());
         assertEquals("id1 is same after deserialization", region.getIdentifier(0), region2.getIdentifier(0));
         assertEquals("id2 is same after deserialization", region.getIdentifier(1), region2.getIdentifier(1));
-        // for some reason jUnit won't consider two null values to be equal, so we force it with a prepend of ""
-        assertEquals("id3 is same after deserialization", ""+region.getIdentifier(2), ""+region2.getIdentifier(2));
+        assertNull("id3 is null before deserialization", region.getIdentifier(2));
+        assertNull("id3 is null after deserialization", region2.getIdentifier(2));
     }
 
     @Test
