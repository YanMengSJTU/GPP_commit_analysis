diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
deleted file mode 100644
index f9bb95cd..00000000
--- a/.github/ISSUE_TEMPLATE.md
+++ /dev/null
@@ -1,11 +0,0 @@
-### Expected behavior
-
-### Actual behavior
-
-### Steps to reproduce this behavior
-
-### Mobile device model and OS version
-
-### Android Beacon Library version
-
-IMPORTANT:  This forum is reserved for feature requests or reproducible bugs with the library itself.  If you need help with using the library with your project, please open a new question on StackOverflow.com.
diff --git a/build.gradle b/build.gradle
index 5a675958..8ae643dd 100644
--- a/build.gradle
+++ b/build.gradle
@@ -48,8 +48,8 @@ allprojects {
 }
 
 android {
-    compileSdkVersion 24
-    buildToolsVersion "24.0.2"
+    compileSdkVersion 23
+    buildToolsVersion '24.0.2'
 
     defaultConfig {
         minSdkVersion 7
@@ -86,18 +86,16 @@ android {
 }
 
 dependencies {
-    compile fileTree ( dir: 'libs', include: ['*.jar'] )
+    compile fileTree(include: ['*.jar'], dir: 'libs')
     testCompile 'org.hamcrest:hamcrest-integration:1.3'
     testCompile 'org.hamcrest:hamcrest-core:1.3'
     testCompile 'org.hamcrest:hamcrest-library:1.3'
-
     testCompile('junit:junit:4.12') {
         exclude module: 'hamcrest-core'
     }
     testCompile('com.squareup:fest-android:1.0.+@aar') {
         exclude group: 'com.android.support', module: 'support-v4'
     }
-
     testCompile('org.robolectric:robolectric:3.0') {
         exclude module: 'classworlds'
         exclude module: 'commons-logging'
@@ -116,7 +114,6 @@ dependencies {
         exclude module: 'wagon-provider-api'
         exclude group: 'com.android.support', module: 'support-v4'
     }
-
     testCompile 'org.mockito:mockito-core:1.10.19'
 }
 
diff --git a/src/main/java/org/altbeacon/beacon/Region.java b/src/main/java/org/altbeacon/beacon/Region.java
index db5886da..6bcfa4f0 100644
--- a/src/main/java/org/altbeacon/beacon/Region.java
+++ b/src/main/java/org/altbeacon/beacon/Region.java
@@ -68,6 +68,11 @@ public Region createFromParcel(Parcel in) {
     protected final List<Identifier> mIdentifiers;
     protected final String mBluetoothAddress;
     protected final String mUniqueId;
+    public Integer delayedStart = 0;
+    public Long slowStart = 60000L;
+    public Long firstSeen = 0L;
+    public Integer threshold = 5;
+    public Integer thresholdCounter = 0;
 
     /**
      * Constructs a new Region object to be used for Ranging or Monitoring
@@ -262,6 +267,10 @@ public void writeToParcel(Parcel out, int flags) {
         out.writeString(mUniqueId);
         out.writeString(mBluetoothAddress);
         out.writeInt(mIdentifiers.size());
+        out.writeLong(slowStart);
+        out.writeLong(firstSeen);
+        out.writeInt(delayedStart);
+        out.writeInt(threshold);
 
         for (Identifier identifier: mIdentifiers) {
             if (identifier != null) {
@@ -279,6 +288,10 @@ protected Region(Parcel in) {
         mBluetoothAddress = in.readString();
         int size = in.readInt();
         mIdentifiers = new ArrayList<Identifier>(size);
+        slowStart = in.readLong();
+        firstSeen = in.readLong();
+        delayedStart = in.readInt();
+        threshold = in.readInt();
         for (int i = 0; i < size; i++) {
             String identifierString = in.readString();
             if (identifierString == null) {
diff --git a/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java b/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
index fdf5644d..cb6f09ee 100644
--- a/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
+++ b/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
@@ -100,6 +100,9 @@ public synchronized void updateNewlyOutside() {
             if (state.markOutsideIfExpired()) {
                 needsMonitoringStateSaving = true;
                 LogManager.d(TAG, "found a monitor that expired: %s", region);
+                if(region.delayedStart == 1) {
+                    region.thresholdCounter = 0;
+                }
                 state.getCallback().call(mContext, "monitoringData", new MonitoringData(state.getInside(), region));
             }
         }
@@ -114,8 +117,41 @@ public synchronized void updateNewlyOutside() {
     public synchronized void updateNewlyInsideInRegionsContaining(Beacon beacon) {
         List<Region> matchingRegions = regionsMatchingTo(beacon);
         boolean needsMonitoringStateSaving = false;
+
         for(Region region : matchingRegions) {
+            LogManager.i(TAG, "Checking for slow start region ...");
+            LogManager.i(TAG, "Region is: " + region.delayedStart + " " + region.getUniqueId() + ", threshold: " + region.threshold);
             RegionMonitoringState state = getRegionsStateMap().get(region);
+            /* slow start */
+            if(state != null && state.getInside() == false && region.delayedStart == 1 && region.firstSeen == 0L) {
+                /* first seen */
+                region.firstSeen = System.currentTimeMillis();
+                matchingRegions.remove(region);
+                LogManager.i(TAG, "Region is first seen.");
+            } else if(state != null && state.getInside() == false && region.delayedStart == 1 && region.firstSeen > 0L) {
+                if(System.currentTimeMillis() - region.firstSeen > region.slowStart) {
+                    region.firstSeen = 0L;
+                    if(region.thresholdCounter > region.threshold) {
+                        LogManager.i(TAG, "Slow start elapsed for region: " + region.getUniqueId());
+                    } else {
+                        LogManager.i(TAG, "Not enough threshold value: " + region.thresholdCounter);
+                        matchingRegions.remove(region);
+                    }
+                    region.thresholdCounter = 0;
+
+
+                } else {
+                    matchingRegions.remove(region);
+                    region.thresholdCounter ++;
+                    LogManager.i(TAG, "Not long enough in region: " + (System.currentTimeMillis() - region.firstSeen + ", Threshold: " + region.thresholdCounter + "/" + region.threshold));
+                }
+            }
+        }
+
+        for(Region region : matchingRegions) {
+            RegionMonitoringState state = getRegionsStateMap().get(region);
+
+
             if (state != null && state.markInside()) {
                 needsMonitoringStateSaving = true;
                 state.getCallback().call(mContext, "monitoringData",
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
index 4d370d55..6d677e31 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
@@ -10,7 +10,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.os.Build;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
@@ -26,34 +25,28 @@
 @TargetApi(18)
 public abstract class CycledLeScanner {
     private static final String TAG = "CycledLeScanner";
+    private static final long ANDROID_N_MIN_SCAN_CYCLE_MILLIS = 6000l;
+    protected final Context mContext;
+    protected final Handler mHandler = new Handler(Looper.getMainLooper());
+    protected final Handler mScanHandler;
+    protected final BluetoothCrashResolver mBluetoothCrashResolver;
+    protected final CycledLeScanCallback mCycledLeScanCallback;
+    private final HandlerThread mScanThread;
+    protected long mNextScanCycleStartTime = 0l;
+    protected boolean mScanningPaused;
+    protected long mBetweenScanPeriod;
+    protected boolean mBackgroundFlag = false;
+    protected boolean mRestartNeeded = false;
     private BluetoothAdapter mBluetoothAdapter;
-
     private long mLastScanCycleStartTime = 0l;
     private long mLastScanCycleEndTime = 0l;
-    protected long mNextScanCycleStartTime = 0l;
     private long mScanCycleStopTime = 0l;
     private long mLastScanStopTime = 0l;
-
     private boolean mScanning;
-    protected boolean mScanningPaused;
     private boolean mScanCyclerStarted = false;
     private boolean mScanningEnabled = false;
-    protected final Context mContext;
     private long mScanPeriod;
-
-    protected long mBetweenScanPeriod;
-
-    protected final Handler mHandler = new Handler(Looper.getMainLooper());
-    protected final Handler mScanHandler;
-    private final HandlerThread mScanThread;
-
-    protected final BluetoothCrashResolver mBluetoothCrashResolver;
-    protected final CycledLeScanCallback mCycledLeScanCallback;
-
-    protected boolean mBackgroundFlag = false;
-    protected boolean mRestartNeeded = false;
-
-    private static final long ANDROID_N_MIN_SCAN_CYCLE_MILLIS = 6000l;
+    private PendingIntent mWakeUpOperation = null;
 
     protected CycledLeScanner(Context context, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, CycledLeScanCallback cycledLeScanCallback, BluetoothCrashResolver crashResolver) {
         mScanPeriod = scanPeriod;
@@ -100,11 +93,11 @@ public static CycledLeScanner createScanner(Context context, long scanPeriod, lo
      * Tells the cycler the scan rate and whether it is in operating in background mode.
      * Background mode flag  is used only with the Android 5.0 scanning implementations to switch
      * between LOW_POWER_MODE vs. LOW_LATENCY_MODE
+     *
      * @param backgroundFlag
      */
     public void setScanPeriods(long scanPeriod, long betweenScanPeriod, boolean backgroundFlag) {
-        LogManager.d(TAG, "Set scan periods called with %s, %s Background mode must have changed.",
-                scanPeriod, betweenScanPeriod);
+        LogManager.d(TAG, "Set scan periods called with %s, %s Background mode must have changed.", scanPeriod, betweenScanPeriod);
         if (mBackgroundFlag != backgroundFlag) {
             mRestartNeeded = true;
         }
@@ -126,8 +119,7 @@ public void setScanPeriods(long scanPeriod, long betweenScanPeriod, boolean back
             long proposedNextScanStartTime = (mLastScanCycleEndTime + betweenScanPeriod);
             if (proposedNextScanStartTime < mNextScanCycleStartTime) {
                 mNextScanCycleStartTime = proposedNextScanStartTime;
-                LogManager.i(TAG, "Adjusted nextScanStartTime to be %s",
-                        new Date(mNextScanCycleStartTime - SystemClock.elapsedRealtime() + System.currentTimeMillis()));
+                LogManager.i(TAG, "Adjusted nextScanStartTime to be %s", new Date(mNextScanCycleStartTime - SystemClock.elapsedRealtime() + System.currentTimeMillis()));
             }
         }
         if (mScanCycleStopTime > now) {
@@ -236,8 +228,7 @@ protected void scanLeDevice(final Boolean enable) {
                 stopScan();
                 mLastScanCycleEndTime = SystemClock.elapsedRealtime();
             }
-        }
-        catch (SecurityException e) {
+        } catch (SecurityException e) {
             LogManager.w(TAG, "SecurityException working accessing bluetooth.");
         }
     }
@@ -246,8 +237,7 @@ protected void scheduleScanCycleStop() {
         // Stops scanning after a pre-defined scan period.
         long millisecondsUntilStop = mScanCycleStopTime - SystemClock.elapsedRealtime();
         if (millisecondsUntilStop > 0) {
-            LogManager.d(TAG, "Waiting to stop scan cycle for another %s milliseconds",
-                    millisecondsUntilStop);
+            LogManager.d(TAG, "Waiting to stop scan cycle for another %s milliseconds", millisecondsUntilStop);
             if (mBackgroundFlag) {
                 setWakeUpAlarm();
             }
@@ -272,27 +262,16 @@ private void finishScanCycle() {
                 if (getBluetoothAdapter() != null) {
                     if (getBluetoothAdapter().isEnabled()) {
                         long now = System.currentTimeMillis();
-                        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&
-                                mBetweenScanPeriod+mScanPeriod < ANDROID_N_MIN_SCAN_CYCLE_MILLIS &&
-                                now-mLastScanStopTime < ANDROID_N_MIN_SCAN_CYCLE_MILLIS) {
-                            // As of Android N, only 5 scans may be started in a 30 second period (6
-                            // seconds per cycle)  otherwise they are blocked.  So we check here to see
-                            // if the scan period is 6 seconds or less, and if we last stopped scanning
-                            // fewer than 6 seconds ag and if so, we simply do not stop scanning
-                            LogManager.d(TAG, "Not stopping scan because this is Android N and we" +
-                                    " keep scanning for a minimum of 6 seconds at a time. "+
-                                    "We will stop in "+(ANDROID_N_MIN_SCAN_CYCLE_MILLIS-(now-mLastScanStopTime))+" millisconds.");
-                        }
-                        else {
-                            try {
-                                LogManager.d(TAG, "stopping bluetooth le scan");
-                                finishScan();
-                                mLastScanStopTime = now;
-                            } catch (Exception e) {
-                                LogManager.w(e, TAG, "Internal Android exception scanning for beacons");
-                            }
+
+                        try {
+                            LogManager.d(TAG, "stopping bluetooth le scan");
+                            finishScan();
+                            mLastScanStopTime = now;
+                        } catch (Exception e) {
+                            LogManager.w(e, TAG, "Internal Android exception scanning for beacons");
                         }
 
+
                         mLastScanCycleEndTime = SystemClock.elapsedRealtime();
                     } else {
                         LogManager.d(TAG, "Bluetooth is disabled.  Cannot scan for beacons.");
@@ -308,8 +287,7 @@ private void finishScanCycle() {
                 mScanCyclerStarted = false;
                 cancelWakeUpAlarm();
             }
-        }
-        catch (SecurityException e) {
+        } catch (SecurityException e) {
             LogManager.w(TAG, "SecurityException working accessing bluetooth.");
         }
     }
@@ -318,24 +296,19 @@ protected BluetoothAdapter getBluetoothAdapter() {
         try {
             if (mBluetoothAdapter == null) {
                 // Initializes Bluetooth adapter.
-                final BluetoothManager bluetoothManager =
-                        (BluetoothManager) mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
+                final BluetoothManager bluetoothManager = (BluetoothManager) mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
                 mBluetoothAdapter = bluetoothManager.getAdapter();
                 if (mBluetoothAdapter == null) {
                     LogManager.w(TAG, "Failed to construct a BluetoothAdapter");
                 }
             }
-        }
-        catch (SecurityException e) {
+        } catch (SecurityException e) {
             // Thrown by Samsung Knox devices if bluetooth access denied for an app
             LogManager.e(TAG, "Cannot consruct bluetooth adapter.  Security Exception");
         }
         return mBluetoothAdapter;
     }
 
-
-    private PendingIntent mWakeUpOperation = null;
-
     // In case we go into deep sleep, we will set up a wakeup alarm when in the background to kickoff
     // off the scan cycle again
     protected void setWakeUpAlarm() {
@@ -387,11 +360,10 @@ private long getNextScanStartTime() {
             return SystemClock.elapsedRealtime();
         }
         long fullScanCycle = mScanPeriod + mBetweenScanPeriod;
-        long normalizedBetweenScanPeriod = mBetweenScanPeriod-(SystemClock.elapsedRealtime() % fullScanCycle);
-        LogManager.d(TAG, "Normalizing between scan period from %s to %s", mBetweenScanPeriod,
-                normalizedBetweenScanPeriod);
+        long normalizedBetweenScanPeriod = mBetweenScanPeriod - (SystemClock.elapsedRealtime() % fullScanCycle);
+        LogManager.d(TAG, "Normalizing between scan period from %s to %s", mBetweenScanPeriod, normalizedBetweenScanPeriod);
 
-        return SystemClock.elapsedRealtime()+normalizedBetweenScanPeriod;
+        return SystemClock.elapsedRealtime() + normalizedBetweenScanPeriod;
     }
 
     private boolean checkLocationPermission() {
diff --git a/src/test/AndroidManifest.xml b/src/test/AndroidManifest.xml
deleted file mode 100644
index bd9c66be..00000000
--- a/src/test/AndroidManifest.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.altbeacon.beacon"
-    >
-
-    <uses-permission android:name="android.permission.BLUETOOTH"/>
-    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
-    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
-
-    <application>
-        <receiver android:name="org.altbeacon.beacon.startup.StartupBroadcastReceiver">
-            <intent-filter>
-                <action android:name="android.intent.action.BOOT_COMPLETED"/>
-                <action android:name="android.intent.action.ACTION_POWER_CONNECTED"/>
-                <action android:name="android.intent.action.ACTION_POWER_DISCONNECTED"/>
-            </intent-filter>
-        </receiver>
-
-        <service android:enabled="true"
-            android:exported="false"
-            android:isolatedProcess="false"
-            android:label="beacon"
-            android:name=".service.BeaconService"
-            />
-
-        <service android:name=".BeaconIntentProcessor"
-            android:enabled="true"
-            android:exported="false"
-            />
-
-    </application>
-
-</manifest>
diff --git a/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java b/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
deleted file mode 100644
index 0ee13613..00000000
--- a/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package org.altbeacon.beacon;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.junit.Test;
-import org.robolectric.annotation.Config;
-
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
- */
-public class AltBeaconParserTest {
-
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-    @Test
-    public void testRecognizeBeacon() {
-        BeaconManager.setDebug(true);
-        byte[] bytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c50900");
-        AltBeaconParser parser = new AltBeaconParser();
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals ("Beacon should have one data field", 1, beacon.getDataFields().size());
-        assertEquals("manData should be parsed", 9, ((AltBeacon) beacon).getMfgReserved());
-    }
-
-    @Test
-    public void testDetectsDaveMHardwareBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600050003be020e09526164426561636f6e20555342020a0300000000000000000000000000");
-        AltBeaconParser parser = new AltBeaconParser();
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("Beacon should be not null if parsed successfully", beacon);
-    }
-    @Test
-    public void testDetectsAlternateBeconType() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801aabb2f234454cf6d4a0fadf2f4911ba9ffa600010002c50900");
-        AltBeaconParser parser = new AltBeaconParser();
-        parser.setMatchingBeaconTypeCode(0xaabbl);
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("Beacon should be not null if parsed successfully", beacon);
-    }
-    @Test
-    public void testParseWrongFormatReturnsNothing() {
-        BeaconManager.setDebug(true);
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.d("XXX", "testParseWrongFormatReturnsNothing start");
-        byte[] bytes = hexStringToByteArray("02011a1aff1801ffff2f234454cf6d4a0fadf2f4911ba9ffa600010002c509");
-        AltBeaconParser parser = new AltBeaconParser();
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        LogManager.d("XXX", "testParseWrongFormatReturnsNothing end");
-        assertNull("Beacon should be null if not parsed successfully", beacon);
-    }
-
-    @Test
-    public void testParsesBeaconMissingDataField() {
-        BeaconManager.setDebug(true);
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1aff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c5000000");
-        AltBeaconParser parser = new AltBeaconParser();
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("mRssi should be as passed in", -55, beacon.getRssi());
-        assertEquals("uuid should be parsed", "2f234454-cf6d-4a0f-adf2-f4911ba9ffa6", beacon.getIdentifier(0).toString());
-        assertEquals("id2 should be parsed", "1", beacon.getIdentifier(1).toString());
-        assertEquals("id3 should be parsed", "2", beacon.getIdentifier(2).toString());
-        assertEquals("txPower should be parsed", -59, beacon.getTxPower());
-        assertEquals("manufacturer should be parsed", 0x118 ,beacon.getManufacturer());
-        assertEquals("missing data field zero should be zero", new Long(0l), beacon.getDataFields().get(0));
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/org/altbeacon/beacon/AltBeaconTest.java b/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
deleted file mode 100644
index 2519ad13..00000000
--- a/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.os.Parcel;
-
-import static org.junit.Assert.assertEquals;
-
-import org.altbeacon.beacon.logging.Loggers;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.junit.Test;
-import org.robolectric.annotation.Config;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
- */
-public class AltBeaconTest {
-
-  public static byte[] hexStringToByteArray(String s) {
-      int len = s.length();
-      byte[] data = new byte[len / 2];
-      for (int i = 0; i < len; i += 2) {
-          data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                               + Character.digit(s.charAt(i+1), 16));
-      }
-      return data;
-  }
-
-  @Test
-  public void testRecognizeBeacon() {
-    byte[] bytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509");
-    AltBeaconParser parser = new AltBeaconParser();
-    Beacon beacon = parser.fromScanData(bytes, -55, null);
-    assertEquals("manData should be parsed", 9, ((AltBeacon) beacon).getMfgReserved() );
-  }
-
-
-    @Test
-    public void testCanSerializeParcelable() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Parcel parcel = Parcel.obtain();
-        Beacon beacon = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        beacon.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        Beacon beacon2 = new AltBeacon(parcel);
-        assertEquals("beaconMfgReserved is same after deserialization", ((AltBeacon)beacon).getMfgReserved(), ((AltBeacon)beacon2).getMfgReserved());
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/BeaconParserTest.java b/src/test/java/org/altbeacon/beacon/BeaconParserTest.java
deleted file mode 100644
index e9365309..00000000
--- a/src/test/java/org/altbeacon/beacon/BeaconParserTest.java
+++ /dev/null
@@ -1,368 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.annotation.TargetApi;
-import android.os.Build;
-import android.os.Parcel;
-
-import static android.test.MoreAsserts.assertNotEqual;
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.junit.Test;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
- */
-public class BeaconParserTest {
-
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-    public static String byteArrayToHexString(byte[] bytes) {
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < bytes.length; i++) {
-            sb.append(String.format("%02x", bytes[i]));
-        }
-        return sb.toString();
-    }
-
-    @Test
-    public void testSetBeaconLayout() {
-        byte[] bytes = hexStringToByteArray("02011a1bffbeac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-
-        assertEquals("parser should get beacon type code start offset", new Integer(2), parser.mMatchingBeaconTypeCodeStartOffset);
-        assertEquals("parser should get beacon type code end offset",  new Integer(3), parser.mMatchingBeaconTypeCodeEndOffset);
-        assertEquals("parser should get beacon type code", new Long(0xbeac), parser.getMatchingBeaconTypeCode());
-        assertEquals("parser should get identifier start offset", new Integer(4), parser.mIdentifierStartOffsets.get(0));
-        assertEquals("parser should get identifier end offset", new Integer(19), parser.mIdentifierEndOffsets.get(0));
-        assertEquals("parser should get identifier start offset", new Integer(20), parser.mIdentifierStartOffsets.get(1));
-        assertEquals("parser should get identifier end offset", new Integer(21), parser.mIdentifierEndOffsets.get(1));
-        assertEquals("parser should get identifier start offset", new Integer(22), parser.mIdentifierStartOffsets.get(2));
-        assertEquals("parser should get identifier end offset", new Integer(23), parser.mIdentifierEndOffsets.get(2));
-        assertEquals("parser should get power start offset", new Integer(24), parser.mPowerStartOffset);
-        assertEquals("parser should get power end offset", new Integer(24), parser.mPowerEndOffset);
-        assertEquals("parser should get data start offset", new Integer(25), parser.mDataStartOffsets.get(0));
-        assertEquals("parser should get data end offset", new Integer(25), parser.mDataEndOffsets.get(0));
-
-    }
-
-    @Test
-    public void testLongToByteArray() {
-        BeaconParser parser = new BeaconParser();
-        byte[] bytes = parser.longToByteArray(10, 1);
-        assertEquals("first byte should be 10", 10, bytes[0]);
-    }
-
-    @Test
-    public void testRecognizeBeacon() {
-        LogManager.setLogger(Loggers.verboseLogger());
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1aff180112342f234454cf6d4a0fadf2f4911ba9ffa600010002c5");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=1234,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("mRssi should be as passed in", -55, beacon.getRssi());
-        assertEquals("uuid should be parsed", "2f234454-cf6d-4a0f-adf2-f4911ba9ffa6", beacon.getIdentifier(0).toString());
-        assertEquals("id2 should be parsed", "1", beacon.getIdentifier(1).toString());
-        assertEquals("id3 should be parsed", "2", beacon.getIdentifier(2).toString());
-        assertEquals("txPower should be parsed", -59, beacon.getTxPower());
-        assertEquals("manufacturer should be parsed", 0x118 ,beacon.getManufacturer());
-    }
-
-    @Test
-    public void testAllowsAccessToParserIdentifier() {
-        LogManager.setLogger(Loggers.verboseLogger());
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1aff180112342f234454cf6d4a0fadf2f4911ba9ffa600010002c5");
-        BeaconParser parser = new BeaconParser("my_beacon_type");
-        parser.setBeaconLayout("m:2-3=1234,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("parser identifier should be accessible", "my_beacon_type", beacon.getParserIdentifier());
-    }
-
-    @Test
-    public void testParsesBeaconMissingDataField() {
-        LogManager.setLogger(Loggers.verboseLogger());
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1aff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c5000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("mRssi should be as passed in", -55, beacon.getRssi());
-        assertEquals("uuid should be parsed", "2f234454-cf6d-4a0f-adf2-f4911ba9ffa6", beacon.getIdentifier(0).toString());
-        assertEquals("id2 should be parsed", "1", beacon.getIdentifier(1).toString());
-        assertEquals("id3 should be parsed", "2", beacon.getIdentifier(2).toString());
-        assertEquals("txPower should be parsed", -59, beacon.getTxPower());
-        assertEquals("manufacturer should be parsed", 0x118 ,beacon.getManufacturer());
-        assertEquals("missing data field zero should be zero", new Long(0l), beacon.getDataFields().get(0));
-
-    }
-
-
-    @Test
-    public void testRecognizeBeaconWithFormatSpecifyingManufacturer() {
-        LogManager.setLogger(Loggers.verboseLogger());
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:0-3=1801beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("mRssi should be as passed in", -55, beacon.getRssi());
-        assertEquals("uuid should be parsed", "2f234454-cf6d-4a0f-adf2-f4911ba9ffa6", beacon.getIdentifier(0).toString());
-        assertEquals("id2 should be parsed", "1", beacon.getIdentifier(1).toString());
-        assertEquals("id3 should be parsed", "2", beacon.getIdentifier(2).toString());
-        assertEquals("txPower should be parsed", -59, beacon.getTxPower());
-        assertEquals("manufacturer should be parsed", 0x118 ,beacon.getManufacturer());
-    }
-
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
-    @Test
-    public void testReEncodesBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        byte[] regeneratedBytes = parser.getBeaconAdvertisementData(beacon);
-        byte[] expectedMatch = Arrays.copyOfRange(bytes, 7, bytes.length);
-        assertArrayEquals("beacon advertisement bytes should be the same after re-encoding", expectedMatch, regeneratedBytes);
-    }
-
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
-    @Test
-    public void testReEncodesBeaconForEddystoneTelemetry() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("0201060303aafe1516aafe2001021203130414243405152535");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout(BeaconParser.EDDYSTONE_TLM_LAYOUT);
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        byte[] regeneratedBytes = parser.getBeaconAdvertisementData(beacon);
-        byte[] expectedMatch = Arrays.copyOfRange(bytes, 11, bytes.length);
-        assertEquals("beacon advertisement bytes should be the same after re-encoding", byteArrayToHexString(expectedMatch), byteArrayToHexString(regeneratedBytes));
-    }
-
-    @Test
-    public void testLittleEndianIdentifierParsing() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801beac0102030405060708090a0b0c0d0e0f1011121314c50900000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-9,i:10-15l,i:16-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("mRssi should be as passed in", -55, beacon.getRssi());
-        assertEquals("id1 should be big endian", "0x010203040506", beacon.getIdentifier(0).toString());
-        assertEquals("id2 should be little endian", "0x0c0b0a090807", beacon.getIdentifier(1).toString());
-        assertEquals("id3 should be big endian", "0x0d0e0f1011121314", beacon.getIdentifier(2).toString());
-        assertEquals("txPower should be parsed", -59, beacon.getTxPower());
-        assertEquals("manufacturer should be parsed", 0x118, beacon.getManufacturer());
-    }
-
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
-    @Test
-    public void testReEncodesLittleEndianBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801beac0102030405060708090a0b0c0d0e0f1011121314c509");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-9,i:10-15l,i:16-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        byte[] regeneratedBytes = parser.getBeaconAdvertisementData(beacon);
-        byte[] expectedMatch = Arrays.copyOfRange(bytes, 7, bytes.length);
-        System.err.println(byteArrayToHexString(expectedMatch));
-        System.err.println(byteArrayToHexString(regeneratedBytes));
-        assertEquals("beacon advertisement bytes should be the same after re-encoding", byteArrayToHexString(expectedMatch), byteArrayToHexString(regeneratedBytes));
-    }
-
-
-    @Test
-    public void testRecognizeBeaconCapturedManufacturer() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("0201061bffaabbbeace2c56db5dffb48d2b060d0f5a71096e000010004c50000000000000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("manufacturer should be parsed", "bbaa", String.format("%04x", beacon.getManufacturer()));
-    }
-
-
-    @Test
-    public void testParseGattIdentifierThatRunsOverPduLength() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("0201060303aafe0d16aafe10e702676f6f676c65000c09526164426561636f6e204700000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setAllowPduOverflow(false);
-        parser.setBeaconLayout("s:0-1=feaa,m:2-2=10,p:3-3:-41,i:4-20");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertNull("beacon should not be parsed", beacon);
-    }
-
-    @Test
-    public void testLongUrlBeaconIdentifier() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("0201060303aafe0d16aafe10e70102030405060708090a0b0c0d0e0f0102030405060708090a0b0c0d0e0f00000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("s:0-1=feaa,m:2-2=10,p:3-3:-41,i:4-20v");
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("URL Identifier should be truncated at 8 bytes", 8, beacon.getId1().toByteArray().length);
-    }
-
-    @Test
-    public void testParseManufacturerIdentifierThatRunsOverPduLength() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-
-        // Note that the length field below is 0x16 instead of 0x1b, indicating that the packet ends
-        // one byte before the second identifier field starts
-        byte[] bytes = hexStringToByteArray("02011a16ff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setAllowPduOverflow(false);
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertNull("beacon should not be parsed", beacon);
-    }
-
-    @Test
-    public void testParseProblematicBeaconFromIssue229() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-
-        // Note that the length field below is 0x16 instead of 0x1b, indicating that the packet ends
-        // one byte before the second identifier field starts
-
-        byte[] bytes = hexStringToByteArray("0201061bffe000beac7777772e626c756b692e636f6d000100010001abaa000000");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("beacon should be parsed", beacon);
-    }
-
-
-    @Test
-    public void testCanParseLocationBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        BeaconManager.setDebug(true);
-
-        double latitude = 38.93;
-        double longitude = -77.23;
-        Beacon beacon = new Beacon.Builder()
-                .setManufacturer(0x0118) // Radius Networks
-                .setId1("1") // device sequence number
-                .setId2(String.format("0x%08X", (long)((latitude+90)*10000.0)))
-                .setId3(String.format("0x%08X", (long)((longitude+180)*10000.0)))
-                .setTxPower(-59) // The measured transmitter power at one meter in dBm
-                .build();
-        // TODO: make this pass if data fields are little endian or > 4 bytes (or even > 2 bytes)
-        BeaconParser p = new BeaconParser().
-                setBeaconLayout("m:2-3=10ca,i:4-9,i:10-13,i:14-17,p:18-18");
-        byte[] bytes = p.getBeaconAdvertisementData(beacon);
-        byte[] headerBytes = hexStringToByteArray("02011a1bff1801");
-        byte[] advBytes = new byte[bytes.length+headerBytes.length];
-        System.arraycopy(headerBytes, 0, advBytes, 0, headerBytes.length);
-        System.arraycopy(bytes, 0, advBytes, headerBytes.length, bytes.length);
-
-        Beacon parsedBeacon = p.fromScanData(advBytes, -59, null);
-        assertNotNull(String.format("Parsed beacon from %s should not be null", byteArrayToHexString(advBytes)), parsedBeacon);
-        double parsedLatitude = Long.parseLong(parsedBeacon.getId2().toString().substring(2), 16) / 10000.0 - 90.0;
-        double parsedLongitude = Long.parseLong(parsedBeacon.getId3().toString().substring(2), 16) / 10000.0 - 180.0;
-
-        long encodedLatitude = (long)((latitude+90)*10000.0);
-        assertEquals("encoded latitude hex should match", String.format("0x%08x", encodedLatitude), parsedBeacon.getId2().toString());
-        assertEquals("device sequence num should be same", "0x000000000001", parsedBeacon.getId1().toString());
-        assertEquals("latitude should be about right", latitude, parsedLatitude, 0.0001);
-        assertEquals("longitude should be about right", longitude, parsedLongitude, 0.0001);
-
-    }
-    @Test
-    public void testCanGetAdvertisementDataForUrlBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        BeaconManager.setDebug(true);
-        Beacon beacon = new Beacon.Builder()
-                .setManufacturer(0x0118)
-                .setId1("02646576656c6f7065722e636f6d") // http://developer.com
-                .setTxPower(-59) // The measured transmitter power at one meter in dBm
-                .build();
-        BeaconParser p = new BeaconParser().
-                setBeaconLayout("s:0-1=feaa,m:2-2=10,p:3-3:-41,i:4-20v");
-        byte[] bytes = p.getBeaconAdvertisementData(beacon);
-        assertEquals("First byte of url should be in position 3", 0x02, bytes[2]);
-    }
-    @Test
-    public void doesNotCashWithOverflowingByteCodeComparisonOnPdu() {
-        // Test for https://github.com/AltBeacon/android-beacon-library/issues/323
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-
-        // Note that the length field below is 0x16 instead of 0x1b, indicating that the packet ends
-        // one byte before the second identifier field starts
-
-        byte[] bytes = hexStringToByteArray("02010604ffe000be");
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-
-        Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertNull("beacon not be parsed without an exception being thrown", beacon);
-    }
-
-    @Test
-    public void testCanParseLongDataTypeOfDifferentSize(){
-        // Create a beacon parser
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=0118,i:4-7,p:8-8,d:9-16,d:18-21,d:22-25");
-
-        // Generate sample beacon for test purpose.
-        java.util.List<Long> sampleData = new java.util.ArrayList<Long>();
-        Long now = System.currentTimeMillis();
-        sampleData.add(now);
-        sampleData.add(1234L);
-        sampleData.add(9876L);
-        Beacon beacon = new Beacon.Builder()
-                .setManufacturer(0x0118)
-                .setId1("02646576656c6f7065722e636f6d")
-                .setTxPower(-59)
-                .setDataFields(sampleData)
-                .build();
-
-        assertEquals("beacon contains a valid data on index 0", now, beacon.getDataFields().get(0));
-
-        // Make byte array
-        byte[] headerBytes = hexStringToByteArray("1bff1801");
-        byte[] bodyBytes = parser.getBeaconAdvertisementData(beacon);
-        byte[] bytes = new byte[headerBytes.length + bodyBytes.length];
-        System.arraycopy(headerBytes, 0, bytes, 0, headerBytes.length);
-        System.arraycopy(bodyBytes, 0, bytes, headerBytes.length, bodyBytes.length);
-
-        // Try parsing the byte array
-        Beacon parsedBeacon = parser.fromScanData(bytes, -59, null);
-
-        assertEquals("parsed beacon should contain a valid data on index 0", now, parsedBeacon.getDataFields().get(0));
-        assertEquals("parsed beacon should contain a valid data on index 1", Long.valueOf(1234L), parsedBeacon.getDataFields().get(1));
-        assertEquals("parsed beacon should contain a valid data on index 2", Long.valueOf(9876L), parsedBeacon.getDataFields().get(2));
-
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/org/altbeacon/beacon/BeaconTest.java b/src/test/java/org/altbeacon/beacon/BeaconTest.java
deleted file mode 100644
index e31e6f54..00000000
--- a/src/test/java/org/altbeacon/beacon/BeaconTest.java
+++ /dev/null
@@ -1,207 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.os.Parcel;
-
-import org.altbeacon.beacon.distance.ModelSpecificDistanceCalculator;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.List;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
- */
-public class BeaconTest {
-
-    @Before
-    public void before() {
-        Beacon.setHardwareEqualityEnforced(false);
-    }
-    @Test
-    public void testAccessBeaconIdentifiers() {
-        Beacon beacon = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        assertEquals("First beacon id should be 1", beacon.getIdentifier(0).toString(), "1");
-        assertEquals("Second beacon id should be 1", beacon.getIdentifier(1).toString(), "2");
-        assertEquals("Third beacon id should be 1", beacon.getIdentifier(2).toString(), "3");
-        assertEquals("First beacon id should be 1", beacon.getId1().toString(), "1");
-        assertEquals("Second beacon id should be 1", beacon.getId2().toString(), "2");
-        assertEquals("Third beacon id should be 1", beacon.getId3().toString(), "3");
-
-    }
-
-    @Test
-    public void testBeaconsWithSameIdentifersAreEqual() {
-        Beacon beacon1 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        Beacon beacon2 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        assertEquals("Beacons with same identifiers are equal", beacon1, beacon2);
-    }
-
-    @Test
-    public void testBeaconsWithDifferentId1AreNotEqual() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Beacon beacon1 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        Beacon beacon2 = new AltBeacon.Builder().setMfgReserved(7).setId1("11").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        assertTrue("Beacons with different id1 are not equal", !beacon1.equals(beacon2));
-    }
-
-    @Test
-    public void testBeaconsWithDifferentId2AreNotEqual() {
-        Beacon beacon1 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        Beacon beacon2 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("12").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        assertTrue("Beacons with different id2 are not equal", !beacon1.equals(beacon2));
-    }
-
-    @Test
-    public void testBeaconsWithDifferentId3AreNotEqual() {
-        Beacon beacon1 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        Beacon beacon2 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("13").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        assertTrue("Beacons with different id3 are not equal", !beacon1.equals(beacon2));
-    }
-
-
-    @Test
-    public void testBeaconsWithSameMacsAreEqual() {
-        Beacon.setHardwareEqualityEnforced(true);
-        Beacon beacon1 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        Beacon beacon2 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        assertTrue("Beacons with same same macs are equal", beacon1.equals(beacon2));
-    }
-
-    @Test
-    public void testBeaconsWithDifferentMacsAreNotEqual() {
-        Beacon.setHardwareEqualityEnforced(true);
-        Beacon beacon1 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:6").build();
-        Beacon beacon2 = new AltBeacon.Builder().setMfgReserved(7).setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6)
-                .setBluetoothAddress("1:2:3:4:5:666666").build();
-        assertTrue("Beacons with different same macs are not equal", !beacon1.equals(beacon2));
-    }
-
-
-    @Test
-    public void testCalculateAccuracyWithRssiEqualsPower() {
-        Beacon.setDistanceCalculator(new ModelSpecificDistanceCalculator(null, null));
-        double accuracy = Beacon.calculateDistance(-55, -55);
-        assertEquals("Distance should be one meter if mRssi is the same as power", 1.0, accuracy, 0.1);
-    }
-
-    @Test
-    public void testCalculateAccuracyWithRssiGreaterThanPower() {
-        Beacon.setDistanceCalculator(new ModelSpecificDistanceCalculator(null, null));
-        double accuracy = Beacon.calculateDistance(-55, -50);
-        assertTrue("Distance should be under one meter if mRssi is less negative than power.  Accuracy was " + accuracy, accuracy < 1.0);
-    }
-
-    @Test
-    public void testCalculateAccuracyWithRssiLessThanPower() {
-        Beacon.setDistanceCalculator(new ModelSpecificDistanceCalculator(null, null));
-        double accuracy = Beacon.calculateDistance(-55, -60);
-        assertTrue("Distance should be over one meter if mRssi is less negative than power. Accuracy was "+accuracy,  accuracy > 1.0);
-    }
-
-    @Test
-    public void testCalculateAccuracyWithRssiEqualsPowerOnInternalProperties() {
-        Beacon.setDistanceCalculator(new ModelSpecificDistanceCalculator(null, null));
-        Beacon beacon = new Beacon.Builder().setTxPower(-55).setRssi(-55).build();
-        double distance = beacon.getDistance();
-        assertEquals("Distance should be one meter if mRssi is the same as power", 1.0, distance, 0.1);
-    }
-
-    @Test
-    public void testCalculateAccuracyWithRssiEqualsPowerOnInternalPropertiesAndRunningAverage() {
-        Beacon beacon = new Beacon.Builder().setTxPower(-55).setRssi(0).build();
-        beacon.setRunningAverageRssi(-55);
-        double distance = beacon.getDistance();
-        assertEquals("Distance should be one meter if mRssi is the same as power", 1.0, distance, 0.1);
-    }
-
-
-    @Test
-    public void testCanSerializeParcelable() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Parcel parcel = Parcel.obtain();
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothName("xx")
-                .setBluetoothAddress("1:2:3:4:5:6").setDataFields(Arrays.asList(100l)).build();
-        beacon.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        Beacon beacon2 = new Beacon(parcel);
-        assertEquals("Right number of identifiers after deserialization", 3, beacon2.mIdentifiers.size());
-        assertEquals("id1 is same after deserialization", beacon.getIdentifier(0), beacon2.getIdentifier(0));
-        assertEquals("id2 is same after deserialization", beacon.getIdentifier(1), beacon2.getIdentifier(1));
-        assertEquals("id3 is same after deserialization", beacon.getIdentifier(2), beacon2.getIdentifier(2));
-        assertEquals("txPower is same after deserialization", beacon.getTxPower(), beacon2.getTxPower());
-        assertEquals("rssi is same after deserialization", beacon.getRssi(), beacon2.getRssi());
-        assertEquals("distance is same after deserialization", beacon.getDistance(), beacon2.getDistance(), 0.001);
-        assertEquals("bluetoothAddress is same after deserialization", beacon.getBluetoothAddress(), beacon2.getBluetoothAddress());
-        assertEquals("bluetoothAddress is same after deserialization", beacon.getBluetoothName(), beacon2.getBluetoothName());
-        assertEquals("beaconTypeCode is same after deserialization", beacon.getBeaconTypeCode(), beacon2.getBeaconTypeCode());
-        assertEquals("manufacturer is same after deserialization", beacon.getManufacturer(), beacon2.getManufacturer());
-        assertEquals("data field 0 is the same after deserialization", beacon.getDataFields().get(0), beacon2.getDataFields().get(0));
-        assertEquals("data field 0 is the right value", beacon.getDataFields().get(0), (Long) 100l);
-    }
-
-    @Test
-    public void noDoubleWrappingOfExtraDataFields() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothName("xx")
-                .setBluetoothAddress("1:2:3:4:5:6").setDataFields(Arrays.asList(100l)).build();
-        List<Long> list = beacon.getExtraDataFields();
-        beacon.setExtraDataFields(list);
-        assertTrue("getter should return same object after first wrap ", beacon.getExtraDataFields() == list);
-    }
-
-    @Test
-    public void testHashCodeWithNullIdentifier() {
-        Beacon beacon = new AltBeacon.Builder()
-                .setIdentifiers(Arrays.asList(
-                        Identifier.parse("0x1234"),
-                        null))
-                .build();
-        assertTrue("hashCode() should not throw exception", beacon.hashCode() >= Integer.MIN_VALUE);
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java b/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
deleted file mode 100644
index 3eeac944..00000000
--- a/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.content.Context;
-import android.util.Log;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.Arrays;
-
-import static junit.framework.Assert.assertEquals;
-
-@Config(sdk = 18)
-
-/**
- * Created by dyoung on 7/22/14.
- */
-@RunWith(RobolectricTestRunner.class)
-public class BeaconTransmitterTest {
-    private static final String TAG = "BeaconTransmitterTest";
-
-    @Test
-    public void testBeaconAdvertisingBytes() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Context context = ShadowApplication.getInstance().getApplicationContext();
-
-        Beacon beacon = new Beacon.Builder()
-                .setId1("2f234454-cf6d-4a0f-adf2-f4911ba9ffa6")
-                .setId2("1")
-                .setId3("2")
-                .setManufacturer(0x0118)
-                .setTxPower(-59)
-                .setDataFields(Arrays.asList(0L))
-                .build();
-        BeaconParser beaconParser = new BeaconParser()
-                .setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
-        byte[] data = beaconParser.getBeaconAdvertisementData(beacon);
-        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
-        // TODO: can't actually start transmitter here because Robolectric does not support API 21
-
-        assertEquals("Data should be 24 bytes long", 24, data.length);
-        String byteString = "";
-        for (int i = 0; i < data.length; i++) {
-            byteString += String.format("%02X", data[i]);
-            byteString += " ";
-        }
-        assertEquals("Advertisement bytes should be as expected", "BE AC 2F 23 44 54 CF 6D 4A 0F AD F2 F4 91 1B A9 FF A6 00 01 00 02 C5 00 ", byteString);
-    }
-
-    @Test
-    public void testBeaconAdvertisingBytesForEddystone() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Context context = ShadowApplication.getInstance().getApplicationContext();
-
-        Beacon beacon = new Beacon.Builder()
-                .setId1("0x2f234454f4911ba9ffa6")
-                .setId2("0x000000000001")
-                .setManufacturer(0x0118)
-                .setTxPower(-59)
-                .build();
-        BeaconParser beaconParser = new BeaconParser()
-                .setBeaconLayout("s:0-1=feaa,m:2-2=00,p:3-3:-41,i:4-13,i:14-19");
-        byte[] data = beaconParser.getBeaconAdvertisementData(beacon);
-        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
-        // TODO: can't actually start transmitter here because Robolectric does not support API 21
-
-        String byteString = "";
-        for (int i = 0; i < data.length; i++) {
-            byteString += String.format("%02X", data[i]);
-            byteString += " ";
-        }
-        Log.d(TAG, "Advertising bytes are "+byteString );
-        assertEquals("Data should be 24 bytes long", 18, data.length);
-        assertEquals("Advertisement bytes should be as expected", "00 C5 2F 23 44 54 F4 91 1B A9 FF A6 00 00 00 00 00 01 ", byteString);
-    }
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/GattBeaconTest.java b/src/test/java/org/altbeacon/beacon/GattBeaconTest.java
deleted file mode 100644
index 57329ad7..00000000
--- a/src/test/java/org/altbeacon/beacon/GattBeaconTest.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.content.Context;
-
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
-import org.altbeacon.beacon.utils.UrlBeaconUrlCompressor;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.Arrays;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNotNull;
-
-@Config(sdk = 18)
-
-/**
- * Created by dyoung on 2/6/15.
- * This test verifies that a beacon can be parsed that uses a Gatt UUID
- */
-@RunWith(RobolectricTestRunner.class)
-public class GattBeaconTest {
-    @Test
-    public void testDetectsGattBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        System.err.println("verbose logging:"+LogManager.isVerboseLoggingEnabled());
-        byte[] bytes = hexStringToByteArray("020106030334121516341200e72f234454f4911ba9ffa6000000000001000000000000000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser().setBeaconLayout("s:0-1=1234,m:2-2=00,p:3-3:-41,i:4-13,i:14-19");
-        assertNotNull("Service uuid parsed should not be null", parser.getServiceUuid());
-        Beacon gattBeacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("GattBeacon should be not null if parsed successfully", gattBeacon);
-        assertEquals("id1 should be parsed", "0x2f234454f4911ba9ffa6", gattBeacon.getId1().toString());
-        assertEquals("id2 should be parsed", "0x000000000001", gattBeacon.getId2().toString());
-        assertEquals("serviceUuid should be parsed", 0x1234, gattBeacon.getServiceUuid());
-        assertEquals("txPower should be parsed", -66, gattBeacon.getTxPower());
-    }
-
-    @Test
-    public void testDetectsGattBeacon2MaxLength() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        byte[] bytes = hexStringToByteArray("020106030334121616341210ec007261646975736e6574776f726b7373070000000000000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser().setBeaconLayout("s:0-1=1234,m:2-2=10,p:3-3:-41,i:4-20v");
-        Beacon gattBeacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("GattBeacon should be not null if parsed successfully", gattBeacon);
-        assertEquals("GattBeacon identifier length should be proper length",
-                17,
-                gattBeacon.getId1().toByteArray().length);
-
-    }
-
-    @Test
-    public void testDetectsGattBeacon2WithShortIdentifier() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        LogManager.d("GattBeaconTest", "Parsing short packet");
-        byte[] bytes = hexStringToByteArray("020106030334121516341210ec007261646975736e6574776f726b7307000000000000000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser().setBeaconLayout("s:0-1=1234,m:2-2=10,p:3-3:-41,i:4-20v");
-        Beacon gattBeacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("GattBeacon should be not null if parsed successfully", gattBeacon);
-        assertEquals("GattBeacon identifier length should be adjusted smaller if packet is short",
-                     16,
-                     gattBeacon.getId1().toByteArray().length);
-        assertEquals("GattBeacon identifier should have proper first byte",
-                (byte)0x00,
-                gattBeacon.getId1().toByteArray()[0]);
-        assertEquals("GattBeacon identifier should have proper second to last byte",
-                (byte) 0x73,
-                gattBeacon.getId1().toByteArray()[14]);
-        assertEquals("GattBeacon identifier should have proper last byte",
-                (byte)0x07,
-                gattBeacon.getId1().toByteArray()[15]);
-
-    }
-
-
-    @Test
-    public void testDetectsEddystoneUID() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        byte[] bytes = hexStringToByteArray("0201060303aafe1516aafe00e700010203040506070809010203040506000000000000000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser().setBeaconLayout(BeaconParser.EDDYSTONE_UID_LAYOUT);
-        Beacon eddystoneUidBeacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("Eddystone-UID should be not null if parsed successfully", eddystoneUidBeacon);
-    }
-
-
-    @Test
-    public void testDetectsGattBeaconWithCnn() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        LogManager.d("GattBeaconTest", "Parsing short packet");
-        byte[] bytes = hexStringToByteArray("020106030334120a16341210ed00636e6e070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
-        BeaconParser parser = new BeaconParser().setBeaconLayout("s:0-1=1234,m:2-2=10,p:3-3:-41,i:4-20v");
-        LogManager.d("xxx", "------");
-        Beacon gattBeacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("GattBeacon should be not null if parsed successfully", gattBeacon);
-        assertEquals("GattBeacon identifier length should be adjusted smaller if packet is short",
-                5,
-                gattBeacon.getId1().toByteArray().length);
-    }
-
-    @Test
-    public void testBeaconAdvertisingBytes() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Context context = ShadowApplication.getInstance().getApplicationContext();
-
-
-        Beacon beacon = new Beacon.Builder()
-                .setId1("0x454452e29735323d81c0")
-                .setId2("0x060504030201")
-                .setDataFields(Arrays.asList(0x25l))
-                .setTxPower(-59)
-                .build();
-        // TODO: need to use something other than the d: prefix here for an internally generated field
-        BeaconParser beaconParser = new BeaconParser()
-                .setBeaconLayout("s:0-1=0123,m:2-2=00,d:3-3,p:4-4,i:5-14,i:15-20");
-        byte[] data = beaconParser.getBeaconAdvertisementData(beacon);
-        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
-        // TODO: can't actually start transmitter here because Robolectric does not support API 21
-
-        assertEquals("Data should be 19 bytes long", 19, data.length);
-        String byteString = "";
-        for (int i = 0; i < data.length; i++) {
-            byteString += String.format("%02X", data[i]);
-            byteString += " ";
-        }
-        assertEquals("Advertisement bytes should be as expected", "00 25 C5 45 44 52 E2 97 35 32 3D 81 C0 06 05 04 03 02 01 ", byteString);
-    }
-
-    @Test
-    public void testDetectsUriBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        //"https://goo.gl/hqBXE1"
-        byte[] bytes = {2, 1, 4, 3, 3, (byte) 216, (byte) 254, 19, 22, (byte) 216, (byte) 254, 0, (byte) 242, 3, 103, 111, 111, 46, 103, 108, 47, 104, 113, 66, 88, 69, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
-        BeaconParser parser = new BeaconParser().setBeaconLayout("s:0-1=fed8,m:2-2=00,p:3-3:-41,i:4-21v");
-        LogManager.d("xxx", "------");
-        Beacon uriBeacon = parser.fromScanData(bytes, -55, null);
-        assertNotNull("UriBeacon should be not null if parsed successfully", uriBeacon);
-        assertEquals("UriBeacon identifier length should be correct",
-                14,
-                uriBeacon.getId1().toByteArray().length);
-        String urlString = UrlBeaconUrlCompressor.uncompress(uriBeacon.getId1().toByteArray());
-        assertEquals("URL should be decompressed successfully", "https://goo.gl/hqBXE1", urlString);
-    }
-
-
-
-
-
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/IdentifierTest.java b/src/test/java/org/altbeacon/beacon/IdentifierTest.java
deleted file mode 100644
index 990340d8..00000000
--- a/src/test/java/org/altbeacon/beacon/IdentifierTest.java
+++ /dev/null
@@ -1,228 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.os.Parcel;
-
-import static android.test.MoreAsserts.assertNotEqual;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertTrue;
-
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.junit.Test;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.UUID;
-
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
- */
-
-public class IdentifierTest {
-    @Test
-    public void testEqualsNormalizationIgnoresCase() {
-        Identifier identifier1 = Identifier.parse("2f234454-cf6d-4a0f-adf2-f4911ba9ffa6");
-        Identifier identifier2 = Identifier.parse("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6");
-
-        assertTrue("Identifiers of different case should match", identifier1.equals(identifier2));
-    }
-
-    @Test
-    public void testToStringNormalizesCase() {
-        Identifier identifier1 = Identifier.parse("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6");
-
-        assertEquals("Identifiers of different case should match", "2f234454-cf6d-4a0f-adf2-f4911ba9ffa6", identifier1.toString());
-    }
-
-    @Test
-    public void testToStringEqualsUuid() {
-        Identifier identifier1 = Identifier.parse("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6");
-
-        assertEquals("uuidString of Identifier should match", "2f234454-cf6d-4a0f-adf2-f4911ba9ffa6", identifier1.toUuidString());
-    }
-
-    @Test
-    public void testToUuidEqualsToUuidString() {
-        Identifier identifier1 = Identifier.parse("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6");
-
-        assertEquals("uuidString of Identifier should match", identifier1.toUuid().toString(), identifier1.toUuidString());
-    }
-
-    @Test
-    public void testToByteArrayConvertsUuids() {
-        Identifier identifier1 = Identifier.parse("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6");
-        byte[] bytes = identifier1.toByteArrayOfSpecifiedEndianness(true);
-        assertEquals("byte array is correct length", bytes.length, 16);
-        assertEquals("first byte of uuid converted properly", 0x2f, bytes[0] & 0xFF);
-        assertEquals("second byte of uuid converted properly", 0x23, bytes[1] & 0xFF);
-        assertEquals("last byte of uuid converted properly", 0xa6, bytes[15] & 0xFF);
-    }
-
-    @Test
-    public void testToByteArrayConvertsUuidsAsLittleEndian() {
-        Identifier identifier1 = Identifier.parse("2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6");
-        byte[] bytes = identifier1.toByteArrayOfSpecifiedEndianness(false);
-        assertEquals("byte array is correct length", bytes.length, 16);
-        assertEquals("first byte of uuid converted properly", 0xa6, bytes[0] & 0xFF);
-        assertEquals("last byte of uuid converted properly", 0x2f, bytes[15] & 0xFF);
-    }
-
-    @Test
-    public void testToByteArrayConvertsHex() {
-        Identifier identifier1 = Identifier.parse("0x010203040506");
-        byte[] bytes = identifier1.toByteArrayOfSpecifiedEndianness(true);
-        assertEquals("byte array is correct length", bytes.length, 6);
-        assertEquals("first byte of hex is converted properly", 0x01, bytes[0] & 0xFF);
-        assertEquals("last byte of hex is converted properly", 0x06, bytes[5] & 0xFF);
-    }
-    @Test
-    public void testToByteArrayConvertsDecimal() {
-        Identifier identifier1 = Identifier.parse("65534");
-        byte[] bytes = identifier1.toByteArrayOfSpecifiedEndianness(true);
-        assertEquals("byte array is correct length", bytes.length, 2);
-        assertEquals("reported byte array is correct length", identifier1.getByteCount(), 2);
-        assertEquals("first byte of decimal converted properly", 0xff, bytes[0] & 0xFF);
-        assertEquals("last byte of decimal converted properly", 0xfe, bytes[1] & 0xFF);
-    }
-
-    @Test
-    public void testToByteArrayConvertsInt() {
-        Identifier identifier1 = Identifier.fromInt(65534);
-        byte[] bytes = identifier1.toByteArrayOfSpecifiedEndianness(true);
-        assertEquals("byte array is correct length", bytes.length, 2);
-        assertEquals("reported byte array is correct length", identifier1.getByteCount(), 2);
-        assertEquals("conversion back equals original value", identifier1.toInt(), 65534);
-        assertEquals("first byte of decimal converted properly", 0xff, bytes[0] & 0xFF);
-        assertEquals("last byte of decimal converted properly", 0xfe, bytes[1] & 0xFF);
-    }
-
-    @Test
-    public void testToByteArrayFromByteArray() {
-        byte[] value = new byte[] {(byte) 0xFF, (byte) 0xAB, 0x12, 0x25};
-        Identifier identifier1 = Identifier.fromBytes(value, 0, value.length, false);
-        byte[] bytes = identifier1.toByteArrayOfSpecifiedEndianness(true);
-
-        assertEquals("byte array is correct length", bytes.length, 4);
-        assertEquals("correct string representation", identifier1.toString(), "0xffab1225");
-        assertTrue("arrays equal", Arrays.equals(value, bytes));
-        assertNotSame("arrays are copied", bytes, value);
-    }
-
-    @Test
-    public void testComparableDifferentLength() {
-        byte[] value1 = new byte[] {(byte) 0xFF, (byte) 0xAB, 0x12, 0x25};
-        Identifier identifier1 = Identifier.fromBytes(value1, 0, value1.length, false);
-        byte[] value2 = new byte[] {(byte) 0xFF, (byte) 0xAB, 0x12, 0x25, 0x11, 0x11};
-        Identifier identifier2 = Identifier.fromBytes(value2, 0, value2.length, false);
-
-        assertEquals("identifier1 is smaller than identifier2", identifier1.compareTo(identifier2), -1);
-        assertEquals("identifier2 is larger than identifier1", identifier2.compareTo(identifier1), 1);
-    }
-
-    @Test
-    public void testComparableSameLength() {
-        byte[] value1 = new byte[] {(byte) 0xFF, (byte) 0xAB, 0x12, 0x25, 0x22, 0x25};
-        Identifier identifier1 = Identifier.fromBytes(value1, 0, value1.length, false);
-        byte[] value2 = new byte[] {(byte) 0xFF, (byte) 0xAB, 0x12, 0x25, 0x11, 0x11};
-        Identifier identifier2 = Identifier.fromBytes(value2, 0, value2.length, false);
-
-        assertEquals("identifier1 is equal to identifier2", identifier1.compareTo(identifier1), 0);
-        assertEquals("identifier1 is larger than identifier2", identifier1.compareTo(identifier2), 1);
-        assertEquals("identifier2 is smaller than identifier1", identifier2.compareTo(identifier1), -1);
-    }
-
-    @Test
-    public void testParseIntegerMaxInclusive() {
-        Identifier.parse("65535");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testParseIntegerAboveMax() {
-        Identifier.parse("65536");
-    }
-
-    @Test
-    public void testParseIntegerMinInclusive() {
-        Identifier.parse("0");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testParseIntegerBelowMin() {
-        Identifier.parse("-1");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testParseIntegerWayTooBig() {
-        Identifier.parse("3133742");
-    }
-
-    /*
-     * This is here because Identifier.parse wrongly accepts UUIDs without
-     * dashes, but we want to be backward compatible.
-     */
-    @Test
-    public void testParseInvalidUuid() {
-        UUID ref = UUID.fromString("2f234454-cf6d-4a0f-adf2-f4911ba9ffa6");
-        Identifier id = Identifier.parse("2f234454cf6d4a0fadf2f4911ba9ffa6");
-        assertEquals("Malformed UUID was parsed as expected.", id.toUuid(), ref);
-    }
-
-    @Test
-    public void testParseHexWithNoPrefix() {
-        Identifier id = Identifier.parse("abcd");
-        assertEquals("Should parse and get back equivalent decimal value for small numbers", "43981", id.toString());
-    }
-
-    @Test
-    public void testParseBigHexWithNoPrefix() {
-        Identifier id = Identifier.parse("123456789abcdef");
-        assertEquals("Should parse and get prefixed hex value for big numbers", "0x0123456789abcdef", id.toString());
-    }
-    @Test
-    public void testParseZeroPrefixedDecimalNumberAsHex() {
-        Identifier id = Identifier.parse("0010");
-        assertEquals("Should be treated as hex in parse, but converted back to decimal because it is small", "16", id.toString());
-    }
-    @Test
-    public void testParseNonZeroPrefixedDecimalNumberAsDecimal() {
-        Identifier id = Identifier.parse("10");
-        assertEquals("Should be treated as decimal", "10", id.toString());
-    }
-    @Test
-    public void testParseDecimalNumberWithSpecifiedLength() {
-        Identifier id = Identifier.parse("10", 8);
-        assertEquals("Should be treated as hex because it is long", "0x000000000000000a", id.toString());
-        assertEquals("Byte count should be as specified", 8, id.getByteCount());
-    }
-    @Test
-    public void testParseDecimalNumberWithSpecifiedShortLength() {
-        Identifier id = Identifier.parse("10", 2);
-        assertEquals("Should be treated as decimal because it is short", "10", id.toString());
-        assertEquals("Byte count should be as specified", 2, id.getByteCount());
-    }
-    @Test
-    public void testParseHexNumberWithSpecifiedLength() {
-        Identifier id = Identifier.parse("2fffffffffffffffffff", 10);
-        assertEquals("Should be treated as hex because it is long", "0x2fffffffffffffffffff", id.toString());
-        assertEquals("Byte count should be as specified", 10, id.getByteCount());
-    }
-    @Test
-    public void testParseZeroAsInteger() {
-        Identifier id = Identifier.parse("0");
-        assertEquals("Should be treated as int because it is a common integer", "0", id.toString());
-        assertEquals("Byte count should be 2 for integers", 2, id.getByteCount());
-    }
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/RegionTest.java b/src/test/java/org/altbeacon/beacon/RegionTest.java
deleted file mode 100644
index 4d003273..00000000
--- a/src/test/java/org/altbeacon/beacon/RegionTest.java
+++ /dev/null
@@ -1,189 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.os.Parcel;
-
-import static android.test.MoreAsserts.assertNotEqual;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
-
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.junit.Test;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.Collections;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
- */
-public class RegionTest {
-    @Test
-    public void testBeaconMatchesRegionWithSameIdentifiers() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", Identifier.parse("1"), Identifier.parse("2"), Identifier.parse("3"));
-        assertTrue("Beacon should match region with all identifiers the same", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithSameIdentifier1() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", Identifier.parse("1"), null, null);
-        assertTrue("Beacon should match region with first identifier the same", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithSameIdentifier1And2() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", Identifier.parse("1"), Identifier.parse("2"), null);
-        assertTrue("Beacon should match region with first two identifiers the same", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithDifferentIdentifier1() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", Identifier.parse("22222"), null, null);
-        assertTrue("Beacon should not match region with first identifier different", !region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithShorterIdentifierList() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", Collections.singletonList(Identifier.parse("1")));
-        assertTrue("Beacon should match region with first identifier equal and shorter Identifier list", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithSingleNullIdentifierList() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        ArrayList<Identifier> identifiers=new ArrayList<>();
-        identifiers.add(null);
-        Region region=new Region("all-beacons-region",identifiers);
-        assertTrue("Beacon should match region with first identifier null and shorter Identifier list", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconDoesntMatchRegionWithLongerIdentifierList() {
-        Beacon beacon = new Beacon.Builder().setId1("1").setId2("2").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", Identifier.parse("1"), Identifier.parse("2"), Identifier.parse("3"));
-        assertFalse("Beacon should not match region with more identifers than the beacon", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconDoesMatchRegionWithLongerIdentifierListWithSomeNull() {
-        Beacon beacon = new Beacon.Builder().setId1("1").setId2("2").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("1:2:3:4:5:6").build();
-        Region region = new Region("myRegion", null, null, null);
-        assertTrue("Beacon should match region with more identifers than the beacon, if the region identifiers are null", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithSameBluetoothMac() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("01:02:03:04:05:06").build();
-        Region region = new Region("myRegion", "01:02:03:04:05:06");
-        assertTrue("Beacon should match region with mac the same", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconDoesNotMatchRegionWithDiffrentBluetoothMac() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("01:02:03:04:05:06").build();
-        Region region = new Region("myRegion", "01:02:03:04:05:99");
-        assertFalse("Beacon should match region with mac the same", region.matchesBeacon(beacon));
-    }
-
-    @Test
-    public void testBeaconMatchesRegionWithSameBluetoothMacAndIdentifiers() {
-        Beacon beacon = new AltBeacon.Builder().setId1("1").setId2("2").setId3("3").setRssi(4)
-                .setBeaconTypeCode(5).setTxPower(6).setBluetoothAddress("01:02:03:04:05:06").build();
-        ArrayList identifiers = new ArrayList<Identifier>();
-        identifiers.add(Identifier.parse("1"));
-        identifiers.add(Identifier.parse("2"));
-        identifiers.add(Identifier.parse("3"));
-        Region region = new Region("myRegion", identifiers , "01:02:03:04:05:06");
-        assertTrue("Beacon should match region with mac the same", region.matchesBeacon(beacon));
-    }
-
-
-    @Test
-    public void testCanSerializeParcelable() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Parcel parcel = Parcel.obtain();
-        Region region = new Region("myRegion", Identifier.parse("1"), Identifier.parse("2"), null);
-        region.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        Region region2 = new Region(parcel);
-        assertEquals("Right number of identifiers after deserialization", 3, region2.mIdentifiers.size());
-        assertEquals("uniqueId is same after deserialization", region.getUniqueId(), region2.getUniqueId());
-        assertEquals("id1 is same after deserialization", region.getIdentifier(0), region2.getIdentifier(0));
-        assertEquals("id2 is same after deserialization", region.getIdentifier(1), region2.getIdentifier(1));
-        assertNull("id3 is null before deserialization", region.getIdentifier(2));
-        assertNull("id3 is null after deserialization", region2.getIdentifier(2));
-    }
-
-    @Test
-    public void testCanSerializeParcelableWithMac() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Parcel parcel = Parcel.obtain();
-        Region region = new Region("myRegion", "1B:2a:03:4C:6E:9F");
-        region.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        Region region2 = new Region(parcel);
-        assertEquals("Right number of identifiers after deserialization", 0, region2.mIdentifiers.size());
-        assertEquals("ac is same after deserialization", region.getBluetoothAddress(), region2.getBluetoothAddress());
-    }
-
-    @Test
-    public void rejectsInvalidMac() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        Parcel parcel = Parcel.obtain();
-        try {
-            Region region = new Region("myRegion", "this string is not a valid mac address!");
-            assertTrue("IllegalArgumentException should have been thrown", false);
-        }
-        catch (IllegalArgumentException e) {
-            assertEquals("Error message should be as expected",
-                    "Invalid mac address: 'this string is not a valid mac address!' Must be 6 hex bytes separated by colons.",
-                    e.getMessage());
-        }
-    }
-
-
-    @Test
-    public void testToString() {
-        Region region = new Region("myRegion", Identifier.parse("1"), Identifier.parse("2"), null);
-        assertEquals("id1: 1 id2: 2 id3: null", region.toString());
-    }
-
-    @Test
-    public void testConvenienceIdentifierAccessors() {
-        Region region = new Region("myRegion", Identifier.parse("1"), Identifier.parse("2"), Identifier.parse("3"));
-        assertEquals("1", region.getId1().toString());
-        assertEquals("2", region.getId2().toString());
-        assertEquals("3", region.getId3().toString());
-    }
-
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/SBeaconTest.java b/src/test/java/org/altbeacon/beacon/SBeaconTest.java
deleted file mode 100644
index 6918cda0..00000000
--- a/src/test/java/org/altbeacon/beacon/SBeaconTest.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package org.altbeacon.beacon;
-
-import android.annotation.TargetApi;
-import android.bluetooth.BluetoothDevice;
-import android.os.Build;
-import android.os.Parcel;
-
-
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
-import org.junit.Test;
-
-import java.util.ArrayList;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNotNull;
-import org.robolectric.annotation.Config;
-
-@Config(sdk = 18)
-
-/**
- * Created by dyoung on 7/22/14.
- */
-public class SBeaconTest {
-
-    @Test
-    public void testDetectsSBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1bff1801031501000100c502000000000000000003");
-        SBeaconParser parser = new SBeaconParser();
-        SBeacon sBeacon = (SBeacon) parser.fromScanData(bytes, -55, null);
-        assertNotNull("SBeacon should be not null if parsed successfully", sBeacon);
-        assertEquals("id should be parsed", "0x000000000003", sBeacon.getId());
-        assertEquals("group should be parsed", 1, sBeacon.getGroup());
-        assertEquals("time should be parsed", 2, sBeacon.getTime());
-        assertEquals("txPower should be parsed", -59, sBeacon.getTxPower());
-    }
-
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-
-    class SBeacon extends Beacon {
-        private static final String TAG = "SBeacon";
-        private int mTime;
-
-        protected SBeacon(int group, String id, int time, int txPower, int rssi, int beaconTypeCode, String bluetoothAddress) {
-            super();
-            mTxPower = txPower;
-            mRssi = rssi;
-            mBeaconTypeCode = beaconTypeCode;
-            mBluetoothAddress = bluetoothAddress;
-            mIdentifiers = new ArrayList<Identifier>(2);
-            mIdentifiers.add(Identifier.fromInt(group));
-            mIdentifiers.add(Identifier.parse(id));
-            mTime = time;
-            //BeaconManager.logDebug(TAG, "constructed a new sbeacon with id2: " + getIdentifier(2));
-        }
-
-        public int getGroup() {
-            return mIdentifiers.get(0).toInt();
-        }
-        public int getTime() {
-            return mTime;
-        }
-        public String getId() {
-            return mIdentifiers.get(1).toString();
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel dest, int flags) {
-            // TODO: Implement me
-        }
-
-        protected SBeacon(Parcel in) {
-            // TODO: Implement me
-        }
-    }
-
-    class SBeaconParser extends BeaconParser {
-        private static final String TAG = "SBeaconParser";
-        @TargetApi(Build.VERSION_CODES.ECLAIR)
-        @Override
-        public Beacon fromScanData(byte[] scanData, int rssi, BluetoothDevice device) {
-            int startByte = 2;
-            while (startByte <= 5) {
-                // "m:2-3=0203,i:2-2,i:7-8,i:14-19,d:10-13,p:9-9"
-                if (((int)scanData[startByte+3] & 0xff) == 0x03 &&
-                        ((int)scanData[startByte+4] & 0xff) == 0x15) {
-                    //BeaconManager.logDebug(TAG, "This is a SBeacon beacon advertisement");
-                    // startByte+0 company id (2 bytes)
-                    // startByte+2 = 02 (1) byte header
-                    // startByte+3 = 0315 (2 bytes) header
-                    // startByte+5 = Beacon Type 0x01
-                    // startByte+6 = Reserved (1 bytes)
-                    // startByte+7 = Security Code (2 bytes) => Major little endian
-                    // startByte+9 = Tx Power => Tx Power
-                    // startByte+10 = Timestamp (4 bytes) => Minor (2 LSBs) little endian
-                    // startByte+14 = Beacon ID (6 bytes) -> UUID little endian
-                    int group = (scanData[startByte+8] & 0xff) * 0x100 + (scanData[startByte+7] & 0xff);
-                    int clock = (scanData[startByte+13] & 0xff) * 0x1000000 + (scanData[startByte+12] & 0xff) * 0x10000 + (scanData[startByte+11] & 0xff) * 0x100 + (scanData[startByte+10] & 0xff);
-                    int txPower = (int)scanData[startByte+9]; // this one is signed
-
-                    byte[] beaconId = new byte[6];
-                    System.arraycopy(scanData, startByte+14, beaconId, 0, 6);
-                    String hexString = bytesToHex(beaconId);
-                    StringBuilder sb = new StringBuilder();
-                    sb.append(hexString.substring(0,12));
-                    String id = "0x" + sb.toString();
-                    int beaconTypeCode = (scanData[startByte+3] & 0xff) * 0x100 + (scanData[startByte+2] & 0xff);
-
-
-                    String mac = null;
-                    if (device != null) {
-                        mac = device.getAddress();
-                    }
-                    Beacon beacon = new SBeacon(group, id, clock, txPower, rssi, beaconTypeCode, mac);
-                    return beacon;
-                }
-                startByte++;
-            }
-            return null;
-        }
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java b/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
deleted file mode 100644
index 7b8071f3..00000000
--- a/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package org.altbeacon.beacon.distance;
-
-import android.content.Context;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static org.junit.Assert.assertEquals;
-
-
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-/*
-HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
-
-1. set a line like this at the start of your test:
-           org.robolectric.shadows.ShadowLog.stream = System.err;
-2. run the tests from the command line
-3. Look at the test report file in your web browser, e.g.
-   file:///Users/dyoung/workspace/AndroidProximityLibrary/build/reports/tests/index.html
-4. Expand the System.err section
-/**
- * Created by dyoung on 8/28/14.
- */
-public class ModelSpecificDistanceCalculatorTest {
-    @Test
-    public void testCalculatesDistance() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-
-        ModelSpecificDistanceCalculator distanceCalculator = new ModelSpecificDistanceCalculator(null, null);
-        Double distance = distanceCalculator.calculateDistance(-59, -59);
-        assertEquals("Distance should be 1.0 for same power and rssi", 1.0, distance, 0.1);
-    }
-
-    @Test
-    public void testSelectsDefaultModel() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-
-        ModelSpecificDistanceCalculator distanceCalculator = new ModelSpecificDistanceCalculator(null, null);
-        assertEquals("Default model should be Nexus 5", "Nexus 5", distanceCalculator.getModel().getModel());
-    }
-
-    @Test
-    public void testSelectsNexus4OnExactMatch() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        AndroidModel model = new AndroidModel("4.4.2", "KOT49H","Nexus 4","LGE");
-
-        ModelSpecificDistanceCalculator distanceCalculator = new ModelSpecificDistanceCalculator(null, null, model);
-        assertEquals("should be Nexus 4", "Nexus 4", distanceCalculator.getModel().getModel());
-    }
-
-	@Test
-	public void testCalculatesDistanceForMotoXPro() {
-		final Context applicationContext = ShadowApplication.getInstance().getApplicationContext();
-		org.robolectric.shadows.ShadowLog.stream = System.err;
-
-		final AndroidModel model = new AndroidModel("5.0.2", "LXG22.67-7.1", "Moto X Pro", "XT1115");
-		ModelSpecificDistanceCalculator distanceCalculator = new ModelSpecificDistanceCalculator(applicationContext, null, model);
-		assertEquals("should be Moto X Pro", "Moto X Pro", distanceCalculator.getModel().getModel());
-		Double distance = distanceCalculator.calculateDistance(-49, -58);
-		assertEquals("Distance should be as predicted by coefficients at 3 meters", 2.661125466, distance, 0.1);
-	}
-
-	@Test
-	public void testConcurrentModificationException() {
-		org.robolectric.shadows.ShadowLog.stream = System.err;
-
-		final Context applicationContext = ShadowApplication.getInstance().getApplicationContext();
-
-		final AndroidModel model = new AndroidModel("4.4.2", "KOT49H", "Nexus 4", "LGE");
-		final String modelMapJson =
-				"{\"models\":[ \"coefficient1\": 0.89976,\"coefficient2\": 7.7095,\"coefficient3\": 0.111," +
-				"\"version\":\"4.4.2\",\"build_number\":\"KOT49H\",\"model\":\"Nexus 4\"," +
-				"\"manufacturer\":\"LGE\"},{\"coefficient1\": 0.42093,\"coefficient2\": 6.9476," +
-				"\"coefficient3\": 0.54992,\"version\":\"4.4.2\",\"build_number\":\"LPV79\"," +
-				"\"model\":\"Nexus 5\",\"manufacturer\":\"LGE\",\"default\": true}]}";
-		final ModelSpecificDistanceCalculator distanceCalculator =
-				new ModelSpecificDistanceCalculator(applicationContext, null, model);
-
-		Runnable runnable2 = new Runnable() {
-			@Override
-			public void run() {
-				try {
-					while (true) {
-						distanceCalculator.buildModelMapWithLock(modelMapJson);
-					}
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-			}
-		};
-
-		Thread thread2 = new Thread(runnable2);
-		thread2.start();
-
-		int i = 0;
-		while (++i < 1000 && thread2.getState() != Thread.State.TERMINATED) {
-			distanceCalculator.findCalculatorForModelWithLock(model);
-		}
-
-		thread2.interrupt();
-	}
-}
diff --git a/src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java b/src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java
deleted file mode 100644
index 4f1e2280..00000000
--- a/src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright 2015 Radius Networks, Inc.
- * Copyright 2015 Andrew Reitz
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.altbeacon.beacon.logging;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import static org.mockito.Mockito.verify;
-
-/**
- * Tests for LogManager, ensuring correct delegation and expectations are met.
- *
- * @author Andrew Reitz
- */
-public class LogManagerTest {
-
-    @Mock
-    Logger logger;
-
-    @Before
-    public void setup() {
-        MockitoAnnotations.initMocks(this);
-        LogManager.setLogger(logger);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void canNotSetNullLogger() {
-        LogManager.setLogger(null);
-    }
-
-    @Test
-    public void verbose() {
-        String tag = "TestTag";
-        String message = "Test message";
-
-        LogManager.v(tag, message);
-
-        verify(logger).v(tag, message);
-    }
-
-    @Test
-    public void verboseWithThrowable() {
-        String tag = "TestTag";
-        String message = "Test message";
-        Throwable t = new Throwable();
-
-        LogManager.v(t, tag, message);
-
-        verify(logger).v(t, tag, message);
-    }
-
-    @Test
-    public void debug() {
-        String tag = "TestTag";
-        String message = "Test message";
-
-        LogManager.d(tag, message);
-
-        verify(logger).d(tag, message);
-    }
-
-    @Test
-    public void debugWithThrowable() {
-        String tag = "TestTag";
-        String message = "Test message";
-        Throwable t = new Throwable();
-
-        LogManager.d(t, tag, message);
-
-        verify(logger).d(t, tag, message);
-    }
-
-    @Test
-    public void info() {
-        String tag = "TestTag";
-        String message = "Test message";
-
-        LogManager.i(tag, message);
-
-        verify(logger).i(tag, message);
-    }
-
-    @Test
-    public void infoWithThrowable() {
-        String tag = "TestTag";
-        String message = "Test message";
-        Throwable t = new Throwable();
-
-        LogManager.i(t, tag, message);
-
-        verify(logger).i(t, tag, message);
-    }
-
-    @Test
-    public void warning() {
-        String tag = "TestTag";
-        String message = "Test message";
-
-        LogManager.w(tag, message);
-
-        verify(logger).w(tag, message);
-    }
-
-    @Test
-    public void warningWithThrowable() {
-        String tag = "TestTag";
-        String message = "Test message";
-        Throwable t = new Throwable();
-
-        LogManager.w(t, tag, message);
-
-        verify(logger).w(t, tag, message);
-    }
-
-    @Test
-    public void error() {
-        String tag = "TestTag";
-        String message = "Test message";
-
-        LogManager.e(tag, message);
-
-        verify(logger).e(tag, message);
-    }
-
-    @Test
-    public void errorWithThrowable() {
-        String tag = "TestTag";
-        String message = "Test message";
-        Throwable t = new Throwable();
-
-        LogManager.e(t, tag, message);
-
-        verify(logger).e(t, tag, message);
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/logging/LoggersTest.java b/src/test/java/org/altbeacon/beacon/logging/LoggersTest.java
deleted file mode 100644
index 80a38880..00000000
--- a/src/test/java/org/altbeacon/beacon/logging/LoggersTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright 2015 Radius Networks, Inc.
- * Copyright 2015 Andrew Reitz
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.altbeacon.beacon.logging;
-
-import org.junit.Test;
-
-import static org.hamcrest.Matchers.instanceOf;
-import static org.hamcrest.Matchers.sameInstance;
-import static org.junit.Assert.assertThat;
-
-/**
- * Ensure correct instances are returned from factory methods.
- *
- * @author Andrew Reitz
- */
-public class LoggersTest {
-    @Test
-    public void loggersReturnsVerboseInstance() {
-        Logger logger = Loggers.verboseLogger();
-
-        assertThat(logger, instanceOf(VerboseAndroidLogger.class));
-    }
-
-    @Test
-    public void verboseLoggerReturnsSameInstance() {
-        Logger logger1 = Loggers.verboseLogger();
-        Logger logger2 = Loggers.verboseLogger();
-
-        assertThat(logger1, sameInstance(logger2));
-    }
-
-    @Test
-    public void loggersReturnsEmptyInstance() {
-        Logger logger = Loggers.empty();
-
-        assertThat(logger, instanceOf(EmptyLogger.class));
-    }
-
-    @Test
-    public void emptyLoggerReturnsSameInstance() {
-        Logger logger1 = Loggers.empty();
-        Logger logger2 = Loggers.empty();
-
-        assertThat(logger1, sameInstance(logger2));
-    }
-
-    @Test
-    public void loggersReturnsWarningLoggerInstance() {
-        Logger logger = Loggers.warningLogger();
-
-        assertThat(logger, instanceOf(WarningAndroidLogger.class));
-    }
-
-    @Test
-    public void warningLoggerReturnsSameInstance() {
-        Logger logger1 = Loggers.warningLogger();
-        Logger logger2 = Loggers.warningLogger();
-
-        assertThat(logger1, sameInstance(logger2));
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java b/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
deleted file mode 100644
index 218c4f71..00000000
--- a/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright 2015 Radius Networks, Inc.
- * Copyright 2015 Andrew Reitz
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.altbeacon.beacon.logging;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import static android.util.Log.DEBUG;
-import static android.util.Log.ERROR;
-import static android.util.Log.INFO;
-import static android.util.Log.VERBOSE;
-import static android.util.Log.WARN;
-import static junit.framework.Assert.assertEquals;
-
-/**
- * Ensure the verbose logger logs correctly.
- *
- * @author Andrew Reitz
- */
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-public class VerboseAndroidLoggerTest {
-    private String tag = getClass().getName();
-    private Logger logger = new VerboseAndroidLogger();
-
-    @Test
-    public void verboseLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.v(tag, "Hello %s", "World");
-
-        assertLogged(VERBOSE, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void verboseWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.v(t, tag, "Hello %s", "World");
-
-        assertLogged(VERBOSE, tag, expectedMessage, t);
-    }
-
-    @Test
-    public void debugLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.d(tag, "Hello %s", "World");
-
-        assertLogged(DEBUG, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void debugWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.d(t, tag, "Hello %s", "World");
-
-        assertLogged(DEBUG, tag, expectedMessage, t);
-    }
-
-    @Test
-    public void infoLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.v(tag, "Hello %s", "World");
-
-        assertLogged(VERBOSE, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void infoWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.i(t, tag, "Hello %s", "World");
-
-        assertLogged(INFO, tag, expectedMessage, t);
-    }
-
-    @Test
-    public void warningLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.w(tag, "Hello %s", "World");
-
-        assertLogged(WARN, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void warningWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.w(t, tag, "Hello %s", "World");
-
-        assertLogged(WARN, tag, expectedMessage, t);
-    }
-
-    @Test
-    public void errorLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.e(tag, "Hello %s", "World");
-
-        assertLogged(ERROR, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void errorWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.e(t, tag, "Hello %s", "World");
-
-        assertLogged(ERROR, tag, expectedMessage, t);
-    }
-
-    private void assertLogged(int type, String tag, String msg, Throwable throwable) {
-        ShadowLog.LogItem lastLog = ShadowLog.getLogs().get(0);
-        assertEquals(type, lastLog.type);
-        assertEquals(msg, lastLog.msg);
-        assertEquals(tag, lastLog.tag);
-        assertEquals(throwable, lastLog.throwable);
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java b/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
deleted file mode 100644
index 1f8387f3..00000000
--- a/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright 2015 Radius Networks, Inc.
- * Copyright 2015 Andrew Reitz
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.altbeacon.beacon.logging;
-
-import org.hamcrest.Matchers;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import java.util.List;
-
-import static android.util.Log.DEBUG;
-import static android.util.Log.ERROR;
-import static android.util.Log.INFO;
-import static android.util.Log.VERBOSE;
-import static android.util.Log.WARN;
-import static junit.framework.Assert.assertEquals;
-import static org.hamcrest.Matchers.empty;
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertThat;
-
-/**
- * Ensure the warning logger logs correctly.
- *
- * @author Andrew Reitz
- */
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-public class WarningAndroidLoggerTest {
-    private String tag = getClass().getName();
-    private Logger logger = new WarningAndroidLogger();
-
-    @Test
-    public void verboseNotLogged() {
-        logger.v(tag, "Hello %s", "World");
-
-        assertNotLogged();
-    }
-
-    @Test
-    public void verboseWithThrowableNotLogged() {
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.v(t, tag, "Hello %s", "World");
-
-        assertNotLogged();
-    }
-
-    @Test
-    public void debugNotLogged() {
-        String expectedTag = "TestTag";
-
-        logger.d(expectedTag, "Hello %s", "World");
-
-        assertNotLogged();
-    }
-
-    @Test
-    public void debugWithThrowableNotLogged() {
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.d(t, tag, "Hello %s", "World");
-
-        assertNotLogged();
-    }
-
-    @Test
-    public void infoNotLogged() {
-        String expectedTag = "TestTag";
-
-        logger.v(expectedTag, "Hello %s", "World");
-
-        assertNotLogged();
-    }
-
-    @Test
-    public void infoWithThrowableNotLogged() {
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.i(t, tag, "Hello %s", "World");
-
-        assertNotLogged();
-    }
-
-    @Test
-    public void warningLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.w(tag, "Hello %s", "World");
-
-        assertLogged(WARN, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void warningWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.w(t, tag, "Hello %s", "World");
-
-        assertLogged(WARN, tag, expectedMessage, t);
-    }
-
-    @Test
-    public void errorLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-
-        logger.e(tag, "Hello %s", "World");
-
-        assertLogged(ERROR, tag, expectedMessage, null);
-    }
-
-    @Test
-    public void errorWithThrowableLoggedCorrectly() {
-        String expectedMessage = "Hello World";
-        Throwable t = new Throwable("Test Throwable");
-
-        logger.e(t, tag, "Hello %s", "World");
-
-        assertLogged(ERROR, tag, expectedMessage, t);
-    }
-
-    private void assertLogged(int type, String tag, String msg, Throwable throwable) {
-        ShadowLog.LogItem lastLog = ShadowLog.getLogs().get(0);
-        assertEquals(type, lastLog.type);
-        assertEquals(msg, lastLog.msg);
-        assertEquals(tag, lastLog.tag);
-        assertEquals(throwable, lastLog.throwable);
-    }
-
-    private void assertNotLogged() {
-        final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
-        assertThat(logs, empty());
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java b/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
deleted file mode 100644
index 49850a95..00000000
--- a/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package org.altbeacon.beacon.org.altbeacon.beacon.simulator;
-
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import org.altbeacon.beacon.AltBeacon;
-import org.altbeacon.beacon.AltBeaconParser;
-import org.altbeacon.beacon.Beacon;
-import org.altbeacon.beacon.simulator.StaticBeaconSimulator;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import java.lang.Override;
-import java.util.ArrayList;
-import java.util.List;
-
-import dalvik.annotation.TestTarget;
-import org.robolectric.annotation.Config;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-public class BeaconSimulatorTest {
-
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-
-    @BeforeClass
-    public static void testSetup() {
-    }
-
-    @AfterClass
-    public static void testCleanup() {
-        // Teardown for data used by the unit tests
-    }
-
-    @Test
-    public void testSetBeacons(){
-        StaticBeaconSimulator staticBeaconSimulator = new StaticBeaconSimulator();
-        byte[] beaconBytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509");
-        Beacon beacon = new AltBeaconParser().fromScanData(beaconBytes, -55, null);
-        ArrayList<Beacon> beacons = new ArrayList<Beacon>();
-        beacons.add(beacon);
-        staticBeaconSimulator.setBeacons(beacons);
-        assertEquals("getBeacons should match values entered with setBeacons", staticBeaconSimulator.getBeacons(), beacons);
-    }
-
-    @Test
-    public void testSetBeaconsEmpty(){
-        StaticBeaconSimulator staticBeaconSimulator = new StaticBeaconSimulator();
-        ArrayList<Beacon> beacons = new ArrayList<Beacon>();
-        staticBeaconSimulator.setBeacons(beacons);
-        assertEquals("getBeacons should match values entered with setBeacons even when empty", staticBeaconSimulator.getBeacons(), beacons);
-    }
-
-    @Test
-    public void testSetBeaconsNull(){
-        StaticBeaconSimulator staticBeaconSimulator = new StaticBeaconSimulator();
-        staticBeaconSimulator.setBeacons(null);
-        assertEquals("getBeacons should return null",staticBeaconSimulator.getBeacons(), null);
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java b/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
deleted file mode 100644
index 80fd0c4f..00000000
--- a/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.altbeacon.beacon.service;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
-
-public class ArmaRssiFilterTest {
-
-    @Test
-    public void initTest1() {
-        ArmaRssiFilter filter = new ArmaRssiFilter();
-        filter.addMeasurement(-50);
-        assertEquals("First measurement should be -50", String.valueOf(filter.calculateRssi()), "-50.0");
-    }
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java b/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
deleted file mode 100644
index 37be84e9..00000000
--- a/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package org.altbeacon.beacon.service;
-
-import android.annotation.TargetApi;
-import android.os.AsyncTask;
-import android.os.Build;
-
-import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
-import org.altbeacon.beacon.service.scanner.CycledLeScanCallback;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.util.ServiceController;
-
-import java.util.concurrent.ThreadPoolExecutor;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * Created by dyoung on 7/1/15.
- */
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
-public class BeaconServiceTest {
-
-    @Before
-    public void before() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        BeaconManager.setsManifestCheckingDisabled(true);
-    }
-
-    /**
-     * This test verifies that processing a beacon in a scan (which starts its own thread) does not
-     * affect the size of the available threads in the main Android AsyncTask.THREAD_POOL_EXECUTOR
-     * @throws Exception
-     */
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @Test
-    public void beaconScanCallbackTest() throws Exception {
-        final ServiceController<BeaconService> beaconServiceServiceController =
-                Robolectric.buildService(BeaconService.class);
-        beaconServiceServiceController.attach();
-        BeaconService beaconService = beaconServiceServiceController.get();
-        beaconService.onCreate();
-        CycledLeScanCallback callback = beaconService.mCycledLeScanCallback;
-
-        ThreadPoolExecutor executor = (ThreadPoolExecutor) AsyncTask.THREAD_POOL_EXECUTOR;
-        int activeThreadCountBeforeScan = executor.getActiveCount();
-
-        byte[] scanRecord = new byte[1];
-        callback.onLeScan(null, -59, scanRecord);
-
-        int activeThreadCountAfterScan = executor.getActiveCount();
-
-        assertEquals("The size of the Android thread pool should be unchanged by beacon scanning",
-                activeThreadCountBeforeScan, activeThreadCountAfterScan);
-
-        // Need to sleep here until the thread in the above method completes, otherwise an exception
-        // is thrown.  Maybe we don't care about this exception, so we could remove this.
-        Thread.sleep(100);
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java b/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
deleted file mode 100644
index cc7dcd99..00000000
--- a/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package org.altbeacon.beacon.service;
-
-import org.altbeacon.beacon.Beacon;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import dalvik.annotation.TestTargetClass;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertNotEquals;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
-public class ExtraDataBeaconTrackerTest {
-    Beacon getManufacturerBeacon() {
-        return new Beacon.Builder().setId1("1")
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .build();
-    }
-
-    Beacon getGattBeacon() {
-        return new Beacon.Builder().setId1("1")
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .setServiceUuid(1234)
-                .build();
-    }
-
-    Beacon getGattBeaconUpdate() {
-        return new Beacon.Builder().setId1("1")
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .setServiceUuid(1234)
-                .setRssi(-50)
-                .setDataFields(getDataFields())
-                .build();
-    }
-
-    List<Long> getDataFields() {
-        List<Long> list = new ArrayList<Long>();
-        list.add(1l);
-        list.add(2l);
-        return list;
-    }
-
-    List<Long> getDataFields2() {
-        List<Long> list = new ArrayList<Long>();
-        list.add(3l);
-        list.add(4l);
-        return list;
-    }
-
-    Beacon getGattBeaconExtraData() {
-        return new Beacon.Builder()
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .setServiceUuid(1234)
-                .setDataFields(getDataFields())
-                .build();
-    }
-
-    Beacon getGattBeaconExtraData2() {
-        return new Beacon.Builder()
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .setServiceUuid(1234)
-                .setDataFields(getDataFields2())
-                .build();
-    }
-
-    Beacon getMultiFrameBeacon() {
-        return new Beacon.Builder().setId1("1")
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .setServiceUuid(1234)
-                .setMultiFrameBeacon(true)
-                .build();
-    }
-
-    Beacon getMultiFrameBeaconUpdateDifferentServiceUUID() {
-        return new Beacon.Builder()
-                .setBluetoothAddress("01:02:03:04:05:06")
-                .setServiceUuid(5678)
-                .setRssi(-50)
-                .setDataFields(getDataFields())
-                .setMultiFrameBeacon(true)
-                .build();
-    }
-
-    @Before
-    public void before() {
-        // All logging will go to Stderr.  Expand System.err section of test report to see log
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-    }
-
-    @Test
-    public void trackingManufacturerBeaconReturnsSelf() {
-        Beacon beacon = getManufacturerBeacon();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker();
-        Beacon trackedBeacon = tracker.track(beacon);
-        assertEquals("Returns itself", trackedBeacon, beacon);
-    }
-
-    @Test
-    public void gattBeaconExtraDataIsNotReturned() {
-        Beacon extraDataBeacon = getGattBeaconExtraData();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker();
-        Beacon trackedBeacon = tracker.track(extraDataBeacon);
-        assertNull("trackedBeacon should be null", trackedBeacon);
-    }
-
-    @Test
-    public void gattBeaconExtraDataGetUpdated() {
-        Beacon beacon = getGattBeacon();
-        Beacon extraDataBeacon = getGattBeaconExtraData();
-        Beacon extraDataBeacon2 = getGattBeaconExtraData2();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker();
-        tracker.track(beacon);
-        tracker.track(extraDataBeacon);
-        tracker.track(extraDataBeacon2);
-        Beacon trackedBeacon = tracker.track(beacon);
-        assertEquals("extra data is updated", extraDataBeacon2.getDataFields(), trackedBeacon.getExtraDataFields());
-    }
-
-    @Test
-    public void gattBeaconExtraDataAreNotOverwritten() {
-        Beacon beacon = getGattBeacon();
-        Beacon extraDataBeacon = getGattBeaconExtraData();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker();
-        tracker.track(beacon);
-        tracker.track(extraDataBeacon);
-        Beacon trackedBeacon = tracker.track(beacon);
-        assertEquals("extra data should not be overwritten", extraDataBeacon.getDataFields(), trackedBeacon.getExtraDataFields());
-    }
-
-    @Test
-    public void gattBeaconFieldsGetUpdated() {
-        Beacon beacon = getGattBeacon();
-        Beacon beaconUpdate = getGattBeaconUpdate();
-        Beacon extraDataBeacon = getGattBeaconExtraData();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker();
-        tracker.track(beacon);
-        Beacon trackedBeacon = tracker.track(beaconUpdate);
-        assertEquals("rssi should be updated", beaconUpdate.getRssi(), trackedBeacon.getRssi());
-        assertEquals("data fields should be updated", beaconUpdate.getDataFields(), trackedBeacon.getDataFields());
-    }
-
-    @Test
-    public void multiFrameBeaconDifferentServiceUUIDFieldsNotUpdated() {
-        Beacon beacon = getMultiFrameBeacon();
-        Beacon beaconUpdate = getMultiFrameBeaconUpdateDifferentServiceUUID();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker();
-        tracker.track(beacon);
-        tracker.track(beaconUpdate);
-        Beacon trackedBeacon = tracker.track(beacon);
-        assertNotEquals("rssi should NOT be updated", beaconUpdate.getRssi(), trackedBeacon.getRssi());
-        assertNotEquals("data fields should NOT be updated", beaconUpdate.getDataFields(), trackedBeacon.getExtraDataFields());
-    }
-
-    @Test
-    public void multiFrameBeaconProgramaticParserAssociationDifferentServiceUUIDFieldsGetUpdated() {
-        Beacon beacon = getMultiFrameBeacon();
-        Beacon beaconUpdate = getMultiFrameBeaconUpdateDifferentServiceUUID();
-        ExtraDataBeaconTracker tracker = new ExtraDataBeaconTracker(false);
-        tracker.track(beacon);
-        tracker.track(beaconUpdate);
-        Beacon trackedBeacon = tracker.track(beacon);
-        assertEquals("rssi should be updated", beaconUpdate.getRssi(), trackedBeacon.getRssi());
-        assertEquals("data fields should be updated", beaconUpdate.getDataFields(), trackedBeacon.getExtraDataFields());
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java b/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
deleted file mode 100644
index a568743b..00000000
--- a/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package org.altbeacon.beacon.service;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.os.AsyncTask;
-import android.os.Build;
-
-import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.Region;
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
-import org.altbeacon.beacon.service.scanner.CycledLeScanCallback;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.util.ServiceController;
-
-import java.util.concurrent.ThreadPoolExecutor;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * Created by dyoung on 7/1/16.
- */
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
-public class MonitoringStatusTest {
-    @Before
-    public void before() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        LogManager.setLogger(Loggers.verboseLogger());
-        LogManager.setVerboseLoggingEnabled(true);
-        BeaconManager.setsManifestCheckingDisabled(true);
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @Test
-    public void savesStatusOfUpTo50RegionsTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
-        MonitoringStatus monitoringStatus = new MonitoringStatus(context);
-        for (int i = 0; i < 50; i++) {
-            Region region = new Region(""+i, null, null, null);
-            monitoringStatus.addRegion(region, null);
-        }
-        monitoringStatus.saveMonitoringStatusIfOn();
-        MonitoringStatus monitoringStatus2 = new MonitoringStatus(context);
-        assertEquals("restored regions should be same number as saved", 50, monitoringStatus2.regions().size());
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @Test
-    public void clearsStatusOfOver50RegionsTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
-        MonitoringStatus monitoringStatus = new MonitoringStatus(context);
-        for (int i = 0; i < 51; i++) {
-            Region region = new Region(""+i, null, null, null);
-            monitoringStatus.addRegion(region, null);
-        }
-        monitoringStatus.saveMonitoringStatusIfOn();
-        MonitoringStatus monitoringStatus2 = new MonitoringStatus(context);
-        assertEquals("restored regions should be none", 0, monitoringStatus2.regions().size());
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @Test
-    public void refusesToRestoreRegionsIfTooMuchTimeHasPassedSinceSavingTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
-        MonitoringStatus monitoringStatus = new MonitoringStatus(context);
-        for (int i = 0; i < 50; i++) {
-            Region region = new Region(""+i, null, null, null);
-            monitoringStatus.addRegion(region, null);
-        }
-        monitoringStatus.saveMonitoringStatusIfOn();
-        // Set update time to one hour ago
-        monitoringStatus.updateMonitoringStatusTime(System.currentTimeMillis() - 1000*3600l);
-        MonitoringStatus monitoringStatus2 = new MonitoringStatus(context);
-        assertEquals("restored regions should be none", 0, monitoringStatus2.regions().size());
-    }
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java b/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
deleted file mode 100644
index 562de095..00000000
--- a/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.altbeacon.beacon.service;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
-
-public class RunningAverageRssiFilterTest {
-
-    @Test
-    public void initTest1() {
-        RunningAverageRssiFilter filter = new RunningAverageRssiFilter();
-        filter.addMeasurement(-50);
-        assertEquals("First measurement should be -50", String.valueOf(filter.calculateRssi()), "-50.0");
-    }
-}
diff --git a/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java b/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
deleted file mode 100644
index deaa6b04..00000000
--- a/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package org.altbeacon.beacon.service.scanner;
-
-
-import android.bluetooth.le.ScanFilter;
-import android.content.Context;
-
-import org.altbeacon.beacon.AltBeaconParser;
-import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.BeaconParser;
-import org.altbeacon.beacon.service.scanner.ScanFilterUtils;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import org.mockito.Mockito;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-public class ScanFilterUtilsTest {
-
-
-    @BeforeClass
-    public static void testSetup() {
-    }
-
-    @AfterClass
-    public static void testCleanup() {
-
-    }
-
-    @Test
-    public void testGetAltBeaconScanFilter() throws Exception {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        BeaconParser parser = new AltBeaconParser();
-        BeaconManager.setsManifestCheckingDisabled(true); // no manifest available in robolectric
-        List<ScanFilterUtils.ScanFilterData> scanFilterDatas = new ScanFilterUtils().createScanFilterDataForBeaconParser(parser);
-        assertEquals("scanFilters should be of correct size", 1, scanFilterDatas.size());
-        ScanFilterUtils.ScanFilterData sfd = scanFilterDatas.get(0);
-        assertEquals("manufacturer should be right", 0x0118, sfd.manufacturer);
-        assertEquals("mask length should be right", 2, sfd.mask.length);
-        assertArrayEquals("mask should be right", new byte[] {(byte)0xff, (byte)0xff}, sfd.mask);
-        assertArrayEquals("filter should be right", new byte[] {(byte)0xbe, (byte)0xac}, sfd.filter);
-    }
-    @Test
-    public void testGenericScanFilter() throws Exception {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:2-3=1111,i:4-6,p:24-24");
-        BeaconManager.setsManifestCheckingDisabled(true); // no manifest available in robolectric
-        List<ScanFilterUtils.ScanFilterData> scanFilterDatas = new ScanFilterUtils().createScanFilterDataForBeaconParser(parser);
-        assertEquals("scanFilters should be of correct size", 1, scanFilterDatas.size());
-        ScanFilterUtils.ScanFilterData sfd = scanFilterDatas.get(0);
-        assertEquals("manufacturer should be right", 0x004c, sfd.manufacturer);
-        assertEquals("mask length should be right", 2, sfd.mask.length);
-        assertArrayEquals("mask should be right", new byte[]{(byte) 0xff, (byte) 0xff}, sfd.mask);
-        assertArrayEquals("filter should be right", new byte[] {(byte)0x11, (byte) 0x11}, sfd.filter);
-        assertNull("serviceUuid should be null", sfd.serviceUuid);
-    }
-    @Test
-    public void testEddystoneScanFilterData() throws Exception {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout(BeaconParser.EDDYSTONE_UID_LAYOUT);
-        BeaconManager.setsManifestCheckingDisabled(true); // no manifest available in robolectric
-        List<ScanFilterUtils.ScanFilterData> scanFilterDatas = new ScanFilterUtils().createScanFilterDataForBeaconParser(parser);
-        assertEquals("scanFilters should be of correct size", 1, scanFilterDatas.size());
-        ScanFilterUtils.ScanFilterData sfd = scanFilterDatas.get(0);
-        assertEquals("serviceUuid should be right", new Long(0xfeaa), sfd.serviceUuid);
-    }
-
-    @Test
-    public void testZeroOffsetScanFilter() throws Exception {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        BeaconParser parser = new BeaconParser();
-        parser.setBeaconLayout("m:0-3=11223344,i:4-6,p:24-24");
-        BeaconManager.setsManifestCheckingDisabled(true); // no manifest available in robolectric
-        List<ScanFilterUtils.ScanFilterData> scanFilterDatas = new ScanFilterUtils().createScanFilterDataForBeaconParser(parser);
-        assertEquals("scanFilters should be of correct size", 1, scanFilterDatas.size());
-        ScanFilterUtils.ScanFilterData sfd = scanFilterDatas.get(0);
-        assertEquals("manufacturer should be right", 0x004c, sfd.manufacturer);
-        assertEquals("mask length should be right", 2, sfd.mask.length);
-        assertArrayEquals("mask should be right", new byte[] {(byte)0xff, (byte)0xff}, sfd.mask);
-        assertArrayEquals("filter should be right", new byte[] {(byte)0x33, (byte)0x44}, sfd.filter);
-    }
-
-}
diff --git a/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java b/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
deleted file mode 100644
index 3ab4773f..00000000
--- a/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.altbeacon.beacon.utils;
-
-import junit.framework.Assert;
-
-import java.net.MalformedURLException;
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import org.altbeacon.beacon.Beacon;
-import org.junit.Test;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-public class EddystoneTelemetryAccessorTest {
-
-    public static String byteArrayToHexString(byte[] bytes) {
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < bytes.length; i++) {
-            sb.append(String.format("%02x", bytes[i]));
-        }
-        return sb.toString();
-    }
-
-    @Test
-    public void testAllowsAccessToTelemetryBytes() throws MalformedURLException {
-        ArrayList<Long> telemetryFields = new ArrayList<Long>();
-        telemetryFields.add(0x01l); // version
-        telemetryFields.add(0x0212l); // battery level
-        telemetryFields.add(0x0313l); // temperature
-        telemetryFields.add(0x04142434l); // pdu count
-        telemetryFields.add(0x05152535l); // uptime
-
-        Beacon beaconWithTelemetry = new Beacon.Builder().setId1("0x0102030405060708090a").setId2("0x01020304050607").setTxPower(-59).setExtraDataFields(telemetryFields).build();
-        byte[] telemetryBytes = new EddystoneTelemetryAccessor().getTelemetryBytes(beaconWithTelemetry);
-
-        byte[] expectedBytes = {0x20, 0x01, 0x02, 0x12, 0x03, 0x13, 0x04, 0x14, 0x24, 0x34, 0x05, 0x15, 0x25, 0x35};
-        assertEquals(byteArrayToHexString(telemetryBytes), byteArrayToHexString(expectedBytes));
-    }
-
-
-    @Test
-    public void testAllowsAccessToBase64EncodedTelemetryBytes() throws MalformedURLException {
-        ArrayList<Long> telemetryFields = new ArrayList<Long>();
-        telemetryFields.add(0x01l); // version
-        telemetryFields.add(0x0212l); // battery level
-        telemetryFields.add(0x0313l); // temperature
-        telemetryFields.add(0x04142434l); // pdu count
-        telemetryFields.add(0x05152535l); // uptime
-
-        Beacon beaconWithTelemetry = new Beacon.Builder().setId1("0x0102030405060708090a").setId2("0x01020304050607").setTxPower(-59).setExtraDataFields(telemetryFields).build();
-        byte[] telemetryBytes = new EddystoneTelemetryAccessor().getTelemetryBytes(beaconWithTelemetry);
-
-        String encodedTelemetryBytes = new EddystoneTelemetryAccessor().getBase64EncodedTelemetry(beaconWithTelemetry);
-        assertNotNull(telemetryBytes);
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java b/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
deleted file mode 100644
index d9d038df..00000000
--- a/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
+++ /dev/null
@@ -1,237 +0,0 @@
-package org.altbeacon.beacon.utils;
-
-import java.net.MalformedURLException;
-import java.util.Arrays;
-
-import org.junit.Test;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertEquals;
-
-@Config(sdk = 18)
-@RunWith(RobolectricTestRunner.class)
-public class UrlBeaconUrlCompressorTest {
-
-    final protected static char[] hexArray = "0123456789ABCDEF" .toCharArray();
-
-    /**
-     * URLs to test:
-     * <p/>
-     * http://www.radiusnetworks.com
-     * https://www.radiusnetworks.com
-     * http://radiusnetworks.com
-     * https://radiusnetworks.com
-     * https://radiusnetworks.com/
-     * https://radiusnetworks.com/v1/index.html
-     * https://api.v1.radiusnetworks.com
-     * https://www.api.v1.radiusnetworks.com
-     */
-    @Test
-    public void testCompressURL() throws MalformedURLException {
-        String testURL = "http://www.radiusnetworks.com";
-        byte[] expectedBytes = {0x00, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x07};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressHttpsURL() throws MalformedURLException {
-        String testURL = "https://www.radiusnetworks.com";
-        byte[] expectedBytes = {0x01, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x07};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithTrailingSlash() throws MalformedURLException {
-        String testURL = "http://google.com/123";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', 0x00, '1', '2', '3'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithoutTLD() throws MalformedURLException {
-        String testURL = "http://xxx";
-        byte[] expectedBytes = {0x02, 'x', 'x', 'x'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithSubdomains() throws MalformedURLException {
-        String testURL = "http://www.forums.google.com";
-        byte[] expectedBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x07};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithSubdomainsWithTrailingSlash() throws MalformedURLException {
-        String testURL = "http://www.forums.google.com/";
-        byte[] expectedBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x00};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithMoreSubdomains() throws MalformedURLException {
-        String testURL = "http://www.forums.developer.google.com/123";
-        byte[] expectedBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'd', 'e', 'v', 'e', 'l', 'o', 'p', 'e', 'r', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x00, '1', '2', '3'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithSubdomainsAndSlashesInPath() throws MalformedURLException {
-        String testURL = "http://www.forums.google.com/123/456";
-        byte[] expectedBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x00, '1', '2', '3', '/', '4', '5', '6'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithDotCaTLD() throws MalformedURLException {
-        String testURL = "http://google.ca";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'a'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithDotInfoTLD() throws MalformedURLException {
-        String testURL = "http://google.info";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', 0x0b};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithDotCaTLDWithSlash() throws MalformedURLException {
-        String testURL = "http://google.ca/";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'a', '/'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithDotCoTLD() throws MalformedURLException {
-        String testURL = "http://google.co";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'o'};
-        String hexBytes = bytesToHex(UrlBeaconUrlCompressor.compress(testURL));
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithShortenedURLContainingCaps() throws MalformedURLException {
-        String testURL = "http://goo.gl/C2HC48";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', '.', 'g', 'l', '/', 'C', '2', 'H', 'C', '4', '8'};
-        String hexBytes = bytesToHex(UrlBeaconUrlCompressor.compress(testURL));
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithSchemeInCaps() throws MalformedURLException {
-        String testURL = "HTTP://goo.gl/C2HC48";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', '.', 'g', 'l', '/', 'C', '2', 'H', 'C', '4', '8'};
-        String hexBytes = bytesToHex(UrlBeaconUrlCompressor.compress(testURL));
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressWithDomainInCaps() throws MalformedURLException {
-        String testURL = "http://GOO.GL/C2HC48";
-        byte[] expectedBytes = {0x02, 'g', 'o', 'o', '.', 'g', 'l', '/', 'C', '2', 'H', 'C', '4', '8'};
-        String hexBytes = bytesToHex(UrlBeaconUrlCompressor.compress(testURL));
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressHttpsAndWWWInCaps() throws MalformedURLException {
-        String testURL = "HTTPS://WWW.radiusnetworks.com";
-        byte[] expectedBytes = {0x01, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x07};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressEntireURLInCaps() throws MalformedURLException {
-        String testURL = "HTTPS://WWW.RADIUSNETWORKS.COM";
-        byte[] expectedBytes = {0x01, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x07};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testCompressEntireURLInCapsWithPath() throws MalformedURLException {
-        String testURL = "HTTPS://WWW.RADIUSNETWORKS.COM/C2HC48";
-        byte[] expectedBytes = {0x01, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x00, 'C', '2', 'H', 'C', '4', '8'};
-        assertTrue(Arrays.equals(expectedBytes, UrlBeaconUrlCompressor.compress(testURL)));
-    }
-
-    @Test
-    public void testDecompressWithDotCoTLD() {
-        String testURL = "http://google.co";
-        byte[] testBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'o'};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testDecompressWithPath() {
-        String testURL = "http://google.com/123";
-        byte[] testBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', 0x00, '1', '2', '3'};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressHttpsURL() {
-        String testURL = "https://www.radiusnetworks.com";
-        byte[] testBytes = {0x01, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x07};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressHttpsURLWithTrailingSlash() {
-        String testURL = "https://www.radiusnetworks.com/";
-        byte[] testBytes = {0x01, 'r', 'a', 'd', 'i', 'u', 's', 'n', 'e', 't', 'w', 'o', 'r', 'k', 's', 0x00};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressWithoutTLD() throws MalformedURLException {
-        String testURL = "http://xxx";
-        byte[] testBytes = {0x02, 'x', 'x', 'x'};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressWithSubdomains() throws MalformedURLException {
-        String testURL = "http://www.forums.google.com";
-        byte[] testBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x07};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressWithSubdomainsAndTrailingSlash() throws MalformedURLException {
-        String testURL = "http://www.forums.google.com/";
-        byte[] testBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x00};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressWithSubdomainsAndSlashesInPath() throws MalformedURLException {
-        String testURL = "http://www.forums.google.com/123/456";
-        byte[] testBytes = {0x00, 'f', 'o', 'r', 'u', 'm', 's', '.', 'g', 'o', 'o', 'g', 'l', 'e', 0x00, '1', '2', '3', '/', '4', '5', '6'};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    @Test
-    public void testUncompressWithDotInfoTLD() throws MalformedURLException {
-        String testURL = "http://google.info";
-        byte[] testBytes = {0x02, 'g', 'o', 'o', 'g', 'l', 'e', 0x0b};
-        assertEquals(testURL, UrlBeaconUrlCompressor.uncompress(testBytes));
-    }
-
-    private static String bytesToHex(byte[] bytes) {
-        char[] hexChars = new char[bytes.length * 2];
-        for (int j = 0; j < bytes.length; j++) {
-            int v = bytes[j] & 0xFF;
-            hexChars[j * 2] = hexArray[v >>> 4];
-            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
-        }
-        return new String(hexChars);
-    }
-
-
-}
diff --git a/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java b/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
deleted file mode 100644
index db34412b..00000000
--- a/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package org.altbeacon.bluetooth;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-
-import org.robolectric.annotation.Config;
-
-@Config(sdk = 18)
-
-@RunWith(RobolectricTestRunner.class)
-
-public class BleAdvertisementTest {
-    public static byte[] hexStringToByteArray(String s) {
-        int len = s.length();
-        byte[] data = new byte[len / 2];
-        for (int i = 0; i < len; i += 2) {
-            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
-        }
-        return data;
-    }
-
-    @Test
-    public void testCanParsePdusFromAltBeacon() {
-        org.robolectric.shadows.ShadowLog.stream = System.err;
-        byte[] bytes = hexStringToByteArray("02011a1aff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c50900000000000000000000000000000000000000000000000000000000000000");
-        BleAdvertisement bleAdvert = new BleAdvertisement(bytes);
-        assertEquals("An AltBeacon advert should have two PDUs", 3, bleAdvert.getPdus().size());
-    }
-
-    @Test
-    public void testCanParsePdusFromOtherBeacon() {
-        byte[] bytes = hexStringToByteArray("0201060303aafe1516aafe00e72f234454f4911ba9ffa60000000000010c09526164426561636f6e20470000000000000000000000000000000000000000");
-        BleAdvertisement bleAdvert = new BleAdvertisement(bytes);
-        assertEquals("An otherBeacon advert should four three PDUs", 4, bleAdvert.getPdus().size());
-        assertEquals("First PDU should be flags type 1", 1, bleAdvert.getPdus().get(0).getType());
-        assertEquals("Second PDU should be services type 3", 3, bleAdvert.getPdus().get(1).getType());
-        assertEquals("Third PDU should be serivce type 0x16", 0x16, bleAdvert.getPdus().get(2).getType());
-        assertEquals("Fourth PDU should be scan response type 9", 9, bleAdvert.getPdus().get(3).getType());
-
-    }
-}
\ No newline at end of file
diff --git a/src/test/resources/model-distance-calculations.json b/src/test/resources/model-distance-calculations.json
deleted file mode 100644
index 298dc533..00000000
--- a/src/test/resources/model-distance-calculations.json
+++ /dev/null
@@ -1,44 +0,0 @@
-{
-  "models":
-  [
-    {
-      "coefficient1": 0.89976,
-      "coefficient2": 7.7095,
-      "coefficient3": 0.111,
-      "version":"4.4.2",
-      "build_number":"KOT49H",
-      "model":"Nexus 4",
-      "manufacturer":"LGE"
-    },
-    {
-      "coefficient1": 0.42093,
-      "coefficient2": 6.9476,
-      "coefficient3": 0.54992,
-      "version":"4.4.2",
-      "build_number":"LPV79",
-      "model":"Nexus 5",
-      "manufacturer":"LGE",
-      "default": true
-    },
-    {
-      "coefficient1": 0.9401940951,
-      "coefficient2": 6.170094565,
-      "coefficient3": 0.0,
-      "version":"5.0.2",
-      "build_number":"LXG22.67-7.1",
-      "model":"Moto X Pro",
-      "manufacturer":"XT1115",
-      "default": false
-    },
-    {
-      "coefficient1": 0.1862616782,
-      "coefficient2": 8.235367435,
-      "coefficient3": -0.45324519,
-      "version":"6.0",
-      "build_number":"MPE24.49-18",
-      "model":"XT1092",
-      "manufacturer":"Motorola",
-      "default": false
-    }
-  ]
-}
