diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/src/main/java/org/altbeacon/beacon/Beacon.java
index 6768754c..340d6cb5 100644
--- a/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -402,7 +402,10 @@ public double getDistance() {
             if (mRunningMaxRssi != null) {
                 // we set the current rssi to be the short term max minus a longer term mean
                 // we are looking for short term changes
-                mDistance = calculateDistance(mTxPower, mRunningMaxRssi) - mDistance;
+                double mRunningMaxDistance = calculateDistance(mTxPower, mRunningMaxRssi);
+                double mRunningAverageDistance = Math.min(2.0, Math.max(0.25, mDistance));
+                mDistance = mRunningMaxDistance - mRunningAverageDistance;
+                LogManager.i(TAG, "calculated new distance: %s %s %s", mDistance, mRunningMaxDistance, mRunningAverageDistance);
             }
         }
         return mDistance;
diff --git a/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java b/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java
index a1627d18..ef6d72af 100644
--- a/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java
+++ b/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java
@@ -58,7 +58,7 @@ public double calculateDistance(int txPower, double rssi) {
         else {
             distance =  (mCoefficient1)*Math.pow(ratio,mCoefficient2) + mCoefficient3;
         }
-        LogManager.d(TAG, "avg mRssi: %s distance: %s", rssi, distance);
+        LogManager.i(TAG, "avg mRssi: %s, ratio: %s, distance: %s", rssi, ratio, distance);
         return distance;
     }
 }
diff --git a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java b/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
index b495119e..f351df06 100644
--- a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
+++ b/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
@@ -43,28 +43,32 @@ public boolean noMeasurementsAvailable() {
     public double calculateRssi() {
         refreshMeasurements();
 
+        int expected = (int) (sampleExpirationMilliseconds/sampleRateMilliseconds - 1);
+
         // fill missing samples
         ArrayList<Measurement> calcMeasurements = new ArrayList<>(mMeasurements);
-        while (calcMeasurements.size() < sampleExpirationMilliseconds/sampleRateMilliseconds) {
+        while (calcMeasurements.size() < expected) {
             Measurement m = new Measurement();
             m.rssi = -110;
             m.timestamp = System.currentTimeMillis();
             calcMeasurements.add(m);
         }
-        Collections.sort(mMeasurements);
+        Collections.sort(calcMeasurements);
 
-        int endIndex = (int) (sampleQuantile * sampleExpirationMilliseconds/sampleRateMilliseconds);
-        assert (endIndex > 0);
-        assert (endIndex <= sampleExpirationMilliseconds/sampleRateMilliseconds);
+        int startIndex = (int) (sampleQuantile * calcMeasurements.size());
+        assert (startIndex > 0);
+        assert (startIndex < calcMeasurements.size());
 
         double sum = 0;
-        for (int i = 0; i < endIndex; i++) {
+        int n = 0;
+        for (int i = startIndex; i < calcMeasurements.size(); i++) {
             sum += calcMeasurements.get(i).rssi;
+            n++;
         }
-        double runningAverage = sum/(endIndex-1);
+        double runningAverage = sum/n;
 
         LogManager.i(TAG, "Running average mRssi based on %s measurements with %s dummy measurements: %s, max : %s",
-                calcMeasurements.size(), calcMeasurements.size()-mMeasurements.size(), runningAverage, calcMeasurements.get(0).rssi);
+                calcMeasurements.size(), calcMeasurements.size()-mMeasurements.size(), runningAverage, calcMeasurements.get(calcMeasurements.size()-1).rssi);
         return runningAverage;
     }
 
diff --git a/src/main/java/org/altbeacon/beacon/service/RunningMaxRssiFilter.java b/src/main/java/org/altbeacon/beacon/service/RunningMaxRssiFilter.java
index 57caff95..1643f553 100644
--- a/src/main/java/org/altbeacon/beacon/service/RunningMaxRssiFilter.java
+++ b/src/main/java/org/altbeacon/beacon/service/RunningMaxRssiFilter.java
@@ -38,8 +38,8 @@ public boolean noMeasurementsAvailable() {
     public double calculateRssi() {
         refreshMeasurements();
         if (mMeasurements.size() == 0) return -1;
-        LogManager.d(TAG, "Running max mRssi: %s", mMeasurements.get(0));
-        return (double) mMeasurements.get(0).rssi;
+        LogManager.i(TAG, "Running max mRssi: %s", mMeasurements.get(mMeasurements.size()-1).rssi);
+        return (double) mMeasurements.get(mMeasurements.size()-1).rssi;
     }
 
     private synchronized void refreshMeasurements() {
