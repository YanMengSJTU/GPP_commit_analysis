diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
index 2ab1f470..00476094 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
@@ -207,7 +207,6 @@ protected void scanLeDevice(final Boolean enable) {
         } else {
             BeaconManager.logDebug(TAG, "disabling scan");
             mScanning = false;
-
             stopScan();
             mLastScanCycleEndTime = new Date().getTime();
         }
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
index e9d0a31b..3c62a5d3 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
@@ -9,6 +9,7 @@
 import android.bluetooth.le.ScanSettings;
 import android.content.Context;
 import android.util.Log;
+
 import org.altbeacon.beacon.BeaconParser;
 
 import org.altbeacon.beacon.BeaconManager;
@@ -37,9 +38,9 @@ public CycledLeScannerForLollipop(Context context, long scanPeriod, long between
     @Override
     protected void stopScan() {
         try {
-            mScanner.stopScan(getNewLeScanCallback());
-        }
-        catch (Exception e) {
+            if (mScanner != null)
+                mScanner.stopScan(getNewLeScanCallback());
+        } catch (Exception e) {
             Log.w("Internal Android exception scanning for beacons: ", e);
         }
     }
@@ -94,13 +95,12 @@ protected boolean deferScanIfNeeded() {
                         // On Android L, between scan cycles do a scan with a filter looking for any beacon
                         // if we see one of those beacons, we need to deliver the results
                         ScanSettings settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
-
-                        mScanner.startScan(new ScanFilterUtils().createScanFiltersForBeaconParsers(mBeaconManager.getBeaconParsers()), settings,
-                                (android.bluetooth.le.ScanCallback) getNewLeScanCallback());
-                    }
-                    else {
-                        BeaconManager.logDebug(TAG, "This is Android L, but we last saw a beacon only "+
-                                secsSinceLastDetection+" ago, so we will not keep scanning in background.");
+                        if (mScanner != null)
+                            mScanner.startScan(new ScanFilterUtils().createScanFiltersForBeaconParsers(mBeaconManager.getBeaconParsers()), settings,
+                                    (android.bluetooth.le.ScanCallback) getNewLeScanCallback());
+                    } else {
+                        BeaconManager.logDebug(TAG, "This is Android L, but we last saw a beacon only " +
+                                secsSinceLastDetection + " ago, so we will not keep scanning in background.");
                     }
                 }
                 if (mBackgroundLScanStartTime > 0l) {
@@ -115,10 +115,11 @@ protected boolean deferScanIfNeeded() {
                             // a beacon in background L scanning mode.  We need to stop scanning
                             // so we do not drain battery
                             BeaconManager.logDebug(TAG, "We've been detecting for a bit.  Stopping Android L background scanning");
-                            mScanner.stopScan((android.bluetooth.le.ScanCallback) getNewLeScanCallback());
+                            if (mScanner != null)
+
+                                mScanner.stopScan((android.bluetooth.le.ScanCallback) getNewLeScanCallback());
                             mBackgroundLScanStartTime = 0l;
-                        }
-                        else {
+                        } else {
                             // report the results up the chain
                             BeaconManager.logDebug(TAG, "Delivering Android L background scanning results");
                             mCycledLeScanCallback.onCycleEnd();
@@ -141,11 +142,12 @@ public void run() {
             }, millisecondsUntilStart > 1000 ? 1000 : millisecondsUntilStart);
             mScanDeferredBefore = true;
             return true;
-        }
-        else {
+        } else {
             if (mBackgroundLScanStartTime > 0l) {
                 BeaconManager.logDebug(TAG, "Stopping Android L background scanning to start full scan");
-                mScanner.stopScan((android.bluetooth.le.ScanCallback) getNewLeScanCallback());
+                if (mScanner != null)
+
+                    mScanner.stopScan((android.bluetooth.le.ScanCallback) getNewLeScanCallback());
                 mBackgroundLScanStartTime = 0;
             }
             mScanDeferredBefore = false;
@@ -171,13 +173,17 @@ protected void startScan() {
             settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)).build();
 
         }
-        mScanner.startScan(filters, settings, getNewLeScanCallback());
+        if (mScanner != null)
+
+            mScanner.startScan(filters, settings, getNewLeScanCallback());
 
     }
 
     @Override
     protected void finishScan() {
-        mScanner.stopScan(getNewLeScanCallback());
+        if (mScanner != null)
+
+            mScanner.stopScan(getNewLeScanCallback());
         mScanningPaused = true;
     }
 
