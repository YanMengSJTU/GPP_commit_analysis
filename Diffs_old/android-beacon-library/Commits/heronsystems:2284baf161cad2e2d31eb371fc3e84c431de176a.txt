diff --git a/build.gradle b/build.gradle
index e54f1fd6..74f028d4 100644
--- a/build.gradle
+++ b/build.gradle
@@ -25,13 +25,16 @@ def getVersionName = {
 buildscript {
     repositories {
         jcenter()
+        maven {
+            url 'https://dl.google.com/dl/android/maven2/'
+        }
         maven {
             url 'https://maven.google.com'
         }
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.0'
+        classpath 'com.android.tools.build:gradle:3.0.0-alpha2'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
         classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.3'
     }
@@ -51,22 +54,18 @@ allprojects {
 }
 
 android {
-    compileSdkVersion 'android-O'
-    buildToolsVersion '26.0.0-rc2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.0'
 
     defaultConfig {
         // Unfortunately 'com.android.support:appcompat-v7:26.0.0-alpha1
         // requires minSdkVersion 14, forcing a bump verson minSdkVersion 7
         minSdkVersion 14
-        targetSdkVersion 'O'
+        targetSdkVersion 26
         versionCode 1
         versionName version
         consumerProguardFiles 'proguard-rules.pro'
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-        testOptions {
-            // The test runner needs Espresso 2.2.2 which requires at least 8
-            minSdkVersion 8
-        }
     }
 
     compileOptions {
@@ -89,7 +88,7 @@ android {
 
 dependencies {
     compile fileTree ( dir: 'libs', include: ['*.jar'] )
-    compile 'com.android.support:support-v4:26.0.0'
+    compile 'com.android.support:appcompat-v7:26.0.0-alpha1'
     compile 'com.android.support:support-annotations:25.3.1'
 
     testCompile('junit:junit:4.12') {
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index ed285496..efef71bd 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -39,8 +39,6 @@
         Once the periodic one gets run, the immediate is cancelled.
      */
     public static final int IMMMEDIATE_SCAN_JOB_ID = 2;
-    // TODO: Change this to Build.VERSION_CODES.O when the SDK is released
-    private static final int ANDROID_O_VERSION = 10000;
 
     private ScanState mScanState;
     private Handler mStopHandler = new Handler();
@@ -113,12 +111,13 @@ private void startPassiveScanIfNeeded() {
             LogManager.i(TAG, "We are inside a beacon region.  We will not scan between cycles.");
         }
         else {
-            if (android.os.Build.VERSION.SDK_INT >= ANDROID_O_VERSION) {
+            // TODO: change this to check for Android O version when SDK is released
+            if (Build.VERSION.PREVIEW_SDK_INT> 0) {
                 LogManager.i(TAG, "We are outside all beacon regions.  We will scan between cycles.");
                 mScanHelper.startAndroidOBackgroundScan(mScanState.getBeaconParsers());
             }
             else {
-                LogManager.d(TAG, "This is not Android O.  No scanning between cycles when using ScanJob");
+                LogManager.d(TAG, "This is not Android O (PREVIEW_SDK_INT="+ Build.VERSION.PREVIEW_SDK_INT+")  No scanning between cycles when using ScanJob");
             }
         }
     }
@@ -156,7 +155,8 @@ private boolean restartScanning() {
         if (mScanHelper.getCycledScanner() == null) {
             mScanHelper.createCycledLeScanner(mScanState.getBackgroundMode(), null);
         }
-        if (Build.VERSION.SDK_INT >= ANDROID_O_VERSION) {
+        // TODO: change this to check for Android O version when SDK is released
+        if (Build.VERSION.PREVIEW_SDK_INT > 0) {
             mScanHelper.stopAndroidOBackgroundScan();
         }
         mScanHelper.getCycledScanner().setScanPeriods(mScanState.getBackgroundMode() ? mScanState.getBackgroundScanPeriod() : mScanState.getForegroundScanPeriod(),
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
index e2ee6ed1..d9c48acc 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
@@ -125,7 +125,10 @@ public static CycledLeScanner createScanner(Context context, long scanPeriod, lo
         if (android.os.Build.VERSION.SDK_INT < 21) {
             LogManager.i(TAG, "This is not Android 5.0.  We are using old scanning APIs");
             useAndroidLScanner = false;
-        } else if (Build.VERSION.PREVIEW_SDK_INT != 2 /* Build.VERSION_CODES.O*/) {
+
+        }
+        // TODO: change this to check for Android O version when SDK is released
+        else if (Build.VERSION.PREVIEW_SDK_INT == 0) {
             if (BeaconManager.isAndroidLScanningDisabled()) {
                 LogManager.i(TAG, "This Android 5.0, but L scanning is disabled. We are using old scanning APIs");
                 useAndroidLScanner = false;
@@ -329,7 +332,9 @@ protected void scanLeDevice(final Boolean enable) {
                 mCurrentScanStartTime = 0l;
                 mLastScanCycleEndTime = SystemClock.elapsedRealtime();
                 // Clear any queued schedule tasks as we're done scanning
-                mScanHandler.removeCallbacksAndMessages(null);
+                // This must be mHandler not mScanHandler.  mHandler is what does the scanning work.
+                // If this is set to mScanHandler, then this can prevent a scan stop.
+                mHandler.removeCallbacksAndMessages(null);
                 finishScanCycle();
             }
         }
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
index 1bf6d04f..fe095400 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
@@ -19,7 +19,7 @@
  */
 
 @TargetApi(26)
-class CycledLeScannerForAndroidO extends CycledLeScannerForJellyBeanMr2 {
+class CycledLeScannerForAndroidO extends CycledLeScannerForLollipop {
     private static final String TAG = CycledLeScannerForAndroidO.class.getSimpleName();
 
     CycledLeScannerForAndroidO(Context context, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, CycledLeScanCallback cycledLeScanCallback, BluetoothCrashResolver crashResolver) {
