diff --git a/build.gradle b/build.gradle
index 8b3dc319..fe304af3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -95,28 +95,28 @@ android {
 }
 
 dependencies {
-    compile fileTree ( dir: 'libs', include: ['*.jar'] )
-    compile 'com.android.support:appcompat-v7:26.0.0'
-    compile 'com.android.support:support-annotations:26.0.0'
+    implementation fileTree ( dir: 'libs', include: ['*.jar'] )
+    implementation 'com.android.support:appcompat-v7:26.0.0'
+    implementation 'com.android.support:support-annotations:26.0.0'
 
-    testCompile('junit:junit:4.12') {
+    testImplementation('junit:junit:4.12') {
         exclude group: 'org.hamcrest'
     }
-    testCompile('org.hamcrest:hamcrest-junit:2.0.0.0') {
+    testImplementation('org.hamcrest:hamcrest-junit:2.0.0.0') {
         exclude group: 'junit'
     }
-    testCompile('com.squareup:fest-android:1.0.+@aar')
-    testCompile('org.robolectric:robolectric:3.0') {
+    testImplementation('com.squareup:fest-android:1.0.+@aar')
+    testImplementation('org.robolectric:robolectric:3.0') {
         exclude group: 'junit'
     }
-    testCompile('org.mockito:mockito-core:1.10.19') {
+    testImplementation('org.mockito:mockito-core:1.10.19') {
         exclude group: 'org.hamcrest'
     }
-    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
         exclude group: 'com.android.support', module: 'support-annotations'
         exclude group: 'org.hamcrest'
     })
-    androidTestCompile 'org.apache.commons:commons-math3:3.6.1'
+    androidTestImplementation 'org.apache.commons:commons-math3:3.6.1'
 }
 
 apply plugin: 'idea'
diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/src/main/java/org/altbeacon/beacon/Beacon.java
index bb03a0b3..988630ff 100644
--- a/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -275,6 +275,8 @@ protected Beacon(Parcel in) {
         mRunningAverageRssi = (Double) in.readValue(null);
         mRssiMeasurementCount = in.readInt();
         mPacketCount = in.readInt();
+//        mScanRecord = new byte[in.readInt()];
+//        in.readByteArray(mScanRecord);
         mBatteryLevel = in.readInt();
         mRealTxPower = in.readInt();
     }
@@ -301,6 +303,7 @@ protected Beacon(Beacon otherBeacon) {
         this.mParserIdentifier = otherBeacon.mParserIdentifier;
         this.mMultiFrameBeacon = otherBeacon.mMultiFrameBeacon;
         this.mManufacturer = otherBeacon.mManufacturer;
+        this.mScanRecord = otherBeacon.mScanRecord;
         this.mBatteryLevel = otherBeacon.mBatteryLevel;
         this.mRealTxPower = otherBeacon.mRealTxPower;
     }
@@ -711,6 +714,9 @@ public void writeToParcel(Parcel out, int flags) {
         out.writeValue(mRunningAverageRssi);
         out.writeInt(mRssiMeasurementCount);
         out.writeInt(mPacketCount);
+//        int length = mScanRecord.length;
+//        out.writeInt(length);
+//        out.writeByteArray(mScanRecord);
         out.writeInt(mBatteryLevel);
         out.writeInt(mRealTxPower);
     }
@@ -801,6 +807,8 @@ public Builder copyBeaconFields(Beacon beacon) {
             setRssi(beacon.getRssi());
             setServiceUuid(beacon.getServiceUuid());
             setMultiFrameBeacon(beacon.isMultiFrameBeacon());
+            setBatteryLevel(beacon.getBatteryLevel());
+            setRealTxPower(beacon.getRealTxPower());
             return this;
         }
 
@@ -970,6 +978,24 @@ public Builder setMultiFrameBeacon(boolean multiFrameBeacon) {
             return this;
         }
 
+        /**
+         * @return builder
+         * @see Beacon#mBatteryLevel
+         */
+        public Builder setBatteryLevel(int batteryLevel) {
+            mBeacon.mBatteryLevel = batteryLevel;
+            return this;
+        }
+
+        /**
+         * @return builder
+         * @see Beacon#mRealTxPower
+         */
+        public Builder setRealTxPower(int realTxPower) {
+            mBeacon.mRealTxPower = realTxPower;
+            return this;
+        }
+
     }
 
 }
diff --git a/src/main/java/org/altbeacon/beacon/BeaconParser.java b/src/main/java/org/altbeacon/beacon/BeaconParser.java
index 8591db4e..61fc1a64 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconParser.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconParser.java
@@ -610,6 +610,7 @@ else if (endIndex > pduToParse.getEndIndex() && !mAllowPduOverflow) {
             beacon.mManufacturer = manufacturer;
             beacon.mParserIdentifier = mIdentifier;
             beacon.mMultiFrameBeacon = extraParsers.size() > 0 || mExtraFrame;
+            beacon.mScanRecord = bytesToProcess;
         }
         return beacon;
     }
diff --git a/src/test/java/org/altbeacon/beacon/AltBeaconTest.java b/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
index 2d726781..a3b96d06 100644
--- a/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
+++ b/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
@@ -46,7 +46,7 @@ public void after() {
         byte[] data = new byte[len / 2];
         for (int i = 0; i < len; i += 2) {
             data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
-                    + Character.digit(s.charAt(i+1), 16));
+                    + Character.digit(s.charAt(i + 1), 16));
         }
         return data;
     }
@@ -56,28 +56,29 @@ public void testRecognizeBeacon() {
         byte[] bytes = hexStringToByteArray("02011a1bff1801beac2f234454cf6d4a0fadf2f4911ba9ffa600010002c509");
         AltBeaconParser parser = new AltBeaconParser();
         Beacon beacon = parser.fromScanData(bytes, -55, null);
-        assertEquals("manData should be parsed", 9, ((AltBeacon) beacon).getMfgReserved() );
+        assertEquals("manData should be parsed", 9, ((AltBeacon) beacon).getMfgReserved());
     }
 
     @Test
     public void testCanSerializeParcelable() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
         final Beacon original = new AltBeacon.Builder().setMfgReserved(2)
-                                                       .setBluetoothAddress("aa:bb:cc:dd:ee:ff")
-                                                       .setBluetoothName("Any Bluetooth")
-                                                       .setBeaconTypeCode(1)
-                                                       .setExtraDataFields(Arrays.asList(4L, 5L))
-                                                       .setId1("6")
-                                                       .setId2("7")
-                                                       .setId3("8")
-                                                       .setManufacturer(10)
-                                                       .setMultiFrameBeacon(true)
-                                                       .setParserIdentifier("Any Parser ID")
-                                                       .setRssi(-11)
-                                                       .setRunningAverageRssi(-12.3)
-                                                       .setServiceUuid(13)
-                                                       .setTxPower(14)
-                                                       .build();
+                .setBluetoothAddress("aa:bb:cc:dd:ee:ff")
+                .setBluetoothName("Any Bluetooth")
+                .setBeaconTypeCode(1)
+                .setExtraDataFields(Arrays.asList(4L, 5L))
+                .setId1("6")
+                .setId2("7")
+                .setId3("8")
+                .setManufacturer(10)
+                .setMultiFrameBeacon(true)
+                .setParserIdentifier("Any Parser ID")
+                .setRssi(-11)
+                .setRunningAverageRssi(-12.3)
+                .setServiceUuid(13)
+                .setTxPower(14)
+                .setBatteryLevel(0).setRealTxPower(0)
+                .build();
         original.setPacketCount(15);
         original.setRssiMeasurementCount(16);
 
@@ -114,21 +115,21 @@ public void testCanSerializeParcelable() {
     @Test
     public void copyingBeaconTransfersAllFields() {
         final Beacon original = new AltBeacon.Builder().setMfgReserved(2)
-                                                       .setBluetoothAddress("aa:bb:cc:dd:ee:ff")
-                                                       .setBluetoothName("Any Bluetooth")
-                                                       .setBeaconTypeCode(1)
-                                                       .setExtraDataFields(Arrays.asList(4L, 5L))
-                                                       .setId1("6")
-                                                       .setId2("7")
-                                                       .setId3("8")
-                                                       .setManufacturer(10)
-                                                       .setMultiFrameBeacon(true)
-                                                       .setParserIdentifier("Any Parser ID")
-                                                       .setRssi(-11)
-                                                       .setRunningAverageRssi(-12.3)
-                                                       .setServiceUuid(13)
-                                                       .setTxPower(14)
-                                                       .build();
+                .setBluetoothAddress("aa:bb:cc:dd:ee:ff")
+                .setBluetoothName("Any Bluetooth")
+                .setBeaconTypeCode(1)
+                .setExtraDataFields(Arrays.asList(4L, 5L))
+                .setId1("6")
+                .setId2("7")
+                .setId3("8")
+                .setManufacturer(10)
+                .setMultiFrameBeacon(true)
+                .setParserIdentifier("Any Parser ID")
+                .setRssi(-11)
+                .setRunningAverageRssi(-12.3)
+                .setServiceUuid(13)
+                .setTxPower(14)
+                .build();
         original.setPacketCount(15);
         original.setRssiMeasurementCount(16);
         final AltBeacon copied = new AltBeacon(original);
diff --git a/src/test/java/org/altbeacon/beacon/BeaconTest.java b/src/test/java/org/altbeacon/beacon/BeaconTest.java
index 63d37ea8..2d4e6652 100644
--- a/src/test/java/org/altbeacon/beacon/BeaconTest.java
+++ b/src/test/java/org/altbeacon/beacon/BeaconTest.java
@@ -8,6 +8,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Arrays;
+import java.util.List;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.allOf;
@@ -16,17 +25,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.List;
-
-import java.io.ObjectOutputStream;
-import java.io.ObjectInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-
 @Config(sdk = 18)
 
 @RunWith(RobolectricTestRunner.class)
@@ -160,7 +158,7 @@ public void testCalculateAccuracyWithRssiGreaterThanPower() {
     public void testCalculateAccuracyWithRssiLessThanPower() {
         Beacon.setDistanceCalculator(new ModelSpecificDistanceCalculator(null, null));
         double accuracy = Beacon.calculateDistance(-55, -60);
-        assertTrue("Distance should be over one meter if mRssi is less negative than power. Accuracy was "+accuracy,  accuracy > 1.0);
+        assertTrue("Distance should be over one meter if mRssi is less negative than power. Accuracy was " + accuracy, accuracy > 1.0);
     }
 
     @Test
@@ -227,21 +225,22 @@ public void testHashCodeWithNullIdentifier() {
     @Test
     public void parcelingBeaconContainsAllFields() {
         final Beacon original = new Beacon.Builder().setBluetoothAddress("aa:bb:cc:dd:ee:ff")
-                                                    .setBluetoothName("Any Bluetooth")
-                                                    .setBeaconTypeCode(1)
-                                                    .setDataFields(Arrays.asList(2L, 3L))
-                                                    .setExtraDataFields(Arrays.asList(4L, 5L))
-                                                    .setId1("6")
-                                                    .setId2("7")
-                                                    .setId3("8")
-                                                    .setManufacturer(10)
-                                                    .setMultiFrameBeacon(true)
-                                                    .setParserIdentifier("Any Parser ID")
-                                                    .setRssi(-11)
-                                                    .setRunningAverageRssi(-12.3)
-                                                    .setServiceUuid(13)
-                                                    .setTxPower(14)
-                                                    .build();
+                .setBluetoothName("Any Bluetooth")
+                .setBeaconTypeCode(1)
+                .setDataFields(Arrays.asList(2L, 3L))
+                .setExtraDataFields(Arrays.asList(4L, 5L))
+                .setId1("6")
+                .setId2("7")
+                .setId3("8")
+                .setManufacturer(10)
+                .setMultiFrameBeacon(true)
+                .setParserIdentifier("Any Parser ID")
+                .setRssi(-11)
+                .setRunningAverageRssi(-12.3)
+                .setServiceUuid(13)
+                .setTxPower(14)
+                .setBatteryLevel(0).setRealTxPower(0)
+                .build();
         original.setPacketCount(15);
         original.setRssiMeasurementCount(16);
 
@@ -276,21 +275,21 @@ public void parcelingBeaconContainsAllFields() {
     @Test
     public void copyingBeaconContainsAllFields() {
         final Beacon original = new Beacon.Builder().setBluetoothAddress("aa:bb:cc:dd:ee:ff")
-                                                    .setBluetoothName("Any Bluetooth")
-                                                    .setBeaconTypeCode(1)
-                                                    .setDataFields(Arrays.asList(2L, 3L))
-                                                    .setExtraDataFields(Arrays.asList(4L, 5L))
-                                                    .setId1("6")
-                                                    .setId2("7")
-                                                    .setId3("8")
-                                                    .setManufacturer(10)
-                                                    .setMultiFrameBeacon(true)
-                                                    .setParserIdentifier("Any Parser ID")
-                                                    .setRssi(-11)
-                                                    .setRunningAverageRssi(-12.3)
-                                                    .setServiceUuid(13)
-                                                    .setTxPower(14)
-                                                    .build();
+                .setBluetoothName("Any Bluetooth")
+                .setBeaconTypeCode(1)
+                .setDataFields(Arrays.asList(2L, 3L))
+                .setExtraDataFields(Arrays.asList(4L, 5L))
+                .setId1("6")
+                .setId2("7")
+                .setId3("8")
+                .setManufacturer(10)
+                .setMultiFrameBeacon(true)
+                .setParserIdentifier("Any Parser ID")
+                .setRssi(-11)
+                .setRunningAverageRssi(-12.3)
+                .setServiceUuid(13)
+                .setTxPower(14)
+                .build();
         original.setPacketCount(15);
         original.setRssiMeasurementCount(16);
 
@@ -328,6 +327,7 @@ public void copyingBeaconContainsAllFields() {
             return bos.toByteArray();
         }
     }
+
     private Object convertFromBytes(byte[] bytes) throws IOException, ClassNotFoundException {
         try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
              ObjectInputStream in = new ObjectInputStream(bis)) {
