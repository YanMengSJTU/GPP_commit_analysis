diff --git a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java b/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
index 6319a3f6..639ae684 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
@@ -146,49 +146,12 @@ void reloadParsers() {
         mExtraDataBeaconTracker = new ExtraDataBeaconTracker(matchBeaconsByServiceUUID);
     }
 
-    @RequiresApi(api = Build.VERSION_CODES.N_MR1)
     void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
-        ScanSettings settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
-        List<ScanFilter> filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
-                new ArrayList<BeaconParser>(beaconParsers));
-        try {
-            final BluetoothManager bluetoothManager =
-                    (BluetoothManager) mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
-            BluetoothAdapter bluetoothAdapter = bluetoothManager.getAdapter();
-            if (bluetoothAdapter == null) {
-                LogManager.w(TAG, "Failed to construct a BluetoothAdapter");
-            }
-            else {
-                // commented out for this branch because this is only in Android O
-                //int result = bluetoothAdapter.getBluetoothLeScanner().startScan(filters, settings, getScanCallbackIntent());
-                //if (result != 0) {
-                //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
-                //}
-                //else {
-                //    LogManager.d(TAG, "Started passive beacon scan");
-                //}
-            }
-        }
-        catch (SecurityException e) {
-            LogManager.e(TAG, "SecurityException making Android O background scanner");
-        }
+        // Stub.  See full definition in other branch: scheduled-job-scanning-android-o
     }
 
-    @RequiresApi(api = Build.VERSION_CODES.N)
     void stopAndroidOBackgroundScan() {
-        try {
-            final BluetoothManager bluetoothManager =
-                    (BluetoothManager) mContext.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
-            BluetoothAdapter bluetoothAdapter = bluetoothManager.getAdapter();
-            if (bluetoothAdapter == null) {
-                LogManager.w(TAG, "Failed to construct a BluetoothAdapter");
-            } else {
-                // Commented out for this branch because this is only in Android O
-                //bluetoothAdapter.getBluetoothLeScanner().stopScan(getScanCallbackIntent());
-            }
-        } catch (SecurityException e) {
-               LogManager.e(TAG, "SecurityException stopping Android O background scanner");
-            }
+        // Stub.  See full definition in other branch: scheduled-job-scanning-android-o
     }
 
     // Low power scan results in the background will be delivered via Intent
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index 6165ed4e..ed285496 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -39,6 +39,8 @@
         Once the periodic one gets run, the immediate is cancelled.
      */
     public static final int IMMMEDIATE_SCAN_JOB_ID = 2;
+    // TODO: Change this to Build.VERSION_CODES.O when the SDK is released
+    private static final int ANDROID_O_VERSION = 10000;
 
     private ScanState mScanState;
     private Handler mStopHandler = new Handler();
@@ -111,8 +113,7 @@ private void startPassiveScanIfNeeded() {
             LogManager.i(TAG, "We are inside a beacon region.  We will not scan between cycles.");
         }
         else {
-            // TODO: Change this to >= Build.VERSION_CODES.O when the SDK is released
-            if (android.os.Build.VERSION.SDK_INT > Build.VERSION_CODES.N_MR1) {
+            if (android.os.Build.VERSION.SDK_INT >= ANDROID_O_VERSION) {
                 LogManager.i(TAG, "We are outside all beacon regions.  We will scan between cycles.");
                 mScanHelper.startAndroidOBackgroundScan(mScanState.getBeaconParsers());
             }
@@ -155,8 +156,7 @@ private boolean restartScanning() {
         if (mScanHelper.getCycledScanner() == null) {
             mScanHelper.createCycledLeScanner(mScanState.getBackgroundMode(), null);
         }
-        // TODO: Change this to >= Build.VERSION_CODES.O when the SDK is released
-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.N_MR1) {
+        if (Build.VERSION.SDK_INT >= ANDROID_O_VERSION) {
             mScanHelper.stopAndroidOBackgroundScan();
         }
         mScanHelper.getCycledScanner().setScanPeriods(mScanState.getBackgroundMode() ? mScanState.getBackgroundScanPeriod() : mScanState.getForegroundScanPeriod(),
