diff --git a/.circleci/config.yml b/.circleci/config.yml
index c12c6971..79bc1d9c 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -7,6 +7,8 @@ jobs:
     environment:
       JVM_OPTS: -Xmx3200m
     steps:
+      - run: yes | sdkmanager --licenses || true
+      - run: yes | sdkmanager --update || exit 0
       - checkout
       - restore_cache:
           key: jars-{{ checksum "build.gradle" }}-{{ checksum  "./build.gradle" }}
diff --git a/.travis.yml b/.travis.yml
index f8672718..c1b16f92 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,12 +1,12 @@
 language: java
 
-jdk: oraclejdk7
+jdk: oraclejdk8
 
 before_install:
   - export TERM=dumb
   - cp gradle.properties.dist gradle.properties
   - sudo apt-get install -qq libstdc++6:i386 lib32z1
-  - export COMPONENTS=build-tools-19.0.3,android-19,extra-android-m2repository
+  - export COMPONENTS=build-tools-28.0.3,android-28,extra-android-m2repository
   - curl -L https://raw.github.com/embarkmobile/android-sdk-installer/version-1/android-sdk-installer | bash /dev/stdin --install=$COMPONENTS
   - source ~/.android-sdk-installer/env
 install:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 661fe92b..051db1d9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,31 @@
-### Development
+### 2.16.1 / 2019-02-10
 
+- Fix crash on starting scanning with a forground service configured when multiple BeaconConsumer
+  instances bound.  (#828, David G. Young)
+- Fix broken RegionBoostrap callbacks caused by change in previous release (#829, David G. Young)
+
+### 2.16 / 2019-02-10
+
+- New Region Bootstrap constructors allowing separate context and notifir (#821, Alper Tekin)
+- Fix intermittent crash caused by internal Android NPE (#824, kababu007)
+- Update gradle and robolectric (#805, Tony Tang)
+- Fix problem on service shutdown that leaked threads and left scanning on (#804, David G. Young)
+
+### 2.15.4 / 2018-12-11
+
+- Fix crash on BluetoothCrashResolver (#790, Michael Porter)
+
+### 2.15.3 / 2018-12-11
+
+- Samsung screen-off scans on Android 8.1+ fixed.  (#798, David G. Young)
+- Fix bug preventing callbacks after unbind/bind when using ScanJobs.  (#765, David G. Young)
 - Prevent NPE on access CycledLEScanner after OOM on Android 8+.  (#766, David G. Young)
+- Make switching back and forth between a foreground service and scan jobs more reliable
+(#767, David G. Young)
+- Disable BluetoothCrashResolver on Android 5+ as a it is not helpful can can create log noise.
+   (#768, David G. Young)
+- Prevent NPE on start scan. (#780, Adrián Nieto Rodríguez)
+- Fix thread leak leading to OOM Exceptions when using ScanJobs (#785, David G. Young)
 
 ### 2.15.2 / 2018-10-17
 
diff --git a/README.md b/README.md
index 2c827a66..6d02e7e4 100644
--- a/README.md
+++ b/README.md
@@ -58,7 +58,7 @@ replacing `${altbeacon.version}` with the version you wish to use.
 ## How to build this Library
 
 This project uses an AndroidStudio/gradle build system and is known working with Android Studio
-2.1 and Gradle 2.2.1
+3.2.1 and Gradle 4.10.3
 
 Key Gradle build targets:
 
diff --git a/build.gradle b/build.gradle
index 5951f331..ceead8f5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,196 +1,20 @@
-ext {
-    isSnapshot = !project.hasProperty('release')
-    isSnapCi = System.getenv('SNAP_CI') != null
-    isSnapPullRequest = System.getenv('SNAP_PULL_REQUEST_NUMBER') != null
-}
-
-/*
- * Gets the version name from the latest Git tag
- */
-def getVersionName = {
-    def stdout = new ByteArrayOutputStream()
-    try {
-        exec {
-            commandLine 'git', 'describe', '--tags'
-            standardOutput = stdout
-        }
-        return stdout.toString().trim()
-    }
-    catch (e) {
-        println("Can't get version from git: " + e);
-        return "adhoc"
-    }
-}
-
 buildscript {
     repositories {
+        google()
         jcenter()
-        maven {
-            url 'https://maven.google.com'
-        }
-        maven {
-            url 'https://dl.google.com/dl/android/maven2/'
-        }
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.1'
+        classpath 'com.android.tools.build:gradle:3.2.1'
+        //noinspection GradleDependency
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
+        //noinspection GradleDependency
         classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.3'
     }
 }
-
-apply plugin: 'com.android.library'
-
-apply from: 'gradle/eclipse.gradle'
-
 allprojects {
-    version = "${getVersionName()}${isSnapshot == true ? "-SNAPSHOT" : ""}"
-    group = "org.altbeacon"
-
     repositories {
+        google()
         jcenter()
-        maven {
-            url 'https://maven.google.com'
-        }
-        maven {
-            url 'https://dl.google.com/dl/android/maven2/'
-        }
-    }
-}
-
-android {
-    compileSdkVersion 28
-    buildToolsVersion '28.0.0'
-
-    defaultConfig {
-        // Unfortunately 'com.android.support:appcompat-v7:26.0.0'
-        // requires minSdkVersion 14, forcing a bump verson minSdkVersion 7
-        // But since only 0.8% of Android devices have < SDK 14 as of Une 2017, this will become
-        // the new min version for this library in order to target Android O
-        minSdkVersion 14
-        targetSdkVersion 28
-        versionCode 1
-        versionName version
-        consumerProguardFiles 'proguard-rules.pro'
-        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-    }
-
-    compileOptions {
-        encoding "UTF-8"
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
-    }
-
-    lintOptions {
-        abortOnError false
-    }
-
-    packagingOptions {
-        exclude 'LICENSE.txt'
-        exclude 'META-INF/LICENSE'
-        exclude 'META-INF/LICENSE.txt'
-        exclude 'META-INF/NOTICE'
-    }
-}
-
-configurations {
-    doclava
-}
-
-
-
-dependencies {
-    compile fileTree ( dir: 'libs', include: ['*.jar'] )
-    compile 'com.android.support:support-v4:28.0.0-rc02'
-    compile 'com.android.support:support-annotations:28.0.0-rc02'
-
-    testCompile 'com.google.android:android-test:4.1.1.4'
-    testCompile('junit:junit:4.12') {
-        exclude group: 'org.hamcrest'
     }
-    testCompile('org.hamcrest:hamcrest-junit:2.0.0.0') {
-        exclude group: 'junit'
-    }
-    testCompile('com.squareup:fest-android:1.0.+@aar')
-    testCompile('org.robolectric:robolectric:3.0') {
-        exclude group: 'junit'
-    }
-    testCompile('org.mockito:mockito-core:1.10.19') {
-        exclude group: 'org.hamcrest'
-    }
-    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
-        exclude group: 'com.android.support', module: 'support-annotations'
-        exclude group: 'org.hamcrest'
-    })
-    androidTestCompile 'org.apache.commons:commons-math3:3.6.1'
-    doclava 'com.google.doclava:doclava:1.0.6'
-}
-
-apply plugin: 'idea'
-
-idea {
-    module {
-        testOutputDir = file('build/test-classes/debug')
-    }
-}
-
-task renameAarForRelease(type: Copy, dependsOn: build) {
-    description = "Rename the aar for easy release publishing"
-
-    from "$buildDir/outputs/aar/" //${project.name}-release.aar
-    into "$buildDir/outputs/aar/" //${project.name}-${project.version}.aar"
-    include "${project.name}-release.aar"
-    rename { String fileName ->
-        fileName = "${project.name}-${project.version}.aar"
-    }
-}
-
-task distribution(dependsOn: [bundleEclipse, build, clean, renameAarForRelease]) << {
-    println "Building with version=$version"
-}
-
-task release(dependsOn: 'distribution') << {
-    println('Doing release build')
-}
-
-android.libraryVariants.all { variant ->
-
-    task("generate${variant.name}Javadoc", type: Javadoc) {
-        title = "Android Beacon Library $version API"
-        description "Generates Javadoc for $variant.name."
-        source = variant.javaCompile.source
-        ext.androidJar =
-                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
-        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
-        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
-        exclude '**/BuildConfig.java'
-        exclude '**/R.java'
-    }
-
-}
-
-task generateJavadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
-    failOnError = true
-    title = null
-    source = android.sourceSets.main.java.srcDirs
-    options.doclet = "com.google.doclava.Doclava"
-    options.docletpath = configurations.doclava.files.asType(List)
-    classpath +=
-            project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile
-
-    destinationDir = file("../javadocs/")
-}
-
-build.mustRunAfter clean
-
-apply from: 'gradle/credentials.gradle'
-apply from: 'gradle/compile.gradle'
-apply from: 'gradle/publishing.gradle'
-apply from: 'gradle/bintray.gradle'
-apply from: 'gradle/artifactory.gradle'
-
-artifactoryPublish {
-    // Skip deploying to artifactory if building a pull request
-    onlyIf { !isSnapPullRequest }
-}
+}
\ No newline at end of file
diff --git a/circle.yml b/circle.yml
index 622e3df3..9d81d64d 100644
--- a/circle.yml
+++ b/circle.yml
@@ -3,7 +3,7 @@ machine:
     version: openjdk8
 dependencies:
   pre:
-    - echo y | android update sdk --no-ui --all --filter "tools,android-27,build-tools-27.0.3,platform-tools,extra-android-m2repository,extra-google-m2repository"
+    - echo y | android update sdk --no-ui --all --filter "tools,android-28,build-tools-28.0.3,platform-tools,extra-android-m2repository,extra-google-m2repository"
 general:
   branches:
     ignore:
diff --git a/eclipse-support/project.properties b/eclipse-support/project.properties
index 1b8c5a34..9ca1deb7 100644
--- a/eclipse-support/project.properties
+++ b/eclipse-support/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-18
+target=android-28
 android.library=true
diff --git a/gradle.properties b/gradle.properties
index 3737a926..129c5292 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -8,3 +8,4 @@ project_connection = scm:git:https://github.com/AltBeacon/android-beacon-library
 project_dev_connection = scm:git:git@github.com:AltBeacon/android-beacon-library.git
 project_bintray_repo = android
 project_bintray_org = altbeacon
+android.enableUnitTestBinaryResources=true
\ No newline at end of file
diff --git a/gradle/package.gradle b/gradle/package.gradle
new file mode 100644
index 00000000..c64d05f6
--- /dev/null
+++ b/gradle/package.gradle
@@ -0,0 +1,68 @@
+apply plugin: 'idea'
+
+idea {
+    module {
+        testOutputDir = file('build/test-classes/debug')
+    }
+}
+
+task renameAarForRelease(type: Copy, dependsOn: build) {
+    description = "Rename the aar for easy release publishing"
+
+    from "$buildDir/outputs/aar/" //${project.name}-release.aar
+    into "$buildDir/outputs/aar/" //${project.name}-${project.version}.aar"
+    include "${project.name}-release.aar"
+    rename { String fileName ->
+        fileName = "${project.name}-${project.version}.aar"
+    }
+}
+
+task distribution(dependsOn: [bundleEclipse, build, clean, renameAarForRelease]) << {
+    println "Building with version=$version"
+}
+
+task release(dependsOn: 'distribution') << {
+    println('Doing release build')
+}
+
+android.libraryVariants.all { variant ->
+
+    task("generate${variant.name}Javadoc", type: Javadoc) {
+        title = "Android Beacon Library $version API"
+        description "Generates Javadoc for $variant.name."
+        source = variant.javaCompile.source
+        ext.androidJar =
+                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
+        //Refer to https://stackoverflow.com/a/50833438/4068957
+        doFirst { classpath = files(variant.javaCompile.classpath.files, ext.androidJar)}
+        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
+        exclude '**/BuildConfig.java'
+        exclude '**/R.java'
+    }
+
+}
+
+task generateJavadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
+    failOnError = true
+    title = null
+    source = android.sourceSets.main.java.srcDirs
+    options.doclet = "com.google.doclava.Doclava"
+    options.docletpath = configurations.doclava.files.asType(List)
+    classpath +=
+            project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile
+
+    destinationDir = file("../javadocs/")
+}
+
+build.mustRunAfter clean
+
+apply from: '../gradle/credentials.gradle'
+apply from: '../gradle/compile.gradle'
+apply from: '../gradle/publishing.gradle'
+apply from: '../gradle/bintray.gradle'
+apply from: '../gradle/artifactory.gradle'
+
+artifactoryPublish {
+    // Skip deploying to artifactory if building a pull request
+    onlyIf { !isSnapPullRequest }
+}
diff --git a/gradle/version.gradle b/gradle/version.gradle
new file mode 100644
index 00000000..7b4d57d5
--- /dev/null
+++ b/gradle/version.gradle
@@ -0,0 +1,28 @@
+ext {
+    isSnapshot = !project.hasProperty('release')
+    isSnapCi = System.getenv('SNAP_CI') != null
+    isSnapPullRequest = System.getenv('SNAP_PULL_REQUEST_NUMBER') != null
+}
+
+/*
+ * Gets the version name from the latest Git tag
+ */
+def getVersionName = {
+    def stdout = new ByteArrayOutputStream()
+    try {
+        exec {
+            commandLine 'git', 'describe', '--tags'
+            standardOutput = stdout
+        }
+        return stdout.toString().trim()
+    }
+    catch (e) {
+        println("Can't get version from git: " + e);
+        return "adhoc"
+    }
+}
+
+allprojects {
+    version = "${getVersionName()}${isSnapshot ? "-SNAPSHOT" : ""}"
+    group = "org.altbeacon"
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 9a16f53a..eb74e6d0 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,9 +1,6 @@
-#Sat Apr 01 10:19:45 EDT 2017
+#Thu Jan 10 18:19:47 EST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
-#distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-milestone-1-all.zip
-#distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-milestone-1-all.zip
-#distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-all.zip
diff --git a/lib/build.gradle b/lib/build.gradle
new file mode 100644
index 00000000..1d483c1e
--- /dev/null
+++ b/lib/build.gradle
@@ -0,0 +1,72 @@
+apply plugin: 'com.android.library'
+apply from: '../gradle/eclipse.gradle'
+apply from: '../gradle/version.gradle'
+
+android {
+    compileSdkVersion 28
+    buildToolsVersion '28.0.3'
+
+    defaultConfig {
+        // Unfortunately 'com.android.support:appcompat-v7:26.0.0'
+        // requires minSdkVersion 14, forcing a bump verson minSdkVersion 7
+        // But since only 0.8% of Android devices have < SDK 14 as of Une 2017, this will become
+        // the new min version for this library in order to target Android O
+        minSdkVersion 14
+        targetSdkVersion 28
+        versionCode 1
+        versionName version
+        consumerProguardFiles 'proguard-rules.pro'
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+
+    compileOptions {
+        encoding "UTF-8"
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    packagingOptions {
+        exclude 'LICENSE.txt'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'META-INF/NOTICE'
+    }
+
+    testOptions {
+        execution 'ANDROID_TEST_ORCHESTRATOR'
+        animationsDisabled true
+        unitTests {
+            includeAndroidResources = true
+        }
+    }
+}
+
+configurations {
+    doclava
+}
+
+dependencies {
+    implementation fileTree ( dir: 'libs', include: ['*.jar'] )
+    implementation 'com.android.support:support-v4:28.0.0'
+    implementation 'com.android.support:support-annotations:28.0.0'
+
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.robolectric:robolectric:4.1'
+    testImplementation 'com.google.android:android-test:4.1.1.4'
+    testImplementation 'com.squareup:fest-android:1.0.8@aar'
+    testImplementation 'org.mockito:mockito-core:2.23.4'
+
+    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'
+
+    androidTestImplementation 'com.android.support.test:rules:1.0.2'
+    androidTestImplementation 'org.apache.commons:commons-math3:3.6.1'
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+    
+    doclava 'com.google.doclava:doclava:1.0.6'
+}
+
+apply from: '../gradle/package.gradle'
\ No newline at end of file
diff --git a/src/androidTest/java/org/altbeacon/beacon/NotifierSetCopyBenchmarksTest.java b/lib/src/androidTest/java/org/altbeacon/beacon/NotifierSetCopyBenchmarksTest.java
similarity index 100%
rename from src/androidTest/java/org/altbeacon/beacon/NotifierSetCopyBenchmarksTest.java
rename to lib/src/androidTest/java/org/altbeacon/beacon/NotifierSetCopyBenchmarksTest.java
diff --git a/src/main/AndroidManifest.xml b/lib/src/main/AndroidManifest.xml
similarity index 100%
rename from src/main/AndroidManifest.xml
rename to lib/src/main/AndroidManifest.xml
diff --git a/src/main/java/org/altbeacon/beacon/AltBeacon.java b/lib/src/main/java/org/altbeacon/beacon/AltBeacon.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/AltBeacon.java
rename to lib/src/main/java/org/altbeacon/beacon/AltBeacon.java
diff --git a/src/main/java/org/altbeacon/beacon/AltBeaconParser.java b/lib/src/main/java/org/altbeacon/beacon/AltBeaconParser.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/AltBeaconParser.java
rename to lib/src/main/java/org/altbeacon/beacon/AltBeaconParser.java
diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/lib/src/main/java/org/altbeacon/beacon/Beacon.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/Beacon.java
rename to lib/src/main/java/org/altbeacon/beacon/Beacon.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconConsumer.java b/lib/src/main/java/org/altbeacon/beacon/BeaconConsumer.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconConsumer.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconConsumer.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconData.java b/lib/src/main/java/org/altbeacon/beacon/BeaconData.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconData.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconData.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconDataNotifier.java b/lib/src/main/java/org/altbeacon/beacon/BeaconDataNotifier.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconDataNotifier.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconDataNotifier.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java b/lib/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconIntentProcessor.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconLocalBroadcastProcessor.java b/lib/src/main/java/org/altbeacon/beacon/BeaconLocalBroadcastProcessor.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconLocalBroadcastProcessor.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconLocalBroadcastProcessor.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/lib/src/main/java/org/altbeacon/beacon/BeaconManager.java
similarity index 98%
rename from src/main/java/org/altbeacon/beacon/BeaconManager.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 9dac4c40..2c107939 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/lib/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -429,8 +429,14 @@ public void bind(@NonNull BeaconConsumer consumer) {
                     Intent intent = new Intent(consumer.getApplicationContext(), BeaconService.class);
                     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
                             this.getForegroundServiceNotification() != null) {
-                        LogManager.i(TAG, "Starting foreground beacon scanning service.");
-                        mContext.startForegroundService(intent);
+                        if (isAnyConsumerBound()) {
+                            LogManager.i(TAG, "Not starting foreground beacon scanning" +
+                                    " service.  A consumer is already bound, so it should be started");
+                        }
+                        else {
+                            LogManager.i(TAG, "Starting foreground beacon scanning service.");
+                            mContext.startForegroundService(intent);
+                        }
                     }
                     else {
                     }
@@ -461,7 +467,9 @@ public void unbind(@NonNull BeaconConsumer consumer) {
                 else {
                     consumer.unbindService(consumers.get(consumer).beaconServiceConnection);
                 }
+                LogManager.d(TAG, "Before unbind, consumer count is "+consumers.size());
                 consumers.remove(consumer);
+                LogManager.d(TAG, "After unbind, consumer count is "+consumers.size());
                 if (consumers.size() == 0) {
                     // If this is the last consumer to disconnect, the service will exit
                     // release the serviceMessenger.
@@ -893,7 +901,9 @@ public void applySettings() {
 
     protected void syncSettingsToService() {
         if (mScheduledScanJobsEnabled) {
-            ScanJobScheduler.getInstance().applySettingsToScheduledJob(mContext, this);
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                ScanJobScheduler.getInstance().applySettingsToScheduledJob(mContext, this);
+            }
             return;
         }
         try {
diff --git a/src/main/java/org/altbeacon/beacon/BeaconParser.java b/lib/src/main/java/org/altbeacon/beacon/BeaconParser.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconParser.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconParser.java
diff --git a/src/main/java/org/altbeacon/beacon/BeaconTransmitter.java b/lib/src/main/java/org/altbeacon/beacon/BeaconTransmitter.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BeaconTransmitter.java
rename to lib/src/main/java/org/altbeacon/beacon/BeaconTransmitter.java
diff --git a/src/main/java/org/altbeacon/beacon/BleNotAvailableException.java b/lib/src/main/java/org/altbeacon/beacon/BleNotAvailableException.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/BleNotAvailableException.java
rename to lib/src/main/java/org/altbeacon/beacon/BleNotAvailableException.java
diff --git a/src/main/java/org/altbeacon/beacon/Identifier.java b/lib/src/main/java/org/altbeacon/beacon/Identifier.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/Identifier.java
rename to lib/src/main/java/org/altbeacon/beacon/Identifier.java
diff --git a/src/main/java/org/altbeacon/beacon/IntentHandler.java b/lib/src/main/java/org/altbeacon/beacon/IntentHandler.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/IntentHandler.java
rename to lib/src/main/java/org/altbeacon/beacon/IntentHandler.java
diff --git a/src/main/java/org/altbeacon/beacon/MonitorNotifier.java b/lib/src/main/java/org/altbeacon/beacon/MonitorNotifier.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/MonitorNotifier.java
rename to lib/src/main/java/org/altbeacon/beacon/MonitorNotifier.java
diff --git a/src/main/java/org/altbeacon/beacon/RangeNotifier.java b/lib/src/main/java/org/altbeacon/beacon/RangeNotifier.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/RangeNotifier.java
rename to lib/src/main/java/org/altbeacon/beacon/RangeNotifier.java
diff --git a/src/main/java/org/altbeacon/beacon/Region.java b/lib/src/main/java/org/altbeacon/beacon/Region.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/Region.java
rename to lib/src/main/java/org/altbeacon/beacon/Region.java
diff --git a/src/main/java/org/altbeacon/beacon/client/BeaconDataFactory.java b/lib/src/main/java/org/altbeacon/beacon/client/BeaconDataFactory.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/client/BeaconDataFactory.java
rename to lib/src/main/java/org/altbeacon/beacon/client/BeaconDataFactory.java
diff --git a/src/main/java/org/altbeacon/beacon/client/DataProviderException.java b/lib/src/main/java/org/altbeacon/beacon/client/DataProviderException.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/client/DataProviderException.java
rename to lib/src/main/java/org/altbeacon/beacon/client/DataProviderException.java
diff --git a/src/main/java/org/altbeacon/beacon/client/NullBeaconDataFactory.java b/lib/src/main/java/org/altbeacon/beacon/client/NullBeaconDataFactory.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/client/NullBeaconDataFactory.java
rename to lib/src/main/java/org/altbeacon/beacon/client/NullBeaconDataFactory.java
diff --git a/src/main/java/org/altbeacon/beacon/distance/AndroidModel.java b/lib/src/main/java/org/altbeacon/beacon/distance/AndroidModel.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/distance/AndroidModel.java
rename to lib/src/main/java/org/altbeacon/beacon/distance/AndroidModel.java
diff --git a/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java b/lib/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java
rename to lib/src/main/java/org/altbeacon/beacon/distance/CurveFittedDistanceCalculator.java
diff --git a/src/main/java/org/altbeacon/beacon/distance/DistanceCalculator.java b/lib/src/main/java/org/altbeacon/beacon/distance/DistanceCalculator.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/distance/DistanceCalculator.java
rename to lib/src/main/java/org/altbeacon/beacon/distance/DistanceCalculator.java
diff --git a/src/main/java/org/altbeacon/beacon/distance/DistanceConfigFetcher.java b/lib/src/main/java/org/altbeacon/beacon/distance/DistanceConfigFetcher.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/distance/DistanceConfigFetcher.java
rename to lib/src/main/java/org/altbeacon/beacon/distance/DistanceConfigFetcher.java
diff --git a/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculator.java b/lib/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculator.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculator.java
rename to lib/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculator.java
diff --git a/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceUpdater.java b/lib/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceUpdater.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceUpdater.java
rename to lib/src/main/java/org/altbeacon/beacon/distance/ModelSpecificDistanceUpdater.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/AbstractAndroidLogger.java b/lib/src/main/java/org/altbeacon/beacon/logging/AbstractAndroidLogger.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/AbstractAndroidLogger.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/AbstractAndroidLogger.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/EmptyLogger.java b/lib/src/main/java/org/altbeacon/beacon/logging/EmptyLogger.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/EmptyLogger.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/EmptyLogger.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/InfoAndroidLogger.java b/lib/src/main/java/org/altbeacon/beacon/logging/InfoAndroidLogger.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/InfoAndroidLogger.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/InfoAndroidLogger.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/LogManager.java b/lib/src/main/java/org/altbeacon/beacon/logging/LogManager.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/LogManager.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/LogManager.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/Logger.java b/lib/src/main/java/org/altbeacon/beacon/logging/Logger.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/Logger.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/Logger.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/Loggers.java b/lib/src/main/java/org/altbeacon/beacon/logging/Loggers.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/Loggers.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/Loggers.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/VerboseAndroidLogger.java b/lib/src/main/java/org/altbeacon/beacon/logging/VerboseAndroidLogger.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/VerboseAndroidLogger.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/VerboseAndroidLogger.java
diff --git a/src/main/java/org/altbeacon/beacon/logging/WarningAndroidLogger.java b/lib/src/main/java/org/altbeacon/beacon/logging/WarningAndroidLogger.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/logging/WarningAndroidLogger.java
rename to lib/src/main/java/org/altbeacon/beacon/logging/WarningAndroidLogger.java
diff --git a/src/main/java/org/altbeacon/beacon/powersave/BackgroundPowerSaver.java b/lib/src/main/java/org/altbeacon/beacon/powersave/BackgroundPowerSaver.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/powersave/BackgroundPowerSaver.java
rename to lib/src/main/java/org/altbeacon/beacon/powersave/BackgroundPowerSaver.java
diff --git a/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java b/lib/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java
rename to lib/src/main/java/org/altbeacon/beacon/service/ArmaRssiFilter.java
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java
similarity index 97%
rename from src/main/java/org/altbeacon/beacon/service/BeaconService.java
rename to lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index 2febe77f..e296ee6b 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -197,8 +197,10 @@ else if (msg.what == MSG_SYNC_SETTINGS) {
     @MainThread
     @Override
     public void onCreate() {
-        bluetoothCrashResolver = new BluetoothCrashResolver(this);
-        bluetoothCrashResolver.start();
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+            bluetoothCrashResolver = new BluetoothCrashResolver(this);
+            bluetoothCrashResolver.start();
+        }
 
         mScanHelper = new ScanHelper(this);
         if (mScanHelper.getCycledScanner() == null) {
@@ -308,9 +310,12 @@ public IBinder onBind(Intent intent) {
         return mMessenger.getBinder();
     }
 
+    // called when the last bound client calls unbind
     @Override
     public boolean onUnbind(Intent intent) {
-        LogManager.i(TAG, "unbinding");
+        LogManager.i(TAG, "unbinding so destroying self");
+        this.stopForeground(true);
+        this.stopSelf();
         return false;
     }
 
@@ -325,16 +330,18 @@ public void onDestroy() {
         if (mBeaconNotificationProcessor != null) {
             mBeaconNotificationProcessor.unregister();
         }
-        stopForeground(true);
-        bluetoothCrashResolver.stop();
+        if (bluetoothCrashResolver != null) {
+            bluetoothCrashResolver.stop();
+        }
         LogManager.i(TAG, "onDestroy called.  stopping scanning");
         handler.removeCallbacksAndMessages(null);
 
-        if (mScanHelper.getCycledScanner() == null) {
+        if (mScanHelper.getCycledScanner() != null) {
             mScanHelper.getCycledScanner().stop();
             mScanHelper.getCycledScanner().destroy();
         }
         mScanHelper.getMonitoringStatus().stopStatusPreservation();
+        mScanHelper.terminateThreads();
     }
 
     @Override
diff --git a/src/main/java/org/altbeacon/beacon/service/Callback.java b/lib/src/main/java/org/altbeacon/beacon/service/Callback.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/Callback.java
rename to lib/src/main/java/org/altbeacon/beacon/service/Callback.java
diff --git a/src/main/java/org/altbeacon/beacon/service/DetectionTracker.java b/lib/src/main/java/org/altbeacon/beacon/service/DetectionTracker.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/DetectionTracker.java
rename to lib/src/main/java/org/altbeacon/beacon/service/DetectionTracker.java
diff --git a/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java b/lib/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java
rename to lib/src/main/java/org/altbeacon/beacon/service/ExtraDataBeaconTracker.java
diff --git a/src/main/java/org/altbeacon/beacon/service/MonitoringData.java b/lib/src/main/java/org/altbeacon/beacon/service/MonitoringData.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/MonitoringData.java
rename to lib/src/main/java/org/altbeacon/beacon/service/MonitoringData.java
diff --git a/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java b/lib/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
rename to lib/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
diff --git a/src/main/java/org/altbeacon/beacon/service/RangeState.java b/lib/src/main/java/org/altbeacon/beacon/service/RangeState.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/RangeState.java
rename to lib/src/main/java/org/altbeacon/beacon/service/RangeState.java
diff --git a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java b/lib/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
rename to lib/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
diff --git a/src/main/java/org/altbeacon/beacon/service/RangingData.java b/lib/src/main/java/org/altbeacon/beacon/service/RangingData.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/RangingData.java
rename to lib/src/main/java/org/altbeacon/beacon/service/RangingData.java
diff --git a/src/main/java/org/altbeacon/beacon/service/RegionMonitoringState.java b/lib/src/main/java/org/altbeacon/beacon/service/RegionMonitoringState.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/RegionMonitoringState.java
rename to lib/src/main/java/org/altbeacon/beacon/service/RegionMonitoringState.java
diff --git a/src/main/java/org/altbeacon/beacon/service/RssiFilter.java b/lib/src/main/java/org/altbeacon/beacon/service/RssiFilter.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/RssiFilter.java
rename to lib/src/main/java/org/altbeacon/beacon/service/RssiFilter.java
diff --git a/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java b/lib/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
rename to lib/src/main/java/org/altbeacon/beacon/service/RunningAverageRssiFilter.java
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java b/lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
similarity index 88%
rename from src/main/java/org/altbeacon/beacon/service/ScanHelper.java
rename to lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
index 21802232..dbf4d80c 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
@@ -46,6 +46,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
 
 /**
  * Created by dyoung on 6/16/17.
@@ -60,6 +61,7 @@
 
 class ScanHelper {
     private static final String TAG = ScanHelper.class.getSimpleName();
+    @Nullable
     private ExecutorService mExecutor;
     private BeaconManager mBeaconManager;
     @Nullable
@@ -78,7 +80,34 @@
     ScanHelper(Context context) {
         mContext = context;
         mBeaconManager = BeaconManager.getInstanceForApplication(context);
-        mExecutor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
+    }
+
+    private ExecutorService getExecutor() {
+        if (mExecutor == null) {
+            mExecutor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1);
+        }
+        return mExecutor;
+    }
+
+    void terminateThreads() {
+        if (mExecutor != null) {
+            mExecutor.shutdown();
+            try {
+                if (!mExecutor.awaitTermination(10, TimeUnit.MILLISECONDS)) {
+                    LogManager.e(TAG, "Can't stop beacon parsing thread.");
+                }
+            }
+            catch (InterruptedException e) {
+                LogManager.e(TAG, "Interrupted waiting to stop beacon parsing thread.");
+            }
+            mExecutor = null;
+        }
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        super.finalize();
+        terminateThreads();
     }
 
     @Nullable CycledLeScanner getCycledScanner() {
@@ -128,7 +157,7 @@ void processScanResult(BluetoothDevice device, int rssi, byte[] scanRecord) {
         NonBeaconLeScanCallback nonBeaconLeScanCallback = mBeaconManager.getNonBeaconLeScanCallback();
 
         try {
-            new ScanHelper.ScanProcessor(nonBeaconLeScanCallback).executeOnExecutor(mExecutor,
+            new ScanHelper.ScanProcessor(nonBeaconLeScanCallback).executeOnExecutor(getExecutor(),
                     new ScanHelper.ScanData(device, rssi, scanRecord));
         } catch (RejectedExecutionException e) {
             LogManager.w(TAG, "Ignoring scan result because we cannot keep up.");
@@ -167,17 +196,26 @@ void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
             } else if (!bluetoothAdapter.isEnabled()) {
                 LogManager.w(TAG, "Failed to start background scan on Android O: BluetoothAdapter is not enabled");
             } else {
-                int result = bluetoothAdapter.getBluetoothLeScanner().startScan(filters, settings, getScanCallbackIntent());
-                if (result != 0) {
-                    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
-                }
-                else {
-                    LogManager.d(TAG, "Started passive beacon scan");
+                BluetoothLeScanner scanner = bluetoothAdapter.getBluetoothLeScanner();
+                if (scanner != null) {
+                    int result = scanner.startScan(filters, settings, getScanCallbackIntent());
+                    if (result != 0) {
+                        LogManager.e(TAG, "Failed to start background scan on Android O.  Code: " + result);
+                    } else {
+                        LogManager.d(TAG, "Started passive beacon scan");
+                    }
+                } else {
+                    LogManager.e(TAG, "Failed to start background scan on Android O: scanner is null");
                 }
             }
-        }
-        catch (SecurityException e) {
+        } catch (SecurityException e) {
             LogManager.e(TAG, "SecurityException making Android O background scanner");
+        } catch (NullPointerException e) {
+            // Needed to stop a crash caused by internal NPE thrown by Android.  See issue #636
+            LogManager.e(TAG, "NullPointerException starting Android O background scanner", e);
+        } catch (RuntimeException e) {
+            // Needed to stop a crash caused by internal Android throw.  See issue #701
+            LogManager.e(TAG, "Unexpected runtime exception starting Android O background scanner", e);
         }
     }
 
@@ -199,6 +237,9 @@ void stopAndroidOBackgroundScan() {
             }
         } catch (SecurityException e) {
             LogManager.e(TAG, "SecurityException stopping Android O background scanner");
+        } catch (NullPointerException e) {
+            // Needed to stop a crash caused by internal NPE thrown by Android.  See issue #636
+            LogManager.e(TAG, "NullPointerException stopping Android O background scanner", e);
         } catch (RuntimeException e) {
             // Needed to stop a crash caused by internal Android throw.  See issue #701
             LogManager.e(TAG, "Unexpected runtime exception stopping Android O background scanner", e);
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/lib/src/main/java/org/altbeacon/beacon/service/ScanJob.java
similarity index 98%
rename from src/main/java/org/altbeacon/beacon/service/ScanJob.java
rename to lib/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index deb08039..b7380965 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -160,12 +160,16 @@ public boolean onStopJob(JobParameters params) {
         mStopHandler.removeCallbacksAndMessages(null);
         stopScanning();
         startPassiveScanIfNeeded();
+        mScanHelper.terminateThreads();
 
         return false;
     }
 
     private void stopScanning() {
         mInitialized = false;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            mScanHelper.stopAndroidOBackgroundScan();
+        }
         if (mScanHelper.getCycledScanner() != null) {
             mScanHelper.getCycledScanner().stop();
             mScanHelper.getCycledScanner().destroy();
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java b/lib/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
similarity index 99%
rename from src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
rename to lib/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
index 6eb17c23..422f3d0c 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
@@ -66,8 +66,8 @@ private ScanJobScheduler() {
     private void ensureNotificationProcessorSetup(Context context) {
         if (mBeaconNotificationProcessor == null) {
             mBeaconNotificationProcessor = new BeaconLocalBroadcastProcessor(context);
-            mBeaconNotificationProcessor.register();
         }
+        mBeaconNotificationProcessor.register();
     }
 
     /**
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanState.java b/lib/src/main/java/org/altbeacon/beacon/service/ScanState.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/ScanState.java
rename to lib/src/main/java/org/altbeacon/beacon/service/ScanState.java
diff --git a/src/main/java/org/altbeacon/beacon/service/SettingsData.java b/lib/src/main/java/org/altbeacon/beacon/service/SettingsData.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/SettingsData.java
rename to lib/src/main/java/org/altbeacon/beacon/service/SettingsData.java
diff --git a/src/main/java/org/altbeacon/beacon/service/StartRMData.java b/lib/src/main/java/org/altbeacon/beacon/service/StartRMData.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/StartRMData.java
rename to lib/src/main/java/org/altbeacon/beacon/service/StartRMData.java
diff --git a/src/main/java/org/altbeacon/beacon/service/Stats.java b/lib/src/main/java/org/altbeacon/beacon/service/Stats.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/Stats.java
rename to lib/src/main/java/org/altbeacon/beacon/service/Stats.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanCallback.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanCallback.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanCallback.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanCallback.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForJellyBeanMr2.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForJellyBeanMr2.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForJellyBeanMr2.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForJellyBeanMr2.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
similarity index 92%
rename from src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
index 280fa056..acac9d9e 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
+++ b/lib/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForLollipop.java
@@ -177,17 +177,33 @@ protected void startScan() {
             filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
                           mBeaconManager.getBeaconParsers());
         } else {
-            LogManager.d(TAG, "starting non-filtered scan in SCAN_MODE_LOW_LATENCY");
+            LogManager.d(TAG, "starting a scan in SCAN_MODE_LOW_LATENCY");
             settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)).build();
-            // We create wildcard scan filters that match any advertisement so that we can detect
+            // We create scan filters that match so that we can detect
             // beacons in foreground mode even if the screen is off.  This is a necessary workaround
             // for a change in Android 8.1 that blocks scan results when the screen is off unless
-            // there is a scan filter associatd with the scan.  Prior to 8.1, filters could just be
-            // left null.  The wildcard filter matches everything.
+            // there is a scan filter associated with the scan.  Prior to 8.1, filters could just be
+            // left null.
             // We only add these filters on 8.1+ devices, because adding scan filters has been reported
             // to cause scan failures on some Samsung devices with Android 5.x
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
-                filters = new ScanFilterUtils().createWildcardScanFilters();
+                if (Build.MANUFACTURER.equalsIgnoreCase("samsung")) {
+                    // On the Samsung Galaxy Note 8.1, scans are blocked with screen off when the
+                    // scan filter is empty (wildcard).  We do a more detailed filter on Samsung only
+                    // because it might block detections of AltBeacon packets with non-standard
+                    // manufacturer codes.  See #769 for details.
+                    LogManager.d(TAG, "Using a non-empty scan filter since this is Samsung 8.1+");
+                    filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
+                            mBeaconManager.getBeaconParsers());
+                }
+                else {
+                    LogManager.d(TAG, "Using an empty scan filter since this is 8.1+ on Non-Samsung");
+                    // The wildcard filter matches everything.
+                    filters = new ScanFilterUtils().createWildcardScanFilters();
+                }
+            }
+            else {
+                LogManager.d(TAG, "Using no scan filter since this is pre-8.1");
             }
         }
 
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetector.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetector.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetector.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetector.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/NonBeaconLeScanCallback.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/NonBeaconLeScanCallback.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/NonBeaconLeScanCallback.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/NonBeaconLeScanCallback.java
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/ScanFilterUtils.java b/lib/src/main/java/org/altbeacon/beacon/service/scanner/ScanFilterUtils.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/service/scanner/ScanFilterUtils.java
rename to lib/src/main/java/org/altbeacon/beacon/service/scanner/ScanFilterUtils.java
diff --git a/src/main/java/org/altbeacon/beacon/simulator/BeaconSimulator.java b/lib/src/main/java/org/altbeacon/beacon/simulator/BeaconSimulator.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/simulator/BeaconSimulator.java
rename to lib/src/main/java/org/altbeacon/beacon/simulator/BeaconSimulator.java
diff --git a/src/main/java/org/altbeacon/beacon/simulator/StaticBeaconSimulator.java b/lib/src/main/java/org/altbeacon/beacon/simulator/StaticBeaconSimulator.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/simulator/StaticBeaconSimulator.java
rename to lib/src/main/java/org/altbeacon/beacon/simulator/StaticBeaconSimulator.java
diff --git a/src/main/java/org/altbeacon/beacon/startup/BootstrapNotifier.java b/lib/src/main/java/org/altbeacon/beacon/startup/BootstrapNotifier.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/startup/BootstrapNotifier.java
rename to lib/src/main/java/org/altbeacon/beacon/startup/BootstrapNotifier.java
diff --git a/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java b/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java
similarity index 74%
rename from src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java
rename to lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java
index 6dc42d51..4931a08b 100644
--- a/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java
+++ b/lib/src/main/java/org/altbeacon/beacon/startup/RegionBootstrap.java
@@ -7,6 +7,7 @@
 
 import org.altbeacon.beacon.BeaconConsumer;
 import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.MonitorNotifier;
 import org.altbeacon.beacon.Region;
 import org.altbeacon.beacon.logging.LogManager;
 
@@ -34,12 +35,57 @@
 
     protected static final String TAG = "AppStarter";
     private BeaconManager beaconManager;
-    private BootstrapNotifier application;
+    private MonitorNotifier monitorNotifier;
+    private Context context;
     private List<Region> regions;
     private boolean disabled = false;
     private BeaconConsumer beaconConsumer;
     private boolean serviceConnected = false;
 
+    /**
+     * Constructor to bootstrap your Application on an entry/exit from a single region.
+     *
+     * @param context
+     * @param monitorNotifier
+     * @param region
+     */
+    public RegionBootstrap(final Context context, final MonitorNotifier monitorNotifier, Region region) {
+        if (context == null) {
+            throw new NullPointerException("Application Context should not be null");
+        }
+        this.context = context.getApplicationContext();
+        this.monitorNotifier = monitorNotifier;
+        regions = new ArrayList<Region>();
+        regions.add(region);
+
+        beaconManager = BeaconManager.getInstanceForApplication(context);
+        beaconConsumer = new InternalBeaconConsumer();
+        beaconManager.bind(beaconConsumer);
+        LogManager.d(TAG, "Waiting for BeaconService connection");
+    }
+
+    /**
+     * Constructor to bootstrap your Application on an entry/exit from multiple regions
+     *
+     * @param context
+     * @param monitorNotifier
+     * @param regions
+     */
+    public RegionBootstrap(final Context context, final MonitorNotifier monitorNotifier, List<Region> regions) {
+        if (context == null) {
+            throw new NullPointerException("Application Context should not be null");
+        }
+        this.context = context.getApplicationContext();
+        this.monitorNotifier = monitorNotifier;
+
+        this.regions = regions;
+
+        beaconManager = BeaconManager.getInstanceForApplication(context);
+        beaconConsumer = new InternalBeaconConsumer();
+        beaconManager.bind(beaconConsumer);
+        LogManager.d(TAG, "Waiting for BeaconService connection");
+    }
+
     /**
      * Constructor to bootstrap your Application on an entry/exit from a single region.
      *
@@ -50,10 +96,11 @@ public RegionBootstrap(BootstrapNotifier application, Region region) {
         if (application.getApplicationContext() == null) {
             throw new NullPointerException("The BootstrapNotifier instance is returning null from its getApplicationContext() method.  Have you implemented this method?");
         }
-        beaconManager = BeaconManager.getInstanceForApplication(application.getApplicationContext());
-        this.application = application;
+        this.context = application.getApplicationContext();
         regions = new ArrayList<Region>();
         regions.add(region);
+        this.monitorNotifier = application;
+        beaconManager = BeaconManager.getInstanceForApplication(context);
         beaconConsumer = new InternalBeaconConsumer();
         beaconManager.bind(beaconConsumer);
         LogManager.d(TAG, "Waiting for BeaconService connection");
@@ -61,6 +108,7 @@ public RegionBootstrap(BootstrapNotifier application, Region region) {
 
     /**
      * Constructor to bootstrap your Application on an entry/exit from multiple regions
+     *
      * @param application
      * @param regions
      */
@@ -68,11 +116,11 @@ public RegionBootstrap(BootstrapNotifier application, List<Region> regions) {
         if (application.getApplicationContext() == null) {
             throw new NullPointerException("The BootstrapNotifier instance is returning null from its getApplicationContext() method.  Have you implemented this method?");
         }
-        beaconManager = BeaconManager.getInstanceForApplication(application.getApplicationContext());
 
-        this.application = application;
+        this.context = application.getApplicationContext();
         this.regions = regions;
-
+        this.monitorNotifier = application;
+        beaconManager = BeaconManager.getInstanceForApplication(context);
         beaconConsumer = new InternalBeaconConsumer();
         beaconManager.bind(beaconConsumer);
         LogManager.d(TAG, "Waiting for BeaconService connection");
@@ -110,7 +158,7 @@ public void addRegion(Region region) {
                 } catch (RemoteException e) {
                     LogManager.e(e, TAG, "Can't add bootstrap region");
                 }
-            }else{
+            } else {
                 LogManager.w(TAG, "Adding a region: service not yet Connected");
             }
             regions.add(region);
@@ -130,7 +178,7 @@ public void removeRegion(Region region) {
                 } catch (RemoteException e) {
                     LogManager.e(e, TAG, "Can't stop bootstrap region");
                 }
-            }else{
+            } else {
                 LogManager.w(TAG, "Removing a region: service not yet Connected");
             }
             regions.remove(region);
@@ -147,7 +195,7 @@ public void removeRegion(Region region) {
         @Override
         public void onBeaconServiceConnect() {
             LogManager.d(TAG, "Activating background region monitoring");
-            beaconManager.addMonitorNotifier(application);
+            beaconManager.addMonitorNotifier(monitorNotifier);
             serviceConnected = true;
             try {
                 for (Region region : regions) {
@@ -168,8 +216,8 @@ public void onBeaconServiceConnect() {
         @Override
         public boolean bindService(Intent intent, ServiceConnection conn, int arg2) {
             this.serviceIntent = intent;
-            application.getApplicationContext().startService(intent);
-            return application.getApplicationContext().bindService(intent, conn, arg2);
+            context.startService(intent);
+            return context.bindService(intent, conn, arg2);
 
         }
 
@@ -178,7 +226,7 @@ public boolean bindService(Intent intent, ServiceConnection conn, int arg2) {
          */
         @Override
         public Context getApplicationContext() {
-            return application.getApplicationContext();
+            return context;
         }
 
         /**
@@ -186,8 +234,8 @@ public Context getApplicationContext() {
          */
         @Override
         public void unbindService(ServiceConnection conn) {
-            application.getApplicationContext().unbindService(conn);
-            application.getApplicationContext().stopService(serviceIntent);
+            context.unbindService(conn);
+            context.stopService(serviceIntent);
             serviceConnected = false;
         }
     }
diff --git a/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java b/lib/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
rename to lib/src/main/java/org/altbeacon/beacon/startup/StartupBroadcastReceiver.java
diff --git a/src/main/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessor.java b/lib/src/main/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessor.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessor.java
rename to lib/src/main/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessor.java
diff --git a/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java b/lib/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java
rename to lib/src/main/java/org/altbeacon/beacon/utils/ProcessUtils.java
diff --git a/src/main/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressor.java b/lib/src/main/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressor.java
similarity index 100%
rename from src/main/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressor.java
rename to lib/src/main/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressor.java
diff --git a/src/main/java/org/altbeacon/bluetooth/BleAdvertisement.java b/lib/src/main/java/org/altbeacon/bluetooth/BleAdvertisement.java
similarity index 100%
rename from src/main/java/org/altbeacon/bluetooth/BleAdvertisement.java
rename to lib/src/main/java/org/altbeacon/bluetooth/BleAdvertisement.java
diff --git a/src/main/java/org/altbeacon/bluetooth/BluetoothCrashResolver.java b/lib/src/main/java/org/altbeacon/bluetooth/BluetoothCrashResolver.java
similarity index 100%
rename from src/main/java/org/altbeacon/bluetooth/BluetoothCrashResolver.java
rename to lib/src/main/java/org/altbeacon/bluetooth/BluetoothCrashResolver.java
diff --git a/src/main/java/org/altbeacon/bluetooth/BluetoothMedic.java b/lib/src/main/java/org/altbeacon/bluetooth/BluetoothMedic.java
similarity index 100%
rename from src/main/java/org/altbeacon/bluetooth/BluetoothMedic.java
rename to lib/src/main/java/org/altbeacon/bluetooth/BluetoothMedic.java
diff --git a/src/main/java/org/altbeacon/bluetooth/BluetoothTestJob.java b/lib/src/main/java/org/altbeacon/bluetooth/BluetoothTestJob.java
similarity index 100%
rename from src/main/java/org/altbeacon/bluetooth/BluetoothTestJob.java
rename to lib/src/main/java/org/altbeacon/bluetooth/BluetoothTestJob.java
diff --git a/src/main/java/org/altbeacon/bluetooth/Pdu.java b/lib/src/main/java/org/altbeacon/bluetooth/Pdu.java
similarity index 100%
rename from src/main/java/org/altbeacon/bluetooth/Pdu.java
rename to lib/src/main/java/org/altbeacon/bluetooth/Pdu.java
diff --git a/src/main/resources/model-distance-calculations.json b/lib/src/main/resources/model-distance-calculations.json
similarity index 100%
rename from src/main/resources/model-distance-calculations.json
rename to lib/src/main/resources/model-distance-calculations.json
diff --git a/src/test/AndroidManifest.xml b/lib/src/test/AndroidManifest.xml
similarity index 100%
rename from src/test/AndroidManifest.xml
rename to lib/src/test/AndroidManifest.xml
diff --git a/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java b/lib/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
rename to lib/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
index 0ee13613..0eba592e 100644
--- a/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/AltBeaconParserTest.java
@@ -12,7 +12,7 @@
 import org.junit.Test;
 import org.robolectric.annotation.Config;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 /*
 HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
diff --git a/src/test/java/org/altbeacon/beacon/AltBeaconTest.java b/lib/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/AltBeaconTest.java
rename to lib/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
index 2d726781..c25c7d77 100644
--- a/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/AltBeaconTest.java
@@ -16,7 +16,7 @@
 import static org.hamcrest.Matchers.hasProperty;
 import static org.junit.Assert.assertEquals;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 
diff --git a/src/test/java/org/altbeacon/beacon/BeaconParserTest.java b/lib/src/test/java/org/altbeacon/beacon/BeaconParserTest.java
similarity index 98%
rename from src/test/java/org/altbeacon/beacon/BeaconParserTest.java
rename to lib/src/test/java/org/altbeacon/beacon/BeaconParserTest.java
index e9365309..9128fe37 100644
--- a/src/test/java/org/altbeacon/beacon/BeaconParserTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/BeaconParserTest.java
@@ -1,27 +1,20 @@
 package org.altbeacon.beacon;
 
-import android.annotation.TargetApi;
-import android.os.Build;
-import android.os.Parcel;
-
-import static android.test.MoreAsserts.assertNotEqual;
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.logging.Loggers;
-import org.robolectric.RobolectricTestRunner;
-
-import org.junit.runner.RunWith;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 
-@Config(sdk = 18)
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 
@@ -144,7 +137,6 @@ public void testRecognizeBeaconWithFormatSpecifyingManufacturer() {
         assertEquals("manufacturer should be parsed", 0x118 ,beacon.getManufacturer());
     }
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
     @Test
     public void testReEncodesBeacon() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
@@ -157,7 +149,6 @@ public void testReEncodesBeacon() {
         assertArrayEquals("beacon advertisement bytes should be the same after re-encoding", expectedMatch, regeneratedBytes);
     }
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
     @Test
     public void testReEncodesBeaconForEddystoneTelemetry() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
@@ -185,7 +176,6 @@ public void testLittleEndianIdentifierParsing() {
         assertEquals("manufacturer should be parsed", 0x118, beacon.getManufacturer());
     }
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
     @Test
     public void testReEncodesLittleEndianBeacon() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
diff --git a/src/test/java/org/altbeacon/beacon/BeaconTest.java b/lib/src/test/java/org/altbeacon/beacon/BeaconTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/BeaconTest.java
rename to lib/src/test/java/org/altbeacon/beacon/BeaconTest.java
index 63d37ea8..7a59b603 100644
--- a/src/test/java/org/altbeacon/beacon/BeaconTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/BeaconTest.java
@@ -27,7 +27,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 
diff --git a/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java b/lib/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
similarity index 86%
rename from src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
rename to lib/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
index 3eeac944..07bc92d9 100644
--- a/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/BeaconTransmitterTest.java
@@ -7,13 +7,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.RuntimeEnvironment;
 
 import java.util.Arrays;
 
 import static junit.framework.Assert.assertEquals;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 /**
  * Created by dyoung on 7/22/14.
@@ -25,7 +25,7 @@
     @Test
     public void testBeaconAdvertisingBytes() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
 
         Beacon beacon = new Beacon.Builder()
                 .setId1("2f234454-cf6d-4a0f-adf2-f4911ba9ffa6")
@@ -38,7 +38,7 @@ public void testBeaconAdvertisingBytes() {
         BeaconParser beaconParser = new BeaconParser()
                 .setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25");
         byte[] data = beaconParser.getBeaconAdvertisementData(beacon);
-        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
+//        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
         // TODO: can't actually start transmitter here because Robolectric does not support API 21
 
         assertEquals("Data should be 24 bytes long", 24, data.length);
@@ -53,7 +53,7 @@ public void testBeaconAdvertisingBytes() {
     @Test
     public void testBeaconAdvertisingBytesForEddystone() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
 
         Beacon beacon = new Beacon.Builder()
                 .setId1("0x2f234454f4911ba9ffa6")
@@ -64,7 +64,7 @@ public void testBeaconAdvertisingBytesForEddystone() {
         BeaconParser beaconParser = new BeaconParser()
                 .setBeaconLayout("s:0-1=feaa,m:2-2=00,p:3-3:-41,i:4-13,i:14-19");
         byte[] data = beaconParser.getBeaconAdvertisementData(beacon);
-        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
+//        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
         // TODO: can't actually start transmitter here because Robolectric does not support API 21
 
         String byteString = "";
diff --git a/src/test/java/org/altbeacon/beacon/GattBeaconTest.java b/lib/src/test/java/org/altbeacon/beacon/GattBeaconTest.java
similarity index 97%
rename from src/test/java/org/altbeacon/beacon/GattBeaconTest.java
rename to lib/src/test/java/org/altbeacon/beacon/GattBeaconTest.java
index d38e1a80..c37f76a1 100644
--- a/src/test/java/org/altbeacon/beacon/GattBeaconTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/GattBeaconTest.java
@@ -9,7 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.RuntimeEnvironment;
 
 import java.util.Arrays;
 
@@ -17,7 +17,7 @@
 import static junit.framework.Assert.assertNotNull;
 import static junit.framework.Assert.assertNull;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 /**
  * Created by dyoung on 2/6/15.
@@ -114,7 +114,7 @@ public void testDetectsGattBeaconWithCnn() {
     @Test
     public void testBeaconAdvertisingBytes() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
 
 
         Beacon beacon = new Beacon.Builder()
@@ -127,7 +127,7 @@ public void testBeaconAdvertisingBytes() {
         BeaconParser beaconParser = new BeaconParser()
                 .setBeaconLayout("s:0-1=0123,m:2-2=00,d:3-3,p:4-4,i:5-14,i:15-20");
         byte[] data = beaconParser.getBeaconAdvertisementData(beacon);
-        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
+//        BeaconTransmitter beaconTransmitter = new BeaconTransmitter(context, beaconParser);
         // TODO: can't actually start transmitter here because Robolectric does not support API 21
 
         assertEquals("Data should be 19 bytes long", 19, data.length);
diff --git a/src/test/java/org/altbeacon/beacon/IdentifierTest.java b/lib/src/test/java/org/altbeacon/beacon/IdentifierTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/IdentifierTest.java
rename to lib/src/test/java/org/altbeacon/beacon/IdentifierTest.java
index 990340d8..1bf3f7da 100644
--- a/src/test/java/org/altbeacon/beacon/IdentifierTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/IdentifierTest.java
@@ -16,7 +16,7 @@
 import java.util.Arrays;
 import java.util.UUID;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 
 /*
diff --git a/src/test/java/org/altbeacon/beacon/RegionTest.java b/lib/src/test/java/org/altbeacon/beacon/RegionTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/RegionTest.java
rename to lib/src/test/java/org/altbeacon/beacon/RegionTest.java
index 05ba5952..e2edd854 100644
--- a/src/test/java/org/altbeacon/beacon/RegionTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/RegionTest.java
@@ -21,7 +21,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 
diff --git a/src/test/java/org/altbeacon/beacon/SBeaconTest.java b/lib/src/test/java/org/altbeacon/beacon/SBeaconTest.java
similarity index 95%
rename from src/test/java/org/altbeacon/beacon/SBeaconTest.java
rename to lib/src/test/java/org/altbeacon/beacon/SBeaconTest.java
index 6918cda0..9268aa97 100644
--- a/src/test/java/org/altbeacon/beacon/SBeaconTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/SBeaconTest.java
@@ -1,22 +1,17 @@
 package org.altbeacon.beacon;
 
-import android.annotation.TargetApi;
 import android.bluetooth.BluetoothDevice;
-import android.os.Build;
 import android.os.Parcel;
 
-
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.logging.Loggers;
 import org.junit.Test;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNotNull;
-import org.robolectric.annotation.Config;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 /**
  * Created by dyoung on 7/22/14.
@@ -90,7 +85,7 @@ protected SBeacon(Parcel in) {
 
     class SBeaconParser extends BeaconParser {
         private static final String TAG = "SBeaconParser";
-        @TargetApi(Build.VERSION_CODES.ECLAIR)
+
         @Override
         public Beacon fromScanData(byte[] scanData, int rssi, BluetoothDevice device) {
             int startByte = 2;
diff --git a/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java b/lib/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
similarity index 93%
rename from src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
rename to lib/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
index 7b8071f3..c2910f63 100644
--- a/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/distance/ModelSpecificDistanceCalculatorTest.java
@@ -6,12 +6,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.RuntimeEnvironment;
 
 import static org.junit.Assert.assertEquals;
 
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 /*
 HOW TO SEE DEBUG LINES FROM YOUR UNIT TESTS:
@@ -54,7 +54,7 @@ public void testSelectsNexus4OnExactMatch() {
 
 	@Test
 	public void testCalculatesDistanceForMotoXPro() {
-		final Context applicationContext = ShadowApplication.getInstance().getApplicationContext();
+		final Context applicationContext = RuntimeEnvironment.application;
 		org.robolectric.shadows.ShadowLog.stream = System.err;
 
 		final AndroidModel model = new AndroidModel("5.0.2", "LXG22.67-7.1", "Moto X Pro", "XT1115");
@@ -68,7 +68,7 @@ public void testCalculatesDistanceForMotoXPro() {
 	public void testConcurrentModificationException() {
 		org.robolectric.shadows.ShadowLog.stream = System.err;
 
-		final Context applicationContext = ShadowApplication.getInstance().getApplicationContext();
+		final Context applicationContext = RuntimeEnvironment.application;
 
 		final AndroidModel model = new AndroidModel("4.4.2", "KOT49H", "Nexus 4", "LGE");
 		final String modelMapJson =
diff --git a/src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java b/lib/src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java
similarity index 100%
rename from src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java
rename to lib/src/test/java/org/altbeacon/beacon/logging/LogManagerTest.java
diff --git a/src/test/java/org/altbeacon/beacon/logging/LoggersTest.java b/lib/src/test/java/org/altbeacon/beacon/logging/LoggersTest.java
similarity index 100%
rename from src/test/java/org/altbeacon/beacon/logging/LoggersTest.java
rename to lib/src/test/java/org/altbeacon/beacon/logging/LoggersTest.java
diff --git a/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java b/lib/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
similarity index 96%
rename from src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
rename to lib/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
index 218c4f71..5a211efa 100644
--- a/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/logging/VerboseAndroidLoggerTest.java
@@ -22,6 +22,8 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
+import java.util.List;
+
 import static android.util.Log.DEBUG;
 import static android.util.Log.ERROR;
 import static android.util.Log.INFO;
@@ -34,7 +36,7 @@
  *
  * @author Andrew Reitz
  */
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 public class VerboseAndroidLoggerTest {
     private String tag = getClass().getName();
@@ -136,7 +138,8 @@ public void errorWithThrowableLoggedCorrectly() {
     }
 
     private void assertLogged(int type, String tag, String msg, Throwable throwable) {
-        ShadowLog.LogItem lastLog = ShadowLog.getLogs().get(0);
+        List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
+        ShadowLog.LogItem lastLog = logs.get(logs.size() - 1);
         assertEquals(type, lastLog.type);
         assertEquals(msg, lastLog.msg);
         assertEquals(tag, lastLog.tag);
diff --git a/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java b/lib/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
similarity index 87%
rename from src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
rename to lib/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
index 1f8387f3..83894375 100644
--- a/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/logging/WarningAndroidLoggerTest.java
@@ -16,7 +16,8 @@
  */
 package org.altbeacon.beacon.logging;
 
-import org.hamcrest.Matchers;
+import android.util.Log;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -25,14 +26,10 @@
 
 import java.util.List;
 
-import static android.util.Log.DEBUG;
 import static android.util.Log.ERROR;
-import static android.util.Log.INFO;
-import static android.util.Log.VERBOSE;
 import static android.util.Log.WARN;
 import static junit.framework.Assert.assertEquals;
-import static org.hamcrest.Matchers.empty;
-import static org.junit.Assert.assertNotEquals;
+import static org.hamcrest.Matchers.isOneOf;
 import static org.junit.Assert.assertThat;
 
 /**
@@ -40,7 +37,7 @@
  *
  * @author Andrew Reitz
  */
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 public class WarningAndroidLoggerTest {
     private String tag = getClass().getName();
@@ -137,7 +134,8 @@ public void errorWithThrowableLoggedCorrectly() {
     }
 
     private void assertLogged(int type, String tag, String msg, Throwable throwable) {
-        ShadowLog.LogItem lastLog = ShadowLog.getLogs().get(0);
+        List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
+        ShadowLog.LogItem lastLog = logs.get(logs.size() - 1);
         assertEquals(type, lastLog.type);
         assertEquals(msg, lastLog.msg);
         assertEquals(tag, lastLog.tag);
@@ -146,6 +144,10 @@ private void assertLogged(int type, String tag, String msg, Throwable throwable)
 
     private void assertNotLogged() {
         final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
-        assertThat(logs, empty());
+        for (ShadowLog.LogItem log : logs) {
+            //INFO level log was introduced by ASOP
+            //https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/res/AssetManager.java
+            assertThat(log.type, isOneOf(Log.INFO, Log.WARN, Log.ERROR));
+        }
     }
 }
diff --git a/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java b/lib/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
rename to lib/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
index 49850a95..6f8ca3fa 100644
--- a/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/org/altbeacon/beacon/simulator/BeaconSimulatorTest.java
@@ -22,7 +22,7 @@
 import dalvik.annotation.TestTarget;
 import org.robolectric.annotation.Config;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 public class BeaconSimulatorTest {
diff --git a/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java b/lib/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
similarity index 96%
rename from src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
index 80fd0c4f..25f0fb30 100644
--- a/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/ArmaRssiFilterTest.java
@@ -7,7 +7,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 public class ArmaRssiFilterTest {
 
diff --git a/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java b/lib/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
similarity index 91%
rename from src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
index d77e7eab..ff8398f8 100644
--- a/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/BeaconServiceTest.java
@@ -1,8 +1,6 @@
 package org.altbeacon.beacon.service;
 
-import android.annotation.TargetApi;
 import android.os.AsyncTask;
-import android.os.Build;
 
 import org.altbeacon.beacon.BeaconManager;
 import org.altbeacon.beacon.logging.LogManager;
@@ -13,8 +11,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.android.controller.ServiceController;
 import org.robolectric.annotation.Config;
-import org.robolectric.util.ServiceController;
 
 import java.util.concurrent.ThreadPoolExecutor;
 
@@ -24,7 +22,7 @@
  * Created by dyoung on 7/1/15.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 public class BeaconServiceTest {
 
     @Before
@@ -40,12 +38,11 @@ public void before() {
      * affect the size of the available threads in the main Android AsyncTask.THREAD_POOL_EXECUTOR
      * @throws Exception
      */
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void beaconScanCallbackTest() throws Exception {
         final ServiceController<BeaconService> beaconServiceServiceController =
                 Robolectric.buildService(BeaconService.class);
-        beaconServiceServiceController.attach();
+//        beaconServiceServiceController.attach();
         BeaconService beaconService = beaconServiceServiceController.get();
         beaconService.onCreate();
         CycledLeScanCallback callback = beaconService.getCycledLeScanCallback();
diff --git a/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java b/lib/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
index 24927ac5..182a2b67 100644
--- a/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/ExtraDataBeaconTrackerTest.java
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 public class ExtraDataBeaconTrackerTest {
     Beacon getManufacturerBeacon() {
         return new Beacon.Builder().setId1("1")
diff --git a/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java b/lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
similarity index 77%
rename from src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
index 81ec65f6..af689408 100644
--- a/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/MonitoringStatusTest.java
@@ -1,8 +1,6 @@
 package org.altbeacon.beacon.service;
 
-import android.annotation.TargetApi;
 import android.content.Context;
-import android.os.Build;
 
 import org.altbeacon.beacon.BeaconManager;
 import org.altbeacon.beacon.Region;
@@ -12,8 +10,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
 
 import java.util.Collection;
 
@@ -23,7 +21,7 @@
  * Created by dyoung on 7/1/16.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 public class MonitoringStatusTest {
     private static final String TAG = MonitoringStatusTest.class.getSimpleName();
     @Before
@@ -31,13 +29,14 @@ public void before() {
         org.robolectric.shadows.ShadowLog.stream = System.err;
         LogManager.setLogger(Loggers.verboseLogger());
         LogManager.setVerboseLoggingEnabled(true);
-        BeaconManager.setsManifestCheckingDisabled(true);
+        BeaconManager.setManifestCheckingDisabled(true);
+        Context context = RuntimeEnvironment.application;
+        new MonitoringStatus(context).clear();
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void savesStatusOfUpTo50RegionsTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         MonitoringStatus monitoringStatus = new MonitoringStatus(context);
         for (int i = 0; i < 50; i++) {
             Region region = new Region(""+i, null, null, null);
@@ -48,10 +47,9 @@ public void savesStatusOfUpTo50RegionsTest() throws Exception {
         assertEquals("restored regions should be same number as saved", 50, monitoringStatus2.regions().size());
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void clearsStatusOfOver50RegionsTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         MonitoringStatus monitoringStatus = new MonitoringStatus(context);
         for (int i = 0; i < 51; i++) {
             Region region = new Region(""+i, null, null, null);
@@ -62,10 +60,9 @@ public void clearsStatusOfOver50RegionsTest() throws Exception {
         assertEquals("restored regions should be none", 0, monitoringStatus2.regions().size());
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void refusesToRestoreRegionsIfTooMuchTimeHasPassedSinceSavingTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         MonitoringStatus monitoringStatus = new MonitoringStatus(context);
         for (int i = 0; i < 50; i++) {
             Region region = new Region(""+i, null, null, null);
@@ -78,19 +75,17 @@ public void refusesToRestoreRegionsIfTooMuchTimeHasPassedSinceSavingTest() throw
         assertEquals("restored regions should be none", 0, monitoringStatus2.regions().size());
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void allowsAccessToRegionsAfterRestore() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         BeaconManager beaconManager = BeaconManager.getInstanceForApplication(context);
-        MonitoringStatus.getInstanceForApplication(context).clear();
-        MonitoringStatus monitoringStatus = new MonitoringStatus(context);
+        MonitoringStatus monitoringStatus = MonitoringStatus.getInstanceForApplication(context);
         for (int i = 0; i < 50; i++) {
             Region region = new Region(""+i, null, null, null);
             monitoringStatus.addRegion(region, null);
         }
         monitoringStatus.saveMonitoringStatusIfOn();
-        MonitoringStatus.getInstanceForApplication(context).restoreMonitoringStatus();
+        monitoringStatus.restoreMonitoringStatus();
         Collection<Region> regions = beaconManager.getMonitoredRegions();
         assertEquals("beaconManager should return restored regions", 50, regions.size());
     }
diff --git a/src/test/java/org/altbeacon/beacon/service/RangingDataTest.java b/lib/src/test/java/org/altbeacon/beacon/service/RangingDataTest.java
similarity index 94%
rename from src/test/java/org/altbeacon/beacon/service/RangingDataTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/RangingDataTest.java
index 90f92dbf..7f71f07e 100644
--- a/src/test/java/org/altbeacon/beacon/service/RangingDataTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/RangingDataTest.java
@@ -13,7 +13,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.RuntimeEnvironment;
 
 import java.util.ArrayList;
 
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 public class RangingDataTest {
     @Before
     public void before() {
@@ -34,7 +34,7 @@ public void before() {
 
     @Test
     public void testSerialization() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         ArrayList<Identifier> identifiers = new ArrayList<Identifier>();
         identifiers.add(Identifier.parse("2f234454-cf6d-4a0f-adf2-f4911ba9ffa6"));
         identifiers.add(Identifier.parse("1"));
@@ -69,7 +69,7 @@ public void testSerialization() throws Exception {
     @Test
     // On MacBookPro 2.5 GHz Core I7, 10000 serialization/deserialiation cycles of RangingData took 22ms
     public void testSerializationBenchmark() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         ArrayList<Identifier> identifiers = new ArrayList<Identifier>();
         identifiers.add(Identifier.parse("2f234454-cf6d-4a0f-adf2-f4911ba9ffa6"));
         identifiers.add(Identifier.parse("1"));
diff --git a/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java b/lib/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
index 8eb7cc08..e124ad7a 100644
--- a/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 public class RunningAverageRssiFilterTest {
 
diff --git a/src/test/java/org/altbeacon/beacon/service/ScanStateTest.java b/lib/src/test/java/org/altbeacon/beacon/service/ScanStateTest.java
similarity index 77%
rename from src/test/java/org/altbeacon/beacon/service/ScanStateTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/ScanStateTest.java
index ba4b95c0..463fdad3 100644
--- a/src/test/java/org/altbeacon/beacon/service/ScanStateTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/ScanStateTest.java
@@ -6,23 +6,17 @@
 
 import android.annotation.TargetApi;
 import android.content.Context;
-import android.os.AsyncTask;
 import android.os.Build;
 
 import org.altbeacon.beacon.BeaconManager;
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.logging.Loggers;
-import org.altbeacon.beacon.service.scanner.CycledLeScanCallback;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.util.ServiceController;
-
-import java.util.concurrent.ThreadPoolExecutor;
 
 import static org.junit.Assert.assertEquals;
 
@@ -30,7 +24,7 @@
  * Created by dyoung on 7/1/15.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18)
+@Config(sdk = 28)
 public class ScanStateTest {
 
     @Before
@@ -41,10 +35,9 @@ public void before() {
         BeaconManager.setsManifestCheckingDisabled(true);
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void serializationTest() throws Exception {
-        Context context = ShadowApplication.getInstance().getApplicationContext();
+        Context context = RuntimeEnvironment.application;
         ScanState scanState = new ScanState(context);
         MonitoringStatus monitoringStatus = new MonitoringStatus(context);
         scanState.setMonitoringStatus(monitoringStatus);
diff --git a/src/test/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetectorTest.java b/lib/src/test/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetectorTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetectorTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetectorTest.java
index f82e152c..cb642a3a 100644
--- a/src/test/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetectorTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/scanner/DistinctPacketDetectorTest.java
@@ -8,7 +8,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 public class DistinctPacketDetectorTest {
diff --git a/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java b/lib/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
rename to lib/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
index deaa6b04..c61b9882 100644
--- a/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/service/scanner/ScanFilterUtilsTest.java
@@ -26,7 +26,7 @@
 import static org.junit.Assert.assertTrue;
 import org.mockito.Mockito;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 public class ScanFilterUtilsTest {
diff --git a/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java b/lib/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
rename to lib/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
index 3ab4773f..2634868d 100644
--- a/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/utils/EddystoneTelemetryAccessorTest.java
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 public class EddystoneTelemetryAccessorTest {
 
diff --git a/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java b/lib/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
rename to lib/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
index d9d038df..c5984a47 100644
--- a/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
+++ b/lib/src/test/java/org/altbeacon/beacon/utils/UrlBeaconUrlCompressorTest.java
@@ -12,7 +12,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertEquals;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 @RunWith(RobolectricTestRunner.class)
 public class UrlBeaconUrlCompressorTest {
 
diff --git a/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java b/lib/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
similarity index 99%
rename from src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
rename to lib/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
index db34412b..0566b824 100644
--- a/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
+++ b/lib/src/test/java/org/altbeacon/bluetooth/BleAdvertisementTest.java
@@ -8,7 +8,7 @@
 
 import org.robolectric.annotation.Config;
 
-@Config(sdk = 18)
+@Config(sdk = 28)
 
 @RunWith(RobolectricTestRunner.class)
 
diff --git a/src/test/resources/model-distance-calculations.json b/lib/src/test/resources/model-distance-calculations.json
similarity index 100%
rename from src/test/resources/model-distance-calculations.json
rename to lib/src/test/resources/model-distance-calculations.json
diff --git a/settings.gradle b/settings.gradle
index 13849852..980d4907 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1,4 @@
-rootProject.name="android-beacon-library"
+include ':lib'
+//include ':demo'
+//rootProject.name="android-beacon-library"
+//include ':app'
\ No newline at end of file
