diff --git a/eclipse-support/.classpath b/eclipse-support/.classpath
deleted file mode 100644
index 7bc01d9a..00000000
--- a/eclipse-support/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/eclipse-support/.project b/eclipse-support/.project
deleted file mode 100644
index 17343b83..00000000
--- a/eclipse-support/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>android-beacon-library</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/eclipse-support/.settings/org.eclipse.jdt.core.prefs b/eclipse-support/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index 8000cd6c..00000000
--- a/eclipse-support/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,11 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/eclipse-support/.settings/org.eclipse.jdt.ui.prefs b/eclipse-support/.settings/org.eclipse.jdt.ui.prefs
deleted file mode 100644
index 9c8f0802..00000000
--- a/eclipse-support/.settings/org.eclipse.jdt.ui.prefs
+++ /dev/null
@@ -1,3 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.ui.javadoc=false
-org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * Radius Networks, Inc.\n * http\://www.radiusnetworks.com\n * \n * @author ${user}\n * \n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http\://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="true" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>
diff --git a/eclipse-support/gen/.retain b/eclipse-support/gen/.retain
deleted file mode 100644
index e69de29b..00000000
diff --git a/eclipse-support/project.properties b/eclipse-support/project.properties
deleted file mode 100644
index 1b8c5a34..00000000
--- a/eclipse-support/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-18
-android.library=true
diff --git a/eclipse-support/src/.retain b/eclipse-support/src/.retain
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/main/java/org/altbeacon/beacon/Beacon.java b/src/main/java/org/altbeacon/beacon/Beacon.java
index f46e9edc..bb03a0b3 100644
--- a/src/main/java/org/altbeacon/beacon/Beacon.java
+++ b/src/main/java/org/altbeacon/beacon/Beacon.java
@@ -33,8 +33,8 @@
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
-
 import java.util.List;
 
 /**
@@ -63,6 +63,9 @@
             Collections.unmodifiableList(new ArrayList<Long>());
     private static final List<Identifier> UNMODIFIABLE_LIST_OF_IDENTIFIER =
             Collections.unmodifiableList(new ArrayList<Identifier>());
+    private static final int DATA_TYPE_TX_POWER_LEVEL = 0x0a;
+    private static final int DATA_TYPE_SERVICE_DATA = 0x16;
+    private static final byte[] BATTERY_SERVICE = {0x0f, 0x18};
 
     /**
      * Determines whether a the bluetoothAddress (mac address) must be the same for two Beacons
@@ -176,6 +179,21 @@
      */
     protected boolean mMultiFrameBeacon = false;
 
+    /**
+     * Scanned Record for O2Con
+     */
+    protected byte[] mScanRecord;
+
+    /**
+     * Battery Level for O2Con
+     */
+    protected int mBatteryLevel;
+
+    /**
+     * Tx Power for O2Con, Not measured Tx Power
+     */
+    protected int mRealTxPower;
+
     /**
      * Required for making object Parcelable.  If you override this class, you must provide an
      * equivalent version of this method.
@@ -257,6 +275,8 @@ protected Beacon(Parcel in) {
         mRunningAverageRssi = (Double) in.readValue(null);
         mRssiMeasurementCount = in.readInt();
         mPacketCount = in.readInt();
+        mBatteryLevel = in.readInt();
+        mRealTxPower = in.readInt();
     }
 
     /**
@@ -281,6 +301,8 @@ protected Beacon(Beacon otherBeacon) {
         this.mParserIdentifier = otherBeacon.mParserIdentifier;
         this.mMultiFrameBeacon = otherBeacon.mMultiFrameBeacon;
         this.mManufacturer = otherBeacon.mManufacturer;
+        this.mBatteryLevel = otherBeacon.mBatteryLevel;
+        this.mRealTxPower = otherBeacon.mRealTxPower;
     }
 
     /**
@@ -530,6 +552,59 @@ public String getBluetoothName() {
      */
     public boolean isMultiFrameBeacon() { return mMultiFrameBeacon; }
 
+    /**
+     * @return mBatteryLevel
+     * @see #mBatteryLevel
+     */
+    public int getBatteryLevel() {
+        return mBatteryLevel;
+    }
+
+    /**
+     * @return mRealTxPower
+     * @see #mRealTxPower
+     */
+    public int getRealTxPower() {
+        return mRealTxPower;
+    }
+
+    public void updateExtraData() {
+        int index = 0;
+        do {
+            int len = mScanRecord[index++];
+            if (len == 0) {
+                break;
+            }
+            int type = mScanRecord[index] & 0xFF;
+            switch (type) {
+                case DATA_TYPE_TX_POWER_LEVEL:
+                    if (len < 2) {
+                        LogManager.e(TAG, "Bad tx power level data. Length should be more than 1");
+                        break;
+                    }
+
+                    mRealTxPower = ((mScanRecord[index + 1] & 0xFF));
+                    break;
+                case DATA_TYPE_SERVICE_DATA:
+                    if (len < 4) {
+                        LogManager.e(TAG, "Bad service data. Length should be more than 3");
+                        break;
+                    }
+
+                    byte[] service1 = new byte[len - 2];
+                    System.arraycopy(mScanRecord, index + 1, service1, 0, len - 2);
+                    if (Arrays.equals(service1, BATTERY_SERVICE)) {
+                        mBatteryLevel = (mScanRecord[index + len - 1] & 0xFF);
+                    }
+                    break;
+                default:
+                    //TODO, add support for other datatypes
+                    break;
+            }
+            index += len;
+        } while (index < mScanRecord.length);
+    }
+
     /**
      * Calculate a hashCode for this beacon
      * @return
@@ -636,6 +711,8 @@ public void writeToParcel(Parcel out, int flags) {
         out.writeValue(mRunningAverageRssi);
         out.writeInt(mRssiMeasurementCount);
         out.writeInt(mPacketCount);
+        out.writeInt(mBatteryLevel);
+        out.writeInt(mRealTxPower);
     }
 
     /**
diff --git a/src/main/java/org/altbeacon/beacon/service/RangeState.java b/src/main/java/org/altbeacon/beacon/service/RangeState.java
index bba10079..680449f4 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangeState.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangeState.java
@@ -74,6 +74,7 @@ public void addBeacon(Beacon beacon) {
                 if (rangedBeacon.isTracked()) {
                     rangedBeacon.commitMeasurements(); // calculates accuracy
                     if (!rangedBeacon.noMeasurementsAvailable()) {
+                        rangedBeacon.getBeacon().updateExtraData();
                         finalizedBeacons.add(rangedBeacon.getBeacon());
                     }
                 }
