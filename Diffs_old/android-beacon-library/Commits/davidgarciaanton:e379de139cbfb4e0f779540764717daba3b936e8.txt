diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index 15ddb3ca..38f0cbdd 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -340,7 +340,9 @@ private void processRangeData() {
                 Region region = regionIterator.next();
                 RangeState rangeState = rangedRegionState.get(region);
                 BeaconManager.logDebug(TAG, "Calling ranging callback");
-                rangeState.getCallback().call(BeaconService.this, "rangingData", new RangingData(rangeState.finalizeBeacons(), region));
+                final Collection<Beacon> beacons = rangeState.finalizeBeacons();
+                if (!beacons.isEmpty())
+                    rangeState.getCallback().call(BeaconService.this, "rangingData", new RangingData(beacons, region));
             }
         }
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/RangeState.java b/src/main/java/org/altbeacon/beacon/service/RangeState.java
index 7a86a1a0..1429843a 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangeState.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangeState.java
@@ -73,7 +73,11 @@ public void addBeacon(Beacon beacon) {
                     rangedBeacon.commitMeasurements(); // calculates accuracy
                     if (!rangedBeacon.noMeasurementsAvailable()) {
                         finalizedBeacons.add(rangedBeacon.getBeacon());
+                    } else {
+                        BeaconManager.logDebug(TAG, "Ranged beacon " + rangedBeacon + " has no more measurements, not returning it??");
                     }
+                } else {
+                    BeaconManager.logDebug(TAG, "Ranged beacon " + rangedBeacon + " is no Tracked");
                 }
                 // If we still have useful measurements, keep it around but mark it as not
                 // tracked anymore so we don't pass it on as visible unless it is seen again
diff --git a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
index 7d67916a..13479206 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
@@ -32,6 +32,13 @@ public boolean isTracked() {
         return mTracked;
     }
 
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("RangedBeacon for " + mBeacon + " has " + mMeasurements.size() + " measurements");
+        return sb.toString();
+    }
+
     public void setTracked(boolean tracked) {
         mTracked = tracked;
     }
@@ -106,7 +113,7 @@ private double calculateRunningAverage() {
 		}
 		double runningAverage = sum/(endIndex-startIndex+1);
 
-		BeaconManager.logDebug(TAG, "Running average mRssi based on "+size+" measurements: "+runningAverage);
+		BeaconManager.logDebug(TAG, "Running average mRssi based on "+size+" measurements: "+runningAverage + " for Beacon: " + mBeacon);
 		return runningAverage;
 
 	}
diff --git a/src/main/resources/model-distance-calculations.json b/src/main/resources/model-distance-calculations.json
index 015f30ec..e5155de2 100644
--- a/src/main/resources/model-distance-calculations.json
+++ b/src/main/resources/model-distance-calculations.json
@@ -19,6 +19,24 @@
       "model":"Nexus 5",
       "manufacturer":"LGE",
       "default": true
+    },
+    {
+      "coefficient1": 0.88707,
+      "coefficient2": 6.8284,
+      "coefficient3": -0.12830,
+      "version":"4.4.2",
+      "build_number":"18.1.A.1.21",
+      "model":"D5103",
+      "manufacturer":"ASony"
+    },
+    {
+      "coefficient1": 1.00477135,
+      "coefficient2": 5.80184978,
+      "coefficient3": -0.2131627,
+      "version":"4.4.2",
+      "build_number":"18.1.A.1.21",
+      "model":"D5103",
+      "manufacturer":"Sony"
     }
   ]
 }
