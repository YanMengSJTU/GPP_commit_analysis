diff --git a/build.gradle b/build.gradle
index 3071ad57..eeb9e1b8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,26 +1,26 @@
-ext {
-    isSnapshot = !project.hasProperty('release')
-    isSnapCi = System.getenv('SNAP_CI') != null
-    isSnapPullRequest = System.getenv('SNAP_PULL_REQUEST_NUMBER') != null
-}
-
-/*
- * Gets the version name from the latest Git tag
- */
-def getVersionName = {
-    def stdout = new ByteArrayOutputStream()
-    try {
-        exec {
-            commandLine 'git', 'describe', '--tags'
-            standardOutput = stdout
-        }
-        return stdout.toString().trim()
-    }
-    catch (e) {
-        println("Can't get version from git: " + e);
-        return "adhoc"
-    }
-}
+//ext {
+//    isSnapshot = !project.hasProperty('release')
+//    isSnapCi = System.getenv('SNAP_CI') != null
+//    isSnapPullRequest = System.getenv('SNAP_PULL_REQUEST_NUMBER') != null
+//}
+
+///*
+// * Gets the version name from the latest Git tag
+// */
+//def getVersionName = {
+//    def stdout = new ByteArrayOutputStream()
+//    try {
+//        exec {
+//            commandLine 'git', 'describe', '--tags'
+//            standardOutput = stdout
+//        }
+//        return stdout.toString().trim()
+//    }
+//    catch (e) {
+//        println("Can't get version from git: " + e);
+//        return "adhoc"
+//    }
+//}
 
 buildscript {
     repositories {
@@ -42,11 +42,15 @@ buildscript {
 
 apply plugin: 'com.android.library'
 
-apply from: 'gradle/eclipse.gradle'
+apply from: '../scripts/version_bump.gradle'
+ext.libraryArtifactId = "android-beacon-library"
+
+// apply from: 'gradle/eclipse.gradle'
+
 
 allprojects {
-    version = "${getVersionName()}${isSnapshot == true ? "-SNAPSHOT" : ""}"
-    group = "org.altbeacon"
+    // version = "${getVersionName()}${isSnapshot == true ? "-SNAPSHOT" : ""}"
+    group = "com.conichi.sdk"
 
     repositories {
         jcenter()
@@ -92,10 +96,20 @@ android {
         exclude 'META-INF/LICENSE.txt'
         exclude 'META-INF/NOTICE'
     }
+
+    libraryVariants.all { variant ->
+        variant.outputs.each { output ->
+            def outputFile = output.outputFile
+            if (outputFile != null && outputFile.name.endsWith('.aar')) {
+                def fileName = "${libraryArtifactId}-release.aar"
+                output.outputFile = new File(outputFile.parent, fileName)
+            }
+        }
+    }
 }
 
 dependencies {
-    compile fileTree ( dir: 'libs', include: ['*.jar'] )
+    compile fileTree(dir: 'libs', include: ['*.jar'])
     compile libs.supportAppCompat
     compile libs.supportAnnotations
 
@@ -119,58 +133,58 @@ dependencies {
     androidTestCompile 'org.apache.commons:commons-math3:3.6.1'
 }
 
-apply plugin: 'idea'
-
-idea {
-    module {
-        testOutputDir = file('build/test-classes/debug')
-    }
-}
-
-task renameAarForRelease(type: Copy, dependsOn: build) {
-    description = "Rename the aar for easy release publishing"
-
-    from "$buildDir/outputs/aar/" //${project.name}-release.aar
-    into "$buildDir/outputs/aar/" //${project.name}-${project.version}.aar"
-    include "${project.name}-release.aar"
-    rename { String fileName ->
-        fileName = "${project.name}-${project.version}.aar"
-    }
-}
-
-task distribution(dependsOn: [bundleEclipse, build, clean, renameAarForRelease]) << {
-    println "Building with version=$version"
-}
-
-task release(dependsOn: 'distribution') << {
-    println('Doing release build')
-}
-
-android.libraryVariants.all { variant ->
-
-    task("generate${variant.name}Javadoc", type: Javadoc) {
-        title = "Android Beacon Library $version API"
-        description "Generates Javadoc for $variant.name."
-        source = variant.javaCompile.source
-        ext.androidJar =
-                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
-        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
-        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
-        exclude '**/BuildConfig.java'
-        exclude '**/R.java'
-    }
-
-}
-
-build.mustRunAfter clean
-
-apply from: 'gradle/credentials.gradle'
+//apply plugin: 'idea'
+//
+//idea {
+//    module {
+//        testOutputDir = file('build/test-classes/debug')
+//    }
+//}
+//
+//task renameAarForRelease(type: Copy, dependsOn: build) {
+//    description = "Rename the aar for easy release publishing"
+//
+//    from "$buildDir/outputs/aar/" //${project.name}-release.aar
+//    into "$buildDir/outputs/aar/" //${project.name}-${project.version}.aar"
+//    include "${project.name}-release.aar"
+//    rename { String fileName ->
+//        fileName = "${project.name}-${project.version}.aar"
+//    }
+//}
+//
+//task distribution(dependsOn: [bundleEclipse, build, clean, renameAarForRelease]) << {
+//    println "Building with version=$version"
+//}
+//
+//task release(dependsOn: 'distribution') << {
+//    println('Doing release build')
+//}
+//
+//android.libraryVariants.all { variant ->
+//
+//    task("generate${variant.name}Javadoc", type: Javadoc) {
+//        title = "Android Beacon Library $version API"
+//        description "Generates Javadoc for $variant.name."
+//        source = variant.javaCompile.source
+//        ext.androidJar =
+//                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
+//        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
+//        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
+//        exclude '**/BuildConfig.java'
+//        exclude '**/R.java'
+//    }
+//
+//}
+
+//build.mustRunAfter clean
+
+//apply from: 'gradle/credentials.gradle'
 apply from: 'gradle/compile.gradle'
-apply from: 'gradle/publishing.gradle'
-apply from: 'gradle/bintray.gradle'
-apply from: 'gradle/artifactory.gradle'
-
-artifactoryPublish {
-    // Skip deploying to artifactory if building a pull request
-    onlyIf { !isSnapPullRequest }
-}
+//apply from: 'gradle/publishing.gradle'
+//apply from: 'gradle/bintray.gradle'
+//apply from: 'gradle/artifactory.gradle'
+
+//artifactoryPublish {
+//    // Skip deploying to artifactory if building a pull request
+//    onlyIf { !isSnapPullRequest }
+//}
diff --git a/gradle/artifactory.gradle b/gradle/artifactory.gradle
index d08c86d6..6b9111b2 100644
--- a/gradle/artifactory.gradle
+++ b/gradle/artifactory.gradle
@@ -1,23 +1,23 @@
 // handles distribution of snapshots to Artifactory (oss.jfrog.org)
-
-apply plugin: 'com.jfrog.artifactory'
-
-artifactory {
-    contextUrl = 'http://oss.jfrog.org/artifactory'
-    publish {
-        repository {
-            repoKey = 'oss-snapshot-local'
-            username = bintrayUsername
-            password = bintrayKey
-        }
-        defaults {
-            publications('dist')
-        }
-    }
-    resolve {
-        repository {
-            repoKey = 'libs-release'
-        }
-    }
-
-}
+//
+//apply plugin: 'com.jfrog.artifactory'
+//
+//artifactory {
+//    contextUrl = 'http://oss.jfrog.org/artifactory'
+//    publish {
+//        repository {
+//            repoKey = 'oss-snapshot-local'
+//            username = bintrayUsername
+//            password = bintrayKey
+//        }
+//        defaults {
+//            publications('dist')
+//        }
+//    }
+//    resolve {
+//        repository {
+//            repoKey = 'libs-release'
+//        }
+//    }
+//
+//}
