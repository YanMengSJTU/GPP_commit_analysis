diff --git a/.gitignore b/.gitignore
index fd081ec7..650bc8c5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -40,4 +40,4 @@ proguard/
 /.idea/workspace.xml
 .DS_Store
 .directory
-.metadata
+.metadata
\ No newline at end of file
diff --git a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
index 24279618..2530c694 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
@@ -11,7 +11,6 @@
 
 import org.altbeacon.beacon.BeaconManager;
 import org.altbeacon.beacon.Region;
-import org.altbeacon.beacon.TimedBeaconSimulator;
 import org.altbeacon.beacon.powersave.BackgroundPowerSaver;
 import org.altbeacon.beacon.startup.BootstrapNotifier;
 import org.altbeacon.beacon.startup.RegionBootstrap;
@@ -91,12 +90,6 @@ public void onCreate() {
         // class will automatically cause the BeaconLibrary to save battery whenever the application
         // is not visible.  This reduces bluetooth power usage by about 60%
         backgroundPowerSaver = new BackgroundPowerSaver(this);
-
-        // If you wish to test beacon detection in the Android Emulator, you can use code like this:
-        BeaconManager.setBeaconSimulator(new TimedBeaconSimulator());
-        TimedBeaconSimulator timedBeaconSimulator = (TimedBeaconSimulator) BeaconManager.getBeaconSimulator();
-        assert timedBeaconSimulator != null;
-        timedBeaconSimulator.createTimedSimulatedBeacons();
     }
 
     public void disableMonitoring() {
diff --git a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
index cf380e67..5a559af9 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
@@ -8,6 +8,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -19,7 +20,7 @@
  * @author dyoung
  * @author Matt Tyler
  */
-public class MonitoringActivity extends android.support.v7.app.AppCompatActivity {
+public class MonitoringActivity extends AppCompatActivity {
     protected static final String TAG = "MonitoringActivity";
     private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
     private EditText et_log;
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6307ac22..9c5a5965 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,9 +1,6 @@
-#Sat Apr 01 10:19:45 EDT 2017
+#Mon Jan 07 17:16:51 EST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip
-#distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-milestone-1-all.zip
-#distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-milestone-1-all.zip
-#distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-all.zip
diff --git a/settings.gradle b/settings.gradle
index 467b7c80..c03c8517 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
 if (enableLib == 'true') {
     include ':lib'
 }
-include ':app'
\ No newline at end of file
+include ':simulator'
\ No newline at end of file
diff --git a/simulator/build.gradle b/simulator/build.gradle
new file mode 100755
index 00000000..8a2438c0
--- /dev/null
+++ b/simulator/build.gradle
@@ -0,0 +1,32 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 28
+    buildToolsVersion '28.0.3'
+
+    defaultConfig {
+        applicationId "org.altbeacon.beaconreference"
+        minSdkVersion 21
+        targetSdkVersion 28
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        targetCompatibility JavaVersion.VERSION_1_8
+        sourceCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    compile 'com.android.support:appcompat-v7:28.0.0'
+    if (enableLib == 'true') {
+        compile project(':lib')
+    } else {
+        compile 'org.altbeacon:android-beacon-library:2.15.4'
+    }
+}
\ No newline at end of file
diff --git a/simulator/src/main/AndroidManifest.xml b/simulator/src/main/AndroidManifest.xml
new file mode 100755
index 00000000..ea00e949
--- /dev/null
+++ b/simulator/src/main/AndroidManifest.xml
@@ -0,0 +1,39 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          xmlns:tools="http://schemas.android.com/tools"
+          package="org.altbeacon.beaconreference"
+          android:versionCode="1"
+          android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
+    <uses-permission android:name="android.permission.INTERNET"/>
+
+    <application
+        android:name="BeaconReferenceApplication"
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme"
+        tools:ignore="AllowBackup,GoogleAppIndexingWarning">
+        <activity
+            android:name="org.altbeacon.beaconreference.MonitoringActivity"
+            android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="org.altbeacon.beaconreference.RangingActivity"
+            android:label="@string/app_name">
+        </activity>
+        <!-- uncomment the following to enable scanning for over 30 minutes on Android 7+ -->
+        <service
+            android:name="org.altbeacon.beacon.service.BeaconService"
+            tools:node="replace">
+            <meta-data
+                android:name="longScanForcingEnabled"
+                android:value="true"/>
+        </service>
+    </application>
+
+</manifest>
diff --git a/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java b/simulator/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
similarity index 100%
rename from app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
rename to simulator/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
diff --git a/simulator/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java b/simulator/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
new file mode 100755
index 00000000..24279618
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
@@ -0,0 +1,194 @@
+package org.altbeacon.beaconreference;
+
+import android.app.Application;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.app.TaskStackBuilder;
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.app.NotificationCompat;
+import android.util.Log;
+
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.Region;
+import org.altbeacon.beacon.TimedBeaconSimulator;
+import org.altbeacon.beacon.powersave.BackgroundPowerSaver;
+import org.altbeacon.beacon.startup.BootstrapNotifier;
+import org.altbeacon.beacon.startup.RegionBootstrap;
+
+/**
+ * Created by dyoung on 12/13/13.
+ */
+public class BeaconReferenceApplication extends Application implements BootstrapNotifier {
+    private static final String TAG = "BeaconReferenceApp";
+    private RegionBootstrap regionBootstrap;
+    @SuppressWarnings("FieldCanBeLocal")
+    private BackgroundPowerSaver backgroundPowerSaver;
+    private boolean haveDetectedBeaconsSinceBoot = false;
+    private MonitoringActivity monitoringActivity = null;
+    private String cumulativeLog = "";
+
+    public void onCreate() {
+        super.onCreate();
+        BeaconManager beaconManager = org.altbeacon.beacon.BeaconManager.getInstanceForApplication(this);
+
+        // By default the AndroidBeaconLibrary will only find AltBeacons.  If you wish to make it
+        // find a different type of beacon, you must specify the byte layout for that beacon's
+        // advertisement with a line like below.  The example shows how to find a beacon with the
+        // same byte layout as AltBeacon but with a beaconTypeCode of 0xaabb.  To find the proper
+        // layout expression for other beacon types, do a web search for "setBeaconLayout"
+        // including the quotes.
+        //
+        //beaconManager.getBeaconParsers().clear();
+        //beaconManager.getBeaconParsers().add(new BeaconParser().
+        //        setBeaconLayout("m:2-3=beac,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"));
+
+        BeaconManager.setDebug(true);
+
+
+        // Uncomment the code below to use a foreground service to scan for beacons. This unlocks
+        // the ability to continually scan for long periods of time in the background on Andorid 8+
+        // in exchange for showing an icon at the top of the screen and a always-on notification to
+        // communicate to users that your app is using resources in the background.
+        //
+
+        /*
+        Notification.Builder builder = new Notification.Builder(this);
+        builder.setSmallIcon(R.drawable.ic_launcher);
+        builder.setContentTitle("Scanning for Beacons");
+        Intent intent = new Intent(this, MonitoringActivity.class);
+        PendingIntent pendingIntent = PendingIntent.getActivity(
+                this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT
+        );
+        builder.setContentIntent(pendingIntent);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            NotificationChannel channel = new NotificationChannel("My Notification Channel ID",
+                    "My Notification Name", NotificationManager.IMPORTANCE_DEFAULT);
+            channel.setDescription("My Notification Channel Description");
+            NotificationManager notificationManager = (NotificationManager) getSystemService(
+                    Context.NOTIFICATION_SERVICE);
+            notificationManager.createNotificationChannel(channel);
+            builder.setChannelId(channel.getId());
+        }
+        beaconManager.enableForegroundServiceScanning(builder.build(), 456);
+
+        // For the above foreground scanning service to be useful, you need to disable
+        // JobScheduler-based scans (used on Android 8+) and set a fast background scan
+        // cycle that would otherwise be disallowed by the operating system.
+        //
+        beaconManager.setEnableScheduledScanJobs(false);
+        beaconManager.setBackgroundBetweenScanPeriod(0);
+        beaconManager.setBackgroundScanPeriod(1100);
+        */
+
+        Log.d(TAG, "setting up background monitoring for beacons and power saving");
+        // wake up the app when a beacon is seen
+        Region region = new Region("backgroundRegion",
+                null, null, null);
+        regionBootstrap = new RegionBootstrap(this, region);
+
+        // simply constructing this class and holding a reference to it in your custom Application
+        // class will automatically cause the BeaconLibrary to save battery whenever the application
+        // is not visible.  This reduces bluetooth power usage by about 60%
+        backgroundPowerSaver = new BackgroundPowerSaver(this);
+
+        // If you wish to test beacon detection in the Android Emulator, you can use code like this:
+        BeaconManager.setBeaconSimulator(new TimedBeaconSimulator());
+        TimedBeaconSimulator timedBeaconSimulator = (TimedBeaconSimulator) BeaconManager.getBeaconSimulator();
+        assert timedBeaconSimulator != null;
+        timedBeaconSimulator.createTimedSimulatedBeacons();
+    }
+
+    public void disableMonitoring() {
+        if (regionBootstrap != null) {
+            regionBootstrap.disable();
+            regionBootstrap = null;
+        }
+    }
+
+    public void enableMonitoring() {
+        Region region = new Region("backgroundRegion",
+                null, null, null);
+        regionBootstrap = new RegionBootstrap(this, region);
+    }
+
+
+    @Override
+    public void didEnterRegion(Region arg0) {
+        // In this example, this class sends a notification to the user whenever a Beacon
+        // matching a Region (defined above) are first seen.
+        Log.d(TAG, "did enter region.");
+        if (!haveDetectedBeaconsSinceBoot) {
+            Log.d(TAG, "auto launching MainActivity");
+
+            // The very first time since boot that we detect an beacon, we launch the
+            // MainActivity
+            Intent intent = new Intent(this, MonitoringActivity.class);
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            // Important:  make sure to add android:launchMode="singleInstance" in the manifest
+            // to keep multiple copies of this activity from getting created if the user has
+            // already manually launched the app.
+            this.startActivity(intent);
+            haveDetectedBeaconsSinceBoot = true;
+        } else {
+            if (monitoringActivity != null) {
+                // If the Monitoring Activity is visible, we log info about the beacons we have
+                // seen on its display
+                logToDisplay("I see a beacon again");
+            } else {
+                // If we have already seen beacons before, but the monitoring activity is not in
+                // the foreground, we send a notification to the user on subsequent detections.
+                Log.d(TAG, "Sending notification.");
+                sendNotification();
+            }
+        }
+
+
+    }
+
+    @Override
+    public void didExitRegion(Region region) {
+        logToDisplay("I no longer see a beacon.");
+    }
+
+    @Override
+    public void didDetermineStateForRegion(int state, Region region) {
+        logToDisplay("Current region state is: " + (state == 1 ? "INSIDE" : "OUTSIDE (" + state + ")"));
+    }
+
+    private void sendNotification() {
+        NotificationCompat.Builder builder =
+                new NotificationCompat.Builder(this, "beacon_channel_id")
+                        .setContentTitle("Beacon Reference Application")
+                        .setContentText("An beacon is nearby.")
+                        .setSmallIcon(R.drawable.ic_launcher);
+
+        TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
+        stackBuilder.addNextIntent(new Intent(this, MonitoringActivity.class));
+        PendingIntent resultPendingIntent =
+                stackBuilder.getPendingIntent(
+                        0,
+                        PendingIntent.FLAG_UPDATE_CURRENT
+                );
+        builder.setContentIntent(resultPendingIntent);
+        NotificationManager notificationManager =
+                (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
+        notificationManager.notify(1, builder.build());
+    }
+
+    public void setMonitoringActivity(MonitoringActivity activity) {
+        this.monitoringActivity = activity;
+    }
+
+    private void logToDisplay(String line) {
+        cumulativeLog += (line + "\n");
+        if (this.monitoringActivity != null) {
+            this.monitoringActivity.updateLog(cumulativeLog);
+        }
+    }
+
+    public String getLog() {
+        return cumulativeLog;
+    }
+
+}
diff --git a/simulator/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java b/simulator/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
new file mode 100755
index 00000000..5a559af9
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
@@ -0,0 +1,125 @@
+package org.altbeacon.beaconreference;
+
+import android.Manifest;
+import android.annotation.SuppressLint;
+import android.app.AlertDialog;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v7.app.AppCompatActivity;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+
+import org.altbeacon.beacon.BeaconManager;
+
+/**
+ * @author dyoung
+ * @author Matt Tyler
+ */
+public class MonitoringActivity extends AppCompatActivity {
+    protected static final String TAG = "MonitoringActivity";
+    private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
+    private EditText et_log;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        Log.d(TAG, "onCreate");
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_monitoring);
+        et_log = MonitoringActivity.this.findViewById(R.id.monitoringText);
+        verifyBluetooth();
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            // Android M Permission check
+            if (this.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+                final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                builder.setTitle("This app needs location access");
+                builder.setMessage("Please grant location access so this app can detect beacons in the background.");
+                builder.setPositiveButton(android.R.string.ok, null);
+                builder.setOnDismissListener(dialog -> requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
+                        PERMISSION_REQUEST_COARSE_LOCATION));
+                builder.show();
+            }
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[],
+                                           @NonNull int[] grantResults) {
+        switch (requestCode) {
+            case PERMISSION_REQUEST_COARSE_LOCATION: {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    Log.d(TAG, "coarse location permission granted");
+                } else {
+                    final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                    builder.setTitle("Functionality limited");
+                    builder.setMessage("Since location access has not been granted, this app will not be able to discover beacons when in the background.");
+                    builder.setPositiveButton(android.R.string.ok, null);
+                    builder.show();
+                }
+            }
+        }
+    }
+
+    public void onRangingClicked(View view) {
+        Intent myIntent = new Intent(this, RangingActivity.class);
+        this.startActivity(myIntent);
+    }
+
+    @SuppressLint("SetTextI18n")
+    public void onEnableClicked(View view) {
+        BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
+        if (BeaconManager.getInstanceForApplication(this).getMonitoredRegions().size() > 0) {
+            application.disableMonitoring();
+            ((Button) findViewById(R.id.enableButton)).setText("Re-Enable Monitoring");
+        } else {
+            ((Button) findViewById(R.id.enableButton)).setText("Disable Monitoring");
+            application.enableMonitoring();
+        }
+
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
+        application.setMonitoringActivity(this);
+        updateLog(application.getLog());
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        ((BeaconReferenceApplication) this.getApplicationContext()).setMonitoringActivity(null);
+    }
+
+    private void verifyBluetooth() {
+
+        try {
+            if (!BeaconManager.getInstanceForApplication(this).checkAvailability()) {
+                final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                builder.setTitle("Bluetooth not enabled");
+                builder.setMessage("Please enable bluetooth in settings and restart this application.");
+                builder.setPositiveButton(android.R.string.ok, null);
+                builder.show();
+            }
+        } catch (RuntimeException e) {
+            final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setTitle("Bluetooth LE not available");
+            builder.setMessage("Sorry, this device does not support Bluetooth LE.");
+            builder.setPositiveButton(android.R.string.ok, null);
+            builder.show();
+
+        }
+
+    }
+
+    public void updateLog(final String log) {
+        runOnUiThread(() -> et_log.setText(log));
+    }
+
+}
diff --git a/simulator/src/main/java/org/altbeacon/beaconreference/RangingActivity.java b/simulator/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
new file mode 100755
index 00000000..a4c82a59
--- /dev/null
+++ b/simulator/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
@@ -0,0 +1,70 @@
+package org.altbeacon.beaconreference;
+
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.util.Log;
+import android.widget.EditText;
+
+import org.altbeacon.beacon.Beacon;
+import org.altbeacon.beacon.BeaconConsumer;
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.RangeNotifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.Collection;
+
+public class RangingActivity extends android.support.v7.app.AppCompatActivity implements BeaconConsumer {
+    protected static final String TAG = "RangingActivity";
+    private BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+    private EditText et_log;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_ranging);
+        et_log = RangingActivity.this.findViewById(R.id.rangingText);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        beaconManager.unbind(this);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        beaconManager.bind(this);
+    }
+
+    @Override
+    public void onBeaconServiceConnect() {
+
+        RangeNotifier rangeNotifier = (beacons, region) -> rangeNotfier(beacons);
+        try {
+            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
+            beaconManager.addRangeNotifier(rangeNotifier);
+            beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
+            beaconManager.addRangeNotifier(rangeNotifier);
+        } catch (RemoteException e) {
+            Log.e(TAG, "range error", e);
+        }
+    }
+
+    private void rangeNotfier(Collection<Beacon> beacons) {
+        if (beacons.size() > 0) {
+            Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  " + beacons.size());
+            Beacon firstBeacon = beacons.iterator().next();
+            logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
+        }
+    }
+
+    private void logToDisplay(final String line) {
+        runOnUiThread(() -> et_log.append(line + "\n"));
+    }
+}
diff --git a/simulator/src/main/res/drawable-hdpi/ic_launcher.png b/simulator/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100755
index 00000000..96a442e5
Binary files /dev/null and b/simulator/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/simulator/src/main/res/drawable-mdpi/ic_launcher.png b/simulator/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100755
index 00000000..359047df
Binary files /dev/null and b/simulator/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/simulator/src/main/res/drawable-xhdpi/ic_launcher.png b/simulator/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100755
index 00000000..71c6d760
Binary files /dev/null and b/simulator/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/simulator/src/main/res/layout/activity_monitoring.xml b/simulator/src/main/res/layout/activity_monitoring.xml
new file mode 100755
index 00000000..59ab4045
--- /dev/null
+++ b/simulator/src/main/res/layout/activity_monitoring.xml
@@ -0,0 +1,51 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                tools:context=".MonitoringActivity">
+
+    <TextView
+        android:id="@+id/textView1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginTop="17dp"
+        android:text="@string/monitoring_events"
+        tools:ignore="RtlHardcoded"/>
+
+    <EditText
+        android:id="@+id/monitoringText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/textView1"
+        android:layout_alignParentLeft="true"
+        android:layout_marginTop="36dp"
+        android:ems="10"
+        android:gravity="left|top"
+        android:inputType="textMultiLine"
+        tools:ignore="Autofill,LabelFor,RtlHardcoded">
+
+        <requestFocus/>
+    </EditText>
+
+    <Button
+        android:id="@+id/Button01"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/monitoringText"
+        android:layout_alignParentLeft="true"
+        android:onClick="onRangingClicked"
+        android:text="@string/start_ranging"
+        tools:ignore="RtlHardcoded"/>
+
+    <Button
+        android:id="@+id/enableButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/monitoringText"
+        android:layout_toRightOf="@id/Button01"
+        android:onClick="onEnableClicked"
+        android:text="@string/disable_monitoring"
+        tools:ignore="RtlHardcoded"/>
+</RelativeLayout>
diff --git a/simulator/src/main/res/layout/activity_ranging.xml b/simulator/src/main/res/layout/activity_ranging.xml
new file mode 100755
index 00000000..5bb3e8da
--- /dev/null
+++ b/simulator/src/main/res/layout/activity_ranging.xml
@@ -0,0 +1,20 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                tools:context=".RangingActivity">
+
+    <EditText
+        android:id="@+id/rangingText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:layout_marginTop="14dp"
+        android:ems="10"
+        android:gravity="left|top"
+        android:inputType="textMultiLine"
+        tools:ignore="Autofill,LabelFor,RtlHardcoded"/>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/simulator/src/main/res/values/strings.xml b/simulator/src/main/res/values/strings.xml
new file mode 100755
index 00000000..2ad265fe
--- /dev/null
+++ b/simulator/src/main/res/values/strings.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <string name="app_name">BeaconReference</string>
+    <string name="disable_monitoring">Disable monitoring</string>
+    <string name="start_ranging">Start Ranging</string>
+    <string name="monitoring_events">Monitoring Events:</string>
+
+</resources>
diff --git a/simulator/src/main/res/values/styles.xml b/simulator/src/main/res/values/styles.xml
new file mode 100755
index 00000000..9486e57d
--- /dev/null
+++ b/simulator/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
