diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 9a92e8d7..7429380a 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -298,15 +298,16 @@ public boolean isMainProcess() {
     }
 
     /**
-     * Determines if this BeaconManager instance is part of the process hosting the beacon scanning
-     * service.  This is normally true, except when scanning is hosted in a different service.
+     * Determines if this BeaconManager instance is not part of the process hosting the beacon scanning
+     * service.  This is normally false, except when scanning is hosted in a different process.
      * This will always return false until the scanning service starts up, at which time it will be
-     * known.
+     * known if it is in a different process.
      *
      * @return
      */
-    public boolean isScannerInSameProcess() {
-        return mScannerInSameProcess;
+    public boolean isScannerInDifferentProcess() {
+        // may be null if service not started yet, so explicitly check
+        return mScannerInSameProcess != null && !mScannerInSameProcess;
     }
 
     /**
@@ -650,7 +651,7 @@ public void setRegionStatePeristenceEnabled(boolean enabled) {
      */
     public void setRegionStatePersistenceEnabled(boolean enabled) {
         mRegionStatePersistenceEnabled = enabled;
-        if (isScannerInSameProcess()) {
+        if (!isScannerInDifferentProcess()) {
             if (enabled) {
                 MonitoringStatus.getInstanceForApplication(mContext).startStatusPreservation();
             } else {
@@ -762,13 +763,13 @@ public void stopRangingBeaconsInRegion(Region region) throws RemoteException {
     /**
      * Call this method if you are running the scanner service in a different process in order to
      * synchronize any configuration settings, including BeaconParsers to the scanner
-     * @see #isScannerInSameProcess()
+     * @see #isScannerInDifferentProcess()
      */
     public void applySettings() {
         if (determineIfCalledFromSeparateScannerProcess()) {
             return;
         }
-        if (isAnyConsumerBound() && isScannerInSameProcess() == false) {
+        if (isAnyConsumerBound() && !isScannerInDifferentProcess() == false) {
             LogManager.d(TAG, "Synchronizing settings to service");
             syncSettingsToService();
         }
@@ -825,7 +826,7 @@ public void startMonitoringBeaconsInRegion(Region region) throws RemoteException
         Message msg = Message.obtain(null, BeaconService.MSG_START_MONITORING, 0, 0);
         msg.setData(new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode).toBundle());
         serviceMessenger.send(msg);
-        if (!isScannerInSameProcess()) {
+        if (isScannerInDifferentProcess()) {
             MonitoringStatus.getInstanceForApplication(mContext).addLocalRegion(region);
         }
         this.requestStateForRegion(region);
@@ -857,7 +858,7 @@ public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException
         Message msg = Message.obtain(null, BeaconService.MSG_STOP_MONITORING, 0, 0);
         msg.setData(new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode).toBundle());
         serviceMessenger.send(msg);
-        if (!isScannerInSameProcess()) {
+        if (isScannerInDifferentProcess()) {
             MonitoringStatus.getInstanceForApplication(mContext).removeLocalRegion(region);
         }
     }
@@ -1193,7 +1194,7 @@ public static boolean getManifestCheckingDisabled() {
     }
 
     private boolean determineIfCalledFromSeparateScannerProcess() {
-        if (!isScannerInSameProcess() && !isMainProcess()) {
+        if (isScannerInDifferentProcess() && !isMainProcess()) {
             LogManager.w(TAG, "Ranging/Monitoring may not be controlled from a separate "+
                     "BeaconScanner process.  To remove this warning, please wrap this call in:"+
                     " if (beaconManager.isMainProcess())");
@@ -1203,7 +1204,7 @@ private boolean determineIfCalledFromSeparateScannerProcess() {
     }
 
     private static void warnIfScannerNotInSameProcess() {
-        if (sInstance != null && !sInstance.isScannerInSameProcess()) {
+        if (sInstance != null && sInstance.isScannerInDifferentProcess()) {
             LogManager.w(TAG,
                     "Unsupported configuration change made for BeaconScanner in separate process");
         }
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index 412f660d..362c2858 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -508,6 +508,9 @@ protected Void doInBackground(ScanData... params) {
                 }
             }
             if (beacon != null) {
+                if (LogManager.isVerboseLoggingEnabled()) {
+                    LogManager.d(TAG, "Beacon packet detected for: "+beacon+" with rssi "+beacon.getRssi());
+                }
                 mDetectionTracker.recordDetection();
                 trackedBeaconsPacketCount++;
                 processBeaconFromScan(beacon);
diff --git a/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java b/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
index 4dcf948c..164cd3e6 100644
--- a/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
+++ b/src/main/java/org/altbeacon/beacon/service/MonitoringStatus.java
@@ -284,6 +284,9 @@ public synchronized void clear() {
 
     public void updateLocalState(Region region, Integer state) {
         RegionMonitoringState internalState = getRegionsStateMap().get(region);
+        if (internalState == null) {
+            internalState = addLocalRegion(region);
+        }
         if (state != null) {
             if (state == MonitorNotifier.OUTSIDE) {
                 internalState.markOutside();
@@ -298,19 +301,19 @@ public void updateLocalState(Region region, Integer state) {
     public void removeLocalRegion(Region region) {
         getRegionsStateMap().remove(region);
     }
-    public void addLocalRegion(Region region){
+    public RegionMonitoringState addLocalRegion(Region region){
         Callback dummyCallback = new Callback(null);
-        addLocalRegion(region, dummyCallback);
+        return addLocalRegion(region, dummyCallback);
     }
 
-    private void addLocalRegion(Region region, Callback callback){
+    private RegionMonitoringState addLocalRegion(Region region, Callback callback){
         if (getRegionsStateMap().containsKey(region)) {
             // if the region definition hasn't changed, becasue if it has, we need to clear state
             // otherwise a region with the same uniqueId can never be changed
             for (Region existingRegion : getRegionsStateMap().keySet()) {
                 if (existingRegion.equals(region)) {
                     if (existingRegion.hasSameIdentifiers(region)) {
-                        return;
+                        return getRegionsStateMap().get(existingRegion);
                     }
                     else {
                         LogManager.d(TAG, "Replacing region with unique identifier "+region.getUniqueId());
@@ -323,6 +326,8 @@ private void addLocalRegion(Region region, Callback callback){
                 }
             }
         }
-        getRegionsStateMap().put(region, new RegionMonitoringState(callback));
+        RegionMonitoringState monitoringState = new RegionMonitoringState(callback);
+        getRegionsStateMap().put(region, monitoringState);
+        return monitoringState;
     }
 }
