diff --git a/CHANGELOG.md b/CHANGELOG.md
index c8ee67d7..47059df2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,6 +4,8 @@ Bug Fixes:
  - Fix performance problems when using identifiers 3-15 bytes caused by
    Identifier#toHexString(). (#615, David G. Young)
  - Restore missing runningAverageRssi values  (#621, David G. Young)
+ - Fix regression with `RunningAverageRssiFilter.setSampleExpirationMilliseconds`
+   being overwritten when committing ranged beacon measurements. (#629, Aaron Kromer)
 
 ### 2.12.3 / 2017-10-14
 
diff --git a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
index f54623ef..d02bef83 100644
--- a/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
+++ b/src/main/java/org/altbeacon/beacon/service/RangedBeacon.java
@@ -47,7 +47,6 @@ public Beacon getBeacon() {
 
     // Done at the end of each cycle before data are sent to the client
     public void commitMeasurements() {
-        RunningAverageRssiFilter.setSampleExpirationMilliseconds(sampleExpirationMilliseconds);
          if (!getFilter().noMeasurementsAvailable()) {
              double runningAverage = getFilter().calculateRssi();
              mBeacon.setRunningAverageRssi(runningAverage);
diff --git a/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java b/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
index e79c8ee9..8eb7cc08 100644
--- a/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
+++ b/src/test/java/org/altbeacon/beacon/service/RunningAverageRssiFilterTest.java
@@ -28,6 +28,21 @@ public void rangedBeaconDoesNotOverrideSampleExpirationMillisecondsText() {
         assertEquals("RunningAverageRssiFilter sampleExprirationMilliseconds should not be altered by constructing RangedBeacon", 33l, RunningAverageRssiFilter.getSampleExpirationMilliseconds());
     }
 
+    @Test
+    public void regressionCheckRangedBeaconCommitDoesNotOverrideSampleExpirationMilliseconds() {
+        RangedBeacon.setSampleExpirationMilliseconds(20000);
+        RunningAverageRssiFilter.setSampleExpirationMilliseconds(20000);
+        Beacon beacon = new Beacon.Builder().setId1("1").build();
+        RangedBeacon rb = new RangedBeacon(beacon);
+        RunningAverageRssiFilter.setSampleExpirationMilliseconds(33l);
+        rb.commitMeasurements();
+        assertEquals(
+                "RunningAverageRssiFilter sampleExprirationMilliseconds should not be altered by committing RangedBeacon",
+                33l,
+                RunningAverageRssiFilter.getSampleExpirationMilliseconds()
+        );
+    }
+
     @Test
     public void legacySetSampleExpirationMillisecondsWorksText() {
         RangedBeacon.setSampleExpirationMilliseconds(20000);
