diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index f58f6be7..1a14f5dd 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -35,6 +35,8 @@
 import android.os.Message;
 import android.os.Messenger;
 import android.os.RemoteException;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import org.altbeacon.beacon.logging.LogManager;
 import org.altbeacon.beacon.logging.Loggers;
@@ -109,23 +111,46 @@
  * @author Andrew Reitz <andrew@andrewreitz.com>
  */
 public class BeaconManager {
+    @NonNull
     private static final String TAG = "BeaconManager";
-    private Context mContext;
+
+    @NonNull
+    private final Context mContext;
+
+    @Nullable
     protected static volatile BeaconManager sInstance = null;
-    private final ConcurrentMap<BeaconConsumer, ConsumerInfo> consumers = new ConcurrentHashMap<BeaconConsumer,ConsumerInfo>();
+
+    @NonNull
+    private final ConcurrentMap<BeaconConsumer, ConsumerInfo> consumers = new ConcurrentHashMap<>();
+
+    @Nullable
     private Messenger serviceMessenger = null;
+
+    @NonNull
     protected final Set<RangeNotifier> rangeNotifiers = new CopyOnWriteArraySet<>();
+
+    @Nullable
     protected RangeNotifier dataRequestNotifier = null;
+
+    @NonNull
     protected final Set<MonitorNotifier> monitorNotifiers = new CopyOnWriteArraySet<>();
-    private final ArrayList<Region> rangedRegions = new ArrayList<Region>();
+
+    @NonNull
+    private final ArrayList<Region> rangedRegions = new ArrayList<>();
+
+    @NonNull
     private final List<BeaconParser> beaconParsers = new CopyOnWriteArrayList<>();
+
+    @Nullable
     private NonBeaconLeScanCallback mNonBeaconLeScanCallback;
+
     private boolean mRegionStatePersistenceEnabled = true;
     private boolean mBackgroundMode = false;
     private boolean mBackgroundModeUninitialized = true;
     private boolean mMainProcess = false;
-    private Boolean mScannerInSameProcess = null;
 
+    @Nullable
+    private Boolean mScannerInSameProcess = null;
 
     private static boolean sAndroidLScanningDisabled = false;
     private static boolean sManifestCheckingDisabled = false;
@@ -235,8 +260,9 @@ public void setBackgroundBetweenScanPeriod(long p) {
      */
     public static void setRegionExitPeriod(long regionExitPeriod){
         sExitRegionPeriod = regionExitPeriod;
-        if (sInstance != null) {
-            sInstance.applySettings();
+        BeaconManager instance = sInstance;
+        if (instance != null) {
+            instance.applySettings();
         }
     }
     
@@ -253,7 +279,8 @@ public static long getRegionExitPeriod(){
      * An accessor for the singleton instance of this class.  A context must be provided, but if you need to use it from a non-Activity
      * or non-Service class, you can attach it to another singleton or a subclass of the Android Application class.
      */
-    public static BeaconManager getInstanceForApplication(Context context) {
+    @NonNull
+    public static BeaconManager getInstanceForApplication(@NonNull Context context) {
         /*
          * Follow double check pattern from Effective Java v2 Item 71.
          *
@@ -279,7 +306,7 @@ public static BeaconManager getInstanceForApplication(Context context) {
         return instance;
     }
 
-    protected BeaconManager(Context context) {
+    protected BeaconManager(@NonNull Context context) {
         mContext = context.getApplicationContext();
         checkIfMainProcess();
         if (!sManifestCheckingDisabled) {
@@ -334,6 +361,7 @@ protected void checkIfMainProcess() {
      *
      * @return list of active BeaconParsers
      */
+   @NonNull
     public List<BeaconParser> getBeaconParsers() {
         return beaconParsers;
     }
@@ -359,7 +387,7 @@ public boolean checkAvailability() throws BleNotAvailableException {
      *
      * @param consumer the <code>Activity</code> or <code>Service</code> that will receive the callback when the service is ready.
      */
-    public void bind(BeaconConsumer consumer) {
+    public void bind(@NonNull BeaconConsumer consumer) {
         if (!isBleAvailable()) {
             LogManager.w(TAG, "Method invocation will be ignored.");
             return;
@@ -389,7 +417,7 @@ public void bind(BeaconConsumer consumer) {
      *
      * @param consumer the <code>Activity</code> or <code>Service</code> that no longer needs to use the service.
      */
-    public void unbind(BeaconConsumer consumer) {
+    public void unbind(@NonNull BeaconConsumer consumer) {
         if (!isBleAvailable()) {
             LogManager.w(TAG, "Method invocation will be ignored.");
             return;
@@ -426,8 +454,10 @@ public void unbind(BeaconConsumer consumer) {
      * @param consumer
      * @return
      */
-    public boolean isBound(BeaconConsumer consumer) {
+    public boolean isBound(@NonNull BeaconConsumer consumer) {
         synchronized(consumers) {
+            // Annotation doesn't guarantee we get a non-null, but raising an NPE here is excessive
+            //noinspection ConstantConditions
             return consumer != null && consumers.get(consumer) != null && (serviceMessenger != null);
         }
     }
@@ -499,11 +529,13 @@ public boolean isBackgroundModeUninitialized() {
      * @deprecated replaced by (@link #addRangeNotifier)
      */
     @Deprecated
-    public void setRangeNotifier(RangeNotifier notifier) {
+    public void setRangeNotifier(@Nullable RangeNotifier notifier) {
         synchronized (rangeNotifiers) {
             rangeNotifiers.clear();
         }
-        addRangeNotifier(notifier);
+        if (null != notifier) {
+            addRangeNotifier(notifier);
+        }
     }
 
     /**
@@ -517,7 +549,8 @@ public void setRangeNotifier(RangeNotifier notifier) {
      * @param notifier The {@link RangeNotifier} to register.
      * @see RangeNotifier
      */
-    public void addRangeNotifier(RangeNotifier notifier) {
+    public void addRangeNotifier(@NonNull RangeNotifier notifier) {
+        //noinspection ConstantConditions
         if (notifier != null) {
             synchronized (rangeNotifiers) {
                 rangeNotifiers.add(notifier);
@@ -531,7 +564,7 @@ public void addRangeNotifier(RangeNotifier notifier) {
      * @param notifier The {@link RangeNotifier} to unregister.
      * @see RangeNotifier
      */
-    public boolean removeRangeNotifier(RangeNotifier notifier) {
+    public boolean removeRangeNotifier(@NonNull RangeNotifier notifier) {
         synchronized (rangeNotifiers) {
             return rangeNotifiers.remove(notifier);
         }
@@ -561,14 +594,16 @@ public void removeAllRangeNotifiers() {
      * @deprecated replaced by {@link #addMonitorNotifier}
      */
     @Deprecated
-    public void setMonitorNotifier(MonitorNotifier notifier) {
+    public void setMonitorNotifier(@Nullable MonitorNotifier notifier) {
         if (determineIfCalledFromSeparateScannerProcess()) {
             return;
         }
         synchronized (monitorNotifiers) {
             monitorNotifiers.clear();
         }
-        addMonitorNotifier(notifier);
+        if (null != notifier) {
+            addMonitorNotifier(notifier);
+        }
     }
 
     /**
@@ -584,10 +619,11 @@ public void setMonitorNotifier(MonitorNotifier notifier) {
      * @see #startMonitoringBeaconsInRegion(Region)
      * @see Region
      */
-    public void addMonitorNotifier(MonitorNotifier notifier) {
+    public void addMonitorNotifier(@NonNull MonitorNotifier notifier) {
         if (determineIfCalledFromSeparateScannerProcess()) {
             return;
         }
+        //noinspection ConstantConditions
         if (notifier != null) {
             synchronized (monitorNotifiers) {
                 monitorNotifiers.add(notifier);
@@ -600,7 +636,7 @@ public void addMonitorNotifier(MonitorNotifier notifier) {
      * @deprecated Misspelled. Replaced by {@link #removeMonitorNotifier}
      */
     @Deprecated
-    public boolean removeMonitoreNotifier(MonitorNotifier notifier) {
+    public boolean removeMonitoreNotifier(@NonNull MonitorNotifier notifier) {
         return removeMonitorNotifier(notifier);
     }
 
@@ -612,7 +648,7 @@ public boolean removeMonitoreNotifier(MonitorNotifier notifier) {
      * @see #startMonitoringBeaconsInRegion(Region)
      * @see Region
      */
-    public boolean removeMonitorNotifier(MonitorNotifier notifier) {
+    public boolean removeMonitorNotifier(@NonNull MonitorNotifier notifier) {
         if (determineIfCalledFromSeparateScannerProcess()) {
             return false;
         }
@@ -677,7 +713,7 @@ public boolean isRegionStatePersistenceEnabled() {
      * method.  If it is not a monitored region, it will be ignored.
      * @param region
      */
-    public void requestStateForRegion(Region region) {
+    public void requestStateForRegion(@NonNull Region region) {
         if (determineIfCalledFromSeparateScannerProcess()) {
             return;
         }
@@ -707,7 +743,7 @@ public void requestStateForRegion(Region region) {
      * @see Region
      */
     @TargetApi(18)
-    public void startRangingBeaconsInRegion(Region region) throws RemoteException {
+    public void startRangingBeaconsInRegion(@NonNull Region region) throws RemoteException {
         if (!isBleAvailable()) {
             LogManager.w(TAG, "Method invocation will be ignored.");
             return;
@@ -737,7 +773,7 @@ public void startRangingBeaconsInRegion(Region region) throws RemoteException {
      * @see Region
      */
     @TargetApi(18)
-    public void stopRangingBeaconsInRegion(Region region) throws RemoteException {
+    public void stopRangingBeaconsInRegion(@NonNull Region region) throws RemoteException {
         if (!isBleAvailable()) {
             LogManager.w(TAG, "Method invocation will be ignored.");
             return;
@@ -813,7 +849,7 @@ protected void syncSettingsToService() {
      * @see Region
      */
     @TargetApi(18)
-    public void startMonitoringBeaconsInRegion(Region region) throws RemoteException {
+    public void startMonitoringBeaconsInRegion(@NonNull Region region) throws RemoteException {
         if (!isBleAvailable()) {
             LogManager.w(TAG, "Method invocation will be ignored.");
             return;
@@ -846,7 +882,7 @@ public void startMonitoringBeaconsInRegion(Region region) throws RemoteException
      * @see Region
      */
     @TargetApi(18)
-    public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException {
+    public void stopMonitoringBeaconsInRegion(@NonNull Region region) throws RemoteException {
         if (!isBleAvailable()) {
             LogManager.w(TAG, "Method invocation will be ignored.");
             return;
@@ -902,6 +938,7 @@ private String callbackPackageName() {
      * @deprecated replaced by (@link #getMonitorNotifiers)
      */
     @Deprecated
+    @Nullable
     public MonitorNotifier getMonitoringNotifier() {
         synchronized (monitorNotifiers) {
             if (monitorNotifiers.size() > 0) {
@@ -914,6 +951,7 @@ public MonitorNotifier getMonitoringNotifier() {
     /**
      * @return the list of registered monitorNotifier
      */
+    @NonNull
     public Set<MonitorNotifier> getMonitoringNotifiers(){
         return monitorNotifiers;
     }
@@ -923,6 +961,7 @@ public MonitorNotifier getMonitoringNotifier() {
      * @deprecated replaced by (@link #getRangeNotifiers)
      */
     @Deprecated
+    @Nullable
     public RangeNotifier getRangingNotifier() {
         synchronized (rangeNotifiers) {
             if (rangeNotifiers.size() > 0) {
@@ -935,6 +974,7 @@ public RangeNotifier getRangingNotifier() {
     /**
      * @return the list of registered rangeNotifier
      */
+    @NonNull
     public Set<RangeNotifier> getRangingNotifiers() {
         return rangeNotifiers;
     }
@@ -942,6 +982,7 @@ public RangeNotifier getRangingNotifier() {
     /**
      * @return the list of regions currently being monitored
      */
+    @NonNull
     public Collection<Region> getMonitoredRegions() {
         return MonitoringStatus.getInstanceForApplication(mContext).regions();
     }
@@ -949,6 +990,7 @@ public RangeNotifier getRangingNotifier() {
     /**
      * @return the list of regions currently being ranged
      */
+    @NonNull
     public Collection<Region> getRangedRegions() {
         synchronized(this.rangedRegions) {
             return new ArrayList<Region>(this.rangedRegions);
@@ -983,6 +1025,7 @@ public static void logDebug(String tag, String message, Throwable t) {
         LogManager.d(t, tag, message);
     }
 
+    @Nullable
     protected static BeaconSimulator beaconSimulator;
 
     protected static String distanceModelUpdateUrl = "http://data.altbeacon.org/android-distance.json";
@@ -991,7 +1034,7 @@ public static String getDistanceModelUpdateUrl() {
         return distanceModelUpdateUrl;
     }
 
-    public static void setDistanceModelUpdateUrl(String url) {
+    public static void setDistanceModelUpdateUrl(@NonNull String url) {
         warnIfScannerNotInSameProcess();
         distanceModelUpdateUrl = url;
     }
@@ -1001,7 +1044,7 @@ public static void setDistanceModelUpdateUrl(String url) {
      */
     protected static Class rssiFilterImplClass = RunningAverageRssiFilter.class;
 
-    public static void setRssiFilterImplClass(Class c) {
+    public static void setRssiFilterImplClass(@NonNull Class c) {
         warnIfScannerNotInSameProcess();
         rssiFilterImplClass = c;
     }
@@ -1035,24 +1078,27 @@ public static void setBeaconSimulator(BeaconSimulator beaconSimulator) {
         BeaconManager.beaconSimulator = beaconSimulator;
     }
 
+    @Nullable
     public static BeaconSimulator getBeaconSimulator() {
         return BeaconManager.beaconSimulator;
     }
 
 
-    protected void setDataRequestNotifier(RangeNotifier notifier) {
+    protected void setDataRequestNotifier(@Nullable RangeNotifier notifier) {
         this.dataRequestNotifier = notifier;
     }
 
+    @Nullable
     protected RangeNotifier getDataRequestNotifier() {
         return this.dataRequestNotifier;
     }
 
+    @Nullable
     public NonBeaconLeScanCallback getNonBeaconLeScanCallback() {
         return mNonBeaconLeScanCallback;
     }
 
-    public void setNonBeaconLeScanCallback(NonBeaconLeScanCallback callback) {
+    public void setNonBeaconLeScanCallback(@Nullable NonBeaconLeScanCallback callback) {
         mNonBeaconLeScanCallback = callback;
     }
 
@@ -1097,6 +1143,8 @@ private void verifyServiceDeclaration() {
 
     private class ConsumerInfo {
         public boolean isConnected = false;
+
+        @NonNull
         public BeaconServiceConnection beaconServiceConnection;
 
         public ConsumerInfo() {
@@ -1163,8 +1211,9 @@ public static boolean isAndroidLScanningDisabled() {
      */
     public static void setAndroidLScanningDisabled(boolean disabled) {
         sAndroidLScanningDisabled = disabled;
-        if (sInstance != null) {
-            sInstance.applySettings();
+        BeaconManager instance = sInstance;
+        if (instance != null) {
+            instance.applySettings();
         }
     }
 
@@ -1206,7 +1255,8 @@ private boolean determineIfCalledFromSeparateScannerProcess() {
     }
 
     private static void warnIfScannerNotInSameProcess() {
-        if (sInstance != null && sInstance.isScannerInDifferentProcess()) {
+        BeaconManager instance = sInstance;
+        if (instance != null && instance.isScannerInDifferentProcess()) {
             LogManager.w(TAG,
                     "Unsupported configuration change made for BeaconScanner in separate process");
         }
