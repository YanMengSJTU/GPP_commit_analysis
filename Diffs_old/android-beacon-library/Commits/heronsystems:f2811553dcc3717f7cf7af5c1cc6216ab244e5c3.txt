diff --git a/src/main/java/org/altbeacon/beacon/service/ScanDataProcessor.java b/src/main/java/org/altbeacon/beacon/service/ScanDataProcessor.java
index 716946bd..758f0995 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanDataProcessor.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanDataProcessor.java
@@ -25,6 +25,7 @@
 
 /**
  * Created by dyoung on 3/24/17.
+ * @hice
  */
 
 public class ScanDataProcessor {
@@ -36,7 +37,6 @@
     private ExtraDataBeaconTracker mExtraDataBeaconTracker;
     // TODO: implement this
     private NonBeaconLeScanCallback mNonBeaconLeScanCallback;
-    // TODO: re-evaluate the need for this
     private DetectionTracker mDetectionTracker = DetectionTracker.getInstance();
 
     int trackedBeaconsPacketCount;
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java b/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
index 3ac5fbdc..29d8ef6c 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanHelper.java
@@ -2,13 +2,18 @@
 
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
+import android.app.PendingIntent;
 import android.bluetooth.BluetoothDevice;
+import android.bluetooth.le.ScanFilter;
+import android.bluetooth.le.ScanSettings;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.support.annotation.MainThread;
 import android.support.annotation.NonNull;
+import android.support.annotation.RequiresApi;
 import android.support.annotation.WorkerThread;
 import android.support.annotation.RestrictTo;
 import android.support.annotation.RestrictTo.Scope;
@@ -22,6 +27,8 @@
 import org.altbeacon.beacon.service.scanner.CycledLeScanner;
 import org.altbeacon.beacon.service.scanner.DistinctPacketDetector;
 import org.altbeacon.beacon.service.scanner.NonBeaconLeScanCallback;
+import org.altbeacon.beacon.service.scanner.ScanFilterUtils;
+import org.altbeacon.beacon.startup.StartupBroadcastReceiver;
 import org.altbeacon.bluetooth.BluetoothCrashResolver;
 
 import java.util.ArrayList;
@@ -39,7 +46,7 @@
 /**
  * Created by dyoung on 6/16/17.
  *
- * This is an internal utilty class and should not be called directly by library users.
+ * This is an internal utility class and should not be called directly by library users.
  *
  * This encapsulates shared data and methods used by both ScanJob and BeaconService
  * that deal with the specifics of beacon scanning.
@@ -137,6 +144,31 @@ void reloadParsers() {
         mExtraDataBeaconTracker = new ExtraDataBeaconTracker(matchBeaconsByServiceUUID);
     }
 
+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
+    void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
+        ScanSettings settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
+        List<ScanFilter> filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
+                new ArrayList<>(beaconParsers));
+        try {
+            Intent intent = new Intent(mContext, StartupBroadcastReceiver.class);
+            intent.putExtra("o-scan", true);
+            PendingIntent callbackIntent = PendingIntent.getBroadcast(mContext,0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+            // We cannot build with a minSdk < Android O when using Android O preview APIs
+            // This code is only enabled in a branch targeting Android O.  That will change
+            // upon the release of Android O.
+            //int result = getBluetoothAdapter().getBluetoothLeScanner().startScan(filters, settings, callbackIntent);
+            //if (result != 0) {
+            //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
+            //}
+            //else {
+            //    LogManager.d(TAG, "Started passive beacon scan");
+            //}
+        }
+        catch (SecurityException e) {
+            LogManager.e(TAG, "SecurityException making Android O background scanner");
+        }
+    }
+
     private final CycledLeScanCallback mCycledLeScanCallback = new CycledLeScanCallback() {
         @TargetApi(Build.VERSION_CODES.HONEYCOMB)
         @Override
@@ -339,4 +371,5 @@ protected void onProgressUpdate(Void... values) {
         }
         return matched;
     }
+
 }
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJob.java b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
index cdf771cc..2a224245 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJob.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJob.java
@@ -13,7 +13,6 @@
 import org.altbeacon.beacon.Region;
 import org.altbeacon.beacon.distance.ModelSpecificDistanceCalculator;
 import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.service.scanner.CycledLeScannerForAndroidO;
 import org.altbeacon.beacon.utils.ProcessUtils;
 import java.util.List;
 
@@ -28,7 +27,7 @@
  * If the OS decides to create a new instance, it will call onStopJob() on the old instance
  *
  * Created by dyoung on 3/24/17.
- *
+ * @hide
  */
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class ScanJob extends JobService {
@@ -112,17 +111,13 @@ private void startPassiveScanIfNeeded() {
             LogManager.i(TAG, "We are inside a beacon region.  We will not scan between cycles.");
         }
         else {
-            LogManager.i(TAG, "We are outside all beacon regions.  We will scan between cycles.");
-            // TODO:  Ew. figure out a better way to know to call this
-            if (mScanHelper.getCycledScanner() instanceof CycledLeScannerForAndroidO) {
-                // We are in backround mode for Anrdoid O and the background scan cycle
-                // has ended.  Now we kick off a background scan with a lower power
-                // mode and set it to deliver an intent if it sees anything that will
-                // wake us up and start this craziness all over again
-                ((CycledLeScannerForAndroidO)mScanHelper.getCycledScanner()).startAndroidOBackgroundScan(mScanState.getBeaconParsers());
+            // TODO: Change this to >= Build.VERSION_CODES.O when the SDK is released
+            if (android.os.Build.VERSION.SDK_INT > Build.VERSION_CODES.N) {
+                LogManager.i(TAG, "We are outside all beacon regions.  We will scan between cycles.");
+                mScanHelper.startAndroidOBackgroundScan(mScanState.getBeaconParsers());
             }
             else {
-                LogManager.d(TAG, "This is not an Android O scanner.  No scanning between cycles.");
+                LogManager.d(TAG, "This is not Android O.  No scanning between cycles when using ScanJob");
             }
         }
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java b/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
index 92785406..bfe8d354 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanJobScheduler.java
@@ -10,6 +10,7 @@
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.RequiresApi;
 
 import org.altbeacon.beacon.BeaconManager;
 import org.altbeacon.beacon.logging.LogManager;
@@ -18,17 +19,27 @@
 import java.util.List;
 
 /**
+ * Schedules two types of ScanJobs:
+ *  1. Periodic, which are set to go every scanPeriod+betweenScanPeriod
+ *  2. Immediate, which go right now.
+ *
+ *  Immediate ScanJobs are used when the app is in the foreground and wants to get immediate results
+ *  or when beacons have been detected with background scan filters and delivered via Intents and
+ *  a scan needs to run in a timely manner to collect data about those beacons known to be newly
+ *  in the vicinity despite the app being in the background.
+ *
  * Created by dyoung on 6/7/17.
+ * @hide
  */
-
+@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
 public class ScanJobScheduler {
     private static final String TAG = ScanJobScheduler.class.getSimpleName();
     private static final Object SINGLETON_LOCK = new Object();
-    private static final long MIN_MILLIS_BETWEEN_SCAN_JOB_SCHEDULING = 10000l;
+    private static final long MIN_MILLIS_BETWEEN_SCAN_JOB_SCHEDULING = 10000L;
     @Nullable
     private static volatile ScanJobScheduler sInstance = null;
     @NonNull
-    private Long mScanJobScheduleTime = 0l;
+    private Long mScanJobScheduleTime = 0L;
     @NonNull
     private List<ScanResult> mBackgroundScanResultQueue = new ArrayList<>();
 
@@ -46,14 +57,13 @@ public static ScanJobScheduler getInstance() {
         return instance;
     }
 
-    protected ScanJobScheduler() {
+    private ScanJobScheduler() {
     }
 
     /**
-     * Returns queued scan results delivered in the background
-     * @return
+     * @return previoulsy queued scan results delivered in the background
      */
-    public List<ScanResult> dumpBackgroundScanResultQueue() {
+    List<ScanResult> dumpBackgroundScanResultQueue() {
         List<ScanResult> retval = mBackgroundScanResultQueue;
         mBackgroundScanResultQueue = new ArrayList<>();
         return retval;
@@ -72,11 +82,13 @@ public void applySettingsToScheduledJob(Context context, BeaconManager beaconMan
         applySettingsToScheduledJob(context, beaconManager, scanState);
     }
 
+    // This method appears to be never used, because it is only used by Android O APIs, which
+    // must exist on another branch until the SDKs are released.
     public void scheduleAfterBackgroundWakeup(Context context, List<ScanResult> scanResults) {
         if (scanResults != null) {
             mBackgroundScanResultQueue.addAll(scanResults);
         }
-        synchronized (mScanJobScheduleTime) {
+        synchronized (this) {
             // We typically get a bunch of calls in a row here, separated by a few millis.  Only do this once.
             if (System.currentTimeMillis() - mScanJobScheduleTime > MIN_MILLIS_BETWEEN_SCAN_JOB_SCHEDULING) {
                 LogManager.d(TAG, "scheduling an immediate scan job because last did "+(System.currentTimeMillis() - mScanJobScheduleTime)+"seconds ago.");
@@ -91,14 +103,10 @@ public void scheduleAfterBackgroundWakeup(Context context, List<ScanResult> scan
         schedule(context, scanState, true);
     }
 
-    /**
-     *
-     * @param context
-     */
-    public void schedule(Context context, ScanState scanState, boolean backgroundWakeup) {
+    private void schedule(Context context, ScanState scanState, boolean backgroundWakeup) {
         long betweenScanPeriod = scanState.getScanJobIntervalMillis() - scanState.getScanJobRuntimeMillis();
 
-        long millisToNextJobStart = scanState.getScanJobIntervalMillis();
+        long millisToNextJobStart;
         if (backgroundWakeup) {
             LogManager.d(TAG, "We just woke up in the background based on a new scan result.  Start scan job immediately.");
             millisToNextJobStart = 0;
@@ -151,7 +159,7 @@ public void schedule(Context context, ScanState scanState, boolean backgroundWak
         if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             // ON Android N+ we specify a tolerance of 0ms (capped at 5% by the OS) to ensure
             // our scans happen within 5% of the schduled time.
-            periodicJobBuilder.setPeriodic(scanState.getScanJobIntervalMillis(), 0l).build();
+            periodicJobBuilder.setPeriodic(scanState.getScanJobIntervalMillis(), 0L).build();
         }
         else {
             periodicJobBuilder.setPeriodic(scanState.getScanJobIntervalMillis()).build();
@@ -165,6 +173,7 @@ public void schedule(Context context, ScanState scanState, boolean backgroundWak
         // This is the same way it worked on Android N per this post: https://stackoverflow.com/questions/38344220/job-scheduler-not-running-on-android-n
         //
         // In practice, I see the following runtimes on the Nexus Player with Android O
+        // This shows that the 15 minutes has some slop.
         //
         /*
 06-07 22:25:51.380 6455-6455/org.altbeacon.beaconreference I/ScanJob: Running periodic scan job: instance is org.altbeacon.beacon.service.ScanJob@7188bc6
diff --git a/src/main/java/org/altbeacon/beacon/service/ScanState.java b/src/main/java/org/altbeacon/beacon/service/ScanState.java
index 25f8264a..251316a8 100644
--- a/src/main/java/org/altbeacon/beacon/service/ScanState.java
+++ b/src/main/java/org/altbeacon/beacon/service/ScanState.java
@@ -28,6 +28,7 @@
  * for running from a scheduled job
  *
  * Created by dyoung on 3/26/17.
+ * @hide
  */
 
 public class ScanState implements Serializable {
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
index 0e424ad1..f7f1682a 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScannerForAndroidO.java
@@ -1,59 +1,28 @@
 package org.altbeacon.beacon.service.scanner;
 
 import android.annotation.TargetApi;
-import android.app.PendingIntent;
-import android.bluetooth.le.ScanFilter;
-import android.bluetooth.le.ScanSettings;
 import android.content.Context;
-import android.content.Intent;
-
-import org.altbeacon.beacon.BeaconParser;
-import org.altbeacon.beacon.logging.LogManager;
-import org.altbeacon.beacon.startup.StartupBroadcastReceiver;
 import org.altbeacon.bluetooth.BluetoothCrashResolver;
-
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Set;
 
 /**
+ * The scanner used for Android O is effectively the same as used for JellyBeaconMr2.  There is no
+ * point in using the low power scanning APIs introduced in Lollipop, because they only work when
+ * the app is running, effectively requiring a long running service, something newly disallowed
+ * by Android O.  The new strategy for Android O is to use a JobScheduler combined with background
+ * scans delivered by Intents.
+ *
+ * @see org.altbeacon.beacon.service.ScanJob
+ * @see org.altbeacon.beacon.service.ScanHelper#startAndroidOBackgroundScan(Set)
+ *
  * Created by dyoung on 5/28/17.
  */
 
 @TargetApi(25)
-public class CycledLeScannerForAndroidO extends CycledLeScannerForJellyBeanMr2 {
+class CycledLeScannerForAndroidO extends CycledLeScannerForJellyBeanMr2 {
     private static final String TAG = CycledLeScannerForAndroidO.class.getSimpleName();
 
-    public CycledLeScannerForAndroidO(Context context, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, CycledLeScanCallback cycledLeScanCallback, BluetoothCrashResolver crashResolver) {
+    CycledLeScannerForAndroidO(Context context, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, CycledLeScanCallback cycledLeScanCallback, BluetoothCrashResolver crashResolver) {
         super(context, scanPeriod, betweenScanPeriod, backgroundFlag, cycledLeScanCallback, crashResolver);
     }
-
-    /**
-     * @param beaconParsers
-     */
-    public void startAndroidOBackgroundScan(Set<BeaconParser> beaconParsers) {
-        ScanSettings settings = (new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_POWER)).build();
-        List<ScanFilter> filters = new ScanFilterUtils().createScanFiltersForBeaconParsers(
-                new ArrayList(beaconParsers));
-        try {
-            Intent intent = new Intent(mContext, StartupBroadcastReceiver.class);
-            intent.putExtra("o-scan", true);
-            PendingIntent callbackIntent = PendingIntent.getBroadcast(mContext,0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
-            // We cannot build with a minSdk < Android O when using Android O preview APIs
-            // so if you set an earlier minSdk to test against pre-O devices, you must comment out
-            // the next few lines
-            //int result = getBluetoothAdapter().getBluetoothLeScanner().startScan(filters, settings, callbackIntent);
-            //if (result != 0) {
-            //    LogManager.e(TAG, "Failed to start background scan on Android O.  Code: "+result);
-            //}
-            //else {
-            //    LogManager.d(TAG, "Started passive beacon scan");
-            //}
-            // End of lines that must be commented out when not compiling against Android O
-         }
-        catch (SecurityException e) {
-            LogManager.e(TAG, "SecurityException making Android O background scanner");
-         }
-    }
-
 }
