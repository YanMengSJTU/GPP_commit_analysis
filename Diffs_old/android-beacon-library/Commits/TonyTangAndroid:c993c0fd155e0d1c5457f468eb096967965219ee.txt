diff --git a/1_monitor/build.gradle b/1_monitor/build.gradle
new file mode 100755
index 00000000..e6b0030a
--- /dev/null
+++ b/1_monitor/build.gradle
@@ -0,0 +1,34 @@
+apply plugin: 'com.android.application'
+apply plugin: 'com.jakewharton.hugo'
+
+android {
+    compileSdkVersion 28
+    buildToolsVersion '28.0.3'
+
+    defaultConfig {
+        applicationId "org.altbeacon.beacon.demo.monitor"
+        minSdkVersion 21
+        //noinspection ExpiredTargetSdkVersion
+        targetSdkVersion 22
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        targetCompatibility JavaVersion.VERSION_1_8
+        sourceCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    compile 'com.android.support:appcompat-v7:28.0.0'
+    if (enableLib == 'true') {
+        compile project(':lib')
+    } else {
+        compile 'org.altbeacon:android-beacon-library:2.15.4'
+    }
+}
\ No newline at end of file
diff --git a/1_monitor/src/main/AndroidManifest.xml b/1_monitor/src/main/AndroidManifest.xml
new file mode 100755
index 00000000..55624153
--- /dev/null
+++ b/1_monitor/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="org.altbeacon.beacon.demo.monitor">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme"
+        tools:ignore="AllowBackup,GoogleAppIndexingWarning">
+        <activity
+            android:name=".MonitorBeaconActivity"
+            android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java
new file mode 100755
index 00000000..08c5705c
--- /dev/null
+++ b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/MonitorBeaconActivity.java
@@ -0,0 +1,166 @@
+package org.altbeacon.beacon.demo.monitor;
+
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothManager;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import org.altbeacon.beacon.BeaconConsumer;
+import org.altbeacon.beacon.BeaconManager;
+import org.altbeacon.beacon.MonitorNotifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.List;
+
+import hugo.weaving.DebugLog;
+
+@DebugLog
+public class MonitorBeaconActivity extends AppCompatActivity
+        implements MonitorNotifier, BeaconConsumer {
+
+    private static final int REQUEST_TURN_ON_BLUETOOTH = 1;
+    private TextView tv_log;
+    private Button btn_scan;
+    private Button btn_enable_bluetooth;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_monitor);
+        tv_log = findViewById(R.id.tv_log);
+        btn_scan = findViewById(R.id.btn_scan);
+        btn_enable_bluetooth = findViewById(R.id.btn_enable_bluetooth);
+        initUI();
+
+    }
+
+    private void initUI() {
+        if (bluetoothAvailable()) {
+            boolean bluetoothEnabled = bluetoothEnabled();
+            initBluetoothStatus(bluetoothEnabled);
+            updateSimulatorUI(bluetoothEnabled);
+        } else {
+            btn_scan.setEnabled(false);
+            btn_enable_bluetooth.setEnabled(false);
+            tv_log.setText(R.string.bluetooth_not_available);
+        }
+
+    }
+
+    private boolean bluetoothAvailable() {
+        return BluetoothAdapter.getDefaultAdapter() != null;
+    }
+
+    private void updateSimulatorUI(boolean bluetoothEnabled) {
+        btn_scan.setEnabled(bluetoothEnabled);
+        if (bluetoothEnabled) {
+            clear();
+            append(getString(R.string.scan_ready));
+        } else {
+            clear();
+            append(getString(R.string.scan_ready));
+        }
+    }
+
+    private void clear() {
+        tv_log.setText(null);
+    }
+
+    private void initBluetoothStatus(boolean bluetoothEnabled) {
+        if (bluetoothEnabled) {
+            btn_enable_bluetooth.setText(R.string.bluetooth_enabled);
+            btn_enable_bluetooth.setEnabled(false);
+            btn_enable_bluetooth.setVisibility(View.INVISIBLE);
+        } else {
+            btn_enable_bluetooth.setText(R.string.enable_bluetooth);
+            btn_enable_bluetooth.setEnabled(true);
+            btn_enable_bluetooth.setVisibility(View.VISIBLE);
+        }
+
+    }
+
+    private boolean bluetoothEnabled() {
+        BluetoothManager manager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
+        BluetoothAdapter bluetoothAdapter = manager.getAdapter();
+        return bluetoothAdapter.isEnabled();
+    }
+
+    private void enableBluetooth() {
+        Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
+        startActivityForResult(enableBtIntent, REQUEST_TURN_ON_BLUETOOTH);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch (requestCode) {
+            case REQUEST_TURN_ON_BLUETOOTH:
+                updateSimulatorUI(bluetoothEnabled());
+                break;
+            default:
+                super.onActivityResult(requestCode, resultCode, data);
+                break;
+        }
+    }
+
+
+    private void scanBeacon() {
+        BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+        beaconManager.addMonitorNotifier(this);
+        beaconManager.bind(this);
+    }
+
+    public void append(final String log) {
+        runOnUiThread(() -> tv_log.append(log));
+    }
+
+    public void toggleSimulate(View view) {
+        append("\nBegin to scan beacon.\n");
+        scanBeacon();
+    }
+
+
+    @Override
+    public void didEnterRegion(Region region) {
+        append("enter:" + region.getUniqueId() + "\n");
+    }
+
+    @Override
+    public void didExitRegion(Region region) {
+        append("exit:" + region.getUniqueId() + "\n");
+    }
+
+    @Override
+    public void didDetermineStateForRegion(int state, Region region) {
+
+    }
+
+    @Override
+    public void onBeaconServiceConnect() {
+        registerBeaconToBeMonitored(UuidProvider.regionToBeSimulated());
+    }
+
+    private void registerBeaconToBeMonitored(List<String> beacons) {
+        try {
+            BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
+            for (String beacon : beacons) {
+                append("monitor beacon : " + beacon + "\n");
+                beaconManager.startMonitoringBeaconsInRegion(UuidMapper.constructRegion(beacon));
+            }
+        } catch (RemoteException e) {
+            throw new RuntimeException(e);
+        }
+
+    }
+
+    public void enableBluetooth(View view) {
+        enableBluetooth();
+    }
+
+}
diff --git a/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/UuidMapper.java b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/UuidMapper.java
new file mode 100755
index 00000000..71058fa4
--- /dev/null
+++ b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/UuidMapper.java
@@ -0,0 +1,20 @@
+package org.altbeacon.beacon.demo.monitor;
+
+import org.altbeacon.beacon.Identifier;
+import org.altbeacon.beacon.Region;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UuidMapper {
+
+    public static Region constructRegion(String uuid) {
+        String[] parts = uuid.split(":");
+        List<Identifier> identifierList = new ArrayList<>();
+        identifierList.add(Identifier.parse(parts[0]));
+        identifierList.add(Identifier.parse(parts[1]));
+        identifierList.add(Identifier.parse(parts[2]));
+        return new Region(uuid, identifierList);
+    }
+
+}
\ No newline at end of file
diff --git a/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/UuidProvider.java b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/UuidProvider.java
new file mode 100755
index 00000000..43e0fe89
--- /dev/null
+++ b/1_monitor/src/main/java/org/altbeacon/beacon/demo/monitor/UuidProvider.java
@@ -0,0 +1,18 @@
+package org.altbeacon.beacon.demo.monitor;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class UuidProvider {
+
+    /**
+     * define the beacon that you want to scan.
+     *
+     * @return the list of beacon that you would like to scan.
+     */
+    public static List<String> regionToBeSimulated() {
+        List<String> result = new ArrayList<>();
+        result.add("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A:1:1");
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/1_monitor/src/main/res/drawable-hdpi/ic_launcher.png b/1_monitor/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100755
index 00000000..96a442e5
Binary files /dev/null and b/1_monitor/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/1_monitor/src/main/res/drawable-mdpi/ic_launcher.png b/1_monitor/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100755
index 00000000..359047df
Binary files /dev/null and b/1_monitor/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/1_monitor/src/main/res/drawable-xhdpi/ic_launcher.png b/1_monitor/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100755
index 00000000..71c6d760
Binary files /dev/null and b/1_monitor/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/1_monitor/src/main/res/layout/activity_monitor.xml b/1_monitor/src/main/res/layout/activity_monitor.xml
new file mode 100755
index 00000000..017891a9
--- /dev/null
+++ b/1_monitor/src/main/res/layout/activity_monitor.xml
@@ -0,0 +1,39 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical"
+              android:padding="16dp">
+
+    <TextView
+        android:id="@+id/tv_log"
+        android:layout_width="wrap_content"
+        android:layout_height="0dp"
+        android:layout_weight="1"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <Button
+            android:id="@+id/btn_scan"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="toggleSimulate"
+            android:text="@string/scan"
+            tools:ignore="ButtonStyle"/>
+
+        <Button
+            android:id="@+id/btn_enable_bluetooth"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="enableBluetooth"
+            android:text="@string/enable_bluetooth"
+            tools:ignore="ButtonStyle"/>
+    </LinearLayout>
+
+
+</LinearLayout>
diff --git a/1_monitor/src/main/res/values/strings.xml b/1_monitor/src/main/res/values/strings.xml
new file mode 100755
index 00000000..f928e2c1
--- /dev/null
+++ b/1_monitor/src/main/res/values/strings.xml
@@ -0,0 +1,10 @@
+<resources>
+
+    <string name="app_name">Beacon Monitor Demo</string>
+    <string name="scan_ready">Press scan button to scan beacon\n</string>
+    <string name="scan_not_ready">Press button to enable Bluetooth\n</string>
+    <string name="scan">Scan</string>
+    <string name="enable_bluetooth">Enable Bluetooth</string>
+    <string name="bluetooth_enabled">Bluetooth Enabled</string>
+    <string name="bluetooth_not_available">Bluetooth Not Available. Please use a real device.</string>
+</resources>
diff --git a/1_monitor/src/main/res/values/styles.xml b/1_monitor/src/main/res/values/styles.xml
new file mode 100755
index 00000000..9486e57d
--- /dev/null
+++ b/1_monitor/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
diff --git a/settings.gradle b/settings.gradle
index 901a2d73..a86fb497 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,5 +1,6 @@
 if (enableLib == 'true') {
     include ':lib'
 }
+include ':1_monitor'
 include ':simulator'
 include ':app'
\ No newline at end of file
diff --git a/simulator/src/main/res/values/strings.xml b/simulator/src/main/res/values/strings.xml
index 5a8f8ced..76fe56f6 100755
--- a/simulator/src/main/res/values/strings.xml
+++ b/simulator/src/main/res/values/strings.xml
@@ -6,5 +6,5 @@
     <string name="bluetooth_enabled">Bluetooth Enabled</string>
     <string name="ready_to_simulate_beacon">\nUuid has been registered. It is ready to simulate the beacon signal.\n</string>
     <string name="pending_exit_event">\n\nAll simulated beacon Enter event is emitted. It is waiting Exit event now for around 10 seconds. You need to restart the app to simulate it again.\n\n</string>
-    <string name="bluetooth_not_available">Bluetooth Not Available. I know it sounds ironic, but emulator does NOT support Simulator. Please use a real device.</string>
+    <string name="bluetooth_not_available">Bluetooth Not Available. I know it sounds ironic, but emulator does NOT support Simulator sample. Please use a real device.</string>
 </resources>
