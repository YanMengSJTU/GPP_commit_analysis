diff --git a/src/main/java/org/altbeacon/beacon/BeaconManager.java b/src/main/java/org/altbeacon/beacon/BeaconManager.java
index 7d32dd9c..c487dcd7 100644
--- a/src/main/java/org/altbeacon/beacon/BeaconManager.java
+++ b/src/main/java/org/altbeacon/beacon/BeaconManager.java
@@ -181,6 +181,9 @@ public static void setDebug(boolean debug) {
     private long backgroundScanPeriod = DEFAULT_BACKGROUND_SCAN_PERIOD;
     private long backgroundBetweenScanPeriod = DEFAULT_BACKGROUND_BETWEEN_SCAN_PERIOD;
 
+    private boolean backgroundRangeMidScan = false;
+    private boolean foregroundRangeMidScan = false;
+
     private long backgroundRangeUpdatePeriod = DEFAULT_BACKGROUND_RANGE_UPDATE_PERIOD;
     private long backgroundBetweenRangeUpdatePeriod = DEFAULT_BACKGROUND_BETWEEN_RANGE_UPDATE_PERIOD;
     private long foregroundRangeUpdatePeriod = DEFAULT_FOREGROUND_RANGE_UPDATE_PERIOD;
@@ -195,6 +198,7 @@ public static void setDebug(boolean debug) {
      * @param p
      */
     public void setForegroundScanPeriod(long p) {
+        foregroundRangeMidScan = true;
         foregroundScanPeriod = p;
     }
 
@@ -219,6 +223,7 @@ public void setForegroundBetweenScanPeriod(long p) {
      * @param p
      */
     public void setBackgroundScanPeriod(long p) {
+        backgroundRangeMidScan = true;
         backgroundScanPeriod = p;
     }
 
@@ -243,7 +248,7 @@ public void setForegroundRangeUpdatePeriod(long p) {
         foregroundRangeUpdatePeriod = p;
     }
 
-    public void setForgroundBetweenRangeUpdatePeriod(long p) {
+    public void setForegroundBetweenRangeUpdatePeriod(long p) {
         foregroundRangeUpdatePeriod = p;
     }
 
@@ -648,7 +653,13 @@ public void startRangingBeaconsInRegion(Region region) throws RemoteException {
             throw new RemoteException("The BeaconManager is not bound to the service.  Call beaconManager.bind(BeaconConsumer consumer) and wait for a callback to onBeaconServiceConnect()");
         }
         Message msg = Message.obtain(null, BeaconService.MSG_START_RANGING, 0, 0);
-        StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        StartRMData obj;
+        if (this.isRangeUpdateMidCycle()) {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        }
+        else {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
+        }
         msg.obj = obj;
         serviceMessenger.send(msg);
         synchronized (rangedRegions) {
@@ -676,7 +687,13 @@ public void stopRangingBeaconsInRegion(Region region) throws RemoteException {
             throw new RemoteException("The BeaconManager is not bound to the service.  Call beaconManager.bind(BeaconConsumer consumer) and wait for a callback to onBeaconServiceConnect()");
         }
         Message msg = Message.obtain(null, BeaconService.MSG_STOP_RANGING, 0, 0);
-        StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        StartRMData obj;
+        if (this.isRangeUpdateMidCycle()) {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        }
+        else {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
+        }
         msg.obj = obj;
         serviceMessenger.send(msg);
         synchronized (rangedRegions) {
@@ -739,7 +756,13 @@ public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException
             throw new RemoteException("The BeaconManager is not bound to the service.  Call beaconManager.bind(BeaconConsumer consumer) and wait for a callback to onBeaconServiceConnect()");
         }
         Message msg = Message.obtain(null, BeaconService.MSG_STOP_MONITORING, 0, 0);
-        StartRMData obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        StartRMData obj;
+        if (this.isRangeUpdateMidCycle()) {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        }
+        else {
+            obj = new StartRMData(region, callbackPackageName(), this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
+        }
         msg.obj = obj;
         serviceMessenger.send(msg);
     }
@@ -763,7 +786,14 @@ public void updateScanPeriods() throws RemoteException {
         Message msg = Message.obtain(null, BeaconService.MSG_SET_SCAN_PERIODS, 0, 0);
         LogManager.d(TAG, "updating background flag to %s", mBackgroundMode);
         LogManager.d(TAG, "updating scan period to %s, %s", this.getScanPeriod(), this.getBetweenScanPeriod());
-        StartRMData obj = new StartRMData(this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        StartRMData obj;
+        if (this.isRangeUpdateMidCycle()) {
+            obj = new StartRMData(this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode, this.getRangeUpdatePeriod(), this.getBetweenRangeUpdatePeriod());
+        }
+        else
+        {
+            obj = new StartRMData(this.getScanPeriod(), this.getBetweenScanPeriod(), this.mBackgroundMode);
+        }
         msg.obj = obj;
         serviceMessenger.send(msg);
     }
@@ -943,6 +973,15 @@ private long getBetweenScanPeriod() {
         }
     }
 
+    private boolean isRangeUpdateMidCycle() {
+        if(mBackgroundMode) {
+            return backgroundRangeMidScan;
+        }
+        else {
+            return foregroundRangeMidScan;
+        }
+    }
+
     private long getRangeUpdatePeriod() {
         if(mBackgroundMode) {
             return backgroundRangeUpdatePeriod;
diff --git a/src/main/java/org/altbeacon/beacon/service/BeaconService.java b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
index 3038f4c2..c640fbf0 100644
--- a/src/main/java/org/altbeacon/beacon/service/BeaconService.java
+++ b/src/main/java/org/altbeacon/beacon/service/BeaconService.java
@@ -155,30 +155,40 @@ public void handleMessage(Message msg) {
                         LogManager.i(TAG, "start ranging received");
                         service.startRangingBeaconsInRegion(startRMData.getRegionData(), new org.altbeacon.beacon.service.Callback(startRMData.getCallbackPackageName()));
                         service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        if(startRMData.hasMidCycleRangeUpdates()) {
+                            service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        }
                         break;
                     case MSG_STOP_RANGING:
                         LogManager.i(TAG, "stop ranging received");
                         service.stopRangingBeaconsInRegion(startRMData.getRegionData());
                         service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        if(startRMData.hasMidCycleRangeUpdates()) {
+                            service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        }
                         break;
                     case MSG_START_MONITORING:
                         LogManager.i(TAG, "start monitoring received");
                         service.startMonitoringBeaconsInRegion(startRMData.getRegionData(), new org.altbeacon.beacon.service.Callback(startRMData.getCallbackPackageName()));
                         service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        if(startRMData.hasMidCycleRangeUpdates()) {
+                            service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        }
                         break;
                     case MSG_STOP_MONITORING:
                         LogManager.i(TAG, "stop monitoring received");
                         service.stopMonitoringBeaconsInRegion(startRMData.getRegionData());
                         service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        if(startRMData.hasMidCycleRangeUpdates()) {
+                            service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        }
                         break;
                     case MSG_SET_SCAN_PERIODS:
                         LogManager.i(TAG, "set scan intervals received");
                         service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod(), startRMData.getBackgroundFlag());
-                        service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        if(startRMData.hasMidCycleRangeUpdates()) {
+                            service.setRangeUpdatePeriods(startRMData.getRangeUpdatePeriod(), startRMData.getBetweenRangeUpdatePeriod());
+                        }
                         break;
                     default:
                         super.handleMessage(msg);
diff --git a/src/main/java/org/altbeacon/beacon/service/StartRMData.java b/src/main/java/org/altbeacon/beacon/service/StartRMData.java
index 72952dae..aa697b4e 100644
--- a/src/main/java/org/altbeacon/beacon/service/StartRMData.java
+++ b/src/main/java/org/altbeacon/beacon/service/StartRMData.java
@@ -34,6 +34,7 @@
     private Region region;
     private long scanPeriod;
     private long betweenScanPeriod;
+    private boolean hasMidCycleRangUpdate;
     private long rangeUpdatePeriod;
     private long betweenRangeUpdatePeriod;
     private boolean backgroundFlag;
@@ -43,20 +44,42 @@ public StartRMData(Region region, String callbackPackageName) {
         this.region = region;
         this.callbackPackageName = callbackPackageName;
     }
+    public StartRMData(long scanPeriod, long betweenScanPeriod, boolean backgroundFlag) {
+        this.scanPeriod = scanPeriod;
+        this.betweenScanPeriod = betweenScanPeriod;
+        this.backgroundFlag = backgroundFlag;
+
+        this.hasMidCycleRangUpdate = false;
+    }
+
     public StartRMData(long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, long rangeUpdatePeriod, long betweenRangeUpdatePeriod) {
         this.scanPeriod = scanPeriod;
         this.betweenScanPeriod = betweenScanPeriod;
         this.backgroundFlag = backgroundFlag;
+
+        this.hasMidCycleRangUpdate = true;
         this.rangeUpdatePeriod = rangeUpdatePeriod;
         this.betweenRangeUpdatePeriod = betweenRangeUpdatePeriod;
     }
 
+    public StartRMData(Region region, String callbackPackageName, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag) {
+        this.scanPeriod = scanPeriod;
+        this.betweenScanPeriod = betweenScanPeriod;
+        this.region = region;
+        this.callbackPackageName = callbackPackageName;
+        this.backgroundFlag = backgroundFlag;
+
+        this.hasMidCycleRangUpdate = false;
+    }
+
     public StartRMData(Region region, String callbackPackageName, long scanPeriod, long betweenScanPeriod, boolean backgroundFlag, long rangeUpdatePeriod, long betweenRangeUpdatePeriod) {
         this.scanPeriod = scanPeriod;
         this.betweenScanPeriod = betweenScanPeriod;
         this.region = region;
         this.callbackPackageName = callbackPackageName;
         this.backgroundFlag = backgroundFlag;
+
+        this.hasMidCycleRangUpdate = true;
         this.rangeUpdatePeriod = rangeUpdatePeriod;
         this.betweenRangeUpdatePeriod = betweenRangeUpdatePeriod;
     }
@@ -65,6 +88,7 @@ public StartRMData(Region region, String callbackPackageName, long scanPeriod, l
 
     public long getScanPeriod() { return scanPeriod; }
     public long getBetweenScanPeriod() { return betweenScanPeriod; }
+    public boolean hasMidCycleRangeUpdates() { return hasMidCycleRangUpdate; }
     public long getRangeUpdatePeriod() { return rangeUpdatePeriod; }
     public long getBetweenRangeUpdatePeriod() {return betweenRangeUpdatePeriod;}
     public Region getRegionData() {
@@ -84,6 +108,7 @@ public void writeToParcel(Parcel out, int flags) {
         out.writeLong(scanPeriod);
         out.writeLong(betweenScanPeriod);
         out.writeByte((byte) (backgroundFlag ? 1 : 0));
+        out.writeByte((byte) (hasMidCycleRangUpdate ? 1 : 0));
         out.writeLong(rangeUpdatePeriod);
         out.writeLong(betweenRangeUpdatePeriod);
     }
@@ -105,6 +130,7 @@ private StartRMData(Parcel in) {
         scanPeriod = in.readLong();
         betweenScanPeriod = in.readLong();
         backgroundFlag = in.readByte() != 0;
+        hasMidCycleRangUpdate = in.readByte() != 0;
         rangeUpdatePeriod = in.readLong();
         betweenRangeUpdatePeriod = in.readLong();
     }
diff --git a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
index 3d83890f..cfcd44f8 100644
--- a/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
+++ b/src/main/java/org/altbeacon/beacon/service/scanner/CycledLeScanner.java
@@ -34,7 +34,7 @@
     private long mScanCycleStopTime = 0l;
     private long mLastScanStopTime = 0l;
 
-
+    private boolean mIsMidScanRangeUpdate = false;
     private long mRangeCycleUpdateTime = 0l;
 
     private boolean mScanning;
@@ -43,7 +43,7 @@
     private boolean mScanningEnabled = false;
     protected final Context mContext;
     private long mScanPeriod;
-    private long mScanRangeUpdatePeriod;
+    private long mMidScanRangeUpdatePeriod;
 
     protected long mBetweenScanPeriod;
 
@@ -101,7 +101,8 @@ public static CycledLeScanner createScanner(Context context, long scanPeriod, lo
     }
 
     public void setRangeUpdatePeriods(long rangeUpdatePeriod, long betweenRangeUpdate) {
-        mScanRangeUpdatePeriod = rangeUpdatePeriod;
+        mIsMidScanRangeUpdate = true;
+        mMidScanRangeUpdatePeriod = rangeUpdatePeriod;
     }
 
     /**
@@ -234,9 +235,11 @@ protected void scanLeDevice(final Boolean enable) {
                     LogManager.d(TAG, "We are already scanning");
                 }
                 mScanCycleStopTime = (SystemClock.elapsedRealtime() + mScanPeriod);
-                mRangeCycleUpdateTime = (SystemClock.elapsedRealtime() + mScanRangeUpdatePeriod);
+                mRangeCycleUpdateTime = (SystemClock.elapsedRealtime() + mMidScanRangeUpdatePeriod);
                 scheduleScanCycleStop();
-                scheduleCycleRangeUpdate();
+                if(mIsMidScanRangeUpdate == true) {
+                    scheduleCycleRangeUpdate();
+                }
 
                 LogManager.d(TAG, "Scan started");
             } else {
@@ -265,7 +268,7 @@ public void run() {
         }
         else {
             mCycledLeScanCallback.onMidScanRange();
-            mRangeCycleUpdateTime = (SystemClock.elapsedRealtime() + mScanRangeUpdatePeriod);
+            mRangeCycleUpdateTime = (SystemClock.elapsedRealtime() + mMidScanRangeUpdatePeriod);
             scheduleCycleRangeUpdate();
         }
     }
