diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 20f603bc..3ed10370 100755
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -1,33 +1,37 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    package="org.altbeacon.beaconreference"
-    android:versionCode="1"
-    android:versionName="1.0" >
+          xmlns:tools="http://schemas.android.com/tools"
+          package="org.altbeacon.beaconreference"
+          android:versionCode="1"
+          android:versionName="1.0">
 
     <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
     <uses-permission android:name="android.permission.INTERNET"/>
+
     <application
+        android:name="BeaconReferenceApplication"
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
-        android:theme="@style/AppTheme" 
-        android:name="BeaconReferenceApplication">
+        android:theme="@style/AppTheme">
         <activity
             android:name="org.altbeacon.beaconreference.MonitoringActivity"
-            android:label="@string/app_name" >
+            android:label="@string/app_name">
             <intent-filter>
-				<action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
             </intent-filter>
         </activity>
         <activity
             android:name="org.altbeacon.beaconreference.RangingActivity"
-            android:label="@string/app_name" >
+            android:label="@string/app_name">
         </activity>
         <!-- uncomment the following to enable scanning for over 30 minutes on Android 7+ -->
-        <service android:name="org.altbeacon.beacon.service.BeaconService"
+        <service
+            android:name="org.altbeacon.beacon.service.BeaconService"
             tools:node="replace">
-            <meta-data android:name="longScanForcingEnabled" android:value="true"/>
+            <meta-data
+                android:name="longScanForcingEnabled"
+                android:value="true"/>
         </service>
     </application>
 
diff --git a/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java b/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
index 617a637d..af210f8a 100755
--- a/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
+++ b/app/src/main/java/org/altbeacon/beacon/TimedBeaconSimulator.java
@@ -6,51 +6,47 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import android.util.Log;
-
-import org.altbeacon.beacon.Beacon;
-
 /**
  * Created by Matt Tyler on 4/18/14.
  */
 public class TimedBeaconSimulator implements org.altbeacon.beacon.simulator.BeaconSimulator {
-	protected static final String TAG = "TimedBeaconSimulator";
-	private List<Beacon> beacons;
+    protected static final String TAG = "TimedBeaconSimulator";
+    /*
+     * You may simulate detection of beacons by creating a class like this in your project.
+     * This is especially useful for when you are testing in an Emulator or on a device without BluetoothLE capability.
+     *
+     * Uncomment the lines in BeaconReferenceApplication starting with:
+     *     // If you wish to test beacon detection in the Android Emulator, you can use code like this:
+     * Then set USE_SIMULATED_BEACONS = true to initialize the sample code in this class.
+     * If using a Bluetooth incapable test device (i.e. Emulator), you will want to comment
+     * out the verifyBluetooth() in MonitoringActivity.java as well.
+     *
+     * Any simulated beacons will automatically be ignored when building for production.
+     */
+    public boolean USE_SIMULATED_BEACONS = false;
+    private List<Beacon> beacons;
+    private ScheduledExecutorService scheduleTaskExecutor;
+
+    /**
+     * Creates empty beacons ArrayList.
+     */
+    public TimedBeaconSimulator() {
+        beacons = new ArrayList<Beacon>();
+    }
 
-	/*
-	 * You may simulate detection of beacons by creating a class like this in your project.
-	 * This is especially useful for when you are testing in an Emulator or on a device without BluetoothLE capability.
-	 * 
-	 * Uncomment the lines in BeaconReferenceApplication starting with:
-	 *     // If you wish to test beacon detection in the Android Emulator, you can use code like this:
-	 * Then set USE_SIMULATED_BEACONS = true to initialize the sample code in this class.
-	 * If using a Bluetooth incapable test device (i.e. Emulator), you will want to comment
-	 * out the verifyBluetooth() in MonitoringActivity.java as well.
-	 * 
-	 * Any simulated beacons will automatically be ignored when building for production.
-	 */
-	public boolean USE_SIMULATED_BEACONS = false;
+    /**
+     * Required getter method that is called regularly by the Android Beacon Library.
+     * Any beacons returned by this method will appear within your test environment immediately.
+     */
+    public List<Beacon> getBeacons() {
+        return beacons;
+    }
 
-	/**
-	 *  Creates empty beacons ArrayList.
-	 */
-	public TimedBeaconSimulator(){
-		beacons = new ArrayList<Beacon>();
-	}
-	
-	/**
-	 * Required getter method that is called regularly by the Android Beacon Library.
-	 * Any beacons returned by this method will appear within your test environment immediately.
-	 */
-	public List<Beacon> getBeacons(){
-		return beacons;
-	}
-	
-	/**
-	 * Creates simulated beacons all at once.
-	 */
-	public void createBasicSimulatedBeacons(){
-		if (USE_SIMULATED_BEACONS) {
+    /**
+     * Creates simulated beacons all at once.
+     */
+    public void createBasicSimulatedBeacons() {
+        if (USE_SIMULATED_BEACONS) {
             Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
                     .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
             Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
@@ -59,25 +55,21 @@ public void createBasicSimulatedBeacons(){
                     .setId2("1").setId3("3").setRssi(-55).setTxPower(-55).build();
             Beacon beacon4 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
                     .setId2("1").setId3("4").setRssi(-55).setTxPower(-55).build();
-			beacons.add(beacon1);
-			beacons.add(beacon2);
-			beacons.add(beacon3);
-			beacons.add(beacon4);
+            beacons.add(beacon1);
+            beacons.add(beacon2);
+            beacons.add(beacon3);
+            beacons.add(beacon4);
 
 
-		}
-	}
-	
-	
-	private ScheduledExecutorService scheduleTaskExecutor;
+        }
+    }
 
-
-	/**
-	 * Simulates a new beacon every 10 seconds until it runs out of new ones to add.
-	 */
-	public void createTimedSimulatedBeacons(){
-		if (USE_SIMULATED_BEACONS){
-			beacons = new ArrayList<Beacon>();
+    /**
+     * Simulates a new beacon every 10 seconds until it runs out of new ones to add.
+     */
+    public void createTimedSimulatedBeacons() {
+        if (USE_SIMULATED_BEACONS) {
+            beacons = new ArrayList<Beacon>();
             Beacon beacon1 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
                     .setId2("1").setId3("1").setRssi(-55).setTxPower(-55).build();
             Beacon beacon2 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
@@ -86,35 +78,35 @@ public void createTimedSimulatedBeacons(){
                     .setId2("1").setId3("3").setRssi(-55).setTxPower(-55).build();
             Beacon beacon4 = new AltBeacon.Builder().setId1("DF7E1C79-43E9-44FF-886F-1D1F7DA6997A")
                     .setId2("1").setId3("4").setRssi(-55).setTxPower(-55).build();
-			beacons.add(beacon1);
-			beacons.add(beacon2);
-			beacons.add(beacon3);
-			beacons.add(beacon4);
-			
-			final List<Beacon> finalBeacons = new ArrayList<Beacon>(beacons);
+            beacons.add(beacon1);
+            beacons.add(beacon2);
+            beacons.add(beacon3);
+            beacons.add(beacon4);
+
+            final List<Beacon> finalBeacons = new ArrayList<Beacon>(beacons);
+
+            //Clearing beacons list to prevent all beacons from appearing immediately.
+            //These will be added back into the beacons list from finalBeacons later.
+            beacons.clear();
 
-			//Clearing beacons list to prevent all beacons from appearing immediately.
-			//These will be added back into the beacons list from finalBeacons later.
-			beacons.clear();
+            scheduleTaskExecutor = Executors.newScheduledThreadPool(5);
 
-			scheduleTaskExecutor= Executors.newScheduledThreadPool(5);
+            // This schedules an beacon to appear every 10 seconds:
+            scheduleTaskExecutor.scheduleAtFixedRate(new Runnable() {
+                public void run() {
+                    try {
+                        //putting a single beacon back into the beacons list.
+                        if (finalBeacons.size() > beacons.size())
+                            beacons.add(finalBeacons.get(beacons.size()));
+                        else
+                            scheduleTaskExecutor.shutdown();
 
-			// This schedules an beacon to appear every 10 seconds:
-			scheduleTaskExecutor.scheduleAtFixedRate(new Runnable() {
-				public void run() {
-					try{
-						//putting a single beacon back into the beacons list.
-						if (finalBeacons.size() > beacons.size())
-							beacons.add(finalBeacons.get(beacons.size()));
-						else 
-							scheduleTaskExecutor.shutdown();
-						
-					}catch(Exception e){
-						e.printStackTrace();
-					}
-				}
-			}, 0, 10, TimeUnit.SECONDS);
-		} 
-	}
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                }
+            }, 0, 10, TimeUnit.SECONDS);
+        }
+    }
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
index f7aa5a29..36606d13 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/BeaconReferenceApplication.java
@@ -1,23 +1,19 @@
 package org.altbeacon.beaconreference;
 
 import android.app.Application;
-import android.app.Notification;
-import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.TaskStackBuilder;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Build;
 import android.support.v4.app.NotificationCompat;
 import android.util.Log;
 
 import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.BeaconParser;
 import org.altbeacon.beacon.Region;
 import org.altbeacon.beacon.powersave.BackgroundPowerSaver;
-import org.altbeacon.beacon.startup.RegionBootstrap;
 import org.altbeacon.beacon.startup.BootstrapNotifier;
+import org.altbeacon.beacon.startup.RegionBootstrap;
 
 /**
  * Created by dyoung on 12/13/13.
@@ -105,6 +101,7 @@ public void disableMonitoring() {
             regionBootstrap = null;
         }
     }
+
     public void enableMonitoring() {
         Region region = new Region("backgroundRegion",
                 null, null, null);
@@ -133,7 +130,7 @@ public void didEnterRegion(Region arg0) {
             if (monitoringActivity != null) {
                 // If the Monitoring Activity is visible, we log info about the beacons we have
                 // seen on its display
-                logToDisplay("I see a beacon again" );
+                logToDisplay("I see a beacon again");
             } else {
                 // If we have already seen beacons before, but the monitoring activity is not in
                 // the foreground, we send a notification to the user on subsequent detections.
@@ -152,7 +149,7 @@ public void didExitRegion(Region region) {
 
     @Override
     public void didDetermineStateForRegion(int state, Region region) {
-        logToDisplay("Current region state is: " + (state == 1 ? "INSIDE" : "OUTSIDE ("+state+")"));
+        logToDisplay("Current region state is: " + (state == 1 ? "INSIDE" : "OUTSIDE (" + state + ")"));
     }
 
     private void sendNotification() {
diff --git a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
index 08395aae..70e3ac55 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/MonitoringActivity.java
@@ -16,21 +16,20 @@
 import org.altbeacon.beacon.BeaconManager;
 
 /**
- * 
  * @author dyoung
  * @author Matt Tyler
  */
 public class MonitoringActivity extends android.support.v7.app.AppCompatActivity {
-	protected static final String TAG = "MonitoringActivity";
-	private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
+    protected static final String TAG = "MonitoringActivity";
+    private static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
 
 
-	@Override
-	protected void onCreate(Bundle savedInstanceState) {
-		Log.d(TAG, "onCreate");
-		super.onCreate(savedInstanceState);
-		setContentView(R.layout.activity_monitoring);
-		verifyBluetooth();
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        Log.d(TAG, "onCreate");
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_monitoring);
+        verifyBluetooth();
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             // Android M Permission check
@@ -52,50 +51,50 @@ public void onDismiss(DialogInterface dialog) {
                 builder.show();
             }
         }
-	}
-
-	@Override
-	public void onRequestPermissionsResult(int requestCode,
-										   String permissions[], int[] grantResults) {
-		switch (requestCode) {
-			case PERMISSION_REQUEST_COARSE_LOCATION: {
-				if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-					Log.d(TAG, "coarse location permission granted");
-				} else {
-					final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-					builder.setTitle("Functionality limited");
-					builder.setMessage("Since location access has not been granted, this app will not be able to discover beacons when in the background.");
-					builder.setPositiveButton(android.R.string.ok, null);
-					builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-
-						@Override
-						public void onDismiss(DialogInterface dialog) {
-						}
-
-					});
-					builder.show();
-				}
-				return;
-			}
-		}
-	}
-
-	public void onRangingClicked(View view) {
-		Intent myIntent = new Intent(this, RangingActivity.class);
-		this.startActivity(myIntent);
-	}
-	public void onEnableClicked(View view) {
-		BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
-		if (BeaconManager.getInstanceForApplication(this).getMonitoredRegions().size() > 0) {
-			application.disableMonitoring();
-			((Button)findViewById(R.id.enableButton)).setText("Re-Enable Monitoring");
-		}
-		else {
-			((Button)findViewById(R.id.enableButton)).setText("Disable Monitoring");
-			application.enableMonitoring();
-		}
-
-	}
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode,
+                                           String permissions[], int[] grantResults) {
+        switch (requestCode) {
+            case PERMISSION_REQUEST_COARSE_LOCATION: {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    Log.d(TAG, "coarse location permission granted");
+                } else {
+                    final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                    builder.setTitle("Functionality limited");
+                    builder.setMessage("Since location access has not been granted, this app will not be able to discover beacons when in the background.");
+                    builder.setPositiveButton(android.R.string.ok, null);
+                    builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+
+                        @Override
+                        public void onDismiss(DialogInterface dialog) {
+                        }
+
+                    });
+                    builder.show();
+                }
+                return;
+            }
+        }
+    }
+
+    public void onRangingClicked(View view) {
+        Intent myIntent = new Intent(this, RangingActivity.class);
+        this.startActivity(myIntent);
+    }
+
+    public void onEnableClicked(View view) {
+        BeaconReferenceApplication application = ((BeaconReferenceApplication) this.getApplicationContext());
+        if (BeaconManager.getInstanceForApplication(this).getMonitoredRegions().size() > 0) {
+            application.disableMonitoring();
+            ((Button) findViewById(R.id.enableButton)).setText("Re-Enable Monitoring");
+        } else {
+            ((Button) findViewById(R.id.enableButton)).setText("Disable Monitoring");
+            application.enableMonitoring();
+        }
+
+    }
 
     @Override
     public void onResume() {
@@ -111,52 +110,51 @@ public void onPause() {
         ((BeaconReferenceApplication) this.getApplicationContext()).setMonitoringActivity(null);
     }
 
-	private void verifyBluetooth() {
-
-		try {
-			if (!BeaconManager.getInstanceForApplication(this).checkAvailability()) {
-				final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-				builder.setTitle("Bluetooth not enabled");			
-				builder.setMessage("Please enable bluetooth in settings and restart this application.");
-				builder.setPositiveButton(android.R.string.ok, null);
-				builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-					@Override
-					public void onDismiss(DialogInterface dialog) {
-						//finish();
-			            //System.exit(0);
-					}					
-				});
-				builder.show();
-			}			
-		}
-		catch (RuntimeException e) {
-			final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-			builder.setTitle("Bluetooth LE not available");			
-			builder.setMessage("Sorry, this device does not support Bluetooth LE.");
-			builder.setPositiveButton(android.R.string.ok, null);
-			builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
-
-				@Override
-				public void onDismiss(DialogInterface dialog) {
-					//finish();
-		            //System.exit(0);
-				}
-				
-			});
-			builder.show();
-			
-		}
-		
-	}	
+    private void verifyBluetooth() {
+
+        try {
+            if (!BeaconManager.getInstanceForApplication(this).checkAvailability()) {
+                final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                builder.setTitle("Bluetooth not enabled");
+                builder.setMessage("Please enable bluetooth in settings and restart this application.");
+                builder.setPositiveButton(android.R.string.ok, null);
+                builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+                    @Override
+                    public void onDismiss(DialogInterface dialog) {
+                        //finish();
+                        //System.exit(0);
+                    }
+                });
+                builder.show();
+            }
+        } catch (RuntimeException e) {
+            final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setTitle("Bluetooth LE not available");
+            builder.setMessage("Sorry, this device does not support Bluetooth LE.");
+            builder.setPositiveButton(android.R.string.ok, null);
+            builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
+
+                @Override
+                public void onDismiss(DialogInterface dialog) {
+                    //finish();
+                    //System.exit(0);
+                }
+
+            });
+            builder.show();
+
+        }
+
+    }
 
     public void updateLog(final String log) {
-    	runOnUiThread(new Runnable() {
-    	    public void run() {
-    	    	EditText editText = (EditText)MonitoringActivity.this
-    					.findViewById(R.id.monitoringText);
-       	    	editText.setText(log);
-    	    }
-    	});
+        runOnUiThread(new Runnable() {
+            public void run() {
+                EditText editText = (EditText) MonitoringActivity.this
+                        .findViewById(R.id.monitoringText);
+                editText.setText(log);
+            }
+        });
     }
 
 }
diff --git a/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java b/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
index a61f6803..bebb77a2 100755
--- a/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
+++ b/app/src/main/java/org/altbeacon/beaconreference/RangingActivity.java
@@ -1,22 +1,18 @@
 package org.altbeacon.beaconreference;
 
-import java.util.Collection;
-
-import android.app.Activity;
-
 import android.os.Bundle;
 import android.os.RemoteException;
 import android.util.Log;
 import android.widget.EditText;
 
-import org.altbeacon.beacon.AltBeacon;
 import org.altbeacon.beacon.Beacon;
 import org.altbeacon.beacon.BeaconConsumer;
 import org.altbeacon.beacon.BeaconManager;
-import org.altbeacon.beacon.BeaconParser;
 import org.altbeacon.beacon.RangeNotifier;
 import org.altbeacon.beacon.Region;
 
+import java.util.Collection;
+
 public class RangingActivity extends android.support.v7.app.AppCompatActivity implements BeaconConsumer {
     protected static final String TAG = "RangingActivity";
     private BeaconManager beaconManager = BeaconManager.getInstanceForApplication(this);
@@ -27,18 +23,18 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_ranging);
     }
 
-    @Override 
+    @Override
     protected void onDestroy() {
         super.onDestroy();
     }
 
-    @Override 
+    @Override
     protected void onPause() {
         super.onPause();
         beaconManager.unbind(this);
     }
 
-    @Override 
+    @Override
     protected void onResume() {
         super.onResume();
         beaconManager.bind(this);
@@ -48,14 +44,14 @@ protected void onResume() {
     public void onBeaconServiceConnect() {
 
         RangeNotifier rangeNotifier = new RangeNotifier() {
-           @Override
-           public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
-              if (beacons.size() > 0) {
-                  Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  "+beacons.size());
-                  Beacon firstBeacon = beacons.iterator().next();
-                  logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
-              }
-           }
+            @Override
+            public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
+                if (beacons.size() > 0) {
+                    Log.d(TAG, "didRangeBeaconsInRegion called with beacon count:  " + beacons.size());
+                    Beacon firstBeacon = beacons.iterator().next();
+                    logToDisplay("The first beacon " + firstBeacon.toString() + " is about " + firstBeacon.getDistance() + " meters away.");
+                }
+            }
 
         };
         try {
@@ -63,14 +59,15 @@ public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
             beaconManager.addRangeNotifier(rangeNotifier);
             beaconManager.startRangingBeaconsInRegion(new Region("myRangingUniqueId", null, null, null));
             beaconManager.addRangeNotifier(rangeNotifier);
-        } catch (RemoteException e) {   }
+        } catch (RemoteException e) {
+        }
     }
 
     private void logToDisplay(final String line) {
         runOnUiThread(new Runnable() {
             public void run() {
-                EditText editText = (EditText)RangingActivity.this.findViewById(R.id.rangingText);
-                editText.append(line+"\n");
+                EditText editText = (EditText) RangingActivity.this.findViewById(R.id.rangingText);
+                editText.append(line + "\n");
             }
         });
     }
diff --git a/app/src/main/res/layout/activity_monitoring.xml b/app/src/main/res/layout/activity_monitoring.xml
index 2b53291b..de89d59a 100755
--- a/app/src/main/res/layout/activity_monitoring.xml
+++ b/app/src/main/res/layout/activity_monitoring.xml
@@ -1,8 +1,9 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    tools:context=".MonitoringActivity" >
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                tools:context=".MonitoringActivity">
+
     <TextView
         android:id="@+id/textView1"
         android:layout_width="wrap_content"
@@ -10,36 +11,37 @@
         android:layout_alignParentLeft="true"
         android:layout_alignParentTop="true"
         android:layout_marginTop="17dp"
-        android:text="Monitoring Events:" />
+        android:text="Monitoring Events:"/>
 
     <EditText
         android:id="@+id/monitoringText"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_alignParentLeft="true"
         android:layout_below="@+id/textView1"
+        android:layout_alignParentLeft="true"
         android:layout_marginTop="36dp"
         android:ems="10"
         android:gravity="left|top"
-        android:inputType="textMultiLine" >
-        <requestFocus />
+        android:inputType="textMultiLine">
+
+        <requestFocus/>
     </EditText>
 
     <Button
         android:id="@+id/Button01"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
+        android:layout_below="@+id/monitoringText"
         android:layout_alignParentLeft="true"
         android:onClick="onRangingClicked"
-        android:layout_below="@+id/monitoringText"
-        android:text="Start Ranging" />
+        android:text="Start Ranging"/>
 
     <Button
         android:id="@+id/enableButton"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:onClick="onEnableClicked"
         android:layout_below="@+id/monitoringText"
         android:layout_toRightOf="@id/Button01"
-        android:text="Disable monitoring" />
+        android:onClick="onEnableClicked"
+        android:text="Disable monitoring"/>
 </RelativeLayout>
diff --git a/app/src/main/res/layout/activity_ranging.xml b/app/src/main/res/layout/activity_ranging.xml
index 86af58da..0fe7d15e 100755
--- a/app/src/main/res/layout/activity_ranging.xml
+++ b/app/src/main/res/layout/activity_ranging.xml
@@ -1,21 +1,21 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    tools:context=".RangingActivity" >
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                tools:context=".RangingActivity">
 
     <EditText
         android:id="@+id/rangingText"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_alignParentLeft="true"
-        android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
         android:layout_marginTop="14dp"
         android:ems="10"
         android:gravity="left|top"
-        android:inputType="textMultiLine" >
+        android:inputType="textMultiLine">
 
     </EditText>
-    
+
 </RelativeLayout>
\ No newline at end of file
