diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index db94f0231..9261b43e0 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -467,8 +467,11 @@ private Channel verifyChannelPipeline(Channel channel, String scheme) throws IOE
                     } else {
                         nettyRequest.setHeader(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);
                     }
-                } else {
-                    body = null;
+                    
+                } else if (future.getRequest().getParts() != null) {
+                    String contentType = nettyRequest.getHeader(HttpHeaders.Names.CONTENT_TYPE);
+                    String length = nettyRequest.getHeader(HttpHeaders.Names.CONTENT_LENGTH);
+                    body = new MultipartBody(future.getRequest().getParts(), contentType, length);
                 }
             }
 
@@ -512,7 +515,7 @@ private Channel verifyChannelPipeline(Channel channel, String scheme) throws IOE
 
                             ChannelFuture writeFuture;
                             if (ssl) {
-                                writeFuture = channel.write(new ChunkedFile(raf, 0, fileLength, 8192));
+                                writeFuture = channel.write(new ChunkedFile(raf, 0, fileLength, MAX_BUFFERED_BYTES));
                             } else {
                                 final FileRegion region = new OptimizedFileRegion(raf, 0, fileLength);
                                 writeFuture = channel.write(region);
@@ -536,15 +539,7 @@ public void operationComplete(ChannelFuture cf) {
                             }
                             throw ex;
                         }
-                    } else if (body != null || future.getRequest().getParts() != null) {
-                        /**
-                         * TODO: AHC-78: SSL + zero copy isn't supported by the MultiPart class and pretty complex to implements.
-                         */
-                        if (future.getRequest().getParts() != null) {
-                            String contentType = nettyRequest.getHeader(HttpHeaders.Names.CONTENT_TYPE);
-                            String length = nettyRequest.getHeader(HttpHeaders.Names.CONTENT_LENGTH);
-                            body = new MultipartBody(future.getRequest().getParts(), contentType, length);
-                        }
+                    } else if (body != null) {
 
                         ChannelFuture writeFuture;
                         if (!ssl && body instanceof RandomAccessBody) {
@@ -816,28 +811,13 @@ else if (uri.getRawQuery() != null)
                     }
 
                 } else if (request.getParts() != null) {
-                    int length = computeAndSetContentLength(request, nettyRequest);
-
-                    if (length == -1) {
-                        length = MAX_BUFFERED_BYTES;
-                    }
-
                     MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getHeaders());
 
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, mre.getContentType());
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(mre.getContentLength()));
 
-                    /**
-                     * TODO: AHC-78: SSL + zero copy isn't supported by the MultiPart class and pretty complex to implements.
-                     */
-
-                    if (isSecure(uri)) {
-                        ChannelBuffer b = ChannelBuffers.dynamicBuffer(length);
-                        mre.writeRequest(new ChannelBufferOutputStream(b));
-                        nettyRequest.setContent(b);
-                    }
                 } else if (request.getEntityWriter() != null) {
-                    int length = computeAndSetContentLength(request, nettyRequest);
+                    int length = getPredefinedContentLength(request, nettyRequest);
 
                     if (length == -1) {
                         length = MAX_BUFFERED_BYTES;
@@ -1626,15 +1606,12 @@ protected static boolean abortOnWriteCloseException(Throwable cause) {
         return false;
     }
 
-    private final static int computeAndSetContentLength(Request request, HttpRequest r) {
+    private final static int getPredefinedContentLength(Request request, HttpRequest r) {
         int length = (int) request.getContentLength();
         if (length == -1 && r.getHeader(HttpHeaders.Names.CONTENT_LENGTH) != null) {
             length = Integer.valueOf(r.getHeader(HttpHeaders.Names.CONTENT_LENGTH));
         }
 
-        if (length >= 0) {
-            r.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));
-        }
         return length;
     }
 
diff --git a/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java b/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
index 545f3a68e..673a58c01 100644
--- a/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
+++ b/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
@@ -125,20 +125,10 @@ public boolean isRepeatable() {
         return true;
     }
 
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.commons.httpclient.methods.RequestEntity#writeRequest(java.io.OutputStream)
-     */
     public void writeRequest(OutputStream out) throws IOException {
         Part.sendParts(out, parts, multipartBoundary);
     }
 
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.commons.httpclient.methods.RequestEntity#getContentLength()
-     */
     public long getContentLength() {
         try {
             return Part.getLengthOfParts(parts, multipartBoundary);
@@ -148,13 +138,7 @@ public long getContentLength() {
         }
     }
 
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.commons.httpclient.methods.RequestEntity#getContentType()
-     */
     public String getContentType() {
         return contentType;
     }
 }
-
