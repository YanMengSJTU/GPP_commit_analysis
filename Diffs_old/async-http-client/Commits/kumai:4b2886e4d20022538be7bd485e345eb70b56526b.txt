diff --git a/src/main/java/com/ning/http/client/Realm.java b/src/main/java/com/ning/http/client/Realm.java
index c15eacb08..8e68142c9 100644
--- a/src/main/java/com/ning/http/client/Realm.java
+++ b/src/main/java/com/ning/http/client/Realm.java
@@ -16,7 +16,6 @@
  */
 package com.ning.http.client;
 
-import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 
 import org.slf4j.Logger;
@@ -476,7 +475,7 @@ public RealmBuilder clone(Realm clone) {
         private void newCnonce() {
             try {
                 MessageDigest md = MessageDigest.getInstance("MD5");
-                byte[] b = md.digest(String.valueOf(millisTime()).getBytes("ISO-8859-1"));
+                byte[] b = md.digest(String.valueOf(System.currentTimeMillis()).getBytes("ISO-8859-1"));
                 cnonce = toHexString(b);
             } catch (Exception e) {
                 throw new SecurityException(e);
diff --git a/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java b/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
index cc84e89f0..00023369e 100644
--- a/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
+++ b/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
@@ -38,7 +38,6 @@
 
 package com.ning.http.client.ntlm;
 
-import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 
 import java.io.UnsupportedEncodingException;
@@ -517,7 +516,7 @@ private static int readUShort(byte[] src, int index) throws NTLMEngineException
         byte[] blobSignature = new byte[]{(byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00};
         byte[] reserved = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
         byte[] unknown1 = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
-        long time = millisTime();
+        long time = System.currentTimeMillis();
         time += 11644473600000l; // milliseconds from January 1, 1601 -> epoch.
         time *= 10000; // tenths of a microsecond.
         // convert to little-endian byte array.
diff --git a/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java b/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java
index 98d4105e0..4e363745e 100644
--- a/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java
+++ b/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java
@@ -16,8 +16,6 @@
  */
 package com.ning.http.client.oauth;
 
-import static com.ning.http.util.DateUtil.millisTime;
-
 import com.ning.http.client.FluentStringsMap;
 import com.ning.http.client.Request;
 import com.ning.http.client.RequestBuilderBase;
@@ -79,7 +77,7 @@ public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth)
         mac = new ThreadSafeHMAC(consumerAuth, userAuth);
         this.consumerAuth = consumerAuth;
         this.userAuth = userAuth;
-        random = new Random(System.identityHashCode(this) + millisTime());
+        random = new Random(System.identityHashCode(this) + System.currentTimeMillis());
     }
 
     //@Override // silly 1.5; doesn't allow this for interfaces
@@ -87,7 +85,7 @@ public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth)
     public void calculateAndAddSignature(String baseURL, Request request, RequestBuilderBase<?> requestBuilder) {
         String method = request.getMethod(); // POST etc
         String nonce = generateNonce();
-        long timestamp = millisTime() / 1000L;
+        long timestamp = System.currentTimeMillis() / 1000L;
         String signature = calculateSignature(method, baseURL, timestamp, nonce, request.getParams(), request.getQueryParams());
         String headerValue = constructAuthHeader(signature, nonce, timestamp);
         requestBuilder.setHeader(HEADER_AUTHORIZATION, headerValue);
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 63f494946..7b241cbf5 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -13,7 +13,6 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 
 import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
@@ -428,7 +427,7 @@ void touchConnection(final Connection c, final Request request) {
         if (config != null) {
             final long timeout = config.getRequestTimeoutInMs();
             if (timeout > 0) {
-                final long newTimeout = millisTime() + timeout;
+                final long newTimeout = System.currentTimeMillis() + timeout;
                 if (resolver != null) {
                     resolver.setTimeoutMillis(c, newTimeout);
                 }
@@ -437,7 +436,7 @@ void touchConnection(final Connection c, final Request request) {
             final long timeout = clientConfig.getRequestTimeoutInMs();
             if (timeout > 0) {
                 if (resolver != null) {
-                    resolver.setTimeoutMillis(c, millisTime() + timeout);
+                    resolver.setTimeoutMillis(c, System.currentTimeMillis() + timeout);
                 }
             }
         }
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
index 00c7c46bc..e3478e576 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
@@ -13,8 +13,6 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import static com.ning.http.util.DateUtil.millisTime;
-
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.ConnectionsPool;
 
@@ -312,7 +310,7 @@ private static boolean wasModified(final Long l1, final Long l2) {
             @Override
             public void run() {
                 while (isStarted) {
-                    final long currentTimeMs = millisTime();
+                    final long currentTimeMs = System.currentTimeMillis();
 
                     for (final IdleConnectionQueue delayQueue : queues) {
                         if (delayQueue.queue.isEmpty()) continue;
@@ -383,7 +381,7 @@ public IdleConnectionQueue(final long timeout) {
 
             void offer(final Connection c) {
                 if (timeout >= 0) {
-                    resolver.setTimeoutMs(c, millisTime() + timeout);
+                    resolver.setTimeoutMs(c, System.currentTimeMillis() + timeout);
                 }
                 queue.offer(c);
                 count.incrementAndGet();
diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index d96bb326d..d7aca075e 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -12,8 +12,6 @@
  */
 package com.ning.http.util;
 
-import static com.ning.http.util.DateUtil.millisTime;
-
 import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -499,7 +497,7 @@ public static Cookie parseCookie(String value) {
 
     public static int convertExpireField(String timestring) {
         String trimmedTimeString = removeQuote(timestring.trim());
-        long now = millisTime();
+        long now = System.currentTimeMillis();
         Date date = null;
 
         for (SimpleDateFormat sdf : simpleDateFormat.get()) {
diff --git a/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java b/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
index 65cddcd89..c49eee8dc 100644
--- a/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
+++ b/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
@@ -13,8 +13,6 @@
 
 package com.ning.http.client.providers.netty;
 
-import static com.ning.http.util.DateUtil.millisTime;
-
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseHeaders;
@@ -40,7 +38,7 @@ public void testCookieParseExpires() {
         SimpleDateFormat sdf = new SimpleDateFormat("EEE, dd-MMM-yyyy HH:mm:ss z", Locale.US);
         sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
 
-        Date date = new Date(millisTime() + 60000); // sdf.parse( dateString );
+        Date date = new Date(System.currentTimeMillis() + 60000); // sdf.parse( dateString );
         final String cookieDef = String.format("efmembercheck=true; expires=%s; path=/; domain=.eclipse.org", sdf.format(date));
 
         NettyResponse response = new NettyResponse(new ResponseStatus(null, null, null), new HttpResponseHeaders(null, null, false) {
