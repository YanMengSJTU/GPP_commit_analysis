diff --git a/src/main/java/com/ning/http/client/ListenableFuture.java b/src/main/java/com/ning/http/client/ListenableFuture.java
index 74dfcb70f..b119f2659 100755
--- a/src/main/java/com/ning/http/client/ListenableFuture.java
+++ b/src/main/java/com/ning/http/client/ListenableFuture.java
@@ -30,7 +30,6 @@
  */
 package com.ning.http.client;
 
-import java.util.concurrent.Callable;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 
@@ -42,11 +41,11 @@
 public interface ListenableFuture<V> extends Future<V> {
 
     /**
-     * Execute a {@link Callable}  and if there is no exception, mark this Future as done and release the internal lock.
+     * Terminate and if there is no exception, mark this Future as done and release the internal lock.
      *
      * @param callable
      */
-    void done(Callable callable);
+    void done();
 
     /**
      * Abort the current processing, and propagate the {@link Throwable} to the {@link AsyncHandler} or {@link Future}
diff --git a/src/main/java/com/ning/http/client/listenable/AbstractListenableFuture.java b/src/main/java/com/ning/http/client/listenable/AbstractListenableFuture.java
index a0f9575e6..16b2f9435 100644
--- a/src/main/java/com/ning/http/client/listenable/AbstractListenableFuture.java
+++ b/src/main/java/com/ning/http/client/listenable/AbstractListenableFuture.java
@@ -63,7 +63,7 @@
     /*
     * Override the done method to execute the execution list.
     */
-    protected void done() {
+    protected void runListeners() {
         executionList.run();
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
index fd041a8f1..a125d1ba9 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
@@ -603,7 +603,7 @@ public T call() {
                         if (config.getMaxTotalConnections() != -1) {
                             maxConnections.decrementAndGet();
                         }
-                        future.done(null);
+                        future.done();
                         method.releaseConnection();
                     }
 
@@ -629,7 +629,7 @@ public T call() {
                     if (config.getMaxTotalConnections() != -1) {
                         maxConnections.decrementAndGet();
                     }
-                    future.done(null);
+                    future.done();
 
                     // Crappy Apache HttpClient who blocks forever here with large files.
                     config.executorService().submit(new Runnable() {
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
index 67706fbea..cdbe106c9 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
@@ -21,7 +21,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -64,12 +63,12 @@ protected void setInnerFuture(Future<V> innerFuture) {
         this.innerFuture = innerFuture;
     }
 
-    public void done(Callable callable) {
+    public void done() {
         isDone.set(true);
         if (reaperFuture != null) {
             reaperFuture.cancel(true);
         }
-        super.done();
+        runListeners();
     }
 
     /**
@@ -125,7 +124,7 @@ public void abort(Throwable t) {
                 logger.debug("asyncHandler.onThrowable", t2);
             }
         }
-        super.done();
+        runListeners();
     }
 
     public boolean cancel(boolean mayInterruptIfRunning) {
@@ -140,10 +139,10 @@ public boolean cancel(boolean mayInterruptIfRunning) {
             if (reaperFuture != null) {
                 reaperFuture.cancel(true);
             }
-            super.done();
+            runListeners();
             return innerFuture.cancel(mayInterruptIfRunning);
         } else {
-            super.done();
+            runListeners();
             return false;
         }
     }
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 521551401..4e367b146 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -674,9 +674,9 @@ void abort(final Throwable t) {
             }
         }
 
-        void done(final Callable c) {
+        void done() {
             if (future != null) {
-                future.done(c);
+                future.done();
             }
         }
 
@@ -684,7 +684,7 @@ void done(final Callable c) {
         void result(Object result) {
             if (future != null) {
                 future.delegate.result(result);
-                future.done(null);
+                future.done();
             }
         }
 
@@ -1371,7 +1371,7 @@ protected boolean onHttpPacketParsed(HttpHeader httpHeader, FilterChainContext c
                         context.abort(e);
                     }
                 } else {
-                    context.done(null);
+                    context.done();
                 }
 
                 return result;
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseFuture.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseFuture.java
index d4116ad4c..fb6858067 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseFuture.java
@@ -21,8 +21,6 @@
 import org.glassfish.grizzly.Connection;
 import org.glassfish.grizzly.impl.FutureImpl;
 
-import java.io.IOException;
-import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -67,14 +65,12 @@
     // ----------------------------------- Methods from AbstractListenableFuture
 
 
-    public void done(Callable callable) {
+    public void done() {
 
         if (!done.compareAndSet(false, true) || cancelled.get()) {
             return;
         }
-        done();
-
-
+        runListeners();
     }
 
 
@@ -93,7 +89,7 @@ public void abort(Throwable t) {
 
         }
         closeConnection();
-        done();
+        runListeners();
 
     }
 
@@ -144,7 +140,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
             } catch (Throwable ignore) {
             }
         }
-        done();
+        runListeners();
         return delegate.cancel(mayInterruptIfRunning);
 
     }
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
index b9985a0ae..011884c17 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
@@ -361,7 +361,7 @@ public T call() throws Exception {
                 try {
                     T t = asyncHandler.onCompleted();
                     future.content(t);
-                    future.done(null);
+                    future.done();
                     return t;
                 } catch (Throwable t) {
                     RuntimeException ex = new RuntimeException();
@@ -381,7 +381,7 @@ public T call() throws Exception {
                         if (config.getMaxTotalConnections() != -1) {
                             maxConnections.decrementAndGet();
                         }
-                        future.done(null);
+                        future.done();
                     }
 
                     if (fc.replayRequest()) {
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java b/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
index 0791a4a56..b1dbcc3a3 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
@@ -18,7 +18,6 @@
 import com.ning.http.client.ListenableFuture;
 
 import java.net.HttpURLConnection;
-import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -32,9 +31,9 @@ public JDKDelegateFuture(AsyncHandler<V> asyncHandler, int responseTimeoutInMs,
         this.delegateFuture = delegateFuture;
     }
 
-    public void done(Callable callable) {
-        delegateFuture.done(callable);
-        super.done(callable);
+    public void done() {
+        delegateFuture.done();
+        super.done();
     }
 
     public void abort(Throwable t) {
@@ -79,7 +78,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
             delegateFuture.abort(new ExecutionException(exception.get()));
         }
         delegateFuture.content(content);
-        delegateFuture.done(null);
+        delegateFuture.done();
         return content;
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java b/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
index e029183f5..0ec695ae9 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
@@ -20,7 +20,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.net.HttpURLConnection;
-import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -60,9 +59,9 @@ protected void setInnerFuture(Future<V> innerFuture) {
         this.innerFuture = innerFuture;
     }
 
-    public void done(Callable callable) {
+    public void done() {
         isDone.set(true);
-        super.done();
+        runListeners();
     }
 
     public void abort(Throwable t) {
@@ -77,7 +76,7 @@ public void abort(Throwable t) {
                 logger.debug("asyncHandler.onThrowable", te);
             }
         }
-        super.done();
+        runListeners();
     }
 
     public void content(V v) {
@@ -92,10 +91,10 @@ public boolean cancel(boolean mayInterruptIfRunning) {
                 logger.debug("asyncHandler.onThrowable", te);
             }
             cancelled.set(true);
-            super.done();
+            runListeners();
             return innerFuture.cancel(mayInterruptIfRunning);
         } else {
-            super.done();
+            runListeners();
             return false;
         }
     }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index b9f01d2af..ebb57caad 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -1440,7 +1440,7 @@ protected boolean remotelyClosed(Channel channel, NettyResponseFuture<?> future)
     private void markAsDone(final NettyResponseFuture<?> future, final ChannelHandlerContext ctx) throws MalformedURLException {
         // We need to make sure everything is OK before adding the connection back to the pool.
         try {
-            future.done(null);
+            future.done();
         } catch (Throwable t) {
             // Never propagate exception once we know we are done.
             log.debug(t.getMessage(), t);
@@ -2342,7 +2342,7 @@ public void handle(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
                 ctx.getPipeline().get(HttpResponseDecoder.class).replace("ws-decoder", new WebSocket08FrameDecoder(false, false));
 
                 invokeOnSucces(ctx, h);
-                future.done(null);
+                future.done();
             } else if (e.getMessage() instanceof WebSocketFrame) {
 
                 invokeOnSucces(ctx, h);
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
index 8cf16dc83..29d22415c 100755
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
@@ -180,7 +180,7 @@ public boolean cancel(boolean force) {
         }
         latch.countDown();
         isCancelled.set(true);
-        super.done();
+        runListeners();
         return true;
     }
 
@@ -293,7 +293,7 @@ V getContent() throws ExecutionException {
         return update;
     }
 
-    public final void done(Callable callable) {
+    public final void done() {
 
         Throwable exception = null;
 
@@ -305,13 +305,6 @@ public final void done(Callable callable) {
             }
             getContent();
             isDone.set(true);
-            if (callable != null) {
-                try {
-                    callable.call();
-                } catch (Exception ex) {
-                    exception = ex;
-                }
-            }
         } catch (ExecutionException t) {
             return;
         } catch (RuntimeException t) {
@@ -324,7 +317,7 @@ public final void done(Callable callable) {
         if (exception != null)
             exEx.compareAndSet(null, new ExecutionException(exception));
 
-        super.done();
+        runListeners();
     }
 
     public final void abort(final Throwable t) {
@@ -344,7 +337,7 @@ public final void abort(final Throwable t) {
             }
         }
         latch.countDown();
-        super.done();
+        runListeners();
     }
 
     public void content(V v) {
