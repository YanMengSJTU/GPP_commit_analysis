diff --git a/client/src/main/java/org/asynchttpclient/channel/DefaultKeepAliveStrategy.java b/client/src/main/java/org/asynchttpclient/channel/DefaultKeepAliveStrategy.java
index 5489605f0..f1c6a5f42 100644
--- a/client/src/main/java/org/asynchttpclient/channel/DefaultKeepAliveStrategy.java
+++ b/client/src/main/java/org/asynchttpclient/channel/DefaultKeepAliveStrategy.java
@@ -5,6 +5,8 @@
 import io.netty.handler.codec.http.HttpUtil;
 import org.asynchttpclient.Request;
 
+import java.net.InetSocketAddress;
+
 import static io.netty.handler.codec.http.HttpHeaderValues.CLOSE;
 
 /**
@@ -16,7 +18,7 @@
    * Implemented in accordance with RFC 7230 section 6.1 https://tools.ietf.org/html/rfc7230#section-6.1
    */
   @Override
-  public boolean keepAlive(RealConnection realConnection, Request ahcRequest, HttpRequest request, HttpResponse response) {
+  public boolean keepAlive(InetSocketAddress remoteAddress, Request ahcRequest, HttpRequest request, HttpResponse response) {
     return HttpUtil.isKeepAlive(response)
             && HttpUtil.isKeepAlive(request)
             // support non standard Proxy-Connection
diff --git a/client/src/main/java/org/asynchttpclient/channel/KeepAliveStrategy.java b/client/src/main/java/org/asynchttpclient/channel/KeepAliveStrategy.java
index df80e86d0..c748fe76a 100644
--- a/client/src/main/java/org/asynchttpclient/channel/KeepAliveStrategy.java
+++ b/client/src/main/java/org/asynchttpclient/channel/KeepAliveStrategy.java
@@ -13,7 +13,6 @@
  */
 package org.asynchttpclient.channel;
 
-import io.netty.channel.Channel;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http.HttpResponse;
 import org.asynchttpclient.Request;
@@ -25,11 +24,11 @@
   /**
    * Determines whether the connection should be kept alive after this HTTP message exchange.
    *
-   * @param realConnection  holds the socketAddress used by current request
+   * @param remoteAddress  the remote InetSocketAddress associated with the request
    * @param ahcRequest     the Request, as built by AHC
    * @param nettyRequest   the HTTP request sent to Netty
    * @param nettyResponse  the HTTP response received from Netty
    * @return true if the connection should be kept alive, false if it should be closed.
    */
-  boolean keepAlive(RealConnection realConnection, Request ahcRequest, HttpRequest nettyRequest, HttpResponse nettyResponse);
+  boolean keepAlive(InetSocketAddress remoteAddress, Request ahcRequest, HttpRequest nettyRequest, HttpResponse nettyResponse);
 }
diff --git a/client/src/main/java/org/asynchttpclient/channel/RealConnection.java b/client/src/main/java/org/asynchttpclient/channel/RealConnection.java
deleted file mode 100644
index 4305f5bbf..000000000
--- a/client/src/main/java/org/asynchttpclient/channel/RealConnection.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.asynchttpclient.channel;
-
-import java.net.InetSocketAddress;
-
-/**
- * this class is a holder for the InetSocketAddress used by request
- *
- * @author wuguangkuo
- * @create 2019-04-16 16:32
- **/
-public class RealConnection {
-
-    private InetSocketAddress localAddress;
-    private InetSocketAddress remoteAddress;
-
-    public RealConnection(InetSocketAddress localAddress, InetSocketAddress remoteAddress) {
-        this.localAddress = localAddress;
-        this.remoteAddress = remoteAddress;
-    }
-
-    InetSocketAddress getLocalAddress() {
-        return localAddress;
-    }
-
-    InetSocketAddress getRemoteAddress() {
-        return remoteAddress;
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
index fe05082ee..a52f75fc8 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
@@ -22,7 +22,6 @@
 import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.channel.RealConnection;
 import org.asynchttpclient.handler.StreamedAsyncHandler;
 import org.asynchttpclient.netty.NettyResponseFuture;
 import org.asynchttpclient.netty.NettyResponseStatus;
@@ -71,8 +70,7 @@ private void handleHttpResponse(final HttpResponse response, final Channel chann
     HttpRequest httpRequest = future.getNettyRequest().getHttpRequest();
     logger.debug("\n\nRequest {}\n\nResponse {}\n", httpRequest, response);
 
-    RealConnection realConnection = new RealConnection((InetSocketAddress) channel.localAddress(), (InetSocketAddress) channel.remoteAddress());
-    future.setKeepAlive(config.getKeepAliveStrategy().keepAlive(realConnection, future.getTargetRequest(), httpRequest, response));
+    future.setKeepAlive(config.getKeepAliveStrategy().keepAlive((InetSocketAddress) channel.remoteAddress(), future.getTargetRequest(), httpRequest, response));
 
     NettyResponseStatus status = new NettyResponseStatus(future.getUri(), response, channel);
     HttpHeaders responseHeaders = response.headers();
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
index 702af2760..4395f0f49 100644
--- a/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
@@ -107,7 +107,7 @@ public void multipleSequentialPostRequestsOverHttps() throws Throwable {
   public void multipleConcurrentPostRequestsOverHttpsWithDisabledKeepAliveStrategy() throws Throwable {
     logger.debug(">>> multipleConcurrentPostRequestsOverHttpsWithDisabledKeepAliveStrategy");
 
-    KeepAliveStrategy keepAliveStrategy = (realConnection, ahcRequest, nettyRequest, nettyResponse) -> !ahcRequest.getUri().isSecured();
+    KeepAliveStrategy keepAliveStrategy = (remoteAddress, ahcRequest, nettyRequest, nettyResponse) -> !ahcRequest.getUri().isSecured();
 
     withClient(config().setSslEngineFactory(createSslEngineFactory()).setKeepAliveStrategy(keepAliveStrategy)).run(client ->
       withServer(server).run(server -> {
