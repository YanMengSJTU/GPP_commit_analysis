diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 068cf267c..d66fe72aa 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -16,6 +16,7 @@
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.AsyncHttpProvider;
+import com.ning.http.client.AsyncHttpProviderConfig;
 import com.ning.http.client.Body;
 import com.ning.http.client.BodyGenerator;
 import com.ning.http.client.ConnectionPoolKeyStrategy;
@@ -111,6 +112,7 @@
 import org.slf4j.LoggerFactory;
 
 import javax.net.ssl.SSLContext;
+import java.io.ByteArrayOutputStream;
 import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;
@@ -135,6 +137,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
+import static com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProviderConfig.Property.BUFFER_WEBSOCKET_FRAGMENTS;
 import static com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProviderConfig.Property.MAX_HTTP_PACKET_HEADER_SIZE;
 import static com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProviderConfig.Property.TRANSPORT_CUSTOMIZER;
 
@@ -1316,8 +1319,9 @@ protected void onHttpHeadersParsed(HttpHeader httpHeader,
             if (context.isWSRequest) {
                 try {
                     context.protocolHandler.setConnection(ctx.getConnection());
-                    DefaultWebSocket ws = new DefaultWebSocket(context.protocolHandler);
-                    context.webSocket = new GrizzlyWebSocketAdapter(ws);
+                    final GrizzlyWebSocketAdapter webSocketAdapter = createWebSocketAdapter(context);
+                    context.webSocket = webSocketAdapter;
+                    DefaultWebSocket ws = webSocketAdapter.gWebSocket;
                     if (context.currentState == AsyncHandler.STATE.UPGRADE) {
                         httpHeader.setChunked(false);
                         ws.onConnect();
@@ -1409,6 +1413,16 @@ protected boolean onHttpPacketParsed(HttpHeader httpHeader, FilterChainContext c
 
         // ----------------------------------------------------- Private Methods
 
+        private static GrizzlyWebSocketAdapter createWebSocketAdapter(final HttpTransactionContext context) {
+            DefaultWebSocket ws = new DefaultWebSocket(context.protocolHandler);
+            AsyncHttpProviderConfig config = context.provider.clientConfig.getAsyncHttpProviderConfig();
+            boolean bufferFragments = true;
+            if (config instanceof GrizzlyAsyncHttpProviderConfig) {
+                bufferFragments = (Boolean) ((GrizzlyAsyncHttpProviderConfig) config).getProperty(BUFFER_WEBSOCKET_FRAGMENTS);
+            }
+
+            return new GrizzlyWebSocketAdapter(ws, bufferFragments);
+        }
 
         private static boolean isRedirectAllowed(final HttpTransactionContext ctx) {
             boolean allowed = ctx.request.isRedirectEnabled();
@@ -2619,13 +2633,16 @@ public void getBytes(byte[] bytes) {
     
     private static final class GrizzlyWebSocketAdapter implements WebSocket {
         
-        private final org.glassfish.grizzly.websockets.WebSocket gWebSocket;
+        final DefaultWebSocket gWebSocket;
+        final boolean bufferFragments;
 
         // -------------------------------------------------------- Constructors
         
         
-        GrizzlyWebSocketAdapter(final org.glassfish.grizzly.websockets.WebSocket gWebSocket) {
-            this.gWebSocket = gWebSocket;            
+        GrizzlyWebSocketAdapter(final DefaultWebSocket gWebSocket,
+                                final boolean bufferFragments) {
+            this.gWebSocket = gWebSocket;
+            this.bufferFragments = bufferFragments;
         }
         
         
@@ -2706,14 +2723,25 @@ public void close() {
     private static final class AHCWebSocketListenerAdapter implements org.glassfish.grizzly.websockets.WebSocketListener {
 
         private final WebSocketListener ahcListener;
-        private final WebSocket webSocket;
+        private final GrizzlyWebSocketAdapter webSocket;
+        private final StringBuilder stringBuffer;
+        private final ByteArrayOutputStream byteArrayOutputStream;
+
 
         // -------------------------------------------------------- Constructors
 
 
-        AHCWebSocketListenerAdapter(final WebSocketListener ahcListener, WebSocket webSocket) {
+        AHCWebSocketListenerAdapter(final WebSocketListener ahcListener,
+                                    final GrizzlyWebSocketAdapter webSocket) {
             this.ahcListener = ahcListener;
             this.webSocket = webSocket;
+            if (webSocket.bufferFragments) {
+                stringBuffer = new StringBuilder();
+                byteArrayOutputStream = new ByteArrayOutputStream();
+            } else {
+                stringBuffer = null;
+                byteArrayOutputStream = null;
+            }
         }
 
 
@@ -2788,10 +2816,23 @@ public void onPong(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[]
         }
 
         @Override
-        public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, String s, boolean b) {
+        public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, String s, boolean last) {
             try {
-                if (WebSocketTextListener.class.isAssignableFrom(ahcListener.getClass())) {
-                    WebSocketTextListener.class.cast(ahcListener).onFragment(s, b);
+                if (this.webSocket.bufferFragments) {
+                    synchronized (this.webSocket) {
+                        stringBuffer.append(s);
+                        if (last) {
+                            if (WebSocketTextListener.class.isAssignableFrom(ahcListener.getClass())) {
+                                final String message = stringBuffer.toString();
+                                stringBuffer.setLength(0);
+                                WebSocketTextListener.class.cast(ahcListener).onMessage(message);
+                            }
+                        }
+                    }
+                } else {
+                    if (WebSocketTextListener.class.isAssignableFrom(ahcListener.getClass())) {
+                        WebSocketTextListener.class.cast(ahcListener).onFragment(s, last);
+                    }
                 }
             } catch (Throwable e) {
                 ahcListener.onError(e);
@@ -2799,10 +2840,23 @@ public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, Str
         }
 
         @Override
-        public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[] bytes, boolean b) {
+        public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[] bytes, boolean last) {
             try {
-                if (WebSocketByteListener.class.isAssignableFrom(ahcListener.getClass())) {
-                    WebSocketByteListener.class.cast(ahcListener).onFragment(bytes, b);
+                if (this.webSocket.bufferFragments) {
+                    synchronized (this.webSocket) {
+                        byteArrayOutputStream.write(bytes);
+                        if (last) {
+                            if (WebSocketByteListener.class.isAssignableFrom(ahcListener.getClass())) {
+                                final byte[] bytesLocal = byteArrayOutputStream.toByteArray();
+                                byteArrayOutputStream.reset();
+                                WebSocketByteListener.class.cast(ahcListener).onMessage(bytesLocal);
+                            }
+                        }
+                    }
+                } else {
+                    if (WebSocketByteListener.class.isAssignableFrom(ahcListener.getClass())) {
+                        WebSocketByteListener.class.cast(ahcListener).onFragment(bytes, last);
+                    }
                 }
             } catch (Throwable e) {
                 ahcListener.onError(e);
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProviderConfig.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProviderConfig.java
index 8751195bb..066e1a959 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProviderConfig.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProviderConfig.java
@@ -59,6 +59,13 @@
         MAX_HTTP_PACKET_HEADER_SIZE(Integer.class, HttpCodecFilter.DEFAULT_MAX_HTTP_PACKET_HEADER_SIZE),
 
 
+        /**
+         * By default, Websocket messages that are fragmented will be buffered.  Once all
+         * fragments have been accumulated, the appropriate onMessage() call back will be
+         * invoked with the complete message.  If this functionality is not desired, set
+         * this property to false.
+         */
+        BUFFER_WEBSOCKET_FRAGMENTS(Boolean.class, true)
 
         ;
         
