diff --git a/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java b/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
index d3c27d564..2cd0282b3 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
@@ -17,7 +17,6 @@
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
 import static org.testng.Assert.*;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -29,17 +28,18 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import javax.servlet.AsyncContext;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.eclipse.jetty.continuation.Continuation;
-import org.eclipse.jetty.continuation.ContinuationSupport;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.Test;
 
+import io.netty.handler.codec.http.HttpHeaders;
+
 /**
  * Tests default asynchronous life cycle.
  * 
@@ -61,8 +61,7 @@ public AbstractHandler configureHandler() throws Exception {
             public void handle(String s, Request request, HttpServletRequest req, final HttpServletResponse resp) throws IOException, ServletException {
                 resp.setContentType("text/plain;charset=utf-8");
                 resp.setStatus(200);
-                final Continuation continuation = ContinuationSupport.getContinuation(req);
-                continuation.suspend();
+                final AsyncContext asyncContext = request.startAsync();
                 final PrintWriter writer = resp.getWriter();
                 executorService.submit(new Runnable() {
                     public void run() {
@@ -86,7 +85,7 @@ public void run() {
                         logger.info("Delivering part2.");
                         writer.write("part2");
                         writer.flush();
-                        continuation.complete();
+                        asyncContext.complete();
                     }
                 });
                 request.setHandled(true);
diff --git a/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java b/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
index f8b783d37..7b878ec13 100644
--- a/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
+++ b/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
@@ -25,12 +25,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
+import javax.servlet.AsyncContext;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.eclipse.jetty.continuation.Continuation;
-import org.eclipse.jetty.continuation.ContinuationSupport;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
@@ -60,8 +59,7 @@ public AbstractHandler configureHandler() throws Exception {
     private class SlowHandler extends AbstractHandler {
         public void handle(String target, Request baseRequest, HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {
             response.setStatus(HttpServletResponse.SC_OK);
-            final Continuation continuation = ContinuationSupport.getContinuation(request);
-            continuation.suspend();
+            final AsyncContext asyncContext = request.startAsync();
             new Thread(new Runnable() {
                 public void run() {
                     try {
@@ -81,7 +79,7 @@ public void run() {
                         Thread.sleep(3000);
                         response.getOutputStream().print(MSG);
                         response.getOutputStream().flush();
-                        continuation.complete();
+                        asyncContext.complete();
                     } catch (InterruptedException e) {
                         logger.error(e.getMessage(), e);
                     } catch (IOException e) {
diff --git a/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java b/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
index b58644a00..cec2b0ef5 100644
--- a/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
+++ b/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
@@ -24,6 +24,7 @@
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 
+import javax.servlet.AsyncContext;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -32,8 +33,6 @@
 import org.asynchttpclient.AsyncCompletionHandler;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.Response;
-import org.eclipse.jetty.continuation.Continuation;
-import org.eclipse.jetty.continuation.ContinuationSupport;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
@@ -51,15 +50,14 @@ public AbstractHandler configureHandler() throws Exception {
         public void handle(String target, Request baseRequest, HttpServletRequest request, final HttpServletResponse response)
                 throws IOException, ServletException {
             response.setStatus(HttpServletResponse.SC_OK);
-            final Continuation continuation = ContinuationSupport.getContinuation(request);
-            continuation.suspend();
+            final AsyncContext asyncContext = request.startAsync();
             new Thread(new Runnable() {
                 public void run() {
                     try {
                         Thread.sleep(SLEEPTIME_MS);
                         response.getOutputStream().print(MSG);
                         response.getOutputStream().flush();
-                        continuation.complete();
+                        asyncContext.complete();
                     } catch (InterruptedException e) {
                         logger.error(e.getMessage(), e);
                     } catch (IOException e) {
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
index b7b9890ce..87b57bc83 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
@@ -193,7 +193,7 @@ public void testVisitPostContents() {
 
     @Test
     public void transferToShouldWriteStringPart() throws IOException, URISyntaxException {
-        String text = FileUtils.readFileToString(TestUtils.resourceAsFile("test_sample_message.eml"));
+        String text = FileUtils.readFileToString(TestUtils.resourceAsFile("test_sample_message.eml"), UTF_8);
 
         List<Part> parts = new ArrayList<>();
         parts.add(new StringPart("test_sample_message.eml", text));
diff --git a/pom.xml b/pom.xml
index 5a27b6628..dd0e533b6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -395,16 +395,16 @@
 		<surefire.redirectTestOutputToFile>true</surefire.redirectTestOutputToFile>
 		<source.property>1.8</source.property>
 		<target.property>1.8</target.property>
-		<netty.version>4.1.15.Final</netty.version>
+		<netty.version>4.1.16.Final</netty.version>
 		<slf4j.version>1.7.25</slf4j.version>
 		<reactive-streams.version>1.0.0</reactive-streams.version>
 		<netty-reactive-streams.version>2.0.0</netty-reactive-streams.version>
-		<rxjava.version>1.3.0</rxjava.version>
-		<rxjava2.version>2.1.3</rxjava2.version>
+		<rxjava.version>1.3.2</rxjava.version>
+		<rxjava2.version>2.1.4</rxjava2.version>
 		<logback.version>1.2.3</logback.version>
 		<testng.version>6.11</testng.version>
-		<jetty.version>9.4.6.v20170531</jetty.version>
-		<tomcat.version>8.5.20</tomcat.version>
+		<jetty.version>9.4.7.v20170914</jetty.version>
+		<tomcat.version>8.5.21</tomcat.version>
 		<commons-io.version>2.5</commons-io.version>
 		<commons-fileupload.version>1.3.3</commons-fileupload.version>
 		<privilegedaccessor.version>1.2.2</privilegedaccessor.version>
