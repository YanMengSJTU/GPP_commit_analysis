diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index 265a9c6fc..d96bb326d 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -20,6 +20,7 @@
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
 import java.util.Collection;
@@ -27,7 +28,6 @@
 import java.util.List;
 import java.util.Locale;
 
-import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.ByteArrayPart;
@@ -41,6 +41,7 @@
 import com.ning.http.multipart.ByteArrayPartSource;
 import com.ning.http.multipart.MultipartRequestEntity;
 import com.ning.http.multipart.PartSource;
+import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
 
 /**
  * {@link com.ning.http.client.AsyncHttpProvider} common utilities.
@@ -231,22 +232,51 @@ public final static String getHost(URI uri) {
     }
 
     public final static URI getRedirectUri(URI uri, String location) {
-        if(location == null)
-            throw new IllegalArgumentException("URI " + uri + " was redirected to null location");
-        URI newUri = uri.resolve(location);
-
-        String scheme = newUri.getScheme();
-
-        if (scheme == null || !scheme.equalsIgnoreCase("http")
-                && !scheme.equalsIgnoreCase("https")
-                && !scheme.equals("ws")
-                && !scheme.equals("wss")) {
-            throw new IllegalArgumentException("The URI scheme, of the URI " + newUri
-                    + ", must be equal (ignoring case) to 'ws, 'wss', 'http', or 'https'");
-        }
+            if(location == null)
+                throw new IllegalArgumentException("URI " + uri + " was redirected to null location");
+            
+            URI locationURI = null;
+            try {
+                locationURI = new URI(location);
+            } catch (URISyntaxException e) {
+                // rich, we have a badly encoded location, let's try to encode the query params
+                String[] parts = location.split("\\?");
+                if (parts.length != 2) {
+                    throw new IllegalArgumentException("Don't know how to turn this location into a proper URI:" + location, e);
+                } else {
+                    StringBuilder properUrl = new StringBuilder(location.length()).append(parts[0]).append("?");
+                    
+                    String[] queryParams = parts[1].split("&");
+                    for (int i = 0; i < queryParams.length; i++) {
+                        String queryParam = queryParams[i];
+                        if (i != 0)
+                            properUrl.append("&");
+                        String[] nameValue = queryParam.split("=", 2);
+                        UTF8UrlEncoder.appendEncoded(properUrl, nameValue[0]);
+                        if (nameValue.length == 2) {
+                            properUrl.append("=");
+                            UTF8UrlEncoder.appendEncoded(properUrl, nameValue[1]);
+                        }
+                    }
+                    
+                    locationURI = URI.create(properUrl.toString());
+                }
+            }
+            
+            URI redirectUri = uri.resolve(locationURI);
 
-        return newUri;
-    }
+            String scheme = redirectUri.getScheme();
+
+            if (scheme == null || !scheme.equalsIgnoreCase("http")
+                    && !scheme.equalsIgnoreCase("https")
+                    && !scheme.equals("ws")
+                    && !scheme.equals("wss")) {
+                throw new IllegalArgumentException("The URI scheme, of the URI " + redirectUri
+                        + ", must be equal (ignoring case) to 'ws, 'wss', 'http', or 'https'");
+            }
+
+            return redirectUri;
+        }
 
     public final static int getPort(URI uri) {
         int port = uri.getPort();
diff --git a/src/test/java/com/ning/http/util/AsyncHttpProviderUtilsTest.java b/src/test/java/com/ning/http/util/AsyncHttpProviderUtilsTest.java
new file mode 100644
index 000000000..7a1bdd26c
--- /dev/null
+++ b/src/test/java/com/ning/http/util/AsyncHttpProviderUtilsTest.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ *
+ * This program is licensed to you under the Apache License Version 2.0,
+ * and you may not use this file except in compliance with the Apache License Version 2.0.
+ * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the Apache License Version 2.0 is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
+ */
+package com.ning.http.util;
+
+import java.net.URI;
+
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+public class AsyncHttpProviderUtilsTest {
+
+    @Test(groups = "fast")
+    public void getRedirectUriShouldHandleProperlyEncodedLocation() {
+
+        String url = "http://www.ebay.de/sch/sis.html;jsessionid=92D73F80262E3EBED7E115ED01035DDA?_nkw=FSC%20Lifebook%20E8310%20Core2Duo%20T8100%202%201GHz%204GB%20DVD%20RW&_itemId=150731406505";
+        URI uri = AsyncHttpProviderUtils.getRedirectUri(URI.create("http://www.ebay.de"), url);
+        Assert.assertEquals("http://www.ebay.de/sch/sis.html;jsessionid=92D73F80262E3EBED7E115ED01035DDA?_nkw=FSC%20Lifebook%20E8310%20Core2Duo%20T8100%202%201GHz%204GB%20DVD%20RW&_itemId=150731406505", uri.toString());
+    }
+
+    @Test(groups = "fast")
+    public void getRedirectUriShouldHandleRawQueryParamsLocation() {
+
+        String url = "http://www.ebay.de/sch/sis.html;jsessionid=92D73F80262E3EBED7E115ED01035DDA?_nkw=FSC Lifebook E8310 Core2Duo T8100 2 1GHz 4GB DVD RW&_itemId=150731406505";
+        URI uri = AsyncHttpProviderUtils.getRedirectUri(URI.create("http://www.ebay.de"), url);
+        Assert.assertEquals("http://www.ebay.de/sch/sis.html;jsessionid=92D73F80262E3EBED7E115ED01035DDA?_nkw=FSC%20Lifebook%20E8310%20Core2Duo%20T8100%202%201GHz%204GB%20DVD%20RW&_itemId=150731406505", uri.toString());
+    }
+    
+    @Test(groups = "fast")
+    public void getRedirectUriShouldHandleRelativeLocation() {
+
+        String url = "/sch/sis.html;jsessionid=92D73F80262E3EBED7E115ED01035DDA?_nkw=FSC Lifebook E8310 Core2Duo T8100 2 1GHz 4GB DVD RW&_itemId=150731406505";
+        URI uri = AsyncHttpProviderUtils.getRedirectUri(URI.create("http://www.ebay.de"), url);
+        Assert.assertEquals("http://www.ebay.de/sch/sis.html;jsessionid=92D73F80262E3EBED7E115ED01035DDA?_nkw=FSC%20Lifebook%20E8310%20Core2Duo%20T8100%202%201GHz%204GB%20DVD%20RW&_itemId=150731406505", uri.toString());
+    }
+}
\ No newline at end of file
