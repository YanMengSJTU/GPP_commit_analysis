diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
index 30f13e6ad..fd8c84169 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
@@ -1158,7 +1158,31 @@ private ProxyServerSelector resolveProxyServerSelector() {
         }
 
         public DefaultAsyncHttpClientConfig build() {
-
+        	
+        	final List<RequestFilter> rq;
+			if (requestFilters.isEmpty())
+				rq = Collections.emptyList();
+			else
+				rq = Collections.unmodifiableList(requestFilters);
+			
+            final List<ResponseFilter> r;
+			if (responseFilters.isEmpty())
+				r = Collections.emptyList();
+			else
+				r = Collections.unmodifiableList(responseFilters);
+            
+            final List<IOExceptionFilter> i;
+			if (ioExceptionFilters.isEmpty())
+				i = Collections.emptyList();
+			else
+				i = Collections.unmodifiableList(ioExceptionFilters);
+
+			final Map<ChannelOption<Object>, Object> c;
+			if (channelOptions.isEmpty())
+				c = Collections.emptyMap();
+			else
+				c = Collections.unmodifiableMap(channelOptions);
+			
             return new DefaultAsyncHttpClientConfig(//
                     followRedirect, //
                     maxRedirects, //
@@ -1197,9 +1221,9 @@ public DefaultAsyncHttpClientConfig build() {
                     sslSessionTimeout, //
                     sslContext, //
                     sslEngineFactory, //
-                    requestFilters.isEmpty() ? Collections.emptyList() : Collections.unmodifiableList(requestFilters), //
-                    responseFilters.isEmpty() ? Collections.emptyList() : Collections.unmodifiableList(responseFilters),//
-                    ioExceptionFilters.isEmpty() ? Collections.emptyList() : Collections.unmodifiableList(ioExceptionFilters),//
+                    rq, //
+                    r,//
+                    i,//
                     tcpNoDelay, //
                     soReuseAddress, //
                     soLinger, //
@@ -1213,7 +1237,7 @@ public DefaultAsyncHttpClientConfig build() {
                     chunkedFileChunkSize, //
                     webSocketMaxBufferSize, //
                     webSocketMaxFrameSize, //
-                    channelOptions.isEmpty() ? Collections.emptyMap() : Collections.unmodifiableMap(channelOptions),//
+                    c,//
                     eventLoopGroup, //
                     useNativeTransport, //
                     allocator, //
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index f8c7696d5..9855ae9b0 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -43,11 +43,16 @@
 import io.netty.util.concurrent.GlobalEventExecutor;
 
 import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
+import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
 import javax.net.ssl.SSLEngine;
@@ -439,15 +444,33 @@ public EventLoopGroup getEventLoopGroup() {
     }
 
     public ClientStats getClientStats() {
-        Map<String, Long> totalConnectionsPerHost = openChannels.stream().map(Channel::remoteAddress).filter(a -> a.getClass() == InetSocketAddress.class)
-                .map(a -> (InetSocketAddress) a).map(InetSocketAddress::getHostName).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    	        
+        Map<String, Long> totalConnectionsPerHost = new HashMap<>();
+        List<String> hostNames = new ArrayList<>();
+        for (Channel c : openChannels) {
+        	if (c.remoteAddress().getClass() == InetSocketAddress.class)
+        		hostNames.add(((InetSocketAddress) c.remoteAddress()).getHostName());
+        }
+        for (String h : hostNames) {
+        	if (!totalConnectionsPerHost.containsKey(h)) {
+        		totalConnectionsPerHost.put(h, 1L);
+        	} else {
+        		totalConnectionsPerHost.put(h, totalConnectionsPerHost.get(h)+1);
+        	}
+        }
+     
         Map<String, Long> idleConnectionsPerHost = channelPool.getIdleChannelCountPerHost();
-        Map<String, HostStats> statsPerHost = totalConnectionsPerHost.entrySet().stream().collect(Collectors.toMap(Entry::getKey, entry -> {
-            final long totalConnectionCount = entry.getValue();
-            final long idleConnectionCount = idleConnectionsPerHost.getOrDefault(entry.getKey(), 0L);
+        
+        Map<String, HostStats> statsPerHost = new HashMap<>();
+        for (Entry<String, Long> e : totalConnectionsPerHost.entrySet()) {
+        	final long totalConnectionCount = e.getValue();
+            final long idleConnectionCount = idleConnectionsPerHost.getOrDefault(e.getKey(), 0L);
             final long activeConnectionCount = totalConnectionCount - idleConnectionCount;
-            return new HostStats(activeConnectionCount, idleConnectionCount);
-        }));
+        	HostStats h = new HostStats(activeConnectionCount, idleConnectionCount);
+        	
+        	statsPerHost.put(e.getKey(), h);
+        }
+
         return new ClientStats(statsPerHost);
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
index d34cd3bd1..e2068d4b3 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
@@ -17,7 +17,9 @@
 import static org.asynchttpclient.util.DateUtils.unpreciseMillisTime;
 
 import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 import java.util.*;
+import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.TimeUnit;
@@ -377,15 +379,25 @@ public void flushPartitions(Predicate<Object> predicate) {
 
     @Override
     public Map<String, Long> getIdleChannelCountPerHost() {
-        return partitions
-                .values()
-                .stream()
-                .flatMap(ConcurrentLinkedDeque::stream)
-                .map(idle -> idle.getChannel().remoteAddress())
-                .filter(a -> a.getClass() == InetSocketAddress.class)
-                .map(a -> (InetSocketAddress) a)
-                .map(InetSocketAddress::getHostName)
-                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    	
+    	Map<String, Long> idleChannelCountPerHost = new HashMap<>();
+    	List<String> hostNames = new ArrayList<>();
+    	
+    	for (Entry<Object, ConcurrentLinkedDeque<IdleChannel>> e : partitions.entrySet()) {
+    		for (IdleChannel i : e.getValue()) {
+    			if (i.getChannel().remoteAddress().getClass() == InetSocketAddress.class)
+    				hostNames.add(((InetSocketAddress) i.getChannel().remoteAddress()).getHostName());
+    		}
+    	}
+
+    	for (String h : hostNames) {
+        	if (!idleChannelCountPerHost.containsKey(h)) {
+        		idleChannelCountPerHost.put(h, 1L);
+        	} else {
+        		idleChannelCountPerHost.put(h, idleChannelCountPerHost.get(h)+1);
+        	}
+        }
+		return idleChannelCountPerHost;
     }
 
     public enum PoolLeaseStrategy {
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
index 165d7c644..21056ed42 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
@@ -302,21 +302,28 @@ private Channel getOpenChannel(NettyResponseFuture<?> future, Request request, P
             return future;
         }
 
-        resolveAddresses(request, proxy, future, asyncHandler)//
-                .addListener(new SimpleFutureListener<List<InetSocketAddress>>() {
+        Future<List<InetSocketAddress>> futureAdress = resolveAddresses(request, proxy, future, asyncHandler);
+        
+        final NettyResponseFuture<T> f = future;
+        final Bootstrap b = bootstrap;
+        final Request r = request;
+        final AsyncHandler<T> a = asyncHandler;
+        final Object p = partitionKey;
+        
+        futureAdress.addListener(new SimpleFutureListener<List<InetSocketAddress>>() {
 
                     @Override
                     protected void onSuccess(List<InetSocketAddress> addresses) {
-                        NettyConnectListener<T> connectListener = new NettyConnectListener<>(future, NettyRequestSender.this, channelManager, connectionSemaphore, partitionKey);
-                        NettyChannelConnector connector = new NettyChannelConnector(request.getLocalAddress(), addresses, asyncHandler, clientState, config);
-                        if (!future.isDone()) {
-                            connector.connect(bootstrap, connectListener);
+                        NettyConnectListener<T> connectListener = new NettyConnectListener<>(f, NettyRequestSender.this, channelManager, connectionSemaphore, p);
+                        NettyChannelConnector connector = new NettyChannelConnector(r.getLocalAddress(), addresses, a, clientState, config);
+                        if (!f.isDone()) {
+                            connector.connect(b, connectListener);
                         }
                     }
 
                     @Override
                     protected void onFailure(Throwable cause) {
-                        abort(null, future, getCause(cause));
+                        abort(null, f, getCause(cause));
                     }
                 });
 
@@ -602,10 +609,12 @@ public boolean isClosed() {
     }
 
     public void drainChannelAndExecuteNextRequest(final Channel channel, final NettyResponseFuture<?> future, Request nextRequest) {
-        Channels.setAttribute(channel, new OnLastHttpContentCallback(future) {
+    	final Request n = nextRequest;
+    	final NettyResponseFuture<?> f = future;
+        Channels.setAttribute(channel, new OnLastHttpContentCallback(future) {        	
             @Override
             public void call() {
-                sendNextRequest(nextRequest, future);
+                sendNextRequest(n, f);
             }
         });
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
index c4f053e05..1d1562f3a 100755
--- a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
+++ b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
@@ -54,7 +54,7 @@
     protected FragmentedFrameType expectedFragmentedFrameType;
 
     public NettyWebSocket(Channel channel, HttpHeaders upgradeHeaders) {
-        this(channel, upgradeHeaders, new ConcurrentLinkedQueue<>());
+        this(channel, upgradeHeaders, new ConcurrentLinkedQueue<WebSocketListener>());
     }
 
     public NettyWebSocket(Channel channel, HttpHeaders upgradeHeaders, Collection<WebSocketListener> listeners) {
diff --git a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
index e743450aa..7bf35bfe2 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
@@ -57,20 +57,14 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -119,20 +113,14 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
             }).build()).get();
@@ -185,20 +173,14 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
             }).build()).get();
@@ -245,20 +227,14 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
             }).build()).get();
diff --git a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
index 40b231408..3d9a8a5b4 100644
--- a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
@@ -229,26 +229,18 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build());
 
diff --git a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
index 9f7da8581..51e9a1288 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
@@ -104,20 +104,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
diff --git a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
index a78baeb97..188901933 100644
--- a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
@@ -88,26 +88,18 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
diff --git a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
index 7d1c04b53..4cc6a022b 100644
--- a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
@@ -51,26 +51,18 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -127,26 +119,18 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -181,26 +165,18 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -242,20 +218,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -297,20 +267,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).addWebSocketListener(new WebSocketListener() {
 
@@ -337,20 +301,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -394,20 +352,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -446,20 +398,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
@@ -503,20 +449,14 @@ public void onError(Throwable t) {
 
 				@Override
 				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPingFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
 
 				@Override
 				public void onPongFrame(byte[] payload) {
-					// TODO Auto-generated method stub
-					
 				}
             }).build()).get();
 
diff --git a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
index 2c4fe2dc6..fa08b36d5 100644
--- a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
@@ -165,27 +165,19 @@ public void onClose(WebSocket websocket, int code, String reason) {
             }
 
 			@Override
-			public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-				// TODO Auto-generated method stub
-				
+			public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {	
 			}
 
 			@Override
-			public void onTextFrame(String payload, boolean finalFragment, int rsv) {
-				// TODO Auto-generated method stub
-				
+			public void onTextFrame(String payload, boolean finalFragment, int rsv) {		
 			}
 
 			@Override
 			public void onPingFrame(byte[] payload) {
-				// TODO Auto-generated method stub
-				
 			}
 
 			@Override
-			public void onPongFrame(byte[] payload) {
-				// TODO Auto-generated method stub
-				
+			public void onPongFrame(byte[] payload) {	
 			}
         }).build()).get();
     }
