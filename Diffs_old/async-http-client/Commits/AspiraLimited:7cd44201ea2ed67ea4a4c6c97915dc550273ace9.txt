diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index 7b0f946ea..e57d85d3f 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -247,9 +247,6 @@ protected void initChannel(Channel ch) throws Exception {
                 ChannelPipeline pipeline = ch.pipeline()//
                         .addLast(PINNED_ENTRY, pinnedEntry)//
                         .addLast(HTTP_CLIENT_CODEC, newHttpClientCodec())//
-//                        .addLast("http-aggregator",new HttpObjectAggregator(8192))
-//                        .addLast("ws-compression", WebSocketClientCompressionHandler.INSTANCE)
-//                        .addLast("ws-zlib", ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE))
                         .addLast("ws-compression", MyWebSocketClientCompressionHandler.INSTANCE)
                         .addLast(AHC_WS_HANDLER, wsHandler)
                         ;
@@ -407,15 +404,11 @@ public Bootstrap getBootstrap(Uri uri, ProxyServer proxy) {
 
     public void upgradePipelineForWebSockets(ChannelPipeline pipeline) {
         pipeline.addAfter(HTTP_CLIENT_CODEC, WS_ENCODER_HANDLER, new WebSocket08FrameEncoder(true));
-//        pipeline.addAfter("http-aggregator","ws-compression", MyWebSocketClientCompressionHandler.INSTANCE);
-//        pipeline.addAfter("ws-compression", WS_ENCODER_HANDLER, new WebSocket08FrameEncoder(true));
+        //for Bet365 live allowExtensions=true;
         pipeline.addBefore(WS_ENCODER_HANDLER, WS_DECODER_HANDLER, new WebSocket08FrameDecoder(false, true, config.getWebSocketMaxFrameSize()));
         if (config.isAggregateWebSocketFrameFragments()) {
             pipeline.addAfter(WS_DECODER_HANDLER, WS_FRAME_AGGREGATOR, new WebSocketFrameAggregator(config.getWebSocketMaxBufferSize()));
         }
-//        System.out.println("upgradePipelineForWebSockets names1="+pipeline.names());
-//        pipeline.addAfter(WS_DECODER_HANDLER,"ws-compression", MyWebSocketClientCompressionHandler.INSTANCE);
-//        System.out.println("upgradePipelineForWebSockets names2="+pipeline.names());
         pipeline.remove(HTTP_CLIENT_CODEC);
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyDeflateDecoder.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyDeflateDecoder.java
deleted file mode 100644
index 238bb9509..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyDeflateDecoder.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.CompositeByteBuf;
-import io.netty.buffer.Unpooled;
-import io.netty.channel.ChannelHandler;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.embedded.EmbeddedChannel;
-import io.netty.handler.codec.CodecException;
-import io.netty.handler.codec.compression.ZlibCodecFactory;
-import io.netty.handler.codec.compression.ZlibWrapper;
-import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.WebSocketFrame;
-import io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionDecoder;
-
-import java.util.List;
-
-/**
- * Created by elena on 24.07.17.
- */
-public abstract class MyDeflateDecoder extends WebSocketExtensionDecoder {
-    static final byte[] FRAME_TAIL = new byte[]{0, 0, -1, -1};
-    private final boolean noContext;
-    private EmbeddedChannel decoder;
-
-    public MyDeflateDecoder(boolean noContext) {
-        this.noContext = noContext;
-    }
-
-    protected abstract boolean appendFrameTail(WebSocketFrame var1);
-
-    protected abstract int newRsv(WebSocketFrame var1);
-
-    protected void decode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {
-        if(this.decoder == null) {
-            if(!(msg instanceof TextWebSocketFrame) && !(msg instanceof BinaryWebSocketFrame)) {
-                throw new CodecException("unexpected initial frame type: " + msg.getClass().getName());
-            }
-
-            this.decoder = new EmbeddedChannel(new ChannelHandler[]{ZlibCodecFactory.newZlibDecoder(ZlibWrapper.NONE)});
-        }
-
-        boolean readable = msg.content().isReadable();
-        this.decoder.writeInbound(new Object[]{msg.content().retain()});
-        if(this.appendFrameTail(msg)) {
-            this.decoder.writeInbound(new Object[]{Unpooled.wrappedBuffer(FRAME_TAIL)});
-        }
-
-        CompositeByteBuf compositeUncompressedContent = ctx.alloc().compositeBuffer();
-
-        while(true) {
-            ByteBuf partUncompressedContent = (ByteBuf)this.decoder.readInbound();
-            if(partUncompressedContent == null) {
-                if(readable && compositeUncompressedContent.numComponents() <= 0) {
-                    compositeUncompressedContent.release();
-                    throw new CodecException("cannot read uncompressed buffer");
-                }
-
-                if(msg.isFinalFragment() && this.noContext) {
-                    this.cleanup();
-                }
-
-                Object outMsg;
-                if(msg instanceof TextWebSocketFrame) {
-                    outMsg = new TextWebSocketFrame(msg.isFinalFragment(), this.newRsv(msg), compositeUncompressedContent);
-                } else if(msg instanceof BinaryWebSocketFrame) {
-                    outMsg = new BinaryWebSocketFrame(msg.isFinalFragment(), this.newRsv(msg), compositeUncompressedContent);
-                } else {
-                    if(!(msg instanceof ContinuationWebSocketFrame)) {
-                        throw new CodecException("unexpected frame type: " + msg.getClass().getName());
-                    }
-
-                    outMsg = new ContinuationWebSocketFrame(msg.isFinalFragment(), this.newRsv(msg), compositeUncompressedContent);
-                }
-
-                out.add(outMsg);
-                return;
-            }
-
-            if(!partUncompressedContent.isReadable()) {
-                partUncompressedContent.release();
-            } else {
-                compositeUncompressedContent.addComponent(true, partUncompressedContent);
-            }
-        }
-    }
-
-    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
-        this.cleanup();
-        super.handlerRemoved(ctx);
-    }
-
-    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
-        this.cleanup();
-        super.channelInactive(ctx);
-    }
-
-    private void cleanup() {
-        if(this.decoder != null) {
-            if(this.decoder.finish()) {
-                while(true) {
-                    ByteBuf buf = (ByteBuf)this.decoder.readOutbound();
-                    if(buf == null) {
-                        break;
-                    }
-
-                    buf.release();
-                }
-            }
-
-            this.decoder = null;
-        }
-
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyDeflateEncoder.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyDeflateEncoder.java
deleted file mode 100644
index 569b6c220..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyDeflateEncoder.java
+++ /dev/null
@@ -1,114 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.CompositeByteBuf;
-import io.netty.channel.ChannelHandler;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.embedded.EmbeddedChannel;
-import io.netty.handler.codec.CodecException;
-import io.netty.handler.codec.compression.ZlibCodecFactory;
-import io.netty.handler.codec.compression.ZlibWrapper;
-import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.WebSocketFrame;
-import io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionEncoder;
-//import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateDecoder;
-
-import java.util.List;
-
-/**
- * Created by elena on 24.07.17.
- */
-public abstract class MyDeflateEncoder extends WebSocketExtensionEncoder {
-    private final int compressionLevel;
-    private final int windowSize;
-    private final boolean noContext;
-    private EmbeddedChannel encoder;
-
-    public MyDeflateEncoder(int compressionLevel, int windowSize, boolean noContext) {
-        this.compressionLevel = compressionLevel;
-        this.windowSize = windowSize;
-        this.noContext = noContext;
-    }
-
-    protected abstract int rsv(WebSocketFrame var1);
-
-    protected abstract boolean removeFrameTail(WebSocketFrame var1);
-
-    protected void encode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {
-        if(this.encoder == null) {
-            this.encoder = new EmbeddedChannel(new ChannelHandler[]{ZlibCodecFactory.newZlibEncoder(ZlibWrapper.NONE, this.compressionLevel, this.windowSize, 8)});
-        }
-
-        this.encoder.writeOutbound(new Object[]{msg.content().retain()});
-        CompositeByteBuf fullCompressedContent = ctx.alloc().compositeBuffer();
-
-        while(true) {
-            ByteBuf partCompressedContent = (ByteBuf)this.encoder.readOutbound();
-            if(partCompressedContent == null) {
-                if(fullCompressedContent.numComponents() <= 0) {
-                    fullCompressedContent.release();
-                    throw new CodecException("cannot read compressed buffer");
-                }
-
-                if(msg.isFinalFragment() && this.noContext) {
-                    this.cleanup();
-                }
-
-                Object compressedContent;
-                if(this.removeFrameTail(msg)) {
-                    int realLength = fullCompressedContent.readableBytes() - MyPerMessageDeflateDecoder.FRAME_TAIL.length;
-                    compressedContent = fullCompressedContent.slice(0, realLength);
-                } else {
-                    compressedContent = fullCompressedContent;
-                }
-
-                Object outMsg;
-                if(msg instanceof TextWebSocketFrame) {
-                    outMsg = new TextWebSocketFrame(msg.isFinalFragment(), this.rsv(msg), (ByteBuf)compressedContent);
-                } else if(msg instanceof BinaryWebSocketFrame) {
-                    outMsg = new BinaryWebSocketFrame(msg.isFinalFragment(), this.rsv(msg), (ByteBuf)compressedContent);
-                } else {
-                    if(!(msg instanceof ContinuationWebSocketFrame)) {
-                        throw new CodecException("unexpected frame type: " + msg.getClass().getName());
-                    }
-
-                    outMsg = new ContinuationWebSocketFrame(msg.isFinalFragment(), this.rsv(msg), (ByteBuf)compressedContent);
-                }
-
-                out.add(outMsg);
-                return;
-            }
-
-            if(!partCompressedContent.isReadable()) {
-                partCompressedContent.release();
-            } else {
-                fullCompressedContent.addComponent(true, partCompressedContent);
-            }
-        }
-    }
-
-    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
-        this.cleanup();
-        super.handlerRemoved(ctx);
-    }
-
-    private void cleanup() {
-        if(this.encoder != null) {
-            if(this.encoder.finish()) {
-                while(true) {
-                    ByteBuf buf = (ByteBuf)this.encoder.readOutbound();
-                    if(buf == null) {
-                        break;
-                    }
-
-                    buf.release();
-                }
-            }
-
-            this.encoder = null;
-        }
-
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateClientExtensionHandshaker.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateClientExtensionHandshaker.java
deleted file mode 100644
index c4d4aecd6..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateClientExtensionHandshaker.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.handler.codec.compression.ZlibCodecFactory;
-import io.netty.handler.codec.http.websocketx.extensions.*;
-//import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateClientExtensionHandshaker;
-//import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateDecoder;
-//import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateEncoder;
-
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-/**
- * Created by elena on 24.07.17.
- */
-public class MyPerMessageDeflateClientExtensionHandshaker implements WebSocketClientExtensionHandshaker {
-    private final int compressionLevel;
-    private final boolean allowClientWindowSize;
-    private final int requestedServerWindowSize;
-    private final boolean allowClientNoContext;
-    private final boolean requestedServerNoContext;
-
-    public MyPerMessageDeflateClientExtensionHandshaker() {
-        this(6, ZlibCodecFactory.isSupportingWindowSizeAndMemLevel(), 15, false, false);
-    }
-
-    public MyPerMessageDeflateClientExtensionHandshaker(int compressionLevel, boolean allowClientWindowSize, int requestedServerWindowSize, boolean allowClientNoContext, boolean requestedServerNoContext) {
-        if(requestedServerWindowSize <= 15 && requestedServerWindowSize >= 8) {
-            if(compressionLevel >= 0 && compressionLevel <= 9) {
-                this.compressionLevel = compressionLevel;
-                this.allowClientWindowSize = allowClientWindowSize;
-                this.requestedServerWindowSize = requestedServerWindowSize;
-                this.allowClientNoContext = allowClientNoContext;
-                this.requestedServerNoContext = requestedServerNoContext;
-            } else {
-                throw new IllegalArgumentException("compressionLevel: " + compressionLevel + " (expected: 0-9)");
-            }
-        } else {
-            throw new IllegalArgumentException("requestedServerWindowSize: " + requestedServerWindowSize + " (expected: 8-15)");
-        }
-    }
-
-    public WebSocketExtensionData newRequestData() {
-        HashMap parameters = new HashMap(4);
-        if(this.requestedServerWindowSize != 15) {
-            parameters.put("server_no_context_takeover", (Object)null);
-        }
-
-        if(this.allowClientNoContext) {
-            parameters.put("client_no_context_takeover", (Object)null);
-        }
-
-        if(this.requestedServerWindowSize != 15) {
-            parameters.put("server_max_window_bits", Integer.toString(this.requestedServerWindowSize));
-        }
-
-        if(this.allowClientWindowSize) {
-            parameters.put("client_max_window_bits", (Object)null);
-        }
-
-//        System.out.println("MyPerMessageDeflateClientExtensionHandshaker parameters="+parameters);
-        return new WebSocketExtensionData("permessage-deflate", parameters);
-    }
-
-    public WebSocketClientExtension handshakeExtension(WebSocketExtensionData extensionData) {
-        if(!"permessage-deflate".equals(extensionData.name())) {
-            return null;
-        } else {
-            boolean succeed = true;
-            int clientWindowSize = 15;
-            int serverWindowSize = 15;
-            boolean serverNoContext = false;
-            boolean clientNoContext = false;
-            Iterator parametersIterator = extensionData.parameters().entrySet().iterator();
-
-            while(succeed && parametersIterator.hasNext()) {
-                Map.Entry<String, String> parameter = (Map.Entry)parametersIterator.next();
-                if("client_max_window_bits".equalsIgnoreCase((String)parameter.getKey())) {
-                    if(this.allowClientWindowSize) {
-                        clientWindowSize = Integer.parseInt((String)parameter.getValue());
-                    } else {
-                        succeed = false;
-                    }
-                } else if("server_max_window_bits".equalsIgnoreCase((String)parameter.getKey())) {
-                    serverWindowSize = Integer.parseInt((String)parameter.getValue());
-                    if(clientWindowSize > 15 || clientWindowSize < 8) {
-                        succeed = false;
-                    }
-                } else if("client_no_context_takeover".equalsIgnoreCase((String)parameter.getKey())) {
-                    if(this.allowClientNoContext) {
-                        clientNoContext = true;
-                    } else {
-                        succeed = false;
-                    }
-                } else if("server_no_context_takeover".equalsIgnoreCase((String)parameter.getKey())) {
-                    if(this.requestedServerNoContext) {
-                        serverNoContext = true;
-                    } else {
-                        succeed = false;
-                    }
-                } else {
-                    succeed = false;
-                }
-            }
-
-            if(this.requestedServerNoContext && !serverNoContext || this.requestedServerWindowSize != serverWindowSize) {
-                succeed = false;
-            }
-
-            return succeed?new MyPerMessageDeflateClientExtensionHandshaker.PermessageDeflateExtension(serverNoContext, serverWindowSize, clientNoContext, clientWindowSize):null;
-        }
-    }
-
-    private final class PermessageDeflateExtension implements WebSocketClientExtension {
-        private final boolean serverNoContext;
-        private final int serverWindowSize;
-        private final boolean clientNoContext;
-        private final int clientWindowSize;
-
-        public int rsv() {
-            return 4;
-        }
-
-        public PermessageDeflateExtension(boolean serverNoContext, int serverWindowSize, boolean clientNoContext, int clientWindowSize) {
-            this.serverNoContext = serverNoContext;
-            this.serverWindowSize = serverWindowSize;
-            this.clientNoContext = clientNoContext;
-            this.clientWindowSize = clientWindowSize;
-        }
-
-        public WebSocketExtensionEncoder newExtensionEncoder() {
-            return new MyPerMessageDeflateEncoder(MyPerMessageDeflateClientExtensionHandshaker.this.compressionLevel, this.serverWindowSize, this.serverNoContext);
-        }
-
-        public WebSocketExtensionDecoder newExtensionDecoder() {
-            return new MyPerMessageDeflateDecoder(this.clientNoContext);
-        }
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateDecoder.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateDecoder.java
deleted file mode 100644
index 01208d6de..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateDecoder.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.WebSocketFrame;
-import org.asynchttpclient.ws.WebSocket;
-//import io.netty.handler.codec.http.websocketx.extensions.compression.DeflateDecoder;
-
-import java.util.List;
-
-/**
- * Created by elena on 24.07.17.
- */
-public class MyPerMessageDeflateDecoder extends MyDeflateDecoder {
-    private boolean compressing;
-
-    public MyPerMessageDeflateDecoder(boolean noContext) {
-        super(noContext);
-    }
-
-    public boolean acceptInboundMessage(Object msg) throws Exception {
-//        System.out.println("acceptInboundMessage class="+msg.getClass());
-        if(msg instanceof TextWebSocketFrame || msg instanceof BinaryWebSocketFrame){
-            WebSocketFrame webSocketFrame = (WebSocketFrame)msg;
-//            System.out.println("acceptInboundMessage rsv="+webSocketFrame.rsv()+ " compressing="+this.compressing);
-        }
-        return (msg instanceof TextWebSocketFrame || msg instanceof BinaryWebSocketFrame)
-                && (((WebSocketFrame)msg).rsv() & 4) > 0
-                || msg instanceof ContinuationWebSocketFrame
-                && this.compressing;
-    }
-
-    protected int newRsv(WebSocketFrame msg) {
-        return (msg.rsv() & 4) > 0?msg.rsv() ^ 4:msg.rsv();
-    }
-
-    protected boolean appendFrameTail(WebSocketFrame msg) {
-        return msg.isFinalFragment();
-    }
-
-    protected void decode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {
-        super.decode(ctx, msg, out);
-        if(msg.isFinalFragment()) {
-//            if(msg.rsv()==4){
-//                this.compressing = true;
-//            }else{
-                this.compressing = false;
-//            }
-        } else if(msg instanceof TextWebSocketFrame || msg instanceof BinaryWebSocketFrame) {
-            this.compressing = true;
-        }
-
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateEncoder.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateEncoder.java
deleted file mode 100644
index 85b2fffdd..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyPerMessageDeflateEncoder.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.WebSocketFrame;
-//import io.netty.handler.codec.http.websocketx.extensions.compression.DeflateEncoder;
-
-import java.util.List;
-
-/**
- * Created by elena on 24.07.17.
- */
-public class MyPerMessageDeflateEncoder extends MyDeflateEncoder {
-    private boolean compressing;
-
-    public MyPerMessageDeflateEncoder(int compressionLevel, int windowSize, boolean noContext) {
-        super(compressionLevel, windowSize, noContext);
-    }
-
-    public boolean acceptOutboundMessage(Object msg) throws Exception {
-        return (msg instanceof TextWebSocketFrame || msg instanceof BinaryWebSocketFrame) && (((WebSocketFrame)msg).rsv() & 4) == 0 || msg instanceof ContinuationWebSocketFrame && this.compressing;
-    }
-
-    protected int rsv(WebSocketFrame msg) {
-        return !(msg instanceof TextWebSocketFrame) && !(msg instanceof BinaryWebSocketFrame)?msg.rsv():msg.rsv() | 4;
-    }
-
-    protected boolean removeFrameTail(WebSocketFrame msg) {
-        return msg.isFinalFragment();
-    }
-
-    protected void encode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {
-        super.encode(ctx, msg, out);
-        if(msg.isFinalFragment()) {
-            this.compressing = false;
-        } else if(msg instanceof TextWebSocketFrame || msg instanceof BinaryWebSocketFrame) {
-            this.compressing = true;
-        }
-
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientCompressionHandler.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientCompressionHandler.java
index 585dfcf27..7d955fc2c 100644
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientCompressionHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientCompressionHandler.java
@@ -7,14 +7,17 @@
 import io.netty.handler.codec.http.websocketx.extensions.compression.DeflateFrameClientExtensionHandshaker;
 import io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateClientExtensionHandshaker;
 
-
+/**CompressionHandler вместо WebSocketClientCompressionHandler
+ * for bet365 live WebSocketClientCompressionHandler - не подходит т.к.
+ * в PerMessageDeflateClientExtensionHandshaker нужно передать requestedServerNoContext=true
+ * */
 @Sharable
-public class MyWebSocketClientCompressionHandler extends MyWebSocketClientExtensionHandler {
+public class MyWebSocketClientCompressionHandler extends WebSocketClientExtensionHandler {
 
     public static final MyWebSocketClientCompressionHandler INSTANCE = new MyWebSocketClientCompressionHandler();
 
     private MyWebSocketClientCompressionHandler() {
-        super(new MyPerMessageDeflateClientExtensionHandshaker(6, ZlibCodecFactory.isSupportingWindowSizeAndMemLevel(), 15, false, true),
+        super(new PerMessageDeflateClientExtensionHandshaker(6, ZlibCodecFactory.isSupportingWindowSizeAndMemLevel(), 15, false, true),
                 new DeflateFrameClientExtensionHandshaker(false),
                 new DeflateFrameClientExtensionHandshaker(true));
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientExtensionHandler.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientExtensionHandler.java
deleted file mode 100644
index f8a7e740c..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketClientExtensionHandler.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.channel.ChannelDuplexHandler;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelPromise;
-import io.netty.handler.codec.CodecException;
-import io.netty.handler.codec.http.HttpHeaderNames;
-import io.netty.handler.codec.http.HttpRequest;
-import io.netty.handler.codec.http.HttpResponse;
-import io.netty.handler.codec.http.websocketx.extensions.*;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * Created by elena on 24.07.17.
- */
-public class MyWebSocketClientExtensionHandler extends ChannelDuplexHandler {
-    private final List<WebSocketClientExtensionHandshaker> extensionHandshakers;
-
-    public MyWebSocketClientExtensionHandler(WebSocketClientExtensionHandshaker... extensionHandshakers) {
-        if(extensionHandshakers == null) {
-            throw new NullPointerException("extensionHandshakers");
-        } else if(extensionHandshakers.length == 0) {
-            throw new IllegalArgumentException("extensionHandshakers must contains at least one handshaker");
-        } else {
-            this.extensionHandshakers = Arrays.asList(extensionHandshakers);
-        }
-    }
-
-    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {
-        if(msg instanceof HttpRequest && MyWebSocketExtensionUtil.isWebsocketUpgrade(((HttpRequest)msg).headers())) {
-            HttpRequest request = (HttpRequest)msg;
-            String headerValue = request.headers().getAsString(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS);
-
-            WebSocketExtensionData extensionData;
-            for(Iterator var6 = this.extensionHandshakers.iterator(); var6.hasNext(); headerValue = MyWebSocketExtensionUtil.appendExtension(headerValue, extensionData.name(), extensionData.parameters())) {
-                WebSocketClientExtensionHandshaker extensionHandshaker = (WebSocketClientExtensionHandshaker)var6.next();
-                extensionData = extensionHandshaker.newRequestData();
-            }
-
-            request.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, headerValue);
-        }
-
-        super.write(ctx, msg, promise);
-    }
-
-    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
-//        System.out.println("ctx.name="+ctx.name()+" msg="+msg.getClass());
-        if(msg instanceof HttpResponse) {
-            HttpResponse response = (HttpResponse)msg;
-            if(MyWebSocketExtensionUtil.isWebsocketUpgrade(response.headers())) {
-                String extensionsHeader = response.headers().getAsString(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS);
-                if(extensionsHeader != null) {
-                    List<WebSocketExtensionData> extensions = WebSocketExtensionUtil.extractExtensions(extensionsHeader);
-                    List<WebSocketClientExtension> validExtensions = new ArrayList(extensions.size());
-                    int rsv = 0;
-                    Iterator var8 = extensions.iterator();
-
-                    label51:
-                    while(true) {
-                        if(!var8.hasNext()) {
-                            var8 = validExtensions.iterator();
-
-                            while(true) {
-                                if(!var8.hasNext()) {
-                                    break label51;
-                                }
-
-                                WebSocketClientExtension validExtension = (WebSocketClientExtension)var8.next();
-                                WebSocketExtensionDecoder decoder = validExtension.newExtensionDecoder();
-                                WebSocketExtensionEncoder encoder = validExtension.newExtensionEncoder();
-                                ctx.pipeline().addAfter(ctx.name(), decoder.getClass().getName(), decoder);
-//                                ctx.pipeline().addAfter(ctx.name(), encoder.getClass().getName(), encoder);
-//                                ctx.pipeline().addAfter("ws-decoder", decoder.getClass().getName(), decoder);
-                                ctx.pipeline().addAfter(decoder.getClass().getName(), encoder.getClass().getName(), encoder);
-//                                System.out.println("ctx.pipeline().names()"+ctx.pipeline().names());
-                            }
-                        }
-
-                        WebSocketExtensionData extensionData = (WebSocketExtensionData)var8.next();
-                        Iterator<WebSocketClientExtensionHandshaker> extensionHandshakersIterator = this.extensionHandshakers.iterator();
-
-                        WebSocketClientExtension validExtension;
-                        WebSocketClientExtensionHandshaker extensionHandshaker;
-                        for(validExtension = null; validExtension == null && extensionHandshakersIterator.hasNext(); validExtension = extensionHandshaker.handshakeExtension(extensionData)) {
-                            extensionHandshaker = (WebSocketClientExtensionHandshaker)extensionHandshakersIterator.next();
-                        }
-
-                        if(validExtension == null || (validExtension.rsv() & rsv) != 0) {
-                            throw new CodecException("invalid WebSocket Extension handshake for \"" + extensionsHeader + '"');
-                        }
-
-                        rsv |= validExtension.rsv();
-                        validExtensions.add(validExtension);
-                    }
-                }
-
-                ctx.pipeline().remove(ctx.name());
-            }
-        }
-
-        super.channelRead(ctx, msg);
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketExtensionUtil.java b/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketExtensionUtil.java
deleted file mode 100644
index 2f0dbf471..000000000
--- a/client/src/main/java/org/asynchttpclient/netty/channel/MyWebSocketExtensionUtil.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package org.asynchttpclient.netty.channel;
-
-import io.netty.handler.codec.http.HttpHeaderNames;
-import io.netty.handler.codec.http.HttpHeaderValues;
-import io.netty.handler.codec.http.HttpHeaders;
-import io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData;
-
-import java.util.*;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * Created by elena on 24.07.17.
- */
-public class MyWebSocketExtensionUtil {
-    private static final String EXTENSION_SEPARATOR = ",";
-    private static final String PARAMETER_SEPARATOR = ";";
-    private static final char PARAMETER_EQUAL = '=';
-    private static final Pattern PARAMETER = Pattern.compile("^([^=]+)(=[\\\"]?([^\\\"]+)[\\\"]?)?$");
-
-    static boolean isWebsocketUpgrade(HttpHeaders headers) {
-        return headers.containsValue(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE, true) && headers.contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true);
-    }
-
-    public static List<WebSocketExtensionData> extractExtensions(String extensionHeader) {
-        String[] rawExtensions = extensionHeader.split(",");
-        if(rawExtensions.length <= 0) {
-            return Collections.emptyList();
-        } else {
-            List<WebSocketExtensionData> extensions = new ArrayList(rawExtensions.length);
-            String[] var3 = rawExtensions;
-            int var4 = rawExtensions.length;
-
-            for(int var5 = 0; var5 < var4; ++var5) {
-                String rawExtension = var3[var5];
-                String[] extensionParameters = rawExtension.split(";");
-                String name = extensionParameters[0].trim();
-                Object parameters;
-                if(extensionParameters.length > 1) {
-                    parameters = new HashMap(extensionParameters.length - 1);
-
-                    for(int i = 1; i < extensionParameters.length; ++i) {
-                        String parameter = extensionParameters[i].trim();
-                        Matcher parameterMatcher = PARAMETER.matcher(parameter);
-                        if(parameterMatcher.matches() && parameterMatcher.group(1) != null) {
-                            ((Map)parameters).put(parameterMatcher.group(1), parameterMatcher.group(3));
-                        }
-                    }
-                } else {
-                    parameters = Collections.emptyMap();
-                }
-
-                extensions.add(new WebSocketExtensionData(name, (Map)parameters));
-            }
-
-            return extensions;
-        }
-    }
-
-    static String appendExtension(String currentHeaderValue, String extensionName, Map<String, String> extensionParameters) {
-        StringBuilder newHeaderValue = new StringBuilder(currentHeaderValue != null?currentHeaderValue.length():extensionName.length() + 1);
-        if(currentHeaderValue != null && !currentHeaderValue.trim().isEmpty()) {
-            newHeaderValue.append(currentHeaderValue);
-            newHeaderValue.append(",");
-        }
-
-        newHeaderValue.append(extensionName);
-        Iterator var4 = extensionParameters.entrySet().iterator();
-
-        while(var4.hasNext()) {
-            Map.Entry<String, String> extensionParameter = (Map.Entry)var4.next();
-            newHeaderValue.append(";");
-            newHeaderValue.append((String)extensionParameter.getKey());
-            if(extensionParameter.getValue() != null) {
-                newHeaderValue.append('=');
-                newHeaderValue.append((String)extensionParameter.getValue());
-            }
-        }
-
-        return newHeaderValue.toString();
-    }
-
-    private MyWebSocketExtensionUtil() {
-    }
-}
