diff --git a/client/src/main/java/java/added/Predicate.java b/client/src/main/java/java/added/Predicate.java
index a81029127..7d806f032 100644
--- a/client/src/main/java/java/added/Predicate.java
+++ b/client/src/main/java/java/added/Predicate.java
@@ -1,5 +1,98 @@
 package java.added;
 
-public class Predicate {
+/**
+ * Represents a predicate (boolean-valued function) of one argument.
+ *
+ * <p>This is a <a href="package-summary.html">functional interface</a>
+ * whose functional method is {@link #test(Object)}.
+ *
+ * @param <T> the type of the input to the predicate
+ *
+ * @since 1.8
+ */
+public interface Predicate<T> {
 
+    /**
+     * Evaluates this predicate on the given argument.
+     *
+     * @param t the input argument
+     * @return {@code true} if the input argument matches the predicate,
+     * otherwise {@code false}
+     */
+    boolean test(T t);
+
+//    /**
+//     * Returns a composed predicate that represents a short-circuiting logical
+//     * AND of this predicate and another.  When evaluating the composed
+//     * predicate, if this predicate is {@code false}, then the {@code other}
+//     * predicate is not evaluated.
+//     *
+//     * <p>Any exceptions thrown during evaluation of either predicate are relayed
+//     * to the caller; if evaluation of this predicate throws an exception, the
+//     * {@code other} predicate will not be evaluated.
+//     *
+//     * @param other a predicate that will be logically-ANDed with this
+//     *              predicate
+//     * @return a composed predicate that represents the short-circuiting logical
+//     * AND of this predicate and the {@code other} predicate
+//     * @throws NullPointerException if other is null
+//     */
+//    default Predicate<T> and(Predicate<? super T> other) 
+//    {
+//        Objects.requireNonNull(other);
+//        return (t) -> test(t) && other.test(t);
+//    }
+//
+//    /**
+//     * Returns a predicate that represents the logical negation of this
+//     * predicate.
+//     *
+//     * @return a predicate that represents the logical negation of this
+//     * predicate
+//     */
+//    default Predicate<T> negate() 
+//    {        
+//        return test(t);
+//    }
+//
+//    /**
+//     * Returns a composed predicate that represents a short-circuiting logical
+//     * OR of this predicate and another.  When evaluating the composed
+//     * predicate, if this predicate is {@code true}, then the {@code other}
+//     * predicate is not evaluated.
+//     *
+//     * <p>Any exceptions thrown during evaluation of either predicate are relayed
+//     * to the caller; if evaluation of this predicate throws an exception, the
+//     * {@code other} predicate will not be evaluated.
+//     *
+//     * @param other a predicate that will be logically-ORed with this
+//     *              predicate
+//     * @return a composed predicate that represents the short-circuiting logical
+//     * OR of this predicate and the {@code other} predicate
+//     * @throws NullPointerException if other is null
+//     */
+//    default Predicate<T> or(Predicate<? super T> other) 
+//    {
+//        Objects.requireNonNull(other);
+//        return (t) -> test(t) || other.test(t);
+//        
+//    }
+//
+//    /**
+//     * Returns a predicate that tests if two arguments are equal according
+//     * to {@link Objects#equals(Object, Object)}.
+//     *
+//     * @param <T> the type of arguments to the predicate
+//     * @param targetRef the object reference with which to compare for equality,
+//     *               which may be {@code null}
+//     * @return a predicate that tests if two arguments are equal according
+//     * to {@link Objects#equals(Object, Object)}
+//     */
+//    static <T> Predicate<T> isEqual(Object targetRef) 
+//    {
+//        if (null == targetRef)
+//        	return Objects::isNull; 
+//        else 
+//        	return object -> targetRef.equals(object);
+//    }
 }
diff --git a/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java b/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
index 7d1c0c650..90014fcd0 100755
--- a/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
@@ -18,7 +18,6 @@
 
 import java.io.Closeable;
 import java.util.concurrent.Future;
-import java.util.function.Predicate;
 
 /**
  * This class support asynchronous and synchronous HTTP request.
@@ -275,16 +274,11 @@
      */
     ClientStats getClientStats();
 
-    /**
-     * Flush ChannelPool partitions based on a predicate
-     * 
-     * @param predicate the predicate
-     */
-    void flushChannelPoolPartitions(Predicate<Object> predicate);
-
     /**
      * Return the config associated to this client.
      * @return the config associated to this client.
      */
     AsyncHttpClientConfig getConfig();
+
+	void flushChannelPoolPartitions(java.added.Predicate<Object> predicate);
 }
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
index 1a8256c66..d87fd7972 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
@@ -21,8 +21,8 @@
 import io.netty.util.HashedWheelTimer;
 import io.netty.util.Timer;
 
+import java.added.Predicate;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.function.Predicate;
 
 import org.asynchttpclient.channel.ChannelPool;
 import org.asynchttpclient.filter.FilterContext;
diff --git a/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java b/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
index 9ec7048a3..afc626daa 100644
--- a/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
+++ b/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
@@ -36,7 +36,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import java.util.function.BiConsumer;
+import java.util.Map.Entry;
 
 import org.asynchttpclient.channel.ChannelPoolPartitioning;
 import org.asynchttpclient.proxy.ProxyServer;
@@ -275,12 +275,16 @@ public T setHeaders(HttpHeaders headers) {
     public T setHeaders(Map<CharSequence, ? extends Iterable<?>> headers) {
         clearHeaders();
         if (headers != null) {
-            headers.forEach(new BiConsumer<CharSequence, Iterable>() {
-				@Override
-				public void accept(CharSequence name, Iterable values) {
-					RequestBuilderBase.this.headers.add(name, values);
-				}
-			});
+//            headers.forEach(new BiConsumer<CharSequence, Iterable>() {
+//				@Override
+//				public void accept(CharSequence name, Iterable values) {
+//					RequestBuilderBase.this.headers.add(name, values);
+//				}
+//			});
+
+            for (Entry<CharSequence, ? extends Iterable<?>> h : headers.entrySet()) {
+            	RequestBuilderBase.this.headers.add(h.getKey(), h.getValue());
+            }
         }
         return asDerivedType();
     }
@@ -295,12 +299,16 @@ public void accept(CharSequence name, Iterable values) {
     public T setSingleHeaders(Map<CharSequence, ?> headers) {
         clearHeaders();
         if (headers != null) {
-            headers.forEach(new BiConsumer<CharSequence, Object>() {
-				@Override
-				public void accept(CharSequence name, Object value) {
-					RequestBuilderBase.this.headers.add(name, value);
-				}
-			});
+//            headers.forEach(new BiConsumer<CharSequence, Object>() {
+//				@Override
+//				public void accept(CharSequence name, Object value) {
+//					RequestBuilderBase.this.headers.add(name, value);
+//				}
+//			});
+        	
+        	for (Entry<CharSequence, ?> h : headers.entrySet()) {
+            	RequestBuilderBase.this.headers.add(h.getKey(), h.getValue());
+            }
         }
         return asDerivedType();
     }
diff --git a/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java b/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java
index 91de4de84..06ac828ac 100755
--- a/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java
@@ -14,7 +14,6 @@
 package org.asynchttpclient.channel;
 
 import java.util.Map;
-import java.util.function.Predicate;
 
 import io.netty.channel.Channel;
 
@@ -60,15 +59,10 @@
      */
     void destroy();
 
-    /**
-     * Flush partitions based on a predicate
-     * 
-     * @param predicate the predicate
-     */
-    void flushPartitions(Predicate<Object> predicate);
-
     /**
      * @return The number of idle channels per host.
      */
     Map<String, Long> getIdleChannelCountPerHost();
+
+	void flushPartitions(java.added.Predicate<Object> predicate);
 }
diff --git a/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java b/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java
index 281f3f127..6b10cb9d3 100644
--- a/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java
@@ -15,9 +15,9 @@
 
 import io.netty.channel.Channel;
 
+import java.added.Predicate;
 import java.util.Collections;
 import java.util.Map;
-import java.util.function.Predicate;
 
 public enum NoopChannelPool implements ChannelPool {
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
index b0c02252b..f6f28a4b4 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
@@ -16,6 +16,7 @@
 import static org.asynchttpclient.util.Assertions.assertNotNull;
 import static org.asynchttpclient.util.DateUtils.unpreciseMillisTime;
 
+import java.added.Predicate;
 import java.net.InetSocketAddress;
 import java.util.*;
 import java.util.Map.Entry;
@@ -24,8 +25,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-import java.util.function.Function;
-import java.util.function.Predicate;
 
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.channel.ChannelPool;
