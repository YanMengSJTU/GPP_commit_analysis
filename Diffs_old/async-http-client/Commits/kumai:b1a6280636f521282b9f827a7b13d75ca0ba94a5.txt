diff --git a/src/main/java/com/ning/http/client/Realm.java b/src/main/java/com/ning/http/client/Realm.java
index 07c84bfa3..8e68142c9 100644
--- a/src/main/java/com/ning/http/client/Realm.java
+++ b/src/main/java/com/ning/http/client/Realm.java
@@ -16,6 +16,8 @@
  */
 package com.ning.http.client;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -579,7 +581,7 @@ private static String toBase16(byte[] bytes) {
         public Realm build() {
 
             // Avoid generating
-            if (nonce != null && !nonce.equals("")) {
+            if (isNonEmpty(nonce)) {
                 newCnonce();
                 try {
                     newResponse();
diff --git a/src/main/java/com/ning/http/client/RequestBuilderBase.java b/src/main/java/com/ning/http/client/RequestBuilderBase.java
index 46b0be93b..b860cc580 100644
--- a/src/main/java/com/ning/http/client/RequestBuilderBase.java
+++ b/src/main/java/com/ning/http/client/RequestBuilderBase.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.Request.EntityWriter;
 import com.ning.http.util.UTF8UrlEncoder;
 import org.slf4j.Logger;
@@ -145,7 +147,7 @@ private String toUrl(boolean encode) {
                 }
             }
 
-            if (queryParams != null && !queryParams.isEmpty()) {
+            if (isNonEmpty(queryParams)) {
 
                 StringBuilder builder = new StringBuilder();
                 if (!url.substring(8).contains("/")) { // no other "/" than http[s]:// -> http://localhost:1234
@@ -300,7 +302,7 @@ public String toString() {
             sb.append("\t");
             sb.append(method);
             sb.append("\theaders:");
-            if (headers != null && !headers.isEmpty()) {
+            if (isNonEmpty(headers)) {
                 for (String name : headers.keySet()) {
                     sb.append("\t");
                     sb.append(name);
@@ -308,7 +310,7 @@ public String toString() {
                     sb.append(headers.getJoinedValue(name, ", "));
                 }
             }
-            if (params != null && !params.isEmpty()) {
+            if (isNonEmpty(params)) {
                 sb.append("\tparams:");
                 for (String name : params.keySet()) {
                     sb.append("\t");
@@ -384,7 +386,7 @@ private String buildUrl(String url) {
             }
         }
 
-        if (uri.getRawQuery() != null && !uri.getRawQuery().equals("")) {
+        if (isNonEmpty(uri.getRawQuery())) {
             String[] queries = uri.getRawQuery().split("&");
             int pos;
             for (String query : queries) {
diff --git a/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java b/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
index a56c9bf14..00023369e 100644
--- a/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
+++ b/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
@@ -38,16 +38,19 @@
 
 package com.ning.http.client.ntlm;
 
-import com.ning.http.util.Base64;
+import static com.ning.http.util.MiscUtil.isNonEmpty;
 
-import javax.crypto.Cipher;
-import javax.crypto.spec.SecretKeySpec;
 import java.io.UnsupportedEncodingException;
 import java.security.Key;
 import java.security.MessageDigest;
 import java.util.Arrays;
 import java.util.Locale;
 
+import javax.crypto.Cipher;
+import javax.crypto.spec.SecretKeySpec;
+
+import com.ning.http.util.Base64;
+
 /**
  * Provides an implementation for NTLMv1, NTLMv2, and NTLM2 Session forms of the NTLM
  * authentication protocol.
@@ -123,12 +126,12 @@ final String getResponseFor(String message, String username, String password,
                                 String host, String domain) throws NTLMEngineException {
 
         final String response;
-        if (message == null || message.trim().equals("")) {
-            response = getType1Message(host, domain);
-        } else {
+        if (isNonEmpty(message)) {
             Type2Message t2m = new Type2Message(message);
             response = getType3Message(username, password, host, domain, t2m.getChallenge(), t2m
                     .getFlags(), t2m.getTarget(), t2m.getTargetInfo());
+        } else {
+            response = getType1Message(host, domain);
         }
         return response;
     }
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
index ac1531bef..062ab4c68 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.apache;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.AsyncHttpProvider;
@@ -355,7 +357,7 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
         }
 
         method.setFollowRedirects(false);
-        if ((request.getCookies() != null) && !request.getCookies().isEmpty()) {
+        if (isNonEmpty(request.getCookies())) {
             for (Cookie cookie : request.getCookies()) {
                 method.setRequestHeader("Cookie", AsyncHttpProviderUtils.encodeCookies(request.getCookies()));
             }
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
index 52a99f3f1..d899a40ed 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.apache;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
@@ -190,6 +192,6 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return bodyParts != null && !bodyParts.isEmpty();
+        return isNonEmpty(bodyParts);
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index c47bbc2f3..a3cb4613b 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -13,6 +13,8 @@
 
 package com.ning.http.client.providers.grizzly;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.AsyncHttpProvider;
@@ -970,11 +972,11 @@ private void addHeaders(final Request request,
                                 final HttpRequestPacket requestPacket) {
 
             final FluentCaseInsensitiveStringsMap map = request.getHeaders();
-            if (map != null && !map.isEmpty()) {
+            if (isNonEmpty(map)) {
                 for (final Map.Entry<String, List<String>> entry : map.entrySet()) {
                     final String headerName = entry.getKey();
                     final List<String> headerValues = entry.getValue();
-                    if (headerValues != null && !headerValues.isEmpty()) {
+                    if (isNonEmpty(headerValues)) {
                         for (final String headerValue : headerValues) {
                             requestPacket.addHeader(headerName, headerValue);
                         }
@@ -1003,7 +1005,7 @@ private void addCookies(final Request request,
                                 final HttpRequestPacket requestPacket) {
 
             final Collection<Cookie> cookies = request.getCookies();
-            if (cookies != null && !cookies.isEmpty()) {
+            if (isNonEmpty(cookies)) {
                 StringBuilder sb = new StringBuilder(128);
                 org.glassfish.grizzly.http.Cookie[] gCookies =
                         new org.glassfish.grizzly.http.Cookie[cookies.size()];
@@ -1037,12 +1039,12 @@ private void addQueryString(final Request request,
                                     final HttpRequestPacket requestPacket) {
 
             final FluentStringsMap map = request.getQueryParams();
-            if (map != null && !map.isEmpty()) {
+            if (isNonEmpty(map)) {
                 StringBuilder sb = new StringBuilder(128);
                 for (final Map.Entry<String, List<String>> entry : map.entrySet()) {
                     final String name = entry.getKey();
                     final List<String> values = entry.getValue();
-                    if (values != null && !values.isEmpty()) {
+                    if (isNonEmpty(values)) {
                         try {
                             for (int i = 0, len = values.size(); i < len; i++) {
                                 final String value = values.get(i);
@@ -1948,8 +1950,7 @@ public boolean doHandle(final FilterChainContext ctx,
 
 
         public boolean handlesBodyType(final Request request) {
-            final FluentStringsMap params = request.getParams();
-            return (params != null && !params.isEmpty());
+            return isNonEmpty(request.getParams());
         }
 
         @SuppressWarnings({"unchecked"})
@@ -1971,7 +1972,7 @@ public boolean doHandle(final FilterChainContext ctx,
                 for (Map.Entry<String, List<String>> entry : params.entrySet()) {
                     String name = entry.getKey();
                     List<String> values = entry.getValue();
-                    if (values != null && !values.isEmpty()) {
+                    if (isNonEmpty(values)) {
                         if (sb == null) {
                             sb = new StringBuilder(128);
                         }
@@ -2095,8 +2096,7 @@ public boolean doHandle(final FilterChainContext ctx,
 
 
         public boolean handlesBodyType(final Request request) {
-            final List<Part> parts = request.getParts();
-            return (parts != null && !parts.isEmpty());
+            return isNonEmpty(request.getParts());
         }
 
         @SuppressWarnings({"unchecked"})
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
index ff5431896..5984d0317 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
@@ -13,6 +13,8 @@
 
 package com.ning.http.client.providers.grizzly;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
@@ -68,7 +70,7 @@ public GrizzlyResponse(final HttpResponseStatus status,
         this.headers = headers;
         this.bodyParts = bodyParts;
 
-        if (bodyParts != null && !bodyParts.isEmpty()) {
+        if (isNonEmpty(bodyParts)) {
             if (bodyParts.size() == 1) {
                 responseBody = ((GrizzlyResponseBodyPart) bodyParts.get(0)).getBodyBuffer();
             } else {
@@ -261,7 +263,7 @@ public boolean isRedirected() {
 
         if (cookies == null) {
             List<String> values = headers.getHeaders().get("set-cookie");
-            if (values != null && !values.isEmpty()) {
+            if (isNonEmpty(values)) {
                 CookiesBuilder.ServerCookiesBuilder builder =
                     new CookiesBuilder.ServerCookiesBuilder(false);
                 for (String header : values) {
@@ -290,7 +292,7 @@ public boolean hasResponseStatus() {
      * {@inheritDoc}
      */
     public boolean hasResponseHeaders() {
-        return (headers != null && !headers.getHeaders().isEmpty());
+        return headers != null && !headers.getHeaders().isEmpty();
     }
 
 
@@ -298,7 +300,7 @@ public boolean hasResponseHeaders() {
      * {@inheritDoc}
      */
     public boolean hasResponseBody() {
-        return (bodyParts != null && !bodyParts.isEmpty());
+        return isNonEmpty(bodyParts);
     }
 
 
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
index 5e3eb656c..755224683 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.jdk;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.AsyncHttpProvider;
@@ -517,7 +519,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                                 AuthenticatorUtils.computeBasicAuthentication(realm));
                         break;
                     case DIGEST:
-                        if (realm.getNonce() != null && !realm.getNonce().equals("")) {
+                        if (isNonEmpty(realm.getNonce())) {
                             try {
                                 urlConnection.setRequestProperty("Authorization",
                                         AuthenticatorUtils.computeDigestAuthentication(realm));
@@ -551,7 +553,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                 urlConnection.setRequestProperty("User-Agent", AsyncHttpProviderUtils.constructUserAgent(JDKAsyncHttpProvider.class));
             }
 
-            if (request.getCookies() != null && !request.getCookies().isEmpty()) {
+            if (isNonEmpty(request.getCookies())) {
                 urlConnection.setRequestProperty("Cookie", AsyncHttpProviderUtils.encodeCookies(request.getCookies()));
             }
 
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
index 987ef7204..2fe9566e0 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.jdk;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
@@ -204,6 +206,6 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return bodyParts != null && !bodyParts.isEmpty();
+        return isNonEmpty(bodyParts);
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index 6c565b8f0..610b1b161 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.providers.netty;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHandler.STATE;
 import com.ning.http.client.AsyncHttpClientConfig;
@@ -617,7 +619,6 @@ private static SpnegoEngine getSpnegoEngine() {
         return spnegoEngine;
     }
 
-    @SuppressWarnings("deprecation")
     private static HttpRequest construct(AsyncHttpClientConfig config,
                                          Request request,
                                          HttpMethod m,
@@ -634,15 +635,13 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         if (m.equals(HttpMethod.CONNECT)) {
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, AsyncHttpProviderUtils.getAuthority(uri));
         } else {
-            StringBuilder path = null;
+            String path = null;
             if (isProxyServer(config, request))
-                path = new StringBuilder(uri.toString());
-            else {
-                path = new StringBuilder(uri.getRawPath());
-                if (uri.getQuery() != null) {
-                    path.append("?").append(uri.getRawQuery());
-                }
-            }
+                path = uri.toString();
+            else if (uri.getRawQuery() != null)
+                path = uri.getRawPath() + "?" + uri.getRawQuery();
+            else
+                path = uri.getRawPath();
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, path.toString());
         }
         boolean webSocket = isWebSocket(uri);
@@ -708,7 +707,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                             AuthenticatorUtils.computeBasicAuthentication(realm));
                     break;
                 case DIGEST:
-                    if (realm.getNonce() != null && !realm.getNonce().equals("")) {
+                    if (isNonEmpty(realm.getNonce())) {
                         try {
                             nettyRequest.setHeader(HttpHeaders.Names.AUTHORIZATION,
                                     AuthenticatorUtils.computeDigestAuthentication(realm));
@@ -793,7 +792,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         }
 
         if (!m.equals(HttpMethod.CONNECT)) {
-            if (request.getCookies() != null && !request.getCookies().isEmpty()) {
+            if (isNonEmpty(request.getCookies())) {
                 CookieEncoder httpCookieEncoder = new CookieEncoder(false);
                 Iterator<Cookie> ic = request.getCookies().iterator();
                 Cookie c;
@@ -830,7 +829,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     int length = lengthWrapper[0];
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));
                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));
-                } else if (request.getParams() != null && !request.getParams().isEmpty()) {
+                } else if (isNonEmpty(request.getParams())) {
                     StringBuilder sb = new StringBuilder();
                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {
                         final String key = paramEntry.getKey();
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
index 2072a3708..e83f838a2 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.providers.netty;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
@@ -215,7 +217,7 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return bodyParts != null && !bodyParts.isEmpty();
+        return isNonEmpty(bodyParts);
     }
 
 }
diff --git a/src/main/java/com/ning/http/util/AuthenticatorUtils.java b/src/main/java/com/ning/http/util/AuthenticatorUtils.java
index c1220f256..96d17174f 100644
--- a/src/main/java/com/ning/http/util/AuthenticatorUtils.java
+++ b/src/main/java/com/ning/http/util/AuthenticatorUtils.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.util;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.ProxyServer;
 import com.ning.http.client.Realm;
 
@@ -40,7 +42,7 @@ public static String computeDigestAuthentication(Realm realm) throws NoSuchAlgor
         builder.append("algorithm").append('=').append(realm.getAlgorithm()).append(", ");
 
         construct(builder, "response", realm.getResponse());
-        if (realm.getOpaque() != null && realm.getOpaque() != null && realm.getOpaque().equals("") == false)
+        if (isNonEmpty(realm.getOpaque()))
             construct(builder, "opaque", realm.getOpaque());
         builder.append("qop").append('=').append(realm.getQop()).append(", ");
         builder.append("nc").append('=').append(realm.getNc()).append(", ");
diff --git a/src/main/java/com/ning/http/util/MiscUtil.java b/src/main/java/com/ning/http/util/MiscUtil.java
new file mode 100644
index 000000000..dea244fd7
--- /dev/null
+++ b/src/main/java/com/ning/http/util/MiscUtil.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ *
+ * This program is licensed to you under the Apache License Version 2.0,
+ * and you may not use this file except in compliance with the Apache License Version 2.0.
+ * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the Apache License Version 2.0 is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
+ */
+package com.ning.http.util;
+
+import java.util.Collection;
+import java.util.Map;
+
+public class MiscUtil {
+
+    private MiscUtil() {
+    }
+
+    public static boolean isNonEmpty(String string) {
+        return string != null && string.length() != 0;
+    }
+
+    public static boolean isNonEmpty(Collection<?> collection) {
+        return collection != null && !collection.isEmpty();
+    }
+
+    public static boolean isNonEmpty(Map<?, ?> map) {
+        return map != null && !map.isEmpty();
+    }
+}
diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index dbe19c1a7..2a27b409b 100755
--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.async;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncCompletionHandler;
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
@@ -61,7 +63,6 @@
 import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
 
-
 public abstract class AsyncProvidersBasicTest extends AbstractBasicTest {
     private static final String UTF_8 = "text/html;charset=UTF-8";
 
@@ -1482,7 +1483,7 @@ public void optionsTest() throws Throwable {
     public void testAwsS3() throws Exception {
         final AsyncHttpClient c = getAsyncHttpClient(new Builder().build());
         Response response = c.prepareGet("http://test.s3.amazonaws.com/").execute().get();
-        if (response.getResponseBody() == null || response.getResponseBody().equals("")) {
+        if (!isNonEmpty(response.getResponseBody())) {
             fail("No response Body");
         } else {
             assertEquals(response.getStatusCode(), 403);
@@ -1495,7 +1496,7 @@ public void testAsyncHttpProviderConfig() throws Exception {
 
         final AsyncHttpClient c = getAsyncHttpClient(new Builder().setAsyncHttpClientProviderConfig(getProviderConfig()).build());
         Response response = c.prepareGet("http://test.s3.amazonaws.com/").execute().get();
-        if (response.getResponseBody() == null || response.getResponseBody().equals("")) {
+        if (!isNonEmpty(response.getResponseBody())) {
             fail("No response Body");
         } else {
             assertEquals(response.getStatusCode(), 403);
diff --git a/src/test/java/com/ning/http/client/async/AsyncStreamLifecycleTest.java b/src/test/java/com/ning/http/client/async/AsyncStreamLifecycleTest.java
index faeaee7cc..3208972a2 100644
--- a/src/test/java/com/ning/http/client/async/AsyncStreamLifecycleTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncStreamLifecycleTest.java
@@ -119,7 +119,7 @@ public void onThrowable(Throwable t) {
             public STATE onBodyPartReceived(HttpResponseBodyPart e) throws Exception {
                 String s = new String(e.getBodyPartBytes());
                 log.info("got part: {}", s);
-                if (s.equals("")) {
+                if (s.isEmpty()) {
                     //noinspection ThrowableInstanceNeverThrown
                     log.warn("Sampling stacktrace.",
                             new Throwable("trace that, we should not get called for empty body."));
diff --git a/src/test/java/com/ning/http/client/async/EmptyBodyTest.java b/src/test/java/com/ning/http/client/async/EmptyBodyTest.java
index 873e1bba8..d687a6cb2 100644
--- a/src/test/java/com/ning/http/client/async/EmptyBodyTest.java
+++ b/src/test/java/com/ning/http/client/async/EmptyBodyTest.java
@@ -88,7 +88,7 @@ public void onThrowable(Throwable t) {
             public STATE onBodyPartReceived(HttpResponseBodyPart e) throws Exception {
                 String s = new String(e.getBodyPartBytes());
                 log.info("got part: {}", s);
-                if (s.equals("")) {
+                if (s.isEmpty()) {
                     //noinspection ThrowableInstanceNeverThrown
                     log.warn("Sampling stacktrace.",
                             new Throwable("trace that, we should not get called for empty body."));
diff --git a/src/test/java/com/ning/http/client/async/ParamEncodingTest.java b/src/test/java/com/ning/http/client/async/ParamEncodingTest.java
index 02af3160e..eb742de2d 100644
--- a/src/test/java/com/ning/http/client/async/ParamEncodingTest.java
+++ b/src/test/java/com/ning/http/client/async/ParamEncodingTest.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.async;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.Response;
 import org.eclipse.jetty.server.Request;
@@ -42,7 +44,7 @@ public void handle(String s,
                            HttpServletResponse response) throws IOException, ServletException {
             if ("POST".equalsIgnoreCase(request.getMethod())) {
                 String p = request.getParameter("test");
-                if (p != null && !p.equals("")) {
+                if (isNonEmpty(p)) {
                     response.setStatus(HttpServletResponse.SC_OK);
                     response.addHeader("X-Param", p);
                 } else {
diff --git a/src/test/java/com/ning/http/client/async/PostWithQSTest.java b/src/test/java/com/ning/http/client/async/PostWithQSTest.java
index 6f59c9d93..dc214579c 100644
--- a/src/test/java/com/ning/http/client/async/PostWithQSTest.java
+++ b/src/test/java/com/ning/http/client/async/PostWithQSTest.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.async;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncCompletionHandlerBase;
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.HttpResponseStatus;
@@ -54,7 +56,7 @@ public void handle(String s,
                            HttpServletResponse response) throws IOException, ServletException {
             if ("POST".equalsIgnoreCase(request.getMethod())) {
                 String qs = request.getQueryString();
-                if (qs != null && !qs.equals("") && request.getContentLength() == 3) {
+                if (isNonEmpty(qs) && request.getContentLength() == 3) {
                     ServletInputStream is = request.getInputStream();
                     response.setStatus(HttpServletResponse.SC_OK);
                     byte buf[] = new byte[is.available()];
diff --git a/src/test/java/com/ning/http/client/async/QueryParametersTest.java b/src/test/java/com/ning/http/client/async/QueryParametersTest.java
index 028a9543d..da715345d 100644
--- a/src/test/java/com/ning/http/client/async/QueryParametersTest.java
+++ b/src/test/java/com/ning/http/client/async/QueryParametersTest.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.async;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.Response;
 import org.eclipse.jetty.server.Request;
@@ -49,7 +51,7 @@ public void handle(String s,
                            HttpServletResponse response) throws IOException, ServletException {
             if ("GET".equalsIgnoreCase(request.getMethod())) {
                 String qs = request.getQueryString();
-                if (qs != null && !qs.equals("")) {
+                if (isNonEmpty(qs)) {
                     for (String qnv : qs.split("&")) {
                         String nv[] = qnv.split("=");
                         response.addHeader(nv[0], nv[1]);
diff --git a/src/test/java/com/ning/http/client/async/RC10KTest.java b/src/test/java/com/ning/http/client/async/RC10KTest.java
index 51a1e0960..d37c9d2c6 100644
--- a/src/test/java/com/ning/http/client/async/RC10KTest.java
+++ b/src/test/java/com/ning/http/client/async/RC10KTest.java
@@ -132,7 +132,7 @@ public void onThrowable(Throwable t) {
 
         public STATE onBodyPartReceived(HttpResponseBodyPart event) throws Exception {
             String s = new String(event.getBodyPartBytes());
-            result.compareAndSet(-1, new Integer(s.trim().equals("") ? "-1" : s));
+            result.compareAndSet(-1, new Integer(s.trim().isEmpty() ? "-1" : s));
             return STATE.CONTINUE;
         }
 
