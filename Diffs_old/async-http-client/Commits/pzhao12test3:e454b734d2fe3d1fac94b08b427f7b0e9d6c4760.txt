diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
index a26f4fc06..881eb13ee 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
@@ -17,7 +17,7 @@
 import static org.asynchttpclient.util.AuthenticatorUtils.*;
 import static org.asynchttpclient.util.HttpUtils.*;
 import static org.asynchttpclient.util.MiscUtils.*;
-import static org.asynchttpclient.ws.WebSocketUtils.getKey;
+import static org.asynchttpclient.ws.WebSocketUtils.getWebSocketKey;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
@@ -194,7 +194,7 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
         if (!connect && uri.isWebSocket()) {
             headers.set(UPGRADE, HttpHeaderValues.WEBSOCKET)//
                     .set(CONNECTION, HttpHeaderValues.UPGRADE)//
-                    .set(SEC_WEBSOCKET_KEY, getKey())//
+                    .set(SEC_WEBSOCKET_KEY, getWebSocketKey())//
                     .set(SEC_WEBSOCKET_VERSION, "13");
 
             if (!headers.contains(ORIGIN)) {
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java
index 8b2f735fd..0a6438660 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java
@@ -18,29 +18,21 @@
 
 import org.asynchttpclient.util.Base64;
 
+import io.netty.util.internal.ThreadLocalRandom;
+
 public final class WebSocketUtils {
 	public static final String MAGIC_GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 
 	public static String getWebSocketKey() {
-		byte[] nonce = createRandomBytes(16);
+		byte[] nonce = new byte[16];
+		ThreadLocalRandom random = ThreadLocalRandom.current();
+		for (int i = 0; i < nonce.length; i++) {
+			nonce[i] = (byte) random.nextInt(256);
+		}
 		return Base64.encode(nonce);
 	}
 
 	public static String getAcceptKey(String key) {
 		return Base64.encode(pooledSha1MessageDigest().digest((key + MAGIC_GUID).getBytes(US_ASCII)));
 	}
-
-	public static byte[] createRandomBytes(int size) {
-		byte[] bytes = new byte[size];
-
-		for (int i = 0; i < size; i++) {
-			bytes[i] = (byte) createRandomNumber(0, 255);
-		}
-
-		return bytes;
-	}
-
-	public static int createRandomNumber(int min, int max) {
-		return (int) (Math.random() * max + min);
-	}
 }
