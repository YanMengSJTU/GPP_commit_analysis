diff --git a/client/src/main/java/org/asynchttpclient/AsyncHttpClientState.java b/client/src/main/java/org/asynchttpclient/AsyncHttpClientState.java
index 8f9159fbd..1fcc3ed8b 100644
--- a/client/src/main/java/org/asynchttpclient/AsyncHttpClientState.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHttpClientState.java
@@ -19,7 +19,7 @@
 
   private final AtomicBoolean closed;
 
-  public AsyncHttpClientState(AtomicBoolean closed) {
+  AsyncHttpClientState(AtomicBoolean closed) {
     this.closed = closed;
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
index 63e00d7dd..582c5de0d 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
@@ -54,7 +54,7 @@
    * Default signature calculator to use for all requests constructed by this
    * client instance.
    */
-  protected SignatureCalculator signatureCalculator;
+  private SignatureCalculator signatureCalculator;
 
   /**
    * Create a new HTTP Asynchronous Client using the default
@@ -229,7 +229,7 @@ public BoundRequestBuilder prepareRequest(RequestBuilder requestBuilder) {
 
   private <T> ListenableFuture<T> execute(Request request, final AsyncHandler<T> asyncHandler) {
     try {
-      return requestSender.sendRequest(request, asyncHandler, null, false);
+      return requestSender.sendRequest(request, asyncHandler, null);
     } catch (Exception e) {
       asyncHandler.onThrowable(e);
       return new ListenableFuture.CompletedFailure<>(e);
diff --git a/client/src/main/java/org/asynchttpclient/DefaultRequest.java b/client/src/main/java/org/asynchttpclient/DefaultRequest.java
index 32efaea27..4cabb4179 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultRequest.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultRequest.java
@@ -64,30 +64,30 @@
   // lazily loaded
   private List<Param> queryParams;
 
-  public DefaultRequest(String method,//
-                        Uri uri,//
-                        InetAddress address,//
-                        InetAddress localAddress,//
-                        HttpHeaders headers,//
-                        List<Cookie> cookies,//
-                        byte[] byteData,//
-                        List<byte[]> compositeByteData,//
-                        String stringData,//
-                        ByteBuffer byteBufferData,//
-                        InputStream streamData,//
-                        BodyGenerator bodyGenerator,//
-                        List<Param> formParams,//
-                        List<Part> bodyParts,//
-                        String virtualHost,//
-                        ProxyServer proxyServer,//
-                        Realm realm,//
-                        File file,//
-                        Boolean followRedirect,//
-                        int requestTimeout,//
-                        int readTimeout,//
-                        long rangeOffset,//
-                        Charset charset,//
-                        ChannelPoolPartitioning channelPoolPartitioning,//
+  public DefaultRequest(String method,
+                        Uri uri,
+                        InetAddress address,
+                        InetAddress localAddress,
+                        HttpHeaders headers,
+                        List<Cookie> cookies,
+                        byte[] byteData,
+                        List<byte[]> compositeByteData,
+                        String stringData,
+                        ByteBuffer byteBufferData,
+                        InputStream streamData,
+                        BodyGenerator bodyGenerator,
+                        List<Param> formParams,
+                        List<Part> bodyParts,
+                        String virtualHost,
+                        ProxyServer proxyServer,
+                        Realm realm,
+                        File file,
+                        Boolean followRedirect,
+                        int requestTimeout,
+                        int readTimeout,
+                        long rangeOffset,
+                        Charset charset,
+                        ChannelPoolPartitioning channelPoolPartitioning,
                         NameResolver<InetAddress> nameResolver) {
     this.method = method;
     this.uri = uri;
diff --git a/client/src/main/java/org/asynchttpclient/Dsl.java b/client/src/main/java/org/asynchttpclient/Dsl.java
index f6f5567f6..92bf8b89d 100644
--- a/client/src/main/java/org/asynchttpclient/Dsl.java
+++ b/client/src/main/java/org/asynchttpclient/Dsl.java
@@ -85,20 +85,20 @@ public static RequestBuilder request(String method, String url) {
 
   // /////////// Realm ////////////////
   public static Realm.Builder realm(Realm prototype) {
-    return new Realm.Builder(prototype.getPrincipal(), prototype.getPassword())//
-            .setRealmName(prototype.getRealmName())//
-            .setAlgorithm(prototype.getAlgorithm())//
-            .setNc(prototype.getNc())//
-            .setNonce(prototype.getNonce())//
-            .setCharset(prototype.getCharset())//
-            .setOpaque(prototype.getOpaque())//
-            .setQop(prototype.getQop())//
-            .setScheme(prototype.getScheme())//
-            .setUri(prototype.getUri())//
-            .setUsePreemptiveAuth(prototype.isUsePreemptiveAuth())//
-            .setNtlmDomain(prototype.getNtlmDomain())//
-            .setNtlmHost(prototype.getNtlmHost())//
-            .setUseAbsoluteURI(prototype.isUseAbsoluteURI())//
+    return new Realm.Builder(prototype.getPrincipal(), prototype.getPassword())
+            .setRealmName(prototype.getRealmName())
+            .setAlgorithm(prototype.getAlgorithm())
+            .setNc(prototype.getNc())
+            .setNonce(prototype.getNonce())
+            .setCharset(prototype.getCharset())
+            .setOpaque(prototype.getOpaque())
+            .setQop(prototype.getQop())
+            .setScheme(prototype.getScheme())
+            .setUri(prototype.getUri())
+            .setUsePreemptiveAuth(prototype.isUsePreemptiveAuth())
+            .setNtlmDomain(prototype.getNtlmDomain())
+            .setNtlmHost(prototype.getNtlmHost())
+            .setUseAbsoluteURI(prototype.isUseAbsoluteURI())
             .setOmitQuery(prototype.isOmitQuery());
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/ListenableFuture.java b/client/src/main/java/org/asynchttpclient/ListenableFuture.java
index 802e80252..d63ebc52c 100755
--- a/client/src/main/java/org/asynchttpclient/ListenableFuture.java
+++ b/client/src/main/java/org/asynchttpclient/ListenableFuture.java
@@ -106,12 +106,12 @@ public boolean isDone() {
     }
 
     @Override
-    public T get() throws InterruptedException, ExecutionException {
+    public T get() throws ExecutionException {
       throw e;
     }
 
     @Override
-    public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
+    public T get(long timeout, TimeUnit unit) throws ExecutionException {
       throw e;
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/Response.java b/client/src/main/java/org/asynchttpclient/Response.java
index eb1602779..f3bc6e3a9 100644
--- a/client/src/main/java/org/asynchttpclient/Response.java
+++ b/client/src/main/java/org/asynchttpclient/Response.java
@@ -173,24 +173,20 @@
     private HttpResponseStatus status;
     private HttpHeaders headers;
 
-    public ResponseBuilder accumulate(HttpResponseStatus status) {
+    public void accumulate(HttpResponseStatus status) {
       this.status = status;
-      return this;
     }
 
-    public ResponseBuilder accumulate(HttpHeaders headers) {
+    public void accumulate(HttpHeaders headers) {
       this.headers = this.headers == null ? headers : this.headers.add(headers);
-      return this;
     }
 
     /**
      * @param bodyPart a body part (possibly empty, but will be filtered out)
-     * @return this
      */
-    public ResponseBuilder accumulate(HttpResponseBodyPart bodyPart) {
+    public void accumulate(HttpResponseBodyPart bodyPart) {
       if (bodyPart.length() > 0)
         bodyParts.add(bodyPart);
-      return this;
     }
 
     /**
diff --git a/client/src/main/java/org/asynchttpclient/channel/ChannelPoolPartitioning.java b/client/src/main/java/org/asynchttpclient/channel/ChannelPoolPartitioning.java
index cc072d0f1..ecdf84d99 100644
--- a/client/src/main/java/org/asynchttpclient/channel/ChannelPoolPartitioning.java
+++ b/client/src/main/java/org/asynchttpclient/channel/ChannelPoolPartitioning.java
@@ -87,20 +87,16 @@ public boolean equals(Object obj) {
           return false;
       } else if (!targetHostBaseUrl.equals(other.targetHostBaseUrl))
         return false;
-      if (proxyType != other.proxyType)
-        return false;
-      return true;
+      return proxyType == other.proxyType;
     }
 
     @Override
     public String toString() {
-      return new StringBuilder()//
-              .append("ProxyPartitionKey(proxyHost=").append(proxyHost)//
-              .append(", proxyPort=").append(proxyPort)//
-              .append(", secured=").append(secured)//
-              .append(", targetHostBaseUrl=").append(targetHostBaseUrl)//
-              .append(", proxyType=").append(proxyType)//
-              .toString();
+      return "ProxyPartitionKey(proxyHost=" + proxyHost +
+              ", proxyPort=" + proxyPort +
+              ", secured=" + secured +
+              ", targetHostBaseUrl=" + targetHostBaseUrl +
+              ", proxyType=" + proxyType;
     }
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
index 9a610d882..50aa52e67 100644
--- a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
+++ b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
@@ -109,15 +109,6 @@ public int getInt(String key) {
       return Integer.parseInt(getString(key));
     }
 
-    public long getLong(String key) {
-      return Long.parseLong(getString(key));
-    }
-
-    public Integer getInteger(String key) {
-      String s = getString(key);
-      return s != null ? Integer.valueOf(s) : null;
-    }
-
     public boolean getBoolean(String key) {
       return Boolean.parseBoolean(getString(key));
     }
diff --git a/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java b/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java
index adf681c31..60abb266b 100644
--- a/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java
+++ b/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java
@@ -2,8 +2,6 @@
 
 import org.asynchttpclient.AsyncHandler;
 
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.Collections;
 import java.util.HashSet;
@@ -29,9 +27,7 @@
     ClassLoader classLoader = handlerClass.getClassLoader();
     Class<?>[] interfaces = allInterfaces(handlerClass);
 
-    return (AsyncHandler<T>) Proxy.newProxyInstance(classLoader, interfaces, new InvocationHandler() {
-      @Override
-      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+    return (AsyncHandler<T>) Proxy.newProxyInstance(classLoader, interfaces, (proxy, method, args) -> {
         try {
           return method.invoke(handler, args);
         } finally {
@@ -42,7 +38,6 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
             default:
           }
         }
-      }
     });
   }
 
@@ -52,7 +47,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
    * @param handlerClass the handler class
    * @return all interfaces implemented by this class
    */
-  static Class<?>[] allInterfaces(Class<?> handlerClass) {
+  private static Class<?>[] allInterfaces(Class<?> handlerClass) {
     Set<Class<?>> allInterfaces = new HashSet<>();
     for (Class<?> clazz = handlerClass; clazz != null; clazz = clazz.getSuperclass()) {
       Collections.addAll(allInterfaces, clazz.getInterfaces());
diff --git a/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java b/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
index e95dd329b..5a3fb1685 100644
--- a/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
+++ b/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
@@ -134,7 +134,7 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
   }
 
   @Override
-  public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+  public State onTrailingHeadersReceived(HttpHeaders headers) {
     responseBuilder.accumulate(headers);
     return State.CONTINUE;
   }
@@ -181,9 +181,7 @@ public Response onCompleted() throws IOException {
     try {
       semaphore.acquire();
       if (throwable != null) {
-        IOException ioe = new IOException(throwable.getMessage());
-        ioe.initCause(throwable);
-        throw ioe;
+        throw new IOException(throwable);
       } else {
         // sending out current response
         return responseBuilder.build();
@@ -258,14 +256,8 @@ public void close() throws IOException {
       // "join" async request
       try {
         getLastResponse();
-      } catch (ExecutionException e) {
-        IOException ioe = new IOException(e.getMessage());
-        ioe.initCause(e.getCause());
-        throw ioe;
-      } catch (InterruptedException e) {
-        IOException ioe = new IOException(e.getMessage());
-        ioe.initCause(e);
-        throw ioe;
+      } catch (ExecutionException | InterruptedException e) {
+        throw new IOException(e);
       }
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcessor.java b/client/src/main/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcessor.java
index 7575c54ba..1eb99f11b 100644
--- a/client/src/main/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcessor.java
+++ b/client/src/main/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcessor.java
@@ -37,7 +37,7 @@
   private final ConcurrentHashMap<String, Long> properties = new ConcurrentHashMap<>();
 
   private static String append(Map.Entry<String, Long> e) {
-    return new StringBuilder(e.getKey()).append('=').append(e.getValue()).append('\n').toString();
+    return e.getKey() + '=' + e.getValue() + '\n';
   }
 
   /**
diff --git a/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableAsyncHandler.java b/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableAsyncHandler.java
index 6a122435b..399638fbb 100644
--- a/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableAsyncHandler.java
+++ b/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableAsyncHandler.java
@@ -174,7 +174,7 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
   }
 
   @Override
-  public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+  public State onTrailingHeadersReceived(HttpHeaders headers) {
     responseBuilder.accumulate(headers);
     return State.CONTINUE;
   }
@@ -292,7 +292,7 @@ public void save(Map<String, Long> map) {
 
     private long length = 0L;
 
-    public void onBytesReceived(ByteBuffer byteBuffer) throws IOException {
+    public void onBytesReceived(ByteBuffer byteBuffer) {
       length += byteBuffer.remaining();
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableIOExceptionFilter.java b/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableIOExceptionFilter.java
index d273d9a38..948bb6649 100644
--- a/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableIOExceptionFilter.java
+++ b/client/src/main/java/org/asynchttpclient/handler/resumable/ResumableIOExceptionFilter.java
@@ -14,14 +14,13 @@
 
 import org.asynchttpclient.Request;
 import org.asynchttpclient.filter.FilterContext;
-import org.asynchttpclient.filter.FilterException;
 import org.asynchttpclient.filter.IOExceptionFilter;
 
 /**
  * Simple {@link org.asynchttpclient.filter.IOExceptionFilter} that replay the current {@link org.asynchttpclient.Request} using a {@link ResumableAsyncHandler}
  */
 public class ResumableIOExceptionFilter implements IOExceptionFilter {
-  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+  public <T> FilterContext<T> filter(FilterContext<T> ctx) {
     if (ctx.getIOException() != null && ctx.getAsyncHandler() instanceof ResumableAsyncHandler) {
 
       Request request = ResumableAsyncHandler.class.cast(ctx.getAsyncHandler()).adjustRequestRange(ctx.getRequest());
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
index 0ce9be0c1..554c52c98 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
@@ -114,7 +114,7 @@ public final String getHeader(CharSequence name) {
 
   @Override
   public final List<String> getHeaders(CharSequence name) {
-    return headers != null ? getHeaders().getAll(name) : Collections.<String>emptyList();
+    return headers != null ? getHeaders().getAll(name) : Collections.emptyList();
   }
 
   @Override
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
index e8d1a9bb6..706560dfe 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
@@ -207,10 +207,10 @@ public V get(long l, TimeUnit tu) throws InterruptedException, TimeoutException,
     return future.get(l, tu);
   }
 
-  private V getContent() throws ExecutionException {
+  private void loadContent() throws ExecutionException {
     if (future.isDone()) {
       try {
-        return future.get();
+        future.get();
       } catch (InterruptedException e) {
         throw new RuntimeException("unreachable", e);
       }
@@ -236,7 +236,7 @@ private V getContent() throws ExecutionException {
         future.completeExceptionally(ex);
       }
     }
-    return future.getNow(null);
+    future.getNow(null);
   }
 
   // org.asynchttpclient.ListenableFuture
@@ -255,7 +255,7 @@ public final void done() {
       return;
 
     try {
-      getContent();
+      loadContent();
     } catch (ExecutionException ignored) {
 
     } catch (RuntimeException t) {
@@ -307,10 +307,6 @@ public Uri getUri() {
     return targetRequest.getUri();
   }
 
-  public ChannelPoolPartitioning getConnectionPoolPartitioning() {
-    return connectionPoolPartitioning;
-  }
-
   public ProxyServer getProxyServer() {
     return proxyServer;
   }
diff --git a/client/src/main/java/org/asynchttpclient/netty/SimpleChannelFutureListener.java b/client/src/main/java/org/asynchttpclient/netty/SimpleChannelFutureListener.java
index 2a85b4484..3d8afa96f 100644
--- a/client/src/main/java/org/asynchttpclient/netty/SimpleChannelFutureListener.java
+++ b/client/src/main/java/org/asynchttpclient/netty/SimpleChannelFutureListener.java
@@ -20,7 +20,7 @@
 public abstract class SimpleChannelFutureListener implements ChannelFutureListener {
 
   @Override
-  public final void operationComplete(ChannelFuture future) throws Exception {
+  public final void operationComplete(ChannelFuture future) {
     Channel channel = future.channel();
     if (future.isSuccess()) {
       onSuccess(channel);
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index 27007d436..01b31ed55 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -212,7 +212,7 @@ public void configureBootstraps(NettyRequestSender requestSender) {
 
     httpBootstrap.handler(new ChannelInitializer<Channel>() {
       @Override
-      protected void initChannel(Channel ch) throws Exception {
+      protected void initChannel(Channel ch) {
         ChannelPipeline pipeline = ch.pipeline()//
                 .addLast(PINNED_ENTRY, pinnedEntry)//
                 .addLast(HTTP_CLIENT_CODEC, newHttpClientCodec())//
@@ -231,7 +231,7 @@ protected void initChannel(Channel ch) throws Exception {
 
     wsBootstrap.handler(new ChannelInitializer<Channel>() {
       @Override
-      protected void initChannel(Channel ch) throws Exception {
+      protected void initChannel(Channel ch) {
         ChannelPipeline pipeline = ch.pipeline()//
                 .addLast(PINNED_ENTRY, pinnedEntry)//
                 .addLast(HTTP_CLIENT_CODEC, newHttpClientCodec())//
@@ -251,7 +251,7 @@ private HttpContentDecompressor newHttpContentDecompressor() {
     if (config.isKeepEncodingHeader())
       return new HttpContentDecompressor() {
         @Override
-        protected String getTargetContentEncoding(String contentEncoding) throws Exception {
+        protected String getTargetContentEncoding(String contentEncoding) {
           return contentEncoding;
         }
       };
@@ -285,8 +285,8 @@ public Channel poll(Uri uri, String virtualHost, ProxyServer proxy, ChannelPoolP
     return channelPool.poll(partitionKey);
   }
 
-  public boolean removeAll(Channel connection) {
-    return channelPool.removeAll(connection);
+  public void removeAll(Channel connection) {
+    channelPool.removeAll(connection);
   }
 
   private void doClose() {
@@ -310,7 +310,7 @@ public void closeChannel(Channel channel) {
     Channels.silentlyCloseChannel(channel);
   }
 
-  public void registerOpenChannel(Channel channel, Object partitionKey) {
+  public void registerOpenChannel(Channel channel) {
     openChannels.add(channel);
   }
 
@@ -332,7 +332,7 @@ private SslHandler createSslHandler(String peerHost, int peerPort) {
     return sslHandler;
   }
 
-  public void upgradeProtocol(ChannelPipeline pipeline, Uri requestUri) throws SSLException {
+  public void upgradeProtocol(ChannelPipeline pipeline, Uri requestUri) {
     if (pipeline.get(HTTP_CLIENT_CODEC) != null)
       pipeline.remove(HTTP_CLIENT_CODEC);
 
@@ -437,7 +437,7 @@ public void upgradePipelineForWebSockets(ChannelPipeline pipeline) {
     pipeline.remove(HTTP_CLIENT_CODEC);
   }
 
-  public final OnLastHttpContentCallback newDrainCallback(final NettyResponseFuture<?> future, final Channel channel, final boolean keepAlive, final Object partitionKey) {
+  private OnLastHttpContentCallback newDrainCallback(final NettyResponseFuture<?> future, final Channel channel, final boolean keepAlive, final Object partitionKey) {
 
     return new OnLastHttpContentCallback(future) {
       public void call() {
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java b/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
index fcf6d1728..5350888f9 100644
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
@@ -29,7 +29,6 @@
  */
 public class ConnectionSemaphore {
 
-  private final int maxTotalConnections;
   private final NonBlockingSemaphoreLike freeChannels;
   private final int maxConnectionsPerHost;
   private final ConcurrentHashMap<Object, NonBlockingSemaphore> freeChannelsPerHost = new ConcurrentHashMap<>();
@@ -39,7 +38,7 @@
   private ConnectionSemaphore(AsyncHttpClientConfig config) {
     tooManyConnections = unknownStackTrace(new TooManyConnectionsException(config.getMaxConnections()), ConnectionSemaphore.class, "acquireChannelLock");
     tooManyConnectionsPerHost = unknownStackTrace(new TooManyConnectionsPerHostException(config.getMaxConnectionsPerHost()), ConnectionSemaphore.class, "acquireChannelLock");
-    maxTotalConnections = config.getMaxConnections();
+    int maxTotalConnections = config.getMaxConnections();
     maxConnectionsPerHost = config.getMaxConnectionsPerHost();
 
     freeChannels = maxTotalConnections > 0 ?
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
index b38023a28..0232237a6 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
@@ -312,7 +312,7 @@ private boolean isIdleTimeoutExpired(IdleChannel idleChannel, long now) {
         }
       }
 
-      return idleTimeoutChannels != null ? idleTimeoutChannels : Collections.<IdleChannel>emptyList();
+      return idleTimeoutChannels != null ? idleTimeoutChannels : Collections.emptyList();
     }
 
     private List<IdleChannel> closeChannels(List<IdleChannel> candidates) {
@@ -342,7 +342,7 @@ private boolean isIdleTimeoutExpired(IdleChannel idleChannel, long now) {
       return closedChannels != null ? closedChannels : candidates;
     }
 
-    public void run(Timeout timeout) throws Exception {
+    public void run(Timeout timeout) {
 
       if (isClosed.get())
         return;
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java b/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
index 9f0ac11e8..e8f995b7d 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
@@ -44,18 +44,15 @@
   private final NettyResponseFuture<T> future;
   private final ChannelManager channelManager;
   private final ConnectionSemaphore connectionSemaphore;
-  private final Object partitionKey;
 
-  public NettyConnectListener(NettyResponseFuture<T> future,//
-                              NettyRequestSender requestSender,//
-                              ChannelManager channelManager,//
-                              ConnectionSemaphore connectionSemaphore,//
-                              Object partitionKey) {
+  public NettyConnectListener(NettyResponseFuture<T> future,
+                              NettyRequestSender requestSender,
+                              ChannelManager channelManager,
+                              ConnectionSemaphore connectionSemaphore) {
     this.future = future;
     this.requestSender = requestSender;
     this.channelManager = channelManager;
     this.connectionSemaphore = connectionSemaphore;
-    this.partitionKey = partitionKey;
   }
 
   private boolean futureIsAlreadyCancelled(Channel channel) {
@@ -80,7 +77,7 @@ private void writeRequest(Channel channel) {
 
     Channels.setAttribute(channel, future);
 
-    channelManager.registerOpenChannel(channel, partitionKey);
+    channelManager.registerOpenChannel(channel);
     future.attachChannel(channel, false);
     requestSender.writeRequest(future, channel);
   }
@@ -113,7 +110,7 @@ public void onSuccess(Channel channel, InetSocketAddress remoteAddress) {
 
     // in case of proxy tunneling, we'll add the SslHandler later, after the CONNECT request
     if ((proxyServer == null || proxyServer.getProxyType().isSocks()) && uri.isSecured()) {
-      SslHandler sslHandler = null;
+      SslHandler sslHandler;
       try {
         sslHandler = channelManager.addSslHandler(channel.pipeline(), uri, request.getVirtualHost());
       } catch (Exception sslError) {
@@ -133,7 +130,7 @@ public void onSuccess(Channel channel, InetSocketAddress remoteAddress) {
 
       sslHandler.handshakeFuture().addListener(new SimpleFutureListener<Channel>() {
         @Override
-        protected void onSuccess(Channel value) throws Exception {
+        protected void onSuccess(Channel value) {
           try {
             asyncHandler.onTlsHandshakeSuccess();
           } catch (Exception e) {
@@ -145,7 +142,7 @@ protected void onSuccess(Channel value) throws Exception {
         }
 
         @Override
-        protected void onFailure(Throwable cause) throws Exception {
+        protected void onFailure(Throwable cause) {
           try {
             asyncHandler.onTlsHandshakeFailure(cause);
           } catch (Exception e) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/future/StackTraceInspector.java b/client/src/main/java/org/asynchttpclient/netty/future/StackTraceInspector.java
index 525b47005..626754d3c 100755
--- a/client/src/main/java/org/asynchttpclient/netty/future/StackTraceInspector.java
+++ b/client/src/main/java/org/asynchttpclient/netty/future/StackTraceInspector.java
@@ -54,9 +54,6 @@ public static boolean recoverOnReadOrWriteException(Throwable t) {
     } catch (Throwable ignore) {
     }
 
-    if (t.getCause() != null)
-      return recoverOnReadOrWriteException(t.getCause());
-
-    return false;
+    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
index 0f41339c8..de78537ac 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
@@ -47,11 +47,11 @@
   protected final AsyncHttpClientConfig config;
   protected final ChannelManager channelManager;
   protected final NettyRequestSender requestSender;
-  protected final Interceptors interceptors;
-  protected final boolean hasIOExceptionFilters;
+  final Interceptors interceptors;
+  final boolean hasIOExceptionFilters;
 
-  public AsyncHttpClientHandler(AsyncHttpClientConfig config,//
-                                ChannelManager channelManager,//
+  AsyncHttpClientHandler(AsyncHttpClientConfig config,
+                                ChannelManager channelManager,
                                 NettyRequestSender requestSender) {
     this.config = config;
     this.channelManager = channelManager;
@@ -145,7 +145,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
   }
 
   @Override
-  public void exceptionCaught(ChannelHandlerContext ctx, Throwable e) throws Exception {
+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable e) {
     Throwable cause = getCause(e);
 
     if (cause instanceof PrematureChannelClosureException || cause instanceof ClosedChannelException)
@@ -209,12 +209,12 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable e) throws Excep
   }
 
   @Override
-  public void channelActive(ChannelHandlerContext ctx) throws Exception {
+  public void channelActive(ChannelHandlerContext ctx) {
     ctx.read();
   }
 
   @Override
-  public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
+  public void channelReadComplete(ChannelHandlerContext ctx) {
     if (!isHandledByReactiveStreams(ctx)) {
       ctx.read();
     } else {
@@ -226,7 +226,7 @@ private boolean isHandledByReactiveStreams(ChannelHandlerContext ctx) {
     return Channels.getAttribute(ctx.channel()) instanceof StreamedResponsePublisher;
   }
 
-  protected void finishUpdate(NettyResponseFuture<?> future, Channel channel, boolean close) throws IOException {
+  void finishUpdate(NettyResponseFuture<?> future, Channel channel, boolean close) {
     future.cancelTimeouts();
 
     if (close) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
index 6e9f9a3bf..228352aaf 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
@@ -43,16 +43,14 @@ private boolean abortAfterHandlingStatus(//
     return handler.onStatusReceived(status) == State.ABORT;
   }
 
-  private boolean abortAfterHandlingHeaders(//
-                                            AsyncHandler<?> handler,//
+  private boolean abortAfterHandlingHeaders(AsyncHandler<?> handler,
                                             HttpHeaders responseHeaders) throws Exception {
     return !responseHeaders.isEmpty() && handler.onHeadersReceived(responseHeaders) == State.ABORT;
   }
 
-  private boolean abortAfterHandlingReactiveStreams(//
-                                                    Channel channel,//
-                                                    NettyResponseFuture<?> future,//
-                                                    AsyncHandler<?> handler) throws IOException {
+  private boolean abortAfterHandlingReactiveStreams(Channel channel,
+                                                    NettyResponseFuture<?> future,
+                                                    AsyncHandler<?> handler) {
     if (handler instanceof StreamedAsyncHandler) {
       StreamedAsyncHandler<?> streamedAsyncHandler = (StreamedAsyncHandler<?>) handler;
       StreamedResponsePublisher publisher = new StreamedResponsePublisher(channel.eventLoop(), channelManager, future, channel);
@@ -86,10 +84,10 @@ private void handleHttpResponse(final HttpResponse response, final Channel chann
     }
   }
 
-  private void handleChunk(HttpContent chunk,//
-                           final Channel channel,//
-                           final NettyResponseFuture<?> future,//
-                           AsyncHandler<?> handler) throws IOException, Exception {
+  private void handleChunk(HttpContent chunk,
+                           final Channel channel,
+                           final NettyResponseFuture<?> future,
+                           AsyncHandler<?> handler) throws Exception {
 
     boolean abort = false;
     boolean last = chunk instanceof LastHttpContent;
@@ -156,7 +154,7 @@ public void handleRead(final Channel channel, final NettyResponseFuture<?> futur
     }
   }
 
-  private void readFailed(Channel channel, NettyResponseFuture<?> future, Throwable t) throws Exception {
+  private void readFailed(Channel channel, NettyResponseFuture<?> future, Throwable t) {
     try {
       requestSender.abort(channel, future, t);
     } catch (Exception abortException) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/StreamedResponsePublisher.java b/client/src/main/java/org/asynchttpclient/netty/handler/StreamedResponsePublisher.java
index 06b84499b..f4565f91b 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/StreamedResponsePublisher.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/StreamedResponsePublisher.java
@@ -29,7 +29,7 @@
   private final NettyResponseFuture<?> future;
   private final Channel channel;
 
-  public StreamedResponsePublisher(EventExecutor executor, ChannelManager channelManager, NettyResponseFuture<?> future, Channel channel) {
+  StreamedResponsePublisher(EventExecutor executor, ChannelManager channelManager, NettyResponseFuture<?> future, Channel channel) {
     super(executor, HttpResponseBodyPart.class);
     this.channelManager = channelManager;
     this.future = future;
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
index 20caef86b..639524d86 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
@@ -87,7 +87,7 @@ private void upgrade(Channel channel, NettyResponseFuture<?> future, WebSocketUp
     future.done();
   }
 
-  private void abort(Channel channel, NettyResponseFuture<?> future, WebSocketUpgradeHandler handler, HttpResponseStatus status) throws Exception {
+  private void abort(Channel channel, NettyResponseFuture<?> future, WebSocketUpgradeHandler handler, HttpResponseStatus status) {
     try {
       handler.onThrowable(new IOException("Invalid Status code=" + status.getStatusCode() + " text=" + status.getStatusText()));
     } finally {
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ConnectSuccessInterceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ConnectSuccessInterceptor.java
index a280eee8d..e78c245a1 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ConnectSuccessInterceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ConnectSuccessInterceptor.java
@@ -14,7 +14,6 @@
 package org.asynchttpclient.netty.handler.intercept;
 
 import io.netty.channel.Channel;
-import io.netty.handler.codec.http.HttpRequest;
 import org.asynchttpclient.Request;
 import org.asynchttpclient.RequestBuilder;
 import org.asynchttpclient.netty.NettyResponseFuture;
@@ -25,8 +24,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
-
 public class ConnectSuccessInterceptor {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(ConnectSuccessInterceptor.class);
@@ -34,18 +31,15 @@
   private final ChannelManager channelManager;
   private final NettyRequestSender requestSender;
 
-  public ConnectSuccessInterceptor(ChannelManager channelManager, NettyRequestSender requestSender) {
+  ConnectSuccessInterceptor(ChannelManager channelManager, NettyRequestSender requestSender) {
     this.channelManager = channelManager;
     this.requestSender = requestSender;
   }
 
-  public boolean exitAfterHandlingConnect(//
-                                          final Channel channel,//
-                                          final NettyResponseFuture<?> future,//
-                                          final Request request,//
-                                          ProxyServer proxyServer,//
-                                          int statusCode,//
-                                          HttpRequest httpRequest) throws IOException {
+  public boolean exitAfterHandlingConnect(Channel channel,
+                                          NettyResponseFuture<?> future,
+                                          Request request,
+                                          ProxyServer proxyServer) {
 
     if (future.isKeepAlive())
       future.attachChannel(channel, true);
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Continue100Interceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Continue100Interceptor.java
index e63f83239..866cfaac1 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Continue100Interceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Continue100Interceptor.java
@@ -19,9 +19,7 @@
 import org.asynchttpclient.netty.channel.Channels;
 import org.asynchttpclient.netty.request.NettyRequestSender;
 
-import java.io.IOException;
-
-public class Continue100Interceptor {
+class Continue100Interceptor {
 
   private final NettyRequestSender requestSender;
 
@@ -29,13 +27,13 @@ public Continue100Interceptor(NettyRequestSender requestSender) {
     this.requestSender = requestSender;
   }
 
-  public boolean exitAfterHandling100(final Channel channel, final NettyResponseFuture<?> future, int statusCode) {
+  public boolean exitAfterHandling100(final Channel channel, final NettyResponseFuture<?> future) {
     future.setHeadersAlreadyWrittenOnContinue(true);
     future.setDontWriteBodyBecauseExpectContinue(false);
     // directly send the body
     Channels.setAttribute(channel, new OnLastHttpContentCallback(future) {
       @Override
-      public void call() throws IOException {
+      public void call() {
         Channels.setAttribute(channel, future);
         requestSender.writeRequest(future, channel);
       }
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Interceptors.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Interceptors.java
index 2871cf919..373951362 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Interceptors.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Interceptors.java
@@ -41,9 +41,8 @@
   private final ResponseFiltersInterceptor responseFiltersInterceptor;
   private final boolean hasResponseFilters;
 
-  public Interceptors(//
-                      AsyncHttpClientConfig config,//
-                      ChannelManager channelManager,//
+  public Interceptors(AsyncHttpClientConfig config,
+                      ChannelManager channelManager,
                       NettyRequestSender requestSender) {
     this.config = config;
     unauthorized401Interceptor = new Unauthorized401Interceptor(channelManager, requestSender);
@@ -55,12 +54,11 @@ public Interceptors(//
     hasResponseFilters = !config.getResponseFilters().isEmpty();
   }
 
-  public boolean exitAfterIntercept(//
-                                    Channel channel,//
-                                    NettyResponseFuture<?> future,//
-                                    AsyncHandler<?> handler,//
-                                    HttpResponse response,//
-                                    HttpResponseStatus status,//
+  public boolean exitAfterIntercept(Channel channel,
+                                    NettyResponseFuture<?> future,
+                                    AsyncHandler<?> handler,
+                                    HttpResponse response,
+                                    HttpResponseStatus status,
                                     HttpHeaders responseHeaders) throws Exception {
 
     HttpRequest httpRequest = future.getNettyRequest().getHttpRequest();
@@ -83,19 +81,19 @@ public boolean exitAfterIntercept(//
     }
 
     if (statusCode == UNAUTHORIZED_401) {
-      return unauthorized401Interceptor.exitAfterHandling401(channel, future, response, request, statusCode, realm, proxyServer, httpRequest);
+      return unauthorized401Interceptor.exitAfterHandling401(channel, future, response, request, realm, httpRequest);
 
     } else if (statusCode == PROXY_AUTHENTICATION_REQUIRED_407) {
-      return proxyUnauthorized407Interceptor.exitAfterHandling407(channel, future, response, request, statusCode, proxyServer, httpRequest);
+      return proxyUnauthorized407Interceptor.exitAfterHandling407(channel, future, response, request, proxyServer, httpRequest);
 
     } else if (statusCode == CONTINUE_100) {
-      return continue100Interceptor.exitAfterHandling100(channel, future, statusCode);
+      return continue100Interceptor.exitAfterHandling100(channel, future);
 
     } else if (Redirect30xInterceptor.REDIRECT_STATUSES.contains(statusCode)) {
       return redirect30xInterceptor.exitAfterHandlingRedirect(channel, future, response, request, statusCode, realm);
 
     } else if (httpRequest.method() == HttpMethod.CONNECT && statusCode == OK_200) {
-      return connectSuccessInterceptor.exitAfterHandlingConnect(channel, future, request, proxyServer, statusCode, httpRequest);
+      return connectSuccessInterceptor.exitAfterHandlingConnect(channel, future, request, proxyServer);
 
     }
     return false;
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
index 1517e47ad..3bcac67bf 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
@@ -46,18 +46,16 @@
   private final ChannelManager channelManager;
   private final NettyRequestSender requestSender;
 
-  public ProxyUnauthorized407Interceptor(ChannelManager channelManager, NettyRequestSender requestSender) {
+  ProxyUnauthorized407Interceptor(ChannelManager channelManager, NettyRequestSender requestSender) {
     this.channelManager = channelManager;
     this.requestSender = requestSender;
   }
 
-  public boolean exitAfterHandling407(//
-                                      Channel channel,//
-                                      NettyResponseFuture<?> future,//
-                                      HttpResponse response,//
-                                      Request request,//
-                                      int statusCode,//
-                                      ProxyServer proxyServer,//
+  public boolean exitAfterHandling407(Channel channel,
+                                      NettyResponseFuture<?> future,
+                                      HttpResponse response,
+                                      Request request,
+                                      ProxyServer proxyServer,
                                       HttpRequest httpRequest) {
 
     if (future.isAndSetInProxyAuth(true)) {
@@ -128,7 +126,7 @@ public boolean exitAfterHandling407(//
           LOGGER.info("Can't handle 407 with NTLM realm as Proxy-Authenticate headers don't match");
           return false;
         }
-        ntlmProxyChallenge(ntlmHeader, request, requestHeaders, proxyRealm, future);
+        ntlmProxyChallenge(ntlmHeader, requestHeaders, proxyRealm, future);
         Realm newNtlmRealm = realm(proxyRealm)//
                 .setUsePreemptiveAuth(true)//
                 .build();
@@ -142,14 +140,14 @@ public boolean exitAfterHandling407(//
           return false;
         }
         try {
-          kerberosProxyChallenge(channel, proxyAuthHeaders, request, proxyServer, proxyRealm, requestHeaders, future);
+          kerberosProxyChallenge(proxyServer, requestHeaders);
 
         } catch (SpnegoEngineException e) {
           // FIXME
           String ntlmHeader2 = getHeaderWithPrefix(proxyAuthHeaders, "NTLM");
           if (ntlmHeader2 != null) {
             LOGGER.warn("Kerberos/Spnego proxy auth failed, proceeding with NTLM");
-            ntlmProxyChallenge(ntlmHeader2, request, requestHeaders, proxyRealm, future);
+            ntlmProxyChallenge(ntlmHeader2, requestHeaders, proxyRealm, future);
             Realm newNtlmRealm2 = realm(proxyRealm)//
                     .setScheme(AuthScheme.NTLM)//
                     .setUsePreemptiveAuth(true)//
@@ -186,22 +184,16 @@ public boolean exitAfterHandling407(//
     return true;
   }
 
-  private void kerberosProxyChallenge(Channel channel,//
-                                      List<String> proxyAuth,//
-                                      Request request,//
-                                      ProxyServer proxyServer,//
-                                      Realm proxyRealm,//
-                                      HttpHeaders headers,//
-                                      NettyResponseFuture<?> future) throws SpnegoEngineException {
+  private void kerberosProxyChallenge(ProxyServer proxyServer,
+                                      HttpHeaders headers) throws SpnegoEngineException {
 
     String challengeHeader = SpnegoEngine.instance().generateToken(proxyServer.getHost());
     headers.set(PROXY_AUTHORIZATION, NEGOTIATE + " " + challengeHeader);
   }
 
-  private void ntlmProxyChallenge(String authenticateHeader,//
-                                  Request request,//
-                                  HttpHeaders requestHeaders,//
-                                  Realm proxyRealm,//
+  private void ntlmProxyChallenge(String authenticateHeader,
+                                  HttpHeaders requestHeaders,
+                                  Realm proxyRealm,
                                   NettyResponseFuture<?> future) {
 
     if (authenticateHeader.equals("NTLM")) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
index 9342d81ab..67f9d8fca 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
@@ -62,7 +62,7 @@
   private final NettyRequestSender requestSender;
   private final MaxRedirectException maxRedirectException;
 
-  public Redirect30xInterceptor(ChannelManager channelManager, AsyncHttpClientConfig config, NettyRequestSender requestSender) {
+  Redirect30xInterceptor(ChannelManager channelManager, AsyncHttpClientConfig config, NettyRequestSender requestSender) {
     this.channelManager = channelManager;
     this.config = config;
     this.requestSender = requestSender;
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ResponseFiltersInterceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ResponseFiltersInterceptor.java
index 729a0e3f2..b8259d7dc 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ResponseFiltersInterceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/ResponseFiltersInterceptor.java
@@ -31,7 +31,7 @@
   private final AsyncHttpClientConfig config;
   private final NettyRequestSender requestSender;
 
-  public ResponseFiltersInterceptor(AsyncHttpClientConfig config, NettyRequestSender requestSender) {
+  ResponseFiltersInterceptor(AsyncHttpClientConfig config, NettyRequestSender requestSender) {
     this.config = config;
     this.requestSender = requestSender;
   }
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
index f78ad8adf..b2b2adfac 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
@@ -24,7 +24,6 @@
 import org.asynchttpclient.netty.channel.ChannelState;
 import org.asynchttpclient.netty.request.NettyRequestSender;
 import org.asynchttpclient.ntlm.NtlmEngine;
-import org.asynchttpclient.proxy.ProxyServer;
 import org.asynchttpclient.spnego.SpnegoEngine;
 import org.asynchttpclient.spnego.SpnegoEngineException;
 import org.asynchttpclient.uri.Uri;
@@ -47,19 +46,16 @@
   private final ChannelManager channelManager;
   private final NettyRequestSender requestSender;
 
-  public Unauthorized401Interceptor(ChannelManager channelManager, NettyRequestSender requestSender) {
+  Unauthorized401Interceptor(ChannelManager channelManager, NettyRequestSender requestSender) {
     this.channelManager = channelManager;
     this.requestSender = requestSender;
   }
 
-  public boolean exitAfterHandling401(//
-                                      final Channel channel,//
-                                      final NettyResponseFuture<?> future,//
-                                      HttpResponse response,//
-                                      final Request request,//
-                                      int statusCode,//
-                                      Realm realm,//
-                                      ProxyServer proxyServer,//
+  public boolean exitAfterHandling401(final Channel channel,
+                                      final NettyResponseFuture<?> future,
+                                      HttpResponse response,
+                                      final Request request,
+                                      Realm realm,
                                       HttpRequest httpRequest) {
 
     if (realm == null) {
@@ -129,7 +125,7 @@ public boolean exitAfterHandling401(//
           return false;
         }
 
-        ntlmChallenge(ntlmHeader, request, requestHeaders, realm, future);
+        ntlmChallenge(ntlmHeader, requestHeaders, realm, future);
         Realm newNtlmRealm = realm(realm)//
                 .setUsePreemptiveAuth(true)//
                 .build();
@@ -143,14 +139,14 @@ public boolean exitAfterHandling401(//
           return false;
         }
         try {
-          kerberosChallenge(channel, wwwAuthHeaders, request, requestHeaders, realm, future);
+          kerberosChallenge(request, requestHeaders);
 
         } catch (SpnegoEngineException e) {
           // FIXME
           String ntlmHeader2 = getHeaderWithPrefix(wwwAuthHeaders, "NTLM");
           if (ntlmHeader2 != null) {
             LOGGER.warn("Kerberos/Spnego auth failed, proceeding with NTLM");
-            ntlmChallenge(ntlmHeader2, request, requestHeaders, realm, future);
+            ntlmChallenge(ntlmHeader2, requestHeaders, realm, future);
             Realm newNtlmRealm2 = realm(realm)//
                     .setScheme(AuthScheme.NTLM)//
                     .setUsePreemptiveAuth(true)//
@@ -182,10 +178,9 @@ public boolean exitAfterHandling401(//
     return true;
   }
 
-  private void ntlmChallenge(String authenticateHeader,//
-                             Request request,//
-                             HttpHeaders requestHeaders,//
-                             Realm realm,//
+  private void ntlmChallenge(String authenticateHeader,
+                             HttpHeaders requestHeaders,
+                             Realm realm,
                              NettyResponseFuture<?> future) {
 
     if (authenticateHeader.equals("NTLM")) {
@@ -205,12 +200,8 @@ private void ntlmChallenge(String authenticateHeader,//
     }
   }
 
-  private void kerberosChallenge(Channel channel,//
-                                 List<String> authHeaders,//
-                                 Request request,//
-                                 HttpHeaders headers,//
-                                 Realm realm,//
-                                 NettyResponseFuture<?> future) throws SpnegoEngineException {
+  private void kerberosChallenge(Request request,
+                                 HttpHeaders headers) throws SpnegoEngineException {
 
     Uri uri = request.getUri();
     String host = withDefault(request.getVirtualHost(), uri.getHost());
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyChannelConnector.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyChannelConnector.java
index 1dcaa140e..3d9ee33c9 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyChannelConnector.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyChannelConnector.java
@@ -15,7 +15,6 @@
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import org.asynchttpclient.AsyncHandler;
-import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.AsyncHttpClientState;
 import org.asynchttpclient.netty.SimpleChannelFutureListener;
 import org.asynchttpclient.netty.channel.NettyConnectListener;
@@ -26,22 +25,25 @@
 import java.net.InetSocketAddress;
 import java.util.List;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
 public class NettyChannelConnector {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(NettyChannelConnector.class);
 
+  private static final AtomicIntegerFieldUpdater<NettyChannelConnector> I_UPDATER = AtomicIntegerFieldUpdater
+          .newUpdater(NettyChannelConnector.class, "i");
+
   private final AsyncHandler<?> asyncHandler;
   private final InetSocketAddress localAddress;
   private final List<InetSocketAddress> remoteAddresses;
   private final AsyncHttpClientState clientState;
   private volatile int i = 0;
 
-  public NettyChannelConnector(InetAddress localAddress,//
-                               List<InetSocketAddress> remoteAddresses,//
-                               AsyncHandler<?> asyncHandler,//
-                               AsyncHttpClientState clientState,//
-                               AsyncHttpClientConfig config) {
+  NettyChannelConnector(InetAddress localAddress,
+                               List<InetSocketAddress> remoteAddresses,
+                               AsyncHandler<?> asyncHandler,
+                               AsyncHttpClientState clientState) {
     this.localAddress = localAddress != null ? new InetSocketAddress(localAddress, 0) : null;
     this.remoteAddresses = remoteAddresses;
     this.asyncHandler = asyncHandler;
@@ -49,7 +51,7 @@ public NettyChannelConnector(InetAddress localAddress,//
   }
 
   private boolean pickNextRemoteAddress() {
-    i++;
+    I_UPDATER.incrementAndGet(this);
     return i < remoteAddresses.size();
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequest.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequest.java
index 7b0cb9210..186350157 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequest.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequest.java
@@ -21,7 +21,7 @@
   private final HttpRequest httpRequest;
   private final NettyBody body;
 
-  public NettyRequest(HttpRequest httpRequest, NettyBody body) {
+  NettyRequest(HttpRequest httpRequest, NettyBody body) {
     this.httpRequest = httpRequest;
     this.body = body;
   }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
index 7204b7099..33d62ff51 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
@@ -39,13 +39,13 @@
 
 public final class NettyRequestFactory {
 
-  public static final String BROTLY_ACCEPT_ENCODING_SUFFIX = ", br";
-  public static final String GZIP_DEFLATE = HttpHeaderValues.GZIP + "," + HttpHeaderValues.DEFLATE;
+  private static final String BROTLY_ACCEPT_ENCODING_SUFFIX = ", br";
+  private static final String GZIP_DEFLATE = HttpHeaderValues.GZIP + "," + HttpHeaderValues.DEFLATE;
 
   private final AsyncHttpClientConfig config;
   private final ClientCookieEncoder cookieEncoder;
 
-  public NettyRequestFactory(AsyncHttpClientConfig config) {
+  NettyRequestFactory(AsyncHttpClientConfig config) {
     this.config = config;
     cookieEncoder = config.isUseLaxCookieEncoder() ? ClientCookieEncoder.LAX : ClientCookieEncoder.STRICT;
   }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
index f0e3cce20..ac8a5dc5c 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
@@ -81,10 +81,9 @@ public NettyRequestSender(AsyncHttpClientConfig config, //
     requestFactory = new NettyRequestFactory(config);
   }
 
-  public <T> ListenableFuture<T> sendRequest(final Request request, //
-                                             final AsyncHandler<T> asyncHandler, //
-                                             NettyResponseFuture<T> future, //
-                                             boolean performingNextRequest) {
+  public <T> ListenableFuture<T> sendRequest(final Request request,
+                                             final AsyncHandler<T> asyncHandler,
+                                             NettyResponseFuture<T> future) {
 
     if (isClosed()) {
       throw new IllegalStateException("Closed");
@@ -139,7 +138,7 @@ private boolean isConnectDone(Request request, NettyResponseFuture<?> future) {
     Channel channel = getOpenChannel(future, request, proxyServer, asyncHandler);
 
     return Channels.isChannelActive(channel)
-            ? sendRequestWithOpenChannel(request, proxyServer, newFuture, asyncHandler, channel)
+            ? sendRequestWithOpenChannel(newFuture, asyncHandler, channel)
             : sendRequestWithNewChannel(request, proxyServer, newFuture, asyncHandler);
   }
 
@@ -170,7 +169,7 @@ private boolean isConnectDone(Request request, NettyResponseFuture<?> future) {
       if (Channels.isChannelActive(channel)) {
         // if the channel is still active, we can use it,
         // otherwise, channel was closed by the time we computed the request, try again
-        return sendRequestWithOpenChannel(request, proxyServer, newFuture, asyncHandler, channel);
+        return sendRequestWithOpenChannel(newFuture, asyncHandler, channel);
       }
     }
 
@@ -183,7 +182,7 @@ private boolean isConnectDone(Request request, NettyResponseFuture<?> future) {
                                                                       final AsyncHandler<T> asyncHandler, NettyResponseFuture<T> originalFuture, ProxyServer proxy,
                                                                       boolean performConnectRequest) {
 
-    Realm realm = null;
+    Realm realm;
     if (originalFuture != null) {
       realm = originalFuture.getRealm();
     } else {
@@ -224,8 +223,9 @@ private Channel getOpenChannel(NettyResponseFuture<?> future, Request request, P
     }
   }
 
-  private <T> ListenableFuture<T> sendRequestWithOpenChannel(Request request, ProxyServer proxy,
-                                                             NettyResponseFuture<T> future, AsyncHandler<T> asyncHandler, Channel channel) {
+  private <T> ListenableFuture<T> sendRequestWithOpenChannel(NettyResponseFuture<T> future,
+                                                             AsyncHandler<T> asyncHandler,
+                                                             Channel channel) {
 
     try {
       asyncHandler.onConnectionPooled(channel);
@@ -283,8 +283,6 @@ private Channel getOpenChannel(NettyResponseFuture<?> future, Request request, P
     future.setInProxyAuth(
             proxyRealm != null && proxyRealm.isUsePreemptiveAuth() && proxyRealm.getScheme() != AuthScheme.NTLM);
 
-    Object partitionKey = future.getPartitionKey();
-
     try {
       if (!channelManager.isOpen()) {
         throw PoolAlreadyClosedException.INSTANCE;
@@ -305,9 +303,9 @@ private Channel getOpenChannel(NettyResponseFuture<?> future, Request request, P
               @Override
               protected void onSuccess(List<InetSocketAddress> addresses) {
                 NettyConnectListener<T> connectListener = new NettyConnectListener<>(future,
-                        NettyRequestSender.this, channelManager, connectionSemaphore, partitionKey);
+                        NettyRequestSender.this, channelManager, connectionSemaphore);
                 NettyChannelConnector connector = new NettyChannelConnector(request.getLocalAddress(),
-                        addresses, asyncHandler, clientState, config);
+                        addresses, asyncHandler, clientState);
                 if (!future.isDone()) {
                   // Do not throw an exception when we need an extra connection for a redirect
                   // FIXME why? This violate the max connection per host handling, right?
@@ -545,7 +543,7 @@ public boolean applyIoExceptionFiltersAndReplayRequest(NettyResponseFuture<?> fu
   }
 
   public <T> void sendNextRequest(final Request request, final NettyResponseFuture<T> future) {
-    sendRequest(request, future.getAsyncHandler(), future, true);
+    sendRequest(request, future.getAsyncHandler(), future);
   }
 
   private void validateWebSocketRequest(Request request, AsyncHandler<?> asyncHandler) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/WriteCompleteListener.java b/client/src/main/java/org/asynchttpclient/netty/request/WriteCompleteListener.java
index fc8f7c271..0d3560fb7 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/WriteCompleteListener.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/WriteCompleteListener.java
@@ -19,12 +19,12 @@
 
 public class WriteCompleteListener extends WriteListener implements GenericFutureListener<ChannelFuture> {
 
-  public WriteCompleteListener(NettyResponseFuture<?> future) {
+  WriteCompleteListener(NettyResponseFuture<?> future) {
     super(future, true);
   }
 
   @Override
-  public void operationComplete(ChannelFuture future) throws Exception {
+  public void operationComplete(ChannelFuture future) {
     operationComplete(future.channel(), future.cause());
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/WriteListener.java b/client/src/main/java/org/asynchttpclient/netty/request/WriteListener.java
index 5170f4f52..ab38a66f9 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/WriteListener.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/WriteListener.java
@@ -27,10 +27,10 @@
 
   private static final Logger LOGGER = LoggerFactory.getLogger(WriteListener.class);
   protected final NettyResponseFuture<?> future;
-  protected final ProgressAsyncHandler<?> progressAsyncHandler;
-  protected final boolean notifyHeaders;
+  final ProgressAsyncHandler<?> progressAsyncHandler;
+  final boolean notifyHeaders;
 
-  public WriteListener(NettyResponseFuture<?> future, boolean notifyHeaders) {
+  WriteListener(NettyResponseFuture<?> future, boolean notifyHeaders) {
     this.future = future;
     this.progressAsyncHandler = future.getAsyncHandler() instanceof ProgressAsyncHandler ? (ProgressAsyncHandler<?>) future.getAsyncHandler() : null;
     this.notifyHeaders = notifyHeaders;
@@ -51,7 +51,7 @@ private boolean abortOnThrowable(Channel channel, Throwable cause) {
     return false;
   }
 
-  protected void operationComplete(Channel channel, Throwable cause) {
+  void operationComplete(Channel channel, Throwable cause) {
     future.touch();
 
     // The write operation failed. If the channel was cached, it means it got asynchronously closed.
@@ -61,10 +61,8 @@ protected void operationComplete(Channel channel, Throwable cause) {
     }
 
     if (progressAsyncHandler != null) {
-      /**
-       * We need to make sure we aren't in the middle of an authorization process before publishing events as we will re-publish again the same event after the authorization,
-       * causing unpredictable behavior.
-       */
+       // We need to make sure we aren't in the middle of an authorization process before publishing events as we will re-publish again the same event after the authorization,
+       // causing unpredictable behavior.
       boolean startPublishing = !future.isInAuth() && !future.isInProxyAuth();
       if (startPublishing) {
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java b/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
index 5ea2c84d7..d5f1852e2 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
@@ -34,7 +34,7 @@
   private boolean endOfInput;
   private long progress = 0L;
 
-  public BodyChunkedInput(Body body) {
+  BodyChunkedInput(Body body) {
     this.body = assertNotNull(body, "body");
     this.contentLength = body.getContentLength();
     if (contentLength <= 0)
@@ -74,7 +74,7 @@ public ByteBuf readChunk(ByteBufAllocator alloc) throws Exception {
   }
 
   @Override
-  public boolean isEndOfInput() throws Exception {
+  public boolean isEndOfInput() {
     return endOfInput;
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/BodyFileRegion.java b/client/src/main/java/org/asynchttpclient/netty/request/body/BodyFileRegion.java
index 932eb3fe0..bc2ac041f 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/BodyFileRegion.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/BodyFileRegion.java
@@ -26,12 +26,12 @@
 /**
  * Adapts a {@link RandomAccessBody} to Netty's {@link FileRegion}.
  */
-public class BodyFileRegion extends AbstractReferenceCounted implements FileRegion {
+class BodyFileRegion extends AbstractReferenceCounted implements FileRegion {
 
   private final RandomAccessBody body;
   private long transferred;
 
-  public BodyFileRegion(RandomAccessBody body) {
+  BodyFileRegion(RandomAccessBody body) {
     this.body = assertNotNull(body, "body");
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
index 8146f7496..8335a4076 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
@@ -28,8 +28,6 @@
 import org.asynchttpclient.request.body.generator.FeedableBodyGenerator;
 import org.asynchttpclient.request.body.generator.ReactiveStreamsBodyGenerator;
 
-import java.io.IOException;
-
 import static org.asynchttpclient.util.MiscUtils.closeSilently;
 
 public class NettyBodyBody implements NettyBody {
@@ -52,7 +50,7 @@ public long getContentLength() {
   }
 
   @Override
-  public void write(final Channel channel, NettyResponseFuture<?> future) throws IOException {
+  public void write(final Channel channel, NettyResponseFuture<?> future) {
 
     Object msg;
     if (body instanceof RandomAccessBody && !ChannelManager.isSslHandlerConfigured(channel.pipeline()) && !config.isDisableZeroCopy()) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
index a178dc574..981aea522 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
@@ -16,7 +16,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 
-
 public class NettyByteArrayBody extends NettyDirectBody {
 
   private final byte[] bytes;
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyDirectBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyDirectBody.java
index 99660ce99..0d2535871 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyDirectBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyDirectBody.java
@@ -17,14 +17,12 @@
 import io.netty.channel.Channel;
 import org.asynchttpclient.netty.NettyResponseFuture;
 
-import java.io.IOException;
-
 public abstract class NettyDirectBody implements NettyBody {
 
   public abstract ByteBuf byteBuf();
 
   @Override
-  public void write(Channel channel, NettyResponseFuture<?> future) throws IOException {
+  public void write(Channel channel, NettyResponseFuture<?> future) {
     throw new UnsupportedOperationException("This kind of body is supposed to be writen directly");
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
index 069d75139..178926bd6 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
@@ -52,10 +52,6 @@ public File getFile() {
     return file;
   }
 
-  public long getOffset() {
-    return offset;
-  }
-
   @Override
   public long getContentLength() {
     return length;
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
index 8a24fcb37..a8f2b72ef 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
@@ -25,9 +25,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
 import java.util.NoSuchElementException;
 
+import static org.asynchttpclient.util.Assertions.assertNotNull;
+
 public class NettyReactiveStreamsBody implements NettyBody {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(NettyReactiveStreamsBody.class);
@@ -48,7 +49,7 @@ public long getContentLength() {
   }
 
   @Override
-  public void write(Channel channel, NettyResponseFuture<?> future) throws IOException {
+  public void write(Channel channel, NettyResponseFuture<?> future) {
     if (future.isStreamConsumed()) {
       LOGGER.warn("Stream has already been consumed and cannot be reset");
     } else {
@@ -63,7 +64,7 @@ public void write(Channel channel, NettyResponseFuture<?> future) throws IOExcep
   private static class SubscriberAdapter implements Subscriber<ByteBuf> {
     private final Subscriber<HttpContent> subscriber;
 
-    public SubscriberAdapter(Subscriber<HttpContent> subscriber) {
+    SubscriberAdapter(Subscriber<HttpContent> subscriber) {
       this.subscriber = subscriber;
     }
 
@@ -96,7 +97,7 @@ public void onComplete() {
     private final NettyResponseFuture<?> future;
     private volatile Subscription deferredSubscription;
 
-    public NettySubscriber(Channel channel, NettyResponseFuture<?> future) {
+    NettySubscriber(Channel channel, NettyResponseFuture<?> future) {
       super(channel.eventLoop());
       this.channel = channel;
       this.future = future;
@@ -113,14 +114,13 @@ public void onSubscribe(Subscription subscription) {
       deferredSubscription = subscription;
     }
 
-    public void delayedStart() {
+    void delayedStart() {
       super.onSubscribe(deferredSubscription);
     }
 
     @Override
     protected void error(Throwable error) {
-      if (error == null)
-        throw null;
+      assertNotNull(error, "error");
       removeFromPipeline();
       future.abort(error);
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java b/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
index eade0835e..42f30c96f 100644
--- a/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
@@ -79,5 +79,4 @@ protected SslContextBuilder configureSslContextBuilder(SslContextBuilder builder
     // default to no op
     return builder;
   }
-
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/timeout/ReadTimeoutTimerTask.java b/client/src/main/java/org/asynchttpclient/netty/timeout/ReadTimeoutTimerTask.java
index b791bfeb2..5675c4485 100755
--- a/client/src/main/java/org/asynchttpclient/netty/timeout/ReadTimeoutTimerTask.java
+++ b/client/src/main/java/org/asynchttpclient/netty/timeout/ReadTimeoutTimerTask.java
@@ -24,7 +24,7 @@
 
   private final long readTimeout;
 
-  public ReadTimeoutTimerTask(//
+  ReadTimeoutTimerTask(//
                               NettyResponseFuture<?> nettyResponseFuture,//
                               NettyRequestSender requestSender,//
                               TimeoutsHolder timeoutsHolder,//
@@ -33,7 +33,7 @@ public ReadTimeoutTimerTask(//
     this.readTimeout = readTimeout;
   }
 
-  public void run(Timeout timeout) throws Exception {
+  public void run(Timeout timeout) {
 
     if (done.getAndSet(true) || requestSender.isClosed())
       return;
diff --git a/client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java b/client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java
index ef297fa92..ea8cef4f1 100755
--- a/client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java
+++ b/client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java
@@ -24,16 +24,15 @@
 
   private final long requestTimeout;
 
-  public RequestTimeoutTimerTask(//
-                                 NettyResponseFuture<?> nettyResponseFuture,//
-                                 NettyRequestSender requestSender,//
-                                 TimeoutsHolder timeoutsHolder,//
+  RequestTimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture,
+                                 NettyRequestSender requestSender,
+                                 TimeoutsHolder timeoutsHolder,
                                  int requestTimeout) {
     super(nettyResponseFuture, requestSender, timeoutsHolder);
     this.requestTimeout = requestTimeout;
   }
 
-  public void run(Timeout timeout) throws Exception {
+  public void run(Timeout timeout) {
 
     if (done.getAndSet(true) || requestSender.isClosed())
       return;
diff --git a/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutTimerTask.java b/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutTimerTask.java
index 36e157143..e746adfdb 100755
--- a/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutTimerTask.java
+++ b/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutTimerTask.java
@@ -29,16 +29,16 @@
 
   protected final AtomicBoolean done = new AtomicBoolean();
   protected final NettyRequestSender requestSender;
-  protected final TimeoutsHolder timeoutsHolder;
-  protected volatile NettyResponseFuture<?> nettyResponseFuture;
+  final TimeoutsHolder timeoutsHolder;
+  volatile NettyResponseFuture<?> nettyResponseFuture;
 
-  public TimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture, NettyRequestSender requestSender, TimeoutsHolder timeoutsHolder) {
+  TimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture, NettyRequestSender requestSender, TimeoutsHolder timeoutsHolder) {
     this.nettyResponseFuture = nettyResponseFuture;
     this.requestSender = requestSender;
     this.timeoutsHolder = timeoutsHolder;
   }
 
-  protected void expire(String message, long time) {
+  void expire(String message, long time) {
     LOGGER.debug("{} for {} after {} ms", message, nettyResponseFuture, time);
     requestSender.abort(nettyResponseFuture.channel(), nettyResponseFuture, new TimeoutException(message));
   }
@@ -53,7 +53,7 @@ public void clean() {
     }
   }
 
-  protected void appendRemoteAddress(StringBuilder sb) {
+  void appendRemoteAddress(StringBuilder sb) {
     InetSocketAddress remoteAddress = timeoutsHolder.remoteAddress();
     sb.append(remoteAddress.getHostName());
     if (!remoteAddress.isUnresolved()) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java b/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java
index 7826d30db..89d3faf58 100755
--- a/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java
+++ b/client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java
@@ -29,13 +29,13 @@
 
 public class TimeoutsHolder {
 
-  public final Timeout requestTimeout;
+  private final Timeout requestTimeout;
   private final AtomicBoolean cancelled = new AtomicBoolean();
   private final Timer nettyTimer;
   private final NettyRequestSender requestSender;
   private final long requestTimeoutMillisTime;
   private final int readTimeoutValue;
-  public volatile Timeout readTimeout;
+  private volatile Timeout readTimeout;
   private volatile NettyResponseFuture<?> nettyResponseFuture;
   private volatile InetSocketAddress remoteAddress;
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
index 78901256d..1b189acd0 100755
--- a/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
+++ b/client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
@@ -35,14 +35,14 @@
 import static io.netty.buffer.Unpooled.wrappedBuffer;
 import static org.asynchttpclient.netty.util.ByteBufUtils.byteBuf2Bytes;
 
-public class NettyWebSocket implements WebSocket {
+public final class NettyWebSocket implements WebSocket {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(NettyWebSocket.class);
 
   protected final Channel channel;
-  protected final HttpHeaders upgradeHeaders;
-  protected final Collection<WebSocketListener> listeners;
-  protected FragmentedFrameType expectedFragmentedFrameType;
+  private final HttpHeaders upgradeHeaders;
+  private final Collection<WebSocketListener> listeners;
+  private FragmentedFrameType expectedFragmentedFrameType;
   // no need for volatile because only mutated in IO thread
   private boolean ready;
   private List<WebSocketFrame> bufferedFrames;
@@ -51,7 +51,7 @@ public NettyWebSocket(Channel channel, HttpHeaders upgradeHeaders) {
     this(channel, upgradeHeaders, new ConcurrentLinkedQueue<>());
   }
 
-  public NettyWebSocket(Channel channel, HttpHeaders upgradeHeaders, Collection<WebSocketListener> listeners) {
+  private NettyWebSocket(Channel channel, HttpHeaders upgradeHeaders, Collection<WebSocketListener> listeners) {
     this.channel = channel;
     this.upgradeHeaders = upgradeHeaders;
     this.listeners = listeners;
@@ -272,7 +272,7 @@ public String toString() {
     return "NettyWebSocket{channel=" + channel + '}';
   }
 
-  public void onBinaryFrame(BinaryWebSocketFrame frame) {
+  private void onBinaryFrame(BinaryWebSocketFrame frame) {
     if (expectedFragmentedFrameType == null && !frame.isFinalFragment()) {
       expectedFragmentedFrameType = FragmentedFrameType.BINARY;
     }
@@ -286,7 +286,7 @@ private void onBinaryFrame0(WebSocketFrame frame) {
     }
   }
 
-  public void onTextFrame(TextWebSocketFrame frame) {
+  private void onTextFrame(TextWebSocketFrame frame) {
     if (expectedFragmentedFrameType == null && !frame.isFinalFragment()) {
       expectedFragmentedFrameType = FragmentedFrameType.TEXT;
     }
@@ -303,7 +303,7 @@ private void onTextFrame0(WebSocketFrame frame) {
     }
   }
 
-  public void onContinuationFrame(ContinuationWebSocketFrame frame) {
+  private void onContinuationFrame(ContinuationWebSocketFrame frame) {
     if (expectedFragmentedFrameType == null) {
       LOGGER.warn("Received continuation frame without an original text or binary frame, ignoring");
       return;
@@ -326,14 +326,14 @@ public void onContinuationFrame(ContinuationWebSocketFrame frame) {
     }
   }
 
-  public void onPingFrame(PingWebSocketFrame frame) {
+  private void onPingFrame(PingWebSocketFrame frame) {
     byte[] bytes = byteBuf2Bytes(frame.content());
     for (WebSocketListener listener : listeners) {
       listener.onPingFrame(bytes);
     }
   }
 
-  public void onPongFrame(PongWebSocketFrame frame) {
+  private void onPongFrame(PongWebSocketFrame frame) {
     byte[] bytes = byteBuf2Bytes(frame.content());
     for (WebSocketListener listener : listeners) {
       listener.onPongFrame(bytes);
@@ -341,6 +341,6 @@ public void onPongFrame(PongWebSocketFrame frame) {
   }
 
   private enum FragmentedFrameType {
-    TEXT, BINARY;
+    TEXT, BINARY
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngineException.java b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngineException.java
index b478b208d..fe15cffd3 100644
--- a/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngineException.java
+++ b/client/src/main/java/org/asynchttpclient/ntlm/NtlmEngineException.java
@@ -30,7 +30,7 @@
 /**
  * Signals NTLM protocol failure.
  */
-public class NtlmEngineException extends RuntimeException {
+class NtlmEngineException extends RuntimeException {
 
   private static final long serialVersionUID = 6027981323731768824L;
 
@@ -39,7 +39,7 @@
    *
    * @param message the exception detail message
    */
-  public NtlmEngineException(String message) {
+  NtlmEngineException(String message) {
     super(message);
   }
 
@@ -50,8 +50,7 @@ public NtlmEngineException(String message) {
    * @param cause   the <tt>Throwable</tt> that caused this exception, or <tt>null</tt>
    *                if the cause is unavailable, unknown, or not a <tt>Throwable</tt>
    */
-  public NtlmEngineException(String message, Throwable cause) {
+  NtlmEngineException(String message, Throwable cause) {
     super(message, cause);
   }
-
 }
diff --git a/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java b/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java
index aecd2cfc5..d2a8554d1 100644
--- a/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java
+++ b/client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java
@@ -26,7 +26,7 @@
   private final String secret;
   private final String percentEncodedKey;
 
-  public ConsumerKey(String key, String secret) {
+  ConsumerKey(String key, String secret) {
     this.key = key;
     this.secret = secret;
     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
diff --git a/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java b/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java
index 242d9aff7..c0122c302 100644
--- a/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java
+++ b/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java
@@ -25,17 +25,13 @@
  */
 public class OAuthSignatureCalculator implements SignatureCalculator {
 
-  private static final ThreadLocal<OAuthSignatureCalculatorInstance> INSTANCES = new ThreadLocal<OAuthSignatureCalculatorInstance>() {
-    protected OAuthSignatureCalculatorInstance initialValue() {
-      try {
-        return new OAuthSignatureCalculatorInstance();
-      } catch (NoSuchAlgorithmException e) {
-        throw new ExceptionInInitializerError(e);
-      }
+  private static final ThreadLocal<OAuthSignatureCalculatorInstance> INSTANCES = ThreadLocal.withInitial(() -> {
+    try {
+      return new OAuthSignatureCalculatorInstance();
+    } catch (NoSuchAlgorithmException e) {
+      throw new ExceptionInInitializerError(e);
     }
-
-    ;
-  };
+  });
 
   private final ConsumerKey consumerAuth;
 
@@ -45,7 +41,7 @@ protected OAuthSignatureCalculatorInstance initialValue() {
    * @param consumerAuth Consumer key to use for signature calculation
    * @param userAuth     Request/access token to use for signature calculation
    */
-  public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {
+  OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {
     this.consumerAuth = consumerAuth;
     this.userAuth = userAuth;
   }
diff --git a/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java b/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java
index 3295b561a..1eba1412b 100644
--- a/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java
+++ b/client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java
@@ -60,7 +60,7 @@
   private final byte[] nonceBuffer = new byte[16];
   private final Parameters parameters = new Parameters();
 
-  public OAuthSignatureCalculatorInstance() throws NoSuchAlgorithmException {
+  OAuthSignatureCalculatorInstance() throws NoSuchAlgorithmException {
     mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
   }
 
@@ -118,10 +118,8 @@ private String encodedParams(ConsumerKey consumerAuth, RequestToken userAuth, lo
 
     parameters.reset();
 
-    /**
-     * List of all query and form parameters added to this request; needed for calculating request signature
-     */
-    // start with standard OAuth parameters we need
+    // List of all query and form parameters added to this request; needed for calculating request signature
+    // Start with standard OAuth parameters we need
     parameters.add(KEY_OAUTH_CONSUMER_KEY, consumerAuth.getPercentEncodedKey())//
             .add(KEY_OAUTH_NONCE, percentEncodedNonce)
             .add(KEY_OAUTH_SIGNATURE_METHOD, OAUTH_SIGNATURE_METHOD)//
diff --git a/client/src/main/java/org/asynchttpclient/oauth/Parameter.java b/client/src/main/java/org/asynchttpclient/oauth/Parameter.java
index bc4734ea2..c89eba827 100644
--- a/client/src/main/java/org/asynchttpclient/oauth/Parameter.java
+++ b/client/src/main/java/org/asynchttpclient/oauth/Parameter.java
@@ -20,7 +20,7 @@
 
   final String key, value;
 
-  public Parameter(String key, String value) {
+  Parameter(String key, String value) {
     this.key = key;
     this.value = value;
   }
diff --git a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java
index 485caadad..e82829fab 100644
--- a/client/src/main/java/org/asynchttpclient/oauth/Parameters.java
+++ b/client/src/main/java/org/asynchttpclient/oauth/Parameters.java
@@ -38,8 +38,7 @@ String sortAndConcat() {
 
     // and build parameter section using pre-encoded pieces:
     StringBuilder encodedParams = StringBuilderPool.DEFAULT.stringBuilder();
-    for (int i = 0; i < parameters.size(); i++) {
-      Parameter param = parameters.get(i);
+    for (Parameter param : parameters) {
       encodedParams.append(param.key).append('=').append(param.value).append('&');
     }
     int length = encodedParams.length();
diff --git a/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java b/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java
index b2888b3ac..89a30d6fb 100644
--- a/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java
+++ b/client/src/main/java/org/asynchttpclient/oauth/RequestToken.java
@@ -28,7 +28,7 @@
   private final String secret;
   private final String percentEncodedKey;
 
-  public RequestToken(String key, String token) {
+  RequestToken(String key, String token) {
     this.key = key;
     this.secret = token;
     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
diff --git a/client/src/main/java/org/asynchttpclient/proxy/ProxyType.java b/client/src/main/java/org/asynchttpclient/proxy/ProxyType.java
index ac203a67b..bf680018a 100644
--- a/client/src/main/java/org/asynchttpclient/proxy/ProxyType.java
+++ b/client/src/main/java/org/asynchttpclient/proxy/ProxyType.java
@@ -18,7 +18,7 @@
 
   private final boolean http;
 
-  private ProxyType(boolean http) {
+  ProxyType(boolean http) {
     this.http = http;
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/BodyChunk.java b/client/src/main/java/org/asynchttpclient/request/body/generator/BodyChunk.java
index 76e193a0a..c4e01fbff 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/BodyChunk.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/BodyChunk.java
@@ -19,7 +19,7 @@
   public final boolean last;
   public final ByteBuf buffer;
 
-  public BodyChunk(ByteBuf buffer, boolean last) {
+  BodyChunk(ByteBuf buffer, boolean last) {
     this.buffer = buffer;
     this.last = last;
   }
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGenerator.java
index 66a2a181f..3d0496fca 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGenerator.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGenerator.java
@@ -15,8 +15,6 @@
 import io.netty.buffer.ByteBuf;
 import org.asynchttpclient.request.body.Body;
 
-import java.io.IOException;
-
 /**
  * A {@link BodyGenerator} backed by a byte array.
  */
@@ -24,7 +22,7 @@
 
   private final byte[] bytes;
 
-  public ByteArrayBodyGenerator(byte[] bytes) {
+  ByteArrayBodyGenerator(byte[] bytes) {
     this.bytes = bytes;
   }
 
@@ -44,7 +42,7 @@ public long getContentLength() {
       return bytes.length;
     }
 
-    public BodyState transferTo(ByteBuf target) throws IOException {
+    public BodyState transferTo(ByteBuf target) {
 
       if (eof) {
         return BodyState.STOP;
@@ -62,7 +60,7 @@ public BodyState transferTo(ByteBuf target) throws IOException {
       return BodyState.CONTINUE;
     }
 
-    public void close() throws IOException {
+    public void close() {
       lastPosition = 0;
       eof = false;
     }
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/InputStreamBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/InputStreamBodyGenerator.java
index b0cc99bbd..b69e6b1eb 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/InputStreamBodyGenerator.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/InputStreamBodyGenerator.java
@@ -73,7 +73,7 @@ public long getContentLength() {
       return contentLength;
     }
 
-    public BodyState transferTo(ByteBuf target) throws IOException {
+    public BodyState transferTo(ByteBuf target) {
 
       // To be safe.
       chunk = new byte[target.writableBytes() - 10];
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java b/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java
index b8b79899a..180108de5 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java
@@ -16,7 +16,6 @@
 import io.netty.buffer.ByteBuf;
 import org.asynchttpclient.request.body.Body;
 
-import java.io.IOException;
 import java.util.Queue;
 
 public final class PushBody implements Body {
@@ -34,7 +33,7 @@ public long getContentLength() {
   }
 
   @Override
-  public BodyState transferTo(final ByteBuf target) throws IOException {
+  public BodyState transferTo(final ByteBuf target) {
     switch (state) {
       case CONTINUE:
         return readNextChunk(target);
@@ -45,7 +44,7 @@ public BodyState transferTo(final ByteBuf target) throws IOException {
     }
   }
 
-  private BodyState readNextChunk(ByteBuf target) throws IOException {
+  private BodyState readNextChunk(ByteBuf target) {
     BodyState res = BodyState.SUSPEND;
     while (target.isWritable() && state != BodyState.STOP) {
       BodyChunk nextChunk = queue.peek();
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/ReactiveStreamsBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/ReactiveStreamsBodyGenerator.java
index b8a3fbdde..7cf1c14fd 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/ReactiveStreamsBodyGenerator.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/ReactiveStreamsBodyGenerator.java
@@ -24,6 +24,8 @@
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static org.asynchttpclient.util.Assertions.assertNotNull;
+
 public class ReactiveStreamsBodyGenerator implements FeedableBodyGenerator {
 
   private final Publisher<ByteBuf> publisher;
@@ -66,7 +68,7 @@ public long getContentLength() {
 
   @Override
   public Body createBody() {
-    return new StreamedBody(publisher, feedableBodyGenerator, contentLength);
+    return new StreamedBody(feedableBodyGenerator, contentLength);
   }
 
   private class StreamedBody implements Body {
@@ -77,7 +79,7 @@ public Body createBody() {
 
     private final long contentLength;
 
-    public StreamedBody(Publisher<ByteBuf> publisher, FeedableBodyGenerator bodyGenerator, long contentLength) {
+    public StreamedBody(FeedableBodyGenerator bodyGenerator, long contentLength) {
       this.body = bodyGenerator.createBody();
       this.subscriber = new SimpleSubscriber(bodyGenerator);
       this.contentLength = contentLength;
@@ -116,8 +118,7 @@ public SimpleSubscriber(FeedableBodyGenerator feeder) {
 
     @Override
     public void onSubscribe(Subscription s) {
-      if (s == null)
-        throw null;
+      assertNotNull(s, "subscription");
 
       // If someone has made a mistake and added this Subscriber multiple times, let's handle it gracefully
       if (this.subscription != null) {
@@ -129,11 +130,10 @@ public void onSubscribe(Subscription s) {
     }
 
     @Override
-    public void onNext(ByteBuf t) {
-      if (t == null)
-        throw null;
+    public void onNext(ByteBuf b) {
+      assertNotNull(b, "bytebuf");
       try {
-        feeder.feed(t, false);
+        feeder.feed(b, false);
       } catch (Exception e) {
         LOGGER.error("Exception occurred while processing element in stream.", e);
         subscription.cancel();
@@ -142,8 +142,7 @@ public void onNext(ByteBuf t) {
 
     @Override
     public void onError(Throwable t) {
-      if (t == null)
-        throw null;
+      assertNotNull(t, "throwable");
       LOGGER.debug("Error occurred while consuming body stream.", t);
       FeedListener listener = feedListener;
       if (listener != null) {
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java
index fd6e474ec..b74319506 100755
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java
@@ -22,7 +22,7 @@ public UnboundedQueueFeedableBodyGenerator() {
   }
 
   @Override
-  protected boolean offer(BodyChunk chunk) throws Exception {
+  protected boolean offer(BodyChunk chunk) {
     return queue.offer(chunk);
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java
index 0bc153b06..51ec2d149 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java
@@ -68,9 +68,6 @@ public String getFileName() {
 
   @Override
   public String toString() {
-    return new StringBuilder()//
-            .append(super.toString())//
-            .append(" filename=").append(fileName)//
-            .toString();
+    return super.toString() + " filename=" + fileName;
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileUploadStalledException.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/FileUploadStalledException.java
deleted file mode 100644
index fa2d09d7d..000000000
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/FileUploadStalledException.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
- *
- * This program is licensed to you under the Apache License Version 2.0,
- * and you may not use this file except in compliance with the Apache License Version 2.0.
- * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the Apache License Version 2.0 is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
- */
-package org.asynchttpclient.request.body.multipart;
-
-import java.io.IOException;
-
-/**
- * @author Gail Hernandez
- */
-@SuppressWarnings("serial")
-public class FileUploadStalledException extends IOException {
-}
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartBody.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartBody.java
index 05e28d721..f2d8eb959 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartBody.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartBody.java
@@ -65,7 +65,7 @@ private long computeContentLength() {
     }
   }
 
-  public void close() throws IOException {
+  public void close() {
     if (closed.compareAndSet(false, true)) {
       for (MultipartPart<? extends Part> part : parts) {
         closeSilently(part);
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/Part.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/Part.java
index 031ebced2..470ce6942 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/Part.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/Part.java
@@ -26,51 +26,11 @@
    */
   byte[] CRLF_BYTES = "\r\n".getBytes(US_ASCII);
 
-  /**
-   * Content dispostion as a byte
-   */
-  byte QUOTE_BYTE = '\"';
-
   /**
    * Extra characters as a byte array
    */
   byte[] EXTRA_BYTES = "--".getBytes(US_ASCII);
 
-  /**
-   * Content dispostion as a byte array
-   */
-  byte[] CONTENT_DISPOSITION_BYTES = "Content-Disposition: ".getBytes(US_ASCII);
-
-  /**
-   * form-data as a byte array
-   */
-  byte[] FORM_DATA_DISPOSITION_TYPE_BYTES = "form-data".getBytes(US_ASCII);
-
-  /**
-   * name as a byte array
-   */
-  byte[] NAME_BYTES = "; name=".getBytes(US_ASCII);
-
-  /**
-   * Content type header as a byte array
-   */
-  byte[] CONTENT_TYPE_BYTES = "Content-Type: ".getBytes(US_ASCII);
-
-  /**
-   * Content charset as a byte array
-   */
-  byte[] CHARSET_BYTES = "; charset=".getBytes(US_ASCII);
-
-  /**
-   * Content type header as a byte array
-   */
-  byte[] CONTENT_TRANSFER_ENCODING_BYTES = "Content-Transfer-Encoding: ".getBytes(US_ASCII);
-
-  /**
-   * Content type header as a byte array
-   */
-  byte[] CONTENT_ID_BYTES = "Content-ID: ".getBytes(US_ASCII);
-
   /**
    * Return the name of this part.
    *
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/PartBase.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/PartBase.java
index 48129c1fd..950f3987e 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/PartBase.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/PartBase.java
@@ -123,14 +123,12 @@ public void addCustomHeader(String name, String value) {
   }
 
   public String toString() {
-    return new StringBuilder()//
-            .append(getClass().getSimpleName())//
-            .append(" name=").append(getName())//
-            .append(" contentType=").append(getContentType())//
-            .append(" charset=").append(getCharset())//
-            .append(" tranferEncoding=").append(getTransferEncoding())//
-            .append(" contentId=").append(getContentId())//
-            .append(" dispositionType=").append(getDispositionType())//
-            .toString();
+    return getClass().getSimpleName() +
+            " name=" + getName() +
+            " contentType=" + getContentType() +
+            " charset=" + getCharset() +
+            " tranferEncoding=" + getTransferEncoding() +
+            " contentId=" + getContentId() +
+            " dispositionType=" + getDispositionType();
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/StringPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/StringPart.java
index 16e0b21a0..6d2e078cb 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/StringPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/StringPart.java
@@ -23,7 +23,7 @@
   /**
    * Default charset of string parameters
    */
-  public static final Charset DEFAULT_CHARSET = UTF_8;
+  private static final Charset DEFAULT_CHARSET = UTF_8;
 
   /**
    * Contents of this StringPart.
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/ByteArrayMultipartPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/ByteArrayMultipartPart.java
index a01044bec..d54560107 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/ByteArrayMultipartPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/ByteArrayMultipartPart.java
@@ -35,7 +35,7 @@ protected long getContentLength() {
   }
 
   @Override
-  protected long transferContentTo(ByteBuf target) throws IOException {
+  protected long transferContentTo(ByteBuf target) {
     return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart.java
index 80eb4b561..e3023cc62 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart.java
@@ -11,7 +11,7 @@
    */
   private static final byte[] FILE_NAME_BYTES = "; filename=".getBytes(US_ASCII);
 
-  public FileLikeMultipartPart(T part, byte[] boundary) {
+  FileLikeMultipartPart(T part, byte[] boundary) {
     super(part, boundary);
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MessageEndMultipartPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MessageEndMultipartPart.java
index 4f197870e..78d78f4bd 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MessageEndMultipartPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MessageEndMultipartPart.java
@@ -35,7 +35,7 @@ public MessageEndMultipartPart(byte[] boundary) {
   }
 
   @Override
-  public long transferTo(ByteBuf target) throws IOException {
+  public long transferTo(ByteBuf target) {
     return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
   }
 
@@ -79,12 +79,12 @@ protected long getContentLength() {
   }
 
   @Override
-  protected long transferContentTo(ByteBuf target) throws IOException {
+  protected long transferContentTo(ByteBuf target) {
     throw new UnsupportedOperationException("Not supposed to be called");
   }
 
   @Override
-  protected long transferContentTo(WritableByteChannel target) throws IOException {
+  protected long transferContentTo(WritableByteChannel target) {
     throw new UnsupportedOperationException("Not supposed to be called");
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
index 08a7fda74..43f86efef 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
@@ -35,7 +35,7 @@
   /**
    * Content disposition as a byte
    */
-  protected static final byte QUOTE_BYTE = '\"';
+  static final byte QUOTE_BYTE = '\"';
   /**
    * Carriage return/linefeed as a byte array
    */
@@ -91,13 +91,13 @@
   private final int preContentLength;
   private final int postContentLength;
   protected MultipartState state;
-  protected boolean slowTarget;
+  boolean slowTarget;
 
   // lazy
   private ByteBuf preContentBuffer;
   private ByteBuf postContentBuffer;
 
-  public MultipartPart(T part, byte[] boundary) {
+  MultipartPart(T part, byte[] boundary) {
     this.part = part;
     this.boundary = boundary;
     preContentLength = computePreContentLength();
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/StringMultipartPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/StringMultipartPart.java
index 5d3031af5..daf37a97c 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/StringMultipartPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/StringMultipartPart.java
@@ -35,7 +35,7 @@ protected long getContentLength() {
   }
 
   @Override
-  protected long transferContentTo(ByteBuf target) throws IOException {
+  protected long transferContentTo(ByteBuf target) {
     return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java b/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
index 66f2179c7..3edf13ff1 100644
--- a/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
+++ b/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
@@ -52,7 +52,7 @@
     whenResolved.addListener(new SimpleFutureListener<List<InetAddress>>() {
 
       @Override
-      protected void onSuccess(List<InetAddress> value) throws Exception {
+      protected void onSuccess(List<InetAddress> value) {
         ArrayList<InetSocketAddress> socketAddresses = new ArrayList<>(value.size());
         for (InetAddress a : value) {
           socketAddresses.add(new InetSocketAddress(a, port));
@@ -68,7 +68,7 @@ protected void onSuccess(List<InetAddress> value) throws Exception {
       }
 
       @Override
-      protected void onFailure(Throwable t) throws Exception {
+      protected void onFailure(Throwable t) {
         try {
           asyncHandler.onHostnameResolutionFailure(hostname, t);
         } catch (Exception e) {
diff --git a/client/src/main/java/org/asynchttpclient/spnego/SpnegoEngine.java b/client/src/main/java/org/asynchttpclient/spnego/SpnegoEngine.java
index 954cac133..fc50a397f 100644
--- a/client/src/main/java/org/asynchttpclient/spnego/SpnegoEngine.java
+++ b/client/src/main/java/org/asynchttpclient/spnego/SpnegoEngine.java
@@ -91,7 +91,7 @@ public String generateToken(String server) throws SpnegoEngineException {
        * Unfortunately SPNEGO is JRE >=1.6.
        */
 
-      /** Try SPNEGO by default, fall back to Kerberos later if error */
+      // Try SPNEGO by default, fall back to Kerberos later if error
       negotiationOid = new Oid(SPNEGO_OID);
 
       boolean tryKerberos = false;
diff --git a/client/src/main/java/org/asynchttpclient/uri/UriParser.java b/client/src/main/java/org/asynchttpclient/uri/UriParser.java
index 10402f76a..163f50c90 100644
--- a/client/src/main/java/org/asynchttpclient/uri/UriParser.java
+++ b/client/src/main/java/org/asynchttpclient/uri/UriParser.java
@@ -21,7 +21,7 @@
   public String host;
   public int port = -1;
   public String query;
-  public String authority;
+  private String authority;
   public String path;
   public String userInfo;
 
diff --git a/client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java b/client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
index e68dd3fc1..112a25d7b 100644
--- a/client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
@@ -44,7 +44,7 @@ public static String getHeaderWithPrefix(List<String> authenticateHeaders, Strin
     return null;
   }
 
-  public static String computeBasicAuthentication(Realm realm) {
+  private static String computeBasicAuthentication(Realm realm) {
     return realm != null ? computeBasicAuthentication(realm.getPrincipal(), realm.getPassword(), realm.getCharset()) : null;
   }
 
@@ -91,14 +91,14 @@ private static String computeDigestAuthentication(Realm realm) {
     return new String(StringUtils.charSequence2Bytes(builder, ISO_8859_1));
   }
 
-  private static StringBuilder append(StringBuilder builder, String name, String value, boolean quoted) {
+  private static void append(StringBuilder builder, String name, String value, boolean quoted) {
     builder.append(name).append('=');
     if (quoted)
       builder.append('"').append(value).append('"');
     else
       builder.append(value);
 
-    return builder.append(", ");
+    builder.append(", ");
   }
 
   public static String perConnectionProxyAuthorizationHeader(Request request, Realm proxyRealm) {
diff --git a/client/src/main/java/org/asynchttpclient/util/HttpConstants.java b/client/src/main/java/org/asynchttpclient/util/HttpConstants.java
index d9910762e..e17681e6d 100644
--- a/client/src/main/java/org/asynchttpclient/util/HttpConstants.java
+++ b/client/src/main/java/org/asynchttpclient/util/HttpConstants.java
@@ -43,7 +43,6 @@ private Methods() {
     public static final int MOVED_PERMANENTLY_301 = HttpResponseStatus.MOVED_PERMANENTLY.code();
     public static final int FOUND_302 = HttpResponseStatus.FOUND.code();
     public static final int SEE_OTHER_303 = HttpResponseStatus.SEE_OTHER.code();
-    public static final int NOT_MODIFIED_304 = HttpResponseStatus.NOT_MODIFIED.code();
     public static final int TEMPORARY_REDIRECT_307 = HttpResponseStatus.TEMPORARY_REDIRECT.code();
     public static final int PERMANENT_REDIRECT_308 = HttpResponseStatus.PERMANENT_REDIRECT.code();
     public static final int UNAUTHORIZED_401 = HttpResponseStatus.UNAUTHORIZED.code();
diff --git a/client/src/main/java/org/asynchttpclient/util/HttpUtils.java b/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
index 3d400d8bb..6d4e7aa68 100644
--- a/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
@@ -162,14 +162,4 @@ public static String computeOriginHeader(Uri uri) {
     }
     return sb.toString();
   }
-
-  public static class ContentType {
-    public final String value;
-    public final Charset charset;
-
-    public ContentType(String value, Charset charset) {
-      this.value = value;
-      this.charset = charset;
-    }
-  }
 }
diff --git a/client/src/main/java/org/asynchttpclient/util/MiscUtils.java b/client/src/main/java/org/asynchttpclient/util/MiscUtils.java
index f955029ce..26e98fe9d 100644
--- a/client/src/main/java/org/asynchttpclient/util/MiscUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/MiscUtils.java
@@ -46,11 +46,6 @@ public static boolean isNonEmpty(Map<?, ?> map) {
     return map != null && !map.isEmpty();
   }
 
-  public static boolean getBoolean(String systemPropName, boolean defaultValue) {
-    String systemPropValue = System.getProperty(systemPropName);
-    return systemPropValue != null ? systemPropValue.equalsIgnoreCase("true") : defaultValue;
-  }
-
   public static <T> T withDefault(T value, T def) {
     return value == null ? def : value;
   }
@@ -60,6 +55,7 @@ public static void closeSilently(Closeable closeable) {
       try {
         closeable.close();
       } catch (IOException e) {
+        //
       }
   }
 
diff --git a/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java b/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
index 8450cb3c9..5a22abc36 100644
--- a/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
@@ -17,7 +17,6 @@
 import org.asynchttpclient.Request;
 import org.asynchttpclient.proxy.ProxyServer;
 import org.asynchttpclient.proxy.ProxyServerSelector;
-import org.asynchttpclient.uri.Uri;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,12 +60,12 @@
   /**
    * The username to use for authentication for the proxy server.
    */
-  public static final String PROXY_USER = PROPERTY_PREFIX + "user";
+  private static final String PROXY_USER = PROPERTY_PREFIX + "user";
 
   /**
    * The password to use for authentication for the proxy server.
    */
-  public static final String PROXY_PASSWORD = PROPERTY_PREFIX + "password";
+  private static final String PROXY_PASSWORD = PROPERTY_PREFIX + "password";
 
   private ProxyUtils() {
   }
@@ -141,9 +140,8 @@ public static ProxyServerSelector getJdkDefaultProxyServerSelector() {
    * @param proxySelector The proxy selector to use.  Must not be null.
    * @return The proxy server selector.
    */
-  public static ProxyServerSelector createProxyServerSelector(final ProxySelector proxySelector) {
-    return new ProxyServerSelector() {
-      public ProxyServer select(Uri uri) {
+  private static ProxyServerSelector createProxyServerSelector(final ProxySelector proxySelector) {
+    return uri -> {
         try {
           URI javaUri = uri.toJavaNetURI();
 
@@ -173,7 +171,6 @@ public ProxyServer select(Uri uri) {
           logger.warn(uri + " couldn't be turned into a java.net.URI", e);
           return null;
         }
-      }
     };
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java b/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java
index 95f243ca0..a6df2fccf 100644
--- a/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java
+++ b/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java
@@ -51,7 +51,7 @@
    * {@inheritDoc}
    */
   @Override
-  public final State onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
+  public final State onBodyPartReceived(final HttpResponseBodyPart content) {
     bodyParts.add(content);
     return State.CONTINUE;
   }
@@ -60,7 +60,7 @@ public final State onBodyPartReceived(final HttpResponseBodyPart content) throws
    * {@inheritDoc}
    */
   @Override
-  public final State onStatusReceived(final HttpResponseStatus status) throws Exception {
+  public final State onStatusReceived(final HttpResponseStatus status) {
     this.status = status;
     return State.CONTINUE;
   }
@@ -69,24 +69,18 @@ public final State onStatusReceived(final HttpResponseStatus status) throws Exce
    * {@inheritDoc}
    */
   @Override
-  public final State onHeadersReceived(final HttpHeaders headers) throws Exception {
+  public final State onHeadersReceived(final HttpHeaders headers) {
     this.headers = headers;
     return State.CONTINUE;
   }
 
   private Document readXMLResponse(InputStream stream) {
     DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-    Document document = null;
+    Document document;
     try {
       document = factory.newDocumentBuilder().parse(stream);
       parse(document);
-    } catch (SAXException e) {
-      logger.error(e.getMessage(), e);
-      throw new RuntimeException(e);
-    } catch (IOException e) {
-      logger.error(e.getMessage(), e);
-      throw new RuntimeException(e);
-    } catch (ParserConfigurationException e) {
+    } catch (SAXException | IOException | ParserConfigurationException e) {
       logger.error(e.getMessage(), e);
       throw new RuntimeException(e);
     }
@@ -148,7 +142,7 @@ public void onThrowable(Throwable t) {
 
     private final int statusCode;
 
-    public HttpStatusWrapper(HttpResponseStatus wrapper, String statusText, int statusCode) {
+    HttpStatusWrapper(HttpResponseStatus wrapper, String statusText, int statusCode) {
       super(wrapper.getUri());
       this.wrapped = wrapper;
       this.statusText = statusText;
diff --git a/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java b/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java
index 5e5d53d0b..b5c4e23ec 100644
--- a/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java
+++ b/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java
@@ -32,7 +32,7 @@
   private final Response response;
   private final Document document;
 
-  public WebDavResponse(Response response, Document document) {
+  WebDavResponse(Response response, Document document) {
     this.response = response;
     this.document = document;
   }
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
index 0efe680bc..330d2574b 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
@@ -51,8 +51,6 @@
   default void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
   }
 
-  ;
-
   /**
    * Invoked when a text frame is received.
    *
@@ -73,8 +71,6 @@ default void onTextFrame(String payload, boolean finalFragment, int rsv) {
   default void onPingFrame(byte[] payload) {
   }
 
-  ;
-
   /**
    * Invoked when a pong frame is received
    *
@@ -82,6 +78,4 @@ default void onPingFrame(byte[] payload) {
    */
   default void onPongFrame(byte[] payload) {
   }
-
-  ;
 }
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
index 809309846..a4624d633 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
@@ -19,6 +19,8 @@
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.netty.ws.NettyWebSocket;
 
+import static org.asynchttpclient.util.HttpConstants.ResponseStatusCodes.SWITCHING_PROTOCOLS_101;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -27,7 +29,6 @@
  */
 public class WebSocketUpgradeHandler implements AsyncHandler<NettyWebSocket> {
 
-  private static final int SWITCHING_PROTOCOLS = io.netty.handler.codec.http.HttpResponseStatus.SWITCHING_PROTOCOLS.code();
   private final List<WebSocketListener> listeners;
   private NettyWebSocket webSocket;
 
@@ -59,7 +60,7 @@ protected void onOpen0() {
   @Override
   public final State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
     onStatusReceived0(responseStatus);
-    return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS ? State.CONTINUE : State.ABORT;
+    return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS_101 ? State.CONTINUE : State.ABORT;
   }
 
   @Override
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java
index 4aedc84eb..a08bc2709 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketUtils.java
@@ -20,7 +20,7 @@
 import static org.asynchttpclient.util.MessageDigestUtils.pooledSha1MessageDigest;
 
 public final class WebSocketUtils {
-  public static final String MAGIC_GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
+  private static final String MAGIC_GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 
   public static String getWebSocketKey() {
     byte[] nonce = new byte[16];
diff --git a/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java b/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
index 10a3a1168..94b5c6d53 100644
--- a/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
+++ b/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
@@ -15,7 +15,6 @@
  */
 package org.asynchttpclient;
 
-import io.netty.handler.codec.http.HttpHeaders;
 import org.asynchttpclient.test.EchoHandler;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;
@@ -26,7 +25,6 @@
 import org.testng.annotations.BeforeClass;
 
 import static org.asynchttpclient.test.TestUtils.addHttpConnector;
-import static org.testng.Assert.fail;
 
 public abstract class AbstractBasicTest {
 
@@ -83,33 +81,4 @@ public void onThrowable(Throwable t) {
       t.printStackTrace();
     }
   }
-
-  public static class AsyncHandlerAdapter implements AsyncHandler<String> {
-
-    @Override
-    public void onThrowable(Throwable t) {
-      t.printStackTrace();
-      fail("Unexpected exception", t);
-    }
-
-    @Override
-    public State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
-      return State.CONTINUE;
-    }
-
-    @Override
-    public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
-      return State.CONTINUE;
-    }
-
-    @Override
-    public State onHeadersReceived(HttpHeaders headers) throws Exception {
-      return State.CONTINUE;
-    }
-
-    @Override
-    public String onCompleted() throws Exception {
-      return "";
-    }
-  }
 }
diff --git a/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java b/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
index 717b5dae7..bbbb512a5 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
@@ -120,8 +120,8 @@ private void testIntegerSystemProperty(String propertyName, String methodName, S
     System.setProperty(ASYNC_CLIENT_CONFIG_ROOT + propertyName, value);
     AsyncHttpClientConfigHelper.reloadProperties();
     try {
-      Method method = AsyncHttpClientConfigDefaults.class.getMethod(methodName, new Class[]{});
-      Assert.assertEquals(method.invoke(null, new Object[]{}), Integer.parseInt(value));
+      Method method = AsyncHttpClientConfigDefaults.class.getMethod(methodName);
+      Assert.assertEquals(method.invoke(null), Integer.parseInt(value));
     } catch (Exception e) {
       Assert.fail("Couldn't find or execute method : " + methodName, e);
     }
@@ -136,8 +136,8 @@ private void testBooleanSystemProperty(String propertyName, String methodName, S
     System.setProperty(ASYNC_CLIENT_CONFIG_ROOT + propertyName, value);
     AsyncHttpClientConfigHelper.reloadProperties();
     try {
-      Method method = AsyncHttpClientConfigDefaults.class.getMethod(methodName, new Class[]{});
-      Assert.assertEquals(method.invoke(null, new Object[]{}), Boolean.parseBoolean(value));
+      Method method = AsyncHttpClientConfigDefaults.class.getMethod(methodName);
+      Assert.assertEquals(method.invoke(null), Boolean.parseBoolean(value));
     } catch (Exception e) {
       Assert.fail("Couldn't find or execute method : " + methodName, e);
     }
@@ -152,8 +152,8 @@ private void testStringSystemProperty(String propertyName, String methodName, St
     System.setProperty(ASYNC_CLIENT_CONFIG_ROOT + propertyName, value);
     AsyncHttpClientConfigHelper.reloadProperties();
     try {
-      Method method = AsyncHttpClientConfigDefaults.class.getMethod(methodName, new Class[]{});
-      Assert.assertEquals(method.invoke(null, new Object[]{}), value);
+      Method method = AsyncHttpClientConfigDefaults.class.getMethod(methodName);
+      Assert.assertEquals(method.invoke(null), value);
     } catch (Exception e) {
       Assert.fail("Couldn't find or execute method : " + methodName, e);
     }
diff --git a/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java b/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
index f262e6764..400e1f23e 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
@@ -62,26 +62,24 @@ private static String getTargetUrl() {
   @Test
   public void getWithOnHeadersReceivedAbort() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
-
         server.enqueueEcho();
         client.prepareGet(getTargetUrl()).execute(new AsyncHandlerAdapter() {
 
           @Override
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             assertContentTypesEquals(headers.get(CONTENT_TYPE), TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET);
             return State.ABORT;
           }
         }).get(5, TimeUnit.SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void asyncStreamPOSTTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         server.enqueueEcho();
@@ -93,32 +91,31 @@ public void asyncStreamPOSTTest() throws Throwable {
                   private StringBuilder builder = new StringBuilder();
 
                   @Override
-                  public State onHeadersReceived(HttpHeaders headers) throws Exception {
+                  public State onHeadersReceived(HttpHeaders headers) {
                     assertContentTypesEquals(headers.get(CONTENT_TYPE), TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET);
                     return State.CONTINUE;
                   }
 
                   @Override
-                  public State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
+                  public State onBodyPartReceived(HttpResponseBodyPart content) {
                     builder.append(new String(content.getBodyPartBytes(), US_ASCII));
                     return State.CONTINUE;
                   }
 
                   @Override
-                  public String onCompleted() throws Exception {
+                  public String onCompleted() {
                     return builder.toString().trim();
                   }
                 }).get(10, TimeUnit.SECONDS);
 
         assertEquals(responseBody, RESPONSE);
-      });
-    });
+      }));
   }
 
   @Test
   public void asyncStreamInterruptTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         server.enqueueEcho();
@@ -133,14 +130,14 @@ public void asyncStreamInterruptTest() throws Throwable {
                 .execute(new AsyncHandlerAdapter() {
 
                   @Override
-                  public State onHeadersReceived(HttpHeaders headers) throws Exception {
+                  public State onHeadersReceived(HttpHeaders headers) {
                     onHeadersReceived.set(true);
                     assertContentTypesEquals(headers.get(CONTENT_TYPE), TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET);
                     return State.ABORT;
                   }
 
                   @Override
-                  public State onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
+                  public State onBodyPartReceived(final HttpResponseBodyPart content) {
                     onBodyPartReceived.set(true);
                     return State.ABORT;
                   }
@@ -154,14 +151,13 @@ public void onThrowable(Throwable t) {
         assertTrue(onHeadersReceived.get(), "Headers weren't received");
         assertFalse(onBodyPartReceived.get(), "Abort not working");
         assertFalse(onThrowable.get(), "Shouldn't get an exception");
-      });
-    });
+      }));
   }
 
   @Test
   public void asyncStreamFutureTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         server.enqueueEcho();
@@ -175,20 +171,20 @@ public void asyncStreamFutureTest() throws Throwable {
                   private StringBuilder builder = new StringBuilder();
 
                   @Override
-                  public State onHeadersReceived(HttpHeaders headers) throws Exception {
+                  public State onHeadersReceived(HttpHeaders headers) {
                     assertContentTypesEquals(headers.get(CONTENT_TYPE), TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET);
                     onHeadersReceived.set(true);
                     return State.CONTINUE;
                   }
 
                   @Override
-                  public State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
+                  public State onBodyPartReceived(HttpResponseBodyPart content) {
                     builder.append(new String(content.getBodyPartBytes()));
                     return State.CONTINUE;
                   }
 
                   @Override
-                  public String onCompleted() throws Exception {
+                  public String onCompleted() {
                     return builder.toString().trim();
                   }
 
@@ -201,14 +197,13 @@ public void onThrowable(Throwable t) {
         assertTrue(onHeadersReceived.get(), "Headers weren't received");
         assertFalse(onThrowable.get(), "Shouldn't get an exception");
         assertEquals(responseBody, RESPONSE, "Unexpected response body");
-      });
-    });
+      }));
   }
 
   @Test
   public void asyncStreamThrowableRefusedTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         server.enqueueEcho();
@@ -217,7 +212,7 @@ public void asyncStreamThrowableRefusedTest() throws Throwable {
         client.prepareGet(getTargetUrl()).execute(new AsyncHandlerAdapter() {
 
           @Override
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             throw unknownStackTrace(new RuntimeException("FOO"), AsyncStreamHandlerTest.class, "asyncStreamThrowableRefusedTest");
           }
 
@@ -236,14 +231,13 @@ public void onThrowable(Throwable t) {
         if (!l.await(10, TimeUnit.SECONDS)) {
           fail("Timed out");
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void asyncStreamReusePOSTTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         server.enqueueEcho();
@@ -258,19 +252,19 @@ public void asyncStreamReusePOSTTest() throws Throwable {
           private StringBuilder builder = new StringBuilder();
 
           @Override
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             responseHeaders.set(headers);
             return State.CONTINUE;
           }
 
           @Override
-          public State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
+          public State onBodyPartReceived(HttpResponseBodyPart content) {
             builder.append(new String(content.getBodyPartBytes()));
             return State.CONTINUE;
           }
 
           @Override
-          public String onCompleted() throws Exception {
+          public String onCompleted() {
             return builder.toString();
           }
         });
@@ -291,19 +285,19 @@ public String onCompleted() throws Exception {
           private StringBuilder builder = new StringBuilder();
 
           @Override
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             responseHeaders.set(headers);
             return State.CONTINUE;
           }
 
           @Override
-          public State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
+          public State onBodyPartReceived(HttpResponseBodyPart content) {
             builder.append(new String(content.getBodyPartBytes()));
             return State.CONTINUE;
           }
 
           @Override
-          public String onCompleted() throws Exception {
+          public String onCompleted() {
             return builder.toString();
           }
         });
@@ -314,14 +308,13 @@ public String onCompleted() throws Exception {
         assertContentTypesEquals(h.get(CONTENT_TYPE), TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET);
         assertNotNull(r, "No response body");
         assertEquals(r.trim(), RESPONSE, "Unexpected response body");
-      });
-    });
+      }));
   }
 
   @Test
   public void asyncStream302RedirectWithBody() throws Throwable {
 
-    withClient(config().setFollowRedirect(true)).run(client -> {
+    withClient(config().setFollowRedirect(true)).run(client ->
       withServer(server).run(server -> {
 
         String originalUrl = server.getHttpUrl() + "/original";
@@ -338,14 +331,13 @@ public void asyncStream302RedirectWithBody() throws Throwable {
 
         assertEquals(response.getStatusCode(), 200);
         assertTrue(response.getResponseBody().isEmpty());
-      });
-    });
+      }));
   }
 
   @Test(timeOut = 3000)
   public void asyncStreamJustStatusLine() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         server.enqueueEcho();
@@ -365,14 +357,14 @@ public void onThrowable(Throwable t) {
           }
 
           @Override
-          public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
+          public State onBodyPartReceived(HttpResponseBodyPart bodyPart) {
             whatCalled[OTHER] = true;
             latch.countDown();
             return State.ABORT;
           }
 
           @Override
-          public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+          public State onStatusReceived(HttpResponseStatus responseStatus) {
             whatCalled[STATUS] = true;
             status = responseStatus.getStatusCode();
             latch.countDown();
@@ -380,14 +372,14 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
           }
 
           @Override
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             whatCalled[OTHER] = true;
             latch.countDown();
             return State.ABORT;
           }
 
           @Override
-          public Integer onCompleted() throws Exception {
+          public Integer onCompleted() {
             whatCalled[COMPLETED] = true;
             latch.countDown();
             return status;
@@ -410,14 +402,13 @@ public Integer onCompleted() throws Exception {
         if (whatCalled[OTHER]) {
           fail("Other method of AsyncHandler got called.");
         }
-      });
-    });
+      }));
   }
 
   @Test(groups = "online")
   public void asyncOptionsTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         final AtomicReference<HttpHeaders> responseHeaders = new AtomicReference<>();
@@ -426,13 +417,13 @@ public void asyncOptionsTest() throws Throwable {
         Future<String> f = client.prepareOptions("http://www.apache.org/").execute(new AsyncHandlerAdapter() {
 
           @Override
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             responseHeaders.set(headers);
             return State.ABORT;
           }
 
           @Override
-          public String onCompleted() throws Exception {
+          public String onCompleted() {
             return "OK";
           }
         });
@@ -445,14 +436,13 @@ public String onCompleted() throws Exception {
         assertEquals(values.length, expected.length);
         Arrays.sort(values);
         assertEquals(values, expected);
-      });
-    });
+      }));
   }
 
   @Test
   public void closeConnectionTest() throws Throwable {
 
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
 
@@ -460,7 +450,7 @@ public void closeConnectionTest() throws Throwable {
 
           private Response.ResponseBuilder builder = new Response.ResponseBuilder();
 
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             builder.accumulate(headers);
             return State.CONTINUE;
           }
@@ -468,25 +458,24 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
           public void onThrowable(Throwable t) {
           }
 
-          public State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
+          public State onBodyPartReceived(HttpResponseBodyPart content) {
             builder.accumulate(content);
             return content.isLast() ? State.ABORT : State.CONTINUE;
           }
 
-          public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+          public State onStatusReceived(HttpResponseStatus responseStatus) {
             builder.accumulate(responseStatus);
 
             return State.CONTINUE;
           }
 
-          public Response onCompleted() throws Exception {
+          public Response onCompleted() {
             return builder.build();
           }
         }).get();
 
         assertNotNull(r);
         assertEquals(r.getStatusCode(), 200);
-      });
-    });
+      }));
   }
 }
diff --git a/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java b/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
index 4f81cea75..2f3647cbc 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
@@ -22,7 +22,6 @@
 import org.testng.annotations.Test;
 
 import javax.servlet.AsyncContext;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -52,13 +51,12 @@ public void tearDownGlobal() throws Exception {
   @Override
   public AbstractHandler configureHandler() throws Exception {
     return new AbstractHandler() {
-      public void handle(String s, Request request, HttpServletRequest req, final HttpServletResponse resp) throws IOException, ServletException {
+      public void handle(String s, Request request, HttpServletRequest req, final HttpServletResponse resp) throws IOException {
         resp.setContentType("text/plain;charset=utf-8");
         resp.setStatus(200);
         final AsyncContext asyncContext = request.startAsync();
         final PrintWriter writer = resp.getWriter();
-        executorService.submit(new Runnable() {
-          public void run() {
+        executorService.submit(() -> {
             try {
               Thread.sleep(100);
             } catch (InterruptedException e) {
@@ -67,10 +65,8 @@ public void run() {
             logger.info("Delivering part1.");
             writer.write("part1");
             writer.flush();
-          }
         });
-        executorService.submit(new Runnable() {
-          public void run() {
+        executorService.submit(() -> {
             try {
               Thread.sleep(200);
             } catch (InterruptedException e) {
@@ -80,14 +76,13 @@ public void run() {
             writer.write("part2");
             writer.flush();
             asyncContext.complete();
-          }
         });
         request.setHandled(true);
       }
     };
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testStream() throws Exception {
     try (AsyncHttpClient ahc = asyncHttpClient()) {
       final AtomicBoolean err = new AtomicBoolean(false);
@@ -110,7 +105,7 @@ public State onBodyPartReceived(HttpResponseBodyPart e) throws Exception {
           return State.CONTINUE;
         }
 
-        public State onStatusReceived(HttpResponseStatus e) throws Exception {
+        public State onStatusReceived(HttpResponseStatus e) {
           status.set(true);
           return State.CONTINUE;
         }
@@ -122,7 +117,7 @@ public State onHeadersReceived(HttpHeaders e) throws Exception {
           return State.CONTINUE;
         }
 
-        public Object onCompleted() throws Exception {
+        public Object onCompleted() {
           latch.countDown();
           return null;
         }
diff --git a/client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java b/client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
index d25e4cee7..78af7855e 100644
--- a/client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
+++ b/client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
@@ -134,7 +134,7 @@ private AsyncHttpClient newClient() {
     return asyncHttpClient(config().setRequestTimeout(REQUEST_TIMEOUT));
   }
 
-  protected Future<Response> execute(AsyncHttpClient client, boolean basic, boolean preemptive) throws IOException {
+  protected Future<Response> execute(AsyncHttpClient client, boolean basic, boolean preemptive) {
     Realm.Builder realm;
     String url;
 
@@ -182,6 +182,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
       try {
         Thread.sleep(LONG_FUTURE_TIMEOUT + 100);
       } catch (InterruptedException e) {
+        //
       }
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/BasicAuthTest.java b/client/src/test/java/org/asynchttpclient/BasicAuthTest.java
index 7d3ad7e28..082f6509f 100644
--- a/client/src/test/java/org/asynchttpclient/BasicAuthTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicAuthTest.java
@@ -45,8 +45,6 @@
 
 public class BasicAuthTest extends AbstractBasicTest {
 
-  protected static final String MY_MESSAGE = "my message";
-
   private Server server2;
   private Server serverNoAuth;
   private int portNoAuth;
@@ -94,7 +92,7 @@ protected String getTargetUrl2() {
     return "http://localhost:" + port2 + "/uff";
   }
 
-  protected String getTargetUrlNoAuth() {
+  private String getTargetUrlNoAuth() {
     return "http://localhost:" + portNoAuth + "/";
   }
 
@@ -103,7 +101,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new SimpleHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.prepareGet(getTargetUrl())//
@@ -116,8 +114,8 @@ public void basicAuthTest() throws IOException, ExecutionException, TimeoutExcep
     }
   }
 
-  @Test(groups = "standalone")
-  public void redirectAndBasicAuthTest() throws Exception, ExecutionException, TimeoutException, InterruptedException {
+  @Test
+  public void redirectAndBasicAuthTest() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setFollowRedirect(true).setMaxRedirects(10))) {
       Future<Response> f = client.prepareGet(getTargetUrl2())//
               .setRealm(basicAuthRealm(USER, ADMIN).build())//
@@ -129,8 +127,8 @@ public void redirectAndBasicAuthTest() throws Exception, ExecutionException, Tim
     }
   }
 
-  @Test(groups = "standalone")
-  public void basic401Test() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test
+  public void basic401Test() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient()) {
       BoundRequestBuilder r = client.prepareGet(getTargetUrl())//
               .setHeader("X-401", "401")//
@@ -144,11 +142,11 @@ public void onThrowable(Throwable t) {
 
         }
 
-        public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
+        public State onBodyPartReceived(HttpResponseBodyPart bodyPart) {
           return State.CONTINUE;
         }
 
-        public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+        public State onStatusReceived(HttpResponseStatus responseStatus) {
           this.status = responseStatus;
 
           if (status.getStatusCode() != 200) {
@@ -157,11 +155,11 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
           return State.CONTINUE;
         }
 
-        public State onHeadersReceived(HttpHeaders headers) throws Exception {
+        public State onHeadersReceived(HttpHeaders headers) {
           return State.CONTINUE;
         }
 
-        public Integer onCompleted() throws Exception {
+        public Integer onCompleted() {
           return status.getStatusCode();
         }
       });
@@ -171,7 +169,7 @@ public Integer onCompleted() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthTestPreemtiveTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       // send the request to the no-auth endpoint to be able to verify the
@@ -187,7 +185,7 @@ public void basicAuthTestPreemtiveTest() throws IOException, ExecutionException,
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthNegativeTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.prepareGet(getTargetUrl())//
@@ -200,7 +198,7 @@ public void basicAuthNegativeTest() throws IOException, ExecutionException, Time
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthInputStreamTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePost(getTargetUrl())//
@@ -216,7 +214,7 @@ public void basicAuthInputStreamTest() throws IOException, ExecutionException, T
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthFileTest() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePost(getTargetUrl())//
@@ -232,7 +230,7 @@ public void basicAuthFileTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthAsyncConfigTest() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setRealm(basicAuthRealm(USER, ADMIN)))) {
       Future<Response> f = client.preparePost(getTargetUrl())//
@@ -247,7 +245,7 @@ public void basicAuthAsyncConfigTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicAuthFileNoKeepAliveTest() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(false))) {
 
@@ -264,7 +262,7 @@ public void basicAuthFileNoKeepAliveTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void noneAuthTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       BoundRequestBuilder r = client.prepareGet(getTargetUrl()).setRealm(basicAuthRealm(USER, ADMIN).build());
@@ -322,16 +320,14 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
         int size = 10 * 1024;
         byte[] bytes = new byte[size];
         int contentLength = 0;
-        if (bytes.length > 0) {
-          int read = 0;
-          do {
-            read = request.getInputStream().read(bytes);
-            if (read > 0) {
-              contentLength += read;
-              response.getOutputStream().write(bytes, 0, read);
-            }
-          } while (read >= 0);
-        }
+        int read;
+        do {
+          read = request.getInputStream().read(bytes);
+          if (read > 0) {
+            contentLength += read;
+            response.getOutputStream().write(bytes, 0, read);
+          }
+        } while (read >= 0);
         response.setContentLength(contentLength);
       }
       response.getOutputStream().flush();
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpTest.java
index 42d84a4f3..8b9bf74d5 100644
--- a/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpTest.java
@@ -74,7 +74,7 @@ public void setUpGlobal() throws Exception {
   }
 
   @AfterClass(alwaysRun = true)
-  public void tearDownGlobal() throws Exception {
+  public void tearDownGlobal() {
     if (proxy != null) {
       try {
         proxy.stop();
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
index 22f348720..aed22fa54 100755
--- a/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
@@ -41,10 +41,7 @@
 import java.net.ConnectException;
 import java.net.UnknownHostException;
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -80,32 +77,30 @@ private static String getTargetUrl() {
 
   @Test
   public void getRootUrl() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         String url = server.getHttpUrl();
         server.enqueueOk();
 
         Response response = client.executeRequest(get(url), new AsyncCompletionHandlerAdapter()).get(TIMEOUT, SECONDS);
         assertEquals(response.getUri().toUrl(), url);
-      });
-    });
+      }));
   }
 
   @Test
   public void getUrlWithPathWithoutQuery() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueOk();
 
         Response response = client.executeRequest(get(getTargetUrl()), new AsyncCompletionHandlerAdapter()).get(TIMEOUT, SECONDS);
         assertEquals(response.getUri().toUrl(), getTargetUrl());
-      });
-    });
+      }));
   }
 
   @Test
   public void getUrlWithPathWithQuery() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         String targetUrl = getTargetUrl() + "?q=+%20x";
         Request request = get(targetUrl).build();
@@ -114,25 +109,23 @@ public void getUrlWithPathWithQuery() throws Throwable {
 
         Response response = client.executeRequest(request, new AsyncCompletionHandlerAdapter()).get(TIMEOUT, SECONDS);
         assertEquals(response.getUri().toUrl(), targetUrl);
-      });
-    });
+      }));
   }
 
   @Test
   public void getUrlWithPathWithQueryParams() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueOk();
 
         Response response = client.executeRequest(get(getTargetUrl()).addQueryParam("q", "a b"), new AsyncCompletionHandlerAdapter()).get(TIMEOUT, SECONDS);
         assertEquals(response.getUri().toUrl(), getTargetUrl() + "?q=a%20b");
-      });
-    });
+      }));
   }
 
   @Test
   public void getResponseBody() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         final String body = "Hello World";
 
@@ -145,7 +138,7 @@ public void getResponseBody() throws Throwable {
         client.executeRequest(get(getTargetUrl()), new AsyncCompletionHandlerAdapter() {
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             assertEquals(response.getStatusCode(), 200);
             String contentLengthHeader = response.getHeader(CONTENT_LENGTH);
             assertNotNull(contentLengthHeader);
@@ -155,13 +148,12 @@ public Response onCompleted(Response response) throws Exception {
             return response;
           }
         }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void getWithHeaders() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         for (int i = 1; i < 5; i++) {
@@ -173,7 +165,7 @@ public void getWithHeaders() throws Throwable {
         client.executeRequest(get(getTargetUrl()).setHeaders(h), new AsyncCompletionHandlerAdapter() {
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             assertEquals(response.getStatusCode(), 200);
             for (int i = 1; i < 5; i++) {
               assertEquals(response.getHeader("X-Test" + i), "Test" + i);
@@ -181,20 +173,19 @@ public Response onCompleted(Response response) throws Exception {
             return response;
           }
         }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void postWithHeadersAndFormParams() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
 
         Map<String, List<String>> m = new HashMap<>();
         for (int i = 0; i < 5; i++) {
-          m.put("param_" + i, Arrays.asList("value_" + i));
+          m.put("param_" + i, Collections.singletonList("value_" + i));
         }
 
         Request request = post(getTargetUrl()).setHeaders(h).setFormParams(m).build();
@@ -204,7 +195,7 @@ public void postWithHeadersAndFormParams() throws Throwable {
         client.executeRequest(request, new AsyncCompletionHandlerAdapter() {
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             assertEquals(response.getStatusCode(), 200);
             for (int i = 1; i < 5; i++) {
               assertEquals(response.getHeader("X-param_" + i), "value_" + i);
@@ -212,27 +203,25 @@ public Response onCompleted(Response response) throws Exception {
             return response;
           }
         }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void headHasEmptyBody() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueOk();
 
         Response response = client.executeRequest(head(getTargetUrl()), new AsyncCompletionHandlerAdapter() {
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             assertEquals(response.getStatusCode(), 200);
             return response;
           }
         }).get(TIMEOUT, SECONDS);
 
         assertTrue(response.getResponseBody().isEmpty());
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = IllegalArgumentException.class)
@@ -242,25 +231,24 @@ public void nullSchemeThrowsNPE() throws Throwable {
 
   @Test
   public void jettyRespondsWithChunkedTransferEncoding() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         client.prepareGet(getTargetUrl())//
                 .execute(new AsyncCompletionHandlerAdapter() {
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     assertEquals(response.getHeader(TRANSFER_ENCODING), HttpHeaderValues.CHUNKED.toString());
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void getWithCookies() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         final Cookie coo = new DefaultCookie("foo", "value");
         coo.setDomain("/");
@@ -271,7 +259,7 @@ public void getWithCookies() throws Throwable {
                 .addCookie(coo)//
                 .execute(new AsyncCompletionHandlerAdapter() {
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     List<Cookie> cookies = response.getCookies();
                     assertEquals(cookies.size(), 1);
@@ -279,26 +267,24 @@ public Response onCompleted(Response response) throws Exception {
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void defaultRequestBodyEncodingIsUtf8() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         Response response = client.preparePost(getTargetUrl())//
                 .setBody("\u017D\u017D\u017D\u017D\u017D\u017D")//
                 .execute().get();
         assertEquals(response.getResponseBodyAsBytes(), "\u017D\u017D\u017D\u017D\u017D\u017D".getBytes(UTF_8));
-      });
-    });
+      }));
   }
 
   @Test
   public void postFormParametersAsBodyString() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
@@ -316,7 +302,7 @@ public void postFormParametersAsBodyString() throws Throwable {
                 .execute(new AsyncCompletionHandlerAdapter() {
 
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     for (int i = 1; i < 5; i++) {
                       assertEquals(response.getHeader("X-param_" + i), "value_" + i);
@@ -325,13 +311,12 @@ public Response onCompleted(Response response) throws Exception {
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void postFormParametersAsBodyStream() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
@@ -348,7 +333,7 @@ public void postFormParametersAsBodyStream() throws Throwable {
                 .execute(new AsyncCompletionHandlerAdapter() {
 
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     for (int i = 1; i < 5; i++) {
                       assertEquals(response.getHeader("X-param_" + i), "value_" + i);
@@ -357,13 +342,12 @@ public Response onCompleted(Response response) throws Exception {
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void putFormParametersAsBodyStream() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
@@ -381,7 +365,7 @@ public void putFormParametersAsBodyStream() throws Throwable {
                 .execute(new AsyncCompletionHandlerAdapter() {
 
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     for (int i = 1; i < 5; i++) {
                       assertEquals(response.getHeader("X-param_" + i), "value_" + i);
@@ -389,33 +373,31 @@ public Response onCompleted(Response response) throws Exception {
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void postSingleStringPart() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         client.preparePost(getTargetUrl())//
                 .addBodyPart(new StringPart("foo", "bar"))//
                 .execute(new AsyncCompletionHandlerAdapter() {
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     String requestContentType = response.getHeader("X-" + CONTENT_TYPE);
                     String boundary = requestContentType.substring((requestContentType.indexOf("boundary") + "boundary".length() + 1));
                     assertTrue(response.getResponseBody().regionMatches(false, "--".length(), boundary, 0, boundary.length()));
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void getVirtualHost() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         String virtualHost = "localhost:" + server.getHttpPort();
 
@@ -429,13 +411,12 @@ public void getVirtualHost() throws Throwable {
           System.err.println(response);
         }
         assertEquals(response.getHeader("X-" + HOST), virtualHost);
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = CancellationException.class)
   public void cancelledFutureThrowsCancellationException() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders headers = new DefaultHttpHeaders();
         headers.add("X-Delay", 5_000);
@@ -448,13 +429,12 @@ public void onThrowable(Throwable t) {
         });
         future.cancel(true);
         future.get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = TimeoutException.class)
   public void futureTimeOutThrowsTimeoutException() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders headers = new DefaultHttpHeaders();
         headers.add("X-Delay", 5_000);
@@ -467,8 +447,7 @@ public void onThrowable(Throwable t) {
         });
 
         future.get(2, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = ConnectException.class)
@@ -489,7 +468,7 @@ public void onThrowable(Throwable t) {
 
   @Test
   public void connectFailureNotifiesHandlerWithConnectException() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         final CountDownLatch l = new CountDownLatch(1);
         int port = findFreePort();
@@ -508,13 +487,12 @@ public void onThrowable(Throwable t) {
         if (!l.await(TIMEOUT, SECONDS)) {
           fail("Timed out");
         }
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = UnknownHostException.class)
   public void unknownHostThrowsUnknownHostException() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         try {
           client.prepareGet("http://null.gatling.io").execute(new AsyncCompletionHandlerAdapter() {
@@ -525,25 +503,23 @@ public void onThrowable(Throwable t) {
         } catch (ExecutionException e) {
           throw e.getCause();
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void getEmptyBody() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueOk();
         Response response = client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandlerAdapter())//
                 .get(TIMEOUT, SECONDS);
         assertTrue(response.getResponseBody().isEmpty());
-      });
-    });
+      }));
   }
 
   @Test
   public void getEmptyBodyNotifiesHandler() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         final AtomicBoolean handlerWasNotified = new AtomicBoolean();
 
@@ -551,20 +527,19 @@ public void getEmptyBodyNotifiesHandler() throws Throwable {
         client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandlerAdapter() {
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             assertEquals(response.getStatusCode(), 200);
             handlerWasNotified.set(true);
             return response;
           }
         }).get(TIMEOUT, SECONDS);
         assertTrue(handlerWasNotified.get());
-      });
-    });
+      }));
   }
 
   @Test
   public void exceptionInOnCompletedGetNotifiedToOnThrowable() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         final CountDownLatch latch = new CountDownLatch(1);
         final AtomicReference<String> message = new AtomicReference<>();
@@ -572,7 +547,7 @@ public void exceptionInOnCompletedGetNotifiedToOnThrowable() throws Throwable {
         server.enqueueOk();
         client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandlerAdapter() {
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             throw unknownStackTrace(new IllegalStateException("FOO"), BasicHttpTest.class, "exceptionInOnCompletedGetNotifiedToOnThrowable");
 
           }
@@ -589,18 +564,17 @@ public void onThrowable(Throwable t) {
         }
 
         assertEquals(message.get(), "FOO");
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = IllegalStateException.class)
   public void exceptionInOnCompletedGetNotifiedToFuture() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueOk();
         Future<Response> whenResponse = client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandlerAdapter() {
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             throw unknownStackTrace(new IllegalStateException("FOO"), BasicHttpTest.class, "exceptionInOnCompletedGetNotifiedToFuture");
           }
 
@@ -614,13 +588,12 @@ public void onThrowable(Throwable t) {
         } catch (ExecutionException e) {
           throw e.getCause();
         }
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = TimeoutException.class)
   public void configTimeoutNotifiesOnThrowableAndFuture() throws Throwable {
-    withClient(config().setRequestTimeout(1_000)).run(client -> {
+    withClient(config().setRequestTimeout(1_000)).run(client ->
       withServer(server).run(server -> {
         HttpHeaders headers = new DefaultHttpHeaders();
         headers.add("X-Delay", 5_000); // delay greater than timeout
@@ -633,7 +606,7 @@ public void configTimeoutNotifiesOnThrowableAndFuture() throws Throwable {
         Future<Response> whenResponse = client.prepareGet(getTargetUrl()).setHeaders(headers).execute(new AsyncCompletionHandlerAdapter() {
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             onCompletedWasNotified.set(true);
             latch.countDown();
             return response;
@@ -658,13 +631,12 @@ public void onThrowable(Throwable t) {
         } catch (ExecutionException e) {
           throw e.getCause();
         }
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = TimeoutException.class)
   public void configRequestTimeoutHappensInDueTime() throws Throwable {
-    withClient(config().setRequestTimeout(1_000)).run(client -> {
+    withClient(config().setRequestTimeout(1_000)).run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
@@ -679,30 +651,28 @@ public void configRequestTimeoutHappensInDueTime() throws Throwable {
           assertTrue(elapsedTime >= 1_000 && elapsedTime <= 1_500);
           throw ex.getCause();
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void getProperPathAndQueryString() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         client.prepareGet(getTargetUrl() + "?foo=bar").execute(new AsyncCompletionHandlerAdapter() {
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             assertTrue(response.getHeader("X-PathInfo") != null);
             assertTrue(response.getHeader("X-QueryString") != null);
             return response;
           }
         }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void connectionIsReusedForSequentialRequests() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         final CountDownLatch l = new CountDownLatch(2);
 
@@ -711,7 +681,7 @@ public void connectionIsReusedForSequentialRequests() throws Throwable {
           volatile String clientPort;
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             try {
               assertEquals(response.getStatusCode(), 200);
               if (clientPort == null) {
@@ -736,13 +706,12 @@ public Response onCompleted(Response response) throws Exception {
         if (!l.await(TIMEOUT, SECONDS)) {
           fail("Timed out");
         }
-      });
-    });
+      }));
   }
 
   @Test(expectedExceptions = MaxRedirectException.class)
   public void reachingMaxRedirectThrowsMaxRedirectException() throws Throwable {
-    withClient(config().setMaxRedirects(1).setFollowRedirect(true)).run(client -> {
+    withClient(config().setMaxRedirects(1).setFollowRedirect(true)).run(client ->
       withServer(server).run(server -> {
         try {
           // max redirect is 1, so second redirect will fail
@@ -750,7 +719,7 @@ public void reachingMaxRedirectThrowsMaxRedirectException() throws Throwable {
           server.enqueueRedirect(301, getTargetUrl());
           client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandlerAdapter() {
             @Override
-            public Response onCompleted(Response response) throws Exception {
+            public Response onCompleted(Response response) {
               fail("Should not be here");
               return response;
             }
@@ -762,13 +731,12 @@ public void onThrowable(Throwable t) {
         } catch (ExecutionException e) {
           throw e.getCause();
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void nonBlockingNestedRequetsFromIoThreadAreFine() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         final int maxNested = 5;
@@ -780,7 +748,7 @@ public void nonBlockingNestedRequetsFromIoThreadAreFine() throws Throwable {
           private AtomicInteger nestedCount = new AtomicInteger(0);
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             try {
               if (nestedCount.getAndIncrement() < maxNested) {
                 client.prepareGet(getTargetUrl()).execute(this);
@@ -801,25 +769,23 @@ public Response onCompleted(Response response) throws Exception {
         if (!latch.await(TIMEOUT, SECONDS)) {
           fail("Timed out");
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void optionsIsSupported() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         Response response = client.prepareOptions(getTargetUrl()).execute().get();
         assertEquals(response.getStatusCode(), 200);
         assertEquals(response.getHeader("Allow"), "GET,HEAD,POST,OPTIONS,TRACE");
-      });
-    });
+      }));
   }
 
   @Test
   public void cancellingFutureNotifiesOnThrowableWithCancellationException() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
@@ -841,43 +807,36 @@ public void onThrowable(Throwable t) {
         if (!latch.await(TIMEOUT, SECONDS)) {
           fail("Timed out");
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void getShouldAllowBody() throws Throwable {
-    withClient().run(client -> {
-      withServer(server).run(server -> {
-        client.prepareGet(getTargetUrl()).setBody("Boo!").execute();
-      });
-    });
+    withClient().run(client ->
+      withServer(server).run(server ->
+        client.prepareGet(getTargetUrl()).setBody("Boo!").execute()));
   }
 
   @Test(expectedExceptions = IllegalArgumentException.class)
   public void malformedUriThrowsException() throws Throwable {
-    withClient().run(client -> {
-      withServer(server).run(server -> {
-        client.prepareGet(String.format("http:localhost:%d/foo/test", server.getHttpPort())).build();
-      });
-    });
+    withClient().run(client ->
+      withServer(server).run(server -> client.prepareGet(String.format("http:localhost:%d/foo/test", server.getHttpPort())).build()));
   }
 
   @Test
   public void emptyResponseBodyBytesAreEmpty() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         Response response = client.prepareGet(getTargetUrl()).execute().get();
         assertEquals(response.getStatusCode(), 200);
         assertEquals(response.getResponseBodyAsBytes(), new byte[]{});
-      });
-    });
+      }));
   }
 
   @Test
   public void newConnectionEventsAreFired() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
 
         Request request = get(getTargetUrl()).build();
@@ -900,13 +859,12 @@ public void newConnectionEventsAreFired() throws Throwable {
                 COMPLETED_EVENT};
 
         assertEquals(handler.firedEvents.toArray(), expectedEvents, "Got " + Arrays.toString(handler.firedEvents.toArray()));
-      });
-    });
+      }));
   }
 
   @Test
   public void requestingPlainHttpEndpointOverHttpsThrowsSslException() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         try {
@@ -916,13 +874,12 @@ public void requestingPlainHttpEndpointOverHttpsThrowsSslException() throws Thro
           assertTrue(e.getCause() instanceof ConnectException, "Cause should be a ConnectException");
           assertTrue(e.getCause().getCause() instanceof SSLException, "Root cause should be a SslException");
         }
-      });
-    });
+      }));
   }
 
   @Test
   public void postUnboundedInputStreamAsBodyStream() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_JSON);
@@ -944,19 +901,18 @@ public void handle(String target, org.eclipse.jetty.server.Request request, Http
                 .setBody(new ByteArrayInputStream("{}".getBytes(StandardCharsets.ISO_8859_1)))//
                 .execute(new AsyncCompletionHandlerAdapter() {
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     assertEquals(response.getResponseBody(), "{}");
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 
   @Test
   public void postInputStreamWithContentLengthAsBodyGenerator() throws Throwable {
-    withClient().run(client -> {
+    withClient().run(client ->
       withServer(server).run(server -> {
         HttpHeaders h = new DefaultHttpHeaders();
         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_JSON);
@@ -982,13 +938,12 @@ public void handle(String target, org.eclipse.jetty.server.Request request, Http
                 .execute(new AsyncCompletionHandlerAdapter() {
 
                   @Override
-                  public Response onCompleted(Response response) throws Exception {
+                  public Response onCompleted(Response response) {
                     assertEquals(response.getStatusCode(), 200);
                     assertEquals(response.getResponseBody(), "{}");
                     return response;
                   }
                 }).get(TIMEOUT, SECONDS);
-      });
-    });
+      }));
   }
 }
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
index d4c783a24..1dacff8e4 100644
--- a/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
@@ -15,8 +15,6 @@
  */
 package org.asynchttpclient;
 
-import io.netty.handler.codec.http.HttpRequest;
-import io.netty.handler.codec.http.HttpResponse;
 import org.asynchttpclient.channel.KeepAliveStrategy;
 import org.asynchttpclient.test.EventCollectingHandler;
 import org.asynchttpclient.testserver.HttpServer;
@@ -60,7 +58,7 @@ private static String getTargetUrl() {
   @Test
   public void postFileOverHttps() throws Throwable {
     logger.debug(">>> postBodyOverHttps");
-    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client -> {
+    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
 
@@ -68,15 +66,14 @@ public void postFileOverHttps() throws Throwable {
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
         assertEquals(resp.getResponseBody(), SIMPLE_TEXT_FILE_STRING);
-      });
-    });
+      }));
     logger.debug("<<< postBodyOverHttps");
   }
 
   @Test
   public void postLargeFileOverHttps() throws Throwable {
     logger.debug(">>> postLargeFileOverHttps");
-    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client -> {
+    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
 
@@ -84,15 +81,14 @@ public void postLargeFileOverHttps() throws Throwable {
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
         assertEquals(resp.getResponseBodyAsBytes().length, LARGE_IMAGE_FILE.length());
-      });
-    });
+      }));
     logger.debug("<<< postLargeFileOverHttps");
   }
 
   @Test
   public void multipleSequentialPostRequestsOverHttps() throws Throwable {
     logger.debug(">>> multipleSequentialPostRequestsOverHttps");
-    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client -> {
+    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         server.enqueueEcho();
@@ -103,8 +99,7 @@ public void multipleSequentialPostRequestsOverHttps() throws Throwable {
 
         response = client.preparePost(getTargetUrl()).setBody(body).setHeader(CONTENT_TYPE, "text/html").execute().get(TIMEOUT, SECONDS);
         assertEquals(response.getResponseBody(), body);
-      });
-    });
+      }));
     logger.debug("<<< multipleSequentialPostRequestsOverHttps");
   }
 
@@ -112,14 +107,9 @@ public void multipleSequentialPostRequestsOverHttps() throws Throwable {
   public void multipleConcurrentPostRequestsOverHttpsWithDisabledKeepAliveStrategy() throws Throwable {
     logger.debug(">>> multipleConcurrentPostRequestsOverHttpsWithDisabledKeepAliveStrategy");
 
-    KeepAliveStrategy keepAliveStrategy = new KeepAliveStrategy() {
-      @Override
-      public boolean keepAlive(Request ahcRequest, HttpRequest nettyRequest, HttpResponse nettyResponse) {
-        return !ahcRequest.getUri().isSecured();
-      }
-    };
+    KeepAliveStrategy keepAliveStrategy = (ahcRequest, nettyRequest, nettyResponse) -> !ahcRequest.getUri().isSecured();
 
-    withClient(config().setSslEngineFactory(createSslEngineFactory()).setKeepAliveStrategy(keepAliveStrategy)).run(client -> {
+    withClient(config().setSslEngineFactory(createSslEngineFactory()).setKeepAliveStrategy(keepAliveStrategy)).run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         server.enqueueEcho();
@@ -132,8 +122,7 @@ public boolean keepAlive(Request ahcRequest, HttpRequest nettyRequest, HttpRespo
 
         Response response = client.preparePost(getTargetUrl()).setBody(body).setHeader(CONTENT_TYPE, "text/html").execute().get();
         assertEquals(response.getResponseBody(), body);
-      });
-    });
+      }));
 
     logger.debug("<<< multipleConcurrentPostRequestsOverHttpsWithDisabledKeepAliveStrategy");
   }
@@ -144,7 +133,7 @@ public void reconnectAfterFailedCertificationPath() throws Throwable {
 
     AtomicBoolean trust = new AtomicBoolean();
 
-    withClient(config().setMaxRequestRetry(0).setSslEngineFactory(createSslEngineFactory(trust))).run(client -> {
+    withClient(config().setMaxRequestRetry(0).setSslEngineFactory(createSslEngineFactory(trust))).run(client ->
       withServer(server).run(server -> {
         server.enqueueEcho();
         server.enqueueEcho();
@@ -165,8 +154,7 @@ public void reconnectAfterFailedCertificationPath() throws Throwable {
         Response response = client.preparePost(getTargetUrl()).setBody(body).setHeader(CONTENT_TYPE, "text/html").execute().get(TIMEOUT, SECONDS);
 
         assertEquals(response.getResponseBody(), body);
-      });
-    });
+      }));
     logger.debug("<<< reconnectAfterFailedCertificationPath");
   }
 
@@ -174,24 +162,23 @@ public void reconnectAfterFailedCertificationPath() throws Throwable {
   public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {
     logger.debug(">>> failInstantlyIfNotAllowedSelfSignedCertificate");
 
-    withClient(config().setMaxRequestRetry(0).setRequestTimeout(2000)).run(client -> {
+    withClient(config().setMaxRequestRetry(0).setRequestTimeout(2000)).run(client ->
       withServer(server).run(server -> {
         try {
           client.prepareGet(getTargetUrl()).execute().get(TIMEOUT, SECONDS);
         } catch (ExecutionException e) {
           throw e.getCause().getCause();
         }
-      });
-    });
+      }));
     logger.debug("<<< failInstantlyIfNotAllowedSelfSignedCertificate");
 
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testNormalEventsFired() throws Throwable {
     logger.debug(">>> testNormalEventsFired");
 
-    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client -> {
+    withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client ->
       withServer(server).run(server -> {
         EventCollectingHandler handler = new EventCollectingHandler();
 
@@ -215,8 +202,7 @@ public void testNormalEventsFired() throws Throwable {
                 COMPLETED_EVENT};
 
         assertEquals(handler.firedEvents.toArray(), expectedEvents, "Got " + Arrays.toString(handler.firedEvents.toArray()));
-      });
-    });
+      }));
     logger.debug("<<< testNormalEventsFired");
   }
 }
diff --git a/client/src/test/java/org/asynchttpclient/ByteBufferCapacityTest.java b/client/src/test/java/org/asynchttpclient/ByteBufferCapacityTest.java
index 2cb9d7eb7..4a60e6521 100644
--- a/client/src/test/java/org/asynchttpclient/ByteBufferCapacityTest.java
+++ b/client/src/test/java/org/asynchttpclient/ByteBufferCapacityTest.java
@@ -38,7 +38,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new BasicHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicByteBufferTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       File largeFile = createTempFile(1024 * 100 * 10);
diff --git a/client/src/test/java/org/asynchttpclient/ClientStatsTest.java b/client/src/test/java/org/asynchttpclient/ClientStatsTest.java
index de6ae24bb..64dfff737 100644
--- a/client/src/test/java/org/asynchttpclient/ClientStatsTest.java
+++ b/client/src/test/java/org/asynchttpclient/ClientStatsTest.java
@@ -31,7 +31,7 @@
 
   private final static String hostname = "localhost";
 
-  @Test(groups = "standalone")
+  @Test
   public void testClientStatus() throws Throwable {
     try (final AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(true).setPooledConnectionIdleTimeout(5000))) {
       final String url = getTargetUrl();
@@ -112,7 +112,7 @@ public void testClientStatus() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testClientStatusNoKeepalive() throws Throwable {
     try (final AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(false))) {
       final String url = getTargetUrl();
diff --git a/client/src/test/java/org/asynchttpclient/ComplexClientTest.java b/client/src/test/java/org/asynchttpclient/ComplexClientTest.java
index fee1f6960..1189ef1fd 100644
--- a/client/src/test/java/org/asynchttpclient/ComplexClientTest.java
+++ b/client/src/test/java/org/asynchttpclient/ComplexClientTest.java
@@ -24,7 +24,7 @@
 
 public class ComplexClientTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void multipleRequestsTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       String body = "hello there";
@@ -41,7 +41,7 @@ public void multipleRequestsTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void urlWithoutSlashTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       String body = "hello there";
diff --git a/client/src/test/java/org/asynchttpclient/CookieStoreTest.java b/client/src/test/java/org/asynchttpclient/CookieStoreTest.java
index f3f95ade9..e16a477c2 100644
--- a/client/src/test/java/org/asynchttpclient/CookieStoreTest.java
+++ b/client/src/test/java/org/asynchttpclient/CookieStoreTest.java
@@ -45,7 +45,7 @@ public void tearDownGlobal() {
     System.out.println("--Stop");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void runAllSequentiallyBecauseNotThreadSafe() {
     addCookieWithEmptyPath();
     dontReturnCookieForAnotherDomain();
diff --git a/client/src/test/java/org/asynchttpclient/DigestAuthTest.java b/client/src/test/java/org/asynchttpclient/DigestAuthTest.java
index da1d02898..b43bf410d 100644
--- a/client/src/test/java/org/asynchttpclient/DigestAuthTest.java
+++ b/client/src/test/java/org/asynchttpclient/DigestAuthTest.java
@@ -52,7 +52,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new SimpleHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void digestAuthTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.prepareGet("http://localhost:" + port1 + "/")//
@@ -65,7 +65,7 @@ public void digestAuthTest() throws IOException, ExecutionException, TimeoutExce
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void digestAuthTestWithoutScheme() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.prepareGet("http://localhost:" + port1 + "/")//
@@ -78,7 +78,7 @@ public void digestAuthTestWithoutScheme() throws IOException, ExecutionException
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void digestAuthNegativeTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.prepareGet("http://localhost:" + port1 + "/")//
diff --git a/client/src/test/java/org/asynchttpclient/ErrorResponseTest.java b/client/src/test/java/org/asynchttpclient/ErrorResponseTest.java
index a6b23c67c..9edf6e2d9 100644
--- a/client/src/test/java/org/asynchttpclient/ErrorResponseTest.java
+++ b/client/src/test/java/org/asynchttpclient/ErrorResponseTest.java
@@ -62,6 +62,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
       try {
         Thread.sleep(210L);
       } catch (InterruptedException e) {
+        //
       }
       response.setContentType("text/plain");
       response.setStatus(400);
diff --git a/client/src/test/java/org/asynchttpclient/Expect100ContinueTest.java b/client/src/test/java/org/asynchttpclient/Expect100ContinueTest.java
index ec415df96..5349d3b06 100644
--- a/client/src/test/java/org/asynchttpclient/Expect100ContinueTest.java
+++ b/client/src/test/java/org/asynchttpclient/Expect100ContinueTest.java
@@ -43,7 +43,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new ZeroCopyHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void Expect100Continue() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePut("http://localhost:" + port1 + "/")//
diff --git a/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java b/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
index 621d1e374..e7eeec8e3 100644
--- a/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
+++ b/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
@@ -18,7 +18,6 @@
 import io.netty.handler.codec.http.HttpHeaders;
 import org.testng.annotations.Test;
 
-import java.io.IOException;
 import java.util.concurrent.*;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -32,7 +31,7 @@
   private static final int COUNT = 10;
 
   @Test(groups = "online", timeOut = 30 * 1000)
-  public void testFollowRedirect() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  public void testFollowRedirect() throws InterruptedException {
 
     final CountDownLatch countDown = new CountDownLatch(COUNT);
     ExecutorService pool = Executors.newCachedThreadPool();
@@ -51,22 +50,22 @@ public void onThrowable(Throwable t) {
                   t.printStackTrace();
                 }
 
-                public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
+                public State onBodyPartReceived(HttpResponseBodyPart bodyPart) {
                   System.out.println(new String(bodyPart.getBodyPartBytes()));
                   return State.CONTINUE;
                 }
 
-                public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+                public State onStatusReceived(HttpResponseStatus responseStatus) {
                   status = responseStatus.getStatusCode();
                   System.out.println(responseStatus.getStatusText());
                   return State.CONTINUE;
                 }
 
-                public State onHeadersReceived(HttpHeaders headers) throws Exception {
+                public State onHeadersReceived(HttpHeaders headers) {
                   return State.CONTINUE;
                 }
 
-                public Integer onCompleted() throws Exception {
+                public Integer onCompleted() {
                   l.countDown();
                   return status;
                 }
diff --git a/client/src/test/java/org/asynchttpclient/Head302Test.java b/client/src/test/java/org/asynchttpclient/Head302Test.java
index aa0560013..2072f3dbb 100644
--- a/client/src/test/java/org/asynchttpclient/Head302Test.java
+++ b/client/src/test/java/org/asynchttpclient/Head302Test.java
@@ -40,8 +40,8 @@ public AbstractHandler configureHandler() throws Exception {
     return new Head302handler();
   }
 
-  @Test(groups = "standalone")
-  public void testHEAD302() throws IOException, BrokenBarrierException, InterruptedException, ExecutionException, TimeoutException {
+  @Test
+  public void testHEAD302() throws IOException, InterruptedException, ExecutionException, TimeoutException {
     AsyncHttpClientConfig clientConfig = new DefaultAsyncHttpClientConfig.Builder().setFollowRedirect(true).build();
     try (AsyncHttpClient client = asyncHttpClient(clientConfig)) {
       final CountDownLatch l = new CountDownLatch(1);
diff --git a/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java b/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
index f293f1a6b..cb6910e2b 100644
--- a/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
+++ b/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
@@ -52,7 +52,7 @@ public void setUpGlobal() throws Exception {
     logger.info("Local HTTP server started successfully");
   }
 
-  @Test(groups = "standalone")
+  @Test
   // FIXME find a way to make this threadsafe, other, set @Test(singleThreaded = true)
   public void runAllSequentiallyBecauseNotThreadSafe() throws Exception {
     httpToHttpsRedirect();
@@ -60,14 +60,14 @@ public void runAllSequentiallyBecauseNotThreadSafe() throws Exception {
     relativeLocationUrl();
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void httpToHttpsRedirect() throws Exception {
     redirectDone.getAndSet(false);
 
-    AsyncHttpClientConfig cg = config()//
-            .setMaxRedirects(5)//
-            .setFollowRedirect(true)//
-            .setUseInsecureTrustManager(true)//
+    AsyncHttpClientConfig cg = config()
+            .setMaxRedirects(5)
+            .setFollowRedirect(true)
+            .setUseInsecureTrustManager(true)
             .build();
     try (AsyncHttpClient c = asyncHttpClient(cg)) {
       Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", getTargetUrl2()).execute().get();
@@ -77,14 +77,14 @@ public void httpToHttpsRedirect() throws Exception {
     }
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void httpToHttpsProperConfig() throws Exception {
     redirectDone.getAndSet(false);
 
-    AsyncHttpClientConfig cg = config()//
-            .setMaxRedirects(5)//
-            .setFollowRedirect(true)//
-            .setUseInsecureTrustManager(true)//
+    AsyncHttpClientConfig cg = config()
+            .setMaxRedirects(5)
+            .setFollowRedirect(true)
+            .setUseInsecureTrustManager(true)
             .build();
     try (AsyncHttpClient c = asyncHttpClient(cg)) {
       Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", getTargetUrl2() + "/test2").execute().get();
@@ -100,14 +100,14 @@ public void httpToHttpsProperConfig() throws Exception {
     }
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void relativeLocationUrl() throws Exception {
     redirectDone.getAndSet(false);
 
-    AsyncHttpClientConfig cg = config()//
-            .setMaxRedirects(5)//
-            .setFollowRedirect(true)//
-            .setUseInsecureTrustManager(true)//
+    AsyncHttpClientConfig cg = config()
+            .setMaxRedirects(5)
+            .setFollowRedirect(true)
+            .setUseInsecureTrustManager(true)
             .build();
     try (AsyncHttpClient c = asyncHttpClient(cg)) {
       Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", "/foo/test").execute().get();
diff --git a/client/src/test/java/org/asynchttpclient/IdleStateHandlerTest.java b/client/src/test/java/org/asynchttpclient/IdleStateHandlerTest.java
index 2afddddd4..0ee80f419 100644
--- a/client/src/test/java/org/asynchttpclient/IdleStateHandlerTest.java
+++ b/client/src/test/java/org/asynchttpclient/IdleStateHandlerTest.java
@@ -45,7 +45,7 @@ public void setUpGlobal() throws Exception {
     logger.info("Local HTTP server started successfully");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void idleStateTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setPooledConnectionIdleTimeout(10 * 1000))) {
       c.prepareGet(getTargetUrl()).execute().get();
diff --git a/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java b/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java
index 31ed6ce85..0ec510d6c 100644
--- a/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java
+++ b/client/src/test/java/org/asynchttpclient/ListenableFutureTest.java
@@ -66,9 +66,9 @@ public void testListenableFutureBeforeAndAfterCompletion() throws Exception {
 
     try (AsyncHttpClient ahc = asyncHttpClient()) {
       final ListenableFuture<Response> future = ahc.prepareGet(getTargetUrl()).execute();
-      future.addListener(() -> latch.countDown(), Runnable::run);
+      future.addListener(latch::countDown, Runnable::run);
       future.get();
-      future.addListener(() -> latch.countDown(), Runnable::run);
+      future.addListener(latch::countDown, Runnable::run);
     }
 
     latch.await(10, TimeUnit.SECONDS);
diff --git a/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java b/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
index ffb0c9035..0bad2af9b 100644
--- a/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
+++ b/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
@@ -41,8 +41,7 @@ public void setUpGlobal() throws Exception {
     serverSocket = ServerSocketFactory.getDefault().createServerSocket(0);
     port1 = serverSocket.getLocalPort();
     executorService = Executors.newFixedThreadPool(1);
-    voidFuture = executorService.submit(new Callable<Void>() {
-      public Void call() throws Exception {
+    voidFuture = executorService.submit(() -> {
         Socket socket;
         while ((socket = serverSocket.accept()) != null) {
           InputStream inputStream = socket.getInputStream();
@@ -67,8 +66,7 @@ public Void call() throws Exception {
           }
         }
         return null;
-      }
-    });
+      });
   }
 
   @AfterClass(alwaysRun = true)
@@ -78,7 +76,7 @@ public void tearDownGlobal() throws Exception {
     serverSocket.close();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testMultipleOtherHeaders() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     final String[] xffHeaders = new String[]{null, null};
 
@@ -90,15 +88,15 @@ public void onThrowable(Throwable t) {
           t.printStackTrace(System.out);
         }
 
-        public State onBodyPartReceived(HttpResponseBodyPart objectHttpResponseBodyPart) throws Exception {
+        public State onBodyPartReceived(HttpResponseBodyPart objectHttpResponseBodyPart) {
           return State.CONTINUE;
         }
 
-        public State onStatusReceived(HttpResponseStatus objectHttpResponseStatus) throws Exception {
+        public State onStatusReceived(HttpResponseStatus objectHttpResponseStatus) {
           return State.CONTINUE;
         }
 
-        public State onHeadersReceived(HttpHeaders response) throws Exception {
+        public State onHeadersReceived(HttpHeaders response) {
           int i = 0;
           for (String header : response.getAll("X-Forwarded-For")) {
             xffHeaders[i++] = header;
@@ -107,7 +105,7 @@ public State onHeadersReceived(HttpHeaders response) throws Exception {
           return State.CONTINUE;
         }
 
-        public Void onCompleted() throws Exception {
+        public Void onCompleted() {
           return null;
         }
       }).get(3, TimeUnit.SECONDS);
@@ -127,7 +125,7 @@ public Void onCompleted() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testMultipleEntityHeaders() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     final String[] clHeaders = new String[]{null, null};
 
@@ -139,15 +137,15 @@ public void onThrowable(Throwable t) {
           t.printStackTrace(System.out);
         }
 
-        public State onBodyPartReceived(HttpResponseBodyPart objectHttpResponseBodyPart) throws Exception {
+        public State onBodyPartReceived(HttpResponseBodyPart objectHttpResponseBodyPart) {
           return State.CONTINUE;
         }
 
-        public State onStatusReceived(HttpResponseStatus objectHttpResponseStatus) throws Exception {
+        public State onStatusReceived(HttpResponseStatus objectHttpResponseStatus) {
           return State.CONTINUE;
         }
 
-        public State onHeadersReceived(HttpHeaders response) throws Exception {
+        public State onHeadersReceived(HttpHeaders response) {
           try {
             int i = 0;
             for (String header : response.getAll(CONTENT_LENGTH)) {
@@ -159,7 +157,7 @@ public State onHeadersReceived(HttpHeaders response) throws Exception {
           return State.CONTINUE;
         }
 
-        public Void onCompleted() throws Exception {
+        public Void onCompleted() {
           return null;
         }
       }).get(3, TimeUnit.SECONDS);
diff --git a/client/src/test/java/org/asynchttpclient/NonAsciiContentLengthTest.java b/client/src/test/java/org/asynchttpclient/NonAsciiContentLengthTest.java
index 413794e07..d59285531 100644
--- a/client/src/test/java/org/asynchttpclient/NonAsciiContentLengthTest.java
+++ b/client/src/test/java/org/asynchttpclient/NonAsciiContentLengthTest.java
@@ -41,7 +41,7 @@ public void setUpGlobal() throws Exception {
     ServerConnector connector = addHttpConnector(server);
     server.setHandler(new AbstractHandler() {
 
-      public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
+      public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException {
         int MAX_BODY_SIZE = 1024; // Can only handle bodies of up to 1024 bytes.
         byte[] b = new byte[MAX_BODY_SIZE];
         int offset = 0;
@@ -64,7 +64,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
     port1 = connector.getLocalPort();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testNonAsciiContentLength() throws Exception {
     execute("test");
     execute("\u4E00"); // Unicode CJK ideograph for one
diff --git a/client/src/test/java/org/asynchttpclient/ParamEncodingTest.java b/client/src/test/java/org/asynchttpclient/ParamEncodingTest.java
index a2ddd9847..43783647e 100644
--- a/client/src/test/java/org/asynchttpclient/ParamEncodingTest.java
+++ b/client/src/test/java/org/asynchttpclient/ParamEncodingTest.java
@@ -35,7 +35,7 @@
 
 public class ParamEncodingTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void testParameters() throws IOException, ExecutionException, TimeoutException, InterruptedException {
 
     String value = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKQLMNOPQRSTUVWXYZ1234567809`~!@#$%^&*()_+-=,.<>/?;:'\"[]{}\\| ";
diff --git a/client/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java b/client/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java
index aba053e32..e8433fa48 100644
--- a/client/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java
+++ b/client/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java
@@ -70,7 +70,7 @@ public void runAllSequentiallyBecauseNotThreadSafe() throws Exception {
     redirected302InvalidTest();
   }
 
-  // @Test(groups = "online")
+  @Test(groups = "online", enabled = false)
   public void redirected302Test() throws Exception {
     isSet.getAndSet(false);
     try (AsyncHttpClient c = asyncHttpClient()) {
@@ -86,7 +86,7 @@ public void redirected302Test() throws Exception {
     }
   }
 
-  // @Test(groups = "online")
+  @Test(groups = "online", enabled = false)
   public void notRedirected302Test() throws Exception {
     isSet.getAndSet(false);
     try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true))) {
@@ -106,7 +106,7 @@ private String getBaseUrl(Uri uri) {
     return url.substring(0, url.lastIndexOf(":") + String.valueOf(port).length() + 1);
   }
 
-  // @Test(groups = "standalone")
+  @Test(groups = "online", enabled = false)
   public void redirected302InvalidTest() throws Exception {
     isSet.getAndSet(false);
     Exception e = null;
@@ -123,7 +123,7 @@ public void redirected302InvalidTest() throws Exception {
     assertTrue(cause.getMessage().contains(":" + port2));
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void relativeLocationUrl() throws Exception {
     isSet.getAndSet(false);
 
diff --git a/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java b/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
index 129306ef8..219860292 100644
--- a/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
+++ b/client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
@@ -56,7 +56,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new SlowHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testRequestTimeout() throws IOException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> responseFuture = client.prepareGet(getTargetUrl()).setRequestTimeout(100).execute();
@@ -72,7 +72,7 @@ public void testRequestTimeout() throws IOException {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testReadTimeout() throws IOException {
     try (AsyncHttpClient client = asyncHttpClient(config().setReadTimeout(100))) {
       Future<Response> responseFuture = client.prepareGet(getTargetUrl()).execute();
@@ -88,7 +88,7 @@ public void testReadTimeout() throws IOException {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testGlobalDefaultPerRequestInfiniteTimeout() throws IOException {
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100))) {
       Future<Response> responseFuture = client.prepareGet(getTargetUrl()).setRequestTimeout(-1).execute();
@@ -102,7 +102,7 @@ public void testGlobalDefaultPerRequestInfiniteTimeout() throws IOException {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testGlobalRequestTimeout() throws IOException {
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100))) {
       Future<Response> responseFuture = client.prepareGet(getTargetUrl()).execute();
@@ -118,14 +118,14 @@ public void testGlobalRequestTimeout() throws IOException {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testGlobalIdleTimeout() throws IOException {
     final long times[] = new long[]{-1, -1};
 
     try (AsyncHttpClient client = asyncHttpClient(config().setPooledConnectionIdleTimeout(2000))) {
       Future<Response> responseFuture = client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandler<Response>() {
         @Override
-        public Response onCompleted(Response response) throws Exception {
+        public Response onCompleted(Response response) {
           return response;
         }
 
@@ -156,32 +156,24 @@ public void onThrowable(Throwable t) {
     public void handle(String target, Request baseRequest, HttpServletRequest request, final HttpServletResponse response) throws IOException, ServletException {
       response.setStatus(HttpServletResponse.SC_OK);
       final AsyncContext asyncContext = request.startAsync();
-      new Thread(new Runnable() {
-        public void run() {
+      new Thread(() -> {
           try {
             Thread.sleep(1500);
             response.getOutputStream().print(MSG);
             response.getOutputStream().flush();
-          } catch (InterruptedException e) {
-            logger.error(e.getMessage(), e);
-          } catch (IOException e) {
+          } catch (InterruptedException | IOException e) {
             logger.error(e.getMessage(), e);
           }
-        }
       }).start();
-      new Thread(new Runnable() {
-        public void run() {
+      new Thread(() -> {
           try {
             Thread.sleep(3000);
             response.getOutputStream().print(MSG);
             response.getOutputStream().flush();
             asyncContext.complete();
-          } catch (InterruptedException e) {
-            logger.error(e.getMessage(), e);
-          } catch (IOException e) {
+          } catch (InterruptedException | IOException e) {
             logger.error(e.getMessage(), e);
           }
-        }
       }).start();
       baseRequest.setHandled(true);
     }
diff --git a/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java b/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java
index 5dbdbf4fa..c231b3761 100644
--- a/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java
+++ b/client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java
@@ -13,7 +13,6 @@
 package org.asynchttpclient;
 
 import org.asynchttpclient.filter.FilterContext;
-import org.asynchttpclient.filter.FilterException;
 import org.asynchttpclient.filter.ResponseFilter;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
@@ -31,36 +30,32 @@
 
 public class PostRedirectGetTest extends AbstractBasicTest {
 
-  // ------------------------------------------------------ Test Configuration
-
   @Override
   public AbstractHandler configureHandler() throws Exception {
     return new PostRedirectGetHandler();
   }
 
-  // ------------------------------------------------------------ Test Methods
-
-  @Test(groups = "standalone")
+  @Test
   public void postRedirectGet302Test() throws Exception {
     doTestPositive(302);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postRedirectGet302StrictTest() throws Exception {
     doTestNegative(302, true);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postRedirectGet303Test() throws Exception {
     doTestPositive(303);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postRedirectGet301Test() throws Exception {
     doTestPositive(301);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postRedirectGet307Test() throws Exception {
     doTestNegative(307, false);
   }
@@ -71,7 +66,7 @@ private void doTestNegative(final int status, boolean strict) throws Exception {
 
     ResponseFilter responseFilter = new ResponseFilter() {
       @Override
-      public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+      public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         // pass on the x-expect-get and remove the x-redirect
         // headers if found in the response
         ctx.getResponseHeaders().get("x-expect-post");
@@ -86,7 +81,7 @@ private void doTestNegative(final int status, boolean strict) throws Exception {
       Future<Integer> responseFuture = p.executeRequest(request, new AsyncCompletionHandler<Integer>() {
 
         @Override
-        public Integer onCompleted(Response response) throws Exception {
+        public Integer onCompleted(Response response) {
           return response.getStatusCode();
         }
 
@@ -106,7 +101,7 @@ private void doTestPositive(final int status) throws Exception {
 
     ResponseFilter responseFilter = new ResponseFilter() {
       @Override
-      public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+      public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         // pass on the x-expect-get and remove the x-redirect
         // headers if found in the response
         ctx.getResponseHeaders().get("x-expect-get");
@@ -121,7 +116,7 @@ private void doTestPositive(final int status) throws Exception {
       Future<Integer> responseFuture = p.executeRequest(request, new AsyncCompletionHandler<Integer>() {
 
         @Override
-        public Integer onCompleted(Response response) throws Exception {
+        public Integer onCompleted(Response response) {
           return response.getStatusCode();
         }
 
diff --git a/client/src/test/java/org/asynchttpclient/PostWithQSTest.java b/client/src/test/java/org/asynchttpclient/PostWithQSTest.java
index ff1c0ce00..affd2802a 100644
--- a/client/src/test/java/org/asynchttpclient/PostWithQSTest.java
+++ b/client/src/test/java/org/asynchttpclient/PostWithQSTest.java
@@ -42,7 +42,7 @@
  */
 public class PostWithQSTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void postWithQS() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePost("http://localhost:" + port1 + "/?a=b").setBody("abc".getBytes()).execute();
@@ -52,7 +52,7 @@ public void postWithQS() throws IOException, ExecutionException, TimeoutExceptio
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postWithNulParamQS() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePost("http://localhost:" + port1 + "/?a=").setBody("abc".getBytes()).execute(new AsyncCompletionHandlerBase() {
@@ -72,7 +72,7 @@ public State onStatusReceived(final HttpResponseStatus status) throws Exception
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postWithNulParamsQS() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePost("http://localhost:" + port1 + "/?a=b&c&d=e").setBody("abc".getBytes()).execute(new AsyncCompletionHandlerBase() {
@@ -92,7 +92,7 @@ public State onStatusReceived(final HttpResponseStatus status) throws Exception
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void postWithEmptyParamsQS() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePost("http://localhost:" + port1 + "/?a=b&c=&d=e").setBody("abc".getBytes()).execute(new AsyncCompletionHandlerBase() {
diff --git a/client/src/test/java/org/asynchttpclient/QueryParametersTest.java b/client/src/test/java/org/asynchttpclient/QueryParametersTest.java
index 76a3b7643..1691e8138 100644
--- a/client/src/test/java/org/asynchttpclient/QueryParametersTest.java
+++ b/client/src/test/java/org/asynchttpclient/QueryParametersTest.java
@@ -47,7 +47,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new QueryStringHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testQueryParameters() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.prepareGet("http://localhost:" + port1).addQueryParam("a", "1").addQueryParam("b", "2").execute();
@@ -59,7 +59,7 @@ public void testQueryParameters() throws IOException, ExecutionException, Timeou
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testUrlRequestParametersEncoding() throws IOException, ExecutionException, InterruptedException {
     String URL = getTargetUrl() + "?q=";
     String REQUEST_PARAM = "github github \ngithub";
@@ -73,7 +73,7 @@ public void testUrlRequestParametersEncoding() throws IOException, ExecutionExce
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void urlWithColonTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       String query = "test:colon:";
diff --git a/client/src/test/java/org/asynchttpclient/RC1KTest.java b/client/src/test/java/org/asynchttpclient/RC1KTest.java
index fa5336a52..93ac24545 100644
--- a/client/src/test/java/org/asynchttpclient/RC1KTest.java
+++ b/client/src/test/java/org/asynchttpclient/RC1KTest.java
@@ -24,7 +24,6 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -32,7 +31,6 @@
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
-import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -50,7 +48,7 @@
   private static final int C1K = 1000;
   private static final String ARG_HEADER = "Arg";
   private static final int SRV_COUNT = 10;
-  protected Server[] servers = new Server[SRV_COUNT];
+  private Server[] servers = new Server[SRV_COUNT];
   private int[] ports = new int[SRV_COUNT];
 
   @BeforeClass(alwaysRun = true)
@@ -77,7 +75,7 @@ public void tearDownGlobal() throws Exception {
   @Override
   public AbstractHandler configureHandler() throws Exception {
     return new AbstractHandler() {
-      public void handle(String s, Request r, HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
+      public void handle(String s, Request r, HttpServletRequest req, HttpServletResponse resp) throws IOException {
         resp.setContentType("text/pain");
         String arg = s.substring(1);
         resp.setHeader(ARG_HEADER, arg);
@@ -89,8 +87,8 @@ public void handle(String s, Request r, HttpServletRequest req, HttpServletRespo
     };
   }
 
-  @Test(timeOut = 10 * 60 * 1000, groups = "scalability")
-  public void rc10kProblem() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test(timeOut = 10 * 60 * 1000)
+  public void rc10kProblem() throws IOException, ExecutionException, InterruptedException {
     try (AsyncHttpClient ahc = asyncHttpClient(config().setMaxConnectionsPerHost(C1K).setKeepAlive(true))) {
       List<Future<Integer>> resps = new ArrayList<>(C1K);
       int i = 0;
@@ -110,7 +108,7 @@ public void rc10kProblem() throws IOException, ExecutionException, TimeoutExcept
     private String arg;
     private AtomicInteger result = new AtomicInteger(-1);
 
-    public MyAsyncHandler(int i) {
+    MyAsyncHandler(int i) {
       arg = String.format("%d", i);
     }
 
@@ -118,23 +116,23 @@ public void onThrowable(Throwable t) {
       logger.warn("onThrowable called.", t);
     }
 
-    public State onBodyPartReceived(HttpResponseBodyPart event) throws Exception {
+    public State onBodyPartReceived(HttpResponseBodyPart event) {
       String s = new String(event.getBodyPartBytes());
       result.compareAndSet(-1, new Integer(s.trim().equals("") ? "-1" : s));
       return State.CONTINUE;
     }
 
-    public State onStatusReceived(HttpResponseStatus event) throws Exception {
+    public State onStatusReceived(HttpResponseStatus event) {
       assertEquals(event.getStatusCode(), 200);
       return State.CONTINUE;
     }
 
-    public State onHeadersReceived(HttpHeaders event) throws Exception {
+    public State onHeadersReceived(HttpHeaders event) {
       assertEquals(event.get(ARG_HEADER), arg);
       return State.CONTINUE;
     }
 
-    public Integer onCompleted() throws Exception {
+    public Integer onCompleted() {
       return result.get();
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/RealmTest.java b/client/src/test/java/org/asynchttpclient/RealmTest.java
index 85ad1a4b3..1ca9574b1 100644
--- a/client/src/test/java/org/asynchttpclient/RealmTest.java
+++ b/client/src/test/java/org/asynchttpclient/RealmTest.java
@@ -24,7 +24,7 @@
 import static org.testng.Assert.assertEquals;
 
 public class RealmTest {
-  @Test(groups = "standalone")
+  @Test
   public void testClone() {
     Realm orig = basicAuthRealm("user", "pass").setCharset(UTF_16)//
             .setUsePreemptiveAuth(true)//
@@ -41,12 +41,12 @@ public void testClone() {
     assertEquals(clone.getScheme(), orig.getScheme());
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testOldDigestEmptyString() throws Exception {
     testOldDigest("");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testOldDigestNull() throws Exception {
     testOldDigest(null);
   }
@@ -73,7 +73,7 @@ private void testOldDigest(String qop) throws Exception {
     assertEquals(orig.getResponse(), expectedResponse);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testStrongDigest() throws Exception {
     String user = "user";
     String pass = "pass";
diff --git a/client/src/test/java/org/asynchttpclient/RedirectBodyTest.java b/client/src/test/java/org/asynchttpclient/RedirectBodyTest.java
index 8206d7355..935c51cef 100644
--- a/client/src/test/java/org/asynchttpclient/RedirectBodyTest.java
+++ b/client/src/test/java/org/asynchttpclient/RedirectBodyTest.java
@@ -19,7 +19,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -38,7 +37,7 @@
   private volatile String receivedContentType;
 
   @BeforeMethod
-  public void setUp() throws Exception {
+  public void setUp() {
     redirectAlreadyPerformed = false;
     receivedContentType = null;
   }
@@ -47,7 +46,7 @@ public void setUp() throws Exception {
   public AbstractHandler configureHandler() throws Exception {
     return new AbstractHandler() {
       @Override
-      public void handle(String pathInContext, Request request, HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException, ServletException {
+      public void handle(String pathInContext, Request request, HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException {
 
         String redirectHeader = httpRequest.getHeader("X-REDIRECT");
         if (redirectHeader != null && !redirectAlreadyPerformed) {
@@ -73,7 +72,7 @@ public void handle(String pathInContext, Request request, HttpServletRequest htt
     };
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void regular301LosesBody() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true))) {
       String body = "hello there";
@@ -85,7 +84,7 @@ public void regular301LosesBody() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void regular302LosesBody() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true))) {
       String body = "hello there";
@@ -97,7 +96,7 @@ public void regular302LosesBody() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void regular302StrictKeepsBody() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true).setStrict302Handling(true))) {
       String body = "hello there";
@@ -109,7 +108,7 @@ public void regular302StrictKeepsBody() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void regular307KeepsBody() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true))) {
       String body = "hello there";
diff --git a/client/src/test/java/org/asynchttpclient/RedirectConnectionUsageTest.java b/client/src/test/java/org/asynchttpclient/RedirectConnectionUsageTest.java
index b96f74625..ff74b4d61 100644
--- a/client/src/test/java/org/asynchttpclient/RedirectConnectionUsageTest.java
+++ b/client/src/test/java/org/asynchttpclient/RedirectConnectionUsageTest.java
@@ -22,7 +22,6 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -66,7 +65,7 @@ public void setUp() throws Exception {
   /**
    * Tests that after a redirect the final url in the response reflect the redirect
    */
-  @Test(groups = "standalone")
+  @Test
   public void testGetRedirectFinalUrl() throws Exception {
 
     AsyncHttpClientConfig config = config()//
@@ -80,8 +79,7 @@ public void testGetRedirectFinalUrl() throws Exception {
 
     try (AsyncHttpClient c = asyncHttpClient(config)) {
       ListenableFuture<Response> response = c.executeRequest(get(servletEndpointRedirectUrl));
-      Response res = null;
-      res = response.get();
+      Response res = response.get();
       assertNotNull(res.getResponseBody());
       assertEquals(res.getUri().toString(), BASE_URL + "/overthere");
     }
@@ -89,7 +87,7 @@ public void testGetRedirectFinalUrl() throws Exception {
 
   @SuppressWarnings("serial")
   class MockRedirectHttpServlet extends HttpServlet {
-    public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
+    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException {
       res.sendRedirect("/overthere");
     }
   }
@@ -100,8 +98,8 @@ public void service(HttpServletRequest req, HttpServletResponse res) throws Serv
     private static final String contentType = "text/xml";
     private static final String xml = "<?xml version=\"1.0\"?><hello date=\"%s\"></hello>";
 
-    public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
-      String xmlToReturn = String.format(xml, new Object[]{new Date().toString()});
+    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException {
+      String xmlToReturn = String.format(xml, new Date().toString());
 
       res.setStatus(200);
       res.addHeader("Content-Type", contentType);
diff --git a/client/src/test/java/org/asynchttpclient/Relative302Test.java b/client/src/test/java/org/asynchttpclient/Relative302Test.java
index f8dd9634d..af141a158 100644
--- a/client/src/test/java/org/asynchttpclient/Relative302Test.java
+++ b/client/src/test/java/org/asynchttpclient/Relative302Test.java
@@ -67,7 +67,7 @@ public void testAllSequentiallyBecauseNotThreadSafe() throws Exception {
     relativePathRedirectTest();
   }
 
-  // @Test(groups = "online")
+  @Test(groups = "online", enabled = false)
   public void redirected302Test() throws Exception {
     isSet.getAndSet(false);
 
@@ -81,7 +81,7 @@ public void redirected302Test() throws Exception {
     }
   }
 
-  //     @Test(groups = "standalone")
+  @Test(enabled = false)
   public void redirected302InvalidTest() throws Exception {
     isSet.getAndSet(false);
 
@@ -99,7 +99,7 @@ public void redirected302InvalidTest() throws Exception {
     assertTrue(cause.getMessage().contains(":" + port2));
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void absolutePathRedirectTest() throws Exception {
     isSet.getAndSet(false);
 
@@ -116,7 +116,7 @@ public void absolutePathRedirectTest() throws Exception {
     }
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void relativePathRedirectTest() throws Exception {
     isSet.getAndSet(false);
 
diff --git a/client/src/test/java/org/asynchttpclient/RequestBuilderTest.java b/client/src/test/java/org/asynchttpclient/RequestBuilderTest.java
index 3acc37eb4..b4febc485 100644
--- a/client/src/test/java/org/asynchttpclient/RequestBuilderTest.java
+++ b/client/src/test/java/org/asynchttpclient/RequestBuilderTest.java
@@ -36,8 +36,8 @@
   private final static String SAFE_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890-_*.";
   private final static String HEX_CHARS = "0123456789ABCDEF";
 
-  @Test(groups = "standalone")
-  public void testEncodesQueryParameters() throws UnsupportedEncodingException {
+  @Test
+  public void testEncodesQueryParameters() {
     String[] values = new String[]{"abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKQLMNOPQRSTUVWXYZ", "1234567890", "1234567890", "`~!@#$%^&*()", "`~!@#$%^&*()", "_+-=,.<>/?",
             "_+-=,.<>/?", ";:'\"[]{}\\| ", ";:'\"[]{}\\| "};
 
@@ -71,8 +71,8 @@ public void testEncodesQueryParameters() throws UnsupportedEncodingException {
     }
   }
 
-  @Test(groups = "standalone")
-  public void testChaining() throws IOException, ExecutionException, InterruptedException {
+  @Test
+  public void testChaining() {
     Request request = get("http://foo.com").addQueryParam("x", "value").build();
 
     Request request2 = new RequestBuilder(request).build();
@@ -80,8 +80,8 @@ public void testChaining() throws IOException, ExecutionException, InterruptedEx
     assertEquals(request2.getUri(), request.getUri());
   }
 
-  @Test(groups = "standalone")
-  public void testParsesQueryParams() throws IOException, ExecutionException, InterruptedException {
+  @Test
+  public void testParsesQueryParams() {
     Request request = get("http://foo.com/?param1=value1").addQueryParam("param2", "value2").build();
 
     assertEquals(request.getUrl(), "http://foo.com/?param1=value1&param2=value2");
@@ -91,21 +91,21 @@ public void testParsesQueryParams() throws IOException, ExecutionException, Inte
     assertEquals(params.get(1), new Param("param2", "value2"));
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testUserProvidedRequestMethod() {
     Request req = new RequestBuilder("ABC").setUrl("http://foo.com").build();
     assertEquals(req.getMethod(), "ABC");
     assertEquals(req.getUrl(), "http://foo.com");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPercentageEncodedUserInfo() {
     final Request req = get("http://hello:wor%20ld@foo.com").build();
     assertEquals(req.getMethod(), "GET");
     assertEquals(req.getUrl(), "http://hello:wor%20ld@foo.com");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testContentTypeCharsetToBodyEncoding() {
     final Request req = get("http://localhost").setHeader("Content-Type", "application/json; charset=utf-8").build();
     assertEquals(req.getCharset(), UTF_8);
@@ -132,6 +132,7 @@ public void testSetHeaders() {
     assertEquals(requestBuilder.headers.get("Content-Type"), "application/json", "header value incorrect");
   }
 
+  @Test(enabled = false)
   public void testAddOrReplaceCookies() {
     RequestBuilder requestBuilder = new RequestBuilder();
     Cookie cookie = new DefaultCookie("name", "value");
diff --git a/client/src/test/java/org/asynchttpclient/RetryRequestTest.java b/client/src/test/java/org/asynchttpclient/RetryRequestTest.java
index 60d7f42d6..e7fd6dbaf 100644
--- a/client/src/test/java/org/asynchttpclient/RetryRequestTest.java
+++ b/client/src/test/java/org/asynchttpclient/RetryRequestTest.java
@@ -38,8 +38,8 @@ public AbstractHandler configureHandler() throws Exception {
     return new SlowAndBigHandler();
   }
 
-  @Test(groups = "standalone")
-  public void testMaxRetry() throws Exception {
+  @Test
+  public void testMaxRetry() {
     try (AsyncHttpClient ahc = asyncHttpClient(config().setMaxRequestRetry(0))) {
       ahc.executeRequest(ahc.prepareGet(getTargetUrl()).build()).get();
       fail();
diff --git a/client/src/test/java/org/asynchttpclient/ThreadNameTest.java b/client/src/test/java/org/asynchttpclient/ThreadNameTest.java
index 7d17f219e..453c882af 100644
--- a/client/src/test/java/org/asynchttpclient/ThreadNameTest.java
+++ b/client/src/test/java/org/asynchttpclient/ThreadNameTest.java
@@ -44,7 +44,7 @@
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testThreadName() throws Exception {
     String threadPoolName = "ahc-" + (new Random().nextLong() & 0x7fffffffffffffffL);
     try (AsyncHttpClient client = asyncHttpClient(config().setThreadPoolName(threadPoolName))) {
diff --git a/client/src/test/java/org/asynchttpclient/channel/ConnectionPoolTest.java b/client/src/test/java/org/asynchttpclient/channel/ConnectionPoolTest.java
index cbf361bae..4130fce8f 100644
--- a/client/src/test/java/org/asynchttpclient/channel/ConnectionPoolTest.java
+++ b/client/src/test/java/org/asynchttpclient/channel/ConnectionPoolTest.java
@@ -40,7 +40,7 @@
 
 public class ConnectionPoolTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void testMaxTotalConnections() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(true).setMaxConnections(1))) {
       String url = getTargetUrl();
@@ -59,7 +59,7 @@ public void testMaxTotalConnections() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = TooManyConnectionsException.class)
+  @Test(expectedExceptions = TooManyConnectionsException.class)
   public void testMaxTotalConnectionsException() throws Throwable {
     try (AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(true).setMaxConnections(1))) {
       String url = getTargetUrl();
@@ -85,7 +85,7 @@ public void testMaxTotalConnectionsException() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone", invocationCount = 100)
+  @Test(invocationCount = 100)
   public void asyncDoGetKeepAliveHandlerTest_channelClosedDoesNotFail() throws Exception {
 
     try (AsyncHttpClient client = asyncHttpClient()) {
@@ -97,7 +97,7 @@ public void asyncDoGetKeepAliveHandlerTest_channelClosedDoesNotFail() throws Exc
       AsyncCompletionHandler<Response> handler = new AsyncCompletionHandlerAdapter() {
 
         @Override
-        public Response onCompleted(Response response) throws Exception {
+        public Response onCompleted(Response response) {
           logger.debug("ON COMPLETED INVOKED " + response.getHeader("X-KEEP-ALIVE"));
           try {
             assertEquals(response.getStatusCode(), 200);
@@ -140,7 +140,7 @@ public void onThrowable(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = TooManyConnectionsException.class)
+  @Test(expectedExceptions = TooManyConnectionsException.class)
   public void multipleMaxConnectionOpenTest() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient(config().setKeepAlive(true).setConnectTimeout(5000).setMaxConnections(1))) {
       String body = "hello there";
@@ -164,7 +164,7 @@ public void multipleMaxConnectionOpenTest() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void multipleMaxConnectionOpenTestWithQuery() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setKeepAlive(true).setConnectTimeout(5000).setMaxConnections(1))) {
       String body = "hello there";
@@ -193,7 +193,7 @@ public void multipleMaxConnectionOpenTestWithQuery() throws Exception {
    *
    * @throws Exception if something wrong happens.
    */
-  @Test(groups = "standalone")
+  @Test
   public void win7DisconnectTest() throws Exception {
     final AtomicInteger count = new AtomicInteger(0);
 
@@ -223,7 +223,7 @@ public Response onCompleted(Response response) throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void asyncHandlerOnThrowableTest() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient()) {
       final AtomicInteger count = new AtomicInteger();
@@ -246,7 +246,7 @@ public void onThrowable(Throwable t) {
           }
 
           @Override
-          public Response onCompleted(Response response) throws Exception {
+          public Response onCompleted(Response response) {
             latch.countDown();
             return response;
           }
@@ -257,7 +257,7 @@ public Response onCompleted(Response response) throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void nonPoolableConnectionReleaseSemaphoresTest() throws Throwable {
 
     RequestBuilder request = get(getTargetUrl()).setHeader("Connection", "close");
@@ -273,7 +273,7 @@ public void nonPoolableConnectionReleaseSemaphoresTest() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPooledEventsFired() throws Exception {
     RequestBuilder request = get("http://localhost:" + port1 + "/Test");
 
diff --git a/client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreads.java b/client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreads.java
index 9449db50c..1f6a2f0c9 100644
--- a/client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreads.java
+++ b/client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreads.java
@@ -26,7 +26,6 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -42,7 +41,7 @@
 
 public class MaxConnectionsInThreads extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void testMaxConnectionsWithinThreads() throws Exception {
 
     String[] urls = new String[]{getTargetUrl(), getTargetUrl()};
@@ -134,9 +133,9 @@ public String getTargetUrl() {
   public static class MockTimeoutHttpServlet extends HttpServlet {
     private static final Logger LOGGER = LoggerFactory.getLogger(MockTimeoutHttpServlet.class);
     private static final String contentType = "text/plain";
-    public static long DEFAULT_TIMEOUT = 2000;
+    static long DEFAULT_TIMEOUT = 2000;
 
-    public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
+    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException {
       res.setStatus(200);
       res.addHeader("Content-Type", contentType);
       long sleepTime = DEFAULT_TIMEOUT;
@@ -156,7 +155,7 @@ public void service(HttpServletRequest req, HttpServletResponse res) throws Serv
         LOGGER.debug("Servlet is awake for");
         LOGGER.debug("=======================================");
       } catch (Exception e) {
-
+        //
       }
 
       res.setHeader("XXX", "TripleX");
diff --git a/client/src/test/java/org/asynchttpclient/filter/FilterTest.java b/client/src/test/java/org/asynchttpclient/filter/FilterTest.java
index 79d20ea59..10b36507a 100644
--- a/client/src/test/java/org/asynchttpclient/filter/FilterTest.java
+++ b/client/src/test/java/org/asynchttpclient/filter/FilterTest.java
@@ -42,7 +42,7 @@ public String getTargetUrl() {
     return String.format("http://localhost:%d/foo/test", port1);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().addRequestFilter(new ThrottleRequestFilter(100)))) {
       Response response = c.preparePost(getTargetUrl()).execute().get();
@@ -51,7 +51,7 @@ public void basicTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void loadThrottleTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().addRequestFilter(new ThrottleRequestFilter(10)))) {
       List<Future<Response>> futures = new ArrayList<>();
@@ -67,7 +67,7 @@ public void loadThrottleTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void maxConnectionsText() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().addRequestFilter(new ThrottleRequestFilter(0, 1000)))) {
       c.preparePost(getTargetUrl()).execute().get();
@@ -77,12 +77,12 @@ public void maxConnectionsText() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicResponseFilterTest() throws Exception {
 
     ResponseFilter responseFilter = new ResponseFilter() {
       @Override
-      public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+      public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         return ctx;
       }
     };
@@ -94,12 +94,12 @@ public void basicResponseFilterTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void replayResponseFilterTest() throws Exception {
 
     final AtomicBoolean replay = new AtomicBoolean(true);
     ResponseFilter responseFilter = new ResponseFilter() {
-      public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+      public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         if (replay.getAndSet(false)) {
           Request request = new RequestBuilder(ctx.getRequest()).addHeader("X-Replay", "true").build();
           return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
@@ -116,12 +116,12 @@ public void replayResponseFilterTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void replayStatusCodeResponseFilterTest() throws Exception {
 
     final AtomicBoolean replay = new AtomicBoolean(true);
     ResponseFilter responseFilter = new ResponseFilter() {
-      public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+      public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         if (ctx.getResponseStatus() != null && ctx.getResponseStatus().getStatusCode() == 200 && replay.getAndSet(false)) {
           Request request = new RequestBuilder(ctx.getRequest()).addHeader("X-Replay", "true").build();
           return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
@@ -138,12 +138,12 @@ public void replayStatusCodeResponseFilterTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void replayHeaderResponseFilterTest() throws Exception {
 
     final AtomicBoolean replay = new AtomicBoolean(true);
     ResponseFilter responseFilter = new ResponseFilter() {
-      public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+      public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         if (ctx.getResponseHeaders() != null && ctx.getResponseHeaders().get("Ping").equals("Pong") && replay.getAndSet(false)) {
           Request request = new RequestBuilder(ctx.getRequest()).addHeader("Ping", "Pong").build();
           return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
diff --git a/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java b/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
index c479fc233..104ad5cae 100644
--- a/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
+++ b/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
@@ -42,18 +42,18 @@
 
 public class BodyDeferringAsyncHandlerTest extends AbstractBasicTest {
 
-  protected static final int CONTENT_LENGTH_VALUE = 100000;
+  static final int CONTENT_LENGTH_VALUE = 100000;
 
   public AbstractHandler configureHandler() throws Exception {
     return new SlowAndBigHandler();
   }
 
-  public AsyncHttpClientConfig getAsyncHttpClientConfig() {
+  private AsyncHttpClientConfig getAsyncHttpClientConfig() {
     // for this test brevity's sake, we are limiting to 1 retries
     return config().setMaxRequestRetry(0).setRequestTimeout(10000).build();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void deferredSimple() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
       BoundRequestBuilder r = client.prepareGet(getTargetUrl());
@@ -77,7 +77,7 @@ public void deferredSimple() throws IOException, ExecutionException, TimeoutExce
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = RemotelyClosedException.class)
+  @Test(expectedExceptions = RemotelyClosedException.class)
   public void deferredSimpleWithFailure() throws Throwable {
     try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
       BoundRequestBuilder r = client.prepareGet(getTargetUrl()).addHeader("X-FAIL-TRANSFER", Boolean.TRUE.toString());
@@ -106,8 +106,8 @@ public void deferredSimpleWithFailure() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone")
-  public void deferredInputStreamTrick() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test
+  public void deferredInputStreamTrick() throws IOException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
       BoundRequestBuilder r = client.prepareGet(getTargetUrl());
 
@@ -139,7 +139,7 @@ public void deferredInputStreamTrick() throws IOException, ExecutionException, T
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = RemotelyClosedException.class)
+  @Test(expectedExceptions = RemotelyClosedException.class)
   public void deferredInputStreamTrickWithFailure() throws Throwable {
     try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
       BoundRequestBuilder r = client.prepareGet(getTargetUrl()).addHeader("X-FAIL-TRANSFER", Boolean.TRUE.toString());
@@ -170,8 +170,8 @@ public void deferredInputStreamTrickWithFailure() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = IOException.class)
-  public void testConnectionRefused() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test(expectedExceptions = IOException.class)
+  public void testConnectionRefused() throws IOException, InterruptedException {
     int newPortWithoutAnyoneListening = findFreePort();
     try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
       BoundRequestBuilder r = client.prepareGet("http://localhost:" + newPortWithoutAnyoneListening + "/testConnectionRefused");
@@ -183,7 +183,7 @@ public void testConnectionRefused() throws IOException, ExecutionException, Time
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPipedStreams() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
       PipedOutputStream pout = new PipedOutputStream();
@@ -251,12 +251,12 @@ public void handle(String pathInContext, Request request, HttpServletRequest htt
     private int byteCount = 0;
 
     @Override
-    public void write(int b) throws IOException {
+    public void write(int b) {
       // /dev/null
       byteCount++;
     }
 
-    public int getByteCount() {
+    int getByteCount() {
       return byteCount;
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/handler/resumable/MapResumableProcessor.java b/client/src/test/java/org/asynchttpclient/handler/resumable/MapResumableProcessor.java
index 98363de43..140159617 100644
--- a/client/src/test/java/org/asynchttpclient/handler/resumable/MapResumableProcessor.java
+++ b/client/src/test/java/org/asynchttpclient/handler/resumable/MapResumableProcessor.java
@@ -24,7 +24,7 @@
 public class MapResumableProcessor
         implements ResumableProcessor {
 
-  Map<String, Long> map = new HashMap<>();
+  private Map<String, Long> map = new HashMap<>();
 
   public void put(String key, long transferredBytes) {
     map.put(key, transferredBytes);
diff --git a/client/src/test/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcesserTest.java b/client/src/test/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcesserTest.java
index 75711d0b4..883a2bb97 100644
--- a/client/src/test/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcesserTest.java
+++ b/client/src/test/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcesserTest.java
@@ -23,8 +23,8 @@
  */
 public class PropertiesBasedResumableProcesserTest {
 
-  @Test(groups = "standalone")
-  public void testSaveLoad() throws Exception {
+  @Test
+  public void testSaveLoad() {
     PropertiesBasedResumableProcessor p = new PropertiesBasedResumableProcessor();
     p.put("http://localhost/test.url", 15L);
     p.put("http://localhost/test2.url", 50L);
diff --git a/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java b/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java
index c5f6912e1..8a3c6e43f 100644
--- a/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java
+++ b/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java
@@ -31,7 +31,7 @@
 
 public class EventPipelineTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void asyncPipelineTest() throws Exception {
 
     Consumer<Channel> httpAdditionalPipelineInitializer = channel -> channel.pipeline().addBefore("inflater",
@@ -42,7 +42,7 @@ public void asyncPipelineTest() throws Exception {
       final CountDownLatch l = new CountDownLatch(1);
       p.executeRequest(get(getTargetUrl()), new AsyncCompletionHandlerAdapter() {
         @Override
-        public Response onCompleted(Response response) throws Exception {
+        public Response onCompleted(Response response) {
           try {
             assertEquals(response.getStatusCode(), 200);
             assertEquals(response.getHeader("X-Original-Content-Encoding"), "<original encoding>");
diff --git a/client/src/test/java/org/asynchttpclient/netty/NettyAsyncResponseTest.java b/client/src/test/java/org/asynchttpclient/netty/NettyAsyncResponseTest.java
index e7bf9c6a1..0ce1f9535 100644
--- a/client/src/test/java/org/asynchttpclient/netty/NettyAsyncResponseTest.java
+++ b/client/src/test/java/org/asynchttpclient/netty/NettyAsyncResponseTest.java
@@ -29,7 +29,7 @@
 
 public class NettyAsyncResponseTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void testCookieParseExpires() {
     // e.g. "Tue, 27 Oct 2015 12:54:24 GMT";
     SimpleDateFormat sdf = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
@@ -48,7 +48,7 @@ public void testCookieParseExpires() {
     assertTrue(cookie.maxAge() >= 58 && cookie.maxAge() <= 60);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testCookieParseMaxAge() {
     final String cookieDef = "efmembercheck=true; max-age=60; path=/; domain=.eclipse.org";
 
@@ -61,7 +61,7 @@ public void testCookieParseMaxAge() {
     assertEquals(cookie.maxAge(), 60);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testCookieParseWeirdExpiresValue() {
     final String cookieDef = "efmembercheck=true; expires=60; path=/; domain=.eclipse.org";
     HttpHeaders responseHeaders = new DefaultHttpHeaders().add(SET_COOKIE, cookieDef);
diff --git a/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java b/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
index d97ce5f21..f1c719ef9 100644
--- a/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
+++ b/client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
@@ -47,7 +47,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new SlowHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testRequestTimeout() throws IOException {
     final Semaphore requestThrottle = new Semaphore(1);
 
@@ -58,42 +58,40 @@ public void testRequestTimeout() throws IOException {
       final List<Exception> tooManyConnections = Collections.synchronizedList(new ArrayList<>(2));
 
       for (int i = 0; i < samples; i++) {
-        new Thread(new Runnable() {
-
-          public void run() {
+        new Thread(() -> {
+          try {
+            requestThrottle.acquire();
+            Future<Response> responseFuture = null;
             try {
-              requestThrottle.acquire();
-              Future<Response> responseFuture = null;
-              try {
-                responseFuture = client.prepareGet(getTargetUrl()).setRequestTimeout(SLEEPTIME_MS / 2)
-                        .execute(new AsyncCompletionHandler<Response>() {
-
-                          @Override
-                          public Response onCompleted(Response response) throws Exception {
-                            return response;
-                          }
-
-                          @Override
-                          public void onThrowable(Throwable t) {
-                            logger.error("onThrowable got an error", t);
-                            try {
-                              Thread.sleep(100);
-                            } catch (InterruptedException e) {
-                            }
-                            requestThrottle.release();
+              responseFuture = client.prepareGet(getTargetUrl()).setRequestTimeout(SLEEPTIME_MS / 2)
+                      .execute(new AsyncCompletionHandler<Response>() {
+
+                        @Override
+                        public Response onCompleted(Response response) {
+                          return response;
+                        }
+
+                        @Override
+                        public void onThrowable(Throwable t) {
+                          logger.error("onThrowable got an error", t);
+                          try {
+                            Thread.sleep(100);
+                          } catch (InterruptedException e) {
+                            //
                           }
-                        });
-              } catch (Exception e) {
-                tooManyConnections.add(e);
-              }
-
-              if (responseFuture != null)
-                responseFuture.get();
+                          requestThrottle.release();
+                        }
+                      });
             } catch (Exception e) {
-            } finally {
-              latch.countDown();
+              tooManyConnections.add(e);
             }
 
+            if (responseFuture != null)
+              responseFuture.get();
+          } catch (Exception e) {
+            //
+          } finally {
+            latch.countDown();
           }
         }).start();
       }
@@ -116,18 +114,14 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
             throws IOException, ServletException {
       response.setStatus(HttpServletResponse.SC_OK);
       final AsyncContext asyncContext = request.startAsync();
-      new Thread(new Runnable() {
-        public void run() {
-          try {
-            Thread.sleep(SLEEPTIME_MS);
-            response.getOutputStream().print(MSG);
-            response.getOutputStream().flush();
-            asyncContext.complete();
-          } catch (InterruptedException e) {
-            logger.error(e.getMessage(), e);
-          } catch (IOException e) {
-            logger.error(e.getMessage(), e);
-          }
+      new Thread(() -> {
+        try {
+          Thread.sleep(SLEEPTIME_MS);
+          response.getOutputStream().print(MSG);
+          response.getOutputStream().flush();
+          asyncContext.complete();
+        } catch (InterruptedException | IOException e) {
+          logger.error(e.getMessage(), e);
         }
       }).start();
       baseRequest.setHandled(true);
diff --git a/client/src/test/java/org/asynchttpclient/netty/RetryNonBlockingIssue.java b/client/src/test/java/org/asynchttpclient/netty/RetryNonBlockingIssue.java
index 40892baa7..47c024751 100644
--- a/client/src/test/java/org/asynchttpclient/netty/RetryNonBlockingIssue.java
+++ b/client/src/test/java/org/asynchttpclient/netty/RetryNonBlockingIssue.java
@@ -58,7 +58,7 @@ protected String getTargetUrl() {
     return String.format("http://localhost:%d/", port1);
   }
 
-  private ListenableFuture<Response> testMethodRequest(AsyncHttpClient client, int requests, String action, String id) throws IOException {
+  private ListenableFuture<Response> testMethodRequest(AsyncHttpClient client, int requests, String action, String id) {
     RequestBuilder r = get(getTargetUrl())//
             .addQueryParam(action, "1")//
             .addQueryParam("maxRequests", "" + requests)//
@@ -66,14 +66,7 @@ protected String getTargetUrl() {
     return client.executeRequest(r);
   }
 
-  /**
-   * Tests that a head request can be made
-   *
-   * @throws IOException
-   * @throws ExecutionException
-   * @throws InterruptedException
-   */
-  @Test(groups = "standalone")
+  @Test
   public void testRetryNonBlocking() throws IOException, InterruptedException, ExecutionException {
 
     AsyncHttpClientConfig config = config()//
@@ -93,18 +86,18 @@ public void testRetryNonBlocking() throws IOException, InterruptedException, Exe
       for (ListenableFuture<Response> r : res) {
         Response theres = r.get();
         assertEquals(200, theres.getStatusCode());
-        b.append("==============\r\n");
-        b.append("Response Headers\r\n");
+        b.append("==============\r\n")
+                .append("Response Headers\r\n");
         HttpHeaders heads = theres.getHeaders();
-        b.append(heads + "\r\n");
-        b.append("==============\r\n");
+        b.append(heads).append("\r\n")
+                .append("==============\r\n");
       }
       System.out.println(b.toString());
       System.out.flush();
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testRetryNonBlockingAsyncConnect() throws IOException, InterruptedException, ExecutionException {
 
     AsyncHttpClientConfig config = config()//
@@ -124,11 +117,11 @@ public void testRetryNonBlockingAsyncConnect() throws IOException, InterruptedEx
       for (ListenableFuture<Response> r : res) {
         Response theres = r.get();
         assertEquals(theres.getStatusCode(), 200);
-        b.append("==============\r\n");
-        b.append("Response Headers\r\n");
+        b.append("==============\r\n")
+                .append("Response Headers\r\n");
         HttpHeaders heads = theres.getHeaders();
-        b.append(heads + "\r\n");
-        b.append("==============\r\n");
+        b.append(heads).append("\r\n")
+                .append("==============\r\n");
       }
       System.out.println(b.toString());
       System.out.flush();
@@ -141,7 +134,7 @@ public void testRetryNonBlockingAsyncConnect() throws IOException, InterruptedEx
     private Map<String, Integer> requests = new ConcurrentHashMap<>();
 
     private synchronized int increment(String id) {
-      int val = 0;
+      int val;
       if (requests.containsKey(id)) {
         Integer i = requests.get(id);
         val = i + 1;
@@ -156,7 +149,7 @@ private synchronized int increment(String id) {
 
     public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
       String maxRequests = req.getParameter("maxRequests");
-      int max = 0;
+      int max;
       try {
         max = Integer.parseInt(maxRequests);
       } catch (NumberFormatException e) {
diff --git a/client/src/test/java/org/asynchttpclient/netty/channel/NonBlockingSemaphoreTest.java b/client/src/test/java/org/asynchttpclient/netty/channel/NonBlockingSemaphoreTest.java
index dc9aa87dd..a387ba408 100644
--- a/client/src/test/java/org/asynchttpclient/netty/channel/NonBlockingSemaphoreTest.java
+++ b/client/src/test/java/org/asynchttpclient/netty/channel/NonBlockingSemaphoreTest.java
@@ -55,19 +55,19 @@ public void negative() {
     private final Semaphore real;
     private final NonBlockingSemaphore nonBlocking;
 
-    public Mirror(int permits) {
+    Mirror(int permits) {
       real = new Semaphore(permits);
       nonBlocking = new NonBlockingSemaphore(permits);
     }
 
-    public boolean tryAcquire() {
+    boolean tryAcquire() {
       boolean a = real.tryAcquire();
       boolean b = nonBlocking.tryAcquire();
       assertEquals(a, b);
       return a;
     }
 
-    public void release() {
+    void release() {
       real.release();
       nonBlocking.release();
     }
diff --git a/client/src/test/java/org/asynchttpclient/ntlm/NtlmTest.java b/client/src/test/java/org/asynchttpclient/ntlm/NtlmTest.java
index 64ebce7b2..d987299c2 100644
--- a/client/src/test/java/org/asynchttpclient/ntlm/NtlmTest.java
+++ b/client/src/test/java/org/asynchttpclient/ntlm/NtlmTest.java
@@ -65,12 +65,12 @@ private void ntlmAuthTest(Realm.Builder realmBuilder) throws IOException, Interr
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void lazyNTLMAuthTest() throws IOException, InterruptedException, ExecutionException {
     ntlmAuthTest(realmBuilderBase());
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void preemptiveNTLMAuthTest() throws IOException, InterruptedException, ExecutionException {
     ntlmAuthTest(realmBuilderBase().setUsePreemptiveAuth(true));
   }
@@ -139,7 +139,7 @@ public void testGenerateType3MsgThrowsExceptionWhenUnicodeSupportNotIndicated()
     fail("An NtlmEngineException must have occurred as unicode support is not indicated");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testGenerateType2Msg() {
     Type2Message type2Message = new Type2Message("TlRMTVNTUAACAAAAAAAAACgAAAABggAAU3J2Tm9uY2UAAAAAAAAAAA==");
     Assert.assertEquals(type2Message.getMessageLength(), 40, "This is a sample challenge that should return 40");
diff --git a/client/src/test/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorTest.java b/client/src/test/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorTest.java
index d783ee541..977bae709 100644
--- a/client/src/test/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorTest.java
+++ b/client/src/test/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorTest.java
@@ -39,10 +39,10 @@
  * See <a href= "https://oauth.googlecode.com/svn/code/javascript/example/signature.html" >Signature Tester</a> for an online oauth signature checker.
  */
 public class OAuthSignatureCalculatorTest {
-  public static final String TOKEN_KEY = "nnch734d00sl2jdk";
-  public static final String TOKEN_SECRET = "pfkkdhi9sl3r4s00";
-  public static final String NONCE = "kllo9940pd9333jh";
-  final static long TIMESTAMP = 1191242096;
+  private static final String TOKEN_KEY = "nnch734d00sl2jdk";
+  private static final String TOKEN_SECRET = "pfkkdhi9sl3r4s00";
+  private static final String NONCE = "kllo9940pd9333jh";
+  private static final long TIMESTAMP = 1191242096;
   private static final String CONSUMER_KEY = "dpf43f3p2l4k3l03";
   private static final String CONSUMER_SECRET = "kd94hf93k423kf44";
 
@@ -312,7 +312,7 @@ public void testSignatureGenerationWithAsteriskInPath() throws InvalidKeyExcepti
   }
 
   @Test
-  public void testPercentEncodeKeyValues() throws NoSuchAlgorithmException {
+  public void testPercentEncodeKeyValues() {
     // see https://github.com/AsyncHttpClient/async-http-client/issues/1415
     String keyValue = "\u3b05\u000c\u375b";
 
diff --git a/client/src/test/java/org/asynchttpclient/oauth/StaticOAuthSignatureCalculator.java b/client/src/test/java/org/asynchttpclient/oauth/StaticOAuthSignatureCalculator.java
index d377b1d2c..0083d97ac 100644
--- a/client/src/test/java/org/asynchttpclient/oauth/StaticOAuthSignatureCalculator.java
+++ b/client/src/test/java/org/asynchttpclient/oauth/StaticOAuthSignatureCalculator.java
@@ -27,7 +27,7 @@
   private final String nonce;
   private final long timestamp;
 
-  public StaticOAuthSignatureCalculator(ConsumerKey consumerKey, RequestToken requestToken, String nonce, long timestamp) {
+  StaticOAuthSignatureCalculator(ConsumerKey consumerKey, RequestToken requestToken, String nonce, long timestamp) {
     this.consumerKey = consumerKey;
     this.requestToken = requestToken;
     this.nonce = nonce;
diff --git a/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java b/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
index e425dfc62..e81bfaf87 100644
--- a/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
+++ b/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
@@ -61,7 +61,7 @@ public void tearDownGlobal() throws Exception {
     server2.stop();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testRequestProxy() throws Exception {
 
     try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setUseInsecureTrustManager(true))) {
@@ -71,7 +71,7 @@ public void testRequestProxy() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testConfigProxy() throws Exception {
     AsyncHttpClientConfig config = config()//
             .setFollowRedirect(true)//
@@ -84,7 +84,7 @@ public void testConfigProxy() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPooledConnectionsWithProxy() throws Exception {
 
     try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setUseInsecureTrustManager(true).setKeepAlive(true))) {
diff --git a/client/src/test/java/org/asynchttpclient/proxy/NTLMProxyTest.java b/client/src/test/java/org/asynchttpclient/proxy/NTLMProxyTest.java
index a97ca615a..1b63ea14b 100644
--- a/client/src/test/java/org/asynchttpclient/proxy/NTLMProxyTest.java
+++ b/client/src/test/java/org/asynchttpclient/proxy/NTLMProxyTest.java
@@ -23,7 +23,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.net.UnknownHostException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -37,7 +36,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new NTLMProxyHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void ntlmProxyTest() throws IOException, InterruptedException, ExecutionException {
 
     try (AsyncHttpClient client = asyncHttpClient()) {
@@ -48,7 +47,7 @@ public void ntlmProxyTest() throws IOException, InterruptedException, ExecutionE
     }
   }
 
-  private ProxyServer ntlmProxy() throws UnknownHostException {
+  private ProxyServer ntlmProxy() {
     Realm realm = ntlmAuthRealm("Zaphod", "Beeblebrox")//
             .setNtlmDomain("Ursa-Minor")//
             .setNtlmHost("LightCity")//
diff --git a/client/src/test/java/org/asynchttpclient/proxy/ProxyTest.java b/client/src/test/java/org/asynchttpclient/proxy/ProxyTest.java
index 2e04be8bb..0dd33ae20 100644
--- a/client/src/test/java/org/asynchttpclient/proxy/ProxyTest.java
+++ b/client/src/test/java/org/asynchttpclient/proxy/ProxyTest.java
@@ -32,6 +32,7 @@
 import java.io.IOException;
 import java.net.*;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 import java.util.concurrent.ExecutionException;
@@ -53,7 +54,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new ProxyHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testRequestLevelProxy() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       String target = "http://localhost:1234/";
@@ -92,7 +93,7 @@ public void testRequestLevelProxy() throws IOException, ExecutionException, Time
   // }
   // }
 
-  @Test(groups = "standalone")
+  @Test
   public void testGlobalProxy() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient(config().setProxyServer(proxyServer("localhost", port1)))) {
       String target = "http://localhost:1234/";
@@ -104,7 +105,7 @@ public void testGlobalProxy() throws IOException, ExecutionException, TimeoutExc
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testBothProxies() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient(config().setProxyServer(proxyServer("localhost", port1 - 1)))) {
       String target = "http://localhost:1234/";
@@ -116,7 +117,7 @@ public void testBothProxies() throws IOException, ExecutionException, TimeoutExc
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testNonProxyHost() {
 
     // // should avoid, it's in non-proxy hosts
@@ -135,8 +136,8 @@ public void testNonProxyHost() {
     assertTrue(proxyServer.isIgnoredForHost(req.getUri().getHost()));
   }
 
-  @Test(groups = "standalone")
-  public void testNonProxyHostsRequestOverridesConfig() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test
+  public void testNonProxyHostsRequestOverridesConfig() {
 
     ProxyServer configProxy = proxyServer("localhost", port1 - 1).build();
     ProxyServer requestProxy = proxyServer("localhost", port1).setNonProxyHost("localhost").build();
@@ -151,7 +152,7 @@ public void testNonProxyHostsRequestOverridesConfig() throws IOException, Execut
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testRequestNonProxyHost() throws IOException, ExecutionException, TimeoutException, InterruptedException {
 
     ProxyServer proxy = proxyServer("localhost", port1 - 1).setNonProxyHost("localhost").build();
@@ -165,7 +166,7 @@ public void testRequestNonProxyHost() throws IOException, ExecutionException, Ti
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void runSequentiallyBecauseNotThreadSafe() throws Exception {
     testProxyProperties();
     testIgnoreProxyPropertiesByDefault();
@@ -174,7 +175,7 @@ public void runSequentiallyBecauseNotThreadSafe() throws Exception {
     testUseProxySelector();
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void testProxyProperties() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     // FIXME not threadsafe!
     Properties originalProps = new Properties();
@@ -195,7 +196,7 @@ public void testProxyProperties() throws IOException, ExecutionException, Timeou
       String nonProxifiedtarget = "http://localhost:1234/";
       f = client.prepareGet(nonProxifiedtarget).execute();
       try {
-        resp = f.get(3, TimeUnit.SECONDS);
+        f.get(3, TimeUnit.SECONDS);
         fail("should not be able to connect");
       } catch (ExecutionException e) {
         // ok, no proxy used
@@ -205,8 +206,8 @@ public void testProxyProperties() throws IOException, ExecutionException, Timeou
     }
   }
 
-  // @Test(groups = "standalone")
-  public void testIgnoreProxyPropertiesByDefault() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test(enabled = false)
+  public void testIgnoreProxyPropertiesByDefault() throws IOException, TimeoutException, InterruptedException {
     // FIXME not threadsafe!
     Properties originalProps = new Properties();
     originalProps.putAll(System.getProperties());
@@ -229,7 +230,7 @@ public void testIgnoreProxyPropertiesByDefault() throws IOException, ExecutionEx
     }
   }
 
-  @Test(groups = "standalone", enabled = false)
+  @Test(enabled = false)
   public void testProxyActivationProperty() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     // FIXME not threadsafe!
     Properties originalProps = new Properties();
@@ -251,7 +252,7 @@ public void testProxyActivationProperty() throws IOException, ExecutionException
       String nonProxifiedTarget = "http://localhost:1234/";
       f = client.prepareGet(nonProxifiedTarget).execute();
       try {
-        resp = f.get(3, TimeUnit.SECONDS);
+        f.get(3, TimeUnit.SECONDS);
         fail("should not be able to connect");
       } catch (ExecutionException e) {
         // ok, no proxy used
@@ -261,8 +262,8 @@ public void testProxyActivationProperty() throws IOException, ExecutionException
     }
   }
 
-  // @Test(groups = "standalone")
-  public void testWildcardNonProxyHosts() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test(enabled = false)
+  public void testWildcardNonProxyHosts() throws IOException, TimeoutException, InterruptedException {
     // FIXME not threadsafe!
     Properties originalProps = new Properties();
     originalProps.putAll(System.getProperties());
@@ -285,7 +286,7 @@ public void testWildcardNonProxyHosts() throws IOException, ExecutionException,
     }
   }
 
-  // @Test(groups = "standalone")
+  @Test(enabled = false)
   public void testUseProxySelector() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     ProxySelector originalProxySelector = ProxySelector.getDefault();
     ProxySelector.setDefault(new ProxySelector() {
@@ -293,7 +294,7 @@ public void testUseProxySelector() throws IOException, ExecutionException, Timeo
         if (uri.getHost().equals("127.0.0.1")) {
           return Arrays.asList(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", port1)));
         } else {
-          return Arrays.asList(Proxy.NO_PROXY);
+          return Collections.singletonList(Proxy.NO_PROXY);
         }
       }
 
@@ -323,7 +324,7 @@ public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void runSocksProxy() throws Exception {
     new Thread(() -> {
       try {
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/FailingReactiveStreamsTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/FailingReactiveStreamsTest.java
index f7f4cad1b..860678b35 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/FailingReactiveStreamsTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/FailingReactiveStreamsTest.java
@@ -13,8 +13,6 @@
 package org.asynchttpclient.reactivestreams;
 
 import io.netty.channel.Channel;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
 import org.asynchttpclient.AbstractBasicTest;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.HttpResponseBodyPart;
@@ -36,7 +34,7 @@
 
 public class FailingReactiveStreamsTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
+  @Test
   public void testRetryingOnFailingStream() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient()) {
       final CountDownLatch streamStarted = new CountDownLatch(1); // allows us to wait until subscriber has received the first body chunk
@@ -70,12 +68,7 @@ public State onStream(Publisher<HttpResponseBodyPart> publisher) {
       StreamedResponsePublisher publisher = publisherRef.get();
       final CountDownLatch channelClosed = new CountDownLatch(1);
 
-      getChannel(publisher).close().addListener(new ChannelFutureListener() {
-        @Override
-        public void operationComplete(ChannelFuture future) throws Exception {
-          channelClosed.countDown();
-        }
-      });
+      getChannel(publisher).close().addListener(future-> channelClosed.countDown());
       streamOnHold.countDown(); // the subscriber is set free to process new incoming body chunks.
       channelClosed.await(); // the channel is confirmed to be closed
 
@@ -98,7 +91,7 @@ private Channel getChannel(StreamedResponsePublisher publisher) throws Exception
     private final CountDownLatch streamStarted;
     private final CountDownLatch streamOnHold;
 
-    public BlockedStreamSubscriber(CountDownLatch streamStarted, CountDownLatch streamOnHold) {
+    BlockedStreamSubscriber(CountDownLatch streamStarted, CountDownLatch streamOnHold) {
       this.streamStarted = streamStarted;
       this.streamOnHold = streamOnHold;
     }
@@ -118,7 +111,7 @@ public void onNext(HttpResponseBodyPart t) {
   private static class ReplayedSimpleAsyncHandler extends SimpleStreamedAsyncHandler {
     private final CountDownLatch replaying;
 
-    public ReplayedSimpleAsyncHandler(CountDownLatch replaying, SimpleSubscriber<HttpResponseBodyPart> subscriber) {
+    ReplayedSimpleAsyncHandler(CountDownLatch replaying, SimpleSubscriber<HttpResponseBodyPart> subscriber) {
       super(subscriber);
       this.replaying = replaying;
     }
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/HttpStaticFileServerHandler.java b/client/src/test/java/org/asynchttpclient/reactivestreams/HttpStaticFileServerHandler.java
index a91750d97..4e930b191 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/HttpStaticFileServerHandler.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/HttpStaticFileServerHandler.java
@@ -88,11 +88,11 @@
  */
 public class HttpStaticFileServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {
 
-  public static final String HTTP_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";
-  public static final String HTTP_DATE_GMT_TIMEZONE = "GMT";
-  public static final int HTTP_CACHE_SECONDS = 60;
+  private static final String HTTP_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";
+  private static final String HTTP_DATE_GMT_TIMEZONE = "GMT";
+  private static final int HTTP_CACHE_SECONDS = 60;
   private static final Pattern INSECURE_URI = Pattern.compile(".*[<>&\"].*");
-  private static final Pattern ALLOWED_FILE_NAME = Pattern.compile("[A-Za-z0-9][-_A-Za-z0-9\\.]*");
+  private static final Pattern ALLOWED_FILE_NAME = Pattern.compile("[A-Za-z0-9][-_A-Za-z0-9.]*");
 
   private static String sanitizeUri(String uri) {
     // Decode the path.
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
index 81d6ee9f2..9a782bfcf 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
@@ -55,11 +55,11 @@ public void setUpBeforeTest() throws Exception {
   }
 
   @AfterClass(alwaysRun = true)
-  public void tearDown() throws Exception {
+  public void tearDown() {
     HttpStaticFileServer.shutdown();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void streamedResponseLargeFileTest() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient()) {
       String largeFileName = "http://localhost:" + serverPort + "/" + largeFile.getName();
@@ -69,7 +69,7 @@ public void streamedResponseLargeFileTest() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void streamedResponseSmallFileTest() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient()) {
       String smallFileName = "http://localhost:" + serverPort + "/" + smallFile.getName();
@@ -83,11 +83,11 @@ public void streamedResponseSmallFileTest() throws Throwable {
   static protected class SimpleStreamedAsyncHandler implements StreamedAsyncHandler<SimpleStreamedAsyncHandler> {
     private final SimpleSubscriber<HttpResponseBodyPart> subscriber;
 
-    public SimpleStreamedAsyncHandler() {
+    SimpleStreamedAsyncHandler() {
       this(new SimpleSubscriber<>());
     }
 
-    public SimpleStreamedAsyncHandler(SimpleSubscriber<HttpResponseBodyPart> subscriber) {
+    SimpleStreamedAsyncHandler(SimpleSubscriber<HttpResponseBodyPart> subscriber) {
       this.subscriber = subscriber;
     }
 
@@ -110,7 +110,7 @@ public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
     }
 
     @Override
-    public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+    public State onStatusReceived(HttpResponseStatus responseStatus) {
       return State.CONTINUE;
     }
 
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
index df83aa587..d7205543f 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
@@ -33,7 +33,6 @@
 
 import javax.servlet.AsyncContext;
 import javax.servlet.ReadListener;
-import javax.servlet.ServletException;
 import javax.servlet.ServletInputStream;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServlet;
@@ -45,6 +44,7 @@
 import java.util.*;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_MD5;
@@ -60,23 +60,11 @@
   private Tomcat tomcat;
   private int port1;
 
-  public static Publisher<ByteBuf> createPublisher(final byte[] bytes, final int chunkSize) {
+  private static Publisher<ByteBuf> createPublisher(final byte[] bytes, final int chunkSize) {
     return Flowable.fromIterable(new ByteBufIterable(bytes, chunkSize));
   }
 
-  public static void main(String[] args) throws Exception {
-    ReactiveStreamsTest test = new ReactiveStreamsTest();
-    test.setUpGlobal();
-    try {
-      for (int i = 0; i < 1000; i++) {
-        test.testConnectionDoesNotGetClosed();
-      }
-    } finally {
-      test.tearDownGlobal();
-    }
-  }
-
-  static byte[] getBytes(List<HttpResponseBodyPart> bodyParts) throws IOException {
+  private static byte[] getBytes(List<HttpResponseBodyPart> bodyParts) throws IOException {
     ByteArrayOutputStream bytes = new ByteArrayOutputStream();
     for (HttpResponseBodyPart part : bodyParts) {
       bytes.write(part.getBodyPartBytes());
@@ -100,7 +88,7 @@ public void setUpGlobal() throws Exception {
 
       @Override
       public void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)
-              throws ServletException, IOException {
+              throws IOException {
         LOGGER.debug("Echo received request {} on path {}", httpRequest,
                 httpRequest.getServletContext().getContextPath());
 
@@ -127,6 +115,7 @@ public void service(HttpServletRequest httpRequest, HttpServletResponse httpResp
             try {
               Thread.sleep(sleepTime == -1 ? 40 : sleepTime * 1000);
             } catch (InterruptedException ex) {
+              //
             }
           }
 
@@ -188,7 +177,7 @@ public void onError(Throwable t) {
 
           @Override
           public void onDataAvailable() throws IOException {
-            int len = -1;
+            int len;
             while (input.isReady() && (len = input.read(buffer)) != -1) {
               baos.write(buffer, 0, len);
             }
@@ -216,7 +205,7 @@ public void onAllDataRead() throws IOException {
   }
 
   @AfterClass(alwaysRun = true)
-  public void tearDownGlobal() throws InterruptedException, Exception {
+  public void tearDownGlobal() throws Exception {
     tomcat.stop();
   }
 
@@ -224,7 +213,7 @@ private String getTargetUrl() {
     return String.format("http://localhost:%d/foo/test", port1);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testStreamingPutImage() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
       Response response = client.preparePut(getTargetUrl()).setBody(createPublisher(LARGE_IMAGE_BYTES, 2342))
@@ -234,7 +223,7 @@ public void testStreamingPutImage() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testConnectionDoesNotGetClosed() throws Exception {
     // test that we can stream the same request multiple times
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
@@ -247,7 +236,6 @@ public void testConnectionDoesNotGetClosed() throws Exception {
       assertEquals(response.getStatusCode(), 200, "HTTP response was invalid on first request.");
 
       byte[] responseBody = response.getResponseBodyAsBytes();
-      responseBody = response.getResponseBodyAsBytes();
       assertEquals(Integer.valueOf(response.getHeader("X-" + CONTENT_LENGTH)).intValue(),
               LARGE_IMAGE_BYTES.length, "Server side payload length invalid");
       assertEquals(responseBody.length, LARGE_IMAGE_BYTES.length, "Client side payload length invalid");
@@ -276,7 +264,7 @@ public void testConnectionDoesNotGetClosed() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = ExecutionException.class)
+  @Test(expectedExceptions = ExecutionException.class)
   public void testFailingStream() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
       Publisher<ByteBuf> failingPublisher = Flowable.error(new FailedStream());
@@ -284,7 +272,7 @@ public void testFailingStream() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void streamedResponseTest() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient()) {
 
@@ -309,7 +297,7 @@ public void streamedResponseTest() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void cancelStreamedResponseTest() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient()) {
 
@@ -333,7 +321,7 @@ public void cancelStreamedResponseTest() throws Throwable {
   static class SimpleStreamedAsyncHandler implements StreamedAsyncHandler<Void> {
     private final Subscriber<HttpResponseBodyPart> subscriber;
 
-    public SimpleStreamedAsyncHandler(Subscriber<HttpResponseBodyPart> subscriber) {
+    SimpleStreamedAsyncHandler(Subscriber<HttpResponseBodyPart> subscriber) {
       this.subscriber = subscriber;
     }
 
@@ -349,22 +337,22 @@ public void onThrowable(Throwable t) {
     }
 
     @Override
-    public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
+    public State onBodyPartReceived(HttpResponseBodyPart bodyPart) {
       throw new AssertionError("Should not have received body part");
     }
 
     @Override
-    public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+    public State onStatusReceived(HttpResponseStatus responseStatus) {
       return State.CONTINUE;
     }
 
     @Override
-    public State onHeadersReceived(HttpHeaders headers) throws Exception {
+    public State onHeadersReceived(HttpHeaders headers) {
       return State.CONTINUE;
     }
 
     @Override
-    public Void onCompleted() throws Exception {
+    public Void onCompleted() {
       return null;
     }
   }
@@ -401,7 +389,7 @@ public void onComplete() {
       latch.countDown();
     }
 
-    public List<T> getElements() throws Throwable {
+    List<T> getElements() throws Throwable {
       latch.await();
       if (error != null) {
         throw error;
@@ -414,7 +402,7 @@ public void onComplete() {
   static class CancellingStreamedAsyncProvider implements StreamedAsyncHandler<CancellingStreamedAsyncProvider> {
     private final int cancelAfter;
 
-    public CancellingStreamedAsyncProvider(int cancelAfter) {
+    CancellingStreamedAsyncProvider(int cancelAfter) {
       this.cancelAfter = cancelAfter;
     }
 
@@ -435,17 +423,17 @@ public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
     }
 
     @Override
-    public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+    public State onStatusReceived(HttpResponseStatus responseStatus) {
       return State.CONTINUE;
     }
 
     @Override
-    public State onHeadersReceived(HttpHeaders headers) throws Exception {
+    public State onHeadersReceived(HttpHeaders headers) {
       return State.CONTINUE;
     }
 
     @Override
-    public CancellingStreamedAsyncProvider onCompleted() throws Exception {
+    public CancellingStreamedAsyncProvider onCompleted() {
       return this;
     }
   }
@@ -456,9 +444,9 @@ public CancellingStreamedAsyncProvider onCompleted() throws Exception {
   static class CancellingSubscriber<T> implements Subscriber<T> {
     private final int cancelAfter;
     private volatile Subscription subscription;
-    private volatile int count;
+    private AtomicInteger count = new AtomicInteger(0);
 
-    public CancellingSubscriber(int cancelAfter) {
+    CancellingSubscriber(int cancelAfter) {
       this.cancelAfter = cancelAfter;
     }
 
@@ -474,8 +462,7 @@ public void onSubscribe(Subscription subscription) {
 
     @Override
     public void onNext(T t) {
-      count++;
-      if (count == cancelAfter) {
+      if (count.incrementAndGet() == cancelAfter) {
         subscription.cancel();
       } else {
         subscription.request(1);
@@ -495,7 +482,7 @@ public void onComplete() {
     private final byte[] payload;
     private final int chunkSize;
 
-    public ByteBufIterable(byte[] payload, int chunkSize) {
+    ByteBufIterable(byte[] payload, int chunkSize) {
       this.payload = payload;
       this.chunkSize = chunkSize;
     }
diff --git a/client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java b/client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java
index 7b62bd880..0635cddc0 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java
@@ -29,7 +29,7 @@
 
   private static final String MY_MESSAGE = "my message";
 
-  @Test(groups = "standalone")
+  @Test
   public void negativeContentTypeTest() throws Exception {
 
     AsyncHttpClientConfig config = config()//
diff --git a/client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java b/client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
index 1f30d2ccd..4b1a444bf 100755
--- a/client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
@@ -20,7 +20,6 @@
 import org.testng.annotations.Test;
 
 import java.io.BufferedInputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 
@@ -35,27 +34,27 @@
 
   // So we can just test the returned data is the image,
   // and doesn't contain the chunked delimeters.
-  @Test(groups = "standalone")
+  @Test
   public void testBufferLargerThanFileWithStreamBodyGenerator() throws Throwable {
     doTestWithInputStreamBodyGenerator(new BufferedInputStream(Files.newInputStream(LARGE_IMAGE_FILE.toPath()), 400000));
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testBufferSmallThanFileWithStreamBodyGenerator() throws Throwable {
     doTestWithInputStreamBodyGenerator(new BufferedInputStream(Files.newInputStream(LARGE_IMAGE_FILE.toPath())));
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testDirectFileWithStreamBodyGenerator() throws Throwable {
     doTestWithInputStreamBodyGenerator(Files.newInputStream(LARGE_IMAGE_FILE.toPath()));
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testDirectFileWithFeedableBodyGenerator() throws Throwable {
     doTestWithFeedableBodyGenerator(Files.newInputStream(LARGE_IMAGE_FILE.toPath()));
   }
 
-  public void doTestWithInputStreamBodyGenerator(InputStream is) throws Throwable {
+  private void doTestWithInputStreamBodyGenerator(InputStream is) throws Throwable {
     try {
       try (AsyncHttpClient c = asyncHttpClient(httpClientBuilder())) {
         ListenableFuture<Response> responseFuture = c.executeRequest(post(getTargetUrl()).setBody(new InputStreamBodyGenerator(is)));
@@ -66,7 +65,7 @@ public void doTestWithInputStreamBodyGenerator(InputStream is) throws Throwable
     }
   }
 
-  public void doTestWithFeedableBodyGenerator(InputStream is) throws Throwable {
+  private void doTestWithFeedableBodyGenerator(InputStream is) throws Throwable {
     try {
       try (AsyncHttpClient c = asyncHttpClient(httpClientBuilder())) {
         final FeedableBodyGenerator feedableBodyGenerator = new UnboundedQueueFeedableBodyGenerator();
@@ -83,7 +82,7 @@ public void doTestWithFeedableBodyGenerator(InputStream is) throws Throwable {
   private void feed(FeedableBodyGenerator feedableBodyGenerator, InputStream is) throws Exception {
     try (InputStream inputStream = is) {
       byte[] buffer = new byte[512];
-      for (int i = 0; (i = inputStream.read(buffer)) > -1; ) {
+      for (int i; (i = inputStream.read(buffer)) > -1; ) {
         byte[] chunk = new byte[i];
         System.arraycopy(buffer, 0, chunk, 0, i);
         feedableBodyGenerator.feed(Unpooled.wrappedBuffer(chunk), false);
@@ -103,15 +102,13 @@ private void feed(FeedableBodyGenerator feedableBodyGenerator, InputStream is) t
             .setFollowRedirect(true);
   }
 
-  private void waitForAndAssertResponse(ListenableFuture<Response> responseFuture) throws InterruptedException, java.util.concurrent.ExecutionException, IOException {
+  private void waitForAndAssertResponse(ListenableFuture<Response> responseFuture) throws InterruptedException, java.util.concurrent.ExecutionException {
     Response response = responseFuture.get();
     if (500 == response.getStatusCode()) {
-      StringBuilder sb = new StringBuilder();
-      sb.append("==============\n");
-      sb.append("500 response from call\n");
-      sb.append("Headers:" + response.getHeaders() + "\n");
-      sb.append("==============\n");
-      logger.debug(sb.toString());
+      logger.debug("==============\n" +
+              "500 response from call\n" +
+              "Headers:" + response.getHeaders() + "\n" +
+              "==============\n");
       assertEquals(response.getStatusCode(), 500, "Should have 500 status code");
       assertTrue(response.getHeader("X-Exception").contains("invalid.chunk.length"), "Should have failed due to chunking");
       fail("HARD Failing the test due to provided InputStreamBodyGenerator, chunking incorrectly:" + response.getHeader("X-Exception"));
diff --git a/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java b/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
index e70a115bf..9c2973c8a 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
@@ -25,7 +25,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
@@ -46,7 +45,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new NoBodyResponseHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testEmptyBody() throws IOException {
     try (AsyncHttpClient ahc = asyncHttpClient()) {
       final AtomicBoolean err = new AtomicBoolean(false);
@@ -72,7 +71,7 @@ public State onBodyPartReceived(HttpResponseBodyPart e) throws Exception {
           return State.CONTINUE;
         }
 
-        public State onStatusReceived(HttpResponseStatus e) throws Exception {
+        public State onStatusReceived(HttpResponseStatus e) {
           status.set(true);
           return AsyncHandler.State.CONTINUE;
         }
@@ -84,7 +83,7 @@ public State onHeadersReceived(HttpHeaders e) throws Exception {
           return State.CONTINUE;
         }
 
-        public Object onCompleted() throws Exception {
+        public Object onCompleted() {
           latch.countDown();
           return null;
         }
@@ -101,7 +100,7 @@ public Object onCompleted() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPutEmptyBody() throws Exception {
     try (AsyncHttpClient ahc = asyncHttpClient()) {
       Response response = ahc.preparePut(getTargetUrl()).setBody("String").execute().get();
@@ -109,7 +108,7 @@ public void testPutEmptyBody() throws Exception {
       assertNotNull(response);
       assertEquals(response.getStatusCode(), 204);
       assertEquals(response.getResponseBody(), "");
-      assertTrue(response.getResponseBodyAsStream() instanceof InputStream);
+      assertNotNull(response.getResponseBodyAsStream());
       assertEquals(response.getResponseBodyAsStream().read(), -1);
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java b/client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java
index 6f03361dd..06e33c95a 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java
@@ -20,7 +20,6 @@
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.ServletInputStream;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -40,12 +39,12 @@
   public AbstractHandler configureHandler() throws Exception {
     return new AbstractHandler() {
 
-      public void handle(String target, Request baseRequest, HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
+      public void handle(String target, Request baseRequest, HttpServletRequest req, HttpServletResponse resp) throws IOException {
 
         ServletInputStream in = req.getInputStream();
         byte[] b = new byte[8192];
 
-        int count = -1;
+        int count;
         int total = 0;
         while ((count = in.read(b)) != -1) {
           b = new byte[8192];
@@ -61,7 +60,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H
     };
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPutImageFile() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
       Response response = client.preparePut(getTargetUrl()).addBodyPart(new FilePart("test", LARGE_IMAGE_FILE, "application/octet-stream", UTF_8)).execute().get();
@@ -69,7 +68,7 @@ public void testPutImageFile() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPutLargeTextFile() throws Exception {
     File file = createTempFile(1024 * 1024);
 
diff --git a/client/src/test/java/org/asynchttpclient/request/body/InputStreamTest.java b/client/src/test/java/org/asynchttpclient/request/body/InputStreamTest.java
index fb548107d..d7c21b618 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/InputStreamTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/InputStreamTest.java
@@ -32,7 +32,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeoutException;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -46,15 +45,15 @@ public AbstractHandler configureHandler() throws Exception {
     return new InputStreamHandler();
   }
 
-  @Test(groups = "standalone")
-  public void testInvalidInputStream() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  @Test
+  public void testInvalidInputStream() throws IOException, ExecutionException, InterruptedException {
 
     try (AsyncHttpClient c = asyncHttpClient()) {
       HttpHeaders h = new DefaultHttpHeaders().add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);
 
       InputStream is = new InputStream() {
 
-        public int readAllowed;
+        int readAllowed;
 
         @Override
         public int available() {
@@ -62,7 +61,7 @@ public int available() {
         }
 
         @Override
-        public int read() throws IOException {
+        public int read() {
           int fakeCount = readAllowed++;
           if (fakeCount == 0) {
             return (int) 'a';
diff --git a/client/src/test/java/org/asynchttpclient/request/body/PutFileTest.java b/client/src/test/java/org/asynchttpclient/request/body/PutFileTest.java
index d3810c44b..88e371bb5 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/PutFileTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/PutFileTest.java
@@ -19,7 +19,6 @@
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.File;
@@ -41,12 +40,12 @@ private void put(int fileSize) throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPutLargeFile() throws Exception {
     put(1024 * 1024);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPutSmallFile() throws Exception {
     put(1024);
   }
@@ -55,10 +54,10 @@ public void testPutSmallFile() throws Exception {
   public AbstractHandler configureHandler() throws Exception {
     return new AbstractHandler() {
 
-      public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
+      public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException {
 
         InputStream is = baseRequest.getInputStream();
-        int read = 0;
+        int read;
         do {
           // drain upload
           read = is.read();
diff --git a/client/src/test/java/org/asynchttpclient/request/body/TransferListenerTest.java b/client/src/test/java/org/asynchttpclient/request/body/TransferListenerTest.java
index dc80f49c8..b4df376ca 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/TransferListenerTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/TransferListenerTest.java
@@ -45,7 +45,7 @@ public AbstractHandler configureHandler() throws Exception {
     return new BasicHandler();
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicGetTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final AtomicReference<Throwable> throwable = new AtomicReference<>();
@@ -93,7 +93,7 @@ public void onThrowable(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicPutFileTest() throws Exception {
     final AtomicReference<Throwable> throwable = new AtomicReference<>();
     final AtomicReference<HttpHeaders> hSent = new AtomicReference<>();
@@ -147,7 +147,7 @@ public void onThrowable(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicPutFileBodyGeneratorTest() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient()) {
       final AtomicReference<Throwable> throwable = new AtomicReference<>();
diff --git a/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java b/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
index bd0f952a3..f3e59fd55 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
@@ -24,11 +24,9 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.net.URISyntaxException;
 import java.nio.file.Files;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
-import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -41,8 +39,8 @@
  */
 public class ZeroCopyFileTest extends AbstractBasicTest {
 
-  @Test(groups = "standalone")
-  public void zeroCopyPostTest() throws IOException, ExecutionException, TimeoutException, InterruptedException, URISyntaxException {
+  @Test
+  public void zeroCopyPostTest() throws IOException, ExecutionException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       final AtomicBoolean headerSent = new AtomicBoolean(false);
       final AtomicBoolean operationCompleted = new AtomicBoolean(false);
@@ -60,7 +58,7 @@ public State onContentWritten() {
         }
 
         @Override
-        public Response onCompleted(Response response) throws Exception {
+        public Response onCompleted(Response response) {
           return response;
         }
       }).get();
@@ -72,8 +70,8 @@ public Response onCompleted(Response response) throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
-  public void zeroCopyPutTest() throws IOException, ExecutionException, TimeoutException, InterruptedException, URISyntaxException {
+  @Test
+  public void zeroCopyPutTest() throws IOException, ExecutionException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       Future<Response> f = client.preparePut("http://localhost:" + port1 + "/").setBody(SIMPLE_TEXT_FILE).execute();
       Response resp = f.get();
@@ -88,8 +86,8 @@ public AbstractHandler configureHandler() throws Exception {
     return new ZeroCopyHandler();
   }
 
-  @Test(groups = "standalone")
-  public void zeroCopyFileTest() throws IOException, ExecutionException, TimeoutException, InterruptedException, URISyntaxException {
+  @Test
+  public void zeroCopyFileTest() throws IOException, ExecutionException, InterruptedException {
     File tmp = new File(System.getProperty("java.io.tmpdir") + File.separator + "zeroCopy.txt");
     tmp.deleteOnExit();
     try (AsyncHttpClient client = asyncHttpClient()) {
@@ -103,15 +101,15 @@ public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
             return State.CONTINUE;
           }
 
-          public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+          public State onStatusReceived(HttpResponseStatus responseStatus) {
             return State.CONTINUE;
           }
 
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             return State.CONTINUE;
           }
 
-          public Response onCompleted() throws Exception {
+          public Response onCompleted() {
             return null;
           }
         }).get();
@@ -121,8 +119,8 @@ public Response onCompleted() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
-  public void zeroCopyFileWithBodyManipulationTest() throws IOException, ExecutionException, TimeoutException, InterruptedException, URISyntaxException {
+  @Test
+  public void zeroCopyFileWithBodyManipulationTest() throws IOException, ExecutionException, InterruptedException {
     File tmp = new File(System.getProperty("java.io.tmpdir") + File.separator + "zeroCopy.txt");
     tmp.deleteOnExit();
     try (AsyncHttpClient client = asyncHttpClient()) {
@@ -141,15 +139,15 @@ public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
             return State.CONTINUE;
           }
 
-          public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+          public State onStatusReceived(HttpResponseStatus responseStatus) {
             return State.CONTINUE;
           }
 
-          public State onHeadersReceived(HttpHeaders headers) throws Exception {
+          public State onHeadersReceived(HttpHeaders headers) {
             return State.CONTINUE;
           }
 
-          public Response onCompleted() throws Exception {
+          public Response onCompleted() {
             return null;
           }
         }).get();
diff --git a/client/src/test/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGeneratorTest.java b/client/src/test/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGeneratorTest.java
index fe3701234..f3ac9b1f3 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGeneratorTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGeneratorTest.java
@@ -31,7 +31,7 @@
   private final Random random = new Random();
   private final int chunkSize = 1024 * 8;
 
-  @Test(groups = "standalone")
+  @Test
   public void testSingleRead() throws IOException {
     final int srcArraySize = chunkSize - 1;
     final byte[] srcArray = new byte[srcArraySize];
@@ -54,7 +54,7 @@ public void testSingleRead() throws IOException {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testMultipleReads() throws IOException {
     final int srcArraySize = (3 * chunkSize) + 42;
     final byte[] srcArray = new byte[srcArraySize];
diff --git a/client/src/test/java/org/asynchttpclient/request/body/generator/FeedableBodyGeneratorTest.java b/client/src/test/java/org/asynchttpclient/request/body/generator/FeedableBodyGeneratorTest.java
index a65ae0518..97bba7c09 100755
--- a/client/src/test/java/org/asynchttpclient/request/body/generator/FeedableBodyGeneratorTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/generator/FeedableBodyGeneratorTest.java
@@ -31,20 +31,20 @@
   private TestFeedListener listener;
 
   @BeforeMethod
-  public void setUp() throws Exception {
+  public void setUp() {
     feedableBodyGenerator = new UnboundedQueueFeedableBodyGenerator();
     listener = new TestFeedListener();
     feedableBodyGenerator.setListener(listener);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void feedNotifiesListener() throws Exception {
     feedableBodyGenerator.feed(Unpooled.EMPTY_BUFFER, false);
     feedableBodyGenerator.feed(Unpooled.EMPTY_BUFFER, true);
     assertEquals(listener.getCalls(), 2);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void readingBytesReturnsFedContentWithoutChunkBoundaries() throws Exception {
     byte[] content = "Test123".getBytes(StandardCharsets.US_ASCII);
 
@@ -62,7 +62,7 @@ public void readingBytesReturnsFedContentWithoutChunkBoundaries() throws Excepti
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void returnZeroToSuspendStreamWhenNothingIsInQueue() throws Exception {
     byte[] content = "Test123".getBytes(StandardCharsets.US_ASCII);
 
@@ -106,7 +106,7 @@ public void onContentAdded() {
     public void onError(Throwable t) {
     }
 
-    public int getCalls() {
+    int getCalls() {
       return calls;
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBasicAuthTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBasicAuthTest.java
index 0703668a8..6234a7375 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBasicAuthTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBasicAuthTest.java
@@ -60,7 +60,7 @@ private void expectBrokenPipe(Function<BoundRequestBuilder, BoundRequestBuilder>
     Throwable cause = null;
     try (AsyncHttpClient client = asyncHttpClient()) {
       try {
-        for (int i = 0; i < 20 && cause == null; i++) {
+        for (int i = 0; i < 20; i++) {
           f.apply(client.preparePut(getTargetUrl())//
                   .addBodyPart(new FilePart("test", file, APPLICATION_OCTET_STREAM.toString(), UTF_8)))//
                   .execute().get();
@@ -73,12 +73,12 @@ private void expectBrokenPipe(Function<BoundRequestBuilder, BoundRequestBuilder>
     assertTrue(cause instanceof IOException, "Expected an IOException");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void noRealmCausesServerToCloseSocket() throws Exception {
     expectBrokenPipe(rb -> rb);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void unauthorizedNonPreemptiveRealmCausesServerToCloseSocket() throws Exception {
     expectBrokenPipe(rb -> rb.setRealm(basicAuthRealm(USER, ADMIN)));
   }
@@ -97,12 +97,12 @@ private void expectSuccess(Function<BoundRequestBuilder, BoundRequestBuilder> f)
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void authorizedPreemptiveRealmWorks() throws Exception {
     expectSuccess(rb -> rb.setRealm(basicAuthRealm(USER, ADMIN).setUsePreemptiveAuth(true)));
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void authorizedNonPreemptiveRealmWorksWithExpectContinue() throws Exception {
     expectSuccess(rb -> rb.setRealm(basicAuthRealm(USER, ADMIN)).setHeader(EXPECT, CONTINUE));
   }
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
index 542562a0d..0b6c5fe6f 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
@@ -52,8 +52,6 @@
     try (MultipartBody dummyBody = buildMultipart()) {
       // separator is random
       MAX_MULTIPART_CONTENT_LENGTH_ESTIMATE = dummyBody.getContentLength() + 100;
-    } catch (IOException e) {
-      throw new ExceptionInInitializerError(e);
     }
   }
 
@@ -94,11 +92,11 @@ public boolean isOpen() {
       }
 
       @Override
-      public void close() throws IOException {
+      public void close() {
       }
 
       @Override
-      public int write(ByteBuffer src) throws IOException {
+      public int write(ByteBuffer src) {
         int written = src.remaining();
         transferred.set(transferred.get() + written);
         src.position(src.limit());
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java
index 8deadc589..77584ecdf 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java
@@ -32,7 +32,6 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -54,8 +53,6 @@
  * @author dominict
  */
 public class MultipartUploadTest extends AbstractBasicTest {
-  public static byte GZIPTEXT[] = new byte[]{31, -117, 8, 8, 11, 43, 79, 75, 0, 3, 104, 101, 108, 108, 111, 46, 116,
-          120, 116, 0, -53, 72, -51, -55, -55, -25, 2, 0, 32, 48, 58, 54, 6, 0, 0, 0};
 
   @BeforeClass
   public void setUp() throws Exception {
@@ -68,12 +65,7 @@ public void setUp() throws Exception {
     port1 = connector.getLocalPort();
   }
 
-  /**
-   * Tests that the streaming of a file works.
-   *
-   * @throws IOException
-   */
-  @Test(groups = "standalone")
+  @Test
   public void testSendingSmallFilesAndByteArray() throws Exception {
     String expectedContents = "filecontent: hello";
     String expectedContents2 = "gzipcontent: hello";
@@ -101,21 +93,15 @@ public void testSendingSmallFilesAndByteArray() throws Exception {
     gzipped.add(true);
     gzipped.add(false);
 
-    boolean tmpFileCreated = false;
     File tmpFile = File.createTempFile("textbytearray", ".txt");
     try (OutputStream os = Files.newOutputStream(tmpFile.toPath())) {
       IOUtils.write(expectedContents.getBytes(UTF_8), os);
-      tmpFileCreated = true;
 
       testFiles.add(tmpFile);
       expected.add(expectedContents);
       gzipped.add(false);
     }
 
-    if (!tmpFileCreated) {
-      fail("Unable to test ByteArrayMultiPart, as unable to write to filesystem the tmp test content");
-    }
-
     try (AsyncHttpClient c = asyncHttpClient(config())) {
       Request r = post("http://localhost" + ":" + port1 + "/upload")
               .addBodyPart(new FilePart("file1", testResource1File, "text/plain", UTF_8))
@@ -146,28 +132,23 @@ private void sendEmptyFile0(boolean disableZeroCopy) throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void sendEmptyFile() throws Exception {
     sendEmptyFile0(true);
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void sendEmptyFileZeroCopy() throws Exception {
     sendEmptyFile0(false);
   }
 
   /**
    * Test that the files were sent, based on the response from the servlet
-   *
-   * @param expectedContents
-   * @param sourceFiles
-   * @param r
-   * @param deflate
    */
   private void testSentFile(List<String> expectedContents, List<File> sourceFiles, Response r,
                             List<Boolean> deflate) {
     String content = r.getResponseBody();
-    assertNotNull("===>" + content);
+    assertNotNull(content);
     logger.debug(content);
 
     String[] contentArray = content.split("\\|\\|");
@@ -192,10 +173,10 @@ private void testSentFile(List<String> expectedContents, List<File> sourceFiles,
       try {
 
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        byte[] sourceBytes = null;
+        byte[] sourceBytes;
         try (InputStream instream = Files.newInputStream(sourceFile.toPath())) {
           byte[] buf = new byte[8092];
-          int len = 0;
+          int len;
           while ((len = instream.read(buf)) > 0) {
             baos.write(buf, 0, len);
           }
@@ -218,7 +199,7 @@ private void testSentFile(List<String> expectedContents, List<File> sourceFiles,
         try (InputStream instream = Files.newInputStream(tmp.toPath())) {
           ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
           byte[] buf = new byte[8092];
-          int len = 0;
+          int len;
           while ((len = instream.read(buf)) > 0) {
             baos2.write(buf, 0, len);
           }
@@ -235,7 +216,7 @@ private void testSentFile(List<String> expectedContents, List<File> sourceFiles,
             GZIPInputStream deflater = new GZIPInputStream(instream);
             try {
               byte[] buf3 = new byte[8092];
-              int len3 = 0;
+              int len3;
               while ((len3 = deflater.read(buf3)) > 0) {
                 baos3.write(buf3, 0, len3);
               }
@@ -272,24 +253,23 @@ private void testSentFile(List<String> expectedContents, List<File> sourceFiles,
     private int filesProcessed = 0;
     private int stringsProcessed = 0;
 
-    public MockMultipartUploadServlet() {
+    MockMultipartUploadServlet() {
 
     }
 
-    public synchronized void resetFilesProcessed() {
+    synchronized void resetFilesProcessed() {
       filesProcessed = 0;
     }
 
     private synchronized int incrementFilesProcessed() {
       return ++filesProcessed;
-
     }
 
-    public int getFilesProcessed() {
+    int getFilesProcessed() {
       return filesProcessed;
     }
 
-    public synchronized void resetStringsProcessed() {
+    synchronized void resetStringsProcessed() {
       stringsProcessed = 0;
     }
 
@@ -304,14 +284,14 @@ public int getStringsProcessed() {
 
     @Override
     public void service(HttpServletRequest request, HttpServletResponse response)
-            throws ServletException, IOException {
+            throws IOException {
       // Check that we have a file upload request
       boolean isMultipart = ServletFileUpload.isMultipartContent(request);
       if (isMultipart) {
         List<String> files = new ArrayList<>();
         ServletFileUpload upload = new ServletFileUpload();
         // Parse the request
-        FileItemIterator iter = null;
+        FileItemIterator iter;
         try {
           iter = upload.getItemIterator(request);
           while (iter.hasNext()) {
@@ -342,7 +322,7 @@ public void service(HttpServletRequest request, HttpServletResponse response)
             }
           }
         } catch (FileUploadException e) {
-
+          //
         }
         try (Writer w = response.getWriter()) {
           w.write(Integer.toString(getFilesProcessed()));
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
index 566b8f10e..b66c7975f 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
@@ -206,16 +206,15 @@ public void transferToShouldWriteStringPart() throws IOException, URISyntaxExcep
     String boundary = "uwyqQolZaSmme019O2kFKvAeHoC14Npp";
 
     List<MultipartPart<? extends Part>> multipartParts = MultipartUtils.generateMultipartParts(parts, boundary.getBytes());
-    MultipartBody multipartBody = new MultipartBody(multipartParts, "multipart/form-data; boundary=" + boundary, boundary.getBytes());
+    try (MultipartBody multipartBody = new MultipartBody(multipartParts, "multipart/form-data; boundary=" + boundary, boundary.getBytes())) {
 
-    ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer(8 * 1024);
-
-    try {
+      ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer(8 * 1024);
       multipartBody.transferTo(byteBuf);
-      byteBuf.toString(StandardCharsets.UTF_8);
-    } finally {
-      multipartBody.close();
-      byteBuf.release();
+      try {
+        byteBuf.toString(StandardCharsets.UTF_8);
+      } finally {
+        byteBuf.release();
+      }
     }
   }
 
@@ -224,27 +223,27 @@ public void transferToShouldWriteStringPart() throws IOException, URISyntaxExcep
    */
   private class TestFileLikePart extends FileLikePart {
 
-    public TestFileLikePart(String name) {
+    TestFileLikePart(String name) {
       this(name, null, null, null, null);
     }
 
-    public TestFileLikePart(String name, String contentType) {
+    TestFileLikePart(String name, String contentType) {
       this(name, contentType, null);
     }
 
-    public TestFileLikePart(String name, String contentType, Charset charset) {
+    TestFileLikePart(String name, String contentType, Charset charset) {
       this(name, contentType, charset, null);
     }
 
-    public TestFileLikePart(String name, String contentType, Charset charset, String contentId) {
+    TestFileLikePart(String name, String contentType, Charset charset, String contentId) {
       this(name, contentType, charset, contentId, null);
     }
 
-    public TestFileLikePart(String name, String contentType, Charset charset, String contentId, String transfertEncoding) {
+    TestFileLikePart(String name, String contentType, Charset charset, String contentId, String transfertEncoding) {
       this(name, contentType, charset, contentId, transfertEncoding, null);
     }
 
-    public TestFileLikePart(String name, String contentType, Charset charset, String contentId, String transfertEncoding, String fileName) {
+    TestFileLikePart(String name, String contentType, Charset charset, String contentId, String transfertEncoding, String fileName) {
       super(name, contentType, charset, fileName, contentId, transfertEncoding);
     }
   }
@@ -254,7 +253,7 @@ public TestFileLikePart(String name, String contentType, Charset charset, String
    */
   private class TestMultipartPart extends FileLikeMultipartPart<TestFileLikePart> {
 
-    public TestMultipartPart(TestFileLikePart part, byte[] boundary) {
+    TestMultipartPart(TestFileLikePart part, byte[] boundary) {
       super(part, boundary);
     }
 
@@ -264,12 +263,12 @@ protected long getContentLength() {
     }
 
     @Override
-    protected long transferContentTo(ByteBuf target) throws IOException {
+    protected long transferContentTo(ByteBuf target) {
       return 0;
     }
 
     @Override
-    protected long transferContentTo(WritableByteChannel target) throws IOException {
+    protected long transferContentTo(WritableByteChannel target) {
       return 0;
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/test/EchoHandler.java b/client/src/test/java/org/asynchttpclient/test/EchoHandler.java
index f9a66bea8..ee19f2ee0 100644
--- a/client/src/test/java/org/asynchttpclient/test/EchoHandler.java
+++ b/client/src/test/java/org/asynchttpclient/test/EchoHandler.java
@@ -61,6 +61,7 @@ public void handle(String pathInContext, Request request, HttpServletRequest htt
         try {
           Thread.sleep(sleepTime == -1 ? 40 : sleepTime * 1000);
         } catch (InterruptedException ex) {
+          //
         }
       }
 
diff --git a/client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java b/client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java
index d08020203..252de4191 100644
--- a/client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java
+++ b/client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java
@@ -33,21 +33,21 @@
   public static final String STATUS_RECEIVED_EVENT = "StatusReceived";
   public static final String HEADERS_RECEIVED_EVENT = "HeadersReceived";
   public static final String HEADERS_WRITTEN_EVENT = "HeadersWritten";
-  public static final String CONTENT_WRITTEN_EVENT = "ContentWritten";
-  public static final String CONNECTION_OPEN_EVENT = "ConnectionOpen";
-  public static final String HOSTNAME_RESOLUTION_EVENT = "HostnameResolution";
-  public static final String HOSTNAME_RESOLUTION_SUCCESS_EVENT = "HostnameResolutionSuccess";
-  public static final String HOSTNAME_RESOLUTION_FAILURE_EVENT = "HostnameResolutionFailure";
-  public static final String CONNECTION_SUCCESS_EVENT = "ConnectionSuccess";
-  public static final String CONNECTION_FAILURE_EVENT = "ConnectionFailure";
-  public static final String TLS_HANDSHAKE_EVENT = "TlsHandshake";
-  public static final String TLS_HANDSHAKE_SUCCESS_EVENT = "TlsHandshakeSuccess";
-  public static final String TLS_HANDSHAKE_FAILURE_EVENT = "TlsHandshakeFailure";
+  private static final String CONTENT_WRITTEN_EVENT = "ContentWritten";
+  private static final String CONNECTION_OPEN_EVENT = "ConnectionOpen";
+  private static final String HOSTNAME_RESOLUTION_EVENT = "HostnameResolution";
+  private static final String HOSTNAME_RESOLUTION_SUCCESS_EVENT = "HostnameResolutionSuccess";
+  private static final String HOSTNAME_RESOLUTION_FAILURE_EVENT = "HostnameResolutionFailure";
+  private static final String CONNECTION_SUCCESS_EVENT = "ConnectionSuccess";
+  private static final String CONNECTION_FAILURE_EVENT = "ConnectionFailure";
+  private static final String TLS_HANDSHAKE_EVENT = "TlsHandshake";
+  private static final String TLS_HANDSHAKE_SUCCESS_EVENT = "TlsHandshakeSuccess";
+  private static final String TLS_HANDSHAKE_FAILURE_EVENT = "TlsHandshakeFailure";
   public static final String CONNECTION_POOL_EVENT = "ConnectionPool";
   public static final String CONNECTION_POOLED_EVENT = "ConnectionPooled";
   public static final String CONNECTION_OFFER_EVENT = "ConnectionOffer";
   public static final String REQUEST_SEND_EVENT = "RequestSend";
-  public static final String RETRY_EVENT = "Retry";
+  private static final String RETRY_EVENT = "Retry";
 
   public Queue<String> firedEvents = new ConcurrentLinkedQueue<>();
   private CountDownLatch completionLatch = new CountDownLatch(1);
diff --git a/client/src/test/java/org/asynchttpclient/test/TestUtils.java b/client/src/test/java/org/asynchttpclient/test/TestUtils.java
index 3df1eef6b..58f358969 100644
--- a/client/src/test/java/org/asynchttpclient/test/TestUtils.java
+++ b/client/src/test/java/org/asynchttpclient/test/TestUtils.java
@@ -62,7 +62,7 @@
   public static final String TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET = "text/html;charset=UTF-8";
   public static final String TEXT_HTML_CONTENT_TYPE_WITH_ISO_8859_1_CHARSET = "text/html;charset=ISO-8859-1";
   public static final File TMP_DIR = new File(System.getProperty("java.io.tmpdir"), "ahc-tests-" + UUID.randomUUID().toString().substring(0, 8));
-  public static final byte[] PATTERN_BYTES = "FooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQix".getBytes(Charset.forName("UTF-16"));
+  private static final byte[] PATTERN_BYTES = "FooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQix".getBytes(Charset.forName("UTF-16"));
   public static final File LARGE_IMAGE_FILE;
   public static final byte[] LARGE_IMAGE_BYTES;
   public static final String LARGE_IMAGE_BYTES_MD5;
@@ -214,11 +214,11 @@ private static void addAuthHandler(Server server, String auth, LoginAuthenticato
     return tmf.getTrustManagers();
   }
 
-  public static SslEngineFactory createSslEngineFactory() throws SSLException {
+  public static SslEngineFactory createSslEngineFactory() {
     return createSslEngineFactory(new AtomicBoolean(true));
   }
 
-  public static SslEngineFactory createSslEngineFactory(AtomicBoolean trust) throws SSLException {
+  public static SslEngineFactory createSslEngineFactory(AtomicBoolean trust) {
 
     try {
       KeyManager[] keyManagers = createKeyManagers();
@@ -245,6 +245,7 @@ public static File getClasspathFile(String file) throws FileNotFoundException {
     try {
       cl = Thread.currentThread().getContextClassLoader();
     } catch (Throwable ex) {
+      //
     }
     if (cl == null) {
       cl = TestUtils.class.getClassLoader();
@@ -262,10 +263,6 @@ public static void assertContentTypesEquals(String actual, String expected) {
     assertEquals(actual.replace("; ", "").toLowerCase(Locale.ENGLISH), expected.replace("; ", "").toLowerCase(Locale.ENGLISH), "Unexpected content-type");
   }
 
-  public static String getLocalhostIp() {
-    return "127.0.0.1";
-  }
-
   public static void writeResponseBody(HttpServletResponse response, String body) {
     response.setContentLength(body.length());
     try {
@@ -294,7 +291,7 @@ public static String md5(byte[] bytes, int offset, int len) {
     private final X509TrustManager tm;
     private final AtomicBoolean trust;
 
-    public DummyTrustManager(final AtomicBoolean trust, final X509TrustManager tm) {
+    DummyTrustManager(final AtomicBoolean trust, final X509TrustManager tm) {
       this.trust = trust;
       this.tm = tm;
     }
@@ -344,7 +341,7 @@ public State onBodyPartReceived(final HttpResponseBodyPart content) throws Excep
     }
 
     @Override
-    public State onStatusReceived(final HttpResponseStatus responseStatus) throws Exception {
+    public State onStatusReceived(final HttpResponseStatus responseStatus) {
       return State.CONTINUE;
     }
 
diff --git a/client/src/test/java/org/asynchttpclient/testserver/HttpServer.java b/client/src/test/java/org/asynchttpclient/testserver/HttpServer.java
index b97947d18..ae387469a 100644
--- a/client/src/test/java/org/asynchttpclient/testserver/HttpServer.java
+++ b/client/src/test/java/org/asynchttpclient/testserver/HttpServer.java
@@ -131,11 +131,11 @@ public void close() throws IOException {
 
     private final boolean closeAfterResponse;
 
-    public AutoFlushHandler() {
+    AutoFlushHandler() {
       this(false);
     }
 
-    public AutoFlushHandler(boolean closeAfterResponse) {
+    AutoFlushHandler(boolean closeAfterResponse) {
       this.closeAfterResponse = closeAfterResponse;
     }
 
@@ -155,11 +155,11 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
 
     private final HttpServletResponseConsumer c;
 
-    public ConsumerHandler(HttpServletResponseConsumer c) {
+    ConsumerHandler(HttpServletResponseConsumer c) {
       this(c, false);
     }
 
-    public ConsumerHandler(HttpServletResponseConsumer c, boolean closeAfterResponse) {
+    ConsumerHandler(HttpServletResponseConsumer c, boolean closeAfterResponse) {
       super(closeAfterResponse);
       this.c = c;
     }
diff --git a/client/src/test/java/org/asynchttpclient/testserver/HttpTest.java b/client/src/test/java/org/asynchttpclient/testserver/HttpTest.java
index 87f783938..20c8b3f47 100644
--- a/client/src/test/java/org/asynchttpclient/testserver/HttpTest.java
+++ b/client/src/test/java/org/asynchttpclient/testserver/HttpTest.java
@@ -28,21 +28,15 @@
   protected static final String STATUS_RECEIVED_EVENT = "StatusReceived";
   protected static final String HEADERS_RECEIVED_EVENT = "HeadersReceived";
   protected static final String HEADERS_WRITTEN_EVENT = "HeadersWritten";
-  protected static final String CONTENT_WRITTEN_EVENT = "ContentWritten";
   protected static final String CONNECTION_OPEN_EVENT = "ConnectionOpen";
   protected static final String HOSTNAME_RESOLUTION_EVENT = "HostnameResolution";
   protected static final String HOSTNAME_RESOLUTION_SUCCESS_EVENT = "HostnameResolutionSuccess";
-  protected static final String HOSTNAME_RESOLUTION_FAILURE_EVENT = "HostnameResolutionFailure";
   protected static final String CONNECTION_SUCCESS_EVENT = "ConnectionSuccess";
-  protected static final String CONNECTION_FAILURE_EVENT = "ConnectionFailure";
   protected static final String TLS_HANDSHAKE_EVENT = "TlsHandshake";
   protected static final String TLS_HANDSHAKE_SUCCESS_EVENT = "TlsHandshakeSuccess";
-  protected static final String TLS_HANDSHAKE_FAILURE_EVENT = "TlsHandshakeFailure";
   protected static final String CONNECTION_POOL_EVENT = "ConnectionPool";
-  protected static final String CONNECTION_POOLED_EVENT = "ConnectionPooled";
   protected static final String CONNECTION_OFFER_EVENT = "ConnectionOffer";
   protected static final String REQUEST_SEND_EVENT = "RequestSend";
-  protected static final String RETRY_EVENT = "Retry";
   protected final Logger logger = LoggerFactory.getLogger(getClass());
 
   protected ClientTestBody withClient() {
@@ -53,7 +47,7 @@ protected ClientTestBody withClient(DefaultAsyncHttpClientConfig.Builder builder
     return withClient(builder.build());
   }
 
-  protected ClientTestBody withClient(AsyncHttpClientConfig config) {
+  private ClientTestBody withClient(AsyncHttpClientConfig config) {
     return new ClientTestBody(config);
   }
 
diff --git a/client/src/test/java/org/asynchttpclient/testserver/SocksProxy.java b/client/src/test/java/org/asynchttpclient/testserver/SocksProxy.java
index 63ebba805..1d3fab069 100644
--- a/client/src/test/java/org/asynchttpclient/testserver/SocksProxy.java
+++ b/client/src/test/java/org/asynchttpclient/testserver/SocksProxy.java
@@ -18,7 +18,7 @@
 
 public class SocksProxy {
 
-  static ArrayList<SocksClient> clients = new ArrayList<SocksClient>();
+  private static ArrayList<SocksClient> clients = new ArrayList<>();
 
   public SocksProxy(int runningTime) throws IOException {
     ServerSocketChannel socks = ServerSocketChannel.open();
@@ -52,9 +52,9 @@ public SocksProxy(int runningTime) throws IOException {
             SocksClient cl = clients.get(i);
             try {
               if (k.channel() == cl.client) // from client (e.g. socks client)
-                cl.newClientData(select, k);
+                cl.newClientData(select);
               else if (k.channel() == cl.remote) {  // from server client is connected to (e.g. website)
-                cl.newRemoteData(select, k);
+                cl.newRemoteData();
               }
             } catch (IOException e) { // error occurred - remove client
               cl.client.close();
@@ -86,23 +86,22 @@ else if (k.channel() == cl.remote) {  // from server client is connected to (e.g
   }
 
   // utility function
-  public SocksClient addClient(SocketChannel s) {
+  private void addClient(SocketChannel s) {
     SocksClient cl;
     try {
       cl = new SocksClient(s);
     } catch (IOException e) {
       e.printStackTrace();
-      return null;
+      return;
     }
     clients.add(cl);
-    return cl;
   }
 
   // socks client class - one per client connection
   class SocksClient {
     SocketChannel client, remote;
     boolean connected;
-    long lastData = 0;
+    long lastData;
 
     SocksClient(SocketChannel c) throws IOException {
       client = c;
@@ -110,7 +109,7 @@ public SocksClient addClient(SocketChannel s) {
       lastData = System.currentTimeMillis();
     }
 
-    public void newRemoteData(Selector selector, SelectionKey sk) throws IOException {
+    void newRemoteData() throws IOException {
       ByteBuffer buf = ByteBuffer.allocate(1024);
       if (remote.read(buf) == -1)
         throw new IOException("disconnected");
@@ -119,7 +118,7 @@ public void newRemoteData(Selector selector, SelectionKey sk) throws IOException
       client.write(buf);
     }
 
-    public void newClientData(Selector selector, SelectionKey sk) throws IOException {
+    void newClientData(Selector selector) throws IOException {
       if (!connected) {
         ByteBuffer inbuf = ByteBuffer.allocate(512);
         if (client.read(inbuf) < 1)
@@ -146,7 +145,7 @@ public void newClientData(Selector selector, SelectionKey sk) throws IOException
 
         InetAddress remoteAddr = InetAddress.getByAddress(ip);
 
-        while ((inbuf.get()) != 0) ; // username
+        while ((inbuf.get()) != 0); // username
 
         // hostname provided, not IP
         if (ip[0] == 0 && ip[1] == 0 && ip[2] == 0 && ip[3] != 0) { // host provided
diff --git a/client/src/test/java/org/asynchttpclient/uri/UriParserTest.java b/client/src/test/java/org/asynchttpclient/uri/UriParserTest.java
index f20930e18..5314542ac 100644
--- a/client/src/test/java/org/asynchttpclient/uri/UriParserTest.java
+++ b/client/src/test/java/org/asynchttpclient/uri/UriParserTest.java
@@ -15,7 +15,6 @@
 
 import org.testng.annotations.Test;
 
-import java.net.MalformedURLException;
 import java.net.URI;
 
 import static org.testng.Assert.assertEquals;
@@ -31,7 +30,7 @@ private static void assertUriEquals(UriParser parser, URI uri) {
     assertEquals(parser.query, uri.getQuery());
   }
 
-  private static void validateAgainstAbsoluteURI(String url) throws MalformedURLException {
+  private static void validateAgainstAbsoluteURI(String url) {
     UriParser parser = new UriParser();
     parser.parse(null, url);
     assertUriEquals(parser, URI.create(url));
@@ -44,12 +43,12 @@ private static void validateAgainstRelativeURI(Uri uriContext, String urlContext
   }
 
   @Test
-  public void testUrlWithPathAndQuery() throws MalformedURLException {
+  public void testUrlWithPathAndQuery() {
     validateAgainstAbsoluteURI("http://example.com:8080/test?q=1");
   }
 
   @Test
-  public void testFragmentTryingToTrickAuthorityAsBasicAuthCredentials() throws MalformedURLException {
+  public void testFragmentTryingToTrickAuthorityAsBasicAuthCredentials() {
     validateAgainstAbsoluteURI("http://1.2.3.4:81#@5.6.7.8:82/aaa/b?q=xxx");
   }
 
diff --git a/client/src/test/java/org/asynchttpclient/uri/UriTest.java b/client/src/test/java/org/asynchttpclient/uri/UriTest.java
index 77307fb5f..c84acae3e 100644
--- a/client/src/test/java/org/asynchttpclient/uri/UriTest.java
+++ b/client/src/test/java/org/asynchttpclient/uri/UriTest.java
@@ -14,7 +14,6 @@
 
 import org.testng.annotations.Test;
 
-import java.net.MalformedURLException;
 import java.net.URI;
 
 import static org.testng.Assert.*;
@@ -22,105 +21,106 @@
 public class UriTest {
 
   private static void assertUriEquals(Uri uri, URI javaUri) {
-    assertEquals(uri.getScheme(), uri.getScheme());
-    assertEquals(uri.getUserInfo(), uri.getUserInfo());
-    assertEquals(uri.getHost(), uri.getHost());
-    assertEquals(uri.getPort(), uri.getPort());
-    assertEquals(uri.getPath(), uri.getPath());
-    assertEquals(uri.getQuery(), uri.getQuery());
+    assertEquals(uri.getScheme(), javaUri.getScheme());
+    assertEquals(uri.getUserInfo(), javaUri.getUserInfo());
+    assertEquals(uri.getHost(), javaUri.getHost());
+    assertEquals(uri.getPort(), javaUri.getPort());
+    assertEquals(uri.getPath(), javaUri.getPath());
+    assertEquals(uri.getQuery(), javaUri.getQuery());
   }
 
-  private static void validateAgainstAbsoluteURI(String url) throws MalformedURLException {
+  private static void validateAgainstAbsoluteURI(String url) {
     assertUriEquals(Uri.create(url), URI.create(url));
   }
 
-  private static void validateAgainstRelativeURI(String context, String url) throws MalformedURLException {
+  private static void validateAgainstRelativeURI(String context, String url) {
     assertUriEquals(Uri.create(Uri.create(context), url), URI.create(context).resolve(URI.create(url)));
   }
 
   @Test
-  public void testSimpleParsing() throws MalformedURLException {
+  public void testSimpleParsing() {
     validateAgainstAbsoluteURI("https://graph.facebook.com/750198471659552/accounts/test-users?method=get&access_token=750198471659552lleveCvbUu_zqBa9tkT3tcgaPh4");
   }
 
   @Test
-  public void testRootRelativeURIWithRootContext() throws MalformedURLException {
+  public void testRootRelativeURIWithRootContext() {
     validateAgainstRelativeURI("https://graph.facebook.com", "/750198471659552/accounts/test-users?method=get&access_token=750198471659552lleveCvbUu_zqBa9tkT3tcgaPh4");
   }
 
   @Test
-  public void testRootRelativeURIWithNonRootContext() throws MalformedURLException {
+  public void testRootRelativeURIWithNonRootContext() {
     validateAgainstRelativeURI("https://graph.facebook.com/foo/bar", "/750198471659552/accounts/test-users?method=get&access_token=750198471659552lleveCvbUu_zqBa9tkT3tcgaPh4");
   }
 
-  @Test
-  public void testNonRootRelativeURIWithNonRootContext() throws MalformedURLException {
+  @Test(enabled = false)
+  // FIXME weird: java.net.URI#getPath return "750198471659552/accounts/test-users" without a "/"?!
+  public void testNonRootRelativeURIWithNonRootContext() {
     validateAgainstRelativeURI("https://graph.facebook.com/foo/bar", "750198471659552/accounts/test-users?method=get&access_token=750198471659552lleveCvbUu_zqBa9tkT3tcgaPh4");
   }
 
   @Test
-  public void testNonRootRelativeURIWithRootContext() throws MalformedURLException {
+  public void testNonRootRelativeURIWithRootContext() {
     validateAgainstRelativeURI("https://graph.facebook.com", "750198471659552/accounts/test-users?method=get&access_token=750198471659552lleveCvbUu_zqBa9tkT3tcgaPh4");
   }
 
   @Test
-  public void testAbsoluteURIWithContext() throws MalformedURLException {
+  public void testAbsoluteURIWithContext() {
     validateAgainstRelativeURI("https://hello.com/foo/bar",
             "https://graph.facebook.com/750198471659552/accounts/test-users?method=get&access_token=750198471659552lleveCvbUu_zqBa9tkT3tcgaPh4");
   }
 
   @Test
-  public void testRelativeUriWithDots() throws MalformedURLException {
+  public void testRelativeUriWithDots() {
     validateAgainstRelativeURI("https://hello.com/level1/level2/", "../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithDotsAboveRoot() throws MalformedURLException {
+  public void testRelativeUriWithDotsAboveRoot() {
     validateAgainstRelativeURI("https://hello.com/level1", "../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithAbsoluteDots() throws MalformedURLException {
+  public void testRelativeUriWithAbsoluteDots() {
     validateAgainstRelativeURI("https://hello.com/level1/", "/../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithConsecutiveDots() throws MalformedURLException {
+  public void testRelativeUriWithConsecutiveDots() {
     validateAgainstRelativeURI("https://hello.com/level1/level2/", "../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithConsecutiveDotsAboveRoot() throws MalformedURLException {
+  public void testRelativeUriWithConsecutiveDotsAboveRoot() {
     validateAgainstRelativeURI("https://hello.com/level1/level2", "../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithAbsoluteConsecutiveDots() throws MalformedURLException {
+  public void testRelativeUriWithAbsoluteConsecutiveDots() {
     validateAgainstRelativeURI("https://hello.com/level1/level2/", "/../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithConsecutiveDotsFromRoot() throws MalformedURLException {
+  public void testRelativeUriWithConsecutiveDotsFromRoot() {
     validateAgainstRelativeURI("https://hello.com/", "../../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithConsecutiveDotsFromRootResource() throws MalformedURLException {
+  public void testRelativeUriWithConsecutiveDotsFromRootResource() {
     validateAgainstRelativeURI("https://hello.com/level1", "../../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithConsecutiveDotsFromSubrootResource() throws MalformedURLException {
+  public void testRelativeUriWithConsecutiveDotsFromSubrootResource() {
     validateAgainstRelativeURI("https://hello.com/level1/level2", "../../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithConsecutiveDotsFromLevel3Resource() throws MalformedURLException {
+  public void testRelativeUriWithConsecutiveDotsFromLevel3Resource() {
     validateAgainstRelativeURI("https://hello.com/level1/level2/level3", "../../../other/content/img.png");
   }
 
   @Test
-  public void testRelativeUriWithNoScheme() throws MalformedURLException {
+  public void testRelativeUriWithNoScheme() {
     validateAgainstRelativeURI("https://hello.com/level1", "//world.org/content/img.png");
   }
 
diff --git a/client/src/test/java/org/asynchttpclient/util/TestUTF8UrlCodec.java b/client/src/test/java/org/asynchttpclient/util/TestUTF8UrlCodec.java
index 1c35f26c0..996d582fd 100644
--- a/client/src/test/java/org/asynchttpclient/util/TestUTF8UrlCodec.java
+++ b/client/src/test/java/org/asynchttpclient/util/TestUTF8UrlCodec.java
@@ -20,14 +20,14 @@
 import static org.testng.Assert.assertEquals;
 
 public class TestUTF8UrlCodec {
-  @Test(groups = "standalone")
+  @Test
   public void testBasics() {
     assertEquals(Utf8UrlEncoder.encodeQueryElement("foobar"), "foobar");
     assertEquals(Utf8UrlEncoder.encodeQueryElement("a&b"), "a%26b");
     assertEquals(Utf8UrlEncoder.encodeQueryElement("a+b"), "a%2Bb");
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void testPercentageEncoding() {
     assertEquals(Utf8UrlEncoder.percentEncodeQueryElement("foobar"), "foobar");
     assertEquals(Utf8UrlEncoder.percentEncodeQueryElement("foo*bar"), "foo%2Abar");
diff --git a/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java b/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java
index 5679e2b30..adc12655e 100644
--- a/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java
+++ b/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java
@@ -96,7 +96,7 @@ public String getInitParameter(String name) {
   }
 
   @AfterClass(alwaysRun = true)
-  public void tearDownGlobal() throws InterruptedException, Exception {
+  public void tearDownGlobal() throws Exception {
     tomcat.stop();
   }
 
@@ -105,13 +105,13 @@ private String getTargetUrl() {
   }
 
   @AfterMethod(alwaysRun = true)
-  public void clean() throws InterruptedException, Exception {
+  public void clean() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       c.executeRequest(delete(getTargetUrl())).get();
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void mkcolWebDavTest1() throws InterruptedException, IOException, ExecutionException {
     try (AsyncHttpClient c = asyncHttpClient()) {
       Request mkcolRequest = new RequestBuilder("MKCOL").setUrl(getTargetUrl()).build();
@@ -120,7 +120,7 @@ public void mkcolWebDavTest1() throws InterruptedException, IOException, Executi
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void mkcolWebDavTest2() throws InterruptedException, IOException, ExecutionException {
     try (AsyncHttpClient c = asyncHttpClient()) {
       Request mkcolRequest = new RequestBuilder("MKCOL").setUrl(getTargetUrl() + "/folder2").build();
@@ -129,7 +129,7 @@ public void mkcolWebDavTest2() throws InterruptedException, IOException, Executi
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void basicPropFindWebDavTest() throws InterruptedException, IOException, ExecutionException {
     try (AsyncHttpClient c = asyncHttpClient()) {
       Request propFindRequest = new RequestBuilder("PROPFIND").setUrl(getTargetUrl()).build();
@@ -139,7 +139,7 @@ public void basicPropFindWebDavTest() throws InterruptedException, IOException,
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void propFindWebDavTest() throws InterruptedException, IOException, ExecutionException {
     try (AsyncHttpClient c = asyncHttpClient()) {
       Request mkcolRequest = new RequestBuilder("MKCOL").setUrl(getTargetUrl()).build();
@@ -158,7 +158,7 @@ public void propFindWebDavTest() throws InterruptedException, IOException, Execu
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void propFindCompletionHandlerWebDavTest() throws InterruptedException, IOException, ExecutionException {
     try (AsyncHttpClient c = asyncHttpClient()) {
       Request mkcolRequest = new RequestBuilder("MKCOL").setUrl(getTargetUrl()).build();
@@ -177,7 +177,7 @@ public void onThrowable(Throwable t) {
         }
 
         @Override
-        public WebDavResponse onCompleted(WebDavResponse response) throws Exception {
+        public WebDavResponse onCompleted(WebDavResponse response) {
           return response;
         }
       }).get();
diff --git a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
index 6d30757f3..52aaefc3a 100644
--- a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
@@ -27,7 +27,7 @@
 
 public class CloseCodeReasonMessageTest extends AbstractBasicWebSocketTest {
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void onCloseWithCode() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -42,7 +42,7 @@ public void onCloseWithCode() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void onCloseWithCodeServerClose() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -142,7 +142,7 @@ public void onError(Throwable t) {
     final CountDownLatch latch;
     final AtomicReference<String> text;
 
-    public Listener(CountDownLatch latch, AtomicReference<String> text) {
+    Listener(CountDownLatch latch, AtomicReference<String> text) {
       this.latch = latch;
       this.text = text;
     }
diff --git a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
index 45e1d4bfd..55b058a93 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
@@ -35,7 +35,7 @@
 
   private Server server2;
 
-  public void setUpServers(boolean targetHttps) throws Exception {
+  private void setUpServers(boolean targetHttps) throws Exception {
     server = new Server();
     ServerConnector connector = addHttpConnector(server);
     server.setHandler(new ConnectHandler());
@@ -58,12 +58,12 @@ public void tearDownGlobal() throws Exception {
     server2.stop();
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void echoWSText() throws Exception {
     runTest(false);
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void echoWSSText() throws Exception {
     runTest(true);
   }
diff --git a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
index ac78ca6cc..fd949fa25 100644
--- a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
@@ -22,7 +22,6 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -47,7 +46,7 @@ public void setUpGlobal() throws Exception {
     HandlerList list = new HandlerList();
     list.addHandler(new AbstractHandler() {
       @Override
-      public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {
+      public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException {
         if (request.getLocalPort() == port2) {
           httpServletResponse.sendRedirect(getTargetUrl());
         }
@@ -62,7 +61,7 @@ public void handle(String s, Request request, HttpServletRequest httpServletRequ
     logger.info("Local HTTP server started successfully");
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void testRedirectToWSResource() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true))) {
       final CountDownLatch latch = new CountDownLatch(1);
diff --git a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
index 462a531ec..a3b0ac53a 100644
--- a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
@@ -31,19 +31,19 @@ public WebSocketHandler configureHandler() {
     return new WebSocketHandler() {
       @Override
       public void configure(WebSocketServletFactory factory) {
-        factory.register(EchoSocket.class);
+        factory.register(EchoWebSocket.class);
       }
     };
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void sendTextMessage() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       getWebSocket(c).sendTextFrame("TEXT").get(10, TimeUnit.SECONDS);
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000, expectedExceptions = ExecutionException.class)
+  @Test(timeOut = 60000, expectedExceptions = ExecutionException.class)
   public void sendTextMessageExpectFailure() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       CountDownLatch closeLatch = new CountDownLatch(1);
@@ -54,14 +54,14 @@ public void sendTextMessageExpectFailure() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void sendByteMessage() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       getWebSocket(c).sendBinaryFrame("BYTES".getBytes()).get(10, TimeUnit.SECONDS);
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000, expectedExceptions = ExecutionException.class)
+  @Test(timeOut = 60000, expectedExceptions = ExecutionException.class)
   public void sendByteMessageExpectFailure() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       CountDownLatch closeLatch = new CountDownLatch(1);
@@ -72,14 +72,14 @@ public void sendByteMessageExpectFailure() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void sendPingMessage() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       getWebSocket(c).sendPingFrame("PING".getBytes()).get(10, TimeUnit.SECONDS);
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000, expectedExceptions = ExecutionException.class)
+  @Test(timeOut = 60000, expectedExceptions = ExecutionException.class)
   public void sendPingMessageExpectFailure() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       CountDownLatch closeLatch = new CountDownLatch(1);
@@ -90,14 +90,14 @@ public void sendPingMessageExpectFailure() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void sendPongMessage() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       getWebSocket(c).sendPongFrame("PONG".getBytes()).get(10, TimeUnit.SECONDS);
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000, expectedExceptions = ExecutionException.class)
+  @Test(timeOut = 60000, expectedExceptions = ExecutionException.class)
   public void sendPongMessageExpectFailure() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       CountDownLatch closeLatch = new CountDownLatch(1);
@@ -108,14 +108,14 @@ public void sendPongMessageExpectFailure() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void streamBytes() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       getWebSocket(c).sendBinaryFrame("STREAM".getBytes(), true, 0).get(1, TimeUnit.SECONDS);
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000, expectedExceptions = ExecutionException.class)
+  @Test(timeOut = 60000, expectedExceptions = ExecutionException.class)
   public void streamBytesExpectFailure() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       CountDownLatch closeLatch = new CountDownLatch(1);
@@ -126,14 +126,14 @@ public void streamBytesExpectFailure() throws Exception {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void streamText() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       getWebSocket(c).sendTextFrame("STREAM", true, 0).get(1, TimeUnit.SECONDS);
     }
   }
 
-  @Test(groups = "standalone", expectedExceptions = ExecutionException.class)
+  @Test(expectedExceptions = ExecutionException.class)
   public void streamTextExpectFailure() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       CountDownLatch closeLatch = new CountDownLatch(1);
