diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java b/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
index 5140535ce..6f4e87524 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
@@ -88,16 +88,19 @@ private void writeRequest(Channel channel) {
     }
 
     public void onSuccess(Channel channel, InetSocketAddress remoteAddress) {
+    	
+    	final Channel c = channel;
 
         if (connectionSemaphore != null) {
             // transfer lock from future to channel
             Object partitionKeyLock = future.takePartitionKeyLock();
+            final Object p = partitionKeyLock; 
 
             if (partitionKeyLock != null) {
                 channel.closeFuture().addListener(new GenericFutureListener<Future<? super Void>>() {
                     @Override
                     public void operationComplete(Future<? super Void> future) throws Exception {
-                        connectionSemaphore.releaseChannelLock(partitionKeyLock);
+                        connectionSemaphore.releaseChannelLock(p);
                     }
                 });
             }
@@ -146,11 +149,11 @@ protected void onSuccess(Channel value) throws Exception {
                             asyncHandlerExtensions.onTlsHandshakeSuccess();
                         } catch (Exception e) {
                             LOGGER.error("onTlsHandshakeSuccess crashed", e);
-                            NettyConnectListener.this.onFailure(channel, e);
+                            NettyConnectListener.this.onFailure(c, e);
                             return;
                         }
                     }
-                    writeRequest(channel);
+                    writeRequest(c);
                 }
 
                 @Override
@@ -160,16 +163,16 @@ protected void onFailure(Throwable cause) throws Exception {
                             asyncHandlerExtensions.onTlsHandshakeFailure(cause);
                         } catch (Exception e) {
                             LOGGER.error("onTlsHandshakeFailure crashed", e);
-                            NettyConnectListener.this.onFailure(channel, e);
+                            NettyConnectListener.this.onFailure(c, e);
                             return;
                         }
                     }
-                    NettyConnectListener.this.onFailure(channel, cause);
+                    NettyConnectListener.this.onFailure(c, cause);
                 }
             });
 
         } else {
-            writeRequest(channel);
+            writeRequest(c);
         }
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
index 53e07c1ec..165d7c644 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
@@ -609,4 +609,4 @@ public void call() {
             }
         });
     }
-}
+}
\ No newline at end of file
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
index 41e2ade2f..8dd74c80c 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
@@ -23,9 +23,10 @@
 
     long getContentLength();
 
-    default CharSequence getContentTypeOverride() {
-        return null;
-    }
+    CharSequence getContentTypeOverride();
+//    {
+//        return null;
+//    }
 
     void write(Channel channel, NettyResponseFuture<?> future) throws IOException;
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
index 76f5c2c28..42cf46030 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
@@ -86,4 +86,9 @@ public void operationComplete(ChannelProgressiveFuture cf) {
                 });
         channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT, channel.voidPromise());
     }
+
+	@Override
+	public CharSequence getContentTypeOverride() {
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
index 2b54340a4..38664590b 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
@@ -34,4 +34,9 @@ public long getContentLength() {
     public ByteBuf byteBuf() {
         return Unpooled.wrappedBuffer(bytes);
     }
+
+	@Override
+	public CharSequence getContentTypeOverride() {
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java
index 3ec8ab3dd..c9706dd13 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java
@@ -41,4 +41,9 @@ public long getContentLength() {
     public ByteBuf byteBuf() {
         return Unpooled.wrappedBuffer(bytes);
     }
+
+	@Override
+	public CharSequence getContentTypeOverride() {
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
index 4710166d6..7d42a42a2 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
@@ -74,4 +74,9 @@ public void write(Channel channel, NettyResponseFuture<?> future) throws IOExcep
                 .addListener(new WriteProgressListener(future, false, length));
         channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT, channel.voidPromise());
     }
+
+	@Override
+	public CharSequence getContentTypeOverride() {
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java
index b267a7a82..ef592c1b1 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java
@@ -77,4 +77,9 @@ public void operationComplete(ChannelProgressiveFuture cf) {
                 });
         channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT, channel.voidPromise());
     }
+
+	@Override
+	public CharSequence getContentTypeOverride() {
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
index 9002e600e..453e44721 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
@@ -124,4 +124,9 @@ private void removeFromPipeline() {
             }
         }
     }
+
+	@Override
+	public CharSequence getContentTypeOverride() {
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java b/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
index ebeff4975..d23815789 100644
--- a/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
+++ b/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
@@ -52,15 +52,17 @@
 
         whenResolved.addListener(new SimpleFutureListener<List<InetAddress>>() {
 
+        	final AsyncHandlerExtensions a = asyncHandlerExtensions;
+        	
             @Override
             protected void onSuccess(List<InetAddress> value) throws Exception {
                 ArrayList<InetSocketAddress> socketAddresses = new ArrayList<>(value.size());
                 for (InetAddress a : value) {
                     socketAddresses.add(new InetSocketAddress(a, port));
                 }
-                if (asyncHandlerExtensions != null) {
+                if (a != null) {
                     try {
-                        asyncHandlerExtensions.onHostnameResolutionSuccess(hostname, socketAddresses);
+                        a.onHostnameResolutionSuccess(hostname, socketAddresses);
                     } catch (Exception e) {
                         LOGGER.error("onHostnameResolutionSuccess crashed", e);
                         promise.tryFailure(e);
@@ -72,9 +74,9 @@ protected void onSuccess(List<InetAddress> value) throws Exception {
 
             @Override
             protected void onFailure(Throwable t) throws Exception {
-                if (asyncHandlerExtensions != null) {
+                if (a != null) {
                     try {
-                        asyncHandlerExtensions.onHostnameResolutionFailure(hostname, t);
+                        a.onHostnameResolutionFailure(hostname, t);
                     } catch (Exception e) {
                         LOGGER.error("onHostnameResolutionFailure crashed", e);
                         promise.tryFailure(e);
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
index 2f770fbee..40c01f048 100644
--- a/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
@@ -89,7 +89,7 @@ public void postLargeFileOverHttps() throws Throwable {
         logger.debug("<<< postLargeFileOverHttps");
     }
 
-    //@Test
+    @Test
     public void multipleSequentialPostRequestsOverHttps() throws Throwable {
         logger.debug(">>> multipleSequentialPostRequestsOverHttps");
         withClient(config().setSslEngineFactory(createSslEngineFactory())).run(client -> {
