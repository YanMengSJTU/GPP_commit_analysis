diff --git a/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java b/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
index cad76f9a5..545f3a68e 100644
--- a/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
+++ b/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
@@ -64,7 +64,7 @@
      */
     protected Part[] parts;
 
-    private byte[] multipartBoundary;
+    private final byte[] multipartBoundary;
 
     private final String contentType;
 
@@ -79,11 +79,28 @@ public MultipartRequestEntity(Part[] parts, FluentCaseInsensitiveStringsMap requ
         }
         this.parts = parts;
         String contentTypeHeader = requestHeaders.getFirstValue("Content-Type");
-        if (isNonEmpty(contentTypeHeader))
-            this.contentType = contentTypeHeader;
-        else
-            this.contentType = MULTIPART_FORM_CONTENT_TYPE;
+        if (isNonEmpty(contentTypeHeader)) {
+        	int boundaryLocation = contentTypeHeader.indexOf("boundary=");
+        	if (boundaryLocation != -1) {
+        		// boundary defined in existing Content-Type
+        		contentType = contentTypeHeader;
+        		multipartBoundary = MultipartEncodingUtil.getAsciiBytes((contentTypeHeader.substring(boundaryLocation + "boundary=".length()).trim()));
+        	} else {
+        		// generate boundary and append it to existing Content-Type
+        		multipartBoundary = generateMultipartBoundary();
+                contentType = computeContentType(contentTypeHeader);
+        	}
+        } else {
+        	multipartBoundary = generateMultipartBoundary();
+            contentType = computeContentType(MULTIPART_FORM_CONTENT_TYPE);
+        }
+    }
 
+    private String computeContentType(String base) {
+    	StringBuilder buffer = new StringBuilder(base);
+		if (!base.endsWith(";"))
+			buffer.append(";");
+        return buffer.append(" boundary=").append(MultipartEncodingUtil.getAsciiString(multipartBoundary)).toString();
     }
 
     /**
@@ -93,9 +110,6 @@ public MultipartRequestEntity(Part[] parts, FluentCaseInsensitiveStringsMap requ
      * @return The boundary string of this entity in ASCII encoding.
      */
     protected byte[] getMultipartBoundary() {
-        if (multipartBoundary == null) {
-            multipartBoundary = generateMultipartBoundary();
-        }
         return multipartBoundary;
     }
 
@@ -117,7 +131,7 @@ public boolean isRepeatable() {
      * @see org.apache.commons.httpclient.methods.RequestEntity#writeRequest(java.io.OutputStream)
      */
     public void writeRequest(OutputStream out) throws IOException {
-        Part.sendParts(out, parts, getMultipartBoundary());
+        Part.sendParts(out, parts, multipartBoundary);
     }
 
     /*
@@ -127,7 +141,7 @@ public void writeRequest(OutputStream out) throws IOException {
      */
     public long getContentLength() {
         try {
-            return Part.getLengthOfParts(parts, getMultipartBoundary());
+            return Part.getLengthOfParts(parts, multipartBoundary);
         } catch (Exception e) {
             log.error("An exception occurred while getting the length of the parts", e);
             return 0;
@@ -140,16 +154,7 @@ public long getContentLength() {
      * @see org.apache.commons.httpclient.methods.RequestEntity#getContentType()
      */
     public String getContentType() {
-        if (contentType.contains("boundary="))
-            return contentType;
-        else {
-            StringBuilder buffer = new StringBuilder(contentType);
-            if (!contentType.endsWith(";"))
-                buffer.append(";");
-            buffer.append(" boundary=");
-            buffer.append(MultipartEncodingUtil.getAsciiString(getMultipartBoundary()));
-            return buffer.toString();
-        }
+        return contentType;
     }
-
 }
+
