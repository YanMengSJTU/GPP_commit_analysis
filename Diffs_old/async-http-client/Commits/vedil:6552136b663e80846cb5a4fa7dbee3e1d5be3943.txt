diff --git a/providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index c2b3bfb10..2bf916764 100644
--- a/providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -919,12 +919,6 @@ private boolean sendAsGrizzlyRequest(final Request request,
                     {
                     	requestPacket.setHeader(Header.ProxyAuthorization, AuthenticatorUtils.computeBasicAuthentication(proxy));
                     }
-                    /*if(proxy.getNtlmDomain() != null && proxy.getNtlmDomain().length() > 0)
-                    {
-                    	LOGGER.debug("probably ntlm.. not adding header..");
-                    }else if (proxy.getPrincipal() != null && proxy.isBasic()) {
-                    	requestPacket.setHeader(Header.ProxyAuthorization, AuthenticatorUtils.computeBasicAuthentication(proxy));
-                    }*/
                     
                 }
             }
@@ -1710,7 +1704,7 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
                     }else if(isNTLMSecondHandShake(proxy_auth))
                     {
                     	final Connection c = ctx.getConnection();
-                        final HttpTransactionContext newContext = httpTransactionContext.copy(); //httpTransactionContext.copy();
+                        final HttpTransactionContext newContext = httpTransactionContext.copy();
                      
                         httpTransactionContext.future = null;
                         httpTransactionContext.provider.setHttpTransactionContext(c, newContext);
@@ -1730,15 +1724,13 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
                         
                         newContext.invocationStatus = tempInvocationStatus;
                         
+                        //NTLM needs the same connection to be used for exchange of tokens
 	                    return exceuteRequest(httpTransactionContext, req, c,
 								newContext);
                     }
                 } catch (Exception e) {
                     httpTransactionContext.abort(e);
-                } catch (Throwable e) {
-					e.printStackTrace();
-					httpTransactionContext.abort(e);
-				}
+                }
                 httpTransactionContext.invocationStatus = tempInvocationStatus;
                 return false;
             }
