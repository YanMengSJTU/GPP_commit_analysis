diff --git a/src/main/java/com/ning/http/client/FluentStringsMap.java b/src/main/java/com/ning/http/client/FluentStringsMap.java
index 0ca87cab4..b540b7089 100644
--- a/src/main/java/com/ning/http/client/FluentStringsMap.java
+++ b/src/main/java/com/ning/http/client/FluentStringsMap.java
@@ -69,24 +69,6 @@ public FluentStringsMap add(String key, String... values) {
         return this;
     }
 
-    private List<String> fetchValues(Collection<String> values) {
-        List<String> result = null;
-
-        if (values != null) {
-            for (String value : values) {
-                if (value == null) {
-                    value = "";
-                }
-                if (result == null) {
-                    // lazy initialization
-                    result = new ArrayList<String>();
-                }
-                result.add(value);
-            }
-        }
-        return result;
-    }
-
     /**
      * Adds the specified values and returns this object.
      *
@@ -97,16 +79,14 @@ public FluentStringsMap add(String key, String... values) {
      */
     public FluentStringsMap add(String key, Collection<String> values) {
         if (key != null) {
-            List<String> nonNullValues = fetchValues(values);
-
-            if (nonNullValues != null) {
+            if (isNonEmpty(values)) {
                 List<String> curValues = this.values.get(key);
 
                 if (curValues == null) {
                     curValues = new ArrayList<String>();
                     this.values.put(key, curValues);
                 }
-                curValues.addAll(nonNullValues);
+                curValues.addAll(values);
             }
         }
         return this;
@@ -162,12 +142,10 @@ public FluentStringsMap replace(final String key, final String... values) {
      */
     public FluentStringsMap replace(final String key, final Collection<String> values) {
         if (key != null) {
-            List<String> nonNullValues = fetchValues(values);
-
-            if (nonNullValues == null) {
+            if (values == null) {
                 this.values.remove(key);
             } else {
-                this.values.put(key, nonNullValues);
+                this.values.put(key, new ArrayList<String>(values));
             }
         }
         return this;
diff --git a/src/test/java/com/ning/http/client/async/FluentStringsMapTest.java b/src/test/java/com/ning/http/client/async/FluentStringsMapTest.java
index d6c679598..0ca6100ed 100644
--- a/src/test/java/com/ning/http/client/async/FluentStringsMapTest.java
+++ b/src/test/java/com/ning/http/client/async/FluentStringsMapTest.java
@@ -119,8 +119,8 @@ public void nullValueTest() {
 
         map.add("foo", (String) null);
 
-        assertEquals(map.getFirstValue("foo"), "");
-        assertEquals(map.getJoinedValue("foo", ", "), "");
+        assertEquals(map.getFirstValue("foo"), null);
+        assertEquals(map.getJoinedValue("foo", ", "), null);
         assertEquals(map.get("foo").size(), 1);
     }
 
diff --git a/src/test/java/com/ning/http/client/async/PostWithQSTest.java b/src/test/java/com/ning/http/client/async/PostWithQSTest.java
index 39cb9e1c7..af49ee672 100644
--- a/src/test/java/com/ning/http/client/async/PostWithQSTest.java
+++ b/src/test/java/com/ning/http/client/async/PostWithQSTest.java
@@ -113,6 +113,29 @@ public void postWithNulParamsQS() throws IOException, ExecutionException, Timeou
         try {
             Future<Response> f = client.preparePost("http://127.0.0.1:" + port1 + "/?a=b&c&d=e").setBody("abc".getBytes()).execute(new AsyncCompletionHandlerBase() {
 
+                /* @Override */
+                public STATE onStatusReceived(final HttpResponseStatus status) throws Exception {
+                    if (!status.getUrl().toURL().toString().equals("http://127.0.0.1:" + port1 + "/?a=b&c&d=e")) {
+                        throw new IOException("failed to parse the query properly");
+                    }
+                    return super.onStatusReceived(status);
+                }
+
+            });
+            Response resp = f.get(3, TimeUnit.SECONDS);
+            assertNotNull(resp);
+            assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
+        } finally {
+            client.close();
+        }
+    }
+    
+    @Test(groups = { "standalone", "default_provider" })
+    public void postWithEmptyParamsQS() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+        AsyncHttpClient client = getAsyncHttpClient(null);
+        try {
+            Future<Response> f = client.preparePost("http://127.0.0.1:" + port1 + "/?a=b&c=&d=e").setBody("abc".getBytes()).execute(new AsyncCompletionHandlerBase() {
+
                 /* @Override */
                 public STATE onStatusReceived(final HttpResponseStatus status) throws Exception {
                     if (!status.getUrl().toURL().toString().equals("http://127.0.0.1:" + port1 + "/?a=b&c=&d=e")) {
