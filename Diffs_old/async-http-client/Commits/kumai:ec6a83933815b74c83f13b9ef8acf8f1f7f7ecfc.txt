diff --git a/src/main/java/com/ning/http/client/AsyncHttpClient.java b/src/main/java/com/ning/http/client/AsyncHttpClient.java
index b507e9def..f8a3d9d5c 100755
--- a/src/main/java/com/ning/http/client/AsyncHttpClient.java
+++ b/src/main/java/com/ning/http/client/AsyncHttpClient.java
@@ -554,7 +554,7 @@ private FilterContext preProcessRequest(FilterContext fc) throws IOException {
         }
 
         Request request = fc.getRequest();
-        if (ResumableAsyncHandler.class.isAssignableFrom(fc.getAsyncHandler().getClass())) {
+        if (fc.getAsyncHandler() instanceof ResumableAsyncHandler) {
             request = ResumableAsyncHandler.class.cast(fc.getAsyncHandler()).adjustRequestRange(request);
         }
 
diff --git a/src/main/java/com/ning/http/client/consumers/AppendableBodyConsumer.java b/src/main/java/com/ning/http/client/consumers/AppendableBodyConsumer.java
index e2976facb..a1e9dc5ad 100644
--- a/src/main/java/com/ning/http/client/consumers/AppendableBodyConsumer.java
+++ b/src/main/java/com/ning/http/client/consumers/AppendableBodyConsumer.java
@@ -52,7 +52,7 @@ public void consume(ByteBuffer byteBuffer) throws IOException {
      */
     /* @Override */
     public void close() throws IOException {
-        if (Closeable.class.isAssignableFrom(appendable.getClass())) {
+        if (appendable instanceof Closeable) {
             Closeable.class.cast(appendable).close();
         }
     }
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
index da81b19bd..fd041a8f1 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
@@ -158,7 +158,7 @@ public ApacheAsyncHttpProvider(AsyncHttpClientConfig config) {
         params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler());
 
         AsyncHttpProviderConfig<?, ?> providerConfig = config.getAsyncHttpProviderConfig();
-        if (providerConfig != null && ApacheAsyncHttpProvider.class.isAssignableFrom(providerConfig.getClass())) {
+        if (providerConfig instanceof ApacheAsyncHttpProvider) {
             configure(ApacheAsyncHttpProviderConfig.class.cast(providerConfig));
         }
     }
@@ -171,7 +171,7 @@ private void configure(ApacheAsyncHttpProviderConfig config) {
             throw new IOException("Closed");
         }
 
-        if (ResumableAsyncHandler.class.isAssignableFrom(handler.getClass())) {
+        if (handler instanceof ResumableAsyncHandler) {
             request = ResumableAsyncHandler.class.cast(handler).adjustRequestRange(request);
         }
 
@@ -460,7 +460,7 @@ public T call() {
                     future.setReaperFuture(reaperFuture);
                 }
 
-                if (TransferCompletionHandler.class.isAssignableFrom(asyncHandler.getClass())) {
+                if (asyncHandler instanceof TransferCompletionHandler) {
                     throw new IllegalStateException(TransferCompletionHandler.class.getName() + "not supported by this provider");
                 }
 
@@ -578,9 +578,10 @@ public T call() {
                     }
                 }
 
-                if (ProgressAsyncHandler.class.isAssignableFrom(asyncHandler.getClass())) {
-                    ProgressAsyncHandler.class.cast(asyncHandler).onHeaderWriteCompleted();
-                    ProgressAsyncHandler.class.cast(asyncHandler).onContentWriteCompleted();
+                if (asyncHandler instanceof ProgressAsyncHandler) {
+                	ProgressAsyncHandler progressAsyncHandler = (ProgressAsyncHandler) asyncHandler;
+                	progressAsyncHandler.onHeaderWriteCompleted();
+                	progressAsyncHandler.onContentWriteCompleted();
                 }
 
                 try {
@@ -592,7 +593,7 @@ public T call() {
                 }
             } catch (Throwable t) {
 
-                if (IOException.class.isAssignableFrom(t.getClass()) && !config.getIOExceptionFilters().isEmpty()) {
+                if (t instanceof IOException && !config.getIOExceptionFilters().isEmpty()) {
                     FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(asyncHandler)
                             .request(future.getRequest()).ioException(IOException.class.cast(t)).build();
 
@@ -643,20 +644,18 @@ public void run() {
         }
 
         private Throwable filterException(Throwable t) {
-            if (UnknownHostException.class.isAssignableFrom(t.getClass())) {
+            if (t instanceof UnknownHostException) {
                 t = new ConnectException(t.getMessage());
-            }
 
-            if (NoHttpResponseException.class.isAssignableFrom(t.getClass())) {
+            } else if (t instanceof NoHttpResponseException) {
                 int responseTimeoutInMs = config.getRequestTimeoutInMs();
 
                 if (request.getPerRequestConfig() != null && request.getPerRequestConfig().getRequestTimeoutInMs() != -1) {
                     responseTimeoutInMs = request.getPerRequestConfig().getRequestTimeoutInMs();
                 }
                 t = new TimeoutException(String.format("No response received after %s", responseTimeoutInMs));
-            }
 
-            if (SSLHandshakeException.class.isAssignableFrom(t.getClass())) {
+            } else if (t instanceof SSLHandshakeException) {
                 Throwable t2 = new ConnectException();
                 t2.initCause(t);
                 t = t2;
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 711f964f9..521551401 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -904,12 +904,10 @@ private boolean sendAsGrizzlyRequest(final Request request,
                 }
             }
             final AsyncHandler h = httpCtx.handler;
-            if (h != null) {
-                if (TransferCompletionHandler.class.isAssignableFrom(h.getClass())) {
-                    final FluentCaseInsensitiveStringsMap map =
-                            new FluentCaseInsensitiveStringsMap(request.getHeaders());
-                    TransferCompletionHandler.class.cast(h).transferAdapter(new GrizzlyTransferAdapter(map));
-                }
+            if (h instanceof TransferCompletionHandler) {
+                final FluentCaseInsensitiveStringsMap map =
+                        new FluentCaseInsensitiveStringsMap(request.getHeaders());
+                TransferCompletionHandler.class.cast(h).transferAdapter(new GrizzlyTransferAdapter(map));
             }
             return sendRequest(ctx, request, requestPacket);
 
@@ -1102,10 +1100,8 @@ protected void onHttpContentParsed(HttpContent content,
         protected void onHttpHeadersEncoded(HttpHeader httpHeader, FilterChainContext ctx) {
             final HttpTransactionContext context = provider.getHttpTransactionContext(ctx.getConnection());
             final AsyncHandler handler = context.handler;
-            if (handler != null) {
-                if (TransferCompletionHandler.class.isAssignableFrom(handler.getClass())) {
-                    ((TransferCompletionHandler) handler).onHeaderWriteCompleted();
-                }
+            if (handler instanceof TransferCompletionHandler) {
+                ((TransferCompletionHandler) handler).onHeaderWriteCompleted();
             }
         }
 
@@ -1113,15 +1109,13 @@ protected void onHttpHeadersEncoded(HttpHeader httpHeader, FilterChainContext ct
         protected void onHttpContentEncoded(HttpContent content, FilterChainContext ctx) {
             final HttpTransactionContext context = provider.getHttpTransactionContext(ctx.getConnection());
             final AsyncHandler handler = context.handler;
-            if (handler != null) {
-                if (TransferCompletionHandler.class.isAssignableFrom(handler.getClass())) {
-                    final int written = content.getContent().remaining();
-                    final long total = context.totalBodyWritten.addAndGet(written);
-                    ((TransferCompletionHandler) handler).onContentWriteProgress(
-                            written,
-                            total,
-                            content.getHttpHeader().getContentLength());
-                }
+            if (handler instanceof TransferCompletionHandler) {
+                final int written = content.getContent().remaining();
+                final long total = context.totalBodyWritten.addAndGet(written);
+                ((TransferCompletionHandler) handler).onContentWriteProgress(
+                        written,
+                        total,
+                        content.getHttpHeader().getContentLength());
             }
         }
 
@@ -2148,15 +2142,13 @@ public boolean doHandle(final FilterChainContext ctx,
                     @Override
                     public void updated(WriteResult result) {
                         final AsyncHandler handler = context.handler;
-                        if (handler != null) {
-                            if (TransferCompletionHandler.class.isAssignableFrom(handler.getClass())) {
-                                final long written = result.getWrittenSize();
-                                final long total = context.totalBodyWritten.addAndGet(written);
-                                ((TransferCompletionHandler) handler).onContentWriteProgress(
-                                        written,
-                                        total,
-                                        requestPacket.getContentLength());
-                            }
+                        if (handler instanceof TransferCompletionHandler) {
+                            final long written = result.getWrittenSize();
+                            final long total = context.totalBodyWritten.addAndGet(written);
+                            ((TransferCompletionHandler) handler).onContentWriteProgress(
+                                    written,
+                                    total,
+                                    requestPacket.getContentLength());
                         }
                     }
                 });
@@ -2700,7 +2692,7 @@ public void close() {
         @Override
         public void onClose(org.glassfish.grizzly.websockets.WebSocket gWebSocket, DataFrame dataFrame) {
             try {
-                if (WebSocketCloseCodeReasonListener.class.isAssignableFrom(ahcListener.getClass())) {
+                if (ahcListener instanceof WebSocketCloseCodeReasonListener) {
                     ClosingFrame cf = ClosingFrame.class.cast(dataFrame);
                     WebSocketCloseCodeReasonListener.class.cast(ahcListener).onClose(webSocket, cf.getCode(), cf.getReason());
                 } else {
@@ -2723,7 +2715,7 @@ public void onConnect(org.glassfish.grizzly.websockets.WebSocket gWebSocket) {
         @Override
         public void onMessage(org.glassfish.grizzly.websockets.WebSocket webSocket, String s) {
             try {
-                if (WebSocketTextListener.class.isAssignableFrom(ahcListener.getClass())) {
+                if (ahcListener instanceof WebSocketTextListener) {
                     WebSocketTextListener.class.cast(ahcListener).onMessage(s);
                 }
             } catch (Throwable e) {
@@ -2734,7 +2726,7 @@ public void onMessage(org.glassfish.grizzly.websockets.WebSocket webSocket, Stri
         @Override
         public void onMessage(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[] bytes) {
             try {
-                if (WebSocketByteListener.class.isAssignableFrom(ahcListener.getClass())) {
+                if (ahcListener instanceof WebSocketByteListener) {
                     WebSocketByteListener.class.cast(ahcListener).onMessage(bytes);
                 }
             } catch (Throwable e) {
@@ -2745,7 +2737,7 @@ public void onMessage(org.glassfish.grizzly.websockets.WebSocket webSocket, byte
         @Override
         public void onPing(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[] bytes) {
             try {
-                if (WebSocketPingListener.class.isAssignableFrom(ahcListener.getClass())) {
+                if (ahcListener instanceof WebSocketPingListener) {
                     WebSocketPingListener.class.cast(ahcListener).onPing(bytes);
                 }
             } catch (Throwable e) {
@@ -2756,7 +2748,7 @@ public void onPing(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[]
         @Override
         public void onPong(org.glassfish.grizzly.websockets.WebSocket webSocket, byte[] bytes) {
             try {
-                if (WebSocketPongListener.class.isAssignableFrom(ahcListener.getClass())) {
+                if (ahcListener instanceof WebSocketPongListener) {
                     WebSocketPongListener.class.cast(ahcListener).onPong(bytes);
                 }
             } catch (Throwable e) {
@@ -2771,7 +2763,7 @@ public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, Str
                     synchronized (this.webSocket) {
                         stringBuffer.append(s);
                         if (last) {
-                            if (WebSocketTextListener.class.isAssignableFrom(ahcListener.getClass())) {
+                            if (ahcListener instanceof WebSocketTextListener) {
                                 final String message = stringBuffer.toString();
                                 stringBuffer.setLength(0);
                                 WebSocketTextListener.class.cast(ahcListener).onMessage(message);
@@ -2779,7 +2771,7 @@ public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, Str
                         }
                     }
                 } else {
-                    if (WebSocketTextListener.class.isAssignableFrom(ahcListener.getClass())) {
+                    if (ahcListener instanceof WebSocketTextListener) {
                         WebSocketTextListener.class.cast(ahcListener).onFragment(s, last);
                     }
                 }
@@ -2795,7 +2787,7 @@ public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, byt
                     synchronized (this.webSocket) {
                         byteArrayOutputStream.write(bytes);
                         if (last) {
-                            if (WebSocketByteListener.class.isAssignableFrom(ahcListener.getClass())) {
+                            if (ahcListener instanceof WebSocketByteListener) {
                                 final byte[] bytesLocal = byteArrayOutputStream.toByteArray();
                                 byteArrayOutputStream.reset();
                                 WebSocketByteListener.class.cast(ahcListener).onMessage(bytesLocal);
@@ -2803,7 +2795,7 @@ public void onFragment(org.glassfish.grizzly.websockets.WebSocket webSocket, byt
                         }
                     }
                 } else {
-                    if (WebSocketByteListener.class.isAssignableFrom(ahcListener.getClass())) {
+                    if (ahcListener instanceof WebSocketByteListener) {
                         WebSocketByteListener.class.cast(ahcListener).onFragment(bytes, last);
                     }
                 }
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
index 8d3739927..b9985a0ae 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
@@ -104,7 +104,7 @@ public JDKAsyncHttpProvider(AsyncHttpClientConfig config) {
 
         this.config = config;
         AsyncHttpProviderConfig<?, ?> providerConfig = config.getAsyncHttpProviderConfig();
-        if (providerConfig != null && JDKAsyncHttpProviderConfig.class.isAssignableFrom(providerConfig.getClass())) {
+        if (providerConfig instanceof JDKAsyncHttpProviderConfig) {
             configure(JDKAsyncHttpProviderConfig.class.cast(providerConfig));
         }
     }
@@ -238,7 +238,7 @@ public T call() throws Exception {
                 configure(uri, urlConnection, request);
                 urlConnection.connect();
 
-                if (TransferCompletionHandler.class.isAssignableFrom(asyncHandler.getClass())) {
+                if (asyncHandler instanceof TransferCompletionHandler) {
                     throw new IllegalStateException(TransferCompletionHandler.class.getName() + "not supported by this provider");
                 }
 
@@ -353,9 +353,10 @@ public T call() throws Exception {
                     }
                 }
 
-                if (ProgressAsyncHandler.class.isAssignableFrom(asyncHandler.getClass())) {
-                    ProgressAsyncHandler.class.cast(asyncHandler).onHeaderWriteCompleted();
-                    ProgressAsyncHandler.class.cast(asyncHandler).onContentWriteCompleted();
+                if (asyncHandler instanceof ProgressAsyncHandler) {
+                	ProgressAsyncHandler progressAsyncHandler = (ProgressAsyncHandler) asyncHandler;
+                	progressAsyncHandler.onHeaderWriteCompleted();
+                	progressAsyncHandler.onContentWriteCompleted();
                 }
                 try {
                     T t = asyncHandler.onCompleted();
@@ -370,7 +371,7 @@ public T call() throws Exception {
             } catch (Throwable t) {
                 logger.debug(t.getMessage(), t);
 
-                if (IOException.class.isAssignableFrom(t.getClass()) && !config.getIOExceptionFilters().isEmpty()) {
+                if (t instanceof IOException && !config.getIOExceptionFilters().isEmpty()) {
                     FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(asyncHandler)
                             .request(request).ioException(IOException.class.cast(t)).build();
 
@@ -421,20 +422,18 @@ private FilterContext handleIoException(FilterContext fc) throws FilterException
         }
 
         private Throwable filterException(Throwable t) {
-            if (UnknownHostException.class.isAssignableFrom(t.getClass())) {
+            if (t instanceof UnknownHostException) {
                 t = new ConnectException(t.getMessage());
-            }
 
-            if (SocketTimeoutException.class.isAssignableFrom(t.getClass())) {
+            } else if (t instanceof SocketTimeoutException) {
                 int responseTimeoutInMs = config.getRequestTimeoutInMs();
 
                 if (request.getPerRequestConfig() != null && request.getPerRequestConfig().getRequestTimeoutInMs() != -1) {
                     responseTimeoutInMs = request.getPerRequestConfig().getRequestTimeoutInMs();
                 }
                 t = new TimeoutException(String.format("No response received after %s", responseTimeoutInMs));
-            }
 
-            if (SSLHandshakeException.class.isAssignableFrom(t.getClass())) {
+            } else if (t instanceof SSLHandshakeException) {
                 Throwable t2 = new ConnectException();
                 t2.initCause(t);
                 t = t2;
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index ab0e36c65..b9f01d2af 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -78,6 +78,7 @@
 import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory;
+import org.jboss.netty.handler.codec.PrematureChannelClosureException;
 import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;
 import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
 import org.jboss.netty.handler.codec.http.HttpChunk;
@@ -204,7 +205,7 @@ private static boolean isNTLM(List<String> auth) {
 
     public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
 
-        if (config.getAsyncHttpProviderConfig() != null && NettyAsyncHttpProviderConfig.class.isAssignableFrom(config.getAsyncHttpProviderConfig().getClass())) {
+        if (config.getAsyncHttpProviderConfig() instanceof NettyAsyncHttpProviderConfig) {
             asyncHttpProviderConfig = NettyAsyncHttpProviderConfig.class.cast(config.getAsyncHttpProviderConfig());
         } else {
             asyncHttpProviderConfig = new NettyAsyncHttpProviderConfig();
@@ -216,7 +217,7 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
         } else {
             // check if external NioClientSocketChannelFactory is defined
             Object oo = asyncHttpProviderConfig.getProperty(SOCKET_CHANNEL_FACTORY);
-            if (oo != null && NioClientSocketChannelFactory.class.isAssignableFrom(oo.getClass())) {
+            if (oo instanceof NioClientSocketChannelFactory) {
                 this.socketChannelFactory = NioClientSocketChannelFactory.class.cast(oo);
 
                 // cannot allow releasing shared channel factory
@@ -224,7 +225,7 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
             } else {
                 ExecutorService e;
                 Object o = asyncHttpProviderConfig.getProperty(BOSS_EXECUTOR_SERVICE);
-                if (o != null && ExecutorService.class.isAssignableFrom(o.getClass())) {
+                if (o instanceof ExecutorService) {
                     e = ExecutorService.class.cast(o);
                 } else {
                     e = Executors.newCachedThreadPool();
@@ -303,7 +304,7 @@ public ChannelPipeline getPipeline() throws Exception {
 
         if (asyncHttpProviderConfig != null) {
             Object value = asyncHttpProviderConfig.getProperty(EXECUTE_ASYNC_CONNECT);
-            if (value != null && Boolean.class.isAssignableFrom(value.getClass())) {
+            if (value instanceof Boolean) {
                 executeConnectAsync = Boolean.class.cast(value);
             } else if (asyncHttpProviderConfig.getProperty(DISABLE_NESTED_REQUEST) != null) {
                 DefaultChannelFuture.setUseDeadLockChecker(true);
@@ -448,7 +449,7 @@ private Channel verifyChannelPipeline(Channel channel, String scheme) throws IOE
                 BodyGenerator bg = future.getRequest().getBodyGenerator();
                 if (bg != null) {
                     // Netty issue with chunking.
-                    if (InputStreamBodyGenerator.class.isAssignableFrom(bg.getClass())) {
+                    if (bg instanceof InputStreamBodyGenerator) {
                         InputStreamBodyGenerator.class.cast(bg).patchNettyChunkingIssue(true);
                     }
 
@@ -468,7 +469,7 @@ private Channel verifyChannelPipeline(Channel channel, String scheme) throws IOE
                 }
             }
 
-            if (TransferCompletionHandler.class.isAssignableFrom(future.getAsyncHandler().getClass())) {
+            if (future.getAsyncHandler() instanceof TransferCompletionHandler) {
 
                 FluentCaseInsensitiveStringsMap h = new FluentCaseInsensitiveStringsMap();
                 for (String s : future.getNettyRequest().getHeaderNames()) {
@@ -1412,7 +1413,7 @@ protected boolean remotelyClosed(Channel channel, NettyResponseFuture<?> future)
 
         connectionsPool.removeAll(channel);
 
-        if (future == null && channel.getPipeline().getContext(NettyAsyncHttpProvider.class).getAttachment() != null && NettyResponseFuture.class.isAssignableFrom(channel.getPipeline().getContext(NettyAsyncHttpProvider.class).getAttachment().getClass())) {
+        if (future == null && channel.getPipeline().getContext(NettyAsyncHttpProvider.class).getAttachment() instanceof NettyResponseFuture) {
             future = (NettyResponseFuture<?>) channel.getPipeline().getContext(NettyAsyncHttpProvider.class).getAttachment();
         }
 
@@ -1493,10 +1494,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws
         Throwable cause = e.getCause();
         NettyResponseFuture<?> future = null;
 
-        /**
-         * Issue 81 if (e.getCause() != null && e.getCause().getClass().isAssignableFrom(PrematureChannelClosureException.class)) { return; }
-         */
-        if (e.getCause() != null && e.getCause().getClass().getSimpleName().equals("PrematureChannelClosureException")) {
+        if (e.getCause() instanceof PrematureChannelClosureException) {
             return;
         }
 
@@ -1506,7 +1504,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws
 
         try {
 
-            if (cause != null && ClosedChannelException.class.isAssignableFrom(cause.getClass())) {
+            if (cause instanceof ClosedChannelException) {
                 return;
             }
 
@@ -1515,7 +1513,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws
                 future.attachChannel(null, false);
                 future.touch();
 
-                if (IOException.class.isAssignableFrom(cause.getClass())) {
+                if (cause instanceof IOException) {
 
                     if (!config.getIOExceptionFilters().isEmpty()) {
                         FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler()).request(future.getRequest()).ioException(new IOException("Channel Closed")).build();
@@ -1676,7 +1674,7 @@ public void operationComplete(ChannelFuture cf) {
             Throwable cause = cf.getCause();
             if (cause != null && future.getState() != NettyResponseFuture.STATE.NEW) {
 
-                if (IllegalStateException.class.isAssignableFrom(cause.getClass())) {
+                if (cause instanceof IllegalStateException) {
                     log.debug(cause.getMessage(), cause);
                     try {
                         cf.getChannel().close();
@@ -1686,7 +1684,7 @@ public void operationComplete(ChannelFuture cf) {
                     return;
                 }
 
-                if (ClosedChannelException.class.isAssignableFrom(cause.getClass()) || abortOnReadCloseException(cause) || abortOnWriteCloseException(cause)) {
+                if (cause instanceof ClosedChannelException || abortOnReadCloseException(cause) || abortOnWriteCloseException(cause)) {
 
                     if (log.isDebugEnabled()) {
                         log.debug(cf.getCause() == null ? "" : cf.getCause().getMessage(), cf.getCause());
@@ -1711,7 +1709,7 @@ public void operationComplete(ChannelFuture cf) {
             Realm realm = future.getRequest().getRealm() != null ? future.getRequest().getRealm() : NettyAsyncHttpProvider.this.getConfig().getRealm();
             boolean startPublishing = future.isInAuth() || realm == null || realm.getUsePreemptiveAuth() == true;
 
-            if (startPublishing && ProgressAsyncHandler.class.isAssignableFrom(asyncHandler.getClass())) {
+            if (startPublishing && asyncHandler instanceof ProgressAsyncHandler) {
                 if (notifyHeaders) {
                     ProgressAsyncHandler.class.cast(asyncHandler).onHeaderWriteCompleted();
                 } else {
@@ -1722,7 +1720,7 @@ public void operationComplete(ChannelFuture cf) {
 
         public void operationProgressed(ChannelFuture cf, long amount, long current, long total) {
             future.touch();
-            if (ProgressAsyncHandler.class.isAssignableFrom(asyncHandler.getClass())) {
+            if (asyncHandler instanceof ProgressAsyncHandler) {
                 ProgressAsyncHandler.class.cast(asyncHandler).onContentWriteProgress(amount, current, total);
             }
         }
@@ -1962,7 +1960,7 @@ public void destroy() {
     }
 
     private static final boolean validateWebSocketRequest(Request request, AsyncHandler<?> asyncHandler) {
-        if (request.getMethod() != "GET" || !WebSocketUpgradeHandler.class.isAssignableFrom(asyncHandler.getClass())) {
+        if (request.getMethod() != "GET" || !(asyncHandler instanceof WebSocketUpgradeHandler)) {
             return false;
         }
         return true;
@@ -2231,7 +2229,7 @@ public Object call() throws Exception {
                     }
                 }
             } catch (Exception t) {
-                if (IOException.class.isAssignableFrom(t.getClass()) && !config.getIOExceptionFilters().isEmpty()) {
+                if (t instanceof IOException && !config.getIOExceptionFilters().isEmpty()) {
                     FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler()).request(future.getRequest()).ioException(IOException.class.cast(t)).build();
                     fc = handleIoException(fc, future);
 
@@ -2390,7 +2388,7 @@ public void setContent(ChannelBuffer content) {
                             webSocket.onTextFragment(frame.getBinaryData().toString(UTF8), frame.isFinalFragment());
                         }
 
-                        if (CloseWebSocketFrame.class.isAssignableFrom(frame.getClass())) {
+                        if (frame instanceof CloseWebSocketFrame) {
                             try {
                                 ctx.setAttachment(DiscardEvent.class);
                                 webSocket.onClose(CloseWebSocketFrame.class.cast(frame).getStatusCode(), CloseWebSocketFrame.class.cast(frame).getReasonText());
@@ -2414,7 +2412,7 @@ public void setContent(ChannelBuffer content) {
         public void onError(ChannelHandlerContext ctx, ExceptionEvent e) {
             try {
                 log.warn("onError {}", e);
-                if (ctx.getAttachment() == null || !NettyResponseFuture.class.isAssignableFrom(ctx.getAttachment().getClass())) {
+                if (!(ctx.getAttachment() instanceof NettyResponseFuture)) {
                     return;
                 }
 
@@ -2434,7 +2432,7 @@ public void onError(ChannelHandlerContext ctx, ExceptionEvent e) {
         // @Override
         public void onClose(ChannelHandlerContext ctx, ChannelStateEvent e) {
             log.trace("onClose {}", e);
-            if (ctx.getAttachment() == null || !NettyResponseFuture.class.isAssignableFrom(ctx.getAttachment().getClass())) {
+            if (!(ctx.getAttachment() instanceof NettyResponseFuture)) {
                 return;
             }
 
@@ -2444,7 +2442,7 @@ public void onClose(ChannelHandlerContext ctx, ChannelStateEvent e) {
                 NettyWebSocket webSocket = NettyWebSocket.class.cast(h.onCompleted());
                 h.resetSuccess();
 
-                if (ctx.getAttachment() == null || !DiscardEvent.class.isAssignableFrom(ctx.getAttachment().getClass()))
+                if (!(ctx.getAttachment() instanceof DiscardEvent))
                     webSocket.close(1006, "Connection was closed abnormally (that is, with no close frame being sent).");
             } catch (Throwable t) {
                 log.error("onError", t);
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java b/src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
index 8625643cd..3fd5ab573 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
@@ -74,7 +74,7 @@ public final void operationComplete(ChannelFuture f) throws Exception {
             }
 
             HostnameVerifier v = config.getHostnameVerifier();
-            if (sslHandler != null && !AllowAllHostnameVerifier.class.isAssignableFrom(v.getClass())) {
+            if (sslHandler != null && !(v instanceof AllowAllHostnameVerifier)) {
                 // TODO: channel.getRemoteAddress()).getHostName() is very expensive. Should cache the result.
                 if (!v.verify(InetSocketAddress.class.cast(channel.getRemoteAddress()).getHostName(),
                         sslHandler.getEngine().getSession())) {
@@ -88,7 +88,7 @@ public final void operationComplete(ChannelFuture f) throws Exception {
 
             logger.debug("Trying to recover a dead cached channel {} with a retry value of {} ", f.getChannel(), future.canRetry());
             if (future.canRetry() && cause != null && (NettyAsyncHttpProvider.abortOnDisconnectException(cause)
-                    || ClosedChannelException.class.isAssignableFrom(cause.getClass())
+                    || cause instanceof ClosedChannelException
                     || future.getState() != NettyResponseFuture.STATE.NEW)) {
 
                 logger.debug("Retrying {} ", nettyRequest);
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
index b3868228a..813f4c41f 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
@@ -118,14 +118,12 @@ public void run() {
 
                 for (IdleChannel idleChannel : channelsInTimeout) {
                     Object attachment = idleChannel.channel.getPipeline().getContext(NettyAsyncHttpProvider.class).getAttachment();
-                    if (attachment != null) {
-                        if (NettyResponseFuture.class.isAssignableFrom(attachment.getClass())) {
-                            NettyResponseFuture<?> future = (NettyResponseFuture<?>) attachment;
-
-                            if (!future.isDone() && !future.isCancelled()) {
-                                log.debug("Future not in appropriate state %s\n", future);
-                                continue;
-                            }
+                    if (attachment instanceof NettyResponseFuture) {
+                        NettyResponseFuture<?> future = (NettyResponseFuture<?>) attachment;
+
+                        if (!future.isDone() && !future.isCancelled()) {
+                            log.debug("Future not in appropriate state %s\n", future);
+                            continue;
                         }
                     }
 
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java b/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
index bd8704f8e..b9d96249d 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
@@ -130,7 +130,7 @@ public void close(int statusCode, String reason) {
 
     protected void onBinaryFragment(byte[] message, boolean last) {
         for (WebSocketListener l : listeners) {
-            if (WebSocketByteListener.class.isAssignableFrom(l.getClass())) {
+            if (l instanceof WebSocketByteListener) {
                 try {
                 	WebSocketByteListener.class.cast(l).onFragment(message,last);
                 	
@@ -162,7 +162,7 @@ protected void onBinaryFragment(byte[] message, boolean last) {
 
     protected void onTextFragment(String message, boolean last) {
         for (WebSocketListener l : listeners) {
-            if (WebSocketTextListener.class.isAssignableFrom(l.getClass())) {
+            if (l instanceof WebSocketTextListener) {
                 try {
                     WebSocketTextListener.class.cast(l).onFragment(message,last);
                     
@@ -209,7 +209,7 @@ protected void onClose() {
     protected void onClose(int code, String reason) {
         for (WebSocketListener l : listeners) {
             try {
-                if (WebSocketCloseCodeReasonListener.class.isAssignableFrom(l.getClass())) {
+                if (l instanceof WebSocketCloseCodeReasonListener) {
                     WebSocketCloseCodeReasonListener.class.cast(l).onClose(this, code, reason);
                 }
                 l.onClose(this);
diff --git a/src/main/java/com/ning/http/client/resumable/ResumableIOExceptionFilter.java b/src/main/java/com/ning/http/client/resumable/ResumableIOExceptionFilter.java
index 7e2bd1d25..9422c0bd8 100644
--- a/src/main/java/com/ning/http/client/resumable/ResumableIOExceptionFilter.java
+++ b/src/main/java/com/ning/http/client/resumable/ResumableIOExceptionFilter.java
@@ -23,7 +23,7 @@
  */
 public class ResumableIOExceptionFilter implements IOExceptionFilter {
     public FilterContext filter(FilterContext ctx) throws FilterException {
-        if (ctx.getIOException() != null && ResumableAsyncHandler.class.isAssignableFrom(ctx.getAsyncHandler().getClass())) {
+        if (ctx.getIOException() != null && ctx.getAsyncHandler() instanceof ResumableAsyncHandler) {
 
             Request request = ResumableAsyncHandler.class.cast(ctx.getAsyncHandler()).adjustRequestRange(ctx.getRequest());
 
diff --git a/src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java b/src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
index 16704bede..6f7e20f47 100644
--- a/src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
+++ b/src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
@@ -131,7 +131,7 @@ public void onClose(WebSocket webSocket, int status, String reasonPhrase) {
                 webSocket.addWebSocketListener(w);
             }
             w.onClose(webSocket);
-            if (WebSocketCloseCodeReasonListener.class.isAssignableFrom(w.getClass())) {
+            if (w instanceof WebSocketCloseCodeReasonListener) {
                 WebSocketCloseCodeReasonListener.class.cast(w).onClose(webSocket, status, reasonPhrase);
             }
         }
diff --git a/src/main/java/com/ning/http/multipart/MultipartBody.java b/src/main/java/com/ning/http/multipart/MultipartBody.java
index 1f336c21a..55799a326 100644
--- a/src/main/java/com/ning/http/multipart/MultipartBody.java
+++ b/src/main/java/com/ning/http/multipart/MultipartBody.java
@@ -223,7 +223,7 @@ private void initializeFileEnd(FilePart currentPart)
     private void initializeFileBody(FilePart currentPart)
             throws IOException {
 
-        if (FilePartSource.class.isAssignableFrom(currentPart.getSource().getClass())) {
+        if (currentPart.getSource() instanceof FilePartSource) {
 
             FilePartSource source = (FilePartSource) currentPart.getSource();
 
@@ -442,7 +442,7 @@ private long handleFilePart(WritableByteChannel target, FilePart filePart) throw
 
     	handler.start();
 
-        if (FilePartSource.class.isAssignableFrom(filePart.getSource().getClass())) {
+        if (filePart.getSource() instanceof FilePartSource) {
             int length = 0;
 
             length += handleFileHeaders(target, filePart);
diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index 52bd48bfe..0f849674e 100755
--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -967,7 +967,7 @@ public void onThrowable(Throwable t) {
 
                 future.get(10, TimeUnit.SECONDS);
             } catch (ExecutionException ex) {
-                if (ex.getCause() != null && TimeoutException.class.isAssignableFrom(ex.getCause().getClass())) {
+                if (ex.getCause() instanceof TimeoutException) {
                     Assert.assertTrue(true);
                 }
             } catch (TimeoutException te) {
diff --git a/src/test/java/com/ning/http/client/async/EmptyBodyTest.java b/src/test/java/com/ning/http/client/async/EmptyBodyTest.java
index ccec37a18..ea0bbab5f 100644
--- a/src/test/java/com/ning/http/client/async/EmptyBodyTest.java
+++ b/src/test/java/com/ning/http/client/async/EmptyBodyTest.java
@@ -133,7 +133,7 @@ public void testPutEmptyBody() throws Throwable {
             assertNotNull(response);
             assertEquals(response.getStatusCode(), 204);
             assertEquals(response.getResponseBody(), "");
-            assertTrue(InputStream.class.isAssignableFrom(response.getResponseBodyAsStream().getClass()));
+            assertTrue(response.getResponseBodyAsStream() instanceof InputStream);
             assertEquals(response.getResponseBodyAsStream().read(), -1);
 
         } finally {
