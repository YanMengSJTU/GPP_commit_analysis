diff --git a/client/src/main/java/java/added/Predicate.java b/client/src/main/java/java/added/Predicate.java
new file mode 100644
index 000000000..a81029127
--- /dev/null
+++ b/client/src/main/java/java/added/Predicate.java
@@ -0,0 +1,5 @@
+package java.added;
+
+public class Predicate {
+
+}
diff --git a/client/src/main/java/org/asynchttpclient/ClientStats.java b/client/src/main/java/org/asynchttpclient/ClientStats.java
index 6277be90f..271ac3f16 100644
--- a/client/src/main/java/org/asynchttpclient/ClientStats.java
+++ b/client/src/main/java/org/asynchttpclient/ClientStats.java
@@ -15,8 +15,8 @@
 
 import java.util.Collections;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Objects;
-import java.util.function.ToLongFunction;
 
 /**
  * A record class representing the state of an (@link org.asynchttpclient.AsyncHttpClient).
@@ -42,51 +42,33 @@ public ClientStats(Map<String, HostStats> statsPerHost) {
      * a long representing the total number of connections in the connection pool.
      */
     public long getTotalConnectionCount() {
-        return statsPerHost
-                .values()
-                .stream()
-                //.mapToLong(HostStats::getHostConnectionCount)
-                .mapToLong(new ToLongFunction<HostStats>() {
-					@Override
-					public long applyAsLong(HostStats hS) {
-						return hS.getHostConnectionCount();
-					}
-				})
-                .sum();
+        long total = 0;
+        for (Entry<String, HostStats> e : statsPerHost.entrySet()) {
+        	total += e.getValue().getHostConnectionCount(); 
+        }
+        return total;     
     }
 
     /**
      * @return A long representing the number of active connections in the connection pool.
      */
     public long getTotalActiveConnectionCount() {
-        return statsPerHost
-                .values()
-                .stream()
-                //.mapToLong(HostStats::getHostActiveConnectionCount)
-                .mapToLong(new ToLongFunction<HostStats>() {
-					@Override
-					public long applyAsLong(HostStats hS) {
-						return hS.getHostActiveConnectionCount();
-					}
-				})
-                .sum();
+    	long total = 0;
+        for (Entry<String, HostStats> e : statsPerHost.entrySet()) {
+        	total += e.getValue().getHostActiveConnectionCount();
+        }
+        return total;
     }
 
     /**
      * @return A long representing the number of idle connections in the connection pool.
      */
     public long getTotalIdleConnectionCount() {
-        return statsPerHost
-                .values()
-                .stream()
-                //.mapToLong(HostStats::getHostActiveConnectionCount)
-                .mapToLong(new ToLongFunction<HostStats>() {
-					@Override
-					public long applyAsLong(HostStats hS) {
-						return hS.getHostIdleConnectionCount();
-					}
-				})
-                .sum();
+    	long total = 0;
+        for (Entry<String, HostStats> e : statsPerHost.entrySet()) {
+        	total += e.getValue().getHostIdleConnectionCount(); 
+        }
+        return total;
     }
 
     @Override
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java b/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
index 3cfb728a9..fe8031a93 100644
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.Function;
 
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.exception.TooManyConnectionsException;
@@ -58,14 +57,13 @@ private boolean tryAcquireGlobal() {
     }
 
     private NonBlockingSemaphoreLike getFreeConnectionsForHost(Object partitionKey) {
-        return maxConnectionsPerHost > 0 ?
-                freeChannelsPerHost.computeIfAbsent(partitionKey, new Function<Object, NonBlockingSemaphore>() {
-					@Override
-					public NonBlockingSemaphore apply(Object pk) {
-						return new NonBlockingSemaphore(maxConnectionsPerHost);
-					}
-				}) :
-                NonBlockingSemaphoreInfinite.INSTANCE;
+    	if (maxConnectionsPerHost > 0) {
+    		if (!freeChannelsPerHost.containsKey(partitionKey)) {
+    			return new NonBlockingSemaphore(maxConnectionsPerHost);
+    		} 
+    	}
+    	
+    	return NonBlockingSemaphoreInfinite.INSTANCE;				
     }
 
     private boolean tryAcquirePerHost(Object partitionKey) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
index 626db125c..b0c02252b 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
@@ -278,21 +278,17 @@ public boolean offer(Channel channel, Object partitionKey) {
     private boolean offer0(Channel channel, Object partitionKey, long now) {
         ConcurrentLinkedDeque<IdleChannel> partition = partitions.get(partitionKey);
         if (partition == null) {
-            partition = partitions.computeIfAbsent(partitionKey, new Function<Object, ConcurrentLinkedDeque<IdleChannel>>() {
-				@Override
-				public ConcurrentLinkedDeque<IdleChannel> apply(Object pk) {
-					return new ConcurrentLinkedDeque<>();
-				}
-			});
-//        	partition = new ConcurrentLinkedDeque<>();
+        	partition = new ConcurrentLinkedDeque<>();
+        	partitions.put(partitionKey, partition);
         }
+        
         return partition.offerFirst(new IdleChannel(channel, now));
     }
 
     private void registerChannelCreation(Channel channel, Object partitionKey, long now) {
         ChannelId id = channel.id();
         if (!channelId2Creation.containsKey(id)) {
-            channelId2Creation.putIfAbsent(id, new ChannelCreation(now, partitionKey));
+            channelId2Creation.put(id, new ChannelCreation(now, partitionKey));
         }
     }
 
