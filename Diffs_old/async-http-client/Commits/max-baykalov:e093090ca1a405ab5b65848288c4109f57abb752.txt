diff --git a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
index 19f18a8a0..d06fdba5e 100644
--- a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
+++ b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
@@ -6,7 +6,6 @@
 import java.util.List;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.Function;
 
 public class AsyncHttpClientConfigHelper {
 
@@ -82,18 +81,18 @@ private Properties parsePropertiesFile(String file, boolean required) {
             return props;
         }
 
-        public String getString(String key) {
-            return propsCache.computeIfAbsent(key, new Function<String, String>() {
-				@Override
-				public String apply(String k) {
-				    String value = System.getProperty(k);
-				    if (value == null)
-				        value = customProperties.getProperty(k);
-				    if (value == null)
-				        value = defaultProperties.getProperty(k);
-				    return value;
-				}
-			});
+        public String getString(String key) {    
+            String s = propsCache.get(key);
+            if (s != null) {
+            	return s;
+            } else {
+            	String value = System.getProperty(key);
+			    if (value == null)
+			        value = customProperties.getProperty(key);
+			    if (value == null)
+			        value = defaultProperties.getProperty(key);
+			    return value;
+            }            
         }
 
         public String[] getStringArray(String key) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index 9855ae9b0..a76908a11 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -51,9 +51,6 @@
 import java.util.Map.Entry;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import java.util.stream.Collectors;
 
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLException;
@@ -464,7 +461,8 @@ public ClientStats getClientStats() {
         Map<String, HostStats> statsPerHost = new HashMap<>();
         for (Entry<String, Long> e : totalConnectionsPerHost.entrySet()) {
         	final long totalConnectionCount = e.getValue();
-            final long idleConnectionCount = idleConnectionsPerHost.getOrDefault(e.getKey(), 0L);
+        	//final long idleConnectionCount = idleConnectionsPerHost.getOrDefault(e.getKey(), 0L);
+            final long idleConnectionCount = (idleConnectionsPerHost.get(e.getKey()) != null) ? idleConnectionsPerHost.get(e.getKey()) : 0L;
             final long activeConnectionCount = totalConnectionCount - idleConnectionCount;
         	HostStats h = new HostStats(activeConnectionCount, idleConnectionCount);
         	
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
index e2068d4b3..626db125c 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
@@ -17,7 +17,6 @@
 import static org.asynchttpclient.util.DateUtils.unpreciseMillisTime;
 
 import java.net.InetSocketAddress;
-import java.net.SocketAddress;
 import java.util.*;
 import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
@@ -27,7 +26,6 @@
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.function.Function;
 import java.util.function.Predicate;
-import java.util.stream.Collectors;
 
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.channel.ChannelPool;
@@ -286,6 +284,7 @@ private boolean offer0(Channel channel, Object partitionKey, long now) {
 					return new ConcurrentLinkedDeque<>();
 				}
 			});
+//        	partition = new ConcurrentLinkedDeque<>();
         }
         return partition.offerFirst(new IdleChannel(channel, now));
     }
