diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
index 3fe9cd81b..b5d31083f 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
@@ -76,16 +76,18 @@ public String getResponseBody() throws IOException {
     }
 
     public String getResponseBody(String charset) throws IOException {
-        String contentType = getContentType();
-        if (contentType != null && charset == null) {
-            charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        }
-
+        return AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
+    }
+    
+    private String computeCharset(String charset) {
+    	String contentType = getContentType();
         if (charset == null) {
-            charset = DEFAULT_CHARSET;
+        	if (contentType != null)
+        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
+        	else
+        		charset = DEFAULT_CHARSET;
         }
-
-        return AsyncHttpProviderUtils.contentToString(bodyParts, charset);
+        return charset;
     }
 
     /* @Override */
@@ -181,7 +183,7 @@ public boolean isRedirected() {
      */
     /* @Override */
     public boolean hasResponseStatus() {
-        return (bodyParts != null ? true : false);
+        return bodyParts != null;
     }
 
     /**
@@ -189,7 +191,7 @@ public boolean hasResponseStatus() {
      */
     /* @Override */
     public boolean hasResponseHeaders() {
-        return (headers != null ? true : false);
+        return headers != null;
     }
 
     /**
@@ -197,6 +199,6 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return (bodyParts != null && bodyParts.size() > 0 ? true : false);
+        return bodyParts != null && bodyParts.size() > 0;
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
index 52f3fece3..1f0b52784 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
@@ -257,7 +257,7 @@ public boolean isRedirected() {
                 cookies = convertCookies(builder.build());
 
             } else {
-                cookies = Collections.unmodifiableList(Collections.<Cookie>emptyList());
+                cookies = Collections.emptyList();
             }
         }
         return cookies;
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
index 392b99a44..5854a1212 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
@@ -80,20 +80,23 @@ public String getResponseBody() throws IOException {
     }
 
     public String getResponseBody(String charset) throws IOException {
-        String contentType = getContentType();
-        if (contentType != null && charset == null) {
-            charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        }
-
-        if (charset == null) {
-            charset = DEFAULT_CHARSET;
-        }
 
-        if (!contentComputed.get()) {
-            content = AsyncHttpProviderUtils.contentToString(bodyParts, charset);
+    	if (!contentComputed.get()) {
+            content = AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
         }
         return content;
     }
+    
+    private String computeCharset(String charset) {
+    	String contentType = getContentType();
+        if (charset == null) {
+        	if (contentType != null)
+        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
+        	else
+        		charset = DEFAULT_CHARSET;
+        }
+        return charset;
+    }
 
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
@@ -193,7 +196,7 @@ public boolean isRedirected() {
      */
     /* @Override */
     public boolean hasResponseStatus() {
-        return (bodyParts != null ? true : false);
+        return bodyParts != null;
     }
 
     /**
@@ -201,7 +204,7 @@ public boolean hasResponseStatus() {
      */
     /* @Override */
     public boolean hasResponseHeaders() {
-        return (headers != null ? true : false);
+        return headers != null;
     }
 
     /**
@@ -209,6 +212,6 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return (bodyParts != null && bodyParts.size() > 0 ? true : false);
+        return bodyParts != null && bodyParts.size() > 0;
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
index 12d41f999..28f9eab2b 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
@@ -81,16 +81,7 @@ public String getResponseBody() throws IOException {
     }
 
     public String getResponseBody(String charset) throws IOException {
-        String contentType = getContentType();
-        if (contentType != null && charset == null) {
-            charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        }
-
-        if (charset == null) {
-            charset = DEFAULT_CHARSET;
-        }
-
-        return AsyncHttpProviderUtils.contentToString(bodyParts, charset);
+        return AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
     }
 
     /* @Override */
@@ -115,17 +106,19 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
     }
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
-        String contentType = getContentType();
-        if (contentType != null && charset == null) {
-            charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        }
-
+        String response = AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
+        return response.length() <= maxLength ? response : response.substring(0, maxLength);
+    }
+    
+    private String computeCharset(String charset) {
+    	String contentType = getContentType();
         if (charset == null) {
-            charset = DEFAULT_CHARSET;
+        	if (contentType != null)
+        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
+        	else
+        		charset = DEFAULT_CHARSET;
         }
-
-        String response = AsyncHttpProviderUtils.contentToString(bodyParts, charset);
-        return response.length() <= maxLength ? response : response.substring(0, maxLength);
+        return charset;
     }
 
     /* @Override */
@@ -190,7 +183,7 @@ public boolean isRedirected() {
      */
     /* @Override */
     public boolean hasResponseStatus() {
-        return (status != null ? true : false);
+        return status != null;
     }
 
     /**
@@ -198,7 +191,7 @@ public boolean hasResponseStatus() {
      */
     /* @Override */
     public boolean hasResponseHeaders() {
-        return (headers != null ? true : false);
+        return headers != null;
     }
 
     /**
@@ -206,7 +199,7 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return (bodyParts != null && bodyParts.size() > 0 ? true : false);
+        return bodyParts != null && bodyParts.size() > 0;
     }
 
 }
