diff --git a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
index b3fb5bac1..fde73329f 100644
--- a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
+++ b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
@@ -84,6 +84,7 @@
     protected HostnameVerifier hostnameVerifier;
     protected int ioThreadMultiplier;
     protected boolean strict302Handling;
+    protected boolean useRelativeURIsWithSSLProxies;
 
     protected AsyncHttpClientConfig() {
     }
@@ -117,7 +118,8 @@ private AsyncHttpClientConfig(int maxTotalConnections,
                                   boolean removeQueryParamOnRedirect,
                                   HostnameVerifier hostnameVerifier,
                                   int ioThreadMultiplier,
-                                  boolean strict302Handling) {
+                                  boolean strict302Handling,
+                                  boolean useRelativeURIsWithSSLProxies) {
 
         this.maxTotalConnections = maxTotalConnections;
         this.maxConnectionPerHost = maxConnectionPerHost;
@@ -476,6 +478,16 @@ public boolean isStrict302Handling() {
         return strict302Handling;
     }
 
+    /**
+     * @return<code>true</code> if AHC should use relative URIs instead of absolute ones when talking with a SSL proxy,
+     *  otherwise <code>false</code>.
+     *  
+     *  @since 1.7.12
+     */
+    public boolean isUseRelativeURIsWithSSLProxies() {
+        return useRelativeURIsWithSSLProxies;
+    }
+    
     /**
      * Builder for an {@link AsyncHttpClient}
      */
@@ -493,6 +505,7 @@ public boolean isStrict302Handling() {
         private String userAgent = System.getProperty(ASYNC_CLIENT + "userAgent", "NING/1.0");
         private boolean useProxyProperties = Boolean.getBoolean(ASYNC_CLIENT + "useProxyProperties");
         private boolean allowPoolingConnection = true;
+        private boolean useRelativeURIsWithSSLProxies = Boolean.getBoolean(ASYNC_CLIENT + "useRelativeURIsWithSSLProxies");
         private ScheduledExecutorService reaper = Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors(), new ThreadFactory() {
             public Thread newThread(Runnable r) {
                 Thread t = new Thread(r, "AsyncHttpClient-Reaper");
@@ -955,6 +968,19 @@ public Builder setStrict302Handling(final boolean strict302Handling) {
             this.strict302Handling = strict302Handling;
             return this;
         }
+      
+        /**
+         * Configures this AHC instance to use relative URIs instead of absolute ones when talking with a SSL proxy.
+         *
+         * @param useRelativeURIsWithSSLProxies
+         * @return this
+         *
+         * @since 1.7.2
+         */
+        public Builder setUseRelativeURIsWithSSLProxies(boolean useRelativeURIsWithSSLProxies) {
+            this.useRelativeURIsWithSSLProxies = useRelativeURIsWithSSLProxies;
+            return this;
+        }
 
         /**
          * Create a config builder with values taken from the given prototype configuration.
@@ -1045,7 +1071,8 @@ public AsyncHttpClientConfig build() {
                     removeQueryParamOnRedirect,
                     hostnameVerifier,
                     ioThreadMultiplier,
-                    strict302Handling);
+                    strict302Handling,
+                    useRelativeURIsWithSSLProxies);
         }
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 83fc8cc63..2df221a16 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -851,6 +851,8 @@ private boolean sendAsGrizzlyRequest(final Request request,
                     httpCtx.establishingTunnel = true;
                     builder.method(Method.CONNECT);
                     builder.uri(AsyncHttpProviderUtils.getAuthority(uri));
+                } else if (secure && config.isUseRelativeURIsWithSSLProxies()){
+                    builder.uri(uri.getPath());
                 } else {
                     builder.uri(uri.toString());
                 }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index 40af166ec..25cae1f62 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -629,7 +629,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, AsyncHttpProviderUtils.getAuthority(uri));
         } else {
             String path = null;
-            if (proxyServer != null)
+            if (proxyServer != null && !isSecure(uri) && !config.isUseRelativeURIsWithSSLProxies())
                 path = uri.toString();
             else if (uri.getRawQuery() != null)
                 path = uri.getRawPath() + "?" + uri.getRawQuery();
