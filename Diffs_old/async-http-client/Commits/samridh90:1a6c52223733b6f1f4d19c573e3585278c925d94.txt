diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
index 728e2ec89..abfb6aba7 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
@@ -54,7 +54,13 @@ public void write(final Channel channel, NettyResponseFuture<?> future) {
 
     Object msg;
     if (body instanceof RandomAccessBody && !ChannelManager.isSslHandlerConfigured(channel.pipeline()) && !config.isDisableZeroCopy()) {
-      msg = new BodyFileRegion((RandomAccessBody) body);
+      long contentLength = getContentLength();
+      if (contentLength < 0) {
+        // contentLength unknown in advance, use chunked input
+        msg = new BodyChunkedInput(body);
+      } else {
+        msg = new BodyFileRegion((RandomAccessBody) body);
+      }
 
     } else {
       msg = new BodyChunkedInput(body);
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/InputStreamPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/InputStreamPart.java
index aa7b4a355..28c51cf11 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/InputStreamPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/InputStreamPart.java
@@ -10,24 +10,28 @@
   private final InputStream inputStream;
   private final long contentLength;
 
-  public InputStreamPart(String name, InputStream inputStream, long contentLength, String fileName) {
-    this(name, inputStream, contentLength, fileName, null);
+  public InputStreamPart(String name, InputStream inputStream, String fileName) {
+    this(name, inputStream, fileName, -1);
   }
 
-  public InputStreamPart(String name, InputStream inputStream, long contentLength, String fileName, String contentType) {
-    this(name, inputStream, contentLength, fileName, contentType, null);
+  public InputStreamPart(String name, InputStream inputStream, String fileName, long contentLength) {
+    this(name, inputStream, fileName, contentLength, null);
   }
 
-  public InputStreamPart(String name, InputStream inputStream, long contentLength, String fileName, String contentType, Charset charset) {
-    this(name, inputStream, contentLength, fileName, contentType, charset, null);
+  public InputStreamPart(String name, InputStream inputStream, String fileName, long contentLength, String contentType) {
+    this(name, inputStream, fileName, contentLength, contentType, null);
   }
 
-  public InputStreamPart(String name, InputStream inputStream, long contentLength, String fileName, String contentType, Charset charset,
+  public InputStreamPart(String name, InputStream inputStream, String fileName, long contentLength, String contentType, Charset charset) {
+    this(name, inputStream, fileName, contentLength, contentType, charset, null);
+  }
+
+  public InputStreamPart(String name, InputStream inputStream, String fileName, long contentLength, String contentType, Charset charset,
                          String contentId) {
-    this(name, inputStream, contentLength, fileName, contentType, charset, contentId, null);
+    this(name, inputStream, fileName, contentLength, contentType, charset, contentId, null);
   }
 
-  public InputStreamPart(String name, InputStream inputStream, long contentLength, String fileName, String contentType, Charset charset,
+  public InputStreamPart(String name, InputStream inputStream, String fileName, long contentLength, String contentType, Charset charset,
                          String contentId, String transferEncoding) {
     super(name,
             contentType,
diff --git a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
index 38041338e..b8c862268 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
@@ -106,6 +106,10 @@
   }
 
   public long length() {
+    long contentLength = getContentLength();
+    if (contentLength < 0) {
+      return contentLength;
+    }
     return preContentLength + postContentLength + getContentLength();
   }
 
diff --git a/client/src/test/java/org/asynchttpclient/request/body/InputStreamPartLargeFileTest.java b/client/src/test/java/org/asynchttpclient/request/body/InputStreamPartLargeFileTest.java
index 64bed4e0e..ae9f6ddc6 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/InputStreamPartLargeFileTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/InputStreamPartLargeFileTest.java
@@ -15,7 +15,6 @@
 import org.asynchttpclient.AbstractBasicTest;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.Response;
-import org.asynchttpclient.request.body.multipart.FilePart;
 import org.asynchttpclient.request.body.multipart.InputStreamPart;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
@@ -64,7 +63,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H
   public void testPutImageFile() throws Exception {
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
       InputStream inputStream = new BufferedInputStream(new FileInputStream(LARGE_IMAGE_FILE));
-      Response response = client.preparePut(getTargetUrl()).addBodyPart(new InputStreamPart("test", inputStream, LARGE_IMAGE_FILE.length(), LARGE_IMAGE_FILE.getName(), "application/octet-stream", UTF_8)).execute().get();
+      Response response = client.preparePut(getTargetUrl()).addBodyPart(new InputStreamPart("test", inputStream, LARGE_IMAGE_FILE.getName(), LARGE_IMAGE_FILE.length(), "application/octet-stream", UTF_8)).execute().get();
       assertEquals(response.getStatusCode(), 200);
     }
   }
@@ -76,7 +75,7 @@ public void testPutLargeTextFile() throws Exception {
 
     try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
       Response response = client.preparePut(getTargetUrl())
-              .addBodyPart(new InputStreamPart("test", inputStream, file.length(), file.getName(), "application/octet-stream", UTF_8)).execute().get();
+              .addBodyPart(new InputStreamPart("test", inputStream, file.getName(), file.length(), "application/octet-stream", UTF_8)).execute().get();
       assertEquals(response.getStatusCode(), 200);
     }
   }
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
index 2d8ed9117..fc54d396a 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
@@ -66,7 +66,7 @@ private static MultipartBody buildMultipart() {
     try {
       File testFile = getTestfile();
       InputStream inputStream = new BufferedInputStream(new FileInputStream(testFile));
-      parts.add(new InputStreamPart("isPart", inputStream, testFile.length(), testFile.getName()));
+      parts.add(new InputStreamPart("isPart", inputStream, testFile.getName(), testFile.length()));
     } catch (URISyntaxException | FileNotFoundException e) {
       throw new ExceptionInInitializerError(e);
     }
diff --git a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java
index 567b190fc..879a40a9d 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartUploadTest.java
@@ -121,11 +121,11 @@ public void testSendingSmallFilesAndByteArray() throws Exception {
               .addBodyPart(new StringPart("Name", "Dominic"))
               .addBodyPart(new FilePart("file3", testResource3File, "text/plain", UTF_8))
               .addBodyPart(new StringPart("Age", "3")).addBodyPart(new StringPart("Height", "shrimplike"))
-              .addBodyPart(new InputStreamPart("inputStream3", inputStreamFile3, testResource3File.length(), testResource3File.getName(), "text/plain", UTF_8))
-              .addBodyPart(new InputStreamPart("inputStream2", inputStreamFile2, testResource2File.length(), testResource2File.getName(), "application/x-gzip", null))
+              .addBodyPart(new InputStreamPart("inputStream3", inputStreamFile3, testResource3File.getName(), testResource3File.length(), "text/plain", UTF_8))
+              .addBodyPart(new InputStreamPart("inputStream2", inputStreamFile2, testResource2File.getName(), testResource2File.length(), "application/x-gzip", null))
               .addBodyPart(new StringPart("Hair", "ridiculous")).addBodyPart(new ByteArrayPart("file4",
                       expectedContents.getBytes(UTF_8), "text/plain", UTF_8, "bytearray.txt"))
-              .addBodyPart(new InputStreamPart("inputStream1", inputStreamFile1, testResource1File.length(), testResource1File.getName(), "text/plain", UTF_8))
+              .addBodyPart(new InputStreamPart("inputStream1", inputStreamFile1, testResource1File.getName(), testResource1File.length(), "text/plain", UTF_8))
               .build();
 
       Response res = c.executeRequest(r).get();
@@ -157,12 +157,12 @@ public void sendEmptyFileZeroCopy() throws Exception {
     sendEmptyFile0(false);
   }
 
-  private void sendEmptyFileInputStream0(boolean disableZeroCopy) throws Exception {
+  private void sendEmptyFileInputStream(boolean disableZeroCopy) throws Exception {
     File file = getClasspathFile("empty.txt");
     try (AsyncHttpClient c = asyncHttpClient(config().setDisableZeroCopy(disableZeroCopy))) {
       InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
       Request r = post("http://localhost" + ":" + port1 + "/upload")
-              .addBodyPart(new InputStreamPart("file", inputStream, file.length(), file.getName(), "text/plain", UTF_8)).build();
+              .addBodyPart(new InputStreamPart("file", inputStream, file.getName(), file.length(), "text/plain", UTF_8)).build();
 
       Response res = c.executeRequest(r).get();
       assertEquals(res.getStatusCode(), 200);
@@ -170,13 +170,50 @@ private void sendEmptyFileInputStream0(boolean disableZeroCopy) throws Exception
   }
 
   @Test
-  public void sendEmptyFileInputStream() throws Exception {
-    sendEmptyFileInputStream0(true);
+  public void testSendEmptyFileInputStream() throws Exception {
+    sendEmptyFileInputStream(true);
   }
 
   @Test
-  public void sendEmptyFileInputStreamZeroCopy() throws Exception {
-    sendEmptyFileInputStream0(false);
+  public void testSendEmptyFileInputStreamZeroCopy() throws Exception {
+    sendEmptyFileInputStream(false);
+  }
+
+  private void sendFileInputStream(boolean useContentLength, boolean disableZeroCopy) throws Exception {
+    File file = getClasspathFile("textfile.txt");
+    try (AsyncHttpClient c = asyncHttpClient(config().setDisableZeroCopy(disableZeroCopy))) {
+      InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
+      InputStreamPart part;
+      if (useContentLength) {
+        part = new InputStreamPart("file", inputStream, file.getName(), file.length());
+      } else {
+        part = new InputStreamPart("file", inputStream, file.getName());
+      }
+      Request r = post("http://localhost" + ":" + port1 + "/upload").addBodyPart(part).build();
+
+      Response res = c.executeRequest(r).get();
+      assertEquals(res.getStatusCode(), 200);
+    }
+  }
+
+  @Test
+  public void testSendFileInputStreamUnknownContentLength() throws Exception {
+    sendFileInputStream(false, true);
+  }
+
+  @Test
+  public void testSendFileInputStreamZeroCopyUnknownContentLength() throws Exception {
+    sendFileInputStream(false, false);
+  }
+
+  @Test
+  public void testSendFileInputStreamKnownContentLength() throws Exception {
+    sendFileInputStream(true, true);
+  }
+
+  @Test
+  public void testSendFileInputStreamZeroCopyKnownContentLength() throws Exception {
+    sendFileInputStream(true, false);
   }
 
   /**
