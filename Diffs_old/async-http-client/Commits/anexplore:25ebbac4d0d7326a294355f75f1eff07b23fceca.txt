diff --git a/README.md b/README.md
index fdf03f4a1..936f2c4e2 100644
--- a/README.md
+++ b/README.md
@@ -1,11 +1,15 @@
 # Async Http Client [![Build Status](https://travis-ci.org/AsyncHttpClient/async-http-client.svg?branch=master)](https://travis-ci.org/AsyncHttpClient/async-http-client) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/)
 
-## 修改
-### 2018-08-23
+### 修改
+#### 2018-08-23
 * 为单个Request增加最大跳转次数参数
 * 修改跳转时Cookie策略，在没有CookieStore时仍然将Set-Cookie带入下次请求
 * 修改newNettyRequest方法将request.headers以及cookies中的cookie合并   
 
+#### 2018-08-24
+* 新增max http response body size， 新增TooLongResponseBodyException
+* 新增InputTrafficCountHandler统计http response body原始数据大小(解压之前)
+
 ------
 Follow [@AsyncHttpClient](https://twitter.com/AsyncHttpClient) on Twitter.
 
diff --git a/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
index e0f841366..156e5c587 100644
--- a/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
@@ -319,23 +319,29 @@
   ByteBufAllocator getAllocator();
 
   int getIoThreadsCount();
+  
+  /**
+   * @author anexplore
+   * @return max response size for http response 
+   */
+  int getMaxResponseBodySize();
 
   enum ResponseBodyPartFactory {
 
     EAGER {
       @Override
-      public HttpResponseBodyPart newResponseBodyPart(ByteBuf buf, boolean last) {
-        return new EagerResponseBodyPart(buf, last);
+      public HttpResponseBodyPart newResponseBodyPart(ByteBuf buf, Integer rawLength, boolean last) {
+        return rawLength == null ? new EagerResponseBodyPart(buf, last) : new EagerResponseBodyPart(buf, rawLength, last);
       }
     },
 
     LAZY {
       @Override
-      public HttpResponseBodyPart newResponseBodyPart(ByteBuf buf, boolean last) {
-        return new LazyResponseBodyPart(buf, last);
+      public HttpResponseBodyPart newResponseBodyPart(ByteBuf buf, Integer rawLength, boolean last) {
+        return rawLength == null ? new LazyResponseBodyPart(buf, last) : new LazyResponseBodyPart(buf, rawLength, last);
       }
     };
 
-    public abstract HttpResponseBodyPart newResponseBodyPart(ByteBuf buf, boolean last);
+    public abstract HttpResponseBodyPart newResponseBodyPart(ByteBuf buf, Integer rawLength, boolean last);
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
index 1827728e4..499f873bb 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
@@ -131,6 +131,7 @@
   private final Consumer<Channel> wsAdditionalChannelInitializer;
   private final ResponseBodyPartFactory responseBodyPartFactory;
   private final int ioThreadsCount;
+  private final int maxResponseBodySize;
 
   private DefaultAsyncHttpClientConfig(// http
                                        boolean followRedirect,
@@ -213,7 +214,8 @@ private DefaultAsyncHttpClientConfig(// http
                                        Consumer<Channel> httpAdditionalChannelInitializer,
                                        Consumer<Channel> wsAdditionalChannelInitializer,
                                        ResponseBodyPartFactory responseBodyPartFactory,
-                                       int ioThreadsCount) {
+                                       int ioThreadsCount,
+                                       int maxResponseBodySize) {
 
     // http
     this.followRedirect = followRedirect;
@@ -299,6 +301,7 @@ private DefaultAsyncHttpClientConfig(// http
     this.wsAdditionalChannelInitializer = wsAdditionalChannelInitializer;
     this.responseBodyPartFactory = responseBodyPartFactory;
     this.ioThreadsCount = ioThreadsCount;
+    this.maxResponseBodySize = maxResponseBodySize;
   }
 
   @Override
@@ -649,7 +652,12 @@ public ResponseBodyPartFactory getResponseBodyPartFactory() {
   public int getIoThreadsCount() {
     return ioThreadsCount;
   }
-
+  
+  @Override
+  public int getMaxResponseBodySize() {
+    return maxResponseBodySize;
+  }
+  
   /**
    * Builder for an {@link AsyncHttpClient}
    */
@@ -740,7 +748,8 @@ public int getIoThreadsCount() {
     private Consumer<Channel> wsAdditionalChannelInitializer;
     private ResponseBodyPartFactory responseBodyPartFactory = ResponseBodyPartFactory.EAGER;
     private int ioThreadsCount = defaultIoThreadsCount();
-
+    private int maxResponseBodySize = defaultMaxResponseBodySize();
+    
     public Builder() {
     }
 
@@ -820,6 +829,7 @@ public Builder(AsyncHttpClientConfig config) {
       wsAdditionalChannelInitializer = config.getWsAdditionalChannelInitializer();
       responseBodyPartFactory = config.getResponseBodyPartFactory();
       ioThreadsCount = config.getIoThreadsCount();
+      maxResponseBodySize = config.getMaxResponseBodySize();
     }
 
     // http
@@ -1205,7 +1215,12 @@ public Builder setIoThreadsCount(int ioThreadsCount) {
       this.ioThreadsCount = ioThreadsCount;
       return this;
     }
-
+    
+    public Builder setMaxResponseBodySize(int maxResponseBodySize) {
+      this.maxResponseBodySize = maxResponseBodySize;
+      return this;
+    }
+    
     private ProxyServerSelector resolveProxyServerSelector() {
       if (proxyServerSelector != null)
         return proxyServerSelector;
@@ -1288,7 +1303,8 @@ public DefaultAsyncHttpClientConfig build() {
               httpAdditionalChannelInitializer,
               wsAdditionalChannelInitializer,
               responseBodyPartFactory,
-              ioThreadsCount);
+              ioThreadsCount,
+              maxResponseBodySize);
     }
   }
 }
diff --git a/client/src/main/java/org/asynchttpclient/HttpResponseBodyPart.java b/client/src/main/java/org/asynchttpclient/HttpResponseBodyPart.java
index 053aa28ff..833d5e934 100644
--- a/client/src/main/java/org/asynchttpclient/HttpResponseBodyPart.java
+++ b/client/src/main/java/org/asynchttpclient/HttpResponseBodyPart.java
@@ -33,6 +33,11 @@ public HttpResponseBodyPart(boolean last) {
    */
   public abstract int length();
 
+  /**
+   * @return length of this part in bytes before uncompress
+   */
+  public abstract int rawLength();
+  
   /**
    * @return the response body's part bytes received.
    */
diff --git a/client/src/main/java/org/asynchttpclient/Response.java b/client/src/main/java/org/asynchttpclient/Response.java
index f3bc6e3a9..3e86e8f0a 100644
--- a/client/src/main/java/org/asynchttpclient/Response.java
+++ b/client/src/main/java/org/asynchttpclient/Response.java
@@ -81,7 +81,14 @@
    * @return the entire response body as a String.
    */
   String getResponseBody();
-
+  
+  /**
+   * The entire response body raw size in bytes(before uncompress)
+   * 
+   * @return the entire response body raw size in bytes(before uncompress)
+   */
+  int getRawResponseBodySize();
+  
   /**
    * Return the request {@link Uri}. Note that if the request got redirected, the value of the {@link Uri} will be the last valid redirect url.
    *
diff --git a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
index 274537a6a..2124347b1 100644
--- a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
+++ b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
@@ -69,7 +69,8 @@
   public static final String SHUTDOWN_TIMEOUT_CONFIG = "shutdownTimeout";
   public static final String USE_NATIVE_TRANSPORT_CONFIG = "useNativeTransport";
   public static final String IO_THREADS_COUNT_CONFIG = "ioThreadsCount";
-
+  public static final String MAX_RESPONSE_BODY_SIZE = "maxResponseBodySize";
+  
   public static final String AHC_VERSION;
 
   static {
@@ -284,4 +285,8 @@ public static boolean defaultUseNativeTransport() {
   public static int defaultIoThreadsCount() {
     return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + IO_THREADS_COUNT_CONFIG);
   }
+  
+  public static int defaultMaxResponseBodySize() {
+    return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + MAX_RESPONSE_BODY_SIZE);
+  }
 }
diff --git a/client/src/main/java/org/asynchttpclient/exception/TooLongResponseBodyException.java b/client/src/main/java/org/asynchttpclient/exception/TooLongResponseBodyException.java
new file mode 100644
index 000000000..8f68fb249
--- /dev/null
+++ b/client/src/main/java/org/asynchttpclient/exception/TooLongResponseBodyException.java
@@ -0,0 +1,11 @@
+package org.asynchttpclient.exception;
+
+import java.io.IOException;
+
+@SuppressWarnings("serial")
+public class TooLongResponseBodyException extends IOException {
+  
+  public TooLongResponseBodyException (String message) {
+    super(message);
+  }
+}
diff --git a/client/src/main/java/org/asynchttpclient/netty/EagerResponseBodyPart.java b/client/src/main/java/org/asynchttpclient/netty/EagerResponseBodyPart.java
index 8f2b18961..02108c488 100755
--- a/client/src/main/java/org/asynchttpclient/netty/EagerResponseBodyPart.java
+++ b/client/src/main/java/org/asynchttpclient/netty/EagerResponseBodyPart.java
@@ -26,12 +26,20 @@
 public class EagerResponseBodyPart extends HttpResponseBodyPart {
 
   private final byte[] bytes;
-
+  private final int rawLength;
+  
   public EagerResponseBodyPart(ByteBuf buf, boolean last) {
     super(last);
     bytes = byteBuf2Bytes(buf);
+    rawLength = bytes.length;
   }
 
+  public EagerResponseBodyPart(ByteBuf buf, int rawLength, boolean last) {
+    super(last);
+    bytes = byteBuf2Bytes(buf);
+    this.rawLength = rawLength;
+  }  
+  
   /**
    * Return the response body's part bytes received.
    *
@@ -47,6 +55,11 @@ public int length() {
     return bytes.length;
   }
 
+  @Override
+  public int rawLength() {
+    return rawLength;
+  }
+  
   @Override
   public ByteBuffer getBodyByteBuffer() {
     return ByteBuffer.wrap(bytes);
diff --git a/client/src/main/java/org/asynchttpclient/netty/LazyResponseBodyPart.java b/client/src/main/java/org/asynchttpclient/netty/LazyResponseBodyPart.java
index 1abe8ce11..9c23c21e9 100755
--- a/client/src/main/java/org/asynchttpclient/netty/LazyResponseBodyPart.java
+++ b/client/src/main/java/org/asynchttpclient/netty/LazyResponseBodyPart.java
@@ -24,12 +24,20 @@
 public class LazyResponseBodyPart extends HttpResponseBodyPart {
 
   private final ByteBuf buf;
-
+  private final int rawLength;
+  
   public LazyResponseBodyPart(ByteBuf buf, boolean last) {
     super(last);
     this.buf = buf;
+    this.rawLength = this.buf.readableBytes();
   }
 
+  public LazyResponseBodyPart(ByteBuf buf, int rawLength, boolean last) {
+    super(last);
+    this.buf = buf;
+    this.rawLength = rawLength;
+  }
+  
   public ByteBuf getBuf() {
     return buf;
   }
@@ -39,6 +47,11 @@ public int length() {
     return buf.readableBytes();
   }
 
+  @Override
+  public int rawLength() {
+    return rawLength;
+  }
+  
   /**
    * Return the response body's part bytes received.
    *
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
index a923c321f..f631ea344 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
@@ -200,6 +200,18 @@ public InputStream getResponseBodyAsStream() {
     return new ByteArrayInputStream(getResponseBodyAsBytes());
   }
 
+  @Override
+  public int getRawResponseBodySize() {
+    if (!isNonEmpty(bodyParts)) {
+      return 0;
+    }
+    int size = 0;
+    for (HttpResponseBodyPart part : bodyParts) {
+      size += part.rawLength();
+    }
+    return size;
+  }
+  
   @Override
   public String toString() {
     StringBuilder sb = new StringBuilder();
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
index cb3b05fbd..2ecc522d1 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
@@ -76,7 +76,12 @@
   @SuppressWarnings("rawtypes")
   private static final AtomicReferenceFieldUpdater<NettyResponseFuture, Object> PARTITION_KEY_LOCK_FIELD = AtomicReferenceFieldUpdater
           .newUpdater(NettyResponseFuture.class, Object.class, "partitionKeyLock");
-
+  @SuppressWarnings("rawtypes")
+  private static final AtomicIntegerFieldUpdater<NettyResponseFuture> RAW_BODY_SIZE_UPDATER = AtomicIntegerFieldUpdater
+          .newUpdater(NettyResponseFuture.class, "latestRawBodyPartSize");
+  @SuppressWarnings("rawtypes")
+  private static final AtomicIntegerFieldUpdater<NettyResponseFuture> REAL_BODY_SIZE_UPDATER = AtomicIntegerFieldUpdater
+          .newUpdater(NettyResponseFuture.class, "realBodySize");
   private final long start = unpreciseMillisTime();
   private final ChannelPoolPartitioning connectionPoolPartitioning;
   private final ConnectionSemaphore connectionSemaphore;
@@ -91,6 +96,12 @@
   private volatile int inAuth = 0;
   private volatile int inProxyAuth = 0;
   private volatile int statusReceived = 0;
+  // raw size of the lastest http body part size
+  @SuppressWarnings("unused")
+  private volatile int latestRawBodyPartSize = 0;
+  // body size after decompress
+  @SuppressWarnings("unused")
+  private volatile int realBodySize = 0;
   @SuppressWarnings("unused")
   private volatile int contentProcessed = 0;
   @SuppressWarnings("unused")
@@ -362,6 +373,14 @@ public int incrementAndGetCurrentRedirectCount() {
     return REDIRECT_COUNT_UPDATER.incrementAndGet(this);
   }
 
+  public int addAndGetRealBodySize(int bodyPartSize) {
+    return REAL_BODY_SIZE_UPDATER.addAndGet(this, bodyPartSize);
+  }
+  
+  public int getAndSetLastestRawBodyPartSize(int rawBodyPartSize) {
+    return RAW_BODY_SIZE_UPDATER.getAndSet(this, rawBodyPartSize);
+  }
+  
   public TimeoutsHolder getTimeoutsHolder() {
     return TIMEOUTS_HOLDER_FIELD.get(this);
   }
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index 8deb22e53..3a7838569 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -44,6 +44,7 @@
 import org.asynchttpclient.netty.OnLastHttpContentCallback;
 import org.asynchttpclient.netty.handler.AsyncHttpClientHandler;
 import org.asynchttpclient.netty.handler.HttpHandler;
+import org.asynchttpclient.netty.handler.InputTrafficCountHandler;
 import org.asynchttpclient.netty.handler.WebSocketHandler;
 import org.asynchttpclient.netty.request.NettyRequestSender;
 import org.asynchttpclient.netty.ssl.DefaultSslEngineFactory;
@@ -77,6 +78,7 @@
   public static final String AHC_HTTP_HANDLER = "ahc-http";
   public static final String AHC_WS_HANDLER = "ahc-ws";
   public static final String LOGGING_HANDLER = "logging";
+  public static final String INPUT_TRAFFIC_HANDLER = "inputTrafficHandler";
   private static final Logger LOGGER = LoggerFactory.getLogger(ChannelManager.class);
   private final AsyncHttpClientConfig config;
   private final SslEngineFactory sslEngineFactory;
@@ -214,6 +216,7 @@ public void configureBootstraps(NettyRequestSender requestSender) {
       protected void initChannel(Channel ch) {
         ChannelPipeline pipeline = ch.pipeline()
                 .addLast(HTTP_CLIENT_CODEC, newHttpClientCodec())
+                .addLast(INPUT_TRAFFIC_HANDLER, new InputTrafficCountHandler())
                 .addLast(INFLATER_HANDLER, newHttpContentDecompressor())
                 .addLast(CHUNKED_WRITER_HANDLER, new ChunkedWriteHandler())
                 .addLast(AHC_HTTP_HANDLER, httpHandler);
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
index de78537ac..9fcd7c761 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
@@ -83,7 +83,7 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
           ByteBuf content = ((HttpContent) msg).content();
           // Republish as a HttpResponseBodyPart
           if (content.isReadable()) {
-            HttpResponseBodyPart part = config.getResponseBodyPartFactory().newResponseBodyPart(content, false);
+            HttpResponseBodyPart part = config.getResponseBodyPartFactory().newResponseBodyPart(content, null, false);
             ctx.fireChannelRead(part);
           }
           if (msg instanceof LastHttpContent) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
index ad29808d9..7d64150ad 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
@@ -22,6 +22,7 @@
 import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.HttpResponseBodyPart;
+import org.asynchttpclient.exception.TooLongResponseBodyException;
 import org.asynchttpclient.handler.StreamedAsyncHandler;
 import org.asynchttpclient.netty.NettyResponseFuture;
 import org.asynchttpclient.netty.NettyResponseStatus;
@@ -73,7 +74,14 @@ private void handleHttpResponse(final HttpResponse response, final Channel chann
 
     NettyResponseStatus status = new NettyResponseStatus(future.getUri(), response, channel);
     HttpHeaders responseHeaders = response.headers();
-
+    // check content-length @anexplore
+    if (config.getMaxResponseBodySize() > 0) {
+      Integer contentLength = responseHeaders.getInt(HttpHeaderNames.CONTENT_LENGTH);
+      if (contentLength != null && contentLength > config.getMaxResponseBodySize()) {
+        throw new TooLongResponseBodyException(
+            String.format("response body size %d exceed max size %d", contentLength, config.getMaxResponseBodySize()));
+      }
+    }
     if (!interceptors.exitAfterIntercept(channel, future, handler, response, status, responseHeaders)) {
       boolean abort = abortAfterHandlingStatus(handler, status) || //
               abortAfterHandlingHeaders(handler, responseHeaders) || //
@@ -104,8 +112,17 @@ private void handleChunk(HttpContent chunk,
 
     ByteBuf buf = chunk.content();
     if (!abort && !(handler instanceof StreamedAsyncHandler) && (buf.isReadable() || last)) {
-      HttpResponseBodyPart bodyPart = config.getResponseBodyPartFactory().newResponseBodyPart(buf, last);
+      int rawBodyPartSize = future.getAndSetLastestRawBodyPartSize(0);
+      HttpResponseBodyPart bodyPart = config.getResponseBodyPartFactory().newResponseBodyPart(buf, rawBodyPartSize, last);
       abort = handler.onBodyPartReceived(bodyPart) == State.ABORT;
+      // exceed max body size ? add by @anexplore
+      if (config.getMaxResponseBodySize() > 0) {
+        int currentRealBodySize = future.addAndGetRealBodySize(bodyPart.length());
+        if (currentRealBodySize > config.getMaxResponseBodySize()) {
+          throw new TooLongResponseBodyException(
+              String.format("response body size %d exceed max size %d", currentRealBodySize, config.getMaxResponseBodySize()));
+        }
+      }
     }
 
     if (abort || last) {
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/InputTrafficCountHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/InputTrafficCountHandler.java
new file mode 100644
index 000000000..8c5dc17c6
--- /dev/null
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/InputTrafficCountHandler.java
@@ -0,0 +1,33 @@
+package org.asynchttpclient.netty.handler;
+
+import org.asynchttpclient.netty.NettyResponseFuture;
+import org.asynchttpclient.netty.channel.Channels;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+import io.netty.handler.codec.http.HttpContent;
+
+public class InputTrafficCountHandler extends ChannelInboundHandlerAdapter {
+  
+  protected final Logger logger = LoggerFactory.getLogger(getClass());
+  
+  @Override
+  public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exception {
+    if (logger.isDebugEnabled()) {
+      logger.debug("http incoming traffic: {}", msg);
+    }
+    if (msg instanceof HttpContent) {
+      int size = HttpContent.class.cast(msg).content().readableBytes();
+      Channel channel = ctx.channel();
+      Object attribute = Channels.getAttribute(channel);
+      if (attribute != null && attribute instanceof NettyResponseFuture) {
+        NettyResponseFuture.class.cast(attribute).getAndSetLastestRawBodyPartSize(size);
+      }
+    }
+    ctx.fireChannelRead(msg);
+  }
+
+}
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
index 0b4325bb5..ee8b910ca 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
@@ -43,6 +43,7 @@
 import static org.asynchttpclient.util.HttpUtils.followRedirect;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
 
+
 public class Redirect30xInterceptor {
 
   public static final Set<Integer> REDIRECT_STATUSES = new HashSet<>();
@@ -83,7 +84,7 @@ public boolean exitAfterHandlingRedirect(Channel channel,
       if (hasRefreshHeader(response)) {
         location = decodeRefreshUri(responseHeaders.get(REFRESH));
       }
-      if (isNonEmpty(location)) {
+      if (location == null || location.isEmpty()) {
         return false;
       }
       int redirectCount = future.incrementAndGetCurrentRedirectCount();
@@ -208,7 +209,7 @@ private HttpHeaders propagatedHeaders(Request request, Realm realm, boolean keep
    * @return if has Refresh header
    */
   private boolean hasRefreshHeader(HttpResponse response) {
-    return !isNonEmpty(response.headers().get(REFRESH));
+    return isNonEmpty(response.headers().get(REFRESH));
   }
   
   /**
@@ -217,7 +218,7 @@ private boolean hasRefreshHeader(HttpResponse response) {
    * @return refresh target uri
    */
   private String decodeRefreshUri(String refresh) {
-    if (isNonEmpty(refresh)) {
+    if (refresh == null || refresh.isEmpty()) {
       return null;
     }
     int eqPos = refresh.indexOf('=');
diff --git a/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java b/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java
index b5c4e23ec..f600ab52f 100644
--- a/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java
+++ b/client/src/main/java/org/asynchttpclient/webdav/WebDavResponse.java
@@ -117,4 +117,9 @@ public SocketAddress getLocalAddress() {
   public Document getBodyAsXML() {
     return document;
   }
+
+  @Override
+  public int getRawResponseBodySize() {
+    return response.getRawResponseBodySize();
+  }
 }
diff --git a/client/src/main/resources/org/asynchttpclient/config/ahc-default.properties b/client/src/main/resources/org/asynchttpclient/config/ahc-default.properties
index cdc632f70..bae7b5281 100644
--- a/client/src/main/resources/org/asynchttpclient/config/ahc-default.properties
+++ b/client/src/main/resources/org/asynchttpclient/config/ahc-default.properties
@@ -48,3 +48,4 @@ org.asynchttpclient.shutdownQuietPeriod=2000
 org.asynchttpclient.shutdownTimeout=15000
 org.asynchttpclient.useNativeTransport=false
 org.asynchttpclient.ioThreadsCount=0
+org.asynchttpclient.maxResponseBodySize=0
\ No newline at end of file
diff --git a/extras/typesafeconfig/src/main/java/org/asynchttpclient/extras/typesafeconfig/AsyncHttpClientTypesafeConfig.java b/extras/typesafeconfig/src/main/java/org/asynchttpclient/extras/typesafeconfig/AsyncHttpClientTypesafeConfig.java
index 891705261..e340d421b 100644
--- a/extras/typesafeconfig/src/main/java/org/asynchttpclient/extras/typesafeconfig/AsyncHttpClientTypesafeConfig.java
+++ b/extras/typesafeconfig/src/main/java/org/asynchttpclient/extras/typesafeconfig/AsyncHttpClientTypesafeConfig.java
@@ -410,4 +410,9 @@ public int getIoThreadsCount() {
         ? Optional.ofNullable(func.apply(key))
         : Optional.empty();
   }
+
+  @Override
+  public int getMaxResponseBodySize() {
+	return getIntegerOpt(MAX_RESPONSE_BODY_SIZE).orElse(defaultMaxResponseBodySize());
+  }
 }
