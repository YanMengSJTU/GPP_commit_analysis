diff --git a/src/main/java/com/ning/http/client/Realm.java b/src/main/java/com/ning/http/client/Realm.java
index 8e68142c9..c15eacb08 100644
--- a/src/main/java/com/ning/http/client/Realm.java
+++ b/src/main/java/com/ning/http/client/Realm.java
@@ -16,6 +16,7 @@
  */
 package com.ning.http.client;
 
+import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 
 import org.slf4j.Logger;
@@ -475,7 +476,7 @@ public RealmBuilder clone(Realm clone) {
         private void newCnonce() {
             try {
                 MessageDigest md = MessageDigest.getInstance("MD5");
-                byte[] b = md.digest(String.valueOf(System.currentTimeMillis()).getBytes("ISO-8859-1"));
+                byte[] b = md.digest(String.valueOf(millisTime()).getBytes("ISO-8859-1"));
                 cnonce = toHexString(b);
             } catch (Exception e) {
                 throw new SecurityException(e);
diff --git a/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java b/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
index 00023369e..cc84e89f0 100644
--- a/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
+++ b/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
@@ -38,6 +38,7 @@
 
 package com.ning.http.client.ntlm;
 
+import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 
 import java.io.UnsupportedEncodingException;
@@ -516,7 +517,7 @@ private static int readUShort(byte[] src, int index) throws NTLMEngineException
         byte[] blobSignature = new byte[]{(byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00};
         byte[] reserved = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
         byte[] unknown1 = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
-        long time = System.currentTimeMillis();
+        long time = millisTime();
         time += 11644473600000l; // milliseconds from January 1, 1601 -> epoch.
         time *= 10000; // tenths of a microsecond.
         // convert to little-endian byte array.
diff --git a/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java b/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java
index e33ad87c7..98d4105e0 100644
--- a/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java
+++ b/src/main/java/com/ning/http/client/oauth/OAuthSignatureCalculator.java
@@ -16,6 +16,7 @@
  */
 package com.ning.http.client.oauth;
 
+import static com.ning.http.util.DateUtil.millisTime;
 
 import com.ning.http.client.FluentStringsMap;
 import com.ning.http.client.Request;
@@ -78,7 +79,7 @@ public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth)
         mac = new ThreadSafeHMAC(consumerAuth, userAuth);
         this.consumerAuth = consumerAuth;
         this.userAuth = userAuth;
-        random = new Random(System.identityHashCode(this) + System.currentTimeMillis());
+        random = new Random(System.identityHashCode(this) + millisTime());
     }
 
     //@Override // silly 1.5; doesn't allow this for interfaces
@@ -86,7 +87,7 @@ public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth)
     public void calculateAndAddSignature(String baseURL, Request request, RequestBuilderBase<?> requestBuilder) {
         String method = request.getMethod(); // POST etc
         String nonce = generateNonce();
-        long timestamp = System.currentTimeMillis() / 1000L;
+        long timestamp = millisTime() / 1000L;
         String signature = calculateSignature(method, baseURL, timestamp, nonce, request.getParams(), request.getQueryParams());
         String headerValue = constructAuthHeader(signature, nonce, timestamp);
         requestBuilder.setHeader(HEADER_AUTHORIZATION, headerValue);
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
index 0b8abff3e..67706fbea 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.apache;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.Request;
 import com.ning.http.client.listenable.AbstractListenableFuture;
@@ -41,7 +43,7 @@
     private final AtomicBoolean timedOut = new AtomicBoolean(false);
     private final AtomicBoolean isDone = new AtomicBoolean(false);
     private final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();
-    private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());
+    private final AtomicLong touch = new AtomicLong(millisTime());
     private final AtomicBoolean contentProcessed = new AtomicBoolean(false);
     private final Request request;
     private final HttpMethodBase method;
@@ -174,7 +176,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
                 content = innerFuture.get(timeout, unit);
             }
         } catch (TimeoutException t) {
-            if (!contentProcessed.get() && timeout != -1 && ((System.currentTimeMillis() - touch.get()) <= responseTimeoutInMs)) {
+            if (!contentProcessed.get() && timeout != -1 && ((millisTime() - touch.get()) <= responseTimeoutInMs)) {
                 return get(timeout, unit);
             }
 
@@ -197,11 +199,11 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
      * @return <code>true</code> if response has expired and should be terminated.
      */
     public boolean hasExpired() {
-        return responseTimeoutInMs != -1 && ((System.currentTimeMillis() - touch.get()) >= responseTimeoutInMs);
+        return responseTimeoutInMs != -1 && ((millisTime() - touch.get()) >= responseTimeoutInMs);
     }
 
     public void touch() {
-        touch.set(System.currentTimeMillis());
+        touch.set(millisTime());
     }
 
     public Request getRequest() {
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 7b241cbf5..63f494946 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -13,6 +13,7 @@
 
 package com.ning.http.client.providers.grizzly;
 
+import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 
 import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
@@ -427,7 +428,7 @@ void touchConnection(final Connection c, final Request request) {
         if (config != null) {
             final long timeout = config.getRequestTimeoutInMs();
             if (timeout > 0) {
-                final long newTimeout = System.currentTimeMillis() + timeout;
+                final long newTimeout = millisTime() + timeout;
                 if (resolver != null) {
                     resolver.setTimeoutMillis(c, newTimeout);
                 }
@@ -436,7 +437,7 @@ void touchConnection(final Connection c, final Request request) {
             final long timeout = clientConfig.getRequestTimeoutInMs();
             if (timeout > 0) {
                 if (resolver != null) {
-                    resolver.setTimeoutMillis(c, System.currentTimeMillis() + timeout);
+                    resolver.setTimeoutMillis(c, millisTime() + timeout);
                 }
             }
         }
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
index e3478e576..00c7c46bc 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
@@ -13,6 +13,8 @@
 
 package com.ning.http.client.providers.grizzly;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.ConnectionsPool;
 
@@ -310,7 +312,7 @@ private static boolean wasModified(final Long l1, final Long l2) {
             @Override
             public void run() {
                 while (isStarted) {
-                    final long currentTimeMs = System.currentTimeMillis();
+                    final long currentTimeMs = millisTime();
 
                     for (final IdleConnectionQueue delayQueue : queues) {
                         if (delayQueue.queue.isEmpty()) continue;
@@ -381,7 +383,7 @@ public IdleConnectionQueue(final long timeout) {
 
             void offer(final Connection c) {
                 if (timeout >= 0) {
-                    resolver.setTimeoutMs(c, System.currentTimeMillis() + timeout);
+                    resolver.setTimeoutMs(c, millisTime() + timeout);
                 }
                 queue.offer(c);
                 count.incrementAndGet();
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java b/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
index 9553e0215..0791a4a56 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.jdk;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.ListenableFuture;
 
@@ -66,7 +68,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
                 content = innerFuture.get(timeout, unit);
             }
         } catch (Throwable t) {
-            if (!contentProcessed.get() && timeout != -1 && ((System.currentTimeMillis() - touch.get()) <= responseTimeoutInMs)) {
+            if (!contentProcessed.get() && timeout != -1 && ((millisTime() - touch.get()) <= responseTimeoutInMs)) {
                 return get(timeout, unit);
             }
             timedOut.set(true);
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java b/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
index 4666459dc..e029183f5 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.jdk;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.listenable.AbstractListenableFuture;
 import org.slf4j.Logger;
@@ -40,7 +42,7 @@
     protected final AtomicBoolean timedOut = new AtomicBoolean(false);
     protected final AtomicBoolean isDone = new AtomicBoolean(false);
     protected final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();
-    protected final AtomicLong touch = new AtomicLong(System.currentTimeMillis());
+    protected final AtomicLong touch = new AtomicLong(millisTime());
     protected final AtomicBoolean contentProcessed = new AtomicBoolean(false);
     protected final HttpURLConnection urlConnection;
     private boolean writeHeaders;
@@ -126,7 +128,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
                 content = innerFuture.get(timeout, unit);
             }
         } catch (TimeoutException t) {
-            if (!contentProcessed.get() && timeout != -1 && ((System.currentTimeMillis() - touch.get()) <= responseTimeoutInMs)) {
+            if (!contentProcessed.get() && timeout != -1 && ((millisTime() - touch.get()) <= responseTimeoutInMs)) {
                 return get(timeout, unit);
             }
 
@@ -149,7 +151,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
      * @return <code>true</code> if response has expired and should be terminated.
      */
     public boolean hasExpired() {
-        return responseTimeoutInMs != -1 && ((System.currentTimeMillis() - touch.get()) > responseTimeoutInMs);
+        return responseTimeoutInMs != -1 && ((millisTime() - touch.get()) > responseTimeoutInMs);
     }
 
     /**
@@ -157,7 +159,7 @@ public boolean hasExpired() {
      */
     /* @Override  */
     public void touch() {
-        touch.set(System.currentTimeMillis());
+        touch.set(millisTime());
     }
 
     /**
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
index 43c788e4a..2c232fb2a 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.client.providers.netty;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.ConnectionsPool;
 import org.jboss.netty.channel.Channel;
 import org.slf4j.Logger;
@@ -61,7 +63,7 @@ public NettyConnectionsPool(int maxTotalConnections, int maxConnectionPerHost, l
         IdleChannel(String uri, Channel channel) {
             this.uri = uri;
             this.channel = channel;
-            this.start = System.currentTimeMillis();
+            this.start = millisTime();
         }
 
         @Override
@@ -97,7 +99,7 @@ public void run() {
                 }
 
                 List<IdleChannel> channelsInTimeout = new ArrayList<IdleChannel>();
-                long currentTime = System.currentTimeMillis();
+                long currentTime = millisTime();
 
                 for (IdleChannel idleChannel : channel2IdleChannel.values()) {
                     long age = currentTime - idleChannel.start;
@@ -109,7 +111,7 @@ public void run() {
                         channelsInTimeout.add(idleChannel);
                     }
                 }
-                long endConcurrentLoop = System.currentTimeMillis();
+                long endConcurrentLoop = millisTime();
 
                 for (IdleChannel idleChannel : channelsInTimeout) {
                     Object attachment = idleChannel.channel.getPipeline().getContext(NettyAsyncHttpProvider.class).getAttachment();
@@ -136,7 +138,7 @@ public void run() {
                         openChannels += hostChannels.size();
                     }
                     log.trace(String.format("%d channel open, %d idle channels closed (times: 1st-loop=%d, 2nd-loop=%d).\n",
-                            openChannels, channelsInTimeout.size(), endConcurrentLoop - currentTime, System.currentTimeMillis() - endConcurrentLoop));
+                            openChannels, channelsInTimeout.size(), endConcurrentLoop - currentTime, millisTime() - endConcurrentLoop));
                 }
 
             } catch (Throwable t) {
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
index 560ed65e4..dae8095c4 100755
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.providers.netty;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.ConnectionPoolKeyStrategy;
 import com.ning.http.client.ProxyServer;
@@ -74,8 +76,8 @@
     private volatile Future<?> reaperFuture;
     private final AtomicBoolean inAuth = new AtomicBoolean(false);
     private final AtomicBoolean statusReceived = new AtomicBoolean(false);
-    private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());
-    private final long start = System.currentTimeMillis();
+    private final AtomicLong touch = new AtomicLong(millisTime());
+    private final long start = millisTime();
     private final NettyAsyncHttpProvider asyncHttpProvider;
     private final AtomicReference<STATE> state = new AtomicReference<STATE>(STATE.NEW);
     private final AtomicBoolean contentProcessed = new AtomicBoolean(false);
@@ -189,7 +191,7 @@ public boolean cancel(boolean force) {
      * @return <code>true</code> if response has expired and should be terminated.
      */
     public boolean hasExpired() {
-        long now = System.currentTimeMillis();
+        long now = millisTime();
         return idleConnectionTimeoutInMs != -1 && ((now - touch.get()) >= idleConnectionTimeoutInMs)
                 || responseTimeoutInMs != -1 && ((now - start) >= responseTimeoutInMs);
     }
@@ -408,7 +410,7 @@ public boolean getAndSetStatusReceived(boolean sr) {
      */
     /* @Override */
     public void touch() {
-        touch.set(System.currentTimeMillis());
+        touch.set(millisTime());
     }
 
     /**
diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index 60b937966..265a9c6fc 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.util;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -467,7 +469,7 @@ public static Cookie parseCookie(String value) {
 
     public static int convertExpireField(String timestring) {
         String trimmedTimeString = removeQuote(timestring.trim());
-        long now = System.currentTimeMillis();
+        long now = millisTime();
         Date date = null;
 
         for (SimpleDateFormat sdf : simpleDateFormat.get()) {
diff --git a/src/main/java/com/ning/http/util/DateUtil.java b/src/main/java/com/ning/http/util/DateUtil.java
index 54def8d8c..8e5e3fe6f 100644
--- a/src/main/java/com/ning/http/util/DateUtil.java
+++ b/src/main/java/com/ning/http/util/DateUtil.java
@@ -231,4 +231,7 @@ public DateParseException(String message) {
 
     }
 
+    public static long millisTime() {
+        return System.nanoTime() / 1000000;
+    }
 }
diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index d117458f7..eb6bb5eda 100755
--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -15,6 +15,7 @@
  */
 package com.ning.http.client.async;
 
+import static com.ning.http.util.DateUtil.millisTime;
 import static com.ning.http.util.MiscUtil.isNonEmpty;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNull;
@@ -1591,7 +1592,7 @@ public void idleRequestTimeoutTest() throws Exception {
             h.add("Content-Type", "application/x-www-form-urlencoded");
             h.add("LockThread", "true");
 
-            long t1 = System.currentTimeMillis();
+            long t1 = millisTime();
             try {
                 client.prepareGet(getTargetUrl()).setHeaders(h).setUrl(getTargetUrl()).execute(new AsyncHandlerAdapter() {
 
@@ -1603,7 +1604,7 @@ public void onThrowable(Throwable t) {
                 }).get();
                 Assert.fail();
             } catch (Throwable ex) {
-                final long elapsedTime = System.currentTimeMillis() - t1;
+                final long elapsedTime = millisTime() - t1;
                 System.out.println("EXPIRED: " + (elapsedTime));
                 Assert.assertNotNull(ex.getCause());
                 Assert.assertTrue(elapsedTime >= 10000 && elapsedTime <= 25000);
diff --git a/src/test/java/com/ning/http/client/async/PerRequestTimeoutTest.java b/src/test/java/com/ning/http/client/async/PerRequestTimeoutTest.java
index 72de9b993..22655effc 100644
--- a/src/test/java/com/ning/http/client/async/PerRequestTimeoutTest.java
+++ b/src/test/java/com/ning/http/client/async/PerRequestTimeoutTest.java
@@ -15,6 +15,8 @@
  */
 package com.ning.http.client.async;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.AsyncCompletionHandler;
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
@@ -171,13 +173,13 @@ public Response onCompleted(Response response) throws Exception {
 
                 @Override
                 public STATE onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
-                    times[0] = System.currentTimeMillis();
+                    times[0] = millisTime();
                     return super.onBodyPartReceived(content);
                 }
 
                 @Override
                 public void onThrowable(Throwable t) {
-                    times[1] = System.currentTimeMillis();
+                    times[1] = millisTime();
                     super.onThrowable(t);
                 }
             });
diff --git a/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java b/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
index c49eee8dc..65cddcd89 100644
--- a/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
+++ b/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
@@ -13,6 +13,8 @@
 
 package com.ning.http.client.providers.netty;
 
+import static com.ning.http.util.DateUtil.millisTime;
+
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseHeaders;
@@ -38,7 +40,7 @@ public void testCookieParseExpires() {
         SimpleDateFormat sdf = new SimpleDateFormat("EEE, dd-MMM-yyyy HH:mm:ss z", Locale.US);
         sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
 
-        Date date = new Date(System.currentTimeMillis() + 60000); // sdf.parse( dateString );
+        Date date = new Date(millisTime() + 60000); // sdf.parse( dateString );
         final String cookieDef = String.format("efmembercheck=true; expires=%s; path=/; domain=.eclipse.org", sdf.format(date));
 
         NettyResponse response = new NettyResponse(new ResponseStatus(null, null, null), new HttpResponseHeaders(null, null, false) {
