diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
index f15fd18ab..c7e7e0e2a 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
@@ -16,6 +16,8 @@
 import com.ning.http.client.Request;
 import com.ning.http.client.listenable.AbstractListenableFuture;
 import org.apache.commons.httpclient.HttpMethodBase;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
@@ -30,6 +32,8 @@
 
 public class ApacheResponseFuture<V> extends AbstractListenableFuture<V> {
 
+    private final static Logger logger = LoggerFactory.getLogger(ApacheResponseFuture.class);
+
     private Future<V> innerFuture;
     private final AsyncHandler<V> asyncHandler;
     private final int responseTimeoutInMs;
@@ -63,11 +67,12 @@ public void done(Callable callable) {
         if (reaperFuture != null) {
             reaperFuture.cancel(true);
         }
-        super.done();        
+        super.done();
     }
 
     /**
      * TODO.
+     *
      * @param v The new content
      */
     public void content(V v) {
@@ -113,14 +118,22 @@ public void abort(Throwable t) {
 
         exception.set(t);
         if (!timedOut.get() && !cancelled.get()) {
-            asyncHandler.onThrowable(t);
-        }     
+            try {
+                asyncHandler.onThrowable(t);
+            } catch (Throwable t2) {
+                logger.debug("asyncHandler.onThrowable", t2);
+            }
+        }
     }
 
     public boolean cancel(boolean mayInterruptIfRunning) {
         if (!cancelled.get() && innerFuture != null) {
             method.abort();
-            asyncHandler.onThrowable(new CancellationException());        
+            try {
+                asyncHandler.onThrowable(new CancellationException());
+            } catch (Throwable t) {
+                logger.debug("asyncHandler.onThrowable", t);
+            }
             cancelled.set(true);
             if (reaperFuture != null) {
                 reaperFuture.cancel(true);
@@ -160,7 +173,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
             }
         } catch (TimeoutException t) {
             if (!contentProcessed.get() && timeout != -1 && ((System.currentTimeMillis() - touch.get()) <= responseTimeoutInMs)) {
-                return get(timeout,unit);
+                return get(timeout, unit);
             }
             timedOut.set(true);
             throw new TimeoutException(String.format("No response received after %s", responseTimeoutInMs));
@@ -178,7 +191,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
      *
      * @return <code>true</code> if response has expired and should be terminated.
      */
-    public boolean hasExpired(){
+    public boolean hasExpired() {
         return responseTimeoutInMs != -1 && ((System.currentTimeMillis() - touch.get()) >= responseTimeoutInMs);
     }
 
@@ -195,7 +208,7 @@ public Request getRequest() {
      * {@inheritDoc}
      */
     /* @Override */
-     public boolean getAndSetWriteHeaders(boolean writeHeaders) {
+    public boolean getAndSetWriteHeaders(boolean writeHeaders) {
         boolean b = this.writeHeaders;
         this.writeHeaders = writeHeaders;
         return b;
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java b/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
index 99720c2b3..0883155c9 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
@@ -13,8 +13,9 @@
 package com.ning.http.client.providers.jdk;
 
 import com.ning.http.client.AsyncHandler;
-import com.ning.http.client.ListenableFuture;
 import com.ning.http.client.listenable.AbstractListenableFuture;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.net.HttpURLConnection;
 import java.util.concurrent.Callable;
@@ -30,6 +31,8 @@
 
 public class JDKFuture<V> extends AbstractListenableFuture<V> {
 
+    private final static Logger logger = LoggerFactory.getLogger(JDKFuture.class);
+
     protected Future<V> innerFuture;
     protected final AsyncHandler<V> asyncHandler;
     protected final int responseTimeoutInMs;
@@ -76,7 +79,11 @@ public void content(V v) {
     public boolean cancel(boolean mayInterruptIfRunning) {
         if (!cancelled.get() && innerFuture != null) {
             urlConnection.disconnect();
-            asyncHandler.onThrowable(new CancellationException());
+            try {
+                asyncHandler.onThrowable(new CancellationException());
+            } catch (Throwable te) {
+                logger.debug("asyncHandler.onThrowable", te);
+            }
             cancelled.set(true);
             return innerFuture.cancel(mayInterruptIfRunning);
         } else {
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index 7ad86d64f..c0646a438 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -68,7 +68,6 @@
 import org.jboss.netty.channel.MessageEvent;
 import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
 import org.jboss.netty.channel.group.ChannelGroup;
-import org.jboss.netty.channel.group.DefaultChannelGroup;
 import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory;
@@ -93,7 +92,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.net.ssl.SSLEngine;
-import javax.net.ssl.SSLException;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -122,8 +120,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.jboss.netty.channel.Channels.pipeline;
 import static com.ning.http.util.AsyncHttpProviderUtils.DEFAULT_CHARSET;
+import static org.jboss.netty.channel.Channels.pipeline;
 
 public class NettyAsyncHttpProvider extends SimpleChannelUpstreamHandler implements AsyncHttpProvider<HttpResponse> {
     private final static String HTTP_HANDLER = "httpHandler";
@@ -785,7 +783,11 @@ public Response prepareResponse(final HttpResponseStatus status,
         if (!connectionsPool.canCacheConnection() ||
                 (config.getMaxTotalConnections() > -1 && (maxConnections.get() + 1) > config.getMaxTotalConnections())) {
             IOException ex = new IOException(String.format("Too many connections %s", config.getMaxTotalConnections()));
-            asyncHandler.onThrowable(ex);            
+            try {
+                asyncHandler.onThrowable(ex);   
+            } catch (Throwable t) {
+                log.warn("asyncHandler.onThrowable",t);
+            }
             throw ex;
         }
 
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
index 5db122704..72d6d15bb 100755
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
@@ -199,6 +199,8 @@ public V get(long l, TimeUnit tu) throws InterruptedException, TimeoutException,
                 TimeoutException te = new TimeoutException(String.format("No response received after %s", l));
                 try {
                     asyncHandler.onThrowable(te);
+                } catch (Throwable t) {
+                    logger.debug("asyncHandler.onThrowable", t);
                 } finally {
                     throw te;
                 }
@@ -228,6 +230,8 @@ V getContent() throws ExecutionException {
             } catch (Throwable ex) {
                 try {
                     asyncHandler.onThrowable(ex);
+                } catch (Throwable t) {
+                    logger.debug("asyncHandler.onThrowable", t);
                 } finally {
                     throw new RuntimeException(ex);
                 }
@@ -270,6 +274,8 @@ public final void abort(final Throwable t) {
         exEx.compareAndSet(null, new ExecutionException(t));
         try {
             asyncHandler.onThrowable(t);
+        } catch (Throwable te) {
+            logger.debug("asyncHandler.onThrowable", te);
         } finally {
             isCancelled.set(true);
             latch.countDown();
