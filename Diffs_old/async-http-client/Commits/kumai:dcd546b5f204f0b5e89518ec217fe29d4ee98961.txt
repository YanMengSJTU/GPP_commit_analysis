diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index b750fc9e5..6752ebac3 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -177,7 +177,7 @@ public boolean remove(Object o) {
     private final boolean trackConnections;
     private final boolean useRawUrl;
     private final static NTLMEngine ntlmEngine = new NTLMEngine();
-    private final static SpnegoEngine spnegoEngine = new SpnegoEngine();
+    private static SpnegoEngine spnegoEngine = null;
     private final Protocol httpProtocol = new HttpProtocol();
     private final Protocol webSocketProtocol = new WebSocketProtocol();
 
@@ -599,6 +599,12 @@ protected final static HttpRequest buildRequest(AsyncHttpClientConfig config, Re
         return construct(config, request, new HttpMethod(method), uri, buffer);
     }
 
+    private static SpnegoEngine getSpnegoEngine() {
+        if(spnegoEngine == null)
+            spnegoEngine = new SpnegoEngine();
+        return spnegoEngine;
+    }
+
     @SuppressWarnings("deprecation")
     private static HttpRequest construct(AsyncHttpClientConfig config,
                                          Request request,
@@ -714,7 +720,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     String challengeHeader = null;
                     String server = proxyServer == null ? host : proxyServer.getHost();
                     try {
-                        challengeHeader = spnegoEngine.generateToken(server);
+                        challengeHeader = getSpnegoEngine().generateToken(server);
                     } catch (Throwable e) {
                         IOException ie = new IOException();
                         ie.initCause(e);
@@ -1199,7 +1205,7 @@ private Realm kerberosChallenge(List<String> proxyAuth,
         String host = request.getVirtualHost() == null ? AsyncHttpProviderUtils.getHost(uri) : request.getVirtualHost();
         String server = proxyServer == null ? host : proxyServer.getHost();
         try {
-            String challengeHeader = spnegoEngine.generateToken(server);
+            String challengeHeader = getSpnegoEngine().generateToken(server);
             headers.remove(HttpHeaders.Names.AUTHORIZATION);
             headers.add(HttpHeaders.Names.AUTHORIZATION, "Negotiate " + challengeHeader);
 
