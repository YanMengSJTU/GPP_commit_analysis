diff --git a/src/main/java/com/ning/http/client/providers/netty/ChannelBufferUtil.java b/src/main/java/com/ning/http/client/providers/netty/ChannelBufferUtil.java
new file mode 100644
index 000000000..e2707f6df
--- /dev/null
+++ b/src/main/java/com/ning/http/client/providers/netty/ChannelBufferUtil.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright 2010 Ning, Inc.
+ *
+ * Ning licenses this file to you under the Apache License, version 2.0
+ * (the "License"); you may not use this file except in compliance with the
+ * License.  You may obtain a copy of the License at:
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+package com.ning.http.client.providers.netty;
+
+import org.jboss.netty.buffer.ChannelBuffer;
+
+public class ChannelBufferUtil {
+
+    public static byte[] channelBuffer2bytes(ChannelBuffer b) {
+        int readable = b.readableBytes();
+        int readerIndex = b.readerIndex();
+        if (b.hasArray()) {
+            byte[] array = b.array();
+            if (b.arrayOffset() == 0 && readerIndex == 0 && array.length == readable) {
+                return array;
+            }
+        }
+        byte[] array = new byte[readable];
+        b.getBytes(readerIndex, array);
+        return array;
+    }
+}
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
index 3758d2b3c..4269bb718 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
@@ -76,7 +76,7 @@ public String getStatusText() {
 
     /* @Override */
     public byte[] getResponseBodyAsBytes() throws IOException {
-        return getResponseBodyAsByteBuffer().array();
+        return ChannelBufferUtil.channelBuffer2bytes(getResponseBodyAsChannelBuffer());
     }
 
     public ByteBuffer getResponseBodyAsByteBuffer() throws IOException {
diff --git a/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java b/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
index adc744716..6ed8abc94 100644
--- a/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
+++ b/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
@@ -34,7 +34,7 @@
 
     private final HttpChunk chunk;
     private final HttpResponse response;
-    private final AtomicReference<byte[]> bytes = new AtomicReference(null);
+    private final AtomicReference<byte[]> bytes = new AtomicReference<byte[]>(null);
     private final boolean isLast;
     private boolean closeConnection = false;
 
@@ -63,8 +63,7 @@ public ResponseBodyPart(URI uri, HttpResponse response, AsyncHttpProvider provid
             return bytes.get();
         }
 
-        ChannelBuffer b = getChannelBuffer();
-        byte[] rb = b.toByteBuffer().array();
+        byte[] rb = ChannelBufferUtil.channelBuffer2bytes(getChannelBuffer());
         bytes.set(rb);
         return rb;
     }
diff --git a/src/main/java/com/ning/http/client/providers/netty/WebSocketUtil.java b/src/main/java/com/ning/http/client/providers/netty/WebSocketUtil.java
index c2a452e66..5e20a499c 100644
--- a/src/main/java/com/ning/http/client/providers/netty/WebSocketUtil.java
+++ b/src/main/java/com/ning/http/client/providers/netty/WebSocketUtil.java
@@ -13,7 +13,6 @@
 package com.ning.http.client.providers.netty;
 
 import com.ning.http.util.Base64;
-import org.jboss.netty.util.CharsetUtil;
 
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;
