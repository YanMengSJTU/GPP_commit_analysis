diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 5eae0fd8c..80313f05c 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -1030,11 +1030,11 @@ private void addQueryString(final Request request,
                         }
                     }
                 }
-                String queryString = sb.deleteCharAt((sb.length() - 1)).toString();
+                sb.setLength(sb.length() - 1);
+                String queryString = sb.toString();
 
                 requestPacket.setQueryString(queryString);
             }
-
         }
 
     } // END AsyncHttpClientFiler
diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index 81421fd10..acb231768 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -32,7 +32,6 @@
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FilePart;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
-import com.ning.http.client.FluentStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseBodyPartsInputStream;
 import com.ning.http.client.Part;
diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index 84b460fca..52bd48bfe 100755
--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -557,7 +557,7 @@ public void asyncDoPostBytesTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             client.preparePost(getTargetUrl()).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandlerAdapter() {
 
@@ -600,7 +600,7 @@ public void asyncDoPostInputStreamTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
             ByteArrayInputStream is = new ByteArrayInputStream(sb.toString().getBytes());
 
             client.preparePost(getTargetUrl()).setHeaders(h).setBody(is).execute(new AsyncCompletionHandlerAdapter() {
@@ -643,7 +643,7 @@ public void asyncDoPutInputStreamTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
             ByteArrayInputStream is = new ByteArrayInputStream(sb.toString().getBytes());
 
             client.preparePut(getTargetUrl()).setHeaders(h).setBody(is).execute(new AsyncCompletionHandlerAdapter() {
@@ -687,7 +687,7 @@ public void asyncDoPostEntityWriterTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
             byte[] bytes = sb.toString().getBytes();
             h.add("Content-Length", String.valueOf(bytes.length));
 
@@ -769,7 +769,7 @@ public void asyncDoPostBasicGZIPTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             client.preparePost(getTargetUrl()).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandlerAdapter() {
 
@@ -807,7 +807,7 @@ public void asyncDoPostProxyTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             Response response = client.preparePost(getTargetUrl()).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandler<Response>() {
                 @Override
@@ -867,7 +867,7 @@ public void asyncDoPutTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             Response response = client.preparePut(getTargetUrl()).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandlerAdapter()).get();
 
@@ -892,7 +892,7 @@ public void asyncDoPostLatchBytesTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             client.preparePost(getTargetUrl()).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandlerAdapter() {
 
@@ -994,7 +994,7 @@ public void asyncDoPostNullBytesTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             Future<Response> future = client.preparePost(getTargetUrl()).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandlerAdapter());
 
@@ -1020,7 +1020,7 @@ public void asyncDoPostListenerBytesTest() throws Throwable {
                 sb.append(i);
                 sb.append("&");
             }
-            sb.deleteCharAt(sb.length() - 1);
+            sb.setLength(sb.length() - 1);
 
             final CountDownLatch l = new CountDownLatch(1);
 
