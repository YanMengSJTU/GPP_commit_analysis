diff --git a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
index 323df1c07..ef96371ad 100644
--- a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
+++ b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
@@ -86,6 +86,7 @@
     protected boolean strict302Handling;
     protected boolean useRelativeURIsWithSSLProxies;
     protected int maxConnectionLifeTimeInMs;
+    protected boolean rfc6265CookieEncoding;
 
     protected AsyncHttpClientConfig() {
     }
@@ -121,7 +122,8 @@ private AsyncHttpClientConfig(int maxTotalConnections,
                                   HostnameVerifier hostnameVerifier,
                                   int ioThreadMultiplier,
                                   boolean strict302Handling,
-                                  boolean useRelativeURIsWithSSLProxies) {
+                                  boolean useRelativeURIsWithSSLProxies,
+                                  boolean rfc6265CookieEncoding) {
 
         this.maxTotalConnections = maxTotalConnections;
         this.maxConnectionPerHost = maxConnectionPerHost;
@@ -152,6 +154,7 @@ private AsyncHttpClientConfig(int maxTotalConnections,
         this.hostnameVerifier = hostnameVerifier;
         this.ioThreadMultiplier = ioThreadMultiplier;
         this.strict302Handling = strict302Handling;
+        this.rfc6265CookieEncoding = rfc6265CookieEncoding;
 
         if (applicationThreadPool == null) {
             this.applicationThreadPool = Executors.newCachedThreadPool();
@@ -500,6 +503,16 @@ public int getMaxConnectionLifeTimeInMs() {
         return maxConnectionLifeTimeInMs;
     }
 
+    /**
+     * @return<code>true</code> if AHC should use rfc6265 for encoding client side cookies,
+     *  otherwise <code>false</code>.
+     *  
+     *  @since 1.7.18
+     */
+    public boolean isRfc6265CookieEncoding() {
+        return rfc6265CookieEncoding;
+    }
+
     /**
      * Builder for an {@link AsyncHttpClient}
      */
@@ -538,6 +551,7 @@ public int getMaxConnectionLifeTimeInMs() {
         private HostnameVerifier hostnameVerifier = new AllowAllHostnameVerifier();
         private int ioThreadMultiplier = 2;
         private boolean strict302Handling;
+        private boolean rfc6265CookieEncoding;
 
         public Builder() {
         }
@@ -992,6 +1006,19 @@ public Builder setMaxConnectionLifeTimeInMs(int maxConnectionLifeTimeInMs) {
            return this;
         }
 
+        /**
+         * Configures this AHC instance to use RFC 6265 cookie encoding style
+         *
+         * @param rfc6265CookieEncoding
+         * @return this
+         *
+         * @since 1.7.18
+         */
+        public Builder setRfc6265CookieEncoding(boolean rfc6265CookieEncoding) {
+            this.rfc6265CookieEncoding = rfc6265CookieEncoding;
+            return this;
+        }
+
         /**
          * Create a config builder with values taken from the given prototype configuration.
          *
@@ -1035,6 +1062,7 @@ public Builder(AsyncHttpClientConfig prototype) {
             removeQueryParamOnRedirect = prototype.isRemoveQueryParamOnRedirect();
             hostnameVerifier = prototype.getHostnameVerifier();
             strict302Handling = prototype.isStrict302Handling();
+            rfc6265CookieEncoding = prototype.isRfc6265CookieEncoding();
         }
 
         /**
@@ -1107,7 +1135,8 @@ public Thread newThread(Runnable r) {
                     hostnameVerifier,
                     ioThreadMultiplier,
                     strict302Handling,
-                    useRelativeURIsWithSSLProxies);
+                    useRelativeURIsWithSSLProxies,
+                    rfc6265CookieEncoding);
         }
     }
 }
diff --git a/src/main/java/com/ning/http/client/Cookie.java b/src/main/java/com/ning/http/client/Cookie.java
index de8773f74..b3be657d5 100644
--- a/src/main/java/com/ning/http/client/Cookie.java
+++ b/src/main/java/com/ning/http/client/Cookie.java
@@ -24,6 +24,7 @@
     private final String domain;
     private final String name;
     private final String value;
+    private final String rawValue;
     private final String path;
     private final int maxAge;
     private final boolean secure;
@@ -41,10 +42,10 @@ public Cookie(String domain, String name, String value, String path, int maxAge,
     }
 
     public Cookie(String domain, String name, String value, String path, int maxAge, boolean secure, int version) {
-        this(domain, name, value, path, maxAge, secure, version, false, false, null, null, Collections.<Integer> emptySet());
+        this(domain, name, value, value, path, maxAge, secure, version, false, false, null, null, Collections.<Integer> emptySet());
     }
 
-    public Cookie(String domain, String name, String value, String path, int maxAge, boolean secure, int version, boolean httpOnly, boolean discard, String comment, String commentUrl, Iterable<Integer> ports) {
+    public Cookie(String domain, String name, String value, String rawValue, String path, int maxAge, boolean secure, int version, boolean httpOnly, boolean discard, String comment, String commentUrl, Iterable<Integer> ports) {
 
         if (name == null) {
             throw new NullPointerException("name");
@@ -85,6 +86,7 @@ public Cookie(String domain, String name, String value, String path, int maxAge,
 
         this.name = name;
         this.value = value;
+        this.rawValue = rawValue;
         this.domain = validateValue("domain", domain);
         this.path = validateValue("path", path);
         this.maxAge = maxAge;
@@ -119,6 +121,10 @@ public String getValue() {
         return value == null ? "" : value;
     }
 
+    public String getRawValue() {
+        return rawValue;
+    }
+
     public String getPath() {
         return path;
     }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index 6b90a10a3..ef248e4d9 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -57,6 +57,7 @@
 import com.ning.http.util.SslUtils;
 import com.ning.http.util.UTF8UrlEncoder;
 import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
+import com.ning.org.jboss.netty.handler.codec.http.CookieEncoder;
 import org.jboss.netty.bootstrap.ClientBootstrap;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBufferOutputStream;
@@ -77,8 +78,6 @@
 import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory;
-import org.jboss.netty.handler.codec.http.CookieEncoder;
-import org.jboss.netty.handler.codec.http.DefaultCookie;
 import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;
 import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
 import org.jboss.netty.handler.codec.http.HttpChunk;
@@ -121,7 +120,6 @@
 import java.security.GeneralSecurityException;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map.Entry;
 import java.util.concurrent.Callable;
@@ -753,19 +751,7 @@ else if (uri.getRawQuery() != null)
 
         if (!m.equals(HttpMethod.CONNECT)) {
             if (isNonEmpty(request.getCookies())) {
-                CookieEncoder httpCookieEncoder = new CookieEncoder(false);
-                Iterator<Cookie> ic = request.getCookies().iterator();
-                Cookie c;
-                org.jboss.netty.handler.codec.http.Cookie cookie;
-                while (ic.hasNext()) {
-                    c = ic.next();
-                    cookie = new DefaultCookie(c.getName(), c.getValue());
-                    cookie.setPath(c.getPath());
-                    cookie.setMaxAge(c.getMaxAge());
-                    cookie.setDomain(c.getDomain());
-                    httpCookieEncoder.addCookie(cookie);
-                }
-                nettyRequest.setHeader(HttpHeaders.Names.COOKIE, httpCookieEncoder.encode());
+                nettyRequest.setHeader(HttpHeaders.Names.COOKIE, CookieEncoder.encodeClientSide(request.getCookies(), config.isRfc6265CookieEncoding()));
             }
 
             String reqType = request.getMethod();
diff --git a/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieDecoder.java b/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieDecoder.java
index 138e3ac0a..4e4eecb1b 100644
--- a/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieDecoder.java
+++ b/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieDecoder.java
@@ -31,7 +31,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
-import java.util.TreeSet;
+import java.util.HashSet;
 
 import com.ning.org.jboss.netty.util.internal.StringUtil;
 import com.ning.http.client.Cookie;
@@ -69,7 +69,8 @@ private CookieDecoder() {
     public static Set<Cookie> decode(String header) {
         List<String> names = new ArrayList<String>(8);
         List<String> values = new ArrayList<String>(8);
-        extractKeyValuePairs(header, names, values);
+        List<String> rawValues = new ArrayList<String>(8);
+        extractKeyValuePairs(header, names, values, rawValues);
 
         if (names.isEmpty()) {
             return Collections.emptySet();
@@ -96,16 +97,21 @@ private CookieDecoder() {
             return Collections.emptySet();
         }
 
-        Set<Cookie> cookies = new TreeSet<Cookie>();
+        Set<Cookie> cookies = new HashSet<Cookie>();
         for (; i < names.size(); i++) {
             String name = names.get(i);
             String value = values.get(i);
+            String rawValue = rawValues.get(i);
             if (value == null) {
                 value = "";
             }
+            if (rawValue == null) {
+                rawValue = "";
+            }
 
             String cookieName = name;
             String cookieValue = value;
+            String cookieRawValue = rawValue;
             boolean discard = false;
             boolean secure = false;
             boolean httpOnly = false;
@@ -164,14 +170,14 @@ private CookieDecoder() {
                 }
             }
 
-            Cookie c = new Cookie(domain, cookieName, cookieValue, path, maxAge, secure, version, httpOnly, discard, comment, commentURL, ports);
+            Cookie c = new Cookie(domain, cookieName, cookieValue, cookieRawValue, path, maxAge, secure, version, httpOnly, discard, comment, commentURL, ports);
             cookies.add(c);
         }
 
         return cookies;
     }
 
-    private static void extractKeyValuePairs(final String header, final List<String> names, final List<String> values) {
+    private static void extractKeyValuePairs(final String header, final List<String> names, final List<String> values, final List<String> rawValues) {
 
         final int headerLen = header.length();
         loop: for (int i = 0;;) {
@@ -210,10 +216,12 @@ private static void extractKeyValuePairs(final String header, final List<String>
 
             String name;
             String value;
+            String rawValue;
 
             if (i == headerLen) {
                 name = null;
                 value = null;
+                rawValue = null;
             } else {
                 int newNameStart = i;
                 keyValLoop: for (;;) {
@@ -222,6 +230,7 @@ private static void extractKeyValuePairs(final String header, final List<String>
                         // NAME; (no value till ';')
                         name = header.substring(newNameStart, i);
                         value = null;
+                        rawValue = null;
                         break keyValLoop;
                     case '=':
                         // NAME=VALUE
@@ -230,6 +239,7 @@ private static void extractKeyValuePairs(final String header, final List<String>
                         if (i == headerLen) {
                             // NAME= (empty value, i.e. nothing after '=')
                             value = "";
+                            rawValue = "";
                             break keyValLoop;
                         }
 
@@ -238,17 +248,21 @@ private static void extractKeyValuePairs(final String header, final List<String>
                         if (c == '"' || c == '\'') {
                             // NAME="VALUE" or NAME='VALUE'
                             StringBuilder newValueBuf = new StringBuilder(header.length() - i);
+                            StringBuilder newRawValueBuf = new StringBuilder(header.length() - i);
+                            newRawValueBuf.append(c);
                             final char q = c;
                             boolean hadBackslash = false;
                             i++;
                             for (;;) {
                                 if (i == headerLen) {
                                     value = newValueBuf.toString();
+                                    rawValue = newRawValueBuf.toString();
                                     break keyValLoop;
                                 }
                                 if (hadBackslash) {
                                     hadBackslash = false;
                                     c = header.charAt(i++);
+                                    newRawValueBuf.append(c);
                                     switch (c) {
                                     case '\\':
                                     case '"':
@@ -262,8 +276,10 @@ private static void extractKeyValuePairs(final String header, final List<String>
                                     }
                                 } else {
                                     c = header.charAt(i++);
+                                    newRawValueBuf.append(c);
                                     if (c == q) {
                                         value = newValueBuf.toString();
+                                        rawValue = newRawValueBuf.toString();
                                         break keyValLoop;
                                     }
                                     newValueBuf.append(c);
@@ -276,10 +292,10 @@ private static void extractKeyValuePairs(final String header, final List<String>
                             // NAME=VALUE;
                             int semiPos = header.indexOf(';', i);
                             if (semiPos > 0) {
-                                value = header.substring(newValueStart, semiPos);
+                                value = rawValue = header.substring(newValueStart, semiPos);
                                 i = semiPos;
                             } else {
-                                value = header.substring(newValueStart);
+                                value = rawValue = header.substring(newValueStart);
                                 i = headerLen;
                             }
                         }
@@ -291,7 +307,7 @@ private static void extractKeyValuePairs(final String header, final List<String>
                     if (i == headerLen) {
                         // NAME (no value till the end of string)
                         name = header.substring(newNameStart);
-                        value = null;
+                        value = rawValue = null;
                         break;
                     }
                 }
@@ -299,6 +315,7 @@ private static void extractKeyValuePairs(final String header, final List<String>
 
             names.add(name);
             values.add(value);
+            rawValues.add(rawValue);
         }
     }
 }
diff --git a/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieEncoder.java b/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieEncoder.java
new file mode 100644
index 000000000..bc3342f74
--- /dev/null
+++ b/src/main/java/com/ning/org/jboss/netty/handler/codec/http/CookieEncoder.java
@@ -0,0 +1,174 @@
+/*
+ * Copyright 2012 The Netty Project
+ *
+ * The Netty Project licenses this file to you under the Apache License,
+ * version 2.0 (the "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at:
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+/*
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ *
+ * This program is licensed to you under the Apache License Version 2.0,
+ * and you may not use this file except in compliance with the Apache License Version 2.0.
+ * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the Apache License Version 2.0 is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
+ */
+package com.ning.org.jboss.netty.handler.codec.http;
+
+import java.util.Collection;
+
+import org.jboss.netty.handler.codec.http.HttpConstants;
+import org.jboss.netty.handler.codec.http.HttpRequest;
+import org.jboss.netty.handler.codec.http.HttpResponse;
+
+import com.ning.http.client.Cookie;
+
+/**
+ * Encodes {@link Cookie}s into an HTTP header value.  This encoder can encode
+ * the HTTP cookie version 0, 1, and 2.
+ * <p>
+ * This encoder is stateful.  It maintains an internal data structure that
+ * holds the {@link Cookie}s added by the {@link #addCookie(String, String)}
+ * method.  Once {@link #encode()} is called, all added {@link Cookie}s are
+ * encoded into an HTTP header value and all {@link Cookie}s in the internal
+ * data structure are removed so that the encoder can start over.
+ * <pre>
+ * // Client-side example
+ * {@link HttpRequest} req = ...;
+ * {@link CookieEncoder} encoder = new {@link CookieEncoder}(false);
+ * encoder.addCookie("JSESSIONID", "1234");
+ * res.setHeader("Cookie", encoder.encode());
+ *
+ * // Server-side example
+ * {@link HttpResponse} res = ...;
+ * {@link CookieEncoder} encoder = new {@link CookieEncoder}(true);
+ * encoder.addCookie("JSESSIONID", "1234");
+ * res.setHeader("Set-Cookie", encoder.encode());
+ * </pre>
+ *
+ * @see CookieDecoder
+ *
+ * @apiviz.stereotype utility
+ * @apiviz.has        org.jboss.netty.handler.codec.http.Cookie oneway - - encodes
+ */
+// This fork brings support for RFC6265, that's used if the Cookie has a raw value
+public final class CookieEncoder {
+
+    private CookieEncoder() {
+    }
+    
+    public static String encodeClientSide(Collection<Cookie> cookies, boolean useRFC6265Style) {
+        StringBuilder sb = new StringBuilder();
+
+        for (Cookie cookie: cookies) {
+            if (useRFC6265Style)
+                encodeRFC6265Style(sb, cookie);
+            else
+                encodeRFC2965Style(sb, cookie);
+        }
+
+        if (sb.length() > 0) {
+            sb.setLength(sb.length() - 2);
+        }
+        return sb.toString();
+    }
+    
+    private static void encodeRFC6265Style(StringBuilder sb, Cookie cookie) {
+        addUnquoted(sb, cookie.getName(), cookie.getRawValue());
+    }
+    
+    private static void encodeRFC2965Style(StringBuilder sb, Cookie cookie) {
+        if (cookie.getVersion() >= 1) {
+            add(sb, '$' + CookieHeaderNames.VERSION, 1);
+        }
+
+        add(sb, cookie.getName(), cookie.getValue());
+
+        if (cookie.getPath() != null) {
+            add(sb, '$' + CookieHeaderNames.PATH, cookie.getPath());
+        }
+
+        if (cookie.getDomain() != null) {
+            add(sb, '$' + CookieHeaderNames.DOMAIN, cookie.getDomain());
+        }
+
+        if (cookie.getVersion() >= 1) {
+            if (!cookie.getPorts().isEmpty()) {
+                sb.append('$');
+                sb.append(CookieHeaderNames.PORT);
+                sb.append((char) HttpConstants.EQUALS);
+                sb.append((char) HttpConstants.DOUBLE_QUOTE);
+                for (int port: cookie.getPorts()) {
+                    sb.append(port);
+                    sb.append((char) HttpConstants.COMMA);
+                }
+                sb.setCharAt(sb.length() - 1, (char) HttpConstants.DOUBLE_QUOTE);
+                sb.append((char) HttpConstants.SEMICOLON);
+                sb.append((char) HttpConstants.SP);
+            }
+        }
+    }
+
+    private static void add(StringBuilder sb, String name, String val) {
+        if (val == null) {
+            addQuoted(sb, name, "");
+            return;
+        }
+
+        for (int i = 0; i < val.length(); i ++) {
+            char c = val.charAt(i);
+            switch (c) {
+            case '\t': case ' ': case '"': case '(':  case ')': case ',':
+            case '/':  case ':': case ';': case '<':  case '=': case '>':
+            case '?':  case '@': case '[': case '\\': case ']':
+            case '{':  case '}':
+                addQuoted(sb, name, val);
+                return;
+            }
+        }
+
+        addUnquoted(sb, name, val);
+    }
+
+    private static void addUnquoted(StringBuilder sb, String name, String val) {
+        sb.append(name);
+        sb.append((char) HttpConstants.EQUALS);
+        sb.append(val);
+        sb.append((char) HttpConstants.SEMICOLON);
+        sb.append((char) HttpConstants.SP);
+    }
+
+    private static void addQuoted(StringBuilder sb, String name, String val) {
+        if (val == null) {
+            val = "";
+        }
+
+        sb.append(name);
+        sb.append((char) HttpConstants.EQUALS);
+        sb.append((char) HttpConstants.DOUBLE_QUOTE);
+        sb.append(val.replace("\\", "\\\\").replace("\"", "\\\""));
+        sb.append((char) HttpConstants.DOUBLE_QUOTE);
+        sb.append((char) HttpConstants.SEMICOLON);
+        sb.append((char) HttpConstants.SP);
+    }
+
+    private static void add(StringBuilder sb, String name, int val) {
+        sb.append(name);
+        sb.append((char) HttpConstants.EQUALS);
+        sb.append(val);
+        sb.append((char) HttpConstants.SEMICOLON);
+        sb.append((char) HttpConstants.SP);
+    }
+}
diff --git a/src/main/java/com/ning/org/jboss/netty/handler/codec/http/HttpConstants.java b/src/main/java/com/ning/org/jboss/netty/handler/codec/http/HttpConstants.java
new file mode 100644
index 000000000..1880dc4fe
--- /dev/null
+++ b/src/main/java/com/ning/org/jboss/netty/handler/codec/http/HttpConstants.java
@@ -0,0 +1,60 @@
+package com.ning.org.jboss.netty.handler.codec.http;
+
+import java.nio.charset.Charset;
+
+public final class HttpConstants {
+
+    /**
+     * Horizontal space
+     */
+    public static final byte SP = 32;
+
+    /**
+     * Horizontal tab
+     */
+    public static final byte HT = 9;
+
+    /**
+     * Carriage return
+     */
+    public static final byte CR = 13;
+
+    /**
+     * Equals '='
+     */
+    public static final byte EQUALS = 61;
+
+    /**
+     * Line feed character
+     */
+    public static final byte LF = 10;
+
+    /**
+     * Colon ':'
+     */
+    public static final byte COLON = 58;
+
+    /**
+     * Semicolon ';'
+     */
+    public static final byte SEMICOLON = 59;
+
+    /**
+     * Comma ','
+     */
+    public static final byte COMMA = 44;
+
+    /**
+     * Double quote '"'
+     */
+    public static final byte DOUBLE_QUOTE = '"';
+
+    /**
+     * Default character set (UTF-8)
+     */
+    public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");
+
+    private HttpConstants() {
+        // Unused
+    }
+}
