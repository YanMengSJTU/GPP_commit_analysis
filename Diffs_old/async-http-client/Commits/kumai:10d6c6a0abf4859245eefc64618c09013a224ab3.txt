diff --git a/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java b/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java
index 009af7e43..35f200bc6 100644
--- a/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java
+++ b/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java
@@ -16,6 +16,8 @@
  */
 package com.ning.http.client;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -66,7 +68,7 @@ public FluentCaseInsensitiveStringsMap(Map<String, Collection<String>> src) {
      * @return This object
      */
     public FluentCaseInsensitiveStringsMap add(String key, String... values) {
-        if ((values != null) && (values.length > 0)) {
+    	if (isNonEmpty(values)) {
             add(key, Arrays.asList(values));
         }
         return this;
diff --git a/src/main/java/com/ning/http/client/listener/TransferCompletionHandler.java b/src/main/java/com/ning/http/client/listener/TransferCompletionHandler.java
index 6d71cbd23..5088f1257 100644
--- a/src/main/java/com/ning/http/client/listener/TransferCompletionHandler.java
+++ b/src/main/java/com/ning/http/client/listener/TransferCompletionHandler.java
@@ -26,6 +26,8 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicLong;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 /**
  * A {@link com.ning.http.client.AsyncHandler} that can be used to notify a set of {@link com.ning.http.client.listener.TransferListener}
  * <p/>
@@ -144,7 +146,7 @@ public Response onCompleted(Response response) throws Exception {
      */
     public STATE onHeaderWriteCompleted() {
         List<String> list = transferAdapter.getHeaders().get("Content-Length");
-        if (list != null && list.size() > 0 && list.get(0) != "") {
+        if (isNonEmpty(list) && list.get(0) != "") {
             totalBytesToTransfer.set(Long.valueOf(list.get(0)));
         }
 
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
index e572101cb..da81b19bd 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
@@ -592,7 +592,7 @@ public T call() {
                 }
             } catch (Throwable t) {
 
-                if (IOException.class.isAssignableFrom(t.getClass()) && config.getIOExceptionFilters().size() > 0) {
+                if (IOException.class.isAssignableFrom(t.getClass()) && !config.getIOExceptionFilters().isEmpty()) {
                     FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(asyncHandler)
                             .request(future.getRequest()).ioException(IOException.class.cast(t)).build();
 
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 80313f05c..711f964f9 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -1019,7 +1019,7 @@ private void addQueryString(final Request request,
                         try {
                             for (int i = 0, len = values.size(); i < len; i++) {
                                 final String value = values.get(i);
-                                if (value != null && value.length() > 0) {
+                                if (isNonEmpty(value)) {
                                     sb.append(URLEncoder.encode(name, "UTF-8")).append('=')
                                         .append(URLEncoder.encode(values.get(i), "UTF-8")).append('&');
                                 } else {
@@ -2606,7 +2606,7 @@ public WebSocket sendMessage(byte[] message) {
 
         @Override
         public WebSocket stream(byte[] fragment, boolean last) {
-            if (fragment != null && fragment.length > 0) {
+            if (isNonEmpty(fragment)) {
                 gWebSocket.stream(last, fragment, 0, fragment.length);
             }
             return this;
@@ -2614,7 +2614,7 @@ public WebSocket stream(byte[] fragment, boolean last) {
 
         @Override
         public WebSocket stream(byte[] fragment, int offset, int len, boolean last) {
-            if (fragment != null && fragment.length > 0) {
+        	if (isNonEmpty(fragment)) {
                 gWebSocket.stream(last, fragment, offset, len);
             }
             return this;
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
index ccca62a36..8d3739927 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
@@ -370,7 +370,7 @@ public T call() throws Exception {
             } catch (Throwable t) {
                 logger.debug(t.getMessage(), t);
 
-                if (IOException.class.isAssignableFrom(t.getClass()) && config.getIOExceptionFilters().size() > 0) {
+                if (IOException.class.isAssignableFrom(t.getClass()) && !config.getIOExceptionFilters().isEmpty()) {
                     FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(asyncHandler)
                             .request(request).ioException(IOException.class.cast(t)).build();
 
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index f8a332012..ab0e36c65 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -1381,7 +1381,7 @@ public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws
             NettyResponseFuture<?> future = (NettyResponseFuture<?>) ctx.getAttachment();
             future.touch();
 
-            if (config.getIOExceptionFilters().size() > 0) {
+            if (!config.getIOExceptionFilters().isEmpty()) {
                 FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler()).request(future.getRequest()).ioException(new IOException("Channel Closed")).build();
                 fc = handleIoException(fc, future);
 
@@ -1517,7 +1517,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws
 
                 if (IOException.class.isAssignableFrom(cause.getClass())) {
 
-                    if (config.getIOExceptionFilters().size() > 0) {
+                    if (!config.getIOExceptionFilters().isEmpty()) {
                         FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler()).request(future.getRequest()).ioException(new IOException("Channel Closed")).build();
                         fc = handleIoException(fc, future);
 
@@ -2101,7 +2101,7 @@ public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws
                     // builder.setUrl(future.getURI().toString());
                     // }
 
-                    if (statusCode == 401 && realm != null && wwwAuth.size() > 0 && !future.getAndSetAuth(true)) {
+                    if (statusCode == 401 && realm != null && !wwwAuth.isEmpty() && !future.getAndSetAuth(true)) {
 
                         future.setState(NettyResponseFuture.STATE.NEW);
                         // NTLM
@@ -2150,7 +2150,7 @@ public Object call() throws Exception {
                     }
 
                     List<String> proxyAuth = getAuthorizationToken(response.getHeaders(), HttpHeaders.Names.PROXY_AUTHENTICATE);
-                    if (statusCode == 407 && realm != null && proxyAuth.size() > 0 && !future.getAndSetAuth(true)) {
+                    if (statusCode == 407 && realm != null && !proxyAuth.isEmpty() && !future.getAndSetAuth(true)) {
 
                         log.debug("Sending proxy authentication to {}", request.getUrl());
 
@@ -2201,7 +2201,7 @@ public Object call() throws Exception {
                     if (!future.getAndSetStatusReceived(true) && updateStatusAndInterrupt(handler, status)) {
                         finishUpdate(future, ctx, response.isChunked());
                         return;
-                    } else if (response.getHeaders().size() > 0 && updateHeadersAndInterrupt(handler, responseHeaders)) {
+                    } else if (!response.getHeaders().isEmpty() && updateHeadersAndInterrupt(handler, responseHeaders)) {
                         finishUpdate(future, ctx, response.isChunked());
                         return;
                     } else if (!response.isChunked()) {
@@ -2231,7 +2231,7 @@ public Object call() throws Exception {
                     }
                 }
             } catch (Exception t) {
-                if (IOException.class.isAssignableFrom(t.getClass()) && config.getIOExceptionFilters().size() > 0) {
+                if (IOException.class.isAssignableFrom(t.getClass()) && !config.getIOExceptionFilters().isEmpty()) {
                     FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler()).request(future.getRequest()).ioException(IOException.class.cast(t)).build();
                     fc = handleIoException(fc, future);
 
@@ -2334,7 +2334,7 @@ public void handle(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
                     return;
                 }
 
-                String accept = response.getHeader("Sec-WebSocket-Accept");
+                String accept = response.getHeader(HttpHeaders.Names.SEC_WEBSOCKET_ACCEPT);
                 String key = WebSocketUtil.getAcceptKey(future.getNettyRequest().getHeader(WEBSOCKET_KEY));
                 if (accept == null || !accept.equals(key)) {
                     throw new IOException(String.format("Invalid challenge. Actual: %s. Expected: %s", accept, key));
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
index fc467fecc..b3868228a 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
@@ -209,7 +209,7 @@ public Channel poll(String uri) {
         if (idleConnectionForHost != null) {
             boolean poolEmpty = false;
             while (!poolEmpty && idleChannel == null) {
-                if (idleConnectionForHost.size() > 0) {
+                if (!idleConnectionForHost.isEmpty()) {
                     synchronized (idleConnectionForHost) {
                         idleChannel = idleConnectionForHost.poll();
                         if (idleChannel != null) {
diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index e4f555a41..6007a2c05 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -158,10 +158,10 @@ public final static URI createUri(String u) {
         if (path == null) {
             throw new IllegalArgumentException("The URI path, of the URI " + uri
                     + ", must be non-null");
-        } else if (path.length() > 0 && path.charAt(0) != '/') {
+        } else if (!path.isEmpty() && path.charAt(0) != '/') {
             throw new IllegalArgumentException("The URI path, of the URI " + uri
                     + ". must start with a '/'");
-        } else if (path.length() == 0) {
+        } else if (path.isEmpty()) {
             return URI.create(u + "/");
         }
 
diff --git a/src/main/java/com/ning/http/util/MiscUtil.java b/src/main/java/com/ning/http/util/MiscUtil.java
index 54e472cf9..26e185968 100644
--- a/src/main/java/com/ning/http/util/MiscUtil.java
+++ b/src/main/java/com/ning/http/util/MiscUtil.java
@@ -28,6 +28,10 @@ public static boolean isNonEmpty(Object[] array) {
         return array != null && array.length != 0;
     }
 
+    public static boolean isNonEmpty(byte[] array) {
+        return array != null && array.length != 0;
+    }
+
     public static boolean isNonEmpty(Collection<?> collection) {
         return collection != null && !collection.isEmpty();
     }
diff --git a/src/main/java/com/ning/http/util/ProxyUtils.java b/src/main/java/com/ning/http/util/ProxyUtils.java
index cf03ab78a..4f9b3c424 100644
--- a/src/main/java/com/ning/http/util/ProxyUtils.java
+++ b/src/main/java/com/ning/http/util/ProxyUtils.java
@@ -12,6 +12,8 @@
  */
 package com.ning.http.util;
 
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.ProxyServer;
 import com.ning.http.client.ProxyServer.Protocol;
@@ -102,7 +104,7 @@ public static boolean avoidProxy(final ProxyServer proxyServer, final String tar
 
             List<String> nonProxyHosts = proxyServer.getNonProxyHosts();
 
-            if (nonProxyHosts != null && nonProxyHosts.size() > 0) {
+            if (nonProxyHosts != null) {
                 for (String nonProxyHost : nonProxyHosts) {
                     if (nonProxyHost.startsWith("*") && nonProxyHost.length() > 1
                             && targetHost.endsWith(nonProxyHost.substring(1).toLowerCase())) {
