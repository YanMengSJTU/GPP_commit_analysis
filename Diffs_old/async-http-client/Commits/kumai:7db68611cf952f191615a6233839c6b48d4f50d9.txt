diff --git a/pom.xml b/pom.xml
index 32cc44b8f..a61b194e9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -76,25 +76,7 @@
         <dependency>
             <groupId>io.netty</groupId>
             <artifactId>netty</artifactId>
-            <version>3.4.4.Final</version>
-            <exclusions>
-                <exclusion>
-                    <groupId>javax.servlet</groupId>
-                    <artifactId>servlet-api</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>commons-logging</groupId>
-                    <artifactId>commons-logging</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>org.slf4j</groupId>
-                    <artifactId>slf4j-api</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>log4j</groupId>
-                    <artifactId>log4j</artifactId>
-                </exclusion>
-            </exclusions>
+            <version>3.6.3.Final</version>
         </dependency>
 
         <dependency>
diff --git a/src/main/java/com/ning/http/client/Response.java b/src/main/java/com/ning/http/client/Response.java
index 54ddddf6b..a4b98464b 100644
--- a/src/main/java/com/ning/http/client/Response.java
+++ b/src/main/java/com/ning/http/client/Response.java
@@ -20,8 +20,8 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
@@ -51,6 +51,14 @@
      */
     public byte[] getResponseBodyAsBytes() throws IOException;
 
+    /**
+     * Return the entire response body as a ByteBuffer.
+     *
+     * @return the entire response body as a ByteBuffer.
+     * @throws IOException
+     */
+    public ByteBuffer getResponseBodyAsByteBuffer() throws IOException;
+
     /**
      * Returns an input stream for the response body. Note that you should not try to get this more than once,
      * and that you should not close the stream.
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
index 3d8ec7980..52a99f3f1 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
@@ -24,6 +24,7 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -67,6 +68,10 @@ public String getStatusText() {
         return AsyncHttpProviderUtils.contentToByte(bodyParts);
     }
 
+    public ByteBuffer getResponseBodyAsByteBuffer() throws IOException {
+        return ByteBuffer.wrap(getResponseBodyAsBytes());
+    }
+
     /* @Override */
     public String getResponseBody() throws IOException {
         return getResponseBody(DEFAULT_CHARSET);
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
index 1119e00f8..23abef2d5 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
@@ -33,6 +33,7 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -174,6 +175,9 @@ public String getResponseBody() throws IOException {
 
     }
 
+    public ByteBuffer getResponseBodyAsByteBuffer() throws IOException {
+        return ByteBuffer.wrap(getResponseBodyAsBytes());
+    }
 
     /**
      * {@inheritDoc}
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
index f7fd04603..987ef7204 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
@@ -25,6 +25,7 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -77,6 +78,10 @@ public String getResponseBody() throws IOException {
         return AsyncHttpProviderUtils.contentToByte(bodyParts);
     }
 
+    public ByteBuffer getResponseBodyAsByteBuffer() throws IOException {
+        return ByteBuffer.wrap(getResponseBodyAsBytes());
+    }
+
     public String getResponseBody(String charset) throws IOException {
 
     	if (!contentComputed.get()) {
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
index a0a243a90..2072a3708 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
@@ -27,16 +27,22 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
+import org.jboss.netty.buffer.ChannelBuffer;
+import org.jboss.netty.buffer.ChannelBufferInputStream;
+import org.jboss.netty.buffer.ChannelBuffers;
+
 /**
  * Wrapper around the {@link com.ning.http.client.Response} API.
  */
 public class NettyResponse implements Response {
-    private final static String DEFAULT_CHARSET = "ISO-8859-1";
+    private final static Charset DEFAULT_CHARSET = Charset.forName("ISO-8859-1");
 
     private final URI uri;
     private final List<HttpResponseBodyPart> bodyParts;
@@ -68,7 +74,11 @@ public String getStatusText() {
 
     /* @Override */
     public byte[] getResponseBodyAsBytes() throws IOException {
-        return AsyncHttpProviderUtils.contentToByte(bodyParts);
+        return getResponseBodyAsByteBuffer().array();
+    }
+
+    public ByteBuffer getResponseBodyAsByteBuffer() throws IOException {
+        return getResponseBodyAsChannelBuffer().toByteBuffer();
     }
 
     /* @Override */
@@ -77,12 +87,32 @@ public String getResponseBody() throws IOException {
     }
 
     public String getResponseBody(String charset) throws IOException {
-        return AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
+        return getResponseBodyAsChannelBuffer().toString(computeCharset(charset));
     }
 
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
-    	return AsyncHttpProviderUtils.contentToInputStream(bodyParts);
+        return new ChannelBufferInputStream(getResponseBodyAsChannelBuffer());
+    }
+
+    public ChannelBuffer getResponseBodyAsChannelBuffer() throws IOException {
+        ChannelBuffer b = null;
+        switch (bodyParts.size()) {
+        case 0:
+            b = ChannelBuffers.EMPTY_BUFFER;
+            break;
+        case 1:
+            b = ResponseBodyPart.class.cast(bodyParts.get(0)).getChannelBuffer();
+            break;
+        default:
+            ChannelBuffer[] channelBuffers = new ChannelBuffer[bodyParts.size()];
+            for (int i = 0; i < bodyParts.size(); i++) {
+                channelBuffers[i] = ResponseBodyPart.class.cast(bodyParts.get(i)).getChannelBuffer();
+            }
+            b = ChannelBuffers.wrappedBuffer(channelBuffers);
+        }
+
+        return b;
     }
 
     /* @Override */
@@ -92,17 +122,17 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
     }
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
-        String response = AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
+        String response = getResponseBody(charset);
         return response.length() <= maxLength ? response : response.substring(0, maxLength);
     }
-    
-    private String computeCharset(String charset) {
+
+    private Charset computeCharset(String charset) {
         if (charset == null) {
-        	String contentType = getContentType();
-        	if (contentType != null)
-        		charset = AsyncHttpProviderUtils.parseCharset(contentType); // parseCharset can return null
+            String contentType = getContentType();
+            if (contentType != null)
+                charset = AsyncHttpProviderUtils.parseCharset(contentType); // parseCharset can return null
         }
-        return charset != null? charset: DEFAULT_CHARSET;
+        return charset != null ? Charset.forName(charset) : DEFAULT_CHARSET;
     }
 
     /* @Override */
@@ -120,19 +150,19 @@ public String getContentType() {
     /* @Override */
 
     public String getHeader(String name) {
-        return headers != null? headers.getHeaders().getFirstValue(name): null;
+        return headers != null ? headers.getHeaders().getFirstValue(name) : null;
     }
 
     /* @Override */
 
     public List<String> getHeaders(String name) {
-        return headers != null? headers.getHeaders().get(name): Collections.<String> emptyList();
+        return headers != null ? headers.getHeaders().get(name) : Collections.<String> emptyList();
     }
 
     /* @Override */
 
     public FluentCaseInsensitiveStringsMap getHeaders() {
-        return headers != null? headers.getHeaders(): new FluentCaseInsensitiveStringsMap();
+        return headers != null ? headers.getHeaders() : new FluentCaseInsensitiveStringsMap();
     }
 
     /* @Override */
@@ -148,7 +178,7 @@ public boolean isRedirected() {
             return Collections.emptyList();
         }
         if (cookies == null) {
-        	List<Cookie> localCookies = new ArrayList<Cookie>();
+            List<Cookie> localCookies = new ArrayList<Cookie>();
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {
                 if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
                     // TODO: ask for parsed header
diff --git a/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java b/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
index 8279c76d7..adc744716 100644
--- a/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
+++ b/src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
@@ -63,19 +63,14 @@ public ResponseBodyPart(URI uri, HttpResponse response, AsyncHttpProvider provid
             return bytes.get();
         }
 
-        ChannelBuffer b = chunk != null ? chunk.getContent() : response.getContent();
-        int read = b.readableBytes();
-        int index = b.readerIndex();
-
-        byte[] rb = new byte[read];
-        b.readBytes(rb);
+        ChannelBuffer b = getChannelBuffer();
+        byte[] rb = b.toByteBuffer().array();
         bytes.set(rb);
-        b.readerIndex(index);
-        return bytes.get();
+        return rb;
     }
 
     public int writeTo(OutputStream outputStream) throws IOException {
-        ChannelBuffer b = chunk != null ? chunk.getContent() : response.getContent();
+        ChannelBuffer b = getChannelBuffer();
         int read = b.readableBytes();
         int index = b.readerIndex();
         if (read > 0) {
@@ -85,6 +80,10 @@ public int writeTo(OutputStream outputStream) throws IOException {
         return read;
     }
 
+    public ChannelBuffer getChannelBuffer() {
+        return chunk != null ? chunk.getContent() : response.getContent();
+    }
+
     @Override
     public ByteBuffer getBodyByteBuffer() {
         return ByteBuffer.wrap(getBodyPartBytes());
diff --git a/src/main/java/com/ning/http/client/webdav/WebDavResponse.java b/src/main/java/com/ning/http/client/webdav/WebDavResponse.java
index c77cee032..3a16fc4f0 100644
--- a/src/main/java/com/ning/http/client/webdav/WebDavResponse.java
+++ b/src/main/java/com/ning/http/client/webdav/WebDavResponse.java
@@ -21,6 +21,7 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
+import java.nio.ByteBuffer;
 import java.util.List;
 
 /**
@@ -49,6 +50,10 @@ public String getStatusText() {
         return response.getResponseBodyAsBytes();
     }
 
+    public ByteBuffer getResponseBodyAsByteBuffer() throws IOException {
+        return ByteBuffer.wrap(getResponseBodyAsBytes());
+    }
+
     public InputStream getResponseBodyAsStream() throws IOException {
         return response.getResponseBodyAsStream();
     }
