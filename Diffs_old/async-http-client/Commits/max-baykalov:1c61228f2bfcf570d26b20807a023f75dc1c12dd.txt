diff --git a/client/src/main/java/org/asynchttpclient/AsyncHandler.java b/client/src/main/java/org/asynchttpclient/AsyncHandler.java
index 0bade6f47..0cee82ded 100644
--- a/client/src/main/java/org/asynchttpclient/AsyncHandler.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHandler.java
@@ -106,9 +106,10 @@
      * @return a {@link State} telling to CONTINUE or ABORT the current processing.
      * @throws Exception if something wrong happens
      */
-    default State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
-        return State.CONTINUE;
-    }
+    State onTrailingHeadersReceived(HttpHeaders headers) throws Exception;
+//    {
+//        return State.CONTINUE;
+//    }
 
     /**
      * Invoked once the HTTP response processing is finished.
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
index 2010c4594..30f13e6ad 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
@@ -40,6 +40,7 @@
 import org.asynchttpclient.filter.ResponseFilter;
 import org.asynchttpclient.proxy.ProxyServer;
 import org.asynchttpclient.proxy.ProxyServerSelector;
+import org.asynchttpclient.uri.Uri;
 import org.asynchttpclient.util.ProxyUtils;
 
 /**
@@ -857,7 +858,13 @@ public Builder setAggregateWebSocketFrameFragments(boolean aggregateWebSocketFra
         }
 
         public Builder setProxyServer(ProxyServer proxyServer) {
-            this.proxyServerSelector = uri -> proxyServer;
+        	final ProxyServer p = proxyServer;
+            this.proxyServerSelector = new ProxyServerSelector() {
+				@Override
+				public ProxyServer select(Uri uri) {
+					return p;
+				}
+			};
             return this;
         }
 
diff --git a/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java b/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
index b012bc177..9ec7048a3 100644
--- a/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
+++ b/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
@@ -36,6 +36,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.function.BiConsumer;
 
 import org.asynchttpclient.channel.ChannelPoolPartitioning;
 import org.asynchttpclient.proxy.ProxyServer;
@@ -274,7 +275,12 @@ public T setHeaders(HttpHeaders headers) {
     public T setHeaders(Map<CharSequence, ? extends Iterable<?>> headers) {
         clearHeaders();
         if (headers != null) {
-            headers.forEach((name, values) -> this.headers.add(name, values));
+            headers.forEach(new BiConsumer<CharSequence, Iterable>() {
+				@Override
+				public void accept(CharSequence name, Iterable values) {
+					RequestBuilderBase.this.headers.add(name, values);
+				}
+			});
         }
         return asDerivedType();
     }
@@ -289,7 +295,12 @@ public T setHeaders(Map<CharSequence, ? extends Iterable<?>> headers) {
     public T setSingleHeaders(Map<CharSequence, ?> headers) {
         clearHeaders();
         if (headers != null) {
-            headers.forEach((name, value) -> this.headers.add(name, value));
+            headers.forEach(new BiConsumer<CharSequence, Object>() {
+				@Override
+				public void accept(CharSequence name, Object value) {
+					RequestBuilderBase.this.headers.add(name, value);
+				}
+			});
         }
         return asDerivedType();
     }
@@ -624,9 +635,21 @@ public Request build() {
         Charset finalCharset = rb.computeCharset();
 
         // make copies of mutable internal collections
-        List<Cookie> cookiesCopy = rb.cookies == null ? Collections.emptyList() : new ArrayList<>(rb.cookies);
-        List<Param> formParamsCopy = rb.formParams == null ? Collections.emptyList() : new ArrayList<>(rb.formParams);
-        List<Part> bodyPartsCopy = rb.bodyParts == null ? Collections.emptyList() : new ArrayList<>(rb.bodyParts);
+        List<Cookie> cookiesCopy;
+		if (rb.cookies == null)
+			cookiesCopy = Collections.emptyList();
+		else
+			cookiesCopy = new ArrayList<>(rb.cookies);
+        List<Param> formParamsCopy;
+		if (rb.formParams == null)
+			formParamsCopy = Collections.emptyList();
+		else
+			formParamsCopy = new ArrayList<>(rb.formParams);
+        List<Part> bodyPartsCopy;
+		if (rb.bodyParts == null)
+			bodyPartsCopy = Collections.emptyList();
+		else
+			bodyPartsCopy = new ArrayList<>(rb.bodyParts);
 
         return new DefaultRequest(rb.method,//
                 finalUri,//
diff --git a/client/src/main/java/org/asynchttpclient/SslEngineFactory.java b/client/src/main/java/org/asynchttpclient/SslEngineFactory.java
index d756aa83d..02642093b 100644
--- a/client/src/main/java/org/asynchttpclient/SslEngineFactory.java
+++ b/client/src/main/java/org/asynchttpclient/SslEngineFactory.java
@@ -36,7 +36,8 @@
      * @throws SSLException if initialization fails. If an exception is thrown, the instance will not be used as client
      *                      creation will fail.
      */
-    default void init(AsyncHttpClientConfig config) throws SSLException {
-        // no op
-    }
+    void init(AsyncHttpClientConfig config) throws SSLException;
+//    {
+//    	
+//    }
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
index 453e44721..42ad827a4 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
@@ -17,6 +17,8 @@
 import io.netty.handler.codec.http.DefaultHttpContent;
 import io.netty.handler.codec.http.HttpContent;
 import io.netty.handler.codec.http.LastHttpContent;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
 
 import java.io.IOException;
 import java.util.NoSuchElementException;
@@ -104,7 +106,18 @@ public NettySubscriber(Channel channel, NettyResponseFuture<?> future) {
 
         @Override
         protected void complete() {
-            channel.eventLoop().execute(() -> channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT).addListener(future -> removeFromPipeline()));
+        	final Channel c = channel;
+            c.eventLoop().execute(new Runnable() {
+				@Override
+				public void run() {
+					channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT).addListener(new GenericFutureListener<Future<? super Void>>() {
+						@Override
+						public void operationComplete(Future<? super Void> f) throws Exception {
+							removeFromPipeline();
+						}
+					});
+				}
+			});
         }
 
         @Override
diff --git a/client/src/main/java/org/asynchttpclient/netty/ssl/JsseSslEngineFactory.java b/client/src/main/java/org/asynchttpclient/netty/ssl/JsseSslEngineFactory.java
index aa05d0262..19020677c 100644
--- a/client/src/main/java/org/asynchttpclient/netty/ssl/JsseSslEngineFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/ssl/JsseSslEngineFactory.java
@@ -15,6 +15,7 @@
 
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLException;
 
 import org.asynchttpclient.AsyncHttpClientConfig;
 
@@ -32,4 +33,7 @@ public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int
         configureSslEngine(sslEngine, config);
         return sslEngine;
     }
+
+	@Override
+	public void init(AsyncHttpClientConfig config) throws SSLException {}
 }
diff --git a/client/src/main/java/org/asynchttpclient/proxy/ProxyServer.java b/client/src/main/java/org/asynchttpclient/proxy/ProxyServer.java
index 62e5a5393..a5d372d2b 100644
--- a/client/src/main/java/org/asynchttpclient/proxy/ProxyServer.java
+++ b/client/src/main/java/org/asynchttpclient/proxy/ProxyServer.java
@@ -138,7 +138,11 @@ public Builder setNonProxyHosts(List<String> nonProxyHosts) {
         }
 
         public ProxyServer build() {
-            List<String> nonProxyHosts = this.nonProxyHosts != null ? Collections.unmodifiableList(this.nonProxyHosts) : Collections.emptyList();
+            List<String> nonProxyHosts;
+			if (this.nonProxyHosts != null)
+				nonProxyHosts = Collections.unmodifiableList(this.nonProxyHosts);
+			else
+				nonProxyHosts = Collections.emptyList();
             return new ProxyServer(host, port, securedPort, realm, nonProxyHosts);
         }
     }
diff --git a/client/src/main/java/org/asynchttpclient/proxy/ProxyServerSelector.java b/client/src/main/java/org/asynchttpclient/proxy/ProxyServerSelector.java
index 359878b48..50d7bfc7f 100644
--- a/client/src/main/java/org/asynchttpclient/proxy/ProxyServerSelector.java
+++ b/client/src/main/java/org/asynchttpclient/proxy/ProxyServerSelector.java
@@ -18,5 +18,10 @@
     /**
      * A selector that always selects no proxy.
      */
-    ProxyServerSelector NO_PROXY_SELECTOR = uri -> null;
+    ProxyServerSelector NO_PROXY_SELECTOR = new ProxyServerSelector() {
+		@Override
+		public ProxyServer select(Uri uri) {
+			return null;
+		}
+	};
 }
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/BoundedQueueFeedableBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/BoundedQueueFeedableBodyGenerator.java
index ff6ca2627..fe84af1e8 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/BoundedQueueFeedableBodyGenerator.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/BoundedQueueFeedableBodyGenerator.java
@@ -19,7 +19,7 @@
 public final class BoundedQueueFeedableBodyGenerator extends QueueBasedFeedableBodyGenerator<BlockingQueue<BodyChunk>> {
 
     public BoundedQueueFeedableBodyGenerator(int capacity) {
-        super(new ArrayBlockingQueue<>(capacity, true));
+        super(new ArrayBlockingQueue<BodyChunk>(capacity, true));
     }
 
     @Override
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java b/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java
index d76ae9d03..240b47256 100755
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedQueueFeedableBodyGenerator.java
@@ -18,7 +18,7 @@
 public final class UnboundedQueueFeedableBodyGenerator extends QueueBasedFeedableBodyGenerator<ConcurrentLinkedQueue<BodyChunk>> {
 
     public UnboundedQueueFeedableBodyGenerator() {
-        super(new ConcurrentLinkedQueue<>());
+        super(new ConcurrentLinkedQueue<BodyChunk>());
     }
 
     @Override
diff --git a/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java b/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
index d23815789..06b0062fe 100644
--- a/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
+++ b/client/src/main/java/org/asynchttpclient/resolver/RequestHostnameResolver.java
@@ -49,10 +49,11 @@
         }
 
         final Future<List<InetAddress>> whenResolved = nameResolver.resolveAll(hostname);
-
+        final AsyncHandlerExtensions a1 = asyncHandlerExtensions;
+        
         whenResolved.addListener(new SimpleFutureListener<List<InetAddress>>() {
 
-        	final AsyncHandlerExtensions a = asyncHandlerExtensions;
+        	final AsyncHandlerExtensions a = a1;
         	
             @Override
             protected void onSuccess(List<InetAddress> value) throws Exception {
diff --git a/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java b/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
index 569c8e649..4acf6defd 100644
--- a/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
@@ -123,8 +123,13 @@ public static ProxyServerSelector createProxyServerSelector(Properties propertie
                 proxyServer.setNonProxyHosts(new ArrayList<>(Arrays.asList(nonProxyHosts.split("\\|"))));
             }
 
-            ProxyServer proxy = proxyServer.build();
-            return uri -> proxy;
+            final ProxyServer proxy = proxyServer.build();
+            return new ProxyServerSelector() {
+				@Override
+				public ProxyServer select(Uri uri) {
+					return proxy;
+				}
+			};
         }
 
         return ProxyServerSelector.NO_PROXY_SELECTOR;
diff --git a/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java b/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java
index 551150933..4e1707688 100644
--- a/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java
+++ b/client/src/main/java/org/asynchttpclient/webdav/WebDavCompletionHandlerBase.java
@@ -48,7 +48,7 @@
 
     private HttpResponseStatus status;
     private HttpHeaders headers;
-    private final List<HttpResponseBodyPart> bodyParts = Collections.synchronizedList(new ArrayList<>());
+    private final List<HttpResponseBodyPart> bodyParts = Collections.synchronizedList(new ArrayList<HttpResponseBodyPart>());
 
     /**
      * {@inheritDoc}
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
index 6902ef8d9..a95c1c65d 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
@@ -49,8 +49,9 @@
      * @param finalFragment true if this frame is the final fragment
      * @param rsv extension bits
      */
-    default void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
-    };
+    void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv); 
+//    {
+//    }
 
     /**
      * Invoked when a text frame is received.
@@ -59,22 +60,25 @@ default void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
      * @param finalFragment true if this frame is the final fragment
      * @param rsv extension bits
      */
-    default void onTextFrame(String payload, boolean finalFragment, int rsv) {
-    };
+    void onTextFrame(String payload, boolean finalFragment, int rsv);
+//    {
+//    }
 
     /**
      * Invoked when a ping frame is received
      * 
      * @param payload a byte array
      */
-    default void onPingFrame(byte[] payload) {
-    };
+    void onPingFrame(byte[] payload);
+//    {
+//    }
 
     /**
      * Invoked when a pong frame is received
      * 
      * @param payload a byte array
      */
-    default void onPongFrame(byte[] payload) {
-    };
+    void onPongFrame(byte[] payload);
+//    {
+//    }
 }
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
index f6f1a3979..43523f2d3 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
@@ -21,6 +21,7 @@
 import org.asynchttpclient.AsyncHandler;
 import org.asynchttpclient.HttpResponseBodyPart;
 import org.asynchttpclient.HttpResponseStatus;
+import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.netty.ws.NettyWebSocket;
 
 /**
@@ -132,4 +133,9 @@ public WebSocketUpgradeHandler build() {
             return new WebSocketUpgradeHandler(listeners);
         }
     }
+
+	@Override
+	public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+        return State.CONTINUE;
+    }
 }
diff --git a/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java b/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
index 916b1f357..a7e1812c7 100644
--- a/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
+++ b/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
@@ -19,6 +19,7 @@
 import static org.testng.Assert.fail;
 import io.netty.handler.codec.http.HttpHeaders;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.test.EchoHandler;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;
@@ -111,5 +112,10 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
         public String onCompleted() throws Exception {
             return "";
         }
+
+		@Override
+		public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+	        return State.CONTINUE;
+	    }
     }
 }
diff --git a/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java b/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
index 110b5fe0e..43534eac4 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
@@ -31,6 +31,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.test.TestUtils.AsyncHandlerAdapter;
 import org.asynchttpclient.testserver.HttpServer;
 import org.asynchttpclient.testserver.HttpTest;
@@ -392,6 +393,11 @@ public Integer onCompleted() throws Exception {
                         latch.countDown();
                         return status;
                     }
+
+					@Override
+					public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+				        return State.CONTINUE;
+				    }
                 });
 
                 if (!latch.await(2, TimeUnit.SECONDS)) {
@@ -482,6 +488,11 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
                     public Response onCompleted() throws Exception {
                         return builder.build();
                     }
+
+					@Override
+					public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+				        return State.CONTINUE;
+				    }
                 }).get();
 
                 assertNotNull(r);
diff --git a/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java b/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
index 2cd0282b3..1a6c911db 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
@@ -33,6 +33,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.AfterClass;
@@ -132,6 +133,11 @@ public Object onCompleted() throws Exception {
                     latch.countDown();
                     return null;
                 }
+
+				@Override
+				public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+			        return State.CONTINUE;
+			    }
             });
             assertTrue(latch.await(1, TimeUnit.SECONDS), "Latch failed.");
             assertFalse(err.get());
diff --git a/client/src/test/java/org/asynchttpclient/BasicAuthTest.java b/client/src/test/java/org/asynchttpclient/BasicAuthTest.java
index defa24768..ee6b9c989 100644
--- a/client/src/test/java/org/asynchttpclient/BasicAuthTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicAuthTest.java
@@ -33,6 +33,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;
@@ -226,6 +227,11 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
                 public Integer onCompleted() throws Exception {
                     return status.getStatusCode();
                 }
+
+				@Override
+				public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+			        return State.CONTINUE;
+			    }
             });
             Integer statusCode = f.get(10, TimeUnit.SECONDS);
             assertNotNull(statusCode);
diff --git a/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java b/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
index f36abf6ce..b8a89a09d 100644
--- a/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
+++ b/client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
@@ -25,6 +25,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeoutException;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.testng.annotations.Test;
 
 /**
@@ -73,6 +74,11 @@ public Integer onCompleted() throws Exception {
                                     l.countDown();
                                     return status;
                                 }
+
+								@Override
+								public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+							        return State.CONTINUE;
+							    }
                             });
 
                             l.await();
diff --git a/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java b/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
index 273309faf..ec3d21031 100644
--- a/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
+++ b/client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
@@ -35,6 +35,7 @@
 
 import javax.net.ServerSocketFactory;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
@@ -121,6 +122,11 @@ public State onHeadersReceived(HttpHeaders response) throws Exception {
                 public Void onCompleted() throws Exception {
                     return null;
                 }
+
+				@Override
+				public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+			        return State.CONTINUE;
+			    }
             }).get(3, TimeUnit.SECONDS);
 
             if (!latch.await(2, TimeUnit.SECONDS)) {
@@ -173,6 +179,11 @@ public State onHeadersReceived(HttpHeaders response) throws Exception {
                 public Void onCompleted() throws Exception {
                     return null;
                 }
+
+				@Override
+				public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+			        return State.CONTINUE;
+			    }
             }).get(3, TimeUnit.SECONDS);
 
             if (!latch.await(2, TimeUnit.SECONDS)) {
diff --git a/client/src/test/java/org/asynchttpclient/RC1KTest.java b/client/src/test/java/org/asynchttpclient/RC1KTest.java
index fd2b043b4..57ed96d4a 100644
--- a/client/src/test/java/org/asynchttpclient/RC1KTest.java
+++ b/client/src/test/java/org/asynchttpclient/RC1KTest.java
@@ -32,6 +32,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.asynchttpclient.AsyncHandler.State;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;
@@ -136,5 +137,10 @@ public State onHeadersReceived(HttpHeaders event) throws Exception {
         public Integer onCompleted() throws Exception {
             return result.get();
         }
+
+		@Override
+		public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+	        return State.CONTINUE;
+	    }
     }
 }
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
index 909ca8115..e49e4da65 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
@@ -28,6 +28,7 @@
 import org.asynchttpclient.HttpResponseBodyPart;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.ListenableFuture;
+import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.handler.StreamedAsyncHandler;
 import org.asynchttpclient.test.TestUtils;
 import org.reactivestreams.Publisher;
@@ -133,6 +134,11 @@ public SimpleStreamedAsyncHandler onCompleted() throws Exception {
             }
             return bytes.toByteArray();
         }
+
+		@Override
+		public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+	        return State.CONTINUE;
+	    }
     }
 
     /**
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
index c54b89180..feac9bf23 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
@@ -50,6 +50,7 @@
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.ListenableFuture;
 import org.asynchttpclient.Response;
+import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.handler.StreamedAsyncHandler;
 import org.asynchttpclient.test.TestUtils;
 import org.reactivestreams.Publisher;
@@ -370,6 +371,11 @@ public SimpleStreamedAsyncHandler onCompleted() throws Exception {
             }
             return bytes.toByteArray();
         }
+
+		@Override
+		public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+	        return State.CONTINUE;
+	    }
     }
 
     /**
@@ -451,6 +457,11 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
         public CancellingStreamedAsyncProvider onCompleted() throws Exception {
             return this;
         }
+
+		@Override
+		public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+	        return State.CONTINUE;
+	    }
     }
 
     /**
diff --git a/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java b/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
index 304723cfd..ec7f4ed88 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
@@ -37,6 +37,7 @@
 import org.asynchttpclient.HttpResponseBodyPart;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
+import org.asynchttpclient.AsyncHandler.State;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
@@ -106,6 +107,11 @@ public Object onCompleted() throws Exception {
                     latch.countDown();
                     return null;
                 }
+
+				@Override
+				public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+			        return State.CONTINUE;
+			    }
             });
             try {
                 assertTrue(latch.await(1, TimeUnit.SECONDS), "Latch failed.");
diff --git a/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java b/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
index 306ccb17a..365ab0be8 100644
--- a/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
+++ b/client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
@@ -39,6 +39,7 @@
 import org.asynchttpclient.HttpResponseBodyPart;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
+import org.asynchttpclient.AsyncHandler.State;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;
@@ -139,6 +140,11 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
                     public Response onCompleted() throws Exception {
                         return null;
                     }
+
+					@Override
+					public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+				        return State.CONTINUE;
+				    }
                 }).get();
                 assertNull(resp);
                 assertEquals(SIMPLE_TEXT_FILE.length(), tmp.length());
@@ -177,6 +183,11 @@ public State onHeadersReceived(HttpHeaders headers) throws Exception {
                     public Response onCompleted() throws Exception {
                         return null;
                     }
+
+					@Override
+					public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+				        return State.CONTINUE;
+				    }
                 }).get();
                 assertNull(resp);
                 assertEquals(SIMPLE_TEXT_FILE.length(), tmp.length());
diff --git a/client/src/test/java/org/asynchttpclient/test/TestUtils.java b/client/src/test/java/org/asynchttpclient/test/TestUtils.java
index 90e4341ff..fd98f43a2 100644
--- a/client/src/test/java/org/asynchttpclient/test/TestUtils.java
+++ b/client/src/test/java/org/asynchttpclient/test/TestUtils.java
@@ -59,6 +59,7 @@
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
 import org.asynchttpclient.SslEngineFactory;
+import org.asynchttpclient.AsyncHandler.State;
 import org.asynchttpclient.netty.ssl.JsseSslEngineFactory;
 import org.asynchttpclient.util.Base64;
 import org.eclipse.jetty.security.ConstraintMapping;
@@ -356,6 +357,11 @@ public State onHeadersReceived(final HttpHeaders headers) throws Exception {
         public String onCompleted() throws Exception {
             return "";
         }
+
+		@Override
+		public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+	        return State.CONTINUE;
+	    }
     }
 
     public static void writeResponseBody(HttpServletResponse response, String body) {
diff --git a/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java b/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java
index d06090c06..be0a35475 100644
--- a/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java
+++ b/client/src/test/java/org/asynchttpclient/webdav/WebdavTest.java
@@ -31,11 +31,14 @@
 import org.asynchttpclient.Request;
 import org.asynchttpclient.RequestBuilder;
 import org.asynchttpclient.Response;
+import org.asynchttpclient.AsyncHandler.State;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
+import io.netty.handler.codec.http.HttpHeaders;
+
 public class WebdavTest {
 
     private Tomcat tomcat;
@@ -180,6 +183,11 @@ public void onThrowable(Throwable t) {
                 public WebDavResponse onCompleted(WebDavResponse response) throws Exception {
                     return response;
                 }
+
+				@Override
+				public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
+			        return State.CONTINUE;
+			    }
             }).get();
 
             assertEquals(webDavResponse.getStatusCode(), 207);
diff --git a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
index 313113f0a..e743450aa 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
@@ -54,6 +54,24 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
                     text.set(frame);
                     latch.countDown();
                 }
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendBinaryFrame(ECHO_BYTES);
@@ -99,6 +117,24 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
                     latch.countDown();
                 }
 
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
             }).build()).get();
 
             websocket.sendBinaryFrame(ECHO_BYTES);
@@ -147,6 +183,24 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
                     latch.countDown();
                 }
 
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
             }).build()).get();
 
             latch.await();
@@ -189,6 +243,24 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
                     latch.countDown();
                 }
 
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
             }).build()).get();
             websocket.sendBinaryFrame(ECHO_BYTES, false, 0);
             websocket.sendBinaryFrame(ECHO_BYTES, true, 0);
diff --git a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
index 3a602783f..40b231408 100644
--- a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
@@ -78,6 +78,30 @@ public void onError(Throwable t) {
             t.printStackTrace();
             latch.countDown();
         }
+
+		@Override
+		public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+			// TODO Auto-generated method stub
+			
+		}
+
+		@Override
+		public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+			// TODO Auto-generated method stub
+			
+		}
+
+		@Override
+		public void onPingFrame(byte[] payload) {
+			// TODO Auto-generated method stub
+			
+		}
+
+		@Override
+		public void onPongFrame(byte[] payload) {
+			// TODO Auto-generated method stub
+			
+		}
     }
 
     @Test(groups = "online", timeOut = 60000, expectedExceptions = ExecutionException.class)
@@ -98,6 +122,30 @@ public void onClose(WebSocket websocket, int code, String reason) {
                 public void onError(Throwable t) {
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
         }
 
@@ -125,6 +173,30 @@ public void onError(Throwable t) {
                     throwable.set(t);
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build());
 
             latch.await();
@@ -154,6 +226,30 @@ public void onError(Throwable t) {
                     throwable.set(t);
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build());
 
             latch.await();
diff --git a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
index ba2d7f01d..9f7da8581 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
@@ -101,6 +101,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendTextFrame("ECHO");
diff --git a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
index 763848cc1..a78baeb97 100644
--- a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
@@ -85,6 +85,30 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             latch.await();
diff --git a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
index 2da22ec79..7d1c04b53 100644
--- a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
@@ -48,6 +48,30 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             latch.await();
@@ -100,6 +124,30 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             latch.await();
@@ -130,6 +178,30 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendCloseFrame();
@@ -167,6 +239,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendTextFrame("ECHO");
@@ -204,6 +294,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).addWebSocketListener(new WebSocketListener() {
 
                 @Override
@@ -226,6 +334,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendTextFrame("ECHO");
@@ -265,6 +391,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             latch.await();
@@ -299,6 +443,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     latch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendTextFrame("ECHO", false, 0);
@@ -338,6 +500,24 @@ public void onError(Throwable t) {
                     t.printStackTrace();
                     closeLatch.countDown();
                 }
+
+				@Override
+				public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPingFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
+
+				@Override
+				public void onPongFrame(byte[] payload) {
+					// TODO Auto-generated method stub
+					
+				}
             }).build()).get();
 
             websocket.sendTextFrame("ECHO");
diff --git a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
index 90253fbd8..2c4fe2dc6 100644
--- a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
@@ -163,6 +163,30 @@ public void onError(Throwable t) {
             public void onClose(WebSocket websocket, int code, String reason) {
                 closeLatch.countDown();
             }
+
+			@Override
+			public void onBinaryFrame(byte[] payload, boolean finalFragment, int rsv) {
+				// TODO Auto-generated method stub
+				
+			}
+
+			@Override
+			public void onTextFrame(String payload, boolean finalFragment, int rsv) {
+				// TODO Auto-generated method stub
+				
+			}
+
+			@Override
+			public void onPingFrame(byte[] payload) {
+				// TODO Auto-generated method stub
+				
+			}
+
+			@Override
+			public void onPongFrame(byte[] payload) {
+				// TODO Auto-generated method stub
+				
+			}
         }).build()).get();
     }
 }
