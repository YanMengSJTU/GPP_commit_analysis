diff --git a/client/pom.xml b/client/pom.xml
index 0e3a24bf2..e3e8e17f2 100644
--- a/client/pom.xml
+++ b/client/pom.xml
@@ -50,12 +50,15 @@
 		<dependency>
 			<groupId>org.reactivestreams</groupId>
 			<artifactId>reactive-streams</artifactId>
-			<version>1.0.0</version>
 		</dependency>
 		<dependency>
 			<groupId>com.typesafe.netty</groupId>
 			<artifactId>netty-reactive-streams</artifactId>
-			<version>2.0.0-M1</version>
+		</dependency>
+		<dependency>
+			<groupId>io.reactivex.rxjava2</groupId>
+			<artifactId>rxjava</artifactId>
+			<scope>test</scope>
 		</dependency>
 	</dependencies>
 </project>
diff --git a/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java b/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
index afbf78d63..2a346c0ba 100644
--- a/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
+++ b/client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
@@ -63,18 +63,20 @@
  * <br>
  * <pre>
  *     PipedOutputStream pout = new PipedOutputStream();
- *     BodyDeferringAsyncHandler bdah = new BodyDeferringAsyncHandler(pout);
- *     // client executes async
- *     Future&lt;Response&gt; fr = client.prepareGet(&quot;http://foo.com/aresource&quot;).execute(bdah);
- *     // main thread will block here until headers are available
- *     Response response = bdah.getResponse();
- *     if (response.getStatusCode() == 200) {
- *      InputStream pin = new BodyDeferringInputStream(fr,new PipedInputStream(pout));
- *      // consume InputStream
- *      ...
- *     } else {
- *      // handle unexpected response status code
- *      ...
+ *     try (PipedInputStream pin = new PipedInputStream(pout)) {
+ *         BodyDeferringAsyncHandler handler = new BodyDeferringAsyncHandler(pout);
+ *         ListenableFuture<&lt;Response&gt; respFut = client.prepareGet(getTargetUrl()).execute(handler);
+ *         Response resp = handler.getResponse();
+ *         // main thread will block here until headers are available
+ *         if (resp.getStatusCode() == 200) {
+ *             try (InputStream is = new BodyDeferringInputStream(respFut, handler, pin)) {
+ *                 // consume InputStream
+ *                 ...
+ *             }
+ *         } else {
+ *             // handle unexpected response status code
+ *             ...
+ *         }
  *     }
  * </pre>
  */
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
index e4d27d411..0829722a9 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
@@ -82,7 +82,7 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
                 if (msg instanceof HttpContent) {
                     ByteBuf content = ((HttpContent) msg).content();
                     // Republish as a HttpResponseBodyPart
-                    if (content.readableBytes() > 0) {
+                    if (content.isReadable()) {
                         HttpResponseBodyPart part = config.getResponseBodyPartFactory().newResponseBodyPart(content, false);
                         ctx.fireChannelRead(part);
                     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
index 3ac652294..906d0a3fd 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
@@ -110,7 +110,7 @@ private void handleChunk(HttpContent chunk,//
         }
 
         ByteBuf buf = chunk.content();
-        if (!abort && !(handler instanceof StreamedAsyncHandler) && (buf.readableBytes() > 0 || last)) {
+        if (!abort && !(handler instanceof StreamedAsyncHandler) && (buf.isReadable() || last)) {
             HttpResponseBodyPart bodyPart = config.getResponseBodyPartFactory().newResponseBodyPart(buf, last);
             abort = handler.onBodyPartReceived(bodyPart) == State.ABORT;
         }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
index 9b83a9589..a26f4fc06 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
@@ -64,57 +64,49 @@ public NettyRequestFactory(AsyncHttpClientConfig config) {
         cookieEncoder = config.isUseLaxCookieEncoder() ? ClientCookieEncoder.LAX : ClientCookieEncoder.STRICT;
     }
 
-    private NettyBody body(Request request, boolean connect) {
+    private NettyBody body(Request request) {
         NettyBody nettyBody = null;
-        if (!connect) {
+        Charset bodyCharset = withDefault(request.getCharset(), DEFAULT_CHARSET);
 
-            Charset bodyCharset = withDefault(request.getCharset(), DEFAULT_CHARSET);
+        if (request.getByteData() != null) {
+            nettyBody = new NettyByteArrayBody(request.getByteData());
 
-            if (request.getByteData() != null) {
-                nettyBody = new NettyByteArrayBody(request.getByteData());
+        } else if (request.getCompositeByteData() != null) {
+            nettyBody = new NettyCompositeByteArrayBody(request.getCompositeByteData());
 
-            } else if (request.getCompositeByteData() != null) {
-                nettyBody = new NettyCompositeByteArrayBody(request.getCompositeByteData());
+        } else if (request.getStringData() != null) {
+            nettyBody = new NettyByteBufferBody(StringUtils.charSequence2ByteBuffer(request.getStringData(), bodyCharset));
 
-            } else if (request.getStringData() != null) {
-                nettyBody = new NettyByteBufferBody(StringUtils.charSequence2ByteBuffer(request.getStringData(), bodyCharset));
+        } else if (request.getByteBufferData() != null) {
+            nettyBody = new NettyByteBufferBody(request.getByteBufferData());
 
-            } else if (request.getByteBufferData() != null) {
-                nettyBody = new NettyByteBufferBody(request.getByteBufferData());
+        } else if (request.getStreamData() != null) {
+            nettyBody = new NettyInputStreamBody(request.getStreamData());
 
-            } else if (request.getStreamData() != null) {
-                nettyBody = new NettyInputStreamBody(request.getStreamData());
+        } else if (isNonEmpty(request.getFormParams())) {
+            CharSequence contentTypeOverride = request.getHeaders().contains(CONTENT_TYPE) ? null : HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED;
+            nettyBody = new NettyByteBufferBody(urlEncodeFormParams(request.getFormParams(), bodyCharset), contentTypeOverride);
 
-            } else if (isNonEmpty(request.getFormParams())) {
+        } else if (isNonEmpty(request.getBodyParts())) {
+            nettyBody = new NettyMultipartBody(request.getBodyParts(), request.getHeaders(), config);
 
-                CharSequence contentType = null;
-                if (!request.getHeaders().contains(CONTENT_TYPE)) {
-                    contentType = HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED;
-                }
-
-                nettyBody = new NettyByteBufferBody(urlEncodeFormParams(request.getFormParams(), bodyCharset), contentType);
-
-            } else if (isNonEmpty(request.getBodyParts())) {
-                nettyBody = new NettyMultipartBody(request.getBodyParts(), request.getHeaders(), config);
+        } else if (request.getFile() != null) {
+            nettyBody = new NettyFileBody(request.getFile(), config);
 
-            } else if (request.getFile() != null) {
-                nettyBody = new NettyFileBody(request.getFile(), config);
+        } else if (request.getBodyGenerator() instanceof FileBodyGenerator) {
+            FileBodyGenerator fileBodyGenerator = (FileBodyGenerator) request.getBodyGenerator();
+            nettyBody = new NettyFileBody(fileBodyGenerator.getFile(), fileBodyGenerator.getRegionSeek(), fileBodyGenerator.getRegionLength(), config);
 
-            } else if (request.getBodyGenerator() instanceof FileBodyGenerator) {
-                FileBodyGenerator fileBodyGenerator = (FileBodyGenerator) request.getBodyGenerator();
-                nettyBody = new NettyFileBody(fileBodyGenerator.getFile(), fileBodyGenerator.getRegionSeek(), fileBodyGenerator.getRegionLength(), config);
+        } else if (request.getBodyGenerator() instanceof InputStreamBodyGenerator) {
+            InputStreamBodyGenerator inStreamGenerator = InputStreamBodyGenerator.class.cast(request.getBodyGenerator());
+            nettyBody = new NettyInputStreamBody(inStreamGenerator.getInputStream(), inStreamGenerator.getContentLength());
 
-            } else if (request.getBodyGenerator() instanceof InputStreamBodyGenerator) {
-                InputStreamBodyGenerator inStreamGenerator = InputStreamBodyGenerator.class.cast(request.getBodyGenerator());
-                nettyBody = new NettyInputStreamBody(inStreamGenerator.getInputStream(), inStreamGenerator.getContentLength());
+        } else if (request.getBodyGenerator() instanceof ReactiveStreamsBodyGenerator) {
+            ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator = (ReactiveStreamsBodyGenerator) request.getBodyGenerator();
+            nettyBody = new NettyReactiveStreamsBody(reactiveStreamsBodyGenerator.getPublisher(), reactiveStreamsBodyGenerator.getContentLength());
 
-            } else if (request.getBodyGenerator() instanceof ReactiveStreamsBodyGenerator) {
-                ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator = (ReactiveStreamsBodyGenerator) request.getBodyGenerator();
-                nettyBody = new NettyReactiveStreamsBody(reactiveStreamsBodyGenerator.getPublisher(), reactiveStreamsBodyGenerator.getContentLength());
-
-            } else if (request.getBodyGenerator() != null) {
-                nettyBody = new NettyBodyBody(request.getBodyGenerator().createBody(), config);
-            }
+        } else if (request.getBodyGenerator() != null) {
+            nettyBody = new NettyBodyBody(request.getBodyGenerator().createBody(), config);
         }
 
         return nettyBody;
@@ -140,26 +132,25 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
         HttpVersion httpVersion = HttpVersion.HTTP_1_1;
         String requestUri = requestUri(uri, proxyServer, connect);
 
-        NettyBody body = body(request, connect);
+        NettyBody body = connect ? null : body(request);
 
-        HttpRequest httpRequest;
         NettyRequest nettyRequest;
-        if (body instanceof NettyDirectBody) {
-            ByteBuf buf = NettyDirectBody.class.cast(body).byteBuf();
-            httpRequest = new DefaultFullHttpRequest(httpVersion, method, requestUri, buf);
-            // body is passed as null as it's written directly with the request
+        if (body == null) {
+            HttpRequest httpRequest = new DefaultFullHttpRequest(httpVersion, method, requestUri, Unpooled.EMPTY_BUFFER);
             nettyRequest = new NettyRequest(httpRequest, null);
 
-        } else if (body == null) {
-            httpRequest = new DefaultFullHttpRequest(httpVersion, method, requestUri, Unpooled.EMPTY_BUFFER);
+        } else if (body instanceof NettyDirectBody) {
+            ByteBuf buf = NettyDirectBody.class.cast(body).byteBuf();
+            HttpRequest httpRequest = new DefaultFullHttpRequest(httpVersion, method, requestUri, buf);
+            // body is passed as null as it's written directly with the request
             nettyRequest = new NettyRequest(httpRequest, null);
 
         } else {
-            httpRequest = new DefaultHttpRequest(httpVersion, method, requestUri);
+            HttpRequest httpRequest = new DefaultHttpRequest(httpVersion, method, requestUri);
             nettyRequest = new NettyRequest(httpRequest, body);
         }
 
-        HttpHeaders headers = httpRequest.headers();
+        HttpHeaders headers = nettyRequest.getHttpRequest().headers();
 
         if (connect) {
             // assign proxy-auth as configured on request
@@ -186,31 +177,40 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
         }
 
         if (body != null) {
-            if (body.getContentLength() < 0)
-                headers.set(TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
-            else
-                headers.set(CONTENT_LENGTH, body.getContentLength());
+            if (!headers.contains(CONTENT_LENGTH)) {
+                if (body.getContentLength() < 0) {
+                    headers.set(TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);
+                } else {
+                    headers.set(CONTENT_LENGTH, body.getContentLength());
+                }
+            }
 
-            if (body.getContentType() != null)
-                headers.set(CONTENT_TYPE, body.getContentType());
+            if (body.getContentTypeOverride() != null) {
+                headers.set(CONTENT_TYPE, body.getContentTypeOverride());
+            }
         }
 
         // connection header and friends
         if (!connect && uri.isWebSocket()) {
             headers.set(UPGRADE, HttpHeaderValues.WEBSOCKET)//
                     .set(CONNECTION, HttpHeaderValues.UPGRADE)//
-                    .set(ORIGIN, "http://" + uri.getHost() + ":" + uri.getExplicitPort())//
                     .set(SEC_WEBSOCKET_KEY, getKey())//
                     .set(SEC_WEBSOCKET_VERSION, "13");
 
+            if (!headers.contains(ORIGIN)) {
+                headers.set(ORIGIN, computeOriginHeader(uri));
+            }
+
         } else if (!headers.contains(CONNECTION)) {
             CharSequence connectionHeaderValue = connectionHeader(config.isKeepAlive(), httpVersion);
-            if (connectionHeaderValue != null)
+            if (connectionHeaderValue != null) {
                 headers.set(CONNECTION, connectionHeaderValue);
+            }
         }
 
-        if (!headers.contains(HOST))
+        if (!headers.contains(HOST)) {
             headers.set(HOST, hostHeader(request, uri));
+        }
 
         // don't override authorization but append
         addAuthorizationHeader(headers, perRequestAuthorizationHeader(request, realm));
@@ -220,32 +220,31 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
         }
 
         // Add default accept headers
-        if (!headers.contains(ACCEPT))
+        if (!headers.contains(ACCEPT)) {
             headers.set(ACCEPT, "*/*");
+        }
 
         // Add default user agent
-        if (!headers.contains(USER_AGENT) && config.getUserAgent() != null)
+        if (!headers.contains(USER_AGENT) && config.getUserAgent() != null) {
             headers.set(USER_AGENT, config.getUserAgent());
+        }
 
         return nettyRequest;
     }
 
     private String requestUri(Uri uri, ProxyServer proxyServer, boolean connect) {
-        if (connect)
+        if (connect) {
             // proxy tunnelling, connect need host and explicit port
             return getAuthority(uri);
 
-        else if (proxyServer != null && !uri.isSecured())
+        } else if (proxyServer != null && !uri.isSecured()) {
             // proxy over HTTP, need full url
             return uri.toUrl();
 
-        else {
+        } else {
             // direct connection to target host or tunnel already connected: only path and query
             String path = getNonEmptyPath(uri);
-            if (isNonEmpty(uri.getQuery()))
-                return path + "?" + uri.getQuery();
-            else
-                return path;
+            return isNonEmpty(uri.getQuery()) ? path + "?" + uri.getQuery() : path;
         }
     }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
index 19bbdc432..41e2ade2f 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
@@ -23,7 +23,9 @@
 
     long getContentLength();
 
-    CharSequence getContentType();
+    default CharSequence getContentTypeOverride() {
+        return null;
+    }
 
     void write(Channel channel, NettyResponseFuture<?> future) throws IOException;
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
index 3a47562e0..76f5c2c28 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
@@ -51,11 +51,6 @@ public long getContentLength() {
         return body.getContentLength();
     }
 
-    @Override
-    public String getContentType() {
-        return null;
-    }
-
     @Override
     public void write(final Channel channel, NettyResponseFuture<?> future) throws IOException {
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
index a5ab11569..2b54340a4 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteArrayBody.java
@@ -20,15 +20,9 @@
 public class NettyByteArrayBody extends NettyDirectBody {
 
     private final byte[] bytes;
-    private final String contentType;
 
     public NettyByteArrayBody(byte[] bytes) {
-        this(bytes, null);
-    }
-
-    public NettyByteArrayBody(byte[] bytes, String contentType) {
         this.bytes = bytes;
-        this.contentType = contentType;
     }
 
     @Override
@@ -36,11 +30,6 @@ public long getContentLength() {
         return bytes.length;
     }
 
-    @Override
-    public String getContentType() {
-        return contentType;
-    }
-
     @Override
     public ByteBuf byteBuf() {
         return Unpooled.wrappedBuffer(bytes);
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteBufferBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteBufferBody.java
index 3a5e67d36..9d320aa17 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteBufferBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteBufferBody.java
@@ -21,18 +21,18 @@
 public class NettyByteBufferBody extends NettyDirectBody {
 
     private final ByteBuffer bb;
-    private final CharSequence contentType;
+    private final CharSequence contentTypeOverride;
     private final long length;
 
     public NettyByteBufferBody(ByteBuffer bb) {
         this(bb, null);
     }
 
-    public NettyByteBufferBody(ByteBuffer bb, CharSequence contentType) {
+    public NettyByteBufferBody(ByteBuffer bb, CharSequence contentTypeOverride) {
         this.bb = bb;
         length = bb.remaining();
         bb.mark();
-        this.contentType = contentType;
+        this.contentTypeOverride = contentTypeOverride;
     }
 
     @Override
@@ -41,8 +41,8 @@ public long getContentLength() {
     }
 
     @Override
-    public CharSequence getContentType() {
-        return contentType;
+    public CharSequence getContentTypeOverride() {
+        return contentTypeOverride;
     }
 
     @Override
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java
index 4a1f60183..3ec8ab3dd 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyCompositeByteArrayBody.java
@@ -21,17 +21,11 @@
 public class NettyCompositeByteArrayBody extends NettyDirectBody {
 
     private final byte[][] bytes;
-    private final String contentType;
     private final long contentLength;
 
     public NettyCompositeByteArrayBody(List<byte[]> bytes) {
-        this(bytes, null);
-    }
-
-    public NettyCompositeByteArrayBody(List<byte[]> bytes, String contentType) {
         this.bytes = new byte[bytes.size()][];
         bytes.toArray(this.bytes);
-        this.contentType = contentType;
         long l = 0;
         for (byte[] b : bytes)
             l += b.length;
@@ -43,11 +37,6 @@ public long getContentLength() {
         return contentLength;
     }
 
-    @Override
-    public String getContentType() {
-        return contentType;
-    }
-
     @Override
     public ByteBuf byteBuf() {
         return Unpooled.wrappedBuffer(bytes);
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
index 32c648341..4710166d6 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
@@ -62,11 +62,6 @@ public long getContentLength() {
         return length;
     }
 
-    @Override
-    public String getContentType() {
-        return null;
-    }
-
     @Override
     public void write(Channel channel, NettyResponseFuture<?> future) throws IOException {
         @SuppressWarnings("resource")
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java
index 02b46fdf6..b267a7a82 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyInputStreamBody.java
@@ -53,11 +53,6 @@ public long getContentLength() {
         return contentLength;
     }
 
-    @Override
-    public String getContentType() {
-        return null;
-    }
-
     @Override
     public void write(Channel channel, NettyResponseFuture<?> future) throws IOException {
         final InputStream is = inputStream;
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyMultipartBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyMultipartBody.java
index 350e40f3c..00c461263 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyMultipartBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyMultipartBody.java
@@ -24,7 +24,7 @@
 
 public class NettyMultipartBody extends NettyBodyBody {
 
-    private final String contentType;
+    private final String contentTypeOverride;
 
     public NettyMultipartBody(List<Part> parts, HttpHeaders headers, AsyncHttpClientConfig config) {
         this(newMultipartBody(parts, headers), config);
@@ -32,11 +32,11 @@ public NettyMultipartBody(List<Part> parts, HttpHeaders headers, AsyncHttpClient
 
     private NettyMultipartBody(MultipartBody body, AsyncHttpClientConfig config) {
         super(body, config);
-        contentType = body.getContentType();
+        contentTypeOverride = body.getContentType();
     }
 
     @Override
-    public String getContentType() {
-        return contentType;
+    public String getContentTypeOverride() {
+        return contentTypeOverride;
     }
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
index 29337cf54..9002e600e 100644
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody.java
@@ -49,11 +49,6 @@ public long getContentLength() {
         return contentLength;
     }
 
-    @Override
-    public String getContentType() {
-        return null;
-    }
-
     @Override
     public void write(Channel channel, NettyResponseFuture<?> future) throws IOException {
         if (future.isStreamConsumed()) {
@@ -67,7 +62,7 @@ public void write(Channel channel, NettyResponseFuture<?> future) throws IOExcep
     }
 
     private static class SubscriberAdapter implements Subscriber<ByteBuf> {
-        private volatile Subscriber<HttpContent> subscriber;
+        private final Subscriber<HttpContent> subscriber;
 
         public SubscriberAdapter(Subscriber<HttpContent> subscriber) {
             this.subscriber = subscriber;
diff --git a/client/src/main/java/org/asynchttpclient/uri/Uri.java b/client/src/main/java/org/asynchttpclient/uri/Uri.java
index fd6ee309b..6075ca4f7 100644
--- a/client/src/main/java/org/asynchttpclient/uri/Uri.java
+++ b/client/src/main/java/org/asynchttpclient/uri/Uri.java
@@ -12,8 +12,8 @@
  */
 package org.asynchttpclient.uri;
 
-import static org.asynchttpclient.util.Assertions.assertNotNull;
-import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
+import static org.asynchttpclient.util.Assertions.assertNotEmpty;
+import static org.asynchttpclient.util.MiscUtils.*;
 
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -36,6 +36,13 @@ public static Uri create(Uri context, final String originalUrl) {
         UriParser parser = new UriParser();
         parser.parse(context, originalUrl);
 
+        if (isEmpty(parser.scheme)) {
+            throw new IllegalArgumentException(originalUrl + " could not be parsed into a proper Uri, missing scheme");
+        }
+        if (isEmpty(parser.host)) {
+            throw new IllegalArgumentException(originalUrl + " could not be parsed into a proper Uri, missing host");
+        }
+
         return new Uri(parser.scheme,//
                 parser.userInfo,//
                 parser.host,//
@@ -61,9 +68,9 @@ public Uri(String scheme,//
             String path,//
             String query) {
 
-        this.scheme = assertNotNull(scheme, "scheme");
+        this.scheme = assertNotEmpty(scheme, "scheme");
         this.userInfo = userInfo;
-        this.host = assertNotNull(host, "host");
+        this.host = assertNotEmpty(host, "host");
         this.port = port;
         this.path = path;
         this.query = query;
diff --git a/client/src/main/java/org/asynchttpclient/util/Assertions.java b/client/src/main/java/org/asynchttpclient/util/Assertions.java
index 540e0cf2e..3a4126fbb 100644
--- a/client/src/main/java/org/asynchttpclient/util/Assertions.java
+++ b/client/src/main/java/org/asynchttpclient/util/Assertions.java
@@ -26,6 +26,7 @@ private Assertions() {
     }
 
     public static String assertNotEmpty(String value, String name) {
+        assertNotNull(value, name);
         if (value.length() == 0)
             throw new IllegalArgumentException("empty " + name);
         return value;
diff --git a/client/src/main/java/org/asynchttpclient/util/HttpUtils.java b/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
index 64de0fb96..45b9c39cc 100644
--- a/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
@@ -12,9 +12,11 @@
  */
 package org.asynchttpclient.util;
 
-import static java.nio.charset.StandardCharsets.ISO_8859_1;
+import static java.nio.charset.StandardCharsets.*;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
 
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.util.List;
@@ -82,28 +84,41 @@ public static boolean followRedirect(AsyncHttpClientConfig config, Request reque
         return request.getFollowRedirect() != null ? request.getFollowRedirect() : config.isFollowRedirect();
     }
 
-    private static StringBuilder urlEncodeFormParams0(List<Param> params) {
+    public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
+        return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
+    }
+
+    private static StringBuilder urlEncodeFormParams0(List<Param> params, Charset charset) {
         StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
         for (Param param : params) {
-            encodeAndAppendFormParam(sb, param.getName(), param.getValue());
+            encodeAndAppendFormParam(sb, param.getName(), param.getValue(), charset);
         }
         sb.setLength(sb.length() - 1);
         return sb;
     }
 
-    public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
-        return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params), charset);
-    }
-
-    private static void encodeAndAppendFormParam(final StringBuilder sb, final CharSequence name, final CharSequence value) {
-        Utf8UrlEncoder.encodeAndAppendFormElement(sb, name);
+    private static void encodeAndAppendFormParam(StringBuilder sb, String name, String value, Charset charset) {
+        encodeAndAppendFormField(sb, name, charset);
         if (value != null) {
             sb.append('=');
-            Utf8UrlEncoder.encodeAndAppendFormElement(sb, value);
+            encodeAndAppendFormField(sb, value, charset);
         }
         sb.append('&');
     }
 
+    private static void encodeAndAppendFormField(StringBuilder sb, String field, Charset charset) {
+        if (charset.equals(UTF_8)) {
+            Utf8UrlEncoder.encodeAndAppendFormElement(sb, field);
+        } else {
+            try {
+                // TODO there's probably room for perf improvements
+                sb.append(URLEncoder.encode(field, charset.name()));
+            } catch (UnsupportedEncodingException e) {
+                // can't happen, as Charset was already resolved
+            }
+        }
+    }
+
     public static String hostHeader(Request request, Uri uri) {
         String virtualHost = request.getVirtualHost();
         if (virtualHost != null)
@@ -114,4 +129,13 @@ public static String hostHeader(Request request, Uri uri) {
             return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + ":" + port;
         }
     }
+    
+    public static String computeOriginHeader(Uri uri) {
+        StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
+        sb.append(uri.isSecured() ? "https://" : "http://").append(uri.getHost());
+        if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
+            sb.append(':').append(uri.getPort());
+        }
+        return sb.toString();
+    }
 }
diff --git a/client/src/main/java/org/asynchttpclient/util/MiscUtils.java b/client/src/main/java/org/asynchttpclient/util/MiscUtils.java
index 3a4325072..02cb28257 100644
--- a/client/src/main/java/org/asynchttpclient/util/MiscUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/MiscUtils.java
@@ -23,7 +23,11 @@ private MiscUtils() {
     }
 
     public static boolean isNonEmpty(String string) {
-        return string != null && !string.isEmpty();
+        return !isEmpty(string);
+    }
+    
+    public static boolean isEmpty(String string) {
+        return string == null || string.isEmpty();
     }
 
     public static boolean isNonEmpty(Object[] array) {
diff --git a/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java b/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
index 39f1b40b2..f6f1a3979 100644
--- a/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
+++ b/client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
@@ -36,29 +36,42 @@
     public WebSocketUpgradeHandler(List<WebSocketListener> listeners) {
         this.listeners = listeners;
     }
+    
+    protected void setWebSocket0(NettyWebSocket webSocket) {}
+    protected void onStatusReceived0(HttpResponseStatus responseStatus) throws Exception {}
+    protected void onHeadersReceived0(HttpHeaders headers) throws Exception {}
+    protected void onBodyPartReceived0(HttpResponseBodyPart bodyPart) throws Exception {}
+    protected void onCompleted0() throws Exception {}
+    protected void onThrowable0(Throwable t) {}
+    protected void onOpen0() {}
 
     @Override
     public final State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+    	onStatusReceived0(responseStatus);
         return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS ? State.CONTINUE : State.ABORT;
     }
 
     @Override
     public final State onHeadersReceived(HttpHeaders headers) throws Exception {
+    	onHeadersReceived0(headers);
         return State.CONTINUE;
     }
 
     @Override
     public final State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
+    	onBodyPartReceived0(bodyPart);
         return State.CONTINUE;
     }
 
     @Override
     public final NettyWebSocket onCompleted() throws Exception {
+    	onCompleted0();
         return webSocket;
     }
 
     @Override
     public final void onThrowable(Throwable t) {
+    	onThrowable0(t);
         for (WebSocketListener listener : listeners) {
             if (webSocket != null) {
                 webSocket.addWebSocketListener(listener);
@@ -69,9 +82,11 @@ public final void onThrowable(Throwable t) {
 
     public final void setWebSocket(NettyWebSocket webSocket) {
         this.webSocket = webSocket;
+        setWebSocket0(webSocket);
     }
     
     public final void onOpen() {
+    	onOpen0();
         for (WebSocketListener listener : listeners) {
             webSocket.addWebSocketListener(listener);
             listener.onOpen(webSocket);
diff --git a/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java b/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
index 633315312..916b1f357 100644
--- a/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
+++ b/client/src/test/java/org/asynchttpclient/AbstractBasicTest.java
@@ -40,7 +40,6 @@
 
     @BeforeClass(alwaysRun = true)
     public void setUpGlobal() throws Exception {
-
         server = new Server();
         ServerConnector connector1 = addHttpConnector(server);
         server.setHandler(configureHandler());
@@ -55,8 +54,9 @@ public void setUpGlobal() throws Exception {
 
     @AfterClass(alwaysRun = true)
     public void tearDownGlobal() throws Exception {
-        if (server != null)
+        if (server != null) {
             server.stop();
+        }
     }
 
     protected String getTargetUrl() {
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
index 2291e7a99..dee17f46a 100755
--- a/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
@@ -240,7 +240,7 @@ public Response onCompleted(Response response) throws Exception {
         });
     }
 
-    @Test(expectedExceptions = NullPointerException.class)
+    @Test(expectedExceptions = IllegalArgumentException.class)
     public void nullSchemeThrowsNPE() throws Throwable {
         withClient().run(client -> client.prepareGet("gatling.io").execute());
     }
@@ -859,7 +859,7 @@ public void getShouldAllowBody() throws Throwable {
         });
     }
 
-    @Test(expectedExceptions = NullPointerException.class)
+    @Test(expectedExceptions = IllegalArgumentException.class)
     public void malformedUriThrowsException() throws Throwable {
         withClient().run(client -> {
             withServer(server).run(server -> {
diff --git a/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java b/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
index 88cd374bd..9e91261b1 100644
--- a/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
+++ b/client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
@@ -23,6 +23,7 @@
 import java.io.OutputStream;
 import java.io.PipedInputStream;
 import java.io.PipedOutputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeoutException;
@@ -31,10 +32,12 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.commons.io.IOUtils;
 import org.asynchttpclient.AbstractBasicTest;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.BoundRequestBuilder;
+import org.asynchttpclient.ListenableFuture;
 import org.asynchttpclient.Response;
 import org.asynchttpclient.exception.RemotelyClosedException;
 import org.asynchttpclient.handler.BodyDeferringAsyncHandler.BodyDeferringInputStream;
@@ -114,7 +117,7 @@ public AsyncHttpClientConfig getAsyncHttpClientConfig() {
     @Test(groups = "standalone")
     public void deferredSimple() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
-            BoundRequestBuilder r = client.prepareGet("http://localhost:" + port1 + "/deferredSimple");
+            BoundRequestBuilder r = client.prepareGet(getTargetUrl());
 
             CountingOutputStream cos = new CountingOutputStream();
             BodyDeferringAsyncHandler bdah = new BodyDeferringAsyncHandler(cos);
@@ -138,7 +141,7 @@ public void deferredSimple() throws IOException, ExecutionException, TimeoutExce
     @Test(groups = "standalone", expectedExceptions = RemotelyClosedException.class)
     public void deferredSimpleWithFailure() throws Throwable {
         try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
-            BoundRequestBuilder r = client.prepareGet("http://localhost:" + port1 + "/deferredSimpleWithFailure").addHeader("X-FAIL-TRANSFER", Boolean.TRUE.toString());
+            BoundRequestBuilder r = client.prepareGet(getTargetUrl()).addHeader("X-FAIL-TRANSFER", Boolean.TRUE.toString());
 
             CountingOutputStream cos = new CountingOutputStream();
             BodyDeferringAsyncHandler bdah = new BodyDeferringAsyncHandler(cos);
@@ -167,7 +170,7 @@ public void deferredSimpleWithFailure() throws Throwable {
     @Test(groups = "standalone")
     public void deferredInputStreamTrick() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
-            BoundRequestBuilder r = client.prepareGet("http://localhost:" + port1 + "/deferredInputStreamTrick");
+            BoundRequestBuilder r = client.prepareGet(getTargetUrl());
 
             PipedOutputStream pos = new PipedOutputStream();
             PipedInputStream pis = new PipedInputStream(pos);
@@ -200,7 +203,7 @@ public void deferredInputStreamTrick() throws IOException, ExecutionException, T
     @Test(groups = "standalone", expectedExceptions = RemotelyClosedException.class)
     public void deferredInputStreamTrickWithFailure() throws Throwable {
         try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
-            BoundRequestBuilder r = client.prepareGet("http://localhost:" + port1 + "/deferredInputStreamTrickWithFailure").addHeader("X-FAIL-TRANSFER", Boolean.TRUE.toString());
+            BoundRequestBuilder r = client.prepareGet(getTargetUrl()).addHeader("X-FAIL-TRANSFER", Boolean.TRUE.toString());
             PipedOutputStream pos = new PipedOutputStream();
             PipedInputStream pis = new PipedInputStream(pos);
             BodyDeferringAsyncHandler bdah = new BodyDeferringAsyncHandler(pos);
@@ -240,4 +243,26 @@ public void testConnectionRefused() throws IOException, ExecutionException, Time
             bdah.getResponse();
         }
     }
+
+    @Test(groups = "standalone")
+    public void testPipedStreams() throws Exception {
+        try (AsyncHttpClient client = asyncHttpClient(getAsyncHttpClientConfig())) {
+            PipedOutputStream pout = new PipedOutputStream();
+            try (PipedInputStream pin = new PipedInputStream(pout)) {
+                BodyDeferringAsyncHandler handler = new BodyDeferringAsyncHandler(pout);
+                ListenableFuture<Response> respFut = client.prepareGet(getTargetUrl()).execute(handler);
+
+                Response resp = handler.getResponse();
+
+                if (resp.getStatusCode() == 200) {
+                    try (BodyDeferringInputStream is = new BodyDeferringInputStream(respFut, handler, pin)) {
+                        String body = IOUtils.toString(is, StandardCharsets.UTF_8);
+                        assertTrue(body.contains("ABCDEF"));
+                    }
+                } else {
+                    throw new IOException("HTTP error " + resp.getStatusCode());
+                }
+            }
+        }
+    }
 }
diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
index a9a43365b..c54b89180 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
@@ -19,6 +19,7 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.HttpHeaders;
+import io.reactivex.Flowable;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -60,16 +61,12 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import rx.Observable;
-import rx.RxReactiveStreams;
-
 public class ReactiveStreamsTest {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ReactiveStreamsTest.class);
 
     public static Publisher<ByteBuf> createPublisher(final byte[] bytes, final int chunkSize) {
-        Observable<ByteBuf> observable = Observable.from(new ByteBufIterable(bytes, chunkSize));
-        return RxReactiveStreams.toPublisher(observable);
+        return Flowable.fromIterable(new ByteBufIterable(bytes, chunkSize));
     }
 
     private Tomcat tomcat;
@@ -236,11 +233,7 @@ public void testConnectionDoesNotGetClosed() throws Exception {
 
             byte[] responseBody = response.getResponseBodyAsBytes();
             responseBody = response.getResponseBodyAsBytes();
-            assertEquals(
-                Integer.valueOf(response.getHeader("X-" + CONTENT_LENGTH)).intValue(),
-                LARGE_IMAGE_BYTES.length,
-                "Server side payload length invalid"
-            );
+            assertEquals(Integer.valueOf(response.getHeader("X-" + CONTENT_LENGTH)).intValue(), LARGE_IMAGE_BYTES.length, "Server side payload length invalid");
             assertEquals(responseBody.length, LARGE_IMAGE_BYTES.length, "Client side payload length invalid");
             assertEquals(response.getHeader(CONTENT_MD5), expectedMd5, "Server side payload MD5 invalid");
             assertEquals(TestUtils.md5(responseBody), expectedMd5, "Client side payload MD5 invalid");
@@ -249,11 +242,7 @@ public void testConnectionDoesNotGetClosed() throws Exception {
             response = requestBuilder.execute().get();
             assertEquals(response.getStatusCode(), 200);
             responseBody = response.getResponseBodyAsBytes();
-            assertEquals(
-                Integer.valueOf(response.getHeader("X-" + CONTENT_LENGTH)).intValue(),
-                LARGE_IMAGE_BYTES.length,
-                "Server side payload length invalid"
-            );
+            assertEquals(Integer.valueOf(response.getHeader("X-" + CONTENT_LENGTH)).intValue(), LARGE_IMAGE_BYTES.length, "Server side payload length invalid");
             assertEquals(responseBody.length, LARGE_IMAGE_BYTES.length, "Client side payload length invalid");
 
             try {
@@ -285,9 +274,7 @@ public static void main(String[] args) throws Exception {
     @Test(groups = "standalone", expectedExceptions = ExecutionException.class)
     public void testFailingStream() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
-            Observable<ByteBuf> failingObservable = Observable.error(new FailedStream());
-            Publisher<ByteBuf> failingPublisher = RxReactiveStreams.toPublisher(failingObservable);
-
+            Publisher<ByteBuf> failingPublisher = Flowable.error(new FailedStream());
             client.preparePut(getTargetUrl()).setBody(failingPublisher).execute().get();
         }
     }
@@ -520,7 +507,7 @@ public ByteBufIterable(byte[] payload, int chunkSize) {
         @Override
         public Iterator<ByteBuf> iterator() {
             return new Iterator<ByteBuf>() {
-                private volatile int currentIndex = 0;
+                private int currentIndex = 0;
 
                 @Override
                 public boolean hasNext() {
diff --git a/client/src/test/java/org/asynchttpclient/uri/UriTest.java b/client/src/test/java/org/asynchttpclient/uri/UriTest.java
index 7efffb50f..92685358f 100644
--- a/client/src/test/java/org/asynchttpclient/uri/UriTest.java
+++ b/client/src/test/java/org/asynchttpclient/uri/UriTest.java
@@ -12,10 +12,10 @@
  */
 package org.asynchttpclient.uri;
 
-import org.testng.annotations.Test;
-
 import static org.testng.Assert.*;
 
+import org.testng.annotations.Test;
+
 public class UriTest {
 
     @Test
@@ -228,6 +228,19 @@ public void testRelativeUriWithConsecutiveDotsFromLevel3Resource() {
         assertNull(url.getQuery());
     }
 
+    @Test
+    public void testRelativeUriWithNoScheme() {
+        Uri context = Uri.create("https://hello.com/level1");
+
+        Uri url = Uri.create(context, "//world.org/content/img.png");
+
+        assertEquals(url.getScheme(), "https");
+        assertEquals(url.getHost(), "world.org");
+        assertEquals(url.getPort(), -1);
+        assertEquals(url.getPath(), "/content/img.png");
+        assertNull(url.getQuery());
+    }
+
     @Test
     public void testCreateAndToUrl() {
         String url = "https://hello.com/level1/level2/level3";
@@ -358,4 +371,19 @@ public void testIsWebsocket() {
         uri = Uri.create(url);
         assertTrue(uri.isWebSocket(), "isWebSocket should return true for wss url");
     }
+
+    @Test
+    public void creatingUriWithDefinedSchemeAndHostWorks() {
+        Uri.create("http://localhost");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void creatingUriWithMissingSchemeThrowsIllegalArgumentException() {
+        Uri.create("localhost");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void creatingUriWithMissingHostThrowsIllegalArgumentException() {
+        Uri.create("http://");
+    }
 }
diff --git a/client/src/test/java/org/asynchttpclient/util/HttpUtilsTest.java b/client/src/test/java/org/asynchttpclient/util/HttpUtilsTest.java
index cf88947da..1e99c3b8b 100644
--- a/client/src/test/java/org/asynchttpclient/util/HttpUtilsTest.java
+++ b/client/src/test/java/org/asynchttpclient/util/HttpUtilsTest.java
@@ -13,14 +13,23 @@
  */
 package org.asynchttpclient.util;
 
+import static java.nio.charset.StandardCharsets.*;
 import static org.testng.Assert.*;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
 
+import java.net.URLEncoder;
+import java.nio.ByteBuffer;
+import java.nio.charset.CharacterCodingException;
 import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.asynchttpclient.DefaultAsyncHttpClientConfig;
 import org.asynchttpclient.Dsl;
+import org.asynchttpclient.Param;
 import org.asynchttpclient.Request;
+import org.asynchttpclient.netty.util.ByteBufUtils;
 import org.asynchttpclient.uri.Uri;
 import org.testng.annotations.Test;
 
@@ -92,19 +101,19 @@ public void testIsSameBaseUrlReturnsTrueWhenOneUriHasDefaultPort() {
     @Test
     public void testParseCharsetWithoutQuotes() {
         Charset charset = HttpUtils.parseCharset("Content-type: application/json; charset=utf-8");
-        assertEquals(charset, StandardCharsets.UTF_8, "parseCharset returned wrong Charset");
+        assertEquals(charset, UTF_8, "parseCharset returned wrong Charset");
     }
 
     @Test
     public void testParseCharsetWithSingleQuotes() {
         Charset charset = HttpUtils.parseCharset("Content-type: application/json; charset='utf-8'");
-        assertEquals(charset, StandardCharsets.UTF_8, "parseCharset returned wrong Charset");
+        assertEquals(charset, UTF_8, "parseCharset returned wrong Charset");
     }
 
     @Test
     public void testParseCharsetWithDoubleQuotes() {
         Charset charset = HttpUtils.parseCharset("Content-type: application/json; charset=\"utf-8\"");
-        assertEquals(charset, StandardCharsets.UTF_8, "parseCharset returned wrong Charset");
+        assertEquals(charset, UTF_8, "parseCharset returned wrong Charset");
     }
 
     @Test
@@ -160,4 +169,64 @@ public void testGetFollowRedirectPriorityGivenToRequest() {
         boolean followRedirect = HttpUtils.followRedirect(config, request);
         assertFalse(followRedirect, "Follow redirect value set in request should be given priority");
     }
+
+    private void formUrlEncoding(Charset charset) throws Exception {
+        String key = "key";
+        String value = "中文";
+        List<Param> params = new ArrayList<>();
+        params.add(new Param(key, value));
+        ByteBuffer ahcBytes = HttpUtils.urlEncodeFormParams(params, charset);
+        String ahcString = toUsAsciiString(ahcBytes);
+        String jdkString = key + "=" + URLEncoder.encode(value, charset.name());
+        assertEquals(ahcString, jdkString);
+    }
+
+    @Test
+    public void formUrlEncodingShouldSupportUtf8Charset() throws Exception {
+        formUrlEncoding(UTF_8);
+    }
+
+    @Test
+    public void formUrlEncodingShouldSupportNonUtf8Charset() throws Exception {
+        formUrlEncoding(Charset.forName("GBK"));
+    }
+
+    private static String toUsAsciiString(ByteBuffer buf) throws CharacterCodingException {
+        ByteBuf bb = Unpooled.wrappedBuffer(buf);
+        try {
+            return ByteBufUtils.byteBuf2String(US_ASCII, bb);
+        } finally {
+            bb.release();
+        }
+    }
+
+    @Test
+    public void computeOriginForPlainUriWithImplicitPort() {
+        assertEquals(HttpUtils.computeOriginHeader(Uri.create("ws://foo.com/bar")), "http://foo.com");
+    }
+
+    @Test
+    public void computeOriginForPlainUriWithDefaultPort() {
+        assertEquals(HttpUtils.computeOriginHeader(Uri.create("ws://foo.com:80/bar")), "http://foo.com");
+    }
+
+    @Test
+    public void computeOriginForPlainUriWithNonDefaultPort() {
+        assertEquals(HttpUtils.computeOriginHeader(Uri.create("ws://foo.com:81/bar")), "http://foo.com:81");
+    }
+
+    @Test
+    public void computeOriginForSecuredUriWithImplicitPort() {
+        assertEquals(HttpUtils.computeOriginHeader(Uri.create("wss://foo.com/bar")), "https://foo.com");
+    }
+
+    @Test
+    public void computeOriginForSecuredUriWithDefaultPort() {
+        assertEquals(HttpUtils.computeOriginHeader(Uri.create("wss://foo.com:443/bar")), "https://foo.com");
+    }
+
+    @Test
+    public void computeOriginForSecuredUriWithNonDefaultPort() {
+        assertEquals(HttpUtils.computeOriginHeader(Uri.create("wss://foo.com:444/bar")), "https://foo.com:444");
+    }
 }
diff --git a/client/src/test/java/org/asynchttpclient/ws/AbstractBasicTest.java b/client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
similarity index 72%
rename from client/src/test/java/org/asynchttpclient/ws/AbstractBasicTest.java
rename to client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
index 6688da4b0..a0296bb53 100644
--- a/client/src/test/java/org/asynchttpclient/ws/AbstractBasicTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
@@ -14,32 +14,37 @@
 
 import static org.asynchttpclient.test.TestUtils.addHttpConnector;
 
+import org.asynchttpclient.AbstractBasicTest;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.websocket.server.WebSocketHandler;
-import org.testng.annotations.AfterClass;
+import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.BeforeClass;
 
-public abstract class AbstractBasicTest extends org.asynchttpclient.AbstractBasicTest {
+public abstract class AbstractBasicWebSocketTest extends AbstractBasicTest {
 
     @BeforeClass(alwaysRun = true)
+    @Override
     public void setUpGlobal() throws Exception {
         server = new Server();
         ServerConnector connector = addHttpConnector(server);
-        server.setHandler(getWebSocketHandler());
+        server.setHandler(configureHandler());
         server.start();
         port1 = connector.getLocalPort();
         logger.info("Local HTTP server started successfully");
     }
 
-    @AfterClass(alwaysRun = true)
-    public void tearDownGlobal() throws Exception {
-        server.stop();
-    }
-
     protected String getTargetUrl() {
         return String.format("ws://localhost:%d/", port1);
     }
-
-    public abstract WebSocketHandler getWebSocketHandler();
+    
+    @Override
+    public WebSocketHandler configureHandler() {
+        return new WebSocketHandler() {
+            @Override
+            public void configure(WebSocketServletFactory factory) {
+                factory.register(EchoSocket.class);
+            }
+        };
+    }
 }
diff --git a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
index e3f666449..313113f0a 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
@@ -20,24 +20,12 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.asynchttpclient.AsyncHttpClient;
-import org.eclipse.jetty.websocket.server.WebSocketHandler;
-import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.Test;
 
-public class ByteMessageTest extends AbstractBasicTest {
+public class ByteMessageTest extends AbstractBasicWebSocketTest {
     
     private static final byte[] ECHO_BYTES = "ECHO".getBytes(StandardCharsets.UTF_8);
 
-    @Override
-    public WebSocketHandler getWebSocketHandler() {
-        return new WebSocketHandler() {
-            @Override
-            public void configure(WebSocketServletFactory factory) {
-                factory.register(EchoSocket.class);
-            }
-        };
-    }
-
     @Test(groups = "standalone")
     public void echoByte() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient()) {
diff --git a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
index 132b4e842..3a602783f 100644
--- a/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
@@ -21,21 +21,9 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.asynchttpclient.AsyncHttpClient;
-import org.eclipse.jetty.websocket.server.WebSocketHandler;
-import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.Test;
 
-public class CloseCodeReasonMessageTest extends AbstractBasicTest {
-
-    @Override
-    public WebSocketHandler getWebSocketHandler() {
-        return new WebSocketHandler() {
-            @Override
-            public void configure(WebSocketServletFactory factory) {
-                factory.register(EchoSocket.class);
-            }
-        };
-    }
+public class CloseCodeReasonMessageTest extends AbstractBasicWebSocketTest {
 
     @Test(groups = "standalone", timeOut = 60000)
     public void onCloseWithCode() throws Exception {
diff --git a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
index 515ad95fb..ba2d7f01d 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
@@ -24,15 +24,13 @@
 import org.eclipse.jetty.proxy.ConnectHandler;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ServerConnector;
-import org.eclipse.jetty.websocket.server.WebSocketHandler;
-import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.Test;
 
 /**
  * Proxy usage tests.
  */
-public class ProxyTunnellingTest extends AbstractBasicTest {
+public class ProxyTunnellingTest extends AbstractBasicWebSocketTest {
 
     private Server server2;
 
@@ -46,23 +44,13 @@ public void setUpServers(boolean targetHttps) throws Exception {
         server2 = new Server();
         @SuppressWarnings("resource")
         ServerConnector connector2 = targetHttps ? addHttpsConnector(server2) : addHttpConnector(server2);
-        server2.setHandler(getWebSocketHandler());
+        server2.setHandler(configureHandler());
         server2.start();
         port2 = connector2.getLocalPort();
 
         logger.info("Local HTTP server started successfully");
     }
 
-    @Override
-    public WebSocketHandler getWebSocketHandler() {
-        return new WebSocketHandler() {
-            @Override
-            public void configure(WebSocketServletFactory factory) {
-                factory.register(EchoSocket.class);
-            }
-        };
-    }
-
     @AfterMethod(alwaysRun = true)
     public void tearDownGlobal() throws Exception {
         server.stop();
diff --git a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
index 893ac4fbb..763848cc1 100644
--- a/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
@@ -31,12 +31,10 @@
 import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.eclipse.jetty.server.handler.HandlerList;
-import org.eclipse.jetty.websocket.server.WebSocketHandler;
-import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-public class RedirectTest extends AbstractBasicTest {
+public class RedirectTest extends AbstractBasicWebSocketTest {
 
     @BeforeClass
     @Override
@@ -55,7 +53,7 @@ public void handle(String s, Request request, HttpServletRequest httpServletRequ
                 }
             }
         });
-        list.addHandler(getWebSocketHandler());
+        list.addHandler(configureHandler());
         server.setHandler(list);
 
         server.start();
@@ -64,17 +62,6 @@ public void handle(String s, Request request, HttpServletRequest httpServletRequ
         logger.info("Local HTTP server started successfully");
     }
 
-    @Override
-    public WebSocketHandler getWebSocketHandler() {
-        return new WebSocketHandler() {
-            @Override
-            public void configure(WebSocketServletFactory factory) {
-                factory.register(EchoSocket.class);
-            }
-        };
-    }
-
-
     @Test(groups = "standalone", timeOut = 60000)
     public void testRedirectToWSResource() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient(config().setFollowRedirect(true))) {
diff --git a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
index ac9054ae6..2da22ec79 100644
--- a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
@@ -21,21 +21,9 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.asynchttpclient.AsyncHttpClient;
-import org.eclipse.jetty.websocket.server.WebSocketHandler;
-import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.Test;
 
-public class TextMessageTest extends AbstractBasicTest {
-
-    @Override
-    public WebSocketHandler getWebSocketHandler() {
-        return new WebSocketHandler() {
-            @Override
-            public void configure(WebSocketServletFactory factory) {
-                factory.register(EchoSocket.class);
-            }
-        };
-    }
+public class TextMessageTest extends AbstractBasicWebSocketTest {
 
     @Test(groups = "standalone", timeOut = 60000)
     public void onOpen() throws Exception {
diff --git a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
index 9d2c62562..90253fbd8 100644
--- a/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/WebSocketWriteFutureTest.java
@@ -24,10 +24,10 @@
 import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.testng.annotations.Test;
 
-public class WebSocketWriteFutureTest extends AbstractBasicTest {
+public class WebSocketWriteFutureTest extends AbstractBasicWebSocketTest {
 
     @Override
-    public WebSocketHandler getWebSocketHandler() {
+    public WebSocketHandler configureHandler() {
         return new WebSocketHandler() {
             @Override
             public void configure(WebSocketServletFactory factory) {
diff --git a/extras/rxjava/pom.xml b/extras/rxjava/pom.xml
index 422393d16..7c77178cc 100644
--- a/extras/rxjava/pom.xml
+++ b/extras/rxjava/pom.xml
@@ -12,7 +12,6 @@
         <dependency>
             <groupId>io.reactivex</groupId>
             <artifactId>rxjava</artifactId>
-            <version>1.2.9</version>
         </dependency>
     </dependencies>
 </project>
diff --git a/extras/rxjava2/pom.xml b/extras/rxjava2/pom.xml
index 1e1025f5e..434e67a95 100644
--- a/extras/rxjava2/pom.xml
+++ b/extras/rxjava2/pom.xml
@@ -12,7 +12,6 @@
         <dependency>
             <groupId>io.reactivex.rxjava2</groupId>
             <artifactId>rxjava</artifactId>
-            <version>2.0.8</version>
         </dependency>
     </dependencies>
 </project>
diff --git a/pom.xml b/pom.xml
index da491143e..29860913c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -257,11 +257,26 @@
 				<version>${netty.version}</version>
 				<optional>true</optional>
 			</dependency>
+			<dependency>
+				<groupId>org.reactivestreams</groupId>
+				<artifactId>reactive-streams</artifactId>
+				<version>${reactive-streams.version}</version>
+			</dependency>
+			<dependency>
+				<groupId>com.typesafe.netty</groupId>
+				<artifactId>netty-reactive-streams</artifactId>
+				<version>${netty-reactive-streams.version}</version>
+			</dependency>
 			<dependency>
 				<groupId>io.reactivex</groupId>
 				<artifactId>rxjava</artifactId>
 				<version>${rxjava.version}</version>
 			</dependency>
+			<dependency>
+				<groupId>io.reactivex.rxjava2</groupId>
+				<artifactId>rxjava</artifactId>
+				<version>${rxjava2.version}</version>
+			</dependency>
 		</dependencies>
 	</dependencyManagement>
 	<dependencies>
@@ -349,12 +364,6 @@
 			<version>${privilegedaccessor.version}</version>
 			<scope>test</scope>
 		</dependency>
-		<dependency>
-			<groupId>io.reactivex</groupId>
-			<artifactId>rxjava-reactive-streams</artifactId>
-			<version>${rxjava-reactive-streams.version}</version>
-			<scope>test</scope>
-		</dependency>
 		<dependency>
 			<groupId>org.powermock</groupId>
 			<artifactId>powermock-module-testng</artifactId>
@@ -373,8 +382,12 @@
 		<surefire.redirectTestOutputToFile>true</surefire.redirectTestOutputToFile>
 		<source.property>1.8</source.property>
 		<target.property>1.8</target.property>
-		<netty.version>4.1.13.Final</netty.version>
+		<netty.version>4.1.14.Final</netty.version>
 		<slf4j.version>1.7.25</slf4j.version>
+		<reactive-streams.version>1.0.0</reactive-streams.version>
+		<netty-reactive-streams.version>2.0.0</netty-reactive-streams.version>
+		<rxjava.version>1.3.0</rxjava.version>
+		<rxjava2.version>2.1.2</rxjava2.version>
 		<logback.version>1.2.3</logback.version>
 		<testng.version>6.9.10</testng.version>
 		<jetty.version>9.4.6.v20170531</jetty.version>
@@ -382,8 +395,6 @@
 		<commons-io.version>2.4</commons-io.version>
 		<commons-fileupload.version>1.3</commons-fileupload.version>
 		<privilegedaccessor.version>1.2.2</privilegedaccessor.version>
-		<rxjava-reactive-streams.version>1.2.1</rxjava-reactive-streams.version>
-		<rxjava.version>1.3.0</rxjava.version>
 		<powermock.version>1.6.4</powermock.version>
 	</properties>
 </project>
