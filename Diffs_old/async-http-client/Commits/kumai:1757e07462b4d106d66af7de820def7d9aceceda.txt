diff --git a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
index c4c934134..323df1c07 100644
--- a/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
+++ b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
@@ -519,20 +519,8 @@ public int getMaxConnectionLifeTimeInMs() {
         private boolean useProxyProperties = Boolean.getBoolean(ASYNC_CLIENT + "useProxyProperties");
         private boolean allowPoolingConnection = true;
         private boolean useRelativeURIsWithSSLProxies = Boolean.getBoolean(ASYNC_CLIENT + "useRelativeURIsWithSSLProxies");
-        private ScheduledExecutorService reaper = Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors(), new ThreadFactory() {
-            public Thread newThread(Runnable r) {
-                Thread t = new Thread(r, "AsyncHttpClient-Reaper");
-                t.setDaemon(true);
-                return t;
-            }
-        });
-        private ExecutorService applicationThreadPool = Executors.newCachedThreadPool(new ThreadFactory() {
-            public Thread newThread(Runnable r) {
-                Thread t = new Thread(r, "AsyncHttpClient-Callback");
-                t.setDaemon(true);
-                return t;
-            }
-        });
+        private ScheduledExecutorService reaper;
+        private ExecutorService applicationThreadPool;
         private ProxyServer proxyServer = null;
         private SSLContext sslContext;
         private SSLEngineFactory sslEngineFactory;
@@ -710,7 +698,6 @@ public Builder setKeepAlive(boolean allowPoolingConnection) {
          * @return a {@link Builder}
          */
         public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {
-            if (this.reaper != null) this.reaper.shutdown();
             this.reaper = reaper;
             return this;
         }
@@ -724,7 +711,6 @@ public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {
          * @return a {@link Builder}
          */
         public Builder setExecutorService(ExecutorService applicationThreadPool) {
-            if (this.applicationThreadPool != null) this.applicationThreadPool.shutdown();
             this.applicationThreadPool = applicationThreadPool;
             return this;
         }
@@ -1058,6 +1044,29 @@ public Builder(AsyncHttpClientConfig prototype) {
          */
         public AsyncHttpClientConfig build() {
 
+            if (reaper == null) {
+                reaper = Executors.newScheduledThreadPool(Runtime.getRuntime()
+                        .availableProcessors(), new ThreadFactory() {
+                    public Thread newThread(Runnable r) {
+                        Thread t = new Thread(r, "AsyncHttpClient-Reaper");
+                        t.setDaemon(true);
+                        return t;
+                    }
+                });
+            }
+
+            if (applicationThreadPool == null) {
+                applicationThreadPool = Executors
+                        .newCachedThreadPool(new ThreadFactory() {
+                            public Thread newThread(Runnable r) {
+                                Thread t = new Thread(r,
+                                        "AsyncHttpClient-Callback");
+                                t.setDaemon(true);
+                                return t;
+                            }
+                        });
+            }
+
             if (applicationThreadPool.isShutdown()) {
                 throw new IllegalStateException("ExecutorServices closed");
             }
