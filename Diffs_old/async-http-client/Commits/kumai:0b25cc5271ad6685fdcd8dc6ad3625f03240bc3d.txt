diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index cc1af94a3..e9020c32e 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -2423,7 +2423,7 @@ public void onClose(ChannelHandlerContext ctx, ChannelStateEvent e) {
                 WebSocketUpgradeHandler h = WebSocketUpgradeHandler.class.cast(nettyResponse.getAsyncHandler());
                 NettyWebSocket webSocket = NettyWebSocket.class.cast(h.onCompleted());
 
-                webSocket.close();
+                webSocket.close(1006, "Connection was closed abnormally (that is, with no close frame being sent).");
             } catch (Throwable t) {
                 log.error("onError", t);
             }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java b/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
index b572dcf0f..bd8704f8e 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
@@ -122,6 +122,12 @@ public void close() {
         }
     }
 
+    // @Override
+    public void close(int statusCode, String reason) {
+        onClose(statusCode, reason);
+        listeners.clear();
+    }
+
     protected void onBinaryFragment(byte[] message, boolean last) {
         for (WebSocketListener l : listeners) {
             if (WebSocketByteListener.class.isAssignableFrom(l.getClass())) {
