diff --git a/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
index f635559d1..ad85a6189 100644
--- a/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
@@ -1,8 +1,8 @@
 package org.asynchttpclient;
 
 import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
 import io.netty.channel.ChannelOption;
-import io.netty.channel.ChannelPipeline;
 import io.netty.channel.EventLoopGroup;
 import io.netty.handler.ssl.SslContext;
 import io.netty.util.Timer;
@@ -268,9 +268,9 @@
 
     boolean isUseNativeTransport();
 
-    AdditionalPipelineInitializer getHttpAdditionalPipelineInitializer();
+    AdditionalChannelInitializer getHttpAdditionalChannelInitializer();
 
-    AdditionalPipelineInitializer getWsAdditionalPipelineInitializer();
+    AdditionalChannelInitializer getWsAdditionalChannelInitializer();
 
     ResponseBodyPartFactory getResponseBodyPartFactory();
 
@@ -280,9 +280,9 @@
 
     KeepAliveStrategy getKeepAliveStrategy();
 
-    interface AdditionalPipelineInitializer {
+    interface AdditionalChannelInitializer {
 
-        void initPipeline(ChannelPipeline pipeline) throws Exception;
+        void initChannel(Channel channel) throws Exception;
     }
 
     enum ResponseBodyPartFactory {
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
index 595339fc4..8580e439e 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
@@ -119,8 +119,8 @@
     private final boolean useNativeTransport;
     private final Timer nettyTimer;
     private final ThreadFactory threadFactory;
-    private final AdditionalPipelineInitializer httpAdditionalPipelineInitializer;
-    private final AdditionalPipelineInitializer wsAdditionalPipelineInitializer;
+    private final AdditionalChannelInitializer httpAdditionalChannelInitializer;
+    private final AdditionalChannelInitializer wsAdditionalChannelInitializer;
     private final ResponseBodyPartFactory responseBodyPartFactory;
 
     private DefaultAsyncHttpClientConfig(//
@@ -182,8 +182,8 @@ private DefaultAsyncHttpClientConfig(//
             boolean useNativeTransport,//
             Timer nettyTimer,//
             ThreadFactory threadFactory,//
-            AdditionalPipelineInitializer httpAdditionalPipelineInitializer,//
-            AdditionalPipelineInitializer wsAdditionalPipelineInitializer,//
+            AdditionalChannelInitializer httpAdditionalPipelineInitializer,//
+            AdditionalChannelInitializer wsAdditionalPipelineInitializer,//
             ResponseBodyPartFactory responseBodyPartFactory) {
 
         // http
@@ -244,8 +244,8 @@ private DefaultAsyncHttpClientConfig(//
         this.useNativeTransport = useNativeTransport;
         this.nettyTimer = nettyTimer;
         this.threadFactory = threadFactory;
-        this.httpAdditionalPipelineInitializer = httpAdditionalPipelineInitializer;
-        this.wsAdditionalPipelineInitializer = wsAdditionalPipelineInitializer;
+        this.httpAdditionalChannelInitializer = httpAdditionalPipelineInitializer;
+        this.wsAdditionalChannelInitializer = wsAdditionalPipelineInitializer;
         this.responseBodyPartFactory = responseBodyPartFactory;
     }
 
@@ -497,13 +497,13 @@ public ThreadFactory getThreadFactory() {
     }
 
     @Override
-    public AdditionalPipelineInitializer getHttpAdditionalPipelineInitializer() {
-        return httpAdditionalPipelineInitializer;
+    public AdditionalChannelInitializer getHttpAdditionalChannelInitializer() {
+        return httpAdditionalChannelInitializer;
     }
 
     @Override
-    public AdditionalPipelineInitializer getWsAdditionalPipelineInitializer() {
-        return wsAdditionalPipelineInitializer;
+    public AdditionalChannelInitializer getWsAdditionalChannelInitializer() {
+        return wsAdditionalChannelInitializer;
     }
 
     @Override
@@ -576,8 +576,8 @@ public ResponseBodyPartFactory getResponseBodyPartFactory() {
         private EventLoopGroup eventLoopGroup;
         private Timer nettyTimer;
         private ThreadFactory threadFactory;
-        private AdditionalPipelineInitializer httpAdditionalPipelineInitializer;
-        private AdditionalPipelineInitializer wsAdditionalPipelineInitializer;
+        private AdditionalChannelInitializer httpAdditionalChannelInitializer;
+        private AdditionalChannelInitializer wsAdditionalChannelInitializer;
         private ResponseBodyPartFactory responseBodyPartFactory = ResponseBodyPartFactory.EAGER;
 
         public Builder() {
@@ -641,8 +641,8 @@ public Builder(AsyncHttpClientConfig config) {
             useNativeTransport = config.isUseNativeTransport();
             nettyTimer = config.getNettyTimer();
             threadFactory = config.getThreadFactory();
-            httpAdditionalPipelineInitializer = config.getHttpAdditionalPipelineInitializer();
-            wsAdditionalPipelineInitializer = config.getWsAdditionalPipelineInitializer();
+            httpAdditionalChannelInitializer = config.getHttpAdditionalChannelInitializer();
+            wsAdditionalChannelInitializer = config.getWsAdditionalChannelInitializer();
             responseBodyPartFactory = config.getResponseBodyPartFactory();
         }
 
@@ -928,13 +928,13 @@ public Builder setThreadFactory(ThreadFactory threadFactory) {
             return this;
         }
 
-        public Builder setHttpAdditionalPipelineInitializer(AdditionalPipelineInitializer httpAdditionalPipelineInitializer) {
-            this.httpAdditionalPipelineInitializer = httpAdditionalPipelineInitializer;
+        public Builder setHttpAdditionalChannelInitializer(AdditionalChannelInitializer httpAdditionalChannelInitializer) {
+            this.httpAdditionalChannelInitializer = httpAdditionalChannelInitializer;
             return this;
         }
 
-        public Builder setWsAdditionalPipelineInitializer(AdditionalPipelineInitializer wsAdditionalPipelineInitializer) {
-            this.wsAdditionalPipelineInitializer = wsAdditionalPipelineInitializer;
+        public Builder setWsAdditionalChannelInitializer(AdditionalChannelInitializer wsAdditionalChannelInitializer) {
+            this.wsAdditionalChannelInitializer = wsAdditionalChannelInitializer;
             return this;
         }
 
@@ -1006,8 +1006,8 @@ public DefaultAsyncHttpClientConfig build() {
                     useNativeTransport, //
                     nettyTimer, //
                     threadFactory, //
-                    httpAdditionalPipelineInitializer, //
-                    wsAdditionalPipelineInitializer, //
+                    httpAdditionalChannelInitializer, //
+                    wsAdditionalChannelInitializer, //
                     responseBodyPartFactory);
         }
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index 1a6ae5060..08cc62f94 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -253,8 +253,8 @@ protected void initChannel(Channel ch) throws Exception {
 
                 ch.config().setOption(ChannelOption.AUTO_READ, false);
 
-                if (config.getHttpAdditionalPipelineInitializer() != null)
-                    config.getHttpAdditionalPipelineInitializer().initPipeline(ch.pipeline());
+                if (config.getHttpAdditionalChannelInitializer() != null)
+                    config.getHttpAdditionalChannelInitializer().initChannel(ch);
             }
         });
 
@@ -265,8 +265,8 @@ protected void initChannel(Channel ch) throws Exception {
                         .addLast(HTTP_CLIENT_CODEC, newHttpClientCodec())//
                         .addLast(AHC_WS_HANDLER, wsHandler);
 
-                if (config.getWsAdditionalPipelineInitializer() != null)
-                    config.getWsAdditionalPipelineInitializer().initPipeline(ch.pipeline());
+                if (config.getWsAdditionalChannelInitializer() != null)
+                    config.getWsAdditionalChannelInitializer().initChannel(ch);
             }
         });
     }
diff --git a/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java b/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java
index f9033f3a8..c8cb58496 100644
--- a/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java
+++ b/client/src/test/java/org/asynchttpclient/netty/EventPipelineTest.java
@@ -15,9 +15,9 @@
 
 import static org.asynchttpclient.Dsl.*;
 import static org.testng.Assert.*;
+import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
-import io.netty.channel.ChannelPipeline;
 import io.netty.handler.codec.http.HttpMessage;
 
 import java.util.concurrent.CountDownLatch;
@@ -34,13 +34,13 @@
     @Test(groups = { "standalone", "netty_provider" })
     public void asyncPipelineTest() throws Exception {
 
-        AsyncHttpClientConfig.AdditionalPipelineInitializer httpAdditionalPipelineInitializer = new AsyncHttpClientConfig.AdditionalPipelineInitializer() {
-            public void initPipeline(ChannelPipeline pipeline) throws Exception {
-                pipeline.addBefore("inflater", "copyEncodingHeader", new CopyEncodingHandler());
+        AsyncHttpClientConfig.AdditionalChannelInitializer httpAdditionalPipelineInitializer = new AsyncHttpClientConfig.AdditionalChannelInitializer() {
+            public void initChannel(Channel channel) throws Exception {
+                channel.pipeline().addBefore("inflater", "copyEncodingHeader", new CopyEncodingHandler());
             }
         };
 
-        try (AsyncHttpClient p = asyncHttpClient(config().setHttpAdditionalPipelineInitializer(httpAdditionalPipelineInitializer))) {
+        try (AsyncHttpClient p = asyncHttpClient(config().setHttpAdditionalChannelInitializer(httpAdditionalPipelineInitializer))) {
             final CountDownLatch l = new CountDownLatch(1);
             p.executeRequest(get(getTargetUrl()), new AsyncCompletionHandlerAdapter() {
                 @Override
