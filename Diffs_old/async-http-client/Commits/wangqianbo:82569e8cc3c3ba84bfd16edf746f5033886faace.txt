diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
index 2218e7b4c..54cc8bd04 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
@@ -158,7 +158,7 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
         }
 
         HttpHeaders headers = httpRequest.headers();
-
+        //代理模式
         if (connect) {
             // assign proxy-auth as configured on request
             headers.set(PROXY_AUTHORIZATION, request.getHeaders().getAll(PROXY_AUTHORIZATION));
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java b/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
index b208308fe..874bb0d87 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
@@ -13,14 +13,14 @@
  */
 package org.asynchttpclient.netty.request.body;
 
-import static org.asynchttpclient.util.Assertions.assertNotNull;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.stream.ChunkedInput;
-
 import org.asynchttpclient.request.body.Body;
 
+import static org.asynchttpclient.util.Assertions.assertNotNull;
+
 /**
  * Adapts a {@link Body} to Netty's {@link ChunkedInput}.
  */
@@ -45,7 +45,7 @@ public BodyChunkedInput(Body body) {
 
     @Override
     @Deprecated
-         public ByteBuf readChunk(ChannelHandlerContext ctx) throws Exception {
+    public ByteBuf readChunk(ChannelHandlerContext ctx) throws Exception {
         return readChunk(ctx.alloc());
     }
 
@@ -58,17 +58,17 @@ public ByteBuf readChunk(ByteBufAllocator alloc) throws Exception {
         ByteBuf buffer = alloc.buffer(chunkSize);
         Body.BodyState state = body.transferTo(buffer);
         switch (state) {
-        case STOP:
-            endOfInput = true;
-            return buffer;
-        case SUSPEND:
-            // this will suspend the stream in ChunkedWriteHandler
-            buffer.release();
-            return null;
-        case CONTINUE:
-            return buffer;
-        default:
-            throw new IllegalStateException("Unknown state: " + state);
+            case STOP:
+                endOfInput = true;
+                return buffer;
+            case SUSPEND:
+                // this will suspend the stream in ChunkedWriteHandler
+                buffer.release();
+                return null;
+            case CONTINUE:
+                return buffer;
+            default:
+                throw new IllegalStateException("Unknown state: " + state);
         }
     }
 
@@ -86,7 +86,7 @@ public void close() throws Exception {
     public long length() {
         return contentLength;
     }
-     
+
     @Override
     public long progress() {
         return progress;
diff --git a/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java b/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java
index c61ce5411..a2b36bb27 100644
--- a/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java
+++ b/client/src/main/java/org/asynchttpclient/request/body/generator/PushBody.java
@@ -21,6 +21,7 @@
 
 import org.asynchttpclient.request.body.Body;
 
+
 public final class PushBody implements Body {
 
     private final Queue<BodyChunk> queue;
@@ -76,6 +77,8 @@ private void readChunk(ByteBuf target, BodyChunk part) {
         }
     }
 
+    // 是要发生copy吗？取决于ByteBuf的类型，估计要发生copy
+    //
     private void move(ByteBuf target, ByteBuffer source) {
         int size = Math.min(target.writableBytes(), source.remaining());
         if (size > 0) {
diff --git a/example/src/main/java/proxy/HttpFileServer.java b/example/src/main/java/proxy/HttpFileServer.java
index 2315b2191..e13aa88bc 100644
--- a/example/src/main/java/proxy/HttpFileServer.java
+++ b/example/src/main/java/proxy/HttpFileServer.java
@@ -23,11 +23,16 @@
 public class HttpFileServer {
     private final ChannelGroup channelGroup =
             new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE);
-    private final EventLoopGroup work = new NioEventLoopGroup();
-    private final EventLoopGroup boss = new NioEventLoopGroup();
+    private final static EventLoopGroup work = new NioEventLoopGroup();
+    private final static EventLoopGroup boss = new NioEventLoopGroup();
     private Channel channel;
-    private static AsyncHttpClientConfig config = new DefaultAsyncHttpClientConfig.Builder()
-            .build();
+    private static AsyncHttpClientConfig config;
+
+    static {
+        config = new DefaultAsyncHttpClientConfig.Builder()
+                .setEventLoopGroup(work)
+                .build();
+    }
 
     public static AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(config);
 
