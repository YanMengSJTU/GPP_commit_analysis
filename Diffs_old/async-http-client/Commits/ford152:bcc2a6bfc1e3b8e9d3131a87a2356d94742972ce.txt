diff --git a/README.md b/README.md
index a8919ee79..e2cfa63a6 100644
--- a/README.md
+++ b/README.md
@@ -176,7 +176,7 @@ AsyncHttpClient c = new DefaultAsyncHttpClient(cf);
 
 ## WebSocket
 
-Async Http Client also support WebSocket by simply doing:
+Async Http Client also supports WebSocket by simply doing:
 
 ```java
 WebSocket websocket = c.prepareGet(getTargetUrl())
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
index bded469db..1a8256c66 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
@@ -44,7 +44,6 @@
     private final AsyncHttpClientConfig config;
     private final AtomicBoolean closed = new AtomicBoolean(false);
     private final ChannelManager channelManager;
-    private final ConnectionSemaphore connectionSemaphore;
     private final NettyRequestSender requestSender;
     private final boolean allowStopNettyTimer;
     private final Timer nettyTimer;
@@ -52,8 +51,6 @@
     /**
      * Default signature calculator to use for all requests constructed by this
      * client instance.
-     *
-     * @since 1.1
      */
     protected SignatureCalculator signatureCalculator;
 
@@ -86,7 +83,7 @@ public DefaultAsyncHttpClient(AsyncHttpClientConfig config) {
         nettyTimer = allowStopNettyTimer ? newNettyTimer() : config.getNettyTimer();
 
         channelManager = new ChannelManager(config, nettyTimer);
-        connectionSemaphore = new ConnectionSemaphore(config);
+        ConnectionSemaphore connectionSemaphore = ConnectionSemaphore.newConnectionSemaphore(config);
         requestSender = new NettyRequestSender(config, channelManager, connectionSemaphore, nettyTimer, new AsyncHttpClientState(closed));
         channelManager.configureBootstraps(requestSender);
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
index 9a96ddfd1..0aaebc7fb 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
@@ -90,11 +90,14 @@
     @SuppressWarnings("rawtypes")
     private static final AtomicIntegerFieldUpdater<NettyResponseFuture> contentProcessedField = AtomicIntegerFieldUpdater.newUpdater(NettyResponseFuture.class, "contentProcessed");
     @SuppressWarnings("rawtypes")
-    private static final AtomicIntegerFieldUpdater<NettyResponseFuture> onThrowableCalledField = AtomicIntegerFieldUpdater.newUpdater(NettyResponseFuture.class, "onThrowableCalled");
+    private static final AtomicIntegerFieldUpdater<NettyResponseFuture> onThrowableCalledField = AtomicIntegerFieldUpdater.newUpdater(NettyResponseFuture.class,
+            "onThrowableCalled");
     @SuppressWarnings("rawtypes")
-    private static final AtomicReferenceFieldUpdater<NettyResponseFuture, TimeoutsHolder> timeoutsHolderField = AtomicReferenceFieldUpdater.newUpdater(NettyResponseFuture.class, TimeoutsHolder.class, "timeoutsHolder");
+    private static final AtomicReferenceFieldUpdater<NettyResponseFuture, TimeoutsHolder> timeoutsHolderField = AtomicReferenceFieldUpdater.newUpdater(NettyResponseFuture.class,
+            TimeoutsHolder.class, "timeoutsHolder");
     @SuppressWarnings("rawtypes")
-    private static final AtomicReferenceFieldUpdater<NettyResponseFuture, Object> partitionKeyLockField = AtomicReferenceFieldUpdater.newUpdater(NettyResponseFuture.class, Object.class, "partitionKeyLock");
+    private static final AtomicReferenceFieldUpdater<NettyResponseFuture, Object> partitionKeyLockField = AtomicReferenceFieldUpdater.newUpdater(NettyResponseFuture.class,
+            Object.class, "partitionKeyLock");
 
     // volatile where we need CAS ops
     private volatile int redirectCount = 0;
@@ -120,12 +123,12 @@
     private Realm proxyRealm;
     public Throwable pendingException;
 
-    public NettyResponseFuture(Request originalRequest,//
-            AsyncHandler<V> asyncHandler,//
-            NettyRequest nettyRequest,//
-            int maxRetry,//
-            ChannelPoolPartitioning connectionPoolPartitioning,//
-            ConnectionSemaphore connectionSemaphore,//
+    public NettyResponseFuture(Request originalRequest, //
+            AsyncHandler<V> asyncHandler, //
+            NettyRequest nettyRequest, //
+            int maxRetry, //
+            ChannelPoolPartitioning connectionPoolPartitioning, //
+            ConnectionSemaphore connectionSemaphore, //
             ProxyServer proxyServer) {
 
         this.asyncHandler = asyncHandler;
@@ -138,6 +141,10 @@ public NettyResponseFuture(Request originalRequest,//
     }
 
     private void releasePartitionKeyLock() {
+        if (connectionSemaphore == null) {
+            return;
+        }
+
         Object partitionKey = takePartitionKeyLock();
         if (partitionKey != null) {
             connectionSemaphore.releaseChannelLock(partitionKey);
@@ -484,7 +491,7 @@ public Object getPartitionKey() {
     }
 
     public void acquirePartitionLockLazily() throws IOException {
-        if (partitionKeyLock != null) {
+        if (connectionSemaphore == null || partitionKeyLock != null) {
             return;
         }
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java b/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
index cde61c57c..09c693502 100644
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ConnectionSemaphore.java
@@ -29,6 +29,10 @@
  */
 public class ConnectionSemaphore {
 
+    public static ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
+        return config.getMaxConnections() > 0 || config.getMaxConnectionsPerHost() > 0 ? new ConnectionSemaphore(config) : null;
+    }
+
     private final int maxTotalConnections;
     private final NonBlockingSemaphoreLike freeChannels;
     private final int maxConnectionsPerHost;
@@ -37,7 +41,7 @@
     private final IOException tooManyConnections;
     private final IOException tooManyConnectionsPerHost;
 
-    public ConnectionSemaphore(AsyncHttpClientConfig config) {
+    private ConnectionSemaphore(AsyncHttpClientConfig config) {
         tooManyConnections = unknownStackTrace(new TooManyConnectionsException(config.getMaxConnections()), ConnectionSemaphore.class, "acquireChannelLock");
         tooManyConnectionsPerHost = unknownStackTrace(new TooManyConnectionsPerHostException(config.getMaxConnectionsPerHost()), ConnectionSemaphore.class, "acquireChannelLock");
         maxTotalConnections = config.getMaxConnections();
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java b/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
index 86bcc043f..5140535ce 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
@@ -89,7 +89,7 @@ private void writeRequest(Channel channel) {
 
     public void onSuccess(Channel channel, InetSocketAddress remoteAddress) {
 
-        {
+        if (connectionSemaphore != null) {
             // transfer lock from future to channel
             Object partitionKeyLock = future.takePartitionKeyLock();
 
diff --git a/extras/rxjava/src/test/java/org/asynchttpclient/extras/rxjava/AsyncHttpObservableTest.java b/extras/rxjava/src/test/java/org/asynchttpclient/extras/rxjava/AsyncHttpObservableTest.java
index 9497d0f81..b97993dc5 100644
--- a/extras/rxjava/src/test/java/org/asynchttpclient/extras/rxjava/AsyncHttpObservableTest.java
+++ b/extras/rxjava/src/test/java/org/asynchttpclient/extras/rxjava/AsyncHttpObservableTest.java
@@ -31,7 +31,7 @@ public void testToObservableNoError() {
         final TestSubscriber<Response> tester = new TestSubscriber<>();
 
         try (AsyncHttpClient client = asyncHttpClient()) {
-            Observable<Response> o1 = AsyncHttpObservable.toObservable(() -> client.prepareGet("http://gatling.io"));
+            Observable<Response> o1 = AsyncHttpObservable.toObservable(() -> client.prepareGet("https://gatling.io"));
             o1.subscribe(tester);
             tester.awaitTerminalEvent();
             tester.assertTerminalEvent();
@@ -51,7 +51,7 @@ public void testToObservableError() {
         final TestSubscriber<Response> tester = new TestSubscriber<>();
 
         try (AsyncHttpClient client = asyncHttpClient()) {
-            Observable<Response> o1 = AsyncHttpObservable.toObservable(() -> client.prepareGet("http://gatling.io/ttfn"));
+            Observable<Response> o1 = AsyncHttpObservable.toObservable(() -> client.prepareGet("https://gatling.io/ttfn"));
             o1.subscribe(tester);
             tester.awaitTerminalEvent();
             tester.assertTerminalEvent();
@@ -71,7 +71,7 @@ public void testObserveNoError() {
         final TestSubscriber<Response> tester = new TestSubscriber<>();
 
         try (AsyncHttpClient client = asyncHttpClient()) {
-            Observable<Response> o1 = AsyncHttpObservable.observe(() -> client.prepareGet("http://gatling.io"));
+            Observable<Response> o1 = AsyncHttpObservable.observe(() -> client.prepareGet("https://gatling.io"));
             o1.subscribe(tester);
             tester.awaitTerminalEvent();
             tester.assertTerminalEvent();
@@ -91,7 +91,7 @@ public void testObserveError() {
         final TestSubscriber<Response> tester = new TestSubscriber<>();
 
         try (AsyncHttpClient client = asyncHttpClient()) {
-            Observable<Response> o1 = AsyncHttpObservable.observe(() -> client.prepareGet("http://gatling.io/ttfn"));
+            Observable<Response> o1 = AsyncHttpObservable.observe(() -> client.prepareGet("https://gatling.io/ttfn"));
             o1.subscribe(tester);
             tester.awaitTerminalEvent();
             tester.assertTerminalEvent();
@@ -111,7 +111,7 @@ public void testObserveMultiple() {
         final TestSubscriber<Response> tester = new TestSubscriber<>();
 
         try (AsyncHttpClient client = asyncHttpClient()) {
-            Observable<Response> o1 = AsyncHttpObservable.observe(() -> client.prepareGet("http://gatling.io"));
+            Observable<Response> o1 = AsyncHttpObservable.observe(() -> client.prepareGet("https://gatling.io"));
             Observable<Response> o2 = AsyncHttpObservable.observe(() -> client.prepareGet("http://www.wisc.edu").setFollowRedirect(true));
             Observable<Response> o3 = AsyncHttpObservable.observe(() -> client.prepareGet("http://www.umn.edu").setFollowRedirect(true));
             Observable<Response> all = Observable.merge(o1, o2, o3);
