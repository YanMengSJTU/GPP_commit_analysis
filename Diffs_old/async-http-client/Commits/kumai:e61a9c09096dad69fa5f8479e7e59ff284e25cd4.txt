diff --git a/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java b/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java
index 35f200bc6..16ad85572 100644
--- a/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java
+++ b/src/main/java/com/ning/http/client/FluentCaseInsensitiveStringsMap.java
@@ -26,6 +26,7 @@
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -105,7 +106,7 @@ public FluentCaseInsensitiveStringsMap add(String key, Collection<String> values
             List<String> nonNullValues = fetchValues(values);
 
             if (nonNullValues != null) {
-                String lcKey = key.toLowerCase();
+                String lcKey = key.toLowerCase(Locale.ENGLISH);
                 String realKey = keyLookup.get(lcKey);
                 List<String> curValues = null;
 
@@ -177,7 +178,7 @@ public FluentCaseInsensitiveStringsMap replace(final String key, final String...
     public FluentCaseInsensitiveStringsMap replace(final String key, final Collection<String> values) {
         if (key != null) {
             List<String> nonNullValues = fetchValues(values);
-            String lcKkey = key.toLowerCase();
+            String lcKkey = key.toLowerCase(Locale.ENGLISH);
             String realKey = keyLookup.get(lcKkey);
 
             if (nonNullValues == null) {
@@ -259,7 +260,7 @@ public void putAll(Map<? extends String, ? extends List<String>> values) {
      */
     public FluentCaseInsensitiveStringsMap delete(String key) {
         if (key != null) {
-            String lcKey = key.toLowerCase();
+            String lcKey = key.toLowerCase(Locale.ENGLISH);
             String realKey = keyLookup.remove(lcKey);
 
             if (realKey != null) {
@@ -368,7 +369,7 @@ public boolean isEmpty() {
      */
     /* @Override */
     public boolean containsKey(Object key) {
-        return key == null ? false : keyLookup.containsKey(key.toString().toLowerCase());
+        return key == null ? false : keyLookup.containsKey(key.toString().toLowerCase(Locale.ENGLISH));
     }
 
     /**
@@ -433,7 +434,7 @@ public String getJoinedValue(String key, String delimiter) {
             return null;
         }
 
-        String lcKey = key.toString().toLowerCase();
+        String lcKey = key.toString().toLowerCase(Locale.ENGLISH);
         String realKey = keyLookup.get(lcKey);
 
         if (realKey == null) {
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 85b0438bd..3a7a440d3 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -129,6 +129,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
@@ -534,7 +535,7 @@ void timeout(final Connection c) {
     static int getPort(final URI uri, final int p) {
         int port = p;
         if (port == -1) {
-            final String protocol = uri.getScheme().toLowerCase();
+            final String protocol = uri.getScheme().toLowerCase(Locale.ENGLISH);
             if ("http".equals(protocol) || "ws".equals(protocol)) {
                 port = 80;
             } else if ("https".equals(protocol) || "wss".equals(protocol)) {
@@ -1486,14 +1487,15 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
                                 .setUsePreemptiveAuth(true)
                                 .parseWWWAuthenticateHeader(auth)
                                 .build();
-                if (auth.toLowerCase().startsWith("basic")) {
+                String lowerCaseAuth = auth.toLowerCase(Locale.ENGLISH);
+                if (lowerCaseAuth.startsWith("basic")) {
                     req.getHeaders().remove(Header.Authorization.toString());
                     try {
                         req.getHeaders().add(Header.Authorization.toString(),
                                              AuthenticatorUtils.computeBasicAuthentication(realm));
                     } catch (UnsupportedEncodingException ignored) {
                     }
-                } else if (auth.toLowerCase().startsWith("digest")) {
+                } else if (lowerCaseAuth.startsWith("digest")) {
                     req.getHeaders().remove(Header.Authorization.toString());
                     try {
                         req.getHeaders().add(Header.Authorization.toString(),
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index ccf0c8b2f..4a0e4ac4d 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -122,6 +122,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map.Entry;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
@@ -996,7 +997,7 @@ public Response prepareResponse(final HttpResponseStatus status, final HttpRespo
         bootstrap.setOption("connectTimeoutMillis", config.getConnectionTimeoutInMs());
 
         // Do no enable this with win.
-        if (!System.getProperty("os.name").toLowerCase().contains("win")) {
+        if (!System.getProperty("os.name").toLowerCase(Locale.ENGLISH).contains("win")) {
             bootstrap.setOption("reuseAddress", asyncHttpProviderConfig.getProperty(REUSE_ADDRESS));
         }
 
diff --git a/src/main/java/com/ning/http/util/ProxyUtils.java b/src/main/java/com/ning/http/util/ProxyUtils.java
index 4f9b3c424..8e859b12b 100644
--- a/src/main/java/com/ning/http/util/ProxyUtils.java
+++ b/src/main/java/com/ning/http/util/ProxyUtils.java
@@ -20,6 +20,7 @@
 import com.ning.http.client.Request;
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Properties;
 
 /**
@@ -100,14 +101,14 @@ public static boolean avoidProxy(final ProxyServer proxyServer, final Request re
      */
     public static boolean avoidProxy(final ProxyServer proxyServer, final String target) {
         if (proxyServer != null) {
-            final String targetHost = target.toLowerCase();
+            final String targetHost = target.toLowerCase(Locale.ENGLISH);
 
             List<String> nonProxyHosts = proxyServer.getNonProxyHosts();
 
             if (nonProxyHosts != null) {
                 for (String nonProxyHost : nonProxyHosts) {
                     if (nonProxyHost.startsWith("*") && nonProxyHost.length() > 1
-                            && targetHost.endsWith(nonProxyHost.substring(1).toLowerCase())) {
+                            && targetHost.endsWith(nonProxyHost.substring(1).toLowerCase(Locale.ENGLISH))) {
                         return true;
                     } else if (nonProxyHost.equalsIgnoreCase(targetHost)) {
                         return true;
diff --git a/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java b/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java
index 00c1f0072..ad78d7b66 100644
--- a/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java
@@ -29,6 +29,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
@@ -53,7 +54,7 @@ public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     try {
                         FluentCaseInsensitiveStringsMap h = content.getHeaders();
                         Assert.assertNotNull(h);
-                        Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), UTF8);
+                        Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), UTF8);
                         return STATE.ABORT;
                     } finally {
                         l.countDown();
@@ -95,7 +96,7 @@ public void asyncStreamPOSTTest() throws Throwable {
                 public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     FluentCaseInsensitiveStringsMap h = content.getHeaders();
                     Assert.assertNotNull(h);
-                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), UTF8);
+                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), UTF8);
                     return STATE.CONTINUE;
                 }
 
@@ -144,7 +145,7 @@ public void asyncStreamInterruptTest() throws Throwable {
                 public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     FluentCaseInsensitiveStringsMap h = content.getHeaders();
                     Assert.assertNotNull(h);
-                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), UTF8);
+                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), UTF8);
                     return STATE.ABORT;
                 }
 
@@ -186,7 +187,7 @@ public void asyncStreamFutureTest() throws Throwable {
                 public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     FluentCaseInsensitiveStringsMap h = content.getHeaders();
                     Assert.assertNotNull(h);
-                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), UTF8);
+                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), UTF8);
                     return STATE.CONTINUE;
                 }
 
@@ -272,7 +273,7 @@ public void asyncStreamReusePOSTTest() throws Throwable {
                 public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     FluentCaseInsensitiveStringsMap h = content.getHeaders();
                     Assert.assertNotNull(h);
-                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), UTF8);
+                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), UTF8);
                     return STATE.CONTINUE;
                 }
 
@@ -307,7 +308,7 @@ public String onCompleted() throws Exception {
                 public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     FluentCaseInsensitiveStringsMap h = content.getHeaders();
                     Assert.assertNotNull(h);
-                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), UTF8);
+                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), UTF8);
                     return STATE.CONTINUE;
                 }
 
@@ -349,7 +350,7 @@ public void asyncStream301WithBody() throws Throwable {
                 public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                     FluentCaseInsensitiveStringsMap h = content.getHeaders();
                     Assert.assertNotNull(h);
-                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(), "text/html; charset=utf-8");
+                    Assert.assertEquals(h.getJoinedValue("content-type", ", ").toLowerCase(Locale.ENGLISH), "text/html; charset=utf-8");
                     return STATE.CONTINUE;
                 }
 
