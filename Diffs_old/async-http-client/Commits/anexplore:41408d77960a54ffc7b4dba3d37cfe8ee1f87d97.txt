diff --git a/client/src/main/java/org/asynchttpclient/Response.java b/client/src/main/java/org/asynchttpclient/Response.java
index 3e86e8f0a..eba2e9d4e 100644
--- a/client/src/main/java/org/asynchttpclient/Response.java
+++ b/client/src/main/java/org/asynchttpclient/Response.java
@@ -154,10 +154,15 @@
   boolean hasResponseHeaders();
 
   /**
-   * Return true if the response's body has been computed by an {@link AsyncHandler}. It will return false if the either {@link AsyncHandler#onStatusReceived(HttpResponseStatus)}
-   * or {@link AsyncHandler#onHeadersReceived(HttpHeaders)} returned {@link AsyncHandler.State#ABORT}
-   *
-   * @return true if the response's body has been computed by an {@link AsyncHandler}
+   * Return true if the response's body has been computed by an {@link AsyncHandler}.
+   * It will return false if:
+   * <ul>
+   *   <li>either the {@link AsyncHandler#onStatusReceived(HttpResponseStatus)} returned {@link AsyncHandler.State#ABORT}</li>
+   *   <li>or {@link AsyncHandler#onHeadersReceived(HttpHeaders)} returned {@link AsyncHandler.State#ABORT}</li>
+   *   <li>response body was empty</li>
+   * </ul>
+   *
+   * @return true if the response's body has been computed by an {@link AsyncHandler} to new empty bytes
    */
   boolean hasResponseBody();
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
index 3a7838569..9094eb23f 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
@@ -348,7 +348,7 @@ private SslHandler createSslHandler(String peerHost, int peerPort) {
       if (!isSslHandlerConfigured(pipeline)) {
         SslHandler sslHandler = createSslHandler(requestUri.getHost(), requestUri.getExplicitPort());
         whenHanshaked = sslHandler.handshakeFuture();
-        pipeline.addBefore(AHC_HTTP_HANDLER, SSL_HANDLER, sslHandler);
+        pipeline.addBefore(CHUNKED_WRITER_HANDLER, SSL_HANDLER, sslHandler);
       }
       pipeline.addAfter(SSL_HANDLER, HTTP_CLIENT_CODEC, newHttpClientCodec());
 
@@ -383,10 +383,11 @@ public SslHandler addSslHandler(ChannelPipeline pipeline, Uri uri, String virtua
     }
 
     SslHandler sslHandler = createSslHandler(peerHost, peerPort);
-    if (hasSocksProxyHandler)
+    if (hasSocksProxyHandler) {
       pipeline.addAfter(SOCKS_HANDLER, SSL_HANDLER, sslHandler);
-    else
+    } else {
       pipeline.addFirst(SSL_HANDLER, sslHandler);
+    }
     return sslHandler;
   }
 
diff --git a/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java b/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
index 481767022..235bcac00 100644
--- a/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
+++ b/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
@@ -13,6 +13,7 @@
 package org.asynchttpclient.proxy;
 
 import org.asynchttpclient.*;
+import org.asynchttpclient.request.body.generator.ByteArrayBodyGenerator;
 import org.asynchttpclient.test.EchoHandler;
 import org.eclipse.jetty.proxy.ConnectHandler;
 import org.eclipse.jetty.server.Server;
@@ -23,6 +24,7 @@
 import org.testng.annotations.Test;
 
 import static org.asynchttpclient.Dsl.*;
+import static org.asynchttpclient.test.TestUtils.LARGE_IMAGE_BYTES;
 import static org.asynchttpclient.test.TestUtils.addHttpConnector;
 import static org.asynchttpclient.test.TestUtils.addHttpsConnector;
 import static org.testng.Assert.assertEquals;
@@ -84,6 +86,19 @@ public void testConfigProxy() throws Exception {
     }
   }
 
+  @Test
+  public void testNoDirectRequestBodyWithProxy() throws Exception {
+    AsyncHttpClientConfig config = config()
+      .setFollowRedirect(true)
+      .setProxyServer(proxyServer("localhost", port1).build())
+      .setUseInsecureTrustManager(true)
+      .build();
+    try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config)) {
+      Response r = asyncHttpClient.executeRequest(post(getTargetUrl2()).setBody(new ByteArrayBodyGenerator(LARGE_IMAGE_BYTES))).get();
+      assertEquals(r.getStatusCode(), 200);
+    }
+  }
+
   @Test
   public void testPooledConnectionsWithProxy() throws Exception {
 
diff --git a/client/src/test/java/org/asynchttpclient/test/EchoHandler.java b/client/src/test/java/org/asynchttpclient/test/EchoHandler.java
index ee19f2ee0..5d417a5b1 100644
--- a/client/src/test/java/org/asynchttpclient/test/EchoHandler.java
+++ b/client/src/test/java/org/asynchttpclient/test/EchoHandler.java
@@ -24,6 +24,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Enumeration;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
@@ -69,6 +70,15 @@ public void handle(String pathInContext, Request request, HttpServletRequest htt
         httpResponse.sendRedirect(httpRequest.getHeader("X-redirect"));
         return;
       }
+      if (headerName.startsWith("X-fail")) {
+        byte[] body = "custom error message".getBytes(StandardCharsets.US_ASCII);
+        httpResponse.addHeader(CONTENT_LENGTH.toString(), String.valueOf(body.length));
+        httpResponse.setStatus(HttpServletResponse.SC_EXPECTATION_FAILED);
+        httpResponse.getOutputStream().write(body);
+        httpResponse.getOutputStream().flush();
+        httpResponse.getOutputStream().close();
+        return;
+      }
       httpResponse.addHeader("X-" + headerName, httpRequest.getHeader(headerName));
     }
 
diff --git a/pom.xml b/pom.xml
index ce6249110..d54bc7914 100644
--- a/pom.xml
+++ b/pom.xml
@@ -402,7 +402,7 @@
     <surefire.redirectTestOutputToFile>true</surefire.redirectTestOutputToFile>
     <source.property>1.8</source.property>
     <target.property>1.8</target.property>
-    <netty.version>4.1.27.Final</netty.version>
+    <netty.version>4.1.29.Final</netty.version>
     <slf4j.version>1.7.25</slf4j.version>
     <reactive-streams.version>1.0.2</reactive-streams.version>
     <activation.version>1.2.0</activation.version>
