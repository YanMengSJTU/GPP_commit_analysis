diff --git a/src/test/java/com/ning/http/client/async/BasicAuthTest.java b/src/test/java/com/ning/http/client/async/BasicAuthTest.java
index 00ac83840..289907427 100644
--- a/src/test/java/com/ning/http/client/async/BasicAuthTest.java
+++ b/src/test/java/com/ning/http/client/async/BasicAuthTest.java
@@ -26,6 +26,7 @@
 import com.ning.http.client.SimpleAsyncHttpClient;
 import com.ning.http.client.consumers.AppendableBodyConsumer;
 import com.ning.http.client.generators.InputStreamBodyGenerator;
+
 import org.apache.log4j.ConsoleAppender;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
@@ -48,6 +49,7 @@
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -72,6 +74,8 @@
     protected final static String admin = "admin";
 
     private Server server2;
+    
+    public abstract String getProviderClass();
 
     @BeforeClass(alwaysRun = true)
     @Override
@@ -475,7 +479,7 @@ public AbstractHandler configureHandler() throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void stringBuilderBodyConsumerTest() throws Throwable {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setRealmPrincipal(user).setRealmPassword(admin).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setRealmPrincipal(user).setRealmPassword(admin).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
         try {
             StringBuilder s = new StringBuilder();
             Future<Response> future = client.post(new InputStreamBodyGenerator(new ByteArrayInputStream(MY_MESSAGE.getBytes())), new AppendableBodyConsumer(s));
diff --git a/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java b/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
index cde839a97..c7a0e28c2 100644
--- a/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
+++ b/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
@@ -21,6 +21,7 @@
 import com.ning.http.client.generators.InputStreamBodyGenerator;
 import com.ning.http.client.simple.HeaderMap;
 import com.ning.http.client.simple.SimpleAHCTransferListener;
+
 import org.testng.annotations.Test;
 
 import java.io.ByteArrayInputStream;
@@ -38,11 +39,13 @@
 public abstract class SimpleAsyncHttpClientTest extends AbstractBasicTest {
 
     private final static String MY_MESSAGE = "my message";
+    
+    public abstract String getProviderClass();
 
     @Test(groups = { "standalone", "default_provider" })
     public void inputStreamBodyConsumerTest() throws Throwable {
 
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 60 * 1000).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 60 * 1000).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
         try {
             Future<Response> future = client.post(new InputStreamBodyGenerator(new ByteArrayInputStream(MY_MESSAGE.getBytes())));
 
@@ -58,7 +61,7 @@ public void inputStreamBodyConsumerTest() throws Throwable {
     @Test(groups = { "standalone", "default_provider" })
     public void stringBuilderBodyConsumerTest() throws Throwable {
 
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 60 * 1000).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 60 * 1000).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
         try {
             StringBuilder s = new StringBuilder();
             Future<Response> future = client.post(new InputStreamBodyGenerator(new ByteArrayInputStream(MY_MESSAGE.getBytes())), new AppendableBodyConsumer(s));
@@ -75,7 +78,7 @@ public void stringBuilderBodyConsumerTest() throws Throwable {
     @Test(groups = { "standalone", "default_provider" })
     public void byteArrayOutputStreamBodyConsumerTest() throws Throwable {
 
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 60 * 1000).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 60 * 1000).setUrl(getTargetUrl()).setHeader("Content-Type", "text/html").build();
         try {
             ByteArrayOutputStream o = new ByteArrayOutputStream(10);
             Future<Response> future = client.post(new InputStreamBodyGenerator(new ByteArrayInputStream(MY_MESSAGE.getBytes())), new OutputStreamBodyConsumer(o));
@@ -92,7 +95,7 @@ public void byteArrayOutputStreamBodyConsumerTest() throws Throwable {
     @Test(groups = { "standalone", "default_provider" })
     public void requestByteArrayOutputStreamBodyConsumerTest() throws Throwable {
 
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl(getTargetUrl()).build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setUrl(getTargetUrl()).build();
         try {
             ByteArrayOutputStream o = new ByteArrayOutputStream(10);
             Future<Response> future = client.post(new InputStreamBodyGenerator(new ByteArrayInputStream(MY_MESSAGE.getBytes())), new OutputStreamBodyConsumer(o));
@@ -111,7 +114,7 @@ public void requestByteArrayOutputStreamBodyConsumerTest() throws Throwable {
      */
     @Test(groups = { "standalone", "default_provider" }, enabled = true)
     public void testPutZeroBytesFileTest() throws Throwable {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 1000).setUrl(getTargetUrl() + "/testPutZeroBytesFileTest.txt").setHeader("Content-Type", "text/plain")
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setIdleConnectionInPoolTimeoutInMs(100).setMaximumConnectionsTotal(50).setRequestTimeoutInMs(5 * 1000).setUrl(getTargetUrl() + "/testPutZeroBytesFileTest.txt").setHeader("Content-Type", "text/plain")
                 .build();
         try {
             File tmpfile = File.createTempFile("testPutZeroBytesFile", ".tmp");
@@ -131,7 +134,7 @@ public void testPutZeroBytesFileTest() throws Throwable {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testDerive() throws Exception {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).build();
         SimpleAsyncHttpClient derived = client.derive().build();
         try {
             assertNotSame(derived, client);
@@ -143,7 +146,7 @@ public void testDerive() throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testDeriveOverrideURL() throws Exception {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl("http://invalid.url").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setUrl("http://invalid.url").build();
         SimpleAsyncHttpClient derived = client.derive().setUrl(getTargetUrl()).build();
         try {
             ByteArrayOutputStream o = new ByteArrayOutputStream(10);
@@ -214,7 +217,7 @@ public void onBytesReceived(String url, long amount, long current, long total) {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testNullUrl() throws Exception {
-        SimpleAsyncHttpClient c = new SimpleAsyncHttpClient.Builder().build().derive().build();
+        SimpleAsyncHttpClient c = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).build().derive().build();
         try {
             assertTrue(true);
         } finally {
@@ -224,7 +227,7 @@ public void testNullUrl() throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testCloseDerivedValidMaster() throws Exception {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl(getTargetUrl()).build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setUrl(getTargetUrl()).build();
         try {
             SimpleAsyncHttpClient derived = client.derive().build();
             derived.get().get();
@@ -241,7 +244,7 @@ public void testCloseDerivedValidMaster() throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testCloseMasterInvalidDerived() throws Exception {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl(getTargetUrl()).build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setUrl(getTargetUrl()).build();
         SimpleAsyncHttpClient derived = client.derive().build();
 
         client.close();
@@ -256,7 +259,7 @@ public void testCloseMasterInvalidDerived() throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testMultiPartPut() throws Exception {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl(getTargetUrl() + "/multipart").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setUrl(getTargetUrl() + "/multipart").build();
         try {
             Response response = client.put(new ByteArrayPart("baPart", "fileName", "testMultiPart".getBytes("utf-8"), "application/test", "utf-8")).get();
 
@@ -280,7 +283,7 @@ public void testMultiPartPut() throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void testMultiPartPost() throws Exception {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl(getTargetUrl() + "/multipart").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setProviderClass(getProviderClass()).setUrl(getTargetUrl() + "/multipart").build();
         try {
             Response response = client.post(new ByteArrayPart("baPart", "fileName", "testMultiPart".getBytes("utf-8"), "application/test", "utf-8")).get();
 
diff --git a/src/test/java/com/ning/http/client/async/grizzly/GrizzlyBasicAuthTest.java b/src/test/java/com/ning/http/client/async/grizzly/GrizzlyBasicAuthTest.java
index 98323e7b2..abea45483 100644
--- a/src/test/java/com/ning/http/client/async/grizzly/GrizzlyBasicAuthTest.java
+++ b/src/test/java/com/ning/http/client/async/grizzly/GrizzlyBasicAuthTest.java
@@ -17,6 +17,7 @@
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.BasicAuthTest;
 import com.ning.http.client.async.ProviderUtil;
+import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 
 public class GrizzlyBasicAuthTest extends BasicAuthTest {
 
@@ -25,4 +26,7 @@ public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.grizzlyProvider(config);
     }
 
+    public String getProviderClass() {
+        return GrizzlyAsyncHttpProvider.class.getName();
+    }
 }
diff --git a/src/test/java/com/ning/http/client/async/grizzly/GrizzlySimpleAsyncHttpClientTest.java b/src/test/java/com/ning/http/client/async/grizzly/GrizzlySimpleAsyncHttpClientTest.java
index ccbcfbd07..291c40844 100644
--- a/src/test/java/com/ning/http/client/async/grizzly/GrizzlySimpleAsyncHttpClientTest.java
+++ b/src/test/java/com/ning/http/client/async/grizzly/GrizzlySimpleAsyncHttpClientTest.java
@@ -17,6 +17,7 @@
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.SimpleAsyncHttpClientTest;
+import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 
 public class GrizzlySimpleAsyncHttpClientTest extends SimpleAsyncHttpClientTest {
 
@@ -25,4 +26,7 @@ public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.grizzlyProvider(config);
     }
 
+    public String getProviderClass() {
+        return GrizzlyAsyncHttpProvider.class.getName();
+    }
 }
diff --git a/src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java b/src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
index 0dc441b15..025741246 100644
--- a/src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
+++ b/src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
@@ -16,10 +16,7 @@
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.BasicAuthTest;
 import com.ning.http.client.async.ProviderUtil;
-import org.testng.annotations.Test;
-
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeoutException;
+import com.ning.http.client.providers.netty.NettyAsyncHttpProvider;
 
 public class NettyBasicAuthTest extends BasicAuthTest {
 
@@ -27,10 +24,8 @@
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);
     }
-
-    @Override
-    @Test
-    public void redirectAndBasicAuthTest() throws Exception, ExecutionException, TimeoutException, InterruptedException {
-        super.redirectAndBasicAuthTest();    //To change body of overridden methods use File | Settings | File Templates.
+    
+    public String getProviderClass() {
+        return NettyAsyncHttpProvider.class.getName();
     }
 }
diff --git a/src/test/java/com/ning/http/client/async/netty/NettySimpleAsyncHttpClientTest.java b/src/test/java/com/ning/http/client/async/netty/NettySimpleAsyncHttpClientTest.java
index 249e0ebbd..c47050064 100644
--- a/src/test/java/com/ning/http/client/async/netty/NettySimpleAsyncHttpClientTest.java
+++ b/src/test/java/com/ning/http/client/async/netty/NettySimpleAsyncHttpClientTest.java
@@ -15,6 +15,7 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.SimpleAsyncHttpClientTest;
+import com.ning.http.client.providers.netty.NettyAsyncHttpProvider;
 
 public class NettySimpleAsyncHttpClientTest extends SimpleAsyncHttpClientTest {
 
@@ -28,4 +29,7 @@ public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return null;
     }
 
+    public String getProviderClass() {
+        return NettyAsyncHttpProvider.class.getName();
+    }
 }
