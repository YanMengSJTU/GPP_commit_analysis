diff --git a/pom.xml b/pom.xml
index ee3c61cfb..b46ea1d6c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -466,6 +466,8 @@
                         <exclude>**/NettyResponse</exclude>
                         <exclude>**/AsyncHttpProviderUtils</exclude>
                         <exclude>**/Cookie</exclude>
+                        <exclude>**/Part</exclude>
+                        <exclude>**/PartBase</exclude>
                     </excludes>
                 </configuration>
                 <executions>
diff --git a/src/main/java/com/ning/http/multipart/FilePart.java b/src/main/java/com/ning/http/multipart/FilePart.java
index 5548085f0..7f160580b 100644
--- a/src/main/java/com/ning/http/multipart/FilePart.java
+++ b/src/main/java/com/ning/http/multipart/FilePart.java
@@ -23,7 +23,7 @@
 
 /**
  * This class is an adaptation of the Apache HttpClient implementation
- *
+ * 
  * @link http://hc.apache.org/httpclient-3.x/
  */
 public class FilePart extends PartBase {
@@ -51,32 +51,24 @@
     /**
      * Attachment's file name as a byte array
      */
-    private static final byte[] FILE_NAME_BYTES =
-            MultipartEncodingUtil.getAsciiBytes(FILE_NAME);
+    private static final byte[] FILE_NAME_BYTES = MultipartEncodingUtil.getAsciiBytes(FILE_NAME);
 
     /**
      * Source of the file part.
      */
-    private PartSource source;
+    private final PartSource source;
 
     /**
      * FilePart Constructor.
-     *
-     * @param name        the name for this part
-     * @param partSource  the source for this part
-     * @param contentType the content type for this part, if <code>null</code> the
-     *                    {@link #DEFAULT_CONTENT_TYPE default} is used
-     * @param charset     the charset encoding for this part, if <code>null</code> the
-     *                    {@link #DEFAULT_CHARSET default} is used
+     * 
+     * @param name the name for this part
+     * @param partSource the source for this part
+     * @param contentType the content type for this part, if <code>null</code> the {@link #DEFAULT_CONTENT_TYPE default} is used
+     * @param charset the charset encoding for this part, if <code>null</code> the {@link #DEFAULT_CHARSET default} is used
      */
-    public FilePart(String name, PartSource partSource, String contentType, String charset) {
+    public FilePart(String name, PartSource partSource, String contentType, String charset, String contentId) {
 
-        super(
-                name,
-                contentType == null ? DEFAULT_CONTENT_TYPE : contentType,
-                charset == null ? "ISO-8859-1" : charset,
-                DEFAULT_TRANSFER_ENCODING
-        );
+        super(name, contentType == null ? DEFAULT_CONTENT_TYPE : contentType, charset == null ? "ISO-8859-1" : charset, DEFAULT_TRANSFER_ENCODING, contentId);
 
         if (partSource == null) {
             throw new IllegalArgumentException("Source may not be null");
@@ -84,10 +76,14 @@ public FilePart(String name, PartSource partSource, String contentType, String c
         this.source = partSource;
     }
 
+    public FilePart(String name, PartSource partSource, String contentType, String charset) {
+        this(name, partSource, contentType, charset, null);
+    }
+
     /**
      * FilePart Constructor.
-     *
-     * @param name       the name for this part
+     * 
+     * @param name the name for this part
      * @param partSource the source for this part
      */
     public FilePart(String name, PartSource partSource) {
@@ -96,74 +92,61 @@ public FilePart(String name, PartSource partSource) {
 
     /**
      * FilePart Constructor.
-     *
+     * 
      * @param name the name of the file part
      * @param file the file to post
-     * @throws java.io.FileNotFoundException if the <i>file</i> is not a normal
-     *                                       file or if it is not readable.
+     * @throws java.io.FileNotFoundException if the <i>file</i> is not a normal file or if it is not readable.
      */
-    public FilePart(String name, File file)
-            throws FileNotFoundException {
+    public FilePart(String name, File file) throws FileNotFoundException {
         this(name, new FilePartSource(file), null, null);
     }
 
     /**
      * FilePart Constructor.
-     *
-     * @param name        the name of the file part
-     * @param file        the file to post
-     * @param contentType the content type for this part, if <code>null</code> the
-     *                    {@link #DEFAULT_CONTENT_TYPE default} is used
-     * @param charset     the charset encoding for this part, if <code>null</code> the
-     *                    {@link #DEFAULT_CHARSET default} is used
-     * @throws FileNotFoundException if the <i>file</i> is not a normal
-     *                               file or if it is not readable.
-     */
-    public FilePart(String name, File file, String contentType, String charset)
-            throws FileNotFoundException {
+     * 
+     * @param name the name of the file part
+     * @param file the file to post
+     * @param contentType the content type for this part, if <code>null</code> the {@link #DEFAULT_CONTENT_TYPE default} is used
+     * @param charset the charset encoding for this part, if <code>null</code> the {@link #DEFAULT_CHARSET default} is used
+     * @throws FileNotFoundException if the <i>file</i> is not a normal file or if it is not readable.
+     */
+    public FilePart(String name, File file, String contentType, String charset) throws FileNotFoundException {
         this(name, new FilePartSource(file), contentType, charset);
     }
 
     /**
      * FilePart Constructor.
-     *
-     * @param name     the name of the file part
+     * 
+     * @param name the name of the file part
      * @param fileName the file name
-     * @param file     the file to post
-     * @throws FileNotFoundException if the <i>file</i> is not a normal
-     *                               file or if it is not readable.
+     * @param file the file to post
+     * @throws FileNotFoundException if the <i>file</i> is not a normal file or if it is not readable.
      */
-    public FilePart(String name, String fileName, File file)
-            throws FileNotFoundException {
+    public FilePart(String name, String fileName, File file) throws FileNotFoundException {
         this(name, new FilePartSource(fileName, file), null, null);
     }
 
     /**
      * FilePart Constructor.
-     *
-     * @param name        the name of the file part
-     * @param fileName    the file name
-     * @param file        the file to post
-     * @param contentType the content type for this part, if <code>null</code> the
-     *                    {@link #DEFAULT_CONTENT_TYPE default} is used
-     * @param charset     the charset encoding for this part, if <code>null</code> the
-     *                    {@link #DEFAULT_CHARSET default} is used
-     * @throws FileNotFoundException if the <i>file</i> is not a normal
-     *                               file or if it is not readable.
-     */
-    public FilePart(String name, String fileName, File file, String contentType, String charset)
-            throws FileNotFoundException {
+     * 
+     * @param name the name of the file part
+     * @param fileName the file name
+     * @param file the file to post
+     * @param contentType the content type for this part, if <code>null</code> the {@link #DEFAULT_CONTENT_TYPE default} is used
+     * @param charset the charset encoding for this part, if <code>null</code> the {@link #DEFAULT_CHARSET default} is used
+     * @throws FileNotFoundException if the <i>file</i> is not a normal file or if it is not readable.
+     */
+    public FilePart(String name, String fileName, File file, String contentType, String charset) throws FileNotFoundException {
         this(name, new FilePartSource(fileName, file), contentType, charset);
     }
 
     /**
      * Write the disposition header to the output stream
-     *
+     * 
      * @param out The output stream
      * @throws java.io.IOException If an IO problem occurs
      */
-    protected void sendDispositionHeader(OutputStream out)
-            throws IOException {
+    protected void sendDispositionHeader(OutputStream out) throws IOException {
         super.sendDispositionHeader(out);
         String filename = this.source.getFileName();
         if (filename != null) {
@@ -176,7 +159,7 @@ protected void sendDispositionHeader(OutputStream out)
 
     /**
      * Write the data in "source" to the specified stream.
-     *
+     * 
      * @param out The output stream.
      * @throws IOException if an IO problem occurs.
      */
@@ -202,17 +185,17 @@ protected void sendData(OutputStream out) throws IOException {
         }
     }
 
-	public void setStalledTime(long ms) {
-		_stalledTime = ms;
-	}
+    public void setStalledTime(long ms) {
+        _stalledTime = ms;
+    }
 
-	public long getStalledTime() {
-		return _stalledTime;
-	}
+    public long getStalledTime() {
+        return _stalledTime;
+    }
 
     /**
      * Returns the source of the file part.
-     *
+     * 
      * @return The source.
      */
     protected PartSource getSource() {
@@ -221,7 +204,7 @@ protected PartSource getSource() {
 
     /**
      * Return the length of the data.
-     *
+     * 
      * @return The length.
      * @throws IOException if an IO problem occurs
      */
@@ -229,6 +212,6 @@ protected long lengthOfData() throws IOException {
         return source.getLength();
     }
 
-	private long _stalledTime = -1;
+    private long _stalledTime = -1;
 
 }
diff --git a/src/main/java/com/ning/http/multipart/Part.java b/src/main/java/com/ning/http/multipart/Part.java
index f1d5d3080..8edf01ad1 100644
--- a/src/main/java/com/ning/http/multipart/Part.java
+++ b/src/main/java/com/ning/http/multipart/Part.java
@@ -21,7 +21,7 @@
 
 /**
  * This class is an adaptation of the Apache HttpClient implementation
- *
+ * 
  * @link http://hc.apache.org/httpclient-3.x/
  */
 public abstract class Part implements com.ning.http.client.Part {
@@ -32,8 +32,7 @@
     protected static final String BOUNDARY = "----------------314159265358979323846";
 
     /**
-     * The default boundary to be used if etBoundaryBytes(byte[]) has not
-     * been called.
+     * The default boundary to be used if etBoundaryBytes(byte[]) has not been called.
      */
     private static final byte[] DEFAULT_BOUNDARY_BYTES = MultipartEncodingUtil.getAsciiBytes(BOUNDARY);
 
@@ -105,12 +104,21 @@
     /**
      * Content type header as a byte array
      */
-    static final byte[] CONTENT_TRANSFER_ENCODING_BYTES =
-            MultipartEncodingUtil.getAsciiBytes(CONTENT_TRANSFER_ENCODING);
+    static final byte[] CONTENT_TRANSFER_ENCODING_BYTES = MultipartEncodingUtil.getAsciiBytes(CONTENT_TRANSFER_ENCODING);
+
+    /**
+     * Content type header
+     */
+    protected static final String CONTENT_ID = "Content-ID: ";
+
+    /**
+     * Content type header as a byte array
+     */
+    static final byte[] CONTENT_ID_BYTES = MultipartEncodingUtil.getAsciiBytes(CONTENT_ID);
 
     /**
      * Return the boundary string.
-     *
+     * 
      * @return the boundary string
      * @deprecated uses a constant string. Rather use {@link #getPartBoundary}
      */
@@ -125,36 +133,42 @@ public static String getBoundary() {
 
     /**
      * Return the name of this part.
-     *
+     * 
      * @return The name.
      */
     public abstract String getName();
 
     /**
      * Returns the content type of this part.
-     *
+     * 
      * @return the content type, or <code>null</code> to exclude the content type header
      */
     public abstract String getContentType();
 
     /**
      * Return the character encoding of this part.
-     *
-     * @return the character encoding, or <code>null</code> to exclude the character
-     *         encoding header
+     * 
+     * @return the character encoding, or <code>null</code> to exclude the character encoding header
      */
     public abstract String getCharSet();
 
     /**
      * Return the transfer encoding of this part.
-     *
+     * 
      * @return the transfer encoding, or <code>null</code> to exclude the transfer encoding header
      */
     public abstract String getTransferEncoding();
 
+    /**
+     * Return the content ID of this part.
+     * 
+     * @return the content ID, or <code>null</code> to exclude the content ID header
+     */
+    public abstract String getContentId();
+
     /**
      * Gets the part boundary to be used.
-     *
+     * 
      * @return the part boundary as an array of bytes.
      * @since 3.0
      */
@@ -168,10 +182,8 @@ public static String getBoundary() {
     }
 
     /**
-     * Sets the part boundary.  Only meant to be used by
-     * {@link Part#sendParts(java.io.OutputStream, Part[], byte[])}
-     * and {@link Part#getLengthOfParts(Part[], byte[])}
-     *
+     * Sets the part boundary. Only meant to be used by {@link Part#sendParts(java.io.OutputStream, Part[], byte[])} and {@link Part#getLengthOfParts(Part[], byte[])}
+     * 
      * @param boundaryBytes An array of ASCII bytes.
      * @since 3.0
      */
@@ -181,9 +193,8 @@ void setPartBoundary(byte[] boundaryBytes) {
 
     /**
      * Tests if this part can be sent more than once.
-     *
-     * @return <code>true</code> if {@link #sendData(java.io.OutputStream)} can be successfully called
-     *         more than once.
+     * 
+     * @return <code>true</code> if {@link #sendData(java.io.OutputStream)} can be successfully called more than once.
      * @since 3.0
      */
     public boolean isRepeatable() {
@@ -192,7 +203,7 @@ public boolean isRepeatable() {
 
     /**
      * Write the start to the specified output stream
-     *
+     * 
      * @param out The output stream
      * @throws java.io.IOException If an IO problem occurs.
      */
@@ -204,7 +215,7 @@ protected void sendStart(OutputStream out) throws IOException {
 
     /**
      * Write the content disposition header to the specified output stream
-     *
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -217,7 +228,7 @@ protected void sendDispositionHeader(OutputStream out) throws IOException {
 
     /**
      * Write the content type header to the specified output stream
-     *
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -236,9 +247,8 @@ protected void sendContentTypeHeader(OutputStream out) throws IOException {
     }
 
     /**
-     * Write the content transfer encoding header to the specified
-     * output stream
-     *
+     * Write the content transfer encoding header to the specified output stream
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -251,9 +261,24 @@ protected void sendTransferEncodingHeader(OutputStream out) throws IOException {
         }
     }
 
+    /**
+     * Write the content ID header to the specified output stream
+     * 
+     * @param out The output stream
+     * @throws IOException If an IO problem occurs.
+     */
+    protected void sendContentIDHeader(OutputStream out) throws IOException {
+        String contentId = getContentId();
+        if (contentId != null) {
+            out.write(CRLF_BYTES);
+            out.write(CONTENT_ID_BYTES);
+            out.write(MultipartEncodingUtil.getAsciiBytes(contentId));
+        }
+    }
+
     /**
      * Write the end of the header to the output stream
-     *
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -264,7 +289,7 @@ protected void sendEndOfHeader(OutputStream out) throws IOException {
 
     /**
      * Write the data to the specified output stream
-     *
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -272,7 +297,7 @@ protected void sendEndOfHeader(OutputStream out) throws IOException {
 
     /**
      * Return the length of the main content
-     *
+     * 
      * @return long The length.
      * @throws IOException If an IO problem occurs
      */
@@ -280,7 +305,7 @@ protected void sendEndOfHeader(OutputStream out) throws IOException {
 
     /**
      * Write the end data to the output stream.
-     *
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -289,10 +314,8 @@ protected void sendEnd(OutputStream out) throws IOException {
     }
 
     /**
-     * Write all the data to the output stream.
-     * If you override this method make sure to override
-     * #length() as well
-     *
+     * Write all the data to the output stream. If you override this method make sure to override #length() as well
+     * 
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
@@ -301,17 +324,15 @@ public void send(OutputStream out) throws IOException {
         sendDispositionHeader(out);
         sendContentTypeHeader(out);
         sendTransferEncodingHeader(out);
+        sendContentIDHeader(out);
         sendEndOfHeader(out);
         sendData(out);
         sendEnd(out);
     }
 
-
     /**
-     * Return the full length of all the data.
-     * If you override this method make sure to override
-     * #send(OutputStream) as well
-     *
+     * Return the full length of all the data. If you override this method make sure to override #send(OutputStream) as well
+     * 
      * @return long The length.
      * @throws IOException If an IO problem occurs
      */
@@ -324,6 +345,7 @@ public long length() throws IOException {
         sendDispositionHeader(overhead);
         sendContentTypeHeader(overhead);
         sendTransferEncodingHeader(overhead);
+        sendContentIDHeader(overhead);
         sendEndOfHeader(overhead);
         sendEnd(overhead);
         return overhead.size() + lengthOfData();
@@ -331,7 +353,7 @@ public long length() throws IOException {
 
     /**
      * Return a string representation of this object.
-     *
+     * 
      * @return A string representation of this object.
      * @see java.lang.Object#toString()
      */
@@ -341,27 +363,25 @@ public String toString() {
 
     /**
      * Write all parts and the last boundary to the specified output stream.
-     *
-     * @param out   The stream to write to.
+     * 
+     * @param out The stream to write to.
      * @param parts The parts to write.
      * @throws IOException If an I/O error occurs while writing the parts.
      */
-    public static void sendParts(OutputStream out, final Part[] parts)
-            throws IOException {
+    public static void sendParts(OutputStream out, final Part[] parts) throws IOException {
         sendParts(out, parts, DEFAULT_BOUNDARY_BYTES);
     }
 
     /**
      * Write all parts and the last boundary to the specified output stream.
-     *
-     * @param out          The stream to write to.
-     * @param parts        The parts to write.
+     * 
+     * @param out The stream to write to.
+     * @param parts The parts to write.
      * @param partBoundary The ASCII bytes to use as the part boundary.
      * @throws IOException If an I/O error occurs while writing the parts.
      * @since 3.0
      */
-    public static void sendParts(OutputStream out, Part[] parts, byte[] partBoundary)
-            throws IOException {
+    public static void sendParts(OutputStream out, Part[] parts, byte[] partBoundary) throws IOException {
 
         if (parts == null) {
             throw new IllegalArgumentException("Parts may not be null");
@@ -380,8 +400,7 @@ public static void sendParts(OutputStream out, Part[] parts, byte[] partBoundary
         out.write(CRLF_BYTES);
     }
 
-    public static void sendMessageEnd(OutputStream out, byte[] partBoundary)
-            throws IOException {
+    public static void sendMessageEnd(OutputStream out, byte[] partBoundary) throws IOException {
 
         if (partBoundary == null || partBoundary.length == 0) {
             throw new IllegalArgumentException("partBoundary may not be empty");
@@ -395,14 +414,13 @@ public static void sendMessageEnd(OutputStream out, byte[] partBoundary)
 
     /**
      * Write all parts and the last boundary to the specified output stream.
-     *
-     * @param out  The stream to write to.
+     * 
+     * @param out The stream to write to.
      * @param part The part to write.
      * @throws IOException If an I/O error occurs while writing the parts.
      * @since N/A
      */
-    public static void sendPart(OutputStream out, Part part, byte[] partBoundary)
-            throws IOException {
+    public static void sendPart(OutputStream out, Part part, byte[] partBoundary) throws IOException {
 
         if (part == null) {
             throw new IllegalArgumentException("Parts may not be null");
@@ -414,20 +432,19 @@ public static void sendPart(OutputStream out, Part part, byte[] partBoundary)
 
     /**
      * Return the total sum of all parts and that of the last boundary
-     *
+     * 
      * @param parts The parts.
      * @return The total length
      * @throws IOException If an I/O error occurs while writing the parts.
      */
-    public static long getLengthOfParts(Part[] parts)
-            throws IOException {
+    public static long getLengthOfParts(Part[] parts) throws IOException {
         return getLengthOfParts(parts, DEFAULT_BOUNDARY_BYTES);
     }
 
     /**
      * Gets the length of the multipart message including the given parts.
-     *
-     * @param parts        The parts.
+     * 
+     * @param parts The parts.
      * @param partBoundary The ASCII bytes to use as the part boundary.
      * @return The total length
      * @throws IOException If an I/O error occurs while writing the parts.
diff --git a/src/main/java/com/ning/http/multipart/PartBase.java b/src/main/java/com/ning/http/multipart/PartBase.java
index 415bb4918..b37bbad29 100644
--- a/src/main/java/com/ning/http/multipart/PartBase.java
+++ b/src/main/java/com/ning/http/multipart/PartBase.java
@@ -17,7 +17,7 @@
 
 /**
  * This class is an adaptation of the Apache HttpClient implementation
- *
+ * 
  * @link http://hc.apache.org/httpclient-3.x/
  */
 public abstract class PartBase extends Part {
@@ -42,15 +42,17 @@
      */
     private String transferEncoding;
 
+    private String contentId;
+
     /**
      * Constructor.
-     *
-     * @param name             The name of the part
-     * @param contentType      The content type, or <code>null</code>
-     * @param charSet          The character encoding, or <code>null</code>
+     * 
+     * @param name The name of the part
+     * @param contentType The content type, or <code>null</code>
+     * @param charSet The character encoding, or <code>null</code>
      * @param transferEncoding The transfer encoding, or <code>null</code>
      */
-    public PartBase(String name, String contentType, String charSet, String transferEncoding) {
+    public PartBase(String name, String contentType, String charSet, String transferEncoding, String contentId) {
 
         if (name == null) {
             throw new IllegalArgumentException("Name must not be null");
@@ -59,11 +61,12 @@ public PartBase(String name, String contentType, String charSet, String transfer
         this.contentType = contentType;
         this.charSet = charSet;
         this.transferEncoding = transferEncoding;
+        this.contentId = contentId;
     }
 
     /**
      * Returns the name.
-     *
+     * 
      * @return The name.
      */
     public String getName() {
@@ -72,7 +75,7 @@ public String getName() {
 
     /**
      * Returns the content type of this part.
-     *
+     * 
      * @return String The name.
      */
     public String getContentType() {
@@ -81,7 +84,7 @@ public String getContentType() {
 
     /**
      * Return the character encoding of this part.
-     *
+     * 
      * @return String The name.
      */
     public String getCharSet() {
@@ -90,7 +93,7 @@ public String getCharSet() {
 
     /**
      * Returns the transfer encoding of this part.
-     *
+     * 
      * @return String The name.
      */
     public String getTransferEncoding() {
@@ -99,9 +102,8 @@ public String getTransferEncoding() {
 
     /**
      * Sets the character encoding.
-     *
-     * @param charSet the character encoding, or <code>null</code> to exclude the character
-     *                encoding header
+     * 
+     * @param charSet the character encoding, or <code>null</code> to exclude the character encoding header
      */
     public void setCharSet(String charSet) {
         this.charSet = charSet;
@@ -109,7 +111,7 @@ public void setCharSet(String charSet) {
 
     /**
      * Sets the content type.
-     *
+     * 
      * @param contentType the content type, or <code>null</code> to exclude the content type header
      */
     public void setContentType(String contentType) {
@@ -118,7 +120,7 @@ public void setContentType(String contentType) {
 
     /**
      * Sets the part name.
-     *
+     * 
      * @param name
      */
     public void setName(String name) {
@@ -130,12 +132,18 @@ public void setName(String name) {
 
     /**
      * Sets the transfer encoding.
-     *
-     * @param transferEncoding the transfer encoding, or <code>null</code> to exclude the
-     *                         transfer encoding header
+     * 
+     * @param transferEncoding the transfer encoding, or <code>null</code> to exclude the transfer encoding header
      */
     public void setTransferEncoding(String transferEncoding) {
         this.transferEncoding = transferEncoding;
     }
 
+    public String getContentId() {
+        return contentId;
+    }
+
+    public void setContentId(String contentId) {
+        this.contentId = contentId;
+    }
 }
diff --git a/src/main/java/com/ning/http/multipart/StringPart.java b/src/main/java/com/ning/http/multipart/StringPart.java
index 431362c8b..6cd36c0eb 100644
--- a/src/main/java/com/ning/http/multipart/StringPart.java
+++ b/src/main/java/com/ning/http/multipart/StringPart.java
@@ -20,7 +20,7 @@
 
 /**
  * This class is an adaptation of the Apache HttpClient implementation
- *
+ * 
  * @link http://hc.apache.org/httpclient-3.x/
  */
 public class StringPart extends PartBase {
@@ -48,24 +48,18 @@
     /**
      * The String value of this part.
      */
-    private String value;
+    private final String value;
 
     /**
      * Constructor.
-     *
-     * @param name    The name of the part
-     * @param value   the string to post
-     * @param charset the charset to be used to encode the string, if <code>null</code>
-     *                the {@link #DEFAULT_CHARSET default} is used
+     * 
+     * @param name The name of the part
+     * @param value the string to post
+     * @param charset the charset to be used to encode the string, if <code>null</code> the {@link #DEFAULT_CHARSET default} is used
      */
-    public StringPart(String name, String value, String charset) {
+    public StringPart(String name, String value, String charset, String contentId) {
 
-        super(
-                name,
-                DEFAULT_CONTENT_TYPE,
-                charset == null ? DEFAULT_CHARSET : charset,
-                DEFAULT_TRANSFER_ENCODING
-        );
+        super(name, DEFAULT_CONTENT_TYPE, charset == null ? DEFAULT_CHARSET : charset, DEFAULT_TRANSFER_ENCODING, contentId);
         if (value == null) {
             throw new IllegalArgumentException("Value may not be null");
         }
@@ -76,10 +70,14 @@ public StringPart(String name, String value, String charset) {
         this.value = value;
     }
 
+    public StringPart(String name, String value, String charset) {
+        this(name, value, charset, null);
+    }
+
     /**
      * Constructor.
-     *
-     * @param name  The name of the part
+     * 
+     * @param name The name of the part
      * @param value the string to post
      */
     public StringPart(String name, String value) {
@@ -87,9 +85,8 @@ public StringPart(String name, String value) {
     }
 
     /**
-     * Gets the content in bytes.  Bytes are lazily created to allow the charset to be changed
-     * after the part is created.
-     *
+     * Gets the content in bytes. Bytes are lazily created to allow the charset to be changed after the part is created.
+     * 
      * @return the content in bytes
      */
     private byte[] getContent() {
@@ -101,7 +98,7 @@ public StringPart(String name, String value) {
 
     /**
      * Writes the data to the given OutputStream.
-     *
+     * 
      * @param out the OutputStream to write to
      * @throws java.io.IOException if there is a write error
      */
@@ -111,7 +108,7 @@ protected void sendData(OutputStream out) throws IOException {
 
     /**
      * Return the length of the data.
-     *
+     * 
      * @return The length of the data.
      * @throws IOException If an IO problem occurs
      */
@@ -119,7 +116,9 @@ protected long lengthOfData() throws IOException {
         return getContent().length;
     }
 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
      * @see org.apache.commons.httpclient.methods.multipart.BasePart#setCharSet(java.lang.String)
      */
     public void setCharSet(String charSet) {
