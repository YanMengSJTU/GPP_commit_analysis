diff --git a/api/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java b/api/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
index 677b2c4aa..799339547 100644
--- a/api/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
+++ b/api/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
@@ -109,6 +109,7 @@
     protected int ioThreadMultiplier;
     protected boolean strict302Handling;
     protected int maxConnectionLifeTimeInMs;
+    protected boolean ignoreRequestTimeout;
 
     protected AsyncHttpClientConfig() {
     }
@@ -143,7 +144,8 @@ private AsyncHttpClientConfig(int maxTotalConnections,
                                   boolean removeQueryParamOnRedirect,
                                   HostnameVerifier hostnameVerifier,
                                   int ioThreadMultiplier,
-                                  boolean strict302Handling) {
+                                  boolean strict302Handling,
+                                  boolean ignoreRequestTimeout) {
 
         this.maxTotalConnections = maxTotalConnections;
         this.maxConnectionPerHost = maxConnectionPerHost;
@@ -182,6 +184,7 @@ private AsyncHttpClientConfig(int maxTotalConnections,
         }
         this.proxyServer = proxyServer;
         this.useRawUrl = useRawUrl;
+        this.ignoreRequestTimeout = ignoreRequestTimeout;
     }
 
     /**
@@ -512,6 +515,15 @@ public int getMaxConnectionLifeTimeInMs() {
         return maxConnectionLifeTimeInMs;
     }
 
+    /**
+     * Ignores the request timeout for dealing with continuously streaming requests
+     *
+     * @return ignore request timeout
+     */
+    public boolean getIgnoreRequestTimeout() {
+        return this.ignoreRequestTimeout;
+    }
+
     /**
      * Builder for an {@link AsyncHttpClient}
      */
@@ -561,6 +573,7 @@ public Thread newThread(Runnable r) {
         private HostnameVerifier hostnameVerifier = new AllowAllHostnameVerifier();
         private int ioThreadMultiplier = 2;
         private boolean strict302Handling;
+        private boolean ignoreRequestTimeout;
 
         public Builder() {
         }
@@ -1004,6 +1017,17 @@ public Builder setMaxConnectionLifeTimeInMs(int maxConnectionLifeTimeInMs) {
            return this;
         }
 
+        /**
+         * Ignores the request timeout while calling a {@link ListenableFuture}, allowing receiving a continuous streaming.
+         *
+         * @param ignoreRequestTimeout ignore request timeout
+         * @return a {@link Builder}
+         */
+        public Builder setIgnoreRequestTimeout(boolean ignoreRequestTimeout) {
+            this.ignoreRequestTimeout = ignoreRequestTimeout;
+            return this;
+        }
+
         /**
          * Create a config builder with values taken from the given prototype configuration.
          *
@@ -1047,6 +1071,7 @@ public Builder(AsyncHttpClientConfig prototype) {
             removeQueryParamOnRedirect = prototype.isRemoveQueryParamOnRedirect();
             hostnameVerifier = prototype.getHostnameVerifier();
             strict302Handling = prototype.isStrict302Handling();
+            ignoreRequestTimeout = prototype.getIgnoreRequestTimeout();
         }
 
         /**
@@ -1095,7 +1120,8 @@ public AsyncHttpClientConfig build() {
                     removeQueryParamOnRedirect,
                     hostnameVerifier,
                     ioThreadMultiplier,
-                    strict302Handling);
+                    strict302Handling,
+                    ignoreRequestTimeout);
         }
     }
 }
diff --git a/api/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/api/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index 2641dc2d1..8469efe04 100755
--- a/api/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/api/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -1298,6 +1298,48 @@ public void onThrowable(Throwable t) {
 
     }
 
+    @Test(groups = {"standalone", "default_provider", "async"})
+    public void asyncDoGetIgnoreTimeoutTest() throws Throwable {
+        FluentCaseInsensitiveStringsMap h = new FluentCaseInsensitiveStringsMap();
+        h.add("LockThread", "true");
+        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setIgnoreRequestTimeout(true).build());
+
+        // Use a l in case the assert fail
+        final CountDownLatch l = new CountDownLatch(1);
+
+        client.prepareGet(getTargetUrl()).setHeaders(h).execute(new AsyncCompletionHandlerAdapter() {
+
+            @Override
+            public Response onCompleted(Response response) throws Exception {
+                try {
+                    Assert.fail("Must not receive a response");
+                } finally {
+                    l.countDown();
+                }
+                return response;
+            }
+
+            @Override
+            public void onThrowable(Throwable t) {
+                try {
+                    if (t instanceof TimeoutException) {
+                        Assert.fail("Unexpected exception", t);
+                    } else {
+                        Assert.assertTrue(true);
+                    }
+                } finally {
+                    l.countDown();
+                }
+            }
+        });
+
+        if (!l.await(TIMEOUT, TimeUnit.SECONDS)) {
+            Assert.fail("Timed out");
+        }
+        client.close();
+
+    }
+
     @Test(groups = {"standalone", "default_provider", "async"})
     public void asyncDoGetQueryStringTest() throws Throwable {
         AsyncHttpClient client = getAsyncHttpClient(null);
diff --git a/pom.xml b/pom.xml
index 72b9927ae..982274b45 100644
--- a/pom.xml
+++ b/pom.xml
@@ -466,20 +466,13 @@
     </profiles>
     <distributionManagement>
         <repository>
-            <id>sonatype-nexus-staging</id>
-            <name>Sonatype Release</name>
-            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2
-            </url>
+            <id>repo</id>
+            <url>https://github.com/leonardoeloy/async-http-client-mvn-repo/raw/master/releases</url>
         </repository>
         <snapshotRepository>
-            <id>sonatype-nexus-snapshots</id>
-            <name>sonatype-nexus-snapshots</name>
-            <url>${distMgmtSnapshotsUrl}</url>
+            <id>snapshot-repo</id>
+            <url>https://github.com/leonardoeloy/async-http-client-mvn-repo/raw/master/snapshots</url>
         </snapshotRepository>
-        <site>
-            <id>github</id>
-            <url>gitsite:git@github.com/sonatype/async-http-client.git</url>
-        </site>
     </distributionManagement>
     <repositories>
         <repository>
diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index 213c7d2b7..7f7a97664 100644
--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -1804,7 +1804,8 @@ public synchronized void run() {
             }
 
             if (nettyResponseFuture != null && nettyResponseFuture.hasExpired()
-                    && !nettyResponseFuture.isDone() && !nettyResponseFuture.isCancelled()) {
+                    && !nettyResponseFuture.isDone() && !nettyResponseFuture.isCancelled()
+                    && !config.getIgnoreRequestTimeout()) {
                 log.debug("Request Timeout expired for {}\n", nettyResponseFuture);
 
                 int requestTimeout = config.getRequestTimeoutInMs();
diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
index 68dd5ed03..d20447dc0 100755
--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
@@ -203,38 +203,46 @@ void cancelReaper() {
     /* @Override */
     public V get(long l, TimeUnit tu) throws InterruptedException, TimeoutException, ExecutionException {
         if (!isDone() && !isCancelled()) {
-            boolean expired = false;
-            if (l == -1) {
-                latch.await();
-            } else {
-                expired = !latch.await(l, tu);
-            }
+            if (asyncHttpProvider.getConfig().getIgnoreRequestTimeout()) {
+                boolean keepRunning = true;
 
-            if (expired) {
-                isCancelled.set(true);
-                try {
-                    channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(new NettyAsyncHttpProvider.DiscardEvent());
-                    channel.close();
-                } catch (Throwable t) {
-                    // Ignore
+                while (keepRunning) {
+                    latch.await(l, tu);
                 }
-                TimeoutException te = new TimeoutException(String.format("No response received after %s %s", l, tu.name().toLowerCase()));
-                if (!throwableCalled.getAndSet(true)) {
+            } else {
+                boolean expired = false;
+                if (l == -1) {
+                    latch.await();
+                } else {
+                    expired = !latch.await(l, tu);
+                }
+
+                if (expired) {
+                    isCancelled.set(true);
                     try {
-                        asyncHandler.onThrowable(te);
+                        channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(new NettyAsyncHttpProvider.DiscardEvent());
+                        channel.close();
                     } catch (Throwable t) {
-                        logger.debug("asyncHandler.onThrowable", t);
-                    } finally {
-                        cancelReaper();
-                        throw new ExecutionException(te);
+                        // Ignore
+                    }
+                    TimeoutException te = new TimeoutException(String.format("No response received after %s %s", l, tu.name().toLowerCase()));
+                    if (!throwableCalled.getAndSet(true)) {
+                        try {
+                            asyncHandler.onThrowable(te);
+                        } catch (Throwable t) {
+                            logger.debug("asyncHandler.onThrowable", t);
+                        } finally {
+                            cancelReaper();
+                            throw new ExecutionException(te);
+                        }
                     }
                 }
-            }
-            isDone.set(true);
+                isDone.set(true);
 
-            ExecutionException e = exEx.getAndSet(null);
-            if (e != null) {
-                throw e;
+                ExecutionException e = exEx.getAndSet(null);
+                if (e != null) {
+                    throw e;
+                }
             }
         }
         return getContent();
