diff --git a/.gitignore b/.gitignore
index b02378759..537687970 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,3 +18,8 @@ test-output
 MANIFEST.MF
 work
 atlassian-ide-plugin.xml
+
+build
+.gradle
+gradle/
+gradlew.bat
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 000000000..b73de0b3d
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,48 @@
+apply plugin: 'idea'
+
+allprojects {
+    apply plugin: 'maven'
+
+    group = 'org.asynchttpclient'
+    version = '2.0.16-SNAPSHOT'
+}
+
+subprojects {
+    apply plugin: 'java'
+
+    repositories {
+        mavenLocal()
+
+        maven { url "https://maven.java.net/content/repositories/releases" }
+        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
+        maven { url "http://repo.maven.apache.org/maven2" }
+    }
+
+    dependencies {
+        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
+
+        compile group: 'org.apache.directory.server', name: 'apacheds-protocol-dns', version: '2.0.0-M23'
+        testCompile group: 'org.apache.directory.server', name: 'apacheds-server-jndi', version: '2.0.0-M23'
+        testCompile group: 'org.apache.directory.server', name: 'apacheds-i18n', version: '2.0.0-M23'
+        testCompile group: 'org.apache.directory.junit', name: 'junit-addons', version: '0.1'
+        testCompile group: 'org.apache.mina', name: 'mina-core', version: '2.0.14'
+        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
+        testCompile group: 'junit', name: 'junit', version: '4.11'
+        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
+        testCompile(group: 'org.testng', name: 'testng', version: '6.9.10') { exclude(module: 'bsh') }
+        testCompile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.11.v20160721'
+        testCompile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: '9.3.11.v20160721'
+        testCompile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.3.11.v20160721'
+        testCompile group: 'org.eclipse.jetty', name: 'jetty-proxy', version: '9.3.11.v20160721'
+        testCompile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.3.11.v20160721'
+        testCompile group: 'org.eclipse.jetty.websocket', name: 'websocket-servlet', version: '9.3.11.v20160721'
+        testCompile group: 'org.apache.tomcat', name: 'coyote', version: '6.0.45'
+        testCompile(group: 'org.apache.tomcat', name: 'catalina', version: '6.0.45') { exclude(module: 'servlet-api') }
+        testCompile group: 'commons-io', name: 'commons-io', version: '2.4'
+        testCompile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3'
+        testCompile group: 'com.e-movimento.tinytools', name: 'privilegedaccessor', version: '1.2.2'
+        testCompile group: 'io.reactivex', name: 'rxjava-reactive-streams', version: '1.1.1'
+        testCompile group: 'org.powermock', name: 'powermock-module-testng', version: '1.6.4'
+        testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.4'
+    }
+}
diff --git a/client/build.gradle b/client/build.gradle
new file mode 100644
index 000000000..d1faf4108
--- /dev/null
+++ b/client/build.gradle
@@ -0,0 +1,18 @@
+description = 'Asynchronous Http Client'
+
+dependencies {
+    compile project(':async-http-client-netty-utils')
+    compile group: 'io.netty', name: 'netty-codec-http', version: '4.0.41.Final'
+    compile group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.0.41.Final', classifier: 'linux-x86_64'
+    compile project(':netty-bp:netty-resolver-dns')
+    compile group: 'org.reactivestreams', name: 'reactive-streams', version: '1.0.0'
+    compile group: 'com.typesafe.netty', name: 'netty-reactive-streams', version: '1.0.7'
+    compile group: 'org.javassist', name: 'javassist', version: '3.20.0-GA'
+}
+
+task packageTests(type: Jar) {
+    from sourceSets.test.output
+    classifier = 'tests'
+}
+
+artifacts.archives packageTests
diff --git a/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java b/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java
index 2e13efdfc..317ba15a6 100644
--- a/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java
+++ b/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java
@@ -29,10 +29,11 @@ private void complete() {
             LOGGER.debug("Current Throttling Status after onThrowable {}", available.availablePermits());
     }
 
+
+
     /**
      * {@inheritDoc}
      */
-    @Override
     public void onThrowable(Throwable t) {
         try {
             asyncHandler.onThrowable(t);
@@ -44,7 +45,6 @@ public void onThrowable(Throwable t) {
     /**
      * {@inheritDoc}
      */
-    @Override
     public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
         return asyncHandler.onBodyPartReceived(bodyPart);
     }
@@ -52,7 +52,6 @@ public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
     /**
      * {@inheritDoc}
      */
-    @Override
     public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
         return asyncHandler.onStatusReceived(responseStatus);
     }
@@ -60,7 +59,6 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
     /**
      * {@inheritDoc}
      */
-    @Override
     public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
         return asyncHandler.onHeadersReceived(headers);
     }
@@ -68,7 +66,6 @@ public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
     /**
      * {@inheritDoc}
      */
-    @Override
     public T onCompleted() throws Exception {
         try {
             return asyncHandler.onCompleted();
diff --git a/client/src/main/java/org/asynchttpclient/filter/FilterContext.java b/client/src/main/java/org/asynchttpclient/filter/FilterContext.java
index a1da7b0a7..880e0e73d 100644
--- a/client/src/main/java/org/asynchttpclient/filter/FilterContext.java
+++ b/client/src/main/java/org/asynchttpclient/filter/FilterContext.java
@@ -30,7 +30,7 @@
  * that can be used to decide if the response processing should continue or not. You can stop the current response processing
  * and replay the request but creating a {@link FilterContext}. The {@link org.asynchttpclient.AsyncHttpClient}
  * will interrupt the processing and "replay" the associated {@link Request} instance.
- * 
+ *
  * @param <T> the handler result type
  */
 public class FilterContext<T> {
@@ -146,7 +146,7 @@ public Request getRequest() {
         }
 
         public FilterContext<T> build() {
-            return new FilterContext<>(this);
+            return new FilterContext(this);
         }
     }
 
diff --git a/extras/guava/build.gradle b/extras/guava/build.gradle
new file mode 100644
index 000000000..d0faa95d2
--- /dev/null
+++ b/extras/guava/build.gradle
@@ -0,0 +1,7 @@
+
+description = 'Asynchronous Http Client Guava Extras'
+dependencies {
+    compile group: 'com.google.guava', name: 'guava', version:'14.0.1'
+
+    compile project(':async-http-client')
+}
diff --git a/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java b/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java
index 030936437..ead4adeb3 100644
--- a/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java
+++ b/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java
@@ -17,11 +17,12 @@
  * A {@link org.asynchttpclient.filter.RequestFilter} that extends the capability of
  * {@link ThrottleRequestFilter} by allowing rate limiting per second in addition to the
  * number of concurrent connections.
- * 
- *  The <code>maxWaitMs</code> argument is respected accross both permit acquistions. For 
- *  example, if 1000 ms is given, and the filter spends 500 ms waiting for a connection,
- *  it will only spend another 500 ms waiting for the rate limiter.
+ * <p>
+ * The <code>maxWaitMs</code> argument is respected accross both permit acquistions. For
+ * example, if 1000 ms is given, and the filter spends 500 ms waiting for a connection,
+ * it will only spend another 500 ms waiting for the rate limiter.
  */
+@SuppressWarnings("unchecked")
 public class RateLimitedThrottleRequestFilter implements RequestFilter {
     private final static Logger logger = LoggerFactory.getLogger(RateLimitedThrottleRequestFilter.class);
     private final Semaphore available;
@@ -41,7 +42,6 @@ public RateLimitedThrottleRequestFilter(int maxConnections, double rateLimitPerS
     /**
      * {@inheritDoc}
      */
-    @Override
     public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
         try {
             if (logger.isDebugEnabled()) {
@@ -56,7 +56,7 @@ public RateLimitedThrottleRequestFilter(int maxConnections, double rateLimitPerS
             throw new FilterException(String.format("Interrupted Request %s with AsyncHandler %s", ctx.getRequest(), ctx.getAsyncHandler()));
         }
 
-        return new FilterContext.FilterContextBuilder<>(ctx).asyncHandler(new AsyncHandlerWrapper<>(ctx.getAsyncHandler(), available))
+        return new FilterContext.FilterContextBuilder(ctx).asyncHandler(new AsyncHandlerWrapper(ctx.getAsyncHandler(), available))
                 .build();
     }
 
diff --git a/extras/jdeferred/build.gradle b/extras/jdeferred/build.gradle
new file mode 100644
index 000000000..5fb41efa1
--- /dev/null
+++ b/extras/jdeferred/build.gradle
@@ -0,0 +1,7 @@
+
+description = 'Asynchronous Http Client JDeferred Extras'
+dependencies {
+    compile group: 'org.jdeferred', name: 'jdeferred-core', version:'1.2.4'
+
+    compile project(':async-http-client')
+}
diff --git a/extras/registry/build.gradle b/extras/registry/build.gradle
new file mode 100644
index 000000000..78d2eb96a
--- /dev/null
+++ b/extras/registry/build.gradle
@@ -0,0 +1,5 @@
+
+description = 'Asynchronous Http Client Registry Extras'
+dependencies {
+    compile project(':async-http-client')
+}
\ No newline at end of file
diff --git a/extras/rxjava/build.gradle b/extras/rxjava/build.gradle
new file mode 100644
index 000000000..31c9b396a
--- /dev/null
+++ b/extras/rxjava/build.gradle
@@ -0,0 +1,6 @@
+
+description = 'Asynchronous Http Client RxJava Extras'
+dependencies {
+    compile group: 'io.reactivex', name: 'rxjava', version:'1.0.14'
+    compile project(':async-http-client')
+}
diff --git a/extras/simple/build.gradle b/extras/simple/build.gradle
new file mode 100644
index 000000000..0e4a9ba60
--- /dev/null
+++ b/extras/simple/build.gradle
@@ -0,0 +1,5 @@
+
+description = 'Asynchronous Http Simple Client'
+dependencies {
+    compile project(':async-http-client')
+}
\ No newline at end of file
diff --git a/extras/simple/src/test/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClientTest.java b/extras/simple/src/test/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClientTest.java
index b02b8c2f1..07541bee1 100644
--- a/extras/simple/src/test/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClientTest.java
+++ b/extras/simple/src/test/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClientTest.java
@@ -14,6 +14,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.testng.Assert.*;
+
 import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.ByteArrayInputStream;
@@ -31,6 +32,7 @@
 import org.asynchttpclient.request.body.generator.InputStreamBodyGenerator;
 import org.asynchttpclient.request.body.multipart.ByteArrayPart;
 import org.asynchttpclient.uri.Uri;
+import org.omg.CORBA.Object;
 import org.testng.annotations.Test;
 
 public class SimpleAsyncHttpClientTest extends AbstractBasicTest {
@@ -129,8 +131,8 @@ public void testPutZeroBytesFileTest() throws Exception {
 
     @Test(groups = "standalone")
     public void testDerive() throws Exception {
-        try(SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().build()) {
-            try(SimpleAsyncHttpClient derived = client.derive().build()) {
+        try (SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().build()) {
+            try (SimpleAsyncHttpClient derived = client.derive().build()) {
                 assertNotSame(derived, client);
             }
         }
@@ -157,7 +159,9 @@ public void testDeriveOverrideURL() throws Exception {
     @Test(groups = "standalone")
     public void testSimpleTransferListener() throws Exception {
 
-        final List<Error> errors = Collections.synchronizedList(new ArrayList<>());
+        final List<java.lang.Object> objects = Collections.synchronizedList(new ArrayList<>());
+        final List<Error> errors = new ArrayList<>();
+        objects.forEach(s -> errors.add((Error) s));
 
         SimpleAHCTransferListener listener = new SimpleAHCTransferListener() {
 
@@ -266,7 +270,7 @@ public void testCloseMasterInvalidDerived() throws Throwable {
         SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl(getTargetUrl()).build();
         try (SimpleAsyncHttpClient derived = client.derive().build()) {
             client.close();
-            
+
             try {
                 derived.get().get();
                 fail("Expected closed AHC");
diff --git a/gradlew b/gradlew
new file mode 100755
index 000000000..9d82f7891
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/netty-bp/codec-dns/build.gradle b/netty-bp/codec-dns/build.gradle
new file mode 100644
index 000000000..01e79aa23
--- /dev/null
+++ b/netty-bp/codec-dns/build.gradle
@@ -0,0 +1,7 @@
+
+description = 'Netty/Codec/DNS'
+dependencies {
+    testCompile group: 'junit', name: 'junit', version: '4.11'
+
+    compile group: 'io.netty', name: 'netty-codec', version:'4.0.41.Final'
+}
diff --git a/netty-bp/resolver-dns/build.gradle b/netty-bp/resolver-dns/build.gradle
new file mode 100644
index 000000000..f6d11364c
--- /dev/null
+++ b/netty-bp/resolver-dns/build.gradle
@@ -0,0 +1,7 @@
+
+description = 'Netty/Resolver/DNS'
+dependencies {
+  compile project(':netty-bp:netty-resolver')
+  compile project(':netty-bp:netty-codec-dns')
+    compile group: 'io.netty', name: 'netty-transport', version:'4.0.41.Final'
+}
diff --git a/netty-bp/resolver-dns/src/test/java/io/netty/resolver/dns/TestDnsServer.java b/netty-bp/resolver-dns/src/test/java/io/netty/resolver/dns/TestDnsServer.java
index ade7b729e..799908ea8 100644
--- a/netty-bp/resolver-dns/src/test/java/io/netty/resolver/dns/TestDnsServer.java
+++ b/netty-bp/resolver-dns/src/test/java/io/netty/resolver/dns/TestDnsServer.java
@@ -115,7 +115,6 @@ public InetSocketAddress localAddress() {
         private final DnsMessageEncoder encoder = new DnsMessageEncoder();
         private final TestAAAARecordEncoder recordEncoder = new TestAAAARecordEncoder();
 
-        @Override
         public ProtocolEncoder getEncoder(IoSession session) throws Exception {
             return new DnsUdpEncoder() {
 
@@ -145,7 +144,6 @@ public void encode(IoSession session, Object message, ProtocolEncoderOutput out)
             };
         }
 
-        @Override
         public ProtocolDecoder getDecoder(IoSession session) throws Exception {
             return new DnsUdpDecoder();
         }
@@ -191,7 +189,6 @@ public String getAddress(String domain) {
             return domainMap.get(domain);
         }
 
-        @Override
         public Set<ResourceRecord> getRecords(QuestionRecord questionRecord) throws DnsException {
             String name = questionRecord.getDomainName();
             List<String> addresses = domainMap.get(name);
@@ -258,7 +255,6 @@ public TestRecordStore(Set<String> domains) {
             this.domains = domains;
         }
 
-        @Override
         public Set<ResourceRecord> getRecords(QuestionRecord questionRecord) {
             String name = questionRecord.getDomainName();
             if (domains.contains(name)) {
diff --git a/netty-bp/resolver/build.gradle b/netty-bp/resolver/build.gradle
new file mode 100644
index 000000000..4dfda6064
--- /dev/null
+++ b/netty-bp/resolver/build.gradle
@@ -0,0 +1,7 @@
+
+description = 'Netty/Resolver'
+dependencies {
+    testCompile group: 'junit', name: 'junit', version: '4.11'
+
+    compile group: 'io.netty', name: 'netty-common', version:'4.0.41.Final'
+}
diff --git a/netty-utils/build.gradle b/netty-utils/build.gradle
new file mode 100644
index 000000000..461cd9883
--- /dev/null
+++ b/netty-utils/build.gradle
@@ -0,0 +1,5 @@
+
+description = 'Asynchronous Http Client Netty Utils'
+dependencies {
+    compile group: 'io.netty', name: 'netty-buffer', version:'4.0.41.Final'
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 000000000..442442634
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,27 @@
+rootProject.name = 'async-http-client-project'
+
+include ':netty-bp:netty-codec-dns'
+include ':netty-bp:netty-resolver'
+include ':netty-bp:netty-resolver-dns'
+include ':netty-bp'
+include ':async-http-client-netty-utils'
+include ':async-http-client'
+include ':async-http-client-extras-parent:async-http-client-extras-guava'
+include ':async-http-client-extras-parent:async-http-client-extras-jdeferred'
+include ':async-http-client-extras-parent:async-http-client-extras-registry'
+include ':async-http-client-extras-parent:async-http-client-extras-rxjava'
+include ':async-http-client-extras-parent:async-http-client-extras-simple'
+include ':async-http-client-extras-parent'
+
+project(':netty-bp:netty-codec-dns').projectDir = "$rootDir/netty-bp/codec-dns" as File
+project(':netty-bp:netty-resolver').projectDir = "$rootDir/netty-bp/resolver" as File
+project(':netty-bp:netty-resolver-dns').projectDir = "$rootDir/netty-bp/resolver-dns" as File
+project(':netty-bp').projectDir = "$rootDir/netty-bp" as File
+project(':async-http-client-netty-utils').projectDir = "$rootDir/netty-utils" as File
+project(':async-http-client').projectDir = "$rootDir/client" as File
+project(':async-http-client-extras-parent:async-http-client-extras-guava').projectDir = "$rootDir/extras/guava" as File
+project(':async-http-client-extras-parent:async-http-client-extras-jdeferred').projectDir = "$rootDir/extras/jdeferred" as File
+project(':async-http-client-extras-parent:async-http-client-extras-registry').projectDir = "$rootDir/extras/registry" as File
+project(':async-http-client-extras-parent:async-http-client-extras-rxjava').projectDir = "$rootDir/extras/rxjava" as File
+project(':async-http-client-extras-parent:async-http-client-extras-simple').projectDir = "$rootDir/extras/simple" as File
+project(':async-http-client-extras-parent').projectDir = "$rootDir/extras" as File
\ No newline at end of file
