diff --git a/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
index 31888cdd7..f02f6e27c 100644
--- a/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
@@ -202,15 +202,18 @@
     boolean isStrict302Handling();
 
     /**
-     * Return the maximum time in millisecond an {@link AsyncHttpClient} will keep connection in the pool, or -1 to keep connection while possible.
-     *
      * @return the maximum time in millisecond an {@link AsyncHttpClient} will keep connection in the pool, or -1 to keep connection while possible.
      */
     int getConnectionTtl();
 
     boolean isUseOpenSsl();
 
-    boolean isAcceptAnyCertificate();
+    boolean isUseInsecureTrustManager();
+
+    /**
+     * @return true to disable all HTTPS behaviors AT ONCE, such as hostname verification and SNI
+     */
+    boolean isDisableHttpsAlgorithm();
 
     /**
      * @return the array of enabled protocols
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
index abae34762..c30afd453 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
@@ -95,7 +95,8 @@
 
     // ssl
     private final boolean useOpenSsl;
-    private final boolean acceptAnyCertificate;
+    private final boolean useInsecureTrustManager;
+    private final boolean disableHttpsAlgorithm;
     private final int handshakeTimeout;
     private final String[] enabledProtocols;
     private final String[] enabledCipherSuites;
@@ -167,7 +168,8 @@ private DefaultAsyncHttpClientConfig(//
 
             // ssl
             boolean useOpenSsl,//
-            boolean acceptAnyCertificate,//
+            boolean useInsecureTrustManager,//
+            boolean disableHttpsAlgorithm,//
             int handshakeTimeout,//
             String[] enabledProtocols,//
             String[] enabledCipherSuites,//
@@ -240,7 +242,8 @@ private DefaultAsyncHttpClientConfig(//
 
         // ssl
         this.useOpenSsl = useOpenSsl;
-        this.acceptAnyCertificate = acceptAnyCertificate;
+        this.useInsecureTrustManager = useInsecureTrustManager;
+        this.disableHttpsAlgorithm = disableHttpsAlgorithm;
         this.handshakeTimeout = handshakeTimeout;
         this.enabledProtocols = enabledProtocols;
         this.enabledCipherSuites = enabledCipherSuites;
@@ -422,8 +425,13 @@ public boolean isUseOpenSsl() {
     }
 
     @Override
-    public boolean isAcceptAnyCertificate() {
-        return acceptAnyCertificate;
+    public boolean isUseInsecureTrustManager() {
+        return useInsecureTrustManager;
+    }
+
+    @Override
+    public boolean isDisableHttpsAlgorithm() {
+        return disableHttpsAlgorithm;
     }
 
     @Override
@@ -629,7 +637,8 @@ public int getIoThreadsCount() {
 
         // ssl
         private boolean useOpenSsl = defaultUseOpenSsl();
-        private boolean acceptAnyCertificate = defaultAcceptAnyCertificate();
+        private boolean useInsecureTrustManager = defaultUseInsecureTrustManager();
+        private boolean disableHttpsAlgorithm = defaultDisableHttpsAlgorithm();
         private int handshakeTimeout = defaultHandshakeTimeout();
         private String[] enabledProtocols = defaultEnabledProtocols();
         private String[] enabledCipherSuites = defaultEnabledCipherSuites();
@@ -703,7 +712,7 @@ public Builder(AsyncHttpClientConfig config) {
             keepAliveStrategy = config.getKeepAliveStrategy();
 
             // ssl
-            acceptAnyCertificate = config.isAcceptAnyCertificate();
+            useInsecureTrustManager = config.isUseInsecureTrustManager();
             handshakeTimeout = config.getHandshakeTimeout();
             enabledProtocols = config.getEnabledProtocols();
             enabledCipherSuites = config.getEnabledCipherSuites();
@@ -897,8 +906,13 @@ public Builder setUseOpenSsl(boolean useOpenSsl) {
             return this;
         }
 
-        public Builder setAcceptAnyCertificate(boolean acceptAnyCertificate) {
-            this.acceptAnyCertificate = acceptAnyCertificate;
+        public Builder setUseInsecureTrustManager(boolean useInsecureTrustManager) {
+            this.useInsecureTrustManager = useInsecureTrustManager;
+            return this;
+        }
+
+        public Builder setDisableHttpsAlgorithm(boolean disableHttpsAlgorithm) {
+            this.useInsecureTrustManager = disableHttpsAlgorithm;
             return this;
         }
 
@@ -1123,7 +1137,8 @@ public DefaultAsyncHttpClientConfig build() {
                     channelPool, //
                     keepAliveStrategy, //
                     useOpenSsl, //
-                    acceptAnyCertificate, //
+                    useInsecureTrustManager, //
+                    disableHttpsAlgorithm, //
                     handshakeTimeout, //
                     enabledProtocols, //
                     enabledCipherSuites, //
diff --git a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
index 482ed0d45..8d9fea3c5 100644
--- a/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
+++ b/client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
@@ -79,7 +79,7 @@ public static String defaultUserAgent() {
     public static String[] defaultEnabledProtocols() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getStringArray(ASYNC_CLIENT_CONFIG_ROOT + "enabledProtocols");
     }
-    
+
     public static String[] defaultEnabledCipherSuites() {
         String[] defaultEnabledCipherSuites = AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getStringArray(ASYNC_CLIENT_CONFIG_ROOT + "enabledCipherSuites");
         Set<String> supportedCipherSuites = NettySslPackageAccessor.jdkSupportedCipherSuites();
@@ -118,8 +118,12 @@ public static boolean defaultUseOpenSsl() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "useOpenSsl");
     }
 
-    public static boolean defaultAcceptAnyCertificate() {
-        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "acceptAnyCertificate");
+    public static boolean defaultUseInsecureTrustManager() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "useInsecureTrustManager");
+    }
+
+    public static boolean defaultDisableHttpsAlgorithm() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "disableHttpsAlgorithm");
     }
 
     public static int defaultSslSessionCacheSize() {
diff --git a/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java b/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java
deleted file mode 100644
index 2e13efdfc..000000000
--- a/client/src/main/java/org/asynchttpclient/filter/AsyncHandlerWrapper.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package org.asynchttpclient.filter;
-
-import org.asynchttpclient.AsyncHandler;
-import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.HttpResponseHeaders;
-import org.asynchttpclient.HttpResponseStatus;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class AsyncHandlerWrapper<T> implements AsyncHandler<T> {
-
-    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncHandlerWrapper.class);
-    private final AsyncHandler<T> asyncHandler;
-    private final Semaphore available;
-    private final AtomicBoolean complete = new AtomicBoolean(false);
-
-    public AsyncHandlerWrapper(AsyncHandler<T> asyncHandler, Semaphore available) {
-        this.asyncHandler = asyncHandler;
-        this.available = available;
-    }
-
-    private void complete() {
-        if (complete.compareAndSet(false, true))
-            available.release();
-        if (LOGGER.isDebugEnabled())
-            LOGGER.debug("Current Throttling Status after onThrowable {}", available.availablePermits());
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void onThrowable(Throwable t) {
-        try {
-            asyncHandler.onThrowable(t);
-        } finally {
-            complete();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
-        return asyncHandler.onBodyPartReceived(bodyPart);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
-        return asyncHandler.onStatusReceived(responseStatus);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
-        return asyncHandler.onHeadersReceived(headers);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public T onCompleted() throws Exception {
-        try {
-            return asyncHandler.onCompleted();
-        } finally {
-            complete();
-        }
-    }
-}
diff --git a/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java b/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java
new file mode 100644
index 000000000..374f33e23
--- /dev/null
+++ b/client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java
@@ -0,0 +1,50 @@
+package org.asynchttpclient.filter;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.Semaphore;
+
+import org.asynchttpclient.AsyncHandler;
+
+/**
+ * Wrapper for {@link AsyncHandler}s to release a permit on {@link AsyncHandler#onCompleted()}.
+ * This is done via a dynamic proxy to preserve all interfaces of the wrapped handler.
+ */
+public class ReleasePermitOnComplete {
+   /**
+    * Wrap handler to release the permit of the semaphore on {@link AsyncHandler#onCompleted()}.
+    */
+   public static <T> AsyncHandler<T> wrap(final AsyncHandler<T> handler, final Semaphore available) {
+      Class<?> handlerClass = handler.getClass();
+      ClassLoader classLoader = handlerClass.getClassLoader();
+      Class<?>[] interfaces = allInterfaces(handlerClass);
+
+      return (AsyncHandler<T>) Proxy.newProxyInstance(classLoader, interfaces, new InvocationHandler() {
+         @Override
+         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+            try {
+               return method.invoke(handler, args);
+            } finally {
+               if ("onCompleted".equals(method.getName())) {
+                  available.release();
+               }
+            }
+         }
+      });
+   }
+
+   /**
+    * Extract all interfaces of a class.
+    */
+   static Class<?>[] allInterfaces(Class<?> handlerClass) {
+      Set<Class<?>> allInterfaces = new HashSet<>();
+      for (Class<?> clazz = handlerClass; clazz != null; clazz = clazz.getSuperclass()) {
+         Collections.addAll(allInterfaces, clazz.getInterfaces());
+      }
+      return allInterfaces.toArray(new Class[allInterfaces.size()]);
+   }
+}
diff --git a/client/src/main/java/org/asynchttpclient/filter/ThrottleRequestFilter.java b/client/src/main/java/org/asynchttpclient/filter/ThrottleRequestFilter.java
index e56d8af3f..4eb280050 100644
--- a/client/src/main/java/org/asynchttpclient/filter/ThrottleRequestFilter.java
+++ b/client/src/main/java/org/asynchttpclient/filter/ThrottleRequestFilter.java
@@ -19,11 +19,11 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * A {@link org.asynchttpclient.filter.RequestFilter} throttles requests and block when the number of permits is reached, waiting for
- * the response to arrives before executing the next request.
+ * A {@link org.asynchttpclient.filter.RequestFilter} throttles requests and block when the number of permits is reached,
+ * waiting for the response to arrives before executing the next request.
  */
 public class ThrottleRequestFilter implements RequestFilter {
-    private final static Logger logger = LoggerFactory.getLogger(ThrottleRequestFilter.class);
+    private static final Logger logger = LoggerFactory.getLogger(ThrottleRequestFilter.class);
     private final Semaphore available;
     private final int maxWait;
 
@@ -32,12 +32,12 @@ public ThrottleRequestFilter(int maxConnections) {
     }
 
     public ThrottleRequestFilter(int maxConnections, int maxWait) {
-      this(maxConnections, maxWait, false);
+        this(maxConnections, maxWait, false);
     }
 
     public ThrottleRequestFilter(int maxConnections, int maxWait, boolean fair) {
-      this.maxWait = maxWait;
-      available = new Semaphore(maxConnections, fair);
+        this.maxWait = maxWait;
+        available = new Semaphore(maxConnections, fair);
     }
 
     /**
@@ -45,20 +45,21 @@ public ThrottleRequestFilter(int maxConnections, int maxWait, boolean fair) {
      */
     @Override
     public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
-
         try {
             if (logger.isDebugEnabled()) {
                 logger.debug("Current Throttling Status {}", available.availablePermits());
             }
             if (!available.tryAcquire(maxWait, TimeUnit.MILLISECONDS)) {
                 throw new FilterException(String.format("No slot available for processing Request %s with AsyncHandler %s",
-                        ctx.getRequest(), ctx.getAsyncHandler()));
+                      ctx.getRequest(), ctx.getAsyncHandler()));
             }
         } catch (InterruptedException e) {
-            throw new FilterException(String.format("Interrupted Request %s with AsyncHandler %s", ctx.getRequest(), ctx.getAsyncHandler()));
+            throw new FilterException(String.format("Interrupted Request %s with AsyncHandler %s",
+                  ctx.getRequest(), ctx.getAsyncHandler()));
         }
 
-        return new FilterContext.FilterContextBuilder<>(ctx).asyncHandler(new AsyncHandlerWrapper<>(ctx.getAsyncHandler(), available))
-                .build();
+        return new FilterContext.FilterContextBuilder<>(ctx)
+              .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
+              .build();
     }
-}
\ No newline at end of file
+}
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
index 0a4a1dfbe..3358cd7c4 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
@@ -84,7 +84,6 @@ private void invokeOnSucces(Channel channel, WebSocketUpgradeHandler h) {
 
         @Override
         public void call() throws Exception {
-
             boolean validStatus = response.status().equals(SWITCHING_PROTOCOLS);
             boolean validUpgrade = response.headers().get(UPGRADE) != null;
             String connection = response.headers().get(CONNECTION);
diff --git a/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java b/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
index b467fd71c..69ba46b43 100644
--- a/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
+++ b/client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
@@ -36,8 +36,9 @@ private SslContext buildSslContext(AsyncHttpClientConfig config) throws SSLExcep
                 .sessionCacheSize(config.getSslSessionCacheSize())//
                 .sessionTimeout(config.getSslSessionTimeout());
 
-        if (config.isAcceptAnyCertificate())
+        if (config.isUseInsecureTrustManager()) {
             sslContextBuilder.trustManager(InsecureTrustManagerFactory.INSTANCE);
+        }
 
         return configureSslContextBuilder(sslContextBuilder).build();
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/ssl/SslEngineFactoryBase.java b/client/src/main/java/org/asynchttpclient/netty/ssl/SslEngineFactoryBase.java
index 77e409dd7..a2a768f06 100644
--- a/client/src/main/java/org/asynchttpclient/netty/ssl/SslEngineFactoryBase.java
+++ b/client/src/main/java/org/asynchttpclient/netty/ssl/SslEngineFactoryBase.java
@@ -25,9 +25,11 @@
 
     protected void configureSslEngine(SSLEngine sslEngine, AsyncHttpClientConfig config) {
         sslEngine.setUseClientMode(true);
-        SSLParameters params = sslEngine.getSSLParameters();
-        params.setEndpointIdentificationAlgorithm("HTTPS");
-        sslEngine.setSSLParameters(params);
+        if (!config.isDisableHttpsAlgorithm()) {
+            SSLParameters params = sslEngine.getSSLParameters();
+            params.setEndpointIdentificationAlgorithm("HTTPS");
+            sslEngine.setSSLParameters(params);
+        }
 
         if (isNonEmpty(config.getEnabledProtocols()))
             sslEngine.setEnabledProtocols(config.getEnabledProtocols());
diff --git a/client/src/main/resources/ahc-default.properties b/client/src/main/resources/ahc-default.properties
index 887e0c93a..8c3609984 100644
--- a/client/src/main/resources/ahc-default.properties
+++ b/client/src/main/resources/ahc-default.properties
@@ -22,7 +22,8 @@ org.asynchttpclient.maxRequestRetry=5
 org.asynchttpclient.disableUrlEncodingForBoundRequests=false
 org.asynchttpclient.removeQueryParamOnRedirect=true
 org.asynchttpclient.useOpenSsl=false
-org.asynchttpclient.acceptAnyCertificate=false
+org.asynchttpclient.useInsecureTrustManager=false
+org.asynchttpclient.disableHttpsAlgorithm=false
 org.asynchttpclient.sslSessionCacheSize=0
 org.asynchttpclient.sslSessionTimeout=0
 org.asynchttpclient.tcpNoDelay=true
diff --git a/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java b/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
index 07ae6a574..ad7059cc5 100644
--- a/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
+++ b/client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
@@ -110,9 +110,9 @@ public void testDefaultDisableUrlEncodingForBoundRequests() {
         testBooleanSystemProperty("disableUrlEncodingForBoundRequests", "defaultDisableUrlEncodingForBoundRequests", "true");
     }
 
-    public void testDefaultAcceptAnyCertificate() {
-        Assert.assertFalse(AsyncHttpClientConfigDefaults.defaultAcceptAnyCertificate());
-        testBooleanSystemProperty("acceptAnyCertificate", "defaultAcceptAnyCertificate", "true");
+    public void testDefaultUseInsecureTrustManager() {
+        Assert.assertFalse(AsyncHttpClientConfigDefaults.defaultUseInsecureTrustManager());
+        testBooleanSystemProperty("useInsecureTrustManager", "defaultUseInsecureTrustManager", "false");
     }
 
     private void testIntegerSystemProperty(String propertyName, String methodName, String value) {
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpsTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpsTest.java
index 41be43de5..532546a9f 100644
--- a/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpsTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpsTest.java
@@ -93,7 +93,7 @@ public void tearDownGlobal() throws Exception {
 
     @Test
     public void nonPreemptyProxyAuthWithHttpsTarget() throws IOException, InterruptedException, ExecutionException {
-        try (AsyncHttpClient client = asyncHttpClient(config().setAcceptAnyCertificate(true))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setUseInsecureTrustManager(true))) {
             String targetUrl = "https://localhost:" + httpPort + "/foo/bar";
             Request request = get(targetUrl)//
                     .setProxyServer(proxyServer("127.0.0.1", proxyPort).setRealm(realm(AuthScheme.BASIC, "johndoe", "pass")))//
diff --git a/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java b/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
index 6ffe73c89..39ab2c3e2 100644
--- a/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
+++ b/client/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
@@ -96,7 +96,7 @@ public void httpToHttpsRedirect() throws Exception {
         AsyncHttpClientConfig cg = config()//
                 .setMaxRedirects(5)//
                 .setFollowRedirect(true)//
-                .setAcceptAnyCertificate(true)//
+                .setUseInsecureTrustManager(true)//
                 .build();
         try (AsyncHttpClient c = asyncHttpClient(cg)) {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", getTargetUrl2()).execute().get();
@@ -113,7 +113,7 @@ public void httpToHttpsProperConfig() throws Exception {
         AsyncHttpClientConfig cg = config()//
                 .setMaxRedirects(5)//
                 .setFollowRedirect(true)//
-                .setAcceptAnyCertificate(true)//
+                .setUseInsecureTrustManager(true)//
                 .build();
         try (AsyncHttpClient c = asyncHttpClient(cg)) {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", getTargetUrl2() + "/test2").execute().get();
@@ -136,7 +136,7 @@ public void relativeLocationUrl() throws Exception {
         AsyncHttpClientConfig cg = config()//
                 .setMaxRedirects(5)//
                 .setFollowRedirect(true)//
-                .setAcceptAnyCertificate(true)//
+                .setUseInsecureTrustManager(true)//
                 .build();
         try (AsyncHttpClient c = asyncHttpClient(cg)) {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", "/foo/test").execute().get();
diff --git a/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java b/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
index fd8c4f428..07fd4e080 100644
--- a/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
+++ b/client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
@@ -67,7 +67,7 @@ public void tearDownGlobal() throws Exception {
     @Test(groups = "standalone")
     public void testRequestProxy() throws Exception {
 
-        try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setAcceptAnyCertificate(true))) {
+        try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setUseInsecureTrustManager(true))) {
             RequestBuilder rb = get(getTargetUrl2()).setProxyServer(proxyServer("localhost", port1));
             Response r = asyncHttpClient.executeRequest(rb.build()).get();
             assertEquals(r.getStatusCode(), 200);
@@ -79,7 +79,7 @@ public void testConfigProxy() throws Exception {
         AsyncHttpClientConfig config = config()//
                 .setFollowRedirect(true)//
                 .setProxyServer(proxyServer("localhost", port1).build())//
-                .setAcceptAnyCertificate(true)//
+                .setUseInsecureTrustManager(true)//
                 .build();
         try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config)) {
             Response r = asyncHttpClient.executeRequest(get(getTargetUrl2())).get();
@@ -90,7 +90,7 @@ public void testConfigProxy() throws Exception {
     @Test(groups = "standalone")
     public void testPooledConnectionsWithProxy() throws Exception {
 
-        try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setAcceptAnyCertificate(true).setKeepAlive(true))) {
+        try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setUseInsecureTrustManager(true).setKeepAlive(true))) {
             RequestBuilder rb = get(getTargetUrl2()).setProxyServer(proxyServer("localhost", port1));
 
             Response r1 = asyncHttpClient.executeRequest(rb.build()).get();
diff --git a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
index 4d4a68829..6327dc4e6 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ProxyTunnellingTest.java
@@ -87,7 +87,7 @@ private void runTest(boolean secure) throws Exception {
 
         // CONNECT happens over HTTP, not HTTPS
         ProxyServer ps = proxyServer("localhost", port1).build();
-        try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setProxyServer(ps).setAcceptAnyCertificate(true))) {
+        try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setProxyServer(ps).setUseInsecureTrustManager(true))) {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<>("");
 
diff --git a/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java b/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java
index 030936437..3da30e110 100644
--- a/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java
+++ b/extras/guava/src/main/java/org/asynchttpclient/extras/guava/RateLimitedThrottleRequestFilter.java
@@ -1,8 +1,8 @@
 package org.asynchttpclient.extras.guava;
 
-import org.asynchttpclient.filter.AsyncHandlerWrapper;
 import org.asynchttpclient.filter.FilterContext;
 import org.asynchttpclient.filter.FilterException;
+import org.asynchttpclient.filter.ReleasePermitOnComplete;
 import org.asynchttpclient.filter.RequestFilter;
 import org.asynchttpclient.filter.ThrottleRequestFilter;
 import org.slf4j.Logger;
@@ -56,8 +56,9 @@ public RateLimitedThrottleRequestFilter(int maxConnections, double rateLimitPerS
             throw new FilterException(String.format("Interrupted Request %s with AsyncHandler %s", ctx.getRequest(), ctx.getAsyncHandler()));
         }
 
-        return new FilterContext.FilterContextBuilder<>(ctx).asyncHandler(new AsyncHandlerWrapper<>(ctx.getAsyncHandler(), available))
-                .build();
+        return new FilterContext.FilterContextBuilder<>(ctx)
+              .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
+              .build();
     }
 
     private <T> void attemptRateLimitedPermitAcquistion(FilterContext<T> ctx, long startOfWait) throws FilterException {
diff --git a/extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java b/extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
index 0d899ec34..2eb51109e 100644
--- a/extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
+++ b/extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
@@ -648,7 +648,7 @@ public Builder setMaxRequestRetry(int maxRequestRetry) {
         }
 
         public Builder setAcceptAnyCertificate(boolean acceptAnyCertificate) {
-            configBuilder.setAcceptAnyCertificate(acceptAnyCertificate);
+            configBuilder.setUseInsecureTrustManager(acceptAnyCertificate);
             return this;
         }
 
