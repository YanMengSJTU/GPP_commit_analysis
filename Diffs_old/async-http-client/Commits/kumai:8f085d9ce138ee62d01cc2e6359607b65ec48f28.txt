diff --git a/pom.xml b/pom.xml
index 256478400..bc905dd46 100644
--- a/pom.xml
+++ b/pom.xml
@@ -239,6 +239,7 @@
                 <artifactId>maven-surefire-plugin</artifactId>
                 <version>${surefire.version}</version>
                 <configuration>
+                    <!--<argLine>-Dorg.jboss.netty.tryUnsafe=true</argLine>-->
                     <redirectTestOutputToFile>${surefire.redirectTestOutputToFile}</redirectTestOutputToFile>
                 </configuration>
             </plugin>
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 1ece4dbdc..c47bbc2f3 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -264,6 +264,7 @@ public void close() {
             }
             if (timeoutExecutor != null) {
                 timeoutExecutor.stop();
+                timeoutExecutor.getThreadPool().shutdownNow();
             }
         } catch (IOException ignored) { }
 
diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index 04ceec690..dbe19c1a7 100755
--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -1568,17 +1568,25 @@ public void onThrowable(Throwable t) {
     @Test(groups = {"standalone", "default_provider"}, expectedExceptions = IllegalArgumentException.class)
     public void getShouldNotAllowBody() throws IllegalArgumentException, IOException {
         AsyncHttpClient c = getAsyncHttpClient(null);
-        AsyncHttpClient.BoundRequestBuilder builder = c.prepareGet(getTargetUrl());
-        builder.setBody("Boo!");
-        builder.execute();
+        try {
+            AsyncHttpClient.BoundRequestBuilder builder = c.prepareGet(getTargetUrl());
+            builder.setBody("Boo!");
+            builder.execute();
+        } finally {
+            c.close();
+        }
     }
 
     @Test(groups = {"standalone", "default_provider"}, expectedExceptions = IllegalArgumentException.class)
     public void headShouldNotAllowBody() throws IllegalArgumentException, IOException {
         AsyncHttpClient c = getAsyncHttpClient(null);
-        AsyncHttpClient.BoundRequestBuilder builder = c.prepareHead(getTargetUrl());
-        builder.setBody("Boo!");
-        builder.execute();
+        try {
+            AsyncHttpClient.BoundRequestBuilder builder = c.prepareHead(getTargetUrl());
+            builder.setBody("Boo!");
+            builder.execute();
+        } finally {
+            c.close();
+        }
     }
 
     protected String getBrokenTargetUrl() {
@@ -1591,6 +1599,7 @@ public void invalidUri() throws Exception {
         AsyncHttpClient.BoundRequestBuilder builder = c.prepareGet(getBrokenTargetUrl());
         Response r = c.executeRequest(builder.build()).get();
         assertEquals(200, r.getStatusCode());
+        c.close();
     }
 
     @Test(groups = {"standalone", "default_provider"})
@@ -1599,6 +1608,7 @@ public void asyncHttpClientConfigBeanTest() throws Exception {
         AsyncHttpClient.BoundRequestBuilder builder = c.prepareGet(getTargetUrl());
         Response r = c.executeRequest(builder.build()).get();
         assertEquals(200, r.getStatusCode());
+        c.close();
     }
 
     @Test(groups = {"default_provider", "async"})
diff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java
index 1f928c53e..a9a54f20d 100644
--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java
+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java
@@ -224,6 +224,7 @@ public void zeroCopyPostTest() throws Throwable {
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
         assertEquals(resp.getResponseBody(), "This is a simple test file");
+        client.close();
     }
 
     @Test(groups = {"standalone", "default_provider"})
diff --git a/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java b/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
index 8f02356c9..184992d57 100644
--- a/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
+++ b/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
@@ -65,6 +65,7 @@ public void testMaxTotalConnections() {
             }
         }
         assertNull(exception);
+        client.close();
     }
 
     @Test(groups = {"standalone", "default_provider"})
@@ -96,6 +97,7 @@ public void testMaxTotalConnectionsException() {
         assertNotNull(exception);
         assertNotNull(exception.getMessage());
         assertEquals(exception.getMessage(),"Too many connections 1");
+        client.close();
     }
 
     @Test(groups = {"standalone", "default_provider", "async"}, enabled = true, invocationCount = 10, alwaysRun = true)
diff --git a/src/test/java/com/ning/http/client/async/HostnameVerifierTest.java b/src/test/java/com/ning/http/client/async/HostnameVerifierTest.java
index d162dc395..ca0a4f7c9 100644
--- a/src/test/java/com/ning/http/client/async/HostnameVerifierTest.java
+++ b/src/test/java/com/ning/http/client/async/HostnameVerifierTest.java
@@ -212,6 +212,7 @@ public void positiveHostnameVerifierTest() throws Throwable {
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
         assertEquals(resp.getResponseBody(), "This is a simple test file");
+        client.close();
     }
 
     @Test(groups = {"standalone", "default_provider"})
@@ -229,6 +230,7 @@ public void negativeHostnameVerifierTest() throws Throwable {
         } catch (ConnectException ex) {
             assertEquals(ConnectException.class, ex.getClass());
         }
+        client.close();
     }
 
     @Test(groups = {"standalone", "default_provider"})
@@ -246,6 +248,7 @@ public void remoteIDHostnameVerifierTest() throws Throwable {
         } catch (ConnectException ex) {
             assertEquals(ConnectException.class, ex.getClass());
         }
+        client.close();
     }
 
     @Test(groups = {"standalone", "default_provider"})
@@ -263,6 +266,7 @@ public void remotePosHostnameVerifierTest() throws Throwable {
         } catch (ConnectException ex) {
             assertEquals(ConnectException.class, ex.getClass());
         }
+        client.close();
     }
 
     public static class PositiveHostVerifier implements HostnameVerifier {
diff --git a/src/test/java/com/ning/http/client/async/RemoteSiteTest.java b/src/test/java/com/ning/http/client/async/RemoteSiteTest.java
index 17f7cff73..6509b57e5 100644
--- a/src/test/java/com/ning/http/client/async/RemoteSiteTest.java
+++ b/src/test/java/com/ning/http/client/async/RemoteSiteTest.java
@@ -56,6 +56,7 @@ public void testGoogleCom() throws Throwable {
         // Works
         Response response = c.prepareGet("http://www.google.com/").execute().get(10,TimeUnit.SECONDS);
         assertNotNull(response);
+        c.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -65,6 +66,7 @@ public void testMailGoogleCom() throws Throwable {
         Response response = c.prepareGet("http://mail.google.com/").execute().get(10,TimeUnit.SECONDS);
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 200);
+        c.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -75,6 +77,7 @@ public void testMicrosoftCom() throws Throwable {
         Response response = c.prepareGet("http://microsoft.com/").execute().get(10,TimeUnit.SECONDS);
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 301);
+        c.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -84,6 +87,7 @@ public void testWwwMicrosoftCom() throws Throwable {
         Response response = c.prepareGet("http://www.microsoft.com/").execute().get(10,TimeUnit.SECONDS);
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 302);
+        c.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -93,6 +97,7 @@ public void testUpdateMicrosoftCom() throws Throwable {
         Response response = c.prepareGet("http://update.microsoft.com/").execute().get(10,TimeUnit.SECONDS);
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 302);
+        c.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -103,6 +108,7 @@ public void testGoogleComWithTimeout() throws Throwable {
         Response response = c.prepareGet("http://google.com/").execute().get(10,TimeUnit.SECONDS);
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 301);
+        c.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -175,6 +181,7 @@ public void testUrlRequestParametersEncoding() throws Throwable {
         log.info(String.format("Executing request [%s] ...", requestUrl2));
         Response response = client.prepareGet(requestUrl2).execute().get();
         Assert.assertEquals(response.getStatusCode(), 301);
+        client.close();
     }
 
     /**
@@ -186,6 +193,7 @@ public void testAHC60() throws Throwable {
         AsyncHttpClient client = getAsyncHttpClient(null);
         Response response = client.prepareGet("http://www.meetup.com/stackoverflow/Mountain-View-CA/").execute().get();
         Assert.assertEquals(response.getStatusCode(), 200);
+        client.close();
     }
 
     @Test(groups = {"online", "default_provider"})
@@ -273,6 +281,7 @@ public Response onCompleted() throws Exception {
         }).get(10, TimeUnit.SECONDS);
         assertNotNull(response);
         assertTrue(response.getResponseBody().length() >= 3870);
+        c.close();
     }
 
 }
diff --git a/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java b/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
index 2a6cfcfd1..f981fc61b 100644
--- a/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
+++ b/src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
@@ -12,6 +12,7 @@
  */
 package com.ning.http.client.async;
 
+import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.ByteArrayPart;
 import com.ning.http.client.Response;
 import com.ning.http.client.SimpleAsyncHttpClient;
@@ -135,6 +136,8 @@ public void testDerive() throws Exception {
         SimpleAsyncHttpClient derived = client.derive().build();
 
         assertNotSame(derived, client);
+        client.close();
+        derived.close();
     }
 
     @Test(groups = { "standalone", "default_provider" })
@@ -207,8 +210,9 @@ public void onBytesReceived(String url, long amount, long current, long total) {
     @Test(groups = { "standalone", "default_provider" })
     public void testNullUrl() throws Exception {
         try {
-            new SimpleAsyncHttpClient.Builder().build().derive().build();
+            SimpleAsyncHttpClient c = new SimpleAsyncHttpClient.Builder().build().derive().build();
             assertTrue(true);
+            c.close();
         } catch (NullPointerException ex) {
             fail();
         }
@@ -226,6 +230,8 @@ public void testCloseDerivedValidMaster() throws Exception {
         Response response = client.get().get();
 
         assertEquals(response.getStatusCode(), 200);
+
+        client.close();
     }
 
     @Test(groups = { "standalone", "default_provider" })
@@ -262,6 +268,8 @@ public void testMultiPartPut() throws Exception {
         assertTrue(body.contains("Content-Type: application/test"));
         assertTrue(body.contains("name=\"baPart"));
         assertTrue(body.contains("filename=\"fileName"));
+
+        client.close();
         
     }
     
@@ -284,6 +292,8 @@ public void testMultiPartPost() throws Exception {
         assertTrue(body.contains("Content-Type: application/test"));
         assertTrue(body.contains("name=\"baPart"));
         assertTrue(body.contains("filename=\"fileName"));
+
+        client.close();
         
     }
 
