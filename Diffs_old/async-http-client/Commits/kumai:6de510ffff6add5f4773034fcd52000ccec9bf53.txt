diff --git a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
index 8cff37fa4..d117458f7 100755
--- a/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
+++ b/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
@@ -828,7 +828,7 @@ public void onThrowable(Throwable t) {
 
     @Test(groups = { "standalone", "default_provider", "async" })
     public void asyncRequestVirtualServerPOSTTest() throws Throwable {
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             FluentCaseInsensitiveStringsMap h = new FluentCaseInsensitiveStringsMap();
             h.add("Content-Type", "application/x-www-form-urlencoded");
@@ -1716,7 +1716,7 @@ public void bodyAsByteTest() throws Throwable {
 
     @Test(groups = { "default_provider", "async" })
     public void mirrorByteTest() throws Throwable {
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             Response r = client.preparePost(getTargetUrl()).setBody("MIRROR").execute().get();
 
diff --git a/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java b/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
index a5bcdf743..1a82889ec 100644
--- a/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
+++ b/src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
@@ -282,7 +282,7 @@ public void multipleMaxConnectionOpenTestWithQuery() throws Throwable {
     public void win7DisconnectTest() throws Throwable {
         final AtomicInteger count = new AtomicInteger(0);
 
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             AsyncCompletionHandler<Response> handler = new AsyncCompletionHandlerAdapter() {
 
@@ -313,7 +313,7 @@ public Response onCompleted(Response response) throws Exception {
 
     @Test(groups = { "standalone", "default_provider" })
     public void asyncHandlerOnThrowableTest() throws Throwable {
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             final AtomicInteger count = new AtomicInteger();
             final String THIS_IS_NOT_FOR_YOU = "This is not for you";
diff --git a/src/test/java/com/ning/http/client/async/FilePartLargeFileTest.java b/src/test/java/com/ning/http/client/async/FilePartLargeFileTest.java
index 0f27acb0a..49af5aa4c 100644
--- a/src/test/java/com/ning/http/client/async/FilePartLargeFileTest.java
+++ b/src/test/java/com/ning/http/client/async/FilePartLargeFileTest.java
@@ -64,8 +64,7 @@ public void testPutLargeTextFile() throws Exception {
         long repeats = (1024 * 1024 / bytes.length) + 1;
         largeFile = createTempFile(bytes, (int) repeats);
 
-        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().build();
-        AsyncHttpClient client = getAsyncHttpClient(config);
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             BoundRequestBuilder rb = client.preparePut(getTargetUrl());
 
diff --git a/src/test/java/com/ning/http/client/async/NonAsciiContentLengthTest.java b/src/test/java/com/ning/http/client/async/NonAsciiContentLengthTest.java
index cebeb26e2..b8401491d 100644
--- a/src/test/java/com/ning/http/client/async/NonAsciiContentLengthTest.java
+++ b/src/test/java/com/ning/http/client/async/NonAsciiContentLengthTest.java
@@ -14,7 +14,6 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClient.BoundRequestBuilder;
-import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.Response;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Request;
@@ -82,7 +81,7 @@ public void testNonAsciiContentLength() throws Exception {
     }
 
     protected void execute(String body) throws IOException, InterruptedException, ExecutionException {
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             BoundRequestBuilder r = client.preparePost(getTargetUrl()).setBody(body).setBodyEncoding("UTF-8");
             Future<Response> f = r.execute();
diff --git a/src/test/java/com/ning/http/client/async/PerRequestRelative302Test.java b/src/test/java/com/ning/http/client/async/PerRequestRelative302Test.java
index e2bc68a31..a476d9adc 100644
--- a/src/test/java/com/ning/http/client/async/PerRequestRelative302Test.java
+++ b/src/test/java/com/ning/http/client/async/PerRequestRelative302Test.java
@@ -88,8 +88,7 @@ public void setUpGlobal() throws Exception {
     @Test(groups = { "online", "default_provider" })
     public void redirected302Test() throws Throwable {
         isSet.getAndSet(false);
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().build();
-        AsyncHttpClient c = getAsyncHttpClient(cg);
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
 
             // once
@@ -143,8 +142,7 @@ private static int getPort(URI uri) {
     @Test(groups = { "standalone", "default_provider" })
     public void redirected302InvalidTest() throws Throwable {
         isSet.getAndSet(false);
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().build();
-        AsyncHttpClient c = getAsyncHttpClient(cg);
+        AsyncHttpClient c = getAsyncHttpClient(null);
 
         // If the test hit a proxy, no ConnectException will be thrown and instead of 404 will be returned.
         try {
@@ -163,8 +161,7 @@ public void redirected302InvalidTest() throws Throwable {
     public void relativeLocationUrl() throws Throwable {
         isSet.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().build();
-        AsyncHttpClient c = getAsyncHttpClient(cg);
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             Response response = c.preparePost(getTargetUrl()).setFollowRedirects(true).setHeader("X-redirect", "/foo/test").execute().get();
             assertNotNull(response);
diff --git a/src/test/java/com/ning/http/client/async/ProxyTest.java b/src/test/java/com/ning/http/client/async/ProxyTest.java
index 8a67a6fa7..f73d84d63 100644
--- a/src/test/java/com/ning/http/client/async/ProxyTest.java
+++ b/src/test/java/com/ning/http/client/async/ProxyTest.java
@@ -178,8 +178,7 @@ public void testIgnoreProxyPropertiesByDefault() throws IOException, ExecutionEx
             System.setProperty("http.proxyPort", String.valueOf(port1));
             System.setProperty("http.nonProxyHosts", "localhost");
 
-            AsyncHttpClientConfig cfg = new AsyncHttpClientConfig.Builder().build();
-            AsyncHttpClient client = getAsyncHttpClient(cfg);
+            AsyncHttpClient client = getAsyncHttpClient(null);
             try {
                 String target = "http://127.0.0.1:1234/";
                 Future<Response> f = client.prepareGet(target).execute();
@@ -212,8 +211,7 @@ public void testProxyActivationProperty() throws IOException, ExecutionException
             System.setProperty("http.nonProxyHosts", "localhost");
             System.setProperty("com.ning.http.client.AsyncHttpClientConfig.useProxyProperties", "true");
 
-            AsyncHttpClientConfig cfg = new AsyncHttpClientConfig.Builder().build();
-            AsyncHttpClient client = getAsyncHttpClient(cfg);
+            AsyncHttpClient client = getAsyncHttpClient(null);
             try {
                 String target = "http://127.0.0.1:1234/";
                 Future<Response> f = client.prepareGet(target).execute();
diff --git a/src/test/java/com/ning/http/client/async/PutLargeFileTest.java b/src/test/java/com/ning/http/client/async/PutLargeFileTest.java
index d84ec3234..a5d8d7365 100644
--- a/src/test/java/com/ning/http/client/async/PutLargeFileTest.java
+++ b/src/test/java/com/ning/http/client/async/PutLargeFileTest.java
@@ -64,8 +64,7 @@ public void testPutSmallFile() throws Exception {
         long repeats = (1024 / bytes.length) + 1;
         largeFile = createTempFile(bytes, (int) repeats);
 
-        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().build();
-        AsyncHttpClient client = getAsyncHttpClient(config);
+        AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             BoundRequestBuilder rb = client.preparePut(getTargetUrl());
 
diff --git a/src/test/java/com/ning/http/client/async/RemoteSiteTest.java b/src/test/java/com/ning/http/client/async/RemoteSiteTest.java
index 3f8d12518..43f4a498b 100644
--- a/src/test/java/com/ning/http/client/async/RemoteSiteTest.java
+++ b/src/test/java/com/ning/http/client/async/RemoteSiteTest.java
@@ -165,7 +165,7 @@ public void invalidStreamTest2() throws Throwable {
 
     @Test(groups = { "online", "default_provider" })
     public void asyncFullBodyProperlyRead() throws Throwable {
-        final AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        final AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             Response r = client.prepareGet("http://www.cyberpresse.ca/").execute().get();
 
diff --git a/src/test/java/com/ning/http/client/websocket/ByteMessageTest.java b/src/test/java/com/ning/http/client/websocket/ByteMessageTest.java
index 7cfd29b8c..1811a3895 100644
--- a/src/test/java/com/ning/http/client/websocket/ByteMessageTest.java
+++ b/src/test/java/com/ning/http/client/websocket/ByteMessageTest.java
@@ -66,7 +66,7 @@ public WebSocketHandler getWebSocketHandler() {
 
     @Test
     public void echoByte() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<byte[]> text = new AtomicReference<byte[]>(new byte[0]);
@@ -110,7 +110,7 @@ public void onFragment(byte[] fragment, boolean last) {
 
     @Test
     public void echoTwoMessagesTest() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(2);
             final AtomicReference<byte[]> text = new AtomicReference<byte[]>(null);
@@ -161,7 +161,7 @@ public void onFragment(byte[] fragment, boolean last) {
 
     @Test
     public void echoOnOpenMessagesTest() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(2);
             final AtomicReference<byte[]> text = new AtomicReference<byte[]>(null);
@@ -210,7 +210,7 @@ public void onFragment(byte[] fragment, boolean last) {
     }
 
     public void echoFragments() throws Exception {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<byte[]> text = new AtomicReference<byte[]>(null);
diff --git a/src/test/java/com/ning/http/client/websocket/CloseCodeReasonMessageTest.java b/src/test/java/com/ning/http/client/websocket/CloseCodeReasonMessageTest.java
index 02ef933ce..d1ff9fa5c 100644
--- a/src/test/java/com/ning/http/client/websocket/CloseCodeReasonMessageTest.java
+++ b/src/test/java/com/ning/http/client/websocket/CloseCodeReasonMessageTest.java
@@ -13,16 +13,11 @@
 package com.ning.http.client.websocket;
 
 import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.websocket.TextMessageTest;
 import com.ning.http.client.websocket.WebSocket;
 import com.ning.http.client.websocket.WebSocketCloseCodeReasonListener;
 import com.ning.http.client.websocket.WebSocketListener;
 import com.ning.http.client.websocket.WebSocketUpgradeHandler;
-import com.ning.http.client.websocket.netty.NettyTextMessageTest;
-import org.eclipse.jetty.server.nio.SelectChannelConnector;
-import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
 import java.util.concurrent.CountDownLatch;
@@ -35,7 +30,7 @@
 
     @Test(timeOut = 60000)
     public void onCloseWithCode() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -53,7 +48,7 @@ public void onCloseWithCode() throws Throwable {
 
     @Test(timeOut = 60000)
     public void onCloseWithCodeServerClose() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
diff --git a/src/test/java/com/ning/http/client/websocket/TextMessageTest.java b/src/test/java/com/ning/http/client/websocket/TextMessageTest.java
index 93657e3a0..219502d38 100644
--- a/src/test/java/com/ning/http/client/websocket/TextMessageTest.java
+++ b/src/test/java/com/ning/http/client/websocket/TextMessageTest.java
@@ -13,7 +13,6 @@
 package com.ning.http.client.websocket;
 
 import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
 import org.testng.annotations.Test;
 
 import javax.servlet.http.HttpServletRequest;
@@ -68,7 +67,7 @@ public WebSocketHandler getWebSocketHandler() {
 
     @Test(timeOut = 60000)
     public void onOpen() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -101,7 +100,7 @@ public void onError(Throwable t) {
 
     @Test(timeOut = 60000)
     public void onEmptyListenerTest() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             WebSocket websocket = null;
             try {
@@ -117,7 +116,7 @@ public void onEmptyListenerTest() throws Throwable {
 
     @Test(timeOut = 60000)
     public void onFailureTest() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             Throwable t = null;
             try {
@@ -133,7 +132,7 @@ public void onFailureTest() throws Throwable {
 
     @Test(timeOut = 60000)
     public void onTimeoutCloseTest() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -166,7 +165,7 @@ public void onError(Throwable t) {
 
     @Test(timeOut = 60000)
     public void onClose() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -201,7 +200,7 @@ public void onError(Throwable t) {
 
     @Test(timeOut = 60000)
     public void echoText() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -245,7 +244,7 @@ public void onError(Throwable t) {
 
     @Test(timeOut = 60000)
     public void echoDoubleListenerText() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(2);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -315,7 +314,7 @@ public void onError(Throwable t) {
 
     @Test
     public void echoTwoMessagesTest() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(2);
             final AtomicReference<String> text = new AtomicReference<String>("");
@@ -359,7 +358,7 @@ public void onError(Throwable t) {
     }
 
     public void echoFragments() throws Throwable {
-        AsyncHttpClient c = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClient c = getAsyncHttpClient(null);
         try {
             final CountDownLatch latch = new CountDownLatch(1);
             final AtomicReference<String> text = new AtomicReference<String>("");
