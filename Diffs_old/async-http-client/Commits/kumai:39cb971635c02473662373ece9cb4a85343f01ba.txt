diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
index b5d31083f..2cdf19f62 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
@@ -40,7 +40,7 @@
     private final Collection<HttpResponseBodyPart> bodyParts;
     private final HttpResponseHeaders headers;
     private final HttpResponseStatus status;
-    private final List<Cookie> cookies = new ArrayList<Cookie>();
+    private List<Cookie> cookies;
 
     public ApacheResponse(HttpResponseStatus status,
                           HttpResponseHeaders headers,
@@ -79,20 +79,9 @@ public String getResponseBody(String charset) throws IOException {
         return AsyncHttpProviderUtils.contentToString(bodyParts, computeCharset(charset));
     }
     
-    private String computeCharset(String charset) {
-    	String contentType = getContentType();
-        if (charset == null) {
-        	if (contentType != null)
-        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        	else
-        		charset = DEFAULT_CHARSET;
-        }
-        return charset;
-    }
-
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
-        if (bodyParts.size() > 0) {
+        if (!bodyParts.isEmpty()) {
             return new HttpResponseBodyPartsInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]));
         } else {
             return new ByteArrayInputStream("".getBytes());
@@ -108,18 +97,22 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
     /* @Override */
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
-        String contentType = getContentType();
-        if (contentType != null && charset == null) {
-            charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        }
-
-        if (charset == null) {
-            charset = DEFAULT_CHARSET;
-        }
+        charset = computeCharset(charset);
 
         String response = AsyncHttpProviderUtils.contentToString(bodyParts, charset);
         return response.length() <= maxLength ? response : response.substring(0, maxLength);
     }
+    
+    private String computeCharset(String charset) {
+    	String contentType = getContentType();
+        if (charset == null) {
+        	if (contentType != null)
+        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
+        	else
+        		charset = DEFAULT_CHARSET;
+        }
+        return charset;
+    }
 
     /* @Override */
 
@@ -130,7 +123,7 @@ public URI getUri() throws MalformedURLException {
     /* @Override */
 
     public String getContentType() {
-        return headers != null? headers.getHeaders().getFirstValue("Content-Type"): null;
+        return getHeader("Content-Type");
     }
 
     /* @Override */
@@ -163,19 +156,21 @@ public boolean isRedirected() {
         if (headers == null) {
             return Collections.emptyList();
         }
-        if (cookies.isEmpty()) {
+        if (cookies == null) {
+        	List<Cookie> localCookies = new ArrayList<Cookie>();
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {
                 if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
                     // TODO: ask for parsed header
                     List<String> v = header.getValue();
                     for (String value : v) {
                         Cookie cookie = AsyncHttpProviderUtils.parseCookie(value);
-                        cookies.add(cookie);
+                        localCookies.add(cookie);
                     }
                 }
             }
+            cookies = Collections.unmodifiableList(localCookies);
         }
-        return Collections.unmodifiableList(cookies);
+        return cookies;
     }
 
     /**
@@ -199,6 +194,6 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return bodyParts != null && bodyParts.size() > 0;
+        return bodyParts != null && !bodyParts.isEmpty();
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
index 5854a1212..36700fde8 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
@@ -41,7 +41,7 @@
     private final Collection<HttpResponseBodyPart> bodyParts;
     private final HttpResponseHeaders headers;
     private final HttpResponseStatus status;
-    private final List<Cookie> cookies = new ArrayList<Cookie>();
+    private List<Cookie> cookies;
     private AtomicBoolean contentComputed = new AtomicBoolean(false);
     private String content;
 
@@ -87,24 +87,13 @@ public String getResponseBody(String charset) throws IOException {
         return content;
     }
     
-    private String computeCharset(String charset) {
-    	String contentType = getContentType();
-        if (charset == null) {
-        	if (contentType != null)
-        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        	else
-        		charset = DEFAULT_CHARSET;
-        }
-        return charset;
-    }
-
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
         if (contentComputed.get()) {
             return new ByteArrayInputStream(content.getBytes(DEFAULT_CHARSET));
         }
 
-        if (bodyParts.size() > 0) {
+        if (!bodyParts.isEmpty()) {
             return new HttpResponseBodyPartsInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]));
         } else {
             return new ByteArrayInputStream("".getBytes());
@@ -118,14 +107,7 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
     }
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
-        String contentType = getContentType();
-        if (contentType != null && charset == null) {
-            charset = AsyncHttpProviderUtils.parseCharset(contentType);
-        }
-
-        if (charset == null) {
-            charset = DEFAULT_CHARSET;
-        }
+        charset = computeCharset(charset);
 
         if (!contentComputed.get()) {
             content = AsyncHttpProviderUtils.contentToString(bodyParts, charset == null ? DEFAULT_CHARSET : charset);
@@ -133,6 +115,17 @@ public String getResponseBodyExcerpt(int maxLength, String charset) throws IOExc
 
         return content.length() <= maxLength ? content : content.substring(0, maxLength);
     }
+    
+    private String computeCharset(String charset) {
+    	String contentType = getContentType();
+        if (charset == null) {
+        	if (contentType != null)
+        		charset = AsyncHttpProviderUtils.parseCharset(contentType);
+        	else
+        		charset = DEFAULT_CHARSET;
+        }
+        return charset;
+    }
 
     /* @Override */
 
@@ -143,7 +136,7 @@ public URI getUri() throws MalformedURLException {
     /* @Override */
 
     public String getContentType() {
-        return headers != null? headers.getHeaders().getFirstValue("Content-Type"): null;
+        return getHeader("Content-Type");
     }
 
     /* @Override */
@@ -177,18 +170,20 @@ public boolean isRedirected() {
             return Collections.emptyList();
         }
         if (cookies.isEmpty()) {
+        	List<Cookie> localCookies = new ArrayList<Cookie>();
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {
                 if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
                     // TODO: ask for parsed header
                     List<String> v = header.getValue();
                     for (String value : v) {
                         Cookie cookie = AsyncHttpProviderUtils.parseCookie(value);
-                        cookies.add(cookie);
+                        localCookies.add(cookie);
                     }
                 }
             }
+            cookies = Collections.unmodifiableList(localCookies);
         }
-        return Collections.unmodifiableList(cookies);
+        return cookies;
     }
 
     /**
@@ -212,6 +207,6 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return bodyParts != null && bodyParts.size() > 0;
+        return bodyParts != null && !bodyParts.isEmpty();
     }
 }
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
index 28f9eab2b..01c61d016 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
@@ -46,7 +46,7 @@
     private final Collection<HttpResponseBodyPart> bodyParts;
     private final HttpResponseHeaders headers;
     private final HttpResponseStatus status;
-    private final List<Cookie> cookies = new ArrayList<Cookie>();
+    private List<Cookie> cookies;
 
     public NettyResponse(HttpResponseStatus status,
                          HttpResponseHeaders headers,
@@ -130,7 +130,7 @@ public URI getUri() throws MalformedURLException {
     /* @Override */
 
     public String getContentType() {
-        return headers != null? headers.getHeaders().getFirstValue("Content-Type"): null;
+        return getHeader("Content-Type");
     }
 
     /* @Override */
@@ -163,19 +163,21 @@ public boolean isRedirected() {
         if (headers == null) {
             return Collections.emptyList();
         }
-        if (cookies.isEmpty()) {
+        if (cookies == null) {
+        	List<Cookie> localCookies = new ArrayList<Cookie>();
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {
                 if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
                     // TODO: ask for parsed header
                     List<String> v = header.getValue();
                     for (String value : v) {
                         Cookie cookie = AsyncHttpProviderUtils.parseCookie(value);
-                        cookies.add(cookie);
+                        localCookies.add(cookie);
                     }
                 }
             }
+            cookies = Collections.unmodifiableList(localCookies);
         }
-        return Collections.unmodifiableList(cookies);
+        return cookies;
     }
 
     /**
@@ -199,7 +201,7 @@ public boolean hasResponseHeaders() {
      */
     /* @Override */
     public boolean hasResponseBody() {
-        return bodyParts != null && bodyParts.size() > 0;
+        return bodyParts != null && !bodyParts.isEmpty();
     }
 
 }
