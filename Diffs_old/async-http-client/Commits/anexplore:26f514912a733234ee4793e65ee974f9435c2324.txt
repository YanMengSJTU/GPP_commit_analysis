diff --git a/README.md b/README.md
index 61f54f435..ddf73fc99 100644
--- a/README.md
+++ b/README.md
@@ -10,6 +10,11 @@
 * 新增max http response body size， 新增TooLongResponseBodyException
 * 新增InputTrafficCountHandler统计http response body原始数据大小(解压之前)
 
+#### 2019-04-16
+*  给Request添加maxResponseBodySize参数使得可以配置单个Request的最大可接受响应体大小
+* 超出最大跳转次数后由抛出异常改为返回最后一次跳转的HTTP Response 
+
+
 ------
 Follow [@AsyncHttpClient](https://twitter.com/AsyncHttpClient) on Twitter.
 
diff --git a/client/src/main/java/org/asynchttpclient/DefaultRequest.java b/client/src/main/java/org/asynchttpclient/DefaultRequest.java
index 4a7720bcc..561ee8ed5 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultRequest.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultRequest.java
@@ -56,6 +56,7 @@
   private final File file;
   private final Boolean followRedirect;
   private final Integer maxRedirects;
+  private final Integer maxResponseBodySize;
   private final int requestTimeout;
   private final int readTimeout;
   private final long rangeOffset;
@@ -85,6 +86,7 @@ public DefaultRequest(String method,
                         File file,
                         Boolean followRedirect,
                         Integer maxRedirects,
+                        Integer maxResponseBodySize,
                         int requestTimeout,
                         int readTimeout,
                         long rangeOffset,
@@ -111,6 +113,7 @@ public DefaultRequest(String method,
     this.file = file;
     this.followRedirect = followRedirect;
     this.maxRedirects = maxRedirects;
+    this.maxResponseBodySize = maxResponseBodySize;
     this.requestTimeout = requestTimeout;
     this.readTimeout = readTimeout;
     this.rangeOffset = rangeOffset;
@@ -225,6 +228,12 @@ public Integer getMaxRedirects() {
     return maxRedirects;
   }
 
+  /*add by @anexplore*/
+  @Override
+  public Integer getMaxResponseBodySize() {
+    return maxResponseBodySize;
+  }
+  
   @Override
   public int getRequestTimeout() {
     return requestTimeout;
diff --git a/client/src/main/java/org/asynchttpclient/Request.java b/client/src/main/java/org/asynchttpclient/Request.java
index 4bc58233e..445699266 100644
--- a/client/src/main/java/org/asynchttpclient/Request.java
+++ b/client/src/main/java/org/asynchttpclient/Request.java
@@ -157,6 +157,12 @@
    */
   Integer getMaxRedirects();
   
+  /**
+   * add by @anexplore
+   * @return max allowed response body size
+   */
+  Integer getMaxResponseBodySize();
+  
   /**
    * @return the request timeout. Non zero values means "override config value".
    */
diff --git a/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java b/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
index 0370e590a..b03b0fa84 100644
--- a/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
+++ b/client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
@@ -82,6 +82,7 @@
   protected File file;
   protected Boolean followRedirect;
   protected Integer maxRedirects;
+  protected Integer maxResponseBodySize;
   protected int requestTimeout;
   protected int readTimeout;
   protected long rangeOffset;
@@ -131,6 +132,8 @@ protected RequestBuilderBase(Request prototype, boolean disableUrlEncoding, bool
     this.realm = prototype.getRealm();
     this.file = prototype.getFile();
     this.followRedirect = prototype.getFollowRedirect();
+    this.maxRedirects = prototype.getMaxRedirects();
+    this.maxResponseBodySize = prototype.getMaxResponseBodySize();
     this.requestTimeout = prototype.getRequestTimeout();
     this.readTimeout = prototype.getReadTimeout();
     this.rangeOffset = prototype.getRangeOffset();
@@ -495,16 +498,21 @@ public T setRealm(Realm realm) {
     return asDerivedType();
   }
 
-  public T setFollowRedirect(boolean followRedirect) {
+  public T setFollowRedirect(Boolean followRedirect) {
     this.followRedirect = followRedirect;
     return asDerivedType();
   }
   
-  public T setMaxRedirects(int maxRedirects) {
+  public T setMaxRedirects(Integer maxRedirects) {
     this.maxRedirects = maxRedirects;
     return asDerivedType();
   }
 
+  public T setMaxResponseBodySize(Integer maxResponseBodySize) {
+    this.maxResponseBodySize = maxResponseBodySize;
+    return asDerivedType();
+  }
+  
   public T setRequestTimeout(int requestTimeout) {
     this.requestTimeout = requestTimeout;
     return asDerivedType();
@@ -582,6 +590,7 @@ public T setSignatureCalculator(SignatureCalculator signatureCalculator) {
     rb.file = this.file;
     rb.followRedirect = this.followRedirect;
     rb.maxRedirects = this.maxRedirects;
+    rb.maxResponseBodySize = this.maxResponseBodySize;
     rb.requestTimeout = this.requestTimeout;
     rb.rangeOffset = this.rangeOffset;
     rb.charset = this.charset;
@@ -645,6 +654,7 @@ public Request build() {
             rb.file,
             rb.followRedirect,
             rb.maxRedirects,
+            rb.maxResponseBodySize,
             rb.requestTimeout,
             rb.readTimeout,
             rb.rangeOffset,
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
index 4c9f61f17..978586560 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
@@ -543,6 +543,12 @@ public void setProxyRealm(Realm proxyRealm) {
     this.proxyRealm = proxyRealm;
   }
 
+  public void prepareRetry() {
+    RAW_BODY_SIZE_UPDATER.getAndSet(this, 0);
+    REAL_BODY_SIZE_UPDATER.getAndSet(this, 0);
+    REDIRECT_COUNT_UPDATER.getAndSet(this, 0);
+  }
+  
   @Override
   public String toString() {
     return "NettyResponseFuture{" + //
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
index 7d64150ad..b060a09d3 100755
--- a/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
@@ -29,6 +29,7 @@
 import org.asynchttpclient.netty.channel.ChannelManager;
 import org.asynchttpclient.netty.channel.Channels;
 import org.asynchttpclient.netty.request.NettyRequestSender;
+import org.asynchttpclient.util.HttpUtils;
 
 import java.io.IOException;
 
@@ -75,11 +76,12 @@ private void handleHttpResponse(final HttpResponse response, final Channel chann
     NettyResponseStatus status = new NettyResponseStatus(future.getUri(), response, channel);
     HttpHeaders responseHeaders = response.headers();
     // check content-length @anexplore
-    if (config.getMaxResponseBodySize() > 0) {
+    int maxResponseBodySize = HttpUtils.computeMaxResponseBodySize(config, future.getTargetRequest());
+    if (maxResponseBodySize > 0) {
       Integer contentLength = responseHeaders.getInt(HttpHeaderNames.CONTENT_LENGTH);
-      if (contentLength != null && contentLength > config.getMaxResponseBodySize()) {
+      if (contentLength != null && contentLength > maxResponseBodySize) {
         throw new TooLongResponseBodyException(
-            String.format("response body size %d exceed max size %d", contentLength, config.getMaxResponseBodySize()));
+            String.format("response body size %d exceed max size %d", contentLength, maxResponseBodySize));
       }
     }
     if (!interceptors.exitAfterIntercept(channel, future, handler, response, status, responseHeaders)) {
@@ -116,11 +118,12 @@ private void handleChunk(HttpContent chunk,
       HttpResponseBodyPart bodyPart = config.getResponseBodyPartFactory().newResponseBodyPart(buf, rawBodyPartSize, last);
       abort = handler.onBodyPartReceived(bodyPart) == State.ABORT;
       // exceed max body size ? add by @anexplore
-      if (config.getMaxResponseBodySize() > 0) {
+      int maxResponseBodySize = HttpUtils.computeMaxResponseBodySize(config, future.getTargetRequest());
+      if (maxResponseBodySize > 0) {
         int currentRealBodySize = future.addAndGetRealBodySize(bodyPart.length());
-        if (currentRealBodySize > config.getMaxResponseBodySize()) {
+        if (currentRealBodySize > maxResponseBodySize) {
           throw new TooLongResponseBodyException(
-              String.format("response body size %d exceed max size %d", currentRealBodySize, config.getMaxResponseBodySize()));
+              String.format("response body size %d exceed max size %d", currentRealBodySize, maxResponseBodySize));
         }
       }
     }
diff --git a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
index ee8b910ca..aca4acb06 100644
--- a/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
+++ b/client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
@@ -103,6 +103,8 @@ public boolean exitAfterHandlingRedirect(Channel channel,
         final RequestBuilder requestBuilder = new RequestBuilder(switchToGet ? GET : originalMethod)
                 .setChannelPoolPartitioning(request.getChannelPoolPartitioning())
                 .setFollowRedirect(true)
+                .setMaxRedirects(request.getMaxRedirects())
+                .setMaxResponseBodySize(request.getMaxResponseBodySize())
                 .setLocalAddress(request.getLocalAddress())
                 .setNameResolver(request.getNameResolver())
                 .setProxyServer(request.getProxyServer())
diff --git a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
index 03255731f..ed9c91117 100755
--- a/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
+++ b/client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
@@ -504,7 +504,7 @@ public boolean retry(NettyResponseFuture<?> future) {
         abort(future.channel(), future, e);
         return false;
       }
-
+      future.prepareRetry();
       try {
         sendNextRequest(future.getCurrentRequest(), future);
         return true;
@@ -588,7 +588,7 @@ public void replayRequest(final NettyResponseFuture<?> future, FilterContext fc,
     future.setAsyncHandler(fc.getAsyncHandler());
     future.setChannelState(ChannelState.NEW);
     future.touch();
-
+    
     LOGGER.debug("\n\nReplaying Request {}\n for Future {}\n", newRequest, future);
     try {
       future.getAsyncHandler().onRetry();
@@ -598,6 +598,7 @@ public void replayRequest(final NettyResponseFuture<?> future, FilterContext fc,
       return;
     }
 
+    future.prepareRetry();
     channelManager.drainChannelAndOffer(channel, future);
     sendNextRequest(newRequest, future);
   }
diff --git a/client/src/main/java/org/asynchttpclient/util/HttpUtils.java b/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
index 779dba9c7..c8325db5a 100644
--- a/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
+++ b/client/src/main/java/org/asynchttpclient/util/HttpUtils.java
@@ -135,7 +135,14 @@ public static String patchContentTypeWithBoundaryAttribute(CharSequence base, by
   public static boolean followRedirect(AsyncHttpClientConfig config, Request request) {
     return request.getFollowRedirect() != null ? request.getFollowRedirect() : config.isFollowRedirect();
   }
+  
+  public static int computeMaxResponseBodySize(AsyncHttpClientConfig config, Request request) {
+    return request.getMaxResponseBodySize() != null ? request.getMaxResponseBodySize() : config.getMaxResponseBodySize();
+  }
 
+  public static int computeMaxRedirects(AsyncHttpClientConfig config, Request request) {
+    return request.getMaxRedirects() != null ? request.getMaxRedirects() : config.getMaxRedirects();
+  }  
   public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
     return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
   }
diff --git a/client/src/test/java/org/asynchttpclient/BasicHttpTest.java b/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
index d38c930f9..9bdcb1882 100755
--- a/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
+++ b/client/src/test/java/org/asynchttpclient/BasicHttpTest.java
@@ -762,7 +762,7 @@ public Response onCompleted(Response response) {
       }));
   }
 
-  @Test(expectedExceptions = MaxRedirectException.class)
+  @Test
   public void reachingMaxRedirectThrowsMaxRedirectException() throws Throwable {
     withClient(config().setMaxRedirects(1).setFollowRedirect(true)).run(client ->
       withServer(server).run(server -> {
@@ -773,12 +773,12 @@ public void reachingMaxRedirectThrowsMaxRedirectException() throws Throwable {
           client.prepareGet(getTargetUrl()).execute(new AsyncCompletionHandlerAdapter() {
             @Override
             public Response onCompleted(Response response) {
-              fail("Should not be here");
               return response;
             }
 
             @Override
             public void onThrowable(Throwable t) {
+              fail("Should not be here");
             }
           }).get(TIMEOUT, SECONDS);
         } catch (ExecutionException e) {
