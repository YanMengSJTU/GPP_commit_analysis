diff --git a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
index dc43db8ab..400bd2594 100644
--- a/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
+++ b/client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
@@ -522,6 +522,7 @@ public void onComplete() {
 	static class ByteBufIterable implements Iterable<ByteBuf> {
 		private final byte[] payload;
 		private final int chunkSize;
+		private final MessageDigest md = newMd5();
 
 		public ByteBufIterable(byte[] payload, int chunkSize) {
 			this.payload = payload;
@@ -543,6 +544,17 @@ public ByteBuf next() {
 					int thisCurrentIndex = currentIndex;
 					int length = Math.min(chunkSize, payload.length - thisCurrentIndex);
 					currentIndex += length;
+					
+					md.update(payload, thisCurrentIndex, length);
+					
+					if (!hasNext()) {
+						String md5 = Base64.encode(md.digest());
+						if (!md5.equals(LARGE_IMAGE_BYTES_MD5)) {
+							new Exception("ByteBufIterable generated a request payload with invalid MD5 of " + md5).printStackTrace();
+						}
+						md.reset();
+					}
+					
 					return Unpooled.wrappedBuffer(payload, thisCurrentIndex, length);
 				}
 
@@ -553,17 +565,17 @@ public void remove() {
 			};
 		}
 	}
+	
+	private static MessageDigest newMd5() {
+		try {
+			return MessageDigest.getInstance("MD5");
+		} catch (NoSuchAlgorithmException e) {
+			throw new InternalError(e);
+		}
+	}
 
 	private static class RequestChunksChecker extends ChannelOutboundHandlerAdapter {
 
-		private static MessageDigest newMd5() {
-			try {
-				return MessageDigest.getInstance("MD5");
-			} catch (NoSuchAlgorithmException e) {
-				throw new InternalError(e);
-			}
-		}
-
 		private final MessageDigest md = newMd5();
 
 		@Override
