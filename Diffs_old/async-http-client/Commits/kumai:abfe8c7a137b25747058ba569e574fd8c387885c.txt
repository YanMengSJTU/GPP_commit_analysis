diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index e44e4bb2b..cb0bd72f9 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -747,12 +747,13 @@ else if (uri.getRawQuery() != null)
         }
 
         // Add default accept headers.
-        if (request.getHeaders().getFirstValue(HttpHeaders.Names.ACCEPT) == null) {
+        if (!request.getHeaders().containsKey(HttpHeaders.Names.ACCEPT)) {
             nettyRequest.setHeader(HttpHeaders.Names.ACCEPT, "*/*");
         }
 
-        if (request.getHeaders().getFirstValue(HttpHeaders.Names.USER_AGENT) != null) {
-            nettyRequest.setHeader(HttpHeaders.Names.USER_AGENT, request.getHeaders().getFirstValue(HttpHeaders.Names.USER_AGENT));
+        String userAgentHeader = request.getHeaders().getFirstValue(HttpHeaders.Names.USER_AGENT);
+        if (userAgentHeader != null) {
+            nettyRequest.setHeader(HttpHeaders.Names.USER_AGENT, userAgentHeader);
         } else if (config.getUserAgent() != null) {
             nettyRequest.setHeader(HttpHeaders.Names.USER_AGENT, config.getUserAgent());
         } else {
@@ -1640,7 +1641,8 @@ private final static int computeAndSetContentLength(Request request, HttpRequest
                 request.getConnectionPoolKeyStrategy(),//
                 proxyServer);
 
-        if (request.getHeaders().getFirstValue(HttpHeaders.Names.EXPECT) != null && request.getHeaders().getFirstValue(HttpHeaders.Names.EXPECT).equalsIgnoreCase(HttpHeaders.Values.CONTINUE)) {
+        String expectHeader = request.getHeaders().getFirstValue(HttpHeaders.Names.EXPECT);
+        if (expectHeader != null && expectHeader.equalsIgnoreCase(HttpHeaders.Values.CONTINUE)) {
             f.getAndSetWriteBody(false);
         }
         return f;
diff --git a/src/main/java/com/ning/http/client/resumable/ResumableAsyncHandler.java b/src/main/java/com/ning/http/client/resumable/ResumableAsyncHandler.java
index 51d60ccf9..53ebec5cd 100644
--- a/src/main/java/com/ning/http/client/resumable/ResumableAsyncHandler.java
+++ b/src/main/java/com/ning/http/client/resumable/ResumableAsyncHandler.java
@@ -177,8 +177,9 @@ public T onCompleted() throws Exception {
     /* @Override */
     public AsyncHandler.STATE onHeadersReceived(HttpResponseHeaders headers) throws Exception {
         responseBuilder.accumulate(headers);
-        if (headers.getHeaders().getFirstValue("Content-Length") != null) {
-            contentLength = Integer.valueOf(headers.getHeaders().getFirstValue("Content-Length"));
+        String contentLengthHeader = headers.getHeaders().getFirstValue("Content-Length");
+        if (contentLengthHeader != null) {
+            contentLength = Integer.valueOf(contentLengthHeader);
             if (contentLength == null || contentLength == -1) {
                 return AsyncHandler.STATE.ABORT;
             }
