diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
index 237fa9bd3..457dc58bc 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
@@ -59,12 +59,48 @@
     private final long timeout;
     private final long maxConnectionLifeTimeInMs;
     private final DelayedExecutor delayedExecutor;
-    private final Connection.CloseListener listener;
+
+    private final boolean ownsDelayedExecutor;
+
+    private final Connection.CloseListener listener =  new Connection.CloseListener() {
+                @Override
+                public void onClosed(Connection connection, Connection.CloseType closeType) throws IOException {
+                    if (closeType == Connection.CloseType.REMOTELY) {
+                        if (LOG.isInfoEnabled()) {
+                            LOG.info("Remote closed connection ({}).  Removing from cache", connection.toString());
+                        }
+                    }
+                    GrizzlyConnectionsPool.this.removeAll(connection);
+                }
+            };
 
 
     // ------------------------------------------------------------ Constructors
 
 
+    public GrizzlyConnectionsPool(final boolean cacheSSLConnections,
+                                  final int timeout,
+                                  final int maxConnectionLifeTimeInMs,
+                                  final int maxConnectionsPerHost,
+                                  final int maxConnections,
+                                  final DelayedExecutor delayedExecutor) {
+        this.cacheSSLConnections = cacheSSLConnections;
+        this.timeout = timeout;
+        this.maxConnectionLifeTimeInMs = maxConnectionLifeTimeInMs;
+        this.maxConnectionsPerHost = maxConnectionsPerHost;
+        this.maxConnections = maxConnections;
+        unlimitedConnections = (maxConnections == -1);
+        if (delayedExecutor != null) {
+            this.delayedExecutor = delayedExecutor;
+            ownsDelayedExecutor = false;
+        } else {
+            this.delayedExecutor = new DelayedExecutor(Executors.newSingleThreadExecutor());
+            delayedExecutor.start();
+            ownsDelayedExecutor = true;
+        }
+    }
+
+
     public GrizzlyConnectionsPool(final AsyncHttpClientConfig config) {
 
         cacheSSLConnections = config.isSslConnectionPoolEnabled();
@@ -75,18 +111,7 @@ public GrizzlyConnectionsPool(final AsyncHttpClientConfig config) {
         unlimitedConnections = (maxConnections == -1);
         delayedExecutor = new DelayedExecutor(Executors.newSingleThreadExecutor());
         delayedExecutor.start();
-        listener = new Connection.CloseListener() {
-            @Override
-            public void onClosed(Connection connection, Connection.CloseType closeType) throws IOException {
-                if (closeType == Connection.CloseType.REMOTELY) {
-                    if (LOG.isInfoEnabled()) {
-                        LOG.info("Remote closed connection ({}).  Removing from cache", connection.toString());
-                    }
-                }
-                GrizzlyConnectionsPool.this.removeAll(connection);
-            }
-        };
-
+        ownsDelayedExecutor = true;
     }
 
 
@@ -223,8 +248,10 @@ public void destroy() {
             entry.getValue().destroy();
         }
         connectionsPool.clear();
-        delayedExecutor.stop();
-        delayedExecutor.getThreadPool().shutdownNow();
+        if (ownsDelayedExecutor) {
+            delayedExecutor.stop();
+            delayedExecutor.getThreadPool().shutdownNow();
+        }
 
     }
 
