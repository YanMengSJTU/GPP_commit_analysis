diff --git a/api/src/main/java/com/ning/http/client/Response.java b/api/src/main/java/com/ning/http/client/Response.java
index 115170634..ab9c91bf4 100644
--- a/api/src/main/java/com/ning/http/client/Response.java
+++ b/api/src/main/java/com/ning/http/client/Response.java
@@ -24,6 +24,10 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import com.ning.http.util.AsyncHttpProviderUtils;
 
 /**
  * Represents the asynchronous HTTP response callback for an {@link com.ning.http.client.AsyncCompletionHandler}
@@ -189,7 +193,7 @@
                 Collections.synchronizedList(new ArrayList<HttpResponseBodyPart>());
         private HttpResponseStatus status;
         private HttpResponseHeaders headers;
-
+        private List<Entry<String, List<String>>> cookies;
         /**
          * Accumulate {@link HttpContent} in order to build a {@link Response}
          *
@@ -200,7 +204,21 @@ public ResponseBuilder accumulate(HttpContent httpContent) {
             if (httpContent instanceof HttpResponseStatus) {
                 status = (HttpResponseStatus) httpContent;
             } else if (httpContent instanceof HttpResponseHeaders) {
-                headers = (HttpResponseHeaders) httpContent;
+                HttpResponseHeaders inbound= (HttpResponseHeaders) httpContent;
+                
+                if(cookies==null){
+                    cookies=new ArrayList<Map.Entry<String,List<String>>>();
+                }else{  //only actually store on the second pass. Use list as marker
+                    FluentCaseInsensitiveStringsMap headers2 = inbound.getHeaders();
+                    for (Entry<String, List<String>> header : headers2) {
+                        if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
+                            cookies.add(header);
+                        }
+                    }
+                }
+                
+                headers = inbound;
+                
             } else if (httpContent instanceof HttpResponseBodyPart) {
                 bodies.add((HttpResponseBodyPart) httpContent);
             }
@@ -213,6 +231,11 @@ public ResponseBuilder accumulate(HttpContent httpContent) {
          * @return a {@link Response} instance
          */
         public Response build() {
+            if(cookies!=null){
+                for (Entry<String, List<String>> cook : this.cookies) {
+                    headers.getHeaders().add(cook.getKey(), cook.getValue());
+                }
+            }
             return status == null ? null : status.provider().prepareResponse(status, headers, bodies);
         }
 
diff --git a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index 22c3a96cb..813903cbb 100644
--- a/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -2043,15 +2043,7 @@ private boolean redirect(Request request,
                     }
 
                     log.debug("Redirecting to {}", newUrl);
-                    for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE)) {
-                        Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
-                        nBuilder.addOrReplaceCookie(c);
-                    }
-
-                    for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE2)) {
-                        Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
-                        nBuilder.addOrReplaceCookie(c);
-                    }
+                    copyCookies(future, nBuilder);
 
                     final String connectionPoolKey = future.getConnectionPoolKeyStrategy().getKey(initialConnectionUri);
                     AsyncCallable ac = new AsyncCallable(future) {
@@ -2081,6 +2073,18 @@ public Object call() throws Exception {
         return false;
     }
 
+    public void copyCookies(NettyResponseFuture<?> future, final RequestBuilder nBuilder) {
+        for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE)) {
+            Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
+            nBuilder.addOrReplaceCookie(c);
+        }
+
+        for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE2)) {
+            Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
+            nBuilder.addOrReplaceCookie(c);
+        }
+    }
+
     private final class HttpProtocol implements Protocol {
         // @Override
         public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws Exception {
@@ -2185,6 +2189,8 @@ public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws
                         final Realm nr = new Realm.RealmBuilder().clone(newRealm)
                                 .setUri(URI.create(request.getUrl()).getPath()).build();
 
+                        copyCookies(future, builder);
+                        handler.onHeadersReceived(responseHeaders);
                         log.debug("Sending authentication to {}", request.getUrl());
                         AsyncCallable ac = new AsyncCallable(future) {
                             public Object call() throws Exception {
