diff --git a/client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java b/client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
index 775b70a7e..a6c98565c 100644
--- a/client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
@@ -43,7 +43,7 @@ public WebSocketHandler configureHandler() {
     return new WebSocketHandler() {
       @Override
       public void configure(WebSocketServletFactory factory) {
-        factory.register(EchoSocket.class);
+        factory.register(EchoWebSocket.class);
       }
     };
   }
diff --git a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
index f7235f97c..b0f99ebe0 100644
--- a/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/ByteMessageTest.java
@@ -26,7 +26,7 @@
 
   private static final byte[] ECHO_BYTES = "ECHO".getBytes(StandardCharsets.UTF_8);
 
-  @Test(groups = "standalone")
+  @Test
   public void echoByte() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -63,7 +63,7 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void echoTwoMessagesTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(2);
@@ -154,6 +154,7 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
     }
   }
 
+  @Test
   public void echoFragments() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -191,7 +192,7 @@ public void onBinaryFrame(byte[] frame, boolean finalFragment, int rsv) {
 
       }).build()).get();
       websocket.sendBinaryFrame(ECHO_BYTES, false, 0);
-      websocket.sendBinaryFrame(ECHO_BYTES, true, 0);
+      websocket.sendContinuationFrame(ECHO_BYTES, true, 0);
       latch.await();
       assertEquals(text.get(), "ECHOECHO".getBytes());
     }
diff --git a/client/src/test/java/org/asynchttpclient/ws/EchoSocket.java b/client/src/test/java/org/asynchttpclient/ws/EchoWebSocket.java
similarity index 97%
rename from client/src/test/java/org/asynchttpclient/ws/EchoSocket.java
rename to client/src/test/java/org/asynchttpclient/ws/EchoWebSocket.java
index 384835be5..967aa271c 100644
--- a/client/src/test/java/org/asynchttpclient/ws/EchoSocket.java
+++ b/client/src/test/java/org/asynchttpclient/ws/EchoWebSocket.java
@@ -19,7 +19,7 @@
 import java.io.IOException;
 import java.nio.ByteBuffer;
 
-public class EchoSocket extends WebSocketAdapter {
+public class EchoWebSocket extends WebSocketAdapter {
 
   @Override
   public void onWebSocketConnect(Session sess) {
diff --git a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
index e5e298f27..d3249944d 100644
--- a/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
+++ b/client/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
@@ -27,7 +27,7 @@
 
 public class TextMessageTest extends AbstractBasicWebSocketTest {
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void onOpen() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -57,7 +57,7 @@ public void onError(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void onEmptyListenerTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       WebSocket websocket = null;
@@ -70,7 +70,7 @@ public void onEmptyListenerTest() throws Exception {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000, expectedExceptions = UnknownHostException.class)
+  @Test(timeOut = 60000, expectedExceptions = UnknownHostException.class)
   public void onFailureTest() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient()) {
       c.prepareGet("ws://abcdefg").execute(new WebSocketUpgradeHandler.Builder().build()).get();
@@ -79,7 +79,7 @@ public void onFailureTest() throws Throwable {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void onTimeoutCloseTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -109,7 +109,7 @@ public void onError(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void onClose() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -141,7 +141,7 @@ public void onError(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void echoText() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -178,7 +178,7 @@ public void onError(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void echoDoubleListenerText() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(2);
@@ -237,7 +237,7 @@ public void onError(Throwable t) {
     }
   }
 
-  @Test(groups = "standalone")
+  @Test
   public void echoTwoMessagesTest() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(2);
@@ -274,6 +274,7 @@ public void onError(Throwable t) {
     }
   }
 
+  @Test
   public void echoFragments() throws Exception {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch latch = new CountDownLatch(1);
@@ -304,14 +305,14 @@ public void onError(Throwable t) {
       }).build()).get();
 
       websocket.sendTextFrame("ECHO", false, 0);
-      websocket.sendTextFrame("ECHO", true, 0);
+      websocket.sendContinuationFrame("ECHO", true, 0);
 
       latch.await();
       assertEquals(text.get(), "ECHOECHO");
     }
   }
 
-  @Test(groups = "standalone", timeOut = 60000)
+  @Test(timeOut = 60000)
   public void echoTextAndThenClose() throws Throwable {
     try (AsyncHttpClient c = asyncHttpClient()) {
       final CountDownLatch textLatch = new CountDownLatch(1);
