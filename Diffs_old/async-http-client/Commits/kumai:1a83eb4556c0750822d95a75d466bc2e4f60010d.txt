diff --git a/src/main/java/com/ning/http/client/AsyncHttpProvider.java b/src/main/java/com/ning/http/client/AsyncHttpProvider.java
index 1689bc137..1dfdb0474 100644
--- a/src/main/java/com/ning/http/client/AsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/AsyncHttpProvider.java
@@ -16,7 +16,7 @@
 package com.ning.http.client;
 
 import java.io.IOException;
-import java.util.Collection;
+import java.util.List;
 
 /**
  * Interface to be used when implementing custom asynchronous I/O HTTP client.
@@ -48,6 +48,6 @@
      */
     public Response prepareResponse(HttpResponseStatus status,
                                     HttpResponseHeaders headers,
-                                    Collection<HttpResponseBodyPart> bodyParts);
+                                    List<HttpResponseBodyPart> bodyParts);
 
 }
diff --git a/src/main/java/com/ning/http/client/HttpResponseBodyPartsInputStream.java b/src/main/java/com/ning/http/client/HttpResponseBodyPartsInputStream.java
index 1f6667cd2..7b0f76db5 100644
--- a/src/main/java/com/ning/http/client/HttpResponseBodyPartsInputStream.java
+++ b/src/main/java/com/ning/http/client/HttpResponseBodyPartsInputStream.java
@@ -14,26 +14,27 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.List;
 
 /**
  * An {@link InputStream} that reads all the elements in an array of {@link HttpResponseBodyPart}s.
  */
 public class HttpResponseBodyPartsInputStream extends InputStream {
 
-    private final HttpResponseBodyPart[] parts;
+    private final List<HttpResponseBodyPart> parts;
 
     private int currentPos = 0;
     private int bytePos = -1;
     private byte[] active;
     private int available = 0;
 
-    public HttpResponseBodyPartsInputStream(HttpResponseBodyPart[] parts) {
+    public HttpResponseBodyPartsInputStream(List<HttpResponseBodyPart> parts) {
         this.parts = parts;
-        active = parts[0].getBodyPartBytes();
+        active = parts.get(0).getBodyPartBytes();
         computeLength(parts);
     }
 
-    private void computeLength(HttpResponseBodyPart[] parts) {
+    private void computeLength(List<HttpResponseBodyPart> parts) {
         if (available == 0) {
             for (HttpResponseBodyPart p : parts) {
                 available += p.getBodyPartBytes().length;
@@ -50,12 +51,12 @@ public int available() throws IOException {
     public int read() throws IOException {
         if (++bytePos >= active.length) {
             // No more bytes, so step to the next array.
-            if (++currentPos >= parts.length) {
+            if (++currentPos >= parts.size()) {
                 return -1;
             }
 
             bytePos = 0;
-            active = parts[currentPos].getBodyPartBytes();
+            active = parts.get(currentPos).getBodyPartBytes();
         }
 
         return active[bytePos] & 0xFF;
diff --git a/src/main/java/com/ning/http/client/Response.java b/src/main/java/com/ning/http/client/Response.java
index 17da42211..54ddddf6b 100644
--- a/src/main/java/com/ning/http/client/Response.java
+++ b/src/main/java/com/ning/http/client/Response.java
@@ -178,8 +178,8 @@
 
 
     public static class ResponseBuilder {
-        private final Collection<HttpResponseBodyPart> bodies =
-                Collections.synchronizedCollection(new ArrayList<HttpResponseBodyPart>());
+        private final List<HttpResponseBodyPart> bodies =
+                Collections.synchronizedList(new ArrayList<HttpResponseBodyPart>());
         private HttpResponseStatus status;
         private HttpResponseHeaders headers;
 
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
index 78abf1641..ac1531bef 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
@@ -47,7 +47,6 @@
 import org.apache.commons.httpclient.Credentials;
 import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
 import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HostConfiguration;
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpMethodBase;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
@@ -102,7 +101,6 @@
 import java.security.SecureRandom;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Callable;
@@ -224,7 +222,7 @@ public void close() {
         }
     }
 
-    public Response prepareResponse(HttpResponseStatus status, HttpResponseHeaders headers, Collection<HttpResponseBodyPart> bodyParts) {
+    public Response prepareResponse(HttpResponseStatus status, HttpResponseHeaders headers, List<HttpResponseBodyPart> bodyParts) {
         return new ApacheResponse(status, headers, bodyParts);
     }
 
diff --git a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
index 955121fc3..3d8ec7980 100644
--- a/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
+++ b/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
@@ -15,19 +15,16 @@
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
-import com.ning.http.client.HttpResponseBodyPartsInputStream;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.HttpResponseStatus;
 import com.ning.http.client.Response;
 import com.ning.http.util.AsyncHttpProviderUtils;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -37,14 +34,14 @@
     private final static String DEFAULT_CHARSET = "ISO-8859-1";
 
     private final URI uri;
-    private final Collection<HttpResponseBodyPart> bodyParts;
+    private final List<HttpResponseBodyPart> bodyParts;
     private final HttpResponseHeaders headers;
     private final HttpResponseStatus status;
     private List<Cookie> cookies;
 
     public ApacheResponse(HttpResponseStatus status,
                           HttpResponseHeaders headers,
-                          Collection<HttpResponseBodyPart> bodyParts) {
+                          List<HttpResponseBodyPart> bodyParts) {
 
         this.bodyParts = bodyParts;
         this.headers = headers;
@@ -81,11 +78,7 @@ public String getResponseBody(String charset) throws IOException {
     
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
-        if (!bodyParts.isEmpty()) {
-            return new HttpResponseBodyPartsInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]));
-        } else {
-            return new ByteArrayInputStream("".getBytes());
-        }
+    	return AsyncHttpProviderUtils.contentToInputStream(bodyParts);
     }
 
     /* @Override */
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index a4ee140e7..cce848102 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -271,7 +271,7 @@ public void close() {
      */
     public Response prepareResponse(HttpResponseStatus status,
                                     HttpResponseHeaders headers,
-                                    Collection<HttpResponseBodyPart> bodyParts) {
+                                    List<HttpResponseBodyPart> bodyParts) {
 
         return new GrizzlyResponse(status, headers, bodyParts);
 
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
index 1f0b52784..1119e00f8 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
@@ -61,26 +61,24 @@
 
     public GrizzlyResponse(final HttpResponseStatus status,
                            final HttpResponseHeaders headers,
-                           final Collection<HttpResponseBodyPart> bodyParts) {
+                           final List<HttpResponseBodyPart> bodyParts) {
 
         this.status = status;
         this.headers = headers;
         this.bodyParts = bodyParts;
 
         if (bodyParts != null && !bodyParts.isEmpty()) {
-            HttpResponseBodyPart[] parts =
-                    bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]);
-            if (parts.length == 1) {
-                responseBody = ((GrizzlyResponseBodyPart) parts[0]).getBodyBuffer();
+            if (bodyParts.size() == 1) {
+                responseBody = ((GrizzlyResponseBodyPart) bodyParts.get(0)).getBodyBuffer();
             } else {
-                final Buffer firstBuffer = ((GrizzlyResponseBodyPart) parts[0]).getBodyBuffer();
+                final Buffer firstBuffer = ((GrizzlyResponseBodyPart) bodyParts.get(0)).getBodyBuffer();
                 final MemoryManager mm = MemoryManager.DEFAULT_MEMORY_MANAGER;
                 Buffer constructedBodyBuffer = firstBuffer;
-                for (int i = 1, len = parts.length; i < len; i++) {
+                for (int i = 1, len = bodyParts.size(); i < len; i++) {
                     constructedBodyBuffer =
                             Buffers.appendBuffers(mm,
                                     constructedBodyBuffer,
-                                    ((GrizzlyResponseBodyPart) parts[i]).getBodyBuffer());
+                                    ((GrizzlyResponseBodyPart) bodyParts.get(i)).getBodyBuffer());
                 }
                 responseBody = constructedBodyBuffer;
             }
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
index 37c8af774..5e3eb656c 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
@@ -68,7 +68,6 @@
 import java.nio.ByteBuffer;
 import java.security.GeneralSecurityException;
 import java.security.NoSuchAlgorithmException;
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Callable;
@@ -205,7 +204,7 @@ public void close() {
         isClose.set(true);
     }
 
-    public Response prepareResponse(HttpResponseStatus status, HttpResponseHeaders headers, Collection<HttpResponseBodyPart> bodyParts) {
+    public Response prepareResponse(HttpResponseStatus status, HttpResponseHeaders headers, List<HttpResponseBodyPart> bodyParts) {
         return new JDKResponse(status, headers, bodyParts);
     }
 
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
index 8b71f315f..f7fd04603 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
@@ -15,7 +15,6 @@
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
-import com.ning.http.client.HttpResponseBodyPartsInputStream;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.HttpResponseStatus;
 import com.ning.http.client.Response;
@@ -27,7 +26,6 @@
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -38,7 +36,7 @@
     private final static String DEFAULT_CHARSET = "ISO-8859-1";
 
     private final URI uri;
-    private final Collection<HttpResponseBodyPart> bodyParts;
+    private final List<HttpResponseBodyPart> bodyParts;
     private final HttpResponseHeaders headers;
     private final HttpResponseStatus status;
     private List<Cookie> cookies;
@@ -47,7 +45,7 @@
 
     public JDKResponse(HttpResponseStatus status,
                        HttpResponseHeaders headers,
-                       Collection<HttpResponseBodyPart> bodyParts) {
+                       List<HttpResponseBodyPart> bodyParts) {
 
         this.bodyParts = bodyParts;
         this.headers = headers;
@@ -93,11 +91,7 @@ public InputStream getResponseBodyAsStream() throws IOException {
             return new ByteArrayInputStream(content.getBytes(DEFAULT_CHARSET));
         }
 
-        if (!bodyParts.isEmpty()) {
-            return new HttpResponseBodyPartsInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]));
-        } else {
-            return new ByteArrayInputStream("".getBytes());
-        }
+        return AsyncHttpProviderUtils.contentToInputStream(bodyParts);
     }
 
     /* @Override */
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index c450122c1..c30b2cd8a 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -117,7 +117,6 @@
 import java.security.GeneralSecurityException;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map.Entry;
@@ -927,7 +926,7 @@ public void close() {
 
     public Response prepareResponse(final HttpResponseStatus status,
                                     final HttpResponseHeaders headers,
-                                    final Collection<HttpResponseBodyPart> bodyParts) {
+                                    final List<HttpResponseBodyPart> bodyParts) {
         return new NettyResponse(status, headers, bodyParts);
     }
 
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
index 2562b9907..a0a243a90 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
@@ -22,16 +22,12 @@
 import com.ning.http.client.HttpResponseStatus;
 import com.ning.http.client.Response;
 import com.ning.http.util.AsyncHttpProviderUtils;
-import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.buffer.ChannelBufferInputStream;
-import org.jboss.netty.buffer.ChannelBuffers;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -43,14 +39,14 @@
     private final static String DEFAULT_CHARSET = "ISO-8859-1";
 
     private final URI uri;
-    private final Collection<HttpResponseBodyPart> bodyParts;
+    private final List<HttpResponseBodyPart> bodyParts;
     private final HttpResponseHeaders headers;
     private final HttpResponseStatus status;
     private List<Cookie> cookies;
 
     public NettyResponse(HttpResponseStatus status,
                          HttpResponseHeaders headers,
-                         Collection<HttpResponseBodyPart> bodyParts) {
+                         List<HttpResponseBodyPart> bodyParts) {
 
         this.status = status;
         this.headers = headers;
@@ -86,17 +82,7 @@ public String getResponseBody(String charset) throws IOException {
 
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
-        ChannelBuffer buf = ChannelBuffers.dynamicBuffer();
-        for (HttpResponseBodyPart bp : bodyParts) {
-            // Ugly. TODO
-            // (1) We must remove the downcast,
-            // (2) we need a CompositeByteArrayInputStream to avoid
-            // copying the bytes.
-            if (bp.getClass().isAssignableFrom(ResponseBodyPart.class)) {
-                buf.writeBytes(bp.getBodyPartBytes());
-            }
-        }
-        return new ChannelBufferInputStream(buf);
+    	return AsyncHttpProviderUtils.contentToInputStream(bodyParts);
     }
 
     /* @Override */
diff --git a/src/main/java/com/ning/http/client/webdav/WebDavCompletionHandlerBase.java b/src/main/java/com/ning/http/client/webdav/WebDavCompletionHandlerBase.java
index d0a483db6..d5264c688 100644
--- a/src/main/java/com/ning/http/client/webdav/WebDavCompletionHandlerBase.java
+++ b/src/main/java/com/ning/http/client/webdav/WebDavCompletionHandlerBase.java
@@ -32,7 +32,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
-import java.util.Collection;
+import java.util.List;
 import java.util.Collections;
 
 /**
@@ -43,8 +43,8 @@
 public abstract class WebDavCompletionHandlerBase<T> implements AsyncHandler<T> {
     private final Logger logger = LoggerFactory.getLogger(AsyncCompletionHandlerBase.class);
 
-    private final Collection<HttpResponseBodyPart> bodies =
-            Collections.synchronizedCollection(new ArrayList<HttpResponseBodyPart>());
+    private final List<HttpResponseBodyPart> bodies =
+            Collections.synchronizedList(new ArrayList<HttpResponseBodyPart>());
     private HttpResponseStatus status;
     private HttpResponseHeaders headers;
 
diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index 718dee9f3..f10ef5dff 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -18,12 +18,14 @@
 import com.ning.http.client.FilePart;
 import com.ning.http.client.FluentStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
+import com.ning.http.client.HttpResponseBodyPartsInputStream;
 import com.ning.http.client.Part;
 import com.ning.http.client.StringPart;
 import com.ning.http.multipart.ByteArrayPartSource;
 import com.ning.http.multipart.MultipartRequestEntity;
 import com.ning.http.multipart.PartSource;
 
+import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -134,6 +136,8 @@
 
     static final String VERSION = "Version";
 
+    static final byte[] EMPTY_BYTE_ARRAY = "".getBytes();
+
     public final static URI createUri(String u) {
         URI uri = URI.create(u);
         final String scheme = uri.getScheme();
@@ -181,13 +185,13 @@ public final static String getAuthority(URI uri) {
         return url;
     }
 
-    public final static String contentToString(Collection<HttpResponseBodyPart> bodyParts, String charset) throws UnsupportedEncodingException {
+    public final static String contentToString(List<HttpResponseBodyPart> bodyParts, String charset) throws UnsupportedEncodingException {
         return new String(contentToByte(bodyParts), charset);
     }
 
-    public final static byte[] contentToByte(Collection<HttpResponseBodyPart> bodyParts) throws UnsupportedEncodingException {
+    public final static byte[] contentToByte(List<HttpResponseBodyPart> bodyParts) throws UnsupportedEncodingException {
         if (bodyParts.size() == 1) {
-            return bodyParts.iterator().next().getBodyPartBytes();
+            return bodyParts.get(0).getBodyPartBytes();
 
         } else {
             int size = 0;
@@ -206,6 +210,10 @@ public final static String contentToString(Collection<HttpResponseBodyPart> body
         }
     }
 
+    public final static InputStream contentToInputStream(List<HttpResponseBodyPart> bodyParts) throws UnsupportedEncodingException {
+        return bodyParts.isEmpty()? new ByteArrayInputStream(EMPTY_BYTE_ARRAY) : new HttpResponseBodyPartsInputStream(bodyParts);
+    }
+
     public final static String getHost(URI uri) {
         String host = uri.getHost();
         if (host == null) {
