diff --git a/pom.xml b/pom.xml
index b46ea1d6c..9755f3194 100644
--- a/pom.xml
+++ b/pom.xml
@@ -468,6 +468,7 @@
                         <exclude>**/Cookie</exclude>
                         <exclude>**/Part</exclude>
                         <exclude>**/PartBase</exclude>
+                        <exclude>**/MultipartRequestEntity</exclude>
                     </excludes>
                 </configuration>
                 <executions>
diff --git a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
index 7b241cbf5..5eae0fd8c 100644
--- a/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
@@ -2072,7 +2072,7 @@ public boolean doHandle(final FilterChainContext ctx,
             MultipartRequestEntity mre =
                     AsyncHttpProviderUtils.createMultipartRequestEntity(
                             request.getParts(),
-                            request.getParams());
+                            request.getHeaders());
             requestPacket.setContentLengthLong(mre.getContentLength());
             requestPacket.setContentType(mre.getContentType());
             final MemoryManager mm = ctx.getMemoryManager();
diff --git a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
index 7a315face..37b3cd788 100644
--- a/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
@@ -43,6 +43,7 @@
 import com.ning.http.util.ProxyUtils;
 import com.ning.http.util.SslUtils;
 import com.ning.http.util.UTF8UrlEncoder;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -617,7 +618,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                         lenght = MAX_BUFFERED_BYTES;
                     }
 
-                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getParams());
+                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getHeaders());
 
                     urlConnection.setRequestProperty("Content-Type", mre.getContentType());
                     urlConnection.setRequestProperty("Content-Length", String.valueOf(mre.getContentLength()));
diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index be632c411..9db866f3e 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -554,9 +554,9 @@ public void operationComplete(ChannelFuture cf) {
                          * TODO: AHC-78: SSL + zero copy isn't supported by the MultiPart class and pretty complex to implements.
                          */
                         if (future.getRequest().getParts() != null) {
-                            String boundary = future.getNettyRequest().getHeader("Content-Type");
+                            String contentType = future.getNettyRequest().getHeader("Content-Type");
                             String length = future.getNettyRequest().getHeader("Content-Length");
-                            body = new MultipartBody(future.getRequest().getParts(), boundary, length);
+                            body = new MultipartBody(future.getRequest().getParts(), contentType, length);
                         }
 
                         ChannelFuture writeFuture;
@@ -858,8 +858,8 @@ else if (uri.getRawQuery() != null)
                         lenght = MAX_BUFFERED_BYTES;
                     }
 
-                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getParams());
-
+                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getHeaders());
+                    
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, mre.getContentType());
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(mre.getContentLength()));
 
diff --git a/src/main/java/com/ning/http/multipart/FilePart.java b/src/main/java/com/ning/http/multipart/FilePart.java
index 7f160580b..ac6c1972b 100644
--- a/src/main/java/com/ning/http/multipart/FilePart.java
+++ b/src/main/java/com/ning/http/multipart/FilePart.java
@@ -69,7 +69,6 @@
     public FilePart(String name, PartSource partSource, String contentType, String charset, String contentId) {
 
         super(name, contentType == null ? DEFAULT_CONTENT_TYPE : contentType, charset == null ? "ISO-8859-1" : charset, DEFAULT_TRANSFER_ENCODING, contentId);
-
         if (partSource == null) {
             throw new IllegalArgumentException("Source may not be null");
         }
@@ -147,9 +146,9 @@ public FilePart(String name, String fileName, File file, String contentType, Str
      * @throws java.io.IOException If an IO problem occurs
      */
     protected void sendDispositionHeader(OutputStream out) throws IOException {
-        super.sendDispositionHeader(out);
         String filename = this.source.getFileName();
         if (filename != null) {
+            super.sendDispositionHeader(out);
             out.write(FILE_NAME_BYTES);
             out.write(QUOTE_BYTES);
             out.write(MultipartEncodingUtil.getAsciiBytes(filename));
diff --git a/src/main/java/com/ning/http/multipart/FilePartSource.java b/src/main/java/com/ning/http/multipart/FilePartSource.java
index 3f652047c..ddb772ba7 100644
--- a/src/main/java/com/ning/http/multipart/FilePartSource.java
+++ b/src/main/java/com/ning/http/multipart/FilePartSource.java
@@ -70,9 +70,7 @@ public FilePartSource(File file) throws FileNotFoundException {
     public FilePartSource(String fileName, File file)
             throws FileNotFoundException {
         this(file);
-        if (fileName != null) {
-            this.fileName = fileName;
-        }
+        this.fileName = fileName;
     }
 
     /**
@@ -96,7 +94,7 @@ public long getLength() {
      * @see PartSource#getFileName()
      */
     public String getFileName() {
-        return (fileName == null) ? "noname" : fileName;
+        return fileName;
     }
 
     /**
diff --git a/src/main/java/com/ning/http/multipart/MultipartBody.java b/src/main/java/com/ning/http/multipart/MultipartBody.java
index d12a5f0cf..1f336c21a 100644
--- a/src/main/java/com/ning/http/multipart/MultipartBody.java
+++ b/src/main/java/com/ning/http/multipart/MultipartBody.java
@@ -48,8 +48,9 @@
 
     enum FileLocation {NONE, START, MIDDLE, END}
 
-    public MultipartBody(List<com.ning.http.client.Part> parts, String boundary, String contentLength) {
-        this.boundary = MultipartEncodingUtil.getAsciiBytes(boundary.substring("multipart/form-data; boundary=".length()));
+    public MultipartBody(List<com.ning.http.client.Part> parts, String contentType, String contentLength) {
+        this.boundary = MultipartEncodingUtil.getAsciiBytes(contentType.substring(contentType.indexOf("boundary=") + "boundary=".length()));
+        
         this.contentLength = Long.parseLong(contentLength);
         this.parts = parts;
 
@@ -430,6 +431,7 @@ private ByteArrayOutputStream generateFileStart(FilePart filePart)
         filePart.sendDispositionHeader(overhead);
         filePart.sendContentTypeHeader(overhead);
         filePart.sendTransferEncodingHeader(overhead);
+        filePart.sendContentIdHeader(overhead);
         filePart.sendEndOfHeader(overhead);
         return overhead;
     }
diff --git a/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java b/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
index 0d93447a2..e9fd24c88 100644
--- a/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
+++ b/src/main/java/com/ning/http/multipart/MultipartRequestEntity.java
@@ -15,7 +15,10 @@
  */
 package com.ning.http.multipart;
 
-import com.ning.http.client.FluentStringsMap;
+import static com.ning.http.util.MiscUtil.isNonEmpty;
+
+import com.ning.http.client.FluentCaseInsensitiveStringsMap;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -25,7 +28,7 @@
 
 /**
  * This class is an adaptation of the Apache HttpClient implementation
- *
+ * 
  * @link http://hc.apache.org/httpclient-3.x/
  */
 public class MultipartRequestEntity implements RequestEntity {
@@ -38,15 +41,14 @@
     /**
      * The pool of ASCII chars to be used for generating a multipart boundary.
      */
-    private static byte[] MULTIPART_CHARS = MultipartEncodingUtil.getAsciiBytes(
-            "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
+    private static byte[] MULTIPART_CHARS = MultipartEncodingUtil.getAsciiBytes("-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
 
     /**
      * Generates a random multipart boundary string.
-     *
+     * 
      * @return
      */
-    private static byte[] generateMultipartBoundary() {
+    public static byte[] generateMultipartBoundary() {
         Random rand = new Random();
         byte[] bytes = new byte[rand.nextInt(11) + 30]; // a random size from 30 to 40
         for (int i = 0; i < bytes.length; i++) {
@@ -64,42 +66,35 @@
 
     private byte[] multipartBoundary;
 
-    private FluentStringsMap methodParams;
+    private final String contentType;
 
     /**
      * Creates a new multipart entity containing the given parts.
-     *
-     * @param parts        The parts to include.
-     * @param methodParams The params of the HttpMethod using this entity.
+     * 
+     * @param parts The parts to include.
      */
-    public MultipartRequestEntity(Part[] parts, FluentStringsMap methodParams) {
+    public MultipartRequestEntity(Part[] parts, FluentCaseInsensitiveStringsMap requestHeaders) {
         if (parts == null) {
             throw new IllegalArgumentException("parts cannot be null");
         }
-        if (methodParams == null) {
-            methodParams = new FluentStringsMap();
-        }
         this.parts = parts;
-        this.methodParams = methodParams;
+        String contentTypeHeader = requestHeaders.getFirstValue("Content-Type");
+        if (isNonEmpty(contentTypeHeader))
+            this.contentType = contentTypeHeader;
+        else
+            this.contentType = MULTIPART_FORM_CONTENT_TYPE;
+
     }
 
     /**
-     * Returns the MIME boundary string that is used to demarcate boundaries of
-     * this part. The first call to this method will implicitly create a new
-     * boundary string. To create a boundary string first the
-     * HttpMethodParams.MULTIPART_BOUNDARY parameter is considered. Otherwise
-     * a random one is generated.
-     *
+     * Returns the MIME boundary string that is used to demarcate boundaries of this part. The first call to this method will implicitly create a new boundary string. To create a boundary string first the HttpMethodParams.MULTIPART_BOUNDARY parameter is considered. Otherwise a
+     * random one is generated.
+     * 
      * @return The boundary string of this entity in ASCII encoding.
      */
     protected byte[] getMultipartBoundary() {
         if (multipartBoundary == null) {
-            String temp = methodParams.get("") == null ? null : methodParams.get("").iterator().next();
-            if (temp != null) {
-                multipartBoundary = MultipartEncodingUtil.getAsciiBytes(temp);
-            } else {
-                multipartBoundary = generateMultipartBoundary();
-            }
+            multipartBoundary = generateMultipartBoundary();
         }
         return multipartBoundary;
     }
@@ -116,14 +111,18 @@ public boolean isRepeatable() {
         return true;
     }
 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
      * @see org.apache.commons.httpclient.methods.RequestEntity#writeRequest(java.io.OutputStream)
      */
     public void writeRequest(OutputStream out) throws IOException {
         Part.sendParts(out, parts, getMultipartBoundary());
     }
 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
      * @see org.apache.commons.httpclient.methods.RequestEntity#getContentLength()
      */
     public long getContentLength() {
@@ -135,14 +134,22 @@ public long getContentLength() {
         }
     }
 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
      * @see org.apache.commons.httpclient.methods.RequestEntity#getContentType()
      */
     public String getContentType() {
-        StringBuffer buffer = new StringBuffer(MULTIPART_FORM_CONTENT_TYPE);
-        buffer.append("; boundary=");
-        buffer.append(MultipartEncodingUtil.getAsciiString(getMultipartBoundary()));
-        return buffer.toString();
+        if (contentType.contains("boundary="))
+            return contentType;
+        else {
+            StringBuffer buffer = new StringBuffer(contentType);
+            if (!contentType.endsWith(";"))
+                buffer.append(";");
+            buffer.append(" boundary=");
+            buffer.append(MultipartEncodingUtil.getAsciiString(getMultipartBoundary()));
+            return buffer.toString();
+        }
     }
 
 }
diff --git a/src/main/java/com/ning/http/multipart/Part.java b/src/main/java/com/ning/http/multipart/Part.java
index 8edf01ad1..94dece300 100644
--- a/src/main/java/com/ning/http/multipart/Part.java
+++ b/src/main/java/com/ning/http/multipart/Part.java
@@ -267,7 +267,7 @@ protected void sendTransferEncodingHeader(OutputStream out) throws IOException {
      * @param out The output stream
      * @throws IOException If an IO problem occurs.
      */
-    protected void sendContentIDHeader(OutputStream out) throws IOException {
+    protected void sendContentIdHeader(OutputStream out) throws IOException {
         String contentId = getContentId();
         if (contentId != null) {
             out.write(CRLF_BYTES);
@@ -324,7 +324,7 @@ public void send(OutputStream out) throws IOException {
         sendDispositionHeader(out);
         sendContentTypeHeader(out);
         sendTransferEncodingHeader(out);
-        sendContentIDHeader(out);
+        sendContentIdHeader(out);
         sendEndOfHeader(out);
         sendData(out);
         sendEnd(out);
@@ -345,7 +345,7 @@ public long length() throws IOException {
         sendDispositionHeader(overhead);
         sendContentTypeHeader(overhead);
         sendTransferEncodingHeader(overhead);
-        sendContentIDHeader(overhead);
+        sendContentIdHeader(overhead);
         sendEndOfHeader(overhead);
         sendEnd(overhead);
         return overhead.size() + lengthOfData();
diff --git a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
index d7aca075e..ef42196e2 100644
--- a/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
+++ b/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
@@ -31,6 +31,7 @@
 import com.ning.http.client.ByteArrayPart;
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FilePart;
+import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.FluentStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseBodyPartsInputStream;
@@ -287,11 +288,11 @@ public final static int getPort(URI uri) {
      * This is quite ugly as our internal names are duplicated, but we build on top of HTTP Client implementation.
      *
      * @param params
-     * @param methodParams
+     * @param requestHeaders
      * @return a MultipartRequestEntity.
      * @throws java.io.FileNotFoundException
      */
-    public final static MultipartRequestEntity createMultipartRequestEntity(List<Part> params, FluentStringsMap methodParams) throws FileNotFoundException {
+    public final static MultipartRequestEntity createMultipartRequestEntity(List<Part> params, FluentCaseInsensitiveStringsMap requestHeaders) throws FileNotFoundException {
         com.ning.http.multipart.Part[] parts = new com.ning.http.multipart.Part[params.size()];
         int i = 0;
 
@@ -323,7 +324,7 @@ public final static MultipartRequestEntity createMultipartRequestEntity(List<Par
             }
             ++i;
         }
-        return new MultipartRequestEntity(parts, methodParams);
+        return new MultipartRequestEntity(parts, requestHeaders);
     }
 
     public final static byte[] readFully(InputStream in, int[] lengthWrapper) throws IOException {
