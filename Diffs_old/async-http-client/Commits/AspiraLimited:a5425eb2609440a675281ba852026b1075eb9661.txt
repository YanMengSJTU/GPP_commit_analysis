diff --git a/extras/pom.xml b/extras/pom.xml
index f601a24a0..b9065c1a4 100644
--- a/extras/pom.xml
+++ b/extras/pom.xml
@@ -19,7 +19,6 @@
         <module>rxjava</module>
         <module>rxjava2</module>
         <module>simple</module>
-        <module>retrofit2</module>
     </modules>
 
     <dependencies>
diff --git a/extras/retrofit2/README.md b/extras/retrofit2/README.md
deleted file mode 100644
index 4edfe7166..000000000
--- a/extras/retrofit2/README.md
+++ /dev/null
@@ -1,57 +0,0 @@
-# Async-http-client Retrofit2 Call Adapter
-
-An `okhttp3.Call.Factory` for implementing async-http-client powered [Retrofit][1] type-safe HTTP clients.
-
-## Download
-
-Download [the latest JAR][2] or grab via [Maven][3]:
-
-```xml
-<dependency>
-  <groupId>org.asynchttpclient</groupId>
-  <artifactId>async-http-client-extras-retrofit2</artifactId>
-  <version>latest.version</version>
-</dependency>
-```
-
-or [Gradle][3]:
-
-```groovy
-compile "org.asynchttpclient:async-http-client-extras-retrofit2:latest.version"
-```
-
- [1]: http://square.github.io/retrofit/
- [2]: https://search.maven.org/remote_content?g=org.asynchttpclient&a=async-http-client-extras-retrofit2&v=LATEST
- [3]: http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.asynchttpclient%22%20a%3A%22async-http-client-extras-retrofit2%22
- [snap]: https://oss.sonatype.org/content/repositories/snapshots/
-
-## Example usage
-
-```java
-// instantiate async-http-client
-AsyncHttpClient httpClient = ...
-
-// instantiate async-http-client call factory
-Call.Factory callFactory = AsyncHttpClientCallFactory.builder()
-    .httpClient(httpClient)                 // required
-    .onRequestStart(onRequestStart)         // optional
-    .onRequestFailure(onRequestFailure)     // optional
-    .onRequestSuccess(onRequestSuccess)     // optional
-    .requestCustomizer(requestCustomizer)   // optional
-    .build();
-
-// instantiate retrofit
-Retrofit retrofit = new Retrofit.Builder()
-    .callFactory(callFactory) // use our own call factory
-    .addConverterFactory(ScalarsConverterFactory.create())
-    .addConverterFactory(JacksonConverterFactory.create())
-    // ... add other converter factories
-    // .addCallAdapterFactory(RxJavaCallAdapterFactory.createAsync())
-    .validateEagerly(true) // highly recommended!!!
-    .baseUrl("https://api.github.com/");
-
-// time to instantiate service
-GitHub github = retrofit.create(Github.class);
-
-// enjoy your type-safe github service api! :-)
-```
\ No newline at end of file
diff --git a/extras/retrofit2/pom.xml b/extras/retrofit2/pom.xml
deleted file mode 100644
index 5798650ea..000000000
--- a/extras/retrofit2/pom.xml
+++ /dev/null
@@ -1,62 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <artifactId>async-http-client-extras-parent</artifactId>
-        <groupId>org.asynchttpclient</groupId>
-        <version>2.1.0-SNAPSHOT-ABB</version>
-    </parent>
-
-    <artifactId>async-http-client-extras-retrofit2</artifactId>
-    <name>Asynchronous Http Client Retrofit2 Extras</name>
-    <description>The Async Http Client Retrofit2 Extras.</description>
-
-    <properties>
-      <retrofit2.version>2.3.0</retrofit2.version>
-      <lombok.version>1.16.16</lombok.version>
-    </properties>
-
-    <dependencies>
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>${lombok.version}</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.squareup.retrofit2</groupId>
-            <artifactId>retrofit</artifactId>
-            <version>${retrofit2.version}</version>
-        </dependency>
-
-        <!-- for tests -->
-        <dependency>
-            <groupId>com.squareup.retrofit2</groupId>
-            <artifactId>converter-scalars</artifactId>
-            <version>${retrofit2.version}</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.squareup.retrofit2</groupId>
-            <artifactId>converter-jackson</artifactId>
-            <version>${retrofit2.version}</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.squareup.retrofit2</groupId>
-            <artifactId>adapter-rxjava</artifactId>
-            <version>${retrofit2.version}</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.squareup.retrofit2</groupId>
-            <artifactId>adapter-rxjava2</artifactId>
-            <version>${retrofit2.version}</version>
-            <scope>test</scope>
-        </dependency>
-    </dependencies>
-</project>
diff --git a/extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCall.java b/extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCall.java
deleted file mode 100644
index 2dde47813..000000000
--- a/extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCall.java
+++ /dev/null
@@ -1,326 +0,0 @@
-/*
- * Copyright (c) 2017 AsyncHttpClient Project. All rights reserved.
- *
- * This program is licensed to you under the Apache License Version 2.0,
- * and you may not use this file except in compliance with the Apache License Version 2.0.
- * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the Apache License Version 2.0 is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
- */
-package org.asynchttpclient.extras.retrofit;
-
-import lombok.AccessLevel;
-import lombok.Builder;
-import lombok.Getter;
-import lombok.NonNull;
-import lombok.Singular;
-import lombok.SneakyThrows;
-import lombok.Value;
-import lombok.extern.slf4j.Slf4j;
-import lombok.val;
-import okhttp3.Call;
-import okhttp3.Callback;
-import okhttp3.MediaType;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.ResponseBody;
-import okio.Buffer;
-import org.asynchttpclient.AsyncCompletionHandler;
-import org.asynchttpclient.AsyncHttpClient;
-import org.asynchttpclient.RequestBuilder;
-
-import java.io.IOException;
-import java.util.Collection;
-import java.util.List;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.Consumer;
-
-/**
- * {@link AsyncHttpClient} <a href="http://square.github.io/retrofit/">Retrofit2</a> {@link okhttp3.Call}
- * implementation.
- */
-@Value
-@Builder(toBuilder = true)
-@Slf4j
-class AsyncHttpClientCall implements Cloneable, okhttp3.Call {
-    /**
-     * Default {@link #execute()} timeout in milliseconds (value: <b>{@value}</b>)
-     *
-     * @see #execute()
-     * @see #executeTimeoutMillis
-     */
-    public static final long DEFAULT_EXECUTE_TIMEOUT_MILLIS = 30_000;
-
-    /**
-     * HttpClient instance.
-     */
-    @NonNull
-    AsyncHttpClient httpClient;
-
-    /**
-     * {@link #execute()} response timeout in milliseconds.
-     */
-    @Builder.Default
-    long executeTimeoutMillis = DEFAULT_EXECUTE_TIMEOUT_MILLIS;
-
-    /**
-     * Retrofit request.
-     */
-    @NonNull
-    @Getter(AccessLevel.NONE)
-    Request request;
-
-    /**
-     * List of consumers that get called just before actual async-http-client request is being built.
-     */
-    @Singular("requestCustomizer")
-    List<Consumer<RequestBuilder>> requestCustomizers;
-
-    /**
-     * List of consumers that get called just before actual HTTP request is being fired.
-     */
-    @Singular("onRequestStart")
-    List<Consumer<Request>> onRequestStart;
-
-    /**
-     * List of consumers that get called when HTTP request finishes with an exception.
-     */
-    @Singular("onRequestFailure")
-    List<Consumer<Throwable>> onRequestFailure;
-
-    /**
-     * List of consumers that get called when HTTP request finishes successfully.
-     */
-    @Singular("onRequestSuccess")
-    List<Consumer<Response>> onRequestSuccess;
-
-    /**
-     * Tells whether call has been executed.
-     *
-     * @see #isExecuted()
-     * @see #isCanceled()
-     */
-    private final AtomicReference<CompletableFuture<Response>> futureRef = new AtomicReference<>();
-
-    @Override
-    public Request request() {
-        return request;
-    }
-
-    @Override
-    public Response execute() throws IOException {
-        try {
-            return executeHttpRequest().get(getExecuteTimeoutMillis(), TimeUnit.MILLISECONDS);
-        } catch (ExecutionException e) {
-            throw toIOException(e.getCause());
-        } catch (Exception e) {
-            throw toIOException(e);
-        }
-    }
-
-    @Override
-    public void enqueue(Callback responseCallback) {
-        executeHttpRequest()
-                .thenApply(response -> handleResponse(response, responseCallback))
-                .exceptionally(throwable -> handleException(throwable, responseCallback));
-    }
-
-    @Override
-    public void cancel() {
-        val future = futureRef.get();
-        if (future != null) {
-            if (!future.cancel(true)) {
-                log.warn("Cannot cancel future: {}", future);
-            }
-        }
-    }
-
-    @Override
-    public boolean isExecuted() {
-        val future = futureRef.get();
-        return future != null && future.isDone();
-    }
-
-    @Override
-    public boolean isCanceled() {
-        val future = futureRef.get();
-        return future != null && future.isCancelled();
-    }
-
-    @Override
-    public Call clone() {
-        return toBuilder().build();
-    }
-
-    protected <T> T handleException(Throwable throwable, Callback responseCallback) {
-        try {
-            if (responseCallback != null) {
-                responseCallback.onFailure(this, toIOException(throwable));
-            }
-        } catch (Exception e) {
-            log.error("Exception while executing onFailure() on {}: {}", responseCallback, e.getMessage(), e);
-        }
-        return null;
-    }
-
-    protected Response handleResponse(Response response, Callback responseCallback) {
-        try {
-            if (responseCallback != null) {
-                responseCallback.onResponse(this, response);
-            }
-        } catch (Exception e) {
-            log.error("Exception while executing onResponse() on {}: {}", responseCallback, e.getMessage(), e);
-        }
-        return response;
-    }
-
-    protected CompletableFuture<Response> executeHttpRequest() {
-        if (futureRef.get() != null) {
-            throwAlreadyExecuted();
-        }
-
-        // create future and try to store it into atomic reference
-        val future = new CompletableFuture<Response>();
-        if (!futureRef.compareAndSet(null, future)) {
-            throwAlreadyExecuted();
-        }
-
-        // create request
-        val asyncHttpClientRequest = createRequest(request());
-
-        // execute the request.
-        val me = this;
-        runConsumers(this.onRequestStart, this.request);
-        getHttpClient().executeRequest(asyncHttpClientRequest, new AsyncCompletionHandler<Response>() {
-            @Override
-            public void onThrowable(Throwable t) {
-                runConsumers(me.onRequestFailure, t);
-                future.completeExceptionally(t);
-            }
-
-            @Override
-            public Response onCompleted(org.asynchttpclient.Response response) throws Exception {
-                val okHttpResponse = toOkhttpResponse(response);
-                runConsumers(me.onRequestSuccess, okHttpResponse);
-                future.complete(okHttpResponse);
-                return okHttpResponse;
-            }
-        });
-
-        return future;
-    }
-
-    /**
-     * Converts async-http-client response to okhttp response.
-     *
-     * @param asyncHttpClientResponse async-http-client response
-     * @return okhttp response.
-     * @throws NullPointerException in case of null arguments
-     */
-    private Response toOkhttpResponse(org.asynchttpclient.Response asyncHttpClientResponse) {
-        // status code
-        val rspBuilder = new Response.Builder()
-                .request(request())
-                .protocol(Protocol.HTTP_1_1)
-                .code(asyncHttpClientResponse.getStatusCode())
-                .message(asyncHttpClientResponse.getStatusText());
-
-        // headers
-        if (asyncHttpClientResponse.hasResponseHeaders()) {
-            asyncHttpClientResponse.getHeaders().forEach(e -> rspBuilder.header(e.getKey(), e.getValue()));
-        }
-
-        // body
-        if (asyncHttpClientResponse.hasResponseBody()) {
-            val contentType = MediaType.parse(asyncHttpClientResponse.getContentType());
-            val okHttpBody = ResponseBody.create(contentType, asyncHttpClientResponse.getResponseBodyAsBytes());
-            rspBuilder.body(okHttpBody);
-        }
-
-        return rspBuilder.build();
-    }
-
-    protected IOException toIOException(@NonNull Throwable exception) {
-        if (exception instanceof IOException) {
-            return (IOException) exception;
-        } else {
-            val message = (exception.getMessage() == null) ? exception.toString() : exception.getMessage();
-            return new IOException(message, exception);
-        }
-    }
-
-    /**
-     * Converts retrofit request to async-http-client request.
-     *
-     * @param request retrofit request
-     * @return async-http-client request.
-     */
-    @SneakyThrows
-    protected org.asynchttpclient.Request createRequest(@NonNull Request request) {
-        // create async-http-client request builder
-        val requestBuilder = new RequestBuilder(request.method());
-
-        // request uri
-        requestBuilder.setUrl(request.url().toString());
-
-        // set headers
-        val headers = request.headers();
-        headers.names().forEach(name -> requestBuilder.setHeader(name, headers.values(name)));
-
-        // set request body
-        val body = request.body();
-        if (body != null && body.contentLength() > 0) {
-            // write body to buffer
-            val okioBuffer = new Buffer();
-            body.writeTo(okioBuffer);
-            requestBuilder.setBody(okioBuffer.readByteArray());
-        }
-
-        // customize the request builder (external customizer can change the request url for example)
-        runConsumers(this.requestCustomizers, requestBuilder);
-
-        return requestBuilder.build();
-    }
-
-    /**
-     * Safely runs specified consumer.
-     *
-     * @param consumer consumer (may be null)
-     * @param argument consumer argument
-     * @param <T>      consumer type.
-     */
-    protected static <T> void runConsumer(Consumer<T> consumer, T argument) {
-        try {
-            if (consumer != null) {
-                consumer.accept(argument);
-            }
-        } catch (Exception e) {
-            log.error("Exception while running consumer {}: {}", consumer, e.getMessage(), e);
-        }
-    }
-
-    /**
-     * Safely runs multiple consumers.
-     *
-     * @param consumers collection of consumers (may be null)
-     * @param argument  consumer argument
-     * @param <T>       consumer type.
-     */
-    protected static <T> void runConsumers(Collection<Consumer<T>> consumers, T argument) {
-        if (consumers == null || consumers.isEmpty()) {
-            return;
-        }
-        consumers.forEach(consumer -> runConsumer(consumer, argument));
-    }
-
-    private void throwAlreadyExecuted() {
-        throw new IllegalStateException("This call has already been executed.");
-    }
-}
diff --git a/extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCallFactory.java b/extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCallFactory.java
deleted file mode 100644
index 0376628b7..000000000
--- a/extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCallFactory.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (c) 2017 AsyncHttpClient Project. All rights reserved.
- *
- * This program is licensed to you under the Apache License Version 2.0,
- * and you may not use this file except in compliance with the Apache License Version 2.0.
- * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the Apache License Version 2.0 is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
- */
-package org.asynchttpclient.extras.retrofit;
-
-import lombok.Builder;
-import lombok.NonNull;
-import lombok.Singular;
-import lombok.Value;
-import lombok.val;
-import okhttp3.Call;
-import okhttp3.Request;
-import org.asynchttpclient.AsyncHttpClient;
-
-import java.util.List;
-import java.util.function.Consumer;
-
-import static org.asynchttpclient.extras.retrofit.AsyncHttpClientCall.runConsumers;
-
-/**
- * {@link AsyncHttpClient} implementation of Retrofit2 {@link Call.Factory}
- */
-@Value
-@Builder(toBuilder = true)
-public class AsyncHttpClientCallFactory implements Call.Factory {
-    /**
-     * {@link AsyncHttpClient} in use.
-     */
-    @NonNull
-    AsyncHttpClient httpClient;
-
-    /**
-     * List of {@link Call} builder customizers that are invoked just before creating it.
-     */
-    @Singular("callCustomizer")
-    List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> callCustomizers;
-
-    @Override
-    public Call newCall(Request request) {
-        val callBuilder = AsyncHttpClientCall.builder()
-                .httpClient(httpClient)
-                .request(request);
-
-        // customize builder before creating a call
-        runConsumers(this.callCustomizers, callBuilder);
-
-        // create a call
-        return callBuilder.build();
-    }
-}
diff --git a/pom.xml b/pom.xml
index 13f939ebd..7cfe4e420 100644
--- a/pom.xml
+++ b/pom.xml
@@ -381,7 +381,7 @@
 		<surefire.redirectTestOutputToFile>true</surefire.redirectTestOutputToFile>
 		<source.property>1.8</source.property>
 		<target.property>1.8</target.property>
-		<netty.version>4.1.16.Final</netty.version>
+		<netty.version>4.1.25.Final</netty.version>
 		<slf4j.version>1.7.25</slf4j.version>
 		<reactive-streams.version>1.0.0</reactive-streams.version>
 		<netty-reactive-streams.version>2.0.0</netty-reactive-streams.version>
