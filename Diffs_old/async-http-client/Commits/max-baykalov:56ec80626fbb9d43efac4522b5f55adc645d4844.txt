diff --git a/client/src/main/java/java/added/CompletableFuture.java b/client/src/main/java/javatest/added/CompletableFuture.java
similarity index 99%
rename from client/src/main/java/java/added/CompletableFuture.java
rename to client/src/main/java/javatest/added/CompletableFuture.java
index f4147e80d..6cc4c1a88 100644
--- a/client/src/main/java/java/added/CompletableFuture.java
+++ b/client/src/main/java/javatest/added/CompletableFuture.java
@@ -1,5 +1,8 @@
-package java.added;
+package javatest.added;
 import java.util.function.Supplier;
+
+import sun.misc.Unsafe;
+
 import java.util.function.Consumer;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
@@ -10,6 +13,7 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.ForkJoinTask;
+import java.lang.reflect.Field;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.ExecutionException;
@@ -2338,7 +2342,7 @@ public String toString() {
     static {
         try {
             final sun.misc.Unsafe u;
-            UNSAFE = u = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = u = getUnsafe(); //sun.misc.Unsafe.getUnsafe();
             Class<?> k = CompletableFuture.class;
             RESULT = u.objectFieldOffset(k.getDeclaredField("result"));
             STACK = u.objectFieldOffset(k.getDeclaredField("stack"));
@@ -2348,4 +2352,20 @@ public String toString() {
             throw new Error(x);
         }
     }
+    
+    @SuppressWarnings("restriction")
+    private static Unsafe getUnsafe() {
+        try {
+
+            Field singleoneInstanceField = Unsafe.class.getDeclaredField("theUnsafe");
+            singleoneInstanceField.setAccessible(true);
+            return (Unsafe) singleoneInstanceField.get(null);
+
+        } catch (IllegalArgumentException e) {
+        } catch (SecurityException e) {
+        } catch (NoSuchFieldException e) {
+        } catch (IllegalAccessException e) {
+        }
+		return null;
+    }
 }
diff --git a/client/src/main/java/java/added/CompletionException.java b/client/src/main/java/javatest/added/CompletionException.java
similarity index 98%
rename from client/src/main/java/java/added/CompletionException.java
rename to client/src/main/java/javatest/added/CompletionException.java
index b80476531..147da2dfd 100644
--- a/client/src/main/java/java/added/CompletionException.java
+++ b/client/src/main/java/javatest/added/CompletionException.java
@@ -33,7 +33,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package java.added;
+package javatest.added;
 
 /**
  * Exception thrown when an error or other exception is encountered
diff --git a/client/src/main/java/java/added/CompletionStage.java b/client/src/main/java/javatest/added/CompletionStage.java
similarity index 99%
rename from client/src/main/java/java/added/CompletionStage.java
rename to client/src/main/java/javatest/added/CompletionStage.java
index 8dcd270de..56d0d8674 100644
--- a/client/src/main/java/java/added/CompletionStage.java
+++ b/client/src/main/java/javatest/added/CompletionStage.java
@@ -1,4 +1,4 @@
-package java.added;
+package javatest.added;
 
 import java.util.function.Consumer;
 import java.util.function.BiConsumer;
diff --git a/client/src/main/java/java/added/Predicate.java b/client/src/main/java/javatest/added/Predicate.java
similarity index 99%
rename from client/src/main/java/java/added/Predicate.java
rename to client/src/main/java/javatest/added/Predicate.java
index 7d806f032..0516e7b3a 100644
--- a/client/src/main/java/java/added/Predicate.java
+++ b/client/src/main/java/javatest/added/Predicate.java
@@ -1,4 +1,4 @@
-package java.added;
+package javatest.added;
 
 /**
  * Represents a predicate (boolean-valued function) of one argument.
diff --git a/client/src/main/java/java/added/ThreadLocalRandom.java b/client/src/main/java/javatest/added/ThreadLocalRandom.java
similarity index 98%
rename from client/src/main/java/java/added/ThreadLocalRandom.java
rename to client/src/main/java/javatest/added/ThreadLocalRandom.java
index 89aeac341..322c5ecd9 100644
--- a/client/src/main/java/java/added/ThreadLocalRandom.java
+++ b/client/src/main/java/javatest/added/ThreadLocalRandom.java
@@ -1,6 +1,7 @@
-package java.added;
+package javatest.added;
 
 import java.io.ObjectStreamField;
+import java.lang.reflect.Field;
 import java.util.Random;
 import java.util.Spliterator;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -13,6 +14,8 @@
 import java.util.stream.LongStream;
 import java.util.stream.StreamSupport;
 
+import sun.misc.Unsafe;
+
 /**
  * A random number generator isolated to the current thread.  Like the
  * global {@link java.util.Random} generator used by the {@link
@@ -1022,7 +1025,7 @@ private Object readResolve() {
     private static final long SECONDARY;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = getUnsafe(); //sun.misc.Unsafe.getUnsafe();
             Class<?> tk = Thread.class;
             SEED = UNSAFE.objectFieldOffset
                 (tk.getDeclaredField("threadLocalRandomSeed"));
@@ -1034,4 +1037,20 @@ private Object readResolve() {
             throw new Error(e);
         }
     }
+    
+    @SuppressWarnings("restriction")
+    private static Unsafe getUnsafe() {
+        try {
+
+            Field singleoneInstanceField = Unsafe.class.getDeclaredField("theUnsafe");
+            singleoneInstanceField.setAccessible(true);
+            return (Unsafe) singleoneInstanceField.get(null);
+
+        } catch (IllegalArgumentException e) {
+        } catch (SecurityException e) {
+        } catch (NoSuchFieldException e) {
+        } catch (IllegalAccessException e) {
+        }
+		return null;
+    }
 }
diff --git a/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java b/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
index 90014fcd0..e2c6da22d 100755
--- a/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
+++ b/client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
@@ -280,5 +280,5 @@
      */
     AsyncHttpClientConfig getConfig();
 
-	void flushChannelPoolPartitions(java.added.Predicate<Object> predicate);
+	void flushChannelPoolPartitions(javatest.added.Predicate<Object> predicate);
 }
diff --git a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
index d87fd7972..642139765 100644
--- a/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
+++ b/client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
@@ -20,8 +20,8 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.util.HashedWheelTimer;
 import io.netty.util.Timer;
+import javatest.added.Predicate;
 
-import java.added.Predicate;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.asynchttpclient.channel.ChannelPool;
diff --git a/client/src/main/java/org/asynchttpclient/ListenableFuture.java b/client/src/main/java/org/asynchttpclient/ListenableFuture.java
index c65cfaf61..9c498c3bf 100755
--- a/client/src/main/java/org/asynchttpclient/ListenableFuture.java
+++ b/client/src/main/java/org/asynchttpclient/ListenableFuture.java
@@ -30,14 +30,15 @@
  */
 package org.asynchttpclient;
 
-import java.added.CompletableFuture;
-
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
-import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import javatest.added.CompletableFuture;
+
 /**
  * Extended {@link Future}
  *
@@ -80,8 +81,9 @@
      * @param exec     the executor to run the listener in.
      * @return this Future
      */
-    ListenableFuture<V> addListener(Runnable listener, Executor exec);
+    public ListenableFuture<V> addListener(Runnable listener, Executor exec);
 
+    public CompletableFuture<V> toCompletableFuture();
     
     class CompletedFailure<T> implements ListenableFuture<T>{
 
@@ -142,10 +144,107 @@ public void touch() {
             return this;
         }
         
+        @Override
         public CompletableFuture<T> toCompletableFuture() {
             CompletableFuture<T> future = new CompletableFuture<>();
             future.completeExceptionally(e);
             return future;
         }
+
+		@Override
+		public boolean isSuccess() {
+			// TODO Auto-generated method stub
+			return false;
+		}
+
+		@Override
+		public boolean isCancellable() {
+			// TODO Auto-generated method stub
+			return false;
+		}
+
+		@Override
+		public Throwable cause() {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> addListener(GenericFutureListener<? extends Future<? super T>> listener) {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> addListeners(GenericFutureListener<? extends Future<? super T>>... listeners) {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> removeListener(GenericFutureListener<? extends Future<? super T>> listener) {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> removeListeners(GenericFutureListener<? extends Future<? super T>>... listeners) {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> sync() throws InterruptedException {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> syncUninterruptibly() {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> await() throws InterruptedException {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public Future<T> awaitUninterruptibly() {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public boolean await(long timeout, TimeUnit unit) throws InterruptedException {
+			// TODO Auto-generated method stub
+			return false;
+		}
+
+		@Override
+		public boolean await(long timeoutMillis) throws InterruptedException {
+			// TODO Auto-generated method stub
+			return false;
+		}
+
+		@Override
+		public boolean awaitUninterruptibly(long timeout, TimeUnit unit) {
+			// TODO Auto-generated method stub
+			return false;
+		}
+
+		@Override
+		public boolean awaitUninterruptibly(long timeoutMillis) {
+			// TODO Auto-generated method stub
+			return false;
+		}
+
+		@Override
+		public T getNow() {
+			// TODO Auto-generated method stub
+			return null;
+		}
     }
 }
diff --git a/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java b/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java
index 06ac828ac..e1343d76b 100755
--- a/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/channel/ChannelPool.java
@@ -64,5 +64,5 @@
      */
     Map<String, Long> getIdleChannelCountPerHost();
 
-	void flushPartitions(java.added.Predicate<Object> predicate);
+	void flushPartitions(javatest.added.Predicate<Object> predicate);
 }
diff --git a/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java b/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java
index 6b10cb9d3..1c092c513 100644
--- a/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/channel/NoopChannelPool.java
@@ -14,8 +14,8 @@
 package org.asynchttpclient.channel;
 
 import io.netty.channel.Channel;
+import javatest.added.Predicate;
 
-import java.added.Predicate;
 import java.util.Collections;
 import java.util.Map;
 
diff --git a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
index d689e25c9..52f09c7a9 100755
--- a/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
+++ b/client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
@@ -15,13 +15,14 @@
 
 import static org.asynchttpclient.util.DateUtils.unpreciseMillisTime;
 import io.netty.channel.Channel;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import javatest.added.CompletableFuture;
 
-import java.added.CompletableFuture;
 import java.io.IOException;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
-import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
@@ -317,7 +318,7 @@ public void accept(V r, Throwable v) {
     	return this;
     }
 
-
+    @Override
     public CompletableFuture<V> toCompletableFuture() {
         return future;
     }
@@ -565,4 +566,100 @@ public String toString() {
                 ",\n\ttouch=" + touch + //
                 '}';
     }
+
+	@Override
+	public boolean isSuccess() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public boolean isCancellable() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public Throwable cause() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> addListener(GenericFutureListener<? extends Future<? super V>> listener) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> addListeners(GenericFutureListener<? extends Future<? super V>>... listeners) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> removeListener(GenericFutureListener<? extends Future<? super V>> listener) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> removeListeners(GenericFutureListener<? extends Future<? super V>>... listeners) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> sync() throws InterruptedException {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> syncUninterruptibly() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> await() throws InterruptedException {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Future<V> awaitUninterruptibly() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public boolean await(long timeout, TimeUnit unit) throws InterruptedException {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public boolean await(long timeoutMillis) throws InterruptedException {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public boolean awaitUninterruptibly(long timeout, TimeUnit unit) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public boolean awaitUninterruptibly(long timeoutMillis) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public V getNow() {
+		// TODO Auto-generated method stub
+		return null;
+	}
 }
diff --git a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
index f6f28a4b4..dccbe5d50 100755
--- a/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
+++ b/client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
@@ -16,7 +16,6 @@
 import static org.asynchttpclient.util.Assertions.assertNotNull;
 import static org.asynchttpclient.util.DateUtils.unpreciseMillisTime;
 
-import java.added.Predicate;
 import java.net.InetSocketAddress;
 import java.util.*;
 import java.util.Map.Entry;
@@ -36,6 +35,7 @@
 import io.netty.util.Timeout;
 import io.netty.util.Timer;
 import io.netty.util.TimerTask;
+import javatest.added.Predicate;
 
 /**
  * A simple implementation of {@link ChannelPool} based on a {@link java.util.concurrent.ConcurrentHashMap}
diff --git a/client/src/test/java/org/asynchttpclient/ClientStatsTest.java b/client/src/test/java/org/asynchttpclient/ClientStatsTest.java
index 48993397f..10c04d10d 100644
--- a/client/src/test/java/org/asynchttpclient/ClientStatsTest.java
+++ b/client/src/test/java/org/asynchttpclient/ClientStatsTest.java
@@ -31,7 +31,7 @@
 
     private final static String hostname = "localhost";
 
-    //@Test(groups = "standalone")
+    @Test(groups = "standalone")
     public void testClientStatus() throws Throwable {
         try (final AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(true).setPooledConnectionIdleTimeout(5000))) {
             final String url = getTargetUrl();
@@ -59,7 +59,7 @@ public void testClientStatus() throws Throwable {
             assertEquals(activeStats.getTotalConnectionCount(), 5);
             assertEquals(activeStats.getStatsPerHost().get(hostname).getHostConnectionCount(), 5);
 
-            //futures.forEach(future -> future.toCompletableFuture().join());
+            futures.forEach(future -> future.toCompletableFuture().join());
 
             Thread.sleep(1000);
 
@@ -88,7 +88,7 @@ public void testClientStatus() throws Throwable {
             assertEquals(activeCachedStats.getTotalConnectionCount(), 5);
             assertEquals(activeCachedStats.getStatsPerHost().get(hostname).getHostConnectionCount(), 5);
 
-            //repeatedFutures.forEach(future -> future.toCompletableFuture().join());
+            repeatedFutures.forEach(future -> future.toCompletableFuture().join());
 
             Thread.sleep(1000);
 
@@ -112,7 +112,7 @@ public void testClientStatus() throws Throwable {
         }
     }
 
-    //@Test(groups = "standalone")
+    @Test(groups = "standalone")
     public void testClientStatusNoKeepalive() throws Throwable {
         try (final AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(false))) {
             final String url = getTargetUrl();
@@ -140,7 +140,7 @@ public void testClientStatusNoKeepalive() throws Throwable {
             assertEquals(activeStats.getTotalConnectionCount(), 5);
             assertEquals(activeStats.getStatsPerHost().get(hostname).getHostConnectionCount(), 5);
 
-            //futures.forEach(future -> future.toCompletableFuture().join());
+            futures.forEach(future -> future.toCompletableFuture().join());
 
             Thread.sleep(1000);
 
@@ -169,7 +169,7 @@ public void testClientStatusNoKeepalive() throws Throwable {
             assertEquals(activeCachedStats.getTotalConnectionCount(), 3);
             assertEquals(activeCachedStats.getStatsPerHost().get(hostname).getHostConnectionCount(), 3);
 
-            //repeatedFutures.forEach(future -> future.toCompletableFuture().join());
+            repeatedFutures.forEach(future -> future.toCompletableFuture().join());
 
             Thread.sleep(1000);
 
