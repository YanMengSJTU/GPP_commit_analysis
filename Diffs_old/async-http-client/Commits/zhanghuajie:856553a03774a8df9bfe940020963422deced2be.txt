diff --git a/example/src/main/java/org/asynchttpclient/example/completable/AsyncHttpClientTest.java b/example/src/main/java/org/asynchttpclient/example/completable/AsyncHttpClientTest.java
index cc746dfec..288cd9690 100644
--- a/example/src/main/java/org/asynchttpclient/example/completable/AsyncHttpClientTest.java
+++ b/example/src/main/java/org/asynchttpclient/example/completable/AsyncHttpClientTest.java
@@ -2,6 +2,8 @@
 
 import org.asynchttpclient.*;
 
+import java.util.LinkedList;
+import java.util.List;
 import java.util.concurrent.Future;
 
 /**
@@ -12,14 +14,27 @@
     public final static String TESTURL="https://kyfw.12306.cn/otn/lcxxcx/query?purpose_codes=ADULT&queryDate=2016-11-30&from_station=BXP&to_station=EDP";
     public static void main(String[] args) throws Exception {
         AsyncHttpClientConfig cf = new DefaultAsyncHttpClientConfig.Builder()
-                .setConnectionTtl(2*1000)
+                .setConnectionTtl(2 * 1000)
                 .setFollowRedirect(false)
+                .setRequestTimeout(2 * 1000)
                 .setAcceptAnyCertificate(true)
+                .setMaxConnections(10000)
+                .setMaxConnectionsPerHost(10)
+//                .setProxyServer(new ProxyServer("127.0.0.1", 8080))
                 .build();
         AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(cf);
-        Future<Response> f = asyncHttpClient.prepareGet(TESTURL).execute();
-        Response r = f.get();
-        System.out.print(r.getResponseBody());
+        List<Future<Response>> futurelist = new LinkedList<>();
+        for (int i = 0; i <100000 ; i++) {
+            Future<Response> f = asyncHttpClient.prepareGet(TESTURL).execute(new AsyncCompletionHandler<Response>() {
+                @Override
+                public Response onCompleted(Response response) throws Exception {
+                    return null;
+                }
+            });
+            futurelist.add(f);
+        }
+//        Response r = f.get();
+//        System.out.print(r.getResponseBody());
 
     }
 }
diff --git a/example/src/main/java/org/asynchttpclient/example/completable/MyRequestFilter.java b/example/src/main/java/org/asynchttpclient/example/completable/MyRequestFilter.java
new file mode 100644
index 000000000..77d4652c0
--- /dev/null
+++ b/example/src/main/java/org/asynchttpclient/example/completable/MyRequestFilter.java
@@ -0,0 +1,15 @@
+package org.asynchttpclient.example.completable;
+
+import org.asynchttpclient.filter.FilterContext;
+import org.asynchttpclient.filter.FilterException;
+import org.asynchttpclient.filter.RequestFilter;
+
+/**
+ * Created by zhanghuajie on 16/10/14.
+ */
+public class MyRequestFilter implements RequestFilter{
+    @Override
+    public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+        return null;
+    }
+}
diff --git a/example/src/main/java/org/asynchttpclient/example/completable/MyResponseFilter.java b/example/src/main/java/org/asynchttpclient/example/completable/MyResponseFilter.java
new file mode 100644
index 000000000..b30e8aec5
--- /dev/null
+++ b/example/src/main/java/org/asynchttpclient/example/completable/MyResponseFilter.java
@@ -0,0 +1,21 @@
+package org.asynchttpclient.example.completable;
+
+import org.asynchttpclient.filter.FilterContext;
+import org.asynchttpclient.filter.FilterException;
+import org.asynchttpclient.filter.ResponseFilter;
+import org.asynchttpclient.util.HttpConstants;
+
+/**
+ * Created by zhanghuajie on 16/10/14.
+ */
+public class MyResponseFilter implements ResponseFilter {
+    @Override
+    public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
+        if (ctx.getResponseStatus().getStatusCode() != HttpConstants.ResponseStatusCodes.OK_200) {
+            ctx.getRequest().getUrl();
+
+        }
+
+        return ctx;
+    }
+}
