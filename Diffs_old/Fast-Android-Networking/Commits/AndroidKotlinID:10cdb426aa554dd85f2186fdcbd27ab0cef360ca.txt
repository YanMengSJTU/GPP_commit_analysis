diff --git a/.travis.yml b/.travis.yml
index 0525d85..972ee06 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -14,18 +14,25 @@ env:
 
 android:
   components:
+    - tools
+    - platform-tools
     - build-tools-23.0.3
+    - android-24
     - android-23
-    - extra
-    - addon
-    - sys-img-armeabi-v7a-android-23
+    - android-22
+    - extra-google-google_play_services
+    - extra-google-m2repository
+    - extra-android-m2repository
+    - sys-img-armeabi-v7a-android-22    
 
 # Emulator Management: Create, Start and Wait
 before_script:
-  - echo no | android create avd --force -n test -t android-23 --abi armeabi-v7a
-  - emulator -avd test -no-skin -no-audio -no-window &
+  - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a -c 32M
+  - emulator -avd test -no-audio -no-window &
   - android-wait-for-emulator
+  - sleep 180
+  - adb devices
   - adb shell input keyevent 82 &
   
 script:
-  - ./gradlew connectedAndroidTest
+  - ./gradlew connectedAndroidTest
\ No newline at end of file
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2030425..eac3663 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,19 @@
 Change Log
 ==========
 
+Version 1.0.1 *(2017-12-20)*
+----------------------------
+
+ * New: Add support for `Single`, `Completable`, `Flowable`, `Maybe` Observable
+ * New: Add support for OPTIONS request
+ * Bump OkHttp Version to 3.9.1
+ * Bump other dependencies
+ * New: Add support for specifying request method dynamically
+ * New: Add API to check isRequestRunning
+ * Fix: Add more than one values for one key in header and query
+ * Merge pull requests
+
+
 Version 1.0.0 *(2017-03-19)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 3b0651d..c0612b1 100644
--- a/README.md
+++ b/README.md
@@ -55,7 +55,7 @@ Fast Android Networking Library supports Android 2.3 (Gingerbread) and later.
 
 Add this in your build.gradle
 ```groovy
-compile 'com.amitshekhar.android:android-networking:1.0.0'
+compile 'com.amitshekhar.android:android-networking:1.0.1'
 ```
 Do not forget to add internet permission in manifest if already not present
 ```xml
@@ -75,7 +75,7 @@ AndroidNetworking.initialize(getApplicationContext(),okHttpClient);
 ```
 Using the Fast Android Networking with Jackson Parser
 ```groovy
-compile 'com.amitshekhar.android:jackson-android-networking:1.0.0'
+compile 'com.amitshekhar.android:jackson-android-networking:1.0.1'
 ```
 ```java
 // Then set the JacksonParserFactory like below
diff --git a/android-networking/build.gradle b/android-networking/build.gradle
index ae9acb8..e6a08f9 100644
--- a/android-networking/build.gradle
+++ b/android-networking/build.gradle
@@ -18,12 +18,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
         consumerProguardFiles 'proguard-rules.pro'
@@ -34,13 +34,17 @@ android {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
+    lintOptions {
+        abortOnError false
+    }
 }
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.6.0'
-    compile 'com.squareup.okhttp3:okhttp:3.6.0'
-    compile 'com.google.code.gson:gson:2.8.0'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
+    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttp3Version"
+    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
 }
 //apply from: 'upload.gradle'
diff --git a/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java b/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
index 290bfc6..84c50bf 100644
--- a/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
+++ b/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
@@ -24,8 +24,8 @@
 import com.androidnetworking.common.ANRequest;
 import com.androidnetworking.common.ConnectionClassManager;
 import com.androidnetworking.common.ConnectionQuality;
-import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
 import com.androidnetworking.core.Core;
+import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
 import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
 import com.androidnetworking.interfaces.Parser;
 import com.androidnetworking.internal.ANImageLoader;
@@ -131,6 +131,16 @@ public static void removeConnectionQualityChangeListener() {
         return new ANRequest.HeadRequestBuilder(url);
     }
 
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public static ANRequest.OptionsRequestBuilder options(String url) {
+        return new ANRequest.OptionsRequestBuilder(url);
+    }
+
     /**
      * Method to make POST request
      *
@@ -193,6 +203,17 @@ public static void removeConnectionQualityChangeListener() {
         return new ANRequest.MultiPartBuilder(url);
     }
 
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public static ANRequest.DynamicRequestBuilder request(String url, int method) {
+        return new ANRequest.DynamicRequestBuilder(url, method);
+    }
+
     /**
      * Method to cancel requests with the given tag
      *
@@ -299,6 +320,16 @@ public static void setParserFactory(Parser.Factory parserFactory) {
         ParseUtil.setParserFactory(parserFactory);
     }
 
+    /**
+     * Method to find if the request is running or not
+     *
+     * @param tag The tag with which request running status is to be checked
+     * @return The request is running or not
+     */
+    public static boolean isRequestRunning(Object tag) {
+        return ANRequestQueue.getInstance().isRequestRunning(tag);
+    }
+
     /**
      * Shuts AndroidNetworking down
      */
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java b/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
index cafda96..89d36aa 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
@@ -28,9 +28,9 @@
     public static final String RESPONSE_FROM_SERVER_ERROR = "responseFromServerError";
     public static final String REQUEST_CANCELLED_ERROR = "requestCancelledError";
     public static final String PARSE_ERROR = "parseError";
-    public static final String NETWORK_ON_MAIN_THREAD_ERROR = "networkOnMainThreadError";
     public static final String PREFETCH = "prefetch";
     public static final String FAST_ANDROID_NETWORKING = "FastAndroidNetworking";
     public static final String USER_AGENT = "User-Agent";
     public static final String SUCCESS = "success";
+    public static final String OPTIONS = "OPTIONS";
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
index aa30a63..ab75617 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
@@ -50,9 +50,11 @@
 
 import java.io.File;
 import java.lang.reflect.Type;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
@@ -84,11 +86,11 @@
     private int sequenceNumber;
     private Object mTag;
     private ResponseType mResponseType;
-    private HashMap<String, String> mHeadersMap = new HashMap<>();
+    private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
     private HashMap<String, String> mBodyParameterMap = new HashMap<>();
     private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
     private HashMap<String, String> mMultiPartParameterMap = new HashMap<>();
-    private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+    private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
     private HashMap<String, String> mPathParameterMap = new HashMap<>();
     private HashMap<String, File> mMultiPartFileMap = new HashMap<>();
     private String mDirPath;
@@ -109,6 +111,7 @@
     private int mProgress;
     private boolean isCancelled;
     private boolean isDelivered;
+    private boolean isRunning;
     private int mPercentageThresholdForCancelling = 0;
     private JSONArrayRequestListener mJSONArrayRequestListener;
     private JSONObjectRequestListener mJSONObjectRequestListener;
@@ -405,8 +408,17 @@ public String getUrl() {
             tempUrl = tempUrl.replace("{" + entry.getKey() + "}", String.valueOf(entry.getValue()));
         }
         HttpUrl.Builder urlBuilder = HttpUrl.parse(tempUrl).newBuilder();
-        for (HashMap.Entry<String, String> entry : mQueryParameterMap.entrySet()) {
-            urlBuilder.addQueryParameter(entry.getKey(), entry.getValue());
+        if (mQueryParameterMap != null) {
+            Set<Map.Entry<String, List<String>>> entries = mQueryParameterMap.entrySet();
+            for (Map.Entry<String, List<String>> entry : entries) {
+                String name = entry.getKey();
+                List<String> list = entry.getValue();
+                if (list != null) {
+                    for (String value : list) {
+                        urlBuilder.addQueryParameter(name, value);
+                    }
+                }
+            }
         }
         return urlBuilder.build().toString();
     }
@@ -537,6 +549,7 @@ public void cancel(boolean forceCancel) {
             if (forceCancel || mPercentageThresholdForCancelling == 0
                     || mProgress < mPercentageThresholdForCancelling) {
                 isCancelled = true;
+                isRunning = false;
                 if (call != null) {
                     call.cancel();
                 }
@@ -556,6 +569,14 @@ public boolean isCanceled() {
         return isCancelled;
     }
 
+    public boolean isRunning() {
+        return isRunning;
+    }
+
+    public void setRunning(boolean running) {
+        isRunning = running;
+    }
+
     public Call getCall() {
         return call;
     }
@@ -854,8 +875,17 @@ public RequestBody getMultiPartRequestBody() {
     public Headers getHeaders() {
         Headers.Builder builder = new Headers.Builder();
         try {
-            for (HashMap.Entry<String, String> entry : mHeadersMap.entrySet()) {
-                builder.add(entry.getKey(), entry.getValue());
+            if (mHeadersMap != null) {
+                Set<Map.Entry<String, List<String>>> entries = mHeadersMap.entrySet();
+                for (Map.Entry<String, List<String>> entry : entries) {
+                    String name = entry.getKey();
+                    List<String> list = entry.getValue();
+                    if (list != null) {
+                        for (String value : list) {
+                            builder.add(name, value);
+                        }
+                    }
+                }
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -870,6 +900,13 @@ public HeadRequestBuilder(String url) {
         }
     }
 
+    public static class OptionsRequestBuilder extends GetRequestBuilder {
+
+        public OptionsRequestBuilder(String url) {
+            super(url, Method.OPTIONS);
+        }
+    }
+
     public static class GetRequestBuilder<T extends GetRequestBuilder> implements RequestBuilder {
         private Priority mPriority = Priority.MEDIUM;
         private int mMethod = Method.GET;
@@ -880,8 +917,8 @@ public HeadRequestBuilder(String url) {
         private int mMaxWidth;
         private int mMaxHeight;
         private ImageView.ScaleType mScaleType;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
@@ -912,14 +949,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -927,7 +973,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -960,14 +1006,23 @@ public T addPathParameter(Object object) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -975,7 +1030,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1081,6 +1136,13 @@ public PatchRequestBuilder(String url) {
         }
     }
 
+    public static class DynamicRequestBuilder extends PostRequestBuilder {
+
+        public DynamicRequestBuilder(String url, int method) {
+            super(url, method);
+        }
+    }
+
     public static class PostRequestBuilder<T extends PostRequestBuilder> implements RequestBuilder {
 
         private Priority mPriority = Priority.MEDIUM;
@@ -1091,10 +1153,10 @@ public PatchRequestBuilder(String url) {
         private String mStringBody = null;
         private byte[] mByte = null;
         private File mFile = null;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
         private HashMap<String, String> mBodyParameterMap = new HashMap<>();
         private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
@@ -1126,14 +1188,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1141,7 +1212,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1174,14 +1245,23 @@ public T addPathParameter(Object object) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1189,7 +1269,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1339,8 +1419,8 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private String mDirPath;
         private String mFileName;
@@ -1370,14 +1450,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1385,7 +1474,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1394,14 +1483,23 @@ public T addHeaders(Object object) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1409,7 +1507,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1503,9 +1601,9 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
         private HashMap<String, String> mMultiPartParameterMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private HashMap<String, File> mMultiPartFileMap = new HashMap<>();
         private CacheControl mCacheControl;
@@ -1533,14 +1631,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1548,7 +1655,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1581,14 +1688,23 @@ public T addPathParameter(Object object) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1596,7 +1712,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
diff --git a/android-networking/src/main/java/com/androidnetworking/common/Method.java b/android-networking/src/main/java/com/androidnetworking/common/Method.java
index 1e05a17..65da1b5 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/Method.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/Method.java
@@ -27,4 +27,5 @@
     int DELETE = 3;
     int HEAD = 4;
     int PATCH = 5;
+    int OPTIONS = 6;
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java b/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
index b2cd8a6..ed7ff76 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
@@ -21,9 +21,10 @@
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.core.Core;
 
-import java.util.HashSet;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -31,8 +32,8 @@
  */
 public class ANRequestQueue {
 
-    private final static String TAG = ANRequestQueue.class.getSimpleName();
-    private final Set<ANRequest> mCurrentRequests = new HashSet<>();
+    private final Set<ANRequest> mCurrentRequests =
+            Collections.newSetFromMap(new ConcurrentHashMap<ANRequest, Boolean>());
     private AtomicInteger mSequenceGenerator = new AtomicInteger();
     private static ANRequestQueue sInstance = null;
 
@@ -55,40 +56,35 @@ public static ANRequestQueue getInstance() {
         boolean apply(ANRequest request);
     }
 
-
     private void cancel(RequestFilter filter, boolean forceCancel) {
-        synchronized (mCurrentRequests) {
-            try {
-                for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
-                    ANRequest request = iterator.next();
-                    if (filter.apply(request)) {
-                        request.cancel(forceCancel);
-                        if (request.isCanceled()) {
-                            request.destroy();
-                            iterator.remove();
-                        }
+        try {
+            for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
+                ANRequest request = iterator.next();
+                if (filter.apply(request)) {
+                    request.cancel(forceCancel);
+                    if (request.isCanceled()) {
+                        request.destroy();
+                        iterator.remove();
                     }
                 }
-            } catch (Exception e) {
-                e.printStackTrace();
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
     public void cancelAll(boolean forceCancel) {
-        synchronized (mCurrentRequests) {
-            try {
-                for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
-                    ANRequest request = iterator.next();
-                    request.cancel(forceCancel);
-                    if (request.isCanceled()) {
-                        request.destroy();
-                        iterator.remove();
-                    }
+        try {
+            for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
+                ANRequest request = iterator.next();
+                request.cancel(forceCancel);
+                if (request.isCanceled()) {
+                    request.destroy();
+                    iterator.remove();
                 }
-            } catch (Exception e) {
-                e.printStackTrace();
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
@@ -100,12 +96,7 @@ public void cancelRequestWithGivenTag(final Object tag, final boolean forceCance
             cancel(new RequestFilter() {
                 @Override
                 public boolean apply(ANRequest request) {
-                    if (request.getTag() instanceof String && tag instanceof String) {
-                        final String tempRequestTag = (String) request.getTag();
-                        final String tempTag = (String) tag;
-                        return tempRequestTag.equals(tempTag);
-                    }
-                    return request.getTag().equals(tag);
+                    return isRequestWithTheGivenTag(request, tag);
                 }
             }, forceCancel);
         } catch (Exception e) {
@@ -118,12 +109,10 @@ public int getSequenceNumber() {
     }
 
     public ANRequest addRequest(ANRequest request) {
-        synchronized (mCurrentRequests) {
-            try {
-                mCurrentRequests.add(request);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
+        try {
+            mCurrentRequests.add(request);
+        } catch (Exception e) {
+            e.printStackTrace();
         }
         try {
             request.setSequenceNumber(getSequenceNumber());
@@ -145,12 +134,36 @@ public ANRequest addRequest(ANRequest request) {
     }
 
     public void finish(ANRequest request) {
-        synchronized (mCurrentRequests) {
-            try {
-                mCurrentRequests.remove(request);
-            } catch (Exception e) {
-                e.printStackTrace();
+        try {
+            mCurrentRequests.remove(request);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public boolean isRequestRunning(Object tag) {
+        try {
+            for (ANRequest request : mCurrentRequests) {
+                if (isRequestWithTheGivenTag(request, tag) && request.isRunning()) {
+                    return true;
+                }
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+        return false;
     }
+
+    private boolean isRequestWithTheGivenTag(ANRequest request, Object tag) {
+        if (request.getTag() == null) {
+            return false;
+        }
+        if (request.getTag() instanceof String && tag instanceof String) {
+            final String tempRequestTag = (String) request.getTag();
+            final String tempTag = (String) tag;
+            return tempRequestTag.equals(tempTag);
+        }
+        return request.getTag().equals(tag);
+    }
+
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java b/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
index 5951ef6..3e1e2a9 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
@@ -30,20 +30,20 @@
  */
 public class DownloadProgressHandler extends Handler {
 
-    private final DownloadProgressListener mDownloadProgressListenerWeakRef;
+    private final DownloadProgressListener mDownloadProgressListener;
 
     public DownloadProgressHandler(DownloadProgressListener downloadProgressListener) {
         super(Looper.getMainLooper());
-        mDownloadProgressListenerWeakRef = downloadProgressListener;
+        mDownloadProgressListener = downloadProgressListener;
     }
 
     @Override
     public void handleMessage(Message msg) {
         switch (msg.what) {
             case ANConstants.UPDATE:
-                if (mDownloadProgressListenerWeakRef != null) {
+                if (mDownloadProgressListener != null) {
                     final Progress progress = (Progress) msg.obj;
-                    mDownloadProgressListenerWeakRef.onProgress(progress.currentBytes, progress.totalBytes);
+                    mDownloadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
                 }
                 break;
             default:
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java b/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
index ee7cfb0..43c539b 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
@@ -27,9 +27,9 @@
 import com.androidnetworking.common.ANConstants;
 import com.androidnetworking.common.ANRequest;
 import com.androidnetworking.common.ConnectionClassManager;
+import com.androidnetworking.error.ANError;
 import com.androidnetworking.interceptors.HttpLoggingInterceptor;
 import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
-import com.androidnetworking.error.ANError;
 import com.androidnetworking.utils.Utils;
 
 import java.io.File;
@@ -46,6 +46,7 @@
 import static com.androidnetworking.common.Method.DELETE;
 import static com.androidnetworking.common.Method.GET;
 import static com.androidnetworking.common.Method.HEAD;
+import static com.androidnetworking.common.Method.OPTIONS;
 import static com.androidnetworking.common.Method.PATCH;
 import static com.androidnetworking.common.Method.POST;
 import static com.androidnetworking.common.Method.PUT;
@@ -91,6 +92,10 @@ public static Response performSimpleRequest(ANRequest request) throws ANError {
                     builder = builder.head();
                     break;
                 }
+                case OPTIONS: {
+                    builder = builder.method(ANConstants.OPTIONS, null);
+                    break;
+                }
                 case PATCH: {
                     requestBody = request.getRequestBody();
                     builder = builder.patch(requestBody);
@@ -314,4 +319,4 @@ public static void enableLogging(Level level) {
                 .build();
     }
 
-}
+}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java b/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
index b784b9c..6cb3f73 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
@@ -49,6 +49,7 @@ public InternalRunnable(ANRequest request) {
 
     @Override
     public void run() {
+        request.setRunning(true);
         switch (request.getRequestType()) {
             case SIMPLE:
                 executeSimpleRequest();
@@ -60,6 +61,7 @@ public void run() {
                 executeUploadRequest();
                 break;
         }
+        request.setRunning(false);
     }
 
     private void executeSimpleRequest() {
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java b/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
index 7e4f61c..76acec4 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
@@ -83,4 +83,4 @@ public void write(Buffer source, long byteCount) throws IOException {
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java b/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
index 9dd8101..132197e 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
@@ -80,7 +80,7 @@ private SynchronousCall() {
         } catch (ANError se) {
             return new ANResponse<>(Utils.getErrorForConnection(new ANError(se)));
         } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         } finally {
             SourceCloseUtil.close(okHttpResponse, request);
         }
@@ -105,7 +105,7 @@ private SynchronousCall() {
         } catch (ANError se) {
             return new ANResponse<>(Utils.getErrorForConnection(new ANError(se)));
         } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         }
     }
 
@@ -135,7 +135,7 @@ private SynchronousCall() {
         } catch (ANError se) {
             return new ANResponse<>(Utils.getErrorForConnection(se));
         } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         } finally {
             SourceCloseUtil.close(okHttpResponse, request);
         }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java b/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
index e19f7f0..f623a5f 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
@@ -30,20 +30,20 @@
  */
 public class UploadProgressHandler extends Handler {
 
-    private final UploadProgressListener mUploadProgressListenerWeakRef;
+    private final UploadProgressListener mUploadProgressListener;
 
     public UploadProgressHandler(UploadProgressListener uploadProgressListener) {
         super(Looper.getMainLooper());
-        mUploadProgressListenerWeakRef = uploadProgressListener;
+        mUploadProgressListener = uploadProgressListener;
     }
 
     @Override
     public void handleMessage(Message msg) {
         switch (msg.what) {
             case ANConstants.UPDATE:
-                if (mUploadProgressListenerWeakRef != null) {
+                if (mUploadProgressListener != null) {
                     final Progress progress = (Progress) msg.obj;
-                    mUploadProgressListenerWeakRef.onProgress(progress.currentBytes, progress.totalBytes);
+                    mUploadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
                 }
                 break;
             default:
diff --git a/android-networking/src/main/java/com/androidnetworking/utils/Utils.java b/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
index 416e978..588cba8 100644
--- a/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
+++ b/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
@@ -20,8 +20,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.os.Build;
-import android.os.NetworkOnMainThreadException;
 import android.widget.ImageView;
 
 import com.androidnetworking.common.ANConstants;
@@ -237,15 +235,4 @@ public static ANError getErrorForParse(ANError error) {
         return error;
     }
 
-    public static ANError getErrorForNetworkOnMainThreadOrConnection(Exception e) {
-        ANError error = new ANError(e);
-        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
-                && e instanceof NetworkOnMainThreadException) {
-            error.setErrorDetail(ANConstants.NETWORK_ON_MAIN_THREAD_ERROR);
-        } else {
-            error.setErrorDetail(ANConstants.CONNECTION_ERROR);
-        }
-        error.setErrorCode(0);
-        return error;
-    }
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java b/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
index bef56a5..3286ddb 100644
--- a/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
+++ b/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
@@ -18,6 +18,7 @@
 package com.androidnetworking.widget;
 
 import android.content.Context;
+import android.support.v7.widget.AppCompatImageView;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.ViewGroup;
@@ -29,7 +30,7 @@
 /**
  * Created by amitshekhar on 23/03/16.
  */
-public class ANImageView extends ImageView {
+public class ANImageView extends AppCompatImageView {
 
     private String mUrl;
 
@@ -67,7 +68,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
-        ScaleType scaleType = getScaleType();
+        ImageView.ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {
diff --git a/android-networking/upload.gradle b/android-networking/upload.gradle
index 7580a50..9ac0a83 100755
--- a/android-networking/upload.gradle
+++ b/android-networking/upload.gradle
@@ -22,7 +22,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.1'
 
 install {
     repositories.mavenInstaller {
diff --git a/app/build.gradle b/app/build.gradle
index 879f2bb..e2a4b59 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -18,13 +18,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
         applicationId "com.networking"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -38,7 +38,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'com.android.support:appcompat-v7:23.2.1'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
     compile project(':android-networking')
 }
diff --git a/app/src/main/java/com/networking/ApiTestActivity.java b/app/src/main/java/com/networking/ApiTestActivity.java
index 509fb59..d48f282 100644
--- a/app/src/main/java/com/networking/ApiTestActivity.java
+++ b/app/src/main/java/com/networking/ApiTestActivity.java
@@ -1107,6 +1107,22 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
         }).start();
     }
 
+    public void checkOptionsRequest(View view) {
+        AndroidNetworking.options("https://api.github.com/square/okhttp/issues")
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        Log.d(TAG, "response : " + response.headers().toString());
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        Utils.logError(TAG, anError);
+                    }
+                });
+    }
+
     public void getCurrentConnectionQuality(View view) {
         Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
     }
diff --git a/app/src/main/java/com/networking/MainActivity.java b/app/src/main/java/com/networking/MainActivity.java
index 15b4881..c5a0bc3 100644
--- a/app/src/main/java/com/networking/MainActivity.java
+++ b/app/src/main/java/com/networking/MainActivity.java
@@ -148,7 +148,9 @@ public void makeRequests(View view) {
     }
 
     public void cancelAllRequests(View view) {
+        Log.d(TAG, "isRequestRunning before cancel : " + AndroidNetworking.isRequestRunning(this));
         AndroidNetworking.cancel(this);
+        Log.d(TAG, "isRequestRunning after cancel : " + AndroidNetworking.isRequestRunning(this));
     }
 
     public void loadImageDirect(View view) {
diff --git a/app/src/main/res/layout/activity_api_test.xml b/app/src/main/res/layout/activity_api_test.xml
index f1d0655..dd4f217 100644
--- a/app/src/main/res/layout/activity_api_test.xml
+++ b/app/src/main/res/layout/activity_api_test.xml
@@ -306,6 +306,19 @@
             android:layout_height="wrap_content"
             android:layout_gravity="center" />
 
+        <Button
+            android:id="@+id/checkOptionsRequest"
+            android:layout_width="match_parent"
+            android:layout_height="48dp"
+            android:layout_margin="8dp"
+            android:onClick="checkOptionsRequest"
+            android:text="checkOptionsRequest" />
+
+        <ProgressBar
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center" />
+
         <Button
             android:id="@+id/getCurrentConnectionQuality"
             android:layout_width="match_parent"
diff --git a/build.gradle b/build.gradle
index a1c0b49..07f8574 100644
--- a/build.gradle
+++ b/build.gradle
@@ -20,9 +20,10 @@
 buildscript {
     repositories {
         jcenter()
+        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.android.tools.build:gradle:2.3.2'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
         // NOTE: Do not place your application dependencies here; they belong
@@ -33,9 +34,30 @@ buildscript {
 allprojects {
     repositories {
         jcenter()
+        google()
     }
 }
 
 task clean(type: Delete) {
     delete rootProject.buildDir
 }
+
+ext {
+    // App tools version
+    compileSdkVersion = 27
+    minSdkVersion = 14
+    targetSdkVersion = 27
+    buildToolsVersion = "26.0.2"
+
+    // App dependencies versions
+    okHttp3Version = "3.9.1"
+    gsonVersion = "2.8.2"
+    jacksonVersion = "2.8.2"
+    rxJavaVersion = "1.3.4"
+    rxJavaAndroidVersion = "1.2.1"
+    rxJava2Version = "2.1.7"
+    rxJava2AndroidVersion = "2.0.1"
+    jUnitVersion = "4.12"
+    mockWebServerVersion = "3.9.1"
+    supportAppCompatVersion = "27.0.2"
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f806ecb..8e69630 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Sep 14 13:42:33 GMT+05:30 2016
+#Wed Dec 06 17:39:39 MST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/jackson-android-networking/build.gradle b/jackson-android-networking/build.gradle
index 0fb8d7b..de749c4 100644
--- a/jackson-android-networking/build.gradle
+++ b/jackson-android-networking/build.gradle
@@ -20,12 +20,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -39,9 +39,9 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.6.0'
-    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.2'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
+    compile "com.fasterxml.jackson.core:jackson-databind:$rootProject.ext.jacksonVersion"
     compile project(':android-networking')
 }
 
diff --git a/jackson-android-networking/jackson-upload.gradle b/jackson-android-networking/jackson-upload.gradle
index e862efe..cf6bc41 100755
--- a/jackson-android-networking/jackson-upload.gradle
+++ b/jackson-android-networking/jackson-upload.gradle
@@ -24,7 +24,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.1'
 
 install {
     repositories.mavenInstaller {
diff --git a/rx-android-networking/build.gradle b/rx-android-networking/build.gradle
index 6a871f8..a8581b9 100644
--- a/rx-android-networking/build.gradle
+++ b/rx-android-networking/build.gradle
@@ -18,12 +18,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -37,9 +37,9 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'io.reactivex:rxandroid:1.2.1'
-    compile 'io.reactivex:rxjava:1.1.6'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    compile "io.reactivex:rxandroid:$rootProject.ext.rxJavaAndroidVersion"
+    compile "io.reactivex:rxjava:$rootProject.ext.rxJavaVersion"
     compile project(':android-networking')
 }
 //apply from: 'rx-upload.gradle'
diff --git a/rx-android-networking/rx-upload.gradle b/rx-android-networking/rx-upload.gradle
index 9c5c0ec..50ba761 100755
--- a/rx-android-networking/rx-upload.gradle
+++ b/rx-android-networking/rx-upload.gradle
@@ -22,7 +22,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.1'
 
 install {
     repositories.mavenInstaller {
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
index 5714fc7..3f9084f 100644
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
+++ b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
@@ -31,7 +31,9 @@
 
 import java.util.List;
 
+import rx.Completable;
 import rx.Observable;
+import rx.Single;
 
 /**
  * Created by amitshekhar on 10/06/16.
@@ -66,6 +68,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<JSONObject> getJSONObjectSingle() {
+        return getJSONObjectObservable().toSingle();
+    }
+
+    public Completable getJSONObjectCompletable() {
+        return getJSONObjectObservable().toCompletable();
+    }
+
     public Observable<JSONArray> getJSONArrayObservable() {
         this.setResponseAs(ResponseType.JSON_ARRAY);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -77,6 +87,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<JSONArray> getJSONArraySingle() {
+        return getJSONArrayObservable().toSingle();
+    }
+
+    public Completable getJSONArrayCompletable() {
+        return getJSONArrayObservable().toCompletable();
+    }
+
     public Observable<Bitmap> getBitmapObservable() {
         this.setResponseAs(ResponseType.BITMAP);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -88,6 +106,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<Bitmap> getBitmapSingle() {
+        return getBitmapObservable().toSingle();
+    }
+
+    public Completable getBitmapCompletable() {
+        return getBitmapObservable().toCompletable();
+    }
+
     public Observable<String> getStringObservable() {
         this.setResponseAs(ResponseType.STRING);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -99,10 +125,26 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<String> getStringSingle() {
+        return getStringObservable().toSingle();
+    }
+
+    public Completable getStringCompletable() {
+        return getStringObservable().toCompletable();
+    }
+
     public Observable<String> getDownloadObservable() {
         return RxInternalNetworking.generateDownloadObservable(this);
     }
 
+    public Single<String> getDownloadSingle() {
+        return getDownloadObservable().toSingle();
+    }
+
+    public Completable getDownloadCompletable() {
+        return getDownloadObservable().toCompletable();
+    }
+
     public <T> Observable<T> getParseObservable(TypeToken<T> typeToken) {
         this.setType(typeToken.getType());
         this.setResponseAs(ResponseType.PARSED);
@@ -115,6 +157,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Single<T> getParseSingle(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).toSingle();
+    }
+
+    public <T> Completable getParseCompletable(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).toCompletable();
+    }
+
     public <T> Observable<T> getObjectObservable(Class<T> objectClass) {
         this.setType(objectClass);
         this.setResponseAs(ResponseType.PARSED);
@@ -127,6 +177,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Single<T> getObjectSingle(Class<T> objectClass) {
+        return getObjectObservable(objectClass).toSingle();
+    }
+
+    public <T> Completable getObjectCompletable(Class<T> objectClass) {
+        return getObjectObservable(objectClass).toCompletable();
+    }
+
     public <T> Observable<List<T>> getObjectListObservable(Class<T> objectClass) {
         this.setType($Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass));
         this.setResponseAs(ResponseType.PARSED);
@@ -139,6 +197,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Single<List<T>> getObjectListSingle(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).toSingle();
+    }
+
+    public <T> Completable getObjectListCompletable(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).toCompletable();
+    }
+
     public static class GetRequestBuilder extends ANRequest.GetRequestBuilder<GetRequestBuilder> {
 
         public GetRequestBuilder(String url) {
@@ -161,6 +227,13 @@ public HeadRequestBuilder(String url) {
         }
     }
 
+    public static class OptionsRequestBuilder extends GetRequestBuilder {
+
+        public OptionsRequestBuilder(String url) {
+            super(url, Method.OPTIONS);
+        }
+    }
+
     public static class PostRequestBuilder extends ANRequest.PostRequestBuilder<PostRequestBuilder> {
 
         public PostRequestBuilder(String url) {
@@ -197,6 +270,13 @@ public PatchRequestBuilder(String url) {
         }
     }
 
+    public static class DynamicRequestBuilder extends PostRequestBuilder {
+
+        public DynamicRequestBuilder(String url, int method) {
+            super(url, method);
+        }
+    }
+
     public static class DownloadBuilder extends ANRequest.DownloadBuilder<DownloadBuilder> {
 
         public DownloadBuilder(String url, String dirPath, String fileName) {
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
index 91aaf45..6286836 100644
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
+++ b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
@@ -54,6 +54,16 @@ private RxAndroidNetworking() {
         return new RxANRequest.HeadRequestBuilder(url);
     }
 
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public static RxANRequest.OptionsRequestBuilder options(String url) {
+        return new RxANRequest.OptionsRequestBuilder(url);
+    }
+
     /**
      * Method to make POST request
      *
@@ -115,4 +125,15 @@ private RxAndroidNetworking() {
     public static RxANRequest.MultiPartBuilder upload(String url) {
         return new RxANRequest.MultiPartBuilder(url);
     }
+
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public static RxANRequest.DynamicRequestBuilder request(String url, int method) {
+        return new RxANRequest.DynamicRequestBuilder(url, method);
+    }
 }
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
index 5bf60d0..1de12cc 100644
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
+++ b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
@@ -48,6 +48,7 @@
 import static com.androidnetworking.common.Method.DELETE;
 import static com.androidnetworking.common.Method.GET;
 import static com.androidnetworking.common.Method.HEAD;
+import static com.androidnetworking.common.Method.OPTIONS;
 import static com.androidnetworking.common.Method.PATCH;
 import static com.androidnetworking.common.Method.POST;
 import static com.androidnetworking.common.Method.PUT;
@@ -87,6 +88,10 @@
                 builder = builder.head();
                 break;
             }
+            case OPTIONS: {
+                builder = builder.method(ANConstants.OPTIONS, null);
+                break;
+            }
             case PATCH: {
                 requestBody = request.getRequestBody();
                 builder = builder.patch(requestBody);
@@ -262,7 +267,7 @@ public void request(long n) {
             } catch (Exception e) {
                 Exceptions.throwIfFatal(e);
                 if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
                 }
             } finally {
                 SourceCloseUtil.close(okHttpResponse, request);
@@ -347,7 +352,7 @@ public void request(long n) {
             } catch (Exception e) {
                 Exceptions.throwIfFatal(e);
                 if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
                 }
             }
         }
@@ -442,7 +447,7 @@ public void request(long n) {
             } catch (Exception e) {
                 Exceptions.throwIfFatal(e);
                 if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
                 }
             } finally {
                 SourceCloseUtil.close(okHttpResponse, request);
diff --git a/rx2-android-networking/build.gradle b/rx2-android-networking/build.gradle
index 6aaf321..24dd65e 100644
--- a/rx2-android-networking/build.gradle
+++ b/rx2-android-networking/build.gradle
@@ -20,12 +20,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -39,10 +39,10 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.6.0'
-    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
-    compile 'io.reactivex.rxjava2:rxjava:2.0.5'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
+    compile "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxJava2AndroidVersion"
+    compile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxJava2Version"
     compile project(':android-networking')
 }
 //apply from: 'rx2-upload.gradle'
diff --git a/rx2-android-networking/rx2-upload.gradle b/rx2-android-networking/rx2-upload.gradle
index 4117e7b..50f6b80 100755
--- a/rx2-android-networking/rx2-upload.gradle
+++ b/rx2-android-networking/rx2-upload.gradle
@@ -24,7 +24,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.1'
 
 install {
     repositories.mavenInstaller {
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
index 0d8c4d8..a19c9f1 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
@@ -33,7 +33,12 @@
 
 import java.util.List;
 
+import io.reactivex.BackpressureStrategy;
+import io.reactivex.Completable;
+import io.reactivex.Flowable;
+import io.reactivex.Maybe;
 import io.reactivex.Observable;
+import io.reactivex.Single;
 
 /**
  * Created by Prashant Gupta on 30-01-2017.
@@ -68,6 +73,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<JSONObject> getJSONObjectFlowable() {
+        return getJSONObjectObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<JSONObject> getJSONObjectSingle() {
+        return getJSONObjectObservable().singleOrError();
+    }
+
+    public Maybe<JSONObject> getJSONObjectMaybe() {
+        return getJSONObjectObservable().singleElement();
+    }
+
+    public Completable getJSONObjectCompletable() {
+        return getJSONObjectObservable().ignoreElements();
+    }
+
     public Observable<JSONArray> getJSONArrayObservable() {
         this.setResponseAs(ResponseType.JSON_ARRAY);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -79,6 +100,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<JSONArray> getJSONArrayFlowable() {
+        return getJSONArrayObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<JSONArray> getJSONArraySingle() {
+        return getJSONArrayObservable().singleOrError();
+    }
+
+    public Maybe<JSONArray> getJSONArrayMaybe() {
+        return getJSONArrayObservable().singleElement();
+    }
+
+    public Completable getJSONArrayCompletable() {
+        return getJSONArrayObservable().ignoreElements();
+    }
+
     public Observable<Bitmap> getBitmapObservable() {
         this.setResponseAs(ResponseType.BITMAP);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -90,6 +127,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<Bitmap> getBitmapFlowable() {
+        return getBitmapObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<Bitmap> getBitmapSingle() {
+        return getBitmapObservable().singleOrError();
+    }
+
+    public Maybe<Bitmap> getBitmapMaybe() {
+        return getBitmapObservable().singleElement();
+    }
+
+    public Completable getBitmapCompletable() {
+        return getBitmapObservable().ignoreElements();
+    }
+
     public Observable<String> getStringObservable() {
         this.setResponseAs(ResponseType.STRING);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -101,10 +154,42 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<String> getStringFlowable() {
+        return getStringObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<String> getStringSingle() {
+        return getStringObservable().singleOrError();
+    }
+
+    public Maybe<String> getStringMaybe() {
+        return getStringObservable().singleElement();
+    }
+
+    public Completable getStringCompletable() {
+        return getStringObservable().ignoreElements();
+    }
+
     public Observable<String> getDownloadObservable() {
         return Rx2InternalNetworking.generateDownloadObservable(this);
     }
 
+    public Flowable<String> getDownloadFlowable() {
+        return getDownloadObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<String> getDownloadSingle() {
+        return getDownloadObservable().singleOrError();
+    }
+
+    public Maybe<String> getDownloadMaybe() {
+        return getDownloadObservable().singleElement();
+    }
+
+    public Completable getDownloadCompletable() {
+        return getDownloadObservable().ignoreElements();
+    }
+
     public <T> Observable<T> getParseObservable(TypeToken<T> typeToken) {
         this.setType(typeToken.getType());
         this.setResponseAs(ResponseType.PARSED);
@@ -117,6 +202,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Flowable<T> getParseFlowable(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public <T> Single<T> getParseSingle(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).singleOrError();
+    }
+
+    public <T> Maybe<T> getParseMaybe(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).singleElement();
+    }
+
+    public <T> Completable getParseCompletable(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).ignoreElements();
+    }
+
     public <T> Observable<T> getObjectObservable(Class<T> objectClass) {
         this.setType(objectClass);
         this.setResponseAs(ResponseType.PARSED);
@@ -129,6 +230,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Flowable<T> getObjectFlowable(Class<T> objectClass) {
+        return getObjectObservable(objectClass).toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public <T> Single<T> getObjectSingle(Class<T> objectClass) {
+        return getObjectObservable(objectClass).singleOrError();
+    }
+
+    public <T> Maybe<T> getObjectMaybe(Class<T> objectClass) {
+        return getObjectObservable(objectClass).singleElement();
+    }
+
+    public <T> Completable getObjectCompletable(Class<T> objectClass) {
+        return getObjectObservable(objectClass).ignoreElements();
+    }
+
     public <T> Observable<List<T>> getObjectListObservable(Class<T> objectClass) {
         this.setType($Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass));
         this.setResponseAs(ResponseType.PARSED);
@@ -141,6 +258,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Flowable<List<T>> getObjectListFlowable(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public <T> Single<List<T>> getObjectListSingle(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).singleOrError();
+    }
+
+    public <T> Maybe<List<T>> getObjectListMaybe(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).singleElement();
+    }
+
+    public <T> Completable getObjectListCompletable(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).ignoreElements();
+    }
+
     public static class GetRequestBuilder extends ANRequest.GetRequestBuilder<GetRequestBuilder> {
 
         public GetRequestBuilder(String url) {
@@ -163,6 +296,13 @@ public HeadRequestBuilder(String url) {
         }
     }
 
+    public static class OptionsRequestBuilder extends GetRequestBuilder {
+
+        public OptionsRequestBuilder(String url) {
+            super(url, Method.OPTIONS);
+        }
+    }
+
     public static class PostRequestBuilder extends ANRequest.PostRequestBuilder<PostRequestBuilder> {
 
         public PostRequestBuilder(String url) {
@@ -199,6 +339,13 @@ public PatchRequestBuilder(String url) {
         }
     }
 
+    public static class DynamicRequestBuilder extends PostRequestBuilder {
+
+        public DynamicRequestBuilder(String url, int method) {
+            super(url, method);
+        }
+    }
+
     public static class DownloadBuilder extends ANRequest.DownloadBuilder<DownloadBuilder> {
 
         public DownloadBuilder(String url, String dirPath, String fileName) {
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
index 15d62c8..14a7792 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
@@ -56,6 +56,16 @@ private Rx2AndroidNetworking() {
         return new Rx2ANRequest.HeadRequestBuilder(url);
     }
 
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public static Rx2ANRequest.OptionsRequestBuilder options(String url) {
+        return new Rx2ANRequest.OptionsRequestBuilder(url);
+    }
+
     /**
      * Method to make POST request
      *
@@ -117,4 +127,15 @@ private Rx2AndroidNetworking() {
     public static Rx2ANRequest.MultiPartBuilder upload(String url) {
         return new Rx2ANRequest.MultiPartBuilder(url);
     }
+
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public static Rx2ANRequest.DynamicRequestBuilder request(String url, int method) {
+        return new Rx2ANRequest.DynamicRequestBuilder(url, method);
+    }
 }
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
index 4d8a373..e33afd3 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
@@ -50,6 +50,7 @@
 import static com.androidnetworking.common.Method.DELETE;
 import static com.androidnetworking.common.Method.GET;
 import static com.androidnetworking.common.Method.HEAD;
+import static com.androidnetworking.common.Method.OPTIONS;
 import static com.androidnetworking.common.Method.PATCH;
 import static com.androidnetworking.common.Method.POST;
 import static com.androidnetworking.common.Method.PUT;
@@ -89,6 +90,10 @@
                 builder = builder.head();
                 break;
             }
+            case OPTIONS: {
+                builder = builder.method(ANConstants.OPTIONS, null);
+                break;
+            }
             case PATCH: {
                 requestBody = request.getRequestBody();
                 builder = builder.patch(requestBody);
@@ -235,7 +240,7 @@ protected void subscribeActual(Observer<? super T> observer) {
                     RxJavaPlugins.onError(e);
                 } else if (!call.isCanceled()) {
                     try {
-                        observer.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
                     } catch (Exception e1) {
                         Exceptions.throwIfFatal(e1);
                         RxJavaPlugins.onError(new CompositeException(e, e1));
@@ -317,7 +322,7 @@ protected void subscribeActual(Observer<? super T> observer) {
                     RxJavaPlugins.onError(e);
                 } else if (!call.isCanceled()) {
                     try {
-                        observer.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
                     } catch (Exception e1) {
                         Exceptions.throwIfFatal(e1);
                         RxJavaPlugins.onError(new CompositeException(e, e1));
@@ -408,7 +413,7 @@ protected void subscribeActual(Observer<? super T> observer) {
                     RxJavaPlugins.onError(e);
                 } else if (!request.getCall().isCanceled()) {
                     try {
-                        observer.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
                     } catch (Exception e1) {
                         Exceptions.throwIfFatal(e1);
                         RxJavaPlugins.onError(new CompositeException(e, e1));
diff --git a/rx2sampleapp/build.gradle b/rx2sampleapp/build.gradle
index 2303970..1c38a20 100644
--- a/rx2sampleapp/build.gradle
+++ b/rx2sampleapp/build.gradle
@@ -20,13 +20,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
         applicationId "com.rx2sampleapp"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
 
@@ -46,7 +46,7 @@ dependencies {
     androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
         exclude group: 'com.android.support', module: 'support-annotations'
     })
-    compile 'com.android.support:appcompat-v7:23.4.0'
-    testCompile 'junit:junit:4.12'
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
     compile project(':rx2-android-networking')
 }
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
index 88a097d..d6f85ae 100644
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
+++ b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
@@ -27,7 +27,6 @@
 import android.widget.ImageView;
 
 import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.error.ANError;
 import com.androidnetworking.interfaces.AnalyticsListener;
 import com.androidnetworking.interfaces.DownloadProgressListener;
 import com.androidnetworking.interfaces.UploadProgressListener;
@@ -42,9 +41,11 @@
 import java.io.File;
 import java.util.List;
 
-import io.reactivex.Observable;
-import io.reactivex.Observer;
+import io.reactivex.CompletableObserver;
+import io.reactivex.Single;
+import io.reactivex.SingleObserver;
 import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.schedulers.Schedulers;
 
@@ -75,27 +76,17 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getObjectListObservable(User.class)
+                .getObjectListSingle(User.class)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
+                .subscribe(new SingleObserver<List<User>>() {
                     @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : getAllUsers completed");
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onNext(List<User> users) {
+                    public void onSuccess(@NonNull List<User> users) {
                         Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                         Log.d(TAG, "userList size : " + users.size());
                         for (User user : users) {
@@ -104,6 +95,11 @@ public void onNext(List<User> users) {
                             Log.d(TAG, "lastname : " + user.lastname);
                         }
                     }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
+                    }
                 });
     }
 
@@ -121,32 +117,27 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getObjectObservable(User.class)
+                .getObjectSingle(User.class)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : getAnUser completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
+                .subscribe(new SingleObserver<User>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
                     }
 
                     @Override
-                    public void onNext(User user) {
+                    public void onSuccess(@NonNull User user) {
                         Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                         Log.d(TAG, "id : " + user.id);
                         Log.d(TAG, "firstname : " + user.firstname);
                         Log.d(TAG, "lastname : " + user.lastname);
                     }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
+                    }
                 });
     }
 
@@ -165,46 +156,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getJSONObjectObservable()
+                .getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : checkForHeaderGet completed");
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-                        Log.d(TAG, "onSubscribe Detail - isDisposed : " + d.isDisposed());
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -228,45 +197,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
             }
         });
 
-        rxAnRequest.getJSONObjectObservable()
+        rxAnRequest.getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : checkForHeaderPost completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -285,45 +233,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getJSONObjectObservable()
+                .getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : createAnUser completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -348,45 +275,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getJSONObjectObservable()
+                .getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : createAnUserJSONObject completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -411,45 +317,24 @@ public void onProgress(long bytesDownloaded, long totalBytes) {
                         Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
                 })
-                .getDownloadObservable()
+                .getDownloadCompletable()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
+                .subscribe(new CompletableObserver() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onComplete() {
+                        Log.d(TAG, "File download Completed");
+                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(String s) {
-                        Log.d(TAG, "onNext : " + s);
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -467,51 +352,30 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getDownloadObservable()
+                .getDownloadCompletable()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
+                .subscribe(new CompletableObserver() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onComplete() {
+                        Log.d(TAG, "File download Completed");
+                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(String s) {
-                        Log.d(TAG, "onNext : " + s);
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
 
     public void uploadImage(final View view) {
-        Observable<JSONObject> observable = Rx2AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
+        Single<JSONObject> single = Rx2AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
                 .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
                 .build()
                 .setAnalyticsListener(new AnalyticsListener() {
@@ -530,87 +394,45 @@ public void onProgress(long bytesUploaded, long totalBytes) {
                         Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
                 })
-                .getJSONObjectObservable();
+                .getJSONObjectSingle();
 
-        observable.subscribeOn(Schedulers.io())
+        single.subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_1", "onComplete Detail : uploadImage completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG + "_1", "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG + "_1", "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG + "_1", "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG + "_1", "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG + "_1", "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG + "_1", "Image upload Completed");
+                        Log.d(TAG + "_1", "onResponse object : " + jsonObject.toString());
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG + "_1", "Image upload Completed");
-                        Log.d(TAG + "_1", "onResponse object : " + response.toString());
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
 
-        observable.subscribeOn(Schedulers.io())
+        single.subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_2", "onComplete Detail : uploadImage completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG + "_2", "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG + "_2", "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG + "_2", "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG + "_2", "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG + "_2", "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG + "_2", "Image upload Completed");
+                        Log.d(TAG + "_2", "onResponse object : " + jsonObject.toString());
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG + "_2", "Image upload Completed");
-                        Log.d(TAG + "_2", "onResponse object : " + response.toString());
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
 
@@ -637,48 +459,25 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getBitmapObservable()
+                .getBitmapSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<Bitmap>() {
+                .subscribe(new SingleObserver<Bitmap>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Bitmap");
-
-
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull Bitmap bitmap) {
+                        Log.d(TAG, "onResponse Bitmap");
+                        ImageView imageView = findViewById(R.id.imageView);
+                        imageView.setImageBitmap(bitmap);
                     }
 
                     @Override
-                    public void onNext(Bitmap bitmap) {
-                        Log.d(TAG, "onResponse Bitmap");
-                        ImageView imageView = (ImageView) findViewById(R.id.imageView);
-                        imageView.setImageBitmap(bitmap);
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
 
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
index ef3847f..8dd2101 100644
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
+++ b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
@@ -39,7 +39,10 @@
 import io.reactivex.Observable;
 import io.reactivex.ObservableSource;
 import io.reactivex.Observer;
+import io.reactivex.Single;
+import io.reactivex.SingleObserver;
 import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Function;
@@ -72,7 +75,7 @@ protected void onDestroy() {
 
     private void testApi() {
 
-        Observable<List<User>> observable = Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
+        Single<List<User>> single = Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
                 .addPathParameter("pageNumber", "0")
                 .addQueryParameter("limit", "3")
                 .build()
@@ -85,30 +88,19 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getObjectListObservable(User.class);
+                .getObjectListSingle(User.class);
 
         // first observer
-        observable.subscribeOn(Schedulers.io())
+        single.subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG + "_1", e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_1", "onComplete Detail : getAllUsers completed");
-                    }
-
+                .subscribe(new SingleObserver<List<User>>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
                         Log.d(TAG + "_1", "onSubscribe");
                     }
 
                     @Override
-                    public void onNext(List<User> users) {
+                    public void onSuccess(@NonNull List<User> users) {
                         Log.d(TAG + "_1", "userList size : " + users.size());
                         for (User user : users) {
                             Log.d(TAG, "id : " + user.id);
@@ -116,30 +108,24 @@ public void onNext(List<User> users) {
                             Log.d(TAG, "lastname : " + user.lastname);
                         }
                     }
-                });
-
-        // second observer
-        observable.subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
 
                     @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG + "_2", e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_2", "onComplete Detail : getAllUsers completed");
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG + "_1", throwable);
                     }
+                });
 
+        // second observer
+        single.subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
                         Log.d(TAG + "_2", "onSubscribe");
                     }
 
                     @Override
-                    public void onNext(List<User> users) {
+                    public void onSuccess(@NonNull List<User> users) {
                         Log.d(TAG + "_2", "userList size : " + users.size());
                         for (User user : users) {
                             Log.d(TAG, "id : " + user.id);
@@ -147,6 +133,11 @@ public void onNext(List<User> users) {
                             Log.d(TAG, "lastname : " + user.lastname);
                         }
                     }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG + "_2", throwable);
+                    }
                 });
     }
 
@@ -158,7 +149,7 @@ public void map(View view) {
         Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUser/{userId}")
                 .addPathParameter("userId", "1")
                 .build()
-                .getObjectObservable(ApiUser.class)
+                .getObjectSingle(ApiUser.class)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
                 .map(new Function<ApiUser, User>() {
@@ -170,27 +161,22 @@ public User apply(ApiUser apiUser) throws Exception {
                         return user;
                     }
                 })
-                .subscribe(new Observer<User>() {
+                .subscribe(new SingleObserver<User>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
                     }
 
                     @Override
-                    public void onNext(User user) {
+                    public void onSuccess(@NonNull User user) {
                         Log.d(TAG, "user id : " + user.id);
                         Log.d(TAG, "user firstname : " + user.firstname);
                         Log.d(TAG, "user lastname : " + user.lastname);
                     }
 
                     @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete");
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
index ea0403d..c109a17 100644
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
+++ b/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
@@ -27,10 +27,11 @@
 import com.rx2androidnetworking.Rx2AndroidNetworking;
 import com.rx2sampleapp.utils.Utils;
 
-import io.reactivex.Observable;
+import io.reactivex.Completable;
 import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.observers.DisposableObserver;
+import io.reactivex.observers.DisposableCompletableObserver;
 import io.reactivex.schedulers.Schedulers;
 
 
@@ -58,35 +59,30 @@ protected void onDestroy() {
         disposables.clear();
     }
 
-    public Observable<String> getObservable() {
+    public Completable getCompletable() {
         return Rx2AndroidNetworking.download(URL, dirPath, fileName)
                 .build()
-                .getDownloadObservable();
+                .getDownloadCompletable();
     }
 
-    private DisposableObserver<String> getDisposableObserver() {
-
-        return new DisposableObserver<String>() {
+    private DisposableCompletableObserver getDisposableObserver() {
 
+        return new DisposableCompletableObserver() {
             @Override
-            public void onNext(String response) {
-                Log.d(TAG, "onResponse response : " + response);
-            }
-
-            @Override
-            public void onError(Throwable e) {
-                Log.d(TAG, "onError " + e.getMessage());
+            public void onComplete() {
+                Log.d(TAG, "onCompleted");
             }
 
             @Override
-            public void onComplete() {
-                Log.d(TAG, "onCompleted");
+            public void onError(@NonNull Throwable throwable) {
+                Log.d(TAG, "onError " + throwable.getMessage());
             }
         };
+
     }
 
     public void downloadFile(View view) {
-        disposables.add(getObservable()
+        disposables.add(getCompletable()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribeWith(getDisposableObserver()));
diff --git a/rxsampleapp/build.gradle b/rxsampleapp/build.gradle
index f884149..9a99639 100644
--- a/rxsampleapp/build.gradle
+++ b/rxsampleapp/build.gradle
@@ -18,13 +18,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
         applicationId "com.rxsampleapp"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -38,7 +38,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'com.android.support:appcompat-v7:23.4.0'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
     compile project(':rx-android-networking')
 }
