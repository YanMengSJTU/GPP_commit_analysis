diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
index aa30a63..0adc02a 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
@@ -19,6 +19,7 @@
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.support.v4.util.ArrayMap;
 import android.widget.ImageView;
 
 import com.androidnetworking.core.Core;
@@ -50,7 +51,6 @@
 
 import java.io.File;
 import java.lang.reflect.Type;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
@@ -84,13 +84,13 @@
     private int sequenceNumber;
     private Object mTag;
     private ResponseType mResponseType;
-    private HashMap<String, String> mHeadersMap = new HashMap<>();
-    private HashMap<String, String> mBodyParameterMap = new HashMap<>();
-    private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-    private HashMap<String, String> mMultiPartParameterMap = new HashMap<>();
-    private HashMap<String, String> mQueryParameterMap = new HashMap<>();
-    private HashMap<String, String> mPathParameterMap = new HashMap<>();
-    private HashMap<String, File> mMultiPartFileMap = new HashMap<>();
+    private Map<String, String> mHeadersMap = new ArrayMap<>();
+    private Map<String, String> mBodyParameterMap = new ArrayMap<>();
+    private Map<String, String> mUrlEncodedFormBodyParameterMap = new ArrayMap<>();
+    private Map<String, String> mMultiPartParameterMap = new ArrayMap<>();
+    private Map<String, String> mQueryParameterMap = new ArrayMap<>();
+    private Map<String, String> mPathParameterMap = new ArrayMap<>();
+    private Map<String, File> mMultiPartFileMap = new ArrayMap<>();
     private String mDirPath;
     private String mFileName;
     private String mApplicationJsonString = null;
@@ -401,11 +401,11 @@ public Priority getPriority() {
 
     public String getUrl() {
         String tempUrl = mUrl;
-        for (HashMap.Entry<String, String> entry : mPathParameterMap.entrySet()) {
+        for (Map.Entry<String, String> entry : mPathParameterMap.entrySet()) {
             tempUrl = tempUrl.replace("{" + entry.getKey() + "}", String.valueOf(entry.getValue()));
         }
         HttpUrl.Builder urlBuilder = HttpUrl.parse(tempUrl).newBuilder();
-        for (HashMap.Entry<String, String> entry : mQueryParameterMap.entrySet()) {
+        for (Map.Entry<String, String> entry : mQueryParameterMap.entrySet()) {
             urlBuilder.addQueryParameter(entry.getKey(), entry.getValue());
         }
         return urlBuilder.build().toString();
@@ -814,10 +814,10 @@ public RequestBody getRequestBody() {
         } else {
             FormBody.Builder builder = new FormBody.Builder();
             try {
-                for (HashMap.Entry<String, String> entry : mBodyParameterMap.entrySet()) {
+                for (Map.Entry<String, String> entry : mBodyParameterMap.entrySet()) {
                     builder.add(entry.getKey(), entry.getValue());
                 }
-                for (HashMap.Entry<String, String> entry : mUrlEncodedFormBodyParameterMap.entrySet()) {
+                for (Map.Entry<String, String> entry : mUrlEncodedFormBodyParameterMap.entrySet()) {
                     builder.addEncoded(entry.getKey(), entry.getValue());
                 }
             } catch (Exception e) {
@@ -832,12 +832,12 @@ public RequestBody getMultiPartRequestBody() {
                 .Builder()
                 .setType((customMediaType == null) ? MultipartBody.FORM : customMediaType);
         try {
-            for (HashMap.Entry<String, String> entry : mMultiPartParameterMap.entrySet()) {
+            for (Map.Entry<String, String> entry : mMultiPartParameterMap.entrySet()) {
                 builder.addPart(Headers.of("Content-Disposition",
                         "form-data; name=\"" + entry.getKey() + "\""),
                         RequestBody.create(null, entry.getValue()));
             }
-            for (HashMap.Entry<String, File> entry : mMultiPartFileMap.entrySet()) {
+            for (Map.Entry<String, File> entry : mMultiPartFileMap.entrySet()) {
                 String fileName = entry.getValue().getName();
                 RequestBody fileBody = RequestBody.create(MediaType.parse(Utils.getMimeType(fileName)),
                         entry.getValue());
@@ -854,7 +854,7 @@ public RequestBody getMultiPartRequestBody() {
     public Headers getHeaders() {
         Headers.Builder builder = new Headers.Builder();
         try {
-            for (HashMap.Entry<String, String> entry : mHeadersMap.entrySet()) {
+            for (Map.Entry<String, String> entry : mHeadersMap.entrySet()) {
                 builder.add(entry.getKey(), entry.getValue());
             }
         } catch (Exception e) {
@@ -880,9 +880,9 @@ public HeadRequestBuilder(String url) {
         private int mMaxWidth;
         private int mMaxHeight;
         private ImageView.ScaleType mScaleType;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
+        private Map<String, String> mHeadersMap = new ArrayMap<>();
+        private Map<String, String> mQueryParameterMap = new ArrayMap<>();
+        private Map<String, String> mPathParameterMap = new ArrayMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
         private OkHttpClient mOkHttpClient;
@@ -1091,11 +1091,11 @@ public PatchRequestBuilder(String url) {
         private String mStringBody = null;
         private byte[] mByte = null;
         private File mFile = null;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mBodyParameterMap = new HashMap<>();
-        private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
+        private Map<String, String> mHeadersMap = new ArrayMap<>();
+        private Map<String, String> mBodyParameterMap = new ArrayMap<>();
+        private Map<String, String> mUrlEncodedFormBodyParameterMap = new ArrayMap<>();
+        private Map<String, String> mQueryParameterMap = new ArrayMap<>();
+        private Map<String, String> mPathParameterMap = new ArrayMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
         private OkHttpClient mOkHttpClient;
@@ -1339,9 +1339,9 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
+        private Map<String, String> mHeadersMap = new ArrayMap<>();
+        private Map<String, String> mQueryParameterMap = new ArrayMap<>();
+        private Map<String, String> mPathParameterMap = new ArrayMap<>();
         private String mDirPath;
         private String mFileName;
         private CacheControl mCacheControl;
@@ -1503,11 +1503,11 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mMultiPartParameterMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
-        private HashMap<String, File> mMultiPartFileMap = new HashMap<>();
+        private Map<String, String> mHeadersMap = new ArrayMap<>();
+        private Map<String, String> mMultiPartParameterMap = new ArrayMap<>();
+        private Map<String, String> mQueryParameterMap = new ArrayMap<>();
+        private Map<String, String> mPathParameterMap = new ArrayMap<>();
+        private Map<String, File> mMultiPartFileMap = new ArrayMap<>();
         private CacheControl mCacheControl;
         private int mPercentageThresholdForCancelling = 0;
         private Executor mExecutor;
diff --git a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java b/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java
index 1229ccc..84e5b0a 100644
--- a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java
+++ b/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java
@@ -19,13 +19,15 @@
 
 package com.androidnetworking.gsonparserfactory;
 
+import android.support.v4.util.ArrayMap;
+
 import com.androidnetworking.interfaces.Parser;
 import com.google.gson.Gson;
 import com.google.gson.TypeAdapter;
 import com.google.gson.reflect.TypeToken;
 
 import java.lang.reflect.Type;
-import java.util.HashMap;
+import java.util.Map;
 
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
@@ -78,14 +80,14 @@ public String getString(Object object) {
     }
 
     @Override
-    public HashMap<String, String> getStringMap(Object object) {
+    public Map<String, String> getStringMap(Object object) {
         try {
-            Type type = new TypeToken<HashMap<String, String>>() {
+            Type type = new TypeToken<ArrayMap<String, String>>() {
             }.getType();
             return gson.fromJson(gson.toJson(object), type);
         } catch (Exception e) {
             e.printStackTrace();
         }
-        return new HashMap<>();
+        return new ArrayMap<>();
     }
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java b/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java
index 19e12dd..5a97693 100644
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java
+++ b/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java
@@ -21,7 +21,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Type;
-import java.util.HashMap;
+import java.util.Map;
 
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
@@ -51,7 +51,7 @@ public String getString(Object object) {
             return null;
         }
 
-        public HashMap<String, String> getStringMap(Object object) {
+        public Map<String, String> getStringMap(Object object) {
             return null;
         }
 
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java b/android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java
index d278d54..f1de202 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java
@@ -21,6 +21,7 @@
 import android.graphics.BitmapFactory;
 import android.os.Handler;
 import android.os.Looper;
+import android.support.v4.util.ArrayMap;
 import android.widget.ImageView;
 
 import com.androidnetworking.AndroidNetworking;
@@ -29,8 +30,8 @@
 import com.androidnetworking.error.ANError;
 import com.androidnetworking.interfaces.BitmapRequestListener;
 
-import java.util.HashMap;
 import java.util.LinkedList;
+import java.util.Map;
 
 /**
  * Created by amitshekhar on 23/03/16.
@@ -49,11 +50,11 @@
 
     private final ImageCache mCache;
 
-    private final HashMap<String, BatchedImageRequest> mInFlightRequests =
-            new HashMap<String, BatchedImageRequest>();
+    private final Map<String, BatchedImageRequest> mInFlightRequests =
+            new ArrayMap<String, BatchedImageRequest>();
 
-    private final HashMap<String, BatchedImageRequest> mBatchedResponses =
-            new HashMap<String, BatchedImageRequest>();
+    private final Map<String, BatchedImageRequest> mBatchedResponses =
+            new ArrayMap<>();
 
     private final Handler mHandler = new Handler(Looper.getMainLooper());
 
diff --git a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java b/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java
index 00dbda5..bcb3f11 100644
--- a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java
+++ b/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java
@@ -28,6 +28,7 @@
 
 import java.lang.reflect.Type;
 import java.util.HashMap;
+import java.util.Map;
 
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
@@ -85,7 +86,7 @@ public String getString(Object object) {
     }
 
     @Override
-    public HashMap<String, String> getStringMap(Object object) {
+    public Map<String, String> getStringMap(Object object) {
         try {
             TypeReference<HashMap<String, String>> typeRef
                     = new TypeReference<HashMap<String, String>>() {
