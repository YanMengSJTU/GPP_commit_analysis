diff --git a/android-networking/build.gradle b/android-networking/build.gradle
index e6a08f9..b5a05de 100644
--- a/android-networking/build.gradle
+++ b/android-networking/build.gradle
@@ -47,4 +47,4 @@ dependencies {
     compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
     compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
 }
-//apply from: 'upload.gradle'
+
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
index d85b1db..765c3fa 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
@@ -54,9 +54,11 @@
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.DelayQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
@@ -88,13 +90,13 @@
     private int sequenceNumber;
     private Object mTag;
     private ResponseType mResponseType;
-    private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
-    private HashMap<String, String> mBodyParameterMap = new HashMap<>();
-    private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-    private HashMap<String, MultipartStringBody> mMultiPartParameterMap = new HashMap<>();
-    private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
-    private HashMap<String, String> mPathParameterMap = new HashMap<>();
-    private HashMap<String, List<MultipartFileBody>> mMultiPartFileMap = new HashMap<>();
+    private Map<String, List<String>> mHeadersMap = new LinkedHashMap<>();
+    private Map<String, String> mBodyParameterMap = new LinkedHashMap<>();
+    private Map<String, String> mUrlEncodedFormBodyParameterMap = new LinkedHashMap<>();
+    private Map<String, MultipartStringBody> mMultiPartParameterMap = new LinkedHashMap<>();
+    private Map<String, List<String>> mQueryParameterMap = new LinkedHashMap<>();
+    private Map<String, String> mPathParameterMap = new LinkedHashMap<>();
+    private Map<String, List<MultipartFileBody>> mMultiPartFileMap = new LinkedHashMap<>();
     private String mDirPath;
     private String mFileName;
     private String mApplicationJsonString = null;
@@ -186,13 +188,14 @@ public ANRequest(PostRequestBuilder builder) {
 
     public ANRequest(DownloadBuilder builder) {
         this.mRequestType = RequestType.DOWNLOAD;
-        this.mMethod = Method.GET;
+        this.mMethod = Method.POST;
         this.mPriority = builder.mPriority;
         this.mUrl = builder.mUrl;
         this.mTag = builder.mTag;
         this.mDirPath = builder.mDirPath;
         this.mFileName = builder.mFileName;
         this.mHeadersMap = builder.mHeadersMap;
+        this.mUrlEncodedFormBodyParameterMap = builder.mUrlEncodedFormBodyParameterMap;
         this.mQueryParameterMap = builder.mQueryParameterMap;
         this.mPathParameterMap = builder.mPathParameterMap;
         this.mCacheControl = builder.mCacheControl;
@@ -931,9 +934,9 @@ public OptionsRequestBuilder(String url) {
         private int mMaxWidth;
         private int mMaxHeight;
         private ImageView.ScaleType mScaleType;
-        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
-        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
+        private Map<String, List<String>> mHeadersMap = new LinkedHashMap<>();
+        private Map<String, List<String>> mQueryParameterMap = new LinkedHashMap<>();
+        private Map<String, String> mPathParameterMap = new LinkedHashMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
         private OkHttpClient mOkHttpClient;
@@ -1167,11 +1170,11 @@ public DynamicRequestBuilder(String url, int method) {
         private String mStringBody = null;
         private byte[] mByte = null;
         private File mFile = null;
-        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mBodyParameterMap = new HashMap<>();
-        private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
+        private Map<String, List<String>> mHeadersMap = new LinkedHashMap<>();
+        private Map<String, String> mBodyParameterMap = new LinkedHashMap<>();
+        private Map<String, String> mUrlEncodedFormBodyParameterMap = new LinkedHashMap<>();
+        private Map<String, List<String>> mQueryParameterMap = new LinkedHashMap<>();
+        private Map<String, String> mPathParameterMap = new LinkedHashMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
         private OkHttpClient mOkHttpClient;
@@ -1430,12 +1433,13 @@ public ANRequest build() {
 
     public static class DownloadBuilder<T extends DownloadBuilder> implements RequestBuilder {
 
+        public int mMethod;
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
-        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
+        private Map<String, List<String>> mHeadersMap = new LinkedHashMap<>();
+        private Map<String, List<String>> mQueryParameterMap = new LinkedHashMap<>();
+        private Map<String, String> mPathParameterMap = new LinkedHashMap<>();
         private String mDirPath;
         private String mFileName;
         private CacheControl mCacheControl;
@@ -1443,6 +1447,7 @@ public ANRequest build() {
         private Executor mExecutor;
         private OkHttpClient mOkHttpClient;
         private String mUserAgent;
+        private Map<String, String> mUrlEncodedFormBodyParameterMap = new LinkedHashMap<>() ;
 
         public DownloadBuilder(String url, String dirPath, String fileName) {
             this.mUrl = url;
@@ -1495,6 +1500,27 @@ public T addHeaders(Object object) {
             return (T) this;
         }
 
+        public T addUrlEncodeFormBodyParameter(String key, String value) {
+            mUrlEncodedFormBodyParameterMap.put(key, value);
+            return (T) this;
+        }
+
+        public T addUrlEncodeFormBodyParameter(Map<String, String> bodyParameterMap) {
+            if (bodyParameterMap != null) {
+                mUrlEncodedFormBodyParameterMap.putAll(bodyParameterMap);
+            }
+            return (T) this;
+        }
+
+        public T addUrlEncodeFormBodyParameter(Object object) {
+            if (object != null) {
+                mUrlEncodedFormBodyParameterMap.putAll(ParseUtil
+                        .getParserFactory()
+                        .getStringMap(object));
+            }
+            return (T) this;
+        }
+
         @Override
         public T addQueryParameter(String key, String value) {
             List<String> list = mQueryParameterMap.get(key);
@@ -1615,11 +1641,11 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
-        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
-        private HashMap<String, String> mPathParameterMap = new HashMap<>();
-        private HashMap<String, MultipartStringBody> mMultiPartParameterMap = new HashMap<>();
-        private HashMap<String, List<MultipartFileBody>> mMultiPartFileMap = new HashMap<>();
+        private Map<String, List<String>> mHeadersMap = new LinkedHashMap<>();
+        private Map<String, List<String>> mQueryParameterMap = new LinkedHashMap<>();
+        private Map<String, String> mPathParameterMap = new LinkedHashMap<>();
+        private Map<String, MultipartStringBody> mMultiPartParameterMap = new LinkedHashMap<>();
+        private Map<String, List<MultipartFileBody>> mMultiPartFileMap = new LinkedHashMap<>();
         private CacheControl mCacheControl;
         private int mPercentageThresholdForCancelling = 0;
         private Executor mExecutor;
diff --git a/android-networking/upload.gradle b/android-networking/upload.gradle
index 0dbf33f..d13d01f 100755
--- a/android-networking/upload.gradle
+++ b/android-networking/upload.gradle
@@ -15,46 +15,45 @@
  *    limitations under the License.
  */
 
-apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: "com.jfrog.bintray"
-
 def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
-group = "com.amitshekhar.android"
-version = '1.0.2'
-
 install {
     repositories.mavenInstaller {
-        pom.project {
-            packaging 'aar'
+        pom{
+            project {
+                packaging 'aar'
 
-            name 'Fast Android Networking'
-            description 'Fast Android Networking is a powerful library for doing any type of networking in Android applications'
+                artifactId = project.name
 
-            url siteUrl
+                name 'Fast Android Networking'
+                description 'Fast Android Networking is a powerful library for doing any type of networking in Android applications'
+
+                url siteUrl
 
-            licenses {
-                license {
-                    name 'The Apache Software License, Version 2.0'
-                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                licenses {
+                    license {
+                        name 'The Apache Software License, Version 2.0'
+                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                    }
                 }
-            }
 
-            developers {
-                developer {
-                    id 'amitshekhariitbhu'
-                    name 'Amit Shekhar'
-                    email 'amit.shekhar.iitbhu@gmail.com'
+                developers {
+                    developer {
+                        id 'amitshekhariitbhu'
+                        name 'Amit Shekhar'
+                        email 'amit.shekhar.iitbhu@gmail.com'
+                    }
                 }
-            }
 
-            scm {
-                connection gitUrl
-                developerConnection gitUrl
-                url siteUrl
+                scm {
+                    connection gitUrl
+                    developerConnection gitUrl
+                    url siteUrl
+                }
             }
         }
+
     }
 }
 
@@ -77,25 +76,3 @@ artifacts {
     archives javadocJar
     archives sourcesJar
 }
-
-if (project.rootProject.file("local.properties").exists()) {
-    Properties properties = new Properties()
-    properties.load(project.rootProject.file('local.properties').newDataInputStream())
-
-    bintray {
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-
-        configurations = ['archives']
-        dryRun = false
-
-        pkg {
-            repo = "maven"
-            name = "android-networking"
-            websiteUrl = siteUrl
-            vcsUrl = gitUrl
-            licenses = ["Apache-2.0"]
-            publish = true
-        }
-    }
-}
diff --git a/build.gradle b/build.gradle
index b5ef45f..de65992 100644
--- a/build.gradle
+++ b/build.gradle
@@ -19,6 +19,7 @@
 
 buildscript {
     repositories {
+        mavenLocal()
         jcenter()
         google()
     }
@@ -36,10 +37,13 @@ allprojects {
         jcenter()
         google()
     }
-}
 
-task clean(type: Delete) {
-    delete rootProject.buildDir
+    group = "com.amitshekhar.android"
+    version = '1.0.2'
+
+    apply plugin: "com.jfrog.bintray"
+    apply plugin: "android-maven"
+    apply plugin: "maven-publish"
 }
 
 ext {
diff --git a/jackson-android-networking/jackson-upload.gradle b/jackson-android-networking/jackson-upload.gradle
index 34df92f..8643667 100755
--- a/jackson-android-networking/jackson-upload.gradle
+++ b/jackson-android-networking/jackson-upload.gradle
@@ -23,8 +23,7 @@ apply plugin: "com.jfrog.bintray"
 def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
-group = "com.amitshekhar.android"
-version = '1.0.2'
+
 
 install {
     repositories.mavenInstaller {
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
index e33afd3..d27cd5e 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
@@ -5,7 +5,7 @@
  *  *
  *  *    Licensed under the Apache License, Version 2.0 (the "License");
  *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
+ *  *    You may obtain a logCopy of the License at
  *  *
  *  *        http://www.apache.org/licenses/LICENSE-2.0
  *  *
@@ -121,7 +121,44 @@
         Request okHttpRequest;
         Request.Builder builder = new Request.Builder().url(request.getUrl());
         InternalNetworking.addHeadersToRequestBuilder(builder, request);
-        builder = builder.get();
+
+        RequestBody requestBody;
+
+        switch (request.getMethod()) {
+            case GET: {
+                builder = builder.get();
+                break;
+            }
+            case POST: {
+                requestBody = request.getRequestBody();
+                builder = builder.post(requestBody);
+                break;
+            }
+            case PUT: {
+                requestBody = request.getRequestBody();
+                builder = builder.put(requestBody);
+                break;
+            }
+            case DELETE: {
+                requestBody = request.getRequestBody();
+                builder = builder.delete(requestBody);
+                break;
+            }
+            case HEAD: {
+                builder = builder.head();
+                break;
+            }
+            case OPTIONS: {
+                builder = builder.method(ANConstants.OPTIONS, null);
+                break;
+            }
+            case PATCH: {
+                requestBody = request.getRequestBody();
+                builder = builder.patch(requestBody);
+                break;
+            }
+        }
+
         if (request.getCacheControl() != null) {
             builder.cacheControl(request.getCacheControl());
         }
