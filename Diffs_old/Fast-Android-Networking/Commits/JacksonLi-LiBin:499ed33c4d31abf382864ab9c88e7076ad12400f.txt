diff --git a/.travis.yml b/.travis.yml
index 765c247..8de325e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -15,15 +15,25 @@ env:
 android:
   components:
     - tools
-    - build-tools-23.0.3
-    - extra-android-m2repository
+    - platform-tools
+    - build-tools-27.0.3
+    - android-27
+    - android-24
     - android-23
+    - android-22
+    - extra-google-google_play_services
+    - extra-google-m2repository
+    - extra-android-m2repository
+    - sys-img-armeabi-v7a-android-22    
 
 # Emulator Management: Create, Start and Wait
 before_script:
-  - echo no | android create avd --force -n test -t android-19 --abi armeabi-v7a
+  - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a -c 32M
   - emulator -avd test -no-audio -no-window &
   - android-wait-for-emulator
+  - sleep 180
+  - adb devices
   - adb shell input keyevent 82 &
-
-script: ./gradlew connectedAndroidTest
\ No newline at end of file
+  
+script:
+  - ./gradlew connectedAndroidTest
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2030425..d538069 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,28 @@
 Change Log
 ==========
 
+Version 1.0.2 *(2018-07-10)*
+----------------------------
+
+ * New: Add support for multiple file upload with same key
+ * New: Add support for multi contentType in multipart
+ * Bump OkHttp Version to 3.10.0
+ * Bump other dependencies
+
+
+Version 1.0.1 *(2017-12-20)*
+----------------------------
+
+ * New: Add support for `Single`, `Completable`, `Flowable`, `Maybe` Observable
+ * New: Add support for OPTIONS request
+ * Bump OkHttp Version to 3.9.1
+ * Bump other dependencies
+ * New: Add support for specifying request method dynamically
+ * New: Add API to check isRequestRunning
+ * Fix: Add more than one values for one key in header and query
+ * Merge pull requests
+
+
 Version 1.0.0 *(2017-03-19)*
 ----------------------------
 
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..3741d94
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,9 @@
+# Contributing
+
+1. Fork it!
+2. Checkout the development branch: `git checkout development`
+3. Create your feature branch: `git checkout -b my-new-feature`
+4. Add your changes to the index: `git add .`
+5. Commit your changes: `git commit -m 'Add some feature'`
+6. Push to the branch: `git push origin my-new-feature`
+7. Submit a pull request against the `development` branch
diff --git a/README.md b/README.md
index 1499cc5..d5c699c 100644
--- a/README.md
+++ b/README.md
@@ -4,7 +4,8 @@
 
 [![Build Status](https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking.svg?branch=master)](https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking)
 [![Mindorks](https://img.shields.io/badge/mindorks-opensource-blue.svg)](https://mindorks.com/open-source-projects)
-[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android%20Networking-blue.svg?style=flat)](http://android-arsenal.com/details/1/3695)
+[![Mindorks Community](https://img.shields.io/badge/join-community-blue.svg)](https://mindorks.com/join-community)
+[![Mindorks Android Store](https://img.shields.io/badge/Mindorks%20Android%20Store-Fast%20Android%20Networking-blue.svg?style=flat)](https://mindorks.com/android/store)
 [![API](https://img.shields.io/badge/API-9%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=9)
 [![Download](https://api.bintray.com/packages/amitshekhariitbhu/maven/android-networking/images/download.svg) ](https://bintray.com/amitshekhariitbhu/maven/android-networking/_latestVersion)
 [![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=102)](https://opensource.org/licenses/Apache-2.0)
@@ -17,15 +18,14 @@ Fast Android Networking Library is a powerful library for doing any type of netw
 Fast Android Networking Library takes care of each and everything. So you don't have to do anything, just make request and listen for the response.
 
 ### Why use Fast Android Networking ?
-* Recent removal of HttpClient in Android Marshmallow(Android M) made other networking library obsolete.
-* No other single library do each and everything like making request, downloading any type of file, uploading file, loading
-  image from network in ImageView, etc. There are libraries but they are outdated.
-* No other library provided simple interface for doing all types of things in networking like setting priority, cancelling, etc.
-* As it uses [Okio](https://github.com/square/okio) , No more GC overhead in android application.
+* Recent removal of HttpClient in Android Marshmallow(Android M) made other networking libraries obsolete.
+* No other single library does each and everything like making request, downloading any type of file, uploading file, loading
+  image from network in ImageView, etc. There are some libraries but they are outdated.
+* No other library provides simple interface for doing all types of things in networking like setting priority, cancelling, etc.
+* As it uses [Okio](https://github.com/square/okio) , No more GC overhead in android applications.
   [Okio](https://github.com/square/okio) is made to handle GC overhead while allocating memory.
-  [Okio](https://github.com/square/okio) do some clever things to save CPU and memory.
-* As it uses [OkHttp](http://square.github.io/okhttp/) , most important it supports HTTP/2.  
-
+  [Okio](https://github.com/square/okio) does some clever things to save CPU and memory.
+* It uses [OkHttp](http://square.github.io/okhttp/) , more importantly it supports HTTP/2.  
 
 ### RxJava2 Support, [check here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html).
 
@@ -50,7 +50,7 @@ Fast Android Networking Library supports Android 2.3 (Gingerbread) and later.
 
 Add this in your build.gradle
 ```groovy
-compile 'com.amitshekhar.android:android-networking:1.0.0'
+implementation 'com.amitshekhar.android:android-networking:1.0.2'
 ```
 Do not forget to add internet permission in manifest if already not present
 ```xml
@@ -70,7 +70,7 @@ AndroidNetworking.initialize(getApplicationContext(),okHttpClient);
 ```
 Using the Fast Android Networking with Jackson Parser
 ```groovy
-compile 'com.amitshekhar.android:jackson-android-networking:1.0.0'
+implementation 'com.amitshekhar.android:jackson-android-networking:1.0.2'
 ```
 ```java
 // Then set the JacksonParserFactory like below
@@ -600,20 +600,20 @@ As it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it s
 * Fast Android Networking Library supports response caching which avoids the network completely for repeat requests
 
 ### Difference over other Networking Library
-* In Fast Android Networking Library, OkHttpClient can be customized for every request easily.
+* In Fast Android Networking Library, OkHttpClient can be customized for every request easily — like timeout customization, etc. for each request.
 * As Fast Android Networking Library uses [OkHttp](http://square.github.io/okhttp/) and [Okio](https://github.com/square/okio), it is faster.
 * Single library for all type of networking.
 * Supports RxJava, RxJava2 -> [Check here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html)
 * Current bandwidth and connection quality can be obtained to decide logic of code.
-* Executor can be passed to any request to get response in another thread.
+* Executor can be passed to any request to get the response in another thread.
 * Complete analytics of any request can be obtained.
-* All types of customization is possible.
-* Immediate Request is really immediate now.
-* Prefetching of any request can be done so that it gives instant data when required from cache.
-* Proper cancellation of request.
-* Do not cancel a request if completed more than a threshold percentage.
-* Simple interface to make any type of request.
-* Proper Response Caching, hence reducing bandwidth usage.  
+* All types of customization are possible.
+* Immediate Request really is immediate now.
+* Prefetching of any request can be done so that it gives instant data when required from the cache.
+* Proper request canceling.
+* Prevents cancellation of a request if it’s completed more than a specific threshold percentage.
+* A simple interface to make any type of request.
+* Proper Response Caching — which leads to reduced bandwidth usage. 
 
 ### TODO
 * Integration with other library
@@ -625,7 +625,7 @@ As it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it s
 * [Volley](https://android.googlesource.com/platform/frameworks/volley/) - As Fast Android Networking uses ImageLoader that is developed by [Volley](https://android.googlesource.com/platform/frameworks/volley/).  
 * [Prashant Gupta](https://github.com/PrashantGupta17) - For RxJava, RxJava2 Support - [RxJava Support](https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava)
 
-###[Check out Mindorks awesome open source projects here](https://mindorks.com/open-source-projects)
+### [Check out Mindorks awesome open source projects here](https://mindorks.com/open-source-projects)
 
 ### Contact - Let's become friend
 - [Twitter](https://twitter.com/amitiitbhu)
@@ -652,5 +652,6 @@ As it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it s
 ```
 
 ### Contributing to Fast Android Networking
-Just make pull request. You are in!
+All pull requests are welcome, make sure to follow the [contribution guidelines](CONTRIBUTING.md)
+when you submit pull request.
 
diff --git a/android-networking/build.gradle b/android-networking/build.gradle
index ae9acb8..e6a08f9 100644
--- a/android-networking/build.gradle
+++ b/android-networking/build.gradle
@@ -18,12 +18,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
         consumerProguardFiles 'proguard-rules.pro'
@@ -34,13 +34,17 @@ android {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
+    lintOptions {
+        abortOnError false
+    }
 }
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.6.0'
-    compile 'com.squareup.okhttp3:okhttp:3.6.0'
-    compile 'com.google.code.gson:gson:2.8.0'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
+    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttp3Version"
+    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
 }
 //apply from: 'upload.gradle'
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java
new file mode 100644
index 0000000..57e8e33
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java
@@ -0,0 +1,469 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.JSONArrayRequestListener;
+import com.androidnetworking.interfaces.JSONObjectRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 03/04/17.
+ */
+
+public class GetJSONApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public GetJSONApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testJSONObjectGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsJSONObject(new JSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsJSONObject(new JSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArrayGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsJSONArray(new JSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArrayGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsJSONArray(new JSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONObjectGetRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<JSONObject> response = request.executeForJSONObject();
+
+        assertEquals("Amit", response.getResult().getString("firstName"));
+
+        assertEquals("Shekhar", response.getResult().getString("lastName"));
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<JSONObject> response = request.executeForJSONObject();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONArrayGetRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<JSONArray> response = request.executeForJSONArray();
+
+        JSONObject jsonObject = response.getResult().getJSONObject(0);
+
+        assertEquals("Amit", jsonObject.getString("firstName"));
+
+        assertEquals("Shekhar", jsonObject.getString("lastName"));
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONArrayGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<JSONObject> response = request.executeForJSONArray();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndJSONObjectGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndJSONObjectGet404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndJSONArrayGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndJSONArrayGet404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            headerRef.set(okHttpResponse.request().header("headerKey"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
\ No newline at end of file
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java
new file mode 100644
index 0000000..e06a4ac
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java
@@ -0,0 +1,450 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
+import com.androidnetworking.interfaces.ParsedRequestListener;
+import com.androidnetworking.model.User;
+
+import org.json.JSONException;
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 10/04/17.
+ */
+
+public class GetObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public GetObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testObjectGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectGetRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        assertEquals("Amit", response.getResult().firstName);
+
+        assertEquals("Shekhar", response.getResult().lastName);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListGetRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        User user = response.getResult().get(0);
+
+        assertEquals("Amit", user.firstName);
+
+        assertEquals("Shekhar", user.lastName);
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndObjectGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectGet404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndObjectListGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                firstNameRef.set(userList.get(0).firstName);
+                                lastNameRef.set(userList.get(0).lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectListGet404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                headerRef.set(okHttpResponse.request().header("headerKey"));
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/ApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java
similarity index 51%
rename from android-networking/src/androidTest/java/com/androidnetworking/ApiTest.java
rename to android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java
index 39a3b25..aaef6fe 100644
--- a/android-networking/src/androidTest/java/com/androidnetworking/ApiTest.java
+++ b/android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java
@@ -24,26 +24,29 @@
 import com.androidnetworking.common.ANRequest;
 import com.androidnetworking.common.ANResponse;
 import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseListener;
 import com.androidnetworking.interfaces.StringRequestListener;
 
 import org.junit.Rule;
 
+import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicReference;
 
+import okhttp3.Response;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 
-/**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
- */
-public class ApiTest extends ApplicationTestCase<Application> {
+public class GetStringApiTest extends ApplicationTestCase<Application> {
+
     @Rule
     public final MockWebServer server = new MockWebServer();
 
-    public ApiTest() {
+    public GetStringApiTest() {
         super(Application.class);
     }
 
@@ -53,9 +56,9 @@ public void setUp() throws Exception {
         createApplication();
     }
 
-    public void testGetRequest() throws InterruptedException {
+    public void testStringGetRequest() throws InterruptedException {
 
-        server.enqueue(new MockResponse().setBody("getResponse"));
+        server.enqueue(new MockResponse().setBody("data"));
 
         final AtomicReference<String> responseRef = new AtomicReference<>();
         final CountDownLatch latch = new CountDownLatch(1);
@@ -77,12 +80,12 @@ public void onError(ANError anError) {
 
         assertTrue(latch.await(2, SECONDS));
 
-        assertEquals("getResponse", responseRef.get());
+        assertEquals("data", responseRef.get());
     }
 
-    public void testGetRequest404() throws InterruptedException {
+    public void testStringGetRequest404() throws InterruptedException {
 
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("getResponse"));
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
 
         final AtomicReference<String> errorDetailRef = new AtomicReference<>();
         final AtomicReference<String> errorBodyRef = new AtomicReference<>();
@@ -110,28 +113,61 @@ public void onError(ANError anError) {
 
         assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
 
-        assertEquals("getResponse", errorBodyRef.get());
+        assertEquals("data", errorBodyRef.get());
 
         assertEquals(404, errorCodeRef.get().intValue());
 
     }
 
-    public void testPostRequest() throws InterruptedException {
+    @SuppressWarnings("unchecked")
+    public void testSynchronousStringGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<String> response = request.executeForString();
+
+        assertEquals("data", response.getResult());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousStringGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<String> response = request.executeForString();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+    }
+
+    public void testResponseBodyGet() throws InterruptedException {
 
-        server.enqueue(new MockResponse().setBody("postResponse"));
+        server.enqueue(new MockResponse().setBody("data"));
 
         final AtomicReference<String> responseRef = new AtomicReference<>();
         final CountDownLatch latch = new CountDownLatch(1);
 
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
                 .build()
-                .getAsString(new StringRequestListener() {
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
                     @Override
-                    public void onResponse(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
+                    public void onResponse(Response response) {
+                        try {
+                            responseRef.set(response.body().string());
+                            latch.countDown();
+                        } catch (IOException e) {
+                            assertTrue(false);
+                        }
                     }
 
                     @Override
@@ -142,61 +178,88 @@ public void onError(ANError anError) {
 
         assertTrue(latch.await(2, SECONDS));
 
-        assertEquals("postResponse", responseRef.get());
+        assertEquals("data", responseRef.get());
     }
 
+    public void testResponseBodyGet404() throws InterruptedException {
 
-    public void testPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("postResponse"));
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
 
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
         final AtomicReference<String> errorBodyRef = new AtomicReference<>();
         final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
         final CountDownLatch latch = new CountDownLatch(1);
 
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
                 .build()
-                .getAsString(new StringRequestListener() {
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
                     @Override
-                    public void onResponse(String response) {
-                        assertTrue(false);
+                    public void onResponse(Response response) {
+                        try {
+                            errorBodyRef.set(response.body().string());
+                            errorCodeRef.set(response.code());
+                            latch.countDown();
+                        } catch (IOException e) {
+                            assertTrue(false);
+                        }
                     }
 
                     @Override
                     public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
+                        assertTrue(false);
                     }
                 });
 
         assertTrue(latch.await(2, SECONDS));
 
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("postResponse", errorBodyRef.get());
+        assertEquals("data", errorBodyRef.get());
 
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testUploadRequest() throws InterruptedException {
+    @SuppressWarnings("unchecked")
+    public void testSyncResponseBodyGet() throws InterruptedException, IOException {
 
-        server.enqueue(new MockResponse().setBody("uploadTestResponse"));
+        server.enqueue(new MockResponse().setBody("data"));
 
-        final AtomicReference<String> responseRef = new AtomicReference<>();
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<Response> response = request.executeForOkHttpResponse();
+
+        assertEquals("data", response.getResult().body().string());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSyncResponseBodyGet404() throws InterruptedException, IOException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<Response> response = request.executeForOkHttpResponse();
+
+        assertEquals("data", response.getResult().body().string());
+
+        assertEquals(404, response.getResult().code());
+    }
+
+    public void testResponseBodyAndStringGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final AtomicReference<String> responseStringRef = new AtomicReference<>();
         final CountDownLatch latch = new CountDownLatch(1);
 
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
                 .build()
-                .getAsString(new StringRequestListener() {
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
                     @Override
-                    public void onResponse(String response) {
-                        responseRef.set(response);
+                    public void onResponse(Response okHttpResponse, String response) {
+                        responseBodySuccess.set(okHttpResponse.isSuccessful());
+                        responseStringRef.set(response);
                         latch.countDown();
                     }
 
@@ -208,25 +271,25 @@ public void onError(ANError anError) {
 
         assertTrue(latch.await(2, SECONDS));
 
-        assertEquals("uploadTestResponse", responseRef.get());
+        assertTrue(responseBodySuccess.get());
+        assertEquals("data", responseStringRef.get());
     }
 
+    public void testResponseBodyAndStringGet404() throws InterruptedException {
 
-    public void testUploadRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("uploadTestResponse"));
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
 
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
         final AtomicReference<String> errorBodyRef = new AtomicReference<>();
         final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
         final CountDownLatch latch = new CountDownLatch(1);
 
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
                 .build()
-                .getAsString(new StringRequestListener() {
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
                     @Override
-                    public void onResponse(String response) {
+                    public void onResponse(Response okHttpResponse, String response) {
                         assertTrue(false);
                     }
 
@@ -243,36 +306,43 @@ public void onError(ANError anError) {
 
         assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
 
-        assertEquals("uploadTestResponse", errorBodyRef.get());
+        assertEquals("data", errorBodyRef.get());
 
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    @SuppressWarnings("unchecked")
-    public void testSynchronousGetRequest() throws InterruptedException {
+    public void testHeaderGetRequest() throws InterruptedException {
 
-        server.enqueue(new MockResponse().setBody("getResponse"));
+        server.enqueue(new MockResponse().setBody("data"));
 
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<String> response = request.executeForString();
-
-        assertEquals("getResponse", response.getResult());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousPostRequest() throws InterruptedException {
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
 
-        server.enqueue(new MockResponse().setBody("postResponse"));
+        AndroidNetworking.get(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        responseRef.set(response);
+                        responseBodySuccess.set(okHttpResponse.isSuccessful());
+                        headerRef.set(okHttpResponse.request().header("headerKey"));
+                        latch.countDown();
+                    }
 
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
 
-        ANResponse<String> response = request.executeForString();
+        assertTrue(latch.await(2, SECONDS));
 
-        assertEquals("postResponse", response.getResult());
+        assertTrue(responseBodySuccess.get());
+        assertEquals("data", responseRef.get());
+        assertEquals("headerValue", headerRef.get());
     }
-
 }
\ No newline at end of file
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java
new file mode 100644
index 0000000..3fdc4cf
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java
@@ -0,0 +1,487 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.JSONArrayRequestListener;
+import com.androidnetworking.interfaces.JSONObjectRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 09/04/17.
+ */
+
+public class MultipartJSONApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public MultipartJSONApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testJSONObjectMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsJSONObject(new JSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsJSONObject(new JSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArrayMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsJSONArray(new JSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArrayMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsJSONArray(new JSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONObjectMultipartRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<JSONObject> response = request.executeForJSONObject();
+
+        assertEquals("Amit", response.getResult().getString("firstName"));
+
+        assertEquals("Shekhar", response.getResult().getString("lastName"));
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONObjectMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<JSONObject> response = request.executeForJSONObject();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONArrayMultipartRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<JSONArray> response = request.executeForJSONArray();
+
+        JSONObject jsonObject = response.getResult().getJSONObject(0);
+
+        assertEquals("Amit", jsonObject.getString("firstName"));
+
+        assertEquals("Shekhar", jsonObject.getString("lastName"));
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONArrayMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<JSONObject> response = request.executeForJSONArray();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndJSONObjectMultipart() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndJSONObjectMultipart404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndJSONArrayMultipart() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndJSONArrayMultipart404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            headerRef.set(okHttpResponse.request().header("headerKey"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+
+}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java
new file mode 100644
index 0000000..e223381
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java
@@ -0,0 +1,467 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
+import com.androidnetworking.interfaces.ParsedRequestListener;
+import com.androidnetworking.model.User;
+
+import org.json.JSONException;
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 12/04/17.
+ */
+
+public class MultipartObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public MultipartObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testObjectMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectMultipartRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        assertEquals("Amit", response.getResult().firstName);
+
+        assertEquals("Shekhar", response.getResult().lastName);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListMultipartRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        User user = response.getResult().get(0);
+
+        assertEquals("Amit", user.firstName);
+
+        assertEquals("Shekhar", user.lastName);
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndObjectMultipart() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectMultipart404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndObjectListMultipart() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                firstNameRef.set(userList.get(0).firstName);
+                                lastNameRef.set(userList.get(0).lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectListMultipart404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                headerRef.set(okHttpResponse.request().header("headerKey"));
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java
new file mode 100644
index 0000000..af01aa9
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java
@@ -0,0 +1,371 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseListener;
+import com.androidnetworking.interfaces.StringRequestListener;
+import com.androidnetworking.model.User;
+
+import org.junit.Rule;
+
+import java.io.IOException;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 27/03/17.
+ */
+
+public class MultipartStringApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public MultipartStringApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testStringMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsString(new StringRequestListener() {
+                    @Override
+                    public void onResponse(String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getAsString(new StringRequestListener() {
+                    @Override
+                    public void onResponse(String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousStringMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<String> response = request.executeForString();
+
+        assertEquals("data", response.getResult());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<String> response = request.executeForString();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+    }
+
+    public void testResponseBodyMultipart() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        try {
+                            responseRef.set(response.body().string());
+                            latch.countDown();
+                        } catch (IOException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testResponseBodyMultipart404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        try {
+                            errorBodyRef.set(response.body().string());
+                            errorCodeRef.set(response.code());
+                            latch.countDown();
+                        } catch (IOException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSyncResponseBodyMultipart() throws InterruptedException, IOException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<Response> response = request.executeForOkHttpResponse();
+
+        assertEquals("data", response.getResult().body().string());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSyncResponseBodyMultipart404() throws InterruptedException, IOException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build();
+
+        ANResponse<Response> response = request.executeForOkHttpResponse();
+
+        assertEquals("data", response.getResult().body().string());
+
+        assertEquals(404, response.getResult().code());
+    }
+
+    public void testResponseBodyAndStringMultipart() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final AtomicReference<String> responseStringRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        responseBodySuccess.set(okHttpResponse.isSuccessful());
+                        responseStringRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("data", responseStringRef.get());
+    }
+
+    public void testResponseBodyAndStringMultipart404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.upload(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addMultipartParameter("key", "value")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        responseRef.set(response);
+                        responseBodySuccess.set(okHttpResponse.isSuccessful());
+                        headerRef.set(okHttpResponse.request().header("headerKey"));
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("data", responseRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
\ No newline at end of file
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java
new file mode 100644
index 0000000..2f9a244
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java
@@ -0,0 +1,499 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.JSONArrayRequestListener;
+import com.androidnetworking.interfaces.JSONObjectRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 06/04/17.
+ */
+
+public class PostJSONApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public PostJSONApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testJSONObjectPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsJSONObject(new JSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsJSONObject(new JSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArrayPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsJSONArray(new JSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArrayPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsJSONArray(new JSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONObjectPostRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<JSONObject> response = request.executeForJSONObject();
+
+        assertEquals("Amit", response.getResult().getString("firstName"));
+
+        assertEquals("Shekhar", response.getResult().getString("lastName"));
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<JSONObject> response = request.executeForJSONObject();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONArrayPostRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<JSONArray> response = request.executeForJSONArray();
+
+        JSONObject jsonObject = response.getResult().getJSONObject(0);
+
+        assertEquals("Amit", jsonObject.getString("firstName"));
+
+        assertEquals("Shekhar", jsonObject.getString("lastName"));
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousJSONArrayPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<JSONObject> response = request.executeForJSONArray();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndJSONObjectPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndJSONObjectPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndJSONArrayPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndJSONArrayPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            responseBodySuccess.set(okHttpResponse.isSuccessful());
+                            headerRef.set(okHttpResponse.request().header("headerKey"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java
new file mode 100644
index 0000000..2865436
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java
@@ -0,0 +1,480 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
+import com.androidnetworking.interfaces.ParsedRequestListener;
+import com.androidnetworking.model.User;
+
+import org.json.JSONException;
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 11/04/17.
+ */
+
+public class PostObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public PostObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testObjectPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectPostRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        assertEquals("Amit", response.getResult().firstName);
+
+        assertEquals("Shekhar", response.getResult().lastName);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListPostRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        User user = response.getResult().get(0);
+
+        assertEquals("Amit", user.firstName);
+
+        assertEquals("Shekhar", user.lastName);
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndObjectPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndObjectListPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                firstNameRef.set(userList.get(0).firstName);
+                                lastNameRef.set(userList.get(0).lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectListPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                headerRef.set(okHttpResponse.request().header("headerKey"));
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java
new file mode 100644
index 0000000..17b527a
--- /dev/null
+++ b/android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java
@@ -0,0 +1,381 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
+import com.androidnetworking.interfaces.OkHttpResponseListener;
+import com.androidnetworking.interfaces.StringRequestListener;
+
+import org.junit.Rule;
+
+import java.io.IOException;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 25/03/17.
+ */
+
+public class PostStringApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public PostStringApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testStringPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsString(new StringRequestListener() {
+                    @Override
+                    public void onResponse(String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("data", responseRef.get());
+    }
+
+
+    public void testStringPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsString(new StringRequestListener() {
+                    @Override
+                    public void onResponse(String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousStringPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<String> response = request.executeForString();
+
+        assertEquals("data", response.getResult());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousStringPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<String> response = request.executeForString();
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+    }
+
+    public void testResponseBodyPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        try {
+                            responseRef.set(response.body().string());
+                            latch.countDown();
+                        } catch (IOException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testResponseBodyPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        try {
+                            errorBodyRef.set(response.body().string());
+                            errorCodeRef.set(response.code());
+                            latch.countDown();
+                        } catch (IOException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSyncResponseBodyPost() throws InterruptedException, IOException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<Response> response = request.executeForOkHttpResponse();
+
+        assertEquals("data", response.getResult().body().string());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSyncResponseBodyPost404() throws InterruptedException, IOException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<Response> response = request.executeForOkHttpResponse();
+
+        assertEquals("data", response.getResult().body().string());
+
+        assertEquals(404, response.getResult().code());
+    }
+
+    public void testResponseBodyAndStringPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final AtomicReference<String> responseStringRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        responseBodySuccess.set(okHttpResponse.isSuccessful());
+                        responseStringRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("data", responseStringRef.get());
+    }
+
+    public void testResponseBodyAndStringPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
+                    @Override
+                    public void onResponse(Response okHttpResponse, String response) {
+                        responseRef.set(response);
+                        responseBodySuccess.set(okHttpResponse.isSuccessful());
+                        headerRef.set(okHttpResponse.request().header("headerKey"));
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("data", responseRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+}
diff --git a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/ApplicationTest.java b/android-networking/src/androidTest/java/com/androidnetworking/model/User.java
similarity index 68%
rename from jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/ApplicationTest.java
rename to android-networking/src/androidTest/java/com/androidnetworking/model/User.java
index a422a0b..4337a8f 100644
--- a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/ApplicationTest.java
+++ b/android-networking/src/androidTest/java/com/androidnetworking/model/User.java
@@ -17,16 +17,15 @@
  *
  */
 
-package com.jacksonandroidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
+package com.androidnetworking.model;
 
 /**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ * Created by amitshekhar on 10/04/17.
  */
-public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
-}
\ No newline at end of file
+
+public class User {
+
+    public String firstName;
+    public String lastName;
+
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java b/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
index 290bfc6..84c50bf 100644
--- a/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
+++ b/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
@@ -24,8 +24,8 @@
 import com.androidnetworking.common.ANRequest;
 import com.androidnetworking.common.ConnectionClassManager;
 import com.androidnetworking.common.ConnectionQuality;
-import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
 import com.androidnetworking.core.Core;
+import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
 import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
 import com.androidnetworking.interfaces.Parser;
 import com.androidnetworking.internal.ANImageLoader;
@@ -131,6 +131,16 @@ public static void removeConnectionQualityChangeListener() {
         return new ANRequest.HeadRequestBuilder(url);
     }
 
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public static ANRequest.OptionsRequestBuilder options(String url) {
+        return new ANRequest.OptionsRequestBuilder(url);
+    }
+
     /**
      * Method to make POST request
      *
@@ -193,6 +203,17 @@ public static void removeConnectionQualityChangeListener() {
         return new ANRequest.MultiPartBuilder(url);
     }
 
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public static ANRequest.DynamicRequestBuilder request(String url, int method) {
+        return new ANRequest.DynamicRequestBuilder(url, method);
+    }
+
     /**
      * Method to cancel requests with the given tag
      *
@@ -299,6 +320,16 @@ public static void setParserFactory(Parser.Factory parserFactory) {
         ParseUtil.setParserFactory(parserFactory);
     }
 
+    /**
+     * Method to find if the request is running or not
+     *
+     * @param tag The tag with which request running status is to be checked
+     * @return The request is running or not
+     */
+    public static boolean isRequestRunning(Object tag) {
+        return ANRequestQueue.getInstance().isRequestRunning(tag);
+    }
+
     /**
      * Shuts AndroidNetworking down
      */
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java b/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
index cafda96..89d36aa 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
@@ -28,9 +28,9 @@
     public static final String RESPONSE_FROM_SERVER_ERROR = "responseFromServerError";
     public static final String REQUEST_CANCELLED_ERROR = "requestCancelledError";
     public static final String PARSE_ERROR = "parseError";
-    public static final String NETWORK_ON_MAIN_THREAD_ERROR = "networkOnMainThreadError";
     public static final String PREFETCH = "prefetch";
     public static final String FAST_ANDROID_NETWORKING = "FastAndroidNetworking";
     public static final String USER_AGENT = "User-Agent";
     public static final String SUCCESS = "success";
+    public static final String OPTIONS = "OPTIONS";
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
index 9a18351..d85b1db 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
@@ -40,6 +40,8 @@
 import com.androidnetworking.interfaces.UploadProgressListener;
 import com.androidnetworking.internal.ANRequestQueue;
 import com.androidnetworking.internal.SynchronousCall;
+import com.androidnetworking.model.MultipartFileBody;
+import com.androidnetworking.model.MultipartStringBody;
 import com.androidnetworking.utils.ParseUtil;
 import com.androidnetworking.utils.Utils;
 import com.google.gson.internal.$Gson$Types;
@@ -50,9 +52,11 @@
 
 import java.io.File;
 import java.lang.reflect.Type;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
@@ -84,13 +88,13 @@
     private int sequenceNumber;
     private Object mTag;
     private ResponseType mResponseType;
-    private HashMap<String, String> mHeadersMap = new HashMap<>();
+    private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
     private HashMap<String, String> mBodyParameterMap = new HashMap<>();
     private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-    private HashMap<String, String> mMultiPartParameterMap = new HashMap<>();
-    private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+    private HashMap<String, MultipartStringBody> mMultiPartParameterMap = new HashMap<>();
+    private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
     private HashMap<String, String> mPathParameterMap = new HashMap<>();
-    private HashMap<String, File> mMultiPartFileMap = new HashMap<>();
+    private HashMap<String, List<MultipartFileBody>> mMultiPartFileMap = new HashMap<>();
     private String mDirPath;
     private String mFileName;
     private String mApplicationJsonString = null;
@@ -109,6 +113,7 @@
     private int mProgress;
     private boolean isCancelled;
     private boolean isDelivered;
+    private boolean isRunning;
     private int mPercentageThresholdForCancelling = 0;
     private JSONArrayRequestListener mJSONArrayRequestListener;
     private JSONObjectRequestListener mJSONObjectRequestListener;
@@ -405,8 +410,17 @@ public String getUrl() {
             tempUrl = tempUrl.replace("{" + entry.getKey() + "}", String.valueOf(entry.getValue()));
         }
         HttpUrl.Builder urlBuilder = HttpUrl.parse(tempUrl).newBuilder();
-        for (HashMap.Entry<String, String> entry : mQueryParameterMap.entrySet()) {
-            urlBuilder.addQueryParameter(entry.getKey(), entry.getValue());
+        if (mQueryParameterMap != null) {
+            Set<Map.Entry<String, List<String>>> entries = mQueryParameterMap.entrySet();
+            for (Map.Entry<String, List<String>> entry : entries) {
+                String name = entry.getKey();
+                List<String> list = entry.getValue();
+                if (list != null) {
+                    for (String value : list) {
+                        urlBuilder.addQueryParameter(name, value);
+                    }
+                }
+            }
         }
         return urlBuilder.build().toString();
     }
@@ -537,6 +551,7 @@ public void cancel(boolean forceCancel) {
             if (forceCancel || mPercentageThresholdForCancelling == 0
                     || mProgress < mPercentageThresholdForCancelling) {
                 isCancelled = true;
+                isRunning = false;
                 if (call != null) {
                     call.cancel();
                 }
@@ -556,6 +571,14 @@ public boolean isCanceled() {
         return isCancelled;
     }
 
+    public boolean isRunning() {
+        return isRunning;
+    }
+
+    public void setRunning(boolean running) {
+        isRunning = running;
+    }
+
     public Call getCall() {
         return call;
     }
@@ -574,7 +597,7 @@ public void setFuture(Future future) {
 
     public void destroy() {
         mJSONArrayRequestListener = null;
-        mJSONArrayRequestListener = null;
+        mJSONObjectRequestListener = null;
         mStringRequestListener = null;
         mBitmapRequestListener = null;
         mParsedRequestListener = null;
@@ -828,22 +851,34 @@ public RequestBody getRequestBody() {
     }
 
     public RequestBody getMultiPartRequestBody() {
-        MultipartBody.Builder builder = new MultipartBody
-                .Builder()
+        MultipartBody.Builder builder = new MultipartBody.Builder()
                 .setType((customMediaType == null) ? MultipartBody.FORM : customMediaType);
         try {
-            for (HashMap.Entry<String, String> entry : mMultiPartParameterMap.entrySet()) {
+            for (HashMap.Entry<String, MultipartStringBody> entry : mMultiPartParameterMap.entrySet()) {
+                MultipartStringBody stringBody = entry.getValue();
+                MediaType mediaType = null;
+                if (stringBody.contentType != null) {
+                    mediaType = MediaType.parse(stringBody.contentType);
+                }
                 builder.addPart(Headers.of("Content-Disposition",
                         "form-data; name=\"" + entry.getKey() + "\""),
-                        RequestBody.create(null, entry.getValue()));
+                        RequestBody.create(mediaType, stringBody.value));
             }
-            for (HashMap.Entry<String, File> entry : mMultiPartFileMap.entrySet()) {
-                String fileName = entry.getValue().getName();
-                RequestBody fileBody = RequestBody.create(MediaType.parse(Utils.getMimeType(fileName)),
-                        entry.getValue());
-                builder.addPart(Headers.of("Content-Disposition",
-                        "form-data; name=\"" + entry.getKey() + "\"; filename=\"" + fileName + "\""),
-                        fileBody);
+            for (HashMap.Entry<String, List<MultipartFileBody>> entry : mMultiPartFileMap.entrySet()) {
+                List<MultipartFileBody> fileBodies = entry.getValue();
+                for (MultipartFileBody fileBody : fileBodies) {
+                    String fileName = fileBody.file.getName();
+                    MediaType mediaType;
+                    if (fileBody.contentType != null) {
+                        mediaType = MediaType.parse(fileBody.contentType);
+                    } else {
+                        mediaType = MediaType.parse(Utils.getMimeType(fileName));
+                    }
+                    RequestBody requestBody = RequestBody.create(mediaType, fileBody.file);
+                    builder.addPart(Headers.of("Content-Disposition",
+                            "form-data; name=\"" + entry.getKey() + "\"; filename=\"" + fileName + "\""),
+                            requestBody);
+                }
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -854,8 +889,17 @@ public RequestBody getMultiPartRequestBody() {
     public Headers getHeaders() {
         Headers.Builder builder = new Headers.Builder();
         try {
-            for (HashMap.Entry<String, String> entry : mHeadersMap.entrySet()) {
-                builder.add(entry.getKey(), entry.getValue());
+            if (mHeadersMap != null) {
+                Set<Map.Entry<String, List<String>>> entries = mHeadersMap.entrySet();
+                for (Map.Entry<String, List<String>> entry : entries) {
+                    String name = entry.getKey();
+                    List<String> list = entry.getValue();
+                    if (list != null) {
+                        for (String value : list) {
+                            builder.add(name, value);
+                        }
+                    }
+                }
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -870,6 +914,13 @@ public HeadRequestBuilder(String url) {
         }
     }
 
+    public static class OptionsRequestBuilder extends GetRequestBuilder {
+
+        public OptionsRequestBuilder(String url) {
+            super(url, Method.OPTIONS);
+        }
+    }
+
     public static class GetRequestBuilder<T extends GetRequestBuilder> implements RequestBuilder {
         private Priority mPriority = Priority.MEDIUM;
         private int mMethod = Method.GET;
@@ -880,8 +931,8 @@ public HeadRequestBuilder(String url) {
         private int mMaxWidth;
         private int mMaxHeight;
         private ImageView.ScaleType mScaleType;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
@@ -912,14 +963,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -927,7 +987,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -960,14 +1020,23 @@ public T addPathParameter(Object object) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -975,7 +1044,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1081,6 +1150,13 @@ public PatchRequestBuilder(String url) {
         }
     }
 
+    public static class DynamicRequestBuilder extends PostRequestBuilder {
+
+        public DynamicRequestBuilder(String url, int method) {
+            super(url, method);
+        }
+    }
+
     public static class PostRequestBuilder<T extends PostRequestBuilder> implements RequestBuilder {
 
         private Priority mPriority = Priority.MEDIUM;
@@ -1091,10 +1167,10 @@ public PatchRequestBuilder(String url) {
         private String mStringBody = null;
         private byte[] mByte = null;
         private File mFile = null;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
         private HashMap<String, String> mBodyParameterMap = new HashMap<>();
         private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private CacheControl mCacheControl;
         private Executor mExecutor;
@@ -1126,14 +1202,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1141,7 +1226,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1174,14 +1259,23 @@ public T addPathParameter(Object object) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1189,7 +1283,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1339,8 +1433,8 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
         private String mDirPath;
         private String mFileName;
@@ -1370,14 +1464,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1385,7 +1488,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1394,14 +1497,23 @@ public T addHeaders(Object object) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1409,7 +1521,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1503,11 +1615,11 @@ public ANRequest build() {
         private Priority mPriority = Priority.MEDIUM;
         private String mUrl;
         private Object mTag;
-        private HashMap<String, String> mHeadersMap = new HashMap<>();
-        private HashMap<String, String> mMultiPartParameterMap = new HashMap<>();
-        private HashMap<String, String> mQueryParameterMap = new HashMap<>();
+        private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
+        private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
         private HashMap<String, String> mPathParameterMap = new HashMap<>();
-        private HashMap<String, File> mMultiPartFileMap = new HashMap<>();
+        private HashMap<String, MultipartStringBody> mMultiPartParameterMap = new HashMap<>();
+        private HashMap<String, List<MultipartFileBody>> mMultiPartFileMap = new HashMap<>();
         private CacheControl mCacheControl;
         private int mPercentageThresholdForCancelling = 0;
         private Executor mExecutor;
@@ -1533,14 +1645,23 @@ public T setTag(Object tag) {
 
         @Override
         public T addQueryParameter(String key, String value) {
-            mQueryParameterMap.put(key, value);
+            List<String> list = mQueryParameterMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mQueryParameterMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addQueryParameter(Map<String, String> queryParameterMap) {
             if (queryParameterMap != null) {
-                mQueryParameterMap.putAll(queryParameterMap);
+                for (HashMap.Entry<String, String> entry : queryParameterMap.entrySet()) {
+                    addQueryParameter(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1548,7 +1669,7 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
         @Override
         public T addQueryParameter(Object object) {
             if (object != null) {
-                mQueryParameterMap.putAll(ParseUtil
+                return addQueryParameter(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1581,14 +1702,23 @@ public T addPathParameter(Object object) {
 
         @Override
         public T addHeaders(String key, String value) {
-            mHeadersMap.put(key, value);
+            List<String> list = mHeadersMap.get(key);
+            if (list == null) {
+                list = new ArrayList<>();
+                mHeadersMap.put(key, list);
+            }
+            if (!list.contains(value)) {
+                list.add(value);
+            }
             return (T) this;
         }
 
         @Override
         public T addHeaders(Map<String, String> headerMap) {
             if (headerMap != null) {
-                mHeadersMap.putAll(headerMap);
+                for (HashMap.Entry<String, String> entry : headerMap.entrySet()) {
+                    addHeaders(entry.getKey(), entry.getValue());
+                }
             }
             return (T) this;
         }
@@ -1596,7 +1726,7 @@ public T addHeaders(Map<String, String> headerMap) {
         @Override
         public T addHeaders(Object object) {
             if (object != null) {
-                mHeadersMap.putAll(ParseUtil
+                return addHeaders(ParseUtil
                         .getParserFactory()
                         .getStringMap(object));
             }
@@ -1652,34 +1782,100 @@ public T setUserAgent(String userAgent) {
         }
 
         public T addMultipartParameter(String key, String value) {
-            mMultiPartParameterMap.put(key, value);
+            return addMultipartParameter(key, value, null);
+        }
+
+        public T addMultipartParameter(String key, String value, String contentType) {
+            MultipartStringBody stringBody = new MultipartStringBody(value, contentType);
+            mMultiPartParameterMap.put(key, stringBody);
             return (T) this;
         }
 
         public T addMultipartParameter(Map<String, String> multiPartParameterMap) {
+            return addMultipartParameter(multiPartParameterMap, null);
+        }
+
+        public T addMultipartParameter(Map<String, String> multiPartParameterMap, String contentType) {
             if (multiPartParameterMap != null) {
-                mMultiPartParameterMap.putAll(multiPartParameterMap);
+                Map<String, MultipartStringBody> parameterMap = new HashMap<>();
+                for (HashMap.Entry<String, String> entry : multiPartParameterMap.entrySet()) {
+                    MultipartStringBody stringBody = new MultipartStringBody(entry.getValue(), contentType);
+                    parameterMap.put(entry.getKey(), stringBody);
+                }
+                mMultiPartParameterMap.putAll(parameterMap);
             }
             return (T) this;
         }
 
         public T addMultipartParameter(Object object) {
+            return addMultipartParameter(object, null);
+        }
+
+        public T addMultipartParameter(Object object, String contentType) {
             if (object != null) {
-                mMultiPartParameterMap.putAll(ParseUtil
+                Map<String, String> parameterMap = ParseUtil
                         .getParserFactory()
-                        .getStringMap(object));
+                        .getStringMap(object);
+                addMultipartParameter(parameterMap, contentType);
             }
             return (T) this;
         }
 
         public T addMultipartFile(String key, File file) {
-            mMultiPartFileMap.put(key, file);
+            return addMultipartFile(key, file, null);
+        }
+
+        public T addMultipartFile(String key, File file, String contentType) {
+            MultipartFileBody fileBody = new MultipartFileBody(file, contentType);
+            addMultipartFileWithKey(key, fileBody);
             return (T) this;
         }
 
         public T addMultipartFile(Map<String, File> multiPartFileMap) {
+            return addMultipartFile(multiPartFileMap, null);
+        }
+
+        public T addMultipartFile(Map<String, File> multiPartFileMap, String contentType) {
             if (multiPartFileMap != null) {
-                mMultiPartFileMap.putAll(multiPartFileMap);
+                for (HashMap.Entry<String, File> entry : multiPartFileMap.entrySet()) {
+                    MultipartFileBody fileBody = new MultipartFileBody(entry.getValue(), contentType);
+                    addMultipartFileWithKey(entry.getKey(), fileBody);
+                }
+            }
+            return (T) this;
+        }
+
+        public T addMultipartFileList(String key, List<File> files) {
+            return addMultipartFileList(key, files, null);
+        }
+
+        public T addMultipartFileList(String key, List<File> files, String contentType) {
+            if (files != null) {
+                for (File file : files) {
+                    MultipartFileBody fileBody = new MultipartFileBody(file, contentType);
+                    addMultipartFileWithKey(key, fileBody);
+                }
+            }
+            return (T) this;
+        }
+
+        public T addMultipartFileList(Map<String, List<File>> multiPartFileMap) {
+            return addMultipartFileList(multiPartFileMap, null);
+        }
+
+        public T addMultipartFileList(Map<String, List<File>> multiPartFileMap, String contentType) {
+            if (multiPartFileMap != null) {
+                Map<String, List<MultipartFileBody>> parameterMap = new HashMap<>();
+                for (HashMap.Entry<String, List<File>> entry : multiPartFileMap.entrySet()) {
+                    List<File> files = entry.getValue();
+                    List<MultipartFileBody> fileBodies = new ArrayList<>();
+                    for (File file : files) {
+                        MultipartFileBody fileBody = new MultipartFileBody(file, contentType);
+                        fileBodies.add(fileBody);
+                    }
+                    parameterMap.put(entry.getKey(), fileBodies);
+                }
+                mMultiPartFileMap.putAll(parameterMap);
             }
             return (T) this;
         }
@@ -1694,6 +1890,15 @@ public T setContentType(String contentType) {
             return (T) this;
         }
 
+        private void addMultipartFileWithKey(String key, MultipartFileBody fileBody) {
+            List<MultipartFileBody> fileBodies = mMultiPartFileMap.get(key);
+            if (fileBodies == null) {
+                fileBodies = new ArrayList<>();
+            }
+            fileBodies.add(fileBody);
+            mMultiPartFileMap.put(key, fileBodies);
+        }
+
         public ANRequest build() {
             return new ANRequest(this);
         }
diff --git a/android-networking/src/main/java/com/androidnetworking/common/Method.java b/android-networking/src/main/java/com/androidnetworking/common/Method.java
index 1e05a17..65da1b5 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/Method.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/Method.java
@@ -27,4 +27,5 @@
     int DELETE = 3;
     int HEAD = 4;
     int PATCH = 5;
+    int OPTIONS = 6;
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/common/Priority.java b/android-networking/src/main/java/com/androidnetworking/common/Priority.java
index 45405f1..3b37a5a 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/Priority.java
+++ b/android-networking/src/main/java/com/androidnetworking/common/Priority.java
@@ -49,6 +49,6 @@
     /**
      * Highest priority level. Used for data that are required instantly(mainly for emergency).
      */
-    IMMEDIATE;
+    IMMEDIATE
 
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java b/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
index b2cd8a6..ed7ff76 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
@@ -21,9 +21,10 @@
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.core.Core;
 
-import java.util.HashSet;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -31,8 +32,8 @@
  */
 public class ANRequestQueue {
 
-    private final static String TAG = ANRequestQueue.class.getSimpleName();
-    private final Set<ANRequest> mCurrentRequests = new HashSet<>();
+    private final Set<ANRequest> mCurrentRequests =
+            Collections.newSetFromMap(new ConcurrentHashMap<ANRequest, Boolean>());
     private AtomicInteger mSequenceGenerator = new AtomicInteger();
     private static ANRequestQueue sInstance = null;
 
@@ -55,40 +56,35 @@ public static ANRequestQueue getInstance() {
         boolean apply(ANRequest request);
     }
 
-
     private void cancel(RequestFilter filter, boolean forceCancel) {
-        synchronized (mCurrentRequests) {
-            try {
-                for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
-                    ANRequest request = iterator.next();
-                    if (filter.apply(request)) {
-                        request.cancel(forceCancel);
-                        if (request.isCanceled()) {
-                            request.destroy();
-                            iterator.remove();
-                        }
+        try {
+            for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
+                ANRequest request = iterator.next();
+                if (filter.apply(request)) {
+                    request.cancel(forceCancel);
+                    if (request.isCanceled()) {
+                        request.destroy();
+                        iterator.remove();
                     }
                 }
-            } catch (Exception e) {
-                e.printStackTrace();
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
     public void cancelAll(boolean forceCancel) {
-        synchronized (mCurrentRequests) {
-            try {
-                for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
-                    ANRequest request = iterator.next();
-                    request.cancel(forceCancel);
-                    if (request.isCanceled()) {
-                        request.destroy();
-                        iterator.remove();
-                    }
+        try {
+            for (Iterator<ANRequest> iterator = mCurrentRequests.iterator(); iterator.hasNext(); ) {
+                ANRequest request = iterator.next();
+                request.cancel(forceCancel);
+                if (request.isCanceled()) {
+                    request.destroy();
+                    iterator.remove();
                 }
-            } catch (Exception e) {
-                e.printStackTrace();
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
@@ -100,12 +96,7 @@ public void cancelRequestWithGivenTag(final Object tag, final boolean forceCance
             cancel(new RequestFilter() {
                 @Override
                 public boolean apply(ANRequest request) {
-                    if (request.getTag() instanceof String && tag instanceof String) {
-                        final String tempRequestTag = (String) request.getTag();
-                        final String tempTag = (String) tag;
-                        return tempRequestTag.equals(tempTag);
-                    }
-                    return request.getTag().equals(tag);
+                    return isRequestWithTheGivenTag(request, tag);
                 }
             }, forceCancel);
         } catch (Exception e) {
@@ -118,12 +109,10 @@ public int getSequenceNumber() {
     }
 
     public ANRequest addRequest(ANRequest request) {
-        synchronized (mCurrentRequests) {
-            try {
-                mCurrentRequests.add(request);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
+        try {
+            mCurrentRequests.add(request);
+        } catch (Exception e) {
+            e.printStackTrace();
         }
         try {
             request.setSequenceNumber(getSequenceNumber());
@@ -145,12 +134,36 @@ public ANRequest addRequest(ANRequest request) {
     }
 
     public void finish(ANRequest request) {
-        synchronized (mCurrentRequests) {
-            try {
-                mCurrentRequests.remove(request);
-            } catch (Exception e) {
-                e.printStackTrace();
+        try {
+            mCurrentRequests.remove(request);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public boolean isRequestRunning(Object tag) {
+        try {
+            for (ANRequest request : mCurrentRequests) {
+                if (isRequestWithTheGivenTag(request, tag) && request.isRunning()) {
+                    return true;
+                }
             }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+        return false;
     }
+
+    private boolean isRequestWithTheGivenTag(ANRequest request, Object tag) {
+        if (request.getTag() == null) {
+            return false;
+        }
+        if (request.getTag() instanceof String && tag instanceof String) {
+            final String tempRequestTag = (String) request.getTag();
+            final String tempTag = (String) tag;
+            return tempRequestTag.equals(tempTag);
+        }
+        return request.getTag().equals(tag);
+    }
+
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java b/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
index 5951ef6..3e1e2a9 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
@@ -30,20 +30,20 @@
  */
 public class DownloadProgressHandler extends Handler {
 
-    private final DownloadProgressListener mDownloadProgressListenerWeakRef;
+    private final DownloadProgressListener mDownloadProgressListener;
 
     public DownloadProgressHandler(DownloadProgressListener downloadProgressListener) {
         super(Looper.getMainLooper());
-        mDownloadProgressListenerWeakRef = downloadProgressListener;
+        mDownloadProgressListener = downloadProgressListener;
     }
 
     @Override
     public void handleMessage(Message msg) {
         switch (msg.what) {
             case ANConstants.UPDATE:
-                if (mDownloadProgressListenerWeakRef != null) {
+                if (mDownloadProgressListener != null) {
                     final Progress progress = (Progress) msg.obj;
-                    mDownloadProgressListenerWeakRef.onProgress(progress.currentBytes, progress.totalBytes);
+                    mDownloadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
                 }
                 break;
             default:
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java b/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
index ee7cfb0..43c539b 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
@@ -27,9 +27,9 @@
 import com.androidnetworking.common.ANConstants;
 import com.androidnetworking.common.ANRequest;
 import com.androidnetworking.common.ConnectionClassManager;
+import com.androidnetworking.error.ANError;
 import com.androidnetworking.interceptors.HttpLoggingInterceptor;
 import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
-import com.androidnetworking.error.ANError;
 import com.androidnetworking.utils.Utils;
 
 import java.io.File;
@@ -46,6 +46,7 @@
 import static com.androidnetworking.common.Method.DELETE;
 import static com.androidnetworking.common.Method.GET;
 import static com.androidnetworking.common.Method.HEAD;
+import static com.androidnetworking.common.Method.OPTIONS;
 import static com.androidnetworking.common.Method.PATCH;
 import static com.androidnetworking.common.Method.POST;
 import static com.androidnetworking.common.Method.PUT;
@@ -91,6 +92,10 @@ public static Response performSimpleRequest(ANRequest request) throws ANError {
                     builder = builder.head();
                     break;
                 }
+                case OPTIONS: {
+                    builder = builder.method(ANConstants.OPTIONS, null);
+                    break;
+                }
                 case PATCH: {
                     requestBody = request.getRequestBody();
                     builder = builder.patch(requestBody);
@@ -314,4 +319,4 @@ public static void enableLogging(Level level) {
                 .build();
     }
 
-}
+}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java b/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
index b784b9c..6cb3f73 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
@@ -49,6 +49,7 @@ public InternalRunnable(ANRequest request) {
 
     @Override
     public void run() {
+        request.setRunning(true);
         switch (request.getRequestType()) {
             case SIMPLE:
                 executeSimpleRequest();
@@ -60,6 +61,7 @@ public void run() {
                 executeUploadRequest();
                 break;
         }
+        request.setRunning(false);
     }
 
     private void executeSimpleRequest() {
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java b/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
index 7e4f61c..76acec4 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
@@ -83,4 +83,4 @@ public void write(Buffer source, long byteCount) throws IOException {
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java b/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
index 9dd8101..132197e 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
@@ -80,7 +80,7 @@ private SynchronousCall() {
         } catch (ANError se) {
             return new ANResponse<>(Utils.getErrorForConnection(new ANError(se)));
         } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         } finally {
             SourceCloseUtil.close(okHttpResponse, request);
         }
@@ -105,7 +105,7 @@ private SynchronousCall() {
         } catch (ANError se) {
             return new ANResponse<>(Utils.getErrorForConnection(new ANError(se)));
         } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         }
     }
 
@@ -135,7 +135,7 @@ private SynchronousCall() {
         } catch (ANError se) {
             return new ANResponse<>(Utils.getErrorForConnection(se));
         } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         } finally {
             SourceCloseUtil.close(okHttpResponse, request);
         }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java b/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
index e19f7f0..f623a5f 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
+++ b/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
@@ -30,20 +30,20 @@
  */
 public class UploadProgressHandler extends Handler {
 
-    private final UploadProgressListener mUploadProgressListenerWeakRef;
+    private final UploadProgressListener mUploadProgressListener;
 
     public UploadProgressHandler(UploadProgressListener uploadProgressListener) {
         super(Looper.getMainLooper());
-        mUploadProgressListenerWeakRef = uploadProgressListener;
+        mUploadProgressListener = uploadProgressListener;
     }
 
     @Override
     public void handleMessage(Message msg) {
         switch (msg.what) {
             case ANConstants.UPDATE:
-                if (mUploadProgressListenerWeakRef != null) {
+                if (mUploadProgressListener != null) {
                     final Progress progress = (Progress) msg.obj;
-                    mUploadProgressListenerWeakRef.onProgress(progress.currentBytes, progress.totalBytes);
+                    mUploadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
                 }
                 break;
             default:
diff --git a/android-networking/src/main/java/com/androidnetworking/model/MultipartFileBody.java b/android-networking/src/main/java/com/androidnetworking/model/MultipartFileBody.java
new file mode 100644
index 0000000..7da6c94
--- /dev/null
+++ b/android-networking/src/main/java/com/androidnetworking/model/MultipartFileBody.java
@@ -0,0 +1,15 @@
+package com.androidnetworking.model;
+
+import java.io.File;
+
+public class MultipartFileBody {
+
+    public final File file;
+    public final String contentType;
+
+    public MultipartFileBody(File file, String contentType) {
+        this.file = file;
+        this.contentType = contentType;
+    }
+
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/model/MultipartStringBody.java b/android-networking/src/main/java/com/androidnetworking/model/MultipartStringBody.java
new file mode 100644
index 0000000..005b69f
--- /dev/null
+++ b/android-networking/src/main/java/com/androidnetworking/model/MultipartStringBody.java
@@ -0,0 +1,13 @@
+package com.androidnetworking.model;
+
+public class MultipartStringBody {
+
+    public final String value;
+    public final String contentType;
+
+    public MultipartStringBody(String value, String contentType) {
+        this.value = value;
+        this.contentType = contentType;
+    }
+
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/utils/Utils.java b/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
index 416e978..588cba8 100644
--- a/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
+++ b/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
@@ -20,8 +20,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.os.Build;
-import android.os.NetworkOnMainThreadException;
 import android.widget.ImageView;
 
 import com.androidnetworking.common.ANConstants;
@@ -237,15 +235,4 @@ public static ANError getErrorForParse(ANError error) {
         return error;
     }
 
-    public static ANError getErrorForNetworkOnMainThreadOrConnection(Exception e) {
-        ANError error = new ANError(e);
-        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
-                && e instanceof NetworkOnMainThreadException) {
-            error.setErrorDetail(ANConstants.NETWORK_ON_MAIN_THREAD_ERROR);
-        } else {
-            error.setErrorDetail(ANConstants.CONNECTION_ERROR);
-        }
-        error.setErrorCode(0);
-        return error;
-    }
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java b/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
index bef56a5..3286ddb 100644
--- a/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
+++ b/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
@@ -18,6 +18,7 @@
 package com.androidnetworking.widget;
 
 import android.content.Context;
+import android.support.v7.widget.AppCompatImageView;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.ViewGroup;
@@ -29,7 +30,7 @@
 /**
  * Created by amitshekhar on 23/03/16.
  */
-public class ANImageView extends ImageView {
+public class ANImageView extends AppCompatImageView {
 
     private String mUrl;
 
@@ -67,7 +68,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
-        ScaleType scaleType = getScaleType();
+        ImageView.ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {
diff --git a/android-networking/upload.gradle b/android-networking/upload.gradle
index 7580a50..0dbf33f 100755
--- a/android-networking/upload.gradle
+++ b/android-networking/upload.gradle
@@ -22,7 +22,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.2'
 
 install {
     repositories.mavenInstaller {
diff --git a/app/build.gradle b/app/build.gradle
index 879f2bb..e2a4b59 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -18,13 +18,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
         applicationId "com.networking"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -38,7 +38,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'com.android.support:appcompat-v7:23.2.1'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
     compile project(':android-networking')
 }
diff --git a/app/src/main/java/com/networking/ApiTestActivity.java b/app/src/main/java/com/networking/ApiTestActivity.java
index 509fb59..16c5e3b 100644
--- a/app/src/main/java/com/networking/ApiTestActivity.java
+++ b/app/src/main/java/com/networking/ApiTestActivity.java
@@ -433,9 +433,11 @@ public void onError(ANError error) {
     }
 
     public void uploadImage(final View view) {
+        final String key = "image";
+        final File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png");
         AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
                 .setPriority(Priority.MEDIUM)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
+                .addMultipartFile(key, file)
                 .setTag(this)
                 .build()
                 .setAnalyticsListener(new AnalyticsListener() {
@@ -1107,6 +1109,22 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
         }).start();
     }
 
+    public void checkOptionsRequest(View view) {
+        AndroidNetworking.options("https://api.github.com/square/okhttp/issues")
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        Log.d(TAG, "response : " + response.headers().toString());
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        Utils.logError(TAG, anError);
+                    }
+                });
+    }
+
     public void getCurrentConnectionQuality(View view) {
         Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
     }
diff --git a/app/src/main/java/com/networking/MainActivity.java b/app/src/main/java/com/networking/MainActivity.java
index 15b4881..c5a0bc3 100644
--- a/app/src/main/java/com/networking/MainActivity.java
+++ b/app/src/main/java/com/networking/MainActivity.java
@@ -148,7 +148,9 @@ public void makeRequests(View view) {
     }
 
     public void cancelAllRequests(View view) {
+        Log.d(TAG, "isRequestRunning before cancel : " + AndroidNetworking.isRequestRunning(this));
         AndroidNetworking.cancel(this);
+        Log.d(TAG, "isRequestRunning after cancel : " + AndroidNetworking.isRequestRunning(this));
     }
 
     public void loadImageDirect(View view) {
diff --git a/app/src/main/java/com/networking/OkHttpResponseTestActivity.java b/app/src/main/java/com/networking/OkHttpResponseTestActivity.java
index b7b8b31..fc82c94 100644
--- a/app/src/main/java/com/networking/OkHttpResponseTestActivity.java
+++ b/app/src/main/java/com/networking/OkHttpResponseTestActivity.java
@@ -1059,6 +1059,22 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
         }).start();
     }
 
+    public void checkOptionsRequest(View view) {
+        AndroidNetworking.options("https://api.github.com/square/okhttp/issues")
+                .build()
+                .getAsOkHttpResponse(new OkHttpResponseListener() {
+                    @Override
+                    public void onResponse(Response response) {
+                        Log.d(TAG, "response : " + response.headers().toString());
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        Utils.logError(TAG, anError);
+                    }
+                });
+    }
+
     public void getCurrentConnectionQuality(View view) {
         Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
     }
diff --git a/app/src/main/res/layout/activity_api_test.xml b/app/src/main/res/layout/activity_api_test.xml
index f1d0655..dd4f217 100644
--- a/app/src/main/res/layout/activity_api_test.xml
+++ b/app/src/main/res/layout/activity_api_test.xml
@@ -306,6 +306,19 @@
             android:layout_height="wrap_content"
             android:layout_gravity="center" />
 
+        <Button
+            android:id="@+id/checkOptionsRequest"
+            android:layout_width="match_parent"
+            android:layout_height="48dp"
+            android:layout_margin="8dp"
+            android:onClick="checkOptionsRequest"
+            android:text="checkOptionsRequest" />
+
+        <ProgressBar
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center" />
+
         <Button
             android:id="@+id/getCurrentConnectionQuality"
             android:layout_width="match_parent"
diff --git a/build.gradle b/build.gradle
index a1c0b49..b5ef45f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -20,9 +20,10 @@
 buildscript {
     repositories {
         jcenter()
+        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.android.tools.build:gradle:3.1.0'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
         // NOTE: Do not place your application dependencies here; they belong
@@ -33,9 +34,30 @@ buildscript {
 allprojects {
     repositories {
         jcenter()
+        google()
     }
 }
 
 task clean(type: Delete) {
     delete rootProject.buildDir
 }
+
+ext {
+    // App tools version
+    compileSdkVersion = 27
+    minSdkVersion = 14
+    targetSdkVersion = 27
+    buildToolsVersion = "27.0.3"
+
+    // App dependencies versions
+    okHttp3Version = "3.10.0"
+    gsonVersion = "2.8.2"
+    jacksonVersion = "2.8.2"
+    rxJavaVersion = "1.3.8"
+    rxJavaAndroidVersion = "1.2.1"
+    rxJava2Version = "2.1.12"
+    rxJava2AndroidVersion = "2.0.2"
+    jUnitVersion = "4.12"
+    mockWebServerVersion = "3.10.0"
+    supportAppCompatVersion = "27.1.1"
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f806ecb..b311303 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Sep 14 13:42:33 GMT+05:30 2016
+#Thu Apr 12 21:48:48 IST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
diff --git a/jackson-android-networking/build.gradle b/jackson-android-networking/build.gradle
index 28cc2cb..7e75d80 100644
--- a/jackson-android-networking/build.gradle
+++ b/jackson-android-networking/build.gradle
@@ -20,12 +20,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -35,12 +35,25 @@ android {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
+    packagingOptions {
+        exclude 'META-INF/DEPENDENCIES.txt'
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'META-INF/NOTICE.txt'
+        exclude 'META-INF/NOTICE'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/DEPENDENCIES'
+        exclude 'META-INF/notice.txt'
+        exclude 'META-INF/license.txt'
+        exclude 'META-INF/dependencies.txt'
+        exclude 'META-INF/LGPL2.1'
+    }
 }
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.2'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
+    compile "com.fasterxml.jackson.core:jackson-databind:$rootProject.ext.jacksonVersion"
     compile project(':android-networking')
 }
 
diff --git a/jackson-android-networking/jackson-upload.gradle b/jackson-android-networking/jackson-upload.gradle
index e862efe..34df92f 100755
--- a/jackson-android-networking/jackson-upload.gradle
+++ b/jackson-android-networking/jackson-upload.gradle
@@ -24,7 +24,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.2'
 
 install {
     repositories.mavenInstaller {
diff --git a/jackson-android-networking/src/androidTest/AndroidManifest.xml b/jackson-android-networking/src/androidTest/AndroidManifest.xml
new file mode 100755
index 0000000..b3889e6
--- /dev/null
+++ b/jackson-android-networking/src/androidTest/AndroidManifest.xml
@@ -0,0 +1,26 @@
+<!--
+  ~ /*
+  ~  *    Copyright (C) 2016 Amit Shekhar
+  ~  *    Copyright (C) 2011 Android Open Source Project
+  ~  *
+  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
+  ~  *    you may not use this file except in compliance with the License.
+  ~  *    You may obtain a copy of the License at
+  ~  *
+  ~  *        http://www.apache.org/licenses/LICENSE-2.0
+  ~  *
+  ~  *    Unless required by applicable law or agreed to in writing, software
+  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
+  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~  *    See the License for the specific language governing permissions and
+  ~  *    limitations under the License.
+  ~  */
+  -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jacksonandroidnetworking">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"></uses-permission>
+
+</manifest>
diff --git a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonGetObjectApiTest.java b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonGetObjectApiTest.java
new file mode 100644
index 0000000..7571b98
--- /dev/null
+++ b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonGetObjectApiTest.java
@@ -0,0 +1,453 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.jacksonandroidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.AndroidNetworking;
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
+import com.androidnetworking.interfaces.ParsedRequestListener;
+import com.jacksonandroidnetworking.model.User;
+
+import org.json.JSONException;
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 05/05/17.
+ */
+
+public class JacksonGetObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public JacksonGetObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+        AndroidNetworking.setParserFactory(new JacksonParserFactory());
+    }
+
+    public void testObjectGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectGetRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        assertEquals("Amit", response.getResult().firstName);
+
+        assertEquals("Shekhar", response.getResult().lastName);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListGetRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        User user = response.getResult().get(0);
+
+        assertEquals("Amit", user.firstName);
+
+        assertEquals("Shekhar", user.lastName);
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndObjectGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectGet404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndObjectListGet() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                firstNameRef.set(userList.get(0).firstName);
+                                lastNameRef.set(userList.get(0).lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectListGet404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.get(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                headerRef.set(okHttpResponse.request().header("headerKey"));
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+
+}
diff --git a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonPostObjectApiTest.java b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonPostObjectApiTest.java
new file mode 100644
index 0000000..580dda4
--- /dev/null
+++ b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonPostObjectApiTest.java
@@ -0,0 +1,484 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.jacksonandroidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.AndroidNetworking;
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.common.ANRequest;
+import com.androidnetworking.common.ANResponse;
+import com.androidnetworking.error.ANError;
+import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
+import com.androidnetworking.interfaces.ParsedRequestListener;
+import com.jacksonandroidnetworking.model.User;
+
+import org.json.JSONException;
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicReference;
+
+import okhttp3.Response;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 13/05/17.
+ */
+
+public class JacksonPostObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public JacksonPostObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+        AndroidNetworking.setParserFactory(new JacksonParserFactory());
+    }
+
+
+    public void testObjectPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObject(User.class, new ParsedRequestListener<User>() {
+                    @Override
+                    public void onResponse(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
+                    @Override
+                    public void onResponse(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(ANError anError) {
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectPostRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        assertEquals("Amit", response.getResult().firstName);
+
+        assertEquals("Shekhar", response.getResult().lastName);
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<User> response = request.executeForObject(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListPostRequest() throws InterruptedException, JSONException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        User user = response.getResult().get(0);
+
+        assertEquals("Amit", user.firstName);
+
+        assertEquals("Shekhar", user.lastName);
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testSynchronousObjectListPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        ANRequest request = AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build();
+
+        ANResponse<List<User>> response = request.executeForObjectList(User.class);
+
+        ANError error = response.getError();
+
+        assertEquals("data", error.getErrorBody());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
+
+        assertEquals(404, error.getErrorCode());
+
+    }
+
+    public void testResponseBodyAndObjectPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testResponseBodyAndObjectListPost() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                firstNameRef.set(userList.get(0).firstName);
+                                lastNameRef.set(userList.get(0).lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testResponseBodyAndObjectListPost404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObjectList(User.class,
+                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, List<User> userList) {
+                                assertTrue(false);
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                errorBodyRef.set(anError.getErrorBody());
+                                errorDetailRef.set(anError.getErrorDetail());
+                                errorCodeRef.set(anError.getErrorCode());
+                                latch.countDown();
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+    }
+
+    public void testHeaderPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<String> headerRef = new AtomicReference<>();
+        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        AndroidNetworking.post(server.url("/").toString())
+                .addHeaders("headerKey", "headerValue")
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .setExecutor(Executors.newSingleThreadExecutor())
+                .build()
+                .getAsOkHttpResponseAndObject(User.class,
+                        new OkHttpResponseAndParsedRequestListener<User>() {
+                            @Override
+                            public void onResponse(Response okHttpResponse, User user) {
+                                firstNameRef.set(user.firstName);
+                                lastNameRef.set(user.lastName);
+                                responseBodySuccess.set(okHttpResponse.isSuccessful());
+                                headerRef.set(okHttpResponse.request().header("headerKey"));
+                                latch.countDown();
+                            }
+
+                            @Override
+                            public void onError(ANError anError) {
+                                assertTrue(false);
+                            }
+                        });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(responseBodySuccess.get());
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+        assertEquals("headerValue", headerRef.get());
+    }
+
+
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/ExampleInstrumentedTest.java b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/model/User.java
similarity index 50%
rename from rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/ExampleInstrumentedTest.java
rename to jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/model/User.java
index a6f9159..3b05b0e 100644
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/ExampleInstrumentedTest.java
+++ b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/model/User.java
@@ -17,29 +17,15 @@
  *
  */
 
-package com.rx2androidnetworking;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.junit.Assert.*;
+package com.jacksonandroidnetworking.model;
 
 /**
- * Instrumentation test, which will execute on an Android device.
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ * Created by amitshekhar on 05/05/17.
  */
-@RunWith(AndroidJUnit4.class)
-public class ExampleInstrumentedTest {
-    @Test
-    public void useAppContext() throws Exception {
-        // Context of the app under test.
-        Context appContext = InstrumentationRegistry.getTargetContext();
 
-        assertEquals("com.rx2androidnetworking.test", appContext.getPackageName());
-    }
+public class User {
+
+    public String firstName;
+    public String lastName;
+
 }
diff --git a/rx-android-networking/build.gradle b/rx-android-networking/build.gradle
index 6a871f8..a8581b9 100644
--- a/rx-android-networking/build.gradle
+++ b/rx-android-networking/build.gradle
@@ -18,12 +18,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -37,9 +37,9 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'io.reactivex:rxandroid:1.2.1'
-    compile 'io.reactivex:rxjava:1.1.6'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    compile "io.reactivex:rxandroid:$rootProject.ext.rxJavaAndroidVersion"
+    compile "io.reactivex:rxjava:$rootProject.ext.rxJavaVersion"
     compile project(':android-networking')
 }
 //apply from: 'rx-upload.gradle'
diff --git a/rx-android-networking/rx-upload.gradle b/rx-android-networking/rx-upload.gradle
index 9c5c0ec..c4fd5c4 100755
--- a/rx-android-networking/rx-upload.gradle
+++ b/rx-android-networking/rx-upload.gradle
@@ -22,7 +22,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.2'
 
 install {
     repositories.mavenInstaller {
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
index 5714fc7..3f9084f 100644
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
+++ b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
@@ -31,7 +31,9 @@
 
 import java.util.List;
 
+import rx.Completable;
 import rx.Observable;
+import rx.Single;
 
 /**
  * Created by amitshekhar on 10/06/16.
@@ -66,6 +68,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<JSONObject> getJSONObjectSingle() {
+        return getJSONObjectObservable().toSingle();
+    }
+
+    public Completable getJSONObjectCompletable() {
+        return getJSONObjectObservable().toCompletable();
+    }
+
     public Observable<JSONArray> getJSONArrayObservable() {
         this.setResponseAs(ResponseType.JSON_ARRAY);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -77,6 +87,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<JSONArray> getJSONArraySingle() {
+        return getJSONArrayObservable().toSingle();
+    }
+
+    public Completable getJSONArrayCompletable() {
+        return getJSONArrayObservable().toCompletable();
+    }
+
     public Observable<Bitmap> getBitmapObservable() {
         this.setResponseAs(ResponseType.BITMAP);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -88,6 +106,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<Bitmap> getBitmapSingle() {
+        return getBitmapObservable().toSingle();
+    }
+
+    public Completable getBitmapCompletable() {
+        return getBitmapObservable().toCompletable();
+    }
+
     public Observable<String> getStringObservable() {
         this.setResponseAs(ResponseType.STRING);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -99,10 +125,26 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Single<String> getStringSingle() {
+        return getStringObservable().toSingle();
+    }
+
+    public Completable getStringCompletable() {
+        return getStringObservable().toCompletable();
+    }
+
     public Observable<String> getDownloadObservable() {
         return RxInternalNetworking.generateDownloadObservable(this);
     }
 
+    public Single<String> getDownloadSingle() {
+        return getDownloadObservable().toSingle();
+    }
+
+    public Completable getDownloadCompletable() {
+        return getDownloadObservable().toCompletable();
+    }
+
     public <T> Observable<T> getParseObservable(TypeToken<T> typeToken) {
         this.setType(typeToken.getType());
         this.setResponseAs(ResponseType.PARSED);
@@ -115,6 +157,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Single<T> getParseSingle(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).toSingle();
+    }
+
+    public <T> Completable getParseCompletable(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).toCompletable();
+    }
+
     public <T> Observable<T> getObjectObservable(Class<T> objectClass) {
         this.setType(objectClass);
         this.setResponseAs(ResponseType.PARSED);
@@ -127,6 +177,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Single<T> getObjectSingle(Class<T> objectClass) {
+        return getObjectObservable(objectClass).toSingle();
+    }
+
+    public <T> Completable getObjectCompletable(Class<T> objectClass) {
+        return getObjectObservable(objectClass).toCompletable();
+    }
+
     public <T> Observable<List<T>> getObjectListObservable(Class<T> objectClass) {
         this.setType($Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass));
         this.setResponseAs(ResponseType.PARSED);
@@ -139,6 +197,14 @@ public RxANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Single<List<T>> getObjectListSingle(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).toSingle();
+    }
+
+    public <T> Completable getObjectListCompletable(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).toCompletable();
+    }
+
     public static class GetRequestBuilder extends ANRequest.GetRequestBuilder<GetRequestBuilder> {
 
         public GetRequestBuilder(String url) {
@@ -161,6 +227,13 @@ public HeadRequestBuilder(String url) {
         }
     }
 
+    public static class OptionsRequestBuilder extends GetRequestBuilder {
+
+        public OptionsRequestBuilder(String url) {
+            super(url, Method.OPTIONS);
+        }
+    }
+
     public static class PostRequestBuilder extends ANRequest.PostRequestBuilder<PostRequestBuilder> {
 
         public PostRequestBuilder(String url) {
@@ -197,6 +270,13 @@ public PatchRequestBuilder(String url) {
         }
     }
 
+    public static class DynamicRequestBuilder extends PostRequestBuilder {
+
+        public DynamicRequestBuilder(String url, int method) {
+            super(url, method);
+        }
+    }
+
     public static class DownloadBuilder extends ANRequest.DownloadBuilder<DownloadBuilder> {
 
         public DownloadBuilder(String url, String dirPath, String fileName) {
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
index 91aaf45..6286836 100644
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
+++ b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
@@ -54,6 +54,16 @@ private RxAndroidNetworking() {
         return new RxANRequest.HeadRequestBuilder(url);
     }
 
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public static RxANRequest.OptionsRequestBuilder options(String url) {
+        return new RxANRequest.OptionsRequestBuilder(url);
+    }
+
     /**
      * Method to make POST request
      *
@@ -115,4 +125,15 @@ private RxAndroidNetworking() {
     public static RxANRequest.MultiPartBuilder upload(String url) {
         return new RxANRequest.MultiPartBuilder(url);
     }
+
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public static RxANRequest.DynamicRequestBuilder request(String url, int method) {
+        return new RxANRequest.DynamicRequestBuilder(url, method);
+    }
 }
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
index 5bf60d0..1de12cc 100644
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
+++ b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
@@ -48,6 +48,7 @@
 import static com.androidnetworking.common.Method.DELETE;
 import static com.androidnetworking.common.Method.GET;
 import static com.androidnetworking.common.Method.HEAD;
+import static com.androidnetworking.common.Method.OPTIONS;
 import static com.androidnetworking.common.Method.PATCH;
 import static com.androidnetworking.common.Method.POST;
 import static com.androidnetworking.common.Method.PUT;
@@ -87,6 +88,10 @@
                 builder = builder.head();
                 break;
             }
+            case OPTIONS: {
+                builder = builder.method(ANConstants.OPTIONS, null);
+                break;
+            }
             case PATCH: {
                 requestBody = request.getRequestBody();
                 builder = builder.patch(requestBody);
@@ -262,7 +267,7 @@ public void request(long n) {
             } catch (Exception e) {
                 Exceptions.throwIfFatal(e);
                 if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
                 }
             } finally {
                 SourceCloseUtil.close(okHttpResponse, request);
@@ -347,7 +352,7 @@ public void request(long n) {
             } catch (Exception e) {
                 Exceptions.throwIfFatal(e);
                 if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
                 }
             }
         }
@@ -442,7 +447,7 @@ public void request(long n) {
             } catch (Exception e) {
                 Exceptions.throwIfFatal(e);
                 if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
                 }
             } finally {
                 SourceCloseUtil.close(okHttpResponse, request);
diff --git a/rx2-android-networking/build.gradle b/rx2-android-networking/build.gradle
index 20c5852..24dd65e 100644
--- a/rx2-android-networking/build.gradle
+++ b/rx2-android-networking/build.gradle
@@ -20,17 +20,14 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
-
-        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-
     }
     buildTypes {
         release {
@@ -42,12 +39,10 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
-        exclude group: 'com.android.support', module: 'support-annotations'
-    })
-    testCompile 'junit:junit:4.12'
-    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
-    compile 'io.reactivex.rxjava2:rxjava:2.0.5'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
+    compile "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxJava2AndroidVersion"
+    compile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxJava2Version"
     compile project(':android-networking')
 }
 //apply from: 'rx2-upload.gradle'
diff --git a/rx2-android-networking/rx2-upload.gradle b/rx2-android-networking/rx2-upload.gradle
index 4117e7b..bd5fb3f 100755
--- a/rx2-android-networking/rx2-upload.gradle
+++ b/rx2-android-networking/rx2-upload.gradle
@@ -24,7 +24,7 @@ def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
 def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
 
 group = "com.amitshekhar.android"
-version = '1.0.0'
+version = '1.0.2'
 
 install {
     repositories.mavenInstaller {
diff --git a/rx2-android-networking/src/androidTest/AndroidManifest.xml b/rx2-android-networking/src/androidTest/AndroidManifest.xml
new file mode 100755
index 0000000..501fd9a
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/AndroidManifest.xml
@@ -0,0 +1,26 @@
+<!--
+  ~ /*
+  ~  *    Copyright (C) 2016 Amit Shekhar
+  ~  *    Copyright (C) 2011 Android Open Source Project
+  ~  *
+  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
+  ~  *    you may not use this file except in compliance with the License.
+  ~  *    You may obtain a copy of the License at
+  ~  *
+  ~  *        http://www.apache.org/licenses/LICENSE-2.0
+  ~  *
+  ~  *    Unless required by applicable law or agreed to in writing, software
+  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
+  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~  *    See the License for the specific language governing permissions and
+  ~  *    limitations under the License.
+  ~  */
+  -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.rx2androidnetworking">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"></uses-permission>
+
+</manifest>
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetJSONApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetJSONApiTest.java
new file mode 100644
index 0000000..e9f54be
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetJSONApiTest.java
@@ -0,0 +1,466 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 30/04/17.
+ */
+
+public class Rx2GetJSONApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2GetJSONApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testJSONObjectGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONObjectObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONObject>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectSingleGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONObjectSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONObject>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONObjectObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONObject>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONObjectSingleGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONObjectSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONObject>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArrayGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONArrayObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONArray>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArraySingleGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONArraySingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONArray>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArrayGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONArrayObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONArray>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArraySingleGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getJSONArraySingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONArray>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetObjectApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetObjectApiTest.java
new file mode 100644
index 0000000..72d91e6
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetObjectApiTest.java
@@ -0,0 +1,449 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+import com.rx2androidnetworking.model.User;
+
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 26/04/17.
+ */
+
+public class Rx2GetObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2GetObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testObjectGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<User>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectSingleGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<User>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<User>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectSingleGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<User>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectListObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<List<User>>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListSingleGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectListSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull List<User> users) {
+                        firstNameRef.set(users.get(0).firstName);
+                        lastNameRef.set(users.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectListObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<List<User>>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListSingleGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getObjectListSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull List<User> users) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetStringApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetStringApiTest.java
new file mode 100644
index 0000000..db26c7c
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetStringApiTest.java
@@ -0,0 +1,248 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 22/04/17.
+ */
+
+public class Rx2GetStringApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2GetStringApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testStringGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getStringObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringSingleGetRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getStringSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringGetRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getStringObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testStringGetSingleRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.get(server.url("/").toString())
+                .build()
+                .getStringSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull String s) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartJSONApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartJSONApiTest.java
new file mode 100644
index 0000000..0f24b34
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartJSONApiTest.java
@@ -0,0 +1,474 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 03/05/17.
+ */
+
+public class Rx2MultipartJSONApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2MultipartJSONApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testJSONObjectMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONObjectObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONObject>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectSingleMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONObjectSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONObject>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONObjectObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONObject>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONObjectSingleMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONObjectSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONObject>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArrayMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONArrayObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONArray>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArraySingleMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONArraySingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONArray>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArrayMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONArrayObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONArray>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArraySingleMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getJSONArraySingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONArray>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONArray jsonArray) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartObjectApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartObjectApiTest.java
new file mode 100644
index 0000000..407a1bf
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartObjectApiTest.java
@@ -0,0 +1,457 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+import com.rx2androidnetworking.model.User;
+
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 29/04/17.
+ */
+
+public class Rx2MultipartObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2MultipartObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testObjectMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<User>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectSingleMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<User>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<User>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectSingleMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<User>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectListObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<List<User>>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListSingleMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectListSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectListObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<List<User>>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListSingleMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getObjectListSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull List<User> users) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartStringApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartStringApiTest.java
new file mode 100644
index 0000000..8a82fbe
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartStringApiTest.java
@@ -0,0 +1,252 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 25/04/17.
+ */
+
+public class Rx2MultipartStringApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2MultipartStringApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testStringMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getStringObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringSingleMultipartRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getStringSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getStringObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testStringSingleMultipartRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.upload(server.url("/").toString())
+                .addMultipartParameter("key", "value")
+                .build()
+                .getStringSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull String s) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+}
\ No newline at end of file
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostJSONApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostJSONApiTest.java
new file mode 100644
index 0000000..2638533
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostJSONApiTest.java
@@ -0,0 +1,482 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 02/05/17.
+ */
+
+public class Rx2PostJSONApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2PostJSONApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testJSONObjectPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONObjectObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONObject>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectSinglePostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONObjectSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONObject>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONObject response) {
+                        try {
+                            firstNameRef.set(response.getString("firstName"));
+                            lastNameRef.set(response.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONObjectObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONObject>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONObject response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONObjectSinglePostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONObjectSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONObject>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArrayPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONArrayObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONArray>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArraySinglePostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONArraySingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONArray>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONArray response) {
+                        try {
+                            JSONObject jsonObject = response.getJSONObject(0);
+                            firstNameRef.set(jsonObject.getString("firstName"));
+                            lastNameRef.set(jsonObject.getString("lastName"));
+                            latch.countDown();
+                        } catch (JSONException e) {
+                            assertTrue(false);
+                        }
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testJSONArrayPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONArrayObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<JSONArray>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(JSONArray response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testJSONArraySinglePostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getJSONArraySingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<JSONArray>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull JSONArray jsonArray) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostObjectApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostObjectApiTest.java
new file mode 100644
index 0000000..9582c7a
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostObjectApiTest.java
@@ -0,0 +1,466 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+import com.rx2androidnetworking.model.User;
+
+import org.junit.Rule;
+
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 28/04/17.
+ */
+
+public class Rx2PostObjectApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2PostObjectApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testObjectPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<User>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectSinglePostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<User>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull User user) {
+                        firstNameRef.set(user.firstName);
+                        lastNameRef.set(user.lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<User>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectSinglePostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<User>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull User user) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectListObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<List<User>>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListSinglePostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
+
+        final AtomicReference<String> firstNameRef = new AtomicReference<>();
+        final AtomicReference<String> lastNameRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectListSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull List<User> userList) {
+                        firstNameRef.set(userList.get(0).firstName);
+                        lastNameRef.set(userList.get(0).lastName);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("Amit", firstNameRef.get());
+        assertEquals("Shekhar", lastNameRef.get());
+    }
+
+    public void testObjectListPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectListObservable(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<List<User>>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(List<User> userList) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testObjectListSinglePostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getObjectListSingle(User.class)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull List<User> users) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostStringApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostStringApiTest.java
new file mode 100644
index 0000000..da3d883
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostStringApiTest.java
@@ -0,0 +1,256 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.androidnetworking.common.ANConstants;
+import com.androidnetworking.error.ANError;
+
+import org.junit.Rule;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicReference;
+
+import io.reactivex.Observer;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+
+import static java.util.concurrent.TimeUnit.SECONDS;
+
+/**
+ * Created by amitshekhar on 24/04/17.
+ */
+
+public class Rx2PostStringApiTest extends ApplicationTestCase<Application> {
+
+    @Rule
+    public final MockWebServer server = new MockWebServer();
+
+    public Rx2PostStringApiTest() {
+        super(Application.class);
+    }
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        createApplication();
+    }
+
+    public void testStringPostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(2);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getStringObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        isCompletedRef.set(true);
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+        assertTrue(isCompletedRef.get());
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringSinglePostRequest() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setBody("data"));
+
+        final AtomicReference<String> responseRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getStringSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull String response) {
+                        responseRef.set(response);
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals("data", responseRef.get());
+    }
+
+    public void testStringPostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getStringObservable()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onNext(String response) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        assertTrue(false);
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+    public void testStringSinglePostRequest404() throws InterruptedException {
+
+        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
+
+        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
+        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
+        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
+        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+
+        Rx2AndroidNetworking.post(server.url("/").toString())
+                .addBodyParameter("fistName", "Amit")
+                .addBodyParameter("lastName", "Shekhar")
+                .build()
+                .getStringSingle()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(@NonNull Disposable disposable) {
+                        isSubscribedRef.set(true);
+                    }
+
+                    @Override
+                    public void onSuccess(@NonNull String s) {
+                        assertTrue(false);
+                    }
+
+                    @Override
+                    public void onError(@NonNull Throwable e) {
+                        ANError anError = (ANError) e;
+                        errorBodyRef.set(anError.getErrorBody());
+                        errorDetailRef.set(anError.getErrorDetail());
+                        errorCodeRef.set(anError.getErrorCode());
+                        latch.countDown();
+                    }
+                });
+
+        assertTrue(latch.await(2, SECONDS));
+
+        assertTrue(isSubscribedRef.get());
+
+        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
+
+        assertEquals("data", errorBodyRef.get());
+
+        assertEquals(404, errorCodeRef.get().intValue());
+
+    }
+
+}
\ No newline at end of file
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/model/User.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/model/User.java
new file mode 100644
index 0000000..4c91f7b
--- /dev/null
+++ b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/model/User.java
@@ -0,0 +1,31 @@
+/*
+ *
+ *  *    Copyright (C) 2016 Amit Shekhar
+ *  *    Copyright (C) 2011 Android Open Source Project
+ *  *
+ *  *    Licensed under the Apache License, Version 2.0 (the "License");
+ *  *    you may not use this file except in compliance with the License.
+ *  *    You may obtain a copy of the License at
+ *  *
+ *  *        http://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  *    Unless required by applicable law or agreed to in writing, software
+ *  *    distributed under the License is distributed on an "AS IS" BASIS,
+ *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *    See the License for the specific language governing permissions and
+ *  *    limitations under the License.
+ *
+ */
+
+package com.rx2androidnetworking.model;
+
+/**
+ * Created by amitshekhar on 26/04/17.
+ */
+
+public class User {
+
+    public String firstName;
+    public String lastName;
+
+}
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
index 0d8c4d8..a19c9f1 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
@@ -33,7 +33,12 @@
 
 import java.util.List;
 
+import io.reactivex.BackpressureStrategy;
+import io.reactivex.Completable;
+import io.reactivex.Flowable;
+import io.reactivex.Maybe;
 import io.reactivex.Observable;
+import io.reactivex.Single;
 
 /**
  * Created by Prashant Gupta on 30-01-2017.
@@ -68,6 +73,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<JSONObject> getJSONObjectFlowable() {
+        return getJSONObjectObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<JSONObject> getJSONObjectSingle() {
+        return getJSONObjectObservable().singleOrError();
+    }
+
+    public Maybe<JSONObject> getJSONObjectMaybe() {
+        return getJSONObjectObservable().singleElement();
+    }
+
+    public Completable getJSONObjectCompletable() {
+        return getJSONObjectObservable().ignoreElements();
+    }
+
     public Observable<JSONArray> getJSONArrayObservable() {
         this.setResponseAs(ResponseType.JSON_ARRAY);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -79,6 +100,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<JSONArray> getJSONArrayFlowable() {
+        return getJSONArrayObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<JSONArray> getJSONArraySingle() {
+        return getJSONArrayObservable().singleOrError();
+    }
+
+    public Maybe<JSONArray> getJSONArrayMaybe() {
+        return getJSONArrayObservable().singleElement();
+    }
+
+    public Completable getJSONArrayCompletable() {
+        return getJSONArrayObservable().ignoreElements();
+    }
+
     public Observable<Bitmap> getBitmapObservable() {
         this.setResponseAs(ResponseType.BITMAP);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -90,6 +127,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<Bitmap> getBitmapFlowable() {
+        return getBitmapObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<Bitmap> getBitmapSingle() {
+        return getBitmapObservable().singleOrError();
+    }
+
+    public Maybe<Bitmap> getBitmapMaybe() {
+        return getBitmapObservable().singleElement();
+    }
+
+    public Completable getBitmapCompletable() {
+        return getBitmapObservable().ignoreElements();
+    }
+
     public Observable<String> getStringObservable() {
         this.setResponseAs(ResponseType.STRING);
         if (this.getRequestType() == RequestType.SIMPLE) {
@@ -101,10 +154,42 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public Flowable<String> getStringFlowable() {
+        return getStringObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<String> getStringSingle() {
+        return getStringObservable().singleOrError();
+    }
+
+    public Maybe<String> getStringMaybe() {
+        return getStringObservable().singleElement();
+    }
+
+    public Completable getStringCompletable() {
+        return getStringObservable().ignoreElements();
+    }
+
     public Observable<String> getDownloadObservable() {
         return Rx2InternalNetworking.generateDownloadObservable(this);
     }
 
+    public Flowable<String> getDownloadFlowable() {
+        return getDownloadObservable().toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public Single<String> getDownloadSingle() {
+        return getDownloadObservable().singleOrError();
+    }
+
+    public Maybe<String> getDownloadMaybe() {
+        return getDownloadObservable().singleElement();
+    }
+
+    public Completable getDownloadCompletable() {
+        return getDownloadObservable().ignoreElements();
+    }
+
     public <T> Observable<T> getParseObservable(TypeToken<T> typeToken) {
         this.setType(typeToken.getType());
         this.setResponseAs(ResponseType.PARSED);
@@ -117,6 +202,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Flowable<T> getParseFlowable(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public <T> Single<T> getParseSingle(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).singleOrError();
+    }
+
+    public <T> Maybe<T> getParseMaybe(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).singleElement();
+    }
+
+    public <T> Completable getParseCompletable(TypeToken<T> typeToken) {
+        return getParseObservable(typeToken).ignoreElements();
+    }
+
     public <T> Observable<T> getObjectObservable(Class<T> objectClass) {
         this.setType(objectClass);
         this.setResponseAs(ResponseType.PARSED);
@@ -129,6 +230,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Flowable<T> getObjectFlowable(Class<T> objectClass) {
+        return getObjectObservable(objectClass).toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public <T> Single<T> getObjectSingle(Class<T> objectClass) {
+        return getObjectObservable(objectClass).singleOrError();
+    }
+
+    public <T> Maybe<T> getObjectMaybe(Class<T> objectClass) {
+        return getObjectObservable(objectClass).singleElement();
+    }
+
+    public <T> Completable getObjectCompletable(Class<T> objectClass) {
+        return getObjectObservable(objectClass).ignoreElements();
+    }
+
     public <T> Observable<List<T>> getObjectListObservable(Class<T> objectClass) {
         this.setType($Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass));
         this.setResponseAs(ResponseType.PARSED);
@@ -141,6 +258,22 @@ public Rx2ANRequest(MultiPartBuilder builder) {
         }
     }
 
+    public <T> Flowable<List<T>> getObjectListFlowable(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).toFlowable(BackpressureStrategy.LATEST);
+    }
+
+    public <T> Single<List<T>> getObjectListSingle(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).singleOrError();
+    }
+
+    public <T> Maybe<List<T>> getObjectListMaybe(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).singleElement();
+    }
+
+    public <T> Completable getObjectListCompletable(Class<T> objectClass) {
+        return getObjectListObservable(objectClass).ignoreElements();
+    }
+
     public static class GetRequestBuilder extends ANRequest.GetRequestBuilder<GetRequestBuilder> {
 
         public GetRequestBuilder(String url) {
@@ -163,6 +296,13 @@ public HeadRequestBuilder(String url) {
         }
     }
 
+    public static class OptionsRequestBuilder extends GetRequestBuilder {
+
+        public OptionsRequestBuilder(String url) {
+            super(url, Method.OPTIONS);
+        }
+    }
+
     public static class PostRequestBuilder extends ANRequest.PostRequestBuilder<PostRequestBuilder> {
 
         public PostRequestBuilder(String url) {
@@ -199,6 +339,13 @@ public PatchRequestBuilder(String url) {
         }
     }
 
+    public static class DynamicRequestBuilder extends PostRequestBuilder {
+
+        public DynamicRequestBuilder(String url, int method) {
+            super(url, method);
+        }
+    }
+
     public static class DownloadBuilder extends ANRequest.DownloadBuilder<DownloadBuilder> {
 
         public DownloadBuilder(String url, String dirPath, String fileName) {
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
index 15d62c8..14a7792 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
@@ -56,6 +56,16 @@ private Rx2AndroidNetworking() {
         return new Rx2ANRequest.HeadRequestBuilder(url);
     }
 
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public static Rx2ANRequest.OptionsRequestBuilder options(String url) {
+        return new Rx2ANRequest.OptionsRequestBuilder(url);
+    }
+
     /**
      * Method to make POST request
      *
@@ -117,4 +127,15 @@ private Rx2AndroidNetworking() {
     public static Rx2ANRequest.MultiPartBuilder upload(String url) {
         return new Rx2ANRequest.MultiPartBuilder(url);
     }
+
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public static Rx2ANRequest.DynamicRequestBuilder request(String url, int method) {
+        return new Rx2ANRequest.DynamicRequestBuilder(url, method);
+    }
 }
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
index 4d8a373..e33afd3 100644
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
+++ b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
@@ -50,6 +50,7 @@
 import static com.androidnetworking.common.Method.DELETE;
 import static com.androidnetworking.common.Method.GET;
 import static com.androidnetworking.common.Method.HEAD;
+import static com.androidnetworking.common.Method.OPTIONS;
 import static com.androidnetworking.common.Method.PATCH;
 import static com.androidnetworking.common.Method.POST;
 import static com.androidnetworking.common.Method.PUT;
@@ -89,6 +90,10 @@
                 builder = builder.head();
                 break;
             }
+            case OPTIONS: {
+                builder = builder.method(ANConstants.OPTIONS, null);
+                break;
+            }
             case PATCH: {
                 requestBody = request.getRequestBody();
                 builder = builder.patch(requestBody);
@@ -235,7 +240,7 @@ protected void subscribeActual(Observer<? super T> observer) {
                     RxJavaPlugins.onError(e);
                 } else if (!call.isCanceled()) {
                     try {
-                        observer.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
                     } catch (Exception e1) {
                         Exceptions.throwIfFatal(e1);
                         RxJavaPlugins.onError(new CompositeException(e, e1));
@@ -317,7 +322,7 @@ protected void subscribeActual(Observer<? super T> observer) {
                     RxJavaPlugins.onError(e);
                 } else if (!call.isCanceled()) {
                     try {
-                        observer.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
                     } catch (Exception e1) {
                         Exceptions.throwIfFatal(e1);
                         RxJavaPlugins.onError(new CompositeException(e, e1));
@@ -408,7 +413,7 @@ protected void subscribeActual(Observer<? super T> observer) {
                     RxJavaPlugins.onError(e);
                 } else if (!request.getCall().isCanceled()) {
                     try {
-                        observer.onError(Utils.getErrorForNetworkOnMainThreadOrConnection(e));
+                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
                     } catch (Exception e1) {
                         Exceptions.throwIfFatal(e1);
                         RxJavaPlugins.onError(new CompositeException(e, e1));
diff --git a/rx2sampleapp/build.gradle b/rx2sampleapp/build.gradle
index 2303970..1c38a20 100644
--- a/rx2sampleapp/build.gradle
+++ b/rx2sampleapp/build.gradle
@@ -20,13 +20,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
         applicationId "com.rx2sampleapp"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
 
@@ -46,7 +46,7 @@ dependencies {
     androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
         exclude group: 'com.android.support', module: 'support-annotations'
     })
-    compile 'com.android.support:appcompat-v7:23.4.0'
-    testCompile 'junit:junit:4.12'
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
     compile project(':rx2-android-networking')
 }
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
index 88a097d..d6f85ae 100644
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
+++ b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
@@ -27,7 +27,6 @@
 import android.widget.ImageView;
 
 import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.error.ANError;
 import com.androidnetworking.interfaces.AnalyticsListener;
 import com.androidnetworking.interfaces.DownloadProgressListener;
 import com.androidnetworking.interfaces.UploadProgressListener;
@@ -42,9 +41,11 @@
 import java.io.File;
 import java.util.List;
 
-import io.reactivex.Observable;
-import io.reactivex.Observer;
+import io.reactivex.CompletableObserver;
+import io.reactivex.Single;
+import io.reactivex.SingleObserver;
 import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.schedulers.Schedulers;
 
@@ -75,27 +76,17 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getObjectListObservable(User.class)
+                .getObjectListSingle(User.class)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
+                .subscribe(new SingleObserver<List<User>>() {
                     @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : getAllUsers completed");
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onNext(List<User> users) {
+                    public void onSuccess(@NonNull List<User> users) {
                         Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                         Log.d(TAG, "userList size : " + users.size());
                         for (User user : users) {
@@ -104,6 +95,11 @@ public void onNext(List<User> users) {
                             Log.d(TAG, "lastname : " + user.lastname);
                         }
                     }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
+                    }
                 });
     }
 
@@ -121,32 +117,27 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getObjectObservable(User.class)
+                .getObjectSingle(User.class)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : getAnUser completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
+                .subscribe(new SingleObserver<User>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
                     }
 
                     @Override
-                    public void onNext(User user) {
+                    public void onSuccess(@NonNull User user) {
                         Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                         Log.d(TAG, "id : " + user.id);
                         Log.d(TAG, "firstname : " + user.firstname);
                         Log.d(TAG, "lastname : " + user.lastname);
                     }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
+                    }
                 });
     }
 
@@ -165,46 +156,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getJSONObjectObservable()
+                .getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : checkForHeaderGet completed");
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-                        Log.d(TAG, "onSubscribe Detail - isDisposed : " + d.isDisposed());
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -228,45 +197,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
             }
         });
 
-        rxAnRequest.getJSONObjectObservable()
+        rxAnRequest.getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : checkForHeaderPost completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -285,45 +233,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getJSONObjectObservable()
+                .getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : createAnUser completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -348,45 +275,24 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getJSONObjectObservable()
+                .getJSONObjectSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Detail : createAnUserJSONObject completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
+                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -411,45 +317,24 @@ public void onProgress(long bytesDownloaded, long totalBytes) {
                         Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
                 })
-                .getDownloadObservable()
+                .getDownloadCompletable()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
+                .subscribe(new CompletableObserver() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onComplete() {
+                        Log.d(TAG, "File download Completed");
+                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(String s) {
-                        Log.d(TAG, "onNext : " + s);
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
@@ -467,51 +352,30 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getDownloadObservable()
+                .getDownloadCompletable()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
+                .subscribe(new CompletableObserver() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onComplete() {
+                        Log.d(TAG, "File download Completed");
+                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
 
                     @Override
-                    public void onNext(String s) {
-                        Log.d(TAG, "onNext : " + s);
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
 
     public void uploadImage(final View view) {
-        Observable<JSONObject> observable = Rx2AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
+        Single<JSONObject> single = Rx2AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
                 .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
                 .build()
                 .setAnalyticsListener(new AnalyticsListener() {
@@ -530,87 +394,45 @@ public void onProgress(long bytesUploaded, long totalBytes) {
                         Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
                     }
                 })
-                .getJSONObjectObservable();
+                .getJSONObjectSingle();
 
-        observable.subscribeOn(Schedulers.io())
+        single.subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_1", "onComplete Detail : uploadImage completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG + "_1", "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG + "_1", "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG + "_1", "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG + "_1", "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG + "_1", "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG + "_1", "Image upload Completed");
+                        Log.d(TAG + "_1", "onResponse object : " + jsonObject.toString());
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG + "_1", "Image upload Completed");
-                        Log.d(TAG + "_1", "onResponse object : " + response.toString());
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
 
-        observable.subscribeOn(Schedulers.io())
+        single.subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
+                .subscribe(new SingleObserver<JSONObject>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_2", "onComplete Detail : uploadImage completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG + "_2", "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG + "_2", "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG + "_2", "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG + "_2", "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG + "_2", "onError errorMessage : " + e.getMessage());
-                        }
+                    public void onSubscribe(@NonNull Disposable disposable) {
+
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull JSONObject jsonObject) {
+                        Log.d(TAG + "_2", "Image upload Completed");
+                        Log.d(TAG + "_2", "onResponse object : " + jsonObject.toString());
                     }
 
                     @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG + "_2", "Image upload Completed");
-                        Log.d(TAG + "_2", "onResponse object : " + response.toString());
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
 
@@ -637,48 +459,25 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getBitmapObservable()
+                .getBitmapSingle()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<Bitmap>() {
+                .subscribe(new SingleObserver<Bitmap>() {
                     @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete Bitmap");
-
-
-                    }
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
                     }
 
                     @Override
-                    public void onSubscribe(Disposable d) {
-
+                    public void onSuccess(@NonNull Bitmap bitmap) {
+                        Log.d(TAG, "onResponse Bitmap");
+                        ImageView imageView = findViewById(R.id.imageView);
+                        imageView.setImageBitmap(bitmap);
                     }
 
                     @Override
-                    public void onNext(Bitmap bitmap) {
-                        Log.d(TAG, "onResponse Bitmap");
-                        ImageView imageView = (ImageView) findViewById(R.id.imageView);
-                        imageView.setImageBitmap(bitmap);
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
 
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
index ef3847f..8dd2101 100644
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
+++ b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
@@ -39,7 +39,10 @@
 import io.reactivex.Observable;
 import io.reactivex.ObservableSource;
 import io.reactivex.Observer;
+import io.reactivex.Single;
+import io.reactivex.SingleObserver;
 import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Function;
@@ -72,7 +75,7 @@ protected void onDestroy() {
 
     private void testApi() {
 
-        Observable<List<User>> observable = Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
+        Single<List<User>> single = Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
                 .addPathParameter("pageNumber", "0")
                 .addQueryParameter("limit", "3")
                 .build()
@@ -85,30 +88,19 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                         Log.d(TAG, " isFromCache : " + isFromCache);
                     }
                 })
-                .getObjectListObservable(User.class);
+                .getObjectListSingle(User.class);
 
         // first observer
-        observable.subscribeOn(Schedulers.io())
+        single.subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG + "_1", e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_1", "onComplete Detail : getAllUsers completed");
-                    }
-
+                .subscribe(new SingleObserver<List<User>>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
                         Log.d(TAG + "_1", "onSubscribe");
                     }
 
                     @Override
-                    public void onNext(List<User> users) {
+                    public void onSuccess(@NonNull List<User> users) {
                         Log.d(TAG + "_1", "userList size : " + users.size());
                         for (User user : users) {
                             Log.d(TAG, "id : " + user.id);
@@ -116,30 +108,24 @@ public void onNext(List<User> users) {
                             Log.d(TAG, "lastname : " + user.lastname);
                         }
                     }
-                });
-
-        // second observer
-        observable.subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
 
                     @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG + "_2", e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG + "_2", "onComplete Detail : getAllUsers completed");
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG + "_1", throwable);
                     }
+                });
 
+        // second observer
+        single.subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<List<User>>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
                         Log.d(TAG + "_2", "onSubscribe");
                     }
 
                     @Override
-                    public void onNext(List<User> users) {
+                    public void onSuccess(@NonNull List<User> users) {
                         Log.d(TAG + "_2", "userList size : " + users.size());
                         for (User user : users) {
                             Log.d(TAG, "id : " + user.id);
@@ -147,6 +133,11 @@ public void onNext(List<User> users) {
                             Log.d(TAG, "lastname : " + user.lastname);
                         }
                     }
+
+                    @Override
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG + "_2", throwable);
+                    }
                 });
     }
 
@@ -158,7 +149,7 @@ public void map(View view) {
         Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUser/{userId}")
                 .addPathParameter("userId", "1")
                 .build()
-                .getObjectObservable(ApiUser.class)
+                .getObjectSingle(ApiUser.class)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
                 .map(new Function<ApiUser, User>() {
@@ -170,27 +161,22 @@ public User apply(ApiUser apiUser) throws Exception {
                         return user;
                     }
                 })
-                .subscribe(new Observer<User>() {
+                .subscribe(new SingleObserver<User>() {
                     @Override
-                    public void onSubscribe(Disposable d) {
+                    public void onSubscribe(@NonNull Disposable disposable) {
 
                     }
 
                     @Override
-                    public void onNext(User user) {
+                    public void onSuccess(@NonNull User user) {
                         Log.d(TAG, "user id : " + user.id);
                         Log.d(TAG, "user firstname : " + user.firstname);
                         Log.d(TAG, "user lastname : " + user.lastname);
                     }
 
                     @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete");
+                    public void onError(@NonNull Throwable throwable) {
+                        Utils.logError(TAG, throwable);
                     }
                 });
     }
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
index ea0403d..c109a17 100644
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
+++ b/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
@@ -27,10 +27,11 @@
 import com.rx2androidnetworking.Rx2AndroidNetworking;
 import com.rx2sampleapp.utils.Utils;
 
-import io.reactivex.Observable;
+import io.reactivex.Completable;
 import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.observers.DisposableObserver;
+import io.reactivex.observers.DisposableCompletableObserver;
 import io.reactivex.schedulers.Schedulers;
 
 
@@ -58,35 +59,30 @@ protected void onDestroy() {
         disposables.clear();
     }
 
-    public Observable<String> getObservable() {
+    public Completable getCompletable() {
         return Rx2AndroidNetworking.download(URL, dirPath, fileName)
                 .build()
-                .getDownloadObservable();
+                .getDownloadCompletable();
     }
 
-    private DisposableObserver<String> getDisposableObserver() {
-
-        return new DisposableObserver<String>() {
+    private DisposableCompletableObserver getDisposableObserver() {
 
+        return new DisposableCompletableObserver() {
             @Override
-            public void onNext(String response) {
-                Log.d(TAG, "onResponse response : " + response);
-            }
-
-            @Override
-            public void onError(Throwable e) {
-                Log.d(TAG, "onError " + e.getMessage());
+            public void onComplete() {
+                Log.d(TAG, "onCompleted");
             }
 
             @Override
-            public void onComplete() {
-                Log.d(TAG, "onCompleted");
+            public void onError(@NonNull Throwable throwable) {
+                Log.d(TAG, "onError " + throwable.getMessage());
             }
         };
+
     }
 
     public void downloadFile(View view) {
-        disposables.add(getObservable()
+        disposables.add(getCompletable()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribeWith(getDisposableObserver()));
diff --git a/rxsampleapp/build.gradle b/rxsampleapp/build.gradle
index f884149..9a99639 100644
--- a/rxsampleapp/build.gradle
+++ b/rxsampleapp/build.gradle
@@ -18,13 +18,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
         applicationId "com.rxsampleapp"
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
     }
@@ -38,7 +38,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile 'junit:junit:4.12'
-    compile 'com.android.support:appcompat-v7:23.4.0'
+    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
+    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
     compile project(':rx-android-networking')
 }
