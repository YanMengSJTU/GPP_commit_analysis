diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 8de325e..0000000
--- a/.travis.yml
+++ /dev/null
@@ -1,39 +0,0 @@
-language: android
-
-env:
-  global:
-    - ADB_INSTALL_TIMEOUT=30
-# Using the new Container-Based Infrastructure
-    - sudo: false
-# Turning off caching to avoid caching Issues
-    - cache: false
-# Initiating clean Gradle output
-    - TERM=dumb
-# Giving even more memory to Gradle JVM
-    - GRADLE_OPTS="-Xmx2048m -XX:MaxPermSize=1024m"
-
-android:
-  components:
-    - tools
-    - platform-tools
-    - build-tools-27.0.3
-    - android-27
-    - android-24
-    - android-23
-    - android-22
-    - extra-google-google_play_services
-    - extra-google-m2repository
-    - extra-android-m2repository
-    - sys-img-armeabi-v7a-android-22    
-
-# Emulator Management: Create, Start and Wait
-before_script:
-  - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a -c 32M
-  - emulator -avd test -no-audio -no-window &
-  - android-wait-for-emulator
-  - sleep 180
-  - adb devices
-  - adb shell input keyevent 82 &
-  
-script:
-  - ./gradlew connectedAndroidTest
diff --git a/CHANGELOG.md b/CHANGELOG.md
index d538069..7bd978c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,34 @@
-Change Log
+KnHttp Change Log
+==========
+
+KnHttp Version 2.0.0 *(2019-10-26)*
+----------------------------
+
+ * New library name: KnHttp
+ * New package name: ovh.karewan.knhttp
+ * TLS 1.3 support on all Android versions (with help of Conscrypt)
+ * TLS 1.0 AND 1.1 now disabled by default (too weak)
+ * Migrate code to Java 1.8
+ * Singleton instead of static class
+ * A new settings class can be use with the init method
+ * Change default timeout (Connect 15s, Read 30s, Write 30s)
+ * Merge "classic" response interfaces with okhttpresponse interfaces
+ * Remove prefetch method
+ * Remove ConnectionClassManager, AnalyticsListener, GzipRequestInterceptor
+ * Remove useless res folder
+ * Bump OkHttp Version to 3.12.6
+ * Bump Okio Version to 1.17.4
+ * Add [Conscrypt](https://github.com/google/conscrypt) dependency too support TLS 1.3 and ECC certificates on all Android versions
+ * Add [FastJson](https://github.com/alibaba/fastjson) dependency for faster JSON parsing instead of GSON
+ * Remove GSON dependency
+ * Remove RxJava, RxJava2, Jackson support
+ * Remove sample app
+ * Migrate support library to androidx
+ * Compile SDK 28, Target SDK 28, Min SDK 19
+ * Bump gradle plugin to 3.5.1
+ * Unused imports removed
+
+Fast-Android-Networking Change Log
 ==========
 
 Version 1.0.2 *(2018-07-10)*
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
deleted file mode 100644
index 3741d94..0000000
--- a/CONTRIBUTING.md
+++ /dev/null
@@ -1,9 +0,0 @@
-# Contributing
-
-1. Fork it!
-2. Checkout the development branch: `git checkout development`
-3. Create your feature branch: `git checkout -b my-new-feature`
-4. Add your changes to the index: `git add .`
-5. Commit your changes: `git commit -m 'Add some feature'`
-6. Push to the branch: `git push origin my-new-feature`
-7. Submit a pull request against the `development` branch
diff --git a/LICENSE b/LICENSE
index 7a4a3ea..f46ccc7 100644
--- a/LICENSE
+++ b/LICENSE
@@ -187,7 +187,8 @@
       same "printed page" as the copyright notice for easier
       identification within third-party archives.
 
-   Copyright [yyyy] [name of copyright owner]
+   Copyright (c) 2019 Florent VIALATTE
+   Copyright (c) 2016-2019 Amit Shekhar
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
diff --git a/README.md b/README.md
index d5c699c..0cac863 100644
--- a/README.md
+++ b/README.md
@@ -1,648 +1,82 @@
-<img src=https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/androidnetworking.png >
+# KnHttp
 
-# Fast Android Networking Library
+[![](https://jitpack.io/v/Karewan/KnHttp.svg)](https://jitpack.io/#Karewan/KnHttp)
+[![API](https://img.shields.io/badge/API-19%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=19)
+[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.png?v=103)](https://opensource.org/licenses/Apache-2.0)
+[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/Karewan/KnHttp/blob/master/LICENSE)
 
-[![Build Status](https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking.svg?branch=master)](https://travis-ci.org/amitshekhariitbhu/Fast-Android-Networking)
-[![Mindorks](https://img.shields.io/badge/mindorks-opensource-blue.svg)](https://mindorks.com/open-source-projects)
-[![Mindorks Community](https://img.shields.io/badge/join-community-blue.svg)](https://mindorks.com/join-community)
-[![Mindorks Android Store](https://img.shields.io/badge/Mindorks%20Android%20Store-Fast%20Android%20Networking-blue.svg?style=flat)](https://mindorks.com/android/store)
-[![API](https://img.shields.io/badge/API-9%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=9)
-[![Download](https://api.bintray.com/packages/amitshekhariitbhu/maven/android-networking/images/download.svg) ](https://bintray.com/amitshekhariitbhu/maven/android-networking/_latestVersion)
-[![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=102)](https://opensource.org/licenses/Apache-2.0)
-[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/amitshekhariitbhu/Fast-Android-Networking/blob/master/LICENSE)
+### About KnHttp (Fast-Android-Networking)
 
-### About Fast Android Networking Library
+* https://github.com/amitshekhariitbhu/Fast-Android-Networking
+* http://amitshekhariitbhu.github.io/Fast-Android-Networking
 
-Fast Android Networking Library is a powerful library for doing any type of networking in Android applications which is made on top of [OkHttp Networking Layer](http://square.github.io/okhttp/).
-
-Fast Android Networking Library takes care of each and everything. So you don't have to do anything, just make request and listen for the response.
-
-### Why use Fast Android Networking ?
-* Recent removal of HttpClient in Android Marshmallow(Android M) made other networking libraries obsolete.
-* No other single library does each and everything like making request, downloading any type of file, uploading file, loading
-  image from network in ImageView, etc. There are some libraries but they are outdated.
+### Why use KnHttp ?
+* TLS 1.3 support on all Android versions
+* It uses [OkHttp](http://square.github.io/okhttp/), more importantly it supports HTTP/2.
+* As it uses [Okio](https://github.com/square/okio), no more GC overhead in android applications. [Okio](https://github.com/square/okio) is made to handle GC overhead while allocating memory. [Okio](https://github.com/square/okio) does some clever things to save CPU and memory.
+* No other single library does each and everything like making request, downloading any type of file, uploading file, loading image from network in ImageView, etc. There are some libraries but they are outdated.
 * No other library provides simple interface for doing all types of things in networking like setting priority, cancelling, etc.
-* As it uses [Okio](https://github.com/square/okio) , No more GC overhead in android applications.
-  [Okio](https://github.com/square/okio) is made to handle GC overhead while allocating memory.
-  [Okio](https://github.com/square/okio) does some clever things to save CPU and memory.
-* It uses [OkHttp](http://square.github.io/okhttp/) , more importantly it supports HTTP/2.  
-
-### RxJava2 Support, [check here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html).
-
-### RxJava2 + Fast Android Networking + Dagger2 with MVP Architecture Project, [Check here](https://github.com/MindorksOpenSource/android-mvp-architecture)
-
-### Another awesome library for debugging databases and shared preferences, [Check here](https://github.com/amitshekhariitbhu/Android-Debug-Database)
-
-### Find this project useful ? :heart:
-* Support it by clicking the :star: button on the upper right of this page. :v:
-
-For full details, visit the documentation on our web site :
-
-<a href="https://amitshekhariitbhu.github.io/Fast-Android-Networking" target="_blank"><img src="https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/get_started.png" width="150" height="42"/></a>
-
-## Requirements
-
-Fast Android Networking Library can be included in any Android application. 
-
-Fast Android Networking Library supports Android 2.3 (Gingerbread) and later. 
+* Recent removal of HttpClient in Android Marshmallow(Android M) made other networking libraries obsolete.
 
-## Using Fast Android Networking Library in your application
+## Installation
 
-Add this in your build.gradle
-```groovy
-implementation 'com.amitshekhar.android:android-networking:1.0.2'
-```
-Do not forget to add internet permission in manifest if already not present
-```xml
-<uses-permission android:name="android.permission.INTERNET" />
-```
-Then initialize it in onCreate() Method of application class :
-```java
-AndroidNetworking.initialize(getApplicationContext());
-```
-Initializing it with some customization , as it uses [OkHttp](http://square.github.io/okhttp/) as networking layer, you can pass custom okHttpClient while initializing it.
-```java
-// Adding an Network Interceptor for Debugging purpose :
-OkHttpClient okHttpClient = new OkHttpClient() .newBuilder()
-                        .addNetworkInterceptor(new StethoInterceptor())
-                        .build();
-AndroidNetworking.initialize(getApplicationContext(),okHttpClient);                        
-```
-Using the Fast Android Networking with Jackson Parser
 ```groovy
-implementation 'com.amitshekhar.android:jackson-android-networking:1.0.2'
-```
-```java
-// Then set the JacksonParserFactory like below
-AndroidNetworking.setParserFactory(new JacksonParserFactory());
-```
-
-### Making a GET Request
-```java
-AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                 .addPathParameter("pageNumber", "0")
-                 .addQueryParameter("limit", "3")
-                 .addHeaders("token", "1234")
-                 .setTag("test")
-                 .setPriority(Priority.LOW)
-                 .build()
-                 .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                      // do anything with response
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error
-                    }
-                });                
-```
-### Making a POST Request
-```java
-AndroidNetworking.post("https://fierce-cove-29863.herokuapp.com/createAnUser")
-                 .addBodyParameter("firstname", "Amit")
-                 .addBodyParameter("lastname", "Shekhar")
-                 .setTag("test")
-                 .setPriority(Priority.MEDIUM)
-                 .build()
-                 .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                      // do anything with response
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error
-                    }
-                });
-```
-You can also post java object, json, file, etc in POST request like this.
-```java
-User user = new User();
-user.firstname = "Amit";
-user.lastname = "Shekhar";
-
-AndroidNetworking.post("https://fierce-cove-29863.herokuapp.com/createUser")
-                 .addBodyParameter(user) // posting java object
-                 .setTag("test")
-                 .setPriority(Priority.MEDIUM)
-                 .build()
-                 .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                      // do anything with response
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error
-                    }
-                });
-
-
-JSONObject jsonObject = new JSONObject();
-try {
-    jsonObject.put("firstname", "Amit");
-    jsonObject.put("lastname", "Shekhar");
-} catch (JSONException e) {
-  e.printStackTrace();
+allprojects {
+	repositories {
+		...
+		maven { url 'https://jitpack.io' }
+	}
 }
-       
-AndroidNetworking.post("https://fierce-cove-29863.herokuapp.com/createUser")
-                 .addJSONObjectBody(jsonObject) // posting json
-                 .setTag("test")
-                 .setPriority(Priority.MEDIUM)
-                 .build()
-                 .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                      // do anything with response
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error
-                    }
-                });
-                
-AndroidNetworking.post("https://fierce-cove-29863.herokuapp.com/postFile")
-                 .addFileBody(file) // posting any type of file
-                 .setTag("test")
-                 .setPriority(Priority.MEDIUM)
-                 .build()
-                 .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                      // do anything with response
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error
-                    }
-                });               
-```
-
-### Using it with your own JAVA Object - JSON Parser
-```java
-/*--------------Example One -> Getting the userList----------------*/
-AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> users) {
-                      // do anything with response
-                      Log.d(TAG, "userList size : " + users.size());
-                      for (User user : users) {
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                      }
-                    }
-                    @Override
-                    public void onError(ANError anError) {
-                     // handle error
-                    }
-                });
-/*--------------Example Two -> Getting an user----------------*/
-AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUserDetail/{userId}")
-                .addPathParameter("userId", "1")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                     @Override
-                     public void onResponse(User user) {
-                        // do anything with response
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                     }
-                     @Override
-                     public void onError(ANError anError) {
-                        // handle error
-                     }
-                 }); 
-/*-- Note : YourObject.class, getAsObject and getAsObjectList are important here --*/              
 ```
 
-### Downloading a file from server
-```java
-AndroidNetworking.download(url,dirPath,fileName)
-                 .setTag("downloadTest")
-                 .setPriority(Priority.MEDIUM)
-                 .build()
-                 .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                      // do anything with progress  
-                    }
-                 })
-                 .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                      // do anything after completion
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error    
-                    }
-                });                 
-```
-### Uploading a file to server
-```java
-AndroidNetworking.upload(url)
-                 .addMultipartFile("image",file)    
-                 .addMultipartParameter("key","value")
-                 .setTag("uploadTest")
-                 .setPriority(Priority.HIGH)
-                 .build()
-                 .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                      // do anything with progress 
-                    }
-                 })
-                 .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                      // do anything with response                
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error 
-                    }
-                 }); 
-```
-
-### Getting Response and completion in an another thread executor 
-(Note : Error and Progress will always be returned in main thread of application)
-```java
-AndroidNetworking.upload(url)
-                 .addMultipartFile("image",file)  
-                 .addMultipartParameter("key","value")  
-                 .setTag("uploadTest")
-                 .setPriority(Priority.HIGH)
-                 .build()
-                 .setExecutor(Executors.newSingleThreadExecutor()) // setting an executor to get response or completion on that executor thread
-                 .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                      // do anything with progress 
-                    }
-                 })
-                 .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                      // below code will be executed in the executor provided
-                      // do anything with response                
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error 
-                    }
-                 }); 
-```
-### Setting a Percentage Threshold For Not Cancelling the request if it has completed the given threshold
-```java
-AndroidNetworking.download(url,dirPath,fileName)
-                 .setTag("downloadTest")
-                 .setPriority(Priority.MEDIUM)
-                 .setPercentageThresholdForCancelling(50) // even if at the time of cancelling it will not cancel if 50% 
-                 .build()                                 // downloading is done.But can be cancalled with forceCancel.
-                 .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                      // do anything with progress  
-                    }
-                 })
-                 .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                      // do anything after completion
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error    
-                    }
-                });   
-```
-### Cancelling a request.
-Any request with a given tag can be cancelled. Just do like this.
-```java
-AndroidNetworking.cancel("tag"); // All the requests with the given tag will be cancelled.
-AndroidNetworking.forceCancel("tag");  // All the requests with the given tag will be cancelled , even if any percent threshold is
-                                       // set , it will be cancelled forcefully. 
-AndroidNetworking.cancelAll(); // All the requests will be cancelled.  
-AndroidNetworking.forceCancelAll(); // All the requests will be cancelled , even if any percent threshold is
-                               // set , it will be cancelled forcefully.                           
-```
-### Loading image from network into ImageView
-```xml
-      <com.androidnetworking.widget.ANImageView
-          android:id="@+id/imageView"
-          android:layout_width="100dp"
-          android:layout_height="100dp"
-          android:layout_gravity="center" />
-          
-      imageView.setDefaultImageResId(R.drawable.default);
-      imageView.setErrorImageResId(R.drawable.error);
-      imageView.setImageUrl(imageUrl);          
-```
-### Getting Bitmap from url with some specified parameters
-```java
-AndroidNetworking.get(imageUrl)
-                 .setTag("imageRequestTag")
-                 .setPriority(Priority.MEDIUM)
-                 .setBitmapMaxHeight(100)
-                 .setBitmapMaxWidth(100)
-                 .setBitmapConfig(Bitmap.Config.ARGB_8888)
-                 .build()
-                 .getAsBitmap(new BitmapRequestListener() {
-                    @Override
-                    public void onResponse(Bitmap bitmap) {
-                    // do anything with bitmap
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error
-                    }
-                });
-```
-### Error Code Handling
-```java
-public void onError(ANError error) {
-   if (error.getErrorCode() != 0) {
-        // received error from server
-        // error.getErrorCode() - the error code from server
-        // error.getErrorBody() - the error body from server
-        // error.getErrorDetail() - just an error detail
-        Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-        Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-        Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-        // get parsed error object (If ApiError is your class)
-        ApiError apiError = error.getErrorAsObject(ApiError.class);
-   } else {
-        // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-        Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-   }
-}
-```
-### Remove Bitmap from cache or clear cache
-```java
-AndroidNetworking.evictBitmap(key); // remove a bitmap with key from LruCache
-AndroidNetworking.evictAllBitmap(); // clear LruCache
-```
-### Prefetch a request (so that it can return from cache when required at instant)
-```java
-AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "30")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .prefetch();
-```
-### Customizing OkHttpClient for a particular request
-```java
-OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
-                .addInterceptor(new GzipRequestInterceptor())
-                .build();
-                
-AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                 .addPathParameter("pageNumber", "0")
-                 .addQueryParameter("limit", "3")
-                 .addHeaders("token", "1234")
-                 .setTag("test")
-                 .setPriority(Priority.LOW)
-                 .setOkHttpClient(okHttpClient) // passing a custom okHttpClient 
-                 .build()
-                 .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                      // do anything with response
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                    // handle error
-                    }
-                });
-```
-### Making a conditional request (Building a request)
-```java
-ANRequest.GetRequestBuilder getRequestBuilder = new ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-               
-if(isHeaderRequired){
- getRequestBuilder.addHeaders("token", "1234");
-}
-
-if(executorRequired){
- getRequestBuilder.setExecutor(Executors.newSingleThreadExecutor());
+```groovy
+dependencies {
+	implementation 'com.github.Karewan:KnHttp:2.0.0'
 }
-               
-ANRequest anRequest = getRequestBuilder.build();       
-                 
-anRequest.getAsJSONObject(new JSONObjectRequestListener() {
-    @Override
-    public void onResponse(JSONObject response) {
-      // do anything with response
-    }
-    @Override
-    public void onError(ANError error) {
-      // handle error
-    }
-});
 ```
-### ConnectionClass Listener to get current network quality and bandwidth
-```java
-// Adding Listener
-AndroidNetworking.setConnectionQualityChangeListener(new ConnectionQualityChangeListener() {
-            @Override
-            public void onChange(ConnectionQuality currentConnectionQuality, int currentBandwidth) {
-              // do something on change in connectionQuality
-            }
-        });
-        
-// Removing Listener   
-AndroidNetworking.removeConnectionQualityChangeListener();
 
-// Getting current ConnectionQuality
-ConnectionQuality connectionQuality = AndroidNetworking.getCurrentConnectionQuality();
-if(connectionQuality == ConnectionQuality.EXCELLENT) {
-  // do something
-} else if (connectionQuality == ConnectionQuality.POOR) {
-  // do something
-} else if (connectionQuality == ConnectionQuality.UNKNOWN) {
-  // do something
-}
-// Getting current bandwidth
-int currentBandwidth = AndroidNetworking.getCurrentBandwidth(); // Note : if (currentBandwidth == 0) : means UNKNOWN
-```
-### Getting Analytics of a request by setting AnalyticsListener on that
-```java
-AndroidNetworking.download(url,dirPath,fileName)
-                 .setTag("downloadTest")
-                 .setPriority(Priority.MEDIUM)
-                 .build()
-                 .setAnalyticsListener(new AnalyticsListener() {
-                      @Override
-                      public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                          Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                          Log.d(TAG, " bytesSent : " + bytesSent);
-                          Log.d(TAG, " bytesReceived : " + bytesReceived);
-                          Log.d(TAG, " isFromCache : " + isFromCache);
-                      }
-                  })
-                 .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                      // do anything with progress  
-                    }
-                 })
-                 .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                      // do anything after completion
-                    }
-                    @Override
-                    public void onError(ANError error) {
-                      // handle error    
-                    }
-                });  
-Note : If bytesSent or bytesReceived is -1 , it means it is unknown                
-```
-### Getting OkHttpResponse in Response
-```java
-AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUserDetail/{userId}")
-                .addPathParameter("userId", "1")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setUserAgent("getAnUser")
-                .build()
-                .getAsOkHttpResponseAndParsed(new TypeToken<User>() {
-                }, new OkHttpResponseAndParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, User user) {
-                      // do anything with okHttpResponse and user
-                    }
-                    @Override
-                    public void onError(ANError anError) {
-                      // handle error
-                    }
-                });
-```
-### Making Synchronous Request
-```java                
-ANRequest request = AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                        .addPathParameter("pageNumber", "0")
-                        .addQueryParameter("limit", "3")
-                        .build();
-ANResponse<List<User>> response = request.executeForObjectList(User.class);
-if (response.isSuccess()) {
-   List<User> users = responseTwo.getResult();
-} else {
-   //handle error
-}                                        
+Do not forget to add internet permission in manifest if already not present
+```xml
+<uses-permission android:name="android.permission.INTERNET" />
 ```
-### How caching works ?
-* First of all the server must send cache-control in header so that is starts working.
-* Response will be cached on the basis of cache-control max-age,max-stale.
-* If internet is connected and the age is NOT expired it will return from cache.
-* If internet is connected and the age is expired and if server returns 304(NOT MODIFIED) it will return from cache.
-* If internet is NOT connected if you are using getResponseOnlyIfCached() - it will return from cache even it date is expired.
-* If internet is NOT connected , if you are NOT using getResponseOnlyIfCached() - it will NOT return anything.
-* If you are using getResponseOnlyFromNetwork() , it will only return response after validation from server.
-* If cache-control is set, it will work according to the max-age,max-stale returned from server.
-* If internet is NOT connected only way to get cache Response is by using getResponseOnlyIfCached().
 
-### Enabling Logging
-```java
-AndroidNetworking.enableLogging(); // simply enable logging
-AndroidNetworking.enableLogging(LEVEL.HEADERS); // enabling logging with level
-```
-### Enabling GZIP From Client to Server
+Then initialize :
 ```java
-// Enabling GZIP for Request (Not needed if your server doesn't support GZIP Compression), anyway responses 
-// from server are automatically unGzipped if required. So enable it only if you need your request to be 
-// Gzipped before sending to server(Make sure your server support GZIP Compression).
-OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
-                .addInterceptor(new GzipRequestInterceptor())
-                .build();
-AndroidNetworking.initialize(getApplicationContext(),okHttpClient);                
+KnHttp.init(getApplicationContext());
 ```
-### IMPORTANT NOTE
-* Use IMMEDIATE Priority with caution - use is at appropriate place only when
-  1 or 2 (at max 2)IMMEDIATE request is required at instant.Otherwise use HIGH Priority.
-* Known Bug : As present if you are using GZIP Interceptor from client to server, Upload progress
-  is not working perfectly in Multipart.
-  
-  If you are using Proguard with Gradle build system (which is usually the case), you don't have to do anything. The appropriate Proguard rules will be automatically applied. If you still need the rules applied in `proguard-rules.pro`, it is as follows:
-  ```
-  -dontwarn okio.**
-  ```
+## Customization
+...
 
-  
-### Fast Android Networking Library supports
+## Making requests
 
-* Fast Android Networking Library supports all types of HTTP/HTTPS request like GET, POST, DELETE, HEAD, PUT, PATCH
-* Fast Android Networking Library supports downloading any type of file
-* Fast Android Networking Library supports uploading any type of file (supports multipart upload)
-* Fast Android Networking Library supports cancelling a request
-* Fast Android Networking Library supports setting priority to any request (LOW, MEDIUM, HIGH, IMMEDIATE)
-* Fast Android Networking Library supports [RxJava](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html)
+#### GET Request
+...
 
-As it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it supports:
+#### POST Request
+...
 
-* Fast Android Networking Library supports HTTP/2 support allows all requests to the same host to share a socket
-* Fast Android Networking Library uses connection pooling which reduces request latency (if HTTP/2 isn’t available)
-* Transparent GZIP shrinks download sizes
-* Fast Android Networking Library supports response caching which avoids the network completely for repeat requests
+#### DOWNLOAD Request
+...
 
-### Difference over other Networking Library
-* In Fast Android Networking Library, OkHttpClient can be customized for every request easily — like timeout customization, etc. for each request.
-* As Fast Android Networking Library uses [OkHttp](http://square.github.io/okhttp/) and [Okio](https://github.com/square/okio), it is faster.
-* Single library for all type of networking.
-* Supports RxJava, RxJava2 -> [Check here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html)
-* Current bandwidth and connection quality can be obtained to decide logic of code.
-* Executor can be passed to any request to get the response in another thread.
-* Complete analytics of any request can be obtained.
-* All types of customization are possible.
-* Immediate Request really is immediate now.
-* Prefetching of any request can be done so that it gives instant data when required from the cache.
-* Proper request canceling.
-* Prevents cancellation of a request if it’s completed more than a specific threshold percentage.
-* A simple interface to make any type of request.
-* Proper Response Caching — which leads to reduced bandwidth usage. 
-
-### TODO
-* Integration with other library
-* And of course many many features and bug fixes
+#### UPLOAD Request
+...
 
 ### CREDITS
-* [Square](https://square.github.io/) - As both [OkHttp](http://square.github.io/okhttp/) and [Okio](https://github.com/square/okio)
-  used by Fast Android Networking is developed by [Square](https://square.github.io/).
-* [Volley](https://android.googlesource.com/platform/frameworks/volley/) - As Fast Android Networking uses ImageLoader that is developed by [Volley](https://android.googlesource.com/platform/frameworks/volley/).  
-* [Prashant Gupta](https://github.com/PrashantGupta17) - For RxJava, RxJava2 Support - [RxJava Support](https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava)
-
-### [Check out Mindorks awesome open source projects here](https://mindorks.com/open-source-projects)
-
-### Contact - Let's become friend
-- [Twitter](https://twitter.com/amitiitbhu)
-- [Github](https://github.com/amitshekhariitbhu)
-- [Medium](https://medium.com/@amitshekhar)
-- [Facebook](https://www.facebook.com/amit.shekhar.iitbhu)
+* [Amit Shekhar](https://github.com/amitshekhariitbhu) - Many thanks for all his work on [Fast-Android-Networking](https://github.com/amitshekhariitbhu/Fast-Android-Networking).
+* Thanks to all contributors of [Fast-Android-Networking](https://github.com/amitshekhariitbhu/Fast-Android-Networking).
+* [Square](https://square.github.io/) - As both [OkHttp](http://square.github.io/okhttp/) and [Okio](https://github.com/square/okio) used by KnHttp is developed by [Square](https://square.github.io/).
+* [Volley](https://android.googlesource.com/platform/frameworks/volley/) - As KnHttp uses ImageLoader that is developed by [Volley](https://android.googlesource.com/platform/frameworks/volley/).
 
 ### License
 ```
-   Copyright (C) 2016 Amit Shekhar
-   Copyright (C) 2011 Android Open Source Project
+   Copyright (c) 2019 Florent VIALATTE
+   Copyright (c) 2016-2019 Amit Shekhar
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
-       http://www.apache.org/licenses/LICENSE-2.0
+   http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
@@ -650,8 +84,3 @@ As it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it s
    See the License for the specific language governing permissions and
    limitations under the License.
 ```
-
-### Contributing to Fast Android Networking
-All pull requests are welcome, make sure to follow the [contribution guidelines](CONTRIBUTING.md)
-when you submit pull request.
-
diff --git a/android-networking/build.gradle b/android-networking/build.gradle
deleted file mode 100644
index e6a08f9..0000000
--- a/android-networking/build.gradle
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-apply plugin: 'com.android.library'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-        consumerProguardFiles 'proguard-rules.pro'
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-    lintOptions {
-        abortOnError false
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
-    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttp3Version"
-    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
-    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
-}
-//apply from: 'upload.gradle'
diff --git a/android-networking/proguard-rules.pro b/android-networking/proguard-rules.pro
deleted file mode 100644
index 3f19523..0000000
--- a/android-networking/proguard-rules.pro
+++ /dev/null
@@ -1,20 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/amitshekhar/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
-
-# For OkHttp
--dontwarn okio.**
diff --git a/android-networking/src/androidTest/AndroidManifest.xml b/android-networking/src/androidTest/AndroidManifest.xml
deleted file mode 100755
index 944071c..0000000
--- a/android-networking/src/androidTest/AndroidManifest.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.androidnetworking">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"></uses-permission>
-
-</manifest>
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java
deleted file mode 100644
index 57e8e33..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java
+++ /dev/null
@@ -1,469 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 03/04/17.
- */
-
-public class GetJSONApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public GetJSONApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testJSONObjectGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArrayGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArrayGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONObjectGetRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<JSONObject> response = request.executeForJSONObject();
-
-        assertEquals("Amit", response.getResult().getString("firstName"));
-
-        assertEquals("Shekhar", response.getResult().getString("lastName"));
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<JSONObject> response = request.executeForJSONObject();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONArrayGetRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<JSONArray> response = request.executeForJSONArray();
-
-        JSONObject jsonObject = response.getResult().getJSONObject(0);
-
-        assertEquals("Amit", jsonObject.getString("firstName"));
-
-        assertEquals("Shekhar", jsonObject.getString("lastName"));
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONArrayGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<JSONObject> response = request.executeForJSONArray();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndJSONObjectGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndJSONObjectGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndJSONArrayGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndJSONArrayGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            headerRef.set(okHttpResponse.request().header("headerKey"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
\ No newline at end of file
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java
deleted file mode 100644
index e06a4ac..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java
+++ /dev/null
@@ -1,450 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.androidnetworking.model.User;
-
-import org.json.JSONException;
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 10/04/17.
- */
-
-public class GetObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public GetObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testObjectGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectGetRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        assertEquals("Amit", response.getResult().firstName);
-
-        assertEquals("Shekhar", response.getResult().lastName);
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListGetRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        User user = response.getResult().get(0);
-
-        assertEquals("Amit", user.firstName);
-
-        assertEquals("Shekhar", user.lastName);
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndObjectGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndObjectListGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                firstNameRef.set(userList.get(0).firstName);
-                                lastNameRef.set(userList.get(0).lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectListGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                headerRef.set(okHttpResponse.request().header("headerKey"));
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java
deleted file mode 100644
index aaef6fe..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java
+++ /dev/null
@@ -1,348 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseListener;
-import com.androidnetworking.interfaces.StringRequestListener;
-
-import org.junit.Rule;
-
-import java.io.IOException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-public class GetStringApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public GetStringApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testStringGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsString(new StringRequestListener() {
-                    @Override
-                    public void onResponse(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsString(new StringRequestListener() {
-                    @Override
-                    public void onResponse(String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousStringGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<String> response = request.executeForString();
-
-        assertEquals("data", response.getResult());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousStringGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<String> response = request.executeForString();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-    }
-
-    public void testResponseBodyGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        try {
-                            responseRef.set(response.body().string());
-                            latch.countDown();
-                        } catch (IOException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testResponseBodyGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        try {
-                            errorBodyRef.set(response.body().string());
-                            errorCodeRef.set(response.code());
-                            latch.countDown();
-                        } catch (IOException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSyncResponseBodyGet() throws InterruptedException, IOException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<Response> response = request.executeForOkHttpResponse();
-
-        assertEquals("data", response.getResult().body().string());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSyncResponseBodyGet404() throws InterruptedException, IOException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<Response> response = request.executeForOkHttpResponse();
-
-        assertEquals("data", response.getResult().body().string());
-
-        assertEquals(404, response.getResult().code());
-    }
-
-    public void testResponseBodyAndStringGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final AtomicReference<String> responseStringRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        responseBodySuccess.set(okHttpResponse.isSuccessful());
-                        responseStringRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("data", responseStringRef.get());
-    }
-
-    public void testResponseBodyAndStringGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        responseRef.set(response);
-                        responseBodySuccess.set(okHttpResponse.isSuccessful());
-                        headerRef.set(okHttpResponse.request().header("headerKey"));
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("data", responseRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-}
\ No newline at end of file
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java
deleted file mode 100644
index 3fdc4cf..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java
+++ /dev/null
@@ -1,487 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 09/04/17.
- */
-
-public class MultipartJSONApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public MultipartJSONApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testJSONObjectMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArrayMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArrayMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONObjectMultipartRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<JSONObject> response = request.executeForJSONObject();
-
-        assertEquals("Amit", response.getResult().getString("firstName"));
-
-        assertEquals("Shekhar", response.getResult().getString("lastName"));
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONObjectMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<JSONObject> response = request.executeForJSONObject();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONArrayMultipartRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<JSONArray> response = request.executeForJSONArray();
-
-        JSONObject jsonObject = response.getResult().getJSONObject(0);
-
-        assertEquals("Amit", jsonObject.getString("firstName"));
-
-        assertEquals("Shekhar", jsonObject.getString("lastName"));
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONArrayMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<JSONObject> response = request.executeForJSONArray();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndJSONObjectMultipart() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndJSONObjectMultipart404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndJSONArrayMultipart() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndJSONArrayMultipart404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            headerRef.set(okHttpResponse.request().header("headerKey"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-
-}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java
deleted file mode 100644
index e223381..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java
+++ /dev/null
@@ -1,467 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.androidnetworking.model.User;
-
-import org.json.JSONException;
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 12/04/17.
- */
-
-public class MultipartObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public MultipartObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testObjectMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectMultipartRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        assertEquals("Amit", response.getResult().firstName);
-
-        assertEquals("Shekhar", response.getResult().lastName);
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListMultipartRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        User user = response.getResult().get(0);
-
-        assertEquals("Amit", user.firstName);
-
-        assertEquals("Shekhar", user.lastName);
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndObjectMultipart() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectMultipart404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndObjectListMultipart() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                firstNameRef.set(userList.get(0).firstName);
-                                lastNameRef.set(userList.get(0).lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectListMultipart404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                headerRef.set(okHttpResponse.request().header("headerKey"));
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java
deleted file mode 100644
index af01aa9..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java
+++ /dev/null
@@ -1,371 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseListener;
-import com.androidnetworking.interfaces.StringRequestListener;
-import com.androidnetworking.model.User;
-
-import org.junit.Rule;
-
-import java.io.IOException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 27/03/17.
- */
-
-public class MultipartStringApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public MultipartStringApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testStringMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsString(new StringRequestListener() {
-                    @Override
-                    public void onResponse(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getAsString(new StringRequestListener() {
-                    @Override
-                    public void onResponse(String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousStringMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<String> response = request.executeForString();
-
-        assertEquals("data", response.getResult());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<String> response = request.executeForString();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-    }
-
-    public void testResponseBodyMultipart() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        try {
-                            responseRef.set(response.body().string());
-                            latch.countDown();
-                        } catch (IOException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testResponseBodyMultipart404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        try {
-                            errorBodyRef.set(response.body().string());
-                            errorCodeRef.set(response.code());
-                            latch.countDown();
-                        } catch (IOException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSyncResponseBodyMultipart() throws InterruptedException, IOException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<Response> response = request.executeForOkHttpResponse();
-
-        assertEquals("data", response.getResult().body().string());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSyncResponseBodyMultipart404() throws InterruptedException, IOException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build();
-
-        ANResponse<Response> response = request.executeForOkHttpResponse();
-
-        assertEquals("data", response.getResult().body().string());
-
-        assertEquals(404, response.getResult().code());
-    }
-
-    public void testResponseBodyAndStringMultipart() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final AtomicReference<String> responseStringRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        responseBodySuccess.set(okHttpResponse.isSuccessful());
-                        responseStringRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("data", responseStringRef.get());
-    }
-
-    public void testResponseBodyAndStringMultipart404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.upload(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addMultipartParameter("key", "value")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        responseRef.set(response);
-                        responseBodySuccess.set(okHttpResponse.isSuccessful());
-                        headerRef.set(okHttpResponse.request().header("headerKey"));
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("data", responseRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
\ No newline at end of file
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java
deleted file mode 100644
index 2f9a244..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java
+++ /dev/null
@@ -1,499 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 06/04/17.
- */
-
-public class PostJSONApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public PostJSONApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testJSONObjectPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArrayPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArrayPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONObjectPostRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<JSONObject> response = request.executeForJSONObject();
-
-        assertEquals("Amit", response.getResult().getString("firstName"));
-
-        assertEquals("Shekhar", response.getResult().getString("lastName"));
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<JSONObject> response = request.executeForJSONObject();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONArrayPostRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<JSONArray> response = request.executeForJSONArray();
-
-        JSONObject jsonObject = response.getResult().getJSONObject(0);
-
-        assertEquals("Amit", jsonObject.getString("firstName"));
-
-        assertEquals("Shekhar", jsonObject.getString("lastName"));
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousJSONArrayPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<JSONObject> response = request.executeForJSONArray();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndJSONObjectPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndJSONObjectPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndJSONArrayPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndJSONArrayPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            responseBodySuccess.set(okHttpResponse.isSuccessful());
-                            headerRef.set(okHttpResponse.request().header("headerKey"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java
deleted file mode 100644
index 2865436..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java
+++ /dev/null
@@ -1,480 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.androidnetworking.model.User;
-
-import org.json.JSONException;
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 11/04/17.
- */
-
-public class PostObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public PostObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testObjectPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectPostRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        assertEquals("Amit", response.getResult().firstName);
-
-        assertEquals("Shekhar", response.getResult().lastName);
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListPostRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        User user = response.getResult().get(0);
-
-        assertEquals("Amit", user.firstName);
-
-        assertEquals("Shekhar", user.lastName);
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndObjectPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndObjectListPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                firstNameRef.set(userList.get(0).firstName);
-                                lastNameRef.set(userList.get(0).lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectListPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                headerRef.set(okHttpResponse.request().header("headerKey"));
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java b/android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java
deleted file mode 100644
index 17b527a..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java
+++ /dev/null
@@ -1,381 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseListener;
-import com.androidnetworking.interfaces.StringRequestListener;
-
-import org.junit.Rule;
-
-import java.io.IOException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 25/03/17.
- */
-
-public class PostStringApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public PostStringApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testStringPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsString(new StringRequestListener() {
-                    @Override
-                    public void onResponse(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", responseRef.get());
-    }
-
-
-    public void testStringPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsString(new StringRequestListener() {
-                    @Override
-                    public void onResponse(String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousStringPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<String> response = request.executeForString();
-
-        assertEquals("data", response.getResult());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousStringPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<String> response = request.executeForString();
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-    }
-
-    public void testResponseBodyPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        try {
-                            responseRef.set(response.body().string());
-                            latch.countDown();
-                        } catch (IOException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testResponseBodyPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        try {
-                            errorBodyRef.set(response.body().string());
-                            errorCodeRef.set(response.code());
-                            latch.countDown();
-                        } catch (IOException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSyncResponseBodyPost() throws InterruptedException, IOException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<Response> response = request.executeForOkHttpResponse();
-
-        assertEquals("data", response.getResult().body().string());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSyncResponseBodyPost404() throws InterruptedException, IOException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<Response> response = request.executeForOkHttpResponse();
-
-        assertEquals("data", response.getResult().body().string());
-
-        assertEquals(404, response.getResult().code());
-    }
-
-    public void testResponseBodyAndStringPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final AtomicReference<String> responseStringRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        responseBodySuccess.set(okHttpResponse.isSuccessful());
-                        responseStringRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("data", responseStringRef.get());
-    }
-
-    public void testResponseBodyAndStringPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndString(new OkHttpResponseAndStringRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, String response) {
-                        responseRef.set(response);
-                        responseBodySuccess.set(okHttpResponse.isSuccessful());
-                        headerRef.set(okHttpResponse.request().header("headerKey"));
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("data", responseRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-}
diff --git a/android-networking/src/androidTest/java/com/androidnetworking/model/User.java b/android-networking/src/androidTest/java/com/androidnetworking/model/User.java
deleted file mode 100644
index 4337a8f..0000000
--- a/android-networking/src/androidTest/java/com/androidnetworking/model/User.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.model;
-
-/**
- * Created by amitshekhar on 10/04/17.
- */
-
-public class User {
-
-    public String firstName;
-    public String lastName;
-
-}
diff --git a/android-networking/src/main/AndroidManifest.xml b/android-networking/src/main/AndroidManifest.xml
deleted file mode 100644
index 3986b22..0000000
--- a/android-networking/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.androidnetworking">
-</manifest>
diff --git a/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java b/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
deleted file mode 100644
index 84c50bf..0000000
--- a/android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
+++ /dev/null
@@ -1,343 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking;
-
-import android.content.Context;
-import android.graphics.BitmapFactory;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ConnectionClassManager;
-import com.androidnetworking.common.ConnectionQuality;
-import com.androidnetworking.core.Core;
-import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
-import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
-import com.androidnetworking.interfaces.Parser;
-import com.androidnetworking.internal.ANImageLoader;
-import com.androidnetworking.internal.ANRequestQueue;
-import com.androidnetworking.internal.InternalNetworking;
-import com.androidnetworking.utils.ParseUtil;
-import com.androidnetworking.utils.Utils;
-
-import okhttp3.OkHttpClient;
-
-/**
- * Created by amitshekhar on 24/03/16.
- */
-
-/**
- * AndroidNetworking entry point.
- * You must initialize this class before use. The simplest way is to just do
- * {#code AndroidNetworking.initialize(context)}.
- */
-@SuppressWarnings("unused")
-public class AndroidNetworking {
-
-    /**
-     * private constructor to prevent instantiation of this class
-     */
-    private AndroidNetworking() {
-    }
-
-    /**
-     * Initializes AndroidNetworking with the default config.
-     *
-     * @param context The context
-     */
-    public static void initialize(Context context) {
-        InternalNetworking.setClientWithCache(context.getApplicationContext());
-        ANRequestQueue.initialize();
-        ANImageLoader.initialize();
-    }
-
-    /**
-     * Initializes AndroidNetworking with the specified config.
-     *
-     * @param context      The context
-     * @param okHttpClient The okHttpClient
-     */
-    public static void initialize(Context context, OkHttpClient okHttpClient) {
-        if (okHttpClient != null && okHttpClient.cache() == null) {
-            okHttpClient = okHttpClient
-                    .newBuilder()
-                    .cache(Utils.getCache(context.getApplicationContext(),
-                            ANConstants.MAX_CACHE_SIZE, ANConstants.CACHE_DIR_NAME))
-                    .build();
-        }
-        InternalNetworking.setClient(okHttpClient);
-        ANRequestQueue.initialize();
-        ANImageLoader.initialize();
-    }
-
-    /**
-     * Method to set decodeOptions
-     *
-     * @param decodeOptions The decode config for Bitmaps
-     */
-    public static void setBitmapDecodeOptions(BitmapFactory.Options decodeOptions) {
-        if (decodeOptions != null) {
-            ANImageLoader.getInstance().setBitmapDecodeOptions(decodeOptions);
-        }
-    }
-
-    /**
-     * Method to set connectionQualityChangeListener
-     *
-     * @param connectionChangeListener The connectionQualityChangeListener
-     */
-    public static void setConnectionQualityChangeListener(ConnectionQualityChangeListener connectionChangeListener) {
-        ConnectionClassManager.getInstance().setListener(connectionChangeListener);
-    }
-
-    /**
-     * Method to set connectionQualityChangeListener
-     */
-    public static void removeConnectionQualityChangeListener() {
-        ConnectionClassManager.getInstance().removeListener();
-    }
-
-    /**
-     * Method to make GET request
-     *
-     * @param url The url on which request is to be made
-     * @return The GetRequestBuilder
-     */
-    public static ANRequest.GetRequestBuilder get(String url) {
-        return new ANRequest.GetRequestBuilder(url);
-    }
-
-    /**
-     * Method to make HEAD request
-     *
-     * @param url The url on which request is to be made
-     * @return The HeadRequestBuilder
-     */
-    public static ANRequest.HeadRequestBuilder head(String url) {
-        return new ANRequest.HeadRequestBuilder(url);
-    }
-
-    /**
-     * Method to make OPTIONS request
-     *
-     * @param url The url on which request is to be made
-     * @return The OptionsRequestBuilder
-     */
-    public static ANRequest.OptionsRequestBuilder options(String url) {
-        return new ANRequest.OptionsRequestBuilder(url);
-    }
-
-    /**
-     * Method to make POST request
-     *
-     * @param url The url on which request is to be made
-     * @return The PostRequestBuilder
-     */
-    public static ANRequest.PostRequestBuilder post(String url) {
-        return new ANRequest.PostRequestBuilder(url);
-    }
-
-    /**
-     * Method to make PUT request
-     *
-     * @param url The url on which request is to be made
-     * @return The PutRequestBuilder
-     */
-    public static ANRequest.PutRequestBuilder put(String url) {
-        return new ANRequest.PutRequestBuilder(url);
-    }
-
-    /**
-     * Method to make DELETE request
-     *
-     * @param url The url on which request is to be made
-     * @return The DeleteRequestBuilder
-     */
-    public static ANRequest.DeleteRequestBuilder delete(String url) {
-        return new ANRequest.DeleteRequestBuilder(url);
-    }
-
-    /**
-     * Method to make PATCH request
-     *
-     * @param url The url on which request is to be made
-     * @return The PatchRequestBuilder
-     */
-    public static ANRequest.PatchRequestBuilder patch(String url) {
-        return new ANRequest.PatchRequestBuilder(url);
-    }
-
-    /**
-     * Method to make download request
-     *
-     * @param url      The url on which request is to be made
-     * @param dirPath  The directory path on which file is to be saved
-     * @param fileName The file name with which file is to be saved
-     * @return The DownloadBuilder
-     */
-    public static ANRequest.DownloadBuilder download(String url, String dirPath, String fileName) {
-        return new ANRequest.DownloadBuilder(url, dirPath, fileName);
-    }
-
-    /**
-     * Method to make upload request
-     *
-     * @param url The url on which request is to be made
-     * @return The MultiPartBuilder
-     */
-    public static ANRequest.MultiPartBuilder upload(String url) {
-        return new ANRequest.MultiPartBuilder(url);
-    }
-
-    /**
-     * Method to make Dynamic request
-     *
-     * @param url    The url on which request is to be made
-     * @param method The HTTP METHOD for the request
-     * @return The DynamicRequestBuilder
-     */
-    public static ANRequest.DynamicRequestBuilder request(String url, int method) {
-        return new ANRequest.DynamicRequestBuilder(url, method);
-    }
-
-    /**
-     * Method to cancel requests with the given tag
-     *
-     * @param tag The tag with which requests are to be cancelled
-     */
-    public static void cancel(Object tag) {
-        ANRequestQueue.getInstance().cancelRequestWithGivenTag(tag, false);
-    }
-
-    /**
-     * Method to force cancel requests with the given tag
-     *
-     * @param tag The tag with which requests are to be cancelled
-     */
-    public static void forceCancel(Object tag) {
-        ANRequestQueue.getInstance().cancelRequestWithGivenTag(tag, true);
-    }
-
-    /**
-     * Method to cancel all given request
-     */
-    public static void cancelAll() {
-        ANRequestQueue.getInstance().cancelAll(false);
-    }
-
-    /**
-     * Method to force cancel all given request
-     */
-    public static void forceCancelAll() {
-        ANRequestQueue.getInstance().cancelAll(true);
-    }
-
-    /**
-     * Method to enable logging
-     */
-    public static void enableLogging() {
-        enableLogging(Level.BASIC);
-    }
-
-    /**
-     * Method to enable logging with tag
-     *
-     * @param level The level for logging
-     */
-    public static void enableLogging(Level level) {
-        InternalNetworking.enableLogging(level);
-    }
-
-    /**
-     * Method to evict a bitmap with given key from LruCache
-     *
-     * @param key The key of the bitmap
-     */
-    public static void evictBitmap(String key) {
-        final ANImageLoader.ImageCache imageCache = ANImageLoader.getInstance().getImageCache();
-        if (imageCache != null && key != null) {
-            imageCache.evictBitmap(key);
-        }
-    }
-
-    /**
-     * Method to clear LruCache
-     */
-    public static void evictAllBitmap() {
-        final ANImageLoader.ImageCache imageCache = ANImageLoader.getInstance().getImageCache();
-        if (imageCache != null) {
-            imageCache.evictAllBitmap();
-        }
-    }
-
-    /**
-     * Method to set userAgent globally
-     *
-     * @param userAgent The userAgent
-     */
-    public static void setUserAgent(String userAgent) {
-        InternalNetworking.setUserAgent(userAgent);
-    }
-
-    /**
-     * Method to get currentBandwidth
-     *
-     * @return currentBandwidth
-     */
-    public static int getCurrentBandwidth() {
-        return ConnectionClassManager.getInstance().getCurrentBandwidth();
-    }
-
-    /**
-     * Method to get currentConnectionQuality
-     *
-     * @return currentConnectionQuality
-     */
-    public static ConnectionQuality getCurrentConnectionQuality() {
-        return ConnectionClassManager.getInstance().getCurrentConnectionQuality();
-    }
-
-    /**
-     * Method to set ParserFactory
-     *
-     * @param parserFactory The ParserFactory
-     */
-    public static void setParserFactory(Parser.Factory parserFactory) {
-        ParseUtil.setParserFactory(parserFactory);
-    }
-
-    /**
-     * Method to find if the request is running or not
-     *
-     * @param tag The tag with which request running status is to be checked
-     * @return The request is running or not
-     */
-    public static boolean isRequestRunning(Object tag) {
-        return ANRequestQueue.getInstance().isRequestRunning(tag);
-    }
-
-    /**
-     * Shuts AndroidNetworking down
-     */
-    public static void shutDown() {
-        Core.shutDown();
-        evictAllBitmap();
-        ConnectionClassManager.getInstance().removeListener();
-        ConnectionClassManager.shutDown();
-        ParseUtil.shutDown();
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/cache/LruBitmapCache.java b/android-networking/src/main/java/com/androidnetworking/cache/LruBitmapCache.java
deleted file mode 100644
index a47d74f..0000000
--- a/android-networking/src/main/java/com/androidnetworking/cache/LruBitmapCache.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.cache;
-
-import android.graphics.Bitmap;
-
-import com.androidnetworking.internal.ANImageLoader;
-
-/**
- * Created by amitshekhar on 24/03/16.
- */
-public class LruBitmapCache extends LruCache<String, Bitmap>
-        implements ANImageLoader.ImageCache {
-
-    public LruBitmapCache(int maxSize) {
-        super(maxSize);
-    }
-
-    @Override
-    protected int sizeOf(String key, Bitmap value) {
-        return value.getRowBytes() * value.getHeight();
-    }
-
-    @Override
-    public Bitmap getBitmap(String key) {
-        return get(key);
-    }
-
-    @Override
-    public void evictBitmap(String key) {
-        remove(key);
-    }
-
-    @Override
-    public void evictAllBitmap() {
-        evictAll();
-    }
-
-    @Override
-    public void putBitmap(String url, Bitmap bitmap) {
-        put(url, bitmap);
-    }
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java b/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
deleted file mode 100644
index 89d36aa..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-/**
- * Created by amitshekhar on 29/03/16.
- */
-public final class ANConstants {
-    public static final int MAX_CACHE_SIZE = 10 * 1024 * 1024;
-    public static final int UPDATE = 0x01;
-    public static final String CACHE_DIR_NAME = "cache_an";
-    public static final String CONNECTION_ERROR = "connectionError";
-    public static final String RESPONSE_FROM_SERVER_ERROR = "responseFromServerError";
-    public static final String REQUEST_CANCELLED_ERROR = "requestCancelledError";
-    public static final String PARSE_ERROR = "parseError";
-    public static final String PREFETCH = "prefetch";
-    public static final String FAST_ANDROID_NETWORKING = "FastAndroidNetworking";
-    public static final String USER_AGENT = "User-Agent";
-    public static final String SUCCESS = "success";
-    public static final String OPTIONS = "OPTIONS";
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ConnectionClassManager.java b/android-networking/src/main/java/com/androidnetworking/common/ConnectionClassManager.java
deleted file mode 100644
index 5d94716..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/ConnectionClassManager.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-import com.androidnetworking.core.Core;
-import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
-
-/**
- * Created by amitshekhar on 29/05/16.
- */
-public class ConnectionClassManager {
-
-    private static final int BYTES_TO_BITS = 8;
-    private static final int DEFAULT_SAMPLES_TO_QUALITY_CHANGE = 5;
-    private static final int MINIMUM_SAMPLES_TO_DECIDE_QUALITY = 2;
-    private static final int DEFAULT_POOR_BANDWIDTH = 150;
-    private static final int DEFAULT_MODERATE_BANDWIDTH = 550;
-    private static final int DEFAULT_GOOD_BANDWIDTH = 2000;
-    private static final long BANDWIDTH_LOWER_BOUND = 10;
-
-    private static ConnectionClassManager sInstance;
-    private ConnectionQuality mCurrentConnectionQuality = ConnectionQuality.UNKNOWN;
-    private int mCurrentBandwidthForSampling = 0;
-    private int mCurrentNumberOfSample = 0;
-    private int mCurrentBandwidth = 0;
-    private ConnectionQualityChangeListener mConnectionQualityChangeListener;
-
-    public static ConnectionClassManager getInstance() {
-        if (sInstance == null) {
-            synchronized (ConnectionClassManager.class) {
-                if (sInstance == null) {
-                    sInstance = new ConnectionClassManager();
-                }
-            }
-        }
-        return sInstance;
-    }
-
-    public synchronized void updateBandwidth(long bytes, long timeInMs) {
-        if (timeInMs == 0 || bytes < 20000 || (bytes) * 1.0 / (timeInMs) *
-                BYTES_TO_BITS < BANDWIDTH_LOWER_BOUND) {
-            return;
-        }
-        double bandwidth = (bytes) * 1.0 / (timeInMs) * BYTES_TO_BITS;
-        mCurrentBandwidthForSampling = (int) ((mCurrentBandwidthForSampling *
-                mCurrentNumberOfSample + bandwidth) / (mCurrentNumberOfSample + 1));
-        mCurrentNumberOfSample++;
-        if (mCurrentNumberOfSample == DEFAULT_SAMPLES_TO_QUALITY_CHANGE ||
-                (mCurrentConnectionQuality == ConnectionQuality.UNKNOWN &&
-                        mCurrentNumberOfSample == MINIMUM_SAMPLES_TO_DECIDE_QUALITY)) {
-            final ConnectionQuality lastConnectionQuality = mCurrentConnectionQuality;
-            mCurrentBandwidth = mCurrentBandwidthForSampling;
-            if (mCurrentBandwidthForSampling <= 0) {
-                mCurrentConnectionQuality = ConnectionQuality.UNKNOWN;
-            } else if (mCurrentBandwidthForSampling < DEFAULT_POOR_BANDWIDTH) {
-                mCurrentConnectionQuality = ConnectionQuality.POOR;
-            } else if (mCurrentBandwidthForSampling < DEFAULT_MODERATE_BANDWIDTH) {
-                mCurrentConnectionQuality = ConnectionQuality.MODERATE;
-            } else if (mCurrentBandwidthForSampling < DEFAULT_GOOD_BANDWIDTH) {
-                mCurrentConnectionQuality = ConnectionQuality.GOOD;
-            } else if (mCurrentBandwidthForSampling > DEFAULT_GOOD_BANDWIDTH) {
-                mCurrentConnectionQuality = ConnectionQuality.EXCELLENT;
-            }
-            if (mCurrentNumberOfSample == DEFAULT_SAMPLES_TO_QUALITY_CHANGE) {
-                mCurrentBandwidthForSampling = 0;
-                mCurrentNumberOfSample = 0;
-            }
-            if (mCurrentConnectionQuality != lastConnectionQuality &&
-                    mConnectionQualityChangeListener != null) {
-                Core.getInstance().getExecutorSupplier().forMainThreadTasks()
-                        .execute(new Runnable() {
-                            @Override
-                            public void run() {
-                                mConnectionQualityChangeListener
-                                        .onChange(mCurrentConnectionQuality, mCurrentBandwidth);
-                            }
-                        });
-            }
-        }
-
-    }
-
-    public int getCurrentBandwidth() {
-        return mCurrentBandwidth;
-    }
-
-    public ConnectionQuality getCurrentConnectionQuality() {
-        return mCurrentConnectionQuality;
-    }
-
-    public void setListener(ConnectionQualityChangeListener connectionQualityChangeListener) {
-        mConnectionQualityChangeListener = connectionQualityChangeListener;
-    }
-
-    public void removeListener() {
-        mConnectionQualityChangeListener = null;
-    }
-
-    public static void shutDown() {
-        if (sInstance != null) {
-            sInstance = null;
-        }
-    }
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ConnectionQuality.java b/android-networking/src/main/java/com/androidnetworking/common/ConnectionQuality.java
deleted file mode 100644
index 805d8a9..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/ConnectionQuality.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-/**
- * Created by amitshekhar on 29/05/16.
- */
-public enum ConnectionQuality {
-    /**
-     * Bandwidth under 150 kbps.
-     */
-    POOR,
-    /**
-     * Bandwidth between 150 and 550 kbps.
-     */
-    MODERATE,
-    /**
-     * Bandwidth between 550 and 2000 kbps.
-     */
-    GOOD,
-    /**
-     * EXCELLENT - Bandwidth over 2000 kbps.
-     */
-    EXCELLENT,
-    /**
-     * Placeholder for unknown bandwidth. This is the initial value and will stay at this value
-     * if a bandwidth cannot be accurately found.
-     */
-    UNKNOWN
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/Method.java b/android-networking/src/main/java/com/androidnetworking/common/Method.java
deleted file mode 100644
index 65da1b5..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/Method.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-/**
- * Created by amitshekhar on 26/03/16.
- */
-public interface Method {
-    int GET = 0;
-    int POST = 1;
-    int PUT = 2;
-    int DELETE = 3;
-    int HEAD = 4;
-    int PATCH = 5;
-    int OPTIONS = 6;
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/Priority.java b/android-networking/src/main/java/com/androidnetworking/common/Priority.java
deleted file mode 100644
index 3b37a5a..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/Priority.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-
-
-/**
- * Priority levels recognized by the request server.
- */
-public enum Priority {
-    /**
-     * NOTE: DO NOT CHANGE ORDERING OF THOSE CONSTANTS UNDER ANY CIRCUMSTANCES.
-     * Doing so will make ordering incorrect.
-     */
-
-    /**
-     * Lowest priority level. Used for prefetches of data.
-     */
-    LOW,
-
-    /**
-     * Medium priority level. Used for warming of data that might soon get visible.
-     */
-    MEDIUM,
-
-    /**
-     * Highest priority level. Used for data that are currently visible on screen.
-     */
-    HIGH,
-
-    /**
-     * Highest priority level. Used for data that are required instantly(mainly for emergency).
-     */
-    IMMEDIATE
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/RequestType.java b/android-networking/src/main/java/com/androidnetworking/common/RequestType.java
deleted file mode 100644
index 9a928d0..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/RequestType.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-/**
- * Created by amitshekhar on 04/04/16.
- */
-public interface RequestType {
-    int SIMPLE = 0;
-    int DOWNLOAD = 1;
-    int MULTIPART = 2;
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ResponseType.java b/android-networking/src/main/java/com/androidnetworking/common/ResponseType.java
deleted file mode 100644
index 36491e6..0000000
--- a/android-networking/src/main/java/com/androidnetworking/common/ResponseType.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.common;
-
-/**
- * Created by amitshekhar on 26/03/16.
- */
-public enum ResponseType {
-    STRING,
-    JSON_OBJECT,
-    JSON_ARRAY,
-    OK_HTTP_RESPONSE,
-    BITMAP,
-    PREFETCH,
-    PARSED
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/core/ANExecutor.java b/android-networking/src/main/java/com/androidnetworking/core/ANExecutor.java
deleted file mode 100644
index 47c3e5d..0000000
--- a/android-networking/src/main/java/com/androidnetworking/core/ANExecutor.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.core;
-
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.telephony.TelephonyManager;
-
-import com.androidnetworking.common.Priority;
-import com.androidnetworking.internal.InternalRunnable;
-
-import java.util.concurrent.Future;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.PriorityBlockingQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public class ANExecutor extends ThreadPoolExecutor {
-
-    private static final int DEFAULT_THREAD_COUNT = 3;
-
-    ANExecutor(int maxNumThreads, ThreadFactory threadFactory) {
-        super(maxNumThreads, maxNumThreads, 0, TimeUnit.MILLISECONDS,
-                new PriorityBlockingQueue<Runnable>(), threadFactory);
-    }
-
-
-    void adjustThreadCount(NetworkInfo info) {
-        if (info == null || !info.isConnectedOrConnecting()) {
-            setThreadCount(DEFAULT_THREAD_COUNT);
-            return;
-        }
-        switch (info.getType()) {
-            case ConnectivityManager.TYPE_WIFI:
-            case ConnectivityManager.TYPE_WIMAX:
-            case ConnectivityManager.TYPE_ETHERNET:
-                setThreadCount(4);
-                break;
-            case ConnectivityManager.TYPE_MOBILE:
-                switch (info.getSubtype()) {
-                    case TelephonyManager.NETWORK_TYPE_LTE:  // 4G
-                    case TelephonyManager.NETWORK_TYPE_HSPAP:
-                    case TelephonyManager.NETWORK_TYPE_EHRPD:
-                        setThreadCount(3);
-                        break;
-                    case TelephonyManager.NETWORK_TYPE_UMTS: // 3G
-                    case TelephonyManager.NETWORK_TYPE_CDMA:
-                    case TelephonyManager.NETWORK_TYPE_EVDO_0:
-                    case TelephonyManager.NETWORK_TYPE_EVDO_A:
-                    case TelephonyManager.NETWORK_TYPE_EVDO_B:
-                        setThreadCount(2);
-                        break;
-                    case TelephonyManager.NETWORK_TYPE_GPRS: // 2G
-                    case TelephonyManager.NETWORK_TYPE_EDGE:
-                        setThreadCount(1);
-                        break;
-                    default:
-                        setThreadCount(DEFAULT_THREAD_COUNT);
-                }
-                break;
-            default:
-                setThreadCount(DEFAULT_THREAD_COUNT);
-        }
-    }
-
-    private void setThreadCount(int threadCount) {
-        setCorePoolSize(threadCount);
-        setMaximumPoolSize(threadCount);
-    }
-
-    @Override
-    public Future<?> submit(Runnable task) {
-        AndroidNetworkingFutureTask futureTask = new AndroidNetworkingFutureTask((InternalRunnable) task);
-        execute(futureTask);
-        return futureTask;
-    }
-
-    private static final class AndroidNetworkingFutureTask extends FutureTask<InternalRunnable>
-            implements Comparable<AndroidNetworkingFutureTask> {
-        private final InternalRunnable hunter;
-
-        public AndroidNetworkingFutureTask(InternalRunnable hunter) {
-            super(hunter, null);
-            this.hunter = hunter;
-        }
-
-        @Override
-        public int compareTo(AndroidNetworkingFutureTask other) {
-            Priority p1 = hunter.getPriority();
-            Priority p2 = other.hunter.getPriority();
-            return (p1 == p2 ? hunter.sequence - other.hunter.sequence : p2.ordinal() - p1.ordinal());
-        }
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/core/Core.java b/android-networking/src/main/java/com/androidnetworking/core/Core.java
deleted file mode 100644
index 673b24f..0000000
--- a/android-networking/src/main/java/com/androidnetworking/core/Core.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.core;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public class Core {
-
-    private static Core sInstance = null;
-    private final ExecutorSupplier mExecutorSupplier;
-
-    private Core() {
-        this.mExecutorSupplier = new DefaultExecutorSupplier();
-    }
-
-    public static Core getInstance() {
-        if (sInstance == null) {
-            synchronized (Core.class) {
-                if (sInstance == null) {
-                    sInstance = new Core();
-                }
-            }
-        }
-        return sInstance;
-    }
-
-    public ExecutorSupplier getExecutorSupplier() {
-        return mExecutorSupplier;
-    }
-
-    public static void shutDown() {
-        if (sInstance != null) {
-            sInstance = null;
-        }
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/core/ExecutorSupplier.java b/android-networking/src/main/java/com/androidnetworking/core/ExecutorSupplier.java
deleted file mode 100644
index cddd115..0000000
--- a/android-networking/src/main/java/com/androidnetworking/core/ExecutorSupplier.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.core;
-
-import java.util.concurrent.Executor;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public interface ExecutorSupplier {
-
-    ANExecutor forNetworkTasks();
-
-    ANExecutor forImmediateNetworkTasks();
-
-    Executor forMainThreadTasks();
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/core/MainThreadExecutor.java b/android-networking/src/main/java/com/androidnetworking/core/MainThreadExecutor.java
deleted file mode 100644
index aa227cb..0000000
--- a/android-networking/src/main/java/com/androidnetworking/core/MainThreadExecutor.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.core;
-
-import android.os.Handler;
-import android.os.Looper;
-
-import java.util.concurrent.Executor;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public class MainThreadExecutor implements Executor {
-
-    private final Handler handler = new Handler(Looper.getMainLooper());
-
-    @Override
-    public void execute(Runnable runnable) {
-        handler.post(runnable);
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/core/PriorityThreadFactory.java b/android-networking/src/main/java/com/androidnetworking/core/PriorityThreadFactory.java
deleted file mode 100644
index 3eacf9c..0000000
--- a/android-networking/src/main/java/com/androidnetworking/core/PriorityThreadFactory.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.core;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-
-
-import android.os.Process;
-
-import java.util.concurrent.ThreadFactory;
-
-public class PriorityThreadFactory implements ThreadFactory {
-
-    private final int mThreadPriority;
-
-    public PriorityThreadFactory(int threadPriority) {
-        mThreadPriority = threadPriority;
-    }
-
-    @Override
-    public Thread newThread(final Runnable runnable) {
-        Runnable wrapperRunnable = new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    Process.setThreadPriority(mThreadPriority);
-                } catch (Throwable t) {
-
-                }
-                runnable.run();
-            }
-        };
-        return new Thread(wrapperRunnable);
-    }
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java b/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java
deleted file mode 100644
index 1229ccc..0000000
--- a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonParserFactory.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.gsonparserfactory;
-
-import com.androidnetworking.interfaces.Parser;
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.reflect.TypeToken;
-
-import java.lang.reflect.Type;
-import java.util.HashMap;
-
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public final class GsonParserFactory extends Parser.Factory {
-
-    private final Gson gson;
-
-    public GsonParserFactory() {
-        this.gson = new Gson();
-    }
-
-    public GsonParserFactory(Gson gson) {
-        this.gson = gson;
-    }
-
-    @Override
-    public Parser<ResponseBody, ?> responseBodyParser(Type type) {
-        TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));
-        return new GsonResponseBodyParser<>(gson, adapter);
-    }
-
-    @Override
-    public Parser<?, RequestBody> requestBodyParser(Type type) {
-        TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));
-        return new GsonRequestBodyParser<>(gson, adapter);
-    }
-
-    @Override
-    public Object getObject(String string, Type type) {
-        try {
-            return gson.fromJson(string, type);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    @Override
-    public String getString(Object object) {
-        try {
-            return gson.toJson(object);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return "";
-    }
-
-    @Override
-    public HashMap<String, String> getStringMap(Object object) {
-        try {
-            Type type = new TypeToken<HashMap<String, String>>() {
-            }.getType();
-            return gson.fromJson(gson.toJson(object), type);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return new HashMap<>();
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonRequestBodyParser.java b/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonRequestBodyParser.java
deleted file mode 100644
index 5b0f221..0000000
--- a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonRequestBodyParser.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.gsonparserfactory;
-
-import com.androidnetworking.interfaces.Parser;
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonWriter;
-
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
-import java.nio.charset.Charset;
-
-import okhttp3.MediaType;
-import okhttp3.RequestBody;
-import okio.Buffer;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-final class GsonRequestBodyParser<T> implements Parser<T, RequestBody> {
-    private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
-    private static final Charset UTF_8 = Charset.forName("UTF-8");
-
-    private final Gson gson;
-    private final TypeAdapter<T> adapter;
-
-    GsonRequestBodyParser(Gson gson, TypeAdapter<T> adapter) {
-        this.gson = gson;
-        this.adapter = adapter;
-    }
-
-    @Override
-    public RequestBody convert(T value) throws IOException {
-        Buffer buffer = new Buffer();
-        Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);
-        JsonWriter jsonWriter = gson.newJsonWriter(writer);
-        adapter.write(jsonWriter, value);
-        jsonWriter.close();
-        return RequestBody.create(MEDIA_TYPE, buffer.readByteString());
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonResponseBodyParser.java b/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonResponseBodyParser.java
deleted file mode 100644
index d41df27..0000000
--- a/android-networking/src/main/java/com/androidnetworking/gsonparserfactory/GsonResponseBodyParser.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.gsonparserfactory;
-
-import com.androidnetworking.interfaces.Parser;
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.stream.JsonReader;
-
-import java.io.IOException;
-
-import okhttp3.ResponseBody;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-final class GsonResponseBodyParser<T> implements Parser<ResponseBody, T> {
-    private final Gson gson;
-    private final TypeAdapter<T> adapter;
-
-    GsonResponseBodyParser(Gson gson, TypeAdapter<T> adapter) {
-        this.gson = gson;
-        this.adapter = adapter;
-    }
-
-    @Override
-    public T convert(ResponseBody value) throws IOException {
-        JsonReader jsonReader = gson.newJsonReader(value.charStream());
-        try {
-            return adapter.read(jsonReader);
-        } finally {
-            value.close();
-        }
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interceptors/GzipRequestInterceptor.java b/android-networking/src/main/java/com/androidnetworking/interceptors/GzipRequestInterceptor.java
deleted file mode 100644
index bb2453a..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interceptors/GzipRequestInterceptor.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interceptors;
-
-import java.io.IOException;
-
-import okhttp3.Interceptor;
-import okhttp3.MediaType;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import okio.Buffer;
-import okio.BufferedSink;
-import okio.GzipSink;
-import okio.Okio;
-
-/**
- * Created by amitshekhar on 02/05/16.
- */
-public class GzipRequestInterceptor implements Interceptor {
-    @Override
-    public Response intercept(Chain chain) throws IOException {
-        Request originalRequest = chain.request();
-        if (originalRequest.body() == null || originalRequest.header("Content-Encoding") != null) {
-            return chain.proceed(originalRequest);
-        }
-
-        Request compressedRequest = originalRequest.newBuilder()
-                .header("Content-Encoding", "gzip")
-                .method(originalRequest.method(), forceContentLength(gzip(originalRequest.body())))
-                .build();
-        return chain.proceed(compressedRequest);
-    }
-
-    private RequestBody forceContentLength(final RequestBody requestBody) throws IOException {
-        final Buffer buffer = new Buffer();
-        requestBody.writeTo(buffer);
-        return new RequestBody() {
-            @Override
-            public MediaType contentType() {
-                return requestBody.contentType();
-            }
-
-            @Override
-            public long contentLength() {
-                return buffer.size();
-            }
-
-            @Override
-            public void writeTo(BufferedSink sink) throws IOException {
-                sink.write(buffer.snapshot());
-            }
-        };
-    }
-
-
-    private RequestBody gzip(final RequestBody body) {
-        return new RequestBody() {
-            @Override
-            public MediaType contentType() {
-                return body.contentType();
-            }
-
-            @Override
-            public long contentLength() {
-                return -1; // We don't know the compressed length in advance!
-            }
-
-            @Override
-            public void writeTo(BufferedSink sink) throws IOException {
-                BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));
-                body.writeTo(gzipSink);
-                gzipSink.close();
-            }
-        };
-    }
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/AnalyticsListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/AnalyticsListener.java
deleted file mode 100644
index 54aa9f2..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/AnalyticsListener.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-/**
- * Created by amitshekhar on 31/05/16.
- */
-public interface AnalyticsListener {
-
-    void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/BitmapRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/BitmapRequestListener.java
deleted file mode 100644
index 6cdc307..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/BitmapRequestListener.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-import android.graphics.Bitmap;
-
-import com.androidnetworking.error.ANError;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface BitmapRequestListener {
-
-    void onResponse(Bitmap response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/ConnectionQualityChangeListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/ConnectionQualityChangeListener.java
deleted file mode 100644
index 05c3bc3..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/ConnectionQualityChangeListener.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.common.ConnectionQuality;
-
-/**
- * Created by amitshekhar on 29/05/16.
- */
-public interface ConnectionQualityChangeListener {
-
-    void onChange(ConnectionQuality currentConnectionQuality, int currentBandwidth);
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/DownloadListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/DownloadListener.java
deleted file mode 100644
index 1915a00..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/DownloadListener.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-/**
- * Created by amitshekhar on 29/04/16.
- */
-public interface DownloadListener {
-
-    void onDownloadComplete();
-
-    void onError(ANError anError);
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/DownloadProgressListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/DownloadProgressListener.java
deleted file mode 100644
index 4406ee9..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/DownloadProgressListener.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-/**
- * Created by amitshekhar on 30/03/16.
- */
-public interface DownloadProgressListener {
-    void onProgress(long bytesDownloaded, long totalBytes);
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/JSONArrayRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/JSONArrayRequestListener.java
deleted file mode 100644
index e20e913..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/JSONArrayRequestListener.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONArray;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface JSONArrayRequestListener {
-
-    void onResponse(JSONArray response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/JSONObjectRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/JSONObjectRequestListener.java
deleted file mode 100644
index d1b7981..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/JSONObjectRequestListener.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONObject;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface JSONObjectRequestListener {
-
-    void onResponse(JSONObject response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndBitmapRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndBitmapRequestListener.java
deleted file mode 100644
index 2df552e..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndBitmapRequestListener.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import android.graphics.Bitmap;
-
-import com.androidnetworking.error.ANError;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface OkHttpResponseAndBitmapRequestListener {
-
-    void onResponse(Response okHttpResponse, Bitmap response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndJSONArrayRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndJSONArrayRequestListener.java
deleted file mode 100644
index 02b915e..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndJSONArrayRequestListener.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONArray;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface OkHttpResponseAndJSONArrayRequestListener {
-
-    void onResponse(Response okHttpResponse, JSONArray response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndJSONObjectRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndJSONObjectRequestListener.java
deleted file mode 100644
index 093e0cb..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndJSONObjectRequestListener.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONObject;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface OkHttpResponseAndJSONObjectRequestListener {
-
-    void onResponse(Response okHttpResponse, JSONObject response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndParsedRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndParsedRequestListener.java
deleted file mode 100644
index 8b8a744..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndParsedRequestListener.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public interface OkHttpResponseAndParsedRequestListener<T> {
-
-    void onResponse(Response okHttpResponse, T response);
-
-    void onError(ANError anError);
-
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndStringRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndStringRequestListener.java
deleted file mode 100644
index ba83d7e..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseAndStringRequestListener.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface OkHttpResponseAndStringRequestListener {
-
-    void onResponse(Response okHttpResponse, String response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseListener.java
deleted file mode 100644
index 448db93..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/OkHttpResponseListener.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 22/08/16.
- */
-public interface OkHttpResponseListener {
-
-    void onResponse(Response response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/ParsedRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/ParsedRequestListener.java
deleted file mode 100644
index bea5f49..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/ParsedRequestListener.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public interface ParsedRequestListener<T> {
-
-    void onResponse(T response);
-
-    void onError(ANError anError);
-
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java b/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java
deleted file mode 100644
index 19e12dd..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/Parser.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.interfaces;
-
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.HashMap;
-
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public interface Parser<F, T> {
-
-    T convert(F value) throws IOException;
-
-    abstract class Factory {
-
-        public Parser<ResponseBody, ?> responseBodyParser(Type type) {
-            return null;
-        }
-
-        public Parser<?, RequestBody> requestBodyParser(Type type) {
-            return null;
-        }
-
-        public Object getObject(String string, Type type) {
-            return null;
-        }
-
-        public String getString(Object object) {
-            return null;
-        }
-
-        public HashMap<String, String> getStringMap(Object object) {
-            return null;
-        }
-
-    }
-
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/StringRequestListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/StringRequestListener.java
deleted file mode 100644
index 8d644d4..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/StringRequestListener.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-import com.androidnetworking.error.ANError;
-
-/**
- * Created by amitshekhar on 23/05/16.
- */
-public interface StringRequestListener {
-
-    void onResponse(String response);
-
-    void onError(ANError anError);
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/interfaces/UploadProgressListener.java b/android-networking/src/main/java/com/androidnetworking/interfaces/UploadProgressListener.java
deleted file mode 100644
index 4c2a2e1..0000000
--- a/android-networking/src/main/java/com/androidnetworking/interfaces/UploadProgressListener.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.interfaces;
-
-/**
- * Created by amitshekhar on 21/04/16.
- */
-public interface UploadProgressListener {
-    void onProgress(long bytesUploaded, long totalBytes);
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java b/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
deleted file mode 100644
index 3e1e2a9..0000000
--- a/android-networking/src/main/java/com/androidnetworking/internal/DownloadProgressHandler.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.internal;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.model.Progress;
-
-/**
- * Created by amitshekhar on 24/05/16.
- */
-public class DownloadProgressHandler extends Handler {
-
-    private final DownloadProgressListener mDownloadProgressListener;
-
-    public DownloadProgressHandler(DownloadProgressListener downloadProgressListener) {
-        super(Looper.getMainLooper());
-        mDownloadProgressListener = downloadProgressListener;
-    }
-
-    @Override
-    public void handleMessage(Message msg) {
-        switch (msg.what) {
-            case ANConstants.UPDATE:
-                if (mDownloadProgressListener != null) {
-                    final Progress progress = (Progress) msg.obj;
-                    mDownloadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
-                }
-                break;
-            default:
-                super.handleMessage(msg);
-                break;
-        }
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java b/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
deleted file mode 100644
index 43c539b..0000000
--- a/android-networking/src/main/java/com/androidnetworking/internal/InternalNetworking.java
+++ /dev/null
@@ -1,322 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.internal;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-
-import android.content.Context;
-import android.net.TrafficStats;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ConnectionClassManager;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interceptors.HttpLoggingInterceptor;
-import com.androidnetworking.interceptors.HttpLoggingInterceptor.Level;
-import com.androidnetworking.utils.Utils;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.concurrent.TimeUnit;
-
-import okhttp3.Headers;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-import static com.androidnetworking.common.Method.DELETE;
-import static com.androidnetworking.common.Method.GET;
-import static com.androidnetworking.common.Method.HEAD;
-import static com.androidnetworking.common.Method.OPTIONS;
-import static com.androidnetworking.common.Method.PATCH;
-import static com.androidnetworking.common.Method.POST;
-import static com.androidnetworking.common.Method.PUT;
-
-public final class InternalNetworking {
-
-    private InternalNetworking() {
-
-    }
-
-    public static OkHttpClient sHttpClient = getClient();
-
-    public static String sUserAgent = null;
-
-    public static Response performSimpleRequest(ANRequest request) throws ANError {
-        Request okHttpRequest;
-        Response okHttpResponse;
-        try {
-            Request.Builder builder = new Request.Builder().url(request.getUrl());
-            addHeadersToRequestBuilder(builder, request);
-            RequestBody requestBody = null;
-            switch (request.getMethod()) {
-                case GET: {
-                    builder = builder.get();
-                    break;
-                }
-                case POST: {
-                    requestBody = request.getRequestBody();
-                    builder = builder.post(requestBody);
-                    break;
-                }
-                case PUT: {
-                    requestBody = request.getRequestBody();
-                    builder = builder.put(requestBody);
-                    break;
-                }
-                case DELETE: {
-                    requestBody = request.getRequestBody();
-                    builder = builder.delete(requestBody);
-                    break;
-                }
-                case HEAD: {
-                    builder = builder.head();
-                    break;
-                }
-                case OPTIONS: {
-                    builder = builder.method(ANConstants.OPTIONS, null);
-                    break;
-                }
-                case PATCH: {
-                    requestBody = request.getRequestBody();
-                    builder = builder.patch(requestBody);
-                    break;
-                }
-            }
-            if (request.getCacheControl() != null) {
-                builder.cacheControl(request.getCacheControl());
-            }
-            okHttpRequest = builder.build();
-
-            if (request.getOkHttpClient() != null) {
-                request.setCall(request.getOkHttpClient().newBuilder().cache(sHttpClient.cache()).build().newCall(okHttpRequest));
-            } else {
-                request.setCall(sHttpClient.newCall(okHttpRequest));
-            }
-            final long startTime = System.currentTimeMillis();
-            final long startBytes = TrafficStats.getTotalRxBytes();
-            okHttpResponse = request.getCall().execute();
-            final long timeTaken = System.currentTimeMillis() - startTime;
-            if (okHttpResponse.cacheResponse() == null) {
-                final long finalBytes = TrafficStats.getTotalRxBytes();
-                final long diffBytes;
-                if (startBytes == TrafficStats.UNSUPPORTED || finalBytes == TrafficStats.UNSUPPORTED) {
-                    diffBytes = okHttpResponse.body().contentLength();
-                } else {
-                    diffBytes = finalBytes - startBytes;
-                }
-                ConnectionClassManager.getInstance().updateBandwidth(diffBytes, timeTaken);
-                Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                        (requestBody != null &&
-                                requestBody.contentLength() != 0) ? requestBody.contentLength() : -1,
-                        okHttpResponse.body().contentLength(), false);
-            } else if (request.getAnalyticsListener() != null) {
-                if (okHttpResponse.networkResponse() == null) {
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, 0, 0, true);
-                } else {
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                            (requestBody != null && requestBody.contentLength() != 0) ? requestBody.contentLength() : -1,
-                            0, true);
-                }
-            }
-        } catch (IOException ioe) {
-            throw new ANError(ioe);
-        }
-        return okHttpResponse;
-    }
-
-    public static Response performDownloadRequest(final ANRequest request) throws ANError {
-        Request okHttpRequest;
-        Response okHttpResponse;
-        try {
-            Request.Builder builder = new Request.Builder().url(request.getUrl());
-            addHeadersToRequestBuilder(builder, request);
-            builder = builder.get();
-            if (request.getCacheControl() != null) {
-                builder.cacheControl(request.getCacheControl());
-            }
-            okHttpRequest = builder.build();
-
-            OkHttpClient okHttpClient;
-
-            if (request.getOkHttpClient() != null) {
-                okHttpClient = request.getOkHttpClient().newBuilder().cache(sHttpClient.cache())
-                        .addNetworkInterceptor(new Interceptor() {
-                            @Override
-                            public Response intercept(Chain chain) throws IOException {
-                                Response originalResponse = chain.proceed(chain.request());
-                                return originalResponse.newBuilder()
-                                        .body(new ResponseProgressBody(originalResponse.body(),
-                                                request.getDownloadProgressListener()))
-                                        .build();
-                            }
-                        }).build();
-            } else {
-                okHttpClient = sHttpClient.newBuilder()
-                        .addNetworkInterceptor(new Interceptor() {
-                            @Override
-                            public Response intercept(Chain chain) throws IOException {
-                                Response originalResponse = chain.proceed(chain.request());
-                                return originalResponse.newBuilder()
-                                        .body(new ResponseProgressBody(originalResponse.body(),
-                                                request.getDownloadProgressListener()))
-                                        .build();
-                            }
-                        }).build();
-            }
-            request.setCall(okHttpClient.newCall(okHttpRequest));
-            final long startTime = System.currentTimeMillis();
-            final long startBytes = TrafficStats.getTotalRxBytes();
-            okHttpResponse = request.getCall().execute();
-            Utils.saveFile(okHttpResponse, request.getDirPath(), request.getFileName());
-            final long timeTaken = System.currentTimeMillis() - startTime;
-            if (okHttpResponse.cacheResponse() == null) {
-                final long finalBytes = TrafficStats.getTotalRxBytes();
-                final long diffBytes;
-                if (startBytes == TrafficStats.UNSUPPORTED || finalBytes == TrafficStats.UNSUPPORTED) {
-                    diffBytes = okHttpResponse.body().contentLength();
-                } else {
-                    diffBytes = finalBytes - startBytes;
-                }
-                ConnectionClassManager.getInstance().updateBandwidth(diffBytes, timeTaken);
-                Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, -1,
-                        okHttpResponse.body().contentLength(), false);
-            } else if (request.getAnalyticsListener() != null) {
-                Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, -1, 0, true);
-            }
-        } catch (IOException ioe) {
-            try {
-                File destinationFile = new File(request.getDirPath() + File.separator + request.getFileName());
-                if (destinationFile.exists()) {
-                    destinationFile.delete();
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-            throw new ANError(ioe);
-        }
-        return okHttpResponse;
-    }
-
-
-    public static Response performUploadRequest(ANRequest request) throws ANError {
-        Request okHttpRequest;
-        Response okHttpResponse;
-        try {
-            Request.Builder builder = new Request.Builder().url(request.getUrl());
-            addHeadersToRequestBuilder(builder, request);
-            final RequestBody requestBody = request.getMultiPartRequestBody();
-            final long requestBodyLength = requestBody.contentLength();
-            builder = builder.post(new RequestProgressBody(requestBody, request.getUploadProgressListener()));
-            if (request.getCacheControl() != null) {
-                builder.cacheControl(request.getCacheControl());
-            }
-            okHttpRequest = builder.build();
-            if (request.getOkHttpClient() != null) {
-                request.setCall(request.getOkHttpClient()
-                        .newBuilder()
-                        .cache(sHttpClient.cache())
-                        .build()
-                        .newCall(okHttpRequest));
-            } else {
-                request.setCall(sHttpClient.newCall(okHttpRequest));
-            }
-            final long startTime = System.currentTimeMillis();
-            okHttpResponse = request.getCall().execute();
-            final long timeTaken = System.currentTimeMillis() - startTime;
-            if (request.getAnalyticsListener() != null) {
-                if (okHttpResponse.cacheResponse() == null) {
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                            requestBodyLength, okHttpResponse.body().contentLength(), false);
-                } else {
-                    if (okHttpResponse.networkResponse() == null) {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, 0, 0, true);
-                    } else {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                requestBodyLength != 0 ? requestBodyLength : -1, 0, true);
-                    }
-                }
-            }
-        } catch (IOException ioe) {
-            throw new ANError(ioe);
-        }
-        return okHttpResponse;
-    }
-
-    public static OkHttpClient getClient() {
-        if (sHttpClient == null) {
-            return getDefaultClient();
-        }
-        return sHttpClient;
-    }
-
-    public static void addHeadersToRequestBuilder(Request.Builder builder, ANRequest request) {
-        if (request.getUserAgent() != null) {
-            builder.addHeader(ANConstants.USER_AGENT, request.getUserAgent());
-        } else if (sUserAgent != null) {
-            request.setUserAgent(sUserAgent);
-            builder.addHeader(ANConstants.USER_AGENT, sUserAgent);
-        }
-        Headers requestHeaders = request.getHeaders();
-        if (requestHeaders != null) {
-            builder.headers(requestHeaders);
-            if (request.getUserAgent() != null && !requestHeaders.names().contains(ANConstants.USER_AGENT)) {
-                builder.addHeader(ANConstants.USER_AGENT, request.getUserAgent());
-            }
-        }
-    }
-
-    public static OkHttpClient getDefaultClient() {
-        return new OkHttpClient().newBuilder()
-                .connectTimeout(60, TimeUnit.SECONDS)
-                .readTimeout(60, TimeUnit.SECONDS)
-                .writeTimeout(60, TimeUnit.SECONDS)
-                .build();
-    }
-
-    public static void setClientWithCache(Context context) {
-        sHttpClient = new OkHttpClient().newBuilder()
-                .cache(Utils.getCache(context, ANConstants.MAX_CACHE_SIZE, ANConstants.CACHE_DIR_NAME))
-                .connectTimeout(60, TimeUnit.SECONDS)
-                .readTimeout(60, TimeUnit.SECONDS)
-                .writeTimeout(60, TimeUnit.SECONDS)
-                .build();
-    }
-
-    public static void setUserAgent(String userAgent) {
-        sUserAgent = userAgent;
-    }
-
-    public static void setClient(OkHttpClient okHttpClient) {
-        sHttpClient = okHttpClient;
-    }
-
-    public static void enableLogging(Level level) {
-        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
-        logging.setLevel(level);
-        sHttpClient = getClient()
-                .newBuilder()
-                .addInterceptor(logging)
-                .build();
-    }
-
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java b/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
deleted file mode 100644
index 76acec4..0000000
--- a/android-networking/src/main/java/com/androidnetworking/internal/RequestProgressBody.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.internal;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.androidnetworking.model.Progress;
-
-import java.io.IOException;
-
-import okhttp3.MediaType;
-import okhttp3.RequestBody;
-import okio.Buffer;
-import okio.BufferedSink;
-import okio.ForwardingSink;
-import okio.Okio;
-import okio.Sink;
-
-/**
- * Created by amitshekhar on 21/04/16.
- */
-public class RequestProgressBody extends RequestBody {
-    private final RequestBody requestBody;
-    private BufferedSink bufferedSink;
-    private UploadProgressHandler uploadProgressHandler;
-
-    public RequestProgressBody(RequestBody requestBody, UploadProgressListener uploadProgressListener) {
-        this.requestBody = requestBody;
-        if (uploadProgressListener != null) {
-            this.uploadProgressHandler = new UploadProgressHandler(uploadProgressListener);
-        }
-    }
-
-    public MediaType contentType() {
-        return requestBody.contentType();
-    }
-
-    @Override
-    public long contentLength() throws IOException {
-        return requestBody.contentLength();
-    }
-
-    @Override
-    public void writeTo(BufferedSink sink) throws IOException {
-        if (bufferedSink == null) {
-            bufferedSink = Okio.buffer(sink(sink));
-        }
-        requestBody.writeTo(bufferedSink);
-        bufferedSink.flush();
-    }
-
-    private Sink sink(Sink sink) {
-        return new ForwardingSink(sink) {
-            long bytesWritten = 0L;
-            long contentLength = 0L;
-
-            @Override
-            public void write(Buffer source, long byteCount) throws IOException {
-                super.write(source, byteCount);
-                if (contentLength == 0) {
-                    contentLength = contentLength();
-                }
-                bytesWritten += byteCount;
-                if (uploadProgressHandler != null) {
-                    uploadProgressHandler.obtainMessage(ANConstants.UPDATE,
-                            new Progress(bytesWritten, contentLength)).sendToTarget();
-                }
-            }
-        };
-    }
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/ResponseProgressBody.java b/android-networking/src/main/java/com/androidnetworking/internal/ResponseProgressBody.java
deleted file mode 100644
index f1dfc97..0000000
--- a/android-networking/src/main/java/com/androidnetworking/internal/ResponseProgressBody.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.internal;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.model.Progress;
-
-import java.io.IOException;
-
-import okhttp3.MediaType;
-import okhttp3.ResponseBody;
-import okio.Buffer;
-import okio.BufferedSource;
-import okio.ForwardingSource;
-import okio.Okio;
-import okio.Source;
-
-/**
- * Created by amitshekhar on 24/05/16.
- */
-public class ResponseProgressBody extends ResponseBody {
-
-    private final ResponseBody mResponseBody;
-    private BufferedSource bufferedSource;
-    private DownloadProgressHandler downloadProgressHandler;
-
-    public ResponseProgressBody(ResponseBody responseBody, DownloadProgressListener downloadProgressListener) {
-        this.mResponseBody = responseBody;
-        if (downloadProgressListener != null) {
-            this.downloadProgressHandler = new DownloadProgressHandler(downloadProgressListener);
-        }
-    }
-
-    @Override
-    public MediaType contentType() {
-        return mResponseBody.contentType();
-    }
-
-    @Override
-    public long contentLength() {
-        return mResponseBody.contentLength();
-    }
-
-    @Override
-    public BufferedSource source() {
-        if (bufferedSource == null) {
-            bufferedSource = Okio.buffer(source(mResponseBody.source()));
-        }
-        return bufferedSource;
-    }
-
-    private Source source(Source source) {
-
-        return new ForwardingSource(source) {
-
-            long totalBytesRead;
-
-            @Override
-            public long read(Buffer sink, long byteCount) throws IOException {
-                long bytesRead = super.read(sink, byteCount);
-                totalBytesRead += ((bytesRead != -1) ? bytesRead : 0);
-                if (downloadProgressHandler != null) {
-                    downloadProgressHandler
-                            .obtainMessage(ANConstants.UPDATE,
-                                    new Progress(totalBytesRead, mResponseBody.contentLength()))
-                            .sendToTarget();
-                }
-                return bytesRead;
-            }
-        };
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java b/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
deleted file mode 100644
index f623a5f..0000000
--- a/android-networking/src/main/java/com/androidnetworking/internal/UploadProgressHandler.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.internal;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.androidnetworking.model.Progress;
-
-/**
- * Created by amitshekhar on 24/05/16.
- */
-public class UploadProgressHandler extends Handler {
-
-    private final UploadProgressListener mUploadProgressListener;
-
-    public UploadProgressHandler(UploadProgressListener uploadProgressListener) {
-        super(Looper.getMainLooper());
-        mUploadProgressListener = uploadProgressListener;
-    }
-
-    @Override
-    public void handleMessage(Message msg) {
-        switch (msg.what) {
-            case ANConstants.UPDATE:
-                if (mUploadProgressListener != null) {
-                    final Progress progress = (Progress) msg.obj;
-                    mUploadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
-                }
-                break;
-            default:
-                super.handleMessage(msg);
-                break;
-        }
-    }
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/model/MultipartFileBody.java b/android-networking/src/main/java/com/androidnetworking/model/MultipartFileBody.java
deleted file mode 100644
index 7da6c94..0000000
--- a/android-networking/src/main/java/com/androidnetworking/model/MultipartFileBody.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.androidnetworking.model;
-
-import java.io.File;
-
-public class MultipartFileBody {
-
-    public final File file;
-    public final String contentType;
-
-    public MultipartFileBody(File file, String contentType) {
-        this.file = file;
-        this.contentType = contentType;
-    }
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/model/MultipartStringBody.java b/android-networking/src/main/java/com/androidnetworking/model/MultipartStringBody.java
deleted file mode 100644
index 005b69f..0000000
--- a/android-networking/src/main/java/com/androidnetworking/model/MultipartStringBody.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.androidnetworking.model;
-
-public class MultipartStringBody {
-
-    public final String value;
-    public final String contentType;
-
-    public MultipartStringBody(String value, String contentType) {
-        this.value = value;
-        this.contentType = contentType;
-    }
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/model/Progress.java b/android-networking/src/main/java/com/androidnetworking/model/Progress.java
deleted file mode 100644
index d9c615d..0000000
--- a/android-networking/src/main/java/com/androidnetworking/model/Progress.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.model;
-
-import java.io.Serializable;
-
-/**
- * Created by amitshekhar on 24/05/16.
- */
-
-public class Progress implements Serializable {
-
-    public long currentBytes;
-    public long totalBytes;
-
-    public Progress(long currentBytes, long totalBytes) {
-        this.currentBytes = currentBytes;
-        this.totalBytes = totalBytes;
-    }
-
-}
\ No newline at end of file
diff --git a/android-networking/src/main/java/com/androidnetworking/utils/ParseUtil.java b/android-networking/src/main/java/com/androidnetworking/utils/ParseUtil.java
deleted file mode 100644
index ec6acf4..0000000
--- a/android-networking/src/main/java/com/androidnetworking/utils/ParseUtil.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.utils;
-
-import com.androidnetworking.gsonparserfactory.GsonParserFactory;
-import com.androidnetworking.interfaces.Parser;
-import com.google.gson.Gson;
-
-/**
- * Created by amitshekhar on 15/09/16.
- */
-public class ParseUtil {
-
-    private static Parser.Factory mParserFactory;
-
-    public static void setParserFactory(Parser.Factory parserFactory) {
-        mParserFactory = parserFactory;
-    }
-
-    public static Parser.Factory getParserFactory() {
-        if (mParserFactory == null) {
-            mParserFactory = new GsonParserFactory(new Gson());
-        }
-        return mParserFactory;
-    }
-
-    public static void shutDown() {
-        mParserFactory = null;
-    }
-
-}
diff --git a/android-networking/src/main/java/com/androidnetworking/utils/SourceCloseUtil.java b/android-networking/src/main/java/com/androidnetworking/utils/SourceCloseUtil.java
deleted file mode 100644
index eaf268a..0000000
--- a/android-networking/src/main/java/com/androidnetworking/utils/SourceCloseUtil.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.androidnetworking.utils;
-
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ResponseType;
-
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 15/09/16.
- */
-public final class SourceCloseUtil {
-
-    private SourceCloseUtil() {
-    }
-
-    public static void close(Response response, ANRequest request) {
-        if (request.getResponseAs() != ResponseType.OK_HTTP_RESPONSE &&
-                response != null && response.body() != null &&
-                response.body().source() != null) {
-            try {
-                response.body().source().close();
-            } catch (Exception ignore) {
-
-            }
-        }
-    }
-}
diff --git a/android-networking/src/main/res/values/strings.xml b/android-networking/src/main/res/values/strings.xml
deleted file mode 100644
index 66ca996..0000000
--- a/android-networking/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <string name="app_name">Android Networking</string>
-</resources>
diff --git a/android-networking/src/test/java/com/androidnetworking/ExampleUnitTest.java b/android-networking/src/test/java/com/androidnetworking/ExampleUnitTest.java
deleted file mode 100644
index bbc8754..0000000
--- a/android-networking/src/test/java/com/androidnetworking/ExampleUnitTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * To work on unit tests, switch the Test Artifact in the Build Variants view.
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/android-networking/upload.gradle b/android-networking/upload.gradle
deleted file mode 100755
index 0dbf33f..0000000
--- a/android-networking/upload.gradle
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: "com.jfrog.bintray"
-
-def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
-def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
-
-group = "com.amitshekhar.android"
-version = '1.0.2'
-
-install {
-    repositories.mavenInstaller {
-        pom.project {
-            packaging 'aar'
-
-            name 'Fast Android Networking'
-            description 'Fast Android Networking is a powerful library for doing any type of networking in Android applications'
-
-            url siteUrl
-
-            licenses {
-                license {
-                    name 'The Apache Software License, Version 2.0'
-                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                }
-            }
-
-            developers {
-                developer {
-                    id 'amitshekhariitbhu'
-                    name 'Amit Shekhar'
-                    email 'amit.shekhar.iitbhu@gmail.com'
-                }
-            }
-
-            scm {
-                connection gitUrl
-                developerConnection gitUrl
-                url siteUrl
-            }
-        }
-    }
-}
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    classpath += configurations.compile
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-artifacts {
-    archives javadocJar
-    archives sourcesJar
-}
-
-if (project.rootProject.file("local.properties").exists()) {
-    Properties properties = new Properties()
-    properties.load(project.rootProject.file('local.properties').newDataInputStream())
-
-    bintray {
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-
-        configurations = ['archives']
-        dryRun = false
-
-        pkg {
-            repo = "maven"
-            name = "android-networking"
-            websiteUrl = siteUrl
-            vcsUrl = gitUrl
-            licenses = ["Apache-2.0"]
-            publish = true
-        }
-    }
-}
diff --git a/app/.gitignore b/app/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/app/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/app/build.gradle b/app/build.gradle
deleted file mode 100644
index e2a4b59..0000000
--- a/app/build.gradle
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-apply plugin: 'com.android.application'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        applicationId "com.networking"
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
-    compile project(':android-networking')
-}
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
deleted file mode 100644
index 6b7a2bf..0000000
--- a/app/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/amitshekhar/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/app/src/androidTest/java/com/androidnetworking/ApplicationTest.java b/app/src/androidTest/java/com/androidnetworking/ApplicationTest.java
deleted file mode 100644
index be75b10..0000000
--- a/app/src/androidTest/java/com/androidnetworking/ApplicationTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-/**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
- */
-public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
deleted file mode 100644
index d98f777..0000000
--- a/app/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,46 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.networking">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-
-    <application
-        android:name=".MyApplication"
-        android:allowBackup="true"
-        android:icon="@mipmap/ic_launcher"
-        android:label="@string/app_name"
-        android:supportsRtl="true"
-        android:theme="@style/AppTheme">
-        <activity android:name=".MainActivity">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-        <activity android:name=".ImageGridActivity"></activity>
-        <activity android:name=".ApiTestActivity"></activity>
-        <activity android:name=".OkHttpResponseTestActivity"></activity>
-        <activity android:name=".WebSocketActivity"></activity>
-    </application>
-
-</manifest>
diff --git a/app/src/main/java/com/networking/ApiEndPoint.java b/app/src/main/java/com/networking/ApiEndPoint.java
deleted file mode 100644
index f0bd711..0000000
--- a/app/src/main/java/com/networking/ApiEndPoint.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking;
-
-/**
- * Created by amitshekhar on 29/03/16.
- */
-public class ApiEndPoint {
-
-    public static final String BASE_URL = "https://fierce-cove-29863.herokuapp.com";
-    public static final String GET_JSON_ARRAY = "/getAllUsers/{pageNumber}";
-    public static final String GET_JSON_OBJECT = "/getAnUserDetail/{userId}";
-    public static final String CHECK_FOR_HEADER = "/checkForHeader";
-    public static final String POST_CREATE_AN_USER = "/createAnUser";
-    public static final String UPLOAD_IMAGE = "/uploadImage";
-
-}
diff --git a/app/src/main/java/com/networking/ApiTestActivity.java b/app/src/main/java/com/networking/ApiTestActivity.java
deleted file mode 100644
index 16c5e3b..0000000
--- a/app/src/main/java/com/networking/ApiTestActivity.java
+++ /dev/null
@@ -1,1131 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking;
-
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Looper;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.common.Priority;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.androidnetworking.interfaces.DownloadListener;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.networking.model.User;
-import com.networking.utils.Utils;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.List;
-import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
-
-import okhttp3.OkHttpClient;
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 30/03/16.
- */
-public class ApiTestActivity extends AppCompatActivity {
-
-    private static final String TAG = ApiTestActivity.class.getSimpleName();
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_api_test);
-    }
-
-    public void prefetch(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .prefetch();
-    }
-
-    public void prefetchDownload(View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .setPriority(Priority.HIGH)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .prefetch();
-    }
-
-    public void getAllUsers(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> users) {
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void getAnUser(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_OBJECT)
-                .addPathParameter("userId", "1")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setUserAgent("getAnUser")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void checkForHeaderGet(View view) {
-
-        ANRequest.GetRequestBuilder getRequestBuilder = new ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        getRequestBuilder.addHeaders("token", "1234")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void checkForHeaderPost(View view) {
-
-        ANRequest.PostRequestBuilder postRequestBuilder = AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        postRequestBuilder.addHeaders("token", "1234");
-
-        ANRequest anRequest = postRequestBuilder.setTag(this)
-                .setPriority(Priority.LOW)
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build();
-
-        anRequest.setAnalyticsListener(new AnalyticsListener() {
-            @Override
-            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                Log.d(TAG, " bytesSent : " + bytesSent);
-                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                Log.d(TAG, " isFromCache : " + isFromCache);
-            }
-        });
-
-        anRequest.getAsJSONObject(new JSONObjectRequestListener() {
-            @Override
-            public void onResponse(JSONObject response) {
-                Log.d(TAG, "onResponse object : " + response.toString());
-                Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-            }
-
-            @Override
-            public void onError(ANError error) {
-                if (error.getErrorCode() != 0) {
-                    // received ANError from server
-                    // error.getErrorCode() - the ANError code from server
-                    // error.getErrorBody() - the ANError body from server
-                    // error.getErrorDetail() - just a ANError detail
-                    Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                    Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                    Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                } else {
-                    // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                    Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                }
-            }
-        });
-    }
-
-    public void createAnUser(View view) {
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Suman")
-                .addBodyParameter("lastname", "Shekhar")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-
-    public void createAnUserJSONObject(View view) {
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put("firstname", "Rohit");
-            jsonObject.put("lastname", "Kumar");
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addJSONObjectBody(jsonObject)
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void downloadFile(final View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .setPriority(Priority.HIGH)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just an ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void downloadImage(final View view) {
-        String url = "http://i.imgur.com/AtbX9iX.png";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "image1.png")
-                .setPriority(Priority.MEDIUM)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "Image download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void uploadImage(final View view) {
-        final String key = "image";
-        final File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png");
-        AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
-                .setPriority(Priority.MEDIUM)
-                .addMultipartFile(key, file)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                        Log.d(TAG, "bytesUploaded : " + bytesUploaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        Log.d(TAG, "Image upload Completed");
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void doNotCacheResponse(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .doNotCacheResponse()
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        Log.d(TAG, "onResponse array : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void getResponseOnlyIfCached(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .getResponseOnlyIfCached()
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        Log.d(TAG, "onResponse array : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void getResponseOnlyFromNetwork(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .getResponseOnlyFromNetwork()
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        Log.d(TAG, "onResponse array : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void setMaxAgeCacheControl(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setMaxAgeCacheControl(0, TimeUnit.SECONDS)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        Log.d(TAG, "onResponse array : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void setMaxStaleCacheControl(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setMaxStaleCacheControl(365, TimeUnit.SECONDS)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        Log.d(TAG, "onResponse array : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void cleanupDestinationTest(View view) {
-        String url = "http://i.imgur.com/m6K1DCQ.jpg";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "cleanupDestinationTest.jpg")
-                .setPriority(Priority.HIGH)
-                .setTag("cleanupDestinationTest")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (bytesDownloaded > 50) {
-                            AndroidNetworking.cancel("cleanupDestinationTest");
-                            Log.d(TAG, "cancel: cleanupDestinationTest");
-                        }
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just an ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void disableGzipForCustomRequest(View view) {
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Amit")
-                .addBodyParameter("lastname", "Shekhar")
-                .setTag(this)
-                .setOkHttpClient(new OkHttpClient())
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void checkCacheForCustomClient(View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .setPriority(Priority.HIGH)
-                .setTag(this)
-                .setOkHttpClient(new OkHttpClient())
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just an ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void checkOkHttpResponse(View view) {
-
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        if (response != null) {
-                            if (response.isSuccessful()) {
-                                Log.d(TAG, "response is successful");
-                                try {
-                                    Log.d(TAG, "response : " + response.body().source().readUtf8());
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                }
-                            } else {
-                                Log.d(TAG, "response is not successful");
-                            }
-                        } else {
-                            Log.d(TAG, "response is null");
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Suman")
-                .addBodyParameter("lastname", "Shekhar")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        if (response != null) {
-                            if (response.isSuccessful()) {
-                                Log.d(TAG, "response is successful");
-                                try {
-                                    Log.d(TAG, "response : " + response.body().source().readUtf8());
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                }
-                            } else {
-                                Log.d(TAG, "response is not successful");
-                            }
-                        } else {
-                            Log.d(TAG, "response is null");
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-
-        AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
-                .setPriority(Priority.MEDIUM)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                        Log.d(TAG, "bytesUploaded : " + bytesUploaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        if (response != null) {
-                            if (response.isSuccessful()) {
-                                Log.d(TAG, "response is successful");
-                                try {
-                                    Log.d(TAG, "response : " + response.body().source().readUtf8());
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                }
-                            } else {
-                                Log.d(TAG, "response is not successful");
-                            }
-                        } else {
-                            Log.d(TAG, "response is null");
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-
-    public void checkSynchronousCall(View view) {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-
-                String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-                ANRequest requestOne = AndroidNetworking
-                        .download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        })
-                        .setDownloadProgressListener(new DownloadProgressListener() {
-                            @Override
-                            public void onProgress(long bytesDownloaded, long totalBytes) {
-                                Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                                Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-
-                            }
-                        });
-                ANResponse<String> responseOne = requestOne.executeForDownload();
-
-                if (responseOne.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : download success");
-                    Log.d(TAG, "checkSynchronousCall : download result " + responseOne.getResult());
-                    Response response = responseOne.getOkHttpResponse();
-                    Log.d(TAG, "checkSynchronousCall : headers : " + response.headers().toString());
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : download failed");
-                    Utils.logError(TAG, responseOne.getError());
-                }
-
-
-                ANRequest requestTwo = AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                        .addPathParameter("pageNumber", "0")
-                        .addQueryParameter("limit", "3")
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        });
-                ANResponse<List<User>> responseTwo = requestTwo.executeForObjectList(User.class);
-
-                if (responseTwo.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : response success");
-                    List<User> users = responseTwo.getResult();
-                    Log.d(TAG, "userList size : " + users.size());
-                    for (User user : users) {
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                    }
-                    Response response = responseTwo.getOkHttpResponse();
-                    Log.d(TAG, "checkSynchronousCall : headers : " + response.headers().toString());
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : response failed");
-                    Utils.logError(TAG, responseTwo.getError());
-                }
-
-
-                JSONObject jsonObject = new JSONObject();
-                try {
-                    jsonObject.put("firstname", "Rohit");
-                    jsonObject.put("lastname", "Kumar");
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-
-
-                ANRequest requestThree = AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                        .addJSONObjectBody(jsonObject)
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        });
-                ANResponse<JSONObject> responseThree = requestThree.executeForJSONObject();
-
-                if (responseThree.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : jsonObjectANResponse success");
-                    JSONObject jsonObjectFinal = responseThree.getResult();
-                    Log.d(TAG, "checkSynchronousCall : jsonObjectANResponse result " + jsonObjectFinal.toString());
-                    Response response = responseThree.getOkHttpResponse();
-                    Log.d(TAG, "checkSynchronousCall : headers : " + response.headers().toString());
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : jsonObjectANResponse failed");
-                    Utils.logError(TAG, responseThree.getError());
-                }
-
-
-                ANRequest requestFour = AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                        .addPathParameter("pageNumber", "0")
-                        .addQueryParameter("limit", "3")
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        });
-                ANResponse<Response> responseFour = requestFour.executeForOkHttpResponse();
-
-
-                if (responseFour.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : okHttpResponse success");
-                    Response okHttpResponse = responseFour.getResult();
-                    if (okHttpResponse != null) {
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "response is successful");
-                            try {
-                                Log.d(TAG, "response : " + okHttpResponse.body().source().readUtf8());
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                            }
-                        } else {
-                            Log.d(TAG, "response is not successful");
-                        }
-                    } else {
-                        Log.d(TAG, "response is null");
-                    }
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : okHttpResponse failed");
-                    Utils.logError(TAG, responseFour.getError());
-                }
-            }
-        }).start();
-    }
-
-    public void checkOptionsRequest(View view) {
-        AndroidNetworking.options("https://api.github.com/square/okhttp/issues")
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        Log.d(TAG, "response : " + response.headers().toString());
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void getCurrentConnectionQuality(View view) {
-        Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
-    }
-}
diff --git a/app/src/main/java/com/networking/ImageGridActivity.java b/app/src/main/java/com/networking/ImageGridActivity.java
deleted file mode 100644
index a9c2e81..0000000
--- a/app/src/main/java/com/networking/ImageGridActivity.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentTransaction;
-
-import com.networking.fragments.ImageGridFragment;
-
-/**
- * Created by amitshekhar on 23/03/16.
- */
-public class ImageGridActivity extends FragmentActivity {
-    private static final String TAG = "ImageGridActivity";
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (getSupportFragmentManager().findFragmentByTag(TAG) == null) {
-            final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
-            ft.add(android.R.id.content, new ImageGridFragment(), TAG);
-            ft.commit();
-        }
-    }
-}
diff --git a/app/src/main/java/com/networking/MainActivity.java b/app/src/main/java/com/networking/MainActivity.java
deleted file mode 100644
index c5a0bc3..0000000
--- a/app/src/main/java/com/networking/MainActivity.java
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking;
-
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.Priority;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.androidnetworking.interfaces.BitmapRequestListener;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
-import com.androidnetworking.internal.ANImageLoader;
-import com.androidnetworking.widget.ANImageView;
-import com.networking.provider.Images;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-public class MainActivity extends AppCompatActivity {
-
-    private static final String TAG = MainActivity.class.getSimpleName();
-    private static final String URL_IMAGE = "http://i.imgur.com/2M7Hasn.png";
-    private static final String URL_IMAGE_LOADER = "http://i.imgur.com/52md06W.jpg";
-
-    private ImageView imageView;
-    private ANImageView ANImageView;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_main);
-        imageView = (ImageView) findViewById(R.id.imageView);
-        ANImageView = (ANImageView) findViewById(R.id.greatImageView);
-        ANImageView.setDefaultImageResId(R.drawable.ic_toys_black_24dp);
-        ANImageView.setErrorImageResId(R.drawable.ic_error_outline_black_24dp);
-        ANImageView.setImageUrl(Images.imageThumbUrls[0]);
-        makeJSONArrayRequest();
-        makeJSONObjectRequest();
-    }
-
-    private void makeJSONArrayRequest() {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .setTag(this)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONArray(new JSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(JSONArray response) {
-                        Log.d(TAG, "onResponse array : " + response.toString());
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    private void makeJSONObjectRequest() {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_OBJECT)
-                .setTag(this)
-                .addPathParameter("userId", "1")
-                .setPriority(Priority.HIGH)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsJSONObject(new JSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void makeRequests(View view) {
-        for (int i = 0; i < 10; i++) {
-            makeJSONArrayRequest();
-            makeJSONObjectRequest();
-        }
-    }
-
-    public void cancelAllRequests(View view) {
-        Log.d(TAG, "isRequestRunning before cancel : " + AndroidNetworking.isRequestRunning(this));
-        AndroidNetworking.cancel(this);
-        Log.d(TAG, "isRequestRunning after cancel : " + AndroidNetworking.isRequestRunning(this));
-    }
-
-    public void loadImageDirect(View view) {
-        AndroidNetworking.get(URL_IMAGE)
-                .setTag("imageRequestTag")
-                .setPriority(Priority.MEDIUM)
-                .setImageScaleType(null)
-                .setBitmapMaxHeight(0)
-                .setBitmapMaxWidth(0)
-                .setBitmapConfig(Bitmap.Config.ARGB_8888)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsBitmap(new BitmapRequestListener() {
-                    @Override
-                    public void onResponse(Bitmap response) {
-                        Log.d(TAG, "onResponse Bitmap");
-                        imageView.setImageBitmap(response);
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void loadImageFromImageLoader(View view) {
-        ANImageLoader.getInstance().get(URL_IMAGE_LOADER, ANImageLoader.getImageListener(imageView,
-                R.drawable.ic_toys_black_24dp, R.drawable.ic_error_outline_black_24dp));
-    }
-
-    public void startGridActivity(View view) {
-        startActivity(new Intent(MainActivity.this, ImageGridActivity.class));
-    }
-
-    public void startApiTestActivity(View view) {
-        startActivity(new Intent(MainActivity.this, ApiTestActivity.class));
-    }
-
-    public void startOkHttpResponseTestActivity(View view) {
-        startActivity(new Intent(MainActivity.this, OkHttpResponseTestActivity.class));
-    }
-
-    public void startWebSocketActivity(View view) {
-        startActivity(new Intent(MainActivity.this, WebSocketActivity.class));
-    }
-}
diff --git a/app/src/main/java/com/networking/MyApplication.java b/app/src/main/java/com/networking/MyApplication.java
deleted file mode 100644
index d4c34a7..0000000
--- a/app/src/main/java/com/networking/MyApplication.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking;
-
-import android.app.Application;
-import android.graphics.BitmapFactory;
-import android.util.Log;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ConnectionQuality;
-import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
-
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public class MyApplication extends Application {
-
-    private static final String TAG = MyApplication.class.getSimpleName();
-    private static MyApplication appInstance = null;
-
-    public static MyApplication getInstance() {
-        return appInstance;
-    }
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        appInstance = this;
-        AndroidNetworking.initialize(getApplicationContext());
-        BitmapFactory.Options options = new BitmapFactory.Options();
-        options.inPurgeable = true;
-        AndroidNetworking.setBitmapDecodeOptions(options);
-        AndroidNetworking.enableLogging();
-        AndroidNetworking.setConnectionQualityChangeListener(new ConnectionQualityChangeListener() {
-            @Override
-            public void onChange(ConnectionQuality currentConnectionQuality, int currentBandwidth) {
-                Log.d(TAG, "onChange: currentConnectionQuality : " + currentConnectionQuality + " currentBandwidth : " + currentBandwidth);
-            }
-        });
-
-    }
-
-}
diff --git a/app/src/main/java/com/networking/OkHttpResponseTestActivity.java b/app/src/main/java/com/networking/OkHttpResponseTestActivity.java
deleted file mode 100644
index fc82c94..0000000
--- a/app/src/main/java/com/networking/OkHttpResponseTestActivity.java
+++ /dev/null
@@ -1,1081 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.networking;
-
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Looper;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.common.Priority;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.androidnetworking.interfaces.DownloadListener;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseListener;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.networking.model.User;
-import com.networking.utils.Utils;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.List;
-import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
-
-import okhttp3.OkHttpClient;
-import okhttp3.Response;
-
-/**
- * Created by amitshekhar on 30/03/16.
- */
-public class OkHttpResponseTestActivity extends AppCompatActivity {
-
-    private static final String TAG = OkHttpResponseTestActivity.class.getSimpleName();
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_api_test);
-    }
-
-    public void prefetch(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .prefetch();
-    }
-
-    public void prefetchDownload(View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .setPriority(Priority.HIGH)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .prefetch();
-    }
-
-    public void getAllUsers(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndObjectList(User.class, new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, List<User> users) {
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void getAnUser(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_OBJECT)
-                .addPathParameter("userId", "1")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setUserAgent("getAnUser")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndObject(User.class, new OkHttpResponseAndParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, User user) {
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void checkForHeaderGet(View view) {
-
-        ANRequest.GetRequestBuilder getRequestBuilder = new ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        getRequestBuilder.addHeaders("token", "1234")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                }).getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-            @Override
-            public void onResponse(Response okHttpResponse, JSONObject response) {
-                Log.d(TAG, "onResponse object : " + response.toString());
-                if (okHttpResponse.isSuccessful()) {
-                    Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                } else {
-                    Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                }
-            }
-
-            @Override
-            public void onError(ANError anError) {
-                Utils.logError(TAG, anError);
-            }
-        });
-    }
-
-    public void checkForHeaderPost(View view) {
-
-        ANRequest.PostRequestBuilder postRequestBuilder = AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        postRequestBuilder.addHeaders("token", "1234");
-
-        ANRequest anRequest = postRequestBuilder.setTag(this)
-                .setPriority(Priority.LOW)
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build();
-
-        anRequest.setAnalyticsListener(new AnalyticsListener() {
-            @Override
-            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                Log.d(TAG, " bytesSent : " + bytesSent);
-                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                Log.d(TAG, " isFromCache : " + isFromCache);
-            }
-        });
-
-        anRequest.getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-            @Override
-            public void onResponse(Response okHttpResponse, JSONObject response) {
-                Log.d(TAG, "onResponse object : " + response.toString());
-                Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                if (okHttpResponse.isSuccessful()) {
-                    Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                } else {
-                    Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                }
-            }
-
-            @Override
-            public void onError(ANError anError) {
-                Utils.logError(TAG, anError);
-            }
-        });
-    }
-
-    public void createAnUser(View view) {
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Suman")
-                .addBodyParameter("lastname", "Shekhar")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-
-    public void createAnUserJSONObject(View view) {
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put("firstname", "Rohit");
-            jsonObject.put("lastname", "Kumar");
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addJSONObjectBody(jsonObject)
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                }).getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-            @Override
-            public void onResponse(Response okHttpResponse, JSONObject response) {
-                Log.d(TAG, "onResponse object : " + response.toString());
-                Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                if (okHttpResponse.isSuccessful()) {
-                    Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                } else {
-                    Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                }
-            }
-
-            @Override
-            public void onError(ANError anError) {
-                Utils.logError(TAG, anError);
-            }
-        });
-    }
-
-    public void downloadFile(final View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .setPriority(Priority.HIGH)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just an ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void downloadImage(final View view) {
-        String url = "http://i.imgur.com/AtbX9iX.png";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "image1.png")
-                .setPriority(Priority.MEDIUM)
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "Image download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just a ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void uploadImage(final View view) {
-        AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
-                .setPriority(Priority.MEDIUM)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                        Log.d(TAG, "bytesUploaded : " + bytesUploaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        Log.d(TAG, "Image upload Completed");
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void doNotCacheResponse(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .doNotCacheResponse()
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void getResponseOnlyIfCached(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .getResponseOnlyIfCached()
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void getResponseOnlyFromNetwork(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .getResponseOnlyFromNetwork()
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void setMaxAgeCacheControl(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setMaxAgeCacheControl(0, TimeUnit.SECONDS)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void setMaxStaleCacheControl(View view) {
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .setMaxStaleCacheControl(365, TimeUnit.SECONDS)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONArray(new OkHttpResponseAndJSONArrayRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONArray response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void cleanupDestinationTest(View view) {
-        String url = "http://i.imgur.com/m6K1DCQ.jpg";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "cleanupDestinationTest.jpg")
-                .setPriority(Priority.HIGH)
-                .setTag("cleanupDestinationTest")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (bytesDownloaded > 50) {
-                            AndroidNetworking.cancel("cleanupDestinationTest");
-                            Log.d(TAG, "cancel: cleanupDestinationTest");
-                        }
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just an ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void disableGzipForCustomRequest(View view) {
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Amit")
-                .addBodyParameter("lastname", "Shekhar")
-                .setTag(this)
-                .setOkHttpClient(new OkHttpClient())
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponseAndJSONObject(new OkHttpResponseAndJSONObjectRequestListener() {
-                    @Override
-                    public void onResponse(Response okHttpResponse, JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "onResponse success headers : " + okHttpResponse.headers().toString());
-                        } else {
-                            Log.d(TAG, "onResponse not success headers : " + okHttpResponse.headers().toString());
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void checkCacheForCustomClient(View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .setPriority(Priority.HIGH)
-                .setTag(this)
-                .setOkHttpClient(new OkHttpClient())
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .startDownload(new DownloadListener() {
-                    @Override
-                    public void onDownloadComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(ANError error) {
-                        if (error.getErrorCode() != 0) {
-                            // received ANError from server
-                            // error.getErrorCode() - the ANError code from server
-                            // error.getErrorBody() - the ANError body from server
-                            // error.getErrorDetail() - just an ANError detail
-                            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-                            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        } else {
-                            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-                        }
-                    }
-                });
-    }
-
-    public void checkOkHttpResponse(View view) {
-
-        AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        if (response != null) {
-                            if (response.isSuccessful()) {
-                                Log.d(TAG, "response is successful");
-                                try {
-                                    Log.d(TAG, "response : " + response.body().source().readUtf8());
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                }
-                            } else {
-                                Log.d(TAG, "response is not successful");
-                            }
-                        } else {
-                            Log.d(TAG, "response is null");
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-
-        AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Suman")
-                .addBodyParameter("lastname", "Shekhar")
-                .setTag(this)
-                .setPriority(Priority.LOW)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        if (response != null) {
-                            if (response.isSuccessful()) {
-                                Log.d(TAG, "response is successful");
-                                try {
-                                    Log.d(TAG, "response : " + response.body().source().readUtf8());
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                }
-                            } else {
-                                Log.d(TAG, "response is not successful");
-                            }
-                        } else {
-                            Log.d(TAG, "response is null");
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-
-        AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
-                .setPriority(Priority.MEDIUM)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
-                .setTag(this)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                        Log.d(TAG, "bytesUploaded : " + bytesUploaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        if (response != null) {
-                            if (response.isSuccessful()) {
-                                Log.d(TAG, "response is successful");
-                                try {
-                                    Log.d(TAG, "response : " + response.body().source().readUtf8());
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                }
-                            } else {
-                                Log.d(TAG, "response is not successful");
-                            }
-                        } else {
-                            Log.d(TAG, "response is null");
-                        }
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-
-    public void checkSynchronousCall(View view) {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-
-                String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-                ANRequest requestOne = AndroidNetworking
-                        .download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                        .setPriority(Priority.HIGH)
-                        .setTag(this)
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        })
-                        .setDownloadProgressListener(new DownloadProgressListener() {
-                            @Override
-                            public void onProgress(long bytesDownloaded, long totalBytes) {
-                                Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                                Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-
-                            }
-                        });
-                ANResponse<String> responseOne = requestOne.executeForDownload();
-
-                if (responseOne.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : download success");
-                    Log.d(TAG, "checkSynchronousCall : download result " + responseOne.getResult());
-                    Response response = responseOne.getOkHttpResponse();
-                    Log.d(TAG, "checkSynchronousCall : headers : " + response.headers().toString());
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : download failed");
-                    Utils.logError(TAG, responseOne.getError());
-                }
-
-
-                ANRequest requestTwo = AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                        .addPathParameter("pageNumber", "0")
-                        .addQueryParameter("limit", "3")
-                        .setTag(this)
-                        .setPriority(Priority.LOW)
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        });
-                ANResponse<List<User>> responseTwo = requestTwo.executeForObjectList(User.class);
-
-                if (responseTwo.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : response success");
-                    List<User> users = responseTwo.getResult();
-                    Log.d(TAG, "userList size : " + users.size());
-                    for (User user : users) {
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                    }
-                    Response response = responseTwo.getOkHttpResponse();
-                    Log.d(TAG, "checkSynchronousCall : headers : " + response.headers().toString());
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : response failed");
-                    Utils.logError(TAG, responseTwo.getError());
-                }
-
-
-                JSONObject jsonObject = new JSONObject();
-                try {
-                    jsonObject.put("firstname", "Rohit");
-                    jsonObject.put("lastname", "Kumar");
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-
-
-                ANRequest requestThree = AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                        .addJSONObjectBody(jsonObject)
-                        .setTag(this)
-                        .setPriority(Priority.LOW)
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        });
-                ANResponse<JSONObject> responseThree = requestThree.executeForJSONObject();
-
-                if (responseThree.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : jsonObjectANResponse success");
-                    JSONObject jsonObjectFinal = responseThree.getResult();
-                    Log.d(TAG, "checkSynchronousCall : jsonObjectANResponse result " + jsonObjectFinal.toString());
-                    Response response = responseThree.getOkHttpResponse();
-                    Log.d(TAG, "checkSynchronousCall : headers : " + response.headers().toString());
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : jsonObjectANResponse failed");
-                    Utils.logError(TAG, responseThree.getError());
-                }
-
-
-                ANRequest requestFour = AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                        .addPathParameter("pageNumber", "0")
-                        .addQueryParameter("limit", "3")
-                        .setTag(this)
-                        .setPriority(Priority.LOW)
-                        .build()
-                        .setAnalyticsListener(new AnalyticsListener() {
-                            @Override
-                            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                                Log.d(TAG, " bytesSent : " + bytesSent);
-                                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                                Log.d(TAG, " isFromCache : " + isFromCache);
-                            }
-                        });
-                ANResponse<Response> responseFour = requestFour.executeForOkHttpResponse();
-
-
-                if (responseFour.isSuccess()) {
-                    Log.d(TAG, "checkSynchronousCall : okHttpResponse success");
-                    Response okHttpResponse = responseFour.getResult();
-                    if (okHttpResponse != null) {
-                        if (okHttpResponse.isSuccessful()) {
-                            Log.d(TAG, "response is successful");
-                            try {
-                                Log.d(TAG, "response : " + okHttpResponse.body().source().readUtf8());
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                            }
-                        } else {
-                            Log.d(TAG, "response is not successful");
-                        }
-                    } else {
-                        Log.d(TAG, "response is null");
-                    }
-                } else {
-                    Log.d(TAG, "checkSynchronousCall : okHttpResponse failed");
-                    Utils.logError(TAG, responseFour.getError());
-                }
-            }
-        }).start();
-    }
-
-    public void checkOptionsRequest(View view) {
-        AndroidNetworking.options("https://api.github.com/square/okhttp/issues")
-                .build()
-                .getAsOkHttpResponse(new OkHttpResponseListener() {
-                    @Override
-                    public void onResponse(Response response) {
-                        Log.d(TAG, "response : " + response.headers().toString());
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        Utils.logError(TAG, anError);
-                    }
-                });
-    }
-
-    public void getCurrentConnectionQuality(View view) {
-        Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
-    }
-}
diff --git a/app/src/main/java/com/networking/WebSocketActivity.java b/app/src/main/java/com/networking/WebSocketActivity.java
deleted file mode 100644
index 768ac41..0000000
--- a/app/src/main/java/com/networking/WebSocketActivity.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.networking;
-
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.widget.TextView;
-
-import java.util.concurrent.TimeUnit;
-
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.WebSocket;
-import okhttp3.WebSocketListener;
-import okio.ByteString;
-
-/**
- * Created by amitshekhar on 09/12/16.
- */
-
-public class WebSocketActivity extends AppCompatActivity {
-
-    private static final String TAG = WebSocketActivity.class.getSimpleName();
-    private TextView textView;
-    private WebSocket webSocket;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_web_socket);
-        textView = (TextView) findViewById(R.id.textView);
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        connectWebSocket();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        disconnectWebSocket();
-    }
-
-    private void connectWebSocket() {
-        OkHttpClient client = new OkHttpClient.Builder()
-                .readTimeout(0, TimeUnit.MILLISECONDS)
-                .build();
-
-        Request request = new Request.Builder()
-                .url("ws://echo.websocket.org")
-                .build();
-        webSocket = client.newWebSocket(request, getWebSocketListener());
-    }
-
-    private void disconnectWebSocket() {
-        if (webSocket != null) {
-            webSocket.cancel();
-        }
-    }
-
-    private WebSocketListener getWebSocketListener() {
-        return new WebSocketListener() {
-            @Override
-            public void onOpen(WebSocket webSocket, Response response) {
-                webSocket.send("Hello...");
-                webSocket.send("...World!");
-                webSocket.send(ByteString.decodeHex("deadbeef"));
-                webSocket.close(1000, "Goodbye, World!");
-            }
-
-            @Override
-            public void onMessage(WebSocket webSocket, final String text) {
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        textView.append("\n");
-                        textView.append("MESSAGE: " + text);
-                    }
-                });
-            }
-
-            @Override
-            public void onMessage(WebSocket webSocket,final ByteString bytes) {
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        textView.append("\n");
-                        textView.append("MESSAGE: " + bytes.hex());
-                    }
-                });
-            }
-
-            @Override
-            public void onClosing(WebSocket webSocket,final int code,final String reason) {
-                webSocket.close(1000, null);
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        textView.append("\n");
-                        textView.append("CLOSE: " + code + " " + reason);
-                    }
-                });
-            }
-
-            @Override
-            public void onFailure(WebSocket webSocket, Throwable t, Response response) {
-                t.printStackTrace();
-            }
-        };
-    }
-}
diff --git a/app/src/main/java/com/networking/fragments/ImageGridFragment.java b/app/src/main/java/com/networking/fragments/ImageGridFragment.java
deleted file mode 100644
index 024f3e2..0000000
--- a/app/src/main/java/com/networking/fragments/ImageGridFragment.java
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking.fragments;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.util.TypedValue;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.BaseAdapter;
-import android.widget.GridView;
-import android.widget.ImageView;
-
-import com.androidnetworking.widget.ANImageView;
-import com.networking.R;
-import com.networking.provider.Images;
-
-/**
- * Created by amitshekhar on 23/03/16.
- */
-public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {
-    private static final String TAG = "ImageGridFragment";
-
-    private int mImageThumbSize;
-    private int mImageThumbSpacing;
-    private ImageAdapter mAdapter;
-
-    public ImageGridFragment() {
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setHasOptionsMenu(true);
-
-        mImageThumbSize = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_size);
-        mImageThumbSpacing = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_spacing);
-        mAdapter = new ImageAdapter(getActivity());
-
-    }
-
-    @Override
-    public View onCreateView(
-            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-
-        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);
-        final GridView mGridView = (GridView) v.findViewById(R.id.gridView);
-        mGridView.setAdapter(mAdapter);
-        mGridView.setOnItemClickListener(this);
-        mGridView.getViewTreeObserver().addOnGlobalLayoutListener(
-                new ViewTreeObserver.OnGlobalLayoutListener() {
-                    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-                    @Override
-                    public void onGlobalLayout() {
-                        if (mAdapter.getNumColumns() == 0) {
-                            final int numColumns = (int) Math.floor(
-                                    mGridView.getWidth() / (mImageThumbSize + mImageThumbSpacing));
-                            if (numColumns > 0) {
-                                final int columnWidth =
-                                        (mGridView.getWidth() / numColumns) - mImageThumbSpacing;
-                                mAdapter.setNumColumns(numColumns);
-                                mAdapter.setItemHeight(columnWidth);
-
-                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                                    mGridView.getViewTreeObserver()
-                                            .removeOnGlobalLayoutListener(this);
-                                } else {
-                                    mGridView.getViewTreeObserver()
-                                            .removeGlobalOnLayoutListener(this);
-                                }
-                            }
-                        }
-                    }
-                });
-
-        return v;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        mAdapter.notifyDataSetChanged();
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    @Override
-    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
-
-    }
-
-
-    private class ImageAdapter extends BaseAdapter {
-
-        private final Context mContext;
-        private int mItemHeight = 0;
-        private int mNumColumns = 0;
-        private int mActionBarHeight = 0;
-        private GridView.LayoutParams mImageViewLayoutParams;
-
-        public ImageAdapter(Context context) {
-            super();
-            mContext = context;
-            mImageViewLayoutParams = new GridView.LayoutParams(
-                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-            TypedValue tv = new TypedValue();
-            if (context.getTheme().resolveAttribute(
-                    android.R.attr.actionBarSize, tv, true)) {
-                mActionBarHeight = TypedValue.complexToDimensionPixelSize(
-                        tv.data, context.getResources().getDisplayMetrics());
-            }
-        }
-
-        @Override
-        public int getCount() {
-            if (getNumColumns() == 0) {
-                return 0;
-            }
-
-            return Images.imageThumbUrls.length + mNumColumns;
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return position < mNumColumns ?
-                    null : Images.imageThumbUrls[position - mNumColumns];
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return position < mNumColumns ? 0 : position - mNumColumns;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public int getItemViewType(int position) {
-            return (position < mNumColumns) ? 1 : 0;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return true;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup container) {
-            if (position < mNumColumns) {
-                if (convertView == null) {
-                    convertView = new View(mContext);
-                }
-                convertView.setLayoutParams(new AbsListView.LayoutParams(
-                        ViewGroup.LayoutParams.MATCH_PARENT, mActionBarHeight));
-                return convertView;
-            }
-
-            ANImageView imageView;
-            if (convertView == null) {
-                imageView = new ANImageView(mContext);
-                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
-                imageView.setLayoutParams(mImageViewLayoutParams);
-            } else {
-                imageView = (ANImageView) convertView;
-            }
-
-            if (imageView.getLayoutParams().height != mItemHeight) {
-                imageView.setLayoutParams(mImageViewLayoutParams);
-            }
-            imageView.setDefaultImageResId(R.drawable.ic_toys_black_24dp);
-            imageView.setErrorImageResId(R.drawable.ic_error_outline_black_24dp);
-            imageView.setImageUrl(Images.imageThumbUrls[position - mNumColumns]);
-
-            return imageView;
-        }
-
-        public void setItemHeight(int height) {
-            if (height == mItemHeight) {
-                return;
-            }
-            mItemHeight = height;
-            mImageViewLayoutParams =
-                    new GridView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, mItemHeight);
-            notifyDataSetChanged();
-        }
-
-        public void setNumColumns(int numColumns) {
-            mNumColumns = numColumns;
-        }
-
-        public int getNumColumns() {
-            return mNumColumns;
-        }
-    }
-}
diff --git a/app/src/main/java/com/networking/model/User.java b/app/src/main/java/com/networking/model/User.java
deleted file mode 100644
index 503b47e..0000000
--- a/app/src/main/java/com/networking/model/User.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.networking.model;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public class User {
-
-    public long id;
-    public String firstname;
-    public String lastname;
-    public boolean isFollowing;
-
-}
diff --git a/app/src/main/java/com/networking/provider/Images.java b/app/src/main/java/com/networking/provider/Images.java
deleted file mode 100644
index f15724b..0000000
--- a/app/src/main/java/com/networking/provider/Images.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking.provider;
-
-/**
- * Created by amitshekhar on 23/03/16.
- */
-
-/**
- * Some simple test data to use for this sample app.
- */
-public class Images {
-
-    /**
-     * This are PicasaWeb URLs and could potentially change. Ideally the PicasaWeb API should be
-     * used to fetch the URLs.
-     * <p>
-     * Credit to Romain Guy for the photos:
-     * http://www.curious-creature.org/
-     * https://plus.google.com/109538161516040592207/about
-     * http://www.flickr.com/photos/romainguy
-     */
-    public final static String[] imageUrls = new String[]{
-            "https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg",
-            "https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg",
-            "https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg",
-            "https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s1024/Antelope%252520Butte.jpg",
-            "https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s1024/Antelope%252520Hallway.jpg",
-            "https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s1024/Antelope%252520Walls.jpg",
-            "https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s1024/Apre%2525CC%252580s%252520la%252520Pluie.jpg",
-            "https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s1024/Backlit%252520Cloud.jpg",
-            "https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s1024/Bee%252520and%252520Flower.jpg",
-            "https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s1024/Bonzai%252520Rock%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s1024/Caterpillar.jpg",
-            "https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s1024/Chess.jpg",
-            "https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s1024/Chihuly.jpg",
-            "https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s1024/Closed%252520Door.jpg",
-            "https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s1024/Colorado%252520River%252520Sunset.jpg",
-            "https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s1024/Colors%252520of%252520Autumn.jpg",
-            "https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s1024/Countryside.jpg",
-            "https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s1024/Death%252520Valley%252520-%252520Dunes.jpg",
-            "https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s1024/Delicate%252520Arch.jpg",
-            "https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s1024/Despair.jpg",
-            "https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s1024/Eagle%252520Fall%252520Sunrise.jpg",
-            "https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s1024/Electric%252520Storm.jpg",
-            "https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s1024/False%252520Kiva.jpg",
-            "https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s1024/Fitzgerald%252520Streaks.jpg",
-            "https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s1024/Foggy%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s1024/Frantic.jpg",
-            "https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s1024/Golden%252520Gate%252520Afternoon.jpg",
-            "https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s1024/Golden%252520Gate%252520Fog.jpg",
-            "https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s1024/Golden%252520Grass.jpg",
-            "https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s1024/Grand%252520Teton.jpg",
-            "https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s1024/Grass%252520Closeup.jpg",
-            "https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s1024/Green%252520Grass.jpg",
-            "https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s1024/Hanging%252520Leaf.jpg",
-            "https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s1024/Highway%2525201.jpg",
-            "https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s1024/Horseshoe%252520Bend%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s1024/Horseshoe%252520Bend.jpg",
-            "https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s1024/Into%252520the%252520Blue.jpg",
-            "https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s1024/Jelly%252520Fish%2525202.jpg",
-            "https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s1024/Jelly%252520Fish%2525203.jpg",
-            "https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s1024/Kauai.jpg",
-            "https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s1024/Kyoto%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s1024/Lake%252520Tahoe%252520Colors.jpg",
-            "https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s1024/Lava%252520from%252520the%252520Sky.jpg",
-            "https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s1024/Leica%25252050mm%252520Summilux.jpg",
-            "https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s1024/Leica%25252050mm%252520Summilux.jpg",
-            "https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s1024/Leica%252520M8%252520%252528Front%252529.jpg",
-            "https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s1024/Light%252520to%252520Sand.jpg",
-            "https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s1024/Little%252520Bit%252520of%252520Paradise.jpg",
-            "https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s1024/Lone%252520Pine%252520Sunset.jpg",
-            "https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s1024/Lonely%252520Rock.jpg",
-            "https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s1024/Longue%252520Vue.jpg",
-            "https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s1024/Look%252520Me%252520in%252520the%252520Eye.jpg",
-            "https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s1024/Lost%252520in%252520a%252520Field.jpg",
-            "https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s1024/Marshall%252520Beach%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s1024/Mono%252520Lake%252520Blue.jpg",
-            "https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s1024/Monument%252520Valley%252520Overlook.jpg",
-            "https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s1024/Moving%252520Rock.jpg",
-            "https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s1024/Napali%252520Coast.jpg",
-            "https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s1024/One%252520Wheel.jpg",
-            "https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s1024/Open%252520Sky.jpg",
-            "https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s1024/Orange%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s1024/Orchid.jpg",
-            "https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s1024/Over%252520there.jpg",
-            "https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s1024/Plumes.jpg",
-            "https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s1024/Rainbokeh.jpg",
-            "https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s1024/Rainbow.jpg",
-            "https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s1024/Rice%252520Fields.jpg",
-            "https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s1024/Rockaway%252520Fire%252520Sky.jpg",
-            "https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s1024/Rockaway%252520Flow.jpg",
-            "https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s1024/Rockaway%252520Sunset%252520Sky.jpg",
-            "https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s1024/Russian%252520Ridge%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s1024/Rust%252520Knot.jpg",
-            "https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s1024/Sailing%252520Stones.jpg",
-            "https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s1024/Seahorse.jpg",
-            "https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s1024/Shinjuku%252520Street.jpg",
-            "https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s1024/Sierra%252520Heavens.jpg",
-            "https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s1024/Sierra%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s1024/Sin%252520Lights.jpg",
-            "https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s1024/Starry%252520Lake.jpg",
-            "https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s1024/Starry%252520Night.jpg",
-            "https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s1024/Stream.jpg",
-            "https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s1024/Strip%252520Sunset.jpg",
-            "https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s1024/Sunset%252520Hills.jpg",
-            "https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s1024/Tenaya%252520Lake%2525202.jpg",
-            "https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s1024/Tenaya%252520Lake.jpg",
-            "https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s1024/The%252520Cave%252520BW.jpg",
-            "https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s1024/The%252520Fisherman.jpg",
-            "https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s1024/The%252520Night%252520is%252520Coming.jpg",
-            "https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s1024/The%252520Road.jpg",
-            "https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s1024/Tokyo%252520Heights.jpg",
-            "https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s1024/Tokyo%252520Highway.jpg",
-            "https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s1024/Tokyo%252520Smog.jpg",
-            "https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s1024/Tufa%252520at%252520Night.jpg",
-            "https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s1024/Valley%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s1024/Windmill%252520Sunrise.jpg",
-            "https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s1024/Windmill.jpg",
-            "https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s1024/Windmills.jpg",
-            "https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s1024/Yet%252520Another%252520Rockaway%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s1024/Yosemite%252520Tree.jpg",
-    };
-
-    /**
-     * This are PicasaWeb thumbnail URLs and could potentially change. Ideally the PicasaWeb API
-     * should be used to fetch the URLs.
-     * <p>
-     * Credit to Romain Guy for the photos:
-     * http://www.curious-creature.org/
-     * https://plus.google.com/109538161516040592207/about
-     * http://www.flickr.com/photos/romainguy
-     */
-    public final static String[] imageThumbUrls = new String[]{
-            "https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s240-c/A%252520Photographer.jpg",
-            "https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s240-c/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg",
-            "https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s240-c/Another%252520Rockaway%252520Sunset.jpg",
-            "https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s240-c/Antelope%252520Butte.jpg",
-            "https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s240-c/Antelope%252520Hallway.jpg",
-            "https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s240-c/Antelope%252520Walls.jpg",
-            "https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s240-c/Apre%2525CC%252580s%252520la%252520Pluie.jpg",
-            "https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s240-c/Backlit%252520Cloud.jpg",
-            "https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s240-c/Bee%252520and%252520Flower.jpg",
-            "https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s240-c/Bonzai%252520Rock%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s240-c/Caterpillar.jpg",
-            "https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s240-c/Chess.jpg",
-            "https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s240-c/Chihuly.jpg",
-            "https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s240-c/Closed%252520Door.jpg",
-            "https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s240-c/Colorado%252520River%252520Sunset.jpg",
-            "https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s240-c/Colors%252520of%252520Autumn.jpg",
-            "https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s240-c/Countryside.jpg",
-            "https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s240-c/Death%252520Valley%252520-%252520Dunes.jpg",
-            "https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s240-c/Delicate%252520Arch.jpg",
-            "https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s240-c/Despair.jpg",
-            "https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s240-c/Eagle%252520Fall%252520Sunrise.jpg",
-            "https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s240-c/Electric%252520Storm.jpg",
-            "https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s240-c/False%252520Kiva.jpg",
-            "https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s240-c/Fitzgerald%252520Streaks.jpg",
-            "https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s240-c/Foggy%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s240-c/Frantic.jpg",
-            "https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s240-c/Golden%252520Gate%252520Afternoon.jpg",
-            "https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s240-c/Golden%252520Gate%252520Fog.jpg",
-            "https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s240-c/Golden%252520Grass.jpg",
-            "https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s240-c/Grand%252520Teton.jpg",
-            "https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s240-c/Grass%252520Closeup.jpg",
-            "https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s240-c/Green%252520Grass.jpg",
-            "https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s240-c/Hanging%252520Leaf.jpg",
-            "https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s240-c/Highway%2525201.jpg",
-            "https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s240-c/Horseshoe%252520Bend%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s240-c/Horseshoe%252520Bend.jpg",
-            "https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s240-c/Into%252520the%252520Blue.jpg",
-            "https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s240-c/Jelly%252520Fish%2525202.jpg",
-            "https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s240-c/Jelly%252520Fish%2525203.jpg",
-            "https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s240-c/Kauai.jpg",
-            "https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s240-c/Kyoto%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s240-c/Lake%252520Tahoe%252520Colors.jpg",
-            "https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s240-c/Lava%252520from%252520the%252520Sky.jpg",
-            "https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s240-c/Leica%25252050mm%252520Summilux.jpg",
-            "https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s240-c/Leica%25252050mm%252520Summilux.jpg",
-            "https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s240-c/Leica%252520M8%252520%252528Front%252529.jpg",
-            "https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s240-c/Light%252520to%252520Sand.jpg",
-            "https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s240-c/Little%252520Bit%252520of%252520Paradise.jpg",
-            "https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s240-c/Lone%252520Pine%252520Sunset.jpg",
-            "https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s240-c/Lonely%252520Rock.jpg",
-            "https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s240-c/Longue%252520Vue.jpg",
-            "https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s240-c/Look%252520Me%252520in%252520the%252520Eye.jpg",
-            "https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s240-c/Lost%252520in%252520a%252520Field.jpg",
-            "https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s240-c/Marshall%252520Beach%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s240-c/Mono%252520Lake%252520Blue.jpg",
-            "https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s240-c/Monument%252520Valley%252520Overlook.jpg",
-            "https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s240-c/Moving%252520Rock.jpg",
-            "https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s240-c/Napali%252520Coast.jpg",
-            "https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s240-c/One%252520Wheel.jpg",
-            "https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s240-c/Open%252520Sky.jpg",
-            "https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s240-c/Orange%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s240-c/Orchid.jpg",
-            "https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s240-c/Over%252520there.jpg",
-            "https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s240-c/Plumes.jpg",
-            "https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s240-c/Rainbokeh.jpg",
-            "https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s240-c/Rainbow.jpg",
-            "https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s240-c/Rice%252520Fields.jpg",
-            "https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s240-c/Rockaway%252520Fire%252520Sky.jpg",
-            "https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s240-c/Rockaway%252520Flow.jpg",
-            "https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s240-c/Rockaway%252520Sunset%252520Sky.jpg",
-            "https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s240-c/Russian%252520Ridge%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s240-c/Rust%252520Knot.jpg",
-            "https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s240-c/Sailing%252520Stones.jpg",
-            "https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s240-c/Seahorse.jpg",
-            "https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s240-c/Shinjuku%252520Street.jpg",
-            "https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s240-c/Sierra%252520Heavens.jpg",
-            "https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s240-c/Sierra%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s240-c/Sin%252520Lights.jpg",
-            "https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s240-c/Starry%252520Lake.jpg",
-            "https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s240-c/Starry%252520Night.jpg",
-            "https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s240-c/Stream.jpg",
-            "https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s240-c/Strip%252520Sunset.jpg",
-            "https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s240-c/Sunset%252520Hills.jpg",
-            "https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s240-c/Tenaya%252520Lake%2525202.jpg",
-            "https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s240-c/Tenaya%252520Lake.jpg",
-            "https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s240-c/The%252520Cave%252520BW.jpg",
-            "https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s240-c/The%252520Fisherman.jpg",
-            "https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s240-c/The%252520Night%252520is%252520Coming.jpg",
-            "https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s240-c/The%252520Road.jpg",
-            "https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s240-c/Tokyo%252520Heights.jpg",
-            "https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s240-c/Tokyo%252520Highway.jpg",
-            "https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s240-c/Tokyo%252520Smog.jpg",
-            "https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s240-c/Tufa%252520at%252520Night.jpg",
-            "https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s240-c/Valley%252520Sunset.jpg",
-            "https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s240-c/Windmill%252520Sunrise.jpg",
-            "https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s240-c/Windmill.jpg",
-            "https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s240-c/Windmills.jpg",
-            "https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s240-c/Yet%252520Another%252520Rockaway%252520Sunset.jpg",
-            "https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s240-c/Yosemite%252520Tree.jpg",
-    };
-}
-
diff --git a/app/src/main/java/com/networking/utils/Utils.java b/app/src/main/java/com/networking/utils/Utils.java
deleted file mode 100644
index 5ee797b..0000000
--- a/app/src/main/java/com/networking/utils/Utils.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.networking.utils;
-
-import android.content.Context;
-import android.os.Environment;
-import android.support.v4.content.ContextCompat;
-import android.util.Log;
-
-import com.androidnetworking.error.ANError;
-
-import java.io.File;
-
-/**
- * Created by amitshekhar on 04/04/16.
- */
-public class Utils {
-
-    public static String getRootDirPath(Context context) {
-        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-            File file = ContextCompat.getExternalFilesDirs(context.getApplicationContext(), null)[0];
-            return file.getAbsolutePath();
-        } else {
-            return context.getApplicationContext().getFilesDir().getAbsolutePath();
-        }
-    }
-
-    public static void logError(String TAG,ANError error) {
-        if (error.getErrorCode() != 0) {
-            // received ANError from server
-            // error.getErrorCode() - the ANError code from server
-            // error.getErrorBody() - the ANError body from server
-            // error.getErrorDetail() - just a ANError detail
-            Log.d(TAG, "onError errorCode : " + error.getErrorCode());
-            Log.d(TAG, "onError errorBody : " + error.getErrorBody());
-            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-        } else {
-            // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-            Log.d(TAG, "onError errorDetail : " + error.getErrorDetail());
-        }
-    }
-
-}
diff --git a/app/src/main/res/drawable/ic_error_outline_black_24dp.png b/app/src/main/res/drawable/ic_error_outline_black_24dp.png
deleted file mode 100644
index 68881ee..0000000
Binary files a/app/src/main/res/drawable/ic_error_outline_black_24dp.png and /dev/null differ
diff --git a/app/src/main/res/drawable/ic_toys_black_24dp.png b/app/src/main/res/drawable/ic_toys_black_24dp.png
deleted file mode 100644
index 73eaea1..0000000
Binary files a/app/src/main/res/drawable/ic_toys_black_24dp.png and /dev/null differ
diff --git a/app/src/main/res/drawable/photogrid_list_selector.xml b/app/src/main/res/drawable/photogrid_list_selector.xml
deleted file mode 100644
index fe24b0d..0000000
--- a/app/src/main/res/drawable/photogrid_list_selector.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <item android:state_pressed="true">
-        <shape>
-            <solid android:color="@color/grid_state_pressed" />
-        </shape>
-    </item>
-
-    <item android:state_focused="true">
-        <shape>
-            <solid android:color="@color/grid_state_focused" />
-        </shape>
-    </item>
-
-    <item android:drawable="@android:color/transparent" />
-
-</selector>
diff --git a/app/src/main/res/layout/activity_api_test.xml b/app/src/main/res/layout/activity_api_test.xml
deleted file mode 100644
index dd4f217..0000000
--- a/app/src/main/res/layout/activity_api_test.xml
+++ /dev/null
@@ -1,337 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/prefetch"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="prefetch"
-            android:text="prefetch" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/prefetchDownload"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="prefetchDownload"
-            android:text="prefetchDownload" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getAllUsers"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getAllUsers"
-            android:text="/getAllUsers/{pageNumber}" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getAnUser"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getAnUser"
-            android:text="/getAnUser/{userId}" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkForHeaderGet"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkForHeaderGet"
-            android:text="GET : checkForHeader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkForHeaderPost"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkForHeaderPost"
-            android:text="POST : checkForHeader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/createAnUser"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="createAnUser"
-            android:text="/createAnUser" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/createAnUserJSONObject"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="createAnUserJSONObject"
-            android:text="/createAnUserJSONObject" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadFile"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadFile"
-            android:text="downloadFile" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadImage"
-            android:text="downloadImage" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/uploadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="uploadImage"
-            android:text="uploadImage" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/doNotCacheResponse"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="doNotCacheResponse"
-            android:text="doNotCacheResponse" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getResponseOnlyIfCached"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getResponseOnlyIfCached"
-            android:text="getResponseOnlyIfCached" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getResponseOnlyFromNetwork"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getResponseOnlyFromNetwork"
-            android:text="getResponseOnlyFromNetwork" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/setMaxAgeCacheControl"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="setMaxAgeCacheControl"
-            android:text="setMaxAgeCacheControl" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/setMaxStaleCacheControl"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="setMaxStaleCacheControl"
-            android:text="setMaxStaleCacheControl" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/cleanupDestinationTest"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="cleanupDestinationTest"
-            android:text="cleanupDestinationTest" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/disableGzipForCustomRequest"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="disableGzipForCustomRequest"
-            android:text="disableGzipForCustomRequest" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkCacheForCustomClient"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkCacheForCustomClient"
-            android:text="checkCacheForCustomClient" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkOkHttpResponse"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkOkHttpResponse"
-            android:text="checkOkHttpResponse" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkSynchronousCall"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkSynchronousCall"
-            android:text="checkSynchronousCall" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkOptionsRequest"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkOptionsRequest"
-            android:text="checkOptionsRequest" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getCurrentConnectionQuality"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getCurrentConnectionQuality"
-            android:text="getCurrentConnectionQuality" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-    </LinearLayout>
-
-</ScrollView>
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
deleted file mode 100644
index 6dd97b4..0000000
--- a/app/src/main/res/layout/activity_main.xml
+++ /dev/null
@@ -1,169 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/makeRequestButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="makeRequests"
-            android:text="Make Some Requests" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/cancelButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="cancelAllRequests"
-            android:text="Cancel All Request" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/loadImageButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="loadImageDirect"
-            android:text="Load Image Direct" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/loadImageFromImageLoaderButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="loadImageFromImageLoader"
-            android:text="Load Image From ImageLoader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <LinearLayout
-            android:layout_width="match_parent"
-            android:layout_height="100dp"
-            android:gravity="center"
-            android:orientation="horizontal">
-
-            <ImageView
-                android:id="@+id/imageView"
-                android:layout_width="100dp"
-                android:layout_height="100dp"
-                android:layout_gravity="center"
-                android:layout_marginRight="8dp" />
-
-            <com.androidnetworking.widget.ANImageView
-                android:id="@+id/greatImageView"
-                android:layout_width="100dp"
-                android:layout_height="100dp"
-                android:layout_gravity="center" />
-
-        </LinearLayout>
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/startGridActivityButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startGridActivity"
-            android:text="StartGridActivity" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/startApiTestActivityButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startApiTestActivity"
-            android:text="StartApiTestActivity" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/startOkHttpResponseTestActivityButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startOkHttpResponseTestActivity"
-            android:text="StartOkHttpResponseTestActivity" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/startWebSocketActivityButton"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startWebSocketActivity"
-            android:text="StartWebSocketActivity" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-
-    </LinearLayout>
-
-</ScrollView>
diff --git a/app/src/main/res/layout/activity_web_socket.xml b/app/src/main/res/layout/activity_web_socket.xml
deleted file mode 100644
index b354147..0000000
--- a/app/src/main/res/layout/activity_web_socket.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <TextView
-        android:id="@+id/textView"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textColor="@android:color/black" />
-
-</ScrollView>
-
diff --git a/app/src/main/res/layout/image_grid_fragment.xml b/app/src/main/res/layout/image_grid_fragment.xml
deleted file mode 100644
index dc0e2fd..0000000
--- a/app/src/main/res/layout/image_grid_fragment.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<GridView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/gridView"
-    style="@style/PhotoGridLayout"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:columnWidth="@dimen/image_thumbnail_size"
-    android:horizontalSpacing="@dimen/image_thumbnail_spacing"
-    android:numColumns="auto_fit"
-    android:stretchMode="columnWidth"
-    android:verticalSpacing="@dimen/image_thumbnail_spacing" >
-
-</GridView>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-hdpi/ic_launcher.png b/app/src/main/res/mipmap-hdpi/ic_launcher.png
deleted file mode 100644
index cde69bc..0000000
Binary files a/app/src/main/res/mipmap-hdpi/ic_launcher.png and /dev/null differ
diff --git a/app/src/main/res/mipmap-mdpi/ic_launcher.png b/app/src/main/res/mipmap-mdpi/ic_launcher.png
deleted file mode 100644
index c133a0c..0000000
Binary files a/app/src/main/res/mipmap-mdpi/ic_launcher.png and /dev/null differ
diff --git a/app/src/main/res/mipmap-xhdpi/ic_launcher.png b/app/src/main/res/mipmap-xhdpi/ic_launcher.png
deleted file mode 100644
index bfa42f0..0000000
Binary files a/app/src/main/res/mipmap-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
deleted file mode 100644
index 324e72c..0000000
Binary files a/app/src/main/res/mipmap-xxhdpi/ic_launcher.png and /dev/null differ
diff --git a/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
deleted file mode 100644
index aee44e1..0000000
Binary files a/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png and /dev/null differ
diff --git a/app/src/main/res/values-w820dp/dimens.xml b/app/src/main/res/values-w820dp/dimens.xml
deleted file mode 100644
index f27c022..0000000
--- a/app/src/main/res/values-w820dp/dimens.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
-         (such as screen margins) for screens with more than 820dp of available width. This
-         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
-    <dimen name="activity_horizontal_margin">64dp</dimen>
-</resources>
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
deleted file mode 100644
index 50caaf4..0000000
--- a/app/src/main/res/values/colors.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <color name="colorPrimary">#3F51B5</color>
-    <color name="colorPrimaryDark">#303F9F</color>
-    <color name="colorAccent">#FF4081</color>
-    <color name="grid_state_pressed">#1Affffff</color>
-    <color name="grid_state_focused">#80000000</color>
-</resources>
diff --git a/app/src/main/res/values/dimens.xml b/app/src/main/res/values/dimens.xml
deleted file mode 100644
index 7f8bb59..0000000
--- a/app/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-
-    <dimen name="image_thumbnail_size">100dp</dimen>
-    <dimen name="image_thumbnail_spacing">1dp</dimen>
-</resources>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
deleted file mode 100644
index 2a7ddba..0000000
--- a/app/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <string name="app_name">AndroidNetworking</string>
-</resources>
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
deleted file mode 100644
index bad2155..0000000
--- a/app/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
-        <item name="colorPrimary">@color/colorPrimary</item>
-        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
-        <item name="colorAccent">@color/colorAccent</item>
-    </style>
-
-    <style name="PhotoGridLayout">
-        <item name="android:drawSelectorOnTop">true</item>
-        <item name="android:listSelector">@drawable/photogrid_list_selector</item>
-    </style>
-
-</resources>
diff --git a/app/src/test/java/com/androidnetworking/ExampleUnitTest.java b/app/src/test/java/com/androidnetworking/ExampleUnitTest.java
deleted file mode 100644
index bbc8754..0000000
--- a/app/src/test/java/com/androidnetworking/ExampleUnitTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * To work on unit tests, switch the Test Artifact in the Build Variants view.
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/assets/androidnetworking.png b/assets/androidnetworking.png
deleted file mode 100644
index 58b2206..0000000
Binary files a/assets/androidnetworking.png and /dev/null differ
diff --git a/assets/get_started.png b/assets/get_started.png
deleted file mode 100644
index a03e746..0000000
Binary files a/assets/get_started.png and /dev/null differ
diff --git a/assets/rxjavacomponent.png b/assets/rxjavacomponent.png
deleted file mode 100644
index d376eca..0000000
Binary files a/assets/rxjavacomponent.png and /dev/null differ
diff --git a/build.gradle b/build.gradle
index b5ef45f..e780a68 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,63 +1,21 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-// Top-level build file where you can add configuration options common to all sub-projects/modules.
-
 buildscript {
-    repositories {
-        jcenter()
-        google()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.0'
-        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
-        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
-        // NOTE: Do not place your application dependencies here; they belong
-        // in the individual module build.gradle files
-    }
+	repositories {
+		google()
+		jcenter()
+	}
+
+	dependencies {
+		classpath 'com.android.tools.build:gradle:3.5.1'
+	}
 }
 
 allprojects {
-    repositories {
-        jcenter()
-        google()
-    }
+	repositories {
+		google()
+		jcenter()
+	}
 }
 
 task clean(type: Delete) {
-    delete rootProject.buildDir
+	delete rootProject.buildDir
 }
-
-ext {
-    // App tools version
-    compileSdkVersion = 27
-    minSdkVersion = 14
-    targetSdkVersion = 27
-    buildToolsVersion = "27.0.3"
-
-    // App dependencies versions
-    okHttp3Version = "3.10.0"
-    gsonVersion = "2.8.2"
-    jacksonVersion = "2.8.2"
-    rxJavaVersion = "1.3.8"
-    rxJavaAndroidVersion = "1.2.1"
-    rxJava2Version = "2.1.12"
-    rxJava2AndroidVersion = "2.0.2"
-    jUnitVersion = "4.12"
-    mockWebServerVersion = "3.10.0"
-    supportAppCompatVersion = "27.1.1"
-}
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index e110e1d..c35e2e6 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,35 +1,7 @@
-#
-#    Copyright (C) 2016 Amit Shekhar
-#    Copyright (C) 2011 Android Open Source Project
-#
-#    Licensed under the Apache License, Version 2.0 (the "License");
-#    you may not use this file except in compliance with the License.
-#    You may obtain a copy of the License at
-#
-#        http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS,
-#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#    See the License for the specific language governing permissions and
-#    limitations under the License.
-#
-
-# Project-wide Gradle settings.
-
-# IDE (e.g. Android Studio) users:
-# Gradle settings configured through the IDE *will override*
-# any settings specified in this file.
-
-# For more details on how to configure your build environment visit
-# http://www.gradle.org/docs/current/userguide/build_environment.html
-
-# Specifies the JVM arguments used for the daemon process.
-# The setting is particularly useful for tweaking memory settings.
-# Default value: -Xmx10248m -XX:MaxPermSize=256m
-# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
-
-# When configured, Gradle will run in incubating parallel mode.
-# This option should only be used with decoupled projects. More details, visit
-# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
\ No newline at end of file
+org.gradle.jvmargs=-Xmx1536m
+org.gradle.daemon=true
+org.gradle.parallel=true
+android.useAndroidX=true
+android.enableJetifier=true
+android.enableR8=true
+android.enableR8.libraries=true
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 05ef575..f6b961f 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b311303..0ead517 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Apr 12 21:48:48 IST 2018
+#Fri Aug 30 20:53:51 CEST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.4.1-all.zip
diff --git a/gradlew b/gradlew
index 9d82f78..cccdd3d 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -6,20 +6,38 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,26 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -85,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -150,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282..f955316 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,10 +46,9 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/jackson-android-networking/.gitignore b/jackson-android-networking/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/jackson-android-networking/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/jackson-android-networking/build.gradle b/jackson-android-networking/build.gradle
deleted file mode 100644
index 7e75d80..0000000
--- a/jackson-android-networking/build.gradle
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-apply plugin: 'com.android.library'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-    packagingOptions {
-        exclude 'META-INF/DEPENDENCIES.txt'
-        exclude 'META-INF/LICENSE.txt'
-        exclude 'META-INF/NOTICE.txt'
-        exclude 'META-INF/NOTICE'
-        exclude 'META-INF/LICENSE'
-        exclude 'META-INF/DEPENDENCIES'
-        exclude 'META-INF/notice.txt'
-        exclude 'META-INF/license.txt'
-        exclude 'META-INF/dependencies.txt'
-        exclude 'META-INF/LGPL2.1'
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
-    compile "com.fasterxml.jackson.core:jackson-databind:$rootProject.ext.jacksonVersion"
-    compile project(':android-networking')
-}
-
-//apply from: 'jackson-upload.gradle'
diff --git a/jackson-android-networking/jackson-upload.gradle b/jackson-android-networking/jackson-upload.gradle
deleted file mode 100755
index 34df92f..0000000
--- a/jackson-android-networking/jackson-upload.gradle
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: "com.jfrog.bintray"
-
-def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
-def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
-
-group = "com.amitshekhar.android"
-version = '1.0.2'
-
-install {
-    repositories.mavenInstaller {
-        pom.project {
-            packaging 'aar'
-
-            name 'Fast Android Networking'
-            description 'Fast Android Networking is a powerful library for doing any type of networking in Android applications'
-
-            url siteUrl
-
-            licenses {
-                license {
-                    name 'The Apache Software License, Version 2.0'
-                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                }
-            }
-
-            developers {
-                developer {
-                    id 'amitshekhariitbhu'
-                    name 'Amit Shekhar'
-                    email 'amit.shekhar.iitbhu@gmail.com'
-                }
-            }
-
-            scm {
-                connection gitUrl
-                developerConnection gitUrl
-                url siteUrl
-            }
-        }
-    }
-}
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    classpath += configurations.compile
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-artifacts {
-    archives javadocJar
-    archives sourcesJar
-}
-
-if (project.rootProject.file("local.properties").exists()) {
-    Properties properties = new Properties()
-    properties.load(project.rootProject.file('local.properties').newDataInputStream())
-
-    bintray {
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-
-        configurations = ['archives']
-        dryRun = false
-
-        pkg {
-            repo = "maven"
-            name = "jackson-android-networking"
-            websiteUrl = siteUrl
-            vcsUrl = gitUrl
-            licenses = ["Apache-2.0"]
-            publish = true
-        }
-    }
-}
diff --git a/jackson-android-networking/proguard-rules.pro b/jackson-android-networking/proguard-rules.pro
deleted file mode 100644
index 6b7a2bf..0000000
--- a/jackson-android-networking/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/amitshekhar/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/jackson-android-networking/src/androidTest/AndroidManifest.xml b/jackson-android-networking/src/androidTest/AndroidManifest.xml
deleted file mode 100755
index b3889e6..0000000
--- a/jackson-android-networking/src/androidTest/AndroidManifest.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.jacksonandroidnetworking">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"></uses-permission>
-
-</manifest>
diff --git a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonGetObjectApiTest.java b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonGetObjectApiTest.java
deleted file mode 100644
index 7571b98..0000000
--- a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonGetObjectApiTest.java
+++ /dev/null
@@ -1,453 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.jacksonandroidnetworking.model.User;
-
-import org.json.JSONException;
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 05/05/17.
- */
-
-public class JacksonGetObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public JacksonGetObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-        AndroidNetworking.setParserFactory(new JacksonParserFactory());
-    }
-
-    public void testObjectGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectGetRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        assertEquals("Amit", response.getResult().firstName);
-
-        assertEquals("Shekhar", response.getResult().lastName);
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListGetRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        User user = response.getResult().get(0);
-
-        assertEquals("Amit", user.firstName);
-
-        assertEquals("Shekhar", user.lastName);
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.get(server.url("/").toString()).build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndObjectGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndObjectListGet() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                firstNameRef.set(userList.get(0).firstName);
-                                lastNameRef.set(userList.get(0).lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectListGet404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.get(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                headerRef.set(okHttpResponse.request().header("headerKey"));
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-
-}
diff --git a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonPostObjectApiTest.java b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonPostObjectApiTest.java
deleted file mode 100644
index 580dda4..0000000
--- a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/JacksonPostObjectApiTest.java
+++ /dev/null
@@ -1,484 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.jacksonandroidnetworking.model.User;
-
-import org.json.JSONException;
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicReference;
-
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 13/05/17.
- */
-
-public class JacksonPostObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public JacksonPostObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-        AndroidNetworking.setParserFactory(new JacksonParserFactory());
-    }
-
-
-    public void testObjectPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObject(User.class, new ParsedRequestListener<User>() {
-                    @Override
-                    public void onResponse(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {
-                    @Override
-                    public void onResponse(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(ANError anError) {
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectPostRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        assertEquals("Amit", response.getResult().firstName);
-
-        assertEquals("Shekhar", response.getResult().lastName);
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<User> response = request.executeForObject(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListPostRequest() throws InterruptedException, JSONException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        User user = response.getResult().get(0);
-
-        assertEquals("Amit", user.firstName);
-
-        assertEquals("Shekhar", user.lastName);
-
-    }
-
-    @SuppressWarnings("unchecked")
-    public void testSynchronousObjectListPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        ANRequest request = AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build();
-
-        ANResponse<List<User>> response = request.executeForObjectList(User.class);
-
-        ANError error = response.getError();
-
-        assertEquals("data", error.getErrorBody());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, error.getErrorDetail());
-
-        assertEquals(404, error.getErrorCode());
-
-    }
-
-    public void testResponseBodyAndObjectPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testResponseBodyAndObjectListPost() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                firstNameRef.set(userList.get(0).firstName);
-                                lastNameRef.set(userList.get(0).lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testResponseBodyAndObjectListPost404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObjectList(User.class,
-                        new OkHttpResponseAndParsedRequestListener<List<User>>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, List<User> userList) {
-                                assertTrue(false);
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                errorBodyRef.set(anError.getErrorBody());
-                                errorDetailRef.set(anError.getErrorDetail());
-                                errorCodeRef.set(anError.getErrorCode());
-                                latch.countDown();
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-    }
-
-    public void testHeaderPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<String> headerRef = new AtomicReference<>();
-        final AtomicReference<Boolean> responseBodySuccess = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        AndroidNetworking.post(server.url("/").toString())
-                .addHeaders("headerKey", "headerValue")
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .setExecutor(Executors.newSingleThreadExecutor())
-                .build()
-                .getAsOkHttpResponseAndObject(User.class,
-                        new OkHttpResponseAndParsedRequestListener<User>() {
-                            @Override
-                            public void onResponse(Response okHttpResponse, User user) {
-                                firstNameRef.set(user.firstName);
-                                lastNameRef.set(user.lastName);
-                                responseBodySuccess.set(okHttpResponse.isSuccessful());
-                                headerRef.set(okHttpResponse.request().header("headerKey"));
-                                latch.countDown();
-                            }
-
-                            @Override
-                            public void onError(ANError anError) {
-                                assertTrue(false);
-                            }
-                        });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(responseBodySuccess.get());
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-        assertEquals("headerValue", headerRef.get());
-    }
-
-
-}
diff --git a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/model/User.java b/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/model/User.java
deleted file mode 100644
index 3b05b0e..0000000
--- a/jackson-android-networking/src/androidTest/java/com/jacksonandroidnetworking/model/User.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking.model;
-
-/**
- * Created by amitshekhar on 05/05/17.
- */
-
-public class User {
-
-    public String firstName;
-    public String lastName;
-
-}
diff --git a/jackson-android-networking/src/main/AndroidManifest.xml b/jackson-android-networking/src/main/AndroidManifest.xml
deleted file mode 100644
index 3084a82..0000000
--- a/jackson-android-networking/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.jacksonandroidnetworking">
-</manifest>
diff --git a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java b/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java
deleted file mode 100644
index 00dbda5..0000000
--- a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonParserFactory.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking;
-
-import com.androidnetworking.interfaces.Parser;
-import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.ObjectReader;
-import com.fasterxml.jackson.databind.ObjectWriter;
-
-import java.lang.reflect.Type;
-import java.util.HashMap;
-
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-
-/**
- * Created by amitshekhar on 15/09/16.
- */
-public final class JacksonParserFactory extends Parser.Factory {
-
-    private final ObjectMapper mapper;
-
-    public JacksonParserFactory() {
-        this.mapper = new ObjectMapper();
-    }
-
-    public JacksonParserFactory(ObjectMapper mapper) {
-        this.mapper = mapper;
-    }
-
-    @Override
-    public Parser<ResponseBody, ?> responseBodyParser(Type type) {
-        JavaType javaType = mapper.getTypeFactory().constructType(type);
-        ObjectReader reader = mapper.readerFor(javaType);
-        return new JacksonResponseBodyParser<>(reader);
-    }
-
-    @Override
-    public Parser<?, RequestBody> requestBodyParser(Type type) {
-        JavaType javaType = mapper.getTypeFactory().constructType(type);
-        ObjectWriter writer = mapper.writerFor(javaType);
-        return new JacksonRequestBodyParser<>(writer);
-    }
-
-    @Override
-    public Object getObject(String string, Type type) {
-        try {
-            JavaType javaType = mapper.getTypeFactory().constructType(type);
-            ObjectReader objectReader = mapper.readerFor(javaType);
-            return objectReader.readValue(string);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    @Override
-    public String getString(Object object) {
-        try {
-            ObjectWriter objectWriter = mapper.writerFor(object.getClass());
-            return objectWriter.writeValueAsString(object);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return "";
-    }
-
-    @Override
-    public HashMap<String, String> getStringMap(Object object) {
-        try {
-            TypeReference<HashMap<String, String>> typeRef
-                    = new TypeReference<HashMap<String, String>>() {
-            };
-            ObjectWriter objectWriter = mapper.writerFor(object.getClass());
-            return mapper.readValue(objectWriter.writeValueAsString(object), typeRef);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return new HashMap<>();
-    }
-}
diff --git a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonRequestBodyParser.java b/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonRequestBodyParser.java
deleted file mode 100644
index cb5ae44..0000000
--- a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonRequestBodyParser.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking;
-
-import com.androidnetworking.interfaces.Parser;
-import com.fasterxml.jackson.databind.ObjectWriter;
-
-import java.io.IOException;
-
-import okhttp3.MediaType;
-import okhttp3.RequestBody;
-
-/**
- * Created by amitshekhar on 15/09/16.
- */
-final class JacksonRequestBodyParser<T> implements Parser<T, RequestBody> {
-
-    private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
-
-    private final ObjectWriter adapter;
-
-    JacksonRequestBodyParser(ObjectWriter adapter) {
-        this.adapter = adapter;
-    }
-
-    @Override
-    public RequestBody convert(T value) throws IOException {
-        byte[] bytes = adapter.writeValueAsBytes(value);
-        return RequestBody.create(MEDIA_TYPE, bytes);
-    }
-}
diff --git a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonResponseBodyParser.java b/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonResponseBodyParser.java
deleted file mode 100644
index de9eb36..0000000
--- a/jackson-android-networking/src/main/java/com/jacksonandroidnetworking/JacksonResponseBodyParser.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking;
-
-import com.androidnetworking.interfaces.Parser;
-import com.fasterxml.jackson.databind.ObjectReader;
-
-import java.io.IOException;
-
-import okhttp3.ResponseBody;
-
-/**
- * Created by amitshekhar on 15/09/16.
- */
-final class JacksonResponseBodyParser<T> implements Parser<ResponseBody, T> {
-
-    private final ObjectReader adapter;
-
-    JacksonResponseBodyParser(ObjectReader adapter) {
-        this.adapter = adapter;
-    }
-
-    @Override
-    public T convert(ResponseBody value) throws IOException {
-        try {
-            return adapter.readValue(value.charStream());
-        } finally {
-            value.close();
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/jackson-android-networking/src/main/res/values/strings.xml b/jackson-android-networking/src/main/res/values/strings.xml
deleted file mode 100644
index 5dad4a3..0000000
--- a/jackson-android-networking/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-    <string name="app_name">JacksonAndroidNetworking</string>
-</resources>
diff --git a/jackson-android-networking/src/test/java/com/jacksonandroidnetworking/ExampleUnitTest.java b/jackson-android-networking/src/test/java/com/jacksonandroidnetworking/ExampleUnitTest.java
deleted file mode 100644
index 0a6086e..0000000
--- a/jackson-android-networking/src/test/java/com/jacksonandroidnetworking/ExampleUnitTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.jacksonandroidnetworking;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * To work on unit tests, switch the Test Artifact in the Build Variants view.
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/android-networking/.gitignore b/knhttp/.gitignore
similarity index 100%
rename from android-networking/.gitignore
rename to knhttp/.gitignore
diff --git a/knhttp/build.gradle b/knhttp/build.gradle
new file mode 100644
index 0000000..b015883
--- /dev/null
+++ b/knhttp/build.gradle
@@ -0,0 +1,37 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 28
+
+    defaultConfig {
+        minSdkVersion 19
+        targetSdkVersion 28
+        versionCode 2
+        versionName "2.0.0"
+        consumerProguardFiles 'proguard-rules.pro'
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+	compileOptions {
+		sourceCompatibility JavaVersion.VERSION_1_8
+		targetCompatibility JavaVersion.VERSION_1_8
+	}
+}
+
+dependencies {
+	api 'androidx.appcompat:appcompat:1.1.0'
+	api 'com.squareup.okio:okio:1.17.4'
+	api 'com.squareup.okhttp3:okhttp:3.12.6'
+	api 'org.conscrypt:conscrypt-android:2.2.1'
+	api 'com.alibaba:fastjson:1.1.71.android'
+}
diff --git a/knhttp/proguard-rules.pro b/knhttp/proguard-rules.pro
new file mode 100644
index 0000000..f14cc60
--- /dev/null
+++ b/knhttp/proguard-rules.pro
@@ -0,0 +1,9 @@
+-dontwarn okio.**
+-dontwarn okhttp3.**
+-assumenosideeffects class android.util.Log {
+    public static *** v(...);
+    public static *** i(...);
+    public static *** w(...);
+    public static *** d(...);
+    public static *** e(...);
+}
diff --git a/knhttp/src/main/AndroidManifest.xml b/knhttp/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..4e1e65e
--- /dev/null
+++ b/knhttp/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="ovh.karewan.knhttp"/>
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/KnHttp.java b/knhttp/src/main/java/ovh/karewan/knhttp/KnHttp.java
new file mode 100644
index 0000000..27835ac
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/KnHttp.java
@@ -0,0 +1,306 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp;
+
+import android.content.Context;
+import android.graphics.BitmapFactory;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.ANSettings;
+import ovh.karewan.knhttp.core.Core;
+import ovh.karewan.knhttp.interceptors.HttpLoggingInterceptor.Level;
+import ovh.karewan.knhttp.internal.ANImageLoader;
+import ovh.karewan.knhttp.internal.ANRequestQueue;
+import ovh.karewan.knhttp.internal.InternalNetworking;
+
+import okhttp3.OkHttpClient;
+
+@SuppressWarnings("unused")
+public final class KnHttp {
+    private static volatile KnHttp sInstance;
+
+    /**
+     * Private constructor to prevent instantiation of this class
+     */
+    private KnHttp() {}
+
+    /**
+     * Get instance
+     * @return KnHttp
+     */
+    @NonNull
+    public static KnHttp getInstance() {
+        if(sInstance == null) {
+            synchronized (KnHttp.class) {
+                if(sInstance == null) sInstance = new KnHttp();
+            }
+        }
+
+        return sInstance;
+    }
+
+    /**
+     * Initializes KnHttp with the default config.
+     */
+    public static void init(@NonNull Context context) {
+        getInstance();
+        InternalNetworking.getInstance().setSettings(null);
+        InternalNetworking.getInstance().initOkHttpClient(context);
+        ANRequestQueue.init();
+    }
+
+    /**
+     * Initializes KnHttp with a custom config.
+     * @param context The context
+     */
+    public static void init(@NonNull Context context, @NonNull ANSettings settings) {
+        getInstance();
+        InternalNetworking.getInstance().setSettings(settings);
+        InternalNetworking.getInstance().initOkHttpClient(context.getApplicationContext());
+        ANRequestQueue.init();
+    }
+
+
+    /**
+     * Initializes KnHttp with the specified OkHttpClient.
+     * @param okHttpClient The okHttpClient
+     */
+    public static void init(@NonNull OkHttpClient okHttpClient) {
+        getInstance();
+        InternalNetworking.getInstance().setSettings(null);
+        InternalNetworking.getInstance().setClient(okHttpClient);
+        ANRequestQueue.init();
+    }
+
+    /**
+     * Method to set decodeOptions
+     *
+     * @param decodeOptions The decode config for Bitmaps
+     */
+    public void setBitmapDecodeOptions(@NonNull BitmapFactory.Options decodeOptions) {
+        ANImageLoader.getInstance().setBitmapDecodeOptions(decodeOptions);
+    }
+
+    /**
+     * Method to make GET request
+     *
+     * @param url The url on which request is to be made
+     * @return The GetRequestBuilder
+     */
+    public ANRequest.GetRequestBuilder get(@NonNull String url) {
+        return new ANRequest.GetRequestBuilder(url);
+    }
+
+    /**
+     * Method to make HEAD request
+     *
+     * @param url The url on which request is to be made
+     * @return The HeadRequestBuilder
+     */
+    public ANRequest.HeadRequestBuilder head(@NonNull String url) {
+        return new ANRequest.HeadRequestBuilder(url);
+    }
+
+    /**
+     * Method to make OPTIONS request
+     *
+     * @param url The url on which request is to be made
+     * @return The OptionsRequestBuilder
+     */
+    public ANRequest.OptionsRequestBuilder options(@NonNull String url) {
+        return new ANRequest.OptionsRequestBuilder(url);
+    }
+
+    /**
+     * Method to make POST request
+     *
+     * @param url The url on which request is to be made
+     * @return The PostRequestBuilder
+     */
+    public ANRequest.PostRequestBuilder post(@NonNull String url) {
+        return new ANRequest.PostRequestBuilder(url);
+    }
+
+    /**
+     * Method to make PUT request
+     *
+     * @param url The url on which request is to be made
+     * @return The PutRequestBuilder
+     */
+    public ANRequest.PutRequestBuilder put(@NonNull String url) {
+        return new ANRequest.PutRequestBuilder(url);
+    }
+
+    /**
+     * Method to make DELETE request
+     *
+     * @param url The url on which request is to be made
+     * @return The DeleteRequestBuilder
+     */
+    public ANRequest.DeleteRequestBuilder delete(@NonNull String url) {
+        return new ANRequest.DeleteRequestBuilder(url);
+    }
+
+    /**
+     * Method to make PATCH request
+     *
+     * @param url The url on which request is to be made
+     * @return The PatchRequestBuilder
+     */
+    public ANRequest.PatchRequestBuilder patch(@NonNull String url) {
+        return new ANRequest.PatchRequestBuilder(url);
+    }
+
+    /**
+     * Method to make download request
+     *
+     * @param url      The url on which request is to be made
+     * @param dirPath  The directory path on which file is to be saved
+     * @param fileName The file name with which file is to be saved
+     * @return The DownloadBuilder
+     */
+    public ANRequest.DownloadBuilder download(@NonNull String url, @NonNull String dirPath, @NonNull String fileName) {
+        return new ANRequest.DownloadBuilder(url, dirPath, fileName);
+    }
+
+    /**
+     * Method to make upload request
+     *
+     * @param url The url on which request is to be made
+     * @return The MultiPartBuilder
+     */
+    public ANRequest.MultiPartBuilder upload(@NonNull String url) {
+        return new ANRequest.MultiPartBuilder(url);
+    }
+
+    /**
+     * Method to make Dynamic request
+     *
+     * @param url    The url on which request is to be made
+     * @param method The HTTP METHOD for the request
+     * @return The DynamicRequestBuilder
+     */
+    public ANRequest.DynamicRequestBuilder request(@NonNull String url, int method) {
+        return new ANRequest.DynamicRequestBuilder(url, method);
+    }
+
+    /**
+     * Method to cancel requests with the given tag
+     *
+     * @param tag The tag with which requests are to be cancelled
+     */
+    public void cancel(@NonNull Object tag) {
+        ANRequestQueue.getInstance().cancelRequestWithGivenTag(tag, false);
+    }
+
+    /**
+     * Method to force cancel requests with the given tag
+     *
+     * @param tag The tag with which requests are to be cancelled
+     */
+    public void forceCancel(@NonNull Object tag) {
+        ANRequestQueue.getInstance().cancelRequestWithGivenTag(tag, true);
+    }
+
+    /**
+     * Method to cancel all given request
+     */
+    public void cancelAll() {
+        ANRequestQueue.getInstance().cancelAll(false);
+    }
+
+    /**
+     * Method to force cancel all given request
+     */
+    public void forceCancelAll() {
+        ANRequestQueue.getInstance().cancelAll(true);
+    }
+
+    /**
+     * Method to enable logging
+     */
+    public void enableLogging() {
+        enableLogging(Level.BASIC);
+    }
+
+    /**
+     * Method to enable logging with tag
+     *
+     * @param level The level for logging
+     */
+    public void enableLogging(@NonNull Level level) {
+        InternalNetworking.getInstance().enableLogging(level);
+    }
+
+    /**
+     * Method to evict a bitmap with given key from LruCache
+     *
+     * @param key The key of the bitmap
+     */
+    public void evictBitmap(@NonNull String key) {
+        final ANImageLoader.ImageCache imageCache = ANImageLoader.getInstance().getImageCache();
+        if (imageCache != null) imageCache.evictBitmap(key);
+    }
+
+    /**
+     * Method to clear LruCache
+     */
+    public void evictAllBitmap() {
+        final ANImageLoader.ImageCache imageCache = ANImageLoader.getInstance().getImageCache();
+        if (imageCache != null) imageCache.evictAllBitmap();
+    }
+
+    /**
+     * Method to set userAgent globally
+     *
+     * @param userAgent The userAgent
+     */
+    public void setUserAgent(@Nullable String userAgent) {
+        InternalNetworking.getInstance().setUserAgent(userAgent);
+    }
+
+    /**
+     * Method to find if the request is running or not
+     *
+     * @param tag The tag with which request running status is to be checked
+     * @return The request is running or not
+     */
+    public boolean isRequestRunning(@NonNull Object tag) {
+        return ANRequestQueue.getInstance().isRequestRunning(tag);
+    }
+
+    /**
+     * Shuts KnHttp down
+     */
+    public static void shutDown() {
+        if(sInstance != null) {
+            Core.shutDown();
+            getInstance().evictAllBitmap();
+            ANImageLoader.shutDown();
+            InternalNetworking.shutDown();
+            ANRequestQueue.shutDown();
+            synchronized (KnHttp.class) {
+                sInstance = null;
+            }
+        }
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/cache/LruBitmapCache.java b/knhttp/src/main/java/ovh/karewan/knhttp/cache/LruBitmapCache.java
new file mode 100644
index 0000000..4d1d2d9
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/cache/LruBitmapCache.java
@@ -0,0 +1,57 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.cache;
+
+import android.graphics.Bitmap;
+
+import ovh.karewan.knhttp.internal.ANImageLoader;
+
+public final class LruBitmapCache extends LruCache<String, Bitmap>
+        implements ANImageLoader.ImageCache {
+
+    public LruBitmapCache(int maxSize) {
+        super(maxSize);
+    }
+
+    @Override
+    protected int sizeOf(String key, Bitmap value) {
+        return value.getRowBytes() * value.getHeight();
+    }
+
+    @Override
+    public Bitmap getBitmap(String key) {
+        return get(key);
+    }
+
+    @Override
+    public void evictBitmap(String key) {
+        remove(key);
+    }
+
+    @Override
+    public void evictAllBitmap() {
+        evictAll();
+    }
+
+    @Override
+    public void putBitmap(String url, Bitmap bitmap) {
+        put(url, bitmap);
+    }
+
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/cache/LruCache.java b/knhttp/src/main/java/ovh/karewan/knhttp/cache/LruCache.java
similarity index 60%
rename from android-networking/src/main/java/com/androidnetworking/cache/LruCache.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/cache/LruCache.java
index 509d295..8b55083 100644
--- a/android-networking/src/main/java/com/androidnetworking/cache/LruCache.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/cache/LruCache.java
@@ -1,30 +1,28 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.cache;
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.cache;
 
 import android.annotation.SuppressLint;
 
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-/**
- * Created by amitshekhar on 28/05/16.
- */
 public class LruCache<K, V> {
     private final LinkedHashMap<K, V> map;
 
@@ -38,17 +36,13 @@
     private int missCount;
 
     public LruCache(int maxSize) {
-        if (maxSize <= 0) {
-            throw new IllegalArgumentException("maxSize <= 0");
-        }
+        if (maxSize <= 0) throw new IllegalArgumentException("maxSize <= 0");
         this.maxSize = maxSize;
-        this.map = new LinkedHashMap<K, V>(0, 0.75f, true);
+        this.map = new LinkedHashMap<>(0, 0.75f, true);
     }
 
     public void resize(int maxSize) {
-        if (maxSize <= 0) {
-            throw new IllegalArgumentException("maxSize <= 0");
-        }
+        if (maxSize <= 0) throw new IllegalArgumentException("maxSize <= 0");
 
         synchronized (this) {
             this.maxSize = maxSize;
@@ -72,20 +66,14 @@ public final V get(K key) {
         }
 
         V createdValue = create(key);
-        if (createdValue == null) {
-            return null;
-        }
+        if (createdValue == null) return null;
 
         synchronized (this) {
             createCount++;
             mapValue = map.put(key, createdValue);
 
-            if (mapValue != null) {
-                // There was a conflict so undo that last put
-                map.put(key, mapValue);
-            } else {
-                size += safeSizeOf(key, createdValue);
-            }
+            if (mapValue != null)  map.put(key, mapValue);
+            else size += safeSizeOf(key, createdValue);
         }
 
         if (mapValue != null) {
@@ -97,24 +85,19 @@ public final V get(K key) {
         }
     }
 
+    @SuppressWarnings("UnusedReturnValue")
     public final V put(K key, V value) {
-        if (key == null || value == null) {
-            throw new NullPointerException("key == null || value == null");
-        }
+        if (key == null || value == null) throw new NullPointerException("key == null || value == null");
 
         V previous;
         synchronized (this) {
             putCount++;
             size += safeSizeOf(key, value);
             previous = map.put(key, value);
-            if (previous != null) {
-                size -= safeSizeOf(key, previous);
-            }
+            if (previous != null) size -= safeSizeOf(key, previous);
         }
 
-        if (previous != null) {
-            entryRemoved(false, key, previous, value);
-        }
+        if (previous != null) entryRemoved(false, key, previous, value);
 
         trimToSize(maxSize);
         return previous;
@@ -125,14 +108,9 @@ public void trimToSize(int maxSize) {
             K key;
             V value;
             synchronized (this) {
-                if (size < 0 || (map.isEmpty() && size != 0)) {
-                    throw new IllegalStateException(getClass().getName()
-                            + ".sizeOf() is reporting inconsistent results!");
-                }
+                if (size < 0 || (map.isEmpty() && size != 0)) throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");
 
-                if (size <= maxSize || map.isEmpty()) {
-                    break;
-                }
+                if (size <= maxSize || map.isEmpty()) break;
 
                 Map.Entry<K, V> toEvict = map.entrySet().iterator().next();
                 key = toEvict.getKey();
@@ -146,6 +124,7 @@ public void trimToSize(int maxSize) {
         }
     }
 
+    @SuppressWarnings("UnusedReturnValue")
     public final V remove(K key) {
         if (key == null) {
             throw new NullPointerException("key == null");
@@ -154,30 +133,26 @@ public final V remove(K key) {
         V previous;
         synchronized (this) {
             previous = map.remove(key);
-            if (previous != null) {
-                size -= safeSizeOf(key, previous);
-            }
+            if (previous != null) size -= safeSizeOf(key, previous);
         }
 
-        if (previous != null) {
-            entryRemoved(false, key, previous, null);
-        }
+        if (previous != null) entryRemoved(false, key, previous, null);
 
         return previous;
     }
 
+    @SuppressWarnings("EmptyMethod")
     protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue) {
     }
 
+    @SuppressWarnings("SameReturnValue")
     protected V create(K key) {
         return null;
     }
 
     private int safeSizeOf(K key, V value) {
         int result = sizeOf(key, value);
-        if (result < 0) {
-            throw new IllegalStateException("Negative size: " + key + "=" + value);
-        }
+        if (result < 0) throw new IllegalStateException("Negative size: " + key + "=" + value);
         return result;
     }
 
@@ -218,7 +193,7 @@ public synchronized final int evictionCount() {
     }
 
     public synchronized final Map<K, V> snapshot() {
-        return new LinkedHashMap<K, V>(map);
+        return new LinkedHashMap<>(map);
     }
 
     @SuppressLint("DefaultLocale")
@@ -226,7 +201,6 @@ public synchronized final int evictionCount() {
     public synchronized final String toString() {
         int accesses = hitCount + missCount;
         int hitPercent = accesses != 0 ? (100 * hitCount / accesses) : 0;
-        return String.format("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]",
-                maxSize, hitCount, missCount, hitPercent);
+        return String.format("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]", maxSize, hitCount, missCount, hitPercent);
     }
 }
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/common/ANConstants.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANConstants.java
new file mode 100644
index 0000000..bc9e31d
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANConstants.java
@@ -0,0 +1,32 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
+
+public final class ANConstants {
+    public static final int MAX_CACHE_SIZE = 10 * 1024 * 1024;
+    public static final int UPDATE = 0x01;
+    public static final String CACHE_DIR_NAME = "cache_an";
+    public static final String CONNECTION_ERROR = "connectionError";
+    public static final String RESPONSE_FROM_SERVER_ERROR = "responseFromServerError";
+    public static final String REQUEST_CANCELLED_ERROR = "requestCancelledError";
+    public static final String PARSE_ERROR = "parseError";
+    public static final String USER_AGENT = "User-Agent";
+    public static final String SUCCESS = "success";
+    public static final String OPTIONS = "OPTIONS";
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANRequest.java
similarity index 74%
rename from android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/common/ANRequest.java
index d85b1db..3f8a636 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANRequest.java
@@ -1,54 +1,47 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.common;
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.widget.ImageView;
 
-import com.androidnetworking.core.Core;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.androidnetworking.interfaces.BitmapRequestListener;
-import com.androidnetworking.interfaces.DownloadListener;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndBitmapRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONArrayRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndJSONObjectRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndParsedRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseAndStringRequestListener;
-import com.androidnetworking.interfaces.OkHttpResponseListener;
-import com.androidnetworking.interfaces.ParsedRequestListener;
-import com.androidnetworking.interfaces.StringRequestListener;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.androidnetworking.internal.ANRequestQueue;
-import com.androidnetworking.internal.SynchronousCall;
-import com.androidnetworking.model.MultipartFileBody;
-import com.androidnetworking.model.MultipartStringBody;
-import com.androidnetworking.utils.ParseUtil;
-import com.androidnetworking.utils.Utils;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
+import ovh.karewan.knhttp.core.Core;
+import ovh.karewan.knhttp.error.ANError;
+import ovh.karewan.knhttp.interfaces.BitmapRequestListener;
+import ovh.karewan.knhttp.interfaces.DownloadListener;
+import ovh.karewan.knhttp.interfaces.DownloadProgressListener;
+import ovh.karewan.knhttp.interfaces.JSONArrayRequestListener;
+import ovh.karewan.knhttp.interfaces.JSONObjectRequestListener;
+import ovh.karewan.knhttp.interfaces.OkHttpResponseListener;
+import ovh.karewan.knhttp.interfaces.ParsedRequestListener;
+import ovh.karewan.knhttp.interfaces.StringRequestListener;
+import ovh.karewan.knhttp.interfaces.UploadProgressListener;
+import ovh.karewan.knhttp.internal.ANRequestQueue;
+import ovh.karewan.knhttp.internal.SynchronousCall;
+import ovh.karewan.knhttp.model.MultipartFileBody;
+import ovh.karewan.knhttp.model.MultipartStringBody;
+import ovh.karewan.knhttp.utils.Utils;
+
+import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.JSONArray;
+import com.alibaba.fastjson.JSONObject;
 
 import java.io.File;
 import java.lang.reflect.Type;
@@ -73,9 +66,6 @@
 import okhttp3.Response;
 import okio.Okio;
 
-/**
- * Created by amitshekhar on 26/03/16.
- */
 @SuppressWarnings({"unchecked", "unused"})
 public class ANRequest<T extends ANRequest> {
 
@@ -88,12 +78,12 @@
     private int sequenceNumber;
     private Object mTag;
     private ResponseType mResponseType;
-    private HashMap<String, List<String>> mHeadersMap = new HashMap<>();
+    private HashMap<String, List<String>> mHeadersMap;
     private HashMap<String, String> mBodyParameterMap = new HashMap<>();
     private HashMap<String, String> mUrlEncodedFormBodyParameterMap = new HashMap<>();
     private HashMap<String, MultipartStringBody> mMultiPartParameterMap = new HashMap<>();
-    private HashMap<String, List<String>> mQueryParameterMap = new HashMap<>();
-    private HashMap<String, String> mPathParameterMap = new HashMap<>();
+    private HashMap<String, List<String>> mQueryParameterMap;
+    private HashMap<String, String> mPathParameterMap;
     private HashMap<String, List<MultipartFileBody>> mMultiPartFileMap = new HashMap<>();
     private String mDirPath;
     private String mFileName;
@@ -121,25 +111,19 @@
     private OkHttpResponseListener mOkHttpResponseListener;
     private BitmapRequestListener mBitmapRequestListener;
     private ParsedRequestListener mParsedRequestListener;
-    private OkHttpResponseAndJSONObjectRequestListener mOkHttpResponseAndJSONObjectRequestListener;
-    private OkHttpResponseAndJSONArrayRequestListener mOkHttpResponseAndJSONArrayRequestListener;
-    private OkHttpResponseAndStringRequestListener mOkHttpResponseAndStringRequestListener;
-    private OkHttpResponseAndBitmapRequestListener mOkHttpResponseAndBitmapRequestListener;
-    private OkHttpResponseAndParsedRequestListener mOkHttpResponseAndParsedRequestListener;
     private DownloadProgressListener mDownloadProgressListener;
     private UploadProgressListener mUploadProgressListener;
     private DownloadListener mDownloadListener;
-    private AnalyticsListener mAnalyticsListener;
 
     private Bitmap.Config mDecodeConfig;
     private int mMaxWidth;
     private int mMaxHeight;
     private ImageView.ScaleType mScaleType;
-    private CacheControl mCacheControl = null;
-    private Executor mExecutor = null;
-    private OkHttpClient mOkHttpClient = null;
-    private String mUserAgent = null;
-    private Type mType = null;
+    private CacheControl mCacheControl;
+    private Executor mExecutor;
+    private OkHttpClient mOkHttpClient;
+    private String mUserAgent;
+    private Class mItemClass = null;
 
     public ANRequest(GetRequestBuilder builder) {
         this.mRequestType = RequestType.SIMPLE;
@@ -253,83 +237,25 @@ public void getAsBitmap(BitmapRequestListener requestListener) {
         ANRequestQueue.getInstance().addRequest(this);
     }
 
-    public void getAsParsed(TypeToken typeToken, ParsedRequestListener parsedRequestListener) {
-        this.mType = typeToken.getType();
-        this.mResponseType = ResponseType.PARSED;
-        this.mParsedRequestListener = parsedRequestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
     public void getAsObject(Class objectClass, ParsedRequestListener parsedRequestListener) {
-        this.mType = objectClass;
-        this.mResponseType = ResponseType.PARSED;
+        this.mItemClass = objectClass;
+        this.mResponseType = ResponseType.OBJECT;
         this.mParsedRequestListener = parsedRequestListener;
         ANRequestQueue.getInstance().addRequest(this);
     }
 
     public void getAsObjectList(Class objectClass, ParsedRequestListener parsedRequestListener) {
-        this.mType = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass);
-        this.mResponseType = ResponseType.PARSED;
+        this.mItemClass = objectClass;
+        this.mResponseType = ResponseType.OBJECT_LIST;
         this.mParsedRequestListener = parsedRequestListener;
         ANRequestQueue.getInstance().addRequest(this);
     }
 
-    public void getAsOkHttpResponseAndJSONObject(OkHttpResponseAndJSONObjectRequestListener requestListener) {
-        this.mResponseType = ResponseType.JSON_OBJECT;
-        this.mOkHttpResponseAndJSONObjectRequestListener = requestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
-    public void getAsOkHttpResponseAndJSONArray(OkHttpResponseAndJSONArrayRequestListener requestListener) {
-        this.mResponseType = ResponseType.JSON_ARRAY;
-        this.mOkHttpResponseAndJSONArrayRequestListener = requestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
-    public void getAsOkHttpResponseAndString(OkHttpResponseAndStringRequestListener requestListener) {
-        this.mResponseType = ResponseType.STRING;
-        this.mOkHttpResponseAndStringRequestListener = requestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
-
-    public void getAsOkHttpResponseAndBitmap(OkHttpResponseAndBitmapRequestListener requestListener) {
-        this.mResponseType = ResponseType.BITMAP;
-        this.mOkHttpResponseAndBitmapRequestListener = requestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
-    public void getAsOkHttpResponseAndParsed(TypeToken typeToken, OkHttpResponseAndParsedRequestListener parsedRequestListener) {
-        this.mType = typeToken.getType();
-        this.mResponseType = ResponseType.PARSED;
-        this.mOkHttpResponseAndParsedRequestListener = parsedRequestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
-    public void getAsOkHttpResponseAndObject(Class objectClass, OkHttpResponseAndParsedRequestListener parsedRequestListener) {
-        this.mType = objectClass;
-        this.mResponseType = ResponseType.PARSED;
-        this.mOkHttpResponseAndParsedRequestListener = parsedRequestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
-    public void getAsOkHttpResponseAndObjectList(Class objectClass, OkHttpResponseAndParsedRequestListener parsedRequestListener) {
-        this.mType = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass);
-        this.mResponseType = ResponseType.PARSED;
-        this.mOkHttpResponseAndParsedRequestListener = parsedRequestListener;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
     public void startDownload(DownloadListener downloadListener) {
         this.mDownloadListener = downloadListener;
         ANRequestQueue.getInstance().addRequest(this);
     }
 
-    public void prefetch() {
-        this.mResponseType = ResponseType.PREFETCH;
-        ANRequestQueue.getInstance().addRequest(this);
-    }
-
     public ANResponse executeForJSONObject() {
         this.mResponseType = ResponseType.JSON_OBJECT;
         return SynchronousCall.execute(this);
@@ -355,21 +281,15 @@ public ANResponse executeForBitmap() {
         return SynchronousCall.execute(this);
     }
 
-    public ANResponse executeForParsed(TypeToken typeToken) {
-        this.mType = typeToken.getType();
-        this.mResponseType = ResponseType.PARSED;
-        return SynchronousCall.execute(this);
-    }
-
     public ANResponse executeForObject(Class objectClass) {
-        this.mType = objectClass;
-        this.mResponseType = ResponseType.PARSED;
+        this.mItemClass = objectClass;
+        this.mResponseType = ResponseType.OBJECT;
         return SynchronousCall.execute(this);
     }
 
     public ANResponse executeForObjectList(Class objectClass) {
-        this.mType = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass);
-        this.mResponseType = ResponseType.PARSED;
+        this.mItemClass = objectClass;
+        this.mResponseType = ResponseType.OBJECT_LIST;
         return SynchronousCall.execute(this);
     }
 
@@ -387,15 +307,6 @@ public T setUploadProgressListener(UploadProgressListener uploadProgressListener
         return (T) this;
     }
 
-    public T setAnalyticsListener(AnalyticsListener analyticsListener) {
-        this.mAnalyticsListener = analyticsListener;
-        return (T) this;
-    }
-
-    public AnalyticsListener getAnalyticsListener() {
-        return mAnalyticsListener;
-    }
-
     public int getMethod() {
         return mMethod;
     }
@@ -409,6 +320,7 @@ public String getUrl() {
         for (HashMap.Entry<String, String> entry : mPathParameterMap.entrySet()) {
             tempUrl = tempUrl.replace("{" + entry.getKey() + "}", String.valueOf(entry.getValue()));
         }
+
         HttpUrl.Builder urlBuilder = HttpUrl.parse(tempUrl).newBuilder();
         if (mQueryParameterMap != null) {
             Set<Map.Entry<String, List<String>>> entries = mQueryParameterMap.entrySet();
@@ -465,21 +377,18 @@ public String getUserAgent() {
         return mUserAgent;
     }
 
-    public Type getType() {
-        return mType;
+    public Type getItemClass() {
+        return mItemClass;
     }
 
-    public void setType(Type type) {
-        this.mType = type;
+    public void setItemClass(Class itemClass) {
+        this.mItemClass = itemClass;
     }
 
     public DownloadProgressListener getDownloadProgressListener() {
-        return new DownloadProgressListener() {
-            @Override
-            public void onProgress(final long bytesDownloaded, final long totalBytes) {
-                if (mDownloadProgressListener != null && !isCancelled) {
-                    mDownloadProgressListener.onProgress(bytesDownloaded, totalBytes);
-                }
+        return (bytesDownloaded, totalBytes) -> {
+            if (mDownloadProgressListener != null && !isCancelled) {
+                mDownloadProgressListener.onProgress(bytesDownloaded, totalBytes);
             }
         };
     }
@@ -489,24 +398,18 @@ public void updateDownloadCompletion() {
         if (mDownloadListener != null) {
             if (!isCancelled) {
                 if (mExecutor != null) {
-                    mExecutor.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (mDownloadListener != null) {
-                                mDownloadListener.onDownloadComplete();
-                            }
-                            finish();
+                    mExecutor.execute(() -> {
+                        if (mDownloadListener != null) {
+                            mDownloadListener.onDownloadComplete();
                         }
+                        finish();
                     });
                 } else {
-                    Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (mDownloadListener != null) {
-                                mDownloadListener.onDownloadComplete();
-                            }
-                            finish();
+                    Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(() -> {
+                        if (mDownloadListener != null) {
+                            mDownloadListener.onDownloadComplete();
                         }
+                        finish();
                     });
                 }
             } else {
@@ -519,13 +422,10 @@ public void run() {
     }
 
     public UploadProgressListener getUploadProgressListener() {
-        return new UploadProgressListener() {
-            @Override
-            public void onProgress(final long bytesUploaded, final long totalBytes) {
-                mProgress = (int) ((bytesUploaded * 100) / totalBytes);
-                if (mUploadProgressListener != null && !isCancelled) {
-                    mUploadProgressListener.onProgress(bytesUploaded, totalBytes);
-                }
+        return (bytesUploaded, totalBytes) -> {
+            mProgress = (int) ((bytesUploaded * 100) / totalBytes);
+            if (mUploadProgressListener != null && !isCancelled) {
+                mUploadProgressListener.onProgress(bytesUploaded, totalBytes);
             }
         };
     }
@@ -604,7 +504,7 @@ public void destroy() {
         mDownloadProgressListener = null;
         mUploadProgressListener = null;
         mDownloadListener = null;
-        mAnalyticsListener = null;
+        mOkHttpResponseListener = null;
     }
 
     public void finish() {
@@ -616,46 +516,39 @@ public ANResponse parseResponse(Response response) {
         switch (mResponseType) {
             case JSON_ARRAY:
                 try {
-                    JSONArray json = new JSONArray(Okio.buffer(response.body().source()).readUtf8());
-                    return ANResponse.success(json);
+                    return ANResponse.success(JSON.parseArray(Okio.buffer(response.body().source()).readUtf8()));
                 } catch (Exception e) {
                     return ANResponse.failed(Utils.getErrorForParse(new ANError(e)));
                 }
             case JSON_OBJECT:
                 try {
-                    JSONObject json = new JSONObject(Okio.buffer(response.body()
-                            .source()).readUtf8());
-                    return ANResponse.success(json);
+                    return ANResponse.success(JSON.parseObject(Okio.buffer(response.body().source()).readUtf8()));
                 } catch (Exception e) {
                     return ANResponse.failed(Utils.getErrorForParse(new ANError(e)));
                 }
             case STRING:
                 try {
-                    return ANResponse.success(Okio.buffer(response
-                            .body().source()).readUtf8());
+                    return ANResponse.success(Okio.buffer(response.body().source()).readUtf8());
                 } catch (Exception e) {
                     return ANResponse.failed(Utils.getErrorForParse(new ANError(e)));
                 }
             case BITMAP:
                 synchronized (sDecodeLock) {
                     try {
-                        return Utils.decodeBitmap(response, mMaxWidth, mMaxHeight,
-                                mDecodeConfig, mScaleType);
+                        return Utils.decodeBitmap(response, mMaxWidth, mMaxHeight, mDecodeConfig, mScaleType);
                     } catch (Exception e) {
                         return ANResponse.failed(Utils.getErrorForParse(new ANError(e)));
                     }
                 }
-            case PARSED:
+            case OBJECT:
                 try {
-                    return ANResponse.success(ParseUtil.getParserFactory()
-                            .responseBodyParser(mType).convert(response.body()));
+                    return ANResponse.success(JSON.parseObject(Okio.buffer(response.body().source()).readUtf8(), mItemClass));
                 } catch (Exception e) {
                     return ANResponse.failed(Utils.getErrorForParse(new ANError(e)));
                 }
-            case PREFETCH:
+            case OBJECT_LIST:
                 try {
-                    Okio.buffer(response.body().source()).skip(Long.MAX_VALUE);
-                    return ANResponse.success(ANConstants.PREFETCH);
+                    return ANResponse.success(JSON.parseArray(Okio.buffer(response.body().source()).readUtf8(), mItemClass));
                 } catch (Exception e) {
                     return ANResponse.failed(Utils.getErrorForParse(new ANError(e)));
                 }
@@ -697,18 +590,9 @@ public void deliverResponse(final ANResponse response) {
             isDelivered = true;
             if (!isCancelled) {
                 if (mExecutor != null) {
-                    mExecutor.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            deliverSuccessResponse(response);
-                        }
-                    });
+                    mExecutor.execute(() -> deliverSuccessResponse(response));
                 } else {
-                    Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(new Runnable() {
-                        public void run() {
-                            deliverSuccessResponse(response);
-                        }
-                    });
+                    Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(() -> deliverSuccessResponse(response));
                 }
             } else {
                 ANError anError = new ANError();
@@ -724,25 +608,15 @@ public void run() {
 
     private void deliverSuccessResponse(ANResponse response) {
         if (mJSONObjectRequestListener != null) {
-            mJSONObjectRequestListener.onResponse((JSONObject) response.getResult());
+            mJSONObjectRequestListener.onResponse((JSONObject) response.getResult(), response.getOkHttpResponse());
         } else if (mJSONArrayRequestListener != null) {
-            mJSONArrayRequestListener.onResponse((JSONArray) response.getResult());
+            mJSONArrayRequestListener.onResponse((JSONArray) response.getResult(), response.getOkHttpResponse());
         } else if (mStringRequestListener != null) {
-            mStringRequestListener.onResponse((String) response.getResult());
+            mStringRequestListener.onResponse((String) response.getResult(), response.getOkHttpResponse());
         } else if (mBitmapRequestListener != null) {
-            mBitmapRequestListener.onResponse((Bitmap) response.getResult());
+            mBitmapRequestListener.onResponse((Bitmap) response.getResult(), response.getOkHttpResponse());
         } else if (mParsedRequestListener != null) {
-            mParsedRequestListener.onResponse(response.getResult());
-        } else if (mOkHttpResponseAndJSONObjectRequestListener != null) {
-            mOkHttpResponseAndJSONObjectRequestListener.onResponse(response.getOkHttpResponse(), (JSONObject) response.getResult());
-        } else if (mOkHttpResponseAndJSONArrayRequestListener != null) {
-            mOkHttpResponseAndJSONArrayRequestListener.onResponse(response.getOkHttpResponse(), (JSONArray) response.getResult());
-        } else if (mOkHttpResponseAndStringRequestListener != null) {
-            mOkHttpResponseAndStringRequestListener.onResponse(response.getOkHttpResponse(), (String) response.getResult());
-        } else if (mOkHttpResponseAndBitmapRequestListener != null) {
-            mOkHttpResponseAndBitmapRequestListener.onResponse(response.getOkHttpResponse(), (Bitmap) response.getResult());
-        } else if (mOkHttpResponseAndParsedRequestListener != null) {
-            mOkHttpResponseAndParsedRequestListener.onResponse(response.getOkHttpResponse(), response.getResult());
+            mParsedRequestListener.onResponse(response.getResult(), response.getOkHttpResponse());
         }
         finish();
     }
@@ -760,16 +634,6 @@ private void deliverErrorResponse(ANError anError) {
             mParsedRequestListener.onError(anError);
         } else if (mOkHttpResponseListener != null) {
             mOkHttpResponseListener.onError(anError);
-        } else if (mOkHttpResponseAndJSONObjectRequestListener != null) {
-            mOkHttpResponseAndJSONObjectRequestListener.onError(anError);
-        } else if (mOkHttpResponseAndJSONArrayRequestListener != null) {
-            mOkHttpResponseAndJSONArrayRequestListener.onError(anError);
-        } else if (mOkHttpResponseAndStringRequestListener != null) {
-            mOkHttpResponseAndStringRequestListener.onError(anError);
-        } else if (mOkHttpResponseAndBitmapRequestListener != null) {
-            mOkHttpResponseAndBitmapRequestListener.onError(anError);
-        } else if (mOkHttpResponseAndParsedRequestListener != null) {
-            mOkHttpResponseAndParsedRequestListener.onError(anError);
         } else if (mDownloadListener != null) {
             mDownloadListener.onError(anError);
         }
@@ -780,23 +644,18 @@ public void deliverOkHttpResponse(final Response response) {
             isDelivered = true;
             if (!isCancelled) {
                 if (mExecutor != null) {
-                    mExecutor.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (mOkHttpResponseListener != null) {
-                                mOkHttpResponseListener.onResponse(response);
-                            }
-                            finish();
+                    mExecutor.execute(() -> {
+                        if (mOkHttpResponseListener != null) {
+                            mOkHttpResponseListener.onResponse(response);
                         }
+                        finish();
                     });
                 } else {
-                    Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(new Runnable() {
-                        public void run() {
-                            if (mOkHttpResponseListener != null) {
-                                mOkHttpResponseListener.onResponse(response);
-                            }
-                            finish();
+                    Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(() -> {
+                        if (mOkHttpResponseListener != null) {
+                            mOkHttpResponseListener.onResponse(response);
                         }
+                        finish();
                     });
                 }
             } else {
@@ -923,7 +782,7 @@ public OptionsRequestBuilder(String url) {
 
     public static class GetRequestBuilder<T extends GetRequestBuilder> implements RequestBuilder {
         private Priority mPriority = Priority.MEDIUM;
-        private int mMethod = Method.GET;
+        private int mMethod;
         private String mUrl;
         private Object mTag;
         private Bitmap.Config mDecodeConfig;
@@ -984,16 +843,6 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addQueryParameter(Object object) {
-            if (object != null) {
-                return addQueryParameter(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addPathParameter(String key, String value) {
             mPathParameterMap.put(key, value);
@@ -1008,16 +857,6 @@ public T addPathParameter(Map<String, String> pathParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addPathParameter(Object object) {
-            if (object != null) {
-                mPathParameterMap.putAll(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addHeaders(String key, String value) {
             List<String> list = mHeadersMap.get(key);
@@ -1041,16 +880,6 @@ public T addHeaders(Map<String, String> headerMap) {
             return (T) this;
         }
 
-        @Override
-        public T addHeaders(Object object) {
-            if (object != null) {
-                return addHeaders(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T doNotCacheResponse() {
             mCacheControl = new CacheControl.Builder().noStore().build();
@@ -1160,7 +989,7 @@ public DynamicRequestBuilder(String url, int method) {
     public static class PostRequestBuilder<T extends PostRequestBuilder> implements RequestBuilder {
 
         private Priority mPriority = Priority.MEDIUM;
-        private int mMethod = Method.POST;
+        private int mMethod;
         private String mUrl;
         private Object mTag;
         private String mApplicationJsonString = null;
@@ -1223,16 +1052,6 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addQueryParameter(Object object) {
-            if (object != null) {
-                return addQueryParameter(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addPathParameter(String key, String value) {
             mPathParameterMap.put(key, value);
@@ -1247,16 +1066,6 @@ public T addPathParameter(Map<String, String> pathParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addPathParameter(Object object) {
-            if (object != null) {
-                mPathParameterMap.putAll(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addHeaders(String key, String value) {
             List<String> list = mHeadersMap.get(key);
@@ -1280,16 +1089,6 @@ public T addHeaders(Map<String, String> headerMap) {
             return (T) this;
         }
 
-        @Override
-        public T addHeaders(Object object) {
-            if (object != null) {
-                return addHeaders(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T doNotCacheResponse() {
             mCacheControl = new CacheControl.Builder().noStore().build();
@@ -1350,15 +1149,6 @@ public T addBodyParameter(Map<String, String> bodyParameterMap) {
             return (T) this;
         }
 
-        public T addBodyParameter(Object object) {
-            if (object != null) {
-                mBodyParameterMap.putAll(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         public T addUrlEncodeFormBodyParameter(String key, String value) {
             mUrlEncodedFormBodyParameterMap.put(key, value);
             return (T) this;
@@ -1371,24 +1161,6 @@ public T addUrlEncodeFormBodyParameter(Map<String, String> bodyParameterMap) {
             return (T) this;
         }
 
-        public T addUrlEncodeFormBodyParameter(Object object) {
-            if (object != null) {
-                mUrlEncodedFormBodyParameterMap.putAll(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
-        public T addApplicationJsonBody(Object object) {
-            if (object != null) {
-                mApplicationJsonString = ParseUtil
-                        .getParserFactory()
-                        .getString(object);
-            }
-            return (T) this;
-        }
-
         public T addJSONObjectBody(JSONObject jsonObject) {
             if (jsonObject != null) {
                 mApplicationJsonString = jsonObject.toString();
@@ -1485,16 +1257,6 @@ public T addHeaders(Map<String, String> headerMap) {
             return (T) this;
         }
 
-        @Override
-        public T addHeaders(Object object) {
-            if (object != null) {
-                return addHeaders(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addQueryParameter(String key, String value) {
             List<String> list = mQueryParameterMap.get(key);
@@ -1518,16 +1280,6 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addQueryParameter(Object object) {
-            if (object != null) {
-                return addQueryParameter(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addPathParameter(String key, String value) {
             mPathParameterMap.put(key, value);
@@ -1542,16 +1294,6 @@ public T addPathParameter(Map<String, String> pathParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addPathParameter(Object object) {
-            if (object != null) {
-                mPathParameterMap.putAll(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T doNotCacheResponse() {
             mCacheControl = new CacheControl.Builder().noStore().build();
@@ -1666,16 +1408,6 @@ public T addQueryParameter(Map<String, String> queryParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addQueryParameter(Object object) {
-            if (object != null) {
-                return addQueryParameter(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addPathParameter(String key, String value) {
             mPathParameterMap.put(key, value);
@@ -1690,16 +1422,6 @@ public T addPathParameter(Map<String, String> pathParameterMap) {
             return (T) this;
         }
 
-        @Override
-        public T addPathParameter(Object object) {
-            if (object != null) {
-                mPathParameterMap.putAll(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T addHeaders(String key, String value) {
             List<String> list = mHeadersMap.get(key);
@@ -1723,16 +1445,6 @@ public T addHeaders(Map<String, String> headerMap) {
             return (T) this;
         }
 
-        @Override
-        public T addHeaders(Object object) {
-            if (object != null) {
-                return addHeaders(ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object));
-            }
-            return (T) this;
-        }
-
         @Override
         public T doNotCacheResponse() {
             mCacheControl = new CacheControl.Builder().noStore().build();
@@ -1807,20 +1519,6 @@ public T addMultipartParameter(Map<String, String> multiPartParameterMap, String
             return (T) this;
         }
 
-        public T addMultipartParameter(Object object) {
-            return addMultipartParameter(object, null);
-        }
-
-        public T addMultipartParameter(Object object, String contentType) {
-            if (object != null) {
-                Map<String, String> parameterMap = ParseUtil
-                        .getParserFactory()
-                        .getStringMap(object);
-                addMultipartParameter(parameterMap, contentType);
-            }
-            return (T) this;
-        }
-
         public T addMultipartFile(String key, File file) {
             return addMultipartFile(key, file, null);
         }
@@ -1904,6 +1602,7 @@ public ANRequest build() {
         }
     }
 
+    @SuppressWarnings("NullableProblems")
     @Override
     public String toString() {
         return "ANRequest{" +
diff --git a/android-networking/src/main/java/com/androidnetworking/common/ANResponse.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANResponse.java
similarity index 50%
rename from android-networking/src/main/java/com/androidnetworking/common/ANResponse.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/common/ANResponse.java
index be2dfa9..0669d79 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/ANResponse.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANResponse.java
@@ -1,30 +1,28 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
 
-package com.androidnetworking.common;
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
 
-import com.androidnetworking.error.ANError;
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-import okhttp3.Response;
+    http://www.apache.org/licenses/LICENSE-2.0
 
-/**
- * Created by amitshekhar on 22/03/16.
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
  */
-public class ANResponse<T> {
+package ovh.karewan.knhttp.common;
+
+import ovh.karewan.knhttp.error.ANError;
+
+import okhttp3.Response;
+
+public final class ANResponse<T> {
 
     private final T mResult;
 
@@ -54,7 +52,8 @@ public T getResult() {
         return mResult;
     }
 
-    public boolean isSuccess() {
+    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
+	public boolean isSuccess() {
         return mANError == null;
     }
 
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/common/ANSettings.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANSettings.java
new file mode 100644
index 0000000..ad221e7
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/ANSettings.java
@@ -0,0 +1,89 @@
+package ovh.karewan.knhttp.common;
+
+import androidx.annotation.NonNull;
+
+public final class ANSettings {
+	private final long mConnectTimeout;
+	private final long mReadTimeout;
+	private final long mWriteTimeout;
+	private final long mCallTimeout;
+	private final boolean mAllowObsoleteTls;
+	private final boolean mEnableCache;
+
+	private ANSettings(long connectTimeout, long readTimeout, long writeTimeout, long callTimeout, boolean allowObsoleteTls, boolean enableCache) {
+		this.mConnectTimeout = connectTimeout;
+		this.mReadTimeout = readTimeout;
+		this.mWriteTimeout = writeTimeout;
+		this.mCallTimeout = callTimeout;
+		this.mAllowObsoleteTls = allowObsoleteTls;
+		this.mEnableCache = enableCache;
+	}
+
+	public long getConnectTimeout() {
+		return mConnectTimeout;
+	}
+
+	public long getReadTimeout() {
+		return mReadTimeout;
+	}
+
+	public long getWriteTimeout() {
+		return mWriteTimeout;
+	}
+
+	public long getCallTimeout() {
+		return mCallTimeout;
+	}
+
+	public boolean isAllowObsoleteTls() {
+		return mAllowObsoleteTls;
+	}
+
+	public boolean isCacheEnabled() {
+		return mEnableCache;
+	}
+
+	public static final class Builder {
+		private long mConnectTimeout = 15000; // 15 seconds
+		private long mReadTimeout = 30000; // 30 seconds
+		private long mWriteTimeout = 30000; // 30 seconds
+		private long mCallTimeout = 0; // Inf
+		private boolean mAllowObsoleteTls = false; // TLS 1.3 and 1.2 Only
+		private boolean mEnableCache = false; // Cache disabled
+
+		public Builder setConnectTimeout(long timeout) {
+			this.mConnectTimeout = timeout;
+			return this;
+		}
+
+		public Builder setReadTimeout(long timeout) {
+			this.mReadTimeout = timeout;
+			return this;
+		}
+
+		public Builder setWriteTimeout(long timeout) {
+			this.mWriteTimeout = timeout;
+			return this;
+		}
+
+		public Builder setCallTimeout(long timeout) {
+			this.mCallTimeout = timeout;
+			return this;
+		}
+
+		public Builder setAllowObsoleteTls(boolean allow) {
+			this.mAllowObsoleteTls = allow;
+			return this;
+		}
+
+		public Builder setEnableCache(boolean enable) {
+			this.mEnableCache = enable;
+			return this;
+		}
+
+		@NonNull
+		public ANSettings build() {
+			return new ANSettings(mConnectTimeout, mReadTimeout, mWriteTimeout, mCallTimeout, mAllowObsoleteTls, mEnableCache);
+		}
+	}
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/common/Method.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/Method.java
new file mode 100644
index 0000000..d6306f2
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/Method.java
@@ -0,0 +1,29 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
+
+public interface Method {
+    int GET = 0;
+    int POST = 1;
+    int PUT = 2;
+    int DELETE = 3;
+    int HEAD = 4;
+    int PATCH = 5;
+    int OPTIONS = 6;
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/common/Priority.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/Priority.java
new file mode 100644
index 0000000..7e4e077
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/Priority.java
@@ -0,0 +1,50 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
+
+/*
+ * Priority levels recognized by the request server.
+ */
+public enum Priority {
+    /*
+      NOTE: DO NOT CHANGE ORDERING OF THOSE CONSTANTS UNDER ANY CIRCUMSTANCES.
+      Doing so will make ordering incorrect.
+     */
+
+    /**
+     * Lowest priority level. Used for prefetches of data.
+     */
+    LOW,
+
+    /**
+     * Medium priority level. Used for warming of data that might soon get visible.
+     */
+    MEDIUM,
+
+    /**
+     * Highest priority level. Used for data that are currently visible on screen.
+     */
+    HIGH,
+
+    /**
+     * Highest priority level. Used for data that are required instantly(mainly for emergency).
+     */
+    IMMEDIATE
+
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/RequestBuilder.java
similarity index 55%
rename from android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/common/RequestBuilder.java
index 9e1adf3..c03a769 100644
--- a/android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/RequestBuilder.java
@@ -1,21 +1,22 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.common;
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
 
 import java.util.Map;
 import java.util.concurrent.Executor;
@@ -23,9 +24,6 @@
 
 import okhttp3.OkHttpClient;
 
-/**
- * Created by amitshekhar on 26/03/16.
- */
 public interface RequestBuilder {
 
     RequestBuilder setPriority(Priority priority);
@@ -36,20 +34,14 @@
 
     RequestBuilder addHeaders(Map<String, String> headerMap);
 
-    RequestBuilder addHeaders(Object object);
-
     RequestBuilder addQueryParameter(String key, String value);
 
     RequestBuilder addQueryParameter(Map<String, String> queryParameterMap);
 
-    RequestBuilder addQueryParameter(Object object);
-
     RequestBuilder addPathParameter(String key, String value);
 
     RequestBuilder addPathParameter(Map<String, String> pathParameterMap);
 
-    RequestBuilder addPathParameter(Object object);
-
     RequestBuilder doNotCacheResponse();
 
     RequestBuilder getResponseOnlyIfCached();
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/common/RequestType.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/RequestType.java
new file mode 100644
index 0000000..a2508c6
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/RequestType.java
@@ -0,0 +1,25 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
+
+public interface RequestType {
+    int SIMPLE = 0;
+    int DOWNLOAD = 1;
+    int MULTIPART = 2;
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/common/ResponseType.java b/knhttp/src/main/java/ovh/karewan/knhttp/common/ResponseType.java
new file mode 100644
index 0000000..c7309af
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/common/ResponseType.java
@@ -0,0 +1,29 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.common;
+
+public enum ResponseType {
+    STRING,
+    JSON_OBJECT,
+    JSON_ARRAY,
+    OK_HTTP_RESPONSE,
+    BITMAP,
+    OBJECT,
+    OBJECT_LIST
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/core/ANExecutor.java b/knhttp/src/main/java/ovh/karewan/knhttp/core/ANExecutor.java
new file mode 100644
index 0000000..5b4eda5
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/core/ANExecutor.java
@@ -0,0 +1,61 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.core;
+
+import androidx.annotation.NonNull;
+
+import ovh.karewan.knhttp.common.Priority;
+import ovh.karewan.knhttp.internal.InternalRunnable;
+
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
+import java.util.concurrent.PriorityBlockingQueue;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public final class ANExecutor extends ThreadPoolExecutor {
+    ANExecutor(int maxNumThreads, ThreadFactory threadFactory) {
+        super(maxNumThreads, maxNumThreads, 0, TimeUnit.MILLISECONDS, new PriorityBlockingQueue<>(), threadFactory);
+    }
+
+    @Override
+    @NonNull
+    public Future<?> submit(Runnable task) {
+        AndroidNetworkingFutureTask futureTask = new AndroidNetworkingFutureTask((InternalRunnable) task);
+        execute(futureTask);
+        return futureTask;
+    }
+
+    private static final class AndroidNetworkingFutureTask extends FutureTask<InternalRunnable> implements Comparable<AndroidNetworkingFutureTask> {
+        private final InternalRunnable hunter;
+
+        public AndroidNetworkingFutureTask(InternalRunnable hunter) {
+            super(hunter, null);
+            this.hunter = hunter;
+        }
+
+        @Override
+        public int compareTo(AndroidNetworkingFutureTask other) {
+            Priority p1 = hunter.getPriority();
+            Priority p2 = other.hunter.getPriority();
+            return (p1 == p2 ? hunter.sequence - other.hunter.sequence : p2.ordinal() - p1.ordinal());
+        }
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/core/Core.java b/knhttp/src/main/java/ovh/karewan/knhttp/core/Core.java
new file mode 100644
index 0000000..f035fb2
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/core/Core.java
@@ -0,0 +1,51 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.core;
+
+public final class Core {
+
+    private static volatile Core sInstance = null;
+    private final ExecutorSupplier mExecutorSupplier;
+
+    private Core() {
+        this.mExecutorSupplier = new DefaultExecutorSupplier();
+    }
+
+    public static Core getInstance() {
+        if (sInstance == null) {
+            synchronized (Core.class) {
+                if (sInstance == null) sInstance = new Core();
+            }
+        }
+
+        return sInstance;
+    }
+
+    public ExecutorSupplier getExecutorSupplier() {
+        return mExecutorSupplier;
+    }
+
+    public static void shutDown() {
+        if (sInstance != null) {
+            synchronized (Core.class) {
+                sInstance = null;
+            }
+        }
+    }
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/core/DefaultExecutorSupplier.java b/knhttp/src/main/java/ovh/karewan/knhttp/core/DefaultExecutorSupplier.java
similarity index 57%
rename from android-networking/src/main/java/com/androidnetworking/core/DefaultExecutorSupplier.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/core/DefaultExecutorSupplier.java
index 9cec863..5d21312 100644
--- a/android-networking/src/main/java/com/androidnetworking/core/DefaultExecutorSupplier.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/core/DefaultExecutorSupplier.java
@@ -1,31 +1,29 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.core;
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.core;
 
 import android.os.Process;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadFactory;
 
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public class DefaultExecutorSupplier implements ExecutorSupplier {
+public final class DefaultExecutorSupplier implements ExecutorSupplier {
 
     public static final int DEFAULT_MAX_NUM_THREADS = 2 * Runtime.getRuntime().availableProcessors() + 1;
     private final ANExecutor mNetworkExecutor;
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/core/ExecutorSupplier.java b/knhttp/src/main/java/ovh/karewan/knhttp/core/ExecutorSupplier.java
new file mode 100644
index 0000000..a2f7ccc
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/core/ExecutorSupplier.java
@@ -0,0 +1,30 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.core;
+
+import java.util.concurrent.Executor;
+
+public interface ExecutorSupplier {
+
+    ANExecutor forNetworkTasks();
+
+    ANExecutor forImmediateNetworkTasks();
+
+    Executor forMainThreadTasks();
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/core/MainThreadExecutor.java b/knhttp/src/main/java/ovh/karewan/knhttp/core/MainThreadExecutor.java
new file mode 100644
index 0000000..d1bd0eb
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/core/MainThreadExecutor.java
@@ -0,0 +1,36 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.core;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import androidx.annotation.NonNull;
+
+import java.util.concurrent.Executor;
+
+public final class MainThreadExecutor implements Executor {
+
+    private final Handler handler = new Handler(Looper.getMainLooper());
+
+    @Override
+    public void execute(@NonNull Runnable runnable) {
+        handler.post(runnable);
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/core/PriorityThreadFactory.java b/knhttp/src/main/java/ovh/karewan/knhttp/core/PriorityThreadFactory.java
new file mode 100644
index 0000000..45fd62f
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/core/PriorityThreadFactory.java
@@ -0,0 +1,48 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.core;
+
+import android.os.Process;
+
+import androidx.annotation.NonNull;
+
+import java.util.concurrent.ThreadFactory;
+
+public final class PriorityThreadFactory implements ThreadFactory {
+
+    private final int mThreadPriority;
+
+    public PriorityThreadFactory(int threadPriority) {
+        mThreadPriority = threadPriority;
+    }
+
+    @Override
+    public Thread newThread(@NonNull final Runnable runnable) {
+        Runnable wrapperRunnable = () -> {
+			try {
+				Process.setThreadPriority(mThreadPriority);
+			} catch (Throwable t) {
+				t.printStackTrace();
+			}
+			runnable.run();
+		};
+        return new Thread(wrapperRunnable);
+    }
+
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/error/ANError.java b/knhttp/src/main/java/ovh/karewan/knhttp/error/ANError.java
similarity index 56%
rename from android-networking/src/main/java/com/androidnetworking/error/ANError.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/error/ANError.java
index 399e827..ede3dbb 100644
--- a/android-networking/src/main/java/com/androidnetworking/error/ANError.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/error/ANError.java
@@ -1,32 +1,29 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
 
-package com.androidnetworking.error;
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
 
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.utils.ParseUtil;
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-import okhttp3.Response;
+    http://www.apache.org/licenses/LICENSE-2.0
 
-/**
- * Created by amitshekhar on 22/03/16.
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
  */
-@SuppressWarnings({"unchecked", "unused"})
-public class ANError extends Exception {
+package ovh.karewan.knhttp.error;
+
+import ovh.karewan.knhttp.common.ANConstants;
+
+import okhttp3.Response;
+
+@SuppressWarnings({"unused"})
+public final class ANError extends Exception {
 
     private String errorBody;
 
@@ -101,15 +98,4 @@ public String getErrorBody() {
     public void setErrorBody(String errorBody) {
         this.errorBody = errorBody;
     }
-
-    public <T> T getErrorAsObject(Class<T> objectClass) {
-        try {
-            return (T) (ParseUtil
-                    .getParserFactory()
-                    .getObject(errorBody, objectClass));
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/interceptors/HttpLoggingInterceptor.java b/knhttp/src/main/java/ovh/karewan/knhttp/interceptors/HttpLoggingInterceptor.java
similarity index 73%
rename from android-networking/src/main/java/com/androidnetworking/interceptors/HttpLoggingInterceptor.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/interceptors/HttpLoggingInterceptor.java
index 44f5265..6d6abc9 100644
--- a/android-networking/src/main/java/com/androidnetworking/interceptors/HttpLoggingInterceptor.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interceptors/HttpLoggingInterceptor.java
@@ -1,23 +1,22 @@
 /*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.interceptors;
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interceptors;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -40,11 +39,7 @@
 
 import static okhttp3.internal.platform.Platform.INFO;
 
-/**
- * Created by amitshekhar on 31/01/17.
- */
-
-public class HttpLoggingInterceptor implements Interceptor {
+public final class HttpLoggingInterceptor implements Interceptor {
 
     private static final Charset UTF8 = Charset.forName("UTF-8");
 
@@ -112,12 +107,7 @@
         /**
          * A {@link Logger} defaults output appropriate for the current platform.
          */
-        Logger DEFAULT = new Logger() {
-            @Override
-            public void log(String message) {
-                Platform.get().log(INFO, message, null);
-            }
-        };
+        Logger DEFAULT = message -> Platform.get().log(INFO, message, null);
     }
 
     public HttpLoggingInterceptor() {
@@ -135,6 +125,7 @@ public HttpLoggingInterceptor(Logger logger) {
     /**
      * Change the level at which this interceptor logs.
      */
+    @SuppressWarnings("UnusedReturnValue")
     public HttpLoggingInterceptor setLevel(Level level) {
         if (level == null) throw new NullPointerException("level == null. Use Level.NONE instead.");
         this.level = level;
@@ -163,54 +154,40 @@ public Response intercept(Chain chain) throws IOException {
         Connection connection = chain.connection();
         Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;
         String requestStartMessage = "--> " + request.method() + ' ' + request.url() + ' ' + protocol;
-        if (!logHeaders && hasRequestBody) {
-            requestStartMessage += " (" + requestBody.contentLength() + "-byte body)";
-        }
+        if (!logHeaders && hasRequestBody) requestStartMessage += " (" + requestBody.contentLength() + "-byte body)";
         logger.log(requestStartMessage);
 
         if (logHeaders) {
             if (hasRequestBody) {
                 // Request body headers are only present when installed as a network interceptor. Force
                 // them to be included (when available) so there values are known.
-                if (requestBody.contentType() != null) {
-                    logger.log("Content-Type: " + requestBody.contentType());
-                }
-                if (requestBody.contentLength() != -1) {
-                    logger.log("Content-Length: " + requestBody.contentLength());
-                }
+                if (requestBody.contentType() != null) logger.log("Content-Type: " + requestBody.contentType());
+                if (requestBody.contentLength() != -1) logger.log("Content-Length: " + requestBody.contentLength());
             }
 
             Headers headers = request.headers();
             for (int i = 0, count = headers.size(); i < count; i++) {
                 String name = headers.name(i);
                 // Skip headers from the request body as they are explicitly logged above.
-                if (!"Content-Type".equalsIgnoreCase(name) && !"Content-Length".equalsIgnoreCase(name)) {
-                    logger.log(name + ": " + headers.value(i));
-                }
+                if (!"Content-Type".equalsIgnoreCase(name) && !"Content-Length".equalsIgnoreCase(name)) logger.log(name + ": " + headers.value(i));
             }
 
-            if (!logBody || !hasRequestBody) {
-                logger.log("--> END " + request.method());
-            } else if (bodyEncoded(request.headers())) {
-                logger.log("--> END " + request.method() + " (encoded body omitted)");
-            } else {
+            if (!logBody || !hasRequestBody) logger.log("--> END " + request.method());
+            else if (bodyEncoded(request.headers())) logger.log("--> END " + request.method() + " (encoded body omitted)");
+            else {
                 Buffer buffer = new Buffer();
                 requestBody.writeTo(buffer);
 
                 Charset charset = UTF8;
                 MediaType contentType = requestBody.contentType();
-                if (contentType != null) {
-                    charset = contentType.charset(UTF8);
-                }
+                if (contentType != null) charset = contentType.charset(UTF8);
 
                 logger.log("");
                 if (isPlaintext(buffer)) {
                     logger.log(buffer.readString(charset));
-                    logger.log("--> END " + request.method()
-                            + " (" + requestBody.contentLength() + "-byte body)");
+                    logger.log("--> END " + request.method() + " (" + requestBody.contentLength() + "-byte body)");
                 } else {
-                    logger.log("--> END " + request.method() + " (binary "
-                            + requestBody.contentLength() + "-byte body omitted)");
+                    logger.log("--> END " + request.method() + " (binary " + requestBody.contentLength() + "-byte body omitted)");
                 }
             }
         }
@@ -228,15 +205,11 @@ public Response intercept(Chain chain) throws IOException {
         ResponseBody responseBody = response.body();
         long contentLength = responseBody.contentLength();
         String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";
-        logger.log("<-- " + response.code() + ' ' + response.message() + ' '
-                + response.request().url() + " (" + tookMs + "ms" + (!logHeaders ? ", "
-                + bodySize + " body" : "") + ')');
+        logger.log("<-- " + response.code() + ' ' + response.message() + ' ' + response.request().url() + " (" + tookMs + "ms" + (!logHeaders ? ", " + bodySize + " body" : "") + ')');
 
         if (logHeaders) {
             Headers headers = response.headers();
-            for (int i = 0, count = headers.size(); i < count; i++) {
-                logger.log(headers.name(i) + ": " + headers.value(i));
-            }
+            for (int i = 0, count = headers.size(); i < count; i++) logger.log(headers.name(i) + ": " + headers.value(i));
 
             if (!logBody || !HttpHeaders.hasBody(response)) {
                 logger.log("<-- END HTTP");
@@ -281,13 +254,9 @@ static boolean isPlaintext(Buffer buffer) {
             long byteCount = buffer.size() < 64 ? buffer.size() : 64;
             buffer.copyTo(prefix, 0, byteCount);
             for (int i = 0; i < 16; i++) {
-                if (prefix.exhausted()) {
-                    break;
-                }
+                if (prefix.exhausted()) break;
                 int codePoint = prefix.readUtf8CodePoint();
-                if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {
-                    return false;
-                }
+                if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) return false;
             }
             return true;
         } catch (EOFException e) {
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/BitmapRequestListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/BitmapRequestListener.java
new file mode 100644
index 0000000..09ace12
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/BitmapRequestListener.java
@@ -0,0 +1,29 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import android.graphics.Bitmap;
+
+import okhttp3.Response;
+import ovh.karewan.knhttp.error.ANError;
+
+public interface BitmapRequestListener {
+    void onResponse(Bitmap response, Response okHttpResponse);
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/DownloadListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/DownloadListener.java
new file mode 100644
index 0000000..d466b29
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/DownloadListener.java
@@ -0,0 +1,26 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import ovh.karewan.knhttp.error.ANError;
+
+public interface DownloadListener {
+    void onDownloadComplete();
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/DownloadProgressListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/DownloadProgressListener.java
new file mode 100644
index 0000000..08f6ded
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/DownloadProgressListener.java
@@ -0,0 +1,23 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+public interface DownloadProgressListener {
+    void onProgress(long bytesDownloaded, long totalBytes);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/JSONArrayRequestListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/JSONArrayRequestListener.java
new file mode 100644
index 0000000..f876d6f
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/JSONArrayRequestListener.java
@@ -0,0 +1,29 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import com.alibaba.fastjson.JSONArray;
+
+import okhttp3.Response;
+import ovh.karewan.knhttp.error.ANError;
+
+public interface JSONArrayRequestListener {
+    void onResponse(JSONArray response, Response okHttpResponse);
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/JSONObjectRequestListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/JSONObjectRequestListener.java
new file mode 100644
index 0000000..ac3b5a8
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/JSONObjectRequestListener.java
@@ -0,0 +1,29 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import com.alibaba.fastjson.JSONObject;
+
+import okhttp3.Response;
+import ovh.karewan.knhttp.error.ANError;
+
+public interface JSONObjectRequestListener {
+    void onResponse(JSONObject response, Response okHttpResponse);
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/OkHttpResponseListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/OkHttpResponseListener.java
new file mode 100644
index 0000000..420f3ba
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/OkHttpResponseListener.java
@@ -0,0 +1,28 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import ovh.karewan.knhttp.error.ANError;
+
+import okhttp3.Response;
+
+public interface OkHttpResponseListener {
+    void onResponse(Response response);
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/ParsedRequestListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/ParsedRequestListener.java
new file mode 100644
index 0000000..18d0b06
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/ParsedRequestListener.java
@@ -0,0 +1,27 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import okhttp3.Response;
+import ovh.karewan.knhttp.error.ANError;
+
+public interface ParsedRequestListener<T> {
+    void onResponse(T response, Response okHttpResponse);
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/StringRequestListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/StringRequestListener.java
new file mode 100644
index 0000000..4f9eea2
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/StringRequestListener.java
@@ -0,0 +1,27 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+import okhttp3.Response;
+import ovh.karewan.knhttp.error.ANError;
+
+public interface StringRequestListener {
+    void onResponse(String response, Response okHttpResponse);
+    void onError(ANError anError);
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/UploadProgressListener.java b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/UploadProgressListener.java
new file mode 100644
index 0000000..7abdc1c
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/interfaces/UploadProgressListener.java
@@ -0,0 +1,23 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.interfaces;
+
+public interface UploadProgressListener {
+    void onProgress(long bytesUploaded, long totalBytes);
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/ANImageLoader.java
similarity index 63%
rename from android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/internal/ANImageLoader.java
index d278d54..24437ed 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/ANImageLoader.java
@@ -1,21 +1,22 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.internal;
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -23,19 +24,17 @@
 import android.os.Looper;
 import android.widget.ImageView;
 
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.cache.LruBitmapCache;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.BitmapRequestListener;
+import okhttp3.Response;
+import ovh.karewan.knhttp.KnHttp;
+import ovh.karewan.knhttp.cache.LruBitmapCache;
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.error.ANError;
+import ovh.karewan.knhttp.interfaces.BitmapRequestListener;
 
 import java.util.HashMap;
 import java.util.LinkedList;
 
-/**
- * Created by amitshekhar on 23/03/16.
- */
-public class ANImageLoader {
+public final class ANImageLoader {
 
     // Get max available VM memory, exceeding this amount will throw an
     // OutOfMemory exception. Stored in kilobytes as LruCache takes an
@@ -50,10 +49,10 @@
     private final ImageCache mCache;
 
     private final HashMap<String, BatchedImageRequest> mInFlightRequests =
-            new HashMap<String, BatchedImageRequest>();
+            new HashMap<>();
 
     private final HashMap<String, BatchedImageRequest> mBatchedResponses =
-            new HashMap<String, BatchedImageRequest>();
+            new HashMap<>();
 
     private final Handler mHandler = new Handler(Looper.getMainLooper());
 
@@ -61,30 +60,30 @@
 
     private BitmapFactory.Options mBitmapOptions = new BitmapFactory.Options();
 
-    private static ANImageLoader sInstance;
-
-    public static void initialize() {
-        getInstance();
-    }
+    private static volatile ANImageLoader sInstance;
 
     public static ANImageLoader getInstance() {
         if (sInstance == null) {
             synchronized (ANImageLoader.class) {
-                if (sInstance == null) {
-                    sInstance = new ANImageLoader(new LruBitmapCache(cacheSize));
-                }
+                if (sInstance == null)  sInstance = new ANImageLoader(new LruBitmapCache(cacheSize));
             }
         }
+
         return sInstance;
     }
 
+    public static void shutDown() {
+        if(sInstance != null) {
+            synchronized (ANImageLoader.class) {
+                sInstance = null;
+            }
+        }
+    }
+
     public interface ImageCache {
         Bitmap getBitmap(String key);
-
         void putBitmap(String key, Bitmap bitmap);
-
         void evictBitmap(String key);
-
         void evictAllBitmap();
     }
 
@@ -96,32 +95,23 @@ public ImageCache getImageCache() {
         return mCache;
     }
 
-    public static ImageListener getImageListener(final ImageView view,
-                                                 final int defaultImageResId,
-                                                 final int errorImageResId) {
+    public static ImageListener getImageListener(final ImageView view, final int defaultImageResId, final int errorImageResId) {
         return new ImageListener() {
             @Override
             public void onResponse(ImageContainer response, boolean isImmediate) {
-                if (response.getBitmap() != null) {
-                    view.setImageBitmap(response.getBitmap());
-                } else if (defaultImageResId != 0) {
-                    view.setImageResource(defaultImageResId);
-                }
+                if (response.getBitmap() != null) view.setImageBitmap(response.getBitmap());
+                else if (defaultImageResId != 0) view.setImageResource(defaultImageResId);
             }
 
             @Override
             public void onError(ANError anError) {
-                if (errorImageResId != 0) {
-                    view.setImageResource(errorImageResId);
-                }
+                if (errorImageResId != 0) view.setImageResource(errorImageResId);
             }
         };
     }
 
     public interface ImageListener {
-
         void onResponse(ImageContainer response, boolean isImmediate);
-
         void onError(ANError anError);
     }
 
@@ -129,8 +119,7 @@ public boolean isCached(String requestUrl, int maxWidth, int maxHeight) {
         return isCached(requestUrl, maxWidth, maxHeight, ImageView.ScaleType.CENTER_INSIDE);
     }
 
-    public boolean isCached(String requestUrl, int maxWidth, int maxHeight,
-                            ImageView.ScaleType scaleType) {
+    public boolean isCached(String requestUrl, int maxWidth, int maxHeight, ImageView.ScaleType scaleType) {
         throwIfNotOnMainThread();
 
         String cacheKey = getCacheKey(requestUrl, maxWidth, maxHeight, scaleType);
@@ -141,16 +130,11 @@ public ImageContainer get(String requestUrl, final ImageListener listener) {
         return get(requestUrl, listener, 0, 0);
     }
 
-
-    public ImageContainer get(String requestUrl, ImageListener imageListener,
-                              int maxWidth, int maxHeight) {
-        return get(requestUrl, imageListener, maxWidth, maxHeight,
-                ImageView.ScaleType.CENTER_INSIDE);
+    public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth, int maxHeight) {
+        return get(requestUrl, imageListener, maxWidth, maxHeight, ImageView.ScaleType.CENTER_INSIDE);
     }
 
-    public ImageContainer get(String requestUrl, ImageListener imageListener,
-                              int maxWidth, int maxHeight, ImageView.ScaleType scaleType) {
-
+    public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth, int maxHeight, ImageView.ScaleType scaleType) {
         throwIfNotOnMainThread();
 
         final String cacheKey = getCacheKey(requestUrl, maxWidth, maxHeight, scaleType);
@@ -162,9 +146,7 @@ public ImageContainer get(String requestUrl, ImageListener imageListener,
             return container;
         }
 
-        ImageContainer imageContainer =
-                new ImageContainer(null, requestUrl, cacheKey, imageListener);
-
+        ImageContainer imageContainer = new ImageContainer(null, requestUrl, cacheKey, imageListener);
         imageListener.onResponse(imageContainer, true);
 
         BatchedImageRequest request = mInFlightRequests.get(cacheKey);
@@ -173,17 +155,14 @@ public ImageContainer get(String requestUrl, ImageListener imageListener,
             return imageContainer;
         }
 
-        ANRequest newRequest = makeImageRequest(requestUrl, maxWidth, maxHeight, scaleType,
-                cacheKey);
+        ANRequest newRequest = makeImageRequest(requestUrl, maxWidth, maxHeight, scaleType, cacheKey);
 
-        mInFlightRequests.put(cacheKey,
-                new BatchedImageRequest(newRequest, imageContainer));
+        mInFlightRequests.put(cacheKey, new BatchedImageRequest(newRequest, imageContainer));
         return imageContainer;
     }
 
-    protected ANRequest makeImageRequest(String requestUrl, int maxWidth, int maxHeight,
-                                         ImageView.ScaleType scaleType, final String cacheKey) {
-        ANRequest ANRequest = AndroidNetworking.get(requestUrl)
+    protected ANRequest makeImageRequest(String requestUrl, int maxWidth, int maxHeight, ImageView.ScaleType scaleType, final String cacheKey) {
+        ANRequest ANRequest = KnHttp.getInstance().get(requestUrl)
                 .setTag("ImageRequestTag")
                 .setBitmapMaxHeight(maxHeight)
                 .setBitmapMaxWidth(maxWidth)
@@ -194,7 +173,7 @@ protected ANRequest makeImageRequest(String requestUrl, int maxWidth, int maxHei
 
         ANRequest.getAsBitmap(new BitmapRequestListener() {
             @Override
-            public void onResponse(Bitmap response) {
+            public void onResponse(Bitmap response, Response okHttpResponse) {
                 onGetImageSuccess(cacheKey, response);
             }
 
@@ -215,15 +194,12 @@ public void setBatchedResponseDelay(int newBatchedResponseDelayMs) {
         mBatchResponseDelayMs = newBatchedResponseDelayMs;
     }
 
-
     protected void onGetImageSuccess(String cacheKey, Bitmap response) {
         mCache.putBitmap(cacheKey, response);
-
         BatchedImageRequest request = mInFlightRequests.remove(cacheKey);
 
         if (request != null) {
             request.mResponseBitmap = response;
-
             batchResponse(cacheKey, request);
         }
     }
@@ -247,8 +223,7 @@ protected void onGetImageError(String cacheKey, ANError anError) {
 
         private final String mRequestUrl;
 
-        public ImageContainer(Bitmap bitmap, String requestUrl,
-                              String cacheKey, ImageListener listener) {
+        public ImageContainer(Bitmap bitmap, String requestUrl, String cacheKey, ImageListener listener) {
             mBitmap = bitmap;
             mRequestUrl = requestUrl;
             mCacheKey = cacheKey;
@@ -256,23 +231,17 @@ public ImageContainer(Bitmap bitmap, String requestUrl,
         }
 
         public void cancelRequest() {
-            if (mListener == null) {
-                return;
-            }
+            if (mListener == null) return;
 
             BatchedImageRequest request = mInFlightRequests.get(mCacheKey);
             if (request != null) {
                 boolean canceled = request.removeContainerAndCancelIfNecessary(this);
-                if (canceled) {
-                    mInFlightRequests.remove(mCacheKey);
-                }
+                if (canceled) mInFlightRequests.remove(mCacheKey);
             } else {
                 request = mBatchedResponses.get(mCacheKey);
                 if (request != null) {
                     request.removeContainerAndCancelIfNecessary(this);
-                    if (request.mContainers.size() == 0) {
-                        mBatchedResponses.remove(mCacheKey);
-                    }
+                    if (request.mContainers.size() == 0) mBatchedResponses.remove(mCacheKey);
                 }
             }
         }
@@ -295,7 +264,7 @@ public String getRequestUrl() {
 
         private ANError mANError;
 
-        private final LinkedList<ImageContainer> mContainers = new LinkedList<ImageContainer>();
+        private final LinkedList<ImageContainer> mContainers = new LinkedList<>();
 
         public BatchedImageRequest(ANRequest request, ImageContainer container) {
             mRequest = request;
@@ -331,41 +300,31 @@ public boolean removeContainerAndCancelIfNecessary(ImageContainer container) {
     private void batchResponse(String cacheKey, BatchedImageRequest request) {
         mBatchedResponses.put(cacheKey, request);
         if (mRunnable == null) {
-            mRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    for (BatchedImageRequest bir : mBatchedResponses.values()) {
-                        for (ImageContainer container : bir.mContainers) {
-                            if (container.mListener == null) {
-                                continue;
-                            }
-                            if (bir.getError() == null) {
-                                container.mBitmap = bir.mResponseBitmap;
-                                container.mListener.onResponse(container, false);
-                            } else {
-                                container.mListener.onError(bir.getError());
-                            }
+            mRunnable = () -> {
+                for (BatchedImageRequest bir : mBatchedResponses.values()) {
+                    for (ImageContainer container : bir.mContainers) {
+                        if (container.mListener == null) continue;
+
+                        if (bir.getError() == null) {
+                            container.mBitmap = bir.mResponseBitmap;
+                            container.mListener.onResponse(container, false);
+                        } else {
+                            container.mListener.onError(bir.getError());
                         }
                     }
-                    mBatchedResponses.clear();
-                    mRunnable = null;
                 }
-
+                mBatchedResponses.clear();
+                mRunnable = null;
             };
             mHandler.postDelayed(mRunnable, mBatchResponseDelayMs);
         }
     }
 
     private void throwIfNotOnMainThread() {
-        if (Looper.myLooper() != Looper.getMainLooper()) {
-            throw new IllegalStateException("ImageLoader must be invoked from the main thread.");
-        }
+        if (Looper.myLooper() != Looper.getMainLooper()) throw new IllegalStateException("ImageLoader must be invoked from the main thread.");
     }
 
-    private static String getCacheKey(String url, int maxWidth, int maxHeight,
-                                      ImageView.ScaleType scaleType) {
-        return new StringBuilder(url.length() + 12).append("#W").append(maxWidth)
-                .append("#H").append(maxHeight).append("#S").append(scaleType.ordinal()).append(url)
-                .toString();
+    private static String getCacheKey(String url, int maxWidth, int maxHeight, ImageView.ScaleType scaleType) {
+        return new StringBuilder(url.length() + 12).append("#W").append(maxWidth).append("#H").append(maxHeight).append("#S").append(scaleType.ordinal()).append(url).toString();
     }
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/ANRequestQueue.java
similarity index 64%
rename from android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/internal/ANRequestQueue.java
index ed7ff76..4dffdc7 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/ANRequestQueue.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/ANRequestQueue.java
@@ -1,25 +1,28 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
  */
+package ovh.karewan.knhttp.internal;
 
-package com.androidnetworking.internal;
+import androidx.annotation.NonNull;
 
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.Priority;
-import com.androidnetworking.core.Core;
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.Priority;
+import ovh.karewan.knhttp.core.Core;
 
 import java.util.Collections;
 import java.util.Iterator;
@@ -27,31 +30,33 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
-/**
- * Created by amitshekhar on 22/03/16.
- */
-public class ANRequestQueue {
-
-    private final Set<ANRequest> mCurrentRequests =
-            Collections.newSetFromMap(new ConcurrentHashMap<ANRequest, Boolean>());
-    private AtomicInteger mSequenceGenerator = new AtomicInteger();
-    private static ANRequestQueue sInstance = null;
+public final class ANRequestQueue {
+    private final Set<ANRequest> mCurrentRequests = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    private final AtomicInteger mSequenceGenerator = new AtomicInteger();
+    private static volatile ANRequestQueue sInstance = null;
 
-    public static void initialize() {
+    public static void init() {
         getInstance();
     }
 
     public static ANRequestQueue getInstance() {
         if (sInstance == null) {
             synchronized (ANRequestQueue.class) {
-                if (sInstance == null) {
-                    sInstance = new ANRequestQueue();
-                }
+                if (sInstance == null)  sInstance = new ANRequestQueue();
             }
         }
+
         return sInstance;
     }
 
+    public static void shutDown() {
+        if(sInstance != null) {
+            synchronized (ANRequestQueue.class) {
+                sInstance = null;
+            }
+        }
+    }
+
     public interface RequestFilter {
         boolean apply(ANRequest request);
     }
@@ -88,17 +93,9 @@ public void cancelAll(boolean forceCancel) {
         }
     }
 
-    public void cancelRequestWithGivenTag(final Object tag, final boolean forceCancel) {
+    public void cancelRequestWithGivenTag(@NonNull final Object tag, final boolean forceCancel) {
         try {
-            if (tag == null) {
-                return;
-            }
-            cancel(new RequestFilter() {
-                @Override
-                public boolean apply(ANRequest request) {
-                    return isRequestWithTheGivenTag(request, tag);
-                }
-            }, forceCancel);
+            cancel(request -> isRequestWithTheGivenTag(request, tag), forceCancel);
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -108,12 +105,14 @@ public int getSequenceNumber() {
         return mSequenceGenerator.incrementAndGet();
     }
 
-    public ANRequest addRequest(ANRequest request) {
+    @SuppressWarnings("UnusedReturnValue")
+	public ANRequest addRequest(ANRequest request) {
         try {
             mCurrentRequests.add(request);
         } catch (Exception e) {
             e.printStackTrace();
         }
+
         try {
             request.setSequenceNumber(getSequenceNumber());
             if (request.getPriority() == Priority.IMMEDIATE) {
@@ -130,6 +129,7 @@ public ANRequest addRequest(ANRequest request) {
         } catch (Exception e) {
             e.printStackTrace();
         }
+
         return request;
     }
 
@@ -144,25 +144,24 @@ public void finish(ANRequest request) {
     public boolean isRequestRunning(Object tag) {
         try {
             for (ANRequest request : mCurrentRequests) {
-                if (isRequestWithTheGivenTag(request, tag) && request.isRunning()) {
-                    return true;
-                }
+                if (isRequestWithTheGivenTag(request, tag) && request.isRunning()) return true;
             }
         } catch (Exception e) {
             e.printStackTrace();
         }
+
         return false;
     }
 
     private boolean isRequestWithTheGivenTag(ANRequest request, Object tag) {
-        if (request.getTag() == null) {
-            return false;
-        }
+        if (request.getTag() == null) return false;
+
         if (request.getTag() instanceof String && tag instanceof String) {
             final String tempRequestTag = (String) request.getTag();
             final String tempTag = (String) tag;
             return tempRequestTag.equals(tempTag);
         }
+
         return request.getTag().equals(tag);
     }
 
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/DownloadProgressHandler.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/DownloadProgressHandler.java
new file mode 100644
index 0000000..06d2e3b
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/DownloadProgressHandler.java
@@ -0,0 +1,49 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.interfaces.DownloadProgressListener;
+import ovh.karewan.knhttp.model.Progress;
+
+public final class DownloadProgressHandler extends Handler {
+
+    private final DownloadProgressListener mDownloadProgressListener;
+
+    public DownloadProgressHandler(DownloadProgressListener downloadProgressListener) {
+        super(Looper.getMainLooper());
+        mDownloadProgressListener = downloadProgressListener;
+    }
+
+    @Override
+    public void handleMessage(Message msg) {
+        if (msg.what == ANConstants.UPDATE) {
+            if (mDownloadProgressListener != null) {
+                final Progress progress = (Progress) msg.obj;
+                mDownloadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
+            }
+        } else {
+            super.handleMessage(msg);
+        }
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalNetworking.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalNetworking.java
new file mode 100644
index 0000000..d3f15ee
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalNetworking.java
@@ -0,0 +1,298 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import org.conscrypt.Conscrypt;
+
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.ANSettings;
+import ovh.karewan.knhttp.error.ANError;
+import ovh.karewan.knhttp.interceptors.HttpLoggingInterceptor;
+import ovh.karewan.knhttp.interceptors.HttpLoggingInterceptor.Level;
+import ovh.karewan.knhttp.utils.Utils;
+
+import java.io.File;
+import java.io.IOException;
+import java.security.Security;
+import java.util.Collections;
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.ConnectionSpec;
+import okhttp3.Headers;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+import static ovh.karewan.knhttp.common.Method.DELETE;
+import static ovh.karewan.knhttp.common.Method.GET;
+import static ovh.karewan.knhttp.common.Method.HEAD;
+import static ovh.karewan.knhttp.common.Method.OPTIONS;
+import static ovh.karewan.knhttp.common.Method.PATCH;
+import static ovh.karewan.knhttp.common.Method.POST;
+import static ovh.karewan.knhttp.common.Method.PUT;
+
+public final class InternalNetworking {
+    private static volatile InternalNetworking sInstance;
+    private ANSettings mSettings = null;
+    private OkHttpClient mHttpClient;
+    private String mUserAgent = null;
+
+    private InternalNetworking() {}
+
+    /**
+     * Get instance
+     * @return InternalNetworking
+     */
+    @NonNull
+    public static InternalNetworking getInstance() {
+        if(sInstance == null) {
+            synchronized (InternalNetworking.class) {
+                if(sInstance == null) sInstance = new InternalNetworking();
+            }
+        }
+
+        return sInstance;
+    }
+
+    public static void shutDown() {
+        if(sInstance != null) {
+            synchronized (InternalNetworking.class) {
+                sInstance = null;
+            }
+        }
+    }
+
+    public void setSettings(@Nullable ANSettings settings) {
+        this.mSettings = settings;
+    }
+
+    public Response performSimpleRequest(ANRequest request) throws ANError {
+        Request okHttpRequest;
+        Response okHttpResponse;
+
+        try {
+            Request.Builder builder = new Request.Builder().url(request.getUrl());
+            addHeadersToRequestBuilder(builder, request);
+            RequestBody requestBody;
+
+            switch (request.getMethod()) {
+                case GET: {
+                    builder = builder.get();
+                    break;
+                }
+                case POST: {
+                    requestBody = request.getRequestBody();
+                    builder = builder.post(requestBody);
+                    break;
+                }
+                case PUT: {
+                    requestBody = request.getRequestBody();
+                    builder = builder.put(requestBody);
+                    break;
+                }
+                case DELETE: {
+                    requestBody = request.getRequestBody();
+                    builder = builder.delete(requestBody);
+                    break;
+                }
+                case HEAD: {
+                    builder = builder.head();
+                    break;
+                }
+                case OPTIONS: {
+                    builder = builder.method(ANConstants.OPTIONS, null);
+                    break;
+                }
+                case PATCH: {
+                    requestBody = request.getRequestBody();
+                    builder = builder.patch(requestBody);
+                    break;
+                }
+            }
+
+            if (request.getCacheControl() != null && getClient().cache() != null) builder.cacheControl(request.getCacheControl());
+            okHttpRequest = builder.build();
+
+            if (request.getOkHttpClient() != null) request.setCall(request.getOkHttpClient().newBuilder().cache(getClient().cache()).build().newCall(okHttpRequest));
+            else request.setCall(getClient().newCall(okHttpRequest));
+
+            okHttpResponse = request.getCall().execute();
+        } catch (IOException ioe) {
+            throw new ANError(ioe);
+        }
+
+        return okHttpResponse;
+    }
+
+    public Response performDownloadRequest(final ANRequest request) throws ANError {
+        Request okHttpRequest;
+        Response okHttpResponse;
+
+        try {
+            Request.Builder builder = new Request.Builder().url(request.getUrl());
+            addHeadersToRequestBuilder(builder, request);
+            builder = builder.get();
+            if (request.getCacheControl() != null && getClient().cache() != null) builder.cacheControl(request.getCacheControl());
+            okHttpRequest = builder.build();
+
+            OkHttpClient okHttpClient;
+
+            if (request.getOkHttpClient() != null) {
+                okHttpClient = request.getOkHttpClient().newBuilder().cache(getClient().cache())
+                        .addNetworkInterceptor(chain -> {
+                            Response originalResponse = chain.proceed(chain.request());
+                            return originalResponse.newBuilder().body(new ResponseProgressBody(originalResponse.body(), request.getDownloadProgressListener())).build();
+                        }).build();
+            } else {
+                okHttpClient = getClient().newBuilder()
+                        .addNetworkInterceptor(chain -> {
+                            Response originalResponse = chain.proceed(chain.request());
+                            return originalResponse.newBuilder().body(new ResponseProgressBody(originalResponse.body(), request.getDownloadProgressListener())).build();
+                        }).build();
+            }
+
+            request.setCall(okHttpClient.newCall(okHttpRequest));
+            okHttpResponse = request.getCall().execute();
+            Utils.saveFile(okHttpResponse, request.getDirPath(), request.getFileName());
+        } catch (IOException ioe) {
+            try {
+                File destinationFile = new File(request.getDirPath() + File.separator + request.getFileName());
+                if (destinationFile.exists()) destinationFile.delete();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+
+            throw new ANError(ioe);
+        }
+
+        return okHttpResponse;
+    }
+
+
+    public Response performUploadRequest(ANRequest request) throws ANError {
+        Request okHttpRequest;
+        Response okHttpResponse;
+
+        try {
+            Request.Builder builder = new Request.Builder().url(request.getUrl());
+            addHeadersToRequestBuilder(builder, request);
+            final RequestBody requestBody = request.getMultiPartRequestBody();
+            builder = builder.post(new RequestProgressBody(requestBody, request.getUploadProgressListener()));
+            if (request.getCacheControl() != null && getClient().cache() != null) builder.cacheControl(request.getCacheControl());
+            okHttpRequest = builder.build();
+
+            if (request.getOkHttpClient() != null)  request.setCall(request.getOkHttpClient().newBuilder().cache(getClient().cache()).build().newCall(okHttpRequest));
+            else request.setCall(getClient().newCall(okHttpRequest));
+
+            okHttpResponse = request.getCall().execute();
+        } catch (IOException ioe) {
+            throw new ANError(ioe);
+        }
+
+        return okHttpResponse;
+    }
+
+    public OkHttpClient getClient() {
+        if (mHttpClient == null) initOkHttpClient(null);
+        return mHttpClient;
+    }
+
+    public void addHeadersToRequestBuilder(Request.Builder builder, ANRequest request) {
+        if (request.getUserAgent() != null) builder.addHeader(ANConstants.USER_AGENT, request.getUserAgent());
+        else if (mUserAgent != null) {
+            request.setUserAgent(mUserAgent);
+            builder.addHeader(ANConstants.USER_AGENT, mUserAgent);
+        }
+
+        Headers requestHeaders = request.getHeaders();
+        if (requestHeaders != null) {
+            builder.headers(requestHeaders);
+            if (request.getUserAgent() != null && !requestHeaders.names().contains(ANConstants.USER_AGENT)) builder.addHeader(ANConstants.USER_AGENT, request.getUserAgent());
+        }
+    }
+
+    public void setUserAgent(@Nullable String userAgent) {
+        mUserAgent = userAgent;
+    }
+
+    public void enableLogging(Level level) {
+        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
+        logging.setLevel(level);
+        mHttpClient = getClient()
+                .newBuilder()
+                .addInterceptor(logging)
+                .build();
+    }
+
+    /**
+     * Init the OkHttpClient
+     * @param context The context
+     */
+    public void initOkHttpClient(@Nullable Context context) {
+        // Use Conscrypt as the main provider
+        Security.insertProviderAt(Conscrypt.newProvider(), 1);
+
+        // If no settings, use default settings
+        if(mSettings == null) mSettings = new ANSettings.Builder().build();
+
+        // OkHttpClient Builder
+        OkHttpClient.Builder okHttpBuilder = new OkHttpClient().newBuilder()
+                .callTimeout(mSettings.getCallTimeout(), TimeUnit.MILLISECONDS)
+                .connectTimeout(mSettings.getConnectTimeout(), TimeUnit.MILLISECONDS)
+                .readTimeout(mSettings.getReadTimeout(), TimeUnit.MILLISECONDS)
+                .writeTimeout(mSettings.getWriteTimeout(), TimeUnit.MILLISECONDS);
+
+        // Cache
+        if(!mSettings.isCacheEnabled() || context == null) okHttpBuilder.cache(null);
+        else okHttpBuilder.cache(Utils.getCache(context.getApplicationContext(), ANConstants.MAX_CACHE_SIZE, ANConstants.CACHE_DIR_NAME));
+
+        // ConnectionSpec
+        if(!mSettings.isAllowObsoleteTls()) okHttpBuilder.connectionSpecs(Collections.singletonList(ConnectionSpec.RESTRICTED_TLS));
+        else okHttpBuilder.connectionSpecs(Collections.singletonList(ConnectionSpec.MODERN_TLS));
+
+        try {
+            // Custom SSL socket factory to add TLS 1.3 support
+            okHttpBuilder.sslSocketFactory(new InternalSSLSocketFactory(mSettings.isAllowObsoleteTls()), new InternalX509TrustManager());
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        // Build the client
+        mHttpClient = okHttpBuilder.build();
+    }
+
+    /**
+     * Use a custom OkHttpClient
+     * @param okHttpClient The OkHttpClient
+     */
+    public void setClient(@NonNull OkHttpClient okHttpClient) {
+        // Use Conscrypt as the main provider
+        Security.insertProviderAt(Conscrypt.newProvider(), 1);
+
+        // Set the client
+        mHttpClient = okHttpClient;
+    }
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalRunnable.java
similarity index 64%
rename from android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalRunnable.java
index 6cb3f73..1436ec6 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/InternalRunnable.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalRunnable.java
@@ -1,40 +1,35 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.androidnetworking.internal;
+    KnHttp
 
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.common.Priority;
-import com.androidnetworking.common.ResponseType;
-import com.androidnetworking.core.Core;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.utils.SourceCloseUtil;
-import com.androidnetworking.utils.Utils;
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
 
-import okhttp3.Response;
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-import static com.androidnetworking.common.RequestType.DOWNLOAD;
-import static com.androidnetworking.common.RequestType.MULTIPART;
-import static com.androidnetworking.common.RequestType.SIMPLE;
+    http://www.apache.org/licenses/LICENSE-2.0
 
-/**
- * Created by amitshekhar on 22/03/16.
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
  */
+package ovh.karewan.knhttp.internal;
+
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.ANResponse;
+import ovh.karewan.knhttp.common.Priority;
+import ovh.karewan.knhttp.common.ResponseType;
+import ovh.karewan.knhttp.core.Core;
+import ovh.karewan.knhttp.error.ANError;
+import ovh.karewan.knhttp.utils.SourceCloseUtil;
+import ovh.karewan.knhttp.utils.Utils;
+
+import okhttp3.Response;
+import ovh.karewan.knhttp.common.RequestType;
+
 public class InternalRunnable implements Runnable {
 
     private final Priority priority;
@@ -51,13 +46,13 @@ public InternalRunnable(ANRequest request) {
     public void run() {
         request.setRunning(true);
         switch (request.getRequestType()) {
-            case SIMPLE:
+            case RequestType.SIMPLE:
                 executeSimpleRequest();
                 break;
-            case DOWNLOAD:
+            case RequestType.DOWNLOAD:
                 executeDownloadRequest();
                 break;
-            case MULTIPART:
+            case RequestType.MULTIPART:
                 executeUploadRequest();
                 break;
         }
@@ -67,7 +62,7 @@ public void run() {
     private void executeSimpleRequest() {
         Response okHttpResponse = null;
         try {
-            okHttpResponse = InternalNetworking.performSimpleRequest(request);
+            okHttpResponse = InternalNetworking.getInstance().performSimpleRequest(request);
 
             if (okHttpResponse == null) {
                 deliverError(request, Utils.getErrorForConnection(new ANError()));
@@ -78,9 +73,9 @@ private void executeSimpleRequest() {
                 request.deliverOkHttpResponse(okHttpResponse);
                 return;
             }
+
             if (okHttpResponse.code() >= 400) {
-                deliverError(request, Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                        request, okHttpResponse.code()));
+                deliverError(request, Utils.getErrorForServerResponse(new ANError(okHttpResponse), request, okHttpResponse.code()));
                 return;
             }
 
@@ -101,16 +96,18 @@ private void executeSimpleRequest() {
     private void executeDownloadRequest() {
         Response okHttpResponse;
         try {
-            okHttpResponse = InternalNetworking.performDownloadRequest(request);
+            okHttpResponse = InternalNetworking.getInstance().performDownloadRequest(request);
+
             if (okHttpResponse == null) {
                 deliverError(request, Utils.getErrorForConnection(new ANError()));
                 return;
             }
+
             if (okHttpResponse.code() >= 400) {
-                deliverError(request, Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                        request, okHttpResponse.code()));
+                deliverError(request, Utils.getErrorForServerResponse(new ANError(okHttpResponse), request, okHttpResponse.code()));
                 return;
             }
+
             request.updateDownloadCompletion();
         } catch (Exception e) {
             deliverError(request, Utils.getErrorForConnection(new ANError(e)));
@@ -120,7 +117,7 @@ private void executeDownloadRequest() {
     private void executeUploadRequest() {
         Response okHttpResponse = null;
         try {
-            okHttpResponse = InternalNetworking.performUploadRequest(request);
+            okHttpResponse = InternalNetworking.getInstance().performUploadRequest(request);
 
             if (okHttpResponse == null) {
                 deliverError(request, Utils.getErrorForConnection(new ANError()));
@@ -133,15 +130,16 @@ private void executeUploadRequest() {
             }
 
             if (okHttpResponse.code() >= 400) {
-                deliverError(request, Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                        request, okHttpResponse.code()));
+                deliverError(request, Utils.getErrorForServerResponse(new ANError(okHttpResponse), request, okHttpResponse.code()));
                 return;
             }
+
             ANResponse response = request.parseResponse(okHttpResponse);
             if (!response.isSuccess()) {
                 deliverError(request, response.getError());
                 return;
             }
+
             response.setOkHttpResponse(okHttpResponse);
             request.deliverResponse(response);
         } catch (Exception e) {
@@ -156,11 +154,9 @@ public Priority getPriority() {
     }
 
     private void deliverError(final ANRequest request, final ANError anError) {
-        Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(new Runnable() {
-            public void run() {
-                request.deliverError(anError);
-                request.finish();
-            }
+        Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(() -> {
+            request.deliverError(anError);
+            request.finish();
         });
     }
 }
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalSSLSocketFactory.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalSSLSocketFactory.java
new file mode 100644
index 0000000..198215f
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalSSLSocketFactory.java
@@ -0,0 +1,91 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.net.UnknownHostException;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLSocketFactory;
+
+@SuppressWarnings("DuplicateThrows")
+public final class InternalSSLSocketFactory extends SSLSocketFactory {
+	private final SSLSocketFactory internalSSLSocketFactory;
+	private final String[] mTlsProtocols;
+
+	public InternalSSLSocketFactory(boolean obsoleteTls) throws KeyManagementException, NoSuchAlgorithmException {
+		// Define enabled TLS protocols
+		if(!obsoleteTls) mTlsProtocols = new String[] {"TLSv1.2", "TLSv1.3"};
+		else mTlsProtocols = new String[] {"TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"};
+
+		SSLContext context = SSLContext.getInstance("TLS");
+		context.init(null, null, null);
+		internalSSLSocketFactory = context.getSocketFactory();
+	}
+
+	@Override
+	public String[] getDefaultCipherSuites() {
+		return internalSSLSocketFactory.getDefaultCipherSuites();
+	}
+
+	@Override
+	public String[] getSupportedCipherSuites() {
+		return internalSSLSocketFactory.getSupportedCipherSuites();
+	}
+
+	@Override
+	public Socket createSocket() throws IOException {
+		return enableTLSOnSocket(internalSSLSocketFactory.createSocket());
+	}
+
+	@Override
+	public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException {
+		return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s, host, port, autoClose));
+	}
+
+	@Override
+	public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
+		return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port));
+	}
+
+	@Override
+	public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException {
+		return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port, localHost, localPort));
+	}
+
+	@Override
+	public Socket createSocket(InetAddress host, int port) throws IOException {
+		return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port));
+	}
+
+	@Override
+	public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
+		return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address, port, localAddress, localPort));
+	}
+
+	private Socket enableTLSOnSocket(Socket socket) {
+		if (socket instanceof SSLSocket) ((SSLSocket) socket).setEnabledProtocols(mTlsProtocols);
+		return socket;
+	}
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalX509TrustManager.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalX509TrustManager.java
new file mode 100644
index 0000000..0e0520f
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/InternalX509TrustManager.java
@@ -0,0 +1,51 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.X509TrustManager;
+
+public final class InternalX509TrustManager implements X509TrustManager {
+	@Override
+	public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+		try {
+			chain[0].checkValidity();
+		} catch (Exception e) {
+			e.printStackTrace();
+			throw new CertificateException("Certificate not valid or trusted.");
+		}
+	}
+
+	@Override
+	public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+		try {
+			chain[0].checkValidity();
+		} catch (Exception e) {
+			e.printStackTrace();
+			throw new CertificateException("Certificate not valid or trusted.");
+		}
+	}
+
+	@Override
+	public X509Certificate[] getAcceptedIssuers() {
+		return new X509Certificate[0];
+	}
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/RequestProgressBody.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/RequestProgressBody.java
new file mode 100644
index 0000000..bc9cfbb
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/RequestProgressBody.java
@@ -0,0 +1,75 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.interfaces.UploadProgressListener;
+import ovh.karewan.knhttp.model.Progress;
+
+import java.io.IOException;
+
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
+import okio.Buffer;
+import okio.BufferedSink;
+import okio.ForwardingSink;
+import okio.Okio;
+import okio.Sink;
+
+public final class RequestProgressBody extends RequestBody {
+    private final RequestBody requestBody;
+    private BufferedSink bufferedSink;
+    private UploadProgressHandler uploadProgressHandler;
+
+    public RequestProgressBody(RequestBody requestBody, UploadProgressListener uploadProgressListener) {
+        this.requestBody = requestBody;
+        if (uploadProgressListener != null) this.uploadProgressHandler = new UploadProgressHandler(uploadProgressListener);
+    }
+
+    public MediaType contentType() {
+        return requestBody.contentType();
+    }
+
+    @Override
+    public long contentLength() throws IOException {
+        return requestBody.contentLength();
+    }
+
+    @Override
+    public void writeTo(BufferedSink sink) throws IOException {
+        if (bufferedSink == null) bufferedSink = Okio.buffer(sink(sink));
+        requestBody.writeTo(bufferedSink);
+        bufferedSink.flush();
+    }
+
+    private Sink sink(Sink sink) {
+        return new ForwardingSink(sink) {
+            long bytesWritten = 0L;
+            long contentLength = 0L;
+
+            @Override
+            public void write(Buffer source, long byteCount) throws IOException {
+                super.write(source, byteCount);
+                if (contentLength == 0) contentLength = contentLength();
+                bytesWritten += byteCount;
+                if (uploadProgressHandler != null) uploadProgressHandler.obtainMessage(ANConstants.UPDATE, new Progress(bytesWritten, contentLength)).sendToTarget();
+            }
+        };
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/ResponseProgressBody.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/ResponseProgressBody.java
new file mode 100644
index 0000000..b64f19b
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/ResponseProgressBody.java
@@ -0,0 +1,75 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.interfaces.DownloadProgressListener;
+import ovh.karewan.knhttp.model.Progress;
+
+import java.io.IOException;
+
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
+import okio.Buffer;
+import okio.BufferedSource;
+import okio.ForwardingSource;
+import okio.Okio;
+import okio.Source;
+
+public final class ResponseProgressBody extends ResponseBody {
+
+    private final ResponseBody mResponseBody;
+    private BufferedSource bufferedSource;
+    private DownloadProgressHandler downloadProgressHandler;
+
+    public ResponseProgressBody(ResponseBody responseBody, DownloadProgressListener downloadProgressListener) {
+        this.mResponseBody = responseBody;
+        if (downloadProgressListener != null) this.downloadProgressHandler = new DownloadProgressHandler(downloadProgressListener);
+    }
+
+    @Override
+    public MediaType contentType() {
+        return mResponseBody.contentType();
+    }
+
+    @Override
+    public long contentLength() {
+        return mResponseBody.contentLength();
+    }
+
+    @Override
+    public BufferedSource source() {
+        if (bufferedSource == null) bufferedSource = Okio.buffer(source(mResponseBody.source()));
+        return bufferedSource;
+    }
+
+    private Source source(Source source) {
+        return new ForwardingSource(source) {
+            long totalBytesRead;
+
+            @Override
+            public long read(Buffer sink, long byteCount) throws IOException {
+                long bytesRead = super.read(sink, byteCount);
+                totalBytesRead += ((bytesRead != -1) ? bytesRead : 0);
+                if (downloadProgressHandler != null) downloadProgressHandler.obtainMessage(ANConstants.UPDATE, new Progress(totalBytesRead, mResponseBody.contentLength())).sendToTarget();
+                return bytesRead;
+            }
+        };
+    }
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/SynchronousCall.java
similarity index 54%
rename from android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/internal/SynchronousCall.java
index 132197e..1e28532 100644
--- a/android-networking/src/main/java/com/androidnetworking/internal/SynchronousCall.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/SynchronousCall.java
@@ -1,47 +1,41 @@
 /*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
 
-package com.androidnetworking.internal;
+    http://www.apache.org/licenses/LICENSE-2.0
 
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.common.ResponseType;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.utils.SourceCloseUtil;
-import com.androidnetworking.utils.Utils;
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.ANResponse;
+import ovh.karewan.knhttp.common.ResponseType;
+import ovh.karewan.knhttp.error.ANError;
+import ovh.karewan.knhttp.utils.SourceCloseUtil;
+import ovh.karewan.knhttp.utils.Utils;
 
 import okhttp3.Response;
 
-import static com.androidnetworking.common.RequestType.DOWNLOAD;
-import static com.androidnetworking.common.RequestType.MULTIPART;
-import static com.androidnetworking.common.RequestType.SIMPLE;
+import static ovh.karewan.knhttp.common.RequestType.DOWNLOAD;
+import static ovh.karewan.knhttp.common.RequestType.MULTIPART;
+import static ovh.karewan.knhttp.common.RequestType.SIMPLE;
 
-/**
- * Created by amitshekhar on 14/09/16.
- */
 @SuppressWarnings("unchecked")
 public final class SynchronousCall {
 
-    private SynchronousCall() {
-
-    }
+    private SynchronousCall() {}
 
     public static <T> ANResponse<T> execute(ANRequest request) {
         switch (request.getRequestType()) {
@@ -52,35 +46,33 @@ private SynchronousCall() {
             case MULTIPART:
                 return executeUploadRequest(request);
         }
+
         return new ANResponse<>(new ANError());
     }
 
     private static <T> ANResponse<T> executeSimpleRequest(ANRequest request) {
         Response okHttpResponse = null;
         try {
-            okHttpResponse = InternalNetworking.performSimpleRequest(request);
-            if (okHttpResponse == null) {
-                return new ANResponse<>(Utils.getErrorForConnection(new ANError()));
-            }
+            okHttpResponse = InternalNetworking.getInstance().performSimpleRequest(request);
+            if (okHttpResponse == null) return new ANResponse<>(Utils.getErrorForConnection(new ANError()));
 
             if (request.getResponseAs() == ResponseType.OK_HTTP_RESPONSE) {
                 ANResponse response = new ANResponse(okHttpResponse);
                 response.setOkHttpResponse(okHttpResponse);
                 return response;
             }
+
             if (okHttpResponse.code() >= 400) {
-                ANResponse response = new ANResponse<>(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                        request, okHttpResponse.code()));
+                ANResponse response = new ANResponse<>(Utils.getErrorForServerResponse(new ANError(okHttpResponse), request, okHttpResponse.code()));
                 response.setOkHttpResponse(okHttpResponse);
                 return response;
             }
+
             ANResponse response = request.parseResponse(okHttpResponse);
             response.setOkHttpResponse(okHttpResponse);
             return response;
-        } catch (ANError se) {
+        } catch (Exception se) {
             return new ANResponse<>(Utils.getErrorForConnection(new ANError(se)));
-        } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         } finally {
             SourceCloseUtil.close(okHttpResponse, request);
         }
@@ -89,46 +81,42 @@ private SynchronousCall() {
     private static <T> ANResponse<T> executeDownloadRequest(ANRequest request) {
         Response okHttpResponse;
         try {
-            okHttpResponse = InternalNetworking.performDownloadRequest(request);
-            if (okHttpResponse == null) {
-                return new ANResponse<>(Utils.getErrorForConnection(new ANError()));
-            }
+            okHttpResponse = InternalNetworking.getInstance().performDownloadRequest(request);
+            if (okHttpResponse == null) return new ANResponse<>(Utils.getErrorForConnection(new ANError()));
+
             if (okHttpResponse.code() >= 400) {
-                ANResponse response = new ANResponse<>(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                        request, okHttpResponse.code()));
+                ANResponse response = new ANResponse<>(Utils.getErrorForServerResponse(new ANError(okHttpResponse), request, okHttpResponse.code()));
                 response.setOkHttpResponse(okHttpResponse);
                 return response;
             }
+
             ANResponse response = new ANResponse(ANConstants.SUCCESS);
             response.setOkHttpResponse(okHttpResponse);
             return response;
-        } catch (ANError se) {
+        } catch (Exception se) {
             return new ANResponse<>(Utils.getErrorForConnection(new ANError(se)));
-        } catch (Exception e) {
-            return new ANResponse<>(Utils.getErrorForConnection(new ANError(e)));
         }
     }
 
     private static <T> ANResponse<T> executeUploadRequest(ANRequest request) {
         Response okHttpResponse = null;
         try {
-            okHttpResponse = InternalNetworking.performUploadRequest(request);
+            okHttpResponse = InternalNetworking.getInstance().performUploadRequest(request);
 
-            if (okHttpResponse == null) {
-                return new ANResponse<>(Utils.getErrorForConnection(new ANError()));
-            }
+            if (okHttpResponse == null) return new ANResponse<>(Utils.getErrorForConnection(new ANError()));
 
             if (request.getResponseAs() == ResponseType.OK_HTTP_RESPONSE) {
                 ANResponse response = new ANResponse(okHttpResponse);
                 response.setOkHttpResponse(okHttpResponse);
                 return response;
             }
+
             if (okHttpResponse.code() >= 400) {
-                ANResponse response = new ANResponse<>(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                        request, okHttpResponse.code()));
+                ANResponse response = new ANResponse<>(Utils.getErrorForServerResponse(new ANError(okHttpResponse), request, okHttpResponse.code()));
                 response.setOkHttpResponse(okHttpResponse);
                 return response;
             }
+
             ANResponse response = request.parseResponse(okHttpResponse);
             response.setOkHttpResponse(okHttpResponse);
             return response;
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/internal/UploadProgressHandler.java b/knhttp/src/main/java/ovh/karewan/knhttp/internal/UploadProgressHandler.java
new file mode 100644
index 0000000..42667fd
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/internal/UploadProgressHandler.java
@@ -0,0 +1,49 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.internal;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.interfaces.UploadProgressListener;
+import ovh.karewan.knhttp.model.Progress;
+
+public final class UploadProgressHandler extends Handler {
+
+    private final UploadProgressListener mUploadProgressListener;
+
+    public UploadProgressHandler(UploadProgressListener uploadProgressListener) {
+        super(Looper.getMainLooper());
+        mUploadProgressListener = uploadProgressListener;
+    }
+
+    @Override
+    public void handleMessage(Message msg) {
+        if (msg.what == ANConstants.UPDATE) {
+            if (mUploadProgressListener != null) {
+                final Progress progress = (Progress) msg.obj;
+                mUploadProgressListener.onProgress(progress.currentBytes, progress.totalBytes);
+            }
+        } else {
+            super.handleMessage(msg);
+        }
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/model/MultipartFileBody.java b/knhttp/src/main/java/ovh/karewan/knhttp/model/MultipartFileBody.java
new file mode 100644
index 0000000..96a45df
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/model/MultipartFileBody.java
@@ -0,0 +1,32 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.model;
+
+import java.io.File;
+
+public final class MultipartFileBody {
+
+    public final File file;
+    public final String contentType;
+
+    public MultipartFileBody(File file, String contentType) {
+        this.file = file;
+        this.contentType = contentType;
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/model/MultipartStringBody.java b/knhttp/src/main/java/ovh/karewan/knhttp/model/MultipartStringBody.java
new file mode 100644
index 0000000..8a5c902
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/model/MultipartStringBody.java
@@ -0,0 +1,30 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.model;
+
+public final class MultipartStringBody {
+
+    public final String value;
+    public final String contentType;
+
+    public MultipartStringBody(String value, String contentType) {
+        this.value = value;
+        this.contentType = contentType;
+    }
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/model/Progress.java b/knhttp/src/main/java/ovh/karewan/knhttp/model/Progress.java
new file mode 100644
index 0000000..ad7a8f5
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/model/Progress.java
@@ -0,0 +1,33 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.model;
+
+import java.io.Serializable;
+
+public final class Progress implements Serializable {
+
+    public final long currentBytes;
+    public final long totalBytes;
+
+    public Progress(long currentBytes, long totalBytes) {
+        this.currentBytes = currentBytes;
+        this.totalBytes = totalBytes;
+    }
+
+}
diff --git a/knhttp/src/main/java/ovh/karewan/knhttp/utils/SourceCloseUtil.java b/knhttp/src/main/java/ovh/karewan/knhttp/utils/SourceCloseUtil.java
new file mode 100644
index 0000000..eea909f
--- /dev/null
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/utils/SourceCloseUtil.java
@@ -0,0 +1,40 @@
+/*
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.utils;
+
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.ResponseType;
+
+import okhttp3.Response;
+
+public final class SourceCloseUtil {
+
+    private SourceCloseUtil() {
+    }
+
+    public static void close(Response response, ANRequest request) {
+        if (request.getResponseAs() != ResponseType.OK_HTTP_RESPONSE && response != null && response.body() != null && response.body().source() != null) {
+            try {
+                response.body().source().close();
+            } catch (Exception ignore) {
+
+            }
+        }
+    }
+}
diff --git a/android-networking/src/main/java/com/androidnetworking/utils/Utils.java b/knhttp/src/main/java/ovh/karewan/knhttp/utils/Utils.java
similarity index 53%
rename from android-networking/src/main/java/com/androidnetworking/utils/Utils.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/utils/Utils.java
index 588cba8..0360e05 100644
--- a/android-networking/src/main/java/com/androidnetworking/utils/Utils.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/utils/Utils.java
@@ -1,33 +1,32 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
 
-package com.androidnetworking.utils;
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.utils;
 
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.widget.ImageView;
 
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.core.Core;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.AnalyticsListener;
+import ovh.karewan.knhttp.common.ANConstants;
+import ovh.karewan.knhttp.common.ANRequest;
+import ovh.karewan.knhttp.common.ANResponse;
+import ovh.karewan.knhttp.error.ANError;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -40,11 +39,7 @@
 import okhttp3.Response;
 import okio.Okio;
 
-/**
- * Created by amitshekhar on 25/03/16.
- */
-public class Utils {
-
+public final class Utils {
     public static File getDiskCacheDir(Context context, String uniqueName) {
         return new File(context.getCacheDir(), uniqueName);
     }
@@ -56,30 +51,24 @@ public static Cache getCache(Context context, int maxCacheSize, String uniqueNam
     public static String getMimeType(String path) {
         FileNameMap fileNameMap = URLConnection.getFileNameMap();
         String contentTypeFor = fileNameMap.getContentTypeFor(path);
-        if (contentTypeFor == null) {
-            contentTypeFor = "application/octet-stream";
-        }
+        if (contentTypeFor == null) contentTypeFor = "application/octet-stream";
         return contentTypeFor;
     }
 
-    public static ANResponse<Bitmap> decodeBitmap(Response response, int maxWidth,
-                                                  int maxHeight, Bitmap.Config decodeConfig,
-                                                  ImageView.ScaleType scaleType) {
-        return decodeBitmap(response, maxWidth, maxHeight, decodeConfig,
-                new BitmapFactory.Options(), scaleType);
+    public static ANResponse<Bitmap> decodeBitmap(Response response, int maxWidth, int maxHeight, Bitmap.Config decodeConfig, ImageView.ScaleType scaleType) {
+        return decodeBitmap(response, maxWidth, maxHeight, decodeConfig, new BitmapFactory.Options(), scaleType);
     }
 
-    public static ANResponse<Bitmap> decodeBitmap(Response response, int maxWidth,
-                                                  int maxHeight, Bitmap.Config decodeConfig,
-                                                  BitmapFactory.Options decodeOptions,
-                                                  ImageView.ScaleType scaleType) {
+    public static ANResponse<Bitmap> decodeBitmap(Response response, int maxWidth, int maxHeight, Bitmap.Config decodeConfig, BitmapFactory.Options decodeOptions, ImageView.ScaleType scaleType) {
         byte[] data = new byte[0];
+
         try {
             data = Okio.buffer(response.body().source()).readByteArray();
         } catch (IOException e) {
             e.printStackTrace();
         }
-        Bitmap bitmap = null;
+
+        Bitmap bitmap;
         if (maxWidth == 0 && maxHeight == 0) {
             decodeOptions.inPreferredConfig = decodeConfig;
             bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);
@@ -89,46 +78,30 @@ public static String getMimeType(String path) {
             int actualWidth = decodeOptions.outWidth;
             int actualHeight = decodeOptions.outHeight;
 
-            int desiredWidth = getResizedDimension(maxWidth, maxHeight,
-                    actualWidth, actualHeight, scaleType);
-            int desiredHeight = getResizedDimension(maxHeight, maxWidth,
-                    actualHeight, actualWidth, scaleType);
+            int desiredWidth = getResizedDimension(maxWidth, maxHeight, actualWidth, actualHeight, scaleType);
+            int desiredHeight = getResizedDimension(maxHeight, maxWidth, actualHeight, actualWidth, scaleType);
 
             decodeOptions.inJustDecodeBounds = false;
-            decodeOptions.inSampleSize =
-                    findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);
-            Bitmap tempBitmap =
-                    BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);
-
-            if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth ||
-                    tempBitmap.getHeight() > desiredHeight)) {
-                bitmap = Bitmap.createScaledBitmap(tempBitmap,
-                        desiredWidth, desiredHeight, true);
+            decodeOptions.inSampleSize = findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);
+            Bitmap tempBitmap = BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);
+
+            if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
+                bitmap = Bitmap.createScaledBitmap(tempBitmap, desiredWidth, desiredHeight, true);
                 tempBitmap.recycle();
             } else {
                 bitmap = tempBitmap;
             }
         }
 
-        if (bitmap == null) {
-            return ANResponse.failed(Utils.getErrorForParse(new ANError(response)));
-        } else {
-            return ANResponse.success(bitmap);
-        }
+        if (bitmap == null) return ANResponse.failed(Utils.getErrorForParse(new ANError(response)));
+        else return ANResponse.success(bitmap);
     }
 
-    private static int getResizedDimension(int maxPrimary, int maxSecondary,
-                                           int actualPrimary, int actualSecondary,
-                                           ImageView.ScaleType scaleType) {
-
-        if ((maxPrimary == 0) && (maxSecondary == 0)) {
-            return actualPrimary;
-        }
+    private static int getResizedDimension(int maxPrimary, int maxSecondary, int actualPrimary, int actualSecondary, ImageView.ScaleType scaleType) {
+        if ((maxPrimary == 0) && (maxSecondary == 0)) return actualPrimary;
 
         if (scaleType == ImageView.ScaleType.FIT_XY) {
-            if (maxPrimary == 0) {
-                return actualPrimary;
-            }
+            if (maxPrimary == 0) return actualPrimary;
             return maxPrimary;
         }
 
@@ -145,27 +118,21 @@ private static int getResizedDimension(int maxPrimary, int maxSecondary,
         int resized = maxPrimary;
 
         if (scaleType == ImageView.ScaleType.CENTER_CROP) {
-            if ((resized * ratio) < maxSecondary) {
-                resized = (int) (maxSecondary / ratio);
-            }
+            if ((resized * ratio) < maxSecondary) resized = (int) (maxSecondary / ratio);
             return resized;
         }
 
-        if ((resized * ratio) > maxSecondary) {
-            resized = (int) (maxSecondary / ratio);
-        }
+        if ((resized * ratio) > maxSecondary) resized = (int) (maxSecondary / ratio);
+
         return resized;
     }
 
-    public static int findBestSampleSize(int actualWidth, int actualHeight,
-                                         int desiredWidth, int desiredHeight) {
+    public static int findBestSampleSize(int actualWidth, int actualHeight, int desiredWidth, int desiredHeight) {
         double wr = (double) actualWidth / desiredWidth;
         double hr = (double) actualHeight / desiredHeight;
         double ratio = Math.min(wr, hr);
         float n = 1.0f;
-        while ((n * 2) <= ratio) {
-            n *= 2;
-        }
+        while ((n * 2) <= ratio)  n *= 2;
         return (int) n;
     }
 
@@ -178,14 +145,10 @@ public static void saveFile(Response response, String dirPath,
         try {
             is = response.body().byteStream();
             File dir = new File(dirPath);
-            if (!dir.exists()) {
-                dir.mkdirs();
-            }
+            if (!dir.exists()) dir.mkdirs();
             File file = new File(dir, fileName);
             fos = new FileOutputStream(file);
-            while ((len = is.read(buf)) != -1) {
-                fos.write(buf, 0, len);
-            }
+            while ((len = is.read(buf)) != -1)  fos.write(buf, 0, len);
             fos.flush();
         } finally {
             try {
@@ -201,20 +164,6 @@ public static void saveFile(Response response, String dirPath,
         }
     }
 
-    public static void sendAnalytics(final AnalyticsListener analyticsListener,
-                                     final long timeTakenInMillis, final long bytesSent,
-                                     final long bytesReceived, final boolean isFromCache) {
-        Core.getInstance().getExecutorSupplier().forMainThreadTasks().execute(new Runnable() {
-            @Override
-            public void run() {
-                if (analyticsListener != null) {
-                    analyticsListener.onReceived(timeTakenInMillis, bytesSent, bytesReceived,
-                            isFromCache);
-                }
-            }
-        });
-    }
-
     public static ANError getErrorForConnection(ANError error) {
         error.setErrorDetail(ANConstants.CONNECTION_ERROR);
         error.setErrorCode(0);
@@ -234,5 +183,4 @@ public static ANError getErrorForParse(ANError error) {
         error.setErrorDetail(ANConstants.PARSE_ERROR);
         return error;
     }
-
 }
diff --git a/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java b/knhttp/src/main/java/ovh/karewan/knhttp/widget/ANImageView.java
similarity index 77%
rename from android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
rename to knhttp/src/main/java/ovh/karewan/knhttp/widget/ANImageView.java
index 3286ddb..97966e8 100644
--- a/android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
+++ b/knhttp/src/main/java/ovh/karewan/knhttp/widget/ANImageView.java
@@ -1,35 +1,34 @@
 /*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
+    KnHttp
+
+    Copyright (c) 2019 Florent VIALATTE
+    Copyright (c) 2016-2019 Amit Shekhar
 
-package com.androidnetworking.widget;
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+ */
+package ovh.karewan.knhttp.widget;
 
 import android.content.Context;
-import android.support.v7.widget.AppCompatImageView;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.ViewGroup;
 import android.widget.ImageView;
 
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.internal.ANImageLoader;
+import androidx.appcompat.widget.AppCompatImageView;
+
+import ovh.karewan.knhttp.error.ANError;
+import ovh.karewan.knhttp.internal.ANImageLoader;
 
-/**
- * Created by amitshekhar on 23/03/16.
- */
 public class ANImageView extends AppCompatImageView {
 
     private String mUrl;
@@ -108,12 +107,7 @@ void loadImageIfNecessary(final boolean isInLayoutPass) {
                     public void onResponse(final ANImageLoader.ImageContainer response,
                                            boolean isImmediate) {
                         if (isImmediate && isInLayoutPass) {
-                            post(new Runnable() {
-                                @Override
-                                public void run() {
-                                    onResponse(response, false);
-                                }
-                            });
+                            post(() -> onResponse(response, false));
                             return;
                         }
 
diff --git a/rx-android-networking/.gitignore b/rx-android-networking/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/rx-android-networking/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/rx-android-networking/build.gradle b/rx-android-networking/build.gradle
deleted file mode 100644
index a8581b9..0000000
--- a/rx-android-networking/build.gradle
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-apply plugin: 'com.android.library'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    compile "io.reactivex:rxandroid:$rootProject.ext.rxJavaAndroidVersion"
-    compile "io.reactivex:rxjava:$rootProject.ext.rxJavaVersion"
-    compile project(':android-networking')
-}
-//apply from: 'rx-upload.gradle'
diff --git a/rx-android-networking/proguard-rules.pro b/rx-android-networking/proguard-rules.pro
deleted file mode 100644
index 6b7a2bf..0000000
--- a/rx-android-networking/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/amitshekhar/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/rx-android-networking/rx-upload.gradle b/rx-android-networking/rx-upload.gradle
deleted file mode 100755
index c4fd5c4..0000000
--- a/rx-android-networking/rx-upload.gradle
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: "com.jfrog.bintray"
-
-def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
-def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
-
-group = "com.amitshekhar.android"
-version = '1.0.2'
-
-install {
-    repositories.mavenInstaller {
-        pom.project {
-            packaging 'aar'
-
-            name 'Fast Android Networking'
-            description 'Fast Android Networking is a powerful library for doing any type of networking in Android applications'
-
-            url siteUrl
-
-            licenses {
-                license {
-                    name 'The Apache Software License, Version 2.0'
-                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                }
-            }
-
-            developers {
-                developer {
-                    id 'amitshekhariitbhu'
-                    name 'Amit Shekhar'
-                    email 'amit.shekhar.iitbhu@gmail.com'
-                }
-            }
-
-            scm {
-                connection gitUrl
-                developerConnection gitUrl
-                url siteUrl
-            }
-        }
-    }
-}
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    classpath += configurations.compile
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-artifacts {
-    archives javadocJar
-    archives sourcesJar
-}
-
-if (project.rootProject.file("local.properties").exists()) {
-    Properties properties = new Properties()
-    properties.load(project.rootProject.file('local.properties').newDataInputStream())
-
-    bintray {
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-
-        configurations = ['archives']
-        dryRun = false
-
-        pkg {
-            repo = "maven"
-            name = "rx-android-networking"
-            websiteUrl = siteUrl
-            vcsUrl = gitUrl
-            licenses = ["Apache-2.0"]
-            publish = true
-        }
-    }
-}
diff --git a/rx-android-networking/src/androidTest/java/com/rxandroidnetworking/ApplicationTest.java b/rx-android-networking/src/androidTest/java/com/rxandroidnetworking/ApplicationTest.java
deleted file mode 100644
index 3f3bcf6..0000000
--- a/rx-android-networking/src/androidTest/java/com/rxandroidnetworking/ApplicationTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxandroidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-/**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
- */
-public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
-}
\ No newline at end of file
diff --git a/rx-android-networking/src/main/AndroidManifest.xml b/rx-android-networking/src/main/AndroidManifest.xml
deleted file mode 100644
index cfa5b2c..0000000
--- a/rx-android-networking/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.rxandroidnetworking">
-</manifest>
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
deleted file mode 100644
index 3f9084f..0000000
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxANRequest.java
+++ /dev/null
@@ -1,301 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxandroidnetworking;
-
-import android.graphics.Bitmap;
-
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.Method;
-import com.androidnetworking.common.RequestType;
-import com.androidnetworking.common.ResponseType;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.List;
-
-import rx.Completable;
-import rx.Observable;
-import rx.Single;
-
-/**
- * Created by amitshekhar on 10/06/16.
- */
-@SuppressWarnings({"unchecked", "unused"})
-public class RxANRequest extends ANRequest<RxANRequest> {
-
-    public RxANRequest(GetRequestBuilder builder) {
-        super(builder);
-    }
-
-    public RxANRequest(PostRequestBuilder builder) {
-        super(builder);
-    }
-
-    public RxANRequest(DownloadBuilder builder) {
-        super(builder);
-    }
-
-    public RxANRequest(MultiPartBuilder builder) {
-        super(builder);
-    }
-
-    public Observable<JSONObject> getJSONObjectObservable() {
-        this.setResponseAs(ResponseType.JSON_OBJECT);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Single<JSONObject> getJSONObjectSingle() {
-        return getJSONObjectObservable().toSingle();
-    }
-
-    public Completable getJSONObjectCompletable() {
-        return getJSONObjectObservable().toCompletable();
-    }
-
-    public Observable<JSONArray> getJSONArrayObservable() {
-        this.setResponseAs(ResponseType.JSON_ARRAY);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Single<JSONArray> getJSONArraySingle() {
-        return getJSONArrayObservable().toSingle();
-    }
-
-    public Completable getJSONArrayCompletable() {
-        return getJSONArrayObservable().toCompletable();
-    }
-
-    public Observable<Bitmap> getBitmapObservable() {
-        this.setResponseAs(ResponseType.BITMAP);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Single<Bitmap> getBitmapSingle() {
-        return getBitmapObservable().toSingle();
-    }
-
-    public Completable getBitmapCompletable() {
-        return getBitmapObservable().toCompletable();
-    }
-
-    public Observable<String> getStringObservable() {
-        this.setResponseAs(ResponseType.STRING);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Single<String> getStringSingle() {
-        return getStringObservable().toSingle();
-    }
-
-    public Completable getStringCompletable() {
-        return getStringObservable().toCompletable();
-    }
-
-    public Observable<String> getDownloadObservable() {
-        return RxInternalNetworking.generateDownloadObservable(this);
-    }
-
-    public Single<String> getDownloadSingle() {
-        return getDownloadObservable().toSingle();
-    }
-
-    public Completable getDownloadCompletable() {
-        return getDownloadObservable().toCompletable();
-    }
-
-    public <T> Observable<T> getParseObservable(TypeToken<T> typeToken) {
-        this.setType(typeToken.getType());
-        this.setResponseAs(ResponseType.PARSED);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public <T> Single<T> getParseSingle(TypeToken<T> typeToken) {
-        return getParseObservable(typeToken).toSingle();
-    }
-
-    public <T> Completable getParseCompletable(TypeToken<T> typeToken) {
-        return getParseObservable(typeToken).toCompletable();
-    }
-
-    public <T> Observable<T> getObjectObservable(Class<T> objectClass) {
-        this.setType(objectClass);
-        this.setResponseAs(ResponseType.PARSED);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public <T> Single<T> getObjectSingle(Class<T> objectClass) {
-        return getObjectObservable(objectClass).toSingle();
-    }
-
-    public <T> Completable getObjectCompletable(Class<T> objectClass) {
-        return getObjectObservable(objectClass).toCompletable();
-    }
-
-    public <T> Observable<List<T>> getObjectListObservable(Class<T> objectClass) {
-        this.setType($Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass));
-        this.setResponseAs(ResponseType.PARSED);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return RxInternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return RxInternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public <T> Single<List<T>> getObjectListSingle(Class<T> objectClass) {
-        return getObjectListObservable(objectClass).toSingle();
-    }
-
-    public <T> Completable getObjectListCompletable(Class<T> objectClass) {
-        return getObjectListObservable(objectClass).toCompletable();
-    }
-
-    public static class GetRequestBuilder extends ANRequest.GetRequestBuilder<GetRequestBuilder> {
-
-        public GetRequestBuilder(String url) {
-            super(url);
-        }
-
-        private GetRequestBuilder(String url, int method) {
-            super(url, method);
-        }
-
-        public RxANRequest build() {
-            return new RxANRequest(this);
-        }
-    }
-
-    public static class HeadRequestBuilder extends GetRequestBuilder {
-
-        public HeadRequestBuilder(String url) {
-            super(url, Method.HEAD);
-        }
-    }
-
-    public static class OptionsRequestBuilder extends GetRequestBuilder {
-
-        public OptionsRequestBuilder(String url) {
-            super(url, Method.OPTIONS);
-        }
-    }
-
-    public static class PostRequestBuilder extends ANRequest.PostRequestBuilder<PostRequestBuilder> {
-
-        public PostRequestBuilder(String url) {
-            super(url);
-        }
-
-        private PostRequestBuilder(String url, int method) {
-            super(url, method);
-        }
-
-        public RxANRequest build() {
-            return new RxANRequest(this);
-        }
-    }
-
-    public static class PutRequestBuilder extends PostRequestBuilder {
-
-        public PutRequestBuilder(String url) {
-            super(url, Method.PUT);
-        }
-    }
-
-    public static class DeleteRequestBuilder extends PostRequestBuilder {
-
-        public DeleteRequestBuilder(String url) {
-            super(url, Method.DELETE);
-        }
-    }
-
-    public static class PatchRequestBuilder extends PostRequestBuilder {
-
-        public PatchRequestBuilder(String url) {
-            super(url, Method.PATCH);
-        }
-    }
-
-    public static class DynamicRequestBuilder extends PostRequestBuilder {
-
-        public DynamicRequestBuilder(String url, int method) {
-            super(url, method);
-        }
-    }
-
-    public static class DownloadBuilder extends ANRequest.DownloadBuilder<DownloadBuilder> {
-
-        public DownloadBuilder(String url, String dirPath, String fileName) {
-            super(url, dirPath, fileName);
-        }
-
-        public RxANRequest build() {
-            return new RxANRequest(this);
-        }
-    }
-
-    public static class MultiPartBuilder extends ANRequest.MultiPartBuilder<MultiPartBuilder> {
-
-        public MultiPartBuilder(String url) {
-            super(url);
-        }
-
-        public RxANRequest build() {
-            return new RxANRequest(this);
-        }
-    }
-}
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
deleted file mode 100644
index 6286836..0000000
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxAndroidNetworking.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxandroidnetworking;
-
-/**
- * Created by amitshekhar on 10/06/16.
- */
-
-/**
- * RxAndroidNetworking entry point.
- * You must initialize this class before use. The simplest way is to just do
- * {#code AndroidNetworking.initialize(context)}.
- */
-public class RxAndroidNetworking {
-
-    /**
-     * private constructor to prevent instantiation of this class
-     */
-    private RxAndroidNetworking() {
-    }
-
-    /**
-     * Method to make GET request
-     *
-     * @param url The url on which request is to be made
-     * @return The GetRequestBuilder
-     */
-    public static RxANRequest.GetRequestBuilder get(String url) {
-        return new RxANRequest.GetRequestBuilder(url);
-    }
-
-    /**
-     * Method to make HEAD request
-     *
-     * @param url The url on which request is to be made
-     * @return The HeadRequestBuilder
-     */
-    public static RxANRequest.HeadRequestBuilder head(String url) {
-        return new RxANRequest.HeadRequestBuilder(url);
-    }
-
-    /**
-     * Method to make OPTIONS request
-     *
-     * @param url The url on which request is to be made
-     * @return The OptionsRequestBuilder
-     */
-    public static RxANRequest.OptionsRequestBuilder options(String url) {
-        return new RxANRequest.OptionsRequestBuilder(url);
-    }
-
-    /**
-     * Method to make POST request
-     *
-     * @param url The url on which request is to be made
-     * @return The PostRequestBuilder
-     */
-    public static RxANRequest.PostRequestBuilder post(String url) {
-        return new RxANRequest.PostRequestBuilder(url);
-    }
-
-    /**
-     * Method to make PUT request
-     *
-     * @param url The url on which request is to be made
-     * @return The PutRequestBuilder
-     */
-    public static RxANRequest.PutRequestBuilder put(String url) {
-        return new RxANRequest.PutRequestBuilder(url);
-    }
-
-    /**
-     * Method to make DELETE request
-     *
-     * @param url The url on which request is to be made
-     * @return The DeleteRequestBuilder
-     */
-    public static RxANRequest.DeleteRequestBuilder delete(String url) {
-        return new RxANRequest.DeleteRequestBuilder(url);
-    }
-
-    /**
-     * Method to make PATCH request
-     *
-     * @param url The url on which request is to be made
-     * @return The PatchRequestBuilder
-     */
-    public static RxANRequest.PatchRequestBuilder patch(String url) {
-        return new RxANRequest.PatchRequestBuilder(url);
-    }
-
-    /**
-     * Method to make download request
-     *
-     * @param url      The url on which request is to be made
-     * @param dirPath  The directory path on which file is to be saved
-     * @param fileName The file name with which file is to be saved
-     * @return The DownloadBuilder
-     */
-    public static RxANRequest.DownloadBuilder download(String url, String dirPath, String fileName) {
-        return new RxANRequest.DownloadBuilder(url, dirPath, fileName);
-    }
-
-    /**
-     * Method to make upload request
-     *
-     * @param url The url on which request is to be made
-     * @return The MultiPartBuilder
-     */
-    public static RxANRequest.MultiPartBuilder upload(String url) {
-        return new RxANRequest.MultiPartBuilder(url);
-    }
-
-    /**
-     * Method to make Dynamic request
-     *
-     * @param url    The url on which request is to be made
-     * @param method The HTTP METHOD for the request
-     * @return The DynamicRequestBuilder
-     */
-    public static RxANRequest.DynamicRequestBuilder request(String url, int method) {
-        return new RxANRequest.DynamicRequestBuilder(url, method);
-    }
-}
diff --git a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java b/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
deleted file mode 100644
index 1de12cc..0000000
--- a/rx-android-networking/src/main/java/com/rxandroidnetworking/RxInternalNetworking.java
+++ /dev/null
@@ -1,471 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rxandroidnetworking;
-
-import android.net.TrafficStats;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.common.ConnectionClassManager;
-import com.androidnetworking.common.RequestType;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.internal.InternalNetworking;
-import com.androidnetworking.internal.RequestProgressBody;
-import com.androidnetworking.internal.ResponseProgressBody;
-import com.androidnetworking.utils.SourceCloseUtil;
-import com.androidnetworking.utils.Utils;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import okhttp3.Call;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import rx.Observable;
-import rx.Producer;
-import rx.Subscriber;
-import rx.Subscription;
-import rx.exceptions.Exceptions;
-
-import static com.androidnetworking.common.Method.DELETE;
-import static com.androidnetworking.common.Method.GET;
-import static com.androidnetworking.common.Method.HEAD;
-import static com.androidnetworking.common.Method.OPTIONS;
-import static com.androidnetworking.common.Method.PATCH;
-import static com.androidnetworking.common.Method.POST;
-import static com.androidnetworking.common.Method.PUT;
-
-/**
- * Created by Prashant Gupta on 25-07-2016.
- */
-@SuppressWarnings("unchecked")
-public class RxInternalNetworking {
-
-    public static <T> Observable<T> generateSimpleObservable(RxANRequest request) {
-        Request okHttpRequest;
-        Request.Builder builder = new Request.Builder().url(request.getUrl());
-        InternalNetworking.addHeadersToRequestBuilder(builder, request);
-        RequestBody requestBody;
-        switch (request.getMethod()) {
-            case GET: {
-                builder = builder.get();
-                break;
-            }
-            case POST: {
-                requestBody = request.getRequestBody();
-                builder = builder.post(requestBody);
-                break;
-            }
-            case PUT: {
-                requestBody = request.getRequestBody();
-                builder = builder.put(requestBody);
-                break;
-            }
-            case DELETE: {
-                requestBody = request.getRequestBody();
-                builder = builder.delete(requestBody);
-                break;
-            }
-            case HEAD: {
-                builder = builder.head();
-                break;
-            }
-            case OPTIONS: {
-                builder = builder.method(ANConstants.OPTIONS, null);
-                break;
-            }
-            case PATCH: {
-                requestBody = request.getRequestBody();
-                builder = builder.patch(requestBody);
-                break;
-            }
-        }
-        if (request.getCacheControl() != null) {
-            builder.cacheControl(request.getCacheControl());
-        }
-        okHttpRequest = builder.build();
-        if (request.getOkHttpClient() != null) {
-            request.setCall(request
-                    .getOkHttpClient()
-                    .newBuilder()
-                    .cache(InternalNetworking.sHttpClient.cache())
-                    .build()
-                    .newCall(okHttpRequest));
-        } else {
-            request.setCall(InternalNetworking.sHttpClient.newCall(okHttpRequest));
-        }
-        return Observable.create(new ANOnSubscribe<T>(request));
-    }
-
-    public static <T> Observable<T> generateDownloadObservable(final RxANRequest request) {
-        Request okHttpRequest;
-        Request.Builder builder = new Request.Builder().url(request.getUrl());
-        InternalNetworking.addHeadersToRequestBuilder(builder, request);
-        builder = builder.get();
-        if (request.getCacheControl() != null) {
-            builder.cacheControl(request.getCacheControl());
-        }
-        okHttpRequest = builder.build();
-
-        OkHttpClient okHttpClient;
-
-        if (request.getOkHttpClient() != null) {
-            okHttpClient = request
-                    .getOkHttpClient()
-                    .newBuilder()
-                    .cache(InternalNetworking.sHttpClient.cache())
-                    .addNetworkInterceptor(new Interceptor() {
-                        @Override
-                        public Response intercept(Chain chain) throws IOException {
-                            Response originalResponse = chain.proceed(chain.request());
-                            return originalResponse.newBuilder()
-                                    .body(new ResponseProgressBody(originalResponse.body(),
-                                            request.getDownloadProgressListener()))
-                                    .build();
-                        }
-                    }).build();
-        } else {
-            okHttpClient = InternalNetworking.sHttpClient.newBuilder()
-                    .addNetworkInterceptor(new Interceptor() {
-                        @Override
-                        public Response intercept(Chain chain) throws IOException {
-                            Response originalResponse = chain.proceed(chain.request());
-                            return originalResponse.newBuilder()
-                                    .body(new ResponseProgressBody(originalResponse.body(),
-                                            request.getDownloadProgressListener()))
-                                    .build();
-                        }
-                    }).build();
-        }
-        request.setCall(okHttpClient.newCall(okHttpRequest));
-        return Observable.create(new ANOnSubscribe<T>(request));
-    }
-
-    public static <T> Observable<T> generateMultipartObservable(final RxANRequest request) {
-        return Observable.create(new ANOnSubscribe<T>(request));
-    }
-
-    static final class ANOnSubscribe<T> implements Observable.OnSubscribe<T> {
-
-        private final RxANRequest request;
-
-        public ANOnSubscribe(RxANRequest request) {
-            this.request = request;
-        }
-
-        @Override
-        public void call(Subscriber<? super T> subscriber) {
-            switch (request.getRequestType()) {
-                case RequestType.SIMPLE:
-                    ANResolver<T> anResolver = new ANResolver<>(request, subscriber);
-                    subscriber.add(anResolver);
-                    subscriber.setProducer(anResolver);
-                    break;
-                case RequestType.DOWNLOAD:
-                    DownloadANResolver<T> downloadANResolver = new DownloadANResolver<>(request,
-                            subscriber);
-                    subscriber.add(downloadANResolver);
-                    subscriber.setProducer(downloadANResolver);
-                    break;
-                case RequestType.MULTIPART:
-                    MultipartANResolver<T> multipartANResolver = new MultipartANResolver<>(request,
-                            subscriber);
-                    subscriber.add(multipartANResolver);
-                    subscriber.setProducer(multipartANResolver);
-                    break;
-            }
-        }
-    }
-
-    static final class ANResolver<T> extends AtomicBoolean implements Subscription, Producer {
-        private final Call call;
-        private final RxANRequest request;
-        private final Subscriber<? super T> subscriber;
-
-        ANResolver(RxANRequest request, Subscriber<? super T> subscriber) {
-            this.request = request;
-            this.call = request.getCall();
-            this.subscriber = subscriber;
-        }
-
-        @Override
-        public void request(long n) {
-            if (n < 0) throw new IllegalArgumentException("n < 0: " + n);
-            if (n == 0) return; // Nothing to do when requesting 0.
-            if (!compareAndSet(false, true)) return; // Request was already triggered.
-            Response okHttpResponse = null;
-            try {
-                final long startTime = System.currentTimeMillis();
-                final long startBytes = TrafficStats.getTotalRxBytes();
-                okHttpResponse = call.execute();
-                final long timeTaken = System.currentTimeMillis() - startTime;
-                if (okHttpResponse.cacheResponse() == null) {
-                    final long finalBytes = TrafficStats.getTotalRxBytes();
-                    final long diffBytes;
-                    if (startBytes == TrafficStats.UNSUPPORTED || finalBytes == TrafficStats.UNSUPPORTED) {
-                        diffBytes = okHttpResponse.body().contentLength();
-                    } else {
-                        diffBytes = finalBytes - startBytes;
-                    }
-                    ConnectionClassManager.getInstance().updateBandwidth(diffBytes, timeTaken);
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                            (request.getRequestBody() != null &&
-                                    request.getRequestBody().contentLength() != 0) ?
-                                    request.getRequestBody().contentLength() : -1,
-                            okHttpResponse.body().contentLength(), false);
-                } else if (request.getAnalyticsListener() != null) {
-                    if (okHttpResponse.networkResponse() == null) {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, 0, 0, true);
-                    } else {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                (request.getRequestBody() != null && request.getRequestBody().contentLength() != 0) ?
-                                        request.getRequestBody().contentLength() : -1, 0, true);
-                    }
-                }
-                if (okHttpResponse.code() >= 400) {
-                    if (!subscriber.isUnsubscribed()) {
-                        subscriber.onError(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                                request, okHttpResponse.code()));
-                    }
-                } else {
-                    ANResponse<T> response = request.parseResponse(okHttpResponse);
-                    if (!response.isSuccess()) {
-                        if (!subscriber.isUnsubscribed()) {
-                            subscriber.onError(response.getError());
-                        }
-                    } else {
-                        if (!subscriber.isUnsubscribed()) {
-                            subscriber.onNext(response.getResult());
-                        }
-                        if (!subscriber.isUnsubscribed()) {
-                            subscriber.onCompleted();
-                        }
-                    }
-                }
-            } catch (IOException ioe) {
-                if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForConnection(new ANError(ioe)));
-                }
-            } catch (Exception e) {
-                Exceptions.throwIfFatal(e);
-                if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
-                }
-            } finally {
-                SourceCloseUtil.close(okHttpResponse, request);
-            }
-        }
-
-        @Override
-        public void unsubscribe() {
-            call.cancel();
-        }
-
-        @Override
-        public boolean isUnsubscribed() {
-            return call.isCanceled();
-        }
-    }
-
-    static final class DownloadANResolver<T> extends AtomicBoolean implements Subscription, Producer {
-        private final Call call;
-        private final RxANRequest request;
-        private final Subscriber<? super T> subscriber;
-
-        DownloadANResolver(RxANRequest request, Subscriber<? super T> subscriber) {
-            this.request = request;
-            this.call = request.getCall();
-            this.subscriber = subscriber;
-        }
-
-        @Override
-        public void request(long n) {
-            if (n < 0) throw new IllegalArgumentException("n < 0: " + n);
-            if (n == 0) return; // Nothing to do when requesting 0.
-            if (!compareAndSet(false, true)) return; // Request was already triggered.
-            Response okHttpResponse;
-            try {
-                final long startTime = System.currentTimeMillis();
-                final long startBytes = TrafficStats.getTotalRxBytes();
-                okHttpResponse = request.getCall().execute();
-                Utils.saveFile(okHttpResponse, request.getDirPath(), request.getFileName());
-                final long timeTaken = System.currentTimeMillis() - startTime;
-                if (okHttpResponse.cacheResponse() == null) {
-                    final long finalBytes = TrafficStats.getTotalRxBytes();
-                    final long diffBytes;
-                    if (startBytes == TrafficStats.UNSUPPORTED ||
-                            finalBytes == TrafficStats.UNSUPPORTED) {
-                        diffBytes = okHttpResponse.body().contentLength();
-                    } else {
-                        diffBytes = finalBytes - startBytes;
-                    }
-                    ConnectionClassManager.getInstance().updateBandwidth(diffBytes, timeTaken);
-                    Utils.sendAnalytics(request.getAnalyticsListener(),
-                            timeTaken, -1, okHttpResponse.body().contentLength(), false);
-                } else if (request.getAnalyticsListener() != null) {
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, -1, 0, true);
-                }
-                if (okHttpResponse.code() >= 400) {
-                    if (!subscriber.isUnsubscribed()) {
-                        subscriber.onError(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                                request, okHttpResponse.code()));
-                    }
-                } else {
-                    if (!subscriber.isUnsubscribed()) {
-                        ANResponse<T> response = (ANResponse<T>) ANResponse.success(ANConstants.SUCCESS);
-                        subscriber.onNext(response.getResult());
-                    }
-                    if (!subscriber.isUnsubscribed()) {
-                        subscriber.onCompleted();
-                    }
-                }
-            } catch (IOException ioe) {
-                try {
-                    File destinationFile = new File(request.getDirPath() + File.separator + request.getFileName());
-                    if (destinationFile.exists()) {
-                        destinationFile.delete();
-                    }
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
-                if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForConnection(new ANError(ioe)));
-                }
-            } catch (Exception e) {
-                Exceptions.throwIfFatal(e);
-                if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
-                }
-            }
-        }
-
-        @Override
-        public void unsubscribe() {
-            call.cancel();
-        }
-
-        @Override
-        public boolean isUnsubscribed() {
-            return call.isCanceled();
-        }
-    }
-
-    static final class MultipartANResolver<T> extends AtomicBoolean implements Subscription, Producer {
-        private final RxANRequest request;
-        private final Subscriber<? super T> subscriber;
-
-        MultipartANResolver(RxANRequest request, Subscriber<? super T> subscriber) {
-            this.request = request;
-            this.subscriber = subscriber;
-        }
-
-        @Override
-        public void request(long n) {
-            if (n < 0) throw new IllegalArgumentException("n < 0: " + n);
-            if (n == 0) return; // Nothing to do when requesting 0.
-            if (!compareAndSet(false, true)) return; // Request was already triggered.
-            Response okHttpResponse = null;
-            Request okHttpRequest;
-            try {
-                Request.Builder builder = new Request.Builder().url(request.getUrl());
-                InternalNetworking.addHeadersToRequestBuilder(builder, request);
-                final RequestBody requestBody = request.getMultiPartRequestBody();
-                final long requestBodyLength = requestBody.contentLength();
-                builder = builder.post(new RequestProgressBody(requestBody, request.getUploadProgressListener()));
-                if (request.getCacheControl() != null) {
-                    builder.cacheControl(request.getCacheControl());
-                }
-                okHttpRequest = builder.build();
-                if (request.getOkHttpClient() != null) {
-                    request.setCall(request
-                            .getOkHttpClient()
-                            .newBuilder()
-                            .cache(InternalNetworking.sHttpClient.cache())
-                            .build()
-                            .newCall(okHttpRequest));
-                } else {
-                    request.setCall(InternalNetworking.sHttpClient.newCall(okHttpRequest));
-                }
-                final long startTime = System.currentTimeMillis();
-                okHttpResponse = request.getCall().execute();
-                final long timeTaken = System.currentTimeMillis() - startTime;
-                if (request.getAnalyticsListener() != null) {
-                    if (okHttpResponse.cacheResponse() == null) {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                requestBodyLength, okHttpResponse.body().contentLength(), false);
-                    } else {
-                        if (okHttpResponse.networkResponse() == null) {
-                            Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, 0, 0, true);
-                        } else {
-                            Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                    requestBodyLength != 0 ? requestBodyLength : -1, 0, true);
-                        }
-                    }
-                }
-                if (okHttpResponse.code() >= 400) {
-                    if (!subscriber.isUnsubscribed()) {
-                        subscriber.onError(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                                request, okHttpResponse.code()));
-                    }
-                } else {
-                    ANResponse<T> response = request.parseResponse(okHttpResponse);
-                    if (!response.isSuccess()) {
-                        if (!subscriber.isUnsubscribed()) {
-                            subscriber.onError(response.getError());
-                        }
-                    } else {
-                        if (!subscriber.isUnsubscribed()) {
-                            subscriber.onNext(response.getResult());
-                        }
-                        if (!subscriber.isUnsubscribed()) {
-                            subscriber.onCompleted();
-                        }
-                    }
-                }
-            } catch (IOException ioe) {
-                if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForConnection(new ANError(ioe)));
-                }
-            } catch (Exception e) {
-                Exceptions.throwIfFatal(e);
-                if (!subscriber.isUnsubscribed()) {
-                    subscriber.onError(Utils.getErrorForConnection(new ANError(e)));
-                }
-            } finally {
-                SourceCloseUtil.close(okHttpResponse, request);
-            }
-        }
-
-        @Override
-        public void unsubscribe() {
-            if (request.getCall() != null) {
-                request.getCall().cancel();
-            }
-        }
-
-        @Override
-        public boolean isUnsubscribed() {
-            return request.getCall() != null && request.getCall().isCanceled();
-        }
-    }
-
-
-}
diff --git a/rx-android-networking/src/main/res/values/strings.xml b/rx-android-networking/src/main/res/values/strings.xml
deleted file mode 100644
index dde8c16..0000000
--- a/rx-android-networking/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <string name="app_name">rxandroidnetworking</string>
-</resources>
diff --git a/rx-android-networking/src/test/java/com/rxandroidnetworking/ExampleUnitTest.java b/rx-android-networking/src/test/java/com/rxandroidnetworking/ExampleUnitTest.java
deleted file mode 100644
index 2de3b94..0000000
--- a/rx-android-networking/src/test/java/com/rxandroidnetworking/ExampleUnitTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxandroidnetworking;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * To work on unit tests, switch the Test Artifact in the Build Variants view.
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/rx2-android-networking/.gitignore b/rx2-android-networking/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/rx2-android-networking/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/rx2-android-networking/build.gradle b/rx2-android-networking/build.gradle
deleted file mode 100644
index 24dd65e..0000000
--- a/rx2-android-networking/build.gradle
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-apply plugin: 'com.android.library'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.mockWebServerVersion"
-    compile "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxJava2AndroidVersion"
-    compile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxJava2Version"
-    compile project(':android-networking')
-}
-//apply from: 'rx2-upload.gradle'
diff --git a/rx2-android-networking/proguard-rules.pro b/rx2-android-networking/proguard-rules.pro
deleted file mode 100644
index 6b7a2bf..0000000
--- a/rx2-android-networking/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/amitshekhar/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/rx2-android-networking/rx2-upload.gradle b/rx2-android-networking/rx2-upload.gradle
deleted file mode 100755
index bd5fb3f..0000000
--- a/rx2-android-networking/rx2-upload.gradle
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: "com.jfrog.bintray"
-
-def siteUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking'
-def gitUrl = 'https://github.com/amitshekhariitbhu/Fast-Android-Networking.git'
-
-group = "com.amitshekhar.android"
-version = '1.0.2'
-
-install {
-    repositories.mavenInstaller {
-        pom.project {
-            packaging 'aar'
-
-            name 'Fast Android Networking'
-            description 'Fast Android Networking is a powerful library for doing any type of networking in Android applications'
-
-            url siteUrl
-
-            licenses {
-                license {
-                    name 'The Apache Software License, Version 2.0'
-                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                }
-            }
-
-            developers {
-                developer {
-                    id 'amitshekhariitbhu'
-                    name 'Amit Shekhar'
-                    email 'amit.shekhar.iitbhu@gmail.com'
-                }
-            }
-
-            scm {
-                connection gitUrl
-                developerConnection gitUrl
-                url siteUrl
-            }
-        }
-    }
-}
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    classpath += configurations.compile
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-artifacts {
-    archives javadocJar
-    archives sourcesJar
-}
-
-if (project.rootProject.file("local.properties").exists()) {
-    Properties properties = new Properties()
-    properties.load(project.rootProject.file('local.properties').newDataInputStream())
-
-    bintray {
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-
-        configurations = ['archives']
-        dryRun = false
-
-        pkg {
-            repo = "maven"
-            name = "rx2-android-networking"
-            websiteUrl = siteUrl
-            vcsUrl = gitUrl
-            licenses = ["Apache-2.0"]
-            publish = true
-        }
-    }
-}
diff --git a/rx2-android-networking/src/androidTest/AndroidManifest.xml b/rx2-android-networking/src/androidTest/AndroidManifest.xml
deleted file mode 100755
index 501fd9a..0000000
--- a/rx2-android-networking/src/androidTest/AndroidManifest.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.rx2androidnetworking">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"></uses-permission>
-
-</manifest>
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetJSONApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetJSONApiTest.java
deleted file mode 100644
index e9f54be..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetJSONApiTest.java
+++ /dev/null
@@ -1,466 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 30/04/17.
- */
-
-public class Rx2GetJSONApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2GetJSONApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testJSONObjectGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectSingleGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONObjectSingleGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArrayGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONArrayObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONArray>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArraySingleGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONArraySingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONArray>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArrayGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONArrayObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONArray>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArraySingleGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getJSONArraySingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONArray>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetObjectApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetObjectApiTest.java
deleted file mode 100644
index 72d91e6..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetObjectApiTest.java
+++ /dev/null
@@ -1,449 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-import com.rx2androidnetworking.model.User;
-
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 26/04/17.
- */
-
-public class Rx2GetObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2GetObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testObjectGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectSingleGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectSingleGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListSingleGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        firstNameRef.set(users.get(0).firstName);
-                        lastNameRef.set(users.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListSingleGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetStringApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetStringApiTest.java
deleted file mode 100644
index db26c7c..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2GetStringApiTest.java
+++ /dev/null
@@ -1,248 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 22/04/17.
- */
-
-public class Rx2GetStringApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2GetStringApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testStringGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getStringObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringSingleGetRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getStringSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<String>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringGetRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getStringObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testStringGetSingleRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.get(server.url("/").toString())
-                .build()
-                .getStringSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<String>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull String s) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartJSONApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartJSONApiTest.java
deleted file mode 100644
index 0f24b34..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartJSONApiTest.java
+++ /dev/null
@@ -1,474 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 03/05/17.
- */
-
-public class Rx2MultipartJSONApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2MultipartJSONApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testJSONObjectMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectSingleMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONObjectSingleMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArrayMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONArrayObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONArray>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArraySingleMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONArraySingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONArray>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArrayMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONArrayObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONArray>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArraySingleMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getJSONArraySingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONArray>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONArray jsonArray) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartObjectApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartObjectApiTest.java
deleted file mode 100644
index 407a1bf..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartObjectApiTest.java
+++ /dev/null
@@ -1,457 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-import com.rx2androidnetworking.model.User;
-
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 29/04/17.
- */
-
-public class Rx2MultipartObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2MultipartObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testObjectMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectSingleMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectSingleMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListSingleMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListSingleMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartStringApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartStringApiTest.java
deleted file mode 100644
index 8a82fbe..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2MultipartStringApiTest.java
+++ /dev/null
@@ -1,252 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 25/04/17.
- */
-
-public class Rx2MultipartStringApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2MultipartStringApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testStringMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getStringObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringSingleMultipartRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getStringSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<String>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getStringObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testStringSingleMultipartRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.upload(server.url("/").toString())
-                .addMultipartParameter("key", "value")
-                .build()
-                .getStringSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<String>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull String s) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-}
\ No newline at end of file
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostJSONApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostJSONApiTest.java
deleted file mode 100644
index 2638533..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostJSONApiTest.java
+++ /dev/null
@@ -1,482 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 02/05/17.
- */
-
-public class Rx2PostJSONApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2PostJSONApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testJSONObjectPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectSinglePostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject response) {
-                        try {
-                            firstNameRef.set(response.getString("firstName"));
-                            lastNameRef.set(response.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONObjectSinglePostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArrayPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONArrayObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONArray>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArraySinglePostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONArraySingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONArray>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONArray response) {
-                        try {
-                            JSONObject jsonObject = response.getJSONObject(0);
-                            firstNameRef.set(jsonObject.getString("firstName"));
-                            lastNameRef.set(jsonObject.getString("lastName"));
-                            latch.countDown();
-                        } catch (JSONException e) {
-                            assertTrue(false);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testJSONArrayPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONArrayObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONArray>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(JSONArray response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testJSONArraySinglePostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getJSONArraySingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONArray>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONArray jsonArray) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostObjectApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostObjectApiTest.java
deleted file mode 100644
index 9582c7a..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostObjectApiTest.java
+++ /dev/null
@@ -1,466 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-import com.rx2androidnetworking.model.User;
-
-import org.junit.Rule;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 28/04/17.
- */
-
-public class Rx2PostObjectApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2PostObjectApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testObjectPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectSinglePostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        firstNameRef.set(user.firstName);
-                        lastNameRef.set(user.lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectSinglePostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListSinglePostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("[{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}]"));
-
-        final AtomicReference<String> firstNameRef = new AtomicReference<>();
-        final AtomicReference<String> lastNameRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> userList) {
-                        firstNameRef.set(userList.get(0).firstName);
-                        lastNameRef.set(userList.get(0).lastName);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("Amit", firstNameRef.get());
-        assertEquals("Shekhar", lastNameRef.get());
-    }
-
-    public void testObjectListPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(List<User> userList) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testObjectListSinglePostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-}
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostStringApiTest.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostStringApiTest.java
deleted file mode 100644
index da3d883..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/Rx2PostStringApiTest.java
+++ /dev/null
@@ -1,256 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.error.ANError;
-
-import org.junit.Rule;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.reactivex.Observer;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-/**
- * Created by amitshekhar on 24/04/17.
- */
-
-public class Rx2PostStringApiTest extends ApplicationTestCase<Application> {
-
-    @Rule
-    public final MockWebServer server = new MockWebServer();
-
-    public Rx2PostStringApiTest() {
-        super(Application.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        createApplication();
-    }
-
-    public void testStringPostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isCompletedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(2);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getStringObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        isCompletedRef.set(true);
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-        assertTrue(isCompletedRef.get());
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringSinglePostRequest() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setBody("data"));
-
-        final AtomicReference<String> responseRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getStringSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<String>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull String response) {
-                        responseRef.set(response);
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals("data", responseRef.get());
-    }
-
-    public void testStringPostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getStringObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onNext(String response) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        assertTrue(false);
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-    public void testStringSinglePostRequest404() throws InterruptedException {
-
-        server.enqueue(new MockResponse().setResponseCode(404).setBody("data"));
-
-        final AtomicReference<String> errorDetailRef = new AtomicReference<>();
-        final AtomicReference<String> errorBodyRef = new AtomicReference<>();
-        final AtomicReference<Integer> errorCodeRef = new AtomicReference<>();
-        final AtomicReference<Boolean> isSubscribedRef = new AtomicReference<>();
-        final CountDownLatch latch = new CountDownLatch(1);
-
-        Rx2AndroidNetworking.post(server.url("/").toString())
-                .addBodyParameter("fistName", "Amit")
-                .addBodyParameter("lastName", "Shekhar")
-                .build()
-                .getStringSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<String>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        isSubscribedRef.set(true);
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull String s) {
-                        assertTrue(false);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable e) {
-                        ANError anError = (ANError) e;
-                        errorBodyRef.set(anError.getErrorBody());
-                        errorDetailRef.set(anError.getErrorDetail());
-                        errorCodeRef.set(anError.getErrorCode());
-                        latch.countDown();
-                    }
-                });
-
-        assertTrue(latch.await(2, SECONDS));
-
-        assertTrue(isSubscribedRef.get());
-
-        assertEquals(ANConstants.RESPONSE_FROM_SERVER_ERROR, errorDetailRef.get());
-
-        assertEquals("data", errorBodyRef.get());
-
-        assertEquals(404, errorCodeRef.get().intValue());
-
-    }
-
-}
\ No newline at end of file
diff --git a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/model/User.java b/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/model/User.java
deleted file mode 100644
index 4c91f7b..0000000
--- a/rx2-android-networking/src/androidTest/java/com/rx2androidnetworking/model/User.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking.model;
-
-/**
- * Created by amitshekhar on 26/04/17.
- */
-
-public class User {
-
-    public String firstName;
-    public String lastName;
-
-}
diff --git a/rx2-android-networking/src/main/AndroidManifest.xml b/rx2-android-networking/src/main/AndroidManifest.xml
deleted file mode 100644
index 40fbb9e..0000000
--- a/rx2-android-networking/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.rx2androidnetworking">
-</manifest>
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
deleted file mode 100644
index a19c9f1..0000000
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2ANRequest.java
+++ /dev/null
@@ -1,370 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.graphics.Bitmap;
-
-import com.androidnetworking.common.ANRequest;
-import com.androidnetworking.common.Method;
-import com.androidnetworking.common.RequestType;
-import com.androidnetworking.common.ResponseType;
-import com.google.gson.internal.$Gson$Types;
-import com.google.gson.reflect.TypeToken;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.List;
-
-import io.reactivex.BackpressureStrategy;
-import io.reactivex.Completable;
-import io.reactivex.Flowable;
-import io.reactivex.Maybe;
-import io.reactivex.Observable;
-import io.reactivex.Single;
-
-/**
- * Created by Prashant Gupta on 30-01-2017.
- */
-@SuppressWarnings({"unchecked", "unused"})
-public class Rx2ANRequest extends ANRequest<Rx2ANRequest> {
-
-    public Rx2ANRequest(GetRequestBuilder builder) {
-        super(builder);
-    }
-
-    public Rx2ANRequest(PostRequestBuilder builder) {
-        super(builder);
-    }
-
-    public Rx2ANRequest(DownloadBuilder builder) {
-        super(builder);
-    }
-
-    public Rx2ANRequest(MultiPartBuilder builder) {
-        super(builder);
-    }
-
-    public Observable<JSONObject> getJSONObjectObservable() {
-        this.setResponseAs(ResponseType.JSON_OBJECT);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Flowable<JSONObject> getJSONObjectFlowable() {
-        return getJSONObjectObservable().toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public Single<JSONObject> getJSONObjectSingle() {
-        return getJSONObjectObservable().singleOrError();
-    }
-
-    public Maybe<JSONObject> getJSONObjectMaybe() {
-        return getJSONObjectObservable().singleElement();
-    }
-
-    public Completable getJSONObjectCompletable() {
-        return getJSONObjectObservable().ignoreElements();
-    }
-
-    public Observable<JSONArray> getJSONArrayObservable() {
-        this.setResponseAs(ResponseType.JSON_ARRAY);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Flowable<JSONArray> getJSONArrayFlowable() {
-        return getJSONArrayObservable().toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public Single<JSONArray> getJSONArraySingle() {
-        return getJSONArrayObservable().singleOrError();
-    }
-
-    public Maybe<JSONArray> getJSONArrayMaybe() {
-        return getJSONArrayObservable().singleElement();
-    }
-
-    public Completable getJSONArrayCompletable() {
-        return getJSONArrayObservable().ignoreElements();
-    }
-
-    public Observable<Bitmap> getBitmapObservable() {
-        this.setResponseAs(ResponseType.BITMAP);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Flowable<Bitmap> getBitmapFlowable() {
-        return getBitmapObservable().toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public Single<Bitmap> getBitmapSingle() {
-        return getBitmapObservable().singleOrError();
-    }
-
-    public Maybe<Bitmap> getBitmapMaybe() {
-        return getBitmapObservable().singleElement();
-    }
-
-    public Completable getBitmapCompletable() {
-        return getBitmapObservable().ignoreElements();
-    }
-
-    public Observable<String> getStringObservable() {
-        this.setResponseAs(ResponseType.STRING);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public Flowable<String> getStringFlowable() {
-        return getStringObservable().toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public Single<String> getStringSingle() {
-        return getStringObservable().singleOrError();
-    }
-
-    public Maybe<String> getStringMaybe() {
-        return getStringObservable().singleElement();
-    }
-
-    public Completable getStringCompletable() {
-        return getStringObservable().ignoreElements();
-    }
-
-    public Observable<String> getDownloadObservable() {
-        return Rx2InternalNetworking.generateDownloadObservable(this);
-    }
-
-    public Flowable<String> getDownloadFlowable() {
-        return getDownloadObservable().toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public Single<String> getDownloadSingle() {
-        return getDownloadObservable().singleOrError();
-    }
-
-    public Maybe<String> getDownloadMaybe() {
-        return getDownloadObservable().singleElement();
-    }
-
-    public Completable getDownloadCompletable() {
-        return getDownloadObservable().ignoreElements();
-    }
-
-    public <T> Observable<T> getParseObservable(TypeToken<T> typeToken) {
-        this.setType(typeToken.getType());
-        this.setResponseAs(ResponseType.PARSED);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public <T> Flowable<T> getParseFlowable(TypeToken<T> typeToken) {
-        return getParseObservable(typeToken).toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public <T> Single<T> getParseSingle(TypeToken<T> typeToken) {
-        return getParseObservable(typeToken).singleOrError();
-    }
-
-    public <T> Maybe<T> getParseMaybe(TypeToken<T> typeToken) {
-        return getParseObservable(typeToken).singleElement();
-    }
-
-    public <T> Completable getParseCompletable(TypeToken<T> typeToken) {
-        return getParseObservable(typeToken).ignoreElements();
-    }
-
-    public <T> Observable<T> getObjectObservable(Class<T> objectClass) {
-        this.setType(objectClass);
-        this.setResponseAs(ResponseType.PARSED);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public <T> Flowable<T> getObjectFlowable(Class<T> objectClass) {
-        return getObjectObservable(objectClass).toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public <T> Single<T> getObjectSingle(Class<T> objectClass) {
-        return getObjectObservable(objectClass).singleOrError();
-    }
-
-    public <T> Maybe<T> getObjectMaybe(Class<T> objectClass) {
-        return getObjectObservable(objectClass).singleElement();
-    }
-
-    public <T> Completable getObjectCompletable(Class<T> objectClass) {
-        return getObjectObservable(objectClass).ignoreElements();
-    }
-
-    public <T> Observable<List<T>> getObjectListObservable(Class<T> objectClass) {
-        this.setType($Gson$Types.newParameterizedTypeWithOwner(null, List.class, objectClass));
-        this.setResponseAs(ResponseType.PARSED);
-        if (this.getRequestType() == RequestType.SIMPLE) {
-            return Rx2InternalNetworking.generateSimpleObservable(this);
-        } else if (this.getRequestType() == RequestType.MULTIPART) {
-            return Rx2InternalNetworking.generateMultipartObservable(this);
-        } else {
-            return null;
-        }
-    }
-
-    public <T> Flowable<List<T>> getObjectListFlowable(Class<T> objectClass) {
-        return getObjectListObservable(objectClass).toFlowable(BackpressureStrategy.LATEST);
-    }
-
-    public <T> Single<List<T>> getObjectListSingle(Class<T> objectClass) {
-        return getObjectListObservable(objectClass).singleOrError();
-    }
-
-    public <T> Maybe<List<T>> getObjectListMaybe(Class<T> objectClass) {
-        return getObjectListObservable(objectClass).singleElement();
-    }
-
-    public <T> Completable getObjectListCompletable(Class<T> objectClass) {
-        return getObjectListObservable(objectClass).ignoreElements();
-    }
-
-    public static class GetRequestBuilder extends ANRequest.GetRequestBuilder<GetRequestBuilder> {
-
-        public GetRequestBuilder(String url) {
-            super(url);
-        }
-
-        private GetRequestBuilder(String url, int method) {
-            super(url, method);
-        }
-
-        public Rx2ANRequest build() {
-            return new Rx2ANRequest(this);
-        }
-    }
-
-    public static class HeadRequestBuilder extends GetRequestBuilder {
-
-        public HeadRequestBuilder(String url) {
-            super(url, Method.HEAD);
-        }
-    }
-
-    public static class OptionsRequestBuilder extends GetRequestBuilder {
-
-        public OptionsRequestBuilder(String url) {
-            super(url, Method.OPTIONS);
-        }
-    }
-
-    public static class PostRequestBuilder extends ANRequest.PostRequestBuilder<PostRequestBuilder> {
-
-        public PostRequestBuilder(String url) {
-            super(url);
-        }
-
-        private PostRequestBuilder(String url, int method) {
-            super(url, method);
-        }
-
-        public Rx2ANRequest build() {
-            return new Rx2ANRequest(this);
-        }
-    }
-
-    public static class PutRequestBuilder extends PostRequestBuilder {
-
-        public PutRequestBuilder(String url) {
-            super(url, Method.PUT);
-        }
-    }
-
-    public static class DeleteRequestBuilder extends PostRequestBuilder {
-
-        public DeleteRequestBuilder(String url) {
-            super(url, Method.DELETE);
-        }
-    }
-
-    public static class PatchRequestBuilder extends PostRequestBuilder {
-
-        public PatchRequestBuilder(String url) {
-            super(url, Method.PATCH);
-        }
-    }
-
-    public static class DynamicRequestBuilder extends PostRequestBuilder {
-
-        public DynamicRequestBuilder(String url, int method) {
-            super(url, method);
-        }
-    }
-
-    public static class DownloadBuilder extends ANRequest.DownloadBuilder<DownloadBuilder> {
-
-        public DownloadBuilder(String url, String dirPath, String fileName) {
-            super(url, dirPath, fileName);
-        }
-
-        public Rx2ANRequest build() {
-            return new Rx2ANRequest(this);
-        }
-    }
-
-    public static class MultiPartBuilder extends ANRequest.MultiPartBuilder<MultiPartBuilder> {
-
-        public MultiPartBuilder(String url) {
-            super(url);
-        }
-
-        public Rx2ANRequest build() {
-            return new Rx2ANRequest(this);
-        }
-    }
-}
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
deleted file mode 100644
index 14a7792..0000000
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2AndroidNetworking.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-/**
- * Created by amitshekhar on 30/01/17.
- */
-
-/**
- * Rx2AndroidNetworking entry point.
- * You must initialize this class before use. The simplest way is to just do
- * {#code AndroidNetworking.initialize(context)}.
- */
-public class Rx2AndroidNetworking {
-
-    /**
-     * private constructor to prevent instantiation of this class
-     */
-    private Rx2AndroidNetworking() {
-    }
-
-    /**
-     * Method to make GET request
-     *
-     * @param url The url on which request is to be made
-     * @return The GetRequestBuilder
-     */
-    public static Rx2ANRequest.GetRequestBuilder get(String url) {
-        return new Rx2ANRequest.GetRequestBuilder(url);
-    }
-
-    /**
-     * Method to make HEAD request
-     *
-     * @param url The url on which request is to be made
-     * @return The HeadRequestBuilder
-     */
-    public static Rx2ANRequest.HeadRequestBuilder head(String url) {
-        return new Rx2ANRequest.HeadRequestBuilder(url);
-    }
-
-    /**
-     * Method to make OPTIONS request
-     *
-     * @param url The url on which request is to be made
-     * @return The OptionsRequestBuilder
-     */
-    public static Rx2ANRequest.OptionsRequestBuilder options(String url) {
-        return new Rx2ANRequest.OptionsRequestBuilder(url);
-    }
-
-    /**
-     * Method to make POST request
-     *
-     * @param url The url on which request is to be made
-     * @return The PostRequestBuilder
-     */
-    public static Rx2ANRequest.PostRequestBuilder post(String url) {
-        return new Rx2ANRequest.PostRequestBuilder(url);
-    }
-
-    /**
-     * Method to make PUT request
-     *
-     * @param url The url on which request is to be made
-     * @return The PutRequestBuilder
-     */
-    public static Rx2ANRequest.PutRequestBuilder put(String url) {
-        return new Rx2ANRequest.PutRequestBuilder(url);
-    }
-
-    /**
-     * Method to make DELETE request
-     *
-     * @param url The url on which request is to be made
-     * @return The DeleteRequestBuilder
-     */
-    public static Rx2ANRequest.DeleteRequestBuilder delete(String url) {
-        return new Rx2ANRequest.DeleteRequestBuilder(url);
-    }
-
-    /**
-     * Method to make PATCH request
-     *
-     * @param url The url on which request is to be made
-     * @return The PatchRequestBuilder
-     */
-    public static Rx2ANRequest.PatchRequestBuilder patch(String url) {
-        return new Rx2ANRequest.PatchRequestBuilder(url);
-    }
-
-    /**
-     * Method to make download request
-     *
-     * @param url      The url on which request is to be made
-     * @param dirPath  The directory path on which file is to be saved
-     * @param fileName The file name with which file is to be saved
-     * @return The DownloadBuilder
-     */
-    public static Rx2ANRequest.DownloadBuilder download(String url, String dirPath, String fileName) {
-        return new Rx2ANRequest.DownloadBuilder(url, dirPath, fileName);
-    }
-
-    /**
-     * Method to make upload request
-     *
-     * @param url The url on which request is to be made
-     * @return The MultiPartBuilder
-     */
-    public static Rx2ANRequest.MultiPartBuilder upload(String url) {
-        return new Rx2ANRequest.MultiPartBuilder(url);
-    }
-
-    /**
-     * Method to make Dynamic request
-     *
-     * @param url    The url on which request is to be made
-     * @param method The HTTP METHOD for the request
-     * @return The DynamicRequestBuilder
-     */
-    public static Rx2ANRequest.DynamicRequestBuilder request(String url, int method) {
-        return new Rx2ANRequest.DynamicRequestBuilder(url, method);
-    }
-}
diff --git a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java b/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
deleted file mode 100644
index e33afd3..0000000
--- a/rx2-android-networking/src/main/java/com/rx2androidnetworking/Rx2InternalNetworking.java
+++ /dev/null
@@ -1,446 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import android.net.TrafficStats;
-
-import com.androidnetworking.common.ANConstants;
-import com.androidnetworking.common.ANResponse;
-import com.androidnetworking.common.ConnectionClassManager;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.internal.InternalNetworking;
-import com.androidnetworking.internal.RequestProgressBody;
-import com.androidnetworking.internal.ResponseProgressBody;
-import com.androidnetworking.utils.SourceCloseUtil;
-import com.androidnetworking.utils.Utils;
-
-import java.io.File;
-import java.io.IOException;
-
-import io.reactivex.Observable;
-import io.reactivex.Observer;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.exceptions.CompositeException;
-import io.reactivex.exceptions.Exceptions;
-import io.reactivex.plugins.RxJavaPlugins;
-import okhttp3.Call;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-import static com.androidnetworking.common.Method.DELETE;
-import static com.androidnetworking.common.Method.GET;
-import static com.androidnetworking.common.Method.HEAD;
-import static com.androidnetworking.common.Method.OPTIONS;
-import static com.androidnetworking.common.Method.PATCH;
-import static com.androidnetworking.common.Method.POST;
-import static com.androidnetworking.common.Method.PUT;
-
-/**
- * Created by Prashant Gupta on 30-01-2017.
- */
-@SuppressWarnings("unchecked")
-public class Rx2InternalNetworking {
-
-    public static <T> Observable<T> generateSimpleObservable(Rx2ANRequest request) {
-        Request okHttpRequest;
-        Request.Builder builder = new Request.Builder().url(request.getUrl());
-        InternalNetworking.addHeadersToRequestBuilder(builder, request);
-        RequestBody requestBody;
-        switch (request.getMethod()) {
-            case GET: {
-                builder = builder.get();
-                break;
-            }
-            case POST: {
-                requestBody = request.getRequestBody();
-                builder = builder.post(requestBody);
-                break;
-            }
-            case PUT: {
-                requestBody = request.getRequestBody();
-                builder = builder.put(requestBody);
-                break;
-            }
-            case DELETE: {
-                requestBody = request.getRequestBody();
-                builder = builder.delete(requestBody);
-                break;
-            }
-            case HEAD: {
-                builder = builder.head();
-                break;
-            }
-            case OPTIONS: {
-                builder = builder.method(ANConstants.OPTIONS, null);
-                break;
-            }
-            case PATCH: {
-                requestBody = request.getRequestBody();
-                builder = builder.patch(requestBody);
-                break;
-            }
-        }
-        if (request.getCacheControl() != null) {
-            builder.cacheControl(request.getCacheControl());
-        }
-        okHttpRequest = builder.build();
-        if (request.getOkHttpClient() != null) {
-            request.setCall(request
-                    .getOkHttpClient()
-                    .newBuilder()
-                    .cache(InternalNetworking.sHttpClient.cache())
-                    .build()
-                    .newCall(okHttpRequest));
-        } else {
-            request.setCall(InternalNetworking.sHttpClient.newCall(okHttpRequest));
-        }
-        return new SimpleANObservable<>(request);
-    }
-
-    public static <T> Observable<T> generateDownloadObservable(final Rx2ANRequest request) {
-        Request okHttpRequest;
-        Request.Builder builder = new Request.Builder().url(request.getUrl());
-        InternalNetworking.addHeadersToRequestBuilder(builder, request);
-        builder = builder.get();
-        if (request.getCacheControl() != null) {
-            builder.cacheControl(request.getCacheControl());
-        }
-        okHttpRequest = builder.build();
-
-        OkHttpClient okHttpClient;
-
-        if (request.getOkHttpClient() != null) {
-            okHttpClient = request
-                    .getOkHttpClient()
-                    .newBuilder()
-                    .cache(InternalNetworking.sHttpClient.cache())
-                    .addNetworkInterceptor(new Interceptor() {
-                        @Override
-                        public Response intercept(Chain chain) throws IOException {
-                            Response originalResponse = chain.proceed(chain.request());
-                            return originalResponse.newBuilder()
-                                    .body(new ResponseProgressBody(originalResponse.body(),
-                                            request.getDownloadProgressListener()))
-                                    .build();
-                        }
-                    }).build();
-        } else {
-            okHttpClient = InternalNetworking.sHttpClient.newBuilder()
-                    .addNetworkInterceptor(new Interceptor() {
-                        @Override
-                        public Response intercept(Chain chain) throws IOException {
-                            Response originalResponse = chain.proceed(chain.request());
-                            return originalResponse.newBuilder()
-                                    .body(new ResponseProgressBody(originalResponse.body(),
-                                            request.getDownloadProgressListener()))
-                                    .build();
-                        }
-                    }).build();
-        }
-        request.setCall(okHttpClient.newCall(okHttpRequest));
-        return new DownloadANObservable<>(request);
-    }
-
-    public static <T> Observable<T> generateMultipartObservable(final Rx2ANRequest request) {
-        return new MultipartANObservable<>(request);
-    }
-
-    static final class SimpleANObservable<T> extends Observable<T> {
-
-        private Rx2ANRequest request;
-        private final Call originalCall;
-
-        SimpleANObservable(Rx2ANRequest request) {
-            this.request = request;
-            this.originalCall = request.getCall();
-        }
-
-        @Override
-        protected void subscribeActual(Observer<? super T> observer) {
-            Call call = originalCall.clone();
-            observer.onSubscribe(new ANDisposable(call));
-            boolean doNotSwallowError = false;
-            Response okHttpResponse = null;
-            try {
-                final long startTime = System.currentTimeMillis();
-                final long startBytes = TrafficStats.getTotalRxBytes();
-                okHttpResponse = call.execute();
-                final long timeTaken = System.currentTimeMillis() - startTime;
-                if (okHttpResponse.cacheResponse() == null) {
-                    final long finalBytes = TrafficStats.getTotalRxBytes();
-                    final long diffBytes;
-                    if (startBytes == TrafficStats.UNSUPPORTED || finalBytes == TrafficStats.UNSUPPORTED) {
-                        diffBytes = okHttpResponse.body().contentLength();
-                    } else {
-                        diffBytes = finalBytes - startBytes;
-                    }
-                    ConnectionClassManager.getInstance().updateBandwidth(diffBytes, timeTaken);
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                            (request.getRequestBody() != null &&
-                                    request.getRequestBody().contentLength() != 0) ?
-                                    request.getRequestBody().contentLength() : -1,
-                            okHttpResponse.body().contentLength(), false);
-                } else if (request.getAnalyticsListener() != null) {
-                    if (okHttpResponse.networkResponse() == null) {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, 0, 0, true);
-                    } else {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                (request.getRequestBody() != null && request.getRequestBody().contentLength() != 0) ?
-                                        request.getRequestBody().contentLength() : -1, 0, true);
-                    }
-                }
-                if (okHttpResponse.code() >= 400) {
-                    if (!call.isCanceled()) {
-                        observer.onError(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                                request, okHttpResponse.code()));
-                    }
-                } else {
-                    ANResponse<T> response = request.parseResponse(okHttpResponse);
-                    if (!response.isSuccess()) {
-                        if (!call.isCanceled()) {
-                            observer.onError(response.getError());
-                        }
-                    } else {
-                        if (!call.isCanceled()) {
-                            observer.onNext(response.getResult());
-                        }
-                        if (!call.isCanceled()) {
-                            doNotSwallowError = true;
-                            observer.onComplete();
-                        }
-                    }
-                }
-            } catch (IOException ioe) {
-                if (!call.isCanceled()) {
-                    observer.onError(Utils.getErrorForConnection(new ANError(ioe)));
-                }
-            } catch (Exception e) {
-                Exceptions.throwIfFatal(e);
-                if (doNotSwallowError) {
-                    RxJavaPlugins.onError(e);
-                } else if (!call.isCanceled()) {
-                    try {
-                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
-                    } catch (Exception e1) {
-                        Exceptions.throwIfFatal(e1);
-                        RxJavaPlugins.onError(new CompositeException(e, e1));
-                    }
-                }
-            } finally {
-                SourceCloseUtil.close(okHttpResponse, request);
-            }
-        }
-    }
-
-    static final class DownloadANObservable<T> extends Observable<T> {
-
-        private final Rx2ANRequest request;
-        private final Call originalCall;
-
-        DownloadANObservable(Rx2ANRequest request) {
-            this.request = request;
-            this.originalCall = request.getCall();
-        }
-
-        @Override
-        protected void subscribeActual(Observer<? super T> observer) {
-            Call call = originalCall.clone();
-            observer.onSubscribe(new ANDisposable(call));
-            boolean doNotSwallowError = false;
-            Response okHttpResponse;
-            try {
-                final long startTime = System.currentTimeMillis();
-                final long startBytes = TrafficStats.getTotalRxBytes();
-                okHttpResponse = request.getCall().execute();
-                Utils.saveFile(okHttpResponse, request.getDirPath(), request.getFileName());
-                final long timeTaken = System.currentTimeMillis() - startTime;
-                if (okHttpResponse.cacheResponse() == null) {
-                    final long finalBytes = TrafficStats.getTotalRxBytes();
-                    final long diffBytes;
-                    if (startBytes == TrafficStats.UNSUPPORTED ||
-                            finalBytes == TrafficStats.UNSUPPORTED) {
-                        diffBytes = okHttpResponse.body().contentLength();
-                    } else {
-                        diffBytes = finalBytes - startBytes;
-                    }
-                    ConnectionClassManager.getInstance().updateBandwidth(diffBytes, timeTaken);
-                    Utils.sendAnalytics(request.getAnalyticsListener(),
-                            timeTaken, -1, okHttpResponse.body().contentLength(), false);
-                } else if (request.getAnalyticsListener() != null) {
-                    Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, -1, 0, true);
-                }
-                if (okHttpResponse.code() >= 400) {
-                    if (!call.isCanceled()) {
-                        observer.onError(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                                request, okHttpResponse.code()));
-                    }
-                } else {
-                    if (!call.isCanceled()) {
-                        ANResponse<T> response = (ANResponse<T>) ANResponse.success(ANConstants.SUCCESS);
-                        observer.onNext(response.getResult());
-                    }
-                    if (!call.isCanceled()) {
-                        doNotSwallowError = true;
-                        observer.onComplete();
-                    }
-                }
-            } catch (IOException ioe) {
-                try {
-                    File destinationFile = new File(request.getDirPath() + File.separator + request.getFileName());
-                    if (destinationFile.exists()) {
-                        destinationFile.delete();
-                    }
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
-                if (!call.isCanceled()) {
-                    observer.onError(Utils.getErrorForConnection(new ANError(ioe)));
-                }
-            } catch (Exception e) {
-                Exceptions.throwIfFatal(e);
-                if (doNotSwallowError) {
-                    RxJavaPlugins.onError(e);
-                } else if (!call.isCanceled()) {
-                    try {
-                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
-                    } catch (Exception e1) {
-                        Exceptions.throwIfFatal(e1);
-                        RxJavaPlugins.onError(new CompositeException(e, e1));
-                    }
-                }
-            }
-        }
-    }
-
-    static final class MultipartANObservable<T> extends Observable<T> {
-
-        private final Rx2ANRequest request;
-
-        MultipartANObservable(Rx2ANRequest request) {
-            this.request = request;
-        }
-
-        @Override
-        protected void subscribeActual(Observer<? super T> observer) {
-            boolean doNotSwallowError = false;
-            Response okHttpResponse = null;
-            Request okHttpRequest;
-            try {
-                Request.Builder builder = new Request.Builder().url(request.getUrl());
-                InternalNetworking.addHeadersToRequestBuilder(builder, request);
-                final RequestBody requestBody = request.getMultiPartRequestBody();
-                final long requestBodyLength = requestBody.contentLength();
-                builder = builder.post(new RequestProgressBody(requestBody, request.getUploadProgressListener()));
-                if (request.getCacheControl() != null) {
-                    builder.cacheControl(request.getCacheControl());
-                }
-                okHttpRequest = builder.build();
-                if (request.getOkHttpClient() != null) {
-                    request.setCall(request
-                            .getOkHttpClient()
-                            .newBuilder()
-                            .cache(InternalNetworking.sHttpClient.cache())
-                            .build()
-                            .newCall(okHttpRequest));
-                } else {
-                    request.setCall(InternalNetworking.sHttpClient.newCall(okHttpRequest));
-                }
-                observer.onSubscribe(new ANDisposable(request.getCall()));
-                final long startTime = System.currentTimeMillis();
-                okHttpResponse = request.getCall().execute();
-                final long timeTaken = System.currentTimeMillis() - startTime;
-                if (request.getAnalyticsListener() != null) {
-                    if (okHttpResponse.cacheResponse() == null) {
-                        Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                requestBodyLength, okHttpResponse.body().contentLength(), false);
-                    } else {
-                        if (okHttpResponse.networkResponse() == null) {
-                            Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken, 0, 0, true);
-                        } else {
-                            Utils.sendAnalytics(request.getAnalyticsListener(), timeTaken,
-                                    requestBodyLength != 0 ? requestBodyLength : -1, 0, true);
-                        }
-                    }
-                }
-                if (okHttpResponse.code() >= 400) {
-                    if (!request.getCall().isCanceled()) {
-                        observer.onError(Utils.getErrorForServerResponse(new ANError(okHttpResponse),
-                                request, okHttpResponse.code()));
-                    }
-                } else {
-                    ANResponse<T> response = request.parseResponse(okHttpResponse);
-                    if (!response.isSuccess()) {
-                        if (!request.getCall().isCanceled()) {
-                            observer.onError(response.getError());
-                        }
-                    } else {
-                        if (!request.getCall().isCanceled()) {
-                            observer.onNext(response.getResult());
-                        }
-                        if (!request.getCall().isCanceled()) {
-                            doNotSwallowError = true;
-                            observer.onComplete();
-                        }
-                    }
-                }
-            } catch (IOException ioe) {
-                if (!request.getCall().isCanceled()) {
-                    observer.onError(Utils.getErrorForConnection(new ANError(ioe)));
-                }
-            } catch (Exception e) {
-                Exceptions.throwIfFatal(e);
-                if (doNotSwallowError) {
-                    RxJavaPlugins.onError(e);
-                } else if (!request.getCall().isCanceled()) {
-                    try {
-                        observer.onError(Utils.getErrorForConnection(new ANError(e)));
-                    } catch (Exception e1) {
-                        Exceptions.throwIfFatal(e1);
-                        RxJavaPlugins.onError(new CompositeException(e, e1));
-                    }
-                }
-            } finally {
-                SourceCloseUtil.close(okHttpResponse, request);
-            }
-        }
-    }
-
-    private static final class ANDisposable implements Disposable {
-
-        private final Call call;
-
-        private ANDisposable(Call call) {
-            this.call = call;
-        }
-
-        @Override
-        public void dispose() {
-            this.call.cancel();
-        }
-
-        @Override
-        public boolean isDisposed() {
-            return this.call.isCanceled();
-        }
-    }
-}
diff --git a/rx2-android-networking/src/main/res/values/strings.xml b/rx2-android-networking/src/main/res/values/strings.xml
deleted file mode 100644
index c5e2584..0000000
--- a/rx2-android-networking/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-    <string name="app_name">Rx2AndroidNetworking</string>
-</resources>
diff --git a/rx2-android-networking/src/test/java/com/rx2androidnetworking/ExampleUnitTest.java b/rx2-android-networking/src/test/java/com/rx2androidnetworking/ExampleUnitTest.java
deleted file mode 100644
index a650ac4..0000000
--- a/rx2-android-networking/src/test/java/com/rx2androidnetworking/ExampleUnitTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2androidnetworking;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/rx2sampleapp/.gitignore b/rx2sampleapp/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/rx2sampleapp/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/rx2sampleapp/build.gradle b/rx2sampleapp/build.gradle
deleted file mode 100644
index 1c38a20..0000000
--- a/rx2sampleapp/build.gradle
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-apply plugin: 'com.android.application'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        applicationId "com.rx2sampleapp"
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-
-        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
-        exclude group: 'com.android.support', module: 'support-annotations'
-    })
-    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    compile project(':rx2-android-networking')
-}
diff --git a/rx2sampleapp/proguard-rules.pro b/rx2sampleapp/proguard-rules.pro
deleted file mode 100644
index 6b7a2bf..0000000
--- a/rx2sampleapp/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/amitshekhar/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/rx2sampleapp/src/androidTest/java/com/rx2sampleapp/ExampleInstrumentedTest.java b/rx2sampleapp/src/androidTest/java/com/rx2sampleapp/ExampleInstrumentedTest.java
deleted file mode 100644
index 78d7f40..0000000
--- a/rx2sampleapp/src/androidTest/java/com/rx2sampleapp/ExampleInstrumentedTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.junit.Assert.*;
-
-/**
- * Instrumentation test, which will execute on an Android device.
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-@RunWith(AndroidJUnit4.class)
-public class ExampleInstrumentedTest {
-    @Test
-    public void useAppContext() throws Exception {
-        // Context of the app under test.
-        Context appContext = InstrumentationRegistry.getTargetContext();
-
-        assertEquals("com.rx2sampleapp", appContext.getPackageName());
-    }
-}
diff --git a/rx2sampleapp/src/main/AndroidManifest.xml b/rx2sampleapp/src/main/AndroidManifest.xml
deleted file mode 100644
index fb83a8c..0000000
--- a/rx2sampleapp/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.rx2sampleapp">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-
-    <application
-        android:name=".Rx2MyApplication"
-        android:allowBackup="true"
-        android:icon="@mipmap/ic_launcher"
-        android:label="@string/app_name"
-        android:supportsRtl="true"
-        android:theme="@style/AppTheme">
-        <activity android:name=".Rx2OperatorExampleActivity">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name=".Rx2ApiTestActivity"></activity>
-        <activity android:name=".SubscriptionActivity"></activity>
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/ApiEndPoint.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/ApiEndPoint.java
deleted file mode 100644
index 61656ed..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/ApiEndPoint.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rx2sampleapp;
-
-/**
- * Created by amitshekhar on 29/03/16.
- */
-public class ApiEndPoint {
-
-    public static final String BASE_URL = "https://fierce-cove-29863.herokuapp.com";
-    public static final String GET_JSON_ARRAY = "/getAllUsers/{pageNumber}";
-    public static final String GET_JSON_OBJECT = "/getAnUserDetail/{userId}";
-    public static final String CHECK_FOR_HEADER = "/checkForHeader";
-    public static final String POST_CREATE_AN_USER = "/createAnUser";
-    public static final String UPLOAD_IMAGE = "/uploadImage";
-
-}
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
deleted file mode 100644
index d6f85ae..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2ApiTestActivity.java
+++ /dev/null
@@ -1,486 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rx2sampleapp;
-
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Looper;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.rx2androidnetworking.Rx2ANRequest;
-import com.rx2androidnetworking.Rx2AndroidNetworking;
-import com.rx2sampleapp.model.User;
-import com.rx2sampleapp.utils.Utils;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.util.List;
-
-import io.reactivex.CompletableObserver;
-import io.reactivex.Single;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
-
-/**
- * Created by Prashant Gupta on 25-07-2016.
- */
-public class Rx2ApiTestActivity extends AppCompatActivity {
-
-    private static final String TAG = Rx2ApiTestActivity.class.getSimpleName();
-
-    @Override
-    protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_rx_api_test);
-    }
-
-    public void getAllUsers(View view) {
-        Rx2AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getObjectListSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void getAnUser(View view) {
-        Rx2AndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_OBJECT)
-                .addPathParameter("userId", "1")
-                .setUserAgent("getAnUser")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getObjectSingle(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void checkForHeaderGet(View view) {
-
-        Rx2ANRequest.GetRequestBuilder getRequestBuilder = new Rx2ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        getRequestBuilder.addHeaders("token", "1234")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void checkForHeaderPost(View view) {
-
-        Rx2ANRequest.PostRequestBuilder postRequestBuilder = Rx2AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        postRequestBuilder.addHeaders("token", "1234");
-
-        Rx2ANRequest rxAnRequest = postRequestBuilder.setTag(this)
-                .build();
-
-        rxAnRequest.setAnalyticsListener(new AnalyticsListener() {
-            @Override
-            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                Log.d(TAG, " bytesSent : " + bytesSent);
-                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                Log.d(TAG, " isFromCache : " + isFromCache);
-            }
-        });
-
-        rxAnRequest.getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void createAnUser(View view) {
-        Rx2AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Amit")
-                .addBodyParameter("lastname", "Shekhar")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void createAnUserJSONObject(View view) {
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put("firstname", "Rohit");
-            jsonObject.put("lastname", "Kumar");
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        Rx2AndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addJSONObjectBody(jsonObject)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getJSONObjectSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        Log.d(TAG, "onResponse object : " + jsonObject.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void downloadFile(final View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        Rx2AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getDownloadCompletable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new CompletableObserver() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void downloadImage(final View view) {
-        String url = "http://i.imgur.com/AtbX9iX.png";
-        Rx2AndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "image1.png")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getDownloadCompletable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new CompletableObserver() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-    public void uploadImage(final View view) {
-        Single<JSONObject> single = Rx2AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                        Log.d(TAG, "bytesUploaded : " + bytesUploaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getJSONObjectSingle();
-
-        single.subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        Log.d(TAG + "_1", "Image upload Completed");
-                        Log.d(TAG + "_1", "onResponse object : " + jsonObject.toString());
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-
-        single.subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<JSONObject>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull JSONObject jsonObject) {
-                        Log.d(TAG + "_2", "Image upload Completed");
-                        Log.d(TAG + "_2", "onResponse object : " + jsonObject.toString());
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-
-    }
-
-    public void getCurrentConnectionQuality(View view) {
-        Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
-    }
-
-    public void loadImage(View view) {
-        final String URL_IMAGE = "http://i.imgur.com/2M7Hasn.png";
-        Rx2AndroidNetworking.get(URL_IMAGE)
-                .setImageScaleType(null)
-                .setBitmapMaxHeight(0)
-                .setBitmapMaxWidth(0)
-                .setBitmapConfig(Bitmap.Config.ARGB_8888)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getBitmapSingle()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<Bitmap>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull Bitmap bitmap) {
-                        Log.d(TAG, "onResponse Bitmap");
-                        ImageView imageView = findViewById(R.id.imageView);
-                        imageView.setImageBitmap(bitmap);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-
-    }
-
-}
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2MyApplication.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2MyApplication.java
deleted file mode 100644
index e5569bc..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2MyApplication.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rx2sampleapp;
-
-import android.app.Application;
-import android.util.Log;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ConnectionQuality;
-import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
-
-public class Rx2MyApplication extends Application {
-
-    private static final String TAG = Rx2MyApplication.class.getSimpleName();
-    private static Rx2MyApplication appInstance = null;
-
-    public static Rx2MyApplication getInstance() {
-        return appInstance;
-    }
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        appInstance = this;
-        AndroidNetworking.initialize(getApplicationContext());
-        AndroidNetworking.enableLogging();
-        AndroidNetworking.setConnectionQualityChangeListener(new ConnectionQualityChangeListener() {
-            @Override
-            public void onChange(ConnectionQuality currentConnectionQuality, int currentBandwidth) {
-                Log.d(TAG, "onChange: currentConnectionQuality : " + currentConnectionQuality + " currentBandwidth : " + currentBandwidth);
-            }
-        });
-    }
-
-}
\ No newline at end of file
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
deleted file mode 100644
index 8dd2101..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/Rx2OperatorExampleActivity.java
+++ /dev/null
@@ -1,507 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.util.Pair;
-import android.view.View;
-
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.rx2androidnetworking.Rx2AndroidNetworking;
-import com.rx2sampleapp.model.ApiUser;
-import com.rx2sampleapp.model.User;
-import com.rx2sampleapp.model.UserDetail;
-import com.rx2sampleapp.utils.Utils;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import io.reactivex.Observable;
-import io.reactivex.ObservableSource;
-import io.reactivex.Observer;
-import io.reactivex.Single;
-import io.reactivex.SingleObserver;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.functions.BiFunction;
-import io.reactivex.functions.Function;
-import io.reactivex.functions.Predicate;
-import io.reactivex.schedulers.Schedulers;
-
-
-/**
- * Created by amitshekhar on 30/01/17.
- */
-public class Rx2OperatorExampleActivity extends AppCompatActivity {
-
-    private static final String TAG = Rx2OperatorExampleActivity.class.getSimpleName();
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_rx_operator_example);
-        testApi();
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-    }
-
-    /************************************
-     * Just an test api start
-     ************************************/
-
-    private void testApi() {
-
-        Single<List<User>> single = Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getObjectListSingle(User.class);
-
-        // first observer
-        single.subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        Log.d(TAG + "_1", "onSubscribe");
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        Log.d(TAG + "_1", "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG + "_1", throwable);
-                    }
-                });
-
-        // second observer
-        single.subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new SingleObserver<List<User>>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-                        Log.d(TAG + "_2", "onSubscribe");
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull List<User> users) {
-                        Log.d(TAG + "_2", "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG + "_2", throwable);
-                    }
-                });
-    }
-
-    /************************************
-     * map operator start
-     ************************************/
-
-    public void map(View view) {
-        Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUser/{userId}")
-                .addPathParameter("userId", "1")
-                .build()
-                .getObjectSingle(ApiUser.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .map(new Function<ApiUser, User>() {
-                    @Override
-                    public User apply(ApiUser apiUser) throws Exception {
-                        // here we get ApiUser from server
-                        User user = new User(apiUser);
-                        // then by converting, we are returning user
-                        return user;
-                    }
-                })
-                .subscribe(new SingleObserver<User>() {
-                    @Override
-                    public void onSubscribe(@NonNull Disposable disposable) {
-
-                    }
-
-                    @Override
-                    public void onSuccess(@NonNull User user) {
-                        Log.d(TAG, "user id : " + user.id);
-                        Log.d(TAG, "user firstname : " + user.firstname);
-                        Log.d(TAG, "user lastname : " + user.lastname);
-                    }
-
-                    @Override
-                    public void onError(@NonNull Throwable throwable) {
-                        Utils.logError(TAG, throwable);
-                    }
-                });
-    }
-
-
-    /************************************
-     * zip operator start
-     *********************************/
-
-    /*
-    * This observable return the list of User who loves cricket
-    */
-    private Observable<List<User>> getCricketFansObservable() {
-        return Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllCricketFans")
-                .build()
-                .getObjectListObservable(User.class);
-    }
-
-    /*
-    * This observable return the list of User who loves Football
-    */
-    private Observable<List<User>> getFootballFansObservable() {
-        return Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllFootballFans")
-                .build()
-                .getObjectListObservable(User.class);
-    }
-
-    /*
-    * This do the complete magic, make both network call
-    * and then returns the list of user who loves both
-    * Using zip operator to get both response at a time
-    */
-    private void findUsersWhoLovesBoth() {
-        // here we are using zip operator to combine both request
-        Observable.zip(getCricketFansObservable(), getFootballFansObservable(),
-                new BiFunction<List<User>, List<User>, List<User>>() {
-                    @Override
-                    public List<User> apply(List<User> cricketFans, List<User> footballFans) throws Exception {
-                        List<User> userWhoLovesBoth =
-                                filterUserWhoLovesBoth(cricketFans, footballFans);
-                        return userWhoLovesBoth;
-                    }
-                })
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onNext(List<User> users) {
-                        // do anything with user who loves both
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete");
-                    }
-                });
-    }
-
-    private List<User> filterUserWhoLovesBoth(List<User> cricketFans, List<User> footballFans) {
-        List<User> userWhoLovesBoth = new ArrayList<>();
-        for (User cricketFan : cricketFans) {
-            for (User footballFan : footballFans) {
-                if (cricketFan.id == footballFan.id) {
-                    userWhoLovesBoth.add(cricketFan);
-                }
-            }
-        }
-        return userWhoLovesBoth;
-    }
-
-
-    public void zip(View view) {
-        findUsersWhoLovesBoth();
-    }
-
-    /************************************
-     * flatMap and filter operator start
-     ************************************/
-
-    private Observable<List<User>> getAllMyFriendsObservable() {
-        return Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllFriends/{userId}")
-                .addPathParameter("userId", "1")
-                .build()
-                .getObjectListObservable(User.class);
-    }
-
-    public void flatMapAndFilter(View view) {
-        getAllMyFriendsObservable()
-                .flatMap(new Function<List<User>, ObservableSource<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public ObservableSource<User> apply(List<User> usersList) throws Exception {
-                        return Observable.fromIterable(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .filter(new Predicate<User>() {
-                    @Override
-                    public boolean test(User user) throws Exception {
-                        // filtering user who follows me.
-                        return user.isFollowing;
-                    }
-                })
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        // only the user who is following me comes here one by one
-                        Log.d(TAG, "user id : " + user.id);
-                        Log.d(TAG, "user firstname : " + user.firstname);
-                        Log.d(TAG, "user lastname : " + user.lastname);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete");
-                    }
-                });
-    }
-
-    /************************************
-     * take operator start
-     ************************************/
-
-    public void take(View view) {
-        getUserListObservable()
-                .flatMap(new Function<List<User>, ObservableSource<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public ObservableSource<User> apply(List<User> usersList) throws Exception {
-                        return Observable.fromIterable(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .take(4) // it will only emit first 4 users out of all
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        // // only four user comes here one by one
-                        Log.d(TAG, "user id : " + user.id);
-                        Log.d(TAG, "user firstname : " + user.firstname);
-                        Log.d(TAG, "user lastname : " + user.lastname);
-                        Log.d(TAG, "isFollowing : " + user.isFollowing);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete");
-                    }
-                });
-    }
-
-
-    /************************************
-     * flatMap operator start
-     ************************************/
-
-
-    public void flatMap(View view) {
-        getUserListObservable()
-                .flatMap(new Function<List<User>, ObservableSource<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public ObservableSource<User> apply(List<User> usersList) throws Exception {
-                        return Observable.fromIterable(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .flatMap(new Function<User, ObservableSource<UserDetail>>() {
-                    @Override
-                    public ObservableSource<UserDetail> apply(User user) throws Exception {
-                        // here we get the user one by one
-                        // and returns corresponding getUserDetailObservable
-                        // for that userId
-                        return getUserDetailObservable(user.id);
-                    }
-                })
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<UserDetail>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(UserDetail userDetail) {
-                        // do anything with userDetail
-                        Log.d(TAG, "userDetail id : " + userDetail.id);
-                        Log.d(TAG, "userDetail firstname : " + userDetail.firstname);
-                        Log.d(TAG, "userDetail lastname : " + userDetail.lastname);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        Log.d(TAG, "onComplete");
-                    }
-                });
-    }
-
-    /************************************
-     * flatMapWithZip operator start
-     ************************************/
-
-    private Observable<List<User>> getUserListObservable() {
-        return Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "10")
-                .build()
-                .getObjectListObservable(User.class);
-    }
-
-    private Observable<UserDetail> getUserDetailObservable(long id) {
-        return Rx2AndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUserDetail/{userId}")
-                .addPathParameter("userId", String.valueOf(id))
-                .build()
-                .getObjectObservable(UserDetail.class);
-    }
-
-    public void flatMapWithZip(View view) {
-        getUserListObservable()
-                .flatMap(new Function<List<User>, ObservableSource<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public ObservableSource<User> apply(List<User> usersList) throws Exception {
-                        return Observable.fromIterable(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .flatMap(new Function<User, ObservableSource<Pair<UserDetail, User>>>() {
-                    @Override
-                    public ObservableSource<Pair<UserDetail, User>> apply(User user) throws Exception {
-                        // here we get the user one by one and then we are zipping
-                        // two observable - one getUserDetailObservable (network call to get userDetail)
-                        // and another Observable.just(user) - just to emit user
-                        return Observable.zip(getUserDetailObservable(user.id),
-                                Observable.just(user),
-                                new BiFunction<UserDetail, User, Pair<UserDetail, User>>() {
-                                    @Override
-                                    public Pair<UserDetail, User> apply(UserDetail userDetail, User user) throws Exception {
-                                        // runs when network call completes
-                                        // we get here userDetail for the corresponding user
-                                        return new Pair<>(userDetail, user); // returning the pair(userDetail, user)
-                                    }
-                                });
-                    }
-                })
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<Pair<UserDetail, User>>() {
-                    @Override
-                    public void onComplete() {
-                        // do something onCompleted
-                        Log.d(TAG, "onComplete");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        // handle error
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onSubscribe(Disposable d) {
-
-                    }
-
-                    @Override
-                    public void onNext(Pair<UserDetail, User> pair) {
-                        // here we are getting the userDetail for the corresponding user one by one
-                        UserDetail userDetail = pair.first;
-                        User user = pair.second;
-                        Log.d(TAG, "userId : " + user.id);
-                        Log.d(TAG, "userDetail firstname : " + userDetail.firstname);
-                        Log.d(TAG, "userDetail lastname : " + userDetail.lastname);
-                    }
-                });
-    }
-
-    /************************************
-     * others start here
-     ************************************/
-
-    public void startRxApiTestActivity(View view) {
-        startActivity(new Intent(Rx2OperatorExampleActivity.this, Rx2ApiTestActivity.class));
-    }
-
-    public void startSubscriptionActivity(View view) {
-        startActivity(new Intent(Rx2OperatorExampleActivity.this, SubscriptionActivity.class));
-    }
-
-}
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
deleted file mode 100644
index c109a17..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/SubscriptionActivity.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp;
-
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-
-import com.rx2androidnetworking.Rx2AndroidNetworking;
-import com.rx2sampleapp.utils.Utils;
-
-import io.reactivex.Completable;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.observers.DisposableCompletableObserver;
-import io.reactivex.schedulers.Schedulers;
-
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public class SubscriptionActivity extends AppCompatActivity {
-
-    private static final String TAG = SubscriptionActivity.class.getSimpleName();
-    private static final String URL = "http://i.imgur.com/AtbX9iX.png";
-    private String dirPath;
-    private String fileName = "imgurimage.png";
-    private final CompositeDisposable disposables = new CompositeDisposable();
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_subscription);
-        dirPath = Utils.getRootDirPath(getApplicationContext());
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        disposables.clear();
-    }
-
-    public Completable getCompletable() {
-        return Rx2AndroidNetworking.download(URL, dirPath, fileName)
-                .build()
-                .getDownloadCompletable();
-    }
-
-    private DisposableCompletableObserver getDisposableObserver() {
-
-        return new DisposableCompletableObserver() {
-            @Override
-            public void onComplete() {
-                Log.d(TAG, "onCompleted");
-            }
-
-            @Override
-            public void onError(@NonNull Throwable throwable) {
-                Log.d(TAG, "onError " + throwable.getMessage());
-            }
-        };
-
-    }
-
-    public void downloadFile(View view) {
-        disposables.add(getCompletable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(getDisposableObserver()));
-    }
-}
\ No newline at end of file
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/model/ApiUser.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/model/ApiUser.java
deleted file mode 100644
index b8e94f8..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/model/ApiUser.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp.model;
-
-/**
- * Created by amitshekhar on 02/08/16.
- */
-public class ApiUser {
-    public long id;
-    public String firstname;
-    public String lastname;
-}
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/model/User.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/model/User.java
deleted file mode 100644
index 8f601d7..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/model/User.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp.model;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public class User {
-    public long id;
-    public String firstname;
-    public String lastname;
-    public boolean isFollowing;
-
-    public User(ApiUser apiUser) {
-        this.id = apiUser.id;
-        this.firstname = apiUser.firstname;
-        this.lastname = apiUser.lastname;
-    }
-}
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/model/UserDetail.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/model/UserDetail.java
deleted file mode 100644
index 0b6fbdf..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/model/UserDetail.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp.model;
-
-/**
- * Created by amitshekhar on 02/08/16.
- */
-public class UserDetail {
-
-    public long id;
-    public String firstname;
-    public String lastname;
-
-}
diff --git a/rx2sampleapp/src/main/java/com/rx2sampleapp/utils/Utils.java b/rx2sampleapp/src/main/java/com/rx2sampleapp/utils/Utils.java
deleted file mode 100644
index a984730..0000000
--- a/rx2sampleapp/src/main/java/com/rx2sampleapp/utils/Utils.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rx2sampleapp.utils;
-
-import android.content.Context;
-import android.os.Environment;
-import android.support.v4.content.ContextCompat;
-import android.util.Log;
-
-import com.androidnetworking.error.ANError;
-
-import java.io.File;
-
-/**
- * Created by Prashant Gupta on 29-07-2016.
- */
-public class Utils {
-
-    public static String getRootDirPath(Context context) {
-        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-            File file = ContextCompat.getExternalFilesDirs(context.getApplicationContext(), null)[0];
-            return file.getAbsolutePath();
-        } else {
-            return context.getApplicationContext().getFilesDir().getAbsolutePath();
-        }
-    }
-
-    public static void logError(String TAG, Throwable e) {
-        if (e instanceof ANError) {
-            ANError anError = (ANError) e;
-            if (anError.getErrorCode() != 0) {
-                // received ANError from server
-                // error.getErrorCode() - the ANError code from server
-                // error.getErrorBody() - the ANError body from server
-                // error.getErrorDetail() - just a ANError detail
-                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-            } else {
-                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-            }
-        } else {
-            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-        }
-    }
-
-}
diff --git a/rx2sampleapp/src/main/res/layout/activity_rx_api_test.xml b/rx2sampleapp/src/main/res/layout/activity_rx_api_test.xml
deleted file mode 100644
index 90b35c0..0000000
--- a/rx2sampleapp/src/main/res/layout/activity_rx_api_test.xml
+++ /dev/null
@@ -1,177 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getAllUsers"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getAllUsers"
-            android:text="/getAllUsers/{pageNumber}" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getAnUser"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getAnUser"
-            android:text="/getAnUser/{userId}" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkForHeaderGet"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkForHeaderGet"
-            android:text="GET : checkForHeader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkForHeaderPost"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkForHeaderPost"
-            android:text="POST : checkForHeader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/createAnUser"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="createAnUser"
-            android:text="/createAnUser" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/createAnUserJSONObject"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="createAnUserJSONObject"
-            android:text="/createAnUserJSONObject" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadFile"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadFile"
-            android:text="downloadFile" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadImage"
-            android:text="downloadImage" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/uploadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="uploadImage"
-            android:text="uploadImage" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getCurrentConnectionQuality"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getCurrentConnectionQuality"
-            android:text="getCurrentConnectionQuality" />
-
-        <Button
-            android:id="@+id/loadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="loadImage"
-            android:text="loadImage" />
-
-        <ImageView
-            android:id="@+id/imageView"
-            android:layout_width="200dp"
-            android:layout_height="200dp"
-            android:layout_gravity="center" />
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/rx2sampleapp/src/main/res/layout/activity_rx_operator_example.xml b/rx2sampleapp/src/main/res/layout/activity_rx_operator_example.xml
deleted file mode 100644
index 1fce022..0000000
--- a/rx2sampleapp/src/main/res/layout/activity_rx_operator_example.xml
+++ /dev/null
@@ -1,100 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <Button
-            android:id="@+id/map"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="map"
-            android:text="map" />
-
-        <Button
-            android:id="@+id/zip"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="zip"
-            android:text="zip" />
-
-        <Button
-            android:id="@+id/flatMapAndFilter"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="flatMapAndFilter"
-            android:text="flatMapAndFilter" />
-
-        <Button
-            android:id="@+id/take"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="take"
-            android:text="take" />
-
-        <Button
-            android:id="@+id/flatMap"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="flatMap"
-            android:text="flatMap" />
-
-        <Button
-            android:id="@+id/flatMapWithZip"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="flatMapWithZip"
-            android:text="flatMapWithZip" />
-
-        <Button
-            android:id="@+id/startRxApiTestActivity"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startRxApiTestActivity"
-            android:text="startRxApiTestActivity" />
-
-        <Button
-            android:id="@+id/startSubscriptionActivity"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startSubscriptionActivity"
-            android:text="startSubscriptionActivity" />
-
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/rx2sampleapp/src/main/res/layout/activity_subscription.xml b/rx2sampleapp/src/main/res/layout/activity_subscription.xml
deleted file mode 100644
index 72baf50..0000000
--- a/rx2sampleapp/src/main/res/layout/activity_subscription.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadFile"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadFile"
-            android:text="downloadFile" />
-
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/rx2sampleapp/src/main/res/mipmap-hdpi/ic_launcher.png b/rx2sampleapp/src/main/res/mipmap-hdpi/ic_launcher.png
deleted file mode 100644
index cde69bc..0000000
Binary files a/rx2sampleapp/src/main/res/mipmap-hdpi/ic_launcher.png and /dev/null differ
diff --git a/rx2sampleapp/src/main/res/mipmap-mdpi/ic_launcher.png b/rx2sampleapp/src/main/res/mipmap-mdpi/ic_launcher.png
deleted file mode 100644
index c133a0c..0000000
Binary files a/rx2sampleapp/src/main/res/mipmap-mdpi/ic_launcher.png and /dev/null differ
diff --git a/rx2sampleapp/src/main/res/mipmap-xhdpi/ic_launcher.png b/rx2sampleapp/src/main/res/mipmap-xhdpi/ic_launcher.png
deleted file mode 100644
index bfa42f0..0000000
Binary files a/rx2sampleapp/src/main/res/mipmap-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/rx2sampleapp/src/main/res/mipmap-xxhdpi/ic_launcher.png b/rx2sampleapp/src/main/res/mipmap-xxhdpi/ic_launcher.png
deleted file mode 100644
index 324e72c..0000000
Binary files a/rx2sampleapp/src/main/res/mipmap-xxhdpi/ic_launcher.png and /dev/null differ
diff --git a/rx2sampleapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/rx2sampleapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png
deleted file mode 100644
index aee44e1..0000000
Binary files a/rx2sampleapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png and /dev/null differ
diff --git a/rx2sampleapp/src/main/res/values-w820dp/dimens.xml b/rx2sampleapp/src/main/res/values-w820dp/dimens.xml
deleted file mode 100644
index c92595c..0000000
--- a/rx2sampleapp/src/main/res/values-w820dp/dimens.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
-         (such as screen margins) for screens with more than 820dp of available width. This
-         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
-    <dimen name="activity_horizontal_margin">64dp</dimen>
-</resources>
diff --git a/rx2sampleapp/src/main/res/values/colors.xml b/rx2sampleapp/src/main/res/values/colors.xml
deleted file mode 100644
index cda449d..0000000
--- a/rx2sampleapp/src/main/res/values/colors.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-    <color name="colorPrimary">#3F51B5</color>
-    <color name="colorPrimaryDark">#303F9F</color>
-    <color name="colorAccent">#FF4081</color>
-</resources>
diff --git a/rx2sampleapp/src/main/res/values/dimens.xml b/rx2sampleapp/src/main/res/values/dimens.xml
deleted file mode 100644
index 2553694..0000000
--- a/rx2sampleapp/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-</resources>
diff --git a/rx2sampleapp/src/main/res/values/strings.xml b/rx2sampleapp/src/main/res/values/strings.xml
deleted file mode 100644
index e0caa16..0000000
--- a/rx2sampleapp/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-    <string name="app_name">Rx2SampleApp</string>
-</resources>
diff --git a/rx2sampleapp/src/main/res/values/styles.xml b/rx2sampleapp/src/main/res/values/styles.xml
deleted file mode 100644
index 2e82b5e..0000000
--- a/rx2sampleapp/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<resources>
-
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
-        <item name="colorPrimary">@color/colorPrimary</item>
-        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
-        <item name="colorAccent">@color/colorAccent</item>
-    </style>
-
-</resources>
diff --git a/rx2sampleapp/src/test/java/com/rx2sampleapp/ExampleUnitTest.java b/rx2sampleapp/src/test/java/com/rx2sampleapp/ExampleUnitTest.java
deleted file mode 100644
index 52cbac2..0000000
--- a/rx2sampleapp/src/test/java/com/rx2sampleapp/ExampleUnitTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rx2sampleapp;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/rxsampleapp/.gitignore b/rxsampleapp/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/rxsampleapp/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/rxsampleapp/build.gradle b/rxsampleapp/build.gradle
deleted file mode 100644
index 9a99639..0000000
--- a/rxsampleapp/build.gradle
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-apply plugin: 'com.android.application'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        applicationId "com.rxsampleapp"
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    testCompile "junit:junit:$rootProject.ext.jUnitVersion"
-    compile "com.android.support:appcompat-v7:$rootProject.ext.supportAppCompatVersion"
-    compile project(':rx-android-networking')
-}
diff --git a/rxsampleapp/proguard-rules.pro b/rxsampleapp/proguard-rules.pro
deleted file mode 100644
index 6cea903..0000000
--- a/rxsampleapp/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in C:\Users\Psych Inc\AppData\Local\Android\sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/rxsampleapp/src/androidTest/java/com/rxsampleapp/ApplicationTest.java b/rxsampleapp/src/androidTest/java/com/rxsampleapp/ApplicationTest.java
deleted file mode 100644
index 404f463..0000000
--- a/rxsampleapp/src/androidTest/java/com/rxsampleapp/ApplicationTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxsampleapp;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-/**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
- */
-public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
-}
\ No newline at end of file
diff --git a/rxsampleapp/src/main/AndroidManifest.xml b/rxsampleapp/src/main/AndroidManifest.xml
deleted file mode 100644
index 0d85f83..0000000
--- a/rxsampleapp/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.rxsampleapp">
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-
-    <application
-        android:name=".RxMyApplication"
-        android:allowBackup="true"
-        android:icon="@mipmap/ic_launcher"
-        android:label="@string/app_name"
-        android:supportsRtl="true"
-        android:theme="@style/AppTheme">
-        <activity android:name=".RxOperatorExampleActivity">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name=".RxApiTestActivity"></activity>
-        <activity android:name=".SubscriptionActivity"></activity>
-    </application>
-
-</manifest>
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/ApiEndPoint.java b/rxsampleapp/src/main/java/com/rxsampleapp/ApiEndPoint.java
deleted file mode 100644
index cb8294d..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/ApiEndPoint.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxsampleapp;
-
-/**
- * Created by amitshekhar on 29/03/16.
- */
-public class ApiEndPoint {
-
-    public static final String BASE_URL = "https://fierce-cove-29863.herokuapp.com";
-    public static final String GET_JSON_ARRAY = "/getAllUsers/{pageNumber}";
-    public static final String GET_JSON_OBJECT = "/getAnUserDetail/{userId}";
-    public static final String CHECK_FOR_HEADER = "/checkForHeader";
-    public static final String POST_CREATE_AN_USER = "/createAnUser";
-    public static final String UPLOAD_IMAGE = "/uploadImage";
-
-}
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/RxApiTestActivity.java b/rxsampleapp/src/main/java/com/rxsampleapp/RxApiTestActivity.java
deleted file mode 100644
index b34746d..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/RxApiTestActivity.java
+++ /dev/null
@@ -1,592 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rxsampleapp;
-
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Looper;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.error.ANError;
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.UploadProgressListener;
-import com.rxandroidnetworking.RxANRequest;
-import com.rxandroidnetworking.RxAndroidNetworking;
-import com.rxsampleapp.model.User;
-import com.rxsampleapp.utils.Utils;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.util.List;
-
-import rx.Observer;
-import rx.Subscriber;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.schedulers.Schedulers;
-
-/**
- * Created by Prashant Gupta on 25-07-2016.
- */
-public class RxApiTestActivity extends AppCompatActivity {
-
-    private static final String TAG = RxApiTestActivity.class.getSimpleName();
-
-    @Override
-    protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_rx_api_test);
-    }
-
-    public void getAllUsers(View view) {
-        RxAndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_ARRAY)
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getObjectListObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : getAllUsers completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(List<User> users) {
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-                });
-    }
-
-    public void getAnUser(View view) {
-        RxAndroidNetworking.get(ApiEndPoint.BASE_URL + ApiEndPoint.GET_JSON_OBJECT)
-                .addPathParameter("userId", "1")
-                .setUserAgent("getAnUser")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getObjectObservable(User.class)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : getAnUser completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                    }
-                });
-    }
-
-    public void checkForHeaderGet(View view) {
-
-        RxANRequest.GetRequestBuilder getRequestBuilder = new RxANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        getRequestBuilder.addHeaders("token", "1234")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : checkForHeaderGet completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                });
-    }
-
-    public void checkForHeaderPost(View view) {
-
-        RxANRequest.PostRequestBuilder postRequestBuilder = RxAndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);
-
-        postRequestBuilder.addHeaders("token", "1234");
-
-        RxANRequest rxAnRequest = postRequestBuilder.setTag(this)
-                .build();
-
-        rxAnRequest.setAnalyticsListener(new AnalyticsListener() {
-            @Override
-            public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                Log.d(TAG, " bytesSent : " + bytesSent);
-                Log.d(TAG, " bytesReceived : " + bytesReceived);
-                Log.d(TAG, " isFromCache : " + isFromCache);
-            }
-        });
-
-        rxAnRequest.getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : checkForHeaderPost completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                });
-    }
-
-    public void createAnUser(View view) {
-        RxAndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addBodyParameter("firstname", "Amit")
-                .addBodyParameter("lastname", "Shekhar")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : createAnUser completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                });
-    }
-
-    public void createAnUserJSONObject(View view) {
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put("firstname", "Rohit");
-            jsonObject.put("lastname", "Kumar");
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        RxAndroidNetworking.post(ApiEndPoint.BASE_URL + ApiEndPoint.POST_CREATE_AN_USER)
-                .addJSONObjectBody(jsonObject)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Subscriber<JSONObject>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : createAnUserJSONObject completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                        Log.d(TAG, "onResponse isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                });
-    }
-
-    public void downloadFile(final View view) {
-        String url = "http://www.colorado.edu/conflict/peace/download/peace_problem.ZIP";
-        RxAndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "file1.zip")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setDownloadProgressListener(new DownloadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesDownloaded, long totalBytes) {
-                        Log.d(TAG, "bytesDownloaded : " + bytesDownloaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setDownloadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getDownloadObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(String s) {
-                        Log.d(TAG, "onNext : " + s);
-                    }
-                });
-    }
-
-    public void downloadImage(final View view) {
-        String url = "http://i.imgur.com/AtbX9iX.png";
-        RxAndroidNetworking.download(url, Utils.getRootDirPath(getApplicationContext()), "image1.png")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getDownloadObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<String>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "File download Completed");
-                        Log.d(TAG, "onDownloadComplete isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(String s) {
-                        Log.d(TAG, "onNext : " + s);
-                    }
-                });
-    }
-
-    public void uploadImage(final View view) {
-        RxAndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .setUploadProgressListener(new UploadProgressListener() {
-                    @Override
-                    public void onProgress(long bytesUploaded, long totalBytes) {
-                        Log.d(TAG, "bytesUploaded : " + bytesUploaded + " totalBytes : " + totalBytes);
-                        Log.d(TAG, "setUploadProgressListener isMainThread : " + String.valueOf(Looper.myLooper() == Looper.getMainLooper()));
-                    }
-                })
-                .getJSONObjectObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<JSONObject>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : uploadImage completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(JSONObject response) {
-                        Log.d(TAG, "Image upload Completed");
-                        Log.d(TAG, "onResponse object : " + response.toString());
-                    }
-                });
-    }
-
-    public void getCurrentConnectionQuality(View view) {
-        Log.d(TAG, "getCurrentConnectionQuality : " + AndroidNetworking.getCurrentConnectionQuality() + " currentBandwidth : " + AndroidNetworking.getCurrentBandwidth());
-    }
-
-    public void loadImage(View view) {
-        final String URL_IMAGE = "http://i.imgur.com/2M7Hasn.png";
-        RxAndroidNetworking.get(URL_IMAGE)
-                .setImageScaleType(null)
-                .setBitmapMaxHeight(0)
-                .setBitmapMaxWidth(0)
-                .setBitmapConfig(Bitmap.Config.ARGB_8888)
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getBitmapObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<Bitmap>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Bitmap");
-
-
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        if (e instanceof ANError) {
-                            ANError anError = (ANError) e;
-                            if (anError.getErrorCode() != 0) {
-                                // received ANError from server
-                                // error.getErrorCode() - the ANError code from server
-                                // error.getErrorBody() - the ANError body from server
-                                // error.getErrorDetail() - just a ANError detail
-                                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            } else {
-                                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-                            }
-                        } else {
-                            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-                        }
-                    }
-
-                    @Override
-                    public void onNext(Bitmap bitmap) {
-                        Log.d(TAG, "onResponse Bitmap");
-                        ImageView imageView = (ImageView) findViewById(R.id.imageView);
-                        imageView.setImageBitmap(bitmap);
-                    }
-                });
-
-    }
-
-}
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/RxMyApplication.java b/rxsampleapp/src/main/java/com/rxsampleapp/RxMyApplication.java
deleted file mode 100644
index 1a0d20c..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/RxMyApplication.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rxsampleapp;
-
-import android.app.Application;
-import android.util.Log;
-
-import com.androidnetworking.AndroidNetworking;
-import com.androidnetworking.common.ConnectionQuality;
-import com.androidnetworking.interfaces.ConnectionQualityChangeListener;
-
-public class RxMyApplication extends Application {
-
-    private static final String TAG = RxMyApplication.class.getSimpleName();
-    private static RxMyApplication appInstance = null;
-
-    public static RxMyApplication getInstance() {
-        return appInstance;
-    }
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        appInstance = this;
-        AndroidNetworking.initialize(getApplicationContext());
-        AndroidNetworking.enableLogging();
-        AndroidNetworking.setConnectionQualityChangeListener(new ConnectionQualityChangeListener() {
-            @Override
-            public void onChange(ConnectionQuality currentConnectionQuality, int currentBandwidth) {
-                Log.d(TAG, "onChange: currentConnectionQuality : " + currentConnectionQuality + " currentBandwidth : " + currentBandwidth);
-            }
-        });
-    }
-
-}
\ No newline at end of file
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/RxOperatorExampleActivity.java b/rxsampleapp/src/main/java/com/rxsampleapp/RxOperatorExampleActivity.java
deleted file mode 100644
index 99c620c..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/RxOperatorExampleActivity.java
+++ /dev/null
@@ -1,458 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rxsampleapp;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.util.Pair;
-import android.view.View;
-
-import com.androidnetworking.interfaces.AnalyticsListener;
-import com.google.gson.reflect.TypeToken;
-import com.rxandroidnetworking.RxAndroidNetworking;
-import com.rxsampleapp.model.ApiUser;
-import com.rxsampleapp.model.User;
-import com.rxsampleapp.model.UserDetail;
-import com.rxsampleapp.utils.Utils;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import rx.Observable;
-import rx.Observer;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.functions.Func1;
-import rx.functions.Func2;
-import rx.schedulers.Schedulers;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public class RxOperatorExampleActivity extends AppCompatActivity {
-
-    private static final String TAG = RxOperatorExampleActivity.class.getSimpleName();
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_rx_operator_example);
-        testApi();
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-    }
-
-    /************************************
-     * Just an test api start
-     ************************************/
-
-    private void testApi() {
-        RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "3")
-                .build()
-                .setAnalyticsListener(new AnalyticsListener() {
-                    @Override
-                    public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {
-                        Log.d(TAG, " timeTakenInMillis : " + timeTakenInMillis);
-                        Log.d(TAG, " bytesSent : " + bytesSent);
-                        Log.d(TAG, " bytesReceived : " + bytesReceived);
-                        Log.d(TAG, " isFromCache : " + isFromCache);
-                    }
-                })
-                .getParseObservable(new TypeToken<List<User>>() {
-                })
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onCompleted() {
-                        Log.d(TAG, "onComplete Detail : getAllUsers completed");
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(List<User> users) {
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-                });
-    }
-
-    /************************************
-     * map operator start
-     ************************************/
-
-    public void map(View view) {
-        RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUser/{userId}")
-                .addPathParameter("userId", "1")
-                .build()
-                .getParseObservable(new TypeToken<ApiUser>() {
-                })
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .map(new Func1<ApiUser, User>() {
-                    @Override
-                    public User call(ApiUser apiUser) {
-                        // here we get ApiUser from server
-                        User user = new User(apiUser);
-                        // then by converting, we are returning user
-                        return user;
-                    }
-                })
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onCompleted() {
-                        // do anything onComplete
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        // handle error
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        Log.d(TAG, "user id : " + user.id);
-                        Log.d(TAG, "user firstname : " + user.firstname);
-                        Log.d(TAG, "user lastname : " + user.lastname);
-                    }
-                });
-    }
-
-
-    /************************************
-     * zip operator start
-     *********************************/
-
-    /*
-    * This observable return the list of User who loves cricket
-    */
-    private Observable<List<User>> getCricketFansObservable() {
-        return RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllCricketFans")
-                .build()
-                .getParseObservable(new TypeToken<List<User>>() {
-                });
-    }
-
-    /*
-    * This observable return the list of User who loves Football
-    */
-    private Observable<List<User>> getFootballFansObservable() {
-        return RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllFootballFans")
-                .build()
-                .getParseObservable(new TypeToken<List<User>>() {
-                });
-    }
-
-    /*
-    * This do the complete magic, make both network call
-    * and then returns the list of user who loves both
-    * Using zip operator to get both response at a time
-    */
-    private void findUsersWhoLovesBoth() {
-        // here we are using zip operator to combine both request
-        Observable.zip(getCricketFansObservable(), getFootballFansObservable(),
-                new Func2<List<User>, List<User>, List<User>>() {
-                    @Override
-                    public List<User> call(List<User> cricketFans,
-                                           List<User> footballFans) {
-                        List<User> userWhoLovesBoth =
-                                filterUserWhoLovesBoth(cricketFans, footballFans);
-                        return userWhoLovesBoth;
-                    }
-                }
-        ).subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<User>>() {
-                    @Override
-                    public void onCompleted() {
-                        // do anything onComplete
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        // handle error
-                    }
-
-                    @Override
-                    public void onNext(List<User> users) {
-                        // do anything with user who loves both
-                        Log.d(TAG, "userList size : " + users.size());
-                        for (User user : users) {
-                            Log.d(TAG, "id : " + user.id);
-                            Log.d(TAG, "firstname : " + user.firstname);
-                            Log.d(TAG, "lastname : " + user.lastname);
-                        }
-                    }
-                });
-    }
-
-    private List<User> filterUserWhoLovesBoth(List<User> cricketFans, List<User> footballFans) {
-        List<User> userWhoLovesBoth = new ArrayList<User>();
-        for (User cricketFan : cricketFans) {
-            for (User footballFan : footballFans) {
-                if (cricketFan.id == footballFan.id) {
-                    userWhoLovesBoth.add(cricketFan);
-                }
-            }
-        }
-        return userWhoLovesBoth;
-    }
-
-
-    public void zip(View view) {
-        findUsersWhoLovesBoth();
-    }
-
-    /************************************
-     * flatMap and filter operator start
-     ************************************/
-
-    private Observable<List<User>> getAllMyFriendsObservable() {
-        return RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllFriends/{userId}")
-                .addPathParameter("userId", "1")
-                .build()
-                .getParseObservable(new TypeToken<List<User>>() {
-                });
-    }
-
-    public void flatMapAndFilter(View view) {
-        getAllMyFriendsObservable()
-                .flatMap(new Func1<List<User>, Observable<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public Observable<User> call(List<User> usersList) {
-                        return Observable.from(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .filter(new Func1<User, Boolean>() {
-                    @Override
-                    public Boolean call(User user) {
-                        // filtering user who follows me.
-                        return user.isFollowing;
-                    }
-                })
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onCompleted() {
-                        // do anything onComplete
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        // handle error
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        // only the user who is following me comes here one by one
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                        Log.d(TAG, "isFollowing : " + user.isFollowing);
-                    }
-                });
-    }
-
-    /************************************
-     * take operator start
-     ************************************/
-
-    public void take(View view) {
-        getUserListObservable()
-                .flatMap(new Func1<List<User>, Observable<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public Observable<User> call(List<User> usersList) {
-                        return Observable.from(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .take(4) // it will only emit first 4 users out of all
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<User>() {
-                    @Override
-                    public void onCompleted() {
-
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-
-                    }
-
-                    @Override
-                    public void onNext(User user) {
-                        // only four user comes here one by one
-                        Log.d(TAG, "id : " + user.id);
-                        Log.d(TAG, "firstname : " + user.firstname);
-                        Log.d(TAG, "lastname : " + user.lastname);
-                        Log.d(TAG, "isFollowing : " + user.isFollowing);
-                    }
-                });
-    }
-
-
-    /************************************
-     * flatMap operator start
-     ************************************/
-
-
-    public void flatMap(View view) {
-        getUserListObservable()
-                .flatMap(new Func1<List<User>, Observable<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public Observable<User> call(List<User> usersList) {
-                        return Observable.from(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .flatMap(new Func1<User, Observable<UserDetail>>() {
-                    @Override
-                    public Observable<UserDetail> call(User user) {
-                        // here we get the user one by one
-                        // and returns corresponding getUserDetailObservable
-                        // for that userId
-                        return getUserDetailObservable(user.id);
-                    }
-                })
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<UserDetail>() {
-                    @Override
-                    public void onCompleted() {
-                        // do something onCompleted
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        // handle error
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(UserDetail userDetail) {
-                        // do anything with userDetail
-                        Log.d(TAG, "userDetail id : " + userDetail.id);
-                        Log.d(TAG, "userDetail firstname : " + userDetail.firstname);
-                        Log.d(TAG, "userDetail lastname : " + userDetail.lastname);
-                    }
-                });
-    }
-
-    /************************************
-     * flatMapWithZip operator start
-     ************************************/
-
-    private Observable<List<User>> getUserListObservable() {
-        return RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}")
-                .addPathParameter("pageNumber", "0")
-                .addQueryParameter("limit", "10")
-                .build()
-                .getParseObservable(new TypeToken<List<User>>() {
-                });
-    }
-
-    private Observable<UserDetail> getUserDetailObservable(long id) {
-        return RxAndroidNetworking.get("https://fierce-cove-29863.herokuapp.com/getAnUserDetail/{userId}")
-                .addPathParameter("userId", String.valueOf(id))
-                .build()
-                .getParseObservable(new TypeToken<UserDetail>() {
-                });
-    }
-
-    public void flatMapWithZip(View view) {
-        getUserListObservable()
-                .flatMap(new Func1<List<User>, Observable<User>>() { // flatMap - to return users one by one
-                    @Override
-                    public Observable<User> call(List<User> usersList) {
-                        return Observable.from(usersList); // returning user one by one from usersList.
-                    }
-                })
-                .flatMap(new Func1<User, Observable<Pair<UserDetail, User>>>() {
-                    @Override
-                    public Observable<Pair<UserDetail, User>> call(User user) {
-                        // here we get the user one by one and then we are zipping
-                        // two observable - one getUserDetailObservable (network call to get userDetail)
-                        // and another Observable.just(user) - just to emit user
-                        return Observable.zip(getUserDetailObservable(user.id), // zip to combine two observable
-                                Observable.just(user),
-                                new Func2<UserDetail, User, Pair<UserDetail, User>>() {
-                                    @Override
-                                    public Pair<UserDetail, User> call(UserDetail userDetail, User user) {
-                                        // runs when network call completes
-                                        // we get here userDetail for the corresponding user
-                                        return new Pair<>(userDetail, user); // returning the pair(userDetail, user)
-                                    }
-                                });
-                    }
-                })
-                .subscribeOn(Schedulers.newThread())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<Pair<UserDetail, User>>() {
-                    @Override
-                    public void onCompleted() {
-                        // do something onCompleted
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        // handle error
-                        Utils.logError(TAG, e);
-                    }
-
-                    @Override
-                    public void onNext(Pair<UserDetail, User> pair) {
-                        // here we are getting the userDetail for the corresponding user one by one
-                        UserDetail userDetail = pair.first;
-                        User user = pair.second;
-                        Log.d(TAG, "userId : " + user.id);
-                        Log.d(TAG, "userDetail firstname : " + userDetail.firstname);
-                        Log.d(TAG, "userDetail lastname : " + userDetail.lastname);
-                    }
-                });
-    }
-
-    /************************************
-     * others start here
-     ************************************/
-
-    public void startRxApiTestActivity(View view) {
-        startActivity(new Intent(RxOperatorExampleActivity.this, RxApiTestActivity.class));
-    }
-
-    public void startSubscriptionActivity(View view) {
-        startActivity(new Intent(RxOperatorExampleActivity.this, SubscriptionActivity.class));
-    }
-
-}
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/SubscriptionActivity.java b/rxsampleapp/src/main/java/com/rxsampleapp/SubscriptionActivity.java
deleted file mode 100644
index f7bfad2..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/SubscriptionActivity.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxsampleapp;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
-import android.view.View;
-
-import com.rxandroidnetworking.RxAndroidNetworking;
-import com.rxsampleapp.utils.Utils;
-
-import rx.Observable;
-import rx.Observer;
-import rx.Subscription;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.schedulers.Schedulers;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public class SubscriptionActivity extends AppCompatActivity {
-
-    private static final String TAG = SubscriptionActivity.class.getSimpleName();
-    private static final String URL = "http://i.imgur.com/AtbX9iX.png";
-    private String dirPath;
-    private String fileName = "imgurimage.png";
-    Subscription subscription;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_subscription);
-        dirPath = Utils.getRootDirPath(getApplicationContext());
-    }
-
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        if (subscription != null) {
-            subscription.unsubscribe();
-        }
-    }
-
-    public Observable<String> getObservable() {
-        return RxAndroidNetworking.download(URL, dirPath, fileName)
-                .build()
-                .getDownloadObservable();
-    }
-
-    private Observer<String> getObserver() {
-        return new Observer<String>() {
-            @Override
-            public void onCompleted() {
-                Log.d(TAG, "onCompleted");
-            }
-
-            @Override
-            public void onError(Throwable e) {
-                Log.d(TAG, "onError " + e.getMessage());
-            }
-
-            @Override
-            public void onNext(String response) {
-                Log.d(TAG, "onResponse response : " + response);
-            }
-        };
-    }
-
-    public void downloadFile(View view) {
-        subscription = getObservable()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(getObserver());
-    }
-}
\ No newline at end of file
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/model/ApiUser.java b/rxsampleapp/src/main/java/com/rxsampleapp/model/ApiUser.java
deleted file mode 100644
index 2851e27..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/model/ApiUser.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rxsampleapp.model;
-
-/**
- * Created by amitshekhar on 02/08/16.
- */
-public class ApiUser {
-    public long id;
-    public String firstname;
-    public String lastname;
-}
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/model/User.java b/rxsampleapp/src/main/java/com/rxsampleapp/model/User.java
deleted file mode 100644
index 73b1849..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/model/User.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rxsampleapp.model;
-
-/**
- * Created by amitshekhar on 31/07/16.
- */
-public class User {
-    public long id;
-    public String firstname;
-    public String lastname;
-    public boolean isFollowing;
-
-    public User(ApiUser apiUser) {
-        this.id = apiUser.id;
-        this.firstname = apiUser.firstname;
-        this.lastname = apiUser.lastname;
-    }
-}
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/model/UserDetail.java b/rxsampleapp/src/main/java/com/rxsampleapp/model/UserDetail.java
deleted file mode 100644
index c292345..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/model/UserDetail.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *
- *  *    Copyright (C) 2016 Amit Shekhar
- *  *    Copyright (C) 2011 Android Open Source Project
- *  *
- *  *    Licensed under the Apache License, Version 2.0 (the "License");
- *  *    you may not use this file except in compliance with the License.
- *  *    You may obtain a copy of the License at
- *  *
- *  *        http://www.apache.org/licenses/LICENSE-2.0
- *  *
- *  *    Unless required by applicable law or agreed to in writing, software
- *  *    distributed under the License is distributed on an "AS IS" BASIS,
- *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  *    See the License for the specific language governing permissions and
- *  *    limitations under the License.
- *
- */
-
-package com.rxsampleapp.model;
-
-/**
- * Created by amitshekhar on 02/08/16.
- */
-public class UserDetail {
-
-    public long id;
-    public String firstname;
-    public String lastname;
-
-}
diff --git a/rxsampleapp/src/main/java/com/rxsampleapp/utils/Utils.java b/rxsampleapp/src/main/java/com/rxsampleapp/utils/Utils.java
deleted file mode 100644
index 5af3a5a..0000000
--- a/rxsampleapp/src/main/java/com/rxsampleapp/utils/Utils.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-package com.rxsampleapp.utils;
-
-import android.content.Context;
-import android.os.Environment;
-import android.support.v4.content.ContextCompat;
-import android.util.Log;
-
-import com.androidnetworking.error.ANError;
-
-import java.io.File;
-
-/**
- * Created by Prashant Gupta on 29-07-2016.
- */
-public class Utils {
-
-    public static String getRootDirPath(Context context) {
-        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-            File file = ContextCompat.getExternalFilesDirs(context.getApplicationContext(), null)[0];
-            return file.getAbsolutePath();
-        } else {
-            return context.getApplicationContext().getFilesDir().getAbsolutePath();
-        }
-    }
-
-    public static void logError(String TAG, Throwable e) {
-        if (e instanceof ANError) {
-            ANError anError = (ANError) e;
-            if (anError.getErrorCode() != 0) {
-                // received ANError from server
-                // error.getErrorCode() - the ANError code from server
-                // error.getErrorBody() - the ANError body from server
-                // error.getErrorDetail() - just a ANError detail
-                Log.d(TAG, "onError errorCode : " + anError.getErrorCode());
-                Log.d(TAG, "onError errorBody : " + anError.getErrorBody());
-                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-            } else {
-                // error.getErrorDetail() : connectionError, parseError, requestCancelledError
-                Log.d(TAG, "onError errorDetail : " + anError.getErrorDetail());
-            }
-        } else {
-            Log.d(TAG, "onError errorMessage : " + e.getMessage());
-        }
-    }
-
-}
diff --git a/rxsampleapp/src/main/res/layout/activity_rx_api_test.xml b/rxsampleapp/src/main/res/layout/activity_rx_api_test.xml
deleted file mode 100644
index 90b35c0..0000000
--- a/rxsampleapp/src/main/res/layout/activity_rx_api_test.xml
+++ /dev/null
@@ -1,177 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getAllUsers"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getAllUsers"
-            android:text="/getAllUsers/{pageNumber}" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getAnUser"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getAnUser"
-            android:text="/getAnUser/{userId}" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkForHeaderGet"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkForHeaderGet"
-            android:text="GET : checkForHeader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/checkForHeaderPost"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="checkForHeaderPost"
-            android:text="POST : checkForHeader" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/createAnUser"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="createAnUser"
-            android:text="/createAnUser" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/createAnUserJSONObject"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="createAnUserJSONObject"
-            android:text="/createAnUserJSONObject" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadFile"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadFile"
-            android:text="downloadFile" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadImage"
-            android:text="downloadImage" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/uploadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="uploadImage"
-            android:text="uploadImage" />
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/getCurrentConnectionQuality"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="getCurrentConnectionQuality"
-            android:text="getCurrentConnectionQuality" />
-
-        <Button
-            android:id="@+id/loadImage"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="loadImage"
-            android:text="loadImage" />
-
-        <ImageView
-            android:id="@+id/imageView"
-            android:layout_width="200dp"
-            android:layout_height="200dp"
-            android:layout_gravity="center" />
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/rxsampleapp/src/main/res/layout/activity_rx_operator_example.xml b/rxsampleapp/src/main/res/layout/activity_rx_operator_example.xml
deleted file mode 100644
index 1fce022..0000000
--- a/rxsampleapp/src/main/res/layout/activity_rx_operator_example.xml
+++ /dev/null
@@ -1,100 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <Button
-            android:id="@+id/map"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="map"
-            android:text="map" />
-
-        <Button
-            android:id="@+id/zip"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="zip"
-            android:text="zip" />
-
-        <Button
-            android:id="@+id/flatMapAndFilter"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="flatMapAndFilter"
-            android:text="flatMapAndFilter" />
-
-        <Button
-            android:id="@+id/take"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="take"
-            android:text="take" />
-
-        <Button
-            android:id="@+id/flatMap"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="flatMap"
-            android:text="flatMap" />
-
-        <Button
-            android:id="@+id/flatMapWithZip"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="flatMapWithZip"
-            android:text="flatMapWithZip" />
-
-        <Button
-            android:id="@+id/startRxApiTestActivity"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startRxApiTestActivity"
-            android:text="startRxApiTestActivity" />
-
-        <Button
-            android:id="@+id/startSubscriptionActivity"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="startSubscriptionActivity"
-            android:text="startSubscriptionActivity" />
-
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/rxsampleapp/src/main/res/layout/activity_subscription.xml b/rxsampleapp/src/main/res/layout/activity_subscription.xml
deleted file mode 100644
index 72baf50..0000000
--- a/rxsampleapp/src/main/res/layout/activity_subscription.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ /*
-  ~  *    Copyright (C) 2016 Amit Shekhar
-  ~  *    Copyright (C) 2011 Android Open Source Project
-  ~  *
-  ~  *    Licensed under the Apache License, Version 2.0 (the "License");
-  ~  *    you may not use this file except in compliance with the License.
-  ~  *    You may obtain a copy of the License at
-  ~  *
-  ~  *        http://www.apache.org/licenses/LICENSE-2.0
-  ~  *
-  ~  *    Unless required by applicable law or agreed to in writing, software
-  ~  *    distributed under the License is distributed on an "AS IS" BASIS,
-  ~  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~  *    See the License for the specific language governing permissions and
-  ~  *    limitations under the License.
-  ~  */
-  -->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:paddingBottom="@dimen/activity_vertical_margin"
-        android:paddingLeft="@dimen/activity_horizontal_margin"
-        android:paddingRight="@dimen/activity_horizontal_margin"
-        android:paddingTop="@dimen/activity_vertical_margin">
-
-        <ProgressBar
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center" />
-
-        <Button
-            android:id="@+id/downloadFile"
-            android:layout_width="match_parent"
-            android:layout_height="48dp"
-            android:layout_margin="8dp"
-            android:onClick="downloadFile"
-            android:text="downloadFile" />
-
-
-    </LinearLayout>
-
-</ScrollView>
\ No newline at end of file
diff --git a/rxsampleapp/src/main/res/mipmap-hdpi/ic_launcher.png b/rxsampleapp/src/main/res/mipmap-hdpi/ic_launcher.png
deleted file mode 100644
index cde69bc..0000000
Binary files a/rxsampleapp/src/main/res/mipmap-hdpi/ic_launcher.png and /dev/null differ
diff --git a/rxsampleapp/src/main/res/mipmap-mdpi/ic_launcher.png b/rxsampleapp/src/main/res/mipmap-mdpi/ic_launcher.png
deleted file mode 100644
index c133a0c..0000000
Binary files a/rxsampleapp/src/main/res/mipmap-mdpi/ic_launcher.png and /dev/null differ
diff --git a/rxsampleapp/src/main/res/mipmap-xhdpi/ic_launcher.png b/rxsampleapp/src/main/res/mipmap-xhdpi/ic_launcher.png
deleted file mode 100644
index bfa42f0..0000000
Binary files a/rxsampleapp/src/main/res/mipmap-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/rxsampleapp/src/main/res/mipmap-xxhdpi/ic_launcher.png b/rxsampleapp/src/main/res/mipmap-xxhdpi/ic_launcher.png
deleted file mode 100644
index 324e72c..0000000
Binary files a/rxsampleapp/src/main/res/mipmap-xxhdpi/ic_launcher.png and /dev/null differ
diff --git a/rxsampleapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/rxsampleapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png
deleted file mode 100644
index aee44e1..0000000
Binary files a/rxsampleapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png and /dev/null differ
diff --git a/rxsampleapp/src/main/res/values/colors.xml b/rxsampleapp/src/main/res/values/colors.xml
deleted file mode 100644
index df69d36..0000000
--- a/rxsampleapp/src/main/res/values/colors.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <color name="colorPrimary">#3F51B5</color>
-    <color name="colorPrimaryDark">#303F9F</color>
-    <color name="colorAccent">#FF4081</color>
-</resources>
diff --git a/rxsampleapp/src/main/res/values/dimens.xml b/rxsampleapp/src/main/res/values/dimens.xml
deleted file mode 100644
index 1e30179..0000000
--- a/rxsampleapp/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-
-    <dimen name="image_thumbnail_size">100dp</dimen>
-    <dimen name="image_thumbnail_spacing">1dp</dimen>
-</resources>
\ No newline at end of file
diff --git a/rxsampleapp/src/main/res/values/strings.xml b/rxsampleapp/src/main/res/values/strings.xml
deleted file mode 100644
index 3d42aa9..0000000
--- a/rxsampleapp/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-    <string name="app_name">RxSampleApp</string>
-</resources>
diff --git a/rxsampleapp/src/main/res/values/styles.xml b/rxsampleapp/src/main/res/values/styles.xml
deleted file mode 100644
index c1b962c..0000000
--- a/rxsampleapp/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<!--
-  ~    Copyright (C) 2016 Amit Shekhar
-  ~    Copyright (C) 2011 Android Open Source Project
-  ~
-  ~    Licensed under the Apache License, Version 2.0 (the "License");
-  ~    you may not use this file except in compliance with the License.
-  ~    You may obtain a copy of the License at
-  ~
-  ~        http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~    Unless required by applicable law or agreed to in writing, software
-  ~    distributed under the License is distributed on an "AS IS" BASIS,
-  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~    See the License for the specific language governing permissions and
-  ~    limitations under the License.
-  -->
-
-<resources>
-
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
-        <item name="colorPrimary">@color/colorPrimary</item>
-        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
-        <item name="colorAccent">@color/colorAccent</item>
-    </style>
-
-</resources>
diff --git a/rxsampleapp/src/test/java/com/rxsampleapp/ExampleUnitTest.java b/rxsampleapp/src/test/java/com/rxsampleapp/ExampleUnitTest.java
deleted file mode 100644
index 310e32b..0000000
--- a/rxsampleapp/src/test/java/com/rxsampleapp/ExampleUnitTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-package com.rxsampleapp;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * To work on unit tests, switch the Test Artifact in the Build Variants view.
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index 0ab0659..a1bfa0b 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,18 +1 @@
-/*
- *    Copyright (C) 2016 Amit Shekhar
- *    Copyright (C) 2011 Android Open Source Project
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-include ':app', ':android-networking', ':rx-android-networking', ':rxsampleapp', ':jackson-android-networking', ':rx2-android-networking', ':rx2sampleapp'
+include ':knhttp'
