diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
index 7a8e3891..abe6b124 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
@@ -24,11 +24,11 @@
                 "attribute vec4 position;\n" +
                 "attribute vec4 inputTextureCoordinate;\n" +
                 "\n" +
-                "uniform float texelWidthOffset;\n" +
-                "uniform float texelHeightOffset;\n" +
+                "uniform lowp float texelWidthOffset;\n" +
+                "uniform lowp float texelHeightOffset;\n" +
                 "\n" +
-                "varying vec2 blurCoordinate;\n" +
-                "varying vec2 blurOffset;\n" +
+                "varying lowp vec2 blurCoordinate;\n" +
+                "varying lowp vec2 blurOffset;\n" +
                 "\n" +
                 "void main()\n" +
                 "{\n" +
@@ -46,10 +46,10 @@ private static String fragmentShader(final int maxRadius) {
                 "const int SAMPLES = " + maxSamples + ";\n" +
                 "uniform sampler2D inputImageTexture;\n" +
                 "uniform int blurSample;\n" +
-                "uniform float blurSteps[SAMPLES];\n" +
-                "uniform float blurWeights[SAMPLES];\n" +
-                "varying vec2 blurCoordinate;\n" +
-                "varying vec2 blurOffset;\n" +
+                "uniform lowp  float blurSteps[SAMPLES];\n" +
+                "uniform lowp float blurWeights[SAMPLES];\n" +
+                "varying lowp  vec2 blurCoordinate;\n" +
+                "varying lowp  vec2 blurOffset;\n" +
                 "void main() {\n" +
                 "    lowp vec4 sum = vec4(0.0);\n" +
                 "    for (int i = 0; i < blurSample; ++i) {\n" +
@@ -177,6 +177,9 @@ private void initLocaltion(int index) {
     }
 
     public void setUniforms(int index) {
+        if (mFilters.size() <= index) {
+            return;
+        }
         GPUImageFilter filter = mFilters.get(index);
         filter.setFloatArray(mOffsetsLocation[index], mOffsets);
         filter.setFloatArray(mWeightsLocation[index], mWeights);
@@ -201,12 +204,7 @@ public void setRadiusInPixel(final int radiusInPixel) {
         mRadius = getRadius(mRadiusInPixel);
         prepareArrays(mRadius, mRadiusInPixel);
 
-        runOnDraw(new Runnable() {
-            @Override
-            public void run() {
-                setUniforms(0);
-                setUniforms(1);
-            }
-        });
+        setUniforms(0);
+        setUniforms(1);
     }
 }
