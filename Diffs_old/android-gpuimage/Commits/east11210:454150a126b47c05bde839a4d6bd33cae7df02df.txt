diff --git a/library/build.gradle b/library/build.gradle
index 4e0ded68..013802de 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.library'
-apply plugin: 'com.novoda.bintray-release'
+//apply plugin: 'com.novoda.bintray-release'
 
 android {
     compileSdkVersion COMPILE_SDK_VERSION as int
@@ -62,11 +62,11 @@ artifacts {
     archives androidJavadocsJar
 }
 
-publish {
-    userOrg = POM_DEVELOPER_ID
-    groupId = GROUP
-    artifactId = ARTIFACT_ID
-    publishVersion = VERSION_NAME
-    desc = POM_DESCRIPTION
-    website = POM_URL
-}
+//publish {
+//    userOrg = POM_DEVELOPER_ID
+//    groupId = GROUP
+//    artifactId = ARTIFACT_ID
+//    publishVersion = VERSION_NAME
+//    desc = POM_DESCRIPTION
+//    website = POM_URL
+//}
diff --git a/library/res/drawable-nodpi/texture_amaro_map.png b/library/res/drawable-nodpi/amaro_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_amaro_map.png
rename to library/res/drawable-nodpi/amaro_map.png
diff --git a/library/res/drawable-nodpi/blackboard.jpg b/library/res/drawable-nodpi/blackboard.jpg
new file mode 100644
index 00000000..0bf3a414
Binary files /dev/null and b/library/res/drawable-nodpi/blackboard.jpg differ
diff --git a/library/res/drawable-nodpi/texture_brannan_blowout.png b/library/res/drawable-nodpi/brannan_blowout.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_brannan_blowout.png
rename to library/res/drawable-nodpi/brannan_blowout.png
diff --git a/library/res/drawable-nodpi/texture_brannan_contrast.png b/library/res/drawable-nodpi/brannan_contrast.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_brannan_contrast.png
rename to library/res/drawable-nodpi/brannan_contrast.png
diff --git a/library/res/drawable-nodpi/texture_brannan_luma.png b/library/res/drawable-nodpi/brannan_luma.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_brannan_luma.png
rename to library/res/drawable-nodpi/brannan_luma.png
diff --git a/library/res/drawable-nodpi/texture_brannan_process.png b/library/res/drawable-nodpi/brannan_process.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_brannan_process.png
rename to library/res/drawable-nodpi/brannan_process.png
diff --git a/library/res/drawable-nodpi/texture_brannan_screen.png b/library/res/drawable-nodpi/brannan_screen.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_brannan_screen.png
rename to library/res/drawable-nodpi/brannan_screen.png
diff --git a/library/res/drawable-nodpi/texture_earlybird_blowout.png b/library/res/drawable-nodpi/earlybird_blowout.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_earlybird_blowout.png
rename to library/res/drawable-nodpi/earlybird_blowout.png
diff --git a/library/res/drawable-nodpi/texture_earlybird_curves.png b/library/res/drawable-nodpi/earlybird_curves.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_earlybird_curves.png
rename to library/res/drawable-nodpi/earlybird_curves.png
diff --git a/library/res/drawable-nodpi/texture_earlybird_map.png b/library/res/drawable-nodpi/earlybird_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_earlybird_map.png
rename to library/res/drawable-nodpi/earlybird_map.png
diff --git a/library/res/drawable-nodpi/texture_earlybird_overlay_map.png b/library/res/drawable-nodpi/earlybird_overlay_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_earlybird_overlay_map.png
rename to library/res/drawable-nodpi/earlybird_overlay_map.png
diff --git a/library/res/drawable-nodpi/edge_burn.jpg b/library/res/drawable-nodpi/edge_burn.jpg
new file mode 100644
index 00000000..b0888aa2
Binary files /dev/null and b/library/res/drawable-nodpi/edge_burn.jpg differ
diff --git a/library/res/drawable-nodpi/texture_hefe_gradient_map.png b/library/res/drawable-nodpi/hefe_gradient_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_hefe_gradient_map.png
rename to library/res/drawable-nodpi/hefe_gradient_map.png
diff --git a/library/res/drawable-nodpi/texture_hefe_map.png b/library/res/drawable-nodpi/hefe_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_hefe_map.png
rename to library/res/drawable-nodpi/hefe_map.png
diff --git a/library/res/drawable-nodpi/hefe_metal.jpg b/library/res/drawable-nodpi/hefe_metal.jpg
new file mode 100644
index 00000000..1c6fe7bb
Binary files /dev/null and b/library/res/drawable-nodpi/hefe_metal.jpg differ
diff --git a/library/res/drawable-nodpi/hefe_soft_light.jpg b/library/res/drawable-nodpi/hefe_soft_light.jpg
new file mode 100644
index 00000000..86d17ed3
Binary files /dev/null and b/library/res/drawable-nodpi/hefe_soft_light.jpg differ
diff --git a/library/res/drawable-nodpi/hudson_background.jpg b/library/res/drawable-nodpi/hudson_background.jpg
new file mode 100644
index 00000000..8f1a512a
Binary files /dev/null and b/library/res/drawable-nodpi/hudson_background.jpg differ
diff --git a/library/res/drawable-nodpi/texture_hudson_map.png b/library/res/drawable-nodpi/hudson_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_hudson_map.png
rename to library/res/drawable-nodpi/hudson_map.png
diff --git a/library/res/drawable-nodpi/ic_bokeh_01.jpg b/library/res/drawable-nodpi/ic_bokeh_01.jpg
new file mode 100644
index 00000000..2ed706f8
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_01.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_02.jpg b/library/res/drawable-nodpi/ic_bokeh_02.jpg
new file mode 100644
index 00000000..91b7453e
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_02.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_03.jpg b/library/res/drawable-nodpi/ic_bokeh_03.jpg
new file mode 100644
index 00000000..c4c1a744
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_03.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_04.jpg b/library/res/drawable-nodpi/ic_bokeh_04.jpg
new file mode 100644
index 00000000..e093e140
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_04.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_05.jpg b/library/res/drawable-nodpi/ic_bokeh_05.jpg
new file mode 100644
index 00000000..3ee72f27
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_05.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_06.jpg b/library/res/drawable-nodpi/ic_bokeh_06.jpg
new file mode 100644
index 00000000..e1a1a7de
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_06.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_07.jpg b/library/res/drawable-nodpi/ic_bokeh_07.jpg
new file mode 100644
index 00000000..a51ac866
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_07.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_08.jpg b/library/res/drawable-nodpi/ic_bokeh_08.jpg
new file mode 100644
index 00000000..6037a6fb
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_08.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_09.jpg b/library/res/drawable-nodpi/ic_bokeh_09.jpg
new file mode 100644
index 00000000..d3f28642
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_09.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_10.jpg b/library/res/drawable-nodpi/ic_bokeh_10.jpg
new file mode 100644
index 00000000..aa4c2aa4
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_10.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_11.jpg b/library/res/drawable-nodpi/ic_bokeh_11.jpg
new file mode 100644
index 00000000..cc26502b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_11.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_12.jpg b/library/res/drawable-nodpi/ic_bokeh_12.jpg
new file mode 100644
index 00000000..25bd3aed
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_12.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_13.jpg b/library/res/drawable-nodpi/ic_bokeh_13.jpg
new file mode 100644
index 00000000..7d82a788
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_13.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_14.jpg b/library/res/drawable-nodpi/ic_bokeh_14.jpg
new file mode 100644
index 00000000..0cfc5954
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_14.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_15.jpg b/library/res/drawable-nodpi/ic_bokeh_15.jpg
new file mode 100644
index 00000000..c5f71665
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_15.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_16.jpg b/library/res/drawable-nodpi/ic_bokeh_16.jpg
new file mode 100644
index 00000000..befcf554
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_16.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_17.jpg b/library/res/drawable-nodpi/ic_bokeh_17.jpg
new file mode 100644
index 00000000..d70af78b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_17.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_18.jpg b/library/res/drawable-nodpi/ic_bokeh_18.jpg
new file mode 100644
index 00000000..393e5ac2
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_18.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_19.jpg b/library/res/drawable-nodpi/ic_bokeh_19.jpg
new file mode 100644
index 00000000..a5dc876c
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_19.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_20.jpg b/library/res/drawable-nodpi/ic_bokeh_20.jpg
new file mode 100644
index 00000000..8c5a444b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_20.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_21.jpg b/library/res/drawable-nodpi/ic_bokeh_21.jpg
new file mode 100644
index 00000000..52fafaa1
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_21.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_22.jpg b/library/res/drawable-nodpi/ic_bokeh_22.jpg
new file mode 100644
index 00000000..7beb7566
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_22.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_23.jpg b/library/res/drawable-nodpi/ic_bokeh_23.jpg
new file mode 100644
index 00000000..71ef59eb
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_23.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_24.jpg b/library/res/drawable-nodpi/ic_bokeh_24.jpg
new file mode 100644
index 00000000..d989562d
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_24.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_25.jpg b/library/res/drawable-nodpi/ic_bokeh_25.jpg
new file mode 100644
index 00000000..358d08e8
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_25.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_26.jpg b/library/res/drawable-nodpi/ic_bokeh_26.jpg
new file mode 100644
index 00000000..09d5a3ae
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_26.jpg differ
diff --git a/library/res/drawable-nodpi/ic_bokeh_27.jpg b/library/res/drawable-nodpi/ic_bokeh_27.jpg
new file mode 100644
index 00000000..e3df65d2
Binary files /dev/null and b/library/res/drawable-nodpi/ic_bokeh_27.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_01.jpg b/library/res/drawable-nodpi/ic_texture_01.jpg
new file mode 100644
index 00000000..a5d3e6f8
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_01.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_02.jpg b/library/res/drawable-nodpi/ic_texture_02.jpg
new file mode 100644
index 00000000..5364915e
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_02.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_03.jpg b/library/res/drawable-nodpi/ic_texture_03.jpg
new file mode 100644
index 00000000..8d9bf083
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_03.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_04.jpg b/library/res/drawable-nodpi/ic_texture_04.jpg
new file mode 100644
index 00000000..3377c970
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_04.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_05.jpg b/library/res/drawable-nodpi/ic_texture_05.jpg
new file mode 100644
index 00000000..4dca1439
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_05.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_06.jpg b/library/res/drawable-nodpi/ic_texture_06.jpg
new file mode 100644
index 00000000..70852501
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_06.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_07.jpg b/library/res/drawable-nodpi/ic_texture_07.jpg
new file mode 100644
index 00000000..2d313f4d
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_07.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_08.jpg b/library/res/drawable-nodpi/ic_texture_08.jpg
new file mode 100644
index 00000000..53ad808a
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_08.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_09.jpg b/library/res/drawable-nodpi/ic_texture_09.jpg
new file mode 100644
index 00000000..2388da20
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_09.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_10.jpg b/library/res/drawable-nodpi/ic_texture_10.jpg
new file mode 100644
index 00000000..72532b91
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_10.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_11.jpg b/library/res/drawable-nodpi/ic_texture_11.jpg
new file mode 100644
index 00000000..800ab59d
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_11.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_12.jpg b/library/res/drawable-nodpi/ic_texture_12.jpg
new file mode 100644
index 00000000..6136e611
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_12.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_13.jpg b/library/res/drawable-nodpi/ic_texture_13.jpg
new file mode 100644
index 00000000..ac81555c
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_13.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_14.jpg b/library/res/drawable-nodpi/ic_texture_14.jpg
new file mode 100644
index 00000000..6df1aa9b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_14.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_15.jpg b/library/res/drawable-nodpi/ic_texture_15.jpg
new file mode 100644
index 00000000..3443073c
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_15.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_16.jpg b/library/res/drawable-nodpi/ic_texture_16.jpg
new file mode 100644
index 00000000..7907cd53
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_16.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_17.jpg b/library/res/drawable-nodpi/ic_texture_17.jpg
new file mode 100644
index 00000000..11137cb7
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_17.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_18.jpg b/library/res/drawable-nodpi/ic_texture_18.jpg
new file mode 100644
index 00000000..dfd934b9
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_18.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_19.jpg b/library/res/drawable-nodpi/ic_texture_19.jpg
new file mode 100644
index 00000000..6e96586f
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_19.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_20.jpg b/library/res/drawable-nodpi/ic_texture_20.jpg
new file mode 100644
index 00000000..2b033b00
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_20.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_21.jpg b/library/res/drawable-nodpi/ic_texture_21.jpg
new file mode 100644
index 00000000..9ee6836f
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_21.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_22.jpg b/library/res/drawable-nodpi/ic_texture_22.jpg
new file mode 100644
index 00000000..46843bd0
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_22.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_23.jpg b/library/res/drawable-nodpi/ic_texture_23.jpg
new file mode 100644
index 00000000..efc013f4
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_23.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_24.jpg b/library/res/drawable-nodpi/ic_texture_24.jpg
new file mode 100644
index 00000000..c11b8027
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_24.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_25.jpg b/library/res/drawable-nodpi/ic_texture_25.jpg
new file mode 100644
index 00000000..71aecc68
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_25.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_26.jpg b/library/res/drawable-nodpi/ic_texture_26.jpg
new file mode 100644
index 00000000..a3c9d42b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_26.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_27.jpg b/library/res/drawable-nodpi/ic_texture_27.jpg
new file mode 100644
index 00000000..62ce88cc
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_27.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_28.jpg b/library/res/drawable-nodpi/ic_texture_28.jpg
new file mode 100644
index 00000000..0941d6d9
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_28.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_29.jpg b/library/res/drawable-nodpi/ic_texture_29.jpg
new file mode 100644
index 00000000..458eee05
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_29.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_30.jpg b/library/res/drawable-nodpi/ic_texture_30.jpg
new file mode 100644
index 00000000..bb37b397
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_30.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_31.jpg b/library/res/drawable-nodpi/ic_texture_31.jpg
new file mode 100644
index 00000000..5eeef310
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_31.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_32.jpg b/library/res/drawable-nodpi/ic_texture_32.jpg
new file mode 100644
index 00000000..f6a3635b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_32.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_33.jpg b/library/res/drawable-nodpi/ic_texture_33.jpg
new file mode 100644
index 00000000..1db6398e
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_33.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_34.jpg b/library/res/drawable-nodpi/ic_texture_34.jpg
new file mode 100644
index 00000000..e191c506
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_34.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_35.jpg b/library/res/drawable-nodpi/ic_texture_35.jpg
new file mode 100644
index 00000000..55f827fa
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_35.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_36.jpg b/library/res/drawable-nodpi/ic_texture_36.jpg
new file mode 100644
index 00000000..c9882b38
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_36.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_37.jpg b/library/res/drawable-nodpi/ic_texture_37.jpg
new file mode 100644
index 00000000..d9ef0b3b
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_37.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_38.jpg b/library/res/drawable-nodpi/ic_texture_38.jpg
new file mode 100644
index 00000000..0aded37e
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_38.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_39.jpg b/library/res/drawable-nodpi/ic_texture_39.jpg
new file mode 100644
index 00000000..50754424
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_39.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_40.jpg b/library/res/drawable-nodpi/ic_texture_40.jpg
new file mode 100644
index 00000000..eca318e0
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_40.jpg differ
diff --git a/library/res/drawable-nodpi/ic_texture_41.jpg b/library/res/drawable-nodpi/ic_texture_41.jpg
new file mode 100644
index 00000000..1e38463f
Binary files /dev/null and b/library/res/drawable-nodpi/ic_texture_41.jpg differ
diff --git a/library/res/drawable-nodpi/texture_inkwell_map.png b/library/res/drawable-nodpi/inkwell_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_inkwell_map.png
rename to library/res/drawable-nodpi/inkwell_map.png
diff --git a/library/res/drawable-nodpi/texture_kelvin_map.png b/library/res/drawable-nodpi/kelvin_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_kelvin_map.png
rename to library/res/drawable-nodpi/kelvin_map.png
diff --git a/library/res/drawable-nodpi/texture_lomo_map.png b/library/res/drawable-nodpi/lomo_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_lomo_map.png
rename to library/res/drawable-nodpi/lomo_map.png
diff --git a/library/res/drawable-nodpi/lookup_amatorka.png b/library/res/drawable-nodpi/lookup_amatorka.png
new file mode 100644
index 00000000..4a2cc8ac
Binary files /dev/null and b/library/res/drawable-nodpi/lookup_amatorka.png differ
diff --git a/library/res/drawable-nodpi/lookup_miss_etikate.png b/library/res/drawable-nodpi/lookup_miss_etikate.png
new file mode 100644
index 00000000..e1317d78
Binary files /dev/null and b/library/res/drawable-nodpi/lookup_miss_etikate.png differ
diff --git a/library/res/drawable-nodpi/texture_nashville_map.png b/library/res/drawable-nodpi/nashville_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_nashville_map.png
rename to library/res/drawable-nodpi/nashville_map.png
diff --git a/library/res/drawable-nodpi/nblowout.jpg b/library/res/drawable-nodpi/nblowout.jpg
new file mode 100644
index 00000000..69d44c67
Binary files /dev/null and b/library/res/drawable-nodpi/nblowout.jpg differ
diff --git a/library/res/drawable-nodpi/texture_nmap.png b/library/res/drawable-nodpi/nmap.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_nmap.png
rename to library/res/drawable-nodpi/nmap.png
diff --git a/library/res/drawable-nodpi/overlay_map.jpg b/library/res/drawable-nodpi/overlay_map.jpg
new file mode 100644
index 00000000..68cb4282
Binary files /dev/null and b/library/res/drawable-nodpi/overlay_map.jpg differ
diff --git a/library/res/drawable-nodpi/texture_rise_map.png b/library/res/drawable-nodpi/rise_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_rise_map.png
rename to library/res/drawable-nodpi/rise_map.png
diff --git a/library/res/drawable-nodpi/texture_sierra_map.png b/library/res/drawable-nodpi/sierra_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_sierra_map.png
rename to library/res/drawable-nodpi/sierra_map.png
diff --git a/library/res/drawable-nodpi/sierra_vignette.jpg b/library/res/drawable-nodpi/sierra_vignette.jpg
new file mode 100644
index 00000000..244e1482
Binary files /dev/null and b/library/res/drawable-nodpi/sierra_vignette.jpg differ
diff --git a/library/res/drawable-nodpi/soft_light.jpg b/library/res/drawable-nodpi/soft_light.jpg
new file mode 100644
index 00000000..5433febe
Binary files /dev/null and b/library/res/drawable-nodpi/soft_light.jpg differ
diff --git a/library/res/drawable-nodpi/texture_sutro_curves.png b/library/res/drawable-nodpi/sutro_curves.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_sutro_curves.png
rename to library/res/drawable-nodpi/sutro_curves.png
diff --git a/library/res/drawable-nodpi/sutro_edge_burn.jpg b/library/res/drawable-nodpi/sutro_edge_burn.jpg
new file mode 100644
index 00000000..f1205a1a
Binary files /dev/null and b/library/res/drawable-nodpi/sutro_edge_burn.jpg differ
diff --git a/library/res/drawable-nodpi/sutro_metal.jpg b/library/res/drawable-nodpi/sutro_metal.jpg
new file mode 100644
index 00000000..8f1d8926
Binary files /dev/null and b/library/res/drawable-nodpi/sutro_metal.jpg differ
diff --git a/library/res/drawable-nodpi/texture_blackboard.png b/library/res/drawable-nodpi/texture_blackboard.png
deleted file mode 100644
index 0c914dc4..00000000
Binary files a/library/res/drawable-nodpi/texture_blackboard.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_edge_burn.png b/library/res/drawable-nodpi/texture_edge_burn.png
deleted file mode 100644
index 04f831b9..00000000
Binary files a/library/res/drawable-nodpi/texture_edge_burn.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_hefe_metal.png b/library/res/drawable-nodpi/texture_hefe_metal.png
deleted file mode 100644
index 3c137c67..00000000
Binary files a/library/res/drawable-nodpi/texture_hefe_metal.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_hefe_soft_light.png b/library/res/drawable-nodpi/texture_hefe_soft_light.png
deleted file mode 100644
index 47c3b9dd..00000000
Binary files a/library/res/drawable-nodpi/texture_hefe_soft_light.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_hudson_background.png b/library/res/drawable-nodpi/texture_hudson_background.png
deleted file mode 100644
index ff722c22..00000000
Binary files a/library/res/drawable-nodpi/texture_hudson_background.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_nblowout.png b/library/res/drawable-nodpi/texture_nblowout.png
deleted file mode 100644
index f97b39c2..00000000
Binary files a/library/res/drawable-nodpi/texture_nblowout.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_overlay_map.png b/library/res/drawable-nodpi/texture_overlay_map.png
deleted file mode 100644
index ea92b16c..00000000
Binary files a/library/res/drawable-nodpi/texture_overlay_map.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_sierra_vignette.png b/library/res/drawable-nodpi/texture_sierra_vignette.png
deleted file mode 100644
index 4f6d24b7..00000000
Binary files a/library/res/drawable-nodpi/texture_sierra_vignette.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_soft_light.png b/library/res/drawable-nodpi/texture_soft_light.png
deleted file mode 100644
index 352dbb7d..00000000
Binary files a/library/res/drawable-nodpi/texture_soft_light.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_sutro_edge_burn.png b/library/res/drawable-nodpi/texture_sutro_edge_burn.png
deleted file mode 100644
index fa40b611..00000000
Binary files a/library/res/drawable-nodpi/texture_sutro_edge_burn.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_sutro_metal.png b/library/res/drawable-nodpi/texture_sutro_metal.png
deleted file mode 100644
index 1b05d5bf..00000000
Binary files a/library/res/drawable-nodpi/texture_sutro_metal.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_toaster_metal.png b/library/res/drawable-nodpi/texture_toaster_metal.png
deleted file mode 100644
index 76e69dcb..00000000
Binary files a/library/res/drawable-nodpi/texture_toaster_metal.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_toaster_overlay_map_warm.png b/library/res/drawable-nodpi/texture_toaster_overlay_map_warm.png
deleted file mode 100644
index 32c5f4d9..00000000
Binary files a/library/res/drawable-nodpi/texture_toaster_overlay_map_warm.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_toaster_soft_light.png b/library/res/drawable-nodpi/texture_toaster_soft_light.png
deleted file mode 100644
index 0801e206..00000000
Binary files a/library/res/drawable-nodpi/texture_toaster_soft_light.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_valencia_gradient_map.png b/library/res/drawable-nodpi/texture_valencia_gradient_map.png
deleted file mode 100644
index d7a4cd34..00000000
Binary files a/library/res/drawable-nodpi/texture_valencia_gradient_map.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_vignette_map.png b/library/res/drawable-nodpi/texture_vignette_map.png
deleted file mode 100644
index 548201b0..00000000
Binary files a/library/res/drawable-nodpi/texture_vignette_map.png and /dev/null differ
diff --git a/library/res/drawable-nodpi/texture_toaster_color_shift.png b/library/res/drawable-nodpi/toaster_color_shift.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_toaster_color_shift.png
rename to library/res/drawable-nodpi/toaster_color_shift.png
diff --git a/library/res/drawable-nodpi/texture_toaster_curves.png b/library/res/drawable-nodpi/toaster_curves.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_toaster_curves.png
rename to library/res/drawable-nodpi/toaster_curves.png
diff --git a/library/res/drawable-nodpi/toaster_metal.jpg b/library/res/drawable-nodpi/toaster_metal.jpg
new file mode 100644
index 00000000..d40c544e
Binary files /dev/null and b/library/res/drawable-nodpi/toaster_metal.jpg differ
diff --git a/library/res/drawable-nodpi/toaster_overlay_map_warm.jpg b/library/res/drawable-nodpi/toaster_overlay_map_warm.jpg
new file mode 100644
index 00000000..9b0f2eb4
Binary files /dev/null and b/library/res/drawable-nodpi/toaster_overlay_map_warm.jpg differ
diff --git a/library/res/drawable-nodpi/toaster_soft_light.jpg b/library/res/drawable-nodpi/toaster_soft_light.jpg
new file mode 100644
index 00000000..01b6418b
Binary files /dev/null and b/library/res/drawable-nodpi/toaster_soft_light.jpg differ
diff --git a/library/res/drawable-nodpi/valencia_gradient_map.jpg b/library/res/drawable-nodpi/valencia_gradient_map.jpg
new file mode 100644
index 00000000..8e86912a
Binary files /dev/null and b/library/res/drawable-nodpi/valencia_gradient_map.jpg differ
diff --git a/library/res/drawable-nodpi/texture_valencia_map.png b/library/res/drawable-nodpi/valencia_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_valencia_map.png
rename to library/res/drawable-nodpi/valencia_map.png
diff --git a/library/res/drawable-nodpi/vignette_map.jpg b/library/res/drawable-nodpi/vignette_map.jpg
new file mode 100644
index 00000000..f4f5d1ea
Binary files /dev/null and b/library/res/drawable-nodpi/vignette_map.jpg differ
diff --git a/library/res/drawable-nodpi/texture_walden_map.png b/library/res/drawable-nodpi/walden_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_walden_map.png
rename to library/res/drawable-nodpi/walden_map.png
diff --git a/library/res/drawable-nodpi/texture_xpro_map.png b/library/res/drawable-nodpi/xpro_map.png
similarity index 100%
rename from library/res/drawable-nodpi/texture_xpro_map.png
rename to library/res/drawable-nodpi/xpro_map.png
diff --git a/library/res/raw/aqua.acv b/library/res/raw/aqua.acv
new file mode 100644
index 00000000..015cb1cf
Binary files /dev/null and b/library/res/raw/aqua.acv differ
diff --git a/library/res/raw/color_negative.acv b/library/res/raw/color_negative.acv
new file mode 100644
index 00000000..c854c73d
Binary files /dev/null and b/library/res/raw/color_negative.acv differ
diff --git a/library/res/raw/cross_process.acv b/library/res/raw/cross_process.acv
new file mode 100644
index 00000000..11603b46
Binary files /dev/null and b/library/res/raw/cross_process.acv differ
diff --git a/library/res/raw/crossprocess.acv b/library/res/raw/crossprocess.acv
new file mode 100644
index 00000000..89cfb01f
Binary files /dev/null and b/library/res/raw/crossprocess.acv differ
diff --git a/library/res/raw/dark_blue.acv b/library/res/raw/dark_blue.acv
new file mode 100644
index 00000000..658287d0
Binary files /dev/null and b/library/res/raw/dark_blue.acv differ
diff --git a/library/res/raw/darker.acv b/library/res/raw/darker.acv
new file mode 100644
index 00000000..1a384f49
Binary files /dev/null and b/library/res/raw/darker.acv differ
diff --git a/library/res/raw/increase_contrast.acv b/library/res/raw/increase_contrast.acv
new file mode 100644
index 00000000..dafe010e
Binary files /dev/null and b/library/res/raw/increase_contrast.acv differ
diff --git a/library/res/raw/lighter.acv b/library/res/raw/lighter.acv
new file mode 100644
index 00000000..151032ff
Binary files /dev/null and b/library/res/raw/lighter.acv differ
diff --git a/library/res/raw/linear_contrast.acv b/library/res/raw/linear_contrast.acv
new file mode 100644
index 00000000..82e86d1d
Binary files /dev/null and b/library/res/raw/linear_contrast.acv differ
diff --git a/library/res/raw/medium_contrast.acv b/library/res/raw/medium_contrast.acv
new file mode 100644
index 00000000..7f2d98fd
Binary files /dev/null and b/library/res/raw/medium_contrast.acv differ
diff --git a/library/res/raw/negative.acv b/library/res/raw/negative.acv
new file mode 100644
index 00000000..dc4042db
Binary files /dev/null and b/library/res/raw/negative.acv differ
diff --git a/library/res/raw/pure_memory.acv b/library/res/raw/pure_memory.acv
new file mode 100644
index 00000000..e9512d4d
Binary files /dev/null and b/library/res/raw/pure_memory.acv differ
diff --git a/library/res/raw/purple_green.acv b/library/res/raw/purple_green.acv
new file mode 100644
index 00000000..b762d892
Binary files /dev/null and b/library/res/raw/purple_green.acv differ
diff --git a/library/res/raw/strong_contrast.acv b/library/res/raw/strong_contrast.acv
new file mode 100644
index 00000000..8be0a324
Binary files /dev/null and b/library/res/raw/strong_contrast.acv differ
diff --git a/library/res/raw/yellow_blue.acv b/library/res/raw/yellow_blue.acv
new file mode 100644
index 00000000..326824a0
Binary files /dev/null and b/library/res/raw/yellow_blue.acv differ
diff --git a/library/res/raw/yellow_red.acv b/library/res/raw/yellow_red.acv
new file mode 100644
index 00000000..16a4ea18
Binary files /dev/null and b/library/res/raw/yellow_red.acv differ
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
index e3b5c42a..24598deb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
@@ -35,3 +35,5 @@ public GPUImageColorBurnBlendFilter() {
         super(COLOR_BURN_BLEND_FRAGMENT_SHADER);
     }
 }
+
+// TODO: Add parameter to swap texture1 and texture2
\ No newline at end of file
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterTools.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterTools.java
new file mode 100644
index 00000000..0bc57ae7
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterTools.java
@@ -0,0 +1,751 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.PointF;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import jp.co.cyberagent.android.gpuimage.filter.IF1977Filter;
+import jp.co.cyberagent.android.gpuimage.filter.IFAmaroFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFBrannanFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFEarlybirdFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFHefeFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFHudsonFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFInkwellFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFLomoFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFLordKelvinFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFNashvilleFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFRiseFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFSierraFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFSutroFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFToasterFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFValenciaFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFWaldenFilter;
+import jp.co.cyberagent.android.gpuimage.filter.IFXprollFilter;
+
+public class GPUImageFilterTools {
+
+    public interface FilterAdjuster {
+        void adjust(int percentage);
+        GPUImageFilter getFilter();
+    }
+
+    protected class SimpleAdjuster implements FilterAdjuster {
+        private GPUImageFilter filter;
+
+        public SimpleAdjuster(final GPUImageFilter filter) {
+            this.filter = filter;
+        }
+
+        public GPUImageFilter getFilter() {
+            return filter;
+        }
+
+        public void adjust(int percentage) {
+
+        }
+
+        protected float range(final int percentage, final float start, final float end) {
+            return (end - start) * percentage / 100.0f + start;
+        }
+
+        protected int range(final int percentage, final int start, final int end) {
+            return (end - start) * percentage / 100 + start;
+        }
+    }
+
+    private abstract class FilterCreator {
+        abstract public GPUImageFilter createFilter(Context context);
+        public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+            return null;
+        }
+    }
+
+    private class FilterWithTextureCreator extends FilterCreator {
+        private int resId;
+        private Class<? extends GPUImageTwoInputFilter> filterClass;
+
+        FilterWithTextureCreator(
+                Class<? extends GPUImageTwoInputFilter> filterClass,
+                int resId) {
+            super();
+            this.filterClass = filterClass;
+            this.resId = resId;
+        }
+
+        final protected int getResId() {
+            return resId;
+        }
+
+        public GPUImageFilter createFilter(Context context) {
+            try {
+                GPUImageTwoInputFilter filter = filterClass.newInstance();
+                filter.setBitmap(BitmapFactory.decodeResource(context.getResources(), getResId()));
+                return filter;
+            } catch (Exception e) {
+                e.printStackTrace();
+                return null;
+            }
+        }
+    }
+
+    private class FilterItem {
+        private String name;
+        private FilterCreator creator;
+
+        public FilterItem(String name, FilterCreator creator) {
+            this.name = name;
+            this.creator = creator;
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public FilterCreator getCreator() {
+            return creator;
+        }
+    }
+
+    private static GPUImageFilterTools instance;
+    private ArrayList<FilterItem> filterItems;
+
+    public static GPUImageFilterTools instance() {
+        if (null == instance) {
+            instance = new GPUImageFilterTools();
+        }
+        return instance;
+    }
+
+    final public int getCount() {
+        return filterItems.size();
+    }
+
+    final public String getName(int index) {
+        if (0 > index || index >= getCount()) {
+            return null;
+        }
+        return filterItems.get(index).getName();
+    }
+
+    final public String[] getNames() {
+        String[] names = new String[filterItems.size()];
+        int i = 0;
+        for (FilterItem item : filterItems) {
+            names[i] = item.getName();
+            ++i;
+        }
+        return names;
+    }
+
+    final public GPUImageFilter getFilter(int index, Context context) {
+        if (0 > index || index >= getCount()) {
+            return null;
+        }
+        return filterItems.get(index).getCreator().createFilter(context);
+    }
+
+    final public FilterAdjuster getAdjuster(int index, GPUImageFilter filter) {
+        if (0 > index || index >= getCount()) {
+            return null;
+        }
+        return filterItems.get(index).getCreator().createAdjuster(filter);
+    }
+
+    public ArrayList<FilterItem> getFilters() {
+        return filterItems;
+    }
+
+    private GPUImageFilterTools() {
+
+        filterItems = new ArrayList<>(120);
+
+        filterItems.add(new FilterItem("ZoomBlur", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageZoomBlurFilter();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImageZoomBlurFilter) getFilter()).setSize(range(percentage, 1.0f, 20.0f));
+                    }
+                };
+            }
+        }));
+
+        filterItems.add(new FilterItem("Halftone", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageHalftoneFilter();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImageHalftoneFilter) getFilter()).setFractionalWidthOfAPixel(range(percentage, 0.0f, 1.0f));
+                    }
+                };
+            }
+        }));
+
+        filterItems.add(new FilterItem("Rise", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFRiseFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Hudson", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFHudsonFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Xproll", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFXprollFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Sierra", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFSierraFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Lomo", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFLomoFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Earlybird", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFEarlybirdFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Sutro", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFSutroFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Toaster", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFToasterFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Brannan", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFBrannanFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Inkwell", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFInkwellFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Walden", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFWaldenFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Hefe", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFHefeFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Valencia", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFValenciaFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Nashville", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFNashvilleFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("1977", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IF1977Filter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Kelvin", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFLordKelvinFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Nashville", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new IFAmaroFilter(context);
+            }
+        }));
+
+        filterItems.add(new FilterItem("Negative", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.color_negative));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("CrossRGB", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.cross_process));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("Darker", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.darker));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("AddContrast", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.increase_contrast));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("Lighter", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.lighter));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("LinearContrast", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.linear_contrast));
+                return filter;
+            }
+        }));
+
+        // Medium Contrast
+        filterItems.add(new FilterItem("MedContrast", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.medium_contrast));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("XRay", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.negative));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("StrongContrast", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.strong_contrast));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("CrossProcess", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.crossprocess));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("PurpleGreen", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.purple_green));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("Aqua", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.aqua));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("YellowRed", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.yellow_red));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("PureMemory", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.pure_memory));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("YellowBlue", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.yellow_blue));
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("DarkBlue", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                filter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.dark_blue));
+                return filter;
+            }
+        }));
+
+        // TODO: Implement SoftElegance filter
+//        filterItems.add(new FilterItem("SoftElegance", new FilterCreator() {
+//            @Override
+//            public GPUImageFilter createFilter(Context context) {
+//
+//            }
+//        }));
+
+        // TODO: Implement MissEtikate filter
+
+        // TODO: Implement Amatorka filter
+
+
+        filterItems.add(new FilterItem("ToneCurve", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                GPUImageToneCurveFilter filter = new GPUImageToneCurveFilter();
+                PointF blueCtrl[] = new PointF[3];
+                blueCtrl[0] = new PointF(0.0f, 0.0f);
+                blueCtrl[1] = new PointF(0.5f, 0.5f);
+                blueCtrl[2] = new PointF(1.0f, 0.75f);
+                filter.setBlueControlPoints(blueCtrl);
+                return filter;
+            }
+        }));
+
+        filterItems.add(new FilterItem("Sepia", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageSepiaFilter();
+            }
+        }));
+
+        filterItems.add(new FilterItem("Sketch", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageSketchFilter();
+            }
+        }));
+
+        filterItems.add(new FilterItem("Toon", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageToonFilter();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImageToonFilter) getFilter()).setThreshold(range(percentage, 0.0f, 1.0f));
+                    }
+                };
+            }
+        }));
+
+        filterItems.add(new FilterItem("Pixelation", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImagePixelationFilter();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImagePixelationFilter) getFilter()).setPixel(range(percentage, 0.1f, 20.0f));
+                    }
+                };
+            }
+        }));
+
+        // TODO: Implement PolkaDot filter
+
+        filterItems.add(new FilterItem("CGA", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageCGAColorspaceFilter();
+            }
+        }));
+
+        filterItems.add(new FilterItem("Emboss", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageEmbossFilter();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImageEmbossFilter) getFilter()).setIntensity(range(percentage, 0.0f, 4.0f));
+                    }
+                };
+            }
+        }));
+
+        filterItems.add(new FilterItem("Posterize", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImagePosterizeFilter();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImagePosterizeFilter) getFilter()).setColorLevels((int) range(percentage, 0.0f, 255.0f));
+                    }
+                };
+            }
+        }));
+
+        filterItems.add(new FilterItem("Dilation", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageDilationFilter(3);
+            }
+        }));
+
+        // TODO: Implement Erosion filter
+
+        // TODO: Implement Openning filter
+
+        // TODO: Implement Closing filter
+
+        // TODO: Implement Median filter
+
+
+        filterItems.add(new FilterItem("ColorInvert", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageColorInvertFilter();
+            }
+        }));
+
+        filterItems.add(new FilterItem("Grayscale", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageGrayscaleFilter();
+            }
+        }));
+
+        filterItems.add(new FilterItem("FalseColor", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageFalseColorFilter();
+            }
+        }));
+
+        // TODO: Implement Luminance Threshold filter
+
+        filterItems.add(new FilterItem("SobelEdge", new FilterCreator() {
+            @Override
+            public GPUImageFilter createFilter(Context context) {
+                return new GPUImageSobelEdgeDetection();
+            }
+            @Override
+            public FilterAdjuster createAdjuster(final GPUImageFilter filter) {
+                return new SimpleAdjuster(filter) {
+                    @Override
+                    public void adjust(int percentage) {
+                        ((GPUImageSobelEdgeDetection) getFilter()).setLineSize(range(percentage, 1.0f, 10.0f));
+                    }
+                };
+            }
+        }));
+
+        // TODO: Implement PrewittEdgeDetection filter
+
+        // TODO: Implement Mosaic filter
+
+        for (int i = 1; i <= 27; ++i) {
+            final String name = String.format("Bokeh_%02d", i);
+            filterItems.add(new FilterItem(name,
+                    new FilterWithTextureCreator(
+                            GPUImageScreenBlendFilter.class,
+                            R.drawable.ic_bokeh_01 + i - 1)));
+        }
+
+        final byte HardLightBlend = 0;
+        final byte MultiplyBlend = 1;
+        final byte OverlayBlend = 2;
+        final byte ColorBurnBlend = 3;
+        final byte DissolveBlend = 4;
+
+        final byte FILTER_TYPE[] = {
+                HardLightBlend,   // 01
+                DissolveBlend,    // 02
+                MultiplyBlend,    // 03
+                MultiplyBlend,    // 04
+                MultiplyBlend,    // 05
+                MultiplyBlend,    // 06
+                MultiplyBlend,    // 07
+                MultiplyBlend,    // 08
+                MultiplyBlend,    // 09
+                HardLightBlend,   // 10
+                MultiplyBlend,    // 11
+                MultiplyBlend,    // 12
+                MultiplyBlend,    // 13
+                MultiplyBlend,    // 14
+                MultiplyBlend,    // 15
+                MultiplyBlend,    // 16
+                HardLightBlend,   // 17
+                MultiplyBlend,    // 18
+                HardLightBlend,   // 19
+                OverlayBlend,     // 20
+                MultiplyBlend,    // 21
+                OverlayBlend,     // 22
+                HardLightBlend,   // 23
+                MultiplyBlend,    // 24
+                OverlayBlend,     // 25
+                OverlayBlend,     // 26
+                OverlayBlend,     // 27
+                DissolveBlend,    // 28
+                HardLightBlend,   // 29
+                MultiplyBlend,    // 30
+                MultiplyBlend,    // 31
+                MultiplyBlend,    // 32
+                HardLightBlend,   // 33
+                ColorBurnBlend,   // 34
+                MultiplyBlend,    // 35
+                MultiplyBlend,    // 36
+                MultiplyBlend,    // 37
+                MultiplyBlend,    // 38
+                DissolveBlend,    // 39
+                MultiplyBlend,    // 40
+                ColorBurnBlend,   // 41
+        };
+        for (int i = 0; i < FILTER_TYPE.length; ++i) {
+            final String name = String.format("Texture_%02d", i + 1);
+            Class<? extends GPUImageTwoInputFilter> filterClass;
+            switch (FILTER_TYPE[i]) {
+                case HardLightBlend:
+                    filterClass = GPUImageHardLightBlendFilter.class;
+                    break;
+                case MultiplyBlend:
+                    filterClass = GPUImageMultiplyBlendFilter.class;
+                    break;
+                case OverlayBlend:
+                    filterClass = GPUImageOverlayBlendFilter.class;
+                    break;
+                case ColorBurnBlend:
+                    filterClass = GPUImageColorBurnBlendFilter.class;
+                    break;
+                case DissolveBlend:
+                    filterClass = GPUImageDissolveBlendFilter.class;
+                    break;
+                default:
+                    continue;
+            }
+            filterItems.add(new FilterItem(name,
+                    new FilterWithTextureCreator(
+                            filterClass, R.drawable.ic_texture_01 + i)));
+        }
+    }
+
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
index 5bcb9c90..57fdd7a8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
@@ -58,3 +58,5 @@ public GPUImageHardLightBlendFilter() {
         super(HARD_LIGHT_BLEND_FRAGMENT_SHADER);
     }
 }
+
+// TODO: Add parameter to swap texture1 and texture2
\ No newline at end of file
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IF1977Filter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IF1977Filter.java
index 1724a297..5f764700 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IF1977Filter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IF1977Filter.java
@@ -35,7 +35,7 @@ public IF1977Filter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_nmap);
-        addInputTexture(R.drawable.texture_nblowout);
+        addInputTexture(R.drawable.nmap);
+        addInputTexture(R.drawable.nblowout);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFAmaroFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFAmaroFilter.java
index 328b911c..e220c216 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFAmaroFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFAmaroFilter.java
@@ -33,8 +33,8 @@ public IFAmaroFilter(Context context) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_blackboard);
-        addInputTexture(R.drawable.texture_overlay_map);
-        addInputTexture(R.drawable.texture_amaro_map);
+        addInputTexture(R.drawable.blackboard);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.amaro_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFBrannanFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFBrannanFilter.java
index 3e71ade4..5bad6f87 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFBrannanFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFBrannanFilter.java
@@ -90,10 +90,10 @@ public IFBrannanFilter(Context context) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_brannan_process);
-        addInputTexture(R.drawable.texture_brannan_blowout);
-        addInputTexture(R.drawable.texture_brannan_contrast);
-        addInputTexture(R.drawable.texture_brannan_luma);
-        addInputTexture(R.drawable.texture_brannan_screen);
+        addInputTexture(R.drawable.brannan_process);
+        addInputTexture(R.drawable.brannan_blowout);
+        addInputTexture(R.drawable.brannan_contrast);
+        addInputTexture(R.drawable.brannan_luma);
+        addInputTexture(R.drawable.brannan_screen);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFEarlybirdFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFEarlybirdFilter.java
index a05eb93c..2f3e79aa 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFEarlybirdFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFEarlybirdFilter.java
@@ -122,10 +122,10 @@ public IFEarlybirdFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_earlybird_curves);
-        addInputTexture(R.drawable.texture_earlybird_overlay_map);
-        addInputTexture(R.drawable.texture_vignette_map);
-        addInputTexture(R.drawable.texture_earlybird_blowout);
-        addInputTexture(R.drawable.texture_earlybird_map);
+        addInputTexture(R.drawable.earlybird_curves);
+        addInputTexture(R.drawable.earlybird_overlay_map);
+        addInputTexture(R.drawable.vignette_map);
+        addInputTexture(R.drawable.earlybird_blowout);
+        addInputTexture(R.drawable.earlybird_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHefeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHefeFilter.java
index caff1b13..e5869cdc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHefeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHefeFilter.java
@@ -54,10 +54,10 @@ public IFHefeFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_edge_burn);
-        addInputTexture(R.drawable.texture_hefe_map);
-        addInputTexture(R.drawable.texture_hefe_gradient_map);
-        addInputTexture(R.drawable.texture_hefe_soft_light);
-        addInputTexture(R.drawable.texture_hefe_metal);
+        addInputTexture(R.drawable.edge_burn);
+        addInputTexture(R.drawable.hefe_map);
+        addInputTexture(R.drawable.hefe_gradient_map);
+        addInputTexture(R.drawable.hefe_soft_light);
+        addInputTexture(R.drawable.hefe_metal);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHudsonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHudsonFilter.java
index dddaaf62..46f90c8b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHudsonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFHudsonFilter.java
@@ -42,8 +42,8 @@ public IFHudsonFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_hudson_background);
-        addInputTexture(R.drawable.texture_overlay_map);
-        addInputTexture(R.drawable.texture_hudson_map);
+        addInputTexture(R.drawable.hudson_background);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.hudson_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFInkwellFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFInkwellFilter.java
index e2cf1482..58fbf20e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFInkwellFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFInkwellFilter.java
@@ -29,6 +29,6 @@ public IFInkwellFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_inkwell_map);
+        addInputTexture(R.drawable.inkwell_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLomoFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLomoFilter.java
index c06052b8..c502411f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLomoFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLomoFilter.java
@@ -48,7 +48,7 @@ public IFLomoFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_lomo_map);
-        addInputTexture(R.drawable.texture_vignette_map);
+        addInputTexture(R.drawable.lomo_map);
+        addInputTexture(R.drawable.vignette_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLordKelvinFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLordKelvinFilter.java
index 820aa9b1..5db0d4bd 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLordKelvinFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFLordKelvinFilter.java
@@ -40,6 +40,6 @@ public IFLordKelvinFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_kelvin_map);
+        addInputTexture(R.drawable.kelvin_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFNashvilleFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFNashvilleFilter.java
index eaa7c57e..d9e1895e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFNashvilleFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFNashvilleFilter.java
@@ -31,6 +31,6 @@ public IFNashvilleFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_nashville_map);
+        addInputTexture(R.drawable.nashville_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFRiseFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFRiseFilter.java
index 609eb4f6..551f2a2a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFRiseFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFRiseFilter.java
@@ -33,8 +33,8 @@ public IFRiseFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_blackboard);
-        addInputTexture(R.drawable.texture_overlay_map);
-        addInputTexture(R.drawable.texture_rise_map);
+        addInputTexture(R.drawable.blackboard);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.rise_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSierraFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSierraFilter.java
index 87e5ab28..be40817f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSierraFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSierraFilter.java
@@ -42,8 +42,8 @@ public IFSierraFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_sierra_vignette);
-        addInputTexture(R.drawable.texture_overlay_map);
-        addInputTexture(R.drawable.texture_sierra_map);
+        addInputTexture(R.drawable.sierra_vignette);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.sierra_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSutroFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSutroFilter.java
index 6001d0a4..273ab93d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSutroFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFSutroFilter.java
@@ -58,10 +58,10 @@ public IFSutroFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_vignette_map);
-        addInputTexture(R.drawable.texture_sutro_metal);
-        addInputTexture(R.drawable.texture_soft_light);
-        addInputTexture(R.drawable.texture_sutro_edge_burn);
-        addInputTexture(R.drawable.texture_sutro_curves);
+        addInputTexture(R.drawable.vignette_map);
+        addInputTexture(R.drawable.sutro_metal);
+        addInputTexture(R.drawable.soft_light);
+        addInputTexture(R.drawable.sutro_edge_burn);
+        addInputTexture(R.drawable.sutro_curves);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFToasterFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFToasterFilter.java
index a6682ba9..7fb48f51 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFToasterFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFToasterFilter.java
@@ -81,10 +81,10 @@ public IFToasterFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_toaster_metal);
-        addInputTexture(R.drawable.texture_toaster_soft_light);
-        addInputTexture(R.drawable.texture_toaster_curves);
-        addInputTexture(R.drawable.texture_toaster_overlay_map_warm);
-        addInputTexture(R.drawable.texture_toaster_color_shift);
+        addInputTexture(R.drawable.toaster_metal);
+        addInputTexture(R.drawable.toaster_soft_light);
+        addInputTexture(R.drawable.toaster_curves);
+        addInputTexture(R.drawable.toaster_overlay_map_warm);
+        addInputTexture(R.drawable.toaster_color_shift);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFValenciaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFValenciaFilter.java
index 088739f0..98dcd322 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFValenciaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFValenciaFilter.java
@@ -55,7 +55,7 @@ public IFValenciaFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_valencia_map);
-        addInputTexture(R.drawable.texture_valencia_gradient_map);
+        addInputTexture(R.drawable.valencia_map);
+        addInputTexture(R.drawable.valencia_gradient_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFWaldenFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFWaldenFilter.java
index 39427a79..2502997d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFWaldenFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFWaldenFilter.java
@@ -44,7 +44,7 @@ public IFWaldenFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_walden_map);
-        addInputTexture(R.drawable.texture_vignette_map);
+        addInputTexture(R.drawable.walden_map);
+        addInputTexture(R.drawable.vignette_map);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFXprollFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFXprollFilter.java
index 3ebf883f..3c27f730 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/IFXprollFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/IFXprollFilter.java
@@ -47,7 +47,7 @@ public IFXprollFilter(Context paramContext) {
     }
 
     private void setRes() {
-        addInputTexture(R.drawable.texture_xpro_map);
-        addInputTexture(R.drawable.texture_vignette_map);
+        addInputTexture(R.drawable.xpro_map);
+        addInputTexture(R.drawable.vignette_map);
     }
 }
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
deleted file mode 100644
index be6331cd..00000000
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ /dev/null
@@ -1,787 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage.sample;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.graphics.BitmapFactory;
-import android.graphics.PointF;
-import android.opengl.Matrix;
-
-import jp.co.cyberagent.android.gpuimage.*;
-import jp.co.cyberagent.android.gpuimage.filter.IF1977Filter;
-import jp.co.cyberagent.android.gpuimage.filter.IFAmaroFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFBrannanFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFEarlybirdFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFHefeFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFHudsonFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFInkwellFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFLomoFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFLordKelvinFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFNashvilleFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFRiseFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFSierraFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFSutroFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFToasterFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFValenciaFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFWaldenFilter;
-import jp.co.cyberagent.android.gpuimage.filter.IFXprollFilter;
-
-import java.util.LinkedList;
-import java.util.List;
-
-public class GPUImageFilterTools {
-    public static void showDialog(final Context context,
-            final OnGpuImageFilterChosenListener listener) {
-        final FilterList filters = new FilterList();
-        filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
-        filters.addFilter("ZoomBlur", FilterType.ZOOM_BLUR);
-        filters.addFilter("Halftone", FilterType.HALFTONE);
-        filters.addFilter("Rise", FilterType.EXTRA_RISE);
-        filters.addFilter("Hudson", FilterType.EXTRA_HUDSON);
-        filters.addFilter("Xproll", FilterType.EXTRA_XPROLL);
-        filters.addFilter("Sierra", FilterType.EXTRA_SIERRA);
-        filters.addFilter("Lomo", FilterType.EXTRA_LOMO);
-        filters.addFilter("Earlybird", FilterType.EXTRA_EARLYBIRD);
-        filters.addFilter("Sutro", FilterType.EXTRA_SUTRO);
-        filters.addFilter("Toaster", FilterType.EXTRA_TOASTER);
-        filters.addFilter("Brannan", FilterType.EXTRA_BRANNAN);
-        filters.addFilter("Inkwell", FilterType.EXTRA_INKWELL);
-        filters.addFilter("Walden", FilterType.EXTRA_WALDEN);
-        filters.addFilter("Hefe", FilterType.EXTRA_HEFE);
-        filters.addFilter("Valencia", FilterType.EXTRA_VALENCIA);
-        filters.addFilter("Nashville", FilterType.EXTRA_NASHVILLE);
-        filters.addFilter("1977", FilterType.EXTRA_1977);
-        filters.addFilter("Kelvin", FilterType.EXTRA_KELVIN);
-        filters.addFilter("Amaro", FilterType.EXTRA_AMARO);
-
-
-        filters.addFilter("Contrast", FilterType.CONTRAST);
-        filters.addFilter("Invert", FilterType.INVERT);
-        filters.addFilter("Pixelation", FilterType.PIXELATION);
-        filters.addFilter("Hue", FilterType.HUE);
-        filters.addFilter("Gamma", FilterType.GAMMA);
-        filters.addFilter("Brightness", FilterType.BRIGHTNESS);
-        filters.addFilter("Sepia", FilterType.SEPIA);
-        filters.addFilter("Grayscale", FilterType.GRAYSCALE);
-        filters.addFilter("Sharpness", FilterType.SHARPEN);
-        filters.addFilter("Sobel Edge Detection", FilterType.SOBEL_EDGE_DETECTION);
-        filters.addFilter("3x3 Convolution", FilterType.THREE_X_THREE_CONVOLUTION);
-        filters.addFilter("Emboss", FilterType.EMBOSS);
-        filters.addFilter("Posterize", FilterType.POSTERIZE);
-        filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
-        filters.addFilter("Saturation", FilterType.SATURATION);
-        filters.addFilter("Exposure", FilterType.EXPOSURE);
-        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
-        filters.addFilter("Monochrome", FilterType.MONOCHROME);
-        filters.addFilter("Opacity", FilterType.OPACITY);
-        filters.addFilter("RGB", FilterType.RGB);
-        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
-        filters.addFilter("Vignette", FilterType.VIGNETTE);
-        filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
-
-        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
-        filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
-        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
-        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
-        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
-        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
-        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
-        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
-        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
-        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
-        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
-        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
-        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
-        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
-        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
-        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
-        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
-        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
-        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
-        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
-        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
-        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
-        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
-        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
-
-        filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
-        filters.addFilter("Gaussian Blur Position", FilterType.GAUSSIAN_BLUR_POSITION);
-        filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
-
-        filters.addFilter("Box Blur", FilterType.BOX_BLUR);
-        filters.addFilter("CGA Color Space", FilterType.CGA_COLORSPACE);
-        filters.addFilter("Dilation", FilterType.DILATION);
-        filters.addFilter("Kuwahara", FilterType.KUWAHARA);
-        filters.addFilter("RGB Dilation", FilterType.RGB_DILATION);
-        filters.addFilter("Sketch", FilterType.SKETCH);
-        filters.addFilter("Toon", FilterType.TOON);
-        filters.addFilter("Smooth Toon", FilterType.SMOOTH_TOON);
-
-        filters.addFilter("Bulge Distortion", FilterType.BULGE_DISTORTION);
-        filters.addFilter("Glass Sphere", FilterType.GLASS_SPHERE);
-        filters.addFilter("Haze", FilterType.HAZE);
-        filters.addFilter("Laplacian", FilterType.LAPLACIAN);
-        filters.addFilter("Non Maximum Suppression", FilterType.NON_MAXIMUM_SUPPRESSION);
-        filters.addFilter("Sphere Refraction", FilterType.SPHERE_REFRACTION);
-        filters.addFilter("Swirl", FilterType.SWIRL);
-        filters.addFilter("Weak Pixel Inclusion", FilterType.WEAK_PIXEL_INCLUSION);
-        filters.addFilter("False Color", FilterType.FALSE_COLOR);
-
-        filters.addFilter("Color Balance", FilterType.COLOR_BALANCE);
-
-        filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
-
-        filters. addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
-
-        filters.addFilter("Transform (2-D)", FilterType.TRANSFORM2D);
-
-
-        AlertDialog.Builder builder = new AlertDialog.Builder(context);
-        builder.setTitle("Choose a filter");
-        builder.setItems(filters.names.toArray(new String[filters.names.size()]),
-                new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(final DialogInterface dialog, final int item) {
-                        listener.onGpuImageFilterChosenListener(
-                                createFilterForType(context, filters.filters.get(item)));
-                    }
-                });
-        builder.create().show();
-    }
-
-    private static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
-        switch (type) {
-            case ZOOM_BLUR:
-                return new GPUImageZoomBlurFilter();
-            case EXTRA_RISE:
-                return new IFRiseFilter(context);
-            case EXTRA_HUDSON:
-                return new IFHudsonFilter(context);
-            case EXTRA_XPROLL:
-                return new IFXprollFilter(context);
-            case EXTRA_SIERRA:
-                return new IFSierraFilter(context);
-            case EXTRA_LOMO:
-                return new IFLomoFilter(context);
-            case EXTRA_EARLYBIRD:
-                return new IFEarlybirdFilter(context);
-            case EXTRA_SUTRO:
-                return new IFSutroFilter(context);
-            case EXTRA_TOASTER:
-                return new IFToasterFilter(context);
-            case EXTRA_BRANNAN:
-                return new IFBrannanFilter(context);
-            case EXTRA_INKWELL:
-                return new IFInkwellFilter(context);
-            case EXTRA_WALDEN:
-                return new IFWaldenFilter(context);
-            case EXTRA_HEFE:
-                return new IFHefeFilter(context);
-            case EXTRA_VALENCIA:
-                return new IFValenciaFilter(context);
-            case EXTRA_NASHVILLE:
-                return new IFNashvilleFilter(context);
-            case EXTRA_1977:
-                return new IF1977Filter(context);
-            case EXTRA_KELVIN:
-                return new IFLordKelvinFilter(context);
-            case EXTRA_AMARO:
-                return new IFAmaroFilter(context);
-
-
-            case CONTRAST:
-                return new GPUImageContrastFilter(2.0f);
-            case GAMMA:
-                return new GPUImageGammaFilter(2.0f);
-            case INVERT:
-                return new GPUImageColorInvertFilter();
-            case PIXELATION:
-                return new GPUImagePixelationFilter();
-            case HUE:
-                return new GPUImageHueFilter(90.0f);
-            case BRIGHTNESS:
-                return new GPUImageBrightnessFilter(1.5f);
-            case GRAYSCALE:
-                return new GPUImageGrayscaleFilter();
-            case SEPIA:
-                return new GPUImageSepiaFilter();
-            case SHARPEN:
-                GPUImageSharpenFilter sharpness = new GPUImageSharpenFilter();
-                sharpness.setSharpness(2.0f);
-                return sharpness;
-            case SOBEL_EDGE_DETECTION:
-                return new GPUImageSobelEdgeDetection();
-            case THREE_X_THREE_CONVOLUTION:
-                GPUImage3x3ConvolutionFilter convolution = new GPUImage3x3ConvolutionFilter();
-                convolution.setConvolutionKernel(new float[] {
-                        -1.0f, 0.0f, 1.0f,
-                        -2.0f, 0.0f, 2.0f,
-                        -1.0f, 0.0f, 1.0f
-                });
-                return convolution;
-            case EMBOSS:
-                return new GPUImageEmbossFilter();
-            case POSTERIZE:
-                return new GPUImagePosterizeFilter();
-            case FILTER_GROUP:
-                List<GPUImageFilter> filters = new LinkedList<>();
-                filters.add(new GPUImageContrastFilter());
-                filters.add(new GPUImageDirectionalSobelEdgeDetectionFilter());
-                filters.add(new GPUImageGrayscaleFilter());
-                return new GPUImageFilterGroup(filters);
-            case SATURATION:
-                return new GPUImageSaturationFilter(1.0f);
-            case EXPOSURE:
-                return new GPUImageExposureFilter(0.0f);
-            case HIGHLIGHT_SHADOW:
-            	return new GPUImageHighlightShadowFilter(0.0f, 1.0f);
-            case MONOCHROME:
-            	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
-            case OPACITY:
-                return new GPUImageOpacityFilter(1.0f);
-            case RGB:
-                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);
-            case WHITE_BALANCE:
-                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);
-            case VIGNETTE:
-                PointF centerPoint = new PointF();
-                centerPoint.x = 0.5f;
-                centerPoint.y = 0.5f;
-                return new GPUImageVignetteFilter(centerPoint, new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
-            case TONE_CURVE:
-                GPUImageToneCurveFilter toneCurveFilter = new GPUImageToneCurveFilter();
-                toneCurveFilter.setFromCurveFileInputStream(
-                        context.getResources().openRawResource(R.raw.tone_cuver_sample));
-                return toneCurveFilter;
-            case BLEND_DIFFERENCE:
-                return createBlendFilter(context, GPUImageDifferenceBlendFilter.class);
-            case BLEND_SOURCE_OVER:
-                return createBlendFilter(context, GPUImageSourceOverBlendFilter.class);
-            case BLEND_COLOR_BURN:
-                return createBlendFilter(context, GPUImageColorBurnBlendFilter.class);
-            case BLEND_COLOR_DODGE:
-                return createBlendFilter(context, GPUImageColorDodgeBlendFilter.class);
-            case BLEND_DARKEN:
-                return createBlendFilter(context, GPUImageDarkenBlendFilter.class);
-            case BLEND_DISSOLVE:
-                return createBlendFilter(context, GPUImageDissolveBlendFilter.class);
-            case BLEND_EXCLUSION:
-                return createBlendFilter(context, GPUImageExclusionBlendFilter.class);
-
-
-            case BLEND_HARD_LIGHT:
-                return createBlendFilter(context, GPUImageHardLightBlendFilter.class);
-            case BLEND_LIGHTEN:
-                return createBlendFilter(context, GPUImageLightenBlendFilter.class);
-            case BLEND_ADD:
-                return createBlendFilter(context, GPUImageAddBlendFilter.class);
-            case BLEND_DIVIDE:
-                return createBlendFilter(context, GPUImageDivideBlendFilter.class);
-            case BLEND_MULTIPLY:
-                return createBlendFilter(context, GPUImageMultiplyBlendFilter.class);
-            case BLEND_OVERLAY:
-                return createBlendFilter(context, GPUImageOverlayBlendFilter.class);
-            case BLEND_SCREEN:
-                return createBlendFilter(context, GPUImageScreenBlendFilter.class);
-            case BLEND_ALPHA:
-                return createBlendFilter(context, GPUImageAlphaBlendFilter.class);
-            case BLEND_COLOR:
-                return createBlendFilter(context, GPUImageColorBlendFilter.class);
-            case BLEND_HUE:
-                return createBlendFilter(context, GPUImageHueBlendFilter.class);
-            case BLEND_SATURATION:
-                return createBlendFilter(context, GPUImageSaturationBlendFilter.class);
-            case BLEND_LUMINOSITY:
-                return createBlendFilter(context, GPUImageLuminosityBlendFilter.class);
-            case BLEND_LINEAR_BURN:
-                return createBlendFilter(context, GPUImageLinearBurnBlendFilter.class);
-            case BLEND_SOFT_LIGHT:
-                return createBlendFilter(context, GPUImageSoftLightBlendFilter.class);
-            case BLEND_SUBTRACT:
-                return createBlendFilter(context, GPUImageSubtractBlendFilter.class);
-            case BLEND_CHROMA_KEY:
-                return createBlendFilter(context, GPUImageChromaKeyBlendFilter.class);
-            case BLEND_NORMAL:
-                return createBlendFilter(context, GPUImageNormalBlendFilter.class);
-
-            case LOOKUP_AMATORKA:
-                GPUImageLookupFilter amatorka = new GPUImageLookupFilter();
-                amatorka.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.lookup_amatorka));
-                return amatorka;
-            case GAUSSIAN_BLUR:
-                return new GPUImageGaussianBlurFilter();
-            case GAUSSIAN_BLUR_POSITION:
-                return new GPUImageGaussianBlurPositionFilter();
-            case CROSSHATCH:
-                return new GPUImageCrosshatchFilter();
-
-            case BOX_BLUR:
-                return new GPUImageBoxBlurFilter();
-            case CGA_COLORSPACE:
-                return new GPUImageCGAColorspaceFilter();
-            case DILATION:
-                return new GPUImageDilationFilter();
-            case KUWAHARA:
-                return new GPUImageKuwaharaFilter();
-            case RGB_DILATION:
-                return new GPUImageRGBDilationFilter();
-            case SKETCH:
-                return new GPUImageSketchFilter();
-            case TOON:
-                return new GPUImageToonFilter();
-            case SMOOTH_TOON:
-                return new GPUImageSmoothToonFilter();
-
-            case BULGE_DISTORTION:
-                return new GPUImageBulgeDistortionFilter();
-            case GLASS_SPHERE:
-                return new GPUImageGlassSphereFilter();
-            case HAZE:
-                return new GPUImageHazeFilter();
-            case LAPLACIAN:
-                return new GPUImageLaplacianFilter();
-            case NON_MAXIMUM_SUPPRESSION:
-                return new GPUImageNonMaximumSuppressionFilter();
-            case SPHERE_REFRACTION:
-                return new GPUImageSphereRefractionFilter();
-            case SWIRL:
-                return new GPUImageSwirlFilter();
-            case WEAK_PIXEL_INCLUSION:
-                return new GPUImageWeakPixelInclusionFilter();
-            case FALSE_COLOR:
-                return new GPUImageFalseColorFilter();
-            case COLOR_BALANCE:
-                return new GPUImageColorBalanceFilter();
-            case LEVELS_FILTER_MIN:
-                GPUImageLevelsFilter levelsFilter = new GPUImageLevelsFilter();
-                levelsFilter.setMin(0.0f, 3.0f, 1.0f);
-                return levelsFilter;
-            case HALFTONE:
-                return new GPUImageHalftoneFilter();
-
-            case BILATERAL_BLUR:
-                return new GPUImageBilateralFilter();
-
-            case TRANSFORM2D:
-                return new GPUImageTransformFilter();
-
-            default:
-                throw new IllegalStateException("No filter of that type!");
-        }
-
-    }
-
-    private static GPUImageFilter createBlendFilter(Context context, Class<? extends GPUImageTwoInputFilter> filterClass) {
-        try {
-            GPUImageTwoInputFilter filter = filterClass.newInstance();
-            filter.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.ic_launcher));
-            return filter;
-        } catch (Exception e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    public interface OnGpuImageFilterChosenListener {
-        void onGpuImageFilterChosenListener(GPUImageFilter filter);
-    }
-
-    private enum FilterType {
-        ZOOM_BLUR, HALFTONE,
-
-        EXTRA_RISE, EXTRA_HUDSON, EXTRA_XPROLL, EXTRA_SIERRA, EXTRA_LOMO, EXTRA_EARLYBIRD, EXTRA_SUTRO, EXTRA_TOASTER, EXTRA_BRANNAN, EXTRA_INKWELL, EXTRA_WALDEN, EXTRA_HEFE, EXTRA_VALENCIA, EXTRA_NASHVILLE, EXTRA_1977, EXTRA_KELVIN, EXTRA_AMARO,
-
-        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
-        SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
-        BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
-        BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
-        GAUSSIAN_BLUR, GAUSSIAN_BLUR_POSITION, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
-        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR, TRANSFORM2D,
-    }
-
-    private static class FilterList {
-        public List<String> names = new LinkedList<>();
-        public List<FilterType> filters = new LinkedList<>();
-
-        public void addFilter(final String name, final FilterType filter) {
-            names.add(name);
-            filters.add(filter);
-        }
-    }
-
-    public static class FilterAdjuster {
-        private final Adjuster<? extends GPUImageFilter> adjuster;
-
-        public FilterAdjuster(final GPUImageFilter filter) {
-            if (filter instanceof GPUImageZoomBlurFilter) {
-                adjuster = new ZoomBlurAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSharpenFilter) {
-                adjuster = new SharpnessAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSepiaFilter) {
-                adjuster = new SepiaAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageContrastFilter) {
-                adjuster = new ContrastAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageGammaFilter) {
-                adjuster = new GammaAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageBrightnessFilter) {
-                adjuster = new BrightnessAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSobelEdgeDetection) {
-                adjuster = new SobelAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageEmbossFilter) {
-                adjuster = new EmbossAdjuster().filter(filter);
-            } else if (filter instanceof GPUImage3x3TextureSamplingFilter) {
-                adjuster = new GPU3x3TextureAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageHueFilter) {
-                adjuster = new HueAdjuster().filter(filter);
-            } else if (filter instanceof GPUImagePosterizeFilter) {
-                adjuster = new PosterizeAdjuster().filter(filter);
-            } else if (filter instanceof GPUImagePixelationFilter) {
-                adjuster = new PixelationAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSaturationFilter) {
-                adjuster = new SaturationAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageExposureFilter) {
-                adjuster = new ExposureAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageHighlightShadowFilter) {
-                adjuster = new HighlightShadowAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageMonochromeFilter) {
-                adjuster = new MonochromeAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageOpacityFilter) {
-                adjuster = new OpacityAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageRGBFilter) {
-                adjuster = new RGBAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageWhiteBalanceFilter) {
-                adjuster = new WhiteBalanceAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageVignetteFilter) {
-                adjuster = new VignetteAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageDissolveBlendFilter) {
-                adjuster = new DissolveBlendAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageGaussianBlurFilter) {
-                adjuster = new GaussianBlurAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageGaussianBlurPositionFilter) {
-                adjuster = new GaussianBlurPositionAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageCrosshatchFilter) {
-                adjuster = new CrosshatchBlurAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageBulgeDistortionFilter) {
-                adjuster = new BulgeDistortionAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageGlassSphereFilter) {
-                adjuster = new GlassSphereAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageHazeFilter) {
-                adjuster = new HazeAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSphereRefractionFilter) {
-                adjuster = new SphereRefractionAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSwirlFilter) {
-                adjuster = new SwirlAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageColorBalanceFilter) {
-                adjuster = new ColorBalanceAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageLevelsFilter) {
-                adjuster = new LevelsMinMidAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageBilateralFilter) {
-                adjuster = new BilateralAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageTransformFilter) {
-                adjuster = new RotateAdjuster().filter(filter);
-            }
-            else {
-                adjuster = null;
-            }
-        }
-
-        public boolean canAdjust() {
-            return adjuster != null;
-        }
-
-        public void adjust(final int percentage) {
-            if (adjuster != null) {
-                adjuster.adjust(percentage);
-            }
-        }
-
-        private abstract class Adjuster<T extends GPUImageFilter> {
-            private T filter;
-
-            @SuppressWarnings("unchecked")
-            public Adjuster<T> filter(final GPUImageFilter filter) {
-                this.filter = (T) filter;
-                return this;
-            }
-
-            public T getFilter() {
-                return filter;
-            }
-
-            public abstract void adjust(int percentage);
-
-            protected float range(final int percentage, final float start, final float end) {
-                return (end - start) * percentage / 100.0f + start;
-            }
-
-            protected int range(final int percentage, final int start, final int end) {
-                return (end - start) * percentage / 100 + start;
-            }
-        }
-
-        private class ZoomBlurAdjuster extends Adjuster<GPUImageZoomBlurFilter> {
-            @Override
-            public void adjust(final int size) {
-                getFilter().setSize(range(size, 1.0f, 20.0f));
-            }
-        }
-
-        private class SharpnessAdjuster extends Adjuster<GPUImageSharpenFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setSharpness(range(percentage, -4.0f, 4.0f));
-            }
-        }
-
-        private class PixelationAdjuster extends Adjuster<GPUImagePixelationFilter> {
-          @Override
-          public void adjust(final int percentage) {
-              getFilter().setPixel(range(percentage, 1.0f, 100.0f));
-          }
-        }
-
-        private class HueAdjuster extends Adjuster<GPUImageHueFilter> {
-          @Override
-          public void adjust(final int percentage) {
-            getFilter().setHue(range(percentage, 0.0f, 360.0f));
-          }
-        }
-
-        private class ContrastAdjuster extends Adjuster<GPUImageContrastFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setContrast(range(percentage, 0.0f, 2.0f));
-            }
-        }
-
-        private class GammaAdjuster extends Adjuster<GPUImageGammaFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setGamma(range(percentage, 0.0f, 3.0f));
-            }
-        }
-
-        private class BrightnessAdjuster extends Adjuster<GPUImageBrightnessFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setBrightness(range(percentage, -1.0f, 1.0f));
-            }
-        }
-
-        private class SepiaAdjuster extends Adjuster<GPUImageSepiaFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setIntensity(range(percentage, 0.0f, 2.0f));
-            }
-        }
-
-        private class SobelAdjuster extends Adjuster<GPUImageSobelEdgeDetection> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
-            }
-        }
-
-        private class EmbossAdjuster extends Adjuster<GPUImageEmbossFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setIntensity(range(percentage, 0.0f, 4.0f));
-            }
-        }
-
-        private class PosterizeAdjuster extends Adjuster<GPUImagePosterizeFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                // In theorie to 256, but only first 50 are interesting
-                getFilter().setColorLevels(range(percentage, 1, 50));
-            }
-        }
-
-        private class GPU3x3TextureAdjuster extends Adjuster<GPUImage3x3TextureSamplingFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
-            }
-        }
-
-        private class SaturationAdjuster extends Adjuster<GPUImageSaturationFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setSaturation(range(percentage, 0.0f, 2.0f));
-            }
-        }
-
-        private class ExposureAdjuster extends Adjuster<GPUImageExposureFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setExposure(range(percentage, -10.0f, 10.0f));
-            }
-        }
-
-        private class HighlightShadowAdjuster extends Adjuster<GPUImageHighlightShadowFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setShadows(range(percentage, 0.0f, 1.0f));
-                getFilter().setHighlights(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class MonochromeAdjuster extends Adjuster<GPUImageMonochromeFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setIntensity(range(percentage, 0.0f, 1.0f));
-                //getFilter().setColor(new float[]{0.6f, 0.45f, 0.3f, 1.0f});
-            }
-        }
-
-        private class OpacityAdjuster extends Adjuster<GPUImageOpacityFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setOpacity(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class RGBAdjuster extends Adjuster<GPUImageRGBFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRed(range(percentage, 0.0f, 1.0f));
-                //getFilter().setGreen(range(percentage, 0.0f, 1.0f));
-                //getFilter().setBlue(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class WhiteBalanceAdjuster extends Adjuster<GPUImageWhiteBalanceFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setTemperature(range(percentage, 2000.0f, 8000.0f));
-                //getFilter().setTint(range(percentage, -100.0f, 100.0f));
-            }
-        }
-
-        private class VignetteAdjuster extends Adjuster<GPUImageVignetteFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setVignetteStart(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class DissolveBlendAdjuster extends Adjuster<GPUImageDissolveBlendFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setMix(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class GaussianBlurAdjuster extends Adjuster<GPUImageGaussianBlurFilter> {
-            @Override
-            public void adjust(final int percentage) {
-//                getFilter().setBlurSize(range(percentage, 0.0f, 1.0f));
-//                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-                getFilter().setRadiusInPixel(range(percentage, 1, 20));
-            }
-        }
-
-        private class GaussianBlurPositionAdjuster extends Adjuster<GPUImageGaussianBlurPositionFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class CrosshatchBlurAdjuster extends Adjuster<GPUImageCrosshatchFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setCrossHatchSpacing(range(percentage, 0.0f, 0.06f));
-                getFilter().setLineWidth(range(percentage, 0.0f, 0.006f));
-            }
-        }
-
-        private class BulgeDistortionAdjuster extends Adjuster<GPUImageBulgeDistortionFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-                getFilter().setScale(range(percentage, -1.0f, 1.0f));
-            }
-        }
-
-        private class GlassSphereAdjuster extends Adjuster<GPUImageGlassSphereFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class HazeAdjuster extends Adjuster<GPUImageHazeFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setDistance(range(percentage, -0.3f, 0.3f));
-                getFilter().setSlope(range(percentage, -0.3f, 0.3f));
-            }
-        }
-
-        private class SphereRefractionAdjuster extends Adjuster<GPUImageSphereRefractionFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class SwirlAdjuster extends Adjuster<GPUImageSwirlFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setAngle(range(percentage, 0.0f, 2.0f));
-            }
-        }
-
-        private class ColorBalanceAdjuster extends Adjuster<GPUImageColorBalanceFilter> {
-
-            @Override
-            public void adjust(int percentage) {
-                getFilter().setMidtones(new float[]{
-                        range(percentage, 0.0f, 1.0f),
-                        range(percentage / 2, 0.0f, 1.0f),
-                        range(percentage / 3, 0.0f, 1.0f)});
-            }
-        }
-
-        private class LevelsMinMidAdjuster extends Adjuster<GPUImageLevelsFilter> {
-            @Override
-            public void adjust(int percentage) {
-                getFilter().setMin(0.0f, range(percentage, 0.0f, 1.0f), 1.0f);
-            }
-        }
-
-        private class BilateralAdjuster extends Adjuster<GPUImageBilateralFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setDistanceNormalizationFactor(range(percentage, 0.0f, 15.0f));
-            }
-        }
-
-        private class RotateAdjuster extends Adjuster<GPUImageTransformFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                float[] transform = new float[16];
-                Matrix.setRotateM(transform, 0, 360 * percentage / 100, 0, 0, 1.0f);
-                getFilter().setTransform3D(transform);
-            }
-        }
-
-    }
-}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index ba832284..638ed0a6 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -42,12 +42,12 @@
 import jp.co.cyberagent.android.gpuimage.GPUImage;
 import jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
-import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
-import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
-import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterTools;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.R;
 import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper;
 import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraInfo2;
+import jp.co.cyberagent.android.gpuimage.sample.utils.GPUImageFilterChooser;
 
 public class ActivityCamera extends Activity implements OnSeekBarChangeListener, OnClickListener {
 
@@ -94,13 +94,15 @@ protected void onPause() {
     public void onClick(final View v) {
         switch (v.getId()) {
             case R.id.button_choose_filter:
-                GPUImageFilterTools.showDialog(this, new OnGpuImageFilterChosenListener() {
-
-                    @Override
-                    public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
-                        switchFilterTo(filter);
-                    }
-                });
+                GPUImageFilterChooser.showDialog(this,
+                        new GPUImageFilterChooser.OnGpuImageFilterChosenListener() {
+                            @Override
+                            public void onGpuImageFilterChosenListener(
+                                    final GPUImageFilter filter,
+                                    final GPUImageFilterTools.FilterAdjuster adjuster) {
+                                switchFilterTo(filter, adjuster);
+                            }
+                        });
                 break;
 
             case R.id.button_capture:
@@ -212,12 +214,13 @@ private static File getOutputMediaFile(final int type) {
         return mediaFile;
     }
 
-    private void switchFilterTo(final GPUImageFilter filter) {
+    private void switchFilterTo(final GPUImageFilter filter,
+                                final FilterAdjuster adjuster) {
         if (mFilter == null
                 || (filter != null && !mFilter.getClass().equals(filter.getClass()))) {
             mFilter = filter;
             mGPUImage.setFilter(mFilter);
-            mFilterAdjuster = new FilterAdjuster(mFilter);
+            mFilterAdjuster = adjuster;
         }
     }
 
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
index ad734823..a5908479 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
@@ -16,15 +16,20 @@
 
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
+import jp.co.cyberagent.android.gpuimage.GPUImage;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.GPUImageView;
 import jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener;
-import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
-import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
-import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
+import jp.co.cyberagent.android.gpuimage.GPUImageZoomBlurFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.R;
+import jp.co.cyberagent.android.gpuimage.sample.utils.GPUImageFilterChooser;
+
 import android.app.Activity;
 import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.net.Uri;
 import android.os.Bundle;
 import android.view.View;
@@ -33,6 +38,9 @@
 import android.widget.SeekBar.OnSeekBarChangeListener;
 import android.widget.Toast;
 
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+
 public class ActivityGallery extends Activity implements OnSeekBarChangeListener,
         OnClickListener, OnPictureSavedListener {
 
@@ -77,14 +85,15 @@ protected void onActivityResult(final int requestCode, final int resultCode, fin
     public void onClick(final View v) {
         switch (v.getId()) {
             case R.id.button_choose_filter:
-                GPUImageFilterTools.showDialog(this, new OnGpuImageFilterChosenListener() {
-
-                    @Override
-                    public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
-                        switchFilterTo(filter);
-                        mGPUImageView.requestRender();
-                    }
-
+                GPUImageFilterChooser.showDialog(this,
+                        new GPUImageFilterChooser.OnGpuImageFilterChosenListener() {
+                            @Override
+                            public void onGpuImageFilterChosenListener(
+                                    final GPUImageFilter filter,
+                                    final GPUImageFilterTools.FilterAdjuster adjuster) {
+                                switchFilterTo(filter, adjuster);
+                                mGPUImageView.requestRender();
+                            }
                 });
                 break;
             case R.id.button_save:
@@ -108,15 +117,14 @@ private void saveImage() {
 //        mGPUImageView.saveToPictures("GPUImage", fileName, 1600, 1600, this);
     }
 
-    private void switchFilterTo(final GPUImageFilter filter) {
+    private void switchFilterTo(final GPUImageFilter filter, final FilterAdjuster adjuster) {
         if (mFilter == null
                 || (filter != null && !mFilter.getClass().equals(filter.getClass()))) {
             mFilter = filter;
             mGPUImageView.setFilter(mFilter);
-            mFilterAdjuster = new FilterAdjuster(mFilter);
-
+            mFilterAdjuster = adjuster;
             findViewById(R.id.seekBar).setVisibility(
-                    mFilterAdjuster.canAdjust() ? View.VISIBLE : View.GONE);
+                    mFilterAdjuster == null ? View.VISIBLE : View.GONE);
         }
     }
 
@@ -138,5 +146,19 @@ public void onStopTrackingTouch(final SeekBar seekBar) {
 
     private void handleImage(final Uri selectedImage) {
         mGPUImageView.setImage(selectedImage);
+
+        GPUImage gpuImage = new GPUImage(this);
+        gpuImage.setFilter(new GPUImageZoomBlurFilter());
+        try {
+            InputStream inputStream = this.getContentResolver().openInputStream(selectedImage);
+            Bitmap input = BitmapFactory.decodeStream(inputStream);
+            gpuImage.setImage(input);
+        } catch (FileNotFoundException e) {
+
+        }
+        Bitmap out = gpuImage.getBitmapWithFilterApplied();
+
+        int a = 0;
+
     }
 }
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/utils/GPUImageFilterChooser.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/utils/GPUImageFilterChooser.java
new file mode 100644
index 00000000..a949a71c
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/utils/GPUImageFilterChooser.java
@@ -0,0 +1,40 @@
+package jp.co.cyberagent.android.gpuimage.sample.utils;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+
+import java.util.List;
+
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterTools;
+
+/**
+ * Created by Administrator on 2016/9/15.
+ */
+public class GPUImageFilterChooser {
+
+    public interface OnGpuImageFilterChosenListener {
+        void onGpuImageFilterChosenListener(final GPUImageFilter filter,
+                                            final GPUImageFilterTools.FilterAdjuster adjuster);
+    }
+
+    public static void showDialog(final Context context,
+                                  final OnGpuImageFilterChosenListener listener) {
+
+        final GPUImageFilterTools filterTools = GPUImageFilterTools.instance();
+        AlertDialog.Builder builder = new AlertDialog.Builder(context);
+        builder.setTitle("Choose a filter");
+        builder.setItems(filterTools.getNames(),
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(final DialogInterface dialog, final int item) {
+                        GPUImageFilter filter = filterTools.getFilter(item, context);
+                        listener.onGpuImageFilterChosenListener(
+                                filter,
+                                filterTools.getAdjuster(item, filter));
+                    }
+                });
+        builder.create().show();
+    }
+}
