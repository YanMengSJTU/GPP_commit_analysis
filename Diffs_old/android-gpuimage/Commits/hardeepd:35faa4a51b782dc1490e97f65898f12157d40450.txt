diff --git a/gradle.properties b/gradle.properties
index 7647072e..013524c6 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -2,10 +2,10 @@ VERSION_NAME=1.3.0
 VERSION_CODE=9
 GROUP=jp.co.cyberagent.android.gpuimage
 
-COMPILE_SDK_VERSION=22
-BUILD_TOOLS_VERSION=22.0.1
+COMPILE_SDK_VERSION=23
+BUILD_TOOLS_VERSION=23.0.2
 TARGET_SDK_VERSION=22
-MIN_SDK_VERSION=8
+MIN_SDK_VERSION=18
 
 POM_DESCRIPTION=Image filters for Android with OpenGL (based on GPUImage for iOS)
 POM_URL=https://github.com/cyberagent/android-gpuimage
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index c6ade5a6..7f2febba 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -39,10 +39,15 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
+
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -121,13 +126,13 @@ public void setUpCamera(final Camera camera) {
     /**
      * Sets the up camera to be connected to GPUImage to get a filtered preview.
      *
-     * @param camera the camera
-     * @param degrees by how many degrees the image should be rotated
+     * @param camera         the camera
+     * @param degrees        by how many degrees the image should be rotated
      * @param flipHorizontal if the image should be flipped horizontally
-     * @param flipVertical if the image should be flipped vertically
+     * @param flipVertical   if the image should be flipped vertically
      */
     public void setUpCamera(final Camera camera, final int degrees, final boolean flipHorizontal,
-            final boolean flipVertical) {
+                            final boolean flipVertical) {
         mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
             setUpCameraGingerbread(camera);
@@ -274,13 +279,13 @@ public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap) {
 
                 @Override
                 public void run() {
-                    synchronized(mFilter) {
+                    synchronized (mFilter) {
                         mFilter.destroy();
                         mFilter.notify();
                     }
                 }
             });
-            synchronized(mFilter) {
+            synchronized (mFilter) {
                 requestRender();
                 try {
                     mFilter.wait();
@@ -318,12 +323,12 @@ public void run() {
      * bitmap. The order of the calls to the listener will be the same as the
      * filter order.
      *
-     * @param bitmap the bitmap on which the filters will be applied
-     * @param filters the filters which will be applied on the bitmap
+     * @param bitmap   the bitmap on which the filters will be applied
+     * @param filters  the filters which will be applied on the bitmap
      * @param listener the listener on which the results will be notified
      */
     public static void getBitmapForMultipleFilters(final Bitmap bitmap,
-            final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener) {
+                                                   final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener) {
         if (filters.isEmpty()) {
             return;
         }
@@ -344,7 +349,7 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
     /**
      * Deprecated: Please use
      * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
-     *
+     * <p/>
      * Save current image with applied filter to Pictures. It will be stored on
      * the default Picture folder on the phone below the given folderName and
      * fileName. <br>
@@ -352,33 +357,33 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
      * listener.
      *
      * @param folderName the folder name
-     * @param fileName the file name
-     * @param listener the listener
+     * @param fileName   the file name
+     * @param listener   the listener
      */
     @Deprecated
     public void saveToPictures(final String folderName, final String fileName,
-            final OnPictureSavedListener listener) {
+                               final OnPictureSavedListener listener) {
         saveToPictures(mCurrentBitmap, folderName, fileName, listener);
     }
 
     /**
      * Deprecated: Please use
      * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
-     *
+     * <p/>
      * Apply and save the given bitmap with applied filter to Pictures. It will
      * be stored on the default Picture folder on the phone below the given
      * folerName and fileName. <br>
      * This method is async and will notify when the image was saved through the
      * listener.
      *
-     * @param bitmap the bitmap
+     * @param bitmap     the bitmap
      * @param folderName the folder name
-     * @param fileName the file name
-     * @param listener the listener
+     * @param fileName   the file name
+     * @param listener   the listener
      */
     @Deprecated
     public void saveToPictures(final Bitmap bitmap, final String folderName, final String fileName,
-            final OnPictureSavedListener listener) {
+                               final OnPictureSavedListener listener) {
         new SaveTask(bitmap, folderName, fileName, listener).execute();
     }
 
@@ -427,7 +432,7 @@ private int getOutputHeight() {
         private final Handler mHandler;
 
         public SaveTask(final Bitmap bitmap, final String folderName, final String fileName,
-                final OnPictureSavedListener listener) {
+                        final OnPictureSavedListener listener) {
             mBitmap = bitmap;
             mFolderName = folderName;
             mFileName = fileName;
@@ -450,8 +455,8 @@ private void saveImage(final String folderName, final String fileName, final Bit
                 file.getParentFile().mkdirs();
                 image.compress(CompressFormat.JPEG, 80, new FileOutputStream(file));
                 MediaScannerConnection.scanFile(mContext,
-                        new String[] {
-                            file.toString()
+                        new String[]{
+                                file.toString()
                         }, null,
                         new MediaScannerConnection.OnScanCompletedListener() {
                             @Override
@@ -505,7 +510,7 @@ protected Bitmap decode(BitmapFactory.Options options) {
         @Override
         protected int getImageOrientation() throws IOException {
             Cursor cursor = mContext.getContentResolver().query(mUri,
-                    new String[] { MediaStore.Images.ImageColumns.ORIENTATION }, null, null, null);
+                    new String[]{MediaStore.Images.ImageColumns.ORIENTATION}, null, null, null);
 
             if (cursor == null || cursor.getCount() != 1) {
                 return 0;
@@ -702,5 +707,5 @@ private Bitmap rotateImage(final Bitmap bitmap) {
         void response(T item);
     }
 
-    public enum ScaleType { CENTER_INSIDE, CENTER_CROP }
+    public enum ScaleType {CENTER_INSIDE, CENTER_CROP}
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
deleted file mode 100644
index 275253ab..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
+++ /dev/null
@@ -1,155 +0,0 @@
-/**
- * @author wysaid
- * @mail admin@wysaid.org
- *
-*/
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-
-public class GPUImageBilateralFilter extends GPUImageFilter {
-	public static final String BILATERAL_VERTEX_SHADER = "" +
-			"attribute vec4 position;\n" + 
-			"attribute vec4 inputTextureCoordinate;\n" + 
-	 
-			"const int GAUSSIAN_SAMPLES = 9;\n" + 
-	 
-			"uniform vec2 singleStepOffset;\n" +  
-	 
-			"varying vec2 textureCoordinate;\n" + 
-			"varying vec2 blurCoordinates[GAUSSIAN_SAMPLES];\n" + 
-	 
-			"void main()\n" + 
-			"{\n" + 
-	     	"	gl_Position = position;\n" + 
-			"	textureCoordinate = inputTextureCoordinate.xy;\n" + 
-	     
-			"	int multiplier = 0;\n" + 
-			"	vec2 blurStep;\n" +  
-	     
-			"	for (int i = 0; i < GAUSSIAN_SAMPLES; i++)\n" + 
-	     	"	{\n" + 
-	        "		multiplier = (i - ((GAUSSIAN_SAMPLES - 1) / 2));\n" + 
-	        
-	        "		blurStep = float(multiplier) * singleStepOffset;\n" + 
-	        "		blurCoordinates[i] = inputTextureCoordinate.xy + blurStep;\n" + 
-	     	"	}\n" + 
-	 		"}";
-
-	public static final String BILATERAL_FRAGMENT_SHADER = "" + 
-			"uniform sampler2D inputImageTexture;\n" +
-
-			" const lowp int GAUSSIAN_SAMPLES = 9;\n" +
-
-			" varying highp vec2 textureCoordinate;\n" +
-			" varying highp vec2 blurCoordinates[GAUSSIAN_SAMPLES];\n" +
-
-			" uniform mediump float distanceNormalizationFactor;\n" +
-
-			" void main()\n" +
-			" {\n" +
-			"     lowp vec4 centralColor;\n" +
-			"     lowp float gaussianWeightTotal;\n" +
-			"     lowp vec4 sum;\n" +
-			"     lowp vec4 sampleColor;\n" +
-			"     lowp float distanceFromCentralColor;\n" +
-			"     lowp float gaussianWeight;\n" +
-			"     \n" +
-			"     centralColor = texture2D(inputImageTexture, blurCoordinates[4]);\n" +
-			"     gaussianWeightTotal = 0.18;\n" +
-			"     sum = centralColor * 0.18;\n" +
-			"     \n" +
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[0]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.05 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[1]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.09 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[2]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.12 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[3]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.15 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[5]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.15 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[6]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.12 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[7]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.09 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-
-			"     sampleColor = texture2D(inputImageTexture, blurCoordinates[8]);\n" +
-			"     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
-			"     gaussianWeight = 0.05 * (1.0 - distanceFromCentralColor);\n" +
-			"     gaussianWeightTotal += gaussianWeight;\n" +
-			"     sum += sampleColor * gaussianWeight;\n" +
-			"     gl_FragColor = sum / gaussianWeightTotal;\n" +
-//			" gl_FragColor.r = distanceNormalizationFactor / 20.0;" + 
-			" }";
-
-	private float mDistanceNormalizationFactor;
-	private int mDisFactorLocation;
-	private int mSingleStepOffsetLocation;
-	
-	public GPUImageBilateralFilter() {
-		this(8.0f);
-	}
-	
-	public GPUImageBilateralFilter(final float distanceNormalizationFactor) {
-		super(BILATERAL_VERTEX_SHADER, BILATERAL_FRAGMENT_SHADER);
-		mDistanceNormalizationFactor = distanceNormalizationFactor;
-	}
-	
-	@Override
-	public void onInit() {
-		super.onInit();
-		mDisFactorLocation = GLES20.glGetUniformLocation(getProgram(), "distanceNormalizationFactor");
-		mSingleStepOffsetLocation = GLES20.glGetUniformLocation(getProgram(), "singleStepOffset");
-	}
-	
-	@Override
-	public void onInitialized() {
-		super.onInitialized();
-		setDistanceNormalizationFactor(mDistanceNormalizationFactor);
-	}
-	
-	public void setDistanceNormalizationFactor(final float newValue) {
-		mDistanceNormalizationFactor = newValue;
-		setFloat(mDisFactorLocation, newValue);
-	}
-	
-	private void setTexelSize(final float w, final float h) {
-		setFloatVec2(mSingleStepOffsetLocation, new float[] {1.0f / w, 1.0f / h});
-	}
-	
-	@Override
-    public void onOutputSizeChanged(final int width, final int height) {
-        super.onOutputSizeChanged(width, height);
-        setTexelSize(width, height);
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
deleted file mode 100644
index 9fcf7939..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-public class GPUImageHueFilter extends GPUImageFilter {
-    public static final String HUE_FRAGMENT_SHADER = "" +
-      "precision highp float;\n" +
-      "varying highp vec2 textureCoordinate;\n" +
-      "\n" +
-      "uniform sampler2D inputImageTexture;\n" +
-      "uniform mediump float hueAdjust;\n" +
-      "const highp vec4 kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\n" +
-      "const highp vec4 kRGBToI = vec4 (0.595716, -0.274453, -0.321263, 0.0);\n" +
-      "const highp vec4 kRGBToQ = vec4 (0.211456, -0.522591, 0.31135, 0.0);\n" +
-      "\n" +
-      "const highp vec4 kYIQToR = vec4 (1.0, 0.9563, 0.6210, 0.0);\n" +
-      "const highp vec4 kYIQToG = vec4 (1.0, -0.2721, -0.6474, 0.0);\n" +
-      "const highp vec4 kYIQToB = vec4 (1.0, -1.1070, 1.7046, 0.0);\n" +
-      "\n" +
-      "void main ()\n" +
-      "{\n" +
-      "    // Sample the input pixel\n" +
-      "    highp vec4 color = texture2D(inputImageTexture, textureCoordinate);\n" +
-      "\n" +
-      "    // Convert to YIQ\n" +
-      "    highp float YPrime = dot (color, kRGBToYPrime);\n" +
-      "    highp float I = dot (color, kRGBToI);\n" +
-      "    highp float Q = dot (color, kRGBToQ);\n" +
-      "\n" +
-      "    // Calculate the hue and chroma\n" +
-      "    highp float hue = atan (Q, I);\n" +
-      "    highp float chroma = sqrt (I * I + Q * Q);\n" +
-      "\n" +
-      "    // Make the user's adjustments\n" +
-      "    hue += (-hueAdjust); //why negative rotation?\n" +
-      "\n" +
-      "    // Convert back to YIQ\n" +
-      "    Q = chroma * sin (hue);\n" +
-      "    I = chroma * cos (hue);\n" +
-      "\n" +
-      "    // Convert back to RGB\n" +
-      "    highp vec4 yIQ = vec4 (YPrime, I, Q, 0.0);\n" +
-      "    color.r = dot (yIQ, kYIQToR);\n" +
-      "    color.g = dot (yIQ, kYIQToG);\n" +
-      "    color.b = dot (yIQ, kYIQToB);\n" +
-      "\n" +
-      "    // Save the result\n" +
-      "    gl_FragColor = color;\n" +
-      "}\n";
-
-    private float mHue;
-    private int mHueLocation;
-
-    public GPUImageHueFilter() {
-        this(90.0f);
-    }
-
-    public GPUImageHueFilter(final float hue) {
-        super(NO_FILTER_VERTEX_SHADER, HUE_FRAGMENT_SHADER);
-        mHue = hue;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mHueLocation = GLES20.glGetUniformLocation(getProgram(), "hueAdjust");
-    }
-
-    @Override
-    public void onInitialized() {
-        super.onInitialized();
-        setHue(mHue);
-    }
-
-    public void setHue(final float hue) {
-        mHue = hue;
-        float hueAdjust = (mHue % 360.0f) * (float) Math.PI / 180.0f;
-        setFloat(mHueLocation, hueAdjust);
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index fd26a5f3..a6703303 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -26,10 +26,6 @@
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
 
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.opengles.GL10;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -38,12 +34,18 @@
 import java.util.LinkedList;
 import java.util.Queue;
 
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
 public class GPUImageRenderer implements Renderer, PreviewCallback {
     public static final int NO_IMAGE = -1;
-    static final float CUBE[] = {
+    public static final float CUBE[] = {
             -1.0f, -1.0f,
             1.0f, -1.0f,
             -1.0f, 1.0f,
@@ -92,7 +94,7 @@ public GPUImageRenderer(final GPUImageFilter filter) {
     @Override
     public void onSurfaceCreated(final GL10 unused, final EGLConfig config) {
         GLES20.glDisable(GL10.GL_DITHER);
-        GLES20.glClearColor(0,0,0,0);
+        GLES20.glClearColor(0, 0, 0, 0);
         GLES20.glEnable(GL10.GL_CULL_FACE);
         GLES20.glEnable(GL10.GL_DEPTH_TEST);
         mFilter.init();
@@ -300,7 +302,7 @@ private float addDistance(float coordinate, float distance) {
     }
 
     public void setRotationCamera(final Rotation rotation, final boolean flipHorizontal,
-            final boolean flipVertical) {
+                                  final boolean flipVertical) {
         setRotation(rotation, flipVertical, flipHorizontal);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
deleted file mode 100644
index f1dcf64e..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-public class GPUImageSobelThresholdFilter extends
-		GPUImage3x3TextureSamplingFilter {
-    public static final String SOBEL_THRESHOLD_EDGE_DETECTION = "" +
-    		"precision mediump float;\n" +
-    		"\n" +
-    		"varying vec2 textureCoordinate;\n" +
-    		"varying vec2 leftTextureCoordinate;\n" +
-    		"varying vec2 rightTextureCoordinate;\n" +
-    		"\n" +
-    		"varying vec2 topTextureCoordinate;\n" +
-    		"varying vec2 topLeftTextureCoordinate;\n" +
-    		"varying vec2 topRightTextureCoordinate;\n" +
-    		"\n" +
-    		"varying vec2 bottomTextureCoordinate;\n" +
-    		"varying vec2 bottomLeftTextureCoordinate;\n" +
-    		"varying vec2 bottomRightTextureCoordinate;\n" +
-    		"\n" +
-    		"uniform sampler2D inputImageTexture;\n" +
-    		"uniform lowp float threshold;\n" +
-    		"\n" +
-    		"const highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\n" +
-    		"\n" +
-    		"void main()\n" +
-    		"{\n" +
-    		"    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\n" +
-    		"    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\n" +
-    		"    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\n" +
-    		"    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\n" +
-    		"    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\n" +
-    		"    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\n" +
-    		"    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\n" +
-    		"    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\n" +
-    		"    float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\n" +
-    		"    float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\n" +
-    		"\n" +
-    		"    float mag = 1.0 - length(vec2(h, v));\n" +
-    		"    mag = step(threshold, mag);\n" +
-    		"\n" +
-    		"    gl_FragColor = vec4(vec3(mag), 1.0);\n" +
-    		"}\n";
-
-    private int mUniformThresholdLocation;
-    private float mThreshold = 0.9f;
-    
-    public GPUImageSobelThresholdFilter() {
-    	this(0.9f);
-    }
-    
-    public GPUImageSobelThresholdFilter(float threshold) {
-    	super(SOBEL_THRESHOLD_EDGE_DETECTION);
-    	mThreshold = threshold;
-    }
-    
-    @Override
-    public void onInit() {
-    	super.onInit();
-    	mUniformThresholdLocation = GLES20.glGetUniformLocation(getProgram(), "threshold");
-    }
-    
-    @Override
-    public void onInitialized() {
-    	super.onInitialized();
-    	setThreshold(mThreshold);
-    }
-    
-    public void setThreshold(final float threshold) {
-    	mThreshold = threshold;
-    	setFloat(mUniformThresholdLocation, threshold);
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index 05b15fcf..3a456783 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -19,12 +19,16 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.media.MediaScannerConnection;
 import android.graphics.PixelFormat;
+import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView;
-import android.os.*;
+import android.os.AsyncTask;
+import android.os.Build;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.Looper;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.ViewTreeObserver;
@@ -37,6 +41,8 @@
 import java.nio.IntBuffer;
 import java.util.concurrent.Semaphore;
 
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter;
+
 public class GPUImageView extends FrameLayout {
 
     private GLSurfaceView mGLSurfaceView;
@@ -183,8 +189,8 @@ public void requestRender() {
      * listener.
      *
      * @param folderName the folder name
-     * @param fileName the file name
-     * @param listener the listener
+     * @param fileName   the file name
+     * @param listener   the listener
      */
     public void saveToPictures(final String folderName, final String fileName,
                                final OnPictureSavedListener listener) {
@@ -285,6 +291,7 @@ public void run() {
 
     /**
      * Capture the current image with the size as it is displayed and retrieve it as Bitmap.
+     *
      * @return current output as Bitmap
      * @throws InterruptedException
      */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
index e8589704..426621c1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
@@ -16,8 +16,6 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import java.nio.IntBuffer;
-
 import android.graphics.Bitmap;
 import android.graphics.Bitmap.Config;
 import android.hardware.Camera.Size;
@@ -25,6 +23,8 @@
 import android.opengl.GLUtils;
 import android.util.Log;
 
+import java.nio.IntBuffer;
+
 public class OpenGlUtils {
     public static final int NO_TEXTURE = -1;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
index ac23f599..5ecf470a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
@@ -8,6 +8,19 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
+import android.graphics.Bitmap;
+import android.opengl.GLSurfaceView;
+import android.util.Log;
+
+import java.nio.IntBuffer;
+
+import javax.microedition.khronos.egl.EGL10;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.egl.EGLContext;
+import javax.microedition.khronos.egl.EGLDisplay;
+import javax.microedition.khronos.egl.EGLSurface;
+import javax.microedition.khronos.opengles.GL10;
+
 import static javax.microedition.khronos.egl.EGL10.EGL_ALPHA_SIZE;
 import static javax.microedition.khronos.egl.EGL10.EGL_BLUE_SIZE;
 import static javax.microedition.khronos.egl.EGL10.EGL_DEFAULT_DISPLAY;
@@ -22,19 +35,6 @@
 import static javax.microedition.khronos.opengles.GL10.GL_RGBA;
 import static javax.microedition.khronos.opengles.GL10.GL_UNSIGNED_BYTE;
 
-import java.nio.IntBuffer;
-
-import javax.microedition.khronos.egl.EGL10;
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.egl.EGLContext;
-import javax.microedition.khronos.egl.EGLDisplay;
-import javax.microedition.khronos.egl.EGLSurface;
-import javax.microedition.khronos.opengles.GL10;
-
-import android.graphics.Bitmap;
-import android.opengl.GLSurfaceView;
-import android.util.Log;
-
 public class PixelBuffer {
     final static String TAG = "PixelBuffer";
     final static boolean LIST_CONFIGS = false;
@@ -58,7 +58,7 @@ public PixelBuffer(final int width, final int height) {
         mHeight = height;
 
         int[] version = new int[2];
-        int[] attribList = new int[] {
+        int[] attribList = new int[]{
                 EGL_WIDTH, mWidth,
                 EGL_HEIGHT, mHeight,
                 EGL_NONE
@@ -69,7 +69,7 @@ public PixelBuffer(final int width, final int height) {
         mEGLDisplay = mEGL.eglGetDisplay(EGL_DEFAULT_DISPLAY);
         mEGL.eglInitialize(mEGLDisplay, version);
         mEGLConfig = chooseConfig(); // Choosing a config is a little more
-                                     // complicated
+        // complicated
 
         // mEGLContext = mEGL.eglCreateContext(mEGLDisplay, mEGLConfig,
         // EGL_NO_CONTEXT, null);
@@ -136,7 +136,7 @@ public void destroy() {
     }
 
     private EGLConfig chooseConfig() {
-        int[] attribList = new int[] {
+        int[] attribList = new int[]{
                 EGL_DEPTH_SIZE, 0,
                 EGL_STENCIL_SIZE, 0,
                 EGL_RED_SIZE, 8,
@@ -202,7 +202,7 @@ private void convertToBitmap() {
                 iat[(mHeight - i - 1) * mWidth + j] = ia[i * mWidth + j];
             }
         }
-        
+
 
         mBitmap = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888);
         mBitmap.copyPixelsFromBuffer(IntBuffer.wrap(iat));
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java b/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
index bd2e840e..a6749669 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
@@ -26,11 +26,16 @@
      */
     public int asInt() {
         switch (this) {
-            case NORMAL: return 0;
-            case ROTATION_90: return 90;
-            case ROTATION_180: return 180;
-            case ROTATION_270: return 270;
-            default: throw new IllegalStateException("Unknown Rotation!");
+            case NORMAL:
+                return 0;
+            case ROTATION_90:
+                return 90;
+            case ROTATION_180:
+                return 180;
+            case ROTATION_270:
+                return 270;
+            default:
+                throw new IllegalStateException("Unknown Rotation!");
         }
     }
 
@@ -42,13 +47,19 @@ public int asInt() {
      */
     public static Rotation fromInt(int rotation) {
         switch (rotation) {
-            case 0: return NORMAL;
-            case 90: return ROTATION_90;
-            case 180: return ROTATION_180;
-            case 270: return ROTATION_270;
-            case 360: return NORMAL;
-            default: throw new IllegalStateException(
-                    rotation + " is an unknown rotation. Needs to be either 0, 90, 180 or 270!");
+            case 0:
+                return NORMAL;
+            case 90:
+                return ROTATION_90;
+            case 180:
+                return ROTATION_180;
+            case 270:
+                return ROTATION_270;
+            case 360:
+                return NORMAL;
+            default:
+                throw new IllegalStateException(
+                        rotation + " is an unknown rotation. Needs to be either 0, 90, 180 or 270!");
         }
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3ConvolutionFilter.java
similarity index 66%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3ConvolutionFilter.java
index 0c5e5a03..ae6f7325 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3ConvolutionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -23,58 +23,58 @@
  */
 public class GPUImage3x3ConvolutionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER = "" +
-            "precision highp float;\n" + 
-            "\n" + 
-            "uniform sampler2D inputImageTexture;\n" + 
-            "\n" + 
-            "uniform mediump mat3 convolutionMatrix;\n" + 
-            "\n" + 
-            "varying vec2 textureCoordinate;\n" + 
-            "varying vec2 leftTextureCoordinate;\n" + 
-            "varying vec2 rightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 topTextureCoordinate;\n" + 
-            "varying vec2 topLeftTextureCoordinate;\n" + 
-            "varying vec2 topRightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 bottomTextureCoordinate;\n" + 
-            "varying vec2 bottomLeftTextureCoordinate;\n" + 
-            "varying vec2 bottomRightTextureCoordinate;\n" + 
-            "\n" + 
-            "void main()\n" + 
-            "{\n" + 
-            "    mediump vec4 bottomColor = texture2D(inputImageTexture, bottomTextureCoordinate);\n" + 
-            "    mediump vec4 bottomLeftColor = texture2D(inputImageTexture, bottomLeftTextureCoordinate);\n" + 
-            "    mediump vec4 bottomRightColor = texture2D(inputImageTexture, bottomRightTextureCoordinate);\n" + 
-            "    mediump vec4 centerColor = texture2D(inputImageTexture, textureCoordinate);\n" + 
-            "    mediump vec4 leftColor = texture2D(inputImageTexture, leftTextureCoordinate);\n" + 
-            "    mediump vec4 rightColor = texture2D(inputImageTexture, rightTextureCoordinate);\n" + 
-            "    mediump vec4 topColor = texture2D(inputImageTexture, topTextureCoordinate);\n" + 
-            "    mediump vec4 topRightColor = texture2D(inputImageTexture, topRightTextureCoordinate);\n" + 
-            "    mediump vec4 topLeftColor = texture2D(inputImageTexture, topLeftTextureCoordinate);\n" + 
-            "\n" + 
-            "    mediump vec4 resultColor = topLeftColor * convolutionMatrix[0][0] + topColor * convolutionMatrix[0][1] + topRightColor * convolutionMatrix[0][2];\n" + 
-            "    resultColor += leftColor * convolutionMatrix[1][0] + centerColor * convolutionMatrix[1][1] + rightColor * convolutionMatrix[1][2];\n" + 
-            "    resultColor += bottomLeftColor * convolutionMatrix[2][0] + bottomColor * convolutionMatrix[2][1] + bottomRightColor * convolutionMatrix[2][2];\n" + 
-            "\n" + 
-            "    gl_FragColor = resultColor;\n" + 
-            "}"; 
- 
+            "precision highp float;\n" +
+            "\n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            "\n" +
+            "uniform mediump mat3 convolutionMatrix;\n" +
+            "\n" +
+            "varying vec2 textureCoordinate;\n" +
+            "varying vec2 leftTextureCoordinate;\n" +
+            "varying vec2 rightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 topTextureCoordinate;\n" +
+            "varying vec2 topLeftTextureCoordinate;\n" +
+            "varying vec2 topRightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 bottomTextureCoordinate;\n" +
+            "varying vec2 bottomLeftTextureCoordinate;\n" +
+            "varying vec2 bottomRightTextureCoordinate;\n" +
+            "\n" +
+            "void main()\n" +
+            "{\n" +
+            "    mediump vec4 bottomColor = texture2D(inputImageTexture, bottomTextureCoordinate);\n" +
+            "    mediump vec4 bottomLeftColor = texture2D(inputImageTexture, bottomLeftTextureCoordinate);\n" +
+            "    mediump vec4 bottomRightColor = texture2D(inputImageTexture, bottomRightTextureCoordinate);\n" +
+            "    mediump vec4 centerColor = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "    mediump vec4 leftColor = texture2D(inputImageTexture, leftTextureCoordinate);\n" +
+            "    mediump vec4 rightColor = texture2D(inputImageTexture, rightTextureCoordinate);\n" +
+            "    mediump vec4 topColor = texture2D(inputImageTexture, topTextureCoordinate);\n" +
+            "    mediump vec4 topRightColor = texture2D(inputImageTexture, topRightTextureCoordinate);\n" +
+            "    mediump vec4 topLeftColor = texture2D(inputImageTexture, topLeftTextureCoordinate);\n" +
+            "\n" +
+            "    mediump vec4 resultColor = topLeftColor * convolutionMatrix[0][0] + topColor * convolutionMatrix[0][1] + topRightColor * convolutionMatrix[0][2];\n" +
+            "    resultColor += leftColor * convolutionMatrix[1][0] + centerColor * convolutionMatrix[1][1] + rightColor * convolutionMatrix[1][2];\n" +
+            "    resultColor += bottomLeftColor * convolutionMatrix[2][0] + bottomColor * convolutionMatrix[2][1] + bottomRightColor * convolutionMatrix[2][2];\n" +
+            "\n" +
+            "    gl_FragColor = resultColor;\n" +
+            "}";
+
     private float[] mConvolutionKernel;
     private int mUniformConvolutionMatrix;
 
     /**
      * Instantiates a new GPUimage3x3ConvolutionFilter with default values, that
-     * will look like the original image. 
+     * will look like the original image.
      */
     public GPUImage3x3ConvolutionFilter() {
-        this(new float[] {
+        this(new float[]{
                 0.0f, 0.0f, 0.0f,
                 0.0f, 1.0f, 0.0f,
                 0.0f, 0.0f, 0.0f
         });
     }
-    
+
     /**
      * Instantiates a new GPUimage3x3ConvolutionFilter with given convolution kernel.
      *
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3TextureSamplingFilter.java
similarity index 69%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3TextureSamplingFilter.java
index 2e6820a3..15d2595e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3TextureSamplingFilter.java
@@ -14,57 +14,57 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
 public class GPUImage3x3TextureSamplingFilter extends GPUImageFilter {
     public static final String THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER = "" +
-            "attribute vec4 position;\n" + 
-            "attribute vec4 inputTextureCoordinate;\n" + 
-            "\n" + 
-            "uniform highp float texelWidth; \n" + 
-            "uniform highp float texelHeight; \n" + 
-            "\n" + 
-            "varying vec2 textureCoordinate;\n" + 
-            "varying vec2 leftTextureCoordinate;\n" + 
-            "varying vec2 rightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 topTextureCoordinate;\n" + 
-            "varying vec2 topLeftTextureCoordinate;\n" + 
-            "varying vec2 topRightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 bottomTextureCoordinate;\n" + 
-            "varying vec2 bottomLeftTextureCoordinate;\n" + 
-            "varying vec2 bottomRightTextureCoordinate;\n" + 
-            "\n" + 
-            "void main()\n" + 
-            "{\n" + 
-            "    gl_Position = position;\n" + 
-            "\n" + 
-            "    vec2 widthStep = vec2(texelWidth, 0.0);\n" + 
-            "    vec2 heightStep = vec2(0.0, texelHeight);\n" + 
-            "    vec2 widthHeightStep = vec2(texelWidth, texelHeight);\n" + 
-            "    vec2 widthNegativeHeightStep = vec2(texelWidth, -texelHeight);\n" + 
-            "\n" + 
-            "    textureCoordinate = inputTextureCoordinate.xy;\n" + 
-            "    leftTextureCoordinate = inputTextureCoordinate.xy - widthStep;\n" + 
-            "    rightTextureCoordinate = inputTextureCoordinate.xy + widthStep;\n" + 
-            "\n" + 
-            "    topTextureCoordinate = inputTextureCoordinate.xy - heightStep;\n" + 
-            "    topLeftTextureCoordinate = inputTextureCoordinate.xy - widthHeightStep;\n" + 
-            "    topRightTextureCoordinate = inputTextureCoordinate.xy + widthNegativeHeightStep;\n" + 
-            "\n" + 
-            "    bottomTextureCoordinate = inputTextureCoordinate.xy + heightStep;\n" + 
-            "    bottomLeftTextureCoordinate = inputTextureCoordinate.xy - widthNegativeHeightStep;\n" + 
-            "    bottomRightTextureCoordinate = inputTextureCoordinate.xy + widthHeightStep;\n" + 
+            "attribute vec4 position;\n" +
+            "attribute vec4 inputTextureCoordinate;\n" +
+            "\n" +
+            "uniform highp float texelWidth; \n" +
+            "uniform highp float texelHeight; \n" +
+            "\n" +
+            "varying vec2 textureCoordinate;\n" +
+            "varying vec2 leftTextureCoordinate;\n" +
+            "varying vec2 rightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 topTextureCoordinate;\n" +
+            "varying vec2 topLeftTextureCoordinate;\n" +
+            "varying vec2 topRightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 bottomTextureCoordinate;\n" +
+            "varying vec2 bottomLeftTextureCoordinate;\n" +
+            "varying vec2 bottomRightTextureCoordinate;\n" +
+            "\n" +
+            "void main()\n" +
+            "{\n" +
+            "    gl_Position = position;\n" +
+            "\n" +
+            "    vec2 widthStep = vec2(texelWidth, 0.0);\n" +
+            "    vec2 heightStep = vec2(0.0, texelHeight);\n" +
+            "    vec2 widthHeightStep = vec2(texelWidth, texelHeight);\n" +
+            "    vec2 widthNegativeHeightStep = vec2(texelWidth, -texelHeight);\n" +
+            "\n" +
+            "    textureCoordinate = inputTextureCoordinate.xy;\n" +
+            "    leftTextureCoordinate = inputTextureCoordinate.xy - widthStep;\n" +
+            "    rightTextureCoordinate = inputTextureCoordinate.xy + widthStep;\n" +
+            "\n" +
+            "    topTextureCoordinate = inputTextureCoordinate.xy - heightStep;\n" +
+            "    topLeftTextureCoordinate = inputTextureCoordinate.xy - widthHeightStep;\n" +
+            "    topRightTextureCoordinate = inputTextureCoordinate.xy + widthNegativeHeightStep;\n" +
+            "\n" +
+            "    bottomTextureCoordinate = inputTextureCoordinate.xy + heightStep;\n" +
+            "    bottomLeftTextureCoordinate = inputTextureCoordinate.xy - widthNegativeHeightStep;\n" +
+            "    bottomRightTextureCoordinate = inputTextureCoordinate.xy + widthHeightStep;\n" +
             "}";
 
     private int mUniformTexelWidthLocation;
     private int mUniformTexelHeightLocation;
 
     private boolean mHasOverriddenImageSizeFactor = false;
-    private float mTexelWidth; 
+    private float mTexelWidth;
     private float mTexelHeight;
     private float mLineSize = 1.0f;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAddBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAddBlendFilter.java
index 59dcb343..073db2b6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAddBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageAddBlendFilter extends GPUImageTwoInputFilter {
     public static final String ADD_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAlphaBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAlphaBlendFilter.java
index 753c24d6..e010f53b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAlphaBlendFilter.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
  */
-public class GPUImageAlphaBlendFilter extends GPUImageMixBlendFilter{
+public class GPUImageAlphaBlendFilter extends GPUImageMixBlendFilter {
     public static final String ALPHA_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
             " varying highp vec2 textureCoordinate2;\n" +
             "\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBilateralFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBilateralFilter.java
new file mode 100644
index 00000000..97202680
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBilateralFilter.java
@@ -0,0 +1,154 @@
+/**
+ * @author wysaid
+ * @mail admin@wysaid.org
+ */
+
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import android.opengl.GLES20;
+
+
+public class GPUImageBilateralFilter extends GPUImageFilter {
+    public static final String BILATERAL_VERTEX_SHADER = "" +
+            "attribute vec4 position;\n" +
+            "attribute vec4 inputTextureCoordinate;\n" +
+
+            "const int GAUSSIAN_SAMPLES = 9;\n" +
+
+            "uniform vec2 singleStepOffset;\n" +
+
+            "varying vec2 textureCoordinate;\n" +
+            "varying vec2 blurCoordinates[GAUSSIAN_SAMPLES];\n" +
+
+            "void main()\n" +
+            "{\n" +
+            "	gl_Position = position;\n" +
+            "	textureCoordinate = inputTextureCoordinate.xy;\n" +
+
+            "	int multiplier = 0;\n" +
+            "	vec2 blurStep;\n" +
+
+            "	for (int i = 0; i < GAUSSIAN_SAMPLES; i++)\n" +
+            "	{\n" +
+            "		multiplier = (i - ((GAUSSIAN_SAMPLES - 1) / 2));\n" +
+
+            "		blurStep = float(multiplier) * singleStepOffset;\n" +
+            "		blurCoordinates[i] = inputTextureCoordinate.xy + blurStep;\n" +
+            "	}\n" +
+            "}";
+
+    public static final String BILATERAL_FRAGMENT_SHADER = "" +
+            "uniform sampler2D inputImageTexture;\n" +
+
+            " const lowp int GAUSSIAN_SAMPLES = 9;\n" +
+
+            " varying highp vec2 textureCoordinate;\n" +
+            " varying highp vec2 blurCoordinates[GAUSSIAN_SAMPLES];\n" +
+
+            " uniform mediump float distanceNormalizationFactor;\n" +
+
+            " void main()\n" +
+            " {\n" +
+            "     lowp vec4 centralColor;\n" +
+            "     lowp float gaussianWeightTotal;\n" +
+            "     lowp vec4 sum;\n" +
+            "     lowp vec4 sampleColor;\n" +
+            "     lowp float distanceFromCentralColor;\n" +
+            "     lowp float gaussianWeight;\n" +
+            "     \n" +
+            "     centralColor = texture2D(inputImageTexture, blurCoordinates[4]);\n" +
+            "     gaussianWeightTotal = 0.18;\n" +
+            "     sum = centralColor * 0.18;\n" +
+            "     \n" +
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[0]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.05 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[1]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.09 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[2]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.12 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[3]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.15 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[5]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.15 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[6]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.12 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[7]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.09 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+
+            "     sampleColor = texture2D(inputImageTexture, blurCoordinates[8]);\n" +
+            "     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\n" +
+            "     gaussianWeight = 0.05 * (1.0 - distanceFromCentralColor);\n" +
+            "     gaussianWeightTotal += gaussianWeight;\n" +
+            "     sum += sampleColor * gaussianWeight;\n" +
+            "     gl_FragColor = sum / gaussianWeightTotal;\n" +
+//			" gl_FragColor.r = distanceNormalizationFactor / 20.0;" + 
+            " }";
+
+    private float mDistanceNormalizationFactor;
+    private int mDisFactorLocation;
+    private int mSingleStepOffsetLocation;
+
+    public GPUImageBilateralFilter() {
+        this(8.0f);
+    }
+
+    public GPUImageBilateralFilter(final float distanceNormalizationFactor) {
+        super(BILATERAL_VERTEX_SHADER, BILATERAL_FRAGMENT_SHADER);
+        mDistanceNormalizationFactor = distanceNormalizationFactor;
+    }
+
+    @Override
+    public void onInit() {
+        super.onInit();
+        mDisFactorLocation = GLES20.glGetUniformLocation(getProgram(), "distanceNormalizationFactor");
+        mSingleStepOffsetLocation = GLES20.glGetUniformLocation(getProgram(), "singleStepOffset");
+    }
+
+    @Override
+    public void onInitialized() {
+        super.onInitialized();
+        setDistanceNormalizationFactor(mDistanceNormalizationFactor);
+    }
+
+    public void setDistanceNormalizationFactor(final float newValue) {
+        mDistanceNormalizationFactor = newValue;
+        setFloat(mDisFactorLocation, newValue);
+    }
+
+    private void setTexelSize(final float w, final float h) {
+        setFloatVec2(mSingleStepOffsetLocation, new float[]{1.0f / w, 1.0f / h});
+    }
+
+    @Override
+    public void onOutputSizeChanged(final int width, final int height) {
+        super.onOutputSizeChanged(width, height);
+        setTexelSize(width, height);
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBoxBlurFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBoxBlurFilter.java
index 4e681b3c..d6713b18 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBoxBlurFilter.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * A hardware-accelerated 9-hit box blur of an image
- *
+ * <p/>
  * scaling: for the size of the applied blur, default of 1.0
  */
 public class GPUImageBoxBlurFilter extends GPUImageTwoPassTextureSamplingFilter {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBrightnessFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBrightnessFilter.java
index e528ee87..5e2f2714 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBrightnessFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBulgeDistortionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBulgeDistortionFilter.java
index af49bedd..4f419254 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBulgeDistortionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCGAColorspaceFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCGAColorspaceFilter.java
index 52585956..3f04173d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCGAColorspaceFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageCGAColorspaceFilter extends GPUImageFilter {
     public static final String CGACOLORSPACE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageChromaKeyBlendFilter.java
similarity index 93%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageChromaKeyBlendFilter.java
index 7957b05a..cd951b88 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageChromaKeyBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -96,12 +96,13 @@ public void setThresholdSensitivity(final float thresholdSensitivity) {
         setFloat(mThresholdSensitivityLocation, mThresholdSensitivity);
     }
 
-    /** The color to be replaced is specified using individual red, green, and blue components (normalized to 1.0).
+    /**
+     * The color to be replaced is specified using individual red, green, and blue components (normalized to 1.0).
      * The default is green: (0.0, 1.0, 0.0).
      *
-     * @param redComponent Red component of color to be replaced
+     * @param redComponent   Red component of color to be replaced
      * @param greenComponent Green component of color to be replaced
-     * @param blueComponent Blue component of color to be replaced
+     * @param blueComponent  Blue component of color to be replaced
      */
     public void setColorToReplace(float redComponent, float greenComponent, float blueComponent) {
         mColorToReplace = new float[]{redComponent, greenComponent, blueComponent};
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBalanceFilter.java
similarity index 60%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBalanceFilter.java
index 68c078a6..d17f604c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBalanceFilter.java
@@ -1,4 +1,4 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -8,133 +8,133 @@
 public class GPUImageColorBalanceFilter extends GPUImageFilter {
 
     public static final String GPU_IMAGE_COLOR_BALANCE_FRAGMENT_SHADER = "" +
-            "varying highp vec2 textureCoordinate;\n"   +
-            "uniform sampler2D inputImageTexture;\n"    +
+            "varying highp vec2 textureCoordinate;\n" +
+            "uniform sampler2D inputImageTexture;\n" +
             "uniform lowp vec3 shadowsShift;\n" +
-            "uniform lowp vec3 midtonesShift;\n"    +
-            "uniform lowp vec3 highlightsShift;\n"  +
+            "uniform lowp vec3 midtonesShift;\n" +
+            "uniform lowp vec3 highlightsShift;\n" +
             "uniform int preserveLuminosity;\n" +
             "lowp vec3 RGBToHSL(lowp vec3 color)\n" +
 
-            "{\n"   +
-            "lowp vec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\n"    +
+            "{\n" +
+            "lowp vec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\n" +
 
-            "lowp float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\n"   +
-            "lowp float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\n"   +
-            "lowp float delta = fmax - fmin;             //Delta RGB value\n"   +
+            "lowp float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\n" +
+            "lowp float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\n" +
+            "lowp float delta = fmax - fmin;             //Delta RGB value\n" +
 
-            "hsl.z = (fmax + fmin) / 2.0; // Luminance\n"   +
+            "hsl.z = (fmax + fmin) / 2.0; // Luminance\n" +
 
-            "if (delta == 0.0)		//This is a gray, no chroma...\n"   +
-            "{\n"   +
-            "    hsl.x = 0.0;	// Hue\n"   +
-            "    hsl.y = 0.0;	// Saturation\n"    +
-            "}\n"   +
+            "if (delta == 0.0)		//This is a gray, no chroma...\n" +
+            "{\n" +
+            "    hsl.x = 0.0;	// Hue\n" +
+            "    hsl.y = 0.0;	// Saturation\n" +
+            "}\n" +
             "else                                    //Chromatic data...\n" +
-            "{\n"   +
-            "    if (hsl.z < 0.5)\n"    +
-            "        hsl.y = delta / (fmax + fmin); // Saturation\n"    +
-            "    else\n"+
-            "        hsl.y = delta / (2.0 - fmax - fmin); // Saturation\n"  +
+            "{\n" +
+            "    if (hsl.z < 0.5)\n" +
+            "        hsl.y = delta / (fmax + fmin); // Saturation\n" +
+            "    else\n" +
+            "        hsl.y = delta / (2.0 - fmax - fmin); // Saturation\n" +
             "\n" +
             "    lowp float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\n" +
             "    lowp float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\n" +
             "    lowp float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\n" +
             "\n" +
-            "    if (color.r == fmax )\n"   +
+            "    if (color.r == fmax )\n" +
             "        hsl.x = deltaB - deltaG; // Hue\n" +
-            "    else if (color.g == fmax)\n"   +
-            "        hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\n"   +
-            "    else if (color.b == fmax)\n"   +
-            "        hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\n"   +
-
-            "    if (hsl.x < 0.0)\n"    +
-            "        hsl.x += 1.0; // Hue\n"    +
-            "    else if (hsl.x > 1.0)\n"   +
-            "        hsl.x -= 1.0; // Hue\n"    +
-            "}\n"   +
+            "    else if (color.g == fmax)\n" +
+            "        hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\n" +
+            "    else if (color.b == fmax)\n" +
+            "        hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\n" +
+
+            "    if (hsl.x < 0.0)\n" +
+            "        hsl.x += 1.0; // Hue\n" +
+            "    else if (hsl.x > 1.0)\n" +
+            "        hsl.x -= 1.0; // Hue\n" +
+            "}\n" +
             "\n" +
             "return hsl;\n" +
-            "}\n"   +
-
-            "lowp float HueToRGB(lowp float f1, lowp float f2, lowp float hue)\n"   +
-            "{\n"+
-            "    if (hue < 0.0)\n"+
-            "        hue += 1.0;\n"+
-            "    else if (hue > 1.0)\n"+
-            "        hue -= 1.0;\n"+
-            "    lowp float res;\n"+
-            "    if ((6.0 * hue) < 1.0)\n"+
-            "        res = f1 + (f2 - f1) * 6.0 * hue;\n"+
-            "    else if ((2.0 * hue) < 1.0)\n"+
-            "        res = f2;\n"+
-            "    else if ((3.0 * hue) < 2.0)\n"+
-            "        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n"+
-            "    else\n"+
-            "        res = f1;\n"+
-            "    return res;\n"+
-            "}\n"+
-
-            "lowp vec3 HSLToRGB(lowp vec3 hsl)\n"+
-            "{\n"   +
-            "    lowp vec3 rgb;\n"  +
-
-            "    if (hsl.y == 0.0)\n"   +
+            "}\n" +
+
+            "lowp float HueToRGB(lowp float f1, lowp float f2, lowp float hue)\n" +
+            "{\n" +
+            "    if (hue < 0.0)\n" +
+            "        hue += 1.0;\n" +
+            "    else if (hue > 1.0)\n" +
+            "        hue -= 1.0;\n" +
+            "    lowp float res;\n" +
+            "    if ((6.0 * hue) < 1.0)\n" +
+            "        res = f1 + (f2 - f1) * 6.0 * hue;\n" +
+            "    else if ((2.0 * hue) < 1.0)\n" +
+            "        res = f2;\n" +
+            "    else if ((3.0 * hue) < 2.0)\n" +
+            "        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n" +
+            "    else\n" +
+            "        res = f1;\n" +
+            "    return res;\n" +
+            "}\n" +
+
+            "lowp vec3 HSLToRGB(lowp vec3 hsl)\n" +
+            "{\n" +
+            "    lowp vec3 rgb;\n" +
+
+            "    if (hsl.y == 0.0)\n" +
             "        rgb = vec3(hsl.z); // Luminance\n" +
-            "    else\n"    +
-            "    {\n"   +
-            "        lowp float f2;\n"  +
+            "    else\n" +
+            "    {\n" +
+            "        lowp float f2;\n" +
 
-            "        if (hsl.z < 0.5)\n"    +
+            "        if (hsl.z < 0.5)\n" +
             "            f2 = hsl.z * (1.0 + hsl.y);\n" +
-            "        else\n"    +
+            "        else\n" +
             "            f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);\n" +
 
-            "        lowp float f1 = 2.0 * hsl.z - f2;\n"   +
+            "        lowp float f1 = 2.0 * hsl.z - f2;\n" +
 
-            "        rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));\n"    +
-            "        rgb.g = HueToRGB(f1, f2, hsl.x);\n"    +
+            "        rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));\n" +
+            "        rgb.g = HueToRGB(f1, f2, hsl.x);\n" +
             "        rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));\n" +
-            "    }\n"   +
+            "    }\n" +
 
-            "    return rgb;\n  "+
+            "    return rgb;\n  " +
             "}\n" +
 
-            "lowp float RGBToL(lowp vec3 color)\n"  +
-            "{\n"   +
-            "    lowp float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\n"   +
-            "    lowp float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\n"   +
+            "lowp float RGBToL(lowp vec3 color)\n" +
+            "{\n" +
+            "    lowp float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\n" +
+            "    lowp float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\n" +
 
-            "    return (fmax + fmin) / 2.0; // Luminance\n"    +
-            "}\n"   +
+            "    return (fmax + fmin) / 2.0; // Luminance\n" +
+            "}\n" +
 
-            "void main()\n"+
-            "{\n"+
-            "    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n"   +
+            "void main()\n" +
+            "{\n" +
+            "    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
 
             "    // Alternative way:\n" +
-            "    //lowp vec3 lightness = RGBToL(textureColor.rgb);\n"   +
+            "    //lowp vec3 lightness = RGBToL(textureColor.rgb);\n" +
             "    lowp vec3 lightness = textureColor.rgb;\n" +
 
-            "    const lowp float a = 0.25;\n"  +
+            "    const lowp float a = 0.25;\n" +
             "    const lowp float b = 0.333;\n" +
-            "    const lowp float scale = 0.7;\n"   +
+            "    const lowp float scale = 0.7;\n" +
 
-            "    lowp vec3 shadows = shadowsShift * (clamp((lightness - b) / -a + 0.5, 0.0, 1.0) * scale);\n"   +
-            "    lowp vec3 midtones = midtonesShift * (clamp((lightness - b) / a + 0.5, 0.0, 1.0) *\n"  +
+            "    lowp vec3 shadows = shadowsShift * (clamp((lightness - b) / -a + 0.5, 0.0, 1.0) * scale);\n" +
+            "    lowp vec3 midtones = midtonesShift * (clamp((lightness - b) / a + 0.5, 0.0, 1.0) *\n" +
             "        clamp((lightness + b - 1.0) / -a + 0.5, 0.0, 1.0) * scale);\n" +
-            "    lowp vec3 highlights = highlightsShift * (clamp((lightness + b - 1.0) / a + 0.5, 0.0, 1.0) * scale);\n"    +
-
-            "    mediump vec3 newColor = textureColor.rgb + shadows + midtones + highlights;\n"+
-            "    newColor = clamp(newColor, 0.0, 1.0);\n    "+
-
-            "    if (preserveLuminosity != 0) {\n   "+
-            "        lowp vec3 newHSL = RGBToHSL(newColor);\n"  +
-            "        lowp float oldLum = RGBToL(textureColor.rgb);\n"   +
-            "        textureColor.rgb = HSLToRGB(vec3(newHSL.x, newHSL.y, oldLum));\n"  +
-            "        gl_FragColor = textureColor;\n"    +
-            "    } else {\n"    +
-            "        gl_FragColor = vec4(newColor.rgb, textureColor.w);\n"  +
+            "    lowp vec3 highlights = highlightsShift * (clamp((lightness + b - 1.0) / a + 0.5, 0.0, 1.0) * scale);\n" +
+
+            "    mediump vec3 newColor = textureColor.rgb + shadows + midtones + highlights;\n" +
+            "    newColor = clamp(newColor, 0.0, 1.0);\n    " +
+
+            "    if (preserveLuminosity != 0) {\n   " +
+            "        lowp vec3 newHSL = RGBToHSL(newColor);\n" +
+            "        lowp float oldLum = RGBToL(textureColor.rgb);\n" +
+            "        textureColor.rgb = HSLToRGB(vec3(newHSL.x, newHSL.y, oldLum));\n" +
+            "        gl_FragColor = textureColor;\n" +
+            "    } else {\n" +
+            "        gl_FragColor = vec4(newColor.rgb, textureColor.w);\n" +
             "    }\n" +
             "}\n";
 
@@ -192,6 +192,6 @@ public void setHighlights(float[] highlights) {
 
     public void setPreserveLuminosity(boolean preserveLuminosity) {
         this.preserveLuminosity = preserveLuminosity;
-        setInteger(mPreserveLuminosityLocation, preserveLuminosity ? 1: 0);
+        setInteger(mPreserveLuminosityLocation, preserveLuminosity ? 1 : 0);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBlendFilter.java
index 0f5de140..fb7e871f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageColorBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBurnBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBurnBlendFilter.java
index e3b5c42a..f27eaef5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBurnBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageColorBurnBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_BURN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorDodgeBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorDodgeBlendFilter.java
index 702a3a98..0864b52a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorDodgeBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageColorDodgeBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_DODGE_BLEND_FRAGMENT_SHADER = "precision mediump float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorInvertFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorInvertFilter.java
index 2d8df9b9..1f2cc8bc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorInvertFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Invert all the colors in the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorMatrixFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorMatrixFilter.java
index 59203c4d..bf504d76 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorMatrixFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -44,7 +44,7 @@
     private int mIntensityLocation;
 
     public GPUImageColorMatrixFilter() {
-        this(1.0f, new float[] {
+        this(1.0f, new float[]{
                 1.0f, 0.0f, 0.0f, 0.0f,
                 0.0f, 1.0f, 0.0f, 0.0f,
                 0.0f, 0.0f, 1.0f, 0.0f,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageContrastFilter.java
similarity index 80%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageContrastFilter.java
index 1d2b9107..dfc422c0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageContrastFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -25,16 +25,16 @@
  */
 public class GPUImageContrastFilter extends GPUImageFilter {
     public static final String CONTRAST_FRAGMENT_SHADER = "" +
-            "varying highp vec2 textureCoordinate;\n" + 
-            " \n" + 
-            " uniform sampler2D inputImageTexture;\n" + 
-            " uniform lowp float contrast;\n" + 
-            " \n" + 
-            " void main()\n" + 
-            " {\n" + 
-            "     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" + 
-            "     \n" + 
-            "     gl_FragColor = vec4(((textureColor.rgb - vec3(0.5)) * contrast + vec3(0.5)), textureColor.w);\n" + 
+            "varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform lowp float contrast;\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(((textureColor.rgb - vec3(0.5)) * contrast + vec3(0.5)), textureColor.w);\n" +
             " }";
 
     private int mContrastLocation;
@@ -43,7 +43,7 @@
     public GPUImageContrastFilter() {
         this(1.2f);
     }
-    
+
     public GPUImageContrastFilter(float contrast) {
         super(NO_FILTER_VERTEX_SHADER, CONTRAST_FRAGMENT_SHADER);
         mContrast = contrast;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCrosshatchFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCrosshatchFilter.java
index 04a3d4c7..5abff8ff 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCrosshatchFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDarkenBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDarkenBlendFilter.java
index 385e8e3a..7e8ac7fb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDarkenBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageDarkenBlendFilter extends GPUImageTwoInputFilter {
     public static final String DARKEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDifferenceBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDifferenceBlendFilter.java
index 1a32cd0c..4e9e8a58 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDifferenceBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageDifferenceBlendFilter extends GPUImageTwoInputFilter {
     public static final String DIFFERENCE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDilationFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDilationFilter.java
index f6ce4e2f..6a7f2583 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDilationFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * For each pixel, this sets it to the maximum value of the red channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDirectionalSobelEdgeDetectionFilter.java
similarity index 58%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDirectionalSobelEdgeDetectionFilter.java
index a5884a12..f63a6000 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDirectionalSobelEdgeDetectionFilter.java
@@ -14,48 +14,48 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 
 public class GPUImageDirectionalSobelEdgeDetectionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String DIRECTIONAL_SOBEL_EDGE_DETECTION_FRAGMENT_SHADER = "" +
-            "precision mediump float;\n" + 
+            "precision mediump float;\n" +
             "\n" +
-            "varying vec2 textureCoordinate;\n" + 
-            "varying vec2 leftTextureCoordinate;\n" + 
-            "varying vec2 rightTextureCoordinate;\n" + 
+            "varying vec2 textureCoordinate;\n" +
+            "varying vec2 leftTextureCoordinate;\n" +
+            "varying vec2 rightTextureCoordinate;\n" +
             "\n" +
-            "varying vec2 topTextureCoordinate;\n" + 
-            "varying vec2 topLeftTextureCoordinate;\n" + 
-            "varying vec2 topRightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 bottomTextureCoordinate;\n" + 
-            "varying vec2 bottomLeftTextureCoordinate;\n" + 
-            "varying vec2 bottomRightTextureCoordinate;\n" + 
-            "\n" + 
-            "uniform sampler2D inputImageTexture;\n" + 
-            "\n" + 
-            "void main()\n" + 
-            "{\n" + 
-            "    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\n" + 
-            "    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\n" + 
-            "    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\n" + 
-            "    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\n" + 
-            "    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\n" + 
-            "    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\n" + 
-            "    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\n" + 
-            "    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\n" + 
-            "\n" + 
-            "    vec2 gradientDirection;\n" + 
-            "    gradientDirection.x = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\n" + 
-            "    gradientDirection.y = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\n" + 
-            "\n" + 
-            "    float gradientMagnitude = length(gradientDirection);\n" + 
-            "    vec2 normalizedDirection = normalize(gradientDirection);\n" + 
-            "    normalizedDirection = sign(normalizedDirection) * floor(abs(normalizedDirection) + 0.617316); // Offset by 1-sin(pi/8) to set to 0 if near axis, 1 if away\n" + 
-            "    normalizedDirection = (normalizedDirection + 1.0) * 0.5; // Place -1.0 - 1.0 within 0 - 1.0\n" + 
-            "\n" + 
-            "    gl_FragColor = vec4(gradientMagnitude, normalizedDirection.x, normalizedDirection.y, 1.0);\n" + 
+            "varying vec2 topTextureCoordinate;\n" +
+            "varying vec2 topLeftTextureCoordinate;\n" +
+            "varying vec2 topRightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 bottomTextureCoordinate;\n" +
+            "varying vec2 bottomLeftTextureCoordinate;\n" +
+            "varying vec2 bottomRightTextureCoordinate;\n" +
+            "\n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            "\n" +
+            "void main()\n" +
+            "{\n" +
+            "    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\n" +
+            "    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\n" +
+            "    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\n" +
+            "    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\n" +
+            "    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\n" +
+            "    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\n" +
+            "    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\n" +
+            "    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\n" +
+            "\n" +
+            "    vec2 gradientDirection;\n" +
+            "    gradientDirection.x = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\n" +
+            "    gradientDirection.y = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\n" +
+            "\n" +
+            "    float gradientMagnitude = length(gradientDirection);\n" +
+            "    vec2 normalizedDirection = normalize(gradientDirection);\n" +
+            "    normalizedDirection = sign(normalizedDirection) * floor(abs(normalizedDirection) + 0.617316); // Offset by 1-sin(pi/8) to set to 0 if near axis, 1 if away\n" +
+            "    normalizedDirection = (normalizedDirection + 1.0) * 0.5; // Place -1.0 - 1.0 within 0 - 1.0\n" +
+            "\n" +
+            "    gl_FragColor = vec4(gradientMagnitude, normalizedDirection.x, normalizedDirection.y, 1.0);\n" +
             "}";
 
     public GPUImageDirectionalSobelEdgeDetectionFilter() {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDissolveBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDissolveBlendFilter.java
index cd2880a6..40c49a8d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDissolveBlendFilter.java
@@ -14,14 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
  */
-public class GPUImageDissolveBlendFilter extends GPUImageMixBlendFilter{
+public class GPUImageDissolveBlendFilter extends GPUImageMixBlendFilter {
     public static final String DISSOLVE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
             " varying highp vec2 textureCoordinate2;\n" +
             "\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDivideBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDivideBlendFilter.java
index 179cd4ee..2acbed3e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDivideBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageDivideBlendFilter extends GPUImageTwoInputFilter {
     public static final String DIVIDE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageEmbossFilter.java
similarity index 93%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageEmbossFilter.java
index f4cbdef7..746d3585 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageEmbossFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies an emboss effect to the image.<br>
@@ -41,7 +41,7 @@ public void onInit() {
 
     public void setIntensity(final float intensity) {
         mIntensity = intensity;
-        setConvolutionKernel(new float[] {
+        setConvolutionKernel(new float[]{
                 intensity * (-2.0f), -intensity, 0.0f,
                 -intensity, 1.0f, intensity,
                 0.0f, intensity, intensity * 2.0f,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExclusionBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExclusionBlendFilter.java
index dcfc9346..4d3afa1c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExclusionBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageExclusionBlendFilter extends GPUImageTwoInputFilter {
     public static final String EXCLUSION_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExposureFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExposureFilter.java
index de5de414..73a811bf 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExposureFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFalseColorFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFalseColorFilter.java
index c815ad0f..d4a76d9e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFalseColorFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFilter.java
index 7a8641aa..2a6822cc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.content.Context;
 import android.content.res.AssetManager;
@@ -25,6 +25,8 @@
 import java.nio.FloatBuffer;
 import java.util.LinkedList;
 
+import jp.co.cyberagent.android.gpuimage.OpenGlUtils;
+
 public class GPUImageFilter {
     public static final String NO_FILTER_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" +
@@ -127,7 +129,8 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
         GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
     }
 
-    protected void onDrawArraysPre() {}
+    protected void onDrawArraysPre() {
+    }
 
     protected void runPendingOnDrawTasks() {
         while (!mRunOnDraw.isEmpty()) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFilterGroup.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFilterGroup.java
index 10ea41ca..65d2bc85 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFilterGroup.java
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.annotation.SuppressLint;
 import android.opengl.GLES20;
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -26,6 +25,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import jp.co.cyberagent.android.gpuimage.Rotation;
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
 import static jp.co.cyberagent.android.gpuimage.GPUImageRenderer.CUBE;
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
@@ -91,7 +93,7 @@ public void addFilter(GPUImageFilter aFilter) {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onInit()
+     * @see jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter#onInit()
      */
     @Override
     public void onInit() {
@@ -103,7 +105,7 @@ public void onInit() {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDestroy()
+     * @see jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter#onDestroy()
      */
     @Override
     public void onDestroy() {
@@ -128,7 +130,7 @@ private void destroyFramebuffers() {
     /*
      * (non-Javadoc)
      * @see
-     * jp.co.cyberagent.android.gpuimage.GPUImageFilter#onOutputSizeChanged(int,
+     * jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter#onOutputSizeChanged(int,
      * int)
      */
     @Override
@@ -175,10 +177,10 @@ public void onOutputSizeChanged(final int width, final int height) {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDraw(int,
+     * @see jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter#onDraw(int,
      * java.nio.FloatBuffer, java.nio.FloatBuffer)
      */
-    @SuppressLint("WrongCall")    
+    @SuppressLint("WrongCall")
     @Override
     public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                        final FloatBuffer textureBuffer) {
@@ -211,7 +213,7 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                 }
             }
         }
-     }
+    }
 
     /**
      * Gets the filters.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGammaFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGammaFilter.java
index 1f902d0f..7de511e7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGammaFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGaussianBlurFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGaussianBlurFilter.java
index c912f73e..54f37e88 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGaussianBlurFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * A more generalized 9x9 Gaussian blur filter
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGlassSphereFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGlassSphereFilter.java
index 460019cc..be41f8a8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGlassSphereFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGrayscaleFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGrayscaleFilter.java
index b0a67f9e..19360b19 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGrayscaleFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies a grayscale effect to the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHardLightBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHardLightBlendFilter.java
index 5bcb9c90..56a64653 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHardLightBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageHardLightBlendFilter extends GPUImageTwoInputFilter {
     public static final String HARD_LIGHT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHazeFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHazeFilter.java
index bb230abc..1ff02c41 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHazeFilter.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
 /**
  * The haze filter can be used to add or remove haze.
- *
+ * <p/>
  * This is similar to a UV filter.
  */
 public class GPUImageHazeFilter extends GPUImageFilter {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHighlightShadowFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHighlightShadowFilter.java
index 878c508a..3b49e933 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHighlightShadowFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -78,7 +78,7 @@ public void setHighlights(final float highlights) {
         mHighlights = highlights;
         setFloat(mHighlightsLocation, mHighlights);
     }
-    
+
     public void setShadows(final float shadows) {
         mShadows = shadows;
         setFloat(mShadowsLocation, mShadows);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueBlendFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueBlendFilter.java
index 3950901c..8d016333 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageHueBlendFilter extends GPUImageTwoInputFilter {
     public static final String HUE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueFilter.java
new file mode 100644
index 00000000..fe1b19dd
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueFilter.java
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import android.opengl.GLES20;
+
+public class GPUImageHueFilter extends GPUImageFilter {
+    public static final String HUE_FRAGMENT_SHADER = "" +
+            "precision highp float;\n" +
+            "varying highp vec2 textureCoordinate;\n" +
+            "\n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            "uniform mediump float hueAdjust;\n" +
+            "const highp vec4 kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\n" +
+            "const highp vec4 kRGBToI = vec4 (0.595716, -0.274453, -0.321263, 0.0);\n" +
+            "const highp vec4 kRGBToQ = vec4 (0.211456, -0.522591, 0.31135, 0.0);\n" +
+            "\n" +
+            "const highp vec4 kYIQToR = vec4 (1.0, 0.9563, 0.6210, 0.0);\n" +
+            "const highp vec4 kYIQToG = vec4 (1.0, -0.2721, -0.6474, 0.0);\n" +
+            "const highp vec4 kYIQToB = vec4 (1.0, -1.1070, 1.7046, 0.0);\n" +
+            "\n" +
+            "void main ()\n" +
+            "{\n" +
+            "    // Sample the input pixel\n" +
+            "    highp vec4 color = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "\n" +
+            "    // Convert to YIQ\n" +
+            "    highp float YPrime = dot (color, kRGBToYPrime);\n" +
+            "    highp float I = dot (color, kRGBToI);\n" +
+            "    highp float Q = dot (color, kRGBToQ);\n" +
+            "\n" +
+            "    // Calculate the hue and chroma\n" +
+            "    highp float hue = atan (Q, I);\n" +
+            "    highp float chroma = sqrt (I * I + Q * Q);\n" +
+            "\n" +
+            "    // Make the user's adjustments\n" +
+            "    hue += (-hueAdjust); //why negative rotation?\n" +
+            "\n" +
+            "    // Convert back to YIQ\n" +
+            "    Q = chroma * sin (hue);\n" +
+            "    I = chroma * cos (hue);\n" +
+            "\n" +
+            "    // Convert back to RGB\n" +
+            "    highp vec4 yIQ = vec4 (YPrime, I, Q, 0.0);\n" +
+            "    color.r = dot (yIQ, kYIQToR);\n" +
+            "    color.g = dot (yIQ, kYIQToG);\n" +
+            "    color.b = dot (yIQ, kYIQToB);\n" +
+            "\n" +
+            "    // Save the result\n" +
+            "    gl_FragColor = color;\n" +
+            "}\n";
+
+    private float mHue;
+    private int mHueLocation;
+
+    public GPUImageHueFilter() {
+        this(90.0f);
+    }
+
+    public GPUImageHueFilter(final float hue) {
+        super(NO_FILTER_VERTEX_SHADER, HUE_FRAGMENT_SHADER);
+        mHue = hue;
+    }
+
+    @Override
+    public void onInit() {
+        super.onInit();
+        mHueLocation = GLES20.glGetUniformLocation(getProgram(), "hueAdjust");
+    }
+
+    @Override
+    public void onInitialized() {
+        super.onInitialized();
+        setHue(mHue);
+    }
+
+    public void setHue(final float hue) {
+        mHue = hue;
+        float hueAdjust = (mHue % 360.0f) * (float) Math.PI / 180.0f;
+        setFloat(mHueLocation, hueAdjust);
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageKuwaharaFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageKuwaharaFilter.java
index 6fc7f32b..2047b95b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageKuwaharaFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLaplacianFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLaplacianFilter.java
index d320f64d..fa560e5b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLaplacianFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLevelsFilter.java
similarity index 60%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLevelsFilter.java
index d7fbcfdf..9aec3ec5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLevelsFilter.java
@@ -1,32 +1,31 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
-import android.util.Log;
 
 /**
  * Created by vashisthg 30/05/14.
  */
-public class GPUImageLevelsFilter extends GPUImageFilter{
+public class GPUImageLevelsFilter extends GPUImageFilter {
 
     private static final String LOGTAG = GPUImageLevelsFilter.class.getSimpleName();
 
     public static final String LEVELS_FRAGMET_SHADER =
 
             " varying highp vec2 textureCoordinate;\n" +
-            " \n" +
-            " uniform sampler2D inputImageTexture;\n" +
-            " uniform mediump vec3 levelMinimum;\n" +
-            " uniform mediump vec3 levelMiddle;\n" +
-            " uniform mediump vec3 levelMaximum;\n" +
-            " uniform mediump vec3 minOutput;\n" +
-            " uniform mediump vec3 maxOutput;\n" +
-            " \n" +
-            " void main()\n" +
-            " {\n" +
-            "     mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-            "     \n" +
-            "     gl_FragColor = vec4( mix(minOutput, maxOutput, pow(min(max(textureColor.rgb -levelMinimum, vec3(0.0)) / (levelMaximum - levelMinimum  ), vec3(1.0)), 1.0 /levelMiddle)) , textureColor.a);\n" +
-            " }\n";
+                    " \n" +
+                    " uniform sampler2D inputImageTexture;\n" +
+                    " uniform mediump vec3 levelMinimum;\n" +
+                    " uniform mediump vec3 levelMiddle;\n" +
+                    " uniform mediump vec3 levelMaximum;\n" +
+                    " uniform mediump vec3 minOutput;\n" +
+                    " uniform mediump vec3 maxOutput;\n" +
+                    " \n" +
+                    " void main()\n" +
+                    " {\n" +
+                    "     mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
+                    "     \n" +
+                    "     gl_FragColor = vec4( mix(minOutput, maxOutput, pow(min(max(textureColor.rgb -levelMinimum, vec3(0.0)) / (levelMaximum - levelMinimum  ), vec3(1.0)), 1.0 /levelMiddle)) , textureColor.a);\n" +
+                    " }\n";
 
     private int mMinLocation;
     private float[] mMin;
@@ -40,7 +39,7 @@
     private float[] mMaxOutput;
 
     public GPUImageLevelsFilter() {
-        this(new float[] {0.0f,0.0f,0.0f}, new float[] {1.0f, 1.0f, 1.0f }, new float[] {1.0f, 1.0f ,1.0f}, new float[] {0.0f, 0.0f, 0.0f}, new float[] {1.0f,1.0f,1.0f});
+        this(new float[]{0.0f, 0.0f, 0.0f}, new float[]{1.0f, 1.0f, 1.0f}, new float[]{1.0f, 1.0f, 1.0f}, new float[]{0.0f, 0.0f, 0.0f}, new float[]{1.0f, 1.0f, 1.0f});
     }
 
     private GPUImageLevelsFilter(final float[] min, final float[] mid, final float[] max, final float[] minOUt, final float[] maxOut) {
@@ -71,7 +70,7 @@ public void onInitialized() {
     }
 
 
-    public void updateUniforms () {
+    public void updateUniforms() {
         setFloatVec3(mMinLocation, mMin);
         setFloatVec3(mMidLocation, mMid);
         setFloatVec3(mMaxLocation, mMax);
@@ -79,17 +78,17 @@ public void updateUniforms () {
         setFloatVec3(mMaxOutputLocation, mMaxOutput);
     }
 
-    public void setMin(float min, float mid , float max ,float minOut , float maxOut) {
+    public void setMin(float min, float mid, float max, float minOut, float maxOut) {
         setRedMin(min, mid, max, minOut, maxOut);
         setGreenMin(min, mid, max, minOut, maxOut);
         setBlueMin(min, mid, max, minOut, maxOut);
     }
 
-    public void setMin(float min, float mid , float max ) {
+    public void setMin(float min, float mid, float max) {
         setMin(min, mid, max, 0.0f, 1.0f);
     }
 
-    public void setRedMin(float min, float mid , float max ,float minOut , float maxOut) {
+    public void setRedMin(float min, float mid, float max, float minOut, float maxOut) {
         mMin[0] = min;
         mMid[0] = mid;
         mMax[0] = max;
@@ -98,11 +97,11 @@ public void setRedMin(float min, float mid , float max ,float minOut , float max
         updateUniforms();
     }
 
-    public void setRedMin(float min, float mid , float max ){
+    public void setRedMin(float min, float mid, float max) {
         setRedMin(min, mid, max, 0, 1);
     }
 
-    public void setGreenMin(float min, float mid , float max ,float minOut , float maxOut) {
+    public void setGreenMin(float min, float mid, float max, float minOut, float maxOut) {
         mMin[1] = min;
         mMid[1] = mid;
         mMax[1] = max;
@@ -111,11 +110,11 @@ public void setGreenMin(float min, float mid , float max ,float minOut , float m
         updateUniforms();
     }
 
-    public void setGreenMin(float min, float mid , float max ){
+    public void setGreenMin(float min, float mid, float max) {
         setGreenMin(min, mid, max, 0, 1);
     }
 
-    public void setBlueMin(float min, float mid , float max ,float minOut , float maxOut) {
+    public void setBlueMin(float min, float mid, float max, float minOut, float maxOut) {
         mMin[2] = min;
         mMid[2] = mid;
         mMax[2] = max;
@@ -124,7 +123,7 @@ public void setBlueMin(float min, float mid , float max ,float minOut , float ma
         updateUniforms();
     }
 
-    public void setBlueMin(float min, float mid , float max ){
+    public void setBlueMin(float min, float mid, float max) {
         setBlueMin(min, mid, max, 0, 1);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLightenBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLightenBlendFilter.java
index 77399cb1..764698ae 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLightenBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageLightenBlendFilter extends GPUImageTwoInputFilter {
     public static final String LIGHTEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLinearBurnBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLinearBurnBlendFilter.java
index 2623b528..98c47f0b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLinearBurnBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageLinearBurnBlendFilter extends GPUImageTwoInputFilter {
     public static final String LINEAR_BURN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLookupFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLookupFilter.java
index b9cfa2be..ea8b0bae 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLookupFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageLookupFilter extends GPUImageTwoInputFilter {
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLuminosityBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLuminosityBlendFilter.java
index 85e7bfda..1a4708e9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLuminosityBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageLuminosityBlendFilter extends GPUImageTwoInputFilter {
     public static final String LUMINOSITY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMixBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMixBlendFilter.java
index 7bf68859..b1c47bab 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMixBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMonochromeFilter.java
similarity index 93%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMonochromeFilter.java
index e426a340..b15709b9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMonochromeFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -61,7 +61,7 @@
     private float[] mColor;
 
     public GPUImageMonochromeFilter() {
-        this(1.0f, new float[] {0.6f, 0.45f, 0.3f, 1.0f});
+        this(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
     }
 
     public GPUImageMonochromeFilter(final float intensity, final float[] color) {
@@ -81,21 +81,21 @@ public void onInit() {
     public void onInitialized() {
         super.onInitialized();
         setIntensity(1.0f);
-        setColor(new float[]{ 0.6f, 0.45f, 0.3f, 1.f });
+        setColor(new float[]{0.6f, 0.45f, 0.3f, 1.f});
     }
 
     public void setIntensity(final float intensity) {
         mIntensity = intensity;
         setFloat(mIntensityLocation, mIntensity);
     }
-    
+
     public void setColor(final float[] color) {
         mColor = color;
         setColorRed(mColor[0], mColor[1], mColor[2]);
-        
+
     }
-    
+
     public void setColorRed(final float red, final float green, final float blue) {
-        setFloatVec3(mFilterColorLocation, new float[]{ red, green, blue });
+        setFloatVec3(mFilterColorLocation, new float[]{red, green, blue});
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMultiplyBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMultiplyBlendFilter.java
index 1e002e36..61f98288 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMultiplyBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageMultiplyBlendFilter extends GPUImageTwoInputFilter {
     public static final String MULTIPLY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNonMaximumSuppressionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNonMaximumSuppressionFilter.java
index a6f5af48..0cf07f5a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNonMaximumSuppressionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageNonMaximumSuppressionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String NMS_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNormalBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNormalBlendFilter.java
index a886bd40..4050afa2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNormalBlendFilter.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * This equation is a simplification of the general blending equation. It assumes the destination color is opaque, and therefore drops the destination color's alpha term.
- *
+ * <p/>
  * D = C1 * C1a + C2 * C2a * (1 - C1a)
  * where D is the resultant color, C1 is the color of the first element, C1a is the alpha of the first element, C2 is the second element color, C2a is the alpha of the second element. The destination alpha is calculated with:
- *
+ * <p/>
  * Da = C1a + C2a * (1 - C1a)
  * The resultant color is premultiplied with the alpha. To restore the color to the unmultiplied values, just divide by Da, the resultant alpha.
- *
+ * <p/>
  * http://stackoverflow.com/questions/1724946/blend-mode-on-a-transparent-and-semi-transparent-background
- *
+ * <p/>
  * For some reason Photoshop behaves
  * D = C1 + C2 * C2a * (1 - C1a)
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOpacityFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOpacityFilter.java
index 55f198d1..b30fc10f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOpacityFilter.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
 /**
  * Adjusts the alpha channel of the incoming image
  * opacity: The value to multiply the incoming alpha channel for each pixel by (0.0 - 1.0, with 1.0 as the default)
-*/
+ */
 public class GPUImageOpacityFilter extends GPUImageFilter {
     public static final String OPACITY_FRAGMENT_SHADER = "" +
             "  varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOverlayBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOverlayBlendFilter.java
index 4dba4200..b70c9ce3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOverlayBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageOverlayBlendFilter extends GPUImageTwoInputFilter {
     public static final String OVERLAY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePixelationFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePixelationFilter.java
index c0ec15d1..e06c5904 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePixelationFilter.java
@@ -14,9 +14,10 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
+
 /**
  * Applies a grayscale effect to the image.
  */
@@ -45,7 +46,7 @@
     private int mImageHeightFactorLocation;
     private float mPixel;
     private int mPixelLocation;
-    
+
     public GPUImagePixelationFilter() {
         super(NO_FILTER_VERTEX_SHADER, PIXELATION_FRAGMENT_SHADER);
         mPixel = 1.0f;
@@ -68,7 +69,7 @@ public void onOutputSizeChanged(final int width, final int height) {
     }
 
     public void setPixel(final float pixel) {
-      mPixel = pixel;
-      setFloat(mPixelLocation, mPixel);
+        mPixel = pixel;
+        setFloat(mPixelLocation, mPixel);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePosterizeFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePosterizeFilter.java
index 3b7c8ff7..4aec738c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePosterizeFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBDilationFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBDilationFilter.java
index 2d5e28c7..7db8a24e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBDilationFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * For each pixel, this sets it to the maximum value of each color channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBFilter.java
similarity index 77%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBFilter.java
index f0af18cb..d6c18bd6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -26,19 +26,19 @@
  */
 public class GPUImageRGBFilter extends GPUImageFilter {
     public static final String RGB_FRAGMENT_SHADER = "" +
-    		"  varying highp vec2 textureCoordinate;\n" +
-    		"  \n" +
-    		"  uniform sampler2D inputImageTexture;\n" +
-    		"  uniform highp float red;\n" +
-    		"  uniform highp float green;\n" +
-    		"  uniform highp float blue;\n" +
-    		"  \n" +
-    		"  void main()\n" +
-    		"  {\n" +
-    		"      highp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-    		"      \n" +
-    		"      gl_FragColor = vec4(textureColor.r * red, textureColor.g * green, textureColor.b * blue, 1.0);\n" +
-    		"  }\n";
+            "  varying highp vec2 textureCoordinate;\n" +
+            "  \n" +
+            "  uniform sampler2D inputImageTexture;\n" +
+            "  uniform highp float red;\n" +
+            "  uniform highp float green;\n" +
+            "  uniform highp float blue;\n" +
+            "  \n" +
+            "  void main()\n" +
+            "  {\n" +
+            "      highp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "      \n" +
+            "      gl_FragColor = vec4(textureColor.r * red, textureColor.g * green, textureColor.b * blue, 1.0);\n" +
+            "  }\n";
 
     private int mRedLocation;
     private float mRed;
@@ -77,14 +77,14 @@ public void setRed(final float red) {
             setFloat(mRedLocation, mRed);
         }
     }
-    
+
     public void setGreen(final float green) {
         mGreen = green;
         if (mIsInitialized) {
             setFloat(mGreenLocation, mGreen);
         }
     }
-    
+
     public void setBlue(final float blue) {
         mBlue = blue;
         if (mIsInitialized) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationBlendFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationBlendFilter.java
index 1c0f90d6..de71cf11 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageSaturationBlendFilter extends GPUImageTwoInputFilter {
     public static final String SATURATION_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationFilter.java
index 0725953d..4afd7ba9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageScreenBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageScreenBlendFilter.java
index 2c63a699..e842f9ae 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageScreenBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageScreenBlendFilter extends GPUImageTwoInputFilter {
     public static final String SCREEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSepiaFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSepiaFilter.java
index cbcf3534..585f4243 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSepiaFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies a simple sepia effect.
@@ -26,7 +26,7 @@ public GPUImageSepiaFilter() {
     }
 
     public GPUImageSepiaFilter(final float intensity) {
-        super(intensity, new float[] {
+        super(intensity, new float[]{
                 0.3588f, 0.7044f, 0.1368f, 0.0f,
                 0.2990f, 0.5870f, 0.1140f, 0.0f,
                 0.2392f, 0.4696f, 0.0912f, 0.0f,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSharpenFilter.java
similarity index 81%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSharpenFilter.java
index 4317b66c..cc558623 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSharpenFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
@@ -59,28 +59,28 @@
             "}";
 
     public static final String SHARPEN_FRAGMENT_SHADER = "" +
-            "precision highp float;\n" + 
-            "\n" + 
-            "varying highp vec2 textureCoordinate;\n" + 
-            "varying highp vec2 leftTextureCoordinate;\n" + 
-            "varying highp vec2 rightTextureCoordinate; \n" + 
-            "varying highp vec2 topTextureCoordinate;\n" + 
-            "varying highp vec2 bottomTextureCoordinate;\n" + 
-            "\n" + 
-            "varying highp float centerMultiplier;\n" + 
-            "varying highp float edgeMultiplier;\n" + 
-            "\n" + 
-            "uniform sampler2D inputImageTexture;\n" + 
-            "\n" + 
-            "void main()\n" + 
-            "{\n" + 
-            "    mediump vec3 textureColor = texture2D(inputImageTexture, textureCoordinate).rgb;\n" + 
-            "    mediump vec3 leftTextureColor = texture2D(inputImageTexture, leftTextureCoordinate).rgb;\n" + 
-            "    mediump vec3 rightTextureColor = texture2D(inputImageTexture, rightTextureCoordinate).rgb;\n" + 
-            "    mediump vec3 topTextureColor = texture2D(inputImageTexture, topTextureCoordinate).rgb;\n" + 
-            "    mediump vec3 bottomTextureColor = texture2D(inputImageTexture, bottomTextureCoordinate).rgb;\n" + 
-            "\n" + 
-            "    gl_FragColor = vec4((textureColor * centerMultiplier - (leftTextureColor * edgeMultiplier + rightTextureColor * edgeMultiplier + topTextureColor * edgeMultiplier + bottomTextureColor * edgeMultiplier)), texture2D(inputImageTexture, bottomTextureCoordinate).w);\n" + 
+            "precision highp float;\n" +
+            "\n" +
+            "varying highp vec2 textureCoordinate;\n" +
+            "varying highp vec2 leftTextureCoordinate;\n" +
+            "varying highp vec2 rightTextureCoordinate; \n" +
+            "varying highp vec2 topTextureCoordinate;\n" +
+            "varying highp vec2 bottomTextureCoordinate;\n" +
+            "\n" +
+            "varying highp float centerMultiplier;\n" +
+            "varying highp float edgeMultiplier;\n" +
+            "\n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            "\n" +
+            "void main()\n" +
+            "{\n" +
+            "    mediump vec3 textureColor = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "    mediump vec3 leftTextureColor = texture2D(inputImageTexture, leftTextureCoordinate).rgb;\n" +
+            "    mediump vec3 rightTextureColor = texture2D(inputImageTexture, rightTextureCoordinate).rgb;\n" +
+            "    mediump vec3 topTextureColor = texture2D(inputImageTexture, topTextureCoordinate).rgb;\n" +
+            "    mediump vec3 bottomTextureColor = texture2D(inputImageTexture, bottomTextureCoordinate).rgb;\n" +
+            "\n" +
+            "    gl_FragColor = vec4((textureColor * centerMultiplier - (leftTextureColor * edgeMultiplier + rightTextureColor * edgeMultiplier + topTextureColor * edgeMultiplier + bottomTextureColor * edgeMultiplier)), texture2D(inputImageTexture, bottomTextureCoordinate).w);\n" +
             "}";
 
     private int mSharpnessLocation;
@@ -91,7 +91,7 @@
     public GPUImageSharpenFilter() {
         this(0.0f);
     }
-    
+
     public GPUImageSharpenFilter(final float sharpness) {
         super(SHARPEN_VERTEX_SHADER, SHARPEN_FRAGMENT_SHADER);
         mSharpness = sharpness;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSketchFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSketchFilter.java
index dd78e708..2cf307f5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSketchFilter.java
@@ -14,10 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
-
-import java.util.ArrayList;
-import java.util.List;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Converts video to look like a sketch.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSmoothToonFilter.java
similarity index 89%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSmoothToonFilter.java
index a569ce97..8ac0b01d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSmoothToonFilter.java
@@ -14,13 +14,11 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
- *  This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect
- *  with a Gaussian blur to smooth out noise.
+ * This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect
+ * with a Gaussian blur to smooth out noise.
  */
 public class GPUImageSmoothToonFilter extends GPUImageFilterGroup {
     GPUImageGaussianBlurFilter blurFilter;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelEdgeDetection.java
similarity index 57%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelEdgeDetection.java
index 2a775d48..4e985607 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelEdgeDetection.java
@@ -14,48 +14,45 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
-
-import java.util.ArrayList;
-import java.util.List;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies sobel edge detection on the image.
  */
 public class GPUImageSobelEdgeDetection extends GPUImageFilterGroup {
     public static final String SOBEL_EDGE_DETECTION = "" +
-            "precision mediump float;\n" + 
-            "\n" + 
-            "varying vec2 textureCoordinate;\n" + 
-            "varying vec2 leftTextureCoordinate;\n" + 
-            "varying vec2 rightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 topTextureCoordinate;\n" + 
-            "varying vec2 topLeftTextureCoordinate;\n" + 
-            "varying vec2 topRightTextureCoordinate;\n" + 
-            "\n" + 
-            "varying vec2 bottomTextureCoordinate;\n" + 
-            "varying vec2 bottomLeftTextureCoordinate;\n" + 
-            "varying vec2 bottomRightTextureCoordinate;\n" + 
-            "\n" + 
-            "uniform sampler2D inputImageTexture;\n" + 
-            "\n" + 
-            "void main()\n" + 
-            "{\n" + 
-            "    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\n" + 
-            "    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\n" + 
-            "    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\n" + 
-            "    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\n" + 
-            "    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\n" + 
-            "    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\n" + 
-            "    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\n" + 
-            "    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\n" + 
-            "    float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\n" + 
-            "    float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\n" + 
-            "\n" + 
-            "    float mag = length(vec2(h, v));\n" + 
-            "\n" + 
-            "    gl_FragColor = vec4(vec3(mag), 1.0);\n" + 
+            "precision mediump float;\n" +
+            "\n" +
+            "varying vec2 textureCoordinate;\n" +
+            "varying vec2 leftTextureCoordinate;\n" +
+            "varying vec2 rightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 topTextureCoordinate;\n" +
+            "varying vec2 topLeftTextureCoordinate;\n" +
+            "varying vec2 topRightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 bottomTextureCoordinate;\n" +
+            "varying vec2 bottomLeftTextureCoordinate;\n" +
+            "varying vec2 bottomRightTextureCoordinate;\n" +
+            "\n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            "\n" +
+            "void main()\n" +
+            "{\n" +
+            "    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\n" +
+            "    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\n" +
+            "    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\n" +
+            "    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\n" +
+            "    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\n" +
+            "    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\n" +
+            "    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\n" +
+            "    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\n" +
+            "    float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\n" +
+            "    float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\n" +
+            "\n" +
+            "    float mag = length(vec2(h, v));\n" +
+            "\n" +
+            "    gl_FragColor = vec4(vec3(mag), 1.0);\n" +
             "}";
 
     public GPUImageSobelEdgeDetection() {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelThresholdFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelThresholdFilter.java
new file mode 100644
index 00000000..b145978c
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelThresholdFilter.java
@@ -0,0 +1,74 @@
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import android.opengl.GLES20;
+
+public class GPUImageSobelThresholdFilter extends
+        GPUImage3x3TextureSamplingFilter {
+    public static final String SOBEL_THRESHOLD_EDGE_DETECTION = "" +
+            "precision mediump float;\n" +
+            "\n" +
+            "varying vec2 textureCoordinate;\n" +
+            "varying vec2 leftTextureCoordinate;\n" +
+            "varying vec2 rightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 topTextureCoordinate;\n" +
+            "varying vec2 topLeftTextureCoordinate;\n" +
+            "varying vec2 topRightTextureCoordinate;\n" +
+            "\n" +
+            "varying vec2 bottomTextureCoordinate;\n" +
+            "varying vec2 bottomLeftTextureCoordinate;\n" +
+            "varying vec2 bottomRightTextureCoordinate;\n" +
+            "\n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            "uniform lowp float threshold;\n" +
+            "\n" +
+            "const highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\n" +
+            "\n" +
+            "void main()\n" +
+            "{\n" +
+            "    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\n" +
+            "    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\n" +
+            "    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\n" +
+            "    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\n" +
+            "    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\n" +
+            "    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\n" +
+            "    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\n" +
+            "    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\n" +
+            "    float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\n" +
+            "    float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\n" +
+            "\n" +
+            "    float mag = 1.0 - length(vec2(h, v));\n" +
+            "    mag = step(threshold, mag);\n" +
+            "\n" +
+            "    gl_FragColor = vec4(vec3(mag), 1.0);\n" +
+            "}\n";
+
+    private int mUniformThresholdLocation;
+    private float mThreshold = 0.9f;
+
+    public GPUImageSobelThresholdFilter() {
+        this(0.9f);
+    }
+
+    public GPUImageSobelThresholdFilter(float threshold) {
+        super(SOBEL_THRESHOLD_EDGE_DETECTION);
+        mThreshold = threshold;
+    }
+
+    @Override
+    public void onInit() {
+        super.onInit();
+        mUniformThresholdLocation = GLES20.glGetUniformLocation(getProgram(), "threshold");
+    }
+
+    @Override
+    public void onInitialized() {
+        super.onInitialized();
+        setThreshold(mThreshold);
+    }
+
+    public void setThreshold(final float threshold) {
+        mThreshold = threshold;
+        setFloat(mUniformThresholdLocation, threshold);
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSoftLightBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSoftLightBlendFilter.java
index 0e1b742e..0efe8fbb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSoftLightBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageSoftLightBlendFilter extends GPUImageTwoInputFilter {
     public static final String SOFT_LIGHT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSourceOverBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSourceOverBlendFilter.java
index fd6a7b98..9ec7d3aa 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSourceOverBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageSourceOverBlendFilter extends GPUImageTwoInputFilter {
     public static final String SOURCE_OVER_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSphereRefractionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSphereRefractionFilter.java
index 6314cf19..b2d00954 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSphereRefractionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSubtractBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSubtractBlendFilter.java
index 52b54ecc..8e41b5ad 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSubtractBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageSubtractBlendFilter extends GPUImageTwoInputFilter {
     public static final String SUBTRACT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSwirlFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSwirlFilter.java
index d4947b9a..9b3e8d6c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSwirlFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageThresholdEdgeDetection.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageThresholdEdgeDetection.java
index c136155a..e5cd1e43 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageThresholdEdgeDetection.java
@@ -1,4 +1,4 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToneCurveFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToneCurveFilter.java
index 0f6e1d08..d565cb2e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToneCurveFilter.java
@@ -14,18 +14,21 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.Point;
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
-import java.io.*;
+import java.io.IOException;
+import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
 
+import jp.co.cyberagent.android.gpuimage.OpenGlUtils;
+
 public class GPUImageToneCurveFilter extends GPUImageFilter {
     public static final String TONE_CURVE_FRAGMENT_SHADER = "" +
             " varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToonFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToonFilter.java
index 5148d1d0..040f606a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToonFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoInputFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoInputFilter.java
index afc3b864..96f64bcb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoInputFilter.java
@@ -14,15 +14,18 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import android.graphics.Bitmap;
+import android.opengl.GLES20;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
+import jp.co.cyberagent.android.gpuimage.OpenGlUtils;
+import jp.co.cyberagent.android.gpuimage.Rotation;
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-import android.graphics.Bitmap;
-import android.opengl.GLES20;
 
 public class GPUImageTwoInputFilter extends GPUImageFilter {
     private static final String VERTEX_SHADER = "attribute vec4 position;\n" +
@@ -62,11 +65,11 @@ public void onInit() {
         mFilterInputTextureUniform2 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture2"); // This does assume a name of "inputImageTexture2" for second input texture in the fragment shader
         GLES20.glEnableVertexAttribArray(mFilterSecondTextureCoordinateAttribute);
 
-        if (mBitmap != null&&!mBitmap.isRecycled()) {
+        if (mBitmap != null && !mBitmap.isRecycled()) {
             setBitmap(mBitmap);
         }
     }
-    
+
     public void setBitmap(final Bitmap bitmap) {
         if (bitmap != null && bitmap.isRecycled()) {
             return;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoPassFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoPassFilter.java
index bf3fbf17..b2996dff 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoPassFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageTwoPassFilter extends GPUImageFilterGroup {
     public GPUImageTwoPassFilter(String firstVertexShader, String firstFragmentShader,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoPassTextureSamplingFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoPassTextureSamplingFilter.java
index 19c0365b..67a1bd4a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageTwoPassTextureSamplingFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageVignetteFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageVignetteFilter.java
index 439e8bd0..1fa3982c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageVignetteFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
@@ -57,18 +57,18 @@
     private float mVignetteStart;
     private int mVignetteEndLocation;
     private float mVignetteEnd;
-    
+
     public GPUImageVignetteFilter() {
-        this(new PointF(), new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
+        this(new PointF(), new float[]{0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
     }
-    
+
     public GPUImageVignetteFilter(final PointF vignetteCenter, final float[] vignetteColor, final float vignetteStart, final float vignetteEnd) {
         super(NO_FILTER_VERTEX_SHADER, VIGNETTING_FRAGMENT_SHADER);
         mVignetteCenter = vignetteCenter;
         mVignetteColor = vignetteColor;
         mVignetteStart = vignetteStart;
         mVignetteEnd = vignetteEnd;
-        
+
     }
 
     @Override
@@ -78,7 +78,7 @@ public void onInit() {
         mVignetteColorLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteColor");
         mVignetteStartLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteStart");
         mVignetteEndLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteEnd");
-        
+
         setVignetteCenter(mVignetteCenter);
         setVignetteColor(mVignetteColor);
         setVignetteStart(mVignetteStart);
@@ -95,12 +95,12 @@ public void setVignetteColor(final float[] vignetteColor) {
         mVignetteColor = vignetteColor;
         setFloatVec3(mVignetteColorLocation, mVignetteColor);
     }
-    
+
     public void setVignetteStart(final float vignetteStart) {
         mVignetteStart = vignetteStart;
         setFloat(mVignetteStartLocation, mVignetteStart);
     }
-    
+
     public void setVignetteEnd(final float vignetteEnd) {
         mVignetteEnd = vignetteEnd;
         setFloat(mVignetteEndLocation, mVignetteEnd);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWeakPixelInclusionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWeakPixelInclusionFilter.java
index 3e1b8f01..5b467262 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWeakPixelInclusionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageWeakPixelInclusionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String WEAKPIXEL_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWhiteBalanceFilter.java
similarity index 93%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWhiteBalanceFilter.java
index 1818da99..f207ea6a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWhiteBalanceFilter.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
 /**
  * Adjusts the white balance of incoming image. <br>
  * <br>
- * temperature: 
+ * temperature:
  * tint:
  */
 public class GPUImageWhiteBalanceFilter extends GPUImageFilter {
@@ -61,7 +61,7 @@
     public GPUImageWhiteBalanceFilter() {
         this(5000.0f, 0.0f);
     }
-    
+
     public GPUImageWhiteBalanceFilter(final float temperature, final float tint) {
         super(NO_FILTER_VERTEX_SHADER, WHITE_BALANCE_FRAGMENT_SHADER);
         mTemperature = temperature;
@@ -81,11 +81,11 @@ public void onInit() {
 
     public void setTemperature(final float temperature) {
         mTemperature = temperature;
-        setFloat(mTemperatureLocation, mTemperature < 5000 ? (float)(0.0004 * (mTemperature-5000.0)) : (float)(0.00006 * (mTemperature-5000.0)));
+        setFloat(mTemperatureLocation, mTemperature < 5000 ? (float) (0.0004 * (mTemperature - 5000.0)) : (float) (0.00006 * (mTemperature - 5000.0)));
     }
-    
+
     public void setTint(final float tint) {
         mTint = tint;
-        setFloat(mTintLocation, (float)(mTint/100.0));
+        setFloat(mTintLocation, (float) (mTint / 100.0));
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java b/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
index c439d914..ea7c357e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
@@ -50,7 +50,7 @@ private TextureRotationUtil() {
     }
 
     public static float[] getRotation(final Rotation rotation, final boolean flipHorizontal,
-                                                         final boolean flipVertical) {
+                                      final boolean flipVertical) {
         float[] rotatedTex;
         switch (rotation) {
             case ROTATION_90:
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index db691c7f..b184f9b7 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -20,93 +20,136 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.graphics.BitmapFactory;
-import android.graphics.PointF;
-import jp.co.cyberagent.android.gpuimage.*;
 
 import java.util.LinkedList;
 import java.util.List;
 
-public class GPUImageFilterTools {  
+import jp.co.cyberagent.android.gpuimage.filters.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageBilateralFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageBulgeDistortionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageColorBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageCrosshatchFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDissolveBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageEmbossFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGammaFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGaussianBlurFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGlassSphereFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHazeFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHighlightShadowFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLevelsFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageOpacityFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImagePixelationFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImagePosterizeFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageRGBFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSepiaFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSharpenFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSobelEdgeDetection;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSourceOverBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSphereRefractionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSwirlFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageToneCurveFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageTwoInputFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageVignetteFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageWhiteBalanceFilter;
+
+public class GPUImageFilterTools {
     public static void showDialog(final Context context,
-            final OnGpuImageFilterChosenListener listener) {
+                                  final OnGpuImageFilterChosenListener listener) {
         final FilterList filters = new FilterList();
-        filters.addFilter("Contrast", FilterType.CONTRAST);
-        filters.addFilter("Invert", FilterType.INVERT);
-        filters.addFilter("Pixelation", FilterType.PIXELATION);
-        filters.addFilter("Hue", FilterType.HUE);
-        filters.addFilter("Gamma", FilterType.GAMMA);
-        filters.addFilter("Brightness", FilterType.BRIGHTNESS);
         filters.addFilter("Sepia", FilterType.SEPIA);
         filters.addFilter("Grayscale", FilterType.GRAYSCALE);
-        filters.addFilter("Sharpness", FilterType.SHARPEN);
-        filters.addFilter("Sobel Edge Detection", FilterType.SOBEL_EDGE_DETECTION);
-        filters.addFilter("3x3 Convolution", FilterType.THREE_X_THREE_CONVOLUTION);
-        filters.addFilter("Emboss", FilterType.EMBOSS);
-        filters.addFilter("Posterize", FilterType.POSTERIZE);
-        filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
-        filters.addFilter("Saturation", FilterType.SATURATION);
-        filters.addFilter("Exposure", FilterType.EXPOSURE);
-        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
-        filters.addFilter("Monochrome", FilterType.MONOCHROME);
-        filters.addFilter("Opacity", FilterType.OPACITY);
-        filters.addFilter("RGB", FilterType.RGB);
-        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
-        filters.addFilter("Vignette", FilterType.VIGNETTE);
-        filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
-
-        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
         filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
-        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
-        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
-        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
-        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
-        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
-        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
-        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
-        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
-        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
-        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
-        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
-        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
-        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
-        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
-        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
-        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
-        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
-        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
-        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
-        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
-        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
-        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
-
-        filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
-        filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
-        filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
-
-        filters.addFilter("Box Blur", FilterType.BOX_BLUR);
-        filters.addFilter("CGA Color Space", FilterType.CGA_COLORSPACE);
-        filters.addFilter("Dilation", FilterType.DILATION);
-        filters.addFilter("Kuwahara", FilterType.KUWAHARA);
-        filters.addFilter("RGB Dilation", FilterType.RGB_DILATION);
-        filters.addFilter("Sketch", FilterType.SKETCH);
-        filters.addFilter("Toon", FilterType.TOON);
-        filters.addFilter("Smooth Toon", FilterType.SMOOTH_TOON);
-
-        filters.addFilter("Bulge Distortion", FilterType.BULGE_DISTORTION);
-        filters.addFilter("Glass Sphere", FilterType.GLASS_SPHERE);
-        filters.addFilter("Haze", FilterType.HAZE);
-        filters.addFilter("Laplacian", FilterType.LAPLACIAN);
-        filters.addFilter("Non Maximum Suppression", FilterType.NON_MAXIMUM_SUPPRESSION);
-        filters.addFilter("Sphere Refraction", FilterType.SPHERE_REFRACTION);
-        filters.addFilter("Swirl", FilterType.SWIRL);
-        filters.addFilter("Weak Pixel Inclusion", FilterType.WEAK_PIXEL_INCLUSION);
-        filters.addFilter("False Color", FilterType.FALSE_COLOR);
-
-        filters.addFilter("Color Balance", FilterType.COLOR_BALANCE);
-
-        filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
-
-        filters. addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
+        filters.addFilter("ToneCurve 1977", FilterType.TONE_CURVE_1977);
+        filters.addFilter("ToneCurve Amaro", FilterType.TONE_CURVE_AMARO);
+        filters.addFilter("ToneCurve Hudson", FilterType.TONE_CURVE_HUDSON);
+        filters.addFilter("ToneCurve Mayfair", FilterType.TONE_CURVE_MAYFAIR);
+        filters.addFilter("ToneCurve Nashville", FilterType.TONE_CURVE_NASHVILLE);
+        filters.addFilter("ToneCurve Valencia", FilterType.TONE_CURVE_VALENCIA);
+
+//        filters.addFilter("Contrast", FilterType.CONTRAST);
+//        filters.addFilter("Invert", FilterType.INVERT);
+//        filters.addFilter("Pixelation", FilterType.PIXELATION);
+//        filters.addFilter("Hue", FilterType.HUE);
+//        filters.addFilter("Gamma", FilterType.GAMMA);
+//        filters.addFilter("Brightness", FilterType.BRIGHTNESS);
+//        filters.addFilter("Sharpness", FilterType.SHARPEN);
+//        filters.addFilter("Sobel Edge Detection", FilterType.SOBEL_EDGE_DETECTION);
+//        filters.addFilter("3x3 Convolution", FilterType.THREE_X_THREE_CONVOLUTION);
+//        filters.addFilter("Emboss", FilterType.EMBOSS);
+//        filters.addFilter("Posterize", FilterType.POSTERIZE);
+//        filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
+//        filters.addFilter("Saturation", FilterType.SATURATION);
+//        filters.addFilter("Exposure", FilterType.EXPOSURE);
+//        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
+//        filters.addFilter("Monochrome", FilterType.MONOCHROME);
+//        filters.addFilter("Opacity", FilterType.OPACITY);
+//        filters.addFilter("RGB", FilterType.RGB);
+//        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
+//        filters.addFilter("Vignette", FilterType.VIGNETTE);
+//        filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
+//
+//        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
+//
+//        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
+//        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
+//        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
+//        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
+//        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
+//        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
+//        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
+//        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
+//        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
+//        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
+//        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
+//        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
+//        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
+//        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
+//        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
+//        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
+//        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
+//        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
+//        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
+//        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
+//        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
+//        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
+//
+//        filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
+//        filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
+//        filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
+//
+//        filters.addFilter("Box Blur", FilterType.BOX_BLUR);
+//        filters.addFilter("CGA Color Space", FilterType.CGA_COLORSPACE);
+//        filters.addFilter("Dilation", FilterType.DILATION);
+//        filters.addFilter("Kuwahara", FilterType.KUWAHARA);
+//        filters.addFilter("RGB Dilation", FilterType.RGB_DILATION);
+//        filters.addFilter("Sketch", FilterType.SKETCH);
+//        filters.addFilter("Toon", FilterType.TOON);
+//        filters.addFilter("Smooth Toon", FilterType.SMOOTH_TOON);
+//
+//        filters.addFilter("Bulge Distortion", FilterType.BULGE_DISTORTION);
+//        filters.addFilter("Glass Sphere", FilterType.GLASS_SPHERE);
+//        filters.addFilter("Haze", FilterType.HAZE);
+//        filters.addFilter("Laplacian", FilterType.LAPLACIAN);
+//        filters.addFilter("Non Maximum Suppression", FilterType.NON_MAXIMUM_SUPPRESSION);
+//        filters.addFilter("Sphere Refraction", FilterType.SPHERE_REFRACTION);
+//        filters.addFilter("Swirl", FilterType.SWIRL);
+//        filters.addFilter("Weak Pixel Inclusion", FilterType.WEAK_PIXEL_INCLUSION);
+//        filters.addFilter("False Color", FilterType.FALSE_COLOR);
+//
+//        filters.addFilter("Color Balance", FilterType.COLOR_BALANCE);
+//
+//        filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
+//
+//        filters.addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
 
 
         AlertDialog.Builder builder = new AlertDialog.Builder(context);
@@ -123,175 +166,239 @@ public void onClick(final DialogInterface dialog, final int item) {
     }
 
     private static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
+
         switch (type) {
-            case CONTRAST:
-                return new GPUImageContrastFilter(2.0f);
-            case GAMMA:
-                return new GPUImageGammaFilter(2.0f);
-            case INVERT:
-                return new GPUImageColorInvertFilter();
-            case PIXELATION:
-                return new GPUImagePixelationFilter();
-            case HUE:
-                return new GPUImageHueFilter(90.0f);
-            case BRIGHTNESS:
-                return new GPUImageBrightnessFilter(1.5f);
-            case GRAYSCALE:
-                return new GPUImageGrayscaleFilter();
-            case SEPIA:
-                return new GPUImageSepiaFilter();
-            case SHARPEN:
-                GPUImageSharpenFilter sharpness = new GPUImageSharpenFilter();
-                sharpness.setSharpness(2.0f);
-                return sharpness;
-            case SOBEL_EDGE_DETECTION:
-                return new GPUImageSobelEdgeDetection();
-            case THREE_X_THREE_CONVOLUTION:
-                GPUImage3x3ConvolutionFilter convolution = new GPUImage3x3ConvolutionFilter();
-                convolution.setConvolutionKernel(new float[] {
-                        -1.0f, 0.0f, 1.0f,
-                        -2.0f, 0.0f, 2.0f,
-                        -1.0f, 0.0f, 1.0f
-                });
-                return convolution;
-            case EMBOSS:
-                return new GPUImageEmbossFilter();
-            case POSTERIZE:
-                return new GPUImagePosterizeFilter();
-            case FILTER_GROUP:
+            case GRAYSCALE: {
                 List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
-                filters.add(new GPUImageContrastFilter());
-                filters.add(new GPUImageDirectionalSobelEdgeDetectionFilter());
                 filters.add(new GPUImageGrayscaleFilter());
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
+            case SEPIA: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                filters.add(new GPUImageSepiaFilter());
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
+            case TONE_CURVE_1977: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                GPUImageToneCurveFilter toneCurveFilter1977 = new GPUImageToneCurveFilter();
+                toneCurveFilter1977.setFromCurveFileInputStream(context.getResources().openRawResource(R.raw.tone_curve_1977));
+
+                filters.add(toneCurveFilter1977);
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
+            case TONE_CURVE_AMARO: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                GPUImageToneCurveFilter toneCurveFilterAmaro = new GPUImageToneCurveFilter();
+                toneCurveFilterAmaro.setFromCurveFileInputStream(context.getResources().openRawResource(R.raw.tone_curve_amaro));
+
+                filters.add(toneCurveFilterAmaro);
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
+            case TONE_CURVE_HUDSON: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                GPUImageToneCurveFilter toneCurveFilterHudson = new GPUImageToneCurveFilter();
+                toneCurveFilterHudson.setFromCurveFileInputStream(context.getResources().openRawResource(R.raw.tone_curve_hudson));
+
+                filters.add(toneCurveFilterHudson);
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
+            case TONE_CURVE_MAYFAIR: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                GPUImageToneCurveFilter toneCurveFilterMayfair = new GPUImageToneCurveFilter();
+                toneCurveFilterMayfair.setFromCurveFileInputStream(context.getResources().openRawResource(R.raw.tone_cuver_sample));
+
+                filters.add(toneCurveFilterMayfair);
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
                 return new GPUImageFilterGroup(filters);
-            case SATURATION:
-                return new GPUImageSaturationFilter(1.0f);
-            case EXPOSURE:
-                return new GPUImageExposureFilter(0.0f);
-            case HIGHLIGHT_SHADOW:
-            	return new GPUImageHighlightShadowFilter(0.0f, 1.0f);
-            case MONOCHROME:
-            	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
-            case OPACITY:
-                return new GPUImageOpacityFilter(1.0f);  
-            case RGB:
-                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);  
-            case WHITE_BALANCE:
-                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);    
-            case VIGNETTE:
-                PointF centerPoint = new PointF();
-                centerPoint.x = 0.5f;
-                centerPoint.y = 0.5f;
-                return new GPUImageVignetteFilter(centerPoint, new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
-            case TONE_CURVE:
-                GPUImageToneCurveFilter toneCurveFilter = new GPUImageToneCurveFilter();
-                toneCurveFilter.setFromCurveFileInputStream(
-                        context.getResources().openRawResource(R.raw.tone_cuver_sample));
-                return toneCurveFilter;
-            case BLEND_DIFFERENCE:
-                return createBlendFilter(context, GPUImageDifferenceBlendFilter.class);
+            }
+            case TONE_CURVE_NASHVILLE: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                GPUImageToneCurveFilter toneCurveFilterNashville = new GPUImageToneCurveFilter();
+                toneCurveFilterNashville.setFromCurveFileInputStream(context.getResources().openRawResource(R.raw.tone_curve_nashville));
+
+                filters.add(toneCurveFilterNashville);
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
+            case TONE_CURVE_VALENCIA: {
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                GPUImageToneCurveFilter toneCurveFilterValencia = new GPUImageToneCurveFilter();
+                toneCurveFilterValencia.setFromCurveFileInputStream(context.getResources().openRawResource(R.raw.tone_curve_valencia));
+
+                filters.add(toneCurveFilterValencia);
+                filters.add(createBlendFilter(context, GPUImageSourceOverBlendFilter.class));
+                return new GPUImageFilterGroup(filters);
+            }
             case BLEND_SOURCE_OVER:
                 return createBlendFilter(context, GPUImageSourceOverBlendFilter.class);
-            case BLEND_COLOR_BURN:
-                return createBlendFilter(context, GPUImageColorBurnBlendFilter.class);
-            case BLEND_COLOR_DODGE:
-                return createBlendFilter(context, GPUImageColorDodgeBlendFilter.class);
-            case BLEND_DARKEN:
-                return createBlendFilter(context, GPUImageDarkenBlendFilter.class);
-            case BLEND_DISSOLVE:
-                return createBlendFilter(context, GPUImageDissolveBlendFilter.class);
-            case BLEND_EXCLUSION:
-                return createBlendFilter(context, GPUImageExclusionBlendFilter.class);
-
-
-            case BLEND_HARD_LIGHT:
-                return createBlendFilter(context, GPUImageHardLightBlendFilter.class);
-            case BLEND_LIGHTEN:
-                return createBlendFilter(context, GPUImageLightenBlendFilter.class);
-            case BLEND_ADD:
-                return createBlendFilter(context, GPUImageAddBlendFilter.class);
-            case BLEND_DIVIDE:
-                return createBlendFilter(context, GPUImageDivideBlendFilter.class);
-            case BLEND_MULTIPLY:
-                return createBlendFilter(context, GPUImageMultiplyBlendFilter.class);
-            case BLEND_OVERLAY:
-                return createBlendFilter(context, GPUImageOverlayBlendFilter.class);
-            case BLEND_SCREEN:
-                return createBlendFilter(context, GPUImageScreenBlendFilter.class);
-            case BLEND_ALPHA:
-                return createBlendFilter(context, GPUImageAlphaBlendFilter.class);
-            case BLEND_COLOR:
-                return createBlendFilter(context, GPUImageColorBlendFilter.class);
-            case BLEND_HUE:
-                return createBlendFilter(context, GPUImageHueBlendFilter.class);
-            case BLEND_SATURATION:
-                return createBlendFilter(context, GPUImageSaturationBlendFilter.class);
-            case BLEND_LUMINOSITY:
-                return createBlendFilter(context, GPUImageLuminosityBlendFilter.class);
-            case BLEND_LINEAR_BURN:
-                return createBlendFilter(context, GPUImageLinearBurnBlendFilter.class);
-            case BLEND_SOFT_LIGHT:
-                return createBlendFilter(context, GPUImageSoftLightBlendFilter.class);
-            case BLEND_SUBTRACT:
-                return createBlendFilter(context, GPUImageSubtractBlendFilter.class);
-            case BLEND_CHROMA_KEY:
-                return createBlendFilter(context, GPUImageChromaKeyBlendFilter.class);
-            case BLEND_NORMAL:
-                return createBlendFilter(context, GPUImageNormalBlendFilter.class);
-
-            case LOOKUP_AMATORKA:
-                GPUImageLookupFilter amatorka = new GPUImageLookupFilter();
-                amatorka.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.lookup_amatorka));
-                return amatorka;
-            case GAUSSIAN_BLUR:
-                return new GPUImageGaussianBlurFilter();
-            case CROSSHATCH:
-                return new GPUImageCrosshatchFilter();
-
-            case BOX_BLUR:
-                return new GPUImageBoxBlurFilter();
-            case CGA_COLORSPACE:
-                return new GPUImageCGAColorspaceFilter();
-            case DILATION:
-                return new GPUImageDilationFilter();
-            case KUWAHARA:
-                return new GPUImageKuwaharaFilter();
-            case RGB_DILATION:
-                return new GPUImageRGBDilationFilter();
-            case SKETCH:
-                return new GPUImageSketchFilter();
-            case TOON:
-                return new GPUImageToonFilter();
-            case SMOOTH_TOON:
-                return new GPUImageSmoothToonFilter();
-
-            case BULGE_DISTORTION:
-                return new GPUImageBulgeDistortionFilter();
-            case GLASS_SPHERE:
-                return new GPUImageGlassSphereFilter();
-            case HAZE:
-                return new GPUImageHazeFilter();
-            case LAPLACIAN:
-                return new GPUImageLaplacianFilter();
-            case NON_MAXIMUM_SUPPRESSION:
-                return new GPUImageNonMaximumSuppressionFilter();
-            case SPHERE_REFRACTION:
-                return new GPUImageSphereRefractionFilter();
-            case SWIRL:
-                return new GPUImageSwirlFilter();
-            case WEAK_PIXEL_INCLUSION:
-                return new GPUImageWeakPixelInclusionFilter();
-            case FALSE_COLOR:
-                return new GPUImageFalseColorFilter();
-            case COLOR_BALANCE:
-                return new GPUImageColorBalanceFilter();
-            case LEVELS_FILTER_MIN:
-                GPUImageLevelsFilter levelsFilter = new GPUImageLevelsFilter();
-                levelsFilter.setMin(0.0f, 3.0f, 1.0f);
-                return levelsFilter;
-
-            case BILATERAL_BLUR:
-                return new GPUImageBilateralFilter();
+
+//            case CONTRAST:
+//                return new GPUImageContrastFilter(2.0f);
+//            case GAMMA:
+//                return new GPUImageGammaFilter(2.0f);
+//            case INVERT:
+//                return new GPUImageColorInvertFilter();
+//            case PIXELATION:
+//                return new GPUImagePixelationFilter();
+//            case HUE:
+//                return new GPUImageHueFilter(90.0f);
+//            case BRIGHTNESS:
+//                return new GPUImageBrightnessFilter(1.5f);
+//            case SHARPEN:
+//                GPUImageSharpenFilter sharpness = new GPUImageSharpenFilter();
+//                sharpness.setSharpness(2.0f);
+//                return sharpness;
+//            case SOBEL_EDGE_DETECTION:
+//                return new GPUImageSobelEdgeDetection();
+//            case THREE_X_THREE_CONVOLUTION:
+//                GPUImage3x3ConvolutionFilter convolution = new GPUImage3x3ConvolutionFilter();
+//                convolution.setConvolutionKernel(new float[]{
+//                        -1.0f, 0.0f, 1.0f,
+//                        -2.0f, 0.0f, 2.0f,
+//                        -1.0f, 0.0f, 1.0f
+//                });
+//                return convolution;
+//            case EMBOSS:
+//                return new GPUImageEmbossFilter();
+//            case POSTERIZE:
+//                return new GPUImagePosterizeFilter();
+//            case FILTER_GROUP:
+//                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+//                filters.add(new GPUImageContrastFilter());
+//                filters.add(new GPUImageDirectionalSobelEdgeDetectionFilter());
+//                filters.add(new GPUImageGrayscaleFilter());
+//                return new GPUImageFilterGroup(filters);
+//            case SATURATION:
+//                return new GPUImageSaturationFilter(1.0f);
+//            case EXPOSURE:
+//                return new GPUImageExposureFilter(0.0f);
+//            case HIGHLIGHT_SHADOW:
+//                return new GPUImageHighlightShadowFilter(0.0f, 1.0f);
+//            case MONOCHROME:
+//                return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
+//            case OPACITY:
+//                return new GPUImageOpacityFilter(1.0f);
+//            case RGB:
+//                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);
+//            case WHITE_BALANCE:
+//                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);
+//            case VIGNETTE:
+//                PointF centerPoint = new PointF();
+//                centerPoint.x = 0.5f;
+//                centerPoint.y = 0.5f;
+//                return new GPUImageVignetteFilter(centerPoint, new float[]{0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
+//            case TONE_CURVE:
+//                GPUImageToneCurveFilter toneCurveFilter = new GPUImageToneCurveFilter();
+//                toneCurveFilter.setFromCurveFileInputStream(
+//                        context.getResources().openRawResource(R.raw.tone_cuver_sample));
+//                return toneCurveFilter;
+//            case BLEND_DIFFERENCE:
+//                return createBlendFilter(context, GPUImageDifferenceBlendFilter.class);
+//            case BLEND_COLOR_BURN:
+//                return createBlendFilter(context, GPUImageColorBurnBlendFilter.class);
+//            case BLEND_COLOR_DODGE:
+//                return createBlendFilter(context, GPUImageColorDodgeBlendFilter.class);
+//            case BLEND_DARKEN:
+//                return createBlendFilter(context, GPUImageDarkenBlendFilter.class);
+//            case BLEND_DISSOLVE:
+//                return createBlendFilter(context, GPUImageDissolveBlendFilter.class);
+//            case BLEND_EXCLUSION:
+//                return createBlendFilter(context, GPUImageExclusionBlendFilter.class);
+//
+//
+//            case BLEND_HARD_LIGHT:
+//                return createBlendFilter(context, GPUImageHardLightBlendFilter.class);
+//            case BLEND_LIGHTEN:
+//                return createBlendFilter(context, GPUImageLightenBlendFilter.class);
+//            case BLEND_ADD:
+//                return createBlendFilter(context, GPUImageAddBlendFilter.class);
+//            case BLEND_DIVIDE:
+//                return createBlendFilter(context, GPUImageDivideBlendFilter.class);
+//            case BLEND_MULTIPLY:
+//                return createBlendFilter(context, GPUImageMultiplyBlendFilter.class);
+//            case BLEND_OVERLAY:
+//                return createBlendFilter(context, GPUImageOverlayBlendFilter.class);
+//            case BLEND_SCREEN:
+//                return createBlendFilter(context, GPUImageScreenBlendFilter.class);
+//            case BLEND_ALPHA:
+//                return createBlendFilter(context, GPUImageAlphaBlendFilter.class);
+//            case BLEND_COLOR:
+//                return createBlendFilter(context, GPUImageColorBlendFilter.class);
+//            case BLEND_HUE:
+//                return createBlendFilter(context, GPUImageHueBlendFilter.class);
+//            case BLEND_SATURATION:
+//                return createBlendFilter(context, GPUImageSaturationBlendFilter.class);
+//            case BLEND_LUMINOSITY:
+//                return createBlendFilter(context, GPUImageLuminosityBlendFilter.class);
+//            case BLEND_LINEAR_BURN:
+//                return createBlendFilter(context, GPUImageLinearBurnBlendFilter.class);
+//            case BLEND_SOFT_LIGHT:
+//                return createBlendFilter(context, GPUImageSoftLightBlendFilter.class);
+//            case BLEND_SUBTRACT:
+//                return createBlendFilter(context, GPUImageSubtractBlendFilter.class);
+//            case BLEND_CHROMA_KEY:
+//                return createBlendFilter(context, GPUImageChromaKeyBlendFilter.class);
+//            case BLEND_NORMAL:
+//                return createBlendFilter(context, GPUImageNormalBlendFilter.class);
+//
+//            case LOOKUP_AMATORKA:
+//                GPUImageLookupFilter amatorka = new GPUImageLookupFilter();
+//                amatorka.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.lookup_amatorka));
+//                return amatorka;
+//            case GAUSSIAN_BLUR:
+//                return new GPUImageGaussianBlurFilter();
+//            case CROSSHATCH:
+//                return new GPUImageCrosshatchFilter();
+//
+//            case BOX_BLUR:
+//                return new GPUImageBoxBlurFilter();
+//            case CGA_COLORSPACE:
+//                return new GPUImageCGAColorspaceFilter();
+//            case DILATION:
+//                return new GPUImageDilationFilter();
+//            case KUWAHARA:
+//                return new GPUImageKuwaharaFilter();
+//            case RGB_DILATION:
+//                return new GPUImageRGBDilationFilter();
+//            case SKETCH:
+//                return new GPUImageSketchFilter();
+//            case TOON:
+//                return new GPUImageToonFilter();
+//            case SMOOTH_TOON:
+//                return new GPUImageSmoothToonFilter();
+//
+//            case BULGE_DISTORTION:
+//                return new GPUImageBulgeDistortionFilter();
+//            case GLASS_SPHERE:
+//                return new GPUImageGlassSphereFilter();
+//            case HAZE:
+//                return new GPUImageHazeFilter();
+//            case LAPLACIAN:
+//                return new GPUImageLaplacianFilter();
+//            case NON_MAXIMUM_SUPPRESSION:
+//                return new GPUImageNonMaximumSuppressionFilter();
+//            case SPHERE_REFRACTION:
+//                return new GPUImageSphereRefractionFilter();
+//            case SWIRL:
+//                return new GPUImageSwirlFilter();
+//            case WEAK_PIXEL_INCLUSION:
+//                return new GPUImageWeakPixelInclusionFilter();
+//            case FALSE_COLOR:
+//                return new GPUImageFalseColorFilter();
+//            case COLOR_BALANCE:
+//                return new GPUImageColorBalanceFilter();
+//            case LEVELS_FILTER_MIN:
+//                GPUImageLevelsFilter levelsFilter = new GPUImageLevelsFilter();
+//                levelsFilter.setMin(0.0f, 3.0f, 1.0f);
+//                return levelsFilter;
+//
+//            case BILATERAL_BLUR:
+//                return new GPUImageBilateralFilter();
 
             default:
                 throw new IllegalStateException("No filter of that type!");
@@ -302,7 +409,7 @@ private static GPUImageFilter createFilterForType(final Context context, final F
     private static GPUImageFilter createBlendFilter(Context context, Class<? extends GPUImageTwoInputFilter> filterClass) {
         try {
             GPUImageTwoInputFilter filter = filterClass.newInstance();
-            filter.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.ic_launcher));
+            filter.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.onemob_logo));
             return filter;
         } catch (Exception e) {
             e.printStackTrace();
@@ -315,12 +422,23 @@ private static GPUImageFilter createBlendFilter(Context context, Class<? extends
     }
 
     private enum FilterType {
-        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
-        SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
-        BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
-        BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
-        GAUSSIAN_BLUR, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
-        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR
+        BLEND_SOURCE_OVER,
+        SEPIA,
+        GRAYSCALE,
+        TONE_CURVE_1977,
+        TONE_CURVE_AMARO,
+        TONE_CURVE_HUDSON,
+        TONE_CURVE_MAYFAIR,
+        TONE_CURVE_NASHVILLE,
+        TONE_CURVE_VALENCIA
+
+
+//        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
+//        SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
+//        BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
+//        BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
+//        GAUSSIAN_BLUR, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
+//        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR
     }
 
     private static class FilterList {
@@ -397,8 +515,7 @@ public FilterAdjuster(final GPUImageFilter filter) {
                 adjuster = new LevelsMinMidAdjuster().filter(filter);
             } else if (filter instanceof GPUImageBilateralFilter) {
                 adjuster = new BilateralAdjuster().filter(filter);
-            }
-            else {
+            } else {
 
                 adjuster = null;
             }
@@ -446,17 +563,17 @@ public void adjust(final int percentage) {
         }
 
         private class PixelationAdjuster extends Adjuster<GPUImagePixelationFilter> {
-          @Override
-          public void adjust(final int percentage) {
-              getFilter().setPixel(range(percentage, 1.0f, 100.0f));
-          }
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setPixel(range(percentage, 1.0f, 100.0f));
+            }
         }
 
         private class HueAdjuster extends Adjuster<GPUImageHueFilter> {
-          @Override
-          public void adjust(final int percentage) {
-            getFilter().setHue(range(percentage, 0.0f, 360.0f));
-          }
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setHue(range(percentage, 0.0f, 360.0f));
+            }
         }
 
         private class ContrastAdjuster extends Adjuster<GPUImageContrastFilter> {
@@ -522,14 +639,14 @@ public void adjust(final int percentage) {
                 getFilter().setSaturation(range(percentage, 0.0f, 2.0f));
             }
         }
-        
+
         private class ExposureAdjuster extends Adjuster<GPUImageExposureFilter> {
             @Override
             public void adjust(final int percentage) {
                 getFilter().setExposure(range(percentage, -10.0f, 10.0f));
             }
-        }   
-        
+        }
+
         private class HighlightShadowAdjuster extends Adjuster<GPUImageHighlightShadowFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -537,7 +654,7 @@ public void adjust(final int percentage) {
                 getFilter().setHighlights(range(percentage, 0.0f, 1.0f));
             }
         }
-        
+
         private class MonochromeAdjuster extends Adjuster<GPUImageMonochromeFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -545,14 +662,14 @@ public void adjust(final int percentage) {
                 //getFilter().setColor(new float[]{0.6f, 0.45f, 0.3f, 1.0f});
             }
         }
-        
+
         private class OpacityAdjuster extends Adjuster<GPUImageOpacityFilter> {
             @Override
             public void adjust(final int percentage) {
                 getFilter().setOpacity(range(percentage, 0.0f, 1.0f));
             }
-        }   
-        
+        }
+
         private class RGBAdjuster extends Adjuster<GPUImageRGBFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -560,8 +677,8 @@ public void adjust(final int percentage) {
                 //getFilter().setGreen(range(percentage, 0.0f, 1.0f));
                 //getFilter().setBlue(range(percentage, 0.0f, 1.0f));
             }
-        }   
-        
+        }
+
         private class WhiteBalanceAdjuster extends Adjuster<GPUImageWhiteBalanceFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -650,7 +767,7 @@ public void adjust(int percentage) {
         private class LevelsMinMidAdjuster extends Adjuster<GPUImageLevelsFilter> {
             @Override
             public void adjust(int percentage) {
-                getFilter().setMin(0.0f, range(percentage, 0.0f, 1.0f) , 1.0f);
+                getFilter().setMin(0.0f, range(percentage, 0.0f, 1.0f), 1.0f);
             }
         }
 
