diff --git a/build.gradle b/build.gradle
index 8a29e6b0..cb869643 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0-beta6'
+        classpath 'com.android.tools.build:gradle:2.3.1'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/gradle.properties b/gradle.properties
index 40c44d7f..50dfa822 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -2,10 +2,10 @@ VERSION_NAME=1.4.1
 GROUP=jp.co.cyberagent.android.gpuimage
 ARTIFACT_ID=gpuimage-library
 
-COMPILE_SDK_VERSION=23
-BUILD_TOOLS_VERSION=23.0.2
-TARGET_SDK_VERSION=23
-MIN_SDK_VERSION=8
+COMPILE_SDK_VERSION=25
+BUILD_TOOLS_VERSION=25.0.2
+TARGET_SDK_VERSION=25
+MIN_SDK_VERSION=18
 
 POM_DESCRIPTION=Image filters for Android with OpenGL (based on GPUImage for iOS)
 POM_URL=https://github.com/cyberagent/android-gpuimage
diff --git a/library/build.gradle b/library/build.gradle
index 4e0ded68..09c76eaf 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -40,6 +40,7 @@ android {
     lintOptions {
         abortOnError false
     }
+    buildToolsVersion '25.0.0'
 }
 
 task androidJavadocs(type: Javadoc) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8392a5a9..ed4db5e9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -39,10 +39,13 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -67,7 +70,9 @@ public GPUImage(final Context context) {
         }
 
         mContext = context;
-        mFilter = new GPUImageFilter();
+//        mFilter = new GPUImageFilter();
+        mFilter = new GPUVideoFilter();
+//        mFilter = new GPUVideoBeautifyFilter();
         mRenderer = new GPUImageRenderer(mFilter);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
index 275253ab..4885296a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
@@ -14,7 +14,7 @@
 			"attribute vec4 position;\n" + 
 			"attribute vec4 inputTextureCoordinate;\n" + 
 	 
-			"const int GAUSSIAN_SAMPLES = 9;\n" + 
+			"const int GAUSSIAN_SAMPLES = 9;\n" +
 	 
 			"uniform vec2 singleStepOffset;\n" +  
 	 
@@ -27,7 +27,7 @@
 			"	textureCoordinate = inputTextureCoordinate.xy;\n" + 
 	     
 			"	int multiplier = 0;\n" + 
-			"	vec2 blurStep;\n" +  
+			"	vec2 blurStep;\n" +
 	     
 			"	for (int i = 0; i < GAUSSIAN_SAMPLES; i++)\n" + 
 	     	"	{\n" + 
@@ -144,9 +144,9 @@ public void setDistanceNormalizationFactor(final float newValue) {
 	}
 	
 	private void setTexelSize(final float w, final float h) {
-		setFloatVec2(mSingleStepOffsetLocation, new float[] {1.0f / w, 1.0f / h});
+		setFloatVec2(mSingleStepOffsetLocation, new float[] {4.0f / w, 4.0f / h});
 	}
-	
+
 	@Override
     public void onOutputSizeChanged(final int width, final int height) {
         super.onOutputSizeChanged(width, height);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
index 7a8641aa..9620769f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
@@ -56,7 +56,7 @@
     protected int mGLAttribTextureCoordinate;
     protected int mOutputWidth;
     protected int mOutputHeight;
-    private boolean mIsInitialized;
+    protected boolean mIsInitialized;
 
     public GPUImageFilter() {
         this(NO_FILTER_VERTEX_SHADER, NO_FILTER_FRAGMENT_SHADER);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 691550bd..79c1782a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -26,10 +26,6 @@
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
 
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.opengles.GL10;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -38,6 +34,11 @@
 import java.util.LinkedList;
 import java.util.Queue;
 
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
@@ -170,16 +171,20 @@ public void run() {
         }
     }
 
+
     public void setUpSurfaceTexture(final Camera camera) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                int[] textures = new int[1];
-                GLES20.glGenTextures(1, textures, 0);
-                mSurfaceTexture = new SurfaceTexture(textures[0]);
+                mGLTextureId = OpenGlUtils.buildTexture();
+                mSurfaceTexture = new SurfaceTexture(mGLTextureId);
+                mImageWidth = 1280;
+                mImageHeight = 720;
+                mSurfaceTexture.setDefaultBufferSize(mImageWidth, mImageHeight);
+                adjustImageScaling();
                 try {
                     camera.setPreviewTexture(mSurfaceTexture);
-                    camera.setPreviewCallback(GPUImageRenderer.this);
+//                    camera.setPreviewCallback(GPUImageRenderer.this);
                     camera.startPreview();
                 } catch (IOException e) {
                     e.printStackTrace();
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUVideoBeautifyFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUVideoBeautifyFilter.java
new file mode 100644
index 00000000..024e45c2
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUVideoBeautifyFilter.java
@@ -0,0 +1,44 @@
+package jp.co.cyberagent.android.gpuimage;
+
+/**
+ * Created by kly on 17-5-27.
+ */
+
+public class GPUVideoBeautifyFilter extends GPUImageFilterGroup {
+
+
+    GPUImageHazeFilter hazeFilter;
+    GPUImageBilateralFilter bilateralFilter;
+
+    public GPUVideoBeautifyFilter(){
+        super();
+        addFilter(new GPUVideoFilter());
+        bilateralFilter = new GPUImageBilateralFilter(8.0f);
+        addFilter(bilateralFilter);
+        hazeFilter = new GPUImageHazeFilter();
+        addFilter(hazeFilter);
+    }
+
+    public void setDistanceNormalizationFactor(final float newValue) {
+        bilateralFilter.setDistanceNormalizationFactor(newValue);
+    }
+
+    /**
+     * Strength of the color applied. Default 0. Values between -.3 and .3 are best.
+     *
+     * @param distance -0.3 to 0.3 are best, default 0
+     */
+    public void setDistance(float distance) {
+        hazeFilter.setDistance(distance);
+    }
+
+    /**
+     * Amount of color change. Default 0. Values between -.3 and .3 are best.
+     *
+     * @param slope -0.3 to 0.3 are best, default 0
+     */
+    public void setSlope(float slope) {
+        hazeFilter.setSlope(slope);
+    }
+
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUVideoFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUVideoFilter.java
new file mode 100644
index 00000000..f27e3f15
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUVideoFilter.java
@@ -0,0 +1,90 @@
+package jp.co.cyberagent.android.gpuimage;
+
+import android.opengl.GLES11Ext;
+import android.opengl.GLES20;
+
+import java.nio.FloatBuffer;
+
+/**
+ * Created by kly on 17-5-27.
+ */
+
+public class GPUVideoFilter extends GPUImageFilter {
+
+
+    public static final String NO_FILTER_VERTEX_SHADER = "" +
+            "attribute vec4 position;\n" +
+            "attribute vec4 inputTextureCoordinate;\n" +
+            " \n" +
+            "varying vec2 textureCoordinate;\n" +
+            " \n" +
+            "void main()\n" +
+            "{\n" +
+            "    gl_Position = position;\n" +
+            "    textureCoordinate = inputTextureCoordinate.xy;\n" +
+            "}";
+    public static final String NO_FILTER_FRAGMENT_SHADER = "" +
+            "#extension GL_OES_EGL_image_external : require\n" +
+            " \n" +
+            "varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            "uniform samplerExternalOES inputImageTexture;\n" +
+            " \n" +
+            "void main()\n" +
+            "{\n" +
+            "     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "}";
+
+
+
+    public GPUVideoFilter(){
+        super(NO_FILTER_VERTEX_SHADER, NO_FILTER_FRAGMENT_SHADER);
+    }
+
+
+    @Override
+    public void onInit() {
+        super.onInit();
+    }
+
+
+    @Override
+    public void onInitialized() {
+        super.onInitialized();
+    }
+
+
+    @Override
+    public void onDraw(int textureId, FloatBuffer cubeBuffer, FloatBuffer textureBuffer) {
+        GLES20.glUseProgram(mGLProgId);
+        runPendingOnDrawTasks();
+        if (!mIsInitialized) {
+            return;
+        }
+
+        cubeBuffer.position(0);
+        GLES20.glVertexAttribPointer(mGLAttribPosition, 2, GLES20.GL_FLOAT, false, 0, cubeBuffer);
+        GLES20.glEnableVertexAttribArray(mGLAttribPosition);
+        textureBuffer.position(0);
+        GLES20.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, GLES20.GL_FLOAT, false, 0,
+                textureBuffer);
+        GLES20.glEnableVertexAttribArray(mGLAttribTextureCoordinate);
+        if (textureId != OpenGlUtils.NO_TEXTURE) {
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+            GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, textureId);
+            GLES20.glUniform1i(mGLUniformTexture, 0);
+        }
+        onDrawArraysPre();
+        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+        GLES20.glDisableVertexAttribArray(mGLAttribPosition);
+        GLES20.glDisableVertexAttribArray(mGLAttribTextureCoordinate);
+        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, 0);
+    }
+
+
+    @Override
+    public void onOutputSizeChanged(int width, int height) {
+        super.onOutputSizeChanged(width, height);
+    }
+
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
index e8589704..515d9473 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
@@ -16,18 +16,35 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import java.nio.IntBuffer;
-
 import android.graphics.Bitmap;
 import android.graphics.Bitmap.Config;
 import android.hardware.Camera.Size;
+import android.opengl.GLES11Ext;
 import android.opengl.GLES20;
 import android.opengl.GLUtils;
 import android.util.Log;
 
+import java.nio.IntBuffer;
+
 public class OpenGlUtils {
     public static final int NO_TEXTURE = -1;
 
+
+    public static int buildTexture(){
+        int[] textures = new int[1];
+        GLES20.glGenTextures(1, textures, 0);
+        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, textures[0]);
+        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MIN_FILTER,
+                GLES20.GL_NEAREST);
+        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MAG_FILTER,
+                GLES20.GL_LINEAR);
+        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_S,
+                GLES20.GL_CLAMP_TO_EDGE);
+        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_T,
+                GLES20.GL_CLAMP_TO_EDGE);
+        return textures[0];
+    }
+
     public static int loadTexture(final Bitmap img, final int usedTexId) {
         return loadTexture(img, usedTexId, true);
     }
diff --git a/sample/build.gradle b/sample/build.gradle
index f64f4a42..14a496f9 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -26,6 +26,7 @@ android {
     lintOptions {
         abortOnError true
     }
+    buildToolsVersion '25.0.0'
 }
 repositories {
     jcenter()
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index 6f2f6dd4..f6e784d4 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -23,11 +23,87 @@
 import android.graphics.PointF;
 import android.opengl.Matrix;
 
-import jp.co.cyberagent.android.gpuimage.*;
-
 import java.util.LinkedList;
 import java.util.List;
 
+import jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageAddBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBilateralFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBoxBlurFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBulgeDistortionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageCGAColorspaceFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageChromaKeyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorDodgeBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorInvertFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageCrosshatchFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDarkenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDifferenceBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDilationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDissolveBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDivideBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExclusionBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFalseColorFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGaussianBlurFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGlassSphereFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHalftoneFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHardLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHazeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageKuwaharaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLaplacianFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLevelsFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLightenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLinearBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLookupFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLuminosityBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageMultiplyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageNonMaximumSuppressionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageNormalBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageOverlayBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRGBDilationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRGBFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageScreenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSketchFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSmoothToonFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSobelEdgeDetection;
+import jp.co.cyberagent.android.gpuimage.GPUImageSoftLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSourceOverBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSphereRefractionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSubtractBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSwirlFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageToneCurveFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageToonFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageTransformFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageVignetteFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageWeakPixelInclusionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.GPUVideoBeautifyFilter;
+
 public class GPUImageFilterTools {
     public static void showDialog(final Context context,
             final OnGpuImageFilterChosenListener listener) {
@@ -109,7 +185,9 @@ public static void showDialog(final Context context,
 
         filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
 
-        filters. addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
+        filters.addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
+
+        filters.addFilter("Video Beautify", FilterType.VIDEO_BEAUTIFY);
 
         filters.addFilter("Transform (2-D)", FilterType.TRANSFORM2D);
 
@@ -300,6 +378,9 @@ private static GPUImageFilter createFilterForType(final Context context, final F
             case BILATERAL_BLUR:
                 return new GPUImageBilateralFilter();
 
+            case VIDEO_BEAUTIFY:
+                return new GPUVideoBeautifyFilter();
+
             case TRANSFORM2D:
                 return new GPUImageTransformFilter();
 
@@ -330,7 +411,7 @@ private static GPUImageFilter createBlendFilter(Context context, Class<? extends
         BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
         BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
         GAUSSIAN_BLUR, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
-        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR, HALFTONE, TRANSFORM2D
+        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR, VIDEO_BEAUTIFY, HALFTONE, TRANSFORM2D
     }
 
     private static class FilterList {
@@ -409,6 +490,8 @@ public FilterAdjuster(final GPUImageFilter filter) {
                 adjuster = new BilateralAdjuster().filter(filter);
             } else if (filter instanceof GPUImageTransformFilter) {
                 adjuster = new RotateAdjuster().filter(filter);
+            } else if (filter instanceof GPUVideoBeautifyFilter) {
+                adjuster = new BeautifyAdjuster().filter(filter);
             }
             else {
 
@@ -599,7 +682,7 @@ public void adjust(final int percentage) {
         private class GaussianBlurAdjuster extends Adjuster<GPUImageGaussianBlurFilter> {
             @Override
             public void adjust(final int percentage) {
-                getFilter().setBlurSize(range(percentage, 0.0f, 1.0f));
+                getFilter().setBlurSize(range(percentage, 0.0f, 10.0f));
             }
         }
 
@@ -673,6 +756,15 @@ public void adjust(final int percentage) {
             }
         }
 
+        private class BeautifyAdjuster extends Adjuster<GPUVideoBeautifyFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setDistanceNormalizationFactor(range(percentage, 0.0f, 15.0f));
+                getFilter().setDistance(range(percentage, -0.3f, 0.3f));
+                getFilter().setSlope(range(percentage, -0.3f, 0.3f));
+            }
+        }
+
         private class RotateAdjuster extends Adjuster<GPUImageTransformFilter> {
             @Override
             public void adjust(final int percentage) {
