diff --git a/README.md b/README.md
index 78181e52..d9fe565f 100644
--- a/README.md
+++ b/README.md
@@ -1,79 +1,3 @@
-# make a new sample tool for UX to create multipy filter templates.
+# add a UX tool for creating multipy filter templates.
 
----
-# GPUImage for Android
-[![License](https://img.shields.io/badge/license-Apache%202-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)
-[![Download](https://api.bintray.com/packages/cyberagent/maven/gpuimage-library/images/download.svg) ](https://bintray.com/cyberagent/maven/gpuimage-library/_latestVersion)
 
-Idea from: [iOS GPUImage framework](https://github.com/BradLarson/GPUImage)
-
-Goal is to have something as similar to GPUImage as possible. Vertex and fragment shaders are exactly the same. That way it makes it easier to port filters from GPUImage iOS to Android.
-
-## Requirements
-* Android 2.2 or higher (OpenGL ES 2.0)
-
-## Usage
-
-### Gradle dependency
-
-```groovy
-repositories {
-    jcenter()
-}
-
-dependencies {
-    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
-}
-```
-
-### Sample Code
-With preview:
-
-```java
-@Override
-public void onCreate(final Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    setContentView(R.layout.activity);
-
-    Uri imageUri = ...;
-    mGPUImage = new GPUImage(this);
-    mGPUImage.setGLSurfaceView((GLSurfaceView) findViewById(R.id.surfaceView));
-    mGPUImage.setImage(imageUri); // this loads image on the current thread, should be run in a thread
-    mGPUImage.setFilter(new GPUImageSepiaFilter());
-
-    // Later when image should be saved saved:
-    mGPUImage.saveToPictures("GPUImage", "ImageWithFilter.jpg", null);
-}
-```
-
-Without preview:
-
-```java
-Uri imageUri = ...;
-mGPUImage = new GPUImage(context);
-mGPUImage.setFilter(new GPUImageSobelEdgeDetection());
-mGPUImage.setImage(imageUri);
-mGPUImage.saveToPictures("GPUImage", "ImageWithFilter.jpg", null);
-```
-
-### Gradle
-Make sure that you run the clean target when using maven.
-
-```groovy
-gradle clean assemble
-```
-
-## License
-    Copyright 2012 CyberAgent, Inc.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
diff --git a/sample/AndroidManifest.xml b/sample/AndroidManifest.xml
index 855b72c5..207735c4 100644
--- a/sample/AndroidManifest.xml
+++ b/sample/AndroidManifest.xml
@@ -11,12 +11,12 @@
         android:allowBackup="true"
         android:hardwareAccelerated="true"
         android:icon="@drawable/ic_launcher"
-        android:largeHeap="true"
         android:label="@string/app_name"
-        android:theme="@style/AppTheme" >
+        android:largeHeap="true"
+        android:theme="@style/AppTheme">
         <activity
             android:name=".activity.ActivityMain"
-            android:label="@string/title_activity_activity_main" >
+            android:label="@string/title_activity_activity_main">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
@@ -28,6 +28,10 @@
             android:name="jp.co.cyberagent.android.gpuimage.sample.activity.ActivityCamera"
             android:screenOrientation="portrait"
             android:theme="@style/AppTheme.NoActionBar" />
+        <activity
+            android:name="jp.co.cyberagent.android.gpuimage.sample.activity.UXToolActivity"
+            android:screenOrientation="portrait"
+            android:theme="@style/AppTheme.NoActionBar" />
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/sample/res/layout/activity_main.xml b/sample/res/layout/activity_main.xml
index 6c13bf2f..452dc172 100644
--- a/sample/res/layout/activity_main.xml
+++ b/sample/res/layout/activity_main.xml
@@ -1,14 +1,13 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
-    android:layout_height="match_parent" >
+    android:layout_height="match_parent">
 
     <LinearLayout
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_gravity="center"
         android:gravity="center"
-        android:orientation="vertical" >
+        android:orientation="vertical">
 
         <Button
             android:id="@+id/button_gallery"
@@ -24,6 +23,14 @@
             android:layout_height="wrap_content"
             android:drawableTop="@android:drawable/ic_menu_camera"
             android:text="Camera" />
+
+
+        <Button
+            android:id="@+id/button_ux_tool"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:drawableTop="@android:drawable/ic_menu_camera"
+            android:text="UX Tool" />
     </LinearLayout>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/sample/res/layout/activity_ux_tool.xml b/sample/res/layout/activity_ux_tool.xml
new file mode 100644
index 00000000..45a52984
--- /dev/null
+++ b/sample/res/layout/activity_ux_tool.xml
@@ -0,0 +1,21 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#000000"
+    android:orientation="vertical">
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1">
+
+        <jp.co.cyberagent.android.gpuimage.GPUImageView
+            android:id="@+id/gpuimage"
+            android:layout_width="wrap_content"
+            android:layout_height="360dp"
+            android:layout_gravity="center" />
+
+    </FrameLayout>
+
+
+</LinearLayout>
\ No newline at end of file
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
index 80600ee6..9b1de8e2 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
@@ -25,29 +25,34 @@
 import android.support.v4.content.PermissionChecker;
 import android.view.View;
 import android.view.View.OnClickListener;
+
 import jp.co.cyberagent.android.gpuimage.sample.R;
 
 public class ActivityMain extends Activity implements OnClickListener {
 
-    @Override public void onCreate(final Bundle savedInstanceState) {
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
         findViewById(R.id.button_gallery).setOnClickListener(this);
         findViewById(R.id.button_camera).setOnClickListener(this);
+        findViewById(R.id.button_ux_tool).setOnClickListener(this);
     }
 
-    @Override public void onClick(final View v) {
+    @Override
+    public void onClick(final View v) {
         if (PermissionChecker.checkSelfPermission(this, Manifest.permission.CAMERA)
-            == PackageManager.PERMISSION_DENIED) {
-            ActivityCompat.requestPermissions(this, new String[] { Manifest.permission.CAMERA },
-                v.getId());
+                == PackageManager.PERMISSION_DENIED) {
+            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA},
+                    v.getId());
         } else {
             startActivity(v.getId());
         }
     }
 
-    @Override public void onRequestPermissionsResult(int requestCode, String[] permissions,
-        int[] grantResults) {
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions,
+                                           int[] grantResults) {
         if (grantResults.length != 1 || grantResults[0] == PackageManager.PERMISSION_GRANTED) {
             startActivity(requestCode);
         } else {
@@ -63,7 +68,9 @@ private void startActivity(int id) {
             case R.id.button_camera:
                 startActivity(new Intent(this, ActivityCamera.class));
                 break;
-
+            case R.id.button_ux_tool:
+                startActivity(new Intent(this, UXToolActivity.class));
+                break;
             default:
                 break;
         }
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/UXToolActivity.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/UXToolActivity.java
new file mode 100644
index 00000000..5e9270a8
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/UXToolActivity.java
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2016 DK
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.activity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.view.View;
+
+import jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageView;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+public class UXToolActivity extends Activity {
+
+    private static final int REQUEST_PICK_IMAGE = 1;
+    private GPUImageFilter mFilter;
+    private FilterAdjuster mFilterAdjuster;
+    private GPUImageView mGPUImageView;
+    private GPUImageFilterGroup group;
+    private GPUImageBrightnessFilter brightnessFilter;
+    private GPUImageSaturationFilter saturationFilter;
+    private GPUImageContrastFilter contrastFilter;
+    private GPUImageHueFilter hueFilter;
+    private GPUImageExposureFilter exposureFilter;
+
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_ux_tool);
+        mGPUImageView = (GPUImageView) findViewById(R.id.gpuimage);
+        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+        photoPickerIntent.setType("image/*");
+        startActivityForResult(photoPickerIntent, REQUEST_PICK_IMAGE);
+
+        initFilters();
+    }
+
+    private void initFilters() {
+        brightnessFilter = new GPUImageBrightnessFilter();
+        saturationFilter = new GPUImageSaturationFilter();
+        contrastFilter = new GPUImageContrastFilter();
+        hueFilter = new GPUImageHueFilter();
+        exposureFilter = new GPUImageExposureFilter();
+
+        group = new GPUImageFilterGroup();
+        group.addFilter(brightnessFilter);
+        group.addFilter(saturationFilter);
+        group.addFilter(contrastFilter);
+        group.addFilter(hueFilter);
+        group.addFilter(exposureFilter);
+
+        applyFilterTo(group);
+    }
+
+    @Override
+    protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        switch (requestCode) {
+            case REQUEST_PICK_IMAGE:
+                if (resultCode == RESULT_OK) {
+                    handleImage(data.getData());
+                } else {
+                    finish();
+                }
+                break;
+
+            default:
+                super.onActivityResult(requestCode, resultCode, data);
+                break;
+        }
+    }
+
+
+    private void applyFilterTo(final GPUImageFilter filter) {
+        if (mFilter == null
+                || (filter != null && !mFilter.getClass().equals(filter.getClass()))) {
+            mFilter = filter;
+            mGPUImageView.setFilter(mFilter);
+            mFilterAdjuster = new FilterAdjuster(mFilter);
+
+            findViewById(R.id.seekBar).setVisibility(
+                    mFilterAdjuster.canAdjust() ? View.VISIBLE : View.GONE);
+        }
+    }
+
+
+    private void handleImage(final Uri selectedImage) {
+        mGPUImageView.setImage(selectedImage);
+    }
+}
