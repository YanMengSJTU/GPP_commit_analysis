diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index a2b25348..d4ce3696 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -44,6 +44,8 @@
 import java.util.List;
 import java.util.concurrent.Semaphore;
 
+import jp.co.cyberagent.android.gpuimage.util.AssetsUtil;
+
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
  * tasks through a simple interface.
@@ -512,6 +514,8 @@ protected Bitmap decode(BitmapFactory.Options options) {
                 InputStream inputStream;
                 if (mUri.getScheme().startsWith("http") || mUri.getScheme().startsWith("https")) {
                     inputStream = new URL(mUri.toString()).openStream();
+                } else if (AssetsUtil.isAssetUri(mUri)) {
+                    inputStream = mContext.getAssets().open(AssetsUtil.getFilePath(mUri));
                 } else {
                     inputStream = mContext.getContentResolver().openInputStream(mUri);
                 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/util/AssetsUtil.java b/library/src/jp/co/cyberagent/android/gpuimage/util/AssetsUtil.java
new file mode 100644
index 00000000..b8816b50
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/AssetsUtil.java
@@ -0,0 +1,21 @@
+package jp.co.cyberagent.android.gpuimage.util;
+
+import android.net.Uri;
+
+import static android.content.ContentResolver.SCHEME_FILE;
+
+public class AssetsUtil {
+    private static final String ANDROID_ASSET = "android_asset";
+    private static final int ASSET_PREFIX_LENGTH =
+        (SCHEME_FILE + ":///" + ANDROID_ASSET + "/").length();
+
+    public static boolean isAssetUri(Uri uri) {
+        return SCHEME_FILE.equals(uri.getScheme())
+            && !uri.getPathSegments().isEmpty()
+            && ANDROID_ASSET.equals(uri.getPathSegments().get(0));
+    }
+
+    public static String getFilePath(Uri assetUri) {
+        return assetUri.toString().substring(ASSET_PREFIX_LENGTH);
+    }
+}
