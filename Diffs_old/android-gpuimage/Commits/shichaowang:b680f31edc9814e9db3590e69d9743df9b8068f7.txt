diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index ac2e7c97..000e69b6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -16,15 +16,20 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
+
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Matrix;
 import android.graphics.SurfaceTexture;
 import android.hardware.Camera;
 import android.hardware.Camera.PreviewCallback;
 import android.hardware.Camera.Size;
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
+import android.util.Log;
+
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 
 import javax.microedition.khronos.egl.EGLConfig;
@@ -34,13 +39,14 @@
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+import java.nio.channels.ByteChannel;
 import java.util.LinkedList;
 import java.util.Queue;
 
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
-public class GPUImageRenderer implements Renderer, PreviewCallback {
+public class GPUImageRenderer implements Renderer, PreviewCallback{
     public static final int NO_IMAGE = -1;
     static final float CUBE[] = {
             -1.0f, -1.0f,
@@ -105,6 +111,7 @@ public void onSurfaceChanged(final GL10 gl, final int width, final int height) {
         }
     }
 
+    @SuppressLint("WrongCall")
     @Override
     public void onDrawFrame(final GL10 gl) {
         GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
@@ -216,15 +223,16 @@ public void run() {
                 } else {
                     mAddedPadding = 0;
                 }
+                    mGLTextureId = OpenGlUtils.loadTexture(
+                            resizedBitmap != null ? resizedBitmap : bitmap, mGLTextureId, recycle);
 
-                mGLTextureId = OpenGlUtils.loadTexture(
-                        resizedBitmap != null ? resizedBitmap : bitmap, mGLTextureId, recycle);
-                if (resizedBitmap != null) {
-                    resizedBitmap.recycle();
-                }
-                mImageWidth = bitmap.getWidth();
-                mImageHeight = bitmap.getHeight();
-                adjustImageScaling();
+                    if (resizedBitmap != null) {
+                        resizedBitmap.recycle();
+                    }
+                    mImageWidth = bitmap.getWidth();
+                    mImageHeight = bitmap.getHeight();
+                    adjustImageScaling();
+               
             }
         });
     }
@@ -244,6 +252,7 @@ protected int getFrameHeight() {
     private void adjustImageScaling() {
         float outputWidth = mOutputWidth;
         float outputHeight = mOutputHeight;
+
         if (mRotation == Rotation.ROTATION_270 || mRotation == Rotation.ROTATION_90) {
             outputWidth = mOutputHeight;
             outputHeight = mOutputWidth;
@@ -288,18 +297,20 @@ private void adjustImageScaling() {
         mGLTextureBuffer.clear();
         mGLTextureBuffer.put(textureCords).position(0);
     }
-
+    
     private float addDistance(float coordinate, float distance) {
         return coordinate == 0.0f ? distance : 1 - distance;
     }
 
     public void setRotationCamera(final Rotation rotation, final boolean flipHorizontal,
             final boolean flipVertical) {
+        
         setRotation(rotation, flipVertical, flipHorizontal);
     }
 
     public void setRotation(final Rotation rotation, final boolean flipHorizontal,
             final boolean flipVertical) {
+        
         mRotation = rotation;
         mFlipHorizontal = flipHorizontal;
         mFlipVertical = flipVertical;
