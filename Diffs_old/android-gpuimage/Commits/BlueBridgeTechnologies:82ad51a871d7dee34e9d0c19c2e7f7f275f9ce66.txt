diff --git a/build.gradle b/build.gradle
index d60b038a..7243fcc5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.2'
+        classpath 'com.android.tools.build:gradle:2.3.3'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index efaf6fff..37106171 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,3 @@
-#Wed May 31 12:27:31 IST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 20b66d3e..4b503014 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -30,8 +30,6 @@
 import jp.co.cyberagent.android.gpuimage.videosupport.CameraFrameReceivedCallback;
 import jp.co.cyberagent.android.gpuimage.videosupport.VideoFrameCallback;
 
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.opengles.GL10;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -40,6 +38,9 @@
 import java.util.LinkedList;
 import java.util.Queue;
 
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
@@ -82,6 +83,8 @@
     private float mBackgroundGreen = 0;
     private float mBackgroundBlue = 0;
 
+    private Size mPreloadedPreviewSize;
+
     public GPUImageRenderer(final GPUImageFilter filter) {
         mFilter = filter;
         mRunOnDraw = new LinkedList<Runnable>();
@@ -152,13 +155,10 @@ private void runAll(Queue<Runnable> queue) {
 
     @Override
     public void onPreviewFrame(final byte[] data, final Camera camera) {
-
-        final Size previewSize = camera.getParameters().getPreviewSize();
-
+        final Size previewSize = mPreloadedPreviewSize != null ? mPreloadedPreviewSize : camera.getParameters().getPreviewSize();
         if(cameraFrameReceivedCallback != null){
             cameraFrameReceivedCallback.onCameraPreview(data,previewSize.width, previewSize.height);
         }
-
         if (mGLRgbBuffer == null) {
             mGLRgbBuffer = IntBuffer.allocate(previewSize.width * previewSize.height);
         }
@@ -181,6 +181,14 @@ public void run() {
         }
     }
 
+    /**
+     * Calling this method is not necessary, but due to the high cost of calling `camera.getParameters().getPreviewSize()`
+     * you can call it with the previewSize you will provide to improve performance.
+     * @param previewSize
+     */
+    public void setPreviewSize(Size previewSize) {
+        this.mPreloadedPreviewSize = previewSize;
+    }
 
     @Override
     public void onVideoFrame(final byte[] data, final int width, final int height) {
