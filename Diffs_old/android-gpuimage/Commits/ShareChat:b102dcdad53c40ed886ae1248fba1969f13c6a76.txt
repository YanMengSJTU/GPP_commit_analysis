diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8392a5a9..8ac626fd 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -39,10 +39,13 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -71,6 +74,10 @@ public GPUImage(final Context context) {
         mRenderer = new GPUImageRenderer(mFilter);
     }
 
+    public GPUImageRenderer getRenderer(){
+        return this.mRenderer;
+    }
+
     /**
      * Checks if OpenGL ES 2.0 is supported on the current device.
      *
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 691550bd..4d4fa7ed 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -26,10 +26,6 @@
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
 
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.opengles.GL10;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -38,6 +34,12 @@
 import java.util.LinkedList;
 import java.util.Queue;
 
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
+import jp.co.cyberagent.android.gpuimage.interfaces.RendererListener;
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
@@ -77,6 +79,12 @@
     private float mBackgroundGreen = 0;
     private float mBackgroundBlue = 0;
 
+    private RendererListener rendererListener;
+
+    public void setRendererListener(RendererListener listener){
+        this.rendererListener = listener;
+    }
+
     public GPUImageRenderer(final GPUImageFilter filter) {
         mFilter = filter;
         mRunOnDraw = new LinkedList<Runnable>();
@@ -147,6 +155,9 @@ private void runAll(Queue<Runnable> queue) {
 
     @Override
     public void onPreviewFrame(final byte[] data, final Camera camera) {
+        if(rendererListener != null){
+            rendererListener.onCameraFrame(data, camera);
+        }
         final Size previewSize = camera.getParameters().getPreviewSize();
         if (mGLRgbBuffer == null) {
             mGLRgbBuffer = IntBuffer.allocate(previewSize.width * previewSize.height);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/interfaces/RendererListener.java b/library/src/jp/co/cyberagent/android/gpuimage/interfaces/RendererListener.java
new file mode 100644
index 00000000..3f78ead2
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/interfaces/RendererListener.java
@@ -0,0 +1,11 @@
+package jp.co.cyberagent.android.gpuimage.interfaces;
+
+import android.hardware.Camera;
+
+/**
+ * Created by amankr on 28/04/17.
+ */
+
+public interface RendererListener {
+    void onCameraFrame(final byte[] data, final Camera camera);
+}
