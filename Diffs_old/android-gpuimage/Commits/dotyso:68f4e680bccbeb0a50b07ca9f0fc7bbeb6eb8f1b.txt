diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
index b35e10eb..c8f7958a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
@@ -16,12 +16,11 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.graphics.PointF;
-import android.opengl.GLES20;
-
 import java.nio.FloatBuffer;
 import java.util.LinkedList;
 
+import android.opengl.GLES20;
+
 public class GPUImageFilter {
     public static final String NO_FILTER_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" +
@@ -65,12 +64,6 @@ public GPUImageFilter(final String vertexShader, final String fragmentShader) {
         mFragmentShader = fragmentShader;
     }
 
-    public final void init() {
-        onInit();
-        mIsInitialized = true;
-        onInitialized();
-    }
-
     public void onInit() {
         mGLProgId = OpenGlUtils.loadProgram(mVertexShader, mFragmentShader);
         mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, "position");
@@ -80,14 +73,6 @@ public void onInit() {
         mIsInitialized = true;
     }
 
-    public void onInitialized() {
-    }
-
-    public final void destroy() {
-        mIsInitialized = false;
-        onDestroy();
-    }
-
     public void onDestroy() {
         GLES20.glDeleteProgram(mGLProgId);
         mIsInitialized = false;
@@ -99,7 +84,7 @@ public void onOutputSizeChanged(final int width, final int height) {
     }
 
     public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
-                       final FloatBuffer textureBuffer) {
+            final FloatBuffer textureBuffer) {
         GLES20.glUseProgram(mGLProgId);
         runPendingOnDrawTasks();
         if (!mIsInitialized) {
@@ -158,69 +143,12 @@ public int getUniformTexture() {
         return mGLUniformTexture;
     }
 
-    protected void setInteger(final int location, final int intValue) {
-        runOnDraw(new Runnable() {
-            @Override
-            public void run() {
-                GLES20.glUniform1i(location, intValue);
-            }
-        });
-    }
-
     protected void setFloat(final int location, final float floatValue) {
         runOnDraw(new Runnable() {
-            @Override
-            public void run() {
-                GLES20.glUniform1f(location, floatValue);
-            }
-        });
-    }
 
-    protected void setFloatVec2(final int location, final float[] arrayValue) {
-        runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform2fv(location, 1, FloatBuffer.wrap(arrayValue));
-            }
-        });
-    }
-
-    protected void setFloatVec3(final int location, final float[] arrayValue) {
-        runOnDraw(new Runnable() {
-            @Override
-            public void run() {
-                GLES20.glUniform3fv(location, 1, FloatBuffer.wrap(arrayValue));
-            }
-        });
-    }
-
-    protected void setFloatVec4(final int location, final float[] arrayValue) {
-        runOnDraw(new Runnable() {
-            @Override
-            public void run() {
-                GLES20.glUniform4fv(location, 1, FloatBuffer.wrap(arrayValue));
-            }
-        });
-    }
-
-    protected void setFloatArray(final int location, final float[] arrayValue) {
-        runOnDraw(new Runnable() {
-            @Override
-            public void run() {
-                GLES20.glUniform1fv(location, arrayValue.length, FloatBuffer.wrap(arrayValue));
-            }
-        });
-    }
-    
-    protected void setPoint(final int location, final PointF point) {
-        runOnDraw(new Runnable() {
-
-            @Override
-            public void run() {
-            	float[] vec2 = new float[2];
-            	vec2[0] = point.x;
-            	vec2[1] = point.y;
-                GLES20.glUniform2fv(location, 1, vec2, 0);
+                GLES20.glUniform1f(location, floatValue);
             }
         });
     }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
deleted file mode 100644
index a7df92c7..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-/**
- * Adjusts the shadows and highlights of an image
- * shadows: Increase to lighten shadows, from 0.0 to 1.0, with 0.0 as the default.
- * highlights: Decrease to darken highlights, from 0.0 to 1.0, with 1.0 as the default.
- */
-public class GPUImageHighlightShadowFilter extends GPUImageFilter {
-    public static final String HIGHLIGHT_SHADOW_FRAGMENT_SHADER = "" +
-    		" uniform sampler2D inputImageTexture;\n" +
-    		" varying highp vec2 textureCoordinate;\n" +
-    		"  \n" +
-    		" uniform lowp float shadows;\n" +
-    		" uniform lowp float highlights;\n" +
-    		" \n" +
-    		" const mediump vec3 luminanceWeighting = vec3(0.3, 0.3, 0.3);\n" +
-    		" \n" +
-    		" void main()\n" +
-    		" {\n" +
-    		" 	lowp vec4 source = texture2D(inputImageTexture, textureCoordinate);\n" +
-    		" 	mediump float luminance = dot(source.rgb, luminanceWeighting);\n" +
-    		" \n" +
-    		" 	mediump float shadow = clamp((pow(luminance, 1.0/(shadows+1.0)) + (-0.76)*pow(luminance, 2.0/(shadows+1.0))) - luminance, 0.0, 1.0);\n" +
-    		" 	mediump float highlight = clamp((1.0 - (pow(1.0-luminance, 1.0/(2.0-highlights)) + (-0.8)*pow(1.0-luminance, 2.0/(2.0-highlights)))) - luminance, -1.0, 0.0);\n" +
-    		" 	lowp vec3 result = vec3(0.0, 0.0, 0.0) + ((luminance + shadow + highlight) - 0.0) * ((source.rgb - vec3(0.0, 0.0, 0.0))/(luminance - 0.0));\n" +
-    		" \n" +
-    		" 	gl_FragColor = vec4(result.rgb, source.a);\n" +
-    		" }";
-
-    private int mShadowsLocation;
-    private float mShadows;
-    private int mHighlightsLocation;
-    private float mHighlights;
-    private boolean mIsInitialized = false;
-
-    public GPUImageHighlightShadowFilter() {
-        this(0.0f, 1.0f);
-    }
-
-    public GPUImageHighlightShadowFilter(final float shadows, final float highlights) {
-        super(NO_FILTER_VERTEX_SHADER, HIGHLIGHT_SHADOW_FRAGMENT_SHADER);
-        mHighlights = highlights;
-        mShadows = shadows;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mHighlightsLocation = GLES20.glGetUniformLocation(getProgram(), "highlights");
-        mShadowsLocation = GLES20.glGetUniformLocation(getProgram(), "shadows");
-        mIsInitialized = true;
-        setHighlights(mHighlights);
-        setShadows(mShadows);
-    }
-
-    public void setHighlights(final float highlights) {
-    	mHighlights = highlights;
-        if (mIsInitialized) {
-            setFloat(mHighlightsLocation, mHighlights);
-        }
-    }
-    
-    public void setShadows(final float shadows) {
-        mShadows = shadows;
-        if (mIsInitialized) {
-            setFloat(mShadowsLocation, mShadows);
-        }
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
deleted file mode 100644
index bcaab026..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-/**
- * Converts the image to a single-color version, based on the luminance of each pixel
- * intensity: The degree to which the specific color replaces the normal image color (0.0 - 1.0, with 1.0 as the default)
- * color: The color to use as the basis for the effect, with (0.6, 0.45, 0.3, 1.0) as the default.
- */
-public class GPUImageMonochromeFilter extends GPUImageFilter {
-    public static final String MONOCHROME_FRAGMENT_SHADER = "" +
-    		" precision lowp float;\n" +
-    		"  \n" +
-    		"  varying highp vec2 textureCoordinate;\n" +
-    		"  \n" +
-    		"  uniform sampler2D inputImageTexture;\n" +
-    		"  uniform float intensity;\n" +
-    		"  uniform vec3 filterColor;\n" +
-    		"  \n" +
-    		"  const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n" +
-    		"  \n" +
-    		"  void main()\n" +
-    		"  {\n" +
-    		" 	//desat, then apply overlay blend\n" +
-    		" 	lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-    		" 	float luminance = dot(textureColor.rgb, luminanceWeighting);\n" +
-    		" 	\n" +
-    		" 	lowp vec4 desat = vec4(vec3(luminance), 1.0);\n" +
-    		" 	\n" +
-    		" 	//overlay\n" +
-    		" 	lowp vec4 outputColor = vec4(\n" +
-    		"                                  (desat.r < 0.5 ? (2.0 * desat.r * filterColor.r) : (1.0 - 2.0 * (1.0 - desat.r) * (1.0 - filterColor.r))),\n" +
-    		"                                  (desat.g < 0.5 ? (2.0 * desat.g * filterColor.g) : (1.0 - 2.0 * (1.0 - desat.g) * (1.0 - filterColor.g))),\n" +
-    		"                                  (desat.b < 0.5 ? (2.0 * desat.b * filterColor.b) : (1.0 - 2.0 * (1.0 - desat.b) * (1.0 - filterColor.b))),\n" +
-    		"                                  1.0\n" +
-    		"                                  );\n" +
-    		" 	\n" +
-    		" 	//which is better, or are they equal?\n" +
-    		" 	gl_FragColor = vec4( mix(textureColor.rgb, outputColor.rgb, intensity), textureColor.a);\n" +
-    		"  }";
-
-    private int mIntensityLocation;
-    private float mIntensity;
-    private int mFilterColorLocation;
-    private float[] mColor;
-    private boolean mIsInitialized = false;
-
-    public GPUImageMonochromeFilter() {
-        this(1.0f, new float[] {0.6f, 0.45f, 0.3f, 1.0f});
-    }
-
-    public GPUImageMonochromeFilter(final float intensity, final float[] color) {
-        super(NO_FILTER_VERTEX_SHADER, MONOCHROME_FRAGMENT_SHADER);
-        mIntensity = intensity;
-        mColor = color;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mIntensityLocation = GLES20.glGetUniformLocation(getProgram(), "intensity");
-        mFilterColorLocation = GLES20.glGetUniformLocation(getProgram(), "filterColor");
-        mIsInitialized = true;
-        
-        setIntensity(1.0f);
-        setColor(new float[]{ 0.6f, 0.45f, 0.3f, 1.f });
-    }
-    
-    public void setIntensity(final float intensity) {
-        mIntensity = intensity;
-        if (mIsInitialized) {
-            setFloat(mIntensityLocation, mIntensity);
-        }
-    }
-    
-    public void setColor(final float[] color) {
-        mColor = color;
-        setColorRed(mColor[0], mColor[1], mColor[2]);
-        
-    }
-    
-    public void setColorRed(final float red, final float green, final float blue) {
-        if (mIsInitialized) {
-        	setFloatVec3(mFilterColorLocation, new float[]{ red, green, blue });
-        }
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
deleted file mode 100644
index fe42b575..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-/**
- * Adjusts the alpha channel of the incoming image
- * opacity: The value to multiply the incoming alpha channel for each pixel by (0.0 - 1.0, with 1.0 as the default)
-*/
-public class GPUImageOpacityFilter extends GPUImageFilter {
-    public static final String OPACITY_FRAGMENT_SHADER = "" +
-    		"  varying highp vec2 textureCoordinate;\n" +
-    		"  \n" +
-    		"  uniform sampler2D inputImageTexture;\n" +
-    		"  uniform lowp float opacity;\n" +
-    		"  \n" +
-    		"  void main()\n" +
-    		"  {\n" +
-    		"      lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-    		"      \n" +
-    		"      gl_FragColor = vec4(textureColor.rgb, textureColor.a * opacity);\n" +
-    		"  }\n";
-
-    private int mOpacityLocation;
-    private float mOpacity;
-    private boolean mIsInitialized = false;
-
-    public GPUImageOpacityFilter() {
-        this(1.0f);
-    }
-
-    public GPUImageOpacityFilter(final float opacity) {
-        super(NO_FILTER_VERTEX_SHADER, OPACITY_FRAGMENT_SHADER);
-        mOpacity = opacity;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mOpacityLocation = GLES20.glGetUniformLocation(getProgram(), "opacity");
-        mIsInitialized = true;
-        setOpacity(mOpacity);
-    }
-
-    public void setOpacity(final float opacity) {
-        mOpacity = opacity;
-        if (mIsInitialized) {
-            setFloat(mOpacityLocation, mOpacity);
-        }
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
deleted file mode 100644
index c0ec15d1..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-/**
- * Applies a grayscale effect to the image.
- */
-public class GPUImagePixelationFilter extends GPUImageFilter {
-    public static final String PIXELATION_FRAGMENT_SHADER = "" +
-            "precision highp float;\n" +
-
-            "varying vec2 textureCoordinate;\n" +
-
-            "uniform float imageWidthFactor;\n" +
-            "uniform float imageHeightFactor;\n" +
-            "uniform sampler2D inputImageTexture;\n" +
-            "uniform float pixel;\n" +
-
-            "void main()\n" +
-            "{\n" +
-            "  vec2 uv  = textureCoordinate.xy;\n" +
-            "  float dx = pixel * imageWidthFactor;\n" +
-            "  float dy = pixel * imageHeightFactor;\n" +
-            "  vec2 coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));\n" +
-            "  vec3 tc = texture2D(inputImageTexture, coord).xyz;\n" +
-            "  gl_FragColor = vec4(tc, 1.0);\n" +
-            "}";
-
-    private int mImageWidthFactorLocation;
-    private int mImageHeightFactorLocation;
-    private float mPixel;
-    private int mPixelLocation;
-    
-    public GPUImagePixelationFilter() {
-        super(NO_FILTER_VERTEX_SHADER, PIXELATION_FRAGMENT_SHADER);
-        mPixel = 1.0f;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mImageWidthFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageWidthFactor");
-        mImageHeightFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageHeightFactor");
-        mPixelLocation = GLES20.glGetUniformLocation(getProgram(), "pixel");
-        setPixel(mPixel);
-    }
-
-    @Override
-    public void onOutputSizeChanged(final int width, final int height) {
-        super.onOutputSizeChanged(width, height);
-        setFloat(mImageWidthFactorLocation, 1.0f / width);
-        setFloat(mImageHeightFactorLocation, 1.0f / height);
-    }
-
-    public void setPixel(final float pixel) {
-      mPixel = pixel;
-      setFloat(mPixelLocation, mPixel);
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
deleted file mode 100644
index f0af18cb..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-/**
- * Adjusts the individual RGB channels of an image
- * red: Normalized values by which each color channel is multiplied. The range is from 0.0 up, with 1.0 as the default.
- * green:
- * blue:
- */
-public class GPUImageRGBFilter extends GPUImageFilter {
-    public static final String RGB_FRAGMENT_SHADER = "" +
-    		"  varying highp vec2 textureCoordinate;\n" +
-    		"  \n" +
-    		"  uniform sampler2D inputImageTexture;\n" +
-    		"  uniform highp float red;\n" +
-    		"  uniform highp float green;\n" +
-    		"  uniform highp float blue;\n" +
-    		"  \n" +
-    		"  void main()\n" +
-    		"  {\n" +
-    		"      highp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-    		"      \n" +
-    		"      gl_FragColor = vec4(textureColor.r * red, textureColor.g * green, textureColor.b * blue, 1.0);\n" +
-    		"  }\n";
-
-    private int mRedLocation;
-    private float mRed;
-    private int mGreenLocation;
-    private float mGreen;
-    private int mBlueLocation;
-    private float mBlue;
-    private boolean mIsInitialized = false;
-
-    public GPUImageRGBFilter() {
-        this(1.0f, 1.0f, 1.0f);
-    }
-
-    public GPUImageRGBFilter(final float red, final float green, final float blue) {
-        super(NO_FILTER_VERTEX_SHADER, RGB_FRAGMENT_SHADER);
-        mRed = red;
-        mGreen = green;
-        mBlue = blue;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mRedLocation = GLES20.glGetUniformLocation(getProgram(), "red");
-        mGreenLocation = GLES20.glGetUniformLocation(getProgram(), "green");
-        mBlueLocation = GLES20.glGetUniformLocation(getProgram(), "blue");
-        mIsInitialized = true;
-        setRed(mRed);
-        setGreen(mGreen);
-        setBlue(mBlue);
-    }
-
-    public void setRed(final float red) {
-        mRed = red;
-        if (mIsInitialized) {
-            setFloat(mRedLocation, mRed);
-        }
-    }
-    
-    public void setGreen(final float green) {
-        mGreen = green;
-        if (mIsInitialized) {
-            setFloat(mGreenLocation, mGreen);
-        }
-    }
-    
-    public void setBlue(final float blue) {
-        mBlue = blue;
-        if (mIsInitialized) {
-            setFloat(mBlueLocation, mBlue);
-        }
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
deleted file mode 100644
index 439e8bd0..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.graphics.PointF;
-import android.opengl.GLES20;
-
-/**
- * Performs a vignetting effect, fading out the image at the edges
- * x:
- * y: The directional intensity of the vignetting, with a default of x = 0.75, y = 0.5
- */
-public class GPUImageVignetteFilter extends GPUImageFilter {
-    public static final String VIGNETTING_FRAGMENT_SHADER = "" +
-            " uniform sampler2D inputImageTexture;\n" +
-            " varying highp vec2 textureCoordinate;\n" +
-            " \n" +
-            " uniform lowp vec2 vignetteCenter;\n" +
-            " uniform lowp vec3 vignetteColor;\n" +
-            " uniform highp float vignetteStart;\n" +
-            " uniform highp float vignetteEnd;\n" +
-            " \n" +
-            " void main()\n" +
-            " {\n" +
-            "     /*\n" +
-            "     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
-            "     lowp float d = distance(textureCoordinate, vec2(0.5,0.5));\n" +
-            "     rgb *= (1.0 - smoothstep(vignetteStart, vignetteEnd, d));\n" +
-            "     gl_FragColor = vec4(vec3(rgb),1.0);\n" +
-            "      */\n" +
-            "     \n" +
-            "     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
-            "     lowp float d = distance(textureCoordinate, vec2(vignetteCenter.x, vignetteCenter.y));\n" +
-            "     lowp float percent = smoothstep(vignetteStart, vignetteEnd, d);\n" +
-            "     gl_FragColor = vec4(mix(rgb.x, vignetteColor.x, percent), mix(rgb.y, vignetteColor.y, percent), mix(rgb.z, vignetteColor.z, percent), 1.0);\n" +
-            " }";
-
-    private int mVignetteCenterLocation;
-    private PointF mVignetteCenter;
-    private int mVignetteColorLocation;
-    private float[] mVignetteColor;
-    private int mVignetteStartLocation;
-    private float mVignetteStart;
-    private int mVignetteEndLocation;
-    private float mVignetteEnd;
-    
-    public GPUImageVignetteFilter() {
-        this(new PointF(), new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
-    }
-    
-    public GPUImageVignetteFilter(final PointF vignetteCenter, final float[] vignetteColor, final float vignetteStart, final float vignetteEnd) {
-        super(NO_FILTER_VERTEX_SHADER, VIGNETTING_FRAGMENT_SHADER);
-        mVignetteCenter = vignetteCenter;
-        mVignetteColor = vignetteColor;
-        mVignetteStart = vignetteStart;
-        mVignetteEnd = vignetteEnd;
-        
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mVignetteCenterLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteCenter");
-        mVignetteColorLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteColor");
-        mVignetteStartLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteStart");
-        mVignetteEndLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteEnd");
-        
-        setVignetteCenter(mVignetteCenter);
-        setVignetteColor(mVignetteColor);
-        setVignetteStart(mVignetteStart);
-        setVignetteEnd(mVignetteEnd);
-    }
-
-
-    public void setVignetteCenter(final PointF vignetteCenter) {
-        mVignetteCenter = vignetteCenter;
-        setPoint(mVignetteCenterLocation, mVignetteCenter);
-    }
-
-    public void setVignetteColor(final float[] vignetteColor) {
-        mVignetteColor = vignetteColor;
-        setFloatVec3(mVignetteColorLocation, mVignetteColor);
-    }
-    
-    public void setVignetteStart(final float vignetteStart) {
-        mVignetteStart = vignetteStart;
-        setFloat(mVignetteStartLocation, mVignetteStart);
-    }
-    
-    public void setVignetteEnd(final float vignetteEnd) {
-        mVignetteEnd = vignetteEnd;
-        setFloat(mVignetteEndLocation, mVignetteEnd);
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
deleted file mode 100644
index 1816d829..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
-
-/**
- * Adjusts the white balance of incoming image. <br />
- * <br />
- * temperature: 
- * tint:
- */
-public class GPUImageWhiteBalanceFilter extends GPUImageFilter {
-    public static final String WHITE_BALANCE_FRAGMENT_SHADER = "" +
-            "uniform sampler2D inputImageTexture;\n" +
-            "varying highp vec2 textureCoordinate;\n" +
-            " \n" +
-            "uniform lowp float temperature;\n" +
-            "uniform lowp float tint;\n" +
-            "\n" +
-            "const lowp vec3 warmFilter = vec3(0.93, 0.54, 0.0);\n" +
-            "\n" +
-            "const mediump mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.596, -0.274, -0.322, 0.212, -0.523, 0.311);\n" +
-            "const mediump mat3 YIQtoRGB = mat3(1.0, 0.956, 0.621, 1.0, -0.272, -0.647, 1.0, -1.105, 1.702);\n" +
-            "\n" +
-            "void main()\n" +
-            "{\n" +
-            "	lowp vec4 source = texture2D(inputImageTexture, textureCoordinate);\n" +
-            "	\n" +
-            "	mediump vec3 yiq = RGBtoYIQ * source.rgb; //adjusting tint\n" +
-            "	yiq.b = clamp(yiq.b + tint*0.5226*0.1, -0.5226, 0.5226);\n" +
-            "	lowp vec3 rgb = YIQtoRGB * yiq;\n" +
-            "\n" +
-            "	lowp vec3 processed = vec3(\n" +
-            "		(rgb.r < 0.5 ? (2.0 * rgb.r * warmFilter.r) : (1.0 - 2.0 * (1.0 - rgb.r) * (1.0 - warmFilter.r))), //adjusting temperature\n" +
-            "		(rgb.g < 0.5 ? (2.0 * rgb.g * warmFilter.g) : (1.0 - 2.0 * (1.0 - rgb.g) * (1.0 - warmFilter.g))), \n" +
-            "		(rgb.b < 0.5 ? (2.0 * rgb.b * warmFilter.b) : (1.0 - 2.0 * (1.0 - rgb.b) * (1.0 - warmFilter.b))));\n" +
-            "\n" +
-            "	gl_FragColor = vec4(mix(rgb, processed, temperature), source.a);\n" +
-            "}";
-
-    private int mTemperatureLocation;
-    private float mTemperature;
-    private int mTintLocation;
-    private float mTint;
-
-    public GPUImageWhiteBalanceFilter() {
-        this(5000.0f, 0.0f);
-    }
-    
-    public GPUImageWhiteBalanceFilter(final float temperature, final float tint) {
-        super(NO_FILTER_VERTEX_SHADER, WHITE_BALANCE_FRAGMENT_SHADER);
-        mTemperature = temperature;
-        mTint = tint;
-    }
-
-    @Override
-    public void onInit() {
-        super.onInit();
-        mTemperatureLocation = GLES20.glGetUniformLocation(getProgram(), "temperature");
-        mTintLocation = GLES20.glGetUniformLocation(getProgram(), "tint");
-
-        setTemperature(mTemperature);
-        setTint(mTint);
-    }
-
-
-    public void setTemperature(final float temperature) {
-        mTemperature = temperature;
-        setFloat(mTemperatureLocation, mTemperature < 5000 ? (float)(0.0004 * (mTemperature-5000.0)) : (float)(0.00006 * (mTemperature-5000.0)));
-    }
-    
-    public void setTint(final float tint) {
-        mTint = tint;
-        setFloat(mTintLocation, (float)(mTint/100.0));
-    }
-}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index feae709e..ba0d4568 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -25,38 +25,23 @@
 import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup;
 import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageRGBFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageSobelEdgeDetection;
-import jp.co.cyberagent.android.gpuimage.GPUImageColorInvertFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageHueFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageVignetteFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.graphics.PointF;
 
 public class GPUImageFilterTools {
     public static void showDialog(final Context context,
             final OnGpuImageFilterChosenListener listener) {
         final FilterList filters = new FilterList();
         filters.addFilter("Contrast", FilterType.CONTRAST);
-        filters.addFilter("Invert", FilterType.INVERT);
-        filters.addFilter("Pixelation", FilterType.PIXELATION);
-        filters.addFilter("Hue", FilterType.HUE);
         filters.addFilter("Gamma", FilterType.GAMMA);
         filters.addFilter("Brightness", FilterType.BRIGHTNESS);
         filters.addFilter("Sepia", FilterType.SEPIA);
@@ -67,15 +52,7 @@ public static void showDialog(final Context context,
         filters.addFilter("Emboss", FilterType.EMBOSS);
         filters.addFilter("Posterize", FilterType.POSTERIZE);
         filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
-        filters.addFilter("Saturation", FilterType.SATURATION);
-        filters.addFilter("Exposure", FilterType.EXPOSURE);
-        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
-        filters.addFilter("Monochrome", FilterType.MONOCHROME);
-        filters.addFilter("Opacity", FilterType.OPACITY);
-        filters.addFilter("RGB", FilterType.RGB);
-        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
-        filters.addFilter("Vignette", FilterType.VIGNETTE);
-        
+
         AlertDialog.Builder builder = new AlertDialog.Builder(context);
         builder.setTitle("Choose a filter");
         builder.setItems(filters.names.toArray(new String[filters.names.size()]),
@@ -95,12 +72,6 @@ private static GPUImageFilter createFilterForType(final Context context, final F
                 return new GPUImageContrastFilter(2.0f);
             case GAMMA:
                 return new GPUImageGammaFilter(2.0f);
-            case INVERT:
-                return new GPUImageColorInvertFilter();
-            case PIXELATION:
-                return new GPUImagePixelationFilter();
-            case HUE:
-                return new GPUImageHueFilter(90.0f);
             case BRIGHTNESS:
                 return new GPUImageBrightnessFilter(1.5f);
             case GRAYSCALE:
@@ -131,25 +102,6 @@ private static GPUImageFilter createFilterForType(final Context context, final F
                 filters.add(new GPUImageDirectionalSobelEdgeDetectionFilter());
                 filters.add(new GPUImageGrayscaleFilter());
                 return new GPUImageFilterGroup(filters);
-            case SATURATION:
-                return new GPUImageSaturationFilter(1.0f);
-            case EXPOSURE:
-                return new GPUImageExposureFilter(0.0f);
-            case HIGHLIGHT_SHADOW:
-            	return new GPUImageHighlightShadowFilter(0.0f, 1.0f);
-            case MONOCHROME:
-            	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
-            case OPACITY:
-                return new GPUImageOpacityFilter(1.0f);  
-            case RGB:
-                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);  
-            case WHITE_BALANCE:
-                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);    
-            case VIGNETTE:
-            	PointF centerPoint = new PointF();
-            	centerPoint.x = 0.5f;
-            	centerPoint.y = 0.5f;
-                return new GPUImageVignetteFilter(centerPoint, new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);    
             default:
                 throw new IllegalStateException("No filter of that type!");
         }
@@ -161,8 +113,7 @@ private static GPUImageFilter createFilterForType(final Context context, final F
     }
 
     private enum FilterType {
-        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
-        SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE
+        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS,
     }
 
     private static class FilterList {
@@ -195,28 +146,8 @@ public FilterAdjuster(final GPUImageFilter filter) {
                 adjuster = new GPU3x3TextureAdjuster().filter(filter);
             } else if (filter instanceof GPUImageEmbossFilter) {
                 adjuster = new EmbossAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageHueFilter) {
-                adjuster = new HueAdjuster().filter(filter);
             } else if (filter instanceof GPUImagePosterizeFilter) {
                 adjuster = new PosterizeAdjuster().filter(filter);
-            } else if (filter instanceof GPUImagePixelationFilter) {
-                adjuster = new PixelationAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSaturationFilter) {
-                adjuster = new SaturationAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageExposureFilter) {
-                adjuster = new ExposureAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageHighlightShadowFilter) {
-                adjuster = new HighlightShadowAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageMonochromeFilter) {
-                adjuster = new MonochromeAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageOpacityFilter) {
-                adjuster = new OpacityAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageRGBFilter) {
-                adjuster = new RGBAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageWhiteBalanceFilter) {
-                adjuster = new WhiteBalanceAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageVignetteFilter) {
-                adjuster = new VignetteAdjuster().filter(filter);
             } else {
                 adjuster = null;
             }
@@ -259,20 +190,6 @@ public void adjust(final int percentage) {
             }
         }
 
-        private class PixelationAdjuster extends Adjuster<GPUImagePixelationFilter> {
-          @Override
-          public void adjust(final int percentage) {
-              getFilter().setPixel(range(percentage, 1.0f, 100.0f));
-          }
-        }
-
-        private class HueAdjuster extends Adjuster<GPUImageHueFilter> {
-          @Override
-          public void adjust(final int percentage) {
-            getFilter().setHue(range(percentage, 0.0f, 360.0f));
-          }
-        }
-
         private class ContrastAdjuster extends Adjuster<GPUImageContrastFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -329,66 +246,5 @@ public void adjust(final int percentage) {
                 getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
             }
         }
-
-        private class SaturationAdjuster extends Adjuster<GPUImageSaturationFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setSaturation(range(percentage, 0.0f, 2.0f));
-            }
-        }
-        
-        private class ExposureAdjuster extends Adjuster<GPUImageExposureFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setExposure(range(percentage, -10.0f, 10.0f));
-            }
-        }   
-        
-        private class HighlightShadowAdjuster extends Adjuster<GPUImageHighlightShadowFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setShadows(range(percentage, 0.0f, 1.0f));
-                getFilter().setHighlights(range(percentage, 0.0f, 1.0f));
-            }
-        }
-        
-        private class MonochromeAdjuster extends Adjuster<GPUImageMonochromeFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setIntensity(range(percentage, 0.0f, 1.0f));
-                //getFilter().setColor(new float[]{0.6f, 0.45f, 0.3f, 1.0f});
-            }
-        }
-        
-        private class OpacityAdjuster extends Adjuster<GPUImageOpacityFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setOpacity(range(percentage, 0.0f, 1.0f));
-            }
-        }   
-        
-        private class RGBAdjuster extends Adjuster<GPUImageRGBFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRed(range(percentage, 0.0f, 1.0f));
-                //getFilter().setGreen(range(percentage, 0.0f, 1.0f));
-                //getFilter().setBlue(range(percentage, 0.0f, 1.0f));
-            }
-        }   
-        
-        private class WhiteBalanceAdjuster extends Adjuster<GPUImageWhiteBalanceFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setTemperature(range(percentage, 2000.0f, 8000.0f));
-                //getFilter().setTint(range(percentage, -100.0f, 100.0f));
-            }
-        }   
-        
-        private class VignetteAdjuster extends Adjuster<GPUImageVignetteFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setVignetteStart(range(percentage, 0.0f, 1.0f));
-            }
-        }   
     }
 }
