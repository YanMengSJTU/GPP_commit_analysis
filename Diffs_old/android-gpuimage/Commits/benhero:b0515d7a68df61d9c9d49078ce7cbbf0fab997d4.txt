diff --git a/sample/res/layout/activity_video.xml b/sample/res/layout/activity_video.xml
index 6344cf75..18284554 100644
--- a/sample/res/layout/activity_video.xml
+++ b/sample/res/layout/activity_video.xml
@@ -1,18 +1,27 @@
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical">
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#88000000"
+    android:orientation="vertical">
 
     <FrameLayout
         android:layout_width="match_parent"
         android:layout_height="0dp"
         android:layout_weight="1">
 
-        <android.opengl.GLSurfaceView
-            android:id="@+id/video_surface"
+        <jp.co.cyberagent.android.gpuimage.sample.view.AspectFrameLayout
+            android:id="@+id/video_surface_wrapper"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:layout_gravity="center"/>
+            android:layout_gravity="center">
+
+            <android.opengl.GLSurfaceView
+                android:id="@+id/video_surface"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_gravity="center"/>
+        </jp.co.cyberagent.android.gpuimage.sample.view.AspectFrameLayout>
 
         <SeekBar
             android:id="@+id/seekBar"
@@ -28,10 +37,16 @@
         android:layout_gravity="center_horizontal">
 
         <Button
-            android:id="@+id/button_choose_filter"
+            android:id="@+id/video_previous_filter"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Previous"/>
+
+        <Button
+            android:id="@+id/video_next_filter"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="Choose filter"/>
+            android:text="Next"/>
 
         <Button
             android:id="@+id/button_save"
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index f49494a0..f0858f23 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -129,31 +129,6 @@
         filters.addFilter("Vignette", FilterType.VIGNETTE);
         filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
 
-        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
-        filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
-        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
-        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
-        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
-        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
-        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
-        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
-        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
-        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
-        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
-        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
-        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
-        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
-        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
-        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
-        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
-        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
-        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
-        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
-        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
-        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
-        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
-        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
-
         filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
         filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
         filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
@@ -185,13 +160,57 @@
         filters.addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
 
         filters.addFilter("Transform (2-D)", FilterType.TRANSFORM2D);
+
+        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
+        filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
+        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
+        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
+        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
+        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
+        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
+        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
+        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
+        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
+        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
+        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
+        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
+        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
+        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
+        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
+        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
+        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
+        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
+        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
+        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
+        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
+        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
+        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
     }
 
     static int index = 0;
 
     public static void showDialog(final Context context,
                                   final OnGpuImageFilterChosenListener listener) {
-//        Toast.makeText(context, filters.names.get(index), Toast.LENGTH_SHORT).show();
+        listener.onGpuImageFilterChosenListener(
+                createFilterForType(context, filters.filters.get(index)));
+        index++;
+        if (index >= filters.filters.size()) {
+            index = 0;
+        }
+    }
+
+    public static void showPreviousFilter(final Context context,
+                                          final OnGpuImageFilterChosenListener listener) {
+        listener.onGpuImageFilterChosenListener(
+                createFilterForType(context, filters.filters.get(index)));
+        index--;
+        if (index < 0) {
+            index = filters.filters.size() - 1;
+        }
+    }
+
+    public static void showNextFilter(final Context context,
+                                      final OnGpuImageFilterChosenListener listener) {
         listener.onGpuImageFilterChosenListener(
                 createFilterForType(context, filters.filters.get(index)));
         index++;
@@ -482,8 +501,9 @@ public FilterAdjuster(final GPUImageFilter filter) {
                 adjuster = new BilateralAdjuster().filter(filter);
             } else if (filter instanceof GPUImageTransformFilter) {
                 adjuster = new RotateAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageFilterGroup) {
+                adjuster = new GroupAdjuster().filter(filter);
             } else {
-
                 adjuster = null;
             }
         }
@@ -754,5 +774,19 @@ public void adjust(final int percentage) {
             }
         }
 
+        private class GroupAdjuster extends Adjuster<GPUImageFilterGroup> {
+
+            @Override
+            public void adjust(int percentage) {
+                List<GPUImageFilter> filters = getFilter().getMergedFilters();
+                for (GPUImageFilter imageFilter : filters) {
+                    FilterAdjuster adjuster = new FilterAdjuster(imageFilter);
+                    if (adjuster.canAdjust()) {
+                        adjuster.adjust(percentage);
+                    }
+                }
+            }
+        }
+
     }
 }
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java
index ea3aabed..b49b6a27 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java
@@ -25,8 +25,11 @@
 import jp.co.cyberagent.android.gpuimage.GPUImageRenderer;
 import jp.co.cyberagent.android.gpuimage.GPUImageView;
 import jp.co.cyberagent.android.gpuimage.IRenderCallback;
+import jp.co.cyberagent.android.gpuimage.Rotation;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.R;
+import jp.co.cyberagent.android.gpuimage.sample.data.VideoInfo;
+import jp.co.cyberagent.android.gpuimage.sample.view.AspectFrameLayout;
 
 /**
  * 视频处理页
@@ -45,15 +48,19 @@
     private String mPath;
     private GPUImageRenderer mRenderer;
     private GPUImage mGPUImage;
+    private AspectFrameLayout mAspectFrameLayout;
+    private VideoInfo mVideoInfo;
 
     @Override
     public void onCreate(final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_video);
         ((SeekBar) findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);
-        findViewById(R.id.button_choose_filter).setOnClickListener(this);
+        findViewById(R.id.video_previous_filter).setOnClickListener(this);
+        findViewById(R.id.video_next_filter).setOnClickListener(this);
         findViewById(R.id.button_save).setOnClickListener(this);
         mSurfaceView = (GLSurfaceView) findViewById(R.id.video_surface);
+        mAspectFrameLayout = (AspectFrameLayout) findViewById(R.id.video_surface_wrapper);
 
         Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
         photoPickerIntent.setType("video/*");
@@ -61,6 +68,12 @@ public void onCreate(final Bundle savedInstanceState) {
     }
 
     private void initPlayer() {
+        double aspectRatio = mVideoInfo.getWidth() / (double) mVideoInfo.getHeight();
+        if (mVideoInfo.isDisplayRotate()) {
+            aspectRatio = mVideoInfo.getHeight() / (double) mVideoInfo.getWidth();
+        }
+        mAspectFrameLayout.setAspectRatio(aspectRatio);
+
         mMediaPlayer = new MediaPlayer();
         mGPUImage = new GPUImage(this, new IRenderCallback() {
             @Override
@@ -72,7 +85,7 @@ public void onSurfaceTextureCreated(SurfaceTexture texture) {
                     mMediaPlayer.setSurface(surface);
                     mMediaPlayer.setDataSource(mPath);
                     mMediaPlayer.prepareAsync();
-                    mMediaPlayer.setLooping(false);
+                    mMediaPlayer.setLooping(true);
                     mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                         @Override
                         public void onPrepared(MediaPlayer mp) {
@@ -91,6 +104,7 @@ public void onFrameAvailable(long frameTimeNanos) {
             }
         });
         mGPUImage.setGLSurfaceView(mSurfaceView);
+        mGPUImage.setRotation(Rotation.fromInt(mVideoInfo.getDegrees()));
     }
 
     private void play() {
@@ -117,15 +131,22 @@ protected void onActivityResult(final int requestCode, final int resultCode, fin
     @Override
     public void onClick(final View v) {
         switch (v.getId()) {
-            case R.id.button_choose_filter:
-                GPUImageFilterTools.showDialog(this, new GPUImageFilterTools.OnGpuImageFilterChosenListener() {
-
+            case R.id.video_previous_filter:
+                GPUImageFilterTools.showPreviousFilter(this, new GPUImageFilterTools.OnGpuImageFilterChosenListener() {
+                    @Override
+                    public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
+                        switchFilterTo(filter);
+                        mGPUImage.requestRender();
+                    }
+                });
+                break;
+            case R.id.video_next_filter:
+                GPUImageFilterTools.showNextFilter(this, new GPUImageFilterTools.OnGpuImageFilterChosenListener() {
                     @Override
                     public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
                         switchFilterTo(filter);
                         mGPUImage.requestRender();
                     }
-
                 });
                 break;
             case R.id.button_save:
@@ -161,9 +182,6 @@ private void switchFilterTo(final GPUImageFilter filter) {
             gpuImageFilterGroup.addFilter(filter);
             mGPUImage.setFilter(mFilter);
             mFilterAdjuster = new GPUImageFilterTools.FilterAdjuster(mFilter);
-
-            findViewById(R.id.seekBar).setVisibility(
-                    mFilterAdjuster.canAdjust() ? View.VISIBLE : View.GONE);
         }
     }
 
@@ -191,6 +209,7 @@ public void onStopTrackingTouch(final SeekBar seekBar) {
 
     private void handleImage(final Uri uri) {
         mPath = getRealPathFromURI(uri);
+        mVideoInfo = new VideoInfo(mPath);
         initPlayer();
     }
 
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/data/VideoInfo.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/data/VideoInfo.java
new file mode 100644
index 00000000..0e2e0233
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/data/VideoInfo.java
@@ -0,0 +1,135 @@
+package jp.co.cyberagent.android.gpuimage.sample.data;
+
+import android.media.MediaMetadataRetriever;
+import android.text.TextUtils;
+import android.util.Log;
+
+import jp.co.cyberagent.android.gpuimage.sample.utils.NumberUtils;
+
+import static android.media.MediaMetadataRetriever.METADATA_KEY_BITRATE;
+import static android.media.MediaMetadataRetriever.METADATA_KEY_DURATION;
+import static android.media.MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT;
+import static android.media.MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION;
+import static android.media.MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH;
+
+/**
+ * 视频原始信息类
+ *
+ * @author Benhero
+ */
+public class VideoInfo {
+    /**
+     * 路径
+     */
+    private String mPath;
+    /**
+     * 视频时长
+     */
+    private int mDuration;
+    /**
+     * 原始视频附带的旋转角度
+     */
+    private int mDegrees;
+    /**
+     * 比特率
+     */
+    private int mBitRate;
+    /**
+     * 视频宽 - 数据存储：可能由于旋转角度导致和展示上看到的不一致
+     */
+    private int mWidth;
+    /**
+     * 视频高 - 数据存储：可能由于旋转角度导致和展示上看到的不一致
+     */
+    private int mHeight;
+    /**
+     * 视频宽 - 展示播放时
+     */
+    private int mDisplayWidth;
+    /**
+     * 视频高 - 展示播放时
+     */
+    private int mDisplayHeight;
+
+    public VideoInfo() {
+    }
+
+    public VideoInfo(String path) {
+        mPath = path;
+        initMetadata();
+    }
+
+    /**
+     * 初始化视频信息
+     */
+    private void initMetadata() {
+        if (TextUtils.isEmpty(mPath)) {
+            return;
+        }
+
+        try {
+            MediaMetadataRetriever retriever = new MediaMetadataRetriever();
+            retriever.setDataSource(mPath);
+            mDegrees = NumberUtils.getInteger(retriever.extractMetadata(METADATA_KEY_VIDEO_ROTATION));
+            mDuration = NumberUtils.getInteger(retriever.extractMetadata(METADATA_KEY_DURATION));
+            mBitRate = NumberUtils.getInteger(retriever.extractMetadata(METADATA_KEY_BITRATE));
+            mWidth = NumberUtils.getInteger(retriever.extractMetadata(METADATA_KEY_VIDEO_WIDTH));
+            mHeight = NumberUtils.getInteger(retriever.extractMetadata(METADATA_KEY_VIDEO_HEIGHT));
+            mDisplayWidth = isDisplayRotate() ? mHeight : mWidth;
+            mDisplayHeight = isDisplayRotate() ? mWidth : mHeight;
+            retriever.release();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        Log.d("JKL", toString());
+    }
+
+
+    @Override
+    public String toString() {
+        return "Path:" + mPath
+                + "\n mBitRate:" + mBitRate
+                + "\n Width:" + mWidth + ", Height:" + mHeight
+                + "\n Degrees:" + mDegrees + ", Duration:" + mDuration;
+    }
+
+    public String getPath() {
+        return mPath;
+    }
+
+    public int getDuration() {
+        return mDuration;
+    }
+
+    public int getDegrees() {
+        return mDegrees;
+    }
+
+    public int getBitRate() {
+        return mBitRate;
+    }
+
+    public int getWidth() {
+        return mWidth;
+    }
+
+    public int getHeight() {
+        return mHeight;
+    }
+
+    public int getDisplayWidth() {
+        return mDisplayWidth;
+    }
+
+    public int getDisplayHeight() {
+        return mDisplayHeight;
+    }
+
+    /**
+     * 视觉上和数据存储宽高是否需要转置
+     */
+    public boolean isDisplayRotate() {
+        return mDegrees == 90 || mDegrees == 270;
+    }
+
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/utils/NumberUtils.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/utils/NumberUtils.java
new file mode 100644
index 00000000..b4253393
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/utils/NumberUtils.java
@@ -0,0 +1,25 @@
+package jp.co.cyberagent.android.gpuimage.sample.utils;
+
+import android.text.TextUtils;
+
+/**
+ * 数字转换工具类
+ *
+ * @author Benhero
+ */
+public class NumberUtils {
+
+    public static long getLong(String value) {
+        if (TextUtils.isEmpty(value)) {
+            return 0;
+        }
+        return Long.valueOf(value);
+    }
+
+    public static int getInteger(String value) {
+        if (TextUtils.isEmpty(value)) {
+            return 0;
+        }
+        return Integer.valueOf(value);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/AspectFrameLayout.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/view/AspectFrameLayout.java
similarity index 84%
rename from sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/AspectFrameLayout.java
rename to sample/src/jp/co/cyberagent/android/gpuimage/sample/view/AspectFrameLayout.java
index 61073ce7..ec886775 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/AspectFrameLayout.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/view/AspectFrameLayout.java
@@ -14,12 +14,15 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage.sample.activity;
+package jp.co.cyberagent.android.gpuimage.sample.view;
 
 import android.content.Context;
 import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
 import android.widget.FrameLayout;
 
+
 /**
  * Layout that adjusts to maintain a specific aspect ratio.
  */
@@ -47,6 +50,7 @@ public void setAspectRatio(double aspectRatio) {
         if (aspectRatio < 0) {
             throw new IllegalArgumentException();
         }
+        Log.w(TAG, "Setting aspect ratio to " + aspectRatio + " (was " + mTargetAspect + ")");
         if (mTargetAspect != aspectRatio) {
             mTargetAspect = aspectRatio;
             requestLayout();
@@ -63,6 +67,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             super.onMeasure(widthMeasureSpec, heightMeasureSpec);
             return;
         }
+        Log.w(TAG, "onMeasure target=" + mTargetAspect +
+                " width=[" + MeasureSpec.toString(widthMeasureSpec) +
+                "] height=[" + View.MeasureSpec.toString(heightMeasureSpec) + "]");
 
         // Target aspect ratio will be < 0 if it hasn't been set yet.  In that case,
         // we just use whatever we've been handed.
@@ -83,6 +90,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 // We're very close already.  We don't want to risk switching from e.g. non-scaled
                 // 1280x720 to scaled 1280x719 because of some floating-point round-off error,
                 // so if we're really close just leave it alone.
+                Log.w(TAG, "aspect ratio is good (target=" + mTargetAspect +
+                        ", view=" + initialWidth + "x" + initialHeight + ")");
             } else {
                 if (aspectDiff > 0) {
                     // limited by narrow width; restrict height
@@ -91,6 +100,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     // limited by short height; restrict width
                     initialWidth = (int) (initialHeight * mTargetAspect);
                 }
+                Log.w(TAG, "new size=" + initialWidth + "x" + initialHeight + " + padding " +
+                        horizPadding + "x" + vertPadding);
                 initialWidth += horizPadding;
                 initialHeight += vertPadding;
                 widthMeasureSpec = MeasureSpec.makeMeasureSpec(initialWidth, MeasureSpec.EXACTLY);
