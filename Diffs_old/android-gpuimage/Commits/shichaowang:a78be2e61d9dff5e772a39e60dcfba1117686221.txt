diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 06b65d4b..3f9834d4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -18,7 +18,10 @@
 
 import android.annotation.TargetApi;
 import android.app.ActivityManager;
+import android.app.ProgressDialog;
 import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnCancelListener;
 import android.content.pm.ConfigurationInfo;
 import android.database.Cursor;
 import android.graphics.Bitmap;
@@ -35,6 +38,8 @@
 import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
+import android.util.Log;
+import android.util.MonthDisplayHelper;
 import android.view.Display;
 import android.view.WindowManager;
 
@@ -55,6 +60,7 @@
     private GPUImageFilter mFilter;
     private Bitmap mCurrentBitmap;
     private ScaleType mScaleType = ScaleType.CENTER_CROP;
+    public static ProgressDialog mProgressDialog;
 
     /**    
      * Instantiates a new GPUImage object.   
@@ -171,6 +177,7 @@ public void setFilter(final GPUImageFilter filter) {
      * @param bitmap the new image
      */
     public void setImage(final Bitmap bitmap) {
+//        showProgressDialog();
         setImage(bitmap, false);
         mCurrentBitmap = bitmap;
     }
@@ -208,8 +215,8 @@ public void deleteImage() {
      * 
      * @param uri the uri of the new image
      */
-    public void setImage(final Uri uri) {
-        new LoadImageUriTask(this, uri).execute();
+    public void setImage(final Uri uri, final OnSetImageFinishListener listener) {
+        new LoadImageUriTask(this, uri, listener).execute();
     }
 
     /**
@@ -403,36 +410,32 @@ public SaveTask(final Bitmap bitmap, final String folderName, final String fileN
         protected Void doInBackground(final Void... params) {
             Bitmap result = getBitmapWithFilterApplied(mBitmap);
             saveImage(mFolderName, mFileName, result);
+            
             return null;
         }
 
         private void saveImage(final String folderName, final String fileName, final Bitmap image) {
             File path = Environment
-                    .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
+                    .getExternalStorageDirectory();
             File file = new File(path, folderName + "/" + fileName);
             try {
                 file.getParentFile().mkdirs();
-                image.compress(CompressFormat.JPEG, 80, new FileOutputStream(file));
-                MediaScannerConnection.scanFile(mContext,
-                        new String[] {
-                            file.toString()
-                        }, null,
-                        new MediaScannerConnection.OnScanCompletedListener() {
-                            @Override
-                            public void onScanCompleted(final String path, final Uri uri) {
-                                if (mListener != null) {
-                                    mHandler.post(new Runnable() {
-
-                                        @Override
-                                        public void run() {
-                                            mListener.onPictureSaved(uri);
-                                        }
-                                    });
-                                }
-                            }
-                        });
+                image.compress(CompressFormat.JPEG, 100, new FileOutputStream(file));
+                final Uri uri = Uri.fromFile(file);
+                if (mListener != null) {
+                    mHandler.post(new Runnable() {
+
+                        @Override
+                        public void run() {
+                            mListener.onPictureSaved(uri);
+                        }
+                    });
+                }
             } catch (FileNotFoundException e) {
                 e.printStackTrace();
+            } catch (IOException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
             }
         }
     }
@@ -440,14 +443,19 @@ public void run() {
     public interface OnPictureSavedListener {
         void onPictureSaved(Uri uri);
     }
-
+    
+    // set load image finish listener
+    public interface OnSetImageFinishListener {
+        void onSetImageFinish(boolean finish);
+    }
     private class LoadImageUriTask extends LoadImageTask {
 
         private final Uri mUri;
 
-        public LoadImageUriTask(GPUImage gpuImage, Uri uri) {
+        public LoadImageUriTask(GPUImage gpuImage, Uri uri, final OnSetImageFinishListener listener) {
             super(gpuImage);
             mUri = uri;
+            mOnSetImageFinishListener = listener;
         }
 
         @Override
@@ -518,10 +526,13 @@ protected int getImageOrientation() throws IOException {
         private final GPUImage mGPUImage;
         private int mOutputWidth;
         private int mOutputHeight;
+        public OnSetImageFinishListener mOnSetImageFinishListener;
+        private final Handler mSetImageHandler;
 
         @SuppressWarnings("deprecation")
         public LoadImageTask(final GPUImage gpuImage) {
             mGPUImage = gpuImage;
+            mSetImageHandler = new Handler();
         }
 
         @Override
@@ -544,6 +555,15 @@ protected Bitmap doInBackground(Void... params) {
         protected void onPostExecute(Bitmap bitmap) {
             super.onPostExecute(bitmap);
             mGPUImage.setImage(bitmap);
+            if (mOnSetImageFinishListener != null) {
+                mSetImageHandler.post(new Runnable() {
+
+                    @Override
+                    public void run() {
+                        mOnSetImageFinishListener.onSetImageFinish(true);
+                    }
+                });
+            }
         }
 
         protected abstract Bitmap decode(BitmapFactory.Options options);
@@ -576,14 +596,15 @@ private Bitmap loadResizedImage() {
         }
 
         private Bitmap scaleBitmap(Bitmap bitmap) {
+        	if (bitmap.isRecycled()) { //added by niechao
+				return null;
+			}
             // resize to desired dimensions
             int width = bitmap.getWidth();
             int height = bitmap.getHeight();
             int[] newSize = getScaleSize(width, height);
             Bitmap workBitmap = Bitmap.createScaledBitmap(bitmap, newSize[0], newSize[1], true);
-            bitmap.recycle();
             bitmap = workBitmap;
-            System.gc();
 
             if (mScaleType == ScaleType.CENTER_CROP) {
                 // Crop it
@@ -594,7 +615,7 @@ private Bitmap scaleBitmap(Bitmap bitmap) {
                 bitmap.recycle();
                 bitmap = workBitmap;
             }
-
+            System.gc();
             return bitmap;
         }
 
@@ -660,4 +681,32 @@ private Bitmap rotateImage(final Bitmap bitmap) {
     }
 
     public enum ScaleType { CENTER_INSIDE, CENTER_CROP }
+    
+    /**
+     * do image rotate
+     */
+    private Bitmap bitmapRotate(Bitmap bitmap, int degrees){
+        Matrix matrix = new Matrix();
+        matrix.postRotate(degrees);
+        Bitmap rotateBitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
+//      bitmap.recycle();
+        return rotateBitmap;
+    }
+    private int getImageOrientation(final String file) throws IOException {
+        ExifInterface exif = new ExifInterface(file);
+        int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);
+        switch (orientation) {
+            case ExifInterface.ORIENTATION_NORMAL:
+                return 0;
+            case ExifInterface.ORIENTATION_ROTATE_90:
+                return 90;
+            case ExifInterface.ORIENTATION_ROTATE_180:
+                return 180;
+            case ExifInterface.ORIENTATION_ROTATE_270:
+                return 270;
+            default:
+                return 0;
+        }
+    }
+    
 }
