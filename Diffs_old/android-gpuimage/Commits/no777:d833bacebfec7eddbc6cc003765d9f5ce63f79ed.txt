diff --git a/import-summary.txt b/import-summary.txt
new file mode 100644
index 00000000..3ab5c364
--- /dev/null
+++ b/import-summary.txt
@@ -0,0 +1,36 @@
+ECLIPSE ANDROID PROJECT IMPORT SUMMARY
+======================================
+
+Manifest Merging:
+-----------------
+Your project uses libraries that provide manifests, and your Eclipse
+project did not explicitly turn on manifest merging. In Android Gradle
+projects, manifests are always merged (meaning that contents from your
+libraries' manifests will be merged into the app manifest. If you had
+manually copied contents from library manifests into your app manifest
+you may need to remove these for the app to build correctly.
+
+Moved Files:
+------------
+Android Gradle projects use a different directory structure than ADT
+Eclipse projects. Here's how the projects were restructured:
+
+* AndroidManifest.xml => rs_sample/src/main/AndroidManifest.xml
+* assets/ => rs_sample/src/main/assets/
+* res/ => rs_sample/src/main/res/
+* src/ => rs_sample/src/main/java/
+
+Next Steps:
+-----------
+You can now build the project. The Gradle project needs network
+connectivity to download dependencies.
+
+Bugs:
+-----
+If for some reason your project does not build, and you determine that
+it is due to a bug or limitation of the Eclipse to Gradle importer,
+please file a bug at http://b.android.com with category
+Component-Tools.
+
+(This import summary is for your information only, and can be deleted
+after import once you are satisfied with the results.)
diff --git a/library/build.gradle b/library/build.gradle
index 4e0ded68..cbc20b7d 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -20,6 +20,10 @@ android {
             abiFilters "all"
             ldLibs "log"
         }
+        renderscriptTargetApi 18
+//        renderscriptSupportModeEnabled true
+
+
     }
 
     sourceSets {
diff --git a/library/project.properties b/library/project.properties
index 93c8c3c0..e7190d06 100644
--- a/library/project.properties
+++ b/library/project.properties
@@ -13,3 +13,4 @@
 # Project target.
 target=android-21
 android.library=true
+
diff --git a/library/src/com/caguilar/android/filters/scripts/ColorMatrixFilter.java b/library/src/com/caguilar/android/filters/scripts/ColorMatrixFilter.java
new file mode 100644
index 00000000..bad823c5
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/ColorMatrixFilter.java
@@ -0,0 +1,56 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.renderscript.Matrix4f;
+import android.renderscript.RenderScript;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: cesaraguilar
+ * Date: 11/18/12
+ * Time: 11:17 AM
+ */
+public class ColorMatrixFilter extends ScriptC_colormatrixfilter {
+    public ColorMatrixFilter(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+        set_intensityValue(1.0f);
+        Matrix4f colorMatrix = new Matrix4f();
+        colorMatrix.set(0,0,1.0f);
+        colorMatrix.set(1,0,0.0f);
+        colorMatrix.set(2,0,0.0f);
+        colorMatrix.set(3,0,0.0f);
+
+        colorMatrix.set(0,1,0.0f);
+        colorMatrix.set(1,1,1.0f);
+        colorMatrix.set(2,1,0.0f);
+        colorMatrix.set(3,1,0.0f);
+
+        colorMatrix.set(0,2,0.0f);
+        colorMatrix.set(1,2,0.0f);
+        colorMatrix.set(2,2,1.0f);
+        colorMatrix.set(3,2,0.0f);
+
+        colorMatrix.set(0,3,0.0f);
+        colorMatrix.set(1,3,0.0f);
+        colorMatrix.set(2,3,0.0f);
+        colorMatrix.set(3,3,1.0f);
+
+        set_colorMatrix(colorMatrix);
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/GaussianBlurFilter.java b/library/src/com/caguilar/android/filters/scripts/GaussianBlurFilter.java
new file mode 100644
index 00000000..4c76b78c
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/GaussianBlurFilter.java
@@ -0,0 +1,92 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.renderscript.Allocation;
+import android.renderscript.Element;
+import android.renderscript.Float2;
+import android.renderscript.RenderScript;
+import android.renderscript.Script;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: cesaraguilar
+ * Date: 12/4/12
+ * Time: 3:02 PM
+ */
+public class GaussianBlurFilter extends ScriptC_convolutionseperablefilter {
+    float blurSize = 2.0f;
+    float kernel[];
+    Allocation kernelAllocation;
+
+    public GaussianBlurFilter(RenderScript rs) {
+        super(rs);
+        kernel = makeGaussiannKernel(4);
+        kernelAllocation = Allocation.createSized(rs, Element.F32(rs),9);
+        kernelAllocation.copyFrom(kernel);
+    }
+
+    public GaussianBlurFilter(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+        kernel = makeGaussiannKernel(4);
+        kernelAllocation = Allocation.createSized(rs, Element.F32(rs),9);
+        kernelAllocation.copyFrom(kernel);
+    }
+
+    @Override
+    public void invoke_filter(Script script,Allocation mInAllocation, Allocation mOutAllocation) {
+        set_inTexture(mInAllocation);
+        set_matrixLenght(9);
+        set_XYOffset(new Float2(1 * blurSize, 0));
+        set_matrixTexture(kernelAllocation);
+        super.invoke_filter(script, mInAllocation, mOutAllocation);
+        set_inTexture(mOutAllocation);
+        set_XYOffset(new Float2(0, 1 * blurSize));
+        super.invoke_filter(script,mInAllocation, mOutAllocation);
+    }
+
+    public void setBlurSize(float value) {
+        blurSize = value;
+    }
+
+    public  float[] makeGaussiannKernel(int radius){
+        int r = (int)Math.ceil(radius);
+        int rows = r*2+1;
+        float[] matrix = new float[rows];
+        float sigma = ((float)radius)/3.0f;
+        float sigma22 = 2.0f*sigma*sigma;
+        float sigmaPi2 = 2.0f* (float)(Math.PI*sigma);
+        float sqrtSigmaPi2 = (float)Math.sqrt(sigmaPi2);
+        float radius2 = radius*radius;
+        float total = 0.0f;
+        int index = 0;
+        for (int row = -r; row <= r; row++) {
+            float distance = row*row;
+            if (distance > radius2)
+                matrix[index] = 0.0f;
+            else
+                matrix[index] = (float)Math.exp(-(distance)/sigma22) / sqrtSigmaPi2;
+            total += matrix[index];
+            index++;
+        }
+        for (int i = 0; i < rows; i++)
+            matrix[i] /= total;
+
+        return matrix;
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/HalftoneFilter.java b/library/src/com/caguilar/android/filters/scripts/HalftoneFilter.java
new file mode 100644
index 00000000..7504b984
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/HalftoneFilter.java
@@ -0,0 +1,59 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.renderscript.RenderScript;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: cesaraguilar
+ * Date: 11/18/12
+ * Time: 11:17 AM
+ */
+public class HalftoneFilter extends ScriptC_halftonefilter {
+    float mWidth = 0.0f;
+
+    public HalftoneFilter(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+    }
+
+    @Override
+    public void set_fractionalWidthOfAPixel(float newValue) {
+        float singlePixelSpacing;
+        if (mWidth != 0.0f)
+        {
+            singlePixelSpacing = 1.0f / mWidth;
+        }
+        else
+        {
+            singlePixelSpacing = 1.0f / 2048.0f;
+        }
+
+        if (newValue < singlePixelSpacing)
+        {
+            newValue = singlePixelSpacing;
+        }
+        super.set_fractionalWidthOfAPixel(newValue);
+    }
+
+    public void setInputSize(int width, int height) {
+        mWidth = (float)width;
+        float mHeight = (float)height;
+        set_aspectRatio(mWidth/mHeight);
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/HueFilter.java b/library/src/com/caguilar/android/filters/scripts/HueFilter.java
new file mode 100644
index 00000000..447c512c
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/HueFilter.java
@@ -0,0 +1,37 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.renderscript.RenderScript;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: cesaraguilar
+ * Date: 11/19/12
+ * Time: 5:03 PM
+ */
+public class HueFilter extends ScriptC_huefilter {
+    public HueFilter(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+    }
+
+    public void setHue(float newHue) {
+        newHue =(float) ((newHue%360.0f) * Math.PI/180.0f);
+        super.set_hueAdjust(newHue);
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/SepiaFilter.java b/library/src/com/caguilar/android/filters/scripts/SepiaFilter.java
new file mode 100644
index 00000000..a6d572bd
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/SepiaFilter.java
@@ -0,0 +1,57 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.renderscript.Matrix4f;
+import android.renderscript.RenderScript;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: cesaraguilar
+ * Date: 11/18/12
+ * Time: 11:17 AM
+ */
+public class SepiaFilter extends ColorMatrixFilter {
+    public SepiaFilter(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+        set_intensityValue(1.0f);
+        Matrix4f colorMatrix = new Matrix4f();
+        colorMatrix.set(0,0,0.3588f);
+        colorMatrix.set(1,0,0.7044f);
+        colorMatrix.set(2,0,0.1368f);
+        colorMatrix.set(3,0,0.0f);
+
+
+        colorMatrix.set(0,1,0.2990f);
+        colorMatrix.set(1,1,0.5870f);
+        colorMatrix.set(2,1,0.1140f);
+        colorMatrix.set(3,1,0.0f);
+
+        colorMatrix.set(0,2,0.2392f);
+        colorMatrix.set(1,2,0.4696f);
+        colorMatrix.set(2,2,0.0912f);
+        colorMatrix.set(3,2,0.0f);
+
+        colorMatrix.set(0,3,0.0f);
+        colorMatrix.set(1,3,0.0f);
+        colorMatrix.set(2,3,0.0f);
+        colorMatrix.set(3,3,1.0f);
+
+        set_colorMatrix(colorMatrix);
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/ToneCurveFilter.java b/library/src/com/caguilar/android/filters/scripts/ToneCurveFilter.java
new file mode 100644
index 00000000..39e483f6
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/ToneCurveFilter.java
@@ -0,0 +1,343 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.graphics.PointF;
+import android.renderscript.Allocation;
+import android.renderscript.Element;
+import android.renderscript.RenderScript;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: cesaraguilar
+ * Date: 11/20/12
+ * Time: 8:22 PM
+ */
+public class ToneCurveFilter extends ScriptC_tonecurvefilter {
+
+    RenderScript mRS;
+    ArrayList<PointF> _redControlPoints;
+    ArrayList<PointF> _greenControlPoints;
+    ArrayList<PointF> _blueControlPoints;
+    ArrayList<PointF> _rgbCompositeControlPoints;
+
+    ArrayList<Float> _redCurve;
+    ArrayList<Float> _greenCurve;
+    ArrayList<Float> _blueCurve;
+    ArrayList<Float> _rgbCompositeCurve;
+
+    public ToneCurveFilter(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+        mRS = rs;
+        ArrayList<PointF> defaultCurve = new ArrayList<PointF>(){{
+            add(new PointF(0.0f,0.0f));
+            add(new PointF(0.5f,0.5f));
+            add(new PointF(1.0f,1.0f));
+        }};
+
+        _rgbCompositeControlPoints = new ArrayList<PointF>();
+        _rgbCompositeControlPoints.addAll(defaultCurve);
+        _rgbCompositeCurve = getPreparedSplineCurve(_rgbCompositeControlPoints);
+
+        _redControlPoints = new ArrayList<PointF>();
+        _redControlPoints.addAll(_rgbCompositeControlPoints);
+        _redCurve = new ArrayList<Float>();
+        _redCurve.addAll(_rgbCompositeCurve);
+
+        _greenControlPoints = new ArrayList<PointF>();
+        _greenControlPoints.addAll(_rgbCompositeControlPoints);
+        _greenCurve = new ArrayList<Float>();
+        _greenCurve.addAll(_rgbCompositeCurve);
+
+        _blueControlPoints = new ArrayList<PointF>();
+        _blueControlPoints.addAll(_rgbCompositeControlPoints);
+        _blueCurve = new ArrayList<Float>();
+        _blueCurve.addAll(_rgbCompositeCurve);
+
+        //updateToneCurveTexture();
+    }
+
+    public void setRGBControlPoints(ArrayList<PointF> newValue){
+
+        _redControlPoints.clear();
+        _redControlPoints.addAll(newValue);
+        _redCurve = getPreparedSplineCurve(_redControlPoints);
+
+        _greenControlPoints.clear();
+        _greenControlPoints.addAll(newValue);
+        _greenCurve = getPreparedSplineCurve(_greenControlPoints);
+
+        _blueControlPoints.clear();
+        _blueControlPoints.addAll(newValue);
+        _blueCurve = getPreparedSplineCurve(_blueControlPoints);
+        //updateToneCurveTexture();
+    }
+
+
+    public void setRgbCompositeControlPoints(ArrayList<PointF> newValue)
+    {
+        _rgbCompositeControlPoints.clear();
+        _rgbCompositeControlPoints.addAll(newValue);
+        _rgbCompositeCurve = getPreparedSplineCurve(_rgbCompositeControlPoints);
+        //updateToneCurveTexture();
+    }
+
+    public void setRedControlPoints(ArrayList<PointF> newValue)
+    {
+        _redControlPoints.clear();
+        _redControlPoints.addAll(newValue);
+        _redCurve = getPreparedSplineCurve(_redControlPoints);
+//        updateToneCurveTexture();
+    }
+
+    public void setGreenControlPoints(ArrayList<PointF> newValue)
+    {
+        _greenControlPoints.clear();
+        _greenControlPoints.addAll(newValue);
+        _greenCurve = getPreparedSplineCurve(_greenControlPoints);
+//        updateToneCurveTexture();
+    }
+
+    public void setBlueControlPoints(ArrayList<PointF> newValue)
+    {
+        _blueControlPoints.clear();
+        _blueControlPoints.addAll(newValue);
+        _blueCurve = getPreparedSplineCurve(_blueControlPoints);
+//        updateToneCurveTexture();
+    }
+
+    public ArrayList<Float> getPreparedSplineCurve(ArrayList<PointF> points)
+    {
+        if (points!=null && points.size() > 0)
+        {
+
+            Collections.sort(points,new Comparator<PointF>() {
+                @Override
+                public int compare(PointF pointF, PointF pointF1) {
+                    float x1 = pointF.x;
+                    float x2 = pointF1.x;
+                    return (int)(x1 - x2);
+                }
+            });
+
+            // Convert from (0, 1) to (0, 255).
+            ArrayList<PointF> convertedPoints = new ArrayList<PointF>();
+            for (PointF point : points){
+                point.x = point.x * 255;
+                point.y = point.y * 255;
+                convertedPoints.add(point);
+            }
+
+
+            ArrayList<PointF> splinePoints = splineCurve(convertedPoints);
+            convertedPoints.clear();
+            // If we have a first point like (0.3, 0) we'll be missing some points at the beginning
+            // that should be 0.
+            PointF firstSplinePoint = splinePoints.get(0);
+
+            if (firstSplinePoint.x > 0) {
+                for (int i=(int)firstSplinePoint.x; i >= 0; i--) {
+                    PointF newCGPoint = new PointF((float)i, 0.0f);
+                    splinePoints.add(0,newCGPoint);
+                }
+            }
+
+            // Insert points similarly at the end, if necessary.
+            PointF lastSplinePoint = splinePoints.get(splinePoints.size()-1);
+
+            if (lastSplinePoint.x < 255) {
+                for (int i = ((int)lastSplinePoint.x) + 1; i <= 255; i++) {
+                    PointF newCGPoint = new PointF(i, 255);
+                    splinePoints.add(newCGPoint);
+                }
+            }
+
+
+            // Prepare the spline points.
+            ArrayList<Float> preparedSplinePoints = new ArrayList<Float>();
+            for (PointF newPoint : splinePoints)
+            {
+                PointF origPoint = new PointF(newPoint.x, newPoint.x);
+
+                float distance = (float)Math.sqrt(Math.pow((origPoint.x - newPoint.x), 2.0) + Math.pow((origPoint.y - newPoint.y), 2.0));
+
+                if (origPoint.y > newPoint.y)
+                {
+                    distance = -distance;
+                }
+                preparedSplinePoints.add(distance);
+            }
+            splinePoints.clear();
+            return preparedSplinePoints;
+        }
+
+        return null;
+    }
+
+    public ArrayList<PointF> splineCurve(ArrayList<PointF> points)
+    {
+        ArrayList<Double> sdA = secondDerivative(points);
+
+        // Is [points count] equal to [sdA count]?
+//    int n = [points count];
+        int n = sdA.size();
+        double sd[] = new double[n];
+
+        // From NSMutableArray to sd[n];
+        for (int i=0; i<n; i++)
+        {
+            sd[i] = sdA.get(i);
+        }
+
+
+        ArrayList<PointF> output = new ArrayList<PointF>();
+
+        for(int i=0; i<n-1 ; i++)
+        {
+            PointF cur = points.get(i);
+            PointF next = points.get(i+1);
+
+            for(int x=(int)cur.x;x<(int)next.x;x++)
+            {
+                double t = (double)(x-cur.x)/(next.x-cur.x);
+
+                double a = 1-t;
+                double b = t;
+                double h = next.x-cur.x;
+
+                double y= a*cur.y + b*next.y + (h*h/6)*( (a*a*a-a)*sd[i]+ (b*b*b-b)*sd[i+1] );
+
+                if (y > 255.0)
+                {
+                    y = 255.0;
+                }
+                else if (y < 0.0)
+                {
+                    y = 0.0;
+                }
+
+                output.add(new PointF((float)x,(float)y));
+            }
+        }
+
+        // If the last point is (255, 255) it doesn't get added.
+        if (output.size() == 255) {
+            output.add(points.get(points.size()-1));
+    }
+        return output;
+    }
+
+
+    public ArrayList<Double> secondDerivative(ArrayList<PointF> points)
+    {
+        int n = points.size();
+        if ((n <= 0) || (n == 1))
+        {
+            return null;
+        }
+
+        double matrix[][] = new double[n][3];
+        double result[] = new double[n];
+        matrix[0][1]=1;
+        // What about matrix[0][1] and matrix[0][0]? Assuming 0 for now (Brad L.)
+        matrix[0][0]=0;
+        matrix[0][2]=0;
+
+        for(int i=1;i<n-1;i++)
+        {
+            PointF P1 = points.get(i-1);
+            PointF P2 = points.get(i);
+            PointF P3 = points.get(i+1);
+
+            matrix[i][0]=(double)(P2.x-P1.x)/6;
+            matrix[i][1]=(double)(P3.x-P1.x)/3;
+            matrix[i][2]=(double)(P3.x-P2.x)/6;
+            result[i]=(double)(P3.y-P2.y)/(P3.x-P2.x) - (double)(P2.y-P1.y)/(P2.x-P1.x);
+        }
+
+        // What about result[0] and result[n-1]? Assuming 0 for now (Brad L.)
+        result[0] = 0;
+        result[n-1] = 0;
+
+        matrix[n-1][1]=1;
+        // What about matrix[n-1][0] and matrix[n-1][2]? For now, assuming they are 0 (Brad L.)
+        matrix[n-1][0]=0;
+        matrix[n-1][2]=0;
+
+        // solving pass1 (up->down)
+        for(int i=1;i<n;i++)
+        {
+            double k = matrix[i][0]/matrix[i-1][1];
+            matrix[i][1] -= k*matrix[i-1][2];
+            matrix[i][0] = 0;
+            result[i] -= k*result[i-1];
+        }
+        // solving pass2 (down->up)
+        for(int i=n-2;i>=0;i--)
+        {
+            double k = matrix[i][2]/matrix[i+1][1];
+            matrix[i][1] -= k*matrix[i+1][0];
+            matrix[i][2] = 0;
+            result[i] -= k*result[i+1];
+        }
+
+        double y2[] = new double[n];
+        for(int i=0;i<n;i++) y2[i]=result[i]/matrix[i][1];
+
+        ArrayList<Double> output = new ArrayList<Double>();
+        for (int i=0;i<n;i++)
+        {
+            output.add(y2[i]);
+        }
+
+        return output;
+    }
+
+    public int[] toneCurveByteArray;
+    private Allocation curveAllocation;
+
+    public void updateToneCurveTexture()
+    {
+        if(toneCurveByteArray==null){
+            toneCurveByteArray = new int[256];
+            curveAllocation = Allocation.createSized(mRS, Element.I32(mRS),256);
+        }
+
+        if ( (_redCurve.size() >= 256) && (_greenCurve.size() >= 256) && (_blueCurve.size() >= 256) && (_rgbCompositeCurve.size() >= 256))
+        {
+            int r,g,b,a;
+
+            for (int currentCurveIndex = 0; currentCurveIndex < 256; currentCurveIndex++)
+            {
+                // BGRA for upload to texture
+                r = (int)Math.min(Math.max(currentCurveIndex + _blueCurve.get(currentCurveIndex) + _rgbCompositeCurve.get(currentCurveIndex), 0), 255);
+                g = (int)Math.min(Math.max(currentCurveIndex + _greenCurve.get(currentCurveIndex) + _rgbCompositeCurve.get(currentCurveIndex), 0), 255);
+                b = (int)Math.min(Math.max(currentCurveIndex + _redCurve.get(currentCurveIndex) + _rgbCompositeCurve.get(currentCurveIndex), 0), 255);
+                a = 255;
+
+                toneCurveByteArray[currentCurveIndex] = ((a&0x0ff)<<24)|((r&0x0ff)<<16)|((g&0x0ff)<<8)|((b&0x0ff));
+            }
+
+            curveAllocation.copyFrom(toneCurveByteArray);
+            set_toneTexture(curveAllocation);
+        }
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/Yuv2Rgb.java b/library/src/com/caguilar/android/filters/scripts/Yuv2Rgb.java
new file mode 100644
index 00000000..b35c4f03
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/Yuv2Rgb.java
@@ -0,0 +1,49 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.scripts;
+
+import android.content.res.Resources;
+import android.renderscript.Allocation;
+import android.renderscript.Element;
+import android.renderscript.RenderScript;
+
+public class Yuv2Rgb extends ScriptC_yuv2rgb {
+    RenderScript mRS;
+    Allocation yuvAllocation;
+    public Yuv2Rgb(RenderScript rs) {
+        super(rs);
+        mRS = rs;
+    }
+
+    public Yuv2Rgb(RenderScript rs, Resources resources, int id) {
+        super(rs, resources, id);
+        mRS = rs;
+    }
+
+    public void convert(byte[] mYUVData, int imageWidth, int imageHeight, Allocation mOutAllocation) {
+        set_imageHeight(imageHeight);
+        set_imageWidth(imageWidth);
+        try{
+            yuvAllocation.copyFrom(mYUVData);
+        }catch (Throwable t){
+            yuvAllocation = Allocation.createSized(mRS, Element.I8(mRS), mYUVData.length);
+            yuvAllocation.copyFrom(mYUVData);
+        }
+        set_yuvData(yuvAllocation);
+        invoke_convert(this,mOutAllocation,mOutAllocation);
+    }
+}
diff --git a/library/src/com/caguilar/android/filters/scripts/basicfilter.rs b/library/src/com/caguilar/android/filters/scripts/basicfilter.rs
new file mode 100644
index 00000000..6cae5c5b
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/basicfilter.rs
@@ -0,0 +1,27 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 color = rsUnpackColor8888(*v_in);
+    *v_out = rsPackColorTo8888(color.r,color.g,color.b,color.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/brightnessfilter.rs b/library/src/com/caguilar/android/filters/scripts/brightnessfilter.rs
new file mode 100644
index 00000000..3a5212f4
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/brightnessfilter.rs
@@ -0,0 +1,34 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float brightnessValue;
+
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+    float factor = brightnessValue;
+    pixel = pixel + factor;
+    pixel = clamp(pixel,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(pixel.r,pixel.g,pixel.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/colormatrixfilter.rs b/library/src/com/caguilar/android/filters/scripts/colormatrixfilter.rs
new file mode 100644
index 00000000..7516e3e1
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/colormatrixfilter.rs
@@ -0,0 +1,33 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float intensityValue;
+rs_matrix4x4 colorMatrix;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 pixel = rsUnpackColor8888(*v_in);
+    float4 color = rsMatrixMultiply(&colorMatrix,pixel);
+    color = (intensityValue * color) + ((1.0f - intensityValue) * pixel);
+    color = clamp(color,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(color);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/contrastfilter.rs b/library/src/com/caguilar/android/filters/scripts/contrastfilter.rs
new file mode 100644
index 00000000..fb74285b
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/contrastfilter.rs
@@ -0,0 +1,32 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float contrastValue;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 color = apixel.rgb;
+    color = (((color - 0.5f) * contrastValue) + 0.5f);
+    color = clamp(color,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(color.r,color.g,color.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/convolutionfilter.rs b/library/src/com/caguilar/android/filters/scripts/convolutionfilter.rs
new file mode 100644
index 00000000..96883628
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/convolutionfilter.rs
@@ -0,0 +1,30 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+rs_allocation inTexture;
+rs_allocation matrixTexture;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    *v_out = rsPackColorTo8888(apixel);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/convolutionseperablefilter.rs b/library/src/com/caguilar/android/filters/scripts/convolutionseperablefilter.rs
new file mode 100644
index 00000000..e4108e6b
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/convolutionseperablefilter.rs
@@ -0,0 +1,59 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+rs_allocation inTexture;
+rs_allocation matrixTexture;
+float2 XYOffset;
+int matrixLenght;
+int imageWidth;
+int imageHeight;
+
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+
+    float3 newColor = {0,0,0};
+    uchar4 *element;
+    float *matrixValue;
+
+    float center = floor(matrixLenght/2.0f);
+    float2 currentPosition = {x,y};
+    float2 moveBy = {0,0};
+    float2 newPosition = {0,0};
+    float i=-center;
+    float3 color = {0,0,0};
+
+    for(i; i<=center; i++){
+        moveBy = XYOffset*i;
+        newPosition = currentPosition+moveBy;
+        if((newPosition.x > -1 && newPosition.y >-1) && (newPosition.x < imageWidth && newPosition.y < imageHeight)){
+            element = (uchar4 *)rsGetElementAt(inTexture, newPosition.x, newPosition.y);
+            matrixValue = (float*)rsGetElementAt(matrixTexture,i+center);
+            color = rsUnpackColor8888(*element).rgb;
+            newColor += color*(*matrixValue);
+        }
+    }
+
+    newColor = clamp(newColor,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(newColor.r,newColor.g,newColor.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/exposurefilter.rs b/library/src/com/caguilar/android/filters/scripts/exposurefilter.rs
new file mode 100644
index 00000000..322b2e67
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/exposurefilter.rs
@@ -0,0 +1,33 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float exposureValue;
+
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+    pixel = pixel * pow(2.0f,exposureValue);
+    pixel = clamp(pixel,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(pixel.r,pixel.g,pixel.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/gammafilter.rs b/library/src/com/caguilar/android/filters/scripts/gammafilter.rs
new file mode 100644
index 00000000..09b684e8
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/gammafilter.rs
@@ -0,0 +1,32 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float gammaValue;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 color = apixel.rgb;
+    float3 gamma = {gammaValue,gammaValue,gammaValue};
+    float3 newColor = pow(color, gamma);
+    *v_out = rsPackColorTo8888(newColor.r,newColor.g,newColor.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/grayscalefilter.rs b/library/src/com/caguilar/android/filters/scripts/grayscalefilter.rs
new file mode 100644
index 00000000..dcc7554e
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/grayscalefilter.rs
@@ -0,0 +1,34 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float saturationValue;
+const static float3 luminanceWeighting = {0.2125, 0.7154, 0.0721};
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+    float luminance = dot(pixel, luminanceWeighting);
+    float3 greyScaleColor = {luminance,luminance,luminance};
+    greyScaleColor = clamp(greyScaleColor,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(greyScaleColor.r,greyScaleColor.g,greyScaleColor.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/halftonefilter.rs b/library/src/com/caguilar/android/filters/scripts/halftonefilter.rs
new file mode 100644
index 00000000..d6dee2c5
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/halftonefilter.rs
@@ -0,0 +1,48 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float fractionalWidthOfAPixel;
+rs_allocation inTexture;
+float aspectRatio = 0.75f;
+const static float3 W = {0.2125, 0.7154, 0.0721};
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+
+    float2 sampleDivisor = {fractionalWidthOfAPixel, fractionalWidthOfAPixel / aspectRatio};
+    float xpos = x;
+    float ypos = y;
+    float2 textureCoordinate = {xpos,ypos};
+    float2 samplePos = textureCoordinate - fmod(textureCoordinate, sampleDivisor) + 0.5f * sampleDivisor;
+    float2 textureCoordinateToUse = {textureCoordinate.x, (textureCoordinate.y * aspectRatio + 0.5f - 0.5f * aspectRatio)};
+    float2 adjustedSamplePos = {samplePos.x, (samplePos.y * aspectRatio + 0.5f - 0.5f * aspectRatio)};
+    float distanceFromSamplePoint = distance(adjustedSamplePos, textureCoordinateToUse);
+
+    const uchar4 *element = rsGetElementAt(inTexture, samplePos.x, samplePos.y);
+    float3 sampledColor = rsUnpackColor8888(*element).rgb;
+    float dotScaling = 1.0f - dot(sampledColor, W);
+
+    float checkForPresenceWithinDot = 1.0f - step(distanceFromSamplePoint, (fractionalWidthOfAPixel * 0.5f) * dotScaling);
+
+    float3 color = {checkForPresenceWithinDot,checkForPresenceWithinDot,checkForPresenceWithinDot};
+    *v_out = rsPackColorTo8888(color);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/huefilter.rs b/library/src/com/caguilar/android/filters/scripts/huefilter.rs
new file mode 100644
index 00000000..ddb238fb
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/huefilter.rs
@@ -0,0 +1,56 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+ float hueAdjust;
+ const static  float4  kRGBToYPrime =  {0.299, 0.587, 0.114, 0.0};
+ const static  float4  kRGBToI     = {0.595716, -0.274453, -0.321263, 0.0};
+ const static  float4  kRGBToQ     = {0.211456, -0.522591, 0.31135, 0.0};
+
+ const static  float4  kYIQToR   = {1.0, 0.9563, 0.6210, 0.0};
+ const static  float4  kYIQToG   = {1.0, -0.2721, -0.6474, 0.0};
+ const static  float4  kYIQToB   = {1.0, -1.1070, 1.7046, 0.0};
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 pixel = rsUnpackColor8888(*v_in);
+
+    float YPrime  = dot (pixel, kRGBToYPrime);
+    float I      = dot (pixel, kRGBToI);
+    float Q      = dot (pixel, kRGBToQ);
+
+    float   hue     = atan2 (Q, I);
+    float   chroma  = sqrt (I * I + Q * Q);
+
+    hue += (-hueAdjust);
+
+    Q = chroma * sin (hue);
+    I = chroma * cos (hue);
+
+    float4 yIQ   = {YPrime, I, Q, 0.0};
+    pixel.r = dot (yIQ, kYIQToR);
+    pixel.g = dot (yIQ, kYIQToG);
+    pixel.b = dot (yIQ, kYIQToB);
+
+    pixel = clamp(pixel,0.0f,1.0f);
+
+    *v_out = rsPackColorTo8888(pixel);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/invertcolorfilter.rs b/library/src/com/caguilar/android/filters/scripts/invertcolorfilter.rs
new file mode 100644
index 00000000..dc981d88
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/invertcolorfilter.rs
@@ -0,0 +1,30 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+    pixel = 1.0f - pixel;
+    pixel = clamp(pixel,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(pixel.r,pixel.g,pixel.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/luminancethresholdfilter.rs b/library/src/com/caguilar/android/filters/scripts/luminancethresholdfilter.rs
new file mode 100644
index 00000000..f9ca46e7
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/luminancethresholdfilter.rs
@@ -0,0 +1,33 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float thresholdValue;
+const static float3 luminanceWeighting = {0.2125, 0.7154, 0.0721};
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 pixel = rsUnpackColor8888(*v_in);
+    float luminance = dot(pixel.rgb, luminanceWeighting);
+    float newValue = step(thresholdValue,luminance);
+    float3 color = {newValue,newValue,newValue};
+    *v_out = rsPackColorTo8888(color.r,color.g,color.b,pixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/monochromefilter.rs b/library/src/com/caguilar/android/filters/scripts/monochromefilter.rs
new file mode 100644
index 00000000..c324d833
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/monochromefilter.rs
@@ -0,0 +1,41 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+const static float3 luminanceWeighting = {0.2125, 0.7154, 0.0721};
+float intensityValue;
+float3 filterColor;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 color = apixel.rgb;
+    float luminance = dot(color, luminanceWeighting);
+    float3 desat = {luminance,luminance,luminance};
+    float3 outputColor = {
+        (desat.r < 0.5f ? (2.0f * desat.r * filterColor.r) : (1.0f - 2.0f * (1.0 - desat.r) * (1.0f - filterColor.r))),
+        (desat.g < 0.5f ? (2.0f * desat.g * filterColor.g) : (1.0f - 2.0f * (1.0 - desat.g) * (1.0f - filterColor.g))),
+        (desat.b < 0.5f ? (2.0f * desat.b * filterColor.b) : (1.0f - 2.0f * (1.0 - desat.b) * (1.0f - filterColor.b))),
+    };
+    float3 newColor = mix(color, outputColor, intensityValue);
+    newColor = clamp(newColor,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(newColor.r,newColor.g,newColor.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/opacityfilter.rs b/library/src/com/caguilar/android/filters/scripts/opacityfilter.rs
new file mode 100644
index 00000000..998fa33f
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/opacityfilter.rs
@@ -0,0 +1,30 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float opacityValue;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 color = rsUnpackColor8888(*v_in);
+    *v_out = rsPackColorTo8888(color.r*opacityValue,color.g*opacityValue,color.b*opacityValue,color.a*opacityValue);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/rgbfilter.rs b/library/src/com/caguilar/android/filters/scripts/rgbfilter.rs
new file mode 100644
index 00000000..4ead0fef
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/rgbfilter.rs
@@ -0,0 +1,35 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float redValue;
+float greenValue;
+float blueValue;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+    float3 color = {pixel.r*redValue,pixel.g*greenValue,pixel.b*blueValue};
+    color = clamp(color,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(color.r,color.g,color.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/saturationfilter.rs b/library/src/com/caguilar/android/filters/scripts/saturationfilter.rs
new file mode 100644
index 00000000..876d6163
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/saturationfilter.rs
@@ -0,0 +1,35 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+float saturationValue;
+const static float3 luminanceWeighting = {0.2125, 0.7154, 0.0721};
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+    float luminance = dot(pixel, luminanceWeighting);
+    float3 greyScaleColor = {luminance,luminance,luminance};
+    float3 color = mix(greyScaleColor, pixel, saturationValue);
+    color = clamp(color,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(color.r,color.g,color.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/selectivefilter.rs b/library/src/com/caguilar/android/filters/scripts/selectivefilter.rs
new file mode 100644
index 00000000..6658bb53
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/selectivefilter.rs
@@ -0,0 +1,64 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+rs_allocation blurTexture;
+rs_allocation sharpTexture;
+float excludeCircleRadius;
+float2 excludeCirclePoint;
+float excludeBlurSize;
+float aspectRatio;
+float imageWidth;
+float imageHeight;
+
+static float saturate(float x)
+{
+  return max(0.0f, min(1.0f, x));
+}
+
+static float smoothstepIMP(float a, float b, float x)
+{
+    float t = saturate((x - a)/(b - a));
+    return t*t*(3.0 - (2.0*t));
+}
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+
+    uchar4 *element = (uchar4 *)rsGetElementAt(blurTexture, x, y);
+    float3 blurColor = rsUnpackColor8888(*element).rgb;
+
+    element = (uchar4 *)rsGetElementAt(sharpTexture, x, y);
+    float3 sharpColor = rsUnpackColor8888(*element).rgb;
+
+    float2 realCirclePoint = {imageWidth*excludeCirclePoint.x,imageHeight*excludeCirclePoint.y};
+    float realRadius = excludeCircleRadius*imageHeight;
+    float realExcludeSize = excludeBlurSize*imageHeight;
+
+    float2 textureCoordinateToUse = {x, (y * aspectRatio + 0.5f - 0.5f * aspectRatio)};
+    float distanceFromCenter = distance(realCirclePoint, textureCoordinateToUse);
+
+    float step = smoothstepIMP(realRadius - realExcludeSize, realRadius, distanceFromCenter);
+    float3 newColor = mix(sharpColor, blurColor, step);
+    newColor = clamp(newColor,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(newColor.r,newColor.g,newColor.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/tiltshiftfilter.rs b/library/src/com/caguilar/android/filters/scripts/tiltshiftfilter.rs
new file mode 100644
index 00000000..27bc9dcc
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/tiltshiftfilter.rs
@@ -0,0 +1,75 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+rs_allocation blurTexture;
+rs_allocation sharpTexture;
+float topFocusLevel;
+float bottomFocusLevel;
+float focusFallOffRate;
+int direction;
+
+float imageWidth;
+float imageHeight;
+
+static float saturate(float x)
+{
+  return max(0.0f, min(1.0f, x));
+}
+
+static float smoothstepIMP(float a, float b, float x)
+{
+    float t = saturate((x - a)/(b - a));
+    return t*t*(3.0 - (2.0*t));
+}
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+
+    uchar4 *element = (uchar4 *)rsGetElementAt(blurTexture, x, y);
+    float3 blurColor = rsUnpackColor8888(*element).rgb;
+
+    element = (uchar4 *)rsGetElementAt(sharpTexture, x, y);
+    float3 sharpColor = rsUnpackColor8888(*element).rgb;
+
+    float blurIntensity;
+
+    if(direction==1){
+        float realTopLevel = topFocusLevel*imageHeight;
+        float realBottomFocusLevel = bottomFocusLevel*imageHeight;
+        float realFocusFallOffRate = focusFallOffRate*imageHeight;
+
+        blurIntensity = 1.0 - smoothstepIMP(realTopLevel - realFocusFallOffRate, realTopLevel, y);
+        blurIntensity += smoothstepIMP(realBottomFocusLevel, realBottomFocusLevel + realFocusFallOffRate, y);
+    }else{
+        float realTopLevel = topFocusLevel*imageWidth;
+        float realBottomFocusLevel = bottomFocusLevel*imageWidth;
+        float realFocusFallOffRate = focusFallOffRate*imageWidth;
+        blurIntensity = 1.0 - smoothstepIMP(realTopLevel - realFocusFallOffRate, realTopLevel, x);
+        blurIntensity += smoothstepIMP(realBottomFocusLevel, realBottomFocusLevel + realFocusFallOffRate, x);
+    }
+
+
+    float3 newColor = mix(sharpColor, blurColor, blurIntensity);
+    newColor = clamp(newColor,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(newColor.r,newColor.g,newColor.b,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/tonecurvefilter.rs b/library/src/com/caguilar/android/filters/scripts/tonecurvefilter.rs
new file mode 100644
index 00000000..d7e06780
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/tonecurvefilter.rs
@@ -0,0 +1,40 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+rs_allocation toneTexture;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float4 apixel = rsUnpackColor8888(*v_in);
+    float3 pixel = apixel.rgb;
+
+    uchar4 *element = (uchar4 *)rsGetElementAt(toneTexture, floor(pixel.r*255.0f));
+    float Rpixel = rsUnpackColor8888(*element).r;
+
+    element = (uchar4 *)rsGetElementAt(toneTexture, floor(pixel.g*255.0f));
+    float Gpixel = rsUnpackColor8888(*element).g;
+
+    element = (uchar4 *)rsGetElementAt(toneTexture, floor(pixel.b*255.0f));
+    float Bpixel = rsUnpackColor8888(*element).b;
+
+    *v_out = rsPackColorTo8888(Rpixel,Gpixel,Bpixel,apixel.a);
+}
+
+void filter(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
\ No newline at end of file
diff --git a/library/src/com/caguilar/android/filters/scripts/yuv2rgb.rs b/library/src/com/caguilar/android/filters/scripts/yuv2rgb.rs
new file mode 100644
index 00000000..b8c7a1a7
--- /dev/null
+++ b/library/src/com/caguilar/android/filters/scripts/yuv2rgb.rs
@@ -0,0 +1,53 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+#pragma version(1)
+#pragma rs java_package_name(com.caguilar.android.filters.scripts)
+
+int imageWidth;
+int imageHeight;
+rs_allocation yuvData;
+
+void root(const uchar4 *v_in, uchar4 *v_out,const void *userData, uint32_t x, uint32_t y) {
+    float r,g,b,_y,u,v;
+    int index = y*imageWidth + x;
+    int size = imageWidth*imageHeight;
+    int otherIndex = ((y/2)*(imageWidth/2) + (x/2))*2 + size;
+
+
+    uchar *temp = (uchar *)rsGetElementAt(yuvData,index);
+    _y = *temp/255.0f;
+    temp = (uchar *)rsGetElementAt(yuvData,otherIndex+1);
+    u = *temp/255.0f;
+    temp = (uchar *)rsGetElementAt(yuvData,otherIndex);
+    v = *temp/255.0f;
+
+    u -= 0.5f;
+    v -= 0.5f;
+    _y=1.1643*(_y-0.0625);
+    r=_y+1.5958*v;
+    g=_y-0.39173*u-0.81290*v;
+    b=_y+2.017*u;
+
+    float3 color = {r,g,b};
+    color = clamp(color,0.0f,1.0f);
+    *v_out = rsPackColorTo8888(color.r,color.g,color.b,1.0f);
+}
+
+void convert(rs_script script,rs_allocation inAllocation,rs_allocation outAllocation){
+    rsForEach(script, inAllocation, outAllocation, 0, 0);
+}
+
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8392a5a9..fcef6d7d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -36,6 +36,8 @@
 import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
+//import android.renderscript.RenderScript;
+
 import android.view.Display;
 import android.view.WindowManager;
 
@@ -44,6 +46,8 @@
 import java.util.List;
 import java.util.concurrent.Semaphore;
 
+import tv.lycam.rtmp.video.ScriptC_invert;
+
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
  * tasks through a simple interface.
@@ -55,7 +59,6 @@
     private GPUImageFilter mFilter;
     private Bitmap mCurrentBitmap;
     private ScaleType mScaleType = ScaleType.CENTER_CROP;
-
     /**
      * Instantiates a new GPUImage object.
      *
@@ -68,7 +71,8 @@ public GPUImage(final Context context) {
 
         mContext = context;
         mFilter = new GPUImageFilter();
-        mRenderer = new GPUImageRenderer(mFilter);
+        mRenderer = new GPUImageRenderer(mContext,mFilter);
+
     }
 
     /**
@@ -301,7 +305,7 @@ public void run() {
             }
         }
 
-        GPUImageRenderer renderer = new GPUImageRenderer(mFilter);
+        GPUImageRenderer renderer = new GPUImageRenderer(mContext,mFilter);
         renderer.setRotation(Rotation.NORMAL,
                 mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
         renderer.setScaleType(mScaleType);
@@ -333,12 +337,12 @@ public void run() {
      * @param filters the filters which will be applied on the bitmap
      * @param listener the listener on which the results will be notified
      */
-    public static void getBitmapForMultipleFilters(final Bitmap bitmap,
+    public static void getBitmapForMultipleFilters(final Context ctx, final Bitmap bitmap,
             final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener) {
         if (filters.isEmpty()) {
             return;
         }
-        GPUImageRenderer renderer = new GPUImageRenderer(filters.get(0));
+        GPUImageRenderer renderer = new GPUImageRenderer(ctx,filters.get(0));
         renderer.setImageBitmap(bitmap, false);
         PixelBuffer buffer = new PixelBuffer(bitmap.getWidth(), bitmap.getHeight());
         buffer.setRenderer(renderer);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 0120bbee..e1734bb2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -17,6 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.annotation.TargetApi;
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.SurfaceTexture;
@@ -25,8 +26,14 @@
 import android.hardware.Camera.Size;
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
+import android.renderscript.Allocation;
+
+import android.renderscript.RenderScript;
+import android.renderscript.*;
 
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+import tv.lycam.rtmp.video.ScriptC_invert;
+import tv.lycam.rtmp.video.*;
 
 import javax.microedition.khronos.egl.EGLConfig;
 import javax.microedition.khronos.opengles.GL10;
@@ -39,6 +46,9 @@
 import java.util.Queue;
 
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
+import android.graphics.ImageFormat;
+
+import com.caguilar.android.filters.scripts.Yuv2Rgb;
 
 @TargetApi(11)
 public class GPUImageRenderer implements Renderer, PreviewCallback {
@@ -76,8 +86,17 @@
     private float mBackgroundRed = 0;
     private float mBackgroundGreen = 0;
     private float mBackgroundBlue = 0;
+    private Context mContext;
+    private RenderScript rs;
+    private ScriptC_invert invert ;
+
+
+    Allocation inData;
+    Allocation outData;
+    Bitmap outputBitmap;
+    Yuv2Rgb yuvScript;
 
-    public GPUImageRenderer(final GPUImageFilter filter) {
+    public GPUImageRenderer(Context context,final GPUImageFilter filter) {
         mFilter = filter;
         mRunOnDraw = new LinkedList<Runnable>();
         mRunOnDrawEnd = new LinkedList<Runnable>();
@@ -91,6 +110,10 @@ public GPUImageRenderer(final GPUImageFilter filter) {
                 .order(ByteOrder.nativeOrder())
                 .asFloatBuffer();
         setRotation(Rotation.NORMAL, false, false);
+        mContext = context;
+        rs =  RenderScript.create(context);
+        invert = new ScriptC_invert(rs);
+        yuvScript = new Yuv2Rgb(rs);
     }
 
     @Override
@@ -144,19 +167,69 @@ private void runAll(Queue<Runnable> queue) {
             }
         }
     }
+    private void createScript(final Camera camera){
+        final Size previewSize = camera.getParameters().getPreviewSize();
+        int w = previewSize.width;
+        int h = previewSize.height;
+
+//        mInAllocation = Allocation.createFromBitmap(mRS, mCallbackBitmap,
+//                Allocation.MipmapControl.MIPMAP_NONE,
+//                Allocation.USAGE_SCRIPT);
+//        mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+//        mOutAllocation.copyFrom(mPreCallbackBitmap);
+
+        Type.Builder tbIn = new Type.Builder(rs, Element.U8(rs));
+        tbIn.setX(w);
+        tbIn.setY(h);
+        tbIn.setFaces(false);
+        tbIn.setMipmaps(false);
+        tbIn.setYuvFormat(ImageFormat.NV21);
 
+//        Type.Builder tbOut = Allocation.createTyped(rs, tbIn.getType());
+
+        Type.Builder tbOut = new Type.Builder(rs, Element.RGBA_8888(rs));
+        tbOut.setX(w);
+        tbOut.setY(h);
+        tbOut.setFaces(false);
+        tbOut.setMipmaps(false);
+
+//        inData = Allocation.createTyped(rs, tbIn.create(), Allocation.MipmapControl.MIPMAP_NONE,  Allocation.USAGE_SCRIPT & Allocation.USAGE_SHARED);
+        outData = Allocation.createTyped(rs, tbOut.create(), Allocation.MipmapControl.MIPMAP_NONE, Allocation.USAGE_SCRIPT & Allocation.USAGE_SHARED);
+
+        outputBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
+
+
+//        yuvScript = new ScriptC_yuv(rs);
+//        yuvScript.set_gIn(inData);
+//        yuvScript.set_width(w);
+//        yuvScript.set_height(h);
+//        yuvScript.set_frameSize(w * h);
+    }
     @Override
     public void onPreviewFrame(final byte[] data, final Camera camera) {
         final Size previewSize = camera.getParameters().getPreviewSize();
         if (mGLRgbBuffer == null) {
             mGLRgbBuffer = IntBuffer.allocate(previewSize.width * previewSize.height);
+            createScript(camera);
         }
+        final byte[] buffer = new byte[previewSize.width* previewSize.height *4];
         if (mRunOnDraw.isEmpty()) {
             runOnDraw(new Runnable() {
                 @Override
                 public void run() {
-                    GPUImageNativeLibrary.YUVtoRBGA(data, previewSize.width, previewSize.height,
-                            mGLRgbBuffer.array());
+//                    inData.copyFrom(data);
+                    yuvScript.convert(data, previewSize.width, previewSize.height, outData);
+                    outData.copyTo(buffer);
+
+                    int len = previewSize.width* previewSize.height;
+                    for(int i=0;i<len;i++){
+                        int idx = i* 4;
+                        int c = (int)buffer[idx+3]<<24 | (int)buffer[idx+2]<<16 | (int)buffer[idx+1]<<8 | (int)buffer[idx];
+                        mGLRgbBuffer.array()[i] = c;
+                    }
+//                    mGLRgbBuffer.put(buffer);
+//                    GPUImageNativeLibrary.YUVtoRBGA(data, previewSize.width, previewSize.height,
+//                            mGLRgbBuffer.array());
                     mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, previewSize, mGLTextureId);
                     camera.addCallbackBuffer(data);
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/invert.rs b/library/src/jp/co/cyberagent/android/gpuimage/invert.rs
new file mode 100644
index 00000000..f73149a6
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/invert.rs
@@ -0,0 +1,10 @@
+#pragma version(1)
+#pragma rs java_package_name(tv.lycam.rtmp.video)
+
+uchar4 __attribute__((kernel)) invert(uchar4 in, uint32_t x, uint32_t y) {
+  uchar4 out = in;
+  out.r = 255 - in.r;
+  out.g = 255 - in.g;
+  out.b = 255 - in.b;
+  return out;
+}
\ No newline at end of file
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/yuv.rs b/library/src/jp/co/cyberagent/android/gpuimage/yuv.rs
new file mode 100644
index 00000000..7b3647af
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/yuv.rs
@@ -0,0 +1,33 @@
+#pragma version(1)
+#pragma rs java_package_name( tv.lycam.rtmp.video)
+
+rs_allocation gIn;
+
+int width;
+int height;
+int frameSize;
+
+void yuvToRgb(const uchar *v_in, uchar4 *v_out, const void *usrData, uint32_t x, uint32_t y) {
+
+    uchar yp = rsGetElementAtYuv_uchar_Y(gIn, x, y) & 0xFF;
+
+    int index = frameSize + (x & (~1)) + (( y>>1) * width );
+    int v = (int)( rsGetElementAt_uchar(gIn, index) & 0xFF ) -128;
+    int u = (int)( rsGetElementAt_uchar(gIn, index+1) & 0xFF ) -128;
+
+    int r = (int) (1.164f * yp  + 1.596f * v );
+    int g = (int) (1.164f * yp  - 0.813f * v  - 0.391f * u);
+    int b = (int) (1.164f * yp  + 2.018f * u );
+
+    r = r>255? 255 : r<0 ? 0 : r;
+    g = g>255? 255 : g<0 ? 0 : g;
+    b = b>255? 255 : b<0 ? 0 : b;
+
+    uchar4 res4;
+    res4.r = (uchar)r;
+    res4.g = (uchar)g;
+    res4.b = (uchar)b;
+    res4.a = 0xFF;
+
+    *v_out = res4;
+}
\ No newline at end of file
diff --git a/rs_sample/build.gradle b/rs_sample/build.gradle
new file mode 100644
index 00000000..04eee44c
--- /dev/null
+++ b/rs_sample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 17
+    buildToolsVersion "19.1.0"
+
+    defaultConfig {
+        applicationId "com.caguilar.android.filters.samples"
+        minSdkVersion 14
+        targetSdkVersion 16
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
+}
+
+dependencies {
+    compile project(':library')
+}
diff --git a/rs_sample/src/main/AndroidManifest.xml b/rs_sample/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..7084f8c5
--- /dev/null
+++ b/rs_sample/src/main/AndroidManifest.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.caguilar.android.filters.samples"
+        >
+    <uses-sdk android:minSdkVersion="14" android:targetSdkVersion="16"/>
+     <application android:icon="@drawable/ic_launcher"
+                 android:label="@string/app_name">
+        <activity
+                android:name="com.caguilar.android.filters.samples.FiltersActivity"
+                android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.DEFAULT"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+                android:name=".StaticFilterTestActivity"
+                android:label="@string/app_name" />
+        <activity
+                android:name=".LiveFilterTestActivity"
+                android:label="@string/app_name" />
+    </application>
+    <uses-permission android:name="android.permission.CAMERA" />
+</manifest>
diff --git a/rs_sample/src/main/assets/intents.xml b/rs_sample/src/main/assets/intents.xml
new file mode 100644
index 00000000..a7e32fe3
--- /dev/null
+++ b/rs_sample/src/main/assets/intents.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<document>
+    <type>
+        <name>Filter Test</name>
+        <filters>
+            <filter>
+                <name>Brightness</name>
+            </filter>
+            <filter>
+                <name>Exposure</name>
+            </filter>
+            <filter>
+                <name>Contrast</name>
+            </filter>
+            <filter>
+                <name>Saturation</name>
+            </filter>
+            <filter>
+                <name>Hue</name>
+            </filter>
+            <filter>
+                <name>Gamma</name>
+            </filter>
+            <filter>
+                <name>Sepia</name>
+            </filter>
+            <filter>
+                <name>Gray Scale</name>
+            </filter>
+            <filter>
+                <name>Invert Color</name>
+            </filter>
+            <filter>
+                <name>RGB</name>
+            </filter>
+            <filter>
+                <name>Monochrome</name>
+            </filter>
+            <filter>
+                <name>Opacity</name>
+            </filter>
+            <filter>
+                <name>Luminance Threshold</name>
+            </filter>
+            <filter>
+                <name>Halftone</name>
+            </filter>
+            <filter>
+                <name>Tone Curve</name>
+            </filter>
+            <filter>
+                <name>Gaussian Blur</name>
+            </filter>
+            <filter>
+                <name>Selective Gaussian Blur</name>
+            </filter>
+            <filter>
+                <name>TiltShift</name>
+            </filter>
+        </filters>
+    </type>
+</document>
\ No newline at end of file
diff --git a/rs_sample/src/main/java/com/caguilar/android/filters/samples/FilterObject.java b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FilterObject.java
new file mode 100644
index 00000000..845fdfbf
--- /dev/null
+++ b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FilterObject.java
@@ -0,0 +1,61 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+
+public class FilterObject {
+    private String value;
+    private float defaultValue;
+    private float minusValue;
+    private float maxValue;
+    private float divisorValue;
+    private String name;
+
+    public FilterObject(String name, String value, int defaultValue, int maxValue, int minusValue, int divisorValue) {
+        this.value = value;
+        this.name = name;
+        this.defaultValue = defaultValue;
+        this.maxValue = maxValue;
+        this.minusValue = minusValue;
+        this.divisorValue = divisorValue;
+
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public float getDefaultValue() {
+        return defaultValue;
+    }
+
+    public float getMinusValue() {
+        return minusValue;
+    }
+
+    public float getMaxValue() {
+        return maxValue;
+    }
+
+    public float getDivisorValue() {
+        return divisorValue;
+    }
+
+    public String getName() {
+        return name;
+    }
+}
diff --git a/rs_sample/src/main/java/com/caguilar/android/filters/samples/FilterSystem.java b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FilterSystem.java
new file mode 100644
index 00000000..d7254123
--- /dev/null
+++ b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FilterSystem.java
@@ -0,0 +1,154 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.PointF;
+import android.renderscript.Allocation;
+import android.renderscript.Float3;
+import android.renderscript.RenderScript;
+import android.renderscript.ScriptC;
+import com.caguilar.android.filters.scripts.GaussianBlurFilter;
+import com.caguilar.android.filters.scripts.HalftoneFilter;
+import com.caguilar.android.filters.scripts.HueFilter;
+import com.caguilar.android.filters.scripts.ScriptC_basicfilter;
+import com.caguilar.android.filters.scripts.ScriptC_brightnessfilter;
+import com.caguilar.android.filters.scripts.ScriptC_contrastfilter;
+import com.caguilar.android.filters.scripts.ScriptC_exposurefilter;
+import com.caguilar.android.filters.scripts.ScriptC_gammafilter;
+import com.caguilar.android.filters.scripts.ScriptC_grayscalefilter;
+import com.caguilar.android.filters.scripts.ScriptC_invertcolorfilter;
+import com.caguilar.android.filters.scripts.ScriptC_luminancethresholdfilter;
+import com.caguilar.android.filters.scripts.ScriptC_monochromefilter;
+import com.caguilar.android.filters.scripts.ScriptC_opacityfilter;
+import com.caguilar.android.filters.scripts.ScriptC_rgbfilter;
+import com.caguilar.android.filters.scripts.ScriptC_saturationfilter;
+//import com.caguilar.android.filters.scripts.SelectiveGaussianBlurFilter;
+import com.caguilar.android.filters.scripts.SepiaFilter;
+//import com.caguilar.android.filters.scripts.TiltShiftGaussianBlurFilter;
+import com.caguilar.android.filters.scripts.ToneCurveFilter;
+
+import java.util.ArrayList;
+
+public class FilterSystem {
+
+    public static void applyFilter(Allocation mInAllocation, Allocation mOutAllocation, float value, String effectName,
+                                   RenderScript mRS, Resources resources, Bitmap originalBitmap){
+        ScriptC mScript;
+        if(effectName.equalsIgnoreCase("basic")){
+            mScript = new ScriptC_basicfilter(mRS, resources, R.raw.basicfilter);
+            ((ScriptC_basicfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("saturation")){
+            mScript = new ScriptC_saturationfilter(mRS, resources, R.raw.saturationfilter);
+            ((ScriptC_saturationfilter)mScript).set_saturationValue(value);
+            ((ScriptC_saturationfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("contrast")){
+            mScript = new ScriptC_contrastfilter(mRS, resources, R.raw.contrastfilter);
+            ((ScriptC_contrastfilter)mScript).set_contrastValue(value);
+            ((ScriptC_contrastfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("brightness")){
+            mScript = new ScriptC_brightnessfilter(mRS, resources, R.raw.brightnessfilter);
+            ((ScriptC_brightnessfilter)mScript).set_brightnessValue(value);
+            ((ScriptC_brightnessfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("sepia")) {
+            mScript = new SepiaFilter(mRS, resources, R.raw.colormatrixfilter);
+            ((SepiaFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("grayscale")) {
+            mScript = new ScriptC_grayscalefilter(mRS, resources, R.raw.grayscalefilter);
+            ((ScriptC_grayscalefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("halftone")) {
+            mScript = new HalftoneFilter(mRS, resources, R.raw.halftonefilter);
+            ((HalftoneFilter)mScript).setInputSize(originalBitmap.getWidth(), originalBitmap.getHeight());
+            ((HalftoneFilter)mScript).set_fractionalWidthOfAPixel(value);
+            ((HalftoneFilter)mScript).set_inTexture(mInAllocation);
+            ((HalftoneFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("invertcolor")) {
+            mScript = new ScriptC_invertcolorfilter(mRS, resources, R.raw.invertcolorfilter);
+            ((ScriptC_invertcolorfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("hue")) {
+            mScript = new HueFilter(mRS, resources, R.raw.huefilter);
+            ((HueFilter)mScript).setHue(value);
+            ((HueFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("monochrome")) {
+            mScript = new ScriptC_monochromefilter(mRS, resources, R.raw.monochromefilter);
+            ((ScriptC_monochromefilter)mScript).set_intensityValue(value);
+            ((ScriptC_monochromefilter)mScript).set_filterColor(new Float3(0.0f, 0.0f, 1.0f));
+            ((ScriptC_monochromefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("exposure")) {
+            mScript = new ScriptC_exposurefilter(mRS, resources, R.raw.exposurefilter);
+            ((ScriptC_exposurefilter)mScript).set_exposureValue(value);
+            ((ScriptC_exposurefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gamma")) {
+            mScript = new ScriptC_gammafilter(mRS, resources, R.raw.gammafilter);
+            ((ScriptC_gammafilter)mScript).set_gammaValue(value);
+            ((ScriptC_gammafilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if(effectName.equalsIgnoreCase("rgb")){
+            mScript = new ScriptC_rgbfilter(mRS, resources, R.raw.rgbfilter);
+            ((ScriptC_rgbfilter)mScript).set_redValue(1.0f);
+            ((ScriptC_rgbfilter)mScript).set_greenValue(value);
+            ((ScriptC_rgbfilter)mScript).set_blueValue(1.0f);
+            ((ScriptC_rgbfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("opacity")) {
+            mScript = new ScriptC_opacityfilter(mRS, resources, R.raw.opacityfilter);
+            ((ScriptC_opacityfilter)mScript).set_opacityValue(value);
+            ((ScriptC_opacityfilter) mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("luminancethreshold")) {
+            mScript = new ScriptC_luminancethresholdfilter(mRS, resources, R.raw.luminancethresholdfilter);
+            ((ScriptC_luminancethresholdfilter)mScript).set_thresholdValue(value);
+            ((ScriptC_luminancethresholdfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("tonecurve")) {
+            mScript = new ToneCurveFilter(mRS, resources, R.raw.tonecurvefilter);
+            ArrayList<PointF> blueCurvePF = new ArrayList<PointF>();
+            blueCurvePF.add(new PointF(0.0f, 0.0f));
+            blueCurvePF.add(new PointF(0.5f, value));
+            blueCurvePF.add(new PointF(1.0f, 0.75f));
+            ((ToneCurveFilter)mScript).setBlueControlPoints(blueCurvePF);
+            ((ToneCurveFilter)mScript).updateToneCurveTexture();
+            ((ToneCurveFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gaussianblur")) {
+            mScript = new GaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((GaussianBlurFilter)mScript).setBlurSize(value);
+            ((GaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((GaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((GaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }
+//        else if (effectName.equalsIgnoreCase("gaussianselectiveblur")) {
+//            mScript = new SelectiveGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+//            ((SelectiveGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+//            ((SelectiveGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+//            ((SelectiveGaussianBlurFilter)mScript).set_excludeCircleRadius(value);
+//            ((SelectiveGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+//        } else if (effectName.equalsIgnoreCase("tiltshift")) {
+//            mScript = new TiltShiftGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+//            ((TiltShiftGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+//            ((TiltShiftGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+//            ((TiltShiftGaussianBlurFilter)mScript).set_topFocusLevel(value-0.1f);
+//            ((TiltShiftGaussianBlurFilter)mScript).set_bottomFocusLevel(value+0.1f);
+//            ((TiltShiftGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+//        }
+//        else if (effectName.equalsIgnoreCase("tiltshiftvertical")) {
+//            mScript = new TiltShiftGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+//            ((TiltShiftGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+//            ((TiltShiftGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+//            ((TiltShiftGaussianBlurFilter)mScript).set_topFocusLevel(value-0.1f);
+//            ((TiltShiftGaussianBlurFilter)mScript).set_bottomFocusLevel(value+0.1f);
+//            ((TiltShiftGaussianBlurFilter)mScript).set_direction(0);
+//            ((TiltShiftGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+//        }
+    }
+}
diff --git a/rs_sample/src/main/java/com/caguilar/android/filters/samples/FiltersActivity.java b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FiltersActivity.java
new file mode 100644
index 00000000..8e37d048
--- /dev/null
+++ b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FiltersActivity.java
@@ -0,0 +1,104 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+import java.util.ArrayList;
+
+public class FiltersActivity extends Activity {
+    protected ArrayList<FilterObject> list;
+    boolean staticView = true;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.demo);
+        list = loadFilters();
+        ListView elv = (ListView)findViewById(android.R.id.list);
+        FiltersListAdapter myAdapter = new FiltersListAdapter(R.layout.listchild,list);
+        elv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
+                FilterObject child = (FilterObject)list.get(position);
+                Intent i;
+                if(staticView){
+                    i = new Intent(FiltersActivity.this, StaticFilterTestActivity.class);
+                }else{
+                    i = new Intent(FiltersActivity.this, LiveFilterTestActivity.class);
+                }
+
+                i.putExtra("filter",child.getValue());
+                i.putExtra("defaultValue",child.getDefaultValue());
+                i.putExtra("minusValue",child.getMinusValue());
+                i.putExtra("maxValue",child.getMaxValue());
+                i.putExtra("divisionValue",child.getDivisorValue());
+                startActivity(i);
+            }
+        });
+        elv.setAdapter(myAdapter);
+    }
+
+    public ArrayList<FilterObject> loadFilters(){
+        return new ArrayList<FilterObject>(){{
+            add(new FilterObject("Basic","basic",50,100,0,1));
+            add(new FilterObject("Saturation","saturation",100,200,0,100));
+            add(new FilterObject("Contrast","contrast",200,400,100,100));
+            add(new FilterObject("Brightness","brightness",100,200,100,100));
+            add(new FilterObject("Exposure","exposure",1000,2000,1000,100));
+            add(new FilterObject("RGB","rgb",100,200,0,100));
+            add(new FilterObject("Hue","hue",90,360,0,1));
+            add(new FilterObject("Monochrome","monochrome",50,100,0,100));
+            add(new FilterObject("Gamma","gamma",100,300,0,100));
+            add(new FilterObject("Sepia","sepia",50,100,0,1));
+            add(new FilterObject("Gray Scale","grayscale",50,100,0,1));
+            add(new FilterObject("Invert Color","invertcolor",50,100,0,1));
+            add(new FilterObject("Luminance Threshold","luminancethreshold",50,100,0,100));
+            add(new FilterObject("Halftone","halftone",100,500,0,10000));
+            add(new FilterObject("Tone Curve","tonecurve",50000,100000,0,100000));
+            add(new FilterObject("Gaussian Blur","gaussianblur",50000,400000,0,100000));
+            add(new FilterObject("Selective Gaussian Blur","gaussianselectiveblur",18750,75000,0,100000));
+            add(new FilterObject("TiltShift","tiltshift",30000,60000,-20000,100000));
+            add(new FilterObject("TiltShift Vertical","tiltshiftvertical",30000,60000,-20000,100000));
+            add(new FilterObject("Opacity","opacity",100,100,0,100));
+        }};
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        if(staticView){
+            menu.add(0,0,0,"Live").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        }else{
+            menu.add(0,0,0,"Static").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        }
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        staticView = !staticView;
+        invalidateOptionsMenu();
+        return super.onOptionsItemSelected(item);
+    }
+}
\ No newline at end of file
diff --git a/rs_sample/src/main/java/com/caguilar/android/filters/samples/FiltersListAdapter.java b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FiltersListAdapter.java
new file mode 100644
index 00000000..6ef572e2
--- /dev/null
+++ b/rs_sample/src/main/java/com/caguilar/android/filters/samples/FiltersListAdapter.java
@@ -0,0 +1,79 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.content.Context;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+
+public class FiltersListAdapter extends BaseAdapter {
+	/*-------------------------- Fields --------------------------*/
+
+	private ArrayList<FilterObject> list = new ArrayList<FilterObject>();
+	private int layout;
+
+	/*-------------------------- Public --------------------------*/
+
+	public FiltersListAdapter(int inLayout,ArrayList<FilterObject> inList) {
+		layout = inLayout;
+        list = inList;
+	}
+
+    @Override
+    public int getCount() {
+        return list.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return list.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        Context context = parent.getContext();
+        LinearLayout linear;
+        TextView modName;
+        if(convertView==null){
+            LayoutInflater inflater = LayoutInflater.from(context);
+            View v = inflater.inflate(layout, parent, false);
+            linear = (LinearLayout) v.findViewById(R.id.listchild);
+
+            linear.setOrientation(LinearLayout.VERTICAL);
+            modName  = (TextView) linear.findViewById(R.id.actname);
+            modName.setGravity(Gravity.LEFT|Gravity.CENTER_VERTICAL);
+            modName.setPadding((int)(12.0f*context.getResources().getDisplayMetrics().density),0,0,0);
+        }else{
+            linear = (LinearLayout)convertView;
+            modName  = (TextView) linear.findViewById(R.id.actname);
+        }
+        modName.setText(list.get(position).getName());
+        return linear;
+    }
+}
\ No newline at end of file
diff --git a/rs_sample/src/main/java/com/caguilar/android/filters/samples/LiveFilterTestActivity.java b/rs_sample/src/main/java/com/caguilar/android/filters/samples/LiveFilterTestActivity.java
new file mode 100644
index 00000000..54e49404
--- /dev/null
+++ b/rs_sample/src/main/java/com/caguilar/android/filters/samples/LiveFilterTestActivity.java
@@ -0,0 +1,406 @@
+/*
+ * Copyright (C) 2012 Cesar Aguilar
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.caguilar.android.filters.samples;
+
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.ImageFormat;
+import android.graphics.Matrix;
+import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.renderscript.Allocation;
+import android.renderscript.RenderScript;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.TextureView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+import com.caguilar.android.filters.scripts.Yuv2Rgb;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.TreeSet;
+
+/**
+ * Tests for manual verification of the CDD-required camera output formats
+ * for preview callbacks
+ */
+public class LiveFilterTestActivity extends Activity
+        implements TextureView.SurfaceTextureListener, Camera.PreviewCallback, SeekBar.OnSeekBarChangeListener {
+    private TextureView mPreviewView;
+    private SurfaceTexture mPreviewTexture;
+    private int mPreviewTexWidth;
+    private int mPreviewTexHeight;
+    private ImageView mFormatView;
+    private Camera mCamera;
+    private Camera.Size mPreviewSize;
+    private Bitmap mCallbackBitmap;
+    private Bitmap mPreCallbackBitmap;
+
+    private static final int STATE_OFF = 0;
+    private static final int STATE_PREVIEW = 1;
+    private static final int STATE_NO_CALLBACKS = 2;
+    private int mState = STATE_OFF;
+    private boolean mProcessInProgress = false;
+    private RenderScript mRS;
+//    private RsYuv mFilterYuv;
+    boolean FRONT;
+
+    Allocation mInAllocation;
+    Allocation mOutAllocation;
+    Yuv2Rgb mScript;
+    float mCurrentValue;
+    String mCurrentEffect;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCurrentEffect = getIntent().getStringExtra("filter");
+        setTitle(mCurrentEffect);
+        setContentView(R.layout.livefiltersample);
+        mPreviewView = (TextureView) findViewById(R.id.preview_view);
+        mFormatView = (ImageView) findViewById(R.id.format_view);
+        mPreviewView.setSurfaceTextureListener(this);
+        mRS = RenderScript.create(this);
+
+        if(Camera.getNumberOfCameras()>1){
+            findViewById(R.id.flip_button).setVisibility(View.VISIBLE);
+            findViewById(R.id.flip_button).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if(FRONT){
+                        FRONT = false;
+                        setUpCamera(0);
+                    }else{
+                        FRONT = true;
+                        setUpCamera(1);
+                    }
+
+                }
+            });
+        }
+
+        if(findViewById(R.id.valueBar)!=null){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            bar.setOnSeekBarChangeListener(this);
+            bar.setMax((int)getIntent().getFloatExtra("maxValue",0.0f));
+            bar.setProgress((int)getIntent().getFloatExtra("defaultValue",100.0f));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
+        doChange(seekBar);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        doChange(seekBar);
+    }
+
+    public void doChange(SeekBar seekBar){
+        float newI = seekBar.getProgress();
+        newI = newI- getIntent().getFloatExtra("minusValue", 0.0f);
+        mCurrentValue = newI/getIntent().getFloatExtra("divisionValue", 1.0f);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        setUpCamera(0);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        shutdownCamera();
+    }
+
+    public void onSurfaceTextureAvailable(SurfaceTexture surface,
+                                          int width, int height) {
+        mPreviewTexture = surface;
+        mPreviewTexWidth = width;
+        mPreviewTexHeight = height;
+        if (mCamera != null) {
+            startPreview();
+        }
+    }
+
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
+        // Ignored, Camera does all the work for us
+    }
+
+    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
+        return true;
+    }
+
+    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+        // Invoked every time there's a new Camera preview frame
+    }
+
+    private void setUpCamera(int id) {
+        shutdownCamera();
+        mCamera = Camera.open(id);
+        if (mPreviewTexture != null) {
+            startPreview();
+        }
+    }
+
+    public Camera.Size getOptimalPreviewSize(List<Camera.Size> sizes, int w, int h) {
+        final double ASPECT_TOLERANCE = 0.001;
+        double targetRatio = (double) w / h;
+        if (sizes == null) return null;
+
+        Camera.Size optimalSize = null;
+        double minDiff = Double.MAX_VALUE;
+
+        int targetHeight = Math.min(h, w);
+
+        // Try to find an size match aspect ratio and size
+        for (Camera.Size size : sizes) {
+            double ratio = (double) size.width / size.height;
+            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
+            if (Math.abs(size.height - targetHeight) < minDiff) {
+                optimalSize = size;
+                minDiff = Math.abs(size.height - targetHeight);
+            }
+        }
+
+        // Cannot find the one match the aspect ratio, ignore the requirement
+        if (optimalSize == null) {
+            minDiff = Double.MAX_VALUE;
+            for (Camera.Size size : sizes) {
+                if (Math.abs(size.height - targetHeight) < minDiff) {
+                    optimalSize = size;
+                    minDiff = Math.abs(size.height - targetHeight);
+                }
+            }
+        }
+        return optimalSize;
+    }
+
+    private void shutdownCamera() {
+        if (mCamera != null) {
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mCamera.release();
+            mCamera = null;
+            mState = STATE_OFF;
+        }
+    }
+
+    public void setupPreviewSize(){
+        Camera.Parameters p = mCamera.getParameters();
+        List<Camera.Size> unsortedSizes = p.getSupportedPreviewSizes();
+        class SizeCompare implements Comparator<Camera.Size> {
+            public int compare(Camera.Size lhs, Camera.Size rhs) {
+                if (lhs.width < rhs.width) return -1;
+                if (lhs.width > rhs.width) return 1;
+                if (lhs.height < rhs.height) return -1;
+                if (lhs.height > rhs.height) return 1;
+                return 0;
+            }
+        };
+        SizeCompare s = new SizeCompare();
+        TreeSet<Camera.Size> sortedResolutions = new TreeSet<Camera.Size>(s);
+        sortedResolutions.addAll(unsortedSizes);
+        List<Camera.Size> mPreviewSizes = new ArrayList<Camera.Size>(sortedResolutions);
+        mPreviewSize = getOptimalPreviewSize(mPreviewSizes, mPreviewTexWidth, mPreviewTexHeight);
+        mPreviewSize.width=1280;
+        mPreviewSize.height=720;
+    }
+
+    private void startPreview() {
+        if (mState != STATE_OFF) {
+            // Stop for a while to drain callbacks
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mState = STATE_OFF;
+            Handler h = new Handler();
+            Runnable mDelayedPreview = new Runnable() {
+                public void run() {
+                    startPreview();
+                }
+            };
+            h.postDelayed(mDelayedPreview, 300);
+            return;
+        }
+        mState = STATE_PREVIEW;
+
+        setupPreviewSize();
+
+        Matrix transform = new Matrix();
+        float widthRatio = mPreviewSize.width / (float)mPreviewTexWidth;
+        float heightRatio = mPreviewSize.height / (float)mPreviewTexHeight;
+
+        transform.setScale(1, heightRatio/widthRatio);
+        transform.postTranslate(0,
+                mPreviewTexHeight * (1 - heightRatio/widthRatio)/2);
+
+        mPreviewView.setTransform(transform);
+
+        Camera.Parameters p = mCamera.getParameters();
+        p.setPreviewFormat(ImageFormat.NV21);
+        p.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
+        mCamera.setParameters(p);
+
+        mCamera.setPreviewCallbackWithBuffer(this);
+        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
+                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
+        for (int i=0; i < 4; i++) {
+            mCamera.addCallbackBuffer(new byte[expectedBytes]);
+        }
+        try {
+            mCamera.setPreviewTexture(mPreviewTexture);
+            mCamera.startPreview();
+        } catch (IOException ioe) {
+        }
+    }
+
+
+    private class ProcessPreviewDataTask extends AsyncTask<byte[], Void, Boolean> {
+        protected Boolean doInBackground(byte[]... datas) {
+            byte[] data = datas[0];
+            //mFilterYuv.execute(data, mPreCallbackBitmap);
+            try{
+                mInAllocation.copyFrom(mPreCallbackBitmap);
+            }catch (Throwable e){
+                mScript = new Yuv2Rgb(mRS,getResources(),R.raw.yuv2rgb);
+                mInAllocation = Allocation.createFromBitmap(mRS, mCallbackBitmap,
+                        Allocation.MipmapControl.MIPMAP_NONE,
+                        Allocation.USAGE_SCRIPT);
+                mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+                mOutAllocation.copyFrom(mPreCallbackBitmap);
+            }
+
+            //CONVERT TO RGB
+            mScript.convert(data,mPreCallbackBitmap.getWidth(),mPreCallbackBitmap.getHeight(), mOutAllocation);
+            mOutAllocation.copyTo(mCallbackBitmap);
+
+            /*mInAllocation.copyFrom(mPreCallbackBitmap);
+
+
+            FilterSystem.applyFilter(mInAllocation,mOutAllocation,mCurrentValue,mCurrentEffect,mRS,getResources(),mCallbackBitmap);
+            mOutAllocation.copyTo(mCallbackBitmap);
+            */
+            if(mCamera!=null){
+                mCamera.addCallbackBuffer(data);
+            }
+            mProcessInProgress = false;
+
+            return true;
+        }
+
+        protected void onPostExecute(Boolean result) {
+            mFormatView.invalidate();
+        }
+
+    }
+
+    public void onPreviewFrame(byte[] data, Camera camera) {
+        if (mProcessInProgress || mState != STATE_PREVIEW) {
+            mCamera.addCallbackBuffer(data);
+            return;
+        }
+        if (data == null) {
+            return;
+        }
+        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
+                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
+        if (expectedBytes != data.length) {
+            mState = STATE_NO_CALLBACKS;
+            mCamera.setPreviewCallbackWithBuffer(null);
+            return;
+        }
+        mProcessInProgress = true;
+        if (mCallbackBitmap == null ||
+                mPreviewSize.width != mCallbackBitmap.getWidth() ||
+                mPreviewSize.height != mCallbackBitmap.getHeight() ) {
+            mCallbackBitmap =
+                    Bitmap.createBitmap(
+                            mPreviewSize.width, mPreviewSize.height,
+                            Bitmap.Config.ARGB_8888);
+            mPreCallbackBitmap =
+                    Bitmap.createBitmap(
+                            mPreviewSize.width, mPreviewSize.height,
+                            Bitmap.Config.ARGB_8888);
+            //mFilterYuv = new RsYuv(mRS, getResources(), mPreviewSize.width, mPreviewSize.height);
+            mFormatView.setImageBitmap(mCallbackBitmap);
+        }
+        mFormatView.invalidate();
+        mCamera.addCallbackBuffer(data);
+        mProcessInProgress = true;
+        new ProcessPreviewDataTask().execute(data);
+        try {
+            Thread.sleep(5);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(1,1,1,"Values").setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId()==1){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            float newI = bar.getProgress();
+            newI = newI- Float.parseFloat(getIntent().getStringExtra("minusValue"));
+            float value = newI/Float.parseFloat(getIntent().getStringExtra("divisionValue"));
+            makeDialog(value+"","Value");
+        }
+        return true;
+    }
+
+    public AlertDialog makeDialog(String message, String title) {
+        if (isFinishing())
+            return null;
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getParent() != null ? getParent() : this);
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setTitle(title)
+                .setPositiveButton(
+                        "OK",
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alert = builder.create();
+        alert.show();
+        return alert;
+    }
+}
\ No newline at end of file
diff --git a/rs_sample/src/main/java/com/caguilar/android/filters/samples/StaticFilterTestActivity.java b/rs_sample/src/main/java/com/caguilar/android/filters/samples/StaticFilterTestActivity.java
new file mode 100644
index 00000000..c4aa0615
--- /dev/null
+++ b/rs_sample/src/main/java/com/caguilar/android/filters/samples/StaticFilterTestActivity.java
@@ -0,0 +1,144 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Bundle;
+import android.renderscript.Allocation;
+import android.renderscript.RenderScript;
+import android.util.DisplayMetrics;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+
+public class StaticFilterTestActivity extends Activity implements SeekBar.OnSeekBarChangeListener {
+
+    Bitmap originalBitmap;
+    Bitmap filteredBitmap;
+    ImageView imageView;
+    RenderScript mRS;
+    Allocation mInAllocation;
+    Allocation mOutAllocation;
+    String mCurrentEffect;
+
+    /**
+     * Called when the activity is first created.
+     */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCurrentEffect = getIntent().getStringExtra("filter");
+        setTitle(mCurrentEffect);
+        setContentView(R.layout.filtersample);
+        imageView = (ImageView)findViewById(R.id.imageView);
+        BitmapFactory.Options opts = new BitmapFactory.Options();
+        opts.inDensity = DisplayMetrics.DENSITY_XHIGH;
+        opts.inScaled = false;
+        opts.inTargetDensity = DisplayMetrics.DENSITY_XHIGH;
+        originalBitmap = BitmapFactory.decodeResource(getResources(),R.drawable.gatesmall,opts);
+        filteredBitmap = Bitmap.createBitmap(originalBitmap.getWidth(),originalBitmap.getHeight(), Bitmap.Config.ARGB_8888);
+        imageView.setImageBitmap(originalBitmap);
+        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
+
+
+        //RENDERSCRIPT ALLOCATION
+        mRS = RenderScript.create(this);
+        mInAllocation = Allocation.createFromBitmap(mRS, originalBitmap,
+                Allocation.MipmapControl.MIPMAP_NONE,
+                Allocation.USAGE_SCRIPT);
+        mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+        mOutAllocation.copyFrom(originalBitmap);
+        mOutAllocation.copyTo(filteredBitmap);
+
+        if(findViewById(R.id.valueBar)!=null){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            bar.setOnSeekBarChangeListener(this);
+            bar.setMax((int)getIntent().getFloatExtra("maxValue",0.0f));
+            bar.setProgress((int)getIntent().getFloatExtra("defaultValue",100.0f));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
+        doChange(seekBar);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        doChange(seekBar);
+    }
+
+    public void doChange(SeekBar seekBar){
+        float newI = seekBar.getProgress();
+        newI = newI- getIntent().getFloatExtra("minusValue", 0.0f);
+        float value = newI/getIntent().getFloatExtra("divisionValue", 1.0f);
+
+        FilterSystem.applyFilter(mInAllocation,mOutAllocation,value,mCurrentEffect,mRS,getResources(),originalBitmap);
+
+        mOutAllocation.copyTo(filteredBitmap);
+        imageView.setImageBitmap(filteredBitmap);
+    }
+
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(1,1,1,"Values").setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId()==1){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            float newI = bar.getProgress();
+            newI = newI- Float.parseFloat(getIntent().getStringExtra("minusValue"));
+            float value = newI/Float.parseFloat(getIntent().getStringExtra("divisionValue"));
+            makeDialog(value+"","Value");
+        }
+        return true;
+    }
+
+    public AlertDialog makeDialog(String message, String title) {
+        if (isFinishing())
+            return null;
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getParent() != null ? getParent() : this);
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setTitle(title)
+                .setPositiveButton(
+                        "OK",
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alert = builder.create();
+        alert.show();
+        return alert;
+    }
+}
diff --git a/rs_sample/src/main/res/drawable/gate.png b/rs_sample/src/main/res/drawable/gate.png
new file mode 100644
index 00000000..5f308c88
Binary files /dev/null and b/rs_sample/src/main/res/drawable/gate.png differ
diff --git a/rs_sample/src/main/res/drawable/gatemedium.png b/rs_sample/src/main/res/drawable/gatemedium.png
new file mode 100644
index 00000000..415fa56d
Binary files /dev/null and b/rs_sample/src/main/res/drawable/gatemedium.png differ
diff --git a/rs_sample/src/main/res/drawable/gatesmall.png b/rs_sample/src/main/res/drawable/gatesmall.png
new file mode 100644
index 00000000..66e99274
Binary files /dev/null and b/rs_sample/src/main/res/drawable/gatesmall.png differ
diff --git a/rs_sample/src/main/res/drawable/ic_launcher.png b/rs_sample/src/main/res/drawable/ic_launcher.png
new file mode 100644
index 00000000..a07c69fa
Binary files /dev/null and b/rs_sample/src/main/res/drawable/ic_launcher.png differ
diff --git a/rs_sample/src/main/res/layout/demo.xml b/rs_sample/src/main/res/layout/demo.xml
new file mode 100644
index 00000000..08960c93
--- /dev/null
+++ b/rs_sample/src/main/res/layout/demo.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="wrap_content"
+>
+    <ListView android:id="@android:id/android:list" android:layout_height="wrap_content" android:layout_width="match_parent"></ListView>
+</LinearLayout>
diff --git a/rs_sample/src/main/res/layout/filtersample.xml b/rs_sample/src/main/res/layout/filtersample.xml
new file mode 100644
index 00000000..f4c4cc0b
--- /dev/null
+++ b/rs_sample/src/main/res/layout/filtersample.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+
+    <ImageView
+            android:id="@+id/imageView"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+
+    <SeekBar android:id="@+id/valueBar"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+            />
+
+</RelativeLayout>
+
diff --git a/rs_sample/src/main/res/layout/list.xml b/rs_sample/src/main/res/layout/list.xml
new file mode 100644
index 00000000..098d4eb5
--- /dev/null
+++ b/rs_sample/src/main/res/layout/list.xml
@@ -0,0 +1,18 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/listlayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <ListView
+        android:id="@+id/thr_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentTop="true"
+        android:layout_alignWithParentIfMissing="true"
+        android:layout_centerHorizontal="true"
+        android:background="#00000000"
+        android:cacheColorHint="#00000000"
+        android:overScrollFooter="@null" />
+
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/rs_sample/src/main/res/layout/listchild.xml b/rs_sample/src/main/res/layout/listchild.xml
new file mode 100644
index 00000000..93b7899e
--- /dev/null
+++ b/rs_sample/src/main/res/layout/listchild.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:id="@+id/listchild">
+	<TextView android:layout_width="fill_parent"
+		android:layout_height="fill_parent" android:id="@+id/actname"
+		android:height="40dp" android:clickable="false" android:textSize="20sp"
+		android:gravity="right|center_horizontal" />
+</LinearLayout>
\ No newline at end of file
diff --git a/rs_sample/src/main/res/layout/listitem.xml b/rs_sample/src/main/res/layout/listitem.xml
new file mode 100644
index 00000000..0e6e38c8
--- /dev/null
+++ b/rs_sample/src/main/res/layout/listitem.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:id="@+id/titlebar">
+	<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+		android:layout_width="fill_parent" android:padding="10dp"
+		android:textSize="22sp" android:height="50dp" android:layout_height="fill_parent"
+		android:id="@+id/titletext">
+	</TextView>
+</LinearLayout>
\ No newline at end of file
diff --git a/rs_sample/src/main/res/layout/livefiltersample.xml b/rs_sample/src/main/res/layout/livefiltersample.xml
new file mode 100644
index 00000000..cd340acd
--- /dev/null
+++ b/rs_sample/src/main/res/layout/livefiltersample.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+
+    <TextureView
+            android:id="@+id/preview_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <FrameLayout android:layout_width="match_parent"
+                 android:layout_height="match_parent"
+            android:background="#000000"/>
+
+    <ImageView
+            android:id="@+id/format_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <Button android:id="@+id/flip_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentRight="true"
+            android:text="flip"
+            android:visibility="gone"/>
+
+    <SeekBar android:id="@+id/valueBar"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+            />
+
+</RelativeLayout>
+
diff --git a/rs_sample/src/main/res/values/strings.xml b/rs_sample/src/main/res/values/strings.xml
new file mode 100644
index 00000000..e1527aa5
--- /dev/null
+++ b/rs_sample/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">RSImage</string>
+</resources>
\ No newline at end of file
diff --git a/rssample/AndroidManifest.xml b/rssample/AndroidManifest.xml
new file mode 100644
index 00000000..7084f8c5
--- /dev/null
+++ b/rssample/AndroidManifest.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.caguilar.android.filters.samples"
+        >
+    <uses-sdk android:minSdkVersion="14" android:targetSdkVersion="16"/>
+     <application android:icon="@drawable/ic_launcher"
+                 android:label="@string/app_name">
+        <activity
+                android:name="com.caguilar.android.filters.samples.FiltersActivity"
+                android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.DEFAULT"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+                android:name=".StaticFilterTestActivity"
+                android:label="@string/app_name" />
+        <activity
+                android:name=".LiveFilterTestActivity"
+                android:label="@string/app_name" />
+    </application>
+    <uses-permission android:name="android.permission.CAMERA" />
+</manifest>
diff --git a/rssample/assets/intents.xml b/rssample/assets/intents.xml
new file mode 100644
index 00000000..a7e32fe3
--- /dev/null
+++ b/rssample/assets/intents.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<document>
+    <type>
+        <name>Filter Test</name>
+        <filters>
+            <filter>
+                <name>Brightness</name>
+            </filter>
+            <filter>
+                <name>Exposure</name>
+            </filter>
+            <filter>
+                <name>Contrast</name>
+            </filter>
+            <filter>
+                <name>Saturation</name>
+            </filter>
+            <filter>
+                <name>Hue</name>
+            </filter>
+            <filter>
+                <name>Gamma</name>
+            </filter>
+            <filter>
+                <name>Sepia</name>
+            </filter>
+            <filter>
+                <name>Gray Scale</name>
+            </filter>
+            <filter>
+                <name>Invert Color</name>
+            </filter>
+            <filter>
+                <name>RGB</name>
+            </filter>
+            <filter>
+                <name>Monochrome</name>
+            </filter>
+            <filter>
+                <name>Opacity</name>
+            </filter>
+            <filter>
+                <name>Luminance Threshold</name>
+            </filter>
+            <filter>
+                <name>Halftone</name>
+            </filter>
+            <filter>
+                <name>Tone Curve</name>
+            </filter>
+            <filter>
+                <name>Gaussian Blur</name>
+            </filter>
+            <filter>
+                <name>Selective Gaussian Blur</name>
+            </filter>
+            <filter>
+                <name>TiltShift</name>
+            </filter>
+        </filters>
+    </type>
+</document>
\ No newline at end of file
diff --git a/rssample/build.gradle b/rssample/build.gradle
new file mode 100644
index 00000000..f03bd585
--- /dev/null
+++ b/rssample/build.gradle
@@ -0,0 +1,40 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion COMPILE_SDK_VERSION as int
+    buildToolsVersion BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
+
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            resources.srcDirs = ['src']
+            aidl.srcDirs = ['src']
+            renderscript.srcDirs = ['src']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+
+        instrumentTest.setRoot('tests')
+    }
+
+    lintOptions {
+        abortOnError true
+    }
+}
+repositories {
+    jcenter()
+    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
+}
+
+dependencies {
+    compile project(':library')
+//    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
+    compile 'com.android.support:support-v4:23.1.1'
+}
\ No newline at end of file
diff --git a/rssample/ic_launcher-web.png b/rssample/ic_launcher-web.png
new file mode 100644
index 00000000..817b96c1
Binary files /dev/null and b/rssample/ic_launcher-web.png differ
diff --git a/rssample/proguard-project.txt b/rssample/proguard-project.txt
new file mode 100644
index 00000000..f2fe1559
--- /dev/null
+++ b/rssample/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/rssample/project.properties b/rssample/project.properties
new file mode 100644
index 00000000..24e0cbf3
--- /dev/null
+++ b/rssample/project.properties
@@ -0,0 +1,16 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-16
+proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+android.library.reference.1=../library
\ No newline at end of file
diff --git a/rssample/res/drawable-hdpi/ic_action_search.png b/rssample/res/drawable-hdpi/ic_action_search.png
new file mode 100644
index 00000000..67de12de
Binary files /dev/null and b/rssample/res/drawable-hdpi/ic_action_search.png differ
diff --git a/rssample/res/drawable-hdpi/ic_launcher.png b/rssample/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 00000000..301100c3
Binary files /dev/null and b/rssample/res/drawable-hdpi/ic_launcher.png differ
diff --git a/rssample/res/drawable-hdpi/ic_switch_camera.png b/rssample/res/drawable-hdpi/ic_switch_camera.png
new file mode 100644
index 00000000..0c8494e0
Binary files /dev/null and b/rssample/res/drawable-hdpi/ic_switch_camera.png differ
diff --git a/rssample/res/drawable-ldpi/ic_launcher.png b/rssample/res/drawable-ldpi/ic_launcher.png
new file mode 100644
index 00000000..6e1bfd53
Binary files /dev/null and b/rssample/res/drawable-ldpi/ic_launcher.png differ
diff --git a/rssample/res/drawable-mdpi/ic_action_search.png b/rssample/res/drawable-mdpi/ic_action_search.png
new file mode 100644
index 00000000..134d5490
Binary files /dev/null and b/rssample/res/drawable-mdpi/ic_action_search.png differ
diff --git a/rssample/res/drawable-mdpi/ic_launcher.png b/rssample/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 00000000..372e87fb
Binary files /dev/null and b/rssample/res/drawable-mdpi/ic_launcher.png differ
diff --git a/rssample/res/drawable-nodpi/lookup_amatorka.png b/rssample/res/drawable-nodpi/lookup_amatorka.png
new file mode 100644
index 00000000..4a2cc8ac
Binary files /dev/null and b/rssample/res/drawable-nodpi/lookup_amatorka.png differ
diff --git a/rssample/res/drawable-xhdpi/ic_action_search.png b/rssample/res/drawable-xhdpi/ic_action_search.png
new file mode 100644
index 00000000..d699c6b3
Binary files /dev/null and b/rssample/res/drawable-xhdpi/ic_action_search.png differ
diff --git a/rssample/res/drawable-xhdpi/ic_launcher.png b/rssample/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..d9de8e01
Binary files /dev/null and b/rssample/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/rssample/res/drawable/gate.png b/rssample/res/drawable/gate.png
new file mode 100644
index 00000000..5f308c88
Binary files /dev/null and b/rssample/res/drawable/gate.png differ
diff --git a/rssample/res/drawable/gatemedium.png b/rssample/res/drawable/gatemedium.png
new file mode 100644
index 00000000..415fa56d
Binary files /dev/null and b/rssample/res/drawable/gatemedium.png differ
diff --git a/rssample/res/drawable/gatesmall.png b/rssample/res/drawable/gatesmall.png
new file mode 100644
index 00000000..66e99274
Binary files /dev/null and b/rssample/res/drawable/gatesmall.png differ
diff --git a/rssample/res/drawable/ic_launcher.png b/rssample/res/drawable/ic_launcher.png
new file mode 100644
index 00000000..a07c69fa
Binary files /dev/null and b/rssample/res/drawable/ic_launcher.png differ
diff --git a/rssample/res/layout/activity_camera.xml b/rssample/res/layout/activity_camera.xml
new file mode 100644
index 00000000..16a64d0d
--- /dev/null
+++ b/rssample/res/layout/activity_camera.xml
@@ -0,0 +1,49 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <android.opengl.GLSurfaceView
+        android:id="@+id/surfaceView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_above="@+id/bar" />
+
+    <ImageView
+        android:id="@+id/img_switch_camera"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:padding="10dp"
+        android:src="@drawable/ic_switch_camera" />
+
+    <LinearLayout
+        android:id="@+id/bar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:background="#000000"
+        android:gravity="center_vertical"
+        android:orientation="horizontal" >
+
+        <SeekBar
+            android:id="@+id/seekBar"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:max="100" />
+
+        <Button
+            android:id="@+id/button_choose_filter"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Choose Filter" />
+
+        <ImageButton
+            android:id="@+id/button_capture"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@android:drawable/ic_menu_camera" />
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/rssample/res/layout/activity_gallery.xml b/rssample/res/layout/activity_gallery.xml
new file mode 100644
index 00000000..c2575162
--- /dev/null
+++ b/rssample/res/layout/activity_gallery.xml
@@ -0,0 +1,44 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#000000"
+    android:orientation="vertical">
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1">
+
+        <jp.co.cyberagent.android.gpuimage.GPUImageView
+            android:id="@+id/gpuimage"
+            android:layout_gravity="center"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+        <SeekBar
+            android:id="@+id/seekBar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:max="100" />
+    </FrameLayout>
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal">
+
+        <Button
+            android:id="@+id/button_choose_filter"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Choose filter" />
+
+        <Button
+            android:id="@+id/button_save"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Save" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/rssample/res/layout/activity_main.xml b/rssample/res/layout/activity_main.xml
new file mode 100644
index 00000000..6c13bf2f
--- /dev/null
+++ b/rssample/res/layout/activity_main.xml
@@ -0,0 +1,29 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <Button
+            android:id="@+id/button_gallery"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="10dp"
+            android:drawableTop="@android:drawable/ic_menu_gallery"
+            android:text="Gallery" />
+
+        <Button
+            android:id="@+id/button_camera"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:drawableTop="@android:drawable/ic_menu_camera"
+            android:text="Camera" />
+    </LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/rssample/res/layout/demo.xml b/rssample/res/layout/demo.xml
new file mode 100755
index 00000000..08960c93
--- /dev/null
+++ b/rssample/res/layout/demo.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="wrap_content"
+>
+    <ListView android:id="@android:id/android:list" android:layout_height="wrap_content" android:layout_width="match_parent"></ListView>
+</LinearLayout>
diff --git a/rssample/res/layout/filtersample.xml b/rssample/res/layout/filtersample.xml
new file mode 100644
index 00000000..f4c4cc0b
--- /dev/null
+++ b/rssample/res/layout/filtersample.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+
+    <ImageView
+            android:id="@+id/imageView"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+
+    <SeekBar android:id="@+id/valueBar"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+            />
+
+</RelativeLayout>
+
diff --git a/rssample/res/layout/list.xml b/rssample/res/layout/list.xml
new file mode 100644
index 00000000..098d4eb5
--- /dev/null
+++ b/rssample/res/layout/list.xml
@@ -0,0 +1,18 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/listlayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <ListView
+        android:id="@+id/thr_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentTop="true"
+        android:layout_alignWithParentIfMissing="true"
+        android:layout_centerHorizontal="true"
+        android:background="#00000000"
+        android:cacheColorHint="#00000000"
+        android:overScrollFooter="@null" />
+
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/rssample/res/layout/listchild.xml b/rssample/res/layout/listchild.xml
new file mode 100644
index 00000000..93b7899e
--- /dev/null
+++ b/rssample/res/layout/listchild.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:id="@+id/listchild">
+	<TextView android:layout_width="fill_parent"
+		android:layout_height="fill_parent" android:id="@+id/actname"
+		android:height="40dp" android:clickable="false" android:textSize="20sp"
+		android:gravity="right|center_horizontal" />
+</LinearLayout>
\ No newline at end of file
diff --git a/rssample/res/layout/listitem.xml b/rssample/res/layout/listitem.xml
new file mode 100644
index 00000000..0e6e38c8
--- /dev/null
+++ b/rssample/res/layout/listitem.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:id="@+id/titlebar">
+	<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+		android:layout_width="fill_parent" android:padding="10dp"
+		android:textSize="22sp" android:height="50dp" android:layout_height="fill_parent"
+		android:id="@+id/titletext">
+	</TextView>
+</LinearLayout>
\ No newline at end of file
diff --git a/rssample/res/layout/livefiltersample.xml b/rssample/res/layout/livefiltersample.xml
new file mode 100644
index 00000000..cd340acd
--- /dev/null
+++ b/rssample/res/layout/livefiltersample.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+
+    <TextureView
+            android:id="@+id/preview_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <FrameLayout android:layout_width="match_parent"
+                 android:layout_height="match_parent"
+            android:background="#000000"/>
+
+    <ImageView
+            android:id="@+id/format_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <Button android:id="@+id/flip_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentRight="true"
+            android:text="flip"
+            android:visibility="gone"/>
+
+    <SeekBar android:id="@+id/valueBar"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+            />
+
+</RelativeLayout>
+
diff --git a/rssample/res/raw/tone_cuver_sample.acv b/rssample/res/raw/tone_cuver_sample.acv
new file mode 100644
index 00000000..5b6c9555
Binary files /dev/null and b/rssample/res/raw/tone_cuver_sample.acv differ
diff --git a/rssample/res/values-v11/styles.xml b/rssample/res/values-v11/styles.xml
new file mode 100644
index 00000000..d408cbc3
--- /dev/null
+++ b/rssample/res/values-v11/styles.xml
@@ -0,0 +1,5 @@
+<resources>
+
+    <style name="AppTheme" parent="android:Theme.Holo.Light" />
+
+</resources>
\ No newline at end of file
diff --git a/rssample/res/values-v14/styles.xml b/rssample/res/values-v14/styles.xml
new file mode 100644
index 00000000..b76ce151
--- /dev/null
+++ b/rssample/res/values-v14/styles.xml
@@ -0,0 +1,6 @@
+<resources>
+
+    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar" />
+    <style name="AppTheme.Fullscreen" parent="android:Theme.Holo.Light.NoActionBar.Fullscreen" />
+
+</resources>
\ No newline at end of file
diff --git a/rssample/res/values/strings.xml b/rssample/res/values/strings.xml
new file mode 100644
index 00000000..e1527aa5
--- /dev/null
+++ b/rssample/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">RSImage</string>
+</resources>
\ No newline at end of file
diff --git a/rssample/res/values/styles.xml b/rssample/res/values/styles.xml
new file mode 100644
index 00000000..85b0de23
--- /dev/null
+++ b/rssample/res/values/styles.xml
@@ -0,0 +1,6 @@
+<resources>
+
+    <style name="AppTheme" parent="android:Theme.Light" />
+    <style name="AppTheme.NoActionBar" parent="android:Theme.Light.NoTitleBar.Fullscreen" />
+
+</resources>
\ No newline at end of file
diff --git a/rssample/src/com/caguilar/android/filters/samples/FilterObject.java b/rssample/src/com/caguilar/android/filters/samples/FilterObject.java
new file mode 100644
index 00000000..845fdfbf
--- /dev/null
+++ b/rssample/src/com/caguilar/android/filters/samples/FilterObject.java
@@ -0,0 +1,61 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+
+public class FilterObject {
+    private String value;
+    private float defaultValue;
+    private float minusValue;
+    private float maxValue;
+    private float divisorValue;
+    private String name;
+
+    public FilterObject(String name, String value, int defaultValue, int maxValue, int minusValue, int divisorValue) {
+        this.value = value;
+        this.name = name;
+        this.defaultValue = defaultValue;
+        this.maxValue = maxValue;
+        this.minusValue = minusValue;
+        this.divisorValue = divisorValue;
+
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public float getDefaultValue() {
+        return defaultValue;
+    }
+
+    public float getMinusValue() {
+        return minusValue;
+    }
+
+    public float getMaxValue() {
+        return maxValue;
+    }
+
+    public float getDivisorValue() {
+        return divisorValue;
+    }
+
+    public String getName() {
+        return name;
+    }
+}
diff --git a/rssample/src/com/caguilar/android/filters/samples/FilterSystem.java b/rssample/src/com/caguilar/android/filters/samples/FilterSystem.java
new file mode 100644
index 00000000..66df853a
--- /dev/null
+++ b/rssample/src/com/caguilar/android/filters/samples/FilterSystem.java
@@ -0,0 +1,152 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.PointF;
+import android.renderscript.Allocation;
+import android.renderscript.Float3;
+import android.renderscript.RenderScript;
+import android.renderscript.ScriptC;
+import com.caguilar.android.filters.scripts.GaussianBlurFilter;
+import com.caguilar.android.filters.scripts.HalftoneFilter;
+import com.caguilar.android.filters.scripts.HueFilter;
+import com.caguilar.android.filters.scripts.ScriptC_basicfilter;
+import com.caguilar.android.filters.scripts.ScriptC_brightnessfilter;
+import com.caguilar.android.filters.scripts.ScriptC_contrastfilter;
+import com.caguilar.android.filters.scripts.ScriptC_exposurefilter;
+import com.caguilar.android.filters.scripts.ScriptC_gammafilter;
+import com.caguilar.android.filters.scripts.ScriptC_grayscalefilter;
+import com.caguilar.android.filters.scripts.ScriptC_invertcolorfilter;
+import com.caguilar.android.filters.scripts.ScriptC_luminancethresholdfilter;
+import com.caguilar.android.filters.scripts.ScriptC_monochromefilter;
+import com.caguilar.android.filters.scripts.ScriptC_opacityfilter;
+import com.caguilar.android.filters.scripts.ScriptC_rgbfilter;
+import com.caguilar.android.filters.scripts.ScriptC_saturationfilter;
+//import com.caguilar.android.filters.scripts.SelectiveGaussianBlurFilter;
+import com.caguilar.android.filters.scripts.SepiaFilter;
+//import com.caguilar.android.filters.scripts.TiltShiftGaussianBlurFilter;
+import com.caguilar.android.filters.scripts.ToneCurveFilter;
+
+import java.util.ArrayList;
+
+public class FilterSystem {
+
+    public static void applyFilter(Allocation mInAllocation, Allocation mOutAllocation, float value, String effectName,
+                                   RenderScript mRS, Resources resources, Bitmap originalBitmap){
+        ScriptC mScript;
+        if(effectName.equalsIgnoreCase("basic")){
+            mScript = new ScriptC_basicfilter(mRS, resources, R.raw.basicfilter);
+            ((ScriptC_basicfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("saturation")){
+            mScript = new ScriptC_saturationfilter(mRS, resources, R.raw.saturationfilter);
+            ((ScriptC_saturationfilter)mScript).set_saturationValue(value);
+            ((ScriptC_saturationfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("contrast")){
+            mScript = new ScriptC_contrastfilter(mRS, resources, R.raw.contrastfilter);
+            ((ScriptC_contrastfilter)mScript).set_contrastValue(value);
+            ((ScriptC_contrastfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("brightness")){
+            mScript = new ScriptC_brightnessfilter(mRS, resources, R.raw.brightnessfilter);
+            ((ScriptC_brightnessfilter)mScript).set_brightnessValue(value);
+            ((ScriptC_brightnessfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("sepia")) {
+            mScript = new SepiaFilter(mRS, resources, R.raw.colormatrixfilter);
+            ((SepiaFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("grayscale")) {
+            mScript = new ScriptC_grayscalefilter(mRS, resources, R.raw.grayscalefilter);
+            ((ScriptC_grayscalefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("halftone")) {
+            mScript = new HalftoneFilter(mRS, resources, R.raw.halftonefilter);
+            ((HalftoneFilter)mScript).setInputSize(originalBitmap.getWidth(), originalBitmap.getHeight());
+            ((HalftoneFilter)mScript).set_fractionalWidthOfAPixel(value);
+            ((HalftoneFilter)mScript).set_inTexture(mInAllocation);
+            ((HalftoneFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("invertcolor")) {
+            mScript = new ScriptC_invertcolorfilter(mRS, resources, R.raw.invertcolorfilter);
+            ((ScriptC_invertcolorfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("hue")) {
+            mScript = new HueFilter(mRS, resources, R.raw.huefilter);
+            ((HueFilter)mScript).setHue(value);
+            ((HueFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("monochrome")) {
+            mScript = new ScriptC_monochromefilter(mRS, resources, R.raw.monochromefilter);
+            ((ScriptC_monochromefilter)mScript).set_intensityValue(value);
+            ((ScriptC_monochromefilter)mScript).set_filterColor(new Float3(0.0f, 0.0f, 1.0f));
+            ((ScriptC_monochromefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("exposure")) {
+            mScript = new ScriptC_exposurefilter(mRS, resources, R.raw.exposurefilter);
+            ((ScriptC_exposurefilter)mScript).set_exposureValue(value);
+            ((ScriptC_exposurefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gamma")) {
+            mScript = new ScriptC_gammafilter(mRS, resources, R.raw.gammafilter);
+            ((ScriptC_gammafilter)mScript).set_gammaValue(value);
+            ((ScriptC_gammafilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if(effectName.equalsIgnoreCase("rgb")){
+            mScript = new ScriptC_rgbfilter(mRS, resources, R.raw.rgbfilter);
+            ((ScriptC_rgbfilter)mScript).set_redValue(1.0f);
+            ((ScriptC_rgbfilter)mScript).set_greenValue(value);
+            ((ScriptC_rgbfilter)mScript).set_blueValue(1.0f);
+            ((ScriptC_rgbfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("opacity")) {
+            mScript = new ScriptC_opacityfilter(mRS, resources, R.raw.opacityfilter);
+            ((ScriptC_opacityfilter)mScript).set_opacityValue(value);
+            ((ScriptC_opacityfilter) mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("luminancethreshold")) {
+            mScript = new ScriptC_luminancethresholdfilter(mRS, resources, R.raw.luminancethresholdfilter);
+            ((ScriptC_luminancethresholdfilter)mScript).set_thresholdValue(value);
+            ((ScriptC_luminancethresholdfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("tonecurve")) {
+            mScript = new ToneCurveFilter(mRS, resources, R.raw.tonecurvefilter);
+            ArrayList<PointF> blueCurvePF = new ArrayList<PointF>();
+            blueCurvePF.add(new PointF(0.0f, 0.0f));
+            blueCurvePF.add(new PointF(0.5f, value));
+            blueCurvePF.add(new PointF(1.0f, 0.75f));
+            ((ToneCurveFilter)mScript).setBlueControlPoints(blueCurvePF);
+            ((ToneCurveFilter)mScript).updateToneCurveTexture();
+            ((ToneCurveFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gaussianblur")) {
+            mScript = new GaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((GaussianBlurFilter)mScript).setBlurSize(value);
+            ((GaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((GaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((GaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gaussianselectiveblur")) {
+            mScript = new SelectiveGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((SelectiveGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((SelectiveGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((SelectiveGaussianBlurFilter)mScript).set_excludeCircleRadius(value);
+            ((SelectiveGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("tiltshift")) {
+            mScript = new TiltShiftGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((TiltShiftGaussianBlurFilter)mScript).set_topFocusLevel(value-0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).set_bottomFocusLevel(value+0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("tiltshiftvertical")) {
+            mScript = new TiltShiftGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((TiltShiftGaussianBlurFilter)mScript).set_topFocusLevel(value-0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).set_bottomFocusLevel(value+0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).set_direction(0);
+            ((TiltShiftGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }
+    }
+}
diff --git a/rssample/src/com/caguilar/android/filters/samples/FiltersActivity.java b/rssample/src/com/caguilar/android/filters/samples/FiltersActivity.java
new file mode 100644
index 00000000..8e37d048
--- /dev/null
+++ b/rssample/src/com/caguilar/android/filters/samples/FiltersActivity.java
@@ -0,0 +1,104 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+import java.util.ArrayList;
+
+public class FiltersActivity extends Activity {
+    protected ArrayList<FilterObject> list;
+    boolean staticView = true;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.demo);
+        list = loadFilters();
+        ListView elv = (ListView)findViewById(android.R.id.list);
+        FiltersListAdapter myAdapter = new FiltersListAdapter(R.layout.listchild,list);
+        elv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
+                FilterObject child = (FilterObject)list.get(position);
+                Intent i;
+                if(staticView){
+                    i = new Intent(FiltersActivity.this, StaticFilterTestActivity.class);
+                }else{
+                    i = new Intent(FiltersActivity.this, LiveFilterTestActivity.class);
+                }
+
+                i.putExtra("filter",child.getValue());
+                i.putExtra("defaultValue",child.getDefaultValue());
+                i.putExtra("minusValue",child.getMinusValue());
+                i.putExtra("maxValue",child.getMaxValue());
+                i.putExtra("divisionValue",child.getDivisorValue());
+                startActivity(i);
+            }
+        });
+        elv.setAdapter(myAdapter);
+    }
+
+    public ArrayList<FilterObject> loadFilters(){
+        return new ArrayList<FilterObject>(){{
+            add(new FilterObject("Basic","basic",50,100,0,1));
+            add(new FilterObject("Saturation","saturation",100,200,0,100));
+            add(new FilterObject("Contrast","contrast",200,400,100,100));
+            add(new FilterObject("Brightness","brightness",100,200,100,100));
+            add(new FilterObject("Exposure","exposure",1000,2000,1000,100));
+            add(new FilterObject("RGB","rgb",100,200,0,100));
+            add(new FilterObject("Hue","hue",90,360,0,1));
+            add(new FilterObject("Monochrome","monochrome",50,100,0,100));
+            add(new FilterObject("Gamma","gamma",100,300,0,100));
+            add(new FilterObject("Sepia","sepia",50,100,0,1));
+            add(new FilterObject("Gray Scale","grayscale",50,100,0,1));
+            add(new FilterObject("Invert Color","invertcolor",50,100,0,1));
+            add(new FilterObject("Luminance Threshold","luminancethreshold",50,100,0,100));
+            add(new FilterObject("Halftone","halftone",100,500,0,10000));
+            add(new FilterObject("Tone Curve","tonecurve",50000,100000,0,100000));
+            add(new FilterObject("Gaussian Blur","gaussianblur",50000,400000,0,100000));
+            add(new FilterObject("Selective Gaussian Blur","gaussianselectiveblur",18750,75000,0,100000));
+            add(new FilterObject("TiltShift","tiltshift",30000,60000,-20000,100000));
+            add(new FilterObject("TiltShift Vertical","tiltshiftvertical",30000,60000,-20000,100000));
+            add(new FilterObject("Opacity","opacity",100,100,0,100));
+        }};
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        if(staticView){
+            menu.add(0,0,0,"Live").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        }else{
+            menu.add(0,0,0,"Static").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        }
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        staticView = !staticView;
+        invalidateOptionsMenu();
+        return super.onOptionsItemSelected(item);
+    }
+}
\ No newline at end of file
diff --git a/rssample/src/com/caguilar/android/filters/samples/FiltersListAdapter.java b/rssample/src/com/caguilar/android/filters/samples/FiltersListAdapter.java
new file mode 100644
index 00000000..3c514303
--- /dev/null
+++ b/rssample/src/com/caguilar/android/filters/samples/FiltersListAdapter.java
@@ -0,0 +1,80 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.content.Context;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import com.caguilar.android.filters.samples.R;
+
+import java.util.ArrayList;
+
+public class FiltersListAdapter extends BaseAdapter {
+	/*-------------------------- Fields --------------------------*/
+
+	private ArrayList<FilterObject> list = new ArrayList<FilterObject>();
+	private int layout;
+
+	/*-------------------------- Public --------------------------*/
+
+	public FiltersListAdapter(int inLayout,ArrayList<FilterObject> inList) {
+		layout = inLayout;
+        list = inList;
+	}
+
+    @Override
+    public int getCount() {
+        return list.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return list.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        Context context = parent.getContext();
+        LinearLayout linear;
+        TextView modName;
+        if(convertView==null){
+            LayoutInflater inflater = LayoutInflater.from(context);
+            View v = inflater.inflate(layout, parent, false);
+            linear = (LinearLayout) v.findViewById(R.id.listchild);
+
+            linear.setOrientation(LinearLayout.VERTICAL);
+            modName  = (TextView) linear.findViewById(R.id.actname);
+            modName.setGravity(Gravity.LEFT|Gravity.CENTER_VERTICAL);
+            modName.setPadding((int)(12.0f*context.getResources().getDisplayMetrics().density),0,0,0);
+        }else{
+            linear = (LinearLayout)convertView;
+            modName  = (TextView) linear.findViewById(R.id.actname);
+        }
+        modName.setText(list.get(position).getName());
+        return linear;
+    }
+}
\ No newline at end of file
diff --git a/rssample/src/com/caguilar/android/filters/samples/LiveFilterTestActivity.java b/rssample/src/com/caguilar/android/filters/samples/LiveFilterTestActivity.java
new file mode 100644
index 00000000..edd19323
--- /dev/null
+++ b/rssample/src/com/caguilar/android/filters/samples/LiveFilterTestActivity.java
@@ -0,0 +1,396 @@
+/*
+ * Copyright (C) 2012 Cesar Aguilar
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.caguilar.android.filters.samples;
+
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.ImageFormat;
+import android.graphics.Matrix;
+import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.renderscript.Allocation;
+import android.renderscript.RenderScript;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.TextureView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+import com.caguilar.android.filters.scripts.Yuv2Rgb;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.TreeSet;
+
+/**
+ * Tests for manual verification of the CDD-required camera output formats
+ * for preview callbacks
+ */
+public class LiveFilterTestActivity extends Activity
+        implements TextureView.SurfaceTextureListener, Camera.PreviewCallback, SeekBar.OnSeekBarChangeListener {
+    private TextureView mPreviewView;
+    private SurfaceTexture mPreviewTexture;
+    private int mPreviewTexWidth;
+    private int mPreviewTexHeight;
+    private ImageView mFormatView;
+    private Camera mCamera;
+    private Camera.Size mPreviewSize;
+    private Bitmap mCallbackBitmap;
+    private Bitmap mPreCallbackBitmap;
+
+    private static final int STATE_OFF = 0;
+    private static final int STATE_PREVIEW = 1;
+    private static final int STATE_NO_CALLBACKS = 2;
+    private int mState = STATE_OFF;
+    private boolean mProcessInProgress = false;
+    private RenderScript mRS;
+//    private RsYuv mFilterYuv;
+    boolean FRONT;
+
+    Allocation mInAllocation;
+    Allocation mOutAllocation;
+    Yuv2Rgb mScript;
+    float mCurrentValue;
+    String mCurrentEffect;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCurrentEffect = getIntent().getStringExtra("filter");
+        setTitle(mCurrentEffect);
+        setContentView(R.layout.livefiltersample);
+        mPreviewView = (TextureView) findViewById(R.id.preview_view);
+        mFormatView = (ImageView) findViewById(R.id.format_view);
+        mPreviewView.setSurfaceTextureListener(this);
+        mRS = RenderScript.create(this);
+
+        if(Camera.getNumberOfCameras()>1){
+            findViewById(R.id.flip_button).setVisibility(View.VISIBLE);
+            findViewById(R.id.flip_button).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if(FRONT){
+                        FRONT = false;
+                        setUpCamera(0);
+                    }else{
+                        FRONT = true;
+                        setUpCamera(1);
+                    }
+
+                }
+            });
+        }
+
+        if(findViewById(R.id.valueBar)!=null){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            bar.setOnSeekBarChangeListener(this);
+            bar.setMax((int)getIntent().getFloatExtra("maxValue",0.0f));
+            bar.setProgress((int)getIntent().getFloatExtra("defaultValue",100.0f));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
+        doChange(seekBar);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        doChange(seekBar);
+    }
+
+    public void doChange(SeekBar seekBar){
+        float newI = seekBar.getProgress();
+        newI = newI- getIntent().getFloatExtra("minusValue", 0.0f);
+        mCurrentValue = newI/getIntent().getFloatExtra("divisionValue", 1.0f);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        setUpCamera(0);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        shutdownCamera();
+    }
+
+    public void onSurfaceTextureAvailable(SurfaceTexture surface,
+                                          int width, int height) {
+        mPreviewTexture = surface;
+        mPreviewTexWidth = width;
+        mPreviewTexHeight = height;
+        if (mCamera != null) {
+            startPreview();
+        }
+    }
+
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
+        // Ignored, Camera does all the work for us
+    }
+
+    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
+        return true;
+    }
+
+    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+        // Invoked every time there's a new Camera preview frame
+    }
+
+    private void setUpCamera(int id) {
+        shutdownCamera();
+        mCamera = Camera.open(id);
+        if (mPreviewTexture != null) {
+            startPreview();
+        }
+    }
+
+    public Camera.Size getOptimalPreviewSize(List<Camera.Size> sizes, int w, int h) {
+        final double ASPECT_TOLERANCE = 0.001;
+        double targetRatio = (double) w / h;
+        if (sizes == null) return null;
+
+        Camera.Size optimalSize = null;
+        double minDiff = Double.MAX_VALUE;
+
+        int targetHeight = Math.min(h, w);
+
+        // Try to find an size match aspect ratio and size
+        for (Camera.Size size : sizes) {
+            double ratio = (double) size.width / size.height;
+            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
+            if (Math.abs(size.height - targetHeight) < minDiff) {
+                optimalSize = size;
+                minDiff = Math.abs(size.height - targetHeight);
+            }
+        }
+
+        // Cannot find the one match the aspect ratio, ignore the requirement
+        if (optimalSize == null) {
+            minDiff = Double.MAX_VALUE;
+            for (Camera.Size size : sizes) {
+                if (Math.abs(size.height - targetHeight) < minDiff) {
+                    optimalSize = size;
+                    minDiff = Math.abs(size.height - targetHeight);
+                }
+            }
+        }
+        return optimalSize;
+    }
+
+    private void shutdownCamera() {
+        if (mCamera != null) {
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mCamera.release();
+            mCamera = null;
+            mState = STATE_OFF;
+        }
+    }
+
+    public void setupPreviewSize(){
+        Camera.Parameters p = mCamera.getParameters();
+        List<Camera.Size> unsortedSizes = p.getSupportedPreviewSizes();
+        class SizeCompare implements Comparator<Camera.Size> {
+            public int compare(Camera.Size lhs, Camera.Size rhs) {
+                if (lhs.width < rhs.width) return -1;
+                if (lhs.width > rhs.width) return 1;
+                if (lhs.height < rhs.height) return -1;
+                if (lhs.height > rhs.height) return 1;
+                return 0;
+            }
+        };
+        SizeCompare s = new SizeCompare();
+        TreeSet<Camera.Size> sortedResolutions = new TreeSet<Camera.Size>(s);
+        sortedResolutions.addAll(unsortedSizes);
+        List<Camera.Size> mPreviewSizes = new ArrayList<Camera.Size>(sortedResolutions);
+        mPreviewSize = getOptimalPreviewSize(mPreviewSizes, mPreviewTexWidth, mPreviewTexHeight);
+    }
+
+    private void startPreview() {
+        if (mState != STATE_OFF) {
+            // Stop for a while to drain callbacks
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mState = STATE_OFF;
+            Handler h = new Handler();
+            Runnable mDelayedPreview = new Runnable() {
+                public void run() {
+                    startPreview();
+                }
+            };
+            h.postDelayed(mDelayedPreview, 300);
+            return;
+        }
+        mState = STATE_PREVIEW;
+
+        setupPreviewSize();
+
+        Matrix transform = new Matrix();
+        float widthRatio = mPreviewSize.width / (float)mPreviewTexWidth;
+        float heightRatio = mPreviewSize.height / (float)mPreviewTexHeight;
+
+        transform.setScale(1, heightRatio/widthRatio);
+        transform.postTranslate(0,
+                mPreviewTexHeight * (1 - heightRatio/widthRatio)/2);
+
+        mPreviewView.setTransform(transform);
+
+        Camera.Parameters p = mCamera.getParameters();
+        p.setPreviewFormat(ImageFormat.NV21);
+        p.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
+        mCamera.setParameters(p);
+
+        mCamera.setPreviewCallbackWithBuffer(this);
+        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
+                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
+        for (int i=0; i < 4; i++) {
+            mCamera.addCallbackBuffer(new byte[expectedBytes]);
+        }
+        try {
+            mCamera.setPreviewTexture(mPreviewTexture);
+            mCamera.startPreview();
+        } catch (IOException ioe) {
+        }
+    }
+
+
+    private class ProcessPreviewDataTask extends AsyncTask<byte[], Void, Boolean> {
+        protected Boolean doInBackground(byte[]... datas) {
+            byte[] data = datas[0];
+            //mFilterYuv.execute(data, mPreCallbackBitmap);
+            try{
+                mInAllocation.copyFrom(mPreCallbackBitmap);
+            }catch (Throwable e){
+                mScript = new Yuv2Rgb(mRS,getResources(),R.raw.yuv2rgb);
+                mInAllocation = Allocation.createFromBitmap(mRS, mCallbackBitmap,
+                        Allocation.MipmapControl.MIPMAP_NONE,
+                        Allocation.USAGE_SCRIPT);
+                mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+                mOutAllocation.copyFrom(mPreCallbackBitmap);
+            }
+
+            //CONVERT TO RGB
+            mScript.convert(data,mPreCallbackBitmap.getWidth(),mPreCallbackBitmap.getHeight(), mOutAllocation);
+            mOutAllocation.copyTo(mCallbackBitmap);
+//            mInAllocation.copyFrom(mPreCallbackBitmap);
+
+
+//            FilterSystem.applyFilter(mInAllocation,mOutAllocation,mCurrentValue,mCurrentEffect,mRS,getResources(),mCallbackBitmap);
+//            mOutAllocation.copyTo(mCallbackBitmap);
+            if(mCamera!=null){
+                mCamera.addCallbackBuffer(data);
+            }
+            mProcessInProgress = false;
+            return true;
+        }
+
+        protected void onPostExecute(Boolean result) {
+            mFormatView.invalidate();
+        }
+
+    }
+
+    public void onPreviewFrame(byte[] data, Camera camera) {
+        if (mProcessInProgress || mState != STATE_PREVIEW) {
+            mCamera.addCallbackBuffer(data);
+            return;
+        }
+        if (data == null) {
+            return;
+        }
+        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
+                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
+        if (expectedBytes != data.length) {
+            mState = STATE_NO_CALLBACKS;
+            mCamera.setPreviewCallbackWithBuffer(null);
+            return;
+        }
+        mProcessInProgress = true;
+        if (mCallbackBitmap == null ||
+                mPreviewSize.width != mCallbackBitmap.getWidth() ||
+                mPreviewSize.height != mCallbackBitmap.getHeight() ) {
+            mCallbackBitmap =
+                    Bitmap.createBitmap(
+                            mPreviewSize.width, mPreviewSize.height,
+                            Bitmap.Config.ARGB_8888);
+            mPreCallbackBitmap =
+                    Bitmap.createBitmap(
+                            mPreviewSize.width, mPreviewSize.height,
+                            Bitmap.Config.ARGB_8888);
+            //mFilterYuv = new RsYuv(mRS, getResources(), mPreviewSize.width, mPreviewSize.height);
+            mFormatView.setImageBitmap(mCallbackBitmap);
+        }
+        mFormatView.invalidate();
+        mCamera.addCallbackBuffer(data);
+        mProcessInProgress = true;
+        new ProcessPreviewDataTask().execute(data);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(1,1,1,"Values").setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId()==1){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            float newI = bar.getProgress();
+            newI = newI- Float.parseFloat(getIntent().getStringExtra("minusValue"));
+            float value = newI/Float.parseFloat(getIntent().getStringExtra("divisionValue"));
+            makeDialog(value+"","Value");
+        }
+        return true;
+    }
+
+    public AlertDialog makeDialog(String message, String title) {
+        if (isFinishing())
+            return null;
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getParent() != null ? getParent() : this);
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setTitle(title)
+                .setPositiveButton(
+                        "OK",
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alert = builder.create();
+        alert.show();
+        return alert;
+    }
+}
\ No newline at end of file
diff --git a/rssample/src/com/caguilar/android/filters/samples/StaticFilterTestActivity.java b/rssample/src/com/caguilar/android/filters/samples/StaticFilterTestActivity.java
new file mode 100644
index 00000000..c4aa0615
--- /dev/null
+++ b/rssample/src/com/caguilar/android/filters/samples/StaticFilterTestActivity.java
@@ -0,0 +1,144 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Bundle;
+import android.renderscript.Allocation;
+import android.renderscript.RenderScript;
+import android.util.DisplayMetrics;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+
+public class StaticFilterTestActivity extends Activity implements SeekBar.OnSeekBarChangeListener {
+
+    Bitmap originalBitmap;
+    Bitmap filteredBitmap;
+    ImageView imageView;
+    RenderScript mRS;
+    Allocation mInAllocation;
+    Allocation mOutAllocation;
+    String mCurrentEffect;
+
+    /**
+     * Called when the activity is first created.
+     */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCurrentEffect = getIntent().getStringExtra("filter");
+        setTitle(mCurrentEffect);
+        setContentView(R.layout.filtersample);
+        imageView = (ImageView)findViewById(R.id.imageView);
+        BitmapFactory.Options opts = new BitmapFactory.Options();
+        opts.inDensity = DisplayMetrics.DENSITY_XHIGH;
+        opts.inScaled = false;
+        opts.inTargetDensity = DisplayMetrics.DENSITY_XHIGH;
+        originalBitmap = BitmapFactory.decodeResource(getResources(),R.drawable.gatesmall,opts);
+        filteredBitmap = Bitmap.createBitmap(originalBitmap.getWidth(),originalBitmap.getHeight(), Bitmap.Config.ARGB_8888);
+        imageView.setImageBitmap(originalBitmap);
+        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
+
+
+        //RENDERSCRIPT ALLOCATION
+        mRS = RenderScript.create(this);
+        mInAllocation = Allocation.createFromBitmap(mRS, originalBitmap,
+                Allocation.MipmapControl.MIPMAP_NONE,
+                Allocation.USAGE_SCRIPT);
+        mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+        mOutAllocation.copyFrom(originalBitmap);
+        mOutAllocation.copyTo(filteredBitmap);
+
+        if(findViewById(R.id.valueBar)!=null){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            bar.setOnSeekBarChangeListener(this);
+            bar.setMax((int)getIntent().getFloatExtra("maxValue",0.0f));
+            bar.setProgress((int)getIntent().getFloatExtra("defaultValue",100.0f));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
+        doChange(seekBar);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        doChange(seekBar);
+    }
+
+    public void doChange(SeekBar seekBar){
+        float newI = seekBar.getProgress();
+        newI = newI- getIntent().getFloatExtra("minusValue", 0.0f);
+        float value = newI/getIntent().getFloatExtra("divisionValue", 1.0f);
+
+        FilterSystem.applyFilter(mInAllocation,mOutAllocation,value,mCurrentEffect,mRS,getResources(),originalBitmap);
+
+        mOutAllocation.copyTo(filteredBitmap);
+        imageView.setImageBitmap(filteredBitmap);
+    }
+
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(1,1,1,"Values").setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId()==1){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            float newI = bar.getProgress();
+            newI = newI- Float.parseFloat(getIntent().getStringExtra("minusValue"));
+            float value = newI/Float.parseFloat(getIntent().getStringExtra("divisionValue"));
+            makeDialog(value+"","Value");
+        }
+        return true;
+    }
+
+    public AlertDialog makeDialog(String message, String title) {
+        if (isFinishing())
+            return null;
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getParent() != null ? getParent() : this);
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setTitle(title)
+                .setPositiveButton(
+                        "OK",
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alert = builder.create();
+        alert.show();
+        return alert;
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
new file mode 100644
index 00000000..6f2f6dd4
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -0,0 +1,686 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.BitmapFactory;
+import android.graphics.PointF;
+import android.opengl.Matrix;
+
+import jp.co.cyberagent.android.gpuimage.*;
+
+import java.util.LinkedList;
+import java.util.List;
+
+public class GPUImageFilterTools {
+    public static void showDialog(final Context context,
+            final OnGpuImageFilterChosenListener listener) {
+        final FilterList filters = new FilterList();
+        filters.addFilter("Contrast", FilterType.CONTRAST);
+        filters.addFilter("Invert", FilterType.INVERT);
+        filters.addFilter("Pixelation", FilterType.PIXELATION);
+        filters.addFilter("Hue", FilterType.HUE);
+        filters.addFilter("Gamma", FilterType.GAMMA);
+        filters.addFilter("Brightness", FilterType.BRIGHTNESS);
+        filters.addFilter("Sepia", FilterType.SEPIA);
+        filters.addFilter("Grayscale", FilterType.GRAYSCALE);
+        filters.addFilter("Sharpness", FilterType.SHARPEN);
+        filters.addFilter("Sobel Edge Detection", FilterType.SOBEL_EDGE_DETECTION);
+        filters.addFilter("3x3 Convolution", FilterType.THREE_X_THREE_CONVOLUTION);
+        filters.addFilter("Emboss", FilterType.EMBOSS);
+        filters.addFilter("Posterize", FilterType.POSTERIZE);
+        filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
+        filters.addFilter("Saturation", FilterType.SATURATION);
+        filters.addFilter("Exposure", FilterType.EXPOSURE);
+        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
+        filters.addFilter("Monochrome", FilterType.MONOCHROME);
+        filters.addFilter("Opacity", FilterType.OPACITY);
+        filters.addFilter("RGB", FilterType.RGB);
+        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
+        filters.addFilter("Vignette", FilterType.VIGNETTE);
+        filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
+
+        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
+        filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
+        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
+        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
+        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
+        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
+        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
+        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
+        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
+        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
+        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
+        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
+        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
+        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
+        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
+        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
+        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
+        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
+        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
+        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
+        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
+        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
+        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
+        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
+
+        filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
+        filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
+        filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
+
+        filters.addFilter("Box Blur", FilterType.BOX_BLUR);
+        filters.addFilter("CGA Color Space", FilterType.CGA_COLORSPACE);
+        filters.addFilter("Dilation", FilterType.DILATION);
+        filters.addFilter("Kuwahara", FilterType.KUWAHARA);
+        filters.addFilter("RGB Dilation", FilterType.RGB_DILATION);
+        filters.addFilter("Sketch", FilterType.SKETCH);
+        filters.addFilter("Toon", FilterType.TOON);
+        filters.addFilter("Smooth Toon", FilterType.SMOOTH_TOON);
+        filters.addFilter("Halftone", FilterType.HALFTONE);
+
+        filters.addFilter("Bulge Distortion", FilterType.BULGE_DISTORTION);
+        filters.addFilter("Glass Sphere", FilterType.GLASS_SPHERE);
+        filters.addFilter("Haze", FilterType.HAZE);
+        filters.addFilter("Laplacian", FilterType.LAPLACIAN);
+        filters.addFilter("Non Maximum Suppression", FilterType.NON_MAXIMUM_SUPPRESSION);
+        filters.addFilter("Sphere Refraction", FilterType.SPHERE_REFRACTION);
+        filters.addFilter("Swirl", FilterType.SWIRL);
+        filters.addFilter("Weak Pixel Inclusion", FilterType.WEAK_PIXEL_INCLUSION);
+        filters.addFilter("False Color", FilterType.FALSE_COLOR);
+
+        filters.addFilter("Color Balance", FilterType.COLOR_BALANCE);
+
+        filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
+
+        filters. addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
+
+        filters.addFilter("Transform (2-D)", FilterType.TRANSFORM2D);
+
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(context);
+        builder.setTitle("Choose a filter");
+        builder.setItems(filters.names.toArray(new String[filters.names.size()]),
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(final DialogInterface dialog, final int item) {
+                        listener.onGpuImageFilterChosenListener(
+                                createFilterForType(context, filters.filters.get(item)));
+                    }
+                });
+        builder.create().show();
+    }
+
+    private static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
+        switch (type) {
+            case CONTRAST:
+                return new GPUImageContrastFilter(2.0f);
+            case GAMMA:
+                return new GPUImageGammaFilter(2.0f);
+            case INVERT:
+                return new GPUImageColorInvertFilter();
+            case PIXELATION:
+                return new GPUImagePixelationFilter();
+            case HUE:
+                return new GPUImageHueFilter(90.0f);
+            case BRIGHTNESS:
+                return new GPUImageBrightnessFilter(1.5f);
+            case GRAYSCALE:
+                return new GPUImageGrayscaleFilter();
+            case SEPIA:
+                return new GPUImageSepiaFilter();
+            case SHARPEN:
+                GPUImageSharpenFilter sharpness = new GPUImageSharpenFilter();
+                sharpness.setSharpness(2.0f);
+                return sharpness;
+            case SOBEL_EDGE_DETECTION:
+                return new GPUImageSobelEdgeDetection();
+            case THREE_X_THREE_CONVOLUTION:
+                GPUImage3x3ConvolutionFilter convolution = new GPUImage3x3ConvolutionFilter();
+                convolution.setConvolutionKernel(new float[] {
+                        -1.0f, 0.0f, 1.0f,
+                        -2.0f, 0.0f, 2.0f,
+                        -1.0f, 0.0f, 1.0f
+                });
+                return convolution;
+            case EMBOSS:
+                return new GPUImageEmbossFilter();
+            case POSTERIZE:
+                return new GPUImagePosterizeFilter();
+            case FILTER_GROUP:
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                filters.add(new GPUImageContrastFilter());
+                filters.add(new GPUImageDirectionalSobelEdgeDetectionFilter());
+                filters.add(new GPUImageGrayscaleFilter());
+                return new GPUImageFilterGroup(filters);
+            case SATURATION:
+                return new GPUImageSaturationFilter(1.0f);
+            case EXPOSURE:
+                return new GPUImageExposureFilter(0.0f);
+            case HIGHLIGHT_SHADOW:
+            	return new GPUImageHighlightShadowFilter(0.0f, 1.0f);
+            case MONOCHROME:
+            	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
+            case OPACITY:
+                return new GPUImageOpacityFilter(1.0f);
+            case RGB:
+                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);
+            case WHITE_BALANCE:
+                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);
+            case VIGNETTE:
+                PointF centerPoint = new PointF();
+                centerPoint.x = 0.5f;
+                centerPoint.y = 0.5f;
+                return new GPUImageVignetteFilter(centerPoint, new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
+            case TONE_CURVE:
+                GPUImageToneCurveFilter toneCurveFilter = new GPUImageToneCurveFilter();
+                toneCurveFilter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.tone_cuver_sample));
+                return toneCurveFilter;
+            case BLEND_DIFFERENCE:
+                return createBlendFilter(context, GPUImageDifferenceBlendFilter.class);
+            case BLEND_SOURCE_OVER:
+                return createBlendFilter(context, GPUImageSourceOverBlendFilter.class);
+            case BLEND_COLOR_BURN:
+                return createBlendFilter(context, GPUImageColorBurnBlendFilter.class);
+            case BLEND_COLOR_DODGE:
+                return createBlendFilter(context, GPUImageColorDodgeBlendFilter.class);
+            case BLEND_DARKEN:
+                return createBlendFilter(context, GPUImageDarkenBlendFilter.class);
+            case BLEND_DISSOLVE:
+                return createBlendFilter(context, GPUImageDissolveBlendFilter.class);
+            case BLEND_EXCLUSION:
+                return createBlendFilter(context, GPUImageExclusionBlendFilter.class);
+
+
+            case BLEND_HARD_LIGHT:
+                return createBlendFilter(context, GPUImageHardLightBlendFilter.class);
+            case BLEND_LIGHTEN:
+                return createBlendFilter(context, GPUImageLightenBlendFilter.class);
+            case BLEND_ADD:
+                return createBlendFilter(context, GPUImageAddBlendFilter.class);
+            case BLEND_DIVIDE:
+                return createBlendFilter(context, GPUImageDivideBlendFilter.class);
+            case BLEND_MULTIPLY:
+                return createBlendFilter(context, GPUImageMultiplyBlendFilter.class);
+            case BLEND_OVERLAY:
+                return createBlendFilter(context, GPUImageOverlayBlendFilter.class);
+            case BLEND_SCREEN:
+                return createBlendFilter(context, GPUImageScreenBlendFilter.class);
+            case BLEND_ALPHA:
+                return createBlendFilter(context, GPUImageAlphaBlendFilter.class);
+            case BLEND_COLOR:
+                return createBlendFilter(context, GPUImageColorBlendFilter.class);
+            case BLEND_HUE:
+                return createBlendFilter(context, GPUImageHueBlendFilter.class);
+            case BLEND_SATURATION:
+                return createBlendFilter(context, GPUImageSaturationBlendFilter.class);
+            case BLEND_LUMINOSITY:
+                return createBlendFilter(context, GPUImageLuminosityBlendFilter.class);
+            case BLEND_LINEAR_BURN:
+                return createBlendFilter(context, GPUImageLinearBurnBlendFilter.class);
+            case BLEND_SOFT_LIGHT:
+                return createBlendFilter(context, GPUImageSoftLightBlendFilter.class);
+            case BLEND_SUBTRACT:
+                return createBlendFilter(context, GPUImageSubtractBlendFilter.class);
+            case BLEND_CHROMA_KEY:
+                return createBlendFilter(context, GPUImageChromaKeyBlendFilter.class);
+            case BLEND_NORMAL:
+                return createBlendFilter(context, GPUImageNormalBlendFilter.class);
+
+            case LOOKUP_AMATORKA:
+                GPUImageLookupFilter amatorka = new GPUImageLookupFilter();
+                amatorka.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.lookup_amatorka));
+                return amatorka;
+            case GAUSSIAN_BLUR:
+                return new GPUImageGaussianBlurFilter();
+            case CROSSHATCH:
+                return new GPUImageCrosshatchFilter();
+
+            case BOX_BLUR:
+                return new GPUImageBoxBlurFilter();
+            case CGA_COLORSPACE:
+                return new GPUImageCGAColorspaceFilter();
+            case DILATION:
+                return new GPUImageDilationFilter();
+            case KUWAHARA:
+                return new GPUImageKuwaharaFilter();
+            case RGB_DILATION:
+                return new GPUImageRGBDilationFilter();
+            case SKETCH:
+                return new GPUImageSketchFilter();
+            case TOON:
+                return new GPUImageToonFilter();
+            case SMOOTH_TOON:
+                return new GPUImageSmoothToonFilter();
+
+            case BULGE_DISTORTION:
+                return new GPUImageBulgeDistortionFilter();
+            case GLASS_SPHERE:
+                return new GPUImageGlassSphereFilter();
+            case HAZE:
+                return new GPUImageHazeFilter();
+            case LAPLACIAN:
+                return new GPUImageLaplacianFilter();
+            case NON_MAXIMUM_SUPPRESSION:
+                return new GPUImageNonMaximumSuppressionFilter();
+            case SPHERE_REFRACTION:
+                return new GPUImageSphereRefractionFilter();
+            case SWIRL:
+                return new GPUImageSwirlFilter();
+            case WEAK_PIXEL_INCLUSION:
+                return new GPUImageWeakPixelInclusionFilter();
+            case FALSE_COLOR:
+                return new GPUImageFalseColorFilter();
+            case COLOR_BALANCE:
+                return new GPUImageColorBalanceFilter();
+            case LEVELS_FILTER_MIN:
+                GPUImageLevelsFilter levelsFilter = new GPUImageLevelsFilter();
+                levelsFilter.setMin(0.0f, 3.0f, 1.0f);
+                return levelsFilter;
+            case HALFTONE:
+                return new GPUImageHalftoneFilter();
+
+            case BILATERAL_BLUR:
+                return new GPUImageBilateralFilter();
+
+            case TRANSFORM2D:
+                return new GPUImageTransformFilter();
+
+            default:
+                throw new IllegalStateException("No filter of that type!");
+        }
+
+    }
+
+    private static GPUImageFilter createBlendFilter(Context context, Class<? extends GPUImageTwoInputFilter> filterClass) {
+        try {
+            GPUImageTwoInputFilter filter = filterClass.newInstance();
+            filter.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.ic_launcher));
+            return filter;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    public interface OnGpuImageFilterChosenListener {
+        void onGpuImageFilterChosenListener(GPUImageFilter filter);
+    }
+
+    private enum FilterType {
+        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
+        SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
+        BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
+        BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
+        GAUSSIAN_BLUR, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
+        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR, HALFTONE, TRANSFORM2D
+    }
+
+    private static class FilterList {
+        public List<String> names = new LinkedList<String>();
+        public List<FilterType> filters = new LinkedList<FilterType>();
+
+        public void addFilter(final String name, final FilterType filter) {
+            names.add(name);
+            filters.add(filter);
+        }
+    }
+
+    public static class FilterAdjuster {
+        private final Adjuster<? extends GPUImageFilter> adjuster;
+
+        public FilterAdjuster(final GPUImageFilter filter) {
+            if (filter instanceof GPUImageSharpenFilter) {
+                adjuster = new SharpnessAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSepiaFilter) {
+                adjuster = new SepiaAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageContrastFilter) {
+                adjuster = new ContrastAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageGammaFilter) {
+                adjuster = new GammaAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageBrightnessFilter) {
+                adjuster = new BrightnessAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSobelEdgeDetection) {
+                adjuster = new SobelAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageEmbossFilter) {
+                adjuster = new EmbossAdjuster().filter(filter);
+            } else if (filter instanceof GPUImage3x3TextureSamplingFilter) {
+                adjuster = new GPU3x3TextureAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageHueFilter) {
+                adjuster = new HueAdjuster().filter(filter);
+            } else if (filter instanceof GPUImagePosterizeFilter) {
+                adjuster = new PosterizeAdjuster().filter(filter);
+            } else if (filter instanceof GPUImagePixelationFilter) {
+                adjuster = new PixelationAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSaturationFilter) {
+                adjuster = new SaturationAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageExposureFilter) {
+                adjuster = new ExposureAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageHighlightShadowFilter) {
+                adjuster = new HighlightShadowAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageMonochromeFilter) {
+                adjuster = new MonochromeAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageOpacityFilter) {
+                adjuster = new OpacityAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageRGBFilter) {
+                adjuster = new RGBAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageWhiteBalanceFilter) {
+                adjuster = new WhiteBalanceAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageVignetteFilter) {
+                adjuster = new VignetteAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageDissolveBlendFilter) {
+                adjuster = new DissolveBlendAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageGaussianBlurFilter) {
+                adjuster = new GaussianBlurAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageCrosshatchFilter) {
+                adjuster = new CrosshatchBlurAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageBulgeDistortionFilter) {
+                adjuster = new BulgeDistortionAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageGlassSphereFilter) {
+                adjuster = new GlassSphereAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageHazeFilter) {
+                adjuster = new HazeAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSphereRefractionFilter) {
+                adjuster = new SphereRefractionAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSwirlFilter) {
+                adjuster = new SwirlAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageColorBalanceFilter) {
+                adjuster = new ColorBalanceAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageLevelsFilter) {
+                adjuster = new LevelsMinMidAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageBilateralFilter) {
+                adjuster = new BilateralAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageTransformFilter) {
+                adjuster = new RotateAdjuster().filter(filter);
+            }
+            else {
+
+                adjuster = null;
+            }
+        }
+
+        public boolean canAdjust() {
+            return adjuster != null;
+        }
+
+        public void adjust(final int percentage) {
+            if (adjuster != null) {
+                adjuster.adjust(percentage);
+            }
+        }
+
+        private abstract class Adjuster<T extends GPUImageFilter> {
+            private T filter;
+
+            @SuppressWarnings("unchecked")
+            public Adjuster<T> filter(final GPUImageFilter filter) {
+                this.filter = (T) filter;
+                return this;
+            }
+
+            public T getFilter() {
+                return filter;
+            }
+
+            public abstract void adjust(int percentage);
+
+            protected float range(final int percentage, final float start, final float end) {
+                return (end - start) * percentage / 100.0f + start;
+            }
+
+            protected int range(final int percentage, final int start, final int end) {
+                return (end - start) * percentage / 100 + start;
+            }
+        }
+
+        private class SharpnessAdjuster extends Adjuster<GPUImageSharpenFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setSharpness(range(percentage, -4.0f, 4.0f));
+            }
+        }
+
+        private class PixelationAdjuster extends Adjuster<GPUImagePixelationFilter> {
+          @Override
+          public void adjust(final int percentage) {
+              getFilter().setPixel(range(percentage, 1.0f, 100.0f));
+          }
+        }
+
+        private class HueAdjuster extends Adjuster<GPUImageHueFilter> {
+          @Override
+          public void adjust(final int percentage) {
+            getFilter().setHue(range(percentage, 0.0f, 360.0f));
+          }
+        }
+
+        private class ContrastAdjuster extends Adjuster<GPUImageContrastFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setContrast(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class GammaAdjuster extends Adjuster<GPUImageGammaFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setGamma(range(percentage, 0.0f, 3.0f));
+            }
+        }
+
+        private class BrightnessAdjuster extends Adjuster<GPUImageBrightnessFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setBrightness(range(percentage, -1.0f, 1.0f));
+            }
+        }
+
+        private class SepiaAdjuster extends Adjuster<GPUImageSepiaFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setIntensity(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class SobelAdjuster extends Adjuster<GPUImageSobelEdgeDetection> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
+            }
+        }
+
+        private class EmbossAdjuster extends Adjuster<GPUImageEmbossFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setIntensity(range(percentage, 0.0f, 4.0f));
+            }
+        }
+
+        private class PosterizeAdjuster extends Adjuster<GPUImagePosterizeFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                // In theorie to 256, but only first 50 are interesting
+                getFilter().setColorLevels(range(percentage, 1, 50));
+            }
+        }
+
+        private class GPU3x3TextureAdjuster extends Adjuster<GPUImage3x3TextureSamplingFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
+            }
+        }
+
+        private class SaturationAdjuster extends Adjuster<GPUImageSaturationFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setSaturation(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class ExposureAdjuster extends Adjuster<GPUImageExposureFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setExposure(range(percentage, -10.0f, 10.0f));
+            }
+        }
+
+        private class HighlightShadowAdjuster extends Adjuster<GPUImageHighlightShadowFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setShadows(range(percentage, 0.0f, 1.0f));
+                getFilter().setHighlights(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class MonochromeAdjuster extends Adjuster<GPUImageMonochromeFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setIntensity(range(percentage, 0.0f, 1.0f));
+                //getFilter().setColor(new float[]{0.6f, 0.45f, 0.3f, 1.0f});
+            }
+        }
+
+        private class OpacityAdjuster extends Adjuster<GPUImageOpacityFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setOpacity(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class RGBAdjuster extends Adjuster<GPUImageRGBFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRed(range(percentage, 0.0f, 1.0f));
+                //getFilter().setGreen(range(percentage, 0.0f, 1.0f));
+                //getFilter().setBlue(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class WhiteBalanceAdjuster extends Adjuster<GPUImageWhiteBalanceFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setTemperature(range(percentage, 2000.0f, 8000.0f));
+                //getFilter().setTint(range(percentage, -100.0f, 100.0f));
+            }
+        }
+
+        private class VignetteAdjuster extends Adjuster<GPUImageVignetteFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setVignetteStart(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class DissolveBlendAdjuster extends Adjuster<GPUImageDissolveBlendFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setMix(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class GaussianBlurAdjuster extends Adjuster<GPUImageGaussianBlurFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setBlurSize(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class CrosshatchBlurAdjuster extends Adjuster<GPUImageCrosshatchFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setCrossHatchSpacing(range(percentage, 0.0f, 0.06f));
+                getFilter().setLineWidth(range(percentage, 0.0f, 0.006f));
+            }
+        }
+
+        private class BulgeDistortionAdjuster extends Adjuster<GPUImageBulgeDistortionFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
+                getFilter().setScale(range(percentage, -1.0f, 1.0f));
+            }
+        }
+
+        private class GlassSphereAdjuster extends Adjuster<GPUImageGlassSphereFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class HazeAdjuster extends Adjuster<GPUImageHazeFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setDistance(range(percentage, -0.3f, 0.3f));
+                getFilter().setSlope(range(percentage, -0.3f, 0.3f));
+            }
+        }
+
+        private class SphereRefractionAdjuster extends Adjuster<GPUImageSphereRefractionFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class SwirlAdjuster extends Adjuster<GPUImageSwirlFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setAngle(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class ColorBalanceAdjuster extends Adjuster<GPUImageColorBalanceFilter> {
+
+            @Override
+            public void adjust(int percentage) {
+                getFilter().setMidtones(new float[]{
+                        range(percentage, 0.0f, 1.0f),
+                        range(percentage / 2, 0.0f, 1.0f),
+                        range(percentage / 3, 0.0f, 1.0f)});
+            }
+        }
+
+        private class LevelsMinMidAdjuster extends Adjuster<GPUImageLevelsFilter> {
+            @Override
+            public void adjust(int percentage) {
+                getFilter().setMin(0.0f, range(percentage, 0.0f, 1.0f), 1.0f);
+            }
+        }
+
+        private class BilateralAdjuster extends Adjuster<GPUImageBilateralFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setDistanceNormalizationFactor(range(percentage, 0.0f, 15.0f));
+            }
+        }
+
+        private class RotateAdjuster extends Adjuster<GPUImageTransformFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                float[] transform = new float[16];
+                Matrix.setRotateM(transform, 0, 360 * percentage / 100, 0, 0, 1.0f);
+                getFilter().setTransform3D(transform);
+            }
+        }
+
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
new file mode 100644
index 00000000..5f9f70c6
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -0,0 +1,299 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.activity;
+
+import android.app.Activity;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.hardware.Camera;
+import android.hardware.Camera.CameraInfo;
+import android.hardware.Camera.Parameters;
+import android.net.Uri;
+import android.opengl.GLSurfaceView;
+import android.os.Bundle;
+import android.os.Environment;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.SeekBar;
+import android.widget.SeekBar.OnSeekBarChangeListener;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import jp.co.cyberagent.android.gpuimage.GPUImage;
+import jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
+import jp.co.cyberagent.android.gpuimage.sample.R;
+import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper;
+import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraInfo2;
+import android.graphics.ImageFormat;
+
+public class ActivityCamera extends Activity implements OnSeekBarChangeListener, OnClickListener {
+
+    private GPUImage mGPUImage;
+    private CameraHelper mCameraHelper;
+    private CameraLoader mCamera;
+    private GPUImageFilter mFilter;
+    private FilterAdjuster mFilterAdjuster;
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_camera);
+        ((SeekBar) findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);
+        findViewById(R.id.button_choose_filter).setOnClickListener(this);
+        findViewById(R.id.button_capture).setOnClickListener(this);
+
+        mGPUImage = new GPUImage(this);
+        mGPUImage.setGLSurfaceView((GLSurfaceView) findViewById(R.id.surfaceView));
+
+        mCameraHelper = new CameraHelper(this);
+        mCamera = new CameraLoader();
+
+        View cameraSwitchView = findViewById(R.id.img_switch_camera);
+        cameraSwitchView.setOnClickListener(this);
+        if (!mCameraHelper.hasFrontCamera() || !mCameraHelper.hasBackCamera()) {
+            cameraSwitchView.setVisibility(View.GONE);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        mCamera.onResume();
+    }
+
+    @Override
+    protected void onPause() {
+        mCamera.onPause();
+        super.onPause();
+    }
+
+    @Override
+    public void onClick(final View v) {
+        switch (v.getId()) {
+            case R.id.button_choose_filter:
+                GPUImageFilterTools.showDialog(this, new OnGpuImageFilterChosenListener() {
+
+                    @Override
+                    public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
+                        switchFilterTo(filter);
+                    }
+                });
+                break;
+
+            case R.id.button_capture:
+                if (mCamera.mCameraInstance.getParameters().getFocusMode().equals(
+                        Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {
+                    takePicture();
+                } else {
+                    mCamera.mCameraInstance.autoFocus(new Camera.AutoFocusCallback() {
+
+                        @Override
+                        public void onAutoFocus(final boolean success, final Camera camera) {
+                            takePicture();
+                        }
+                    });
+                }
+                break;
+
+            case R.id.img_switch_camera:
+                mCamera.switchCamera();
+                break;
+        }
+    }
+
+    private void takePicture() {
+        // TODO get a size that is about the size of the screen
+        Camera.Parameters params = mCamera.mCameraInstance.getParameters();
+        params.setRotation(90);
+        mCamera.mCameraInstance.setParameters(params);
+        for (Camera.Size size : params.getSupportedPictureSizes()) {
+            Log.i("ASDF", "Supported: " + size.width + "x" + size.height);
+        }
+        mCamera.mCameraInstance.takePicture(null, null,
+                new Camera.PictureCallback() {
+
+                    @Override
+                    public void onPictureTaken(byte[] data, final Camera camera) {
+
+                        final File pictureFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
+                        if (pictureFile == null) {
+                            Log.d("ASDF",
+                                    "Error creating media file, check storage permissions");
+                            return;
+                        }
+
+                        try {
+                            FileOutputStream fos = new FileOutputStream(pictureFile);
+                            fos.write(data);
+                            fos.close();
+                        } catch (FileNotFoundException e) {
+                            Log.d("ASDF", "File not found: " + e.getMessage());
+                        } catch (IOException e) {
+                            Log.d("ASDF", "Error accessing file: " + e.getMessage());
+                        }
+
+                        data = null;
+                        Bitmap bitmap = BitmapFactory.decodeFile(pictureFile.getAbsolutePath());
+                        // mGPUImage.setImage(bitmap);
+                        final GLSurfaceView view = (GLSurfaceView) findViewById(R.id.surfaceView);
+                        view.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
+                        mGPUImage.saveToPictures(bitmap, "GPUImage",
+                                System.currentTimeMillis() + ".jpg",
+                                new OnPictureSavedListener() {
+
+                                    @Override
+                                    public void onPictureSaved(final Uri
+                                            uri) {
+                                        pictureFile.delete();
+                                        camera.startPreview();
+                                        view.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
+                                    }
+                                });
+                    }
+                });
+    }
+
+    public static final int MEDIA_TYPE_IMAGE = 1;
+    public static final int MEDIA_TYPE_VIDEO = 2;
+
+    private static File getOutputMediaFile(final int type) {
+        // To be safe, you should check that the SDCard is mounted
+        // using Environment.getExternalStorageState() before doing this.
+
+        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
+                Environment.DIRECTORY_PICTURES), "MyCameraApp");
+        // This location works best if you want the created images to be shared
+        // between applications and persist after your app has been uninstalled.
+
+        // Create the storage directory if it does not exist
+        if (!mediaStorageDir.exists()) {
+            if (!mediaStorageDir.mkdirs()) {
+                Log.d("MyCameraApp", "failed to create directory");
+                return null;
+            }
+        }
+
+        // Create a media file name
+        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
+        File mediaFile;
+        if (type == MEDIA_TYPE_IMAGE) {
+            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
+                    "IMG_" + timeStamp + ".jpg");
+        } else if (type == MEDIA_TYPE_VIDEO) {
+            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
+                    "VID_" + timeStamp + ".mp4");
+        } else {
+            return null;
+        }
+
+        return mediaFile;
+    }
+
+    private void switchFilterTo(final GPUImageFilter filter) {
+        if (mFilter == null
+                || (filter != null && !mFilter.getClass().equals(filter.getClass()))) {
+            mFilter = filter;
+            mGPUImage.setFilter(mFilter);
+            mFilterAdjuster = new FilterAdjuster(mFilter);
+        }
+    }
+
+    @Override
+    public void onProgressChanged(final SeekBar seekBar, final int progress,
+            final boolean fromUser) {
+        if (mFilterAdjuster != null) {
+            mFilterAdjuster.adjust(progress);
+        }
+    }
+
+    @Override
+    public void onStartTrackingTouch(final SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(final SeekBar seekBar) {
+    }
+
+    private class CameraLoader {
+
+        private int mCurrentCameraId = 0;
+        private Camera mCameraInstance;
+
+        public void onResume() {
+            setUpCamera(mCurrentCameraId);
+        }
+
+        public void onPause() {
+            releaseCamera();
+        }
+
+        public void switchCamera() {
+            releaseCamera();
+            mCurrentCameraId = (mCurrentCameraId + 1) % mCameraHelper.getNumberOfCameras();
+            setUpCamera(mCurrentCameraId);
+        }
+
+        private void setUpCamera(final int id) {
+            mCameraInstance = getCameraInstance(id);
+            Parameters parameters = mCameraInstance.getParameters();
+            // TODO adjust by getting supportedPreviewSizes and then choosing
+            // the best one for screen size (best fill screen)
+            if (parameters.getSupportedFocusModes().contains(
+                    Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {
+                parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
+            }
+            parameters.setPreviewSize(1280,720);
+            parameters.setPreviewFormat(ImageFormat.NV21);
+
+            mCameraInstance.setParameters(parameters);
+
+            int orientation = mCameraHelper.getCameraDisplayOrientation(
+                    ActivityCamera.this, mCurrentCameraId);
+            CameraInfo2 cameraInfo = new CameraInfo2();
+            mCameraHelper.getCameraInfo(mCurrentCameraId, cameraInfo);
+            boolean flipHorizontal = cameraInfo.facing == CameraInfo.CAMERA_FACING_FRONT;
+            mGPUImage.setUpCamera(mCameraInstance, orientation, flipHorizontal, false);
+        }
+
+        /** A safe way to get an instance of the Camera object. */
+        private Camera getCameraInstance(final int id) {
+            Camera c = null;
+            try {
+                c = mCameraHelper.openCamera(id);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            return c;
+        }
+
+        private void releaseCamera() {
+            mCameraInstance.setPreviewCallback(null);
+            mCameraInstance.release();
+            mCameraInstance = null;
+        }
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
new file mode 100644
index 00000000..ad734823
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
@@ -0,0 +1,142 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.activity;
+
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageView;
+import jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
+import jp.co.cyberagent.android.gpuimage.sample.R;
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.SeekBar;
+import android.widget.SeekBar.OnSeekBarChangeListener;
+import android.widget.Toast;
+
+public class ActivityGallery extends Activity implements OnSeekBarChangeListener,
+        OnClickListener, OnPictureSavedListener {
+
+    private static final int REQUEST_PICK_IMAGE = 1;
+    private GPUImageFilter mFilter;
+    private FilterAdjuster mFilterAdjuster;
+    private GPUImageView mGPUImageView;
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_gallery);
+        ((SeekBar) findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);
+        findViewById(R.id.button_choose_filter).setOnClickListener(this);
+        findViewById(R.id.button_save).setOnClickListener(this);
+
+        mGPUImageView = (GPUImageView) findViewById(R.id.gpuimage);
+
+        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+        photoPickerIntent.setType("image/*");
+        startActivityForResult(photoPickerIntent, REQUEST_PICK_IMAGE);
+    }
+
+    @Override
+    protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        switch (requestCode) {
+            case REQUEST_PICK_IMAGE:
+                if (resultCode == RESULT_OK) {
+                    handleImage(data.getData());
+                } else {
+                    finish();
+                }
+                break;
+
+            default:
+                super.onActivityResult(requestCode, resultCode, data);
+                break;
+        }
+    }
+
+    @Override
+    public void onClick(final View v) {
+        switch (v.getId()) {
+            case R.id.button_choose_filter:
+                GPUImageFilterTools.showDialog(this, new OnGpuImageFilterChosenListener() {
+
+                    @Override
+                    public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
+                        switchFilterTo(filter);
+                        mGPUImageView.requestRender();
+                    }
+
+                });
+                break;
+            case R.id.button_save:
+                saveImage();
+                break;
+
+            default:
+                break;
+        }
+
+    }
+
+    @Override
+    public void onPictureSaved(final Uri uri) {
+        Toast.makeText(this, "Saved: " + uri.toString(), Toast.LENGTH_SHORT).show();
+    }
+
+    private void saveImage() {
+        String fileName = System.currentTimeMillis() + ".jpg";
+        mGPUImageView.saveToPictures("GPUImage", fileName, this);
+//        mGPUImageView.saveToPictures("GPUImage", fileName, 1600, 1600, this);
+    }
+
+    private void switchFilterTo(final GPUImageFilter filter) {
+        if (mFilter == null
+                || (filter != null && !mFilter.getClass().equals(filter.getClass()))) {
+            mFilter = filter;
+            mGPUImageView.setFilter(mFilter);
+            mFilterAdjuster = new FilterAdjuster(mFilter);
+
+            findViewById(R.id.seekBar).setVisibility(
+                    mFilterAdjuster.canAdjust() ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    @Override
+    public void onProgressChanged(final SeekBar seekBar, final int progress, final boolean fromUser) {
+        if (mFilterAdjuster != null) {
+            mFilterAdjuster.adjust(progress);
+        }
+        mGPUImageView.requestRender();
+    }
+
+    @Override
+    public void onStartTrackingTouch(final SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(final SeekBar seekBar) {
+    }
+
+    private void handleImage(final Uri selectedImage) {
+        mGPUImageView.setImage(selectedImage);
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
new file mode 100644
index 00000000..80600ee6
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.activity;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.PermissionChecker;
+import android.view.View;
+import android.view.View.OnClickListener;
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+public class ActivityMain extends Activity implements OnClickListener {
+
+    @Override public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        findViewById(R.id.button_gallery).setOnClickListener(this);
+        findViewById(R.id.button_camera).setOnClickListener(this);
+    }
+
+    @Override public void onClick(final View v) {
+        if (PermissionChecker.checkSelfPermission(this, Manifest.permission.CAMERA)
+            == PackageManager.PERMISSION_DENIED) {
+            ActivityCompat.requestPermissions(this, new String[] { Manifest.permission.CAMERA },
+                v.getId());
+        } else {
+            startActivity(v.getId());
+        }
+    }
+
+    @Override public void onRequestPermissionsResult(int requestCode, String[] permissions,
+        int[] grantResults) {
+        if (grantResults.length != 1 || grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            startActivity(requestCode);
+        } else {
+            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        }
+    }
+
+    private void startActivity(int id) {
+        switch (id) {
+            case R.id.button_gallery:
+                startActivity(new Intent(this, ActivityGallery.class));
+                break;
+            case R.id.button_camera:
+                startActivity(new Intent(this, ActivityCamera.class));
+                break;
+
+            default:
+                break;
+        }
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelper.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelper.java
new file mode 100644
index 00000000..9fafc891
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelper.java
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.utils;
+
+import static android.os.Build.VERSION.SDK_INT;
+import static android.os.Build.VERSION_CODES.GINGERBREAD;
+import android.app.Activity;
+import android.content.Context;
+import android.hardware.Camera;
+import android.hardware.Camera.CameraInfo;
+import android.view.Surface;
+
+public class CameraHelper {
+    private final CameraHelperImpl mImpl;
+
+    public CameraHelper(final Context context) {
+        if (SDK_INT >= GINGERBREAD) {
+            mImpl = new CameraHelperGB();
+        } else {
+            mImpl = new CameraHelperBase(context);
+        }
+    }
+
+    public interface CameraHelperImpl {
+        int getNumberOfCameras();
+
+        Camera openCamera(int id);
+
+        Camera openDefaultCamera();
+
+        Camera openCameraFacing(int facing);
+
+        boolean hasCamera(int cameraFacingFront);
+
+        void getCameraInfo(int cameraId, CameraInfo2 cameraInfo);
+    }
+
+    public int getNumberOfCameras() {
+        return mImpl.getNumberOfCameras();
+    }
+
+    public Camera openCamera(final int id) {
+        return mImpl.openCamera(id);
+    }
+
+    public Camera openDefaultCamera() {
+        return mImpl.openDefaultCamera();
+    }
+
+    public Camera openFrontCamera() {
+        return mImpl.openCameraFacing(CameraInfo.CAMERA_FACING_FRONT);
+    }
+
+    public Camera openBackCamera() {
+        return mImpl.openCameraFacing(CameraInfo.CAMERA_FACING_BACK);
+    }
+
+    public boolean hasFrontCamera() {
+        return mImpl.hasCamera(CameraInfo.CAMERA_FACING_FRONT);
+    }
+
+    public boolean hasBackCamera() {
+        return mImpl.hasCamera(CameraInfo.CAMERA_FACING_BACK);
+    }
+
+    public void getCameraInfo(final int cameraId, final CameraInfo2 cameraInfo) {
+        mImpl.getCameraInfo(cameraId, cameraInfo);
+    }
+
+    public void setCameraDisplayOrientation(final Activity activity,
+            final int cameraId, final Camera camera) {
+        int result = getCameraDisplayOrientation(activity, cameraId);
+        camera.setDisplayOrientation(result);
+    }
+
+    public int getCameraDisplayOrientation(final Activity activity, final int cameraId) {
+        int rotation = activity.getWindowManager().getDefaultDisplay()
+                .getRotation();
+        int degrees = 0;
+        switch (rotation) {
+            case Surface.ROTATION_0:
+                degrees = 0;
+                break;
+            case Surface.ROTATION_90:
+                degrees = 90;
+                break;
+            case Surface.ROTATION_180:
+                degrees = 180;
+                break;
+            case Surface.ROTATION_270:
+                degrees = 270;
+                break;
+        }
+
+        int result;
+        CameraInfo2 info = new CameraInfo2();
+        getCameraInfo(cameraId, info);
+        if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
+            result = (info.orientation + degrees) % 360;
+        } else { // back-facing
+            result = (info.orientation - degrees + 360) % 360;
+        }
+        return result;
+    }
+
+    public static class CameraInfo2 {
+        public int facing;
+        public int orientation;
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelperBase.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelperBase.java
new file mode 100644
index 00000000..daceb838
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelperBase.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.utils;
+
+import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraHelperImpl;
+import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraInfo2;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.hardware.Camera;
+import android.hardware.Camera.CameraInfo;
+
+public class CameraHelperBase implements CameraHelperImpl {
+
+    private final Context mContext;
+
+    public CameraHelperBase(final Context context) {
+        mContext = context;
+    }
+
+    @Override
+    public int getNumberOfCameras() {
+        return hasCameraSupport() ? 1 : 0;
+    }
+
+    @Override
+    public Camera openCamera(final int id) {
+        return Camera.open();
+    }
+
+    @Override
+    public Camera openDefaultCamera() {
+        return Camera.open();
+    }
+
+    @Override
+    public boolean hasCamera(final int facing) {
+        if (facing == CameraInfo.CAMERA_FACING_BACK) {
+            return hasCameraSupport();
+        }
+        return false;
+    }
+
+    @Override
+    public Camera openCameraFacing(final int facing) {
+        if (facing == CameraInfo.CAMERA_FACING_BACK) {
+            return Camera.open();
+        }
+        return null;
+    }
+
+    @Override
+    public void getCameraInfo(final int cameraId, final CameraInfo2 cameraInfo) {
+        cameraInfo.facing = Camera.CameraInfo.CAMERA_FACING_BACK;
+        cameraInfo.orientation = 90;
+    }
+
+    private boolean hasCameraSupport() {
+        return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA);
+    }
+}
diff --git a/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelperGB.java b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelperGB.java
new file mode 100644
index 00000000..ec1ad63d
--- /dev/null
+++ b/rssample/src/jp/co/cyberagent/android/gpuimage/sample/utils/CameraHelperGB.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.utils;
+
+import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraHelperImpl;
+import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraInfo2;
+import android.annotation.TargetApi;
+import android.hardware.Camera;
+import android.hardware.Camera.CameraInfo;
+
+@TargetApi(9)
+public class CameraHelperGB implements CameraHelperImpl {
+
+    @Override
+    public int getNumberOfCameras() {
+        return Camera.getNumberOfCameras();
+    }
+
+    @Override
+    public Camera openCamera(final int id) {
+        return Camera.open(id);
+    }
+
+    @Override
+    public Camera openDefaultCamera() {
+        return Camera.open(0);
+    }
+
+    @Override
+    public boolean hasCamera(final int facing) {
+        return getCameraId(facing) != -1;
+    }
+
+    @Override
+    public Camera openCameraFacing(final int facing) {
+        return Camera.open(getCameraId(facing));
+    }
+
+    @Override
+    public void getCameraInfo(final int cameraId, final CameraInfo2 cameraInfo) {
+        CameraInfo info = new CameraInfo();
+        Camera.getCameraInfo(cameraId, info);
+        cameraInfo.facing = info.facing;
+        cameraInfo.orientation = info.orientation;
+    }
+
+    private int getCameraId(final int facing) {
+        int numberOfCameras = Camera.getNumberOfCameras();
+        CameraInfo info = new CameraInfo();
+        for (int id = 0; id < numberOfCameras; id++) {
+            Camera.getCameraInfo(id, info);
+            if (info.facing == facing) {
+                return id;
+            }
+        }
+        return -1;
+    }
+}
diff --git a/sample/build.gradle b/sample/build.gradle
index f64f4a42..f03bd585 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -7,6 +7,7 @@ android {
     defaultConfig {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
+
     }
 
     sourceSets {
diff --git a/sample/res/layout/demo.xml b/sample/res/layout/demo.xml
new file mode 100755
index 00000000..08960c93
--- /dev/null
+++ b/sample/res/layout/demo.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical"
+	android:layout_width="fill_parent"
+	android:layout_height="wrap_content"
+>
+    <ListView android:id="@android:id/android:list" android:layout_height="wrap_content" android:layout_width="match_parent"></ListView>
+</LinearLayout>
diff --git a/sample/res/layout/filtersample.xml b/sample/res/layout/filtersample.xml
new file mode 100644
index 00000000..f4c4cc0b
--- /dev/null
+++ b/sample/res/layout/filtersample.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+
+    <ImageView
+            android:id="@+id/imageView"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+
+    <SeekBar android:id="@+id/valueBar"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+            />
+
+</RelativeLayout>
+
diff --git a/sample/res/layout/list.xml b/sample/res/layout/list.xml
new file mode 100644
index 00000000..098d4eb5
--- /dev/null
+++ b/sample/res/layout/list.xml
@@ -0,0 +1,18 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/listlayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <ListView
+        android:id="@+id/thr_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentTop="true"
+        android:layout_alignWithParentIfMissing="true"
+        android:layout_centerHorizontal="true"
+        android:background="#00000000"
+        android:cacheColorHint="#00000000"
+        android:overScrollFooter="@null" />
+
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/sample/res/layout/listchild.xml b/sample/res/layout/listchild.xml
new file mode 100644
index 00000000..93b7899e
--- /dev/null
+++ b/sample/res/layout/listchild.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:id="@+id/listchild">
+	<TextView android:layout_width="fill_parent"
+		android:layout_height="fill_parent" android:id="@+id/actname"
+		android:height="40dp" android:clickable="false" android:textSize="20sp"
+		android:gravity="right|center_horizontal" />
+</LinearLayout>
\ No newline at end of file
diff --git a/sample/res/layout/listitem.xml b/sample/res/layout/listitem.xml
new file mode 100644
index 00000000..0e6e38c8
--- /dev/null
+++ b/sample/res/layout/listitem.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" android:layout_width="fill_parent"
+	android:layout_height="fill_parent" android:id="@+id/titlebar">
+	<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+		android:layout_width="fill_parent" android:padding="10dp"
+		android:textSize="22sp" android:height="50dp" android:layout_height="fill_parent"
+		android:id="@+id/titletext">
+	</TextView>
+</LinearLayout>
\ No newline at end of file
diff --git a/sample/res/layout/livefiltersample.xml b/sample/res/layout/livefiltersample.xml
new file mode 100644
index 00000000..cd340acd
--- /dev/null
+++ b/sample/res/layout/livefiltersample.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+
+    <TextureView
+            android:id="@+id/preview_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <FrameLayout android:layout_width="match_parent"
+                 android:layout_height="match_parent"
+            android:background="#000000"/>
+
+    <ImageView
+            android:id="@+id/format_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            />
+
+    <Button android:id="@+id/flip_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentRight="true"
+            android:text="flip"
+            android:visibility="gone"/>
+
+    <SeekBar android:id="@+id/valueBar"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+            />
+
+</RelativeLayout>
+
diff --git a/sample/src/com/caguilar/android/filters/samples/FilterObject.java b/sample/src/com/caguilar/android/filters/samples/FilterObject.java
new file mode 100644
index 00000000..845fdfbf
--- /dev/null
+++ b/sample/src/com/caguilar/android/filters/samples/FilterObject.java
@@ -0,0 +1,61 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+
+public class FilterObject {
+    private String value;
+    private float defaultValue;
+    private float minusValue;
+    private float maxValue;
+    private float divisorValue;
+    private String name;
+
+    public FilterObject(String name, String value, int defaultValue, int maxValue, int minusValue, int divisorValue) {
+        this.value = value;
+        this.name = name;
+        this.defaultValue = defaultValue;
+        this.maxValue = maxValue;
+        this.minusValue = minusValue;
+        this.divisorValue = divisorValue;
+
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public float getDefaultValue() {
+        return defaultValue;
+    }
+
+    public float getMinusValue() {
+        return minusValue;
+    }
+
+    public float getMaxValue() {
+        return maxValue;
+    }
+
+    public float getDivisorValue() {
+        return divisorValue;
+    }
+
+    public String getName() {
+        return name;
+    }
+}
diff --git a/sample/src/com/caguilar/android/filters/samples/FilterSystem.java b/sample/src/com/caguilar/android/filters/samples/FilterSystem.java
new file mode 100644
index 00000000..66df853a
--- /dev/null
+++ b/sample/src/com/caguilar/android/filters/samples/FilterSystem.java
@@ -0,0 +1,152 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.PointF;
+import android.renderscript.Allocation;
+import android.renderscript.Float3;
+import android.renderscript.RenderScript;
+import android.renderscript.ScriptC;
+import com.caguilar.android.filters.scripts.GaussianBlurFilter;
+import com.caguilar.android.filters.scripts.HalftoneFilter;
+import com.caguilar.android.filters.scripts.HueFilter;
+import com.caguilar.android.filters.scripts.ScriptC_basicfilter;
+import com.caguilar.android.filters.scripts.ScriptC_brightnessfilter;
+import com.caguilar.android.filters.scripts.ScriptC_contrastfilter;
+import com.caguilar.android.filters.scripts.ScriptC_exposurefilter;
+import com.caguilar.android.filters.scripts.ScriptC_gammafilter;
+import com.caguilar.android.filters.scripts.ScriptC_grayscalefilter;
+import com.caguilar.android.filters.scripts.ScriptC_invertcolorfilter;
+import com.caguilar.android.filters.scripts.ScriptC_luminancethresholdfilter;
+import com.caguilar.android.filters.scripts.ScriptC_monochromefilter;
+import com.caguilar.android.filters.scripts.ScriptC_opacityfilter;
+import com.caguilar.android.filters.scripts.ScriptC_rgbfilter;
+import com.caguilar.android.filters.scripts.ScriptC_saturationfilter;
+//import com.caguilar.android.filters.scripts.SelectiveGaussianBlurFilter;
+import com.caguilar.android.filters.scripts.SepiaFilter;
+//import com.caguilar.android.filters.scripts.TiltShiftGaussianBlurFilter;
+import com.caguilar.android.filters.scripts.ToneCurveFilter;
+
+import java.util.ArrayList;
+
+public class FilterSystem {
+
+    public static void applyFilter(Allocation mInAllocation, Allocation mOutAllocation, float value, String effectName,
+                                   RenderScript mRS, Resources resources, Bitmap originalBitmap){
+        ScriptC mScript;
+        if(effectName.equalsIgnoreCase("basic")){
+            mScript = new ScriptC_basicfilter(mRS, resources, R.raw.basicfilter);
+            ((ScriptC_basicfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("saturation")){
+            mScript = new ScriptC_saturationfilter(mRS, resources, R.raw.saturationfilter);
+            ((ScriptC_saturationfilter)mScript).set_saturationValue(value);
+            ((ScriptC_saturationfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("contrast")){
+            mScript = new ScriptC_contrastfilter(mRS, resources, R.raw.contrastfilter);
+            ((ScriptC_contrastfilter)mScript).set_contrastValue(value);
+            ((ScriptC_contrastfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if(effectName.equalsIgnoreCase("brightness")){
+            mScript = new ScriptC_brightnessfilter(mRS, resources, R.raw.brightnessfilter);
+            ((ScriptC_brightnessfilter)mScript).set_brightnessValue(value);
+            ((ScriptC_brightnessfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("sepia")) {
+            mScript = new SepiaFilter(mRS, resources, R.raw.colormatrixfilter);
+            ((SepiaFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("grayscale")) {
+            mScript = new ScriptC_grayscalefilter(mRS, resources, R.raw.grayscalefilter);
+            ((ScriptC_grayscalefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("halftone")) {
+            mScript = new HalftoneFilter(mRS, resources, R.raw.halftonefilter);
+            ((HalftoneFilter)mScript).setInputSize(originalBitmap.getWidth(), originalBitmap.getHeight());
+            ((HalftoneFilter)mScript).set_fractionalWidthOfAPixel(value);
+            ((HalftoneFilter)mScript).set_inTexture(mInAllocation);
+            ((HalftoneFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("invertcolor")) {
+            mScript = new ScriptC_invertcolorfilter(mRS, resources, R.raw.invertcolorfilter);
+            ((ScriptC_invertcolorfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("hue")) {
+            mScript = new HueFilter(mRS, resources, R.raw.huefilter);
+            ((HueFilter)mScript).setHue(value);
+            ((HueFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("monochrome")) {
+            mScript = new ScriptC_monochromefilter(mRS, resources, R.raw.monochromefilter);
+            ((ScriptC_monochromefilter)mScript).set_intensityValue(value);
+            ((ScriptC_monochromefilter)mScript).set_filterColor(new Float3(0.0f, 0.0f, 1.0f));
+            ((ScriptC_monochromefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("exposure")) {
+            mScript = new ScriptC_exposurefilter(mRS, resources, R.raw.exposurefilter);
+            ((ScriptC_exposurefilter)mScript).set_exposureValue(value);
+            ((ScriptC_exposurefilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gamma")) {
+            mScript = new ScriptC_gammafilter(mRS, resources, R.raw.gammafilter);
+            ((ScriptC_gammafilter)mScript).set_gammaValue(value);
+            ((ScriptC_gammafilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if(effectName.equalsIgnoreCase("rgb")){
+            mScript = new ScriptC_rgbfilter(mRS, resources, R.raw.rgbfilter);
+            ((ScriptC_rgbfilter)mScript).set_redValue(1.0f);
+            ((ScriptC_rgbfilter)mScript).set_greenValue(value);
+            ((ScriptC_rgbfilter)mScript).set_blueValue(1.0f);
+            ((ScriptC_rgbfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("opacity")) {
+            mScript = new ScriptC_opacityfilter(mRS, resources, R.raw.opacityfilter);
+            ((ScriptC_opacityfilter)mScript).set_opacityValue(value);
+            ((ScriptC_opacityfilter) mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("luminancethreshold")) {
+            mScript = new ScriptC_luminancethresholdfilter(mRS, resources, R.raw.luminancethresholdfilter);
+            ((ScriptC_luminancethresholdfilter)mScript).set_thresholdValue(value);
+            ((ScriptC_luminancethresholdfilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }else if (effectName.equalsIgnoreCase("tonecurve")) {
+            mScript = new ToneCurveFilter(mRS, resources, R.raw.tonecurvefilter);
+            ArrayList<PointF> blueCurvePF = new ArrayList<PointF>();
+            blueCurvePF.add(new PointF(0.0f, 0.0f));
+            blueCurvePF.add(new PointF(0.5f, value));
+            blueCurvePF.add(new PointF(1.0f, 0.75f));
+            ((ToneCurveFilter)mScript).setBlueControlPoints(blueCurvePF);
+            ((ToneCurveFilter)mScript).updateToneCurveTexture();
+            ((ToneCurveFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gaussianblur")) {
+            mScript = new GaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((GaussianBlurFilter)mScript).setBlurSize(value);
+            ((GaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((GaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((GaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("gaussianselectiveblur")) {
+            mScript = new SelectiveGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((SelectiveGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((SelectiveGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((SelectiveGaussianBlurFilter)mScript).set_excludeCircleRadius(value);
+            ((SelectiveGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("tiltshift")) {
+            mScript = new TiltShiftGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((TiltShiftGaussianBlurFilter)mScript).set_topFocusLevel(value-0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).set_bottomFocusLevel(value+0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        } else if (effectName.equalsIgnoreCase("tiltshiftvertical")) {
+            mScript = new TiltShiftGaussianBlurFilter(mRS, resources, R.raw.convolutionseperablefilter);
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageHeight(originalBitmap.getHeight());
+            ((TiltShiftGaussianBlurFilter)mScript).set_imageWidth(originalBitmap.getWidth());
+            ((TiltShiftGaussianBlurFilter)mScript).set_topFocusLevel(value-0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).set_bottomFocusLevel(value+0.1f);
+            ((TiltShiftGaussianBlurFilter)mScript).set_direction(0);
+            ((TiltShiftGaussianBlurFilter)mScript).invoke_filter(mScript,mInAllocation, mOutAllocation);
+        }
+    }
+}
diff --git a/sample/src/com/caguilar/android/filters/samples/FiltersActivity.java b/sample/src/com/caguilar/android/filters/samples/FiltersActivity.java
new file mode 100644
index 00000000..8e37d048
--- /dev/null
+++ b/sample/src/com/caguilar/android/filters/samples/FiltersActivity.java
@@ -0,0 +1,104 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListView;
+
+import java.util.ArrayList;
+
+public class FiltersActivity extends Activity {
+    protected ArrayList<FilterObject> list;
+    boolean staticView = true;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.demo);
+        list = loadFilters();
+        ListView elv = (ListView)findViewById(android.R.id.list);
+        FiltersListAdapter myAdapter = new FiltersListAdapter(R.layout.listchild,list);
+        elv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
+                FilterObject child = (FilterObject)list.get(position);
+                Intent i;
+                if(staticView){
+                    i = new Intent(FiltersActivity.this, StaticFilterTestActivity.class);
+                }else{
+                    i = new Intent(FiltersActivity.this, LiveFilterTestActivity.class);
+                }
+
+                i.putExtra("filter",child.getValue());
+                i.putExtra("defaultValue",child.getDefaultValue());
+                i.putExtra("minusValue",child.getMinusValue());
+                i.putExtra("maxValue",child.getMaxValue());
+                i.putExtra("divisionValue",child.getDivisorValue());
+                startActivity(i);
+            }
+        });
+        elv.setAdapter(myAdapter);
+    }
+
+    public ArrayList<FilterObject> loadFilters(){
+        return new ArrayList<FilterObject>(){{
+            add(new FilterObject("Basic","basic",50,100,0,1));
+            add(new FilterObject("Saturation","saturation",100,200,0,100));
+            add(new FilterObject("Contrast","contrast",200,400,100,100));
+            add(new FilterObject("Brightness","brightness",100,200,100,100));
+            add(new FilterObject("Exposure","exposure",1000,2000,1000,100));
+            add(new FilterObject("RGB","rgb",100,200,0,100));
+            add(new FilterObject("Hue","hue",90,360,0,1));
+            add(new FilterObject("Monochrome","monochrome",50,100,0,100));
+            add(new FilterObject("Gamma","gamma",100,300,0,100));
+            add(new FilterObject("Sepia","sepia",50,100,0,1));
+            add(new FilterObject("Gray Scale","grayscale",50,100,0,1));
+            add(new FilterObject("Invert Color","invertcolor",50,100,0,1));
+            add(new FilterObject("Luminance Threshold","luminancethreshold",50,100,0,100));
+            add(new FilterObject("Halftone","halftone",100,500,0,10000));
+            add(new FilterObject("Tone Curve","tonecurve",50000,100000,0,100000));
+            add(new FilterObject("Gaussian Blur","gaussianblur",50000,400000,0,100000));
+            add(new FilterObject("Selective Gaussian Blur","gaussianselectiveblur",18750,75000,0,100000));
+            add(new FilterObject("TiltShift","tiltshift",30000,60000,-20000,100000));
+            add(new FilterObject("TiltShift Vertical","tiltshiftvertical",30000,60000,-20000,100000));
+            add(new FilterObject("Opacity","opacity",100,100,0,100));
+        }};
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        if(staticView){
+            menu.add(0,0,0,"Live").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        }else{
+            menu.add(0,0,0,"Static").setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        }
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        staticView = !staticView;
+        invalidateOptionsMenu();
+        return super.onOptionsItemSelected(item);
+    }
+}
\ No newline at end of file
diff --git a/sample/src/com/caguilar/android/filters/samples/FiltersListAdapter.java b/sample/src/com/caguilar/android/filters/samples/FiltersListAdapter.java
new file mode 100644
index 00000000..3c514303
--- /dev/null
+++ b/sample/src/com/caguilar/android/filters/samples/FiltersListAdapter.java
@@ -0,0 +1,80 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.content.Context;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import com.caguilar.android.filters.samples.R;
+
+import java.util.ArrayList;
+
+public class FiltersListAdapter extends BaseAdapter {
+	/*-------------------------- Fields --------------------------*/
+
+	private ArrayList<FilterObject> list = new ArrayList<FilterObject>();
+	private int layout;
+
+	/*-------------------------- Public --------------------------*/
+
+	public FiltersListAdapter(int inLayout,ArrayList<FilterObject> inList) {
+		layout = inLayout;
+        list = inList;
+	}
+
+    @Override
+    public int getCount() {
+        return list.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return list.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        Context context = parent.getContext();
+        LinearLayout linear;
+        TextView modName;
+        if(convertView==null){
+            LayoutInflater inflater = LayoutInflater.from(context);
+            View v = inflater.inflate(layout, parent, false);
+            linear = (LinearLayout) v.findViewById(R.id.listchild);
+
+            linear.setOrientation(LinearLayout.VERTICAL);
+            modName  = (TextView) linear.findViewById(R.id.actname);
+            modName.setGravity(Gravity.LEFT|Gravity.CENTER_VERTICAL);
+            modName.setPadding((int)(12.0f*context.getResources().getDisplayMetrics().density),0,0,0);
+        }else{
+            linear = (LinearLayout)convertView;
+            modName  = (TextView) linear.findViewById(R.id.actname);
+        }
+        modName.setText(list.get(position).getName());
+        return linear;
+    }
+}
\ No newline at end of file
diff --git a/sample/src/com/caguilar/android/filters/samples/LiveFilterTestActivity.java b/sample/src/com/caguilar/android/filters/samples/LiveFilterTestActivity.java
new file mode 100644
index 00000000..ce190e87
--- /dev/null
+++ b/sample/src/com/caguilar/android/filters/samples/LiveFilterTestActivity.java
@@ -0,0 +1,396 @@
+/*
+ * Copyright (C) 2012 Cesar Aguilar
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.caguilar.android.filters.samples;
+
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.ImageFormat;
+import android.graphics.Matrix;
+import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.renderscript.Allocation;
+import android.renderscript.RenderScript;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.TextureView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+import com.caguilar.android.filters.scripts.Yuv2Rgb;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.TreeSet;
+
+/**
+ * Tests for manual verification of the CDD-required camera output formats
+ * for preview callbacks
+ */
+public class LiveFilterTestActivity extends Activity
+        implements TextureView.SurfaceTextureListener, Camera.PreviewCallback, SeekBar.OnSeekBarChangeListener {
+    private TextureView mPreviewView;
+    private SurfaceTexture mPreviewTexture;
+    private int mPreviewTexWidth;
+    private int mPreviewTexHeight;
+    private ImageView mFormatView;
+    private Camera mCamera;
+    private Camera.Size mPreviewSize;
+    private Bitmap mCallbackBitmap;
+    private Bitmap mPreCallbackBitmap;
+
+    private static final int STATE_OFF = 0;
+    private static final int STATE_PREVIEW = 1;
+    private static final int STATE_NO_CALLBACKS = 2;
+    private int mState = STATE_OFF;
+    private boolean mProcessInProgress = false;
+    private RenderScript mRS;
+//    private RsYuv mFilterYuv;
+    boolean FRONT;
+
+    Allocation mInAllocation;
+    Allocation mOutAllocation;
+    Yuv2Rgb mScript;
+    float mCurrentValue;
+    String mCurrentEffect;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCurrentEffect = getIntent().getStringExtra("filter");
+        setTitle(mCurrentEffect);
+        setContentView(R.layout.livefiltersample);
+        mPreviewView = (TextureView) findViewById(R.id.preview_view);
+        mFormatView = (ImageView) findViewById(R.id.format_view);
+        mPreviewView.setSurfaceTextureListener(this);
+        mRS = RenderScript.create(this);
+
+        if(Camera.getNumberOfCameras()>1){
+            findViewById(R.id.flip_button).setVisibility(View.VISIBLE);
+            findViewById(R.id.flip_button).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if(FRONT){
+                        FRONT = false;
+                        setUpCamera(0);
+                    }else{
+                        FRONT = true;
+                        setUpCamera(1);
+                    }
+
+                }
+            });
+        }
+
+        if(findViewById(R.id.valueBar)!=null){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            bar.setOnSeekBarChangeListener(this);
+            bar.setMax((int)getIntent().getFloatExtra("maxValue",0.0f));
+            bar.setProgress((int)getIntent().getFloatExtra("defaultValue",100.0f));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
+        doChange(seekBar);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        doChange(seekBar);
+    }
+
+    public void doChange(SeekBar seekBar){
+        float newI = seekBar.getProgress();
+        newI = newI- getIntent().getFloatExtra("minusValue", 0.0f);
+        mCurrentValue = newI/getIntent().getFloatExtra("divisionValue", 1.0f);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        setUpCamera(0);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        shutdownCamera();
+    }
+
+    public void onSurfaceTextureAvailable(SurfaceTexture surface,
+                                          int width, int height) {
+        mPreviewTexture = surface;
+        mPreviewTexWidth = width;
+        mPreviewTexHeight = height;
+        if (mCamera != null) {
+            startPreview();
+        }
+    }
+
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
+        // Ignored, Camera does all the work for us
+    }
+
+    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
+        return true;
+    }
+
+    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+        // Invoked every time there's a new Camera preview frame
+    }
+
+    private void setUpCamera(int id) {
+        shutdownCamera();
+        mCamera = Camera.open(id);
+        if (mPreviewTexture != null) {
+            startPreview();
+        }
+    }
+
+    public Camera.Size getOptimalPreviewSize(List<Camera.Size> sizes, int w, int h) {
+        final double ASPECT_TOLERANCE = 0.001;
+        double targetRatio = (double) w / h;
+        if (sizes == null) return null;
+
+        Camera.Size optimalSize = null;
+        double minDiff = Double.MAX_VALUE;
+
+        int targetHeight = Math.min(h, w);
+
+        // Try to find an size match aspect ratio and size
+        for (Camera.Size size : sizes) {
+            double ratio = (double) size.width / size.height;
+            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
+            if (Math.abs(size.height - targetHeight) < minDiff) {
+                optimalSize = size;
+                minDiff = Math.abs(size.height - targetHeight);
+            }
+        }
+
+        // Cannot find the one match the aspect ratio, ignore the requirement
+        if (optimalSize == null) {
+            minDiff = Double.MAX_VALUE;
+            for (Camera.Size size : sizes) {
+                if (Math.abs(size.height - targetHeight) < minDiff) {
+                    optimalSize = size;
+                    minDiff = Math.abs(size.height - targetHeight);
+                }
+            }
+        }
+        return optimalSize;
+    }
+
+    private void shutdownCamera() {
+        if (mCamera != null) {
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mCamera.release();
+            mCamera = null;
+            mState = STATE_OFF;
+        }
+    }
+
+    public void setupPreviewSize(){
+        Camera.Parameters p = mCamera.getParameters();
+        List<Camera.Size> unsortedSizes = p.getSupportedPreviewSizes();
+        class SizeCompare implements Comparator<Camera.Size> {
+            public int compare(Camera.Size lhs, Camera.Size rhs) {
+                if (lhs.width < rhs.width) return -1;
+                if (lhs.width > rhs.width) return 1;
+                if (lhs.height < rhs.height) return -1;
+                if (lhs.height > rhs.height) return 1;
+                return 0;
+            }
+        };
+        SizeCompare s = new SizeCompare();
+        TreeSet<Camera.Size> sortedResolutions = new TreeSet<Camera.Size>(s);
+        sortedResolutions.addAll(unsortedSizes);
+        List<Camera.Size> mPreviewSizes = new ArrayList<Camera.Size>(sortedResolutions);
+        mPreviewSize = getOptimalPreviewSize(mPreviewSizes, mPreviewTexWidth, mPreviewTexHeight);
+    }
+
+    private void startPreview() {
+        if (mState != STATE_OFF) {
+            // Stop for a while to drain callbacks
+            mCamera.setPreviewCallbackWithBuffer(null);
+            mCamera.stopPreview();
+            mState = STATE_OFF;
+            Handler h = new Handler();
+            Runnable mDelayedPreview = new Runnable() {
+                public void run() {
+                    startPreview();
+                }
+            };
+            h.postDelayed(mDelayedPreview, 300);
+            return;
+        }
+        mState = STATE_PREVIEW;
+
+        setupPreviewSize();
+
+        Matrix transform = new Matrix();
+        float widthRatio = mPreviewSize.width / (float)mPreviewTexWidth;
+        float heightRatio = mPreviewSize.height / (float)mPreviewTexHeight;
+
+        transform.setScale(1, heightRatio/widthRatio);
+        transform.postTranslate(0,
+                mPreviewTexHeight * (1 - heightRatio/widthRatio)/2);
+
+        mPreviewView.setTransform(transform);
+
+        Camera.Parameters p = mCamera.getParameters();
+        p.setPreviewFormat(ImageFormat.NV21);
+        p.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
+        mCamera.setParameters(p);
+
+        mCamera.setPreviewCallbackWithBuffer(this);
+        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
+                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
+        for (int i=0; i < 4; i++) {
+            mCamera.addCallbackBuffer(new byte[expectedBytes]);
+        }
+        try {
+            mCamera.setPreviewTexture(mPreviewTexture);
+            mCamera.startPreview();
+        } catch (IOException ioe) {
+        }
+    }
+
+
+    private class ProcessPreviewDataTask extends AsyncTask<byte[], Void, Boolean> {
+        protected Boolean doInBackground(byte[]... datas) {
+            byte[] data = datas[0];
+            //mFilterYuv.execute(data, mPreCallbackBitmap);
+            try{
+                mInAllocation.copyFrom(mPreCallbackBitmap);
+            }catch (Throwable e){
+                mScript = new Yuv2Rgb(mRS,getResources(),R.raw.yuv2rgb);
+                mInAllocation = Allocation.createFromBitmap(mRS, mCallbackBitmap,
+                        Allocation.MipmapControl.MIPMAP_NONE,
+                        Allocation.USAGE_SCRIPT);
+                mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+                mOutAllocation.copyFrom(mPreCallbackBitmap);
+            }
+
+            //CONVERT TO RGB
+            mScript.convert(data,mPreCallbackBitmap.getWidth(),mPreCallbackBitmap.getHeight(), mOutAllocation);
+            mOutAllocation.copyTo(mPreCallbackBitmap);
+            mInAllocation.copyFrom(mPreCallbackBitmap);
+
+
+            FilterSystem.applyFilter(mInAllocation,mOutAllocation,mCurrentValue,mCurrentEffect,mRS,getResources(),mCallbackBitmap);
+            mOutAllocation.copyTo(mCallbackBitmap);
+            if(mCamera!=null){
+                mCamera.addCallbackBuffer(data);
+            }
+            mProcessInProgress = false;
+            return true;
+        }
+
+        protected void onPostExecute(Boolean result) {
+            mFormatView.invalidate();
+        }
+
+    }
+
+    public void onPreviewFrame(byte[] data, Camera camera) {
+        if (mProcessInProgress || mState != STATE_PREVIEW) {
+            mCamera.addCallbackBuffer(data);
+            return;
+        }
+        if (data == null) {
+            return;
+        }
+        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
+                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
+        if (expectedBytes != data.length) {
+            mState = STATE_NO_CALLBACKS;
+            mCamera.setPreviewCallbackWithBuffer(null);
+            return;
+        }
+        mProcessInProgress = true;
+        if (mCallbackBitmap == null ||
+                mPreviewSize.width != mCallbackBitmap.getWidth() ||
+                mPreviewSize.height != mCallbackBitmap.getHeight() ) {
+            mCallbackBitmap =
+                    Bitmap.createBitmap(
+                            mPreviewSize.width, mPreviewSize.height,
+                            Bitmap.Config.ARGB_8888);
+            mPreCallbackBitmap =
+                    Bitmap.createBitmap(
+                            mPreviewSize.width, mPreviewSize.height,
+                            Bitmap.Config.ARGB_8888);
+            //mFilterYuv = new RsYuv(mRS, getResources(), mPreviewSize.width, mPreviewSize.height);
+            mFormatView.setImageBitmap(mCallbackBitmap);
+        }
+        mFormatView.invalidate();
+        mCamera.addCallbackBuffer(data);
+        mProcessInProgress = true;
+        new ProcessPreviewDataTask().execute(data);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(1,1,1,"Values").setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId()==1){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            float newI = bar.getProgress();
+            newI = newI- Float.parseFloat(getIntent().getStringExtra("minusValue"));
+            float value = newI/Float.parseFloat(getIntent().getStringExtra("divisionValue"));
+            makeDialog(value+"","Value");
+        }
+        return true;
+    }
+
+    public AlertDialog makeDialog(String message, String title) {
+        if (isFinishing())
+            return null;
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getParent() != null ? getParent() : this);
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setTitle(title)
+                .setPositiveButton(
+                        "OK",
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alert = builder.create();
+        alert.show();
+        return alert;
+    }
+}
\ No newline at end of file
diff --git a/sample/src/com/caguilar/android/filters/samples/StaticFilterTestActivity.java b/sample/src/com/caguilar/android/filters/samples/StaticFilterTestActivity.java
new file mode 100644
index 00000000..c4aa0615
--- /dev/null
+++ b/sample/src/com/caguilar/android/filters/samples/StaticFilterTestActivity.java
@@ -0,0 +1,144 @@
+/*
+   Copyright 2012 Cesar Aguilar
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+package com.caguilar.android.filters.samples;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Bundle;
+import android.renderscript.Allocation;
+import android.renderscript.RenderScript;
+import android.util.DisplayMetrics;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.ImageView;
+import android.widget.SeekBar;
+
+public class StaticFilterTestActivity extends Activity implements SeekBar.OnSeekBarChangeListener {
+
+    Bitmap originalBitmap;
+    Bitmap filteredBitmap;
+    ImageView imageView;
+    RenderScript mRS;
+    Allocation mInAllocation;
+    Allocation mOutAllocation;
+    String mCurrentEffect;
+
+    /**
+     * Called when the activity is first created.
+     */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCurrentEffect = getIntent().getStringExtra("filter");
+        setTitle(mCurrentEffect);
+        setContentView(R.layout.filtersample);
+        imageView = (ImageView)findViewById(R.id.imageView);
+        BitmapFactory.Options opts = new BitmapFactory.Options();
+        opts.inDensity = DisplayMetrics.DENSITY_XHIGH;
+        opts.inScaled = false;
+        opts.inTargetDensity = DisplayMetrics.DENSITY_XHIGH;
+        originalBitmap = BitmapFactory.decodeResource(getResources(),R.drawable.gatesmall,opts);
+        filteredBitmap = Bitmap.createBitmap(originalBitmap.getWidth(),originalBitmap.getHeight(), Bitmap.Config.ARGB_8888);
+        imageView.setImageBitmap(originalBitmap);
+        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
+
+
+        //RENDERSCRIPT ALLOCATION
+        mRS = RenderScript.create(this);
+        mInAllocation = Allocation.createFromBitmap(mRS, originalBitmap,
+                Allocation.MipmapControl.MIPMAP_NONE,
+                Allocation.USAGE_SCRIPT);
+        mOutAllocation = Allocation.createTyped(mRS, mInAllocation.getType());
+        mOutAllocation.copyFrom(originalBitmap);
+        mOutAllocation.copyTo(filteredBitmap);
+
+        if(findViewById(R.id.valueBar)!=null){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            bar.setOnSeekBarChangeListener(this);
+            bar.setMax((int)getIntent().getFloatExtra("maxValue",0.0f));
+            bar.setProgress((int)getIntent().getFloatExtra("defaultValue",100.0f));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
+        doChange(seekBar);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        doChange(seekBar);
+    }
+
+    public void doChange(SeekBar seekBar){
+        float newI = seekBar.getProgress();
+        newI = newI- getIntent().getFloatExtra("minusValue", 0.0f);
+        float value = newI/getIntent().getFloatExtra("divisionValue", 1.0f);
+
+        FilterSystem.applyFilter(mInAllocation,mOutAllocation,value,mCurrentEffect,mRS,getResources(),originalBitmap);
+
+        mOutAllocation.copyTo(filteredBitmap);
+        imageView.setImageBitmap(filteredBitmap);
+    }
+
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(1,1,1,"Values").setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_ALWAYS);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if(item.getItemId()==1){
+            SeekBar bar = (SeekBar)findViewById(R.id.valueBar);
+            float newI = bar.getProgress();
+            newI = newI- Float.parseFloat(getIntent().getStringExtra("minusValue"));
+            float value = newI/Float.parseFloat(getIntent().getStringExtra("divisionValue"));
+            makeDialog(value+"","Value");
+        }
+        return true;
+    }
+
+    public AlertDialog makeDialog(String message, String title) {
+        if (isFinishing())
+            return null;
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(
+                getParent() != null ? getParent() : this);
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setTitle(title)
+                .setPositiveButton(
+                        "OK",
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int id) {
+                                dialog.cancel();
+                            }
+                        });
+        AlertDialog alert = builder.create();
+        alert.show();
+        return alert;
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index a83756df..5f9f70c6 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -48,6 +48,7 @@
 import jp.co.cyberagent.android.gpuimage.sample.R;
 import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper;
 import jp.co.cyberagent.android.gpuimage.sample.utils.CameraHelper.CameraInfo2;
+import android.graphics.ImageFormat;
 
 public class ActivityCamera extends Activity implements OnSeekBarChangeListener, OnClickListener {
 
@@ -266,6 +267,7 @@ private void setUpCamera(final int id) {
                 parameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
             }
             parameters.setPreviewSize(1280,720);
+            parameters.setPreviewFormat(ImageFormat.NV21);
 
             mCameraInstance.setParameters(parameters);
 
diff --git a/settings.gradle b/settings.gradle
index 612d9e44..42f71592 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,3 @@
 include ':library'
 include ':sample'
+include ':rs_sample'
