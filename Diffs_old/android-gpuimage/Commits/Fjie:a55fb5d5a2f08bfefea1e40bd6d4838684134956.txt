diff --git a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
deleted file mode 100644
index e8589704..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import java.nio.IntBuffer;
-
-import android.graphics.Bitmap;
-import android.graphics.Bitmap.Config;
-import android.hardware.Camera.Size;
-import android.opengl.GLES20;
-import android.opengl.GLUtils;
-import android.util.Log;
-
-public class OpenGlUtils {
-    public static final int NO_TEXTURE = -1;
-
-    public static int loadTexture(final Bitmap img, final int usedTexId) {
-        return loadTexture(img, usedTexId, true);
-    }
-
-    public static int loadTexture(final Bitmap img, final int usedTexId, final boolean recycle) {
-        int textures[] = new int[1];
-        if (usedTexId == NO_TEXTURE) {
-            GLES20.glGenTextures(1, textures, 0);
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-
-            GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, img, 0);
-        } else {
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);
-            GLUtils.texSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, img);
-            textures[0] = usedTexId;
-        }
-        if (recycle) {
-            img.recycle();
-        }
-        return textures[0];
-    }
-
-    public static int loadTexture(final IntBuffer data, final Size size, final int usedTexId) {
-        int textures[] = new int[1];
-        if (usedTexId == NO_TEXTURE) {
-            GLES20.glGenTextures(1, textures, 0);
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-            GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, size.width, size.height,
-                    0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);
-        } else {
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);
-            GLES20.glTexSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, size.width,
-                    size.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);
-            textures[0] = usedTexId;
-        }
-        return textures[0];
-    }
-
-    public static int loadTextureAsBitmap(final IntBuffer data, final Size size, final int usedTexId) {
-        Bitmap bitmap = Bitmap
-                .createBitmap(data.array(), size.width, size.height, Config.ARGB_8888);
-        return loadTexture(bitmap, usedTexId);
-    }
-
-    public static int loadShader(final String strSource, final int iType) {
-        int[] compiled = new int[1];
-        int iShader = GLES20.glCreateShader(iType);
-        GLES20.glShaderSource(iShader, strSource);
-        GLES20.glCompileShader(iShader);
-        GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);
-        if (compiled[0] == 0) {
-            Log.d("Load Shader Failed", "Compilation\n" + GLES20.glGetShaderInfoLog(iShader));
-            return 0;
-        }
-        return iShader;
-    }
-
-    public static int loadProgram(final String strVSource, final String strFSource) {
-        int iVShader;
-        int iFShader;
-        int iProgId;
-        int[] link = new int[1];
-        iVShader = loadShader(strVSource, GLES20.GL_VERTEX_SHADER);
-        if (iVShader == 0) {
-            Log.d("Load Program", "Vertex Shader Failed");
-            return 0;
-        }
-        iFShader = loadShader(strFSource, GLES20.GL_FRAGMENT_SHADER);
-        if (iFShader == 0) {
-            Log.d("Load Program", "Fragment Shader Failed");
-            return 0;
-        }
-
-        iProgId = GLES20.glCreateProgram();
-
-        GLES20.glAttachShader(iProgId, iVShader);
-        GLES20.glAttachShader(iProgId, iFShader);
-
-        GLES20.glLinkProgram(iProgId);
-
-        GLES20.glGetProgramiv(iProgId, GLES20.GL_LINK_STATUS, link, 0);
-        if (link[0] <= 0) {
-            Log.d("Load Program", "Linking Failed");
-            return 0;
-        }
-        GLES20.glDeleteShader(iVShader);
-        GLES20.glDeleteShader(iFShader);
-        return iProgId;
-    }
-
-    public static float rnd(final float min, final float max) {
-        float fRandNum = (float) Math.random();
-        return min + (max - min) * fRandNum;
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
index 8392a5a9..59760dc2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.annotation.TargetApi;
 import android.app.ActivityManager;
@@ -42,7 +42,10 @@
 import java.io.*;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.util.PixelBuffer;
+import jp.co.cyberagent.android.gpuimage.util.Rotation;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -354,7 +357,7 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
 
     /**
      * Deprecated: Please use
-     * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
+     * {@link GPUImageView#saveToPictures(String, String, GPUImageView.OnPictureSavedListener)}
      *
      * Save current image with applied filter to Pictures. It will be stored on
      * the default Picture folder on the phone below the given folderName and
@@ -374,7 +377,7 @@ public void saveToPictures(final String folderName, final String fileName,
 
     /**
      * Deprecated: Please use
-     * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
+     * {@link GPUImageView#saveToPictures(String, String, GPUImageView.OnPictureSavedListener)}
      *
      * Apply and save the given bitmap with applied filter to Pictures. It will
      * be stored on the default Picture folder on the phone below the given
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
index 691550bd..44b682be 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
@@ -26,10 +26,6 @@
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
 
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.opengles.GL10;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -38,12 +34,21 @@
 import java.util.LinkedList;
 import java.util.Queue;
 
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageNativeLibrary;
+import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
+import jp.co.cyberagent.android.gpuimage.util.Rotation;
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
 public class GPUImageRenderer implements Renderer, PreviewCallback {
     public static final int NO_IMAGE = -1;
-    static final float CUBE[] = {
+    public static final float CUBE[] = {
             -1.0f, -1.0f,
             1.0f, -1.0f,
             -1.0f, 1.0f,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
index cc6a0247..e086c97c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
@@ -14,13 +14,11 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.opengl.GLES20;
@@ -38,11 +36,15 @@
 import java.nio.IntBuffer;
 import java.util.concurrent.Semaphore;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.util.Rotation;
+
+// TODO: 2017/9/12 包装类？
 public class GPUImageView extends FrameLayout {
 
-    private GLSurfaceView mGLSurfaceView;
-    private GPUImage mGPUImage;
-    private GPUImageFilter mFilter;
+    private GLSurfaceView mGLSurfaceView;// TODO: 2017/9/12 渲染插件
+    private GPUImage mGPUImage;// TODO: 2017/9/12 主插件
+    private GPUImageFilter mFilter;// TODO: 2017/9/12 滤镜插件
     public Size mForceSize = null;
     private float mRatio = 0.0f;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3ConvolutionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3ConvolutionFilter.java
index 0c5e5a03..2b128a0f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3ConvolutionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java
index 2e6820a3..521937f8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImage3x3TextureSamplingFilter extends GPUImageFilter {
     public static final String THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" + 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageAddBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageAddBlendFilter.java
index 59dcb343..16eee0ad 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageAddBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageAddBlendFilter extends GPUImageTwoInputFilter {
     public static final String ADD_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageAlphaBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageAlphaBlendFilter.java
index 753c24d6..959b26f6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageAlphaBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java
index 275253ab..4e30278a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java
@@ -4,10 +4,12 @@
  *
 */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 
 public class GPUImageBilateralFilter extends GPUImageFilter {
 	public static final String BILATERAL_VERTEX_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java
index 4e681b3c..83dc4a29 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * A hardware-accelerated 9-hit box blur of an image
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java
index e528ee87..a20fed35 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * brightness value ranges from -1.0 to 1.0, with 0.0 as the normal level
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java
index af49bedd..d5ac5d36 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageBulgeDistortionFilter extends GPUImageFilter {
     public static final String BULGE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java
index 52585956..b9fdd193 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 
 public class GPUImageCGAColorspaceFilter extends GPUImageFilter {
     public static final String CGACOLORSPACE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageChromaKeyBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageChromaKeyBlendFilter.java
index 7957b05a..4821e74f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageChromaKeyBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java
index 68c078a6..641ad94c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java
@@ -1,7 +1,9 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Created by edward_chiang on 13/10/16.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBlendFilter.java
index 0f5de140..93cbf4b8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageColorBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBurnBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBurnBlendFilter.java
index e3b5c42a..5485f2b2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBurnBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageColorBurnBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_BURN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorDodgeBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorDodgeBlendFilter.java
index 702a3a98..555ba6b8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorDodgeBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageColorDodgeBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_DODGE_BLEND_FRAGMENT_SHADER = "precision mediump float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java
similarity index 91%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java
index 2d8df9b9..14aee00e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 
 /**
  * Invert all the colors in the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java
index 59203c4d..8ebebc38 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Applies a ColorMatrix to the image.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java
index 1d2b9107..8567d6f9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Changes the contrast of the image.<br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java
index 04a3d4c7..8bb421c0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * crossHatchSpacing: The fractional width of the image to use as the spacing for the crosshatch. The default is 0.03.
  * lineWidth: A relative width for the crosshatch lines. The default is 0.003.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDarkenBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDarkenBlendFilter.java
index 385e8e3a..8965dc90 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDarkenBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageDarkenBlendFilter extends GPUImageTwoInputFilter {
     public static final String DARKEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDifferenceBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDifferenceBlendFilter.java
index 1a32cd0c..c52d172c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDifferenceBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageDifferenceBlendFilter extends GPUImageTwoInputFilter {
     public static final String DIFFERENCE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java
index f6ce4e2f..67813432 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * For each pixel, this sets it to the maximum value of the red channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDirectionalSobelEdgeDetectionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDirectionalSobelEdgeDetectionFilter.java
index a5884a12..0a9da813 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDirectionalSobelEdgeDetectionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 
 public class GPUImageDirectionalSobelEdgeDetectionFilter extends GPUImage3x3TextureSamplingFilter {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDissolveBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDissolveBlendFilter.java
index cd2880a6..e637763d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDissolveBlendFilter.java
@@ -14,9 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDivideBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDivideBlendFilter.java
index 179cd4ee..eaf35324 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDivideBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageDivideBlendFilter extends GPUImageTwoInputFilter {
     public static final String DIVIDE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageEmbossFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageEmbossFilter.java
index f4cbdef7..a660eb84 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageEmbossFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 /**
  * Applies an emboss effect to the image.<br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExclusionBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExclusionBlendFilter.java
index dcfc9346..65fe6bf4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExclusionBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageExclusionBlendFilter extends GPUImageTwoInputFilter {
     public static final String EXCLUSION_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java
index de5de414..6716ece6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * exposure: The adjusted exposure (-10.0 - 10.0, with 0.0 as the default)
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java
index c815ad0f..4ffa8449 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageFalseColorFilter extends GPUImageFilter {
     public static final String FALSECOLOR_FRAGMENT_SHADER = "" +
             "precision lowp float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java
index 1f902d0f..c20956f3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * gamma value ranges from 0.0 to 3.0, with 1.0 as the normal level
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java
index c912f73e..396bd5a3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * A more generalized 9x9 Gaussian blur filter
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java
index 460019cc..d80927e1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageGlassSphereFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java
index b0a67f9e..69fcaaaf 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 
 /**
  * Applies a grayscale effect to the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java
index 52e27d04..bcc97247 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java
@@ -1,7 +1,9 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageHalftoneFilter extends GPUImageFilter {
     public static final String HALFTONE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHardLightBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHardLightBlendFilter.java
index 5bcb9c90..0f550255 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHardLightBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageHardLightBlendFilter extends GPUImageTwoInputFilter {
     public static final String HARD_LIGHT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java
index bb230abc..c2ed84b8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * The haze filter can be used to add or remove haze.
  *
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java
index 878c508a..2132e046 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Adjusts the shadows and highlights of an image
  * shadows: Increase to lighten shadows, from 0.0 to 1.0, with 0.0 as the default.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueBlendFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueBlendFilter.java
index 3950901c..e569b593 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageHueBlendFilter extends GPUImageTwoInputFilter {
     public static final String HUE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java
index 9fcf7939..4013e664 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageHueFilter extends GPUImageFilter {
     public static final String HUE_FRAGMENT_SHADER = "" +
       "precision highp float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java
index 6fc7f32b..bf42657d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Kuwahara image abstraction, drawn from the work of Kyprianidis, et. al. in their publication
  * "Anisotropic Kuwahara Filtering on the GPU" within the GPU Pro collection. This produces an oil-painting-like
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLaplacianFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLaplacianFilter.java
index d320f64d..6f12afd2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLaplacianFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java
index d7fbcfdf..758b1fde 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java
@@ -1,12 +1,13 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
-import android.util.Log;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 
 /**
  * Created by vashisthg 30/05/14.
  */
-public class GPUImageLevelsFilter extends GPUImageFilter{
+public class GPUImageLevelsFilter extends GPUImageFilter {
 
     private static final String LOGTAG = GPUImageLevelsFilter.class.getSimpleName();
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLightenBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLightenBlendFilter.java
index 77399cb1..833971b7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLightenBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageLightenBlendFilter extends GPUImageTwoInputFilter {
     public static final String LIGHTEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLinearBurnBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLinearBurnBlendFilter.java
index 2623b528..1d55ace5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLinearBurnBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageLinearBurnBlendFilter extends GPUImageTwoInputFilter {
     public static final String LINEAR_BURN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLookupFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLookupFilter.java
index 42c9ebdc..ad35523d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLookupFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLuminosityBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLuminosityBlendFilter.java
index 85e7bfda..9674486b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLuminosityBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageLuminosityBlendFilter extends GPUImageTwoInputFilter {
     public static final String LUMINOSITY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMixBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMixBlendFilter.java
index 7bf68859..6a1059af 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMixBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java
index e426a340..598208ee 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Converts the image to a single-color version, based on the luminance of each pixel
  * intensity: The degree to which the specific color replaces the normal image color (0.0 - 1.0, with 1.0 as the default)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMultiplyBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMultiplyBlendFilter.java
index 1e002e36..3b834332 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMultiplyBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageMultiplyBlendFilter extends GPUImageTwoInputFilter {
     public static final String MULTIPLY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageNonMaximumSuppressionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageNonMaximumSuppressionFilter.java
index a6f5af48..77cac4e2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageNonMaximumSuppressionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageNonMaximumSuppressionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String NMS_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageNormalBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageNormalBlendFilter.java
index a886bd40..7b80adf3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageNormalBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 /**
  * This equation is a simplification of the general blending equation. It assumes the destination color is opaque, and therefore drops the destination color's alpha term.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java
index 55f198d1..82fc475f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Adjusts the alpha channel of the incoming image
  * opacity: The value to multiply the incoming alpha channel for each pixel by (0.0 - 1.0, with 1.0 as the default)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOverlayBlendFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOverlayBlendFilter.java
index 4dba4200..0fb9c8a0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOverlayBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageOverlayBlendFilter extends GPUImageTwoInputFilter {
     public static final String OVERLAY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java
index c0ec15d1..3e3d5d7e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java
@@ -14,9 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Applies a grayscale effect to the image.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java
index 3b7c8ff7..d0fc5fdd 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Reduces the color range of the image. <br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java
index 2d5e28c7..e4751ae0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * For each pixel, this sets it to the maximum value of each color channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java
index f0af18cb..ded88207 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Adjusts the individual RGB channels of an image
  * red: Normalized values by which each color channel is multiplied. The range is from 0.0 up, with 1.0 as the default.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationBlendFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationBlendFilter.java
index 1c0f90d6..1b5c943c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageSaturationBlendFilter extends GPUImageTwoInputFilter {
     public static final String SATURATION_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java
index 0725953d..3ac2e637 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * saturation: The degree of saturation or desaturation to apply to the image (0.0 - 2.0, with 1.0 as the default)
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageScreenBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageScreenBlendFilter.java
index 2c63a699..100a92e4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageScreenBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageScreenBlendFilter extends GPUImageTwoInputFilter {
     public static final String SCREEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSepiaFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSepiaFilter.java
index cbcf3534..2d5e4080 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSepiaFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 /**
  * Applies a simple sepia effect.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java
index 4317b66c..0007283e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Sharpens the picture. <br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java
index dd78e708..66650646 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java
@@ -14,10 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
-import java.util.ArrayList;
-import java.util.List;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
 
 /**
  * Converts video to look like a sketch.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java
index a569ce97..627cb23b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
-import android.opengl.GLES20;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
 
 /**
  *  This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSobelThresholdFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSobelThresholdFilter.java
index f1dcf64e..ceebb73d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSobelThresholdFilter.java
@@ -1,4 +1,4 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSoftLightBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSoftLightBlendFilter.java
index 0e1b742e..c63e3d09 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSoftLightBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageSoftLightBlendFilter extends GPUImageTwoInputFilter {
     public static final String SOFT_LIGHT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSourceOverBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSourceOverBlendFilter.java
index fd6a7b98..afde513b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSourceOverBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageSourceOverBlendFilter extends GPUImageTwoInputFilter {
     public static final String SOURCE_OVER_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java
index 6314cf19..dcec2e81 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageSphereRefractionFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSubtractBlendFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSubtractBlendFilter.java
index 52b54ecc..c1b0f7e2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSubtractBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageSubtractBlendFilter extends GPUImageTwoInputFilter {
     public static final String SUBTRACT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java
index d4947b9a..0196a980 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Creates a swirl distortion on the image.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java
index 0f6e1d08..327bb520 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.graphics.Point;
 import android.graphics.PointF;
@@ -26,6 +26,9 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
+
 public class GPUImageToneCurveFilter extends GPUImageFilter {
     public static final String TONE_CURVE_FRAGMENT_SHADER = "" +
             " varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToonFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToonFilter.java
index 5148d1d0..2d22a294 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToonFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java
index 0a962cc5..3fd12a04 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java
@@ -1,4 +1,4 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 import android.opengl.Matrix;
@@ -7,6 +7,8 @@
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 public class GPUImageTransformFilter extends GPUImageFilter {
     public static final String TRANSFORM_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java
index afc3b864..ee1623f6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java
@@ -14,12 +14,15 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
+import jp.co.cyberagent.android.gpuimage.util.Rotation;
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 import android.graphics.Bitmap;
 import android.opengl.GLES20;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java
similarity index 84%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java
index bf3fbf17..d3efb0b6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java
@@ -14,7 +14,10 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
+
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
 
 public class GPUImageTwoPassFilter extends GPUImageFilterGroup {
     public GPUImageTwoPassFilter(String firstVertexShader, String firstFragmentShader,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java
index 439e8bd0..a6bc6843 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Performs a vignetting effect, fading out the image at the edges
  * x:
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWeakPixelInclusionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWeakPixelInclusionFilter.java
index 3e1b8f01..6eb5281f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWeakPixelInclusionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 public class GPUImageWeakPixelInclusionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String WEAKPIXEL_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java
index 1818da99..21c36d40 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+
 /**
  * Adjusts the white balance of incoming image. <br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilter.java
index 7a8641aa..82084cd4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter.base;
 
 import android.content.Context;
 import android.content.res.AssetManager;
@@ -25,6 +25,8 @@
 import java.nio.FloatBuffer;
 import java.util.LinkedList;
 
+import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
+
 public class GPUImageFilter {
     public static final String NO_FILTER_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" +
@@ -78,8 +80,7 @@ public void onInit() {
         mGLProgId = OpenGlUtils.loadProgram(mVertexShader, mFragmentShader);
         mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, "position");
         mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, "inputImageTexture");
-        mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,
-                "inputTextureCoordinate");
+        mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,"inputTextureCoordinate");
         mIsInitialized = true;
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilterGroup.java
similarity index 93%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilterGroup.java
index 10ea41ca..ffd1605d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilterGroup.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter.base;
 
 import android.annotation.SuppressLint;
 import android.opengl.GLES20;
+
+import jp.co.cyberagent.android.gpuimage.util.Rotation;
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 
 import java.nio.ByteBuffer;
@@ -26,7 +28,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static jp.co.cyberagent.android.gpuimage.GPUImageRenderer.CUBE;
+import static jp.co.cyberagent.android.gpuimage.core.GPUImageRenderer.CUBE;
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 /**
@@ -91,7 +93,7 @@ public void addFilter(GPUImageFilter aFilter) {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onInit()
+     * @see jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onInit()
      */
     @Override
     public void onInit() {
@@ -103,7 +105,7 @@ public void onInit() {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDestroy()
+     * @see jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onDestroy()
      */
     @Override
     public void onDestroy() {
@@ -128,7 +130,7 @@ private void destroyFramebuffers() {
     /*
      * (non-Javadoc)
      * @see
-     * jp.co.cyberagent.android.gpuimage.GPUImageFilter#onOutputSizeChanged(int,
+     * jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onOutputSizeChanged(int,
      * int)
      */
     @Override
@@ -175,7 +177,7 @@ public void onOutputSizeChanged(final int width, final int height) {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDraw(int,
+     * @see jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onDraw(int,
      * java.nio.FloatBuffer, java.nio.FloatBuffer)
      */
     @SuppressLint("WrongCall")    
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageTwoPassTextureSamplingFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageTwoPassTextureSamplingFilter.java
index 19c0365b..00888b8a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageTwoPassTextureSamplingFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filter.base;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageTwoPassFilter;
+
 public class GPUImageTwoPassTextureSamplingFilter extends GPUImageTwoPassFilter {
     public GPUImageTwoPassTextureSamplingFilter(String firstVertexShader, String firstFragmentShader,
                                                 String secondVertexShader, String secondFragmentShader) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java
rename to library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java
index 2a775d48..870e8867 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.util;
 
-import java.util.ArrayList;
-import java.util.List;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java
similarity index 62%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java
rename to library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java
index c136155a..b6050a1e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java
@@ -1,4 +1,9 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.util;
+
+import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSobelThresholdFilter;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java b/library/src/jp/co/cyberagent/android/gpuimage/util/PixelBuffer.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
rename to library/src/jp/co/cyberagent/android/gpuimage/util/PixelBuffer.java
index ac23f599..5c173976 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/PixelBuffer.java
@@ -6,7 +6,20 @@
  * http://www.anddev.org/android-2d-3d-graphics-opengl-tutorials-f2/possible-to-do-opengl-off-screen-rendering-in-android-t13232.html#p41662
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.util;
+
+import android.graphics.Bitmap;
+import android.opengl.GLSurfaceView;
+import android.util.Log;
+
+import java.nio.IntBuffer;
+
+import javax.microedition.khronos.egl.EGL10;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.egl.EGLContext;
+import javax.microedition.khronos.egl.EGLDisplay;
+import javax.microedition.khronos.egl.EGLSurface;
+import javax.microedition.khronos.opengles.GL10;
 
 import static javax.microedition.khronos.egl.EGL10.EGL_ALPHA_SIZE;
 import static javax.microedition.khronos.egl.EGL10.EGL_BLUE_SIZE;
@@ -22,19 +35,6 @@
 import static javax.microedition.khronos.opengles.GL10.GL_RGBA;
 import static javax.microedition.khronos.opengles.GL10.GL_UNSIGNED_BYTE;
 
-import java.nio.IntBuffer;
-
-import javax.microedition.khronos.egl.EGL10;
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.egl.EGLContext;
-import javax.microedition.khronos.egl.EGLDisplay;
-import javax.microedition.khronos.egl.EGLSurface;
-import javax.microedition.khronos.opengles.GL10;
-
-import android.graphics.Bitmap;
-import android.opengl.GLSurfaceView;
-import android.util.Log;
-
 public class PixelBuffer {
     final static String TAG = "PixelBuffer";
     final static boolean LIST_CONFIGS = false;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java b/library/src/jp/co/cyberagent/android/gpuimage/util/Rotation.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
rename to library/src/jp/co/cyberagent/android/gpuimage/util/Rotation.java
index bd2e840e..f6d1bec2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/Rotation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.util;
 
 public enum Rotation {
     NORMAL, ROTATION_90, ROTATION_180, ROTATION_270;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java b/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
index c439d914..d1c40053 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
@@ -16,8 +16,6 @@
 
 package jp.co.cyberagent.android.gpuimage.util;
 
-import jp.co.cyberagent.android.gpuimage.Rotation;
-
 public class TextureRotationUtil {
 
     public static final float TEXTURE_NO_ROTATION[] = {
diff --git a/sample/res/layout/activity_gallery.xml b/sample/res/layout/activity_gallery.xml
index c2575162..edd9d867 100644
--- a/sample/res/layout/activity_gallery.xml
+++ b/sample/res/layout/activity_gallery.xml
@@ -9,7 +9,7 @@
         android:layout_height="0dp"
         android:layout_weight="1">
 
-        <jp.co.cyberagent.android.gpuimage.GPUImageView
+        <jp.co.cyberagent.android.gpuimage.core.GPUImageView
             android:id="@+id/gpuimage"
             android:layout_gravity="center"
             android:layout_width="wrap_content"
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index 6f2f6dd4..33397871 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -23,7 +23,82 @@
 import android.graphics.PointF;
 import android.opengl.Matrix;
 
-import jp.co.cyberagent.android.gpuimage.*;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3ConvolutionFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageAddBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageAlphaBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageBilateralFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageBoxBlurFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageBulgeDistortionFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageCGAColorspaceFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageChromaKeyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageColorBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageColorBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageColorBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageColorDodgeBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageColorInvertFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageCrosshatchFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageDarkenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageDifferenceBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageDilationFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageDirectionalSobelEdgeDetectionFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageDissolveBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageDivideBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageEmbossFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageExclusionBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageFalseColorFilter;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageGammaFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageGaussianBlurFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageGlassSphereFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageHalftoneFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageHardLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageHazeFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageHighlightShadowFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageHueBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageKuwaharaFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageLaplacianFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageLevelsFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageLightenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageLinearBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageLookupFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageLuminosityBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageMultiplyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageNonMaximumSuppressionFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageNormalBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageOpacityFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageOverlayBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImagePixelationFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImagePosterizeFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageRGBDilationFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageRGBFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSaturationBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageScreenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSepiaFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSharpenFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSketchFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSmoothToonFilter;
+import jp.co.cyberagent.android.gpuimage.util.GPUImageSobelEdgeDetection;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSoftLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSourceOverBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSphereRefractionFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSubtractBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageSwirlFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageToneCurveFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageToonFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageTransformFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageTwoInputFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageVignetteFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageWeakPixelInclusionFilter;
+import jp.co.cyberagent.android.gpuimage.filter.GPUImageWhiteBalanceFilter;
 
 import java.util.LinkedList;
 import java.util.List;
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index ba832284..0745f221 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -39,9 +39,9 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-import jp.co.cyberagent.android.gpuimage.GPUImage;
-import jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener;
-import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImage;
+import jp.co.cyberagent.android.gpuimage.core.GPUImage.OnPictureSavedListener;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
index ad734823..1895690c 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
@@ -16,9 +16,9 @@
 
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
-import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageView;
-import jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener;
+import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageView;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageView.OnPictureSavedListener;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
