diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java
new file mode 100644
index 00000000..9a4f995c
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java
@@ -0,0 +1,141 @@
+package jp.co.cyberagent.android.gpuimage;
+
+import android.graphics.SurfaceTexture;
+import android.opengl.GLES11Ext;
+import android.opengl.GLES20;
+import android.os.Build;
+import android.view.Surface;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
+
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
+/**
+ * Created by skonb on 16/02/27.
+ */
+public class GPUImageCanvasOverlayFilter extends GPUImageFilter implements SurfaceTexture.OnFrameAvailableListener {
+    public interface OnSurfaceAvailableListener {
+        void onSurfaceAvailable(GPUImageCanvasOverlayFilter filter, Surface surface);
+    }
+
+    static final float CUBE[] = {
+            -1.0f, -1.0f,
+            1.0f, -1.0f,
+            -1.0f, 1.0f,
+            1.0f, 1.0f,
+    };
+
+    public GPUImageCanvasOverlayFilter(OnSurfaceAvailableListener onSurfaceAvailableListener) {
+        super();
+        this.onSurfaceAvailableListener = onSurfaceAvailableListener;
+    }
+
+    OnSurfaceAvailableListener onSurfaceAvailableListener;
+    SurfaceTexture canvasTexture;
+    Surface canvasSurface;
+    FloatBuffer canvasCubeBuffer;
+    FloatBuffer canvasTextureBuffer;
+    int[] textures = new int[1];
+    boolean frameAvailable;
+    int canvasProgram;
+    protected int canvasAttribPosition;
+    protected int canvasUniformTexture;
+    protected int canvasAttribTextureCoordinate;
+
+    @Override
+    public void onInitialized() {
+        super.onInitialized();
+        String fragmentShader = mExternalOES ? mFragmentShader : getExternalOESFragmentShader(mFragmentShader, true);
+        canvasProgram = OpenGlUtils.loadProgram(mVertexShader, fragmentShader);
+        canvasAttribPosition = GLES20.glGetAttribLocation(canvasProgram, "position");
+        canvasUniformTexture = GLES20.glGetUniformLocation(canvasProgram, "inputImageTexture");
+        canvasAttribTextureCoordinate = GLES20.glGetAttribLocation(canvasProgram,
+                "inputTextureCoordinate");
+        setupTexture();
+        GLES20.glEnable(GLES20.GL_BLEND);
+        GLES20.glEnable(GLES20.GL_DEPTH_TEST);
+        GLES20.glDepthFunc(GLES20.GL_LEQUAL);
+        GLES20.glDepthMask(true);
+        GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);
+    }
+
+    void setupTexture() {
+
+        canvasTextureBuffer = (FloatBuffer) ByteBuffer.allocateDirect(TextureRotationUtil.TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer().put(TextureRotationUtil
+                .TEXTURE_NO_ROTATION).position(0);
+
+        canvasCubeBuffer = (FloatBuffer) ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer().put(CUBE).position(0);
+
+        // Generate the actual texture
+        GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
+        GLES20.glGenTextures(1, textures, 0);
+
+        canvasTexture = new SurfaceTexture(textures[0]);
+        canvasTexture.setOnFrameAvailableListener(this);
+        canvasTexture.setDefaultBufferSize(mOutputWidth, mOutputHeight);
+        canvasSurface = new Surface(canvasTexture);
+
+        if (onSurfaceAvailableListener != null) {
+            onSurfaceAvailableListener.onSurfaceAvailable(this, canvasSurface);
+        }
+    }
+
+    @Override
+    public void onOutputSizeChanged(int width, int height) {
+        super.onOutputSizeChanged(width, height);
+        if (canvasTexture != null) {
+            canvasTexture.setDefaultBufferSize(mOutputWidth, mOutputHeight);
+        }
+    }
+
+    public Surface getCanvasSurface() {
+        return canvasSurface;
+    }
+
+    @Override
+    public void onDraw(int textureId, FloatBuffer cubeBuffer, FloatBuffer textureBuffer) {
+        super.onDraw(textureId, cubeBuffer, textureBuffer);
+        if (canvasSurface != null) {
+            if (frameAvailable) {
+                canvasTexture.updateTexImage();
+                frameAvailable = false;
+            }
+            GLES20.glUseProgram(canvasProgram);
+            canvasCubeBuffer.position(0);
+            GLES20.glVertexAttribPointer(canvasAttribPosition, 2, GLES20.GL_FLOAT, false, 0, canvasCubeBuffer);
+            GLES20.glEnableVertexAttribArray(canvasAttribPosition);
+            canvasTextureBuffer.position(0);
+            GLES20.glVertexAttribPointer(canvasAttribTextureCoordinate, 2, GLES20.GL_FLOAT, false, 0,
+                    canvasTextureBuffer);
+            GLES20.glEnableVertexAttribArray(canvasAttribTextureCoordinate);
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
+            GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, textures[0]);
+            GLES20.glUniform1i(canvasUniformTexture, 2);
+            GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+            GLES20.glDisableVertexAttribArray(canvasAttribPosition);
+            GLES20.glDisableVertexAttribArray(canvasAttribTextureCoordinate);
+            GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, 0);
+        }
+    }
+
+    @Override
+    public void onFrameAvailable(SurfaceTexture surfaceTexture) {
+        synchronized (this) {
+            frameAvailable = true;
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
+        GLES20.glDeleteTextures(1, textures, 0);
+        if (Build.VERSION.SDK_INT >= 14) {
+            canvasTexture.release();
+        }
+        canvasTexture.setOnFrameAvailableListener(null);
+        GLES20.glDeleteProgram(canvasProgram);
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
index c633dc3d..ead45f47 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
@@ -52,9 +52,9 @@
             "}";
 
 
-    private final LinkedList<Runnable> mRunOnDraw;
-    private String mVertexShader;
-    private String mFragmentShader;
+    protected final LinkedList<Runnable> mRunOnDraw;
+    protected String mVertexShader;
+    protected String mFragmentShader;
     protected int mGLProgId;
     protected int mGLAttribPosition;
     protected int mGLUniformTexture;
@@ -78,19 +78,8 @@ public GPUImageFilter(final String vertexShader, final String fragmentShader) {
     public void reloadShaders() {
         String fragmentShader = mFragmentShader;
         String vertexShader = mVertexShader;
-        if (mExternalOES) {
-            if (!fragmentShader.contains("#extension GL_OES_EGL_image_external : require\n")) {
-                fragmentShader = "#extension GL_OES_EGL_image_external : require\n" + fragmentShader;
-                fragmentShader = fragmentShader.replaceAll("sampler2D", "samplerExternalOES");
-            }
-        } else {
-            if (fragmentShader.contains("#extension GL_OES_EGL_image_external : require\n")) {
-                fragmentShader = fragmentShader.replace("#extension GL_OES_EGL_image_external : require\n", "");
-                fragmentShader = fragmentShader.replaceAll("samplerExternalOES", "sampler2D");
-            }
-        }
         mVertexShader = vertexShader;
-        mFragmentShader = fragmentShader;
+        mFragmentShader = getExternalOESFragmentShader(fragmentShader, mExternalOES);
         runOnDraw(new Runnable() {
             @Override
             public void run() {
@@ -100,6 +89,22 @@ public void run() {
         });
     }
 
+    public String getExternalOESFragmentShader(String fragmentShader, boolean externalOES) {
+        String res = fragmentShader;
+        if (externalOES) {
+            if (!res.contains("#extension GL_OES_EGL_image_external : require\n")) {
+                res = "#extension GL_OES_EGL_image_external : require\n" + res;
+                res = res.replaceAll("sampler2D", "samplerExternalOES");
+            }
+        } else {
+            if (res.contains("#extension GL_OES_EGL_image_external : require\n")) {
+                res = res.replace("#extension GL_OES_EGL_image_external : require\n", "");
+                res = res.replaceAll("samplerExternalOES", "sampler2D");
+            }
+        }
+        return res;
+    }
+
 
     public final void init() {
         onInit();
@@ -209,7 +214,7 @@ public int getUniformTexture() {
         return mGLUniformTexture;
     }
 
-    public void logError(){
+    public void logError() {
         Log.i("GPUImageFilter", GLUtils.getEGLErrorString(GLES20.glGetError()));
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
index 5bb3ba13..c5fc759e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
@@ -344,6 +344,7 @@ protected void deinitGLComponents() {
     public void setOutputSize(int width, int height) {
         mOutputWidth = width;
         mOutputHeight = height;
+        mFilter.onOutputSizeChanged(width, height);
     }
 
     public void setVideoSize(final int width, final int height) {
@@ -477,4 +478,15 @@ public GPUImageFilter getFilter() {
         return mFilter;
     }
 
+    @Override
+    public int getFrameWidth() {
+        return super.getFrameWidth();
+    }
+
+    @Override
+    public int getFrameHeight() {
+        return super.getFrameHeight();
+    }
+
+
 }
diff --git a/sample/AndroidManifest.xml b/sample/AndroidManifest.xml
index d58c6e56..27360841 100644
--- a/sample/AndroidManifest.xml
+++ b/sample/AndroidManifest.xml
@@ -31,6 +31,8 @@
             android:theme="@style/AppTheme.NoActionBar"/>
         <activity android:name=".activity.ActivityMovie">
         </activity>
+        <activity android:name=".activity.ActivityCanvas">
+        </activity>
     </application>
 
 </manifest>
diff --git a/sample/res/layout/activity_activity_canvas.xml b/sample/res/layout/activity_activity_canvas.xml
new file mode 100644
index 00000000..f135aae5
--- /dev/null
+++ b/sample/res/layout/activity_activity_canvas.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:res="http://schemas.android.com/apk/res-auto"
+    tools:context="jp.co.cyberagent.android.gpuimage.sample.activity.ActivityCanvas">
+
+    <com.malmstein.fenster.view.FensterVideoView
+        android:id="@+id/video_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        res:scaleType="crop"/>
+</RelativeLayout>
diff --git a/sample/res/layout/activity_main.xml b/sample/res/layout/activity_main.xml
index 0f1ec53c..f98eed87 100644
--- a/sample/res/layout/activity_main.xml
+++ b/sample/res/layout/activity_main.xml
@@ -30,8 +30,16 @@
             android:id="@+id/button_movie"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:layout_marginBottom="10dp"
             android:drawableTop="@android:drawable/ic_menu_more"
             android:text="Movie"/>
+
+        <Button
+            android:id="@+id/button_canvas"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:drawableTop="@android:drawable/ic_menu_agenda"
+            android:text="Canvas"/>
     </LinearLayout>
 
 </FrameLayout>
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCanvas.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCanvas.java
new file mode 100644
index 00000000..69b85767
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCanvas.java
@@ -0,0 +1,100 @@
+package jp.co.cyberagent.android.gpuimage.sample.activity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.util.Log;
+import android.view.Surface;
+import android.view.View;
+
+import com.malmstein.fenster.view.FensterVideoView;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import jp.co.cyberagent.android.gpuimage.GPUImageCanvasOverlayFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRenderer;
+import jp.co.cyberagent.android.gpuimage.GPUImageTextureRenderer;
+import jp.co.cyberagent.android.gpuimage.Rotation;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageRecordableTextureRenderer;
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+public class ActivityCanvas extends Activity implements GPUImageCanvasOverlayFilter.OnSurfaceAvailableListener {
+    FensterVideoView videoView;
+    GPUImageFilter filter = null;
+
+    class Renderer extends GPUImageTextureRenderer implements FensterVideoView.Renderer {
+        public Renderer() {
+            super();
+        }
+
+        public Renderer(final GPUImageFilter filter) {
+            super(filter);
+        }
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_activity_canvas);
+        videoView = (FensterVideoView) findViewById(R.id.video_view);
+        videoView.setRenderer(new Renderer(new GPUImageCanvasOverlayFilter(this)));
+        filter = ((GPUImageTextureRenderer) videoView.getRenderer()).getFilter();
+        videoView.setVideo("http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4", 0);
+        videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+            @Override
+            public void onPrepared(MediaPlayer mp) {
+                if (!videoView.isPlaying()) {
+                    videoView.start();
+                } else {
+                    videoView.resume();
+                }
+            }
+        });
+        videoView.start();
+    }
+
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        videoView.setRenderer(new Renderer(new GPUImageCanvasOverlayFilter(this)));
+    }
+
+
+    Surface canvasSurface;
+
+    void draw() {
+        GPUImageTextureRenderer renderer = (GPUImageTextureRenderer) videoView.getRenderer();
+        Rect dirtyRect = new Rect(0, 0, renderer.getFrameWidth(), renderer.getFrameHeight());
+        Canvas canvas = canvasSurface.lockCanvas(dirtyRect);
+        Log.i("TEST", String.format("canvas rect:(%d, %d, %d, %d)", dirtyRect.left, dirtyRect.top, dirtyRect.right, dirtyRect.bottom));
+        canvas.drawColor(Color.TRANSPARENT);
+        Paint paint = new Paint();
+        paint.setColor(Color.RED);
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeWidth(3);
+        canvas.drawLine(0, 0, 200, 200, paint);
+        canvasSurface.unlockCanvasAndPost(canvas);
+    }
+
+    @Override
+    public void onSurfaceAvailable(GPUImageCanvasOverlayFilter filter, Surface surface) {
+        canvasSurface = surface;
+        draw();
+        new Timer().schedule(new TimerTask() {
+            @Override
+            public void run() {
+                draw();
+            }
+        }, 1000);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
index c34619af..783ad308 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
@@ -33,6 +33,7 @@ public void onCreate(final Bundle savedInstanceState) {
         findViewById(R.id.button_gallery).setOnClickListener(this);
         findViewById(R.id.button_camera).setOnClickListener(this);
         findViewById(R.id.button_movie).setOnClickListener(this);
+        findViewById(R.id.button_canvas).setOnClickListener(this);
     }
 
     @Override
@@ -46,6 +47,9 @@ public void onClick(final View v) {
                 break;
             case R.id.button_movie:
                 startActivity(ActivityMovie.class);
+                break;
+            case R.id.button_canvas:
+                startActivity(ActivityCanvas.class);
             default:
                 break;
         }
