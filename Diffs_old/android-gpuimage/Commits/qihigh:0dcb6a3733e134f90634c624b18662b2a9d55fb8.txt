diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
deleted file mode 100644
index 10ea41ca..00000000
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
+++ /dev/null
@@ -1,253 +0,0 @@
-/*
- * Copyright (C) 2012 CyberAgent
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package jp.co.cyberagent.android.gpuimage;
-
-import android.annotation.SuppressLint;
-import android.opengl.GLES20;
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.FloatBuffer;
-import java.util.ArrayList;
-import java.util.List;
-
-import static jp.co.cyberagent.android.gpuimage.GPUImageRenderer.CUBE;
-import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
-
-/**
- * Resembles a filter that consists of multiple filters applied after each
- * other.
- */
-public class GPUImageFilterGroup extends GPUImageFilter {
-
-    protected List<GPUImageFilter> mFilters;
-    protected List<GPUImageFilter> mMergedFilters;
-    private int[] mFrameBuffers;
-    private int[] mFrameBufferTextures;
-
-    private final FloatBuffer mGLCubeBuffer;
-    private final FloatBuffer mGLTextureBuffer;
-    private final FloatBuffer mGLTextureFlipBuffer;
-
-    /**
-     * Instantiates a new GPUImageFilterGroup with no filters.
-     */
-    public GPUImageFilterGroup() {
-        this(null);
-    }
-
-    /**
-     * Instantiates a new GPUImageFilterGroup with the given filters.
-     *
-     * @param filters the filters which represent this filter
-     */
-    public GPUImageFilterGroup(List<GPUImageFilter> filters) {
-        mFilters = filters;
-        if (mFilters == null) {
-            mFilters = new ArrayList<GPUImageFilter>();
-        } else {
-            updateMergedFilters();
-        }
-
-        mGLCubeBuffer = ByteBuffer.allocateDirect(CUBE.length * 4)
-                .order(ByteOrder.nativeOrder())
-                .asFloatBuffer();
-        mGLCubeBuffer.put(CUBE).position(0);
-
-        mGLTextureBuffer = ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4)
-                .order(ByteOrder.nativeOrder())
-                .asFloatBuffer();
-        mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);
-
-        float[] flipTexture = TextureRotationUtil.getRotation(Rotation.NORMAL, false, true);
-        mGLTextureFlipBuffer = ByteBuffer.allocateDirect(flipTexture.length * 4)
-                .order(ByteOrder.nativeOrder())
-                .asFloatBuffer();
-        mGLTextureFlipBuffer.put(flipTexture).position(0);
-    }
-
-    public void addFilter(GPUImageFilter aFilter) {
-        if (aFilter == null) {
-            return;
-        }
-        mFilters.add(aFilter);
-        updateMergedFilters();
-    }
-
-    /*
-     * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onInit()
-     */
-    @Override
-    public void onInit() {
-        super.onInit();
-        for (GPUImageFilter filter : mFilters) {
-            filter.init();
-        }
-    }
-
-    /*
-     * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDestroy()
-     */
-    @Override
-    public void onDestroy() {
-        destroyFramebuffers();
-        for (GPUImageFilter filter : mFilters) {
-            filter.destroy();
-        }
-        super.onDestroy();
-    }
-
-    private void destroyFramebuffers() {
-        if (mFrameBufferTextures != null) {
-            GLES20.glDeleteTextures(mFrameBufferTextures.length, mFrameBufferTextures, 0);
-            mFrameBufferTextures = null;
-        }
-        if (mFrameBuffers != null) {
-            GLES20.glDeleteFramebuffers(mFrameBuffers.length, mFrameBuffers, 0);
-            mFrameBuffers = null;
-        }
-    }
-
-    /*
-     * (non-Javadoc)
-     * @see
-     * jp.co.cyberagent.android.gpuimage.GPUImageFilter#onOutputSizeChanged(int,
-     * int)
-     */
-    @Override
-    public void onOutputSizeChanged(final int width, final int height) {
-        super.onOutputSizeChanged(width, height);
-        if (mFrameBuffers != null) {
-            destroyFramebuffers();
-        }
-
-        int size = mFilters.size();
-        for (int i = 0; i < size; i++) {
-            mFilters.get(i).onOutputSizeChanged(width, height);
-        }
-
-        if (mMergedFilters != null && mMergedFilters.size() > 0) {
-            size = mMergedFilters.size();
-            mFrameBuffers = new int[size - 1];
-            mFrameBufferTextures = new int[size - 1];
-
-            for (int i = 0; i < size - 1; i++) {
-                GLES20.glGenFramebuffers(1, mFrameBuffers, i);
-                GLES20.glGenTextures(1, mFrameBufferTextures, i);
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i]);
-                GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, width, height, 0,
-                        GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, null);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-
-                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);
-                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0,
-                        GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i], 0);
-
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
-                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
-            }
-        }
-    }
-
-    /*
-     * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.GPUImageFilter#onDraw(int,
-     * java.nio.FloatBuffer, java.nio.FloatBuffer)
-     */
-    @SuppressLint("WrongCall")    
-    @Override
-    public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
-                       final FloatBuffer textureBuffer) {
-        runPendingOnDrawTasks();
-        if (!isInitialized() || mFrameBuffers == null || mFrameBufferTextures == null) {
-            return;
-        }
-        if (mMergedFilters != null) {
-            int size = mMergedFilters.size();
-            int previousTexture = textureId;
-            for (int i = 0; i < size; i++) {
-                GPUImageFilter filter = mMergedFilters.get(i);
-                boolean isNotLast = i < size - 1;
-                if (isNotLast) {
-                    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);
-                    GLES20.glClearColor(0, 0, 0, 0);
-                }
-
-                if (i == 0) {
-                    filter.onDraw(previousTexture, cubeBuffer, textureBuffer);
-                } else if (i == size - 1) {
-                    filter.onDraw(previousTexture, mGLCubeBuffer, (size % 2 == 0) ? mGLTextureFlipBuffer : mGLTextureBuffer);
-                } else {
-                    filter.onDraw(previousTexture, mGLCubeBuffer, mGLTextureBuffer);
-                }
-
-                if (isNotLast) {
-                    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
-                    previousTexture = mFrameBufferTextures[i];
-                }
-            }
-        }
-     }
-
-    /**
-     * Gets the filters.
-     *
-     * @return the filters
-     */
-    public List<GPUImageFilter> getFilters() {
-        return mFilters;
-    }
-
-    public List<GPUImageFilter> getMergedFilters() {
-        return mMergedFilters;
-    }
-
-    public void updateMergedFilters() {
-        if (mFilters == null) {
-            return;
-        }
-
-        if (mMergedFilters == null) {
-            mMergedFilters = new ArrayList<GPUImageFilter>();
-        } else {
-            mMergedFilters.clear();
-        }
-
-        List<GPUImageFilter> filters;
-        for (GPUImageFilter filter : mFilters) {
-            if (filter instanceof GPUImageFilterGroup) {
-                ((GPUImageFilterGroup) filter).updateMergedFilters();
-                filters = ((GPUImageFilterGroup) filter).getMergedFilters();
-                if (filters == null || filters.isEmpty())
-                    continue;
-                mMergedFilters.addAll(filters);
-                continue;
-            }
-            mMergedFilters.add(filter);
-        }
-    }
-}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
index e083917c..3eb66f2b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.annotation.TargetApi;
 import android.app.ActivityManager;
@@ -42,7 +42,6 @@
 import java.io.*;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -334,7 +333,7 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
 
     /**
      * Deprecated: Please use
-     * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
+     * {@link GPUImageView#saveToPictures(String, String, GPUImageView.OnPictureSavedListener)}
      *
      * Save current image with applied filter to Pictures. It will be stored on
      * the default Picture folder on the phone below the given folderName and
@@ -354,7 +353,7 @@ public void saveToPictures(final String folderName, final String fileName,
 
     /**
      * Deprecated: Please use
-     * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
+     * {@link GPUImageView#saveToPictures(String, String, GPUImageView.OnPictureSavedListener)}
      *
      * Apply and save the given bitmap with applied filter to Pictures. It will
      * be stored on the default Picture folder on the phone below the given
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilter.java
similarity index 91%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilter.java
index 7a8641aa..d69ee20b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.content.Context;
 import android.content.res.AssetManager;
@@ -57,6 +57,10 @@
     protected int mOutputWidth;
     protected int mOutputHeight;
     private boolean mIsInitialized;
+    //用于处理Group的变量
+    protected int mIndex;
+    protected boolean inGroup;
+    protected GPUImageFilterGroup mParent;
 
     public GPUImageFilter() {
         this(NO_FILTER_VERTEX_SHADER, NO_FILTER_FRAGMENT_SHADER);
@@ -275,4 +279,38 @@ public static String convertStreamToString(java.io.InputStream is) {
         java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
         return s.hasNext() ? s.next() : "";
     }
+
+    //添加一些属性，用于gpuImageGroup部分使用
+    public int getIndex() {
+        return this.mIndex;
+    }
+
+    public void setIndex(int index) {
+        this.mIndex = index;
+    }
+
+    public int getSize() {
+        return 1;
+    }
+
+    public boolean isGroup() {
+        return false;
+    }
+
+    public void isInGroup(boolean isInGroup) {
+        this.inGroup = isInGroup;
+    }
+
+    public GPUImageFilterGroup getParent() {
+        return mParent;
+    }
+
+    public void setParent(GPUImageFilterGroup parent) {
+        this.mParent = parent;
+    }
+
+    @Override
+    public String toString() {
+        return "index " + mIndex;
+    }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroup.java
new file mode 100644
index 00000000..0a70b66b
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroup.java
@@ -0,0 +1,294 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.core;
+
+import android.annotation.SuppressLint;
+import android.opengl.GLES20;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
+import java.util.ArrayList;
+import java.util.List;
+
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
+import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
+
+/**
+ * Resembles a filter that consists of multiple filters applied after each
+ * other.
+ * 重新修改的groupFilter，去掉merge操作，重新管理frameBuffer
+ */
+public class GPUImageFilterGroup extends GPUImageFilter {
+
+    protected List<GPUImageFilter> mFilters;
+    private int[] mFrameBuffers;
+    private int[] mFrameBufferTextures;
+
+    private final FloatBuffer mGLCubeBuffer;
+    private final FloatBuffer mGLTextureBuffer;
+    private final FloatBuffer mGLTextureFlipBuffer;
+
+    /**
+     * Instantiates a new GPUImageFilterGroup with no filters.
+     */
+    public GPUImageFilterGroup() {
+        this(null);
+    }
+
+    /**
+     * Instantiates a new GPUImageFilterGroup with the given filters.
+     *
+     * @param filters the filters which represent this filter
+     */
+    public GPUImageFilterGroup(List<GPUImageFilter> filters) {
+        mFilters = new ArrayList<GPUImageFilter>();
+        if (filters != null && filters.size() > 0) {
+            mFilters.add(new GPUImageFilter());//前置保证，用于图片提前翻转
+            mFilters = filters;
+            mFilters.add(new GPUImageFilter());//后置保证，保证最后一个不是GroupFilter
+        }
+
+        mGLCubeBuffer = ByteBuffer.allocateDirect(GPUImageRenderer.CUBE.length * 4)
+                .order(ByteOrder.nativeOrder())
+                .asFloatBuffer();
+        mGLCubeBuffer.put(GPUImageRenderer.CUBE).position(0);
+
+        mGLTextureBuffer = ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4)
+                .order(ByteOrder.nativeOrder())
+                .asFloatBuffer();
+        mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);
+
+        float[] flipTexture = TextureRotationUtil.getRotation(Rotation.NORMAL, false, true);
+        mGLTextureFlipBuffer = ByteBuffer.allocateDirect(flipTexture.length * 4)
+                .order(ByteOrder.nativeOrder())
+                .asFloatBuffer();
+        mGLTextureFlipBuffer.put(flipTexture).position(0);
+    }
+
+    public void addFilter(GPUImageFilter aFilter) {
+        if (aFilter == null) {
+            return;
+        }
+        if (mFilters.size() == 0) {
+            mFilters.add(new GPUImageFilter());//前置保证，用于图片提前翻转
+            mFilters.add(aFilter);
+            mFilters.add(new GPUImageFilter());//后置保证，保证最后一个不是GroupFilter
+        } else {
+            mFilters.set(mFilters.size() - 1, aFilter);
+            mFilters.add(new GPUImageFilter());//后置保证，保证最后一个不是GroupFilter
+        }
+    }
+
+    /*
+     * (non-Javadoc)
+     * @see jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onInit()
+     */
+    @Override
+    public void onInit() {
+        super.onInit();
+        for (GPUImageFilter filter : mFilters) {
+            filter.init();
+        }
+    }
+
+    /*
+     * (non-Javadoc)
+     * @see jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onDestroy()
+     */
+    @Override
+    public void onDestroy() {
+        destroyFramebuffers();
+        for (GPUImageFilter filter : mFilters) {
+            filter.destroy();
+        }
+        super.onDestroy();
+    }
+
+    private void destroyFramebuffers() {
+        if (mFrameBufferTextures != null) {
+            GLES20.glDeleteTextures(mFrameBufferTextures.length, mFrameBufferTextures, 0);
+            mFrameBufferTextures = null;
+        }
+        if (mFrameBuffers != null) {
+            GLES20.glDeleteFramebuffers(mFrameBuffers.length, mFrameBuffers, 0);
+            mFrameBuffers = null;
+        }
+    }
+
+    /*
+     * (non-Javadoc)
+     * @see
+     * jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onOutputSizeChanged(int,
+     * int)
+     */
+    @Override
+    public void onOutputSizeChanged(final int width, final int height) {
+        super.onOutputSizeChanged(width, height);
+        if (mFrameBuffers != null) {
+            destroyFramebuffers();
+        }
+
+        for (GPUImageFilter filter : mFilters) {
+            filter.onOutputSizeChanged(width, height);
+        }
+
+        //此处开始初始化frameBuffer，由Group本身管理frameBuffer修改为全局管理的frameBuffer
+        if (getParent() == null) {//是root节点，生成所需数量的frameBuffer
+            int size = getSize();
+
+            mFrameBuffers = new int[size - 1];
+            mFrameBufferTextures = new int[size - 1];
+
+            GPUImageFilterGroupHelper.getInstance().setmFrameBuffers(mFrameBuffers);
+            GPUImageFilterGroupHelper.getInstance().setmFrameBufferTextures(mFrameBufferTextures);
+
+
+            for (int i = 0; i < size - 1; i++) {
+                GLES20.glGenFramebuffers(1, mFrameBuffers, i);
+                GLES20.glGenTextures(1, mFrameBufferTextures, i);
+                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i]);
+                GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, width, height, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, null);
+                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
+                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
+                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
+                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
+
+                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);
+                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i], 0);
+
+                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
+                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
+            }
+        }
+    }
+
+    /*
+     * tips：Gpu处理过程中，图片会进行翻转，onDraw的时候，通过传入参数mGLCubeBuffer、mGLTextureFlipBuffer来进行修正。
+     * 1.滤镜整体是一个树形结构，一定要从根节点触发渲染，否则frameBuffer、index等数据都是不对的。树才是一个可以正常工作的整体。
+     * 2.树第一个叶子节点处理，保证是空的GPUImageFilter，用于保证图片进行了翻转了的。方便后续的处理。
+     * 3.下一个树的节点如果是普通滤镜，需要提前声明将该滤镜处理的结构加入到frameBuffer中管理，对应的id存
+     *  储到_FrameBuffers数组中，处理完之后恢复frameBuffer绑定到0，也就是不做frameBuffer绑定。然后从
+     *  数组中得到该节点滤镜处理的结果texture，作为下一个滤镜处理的texture
+     * 4.下一个树的节点如果是group滤镜，直接调用group的onDraw方法即可，因为其内部已经管理了frameBuffer的添加和释放。
+     *  将group内最后一个滤镜处理的texture作为下一个滤镜处理的texture。
+     * 5.最终的输出的时候，最后一个texture 不能绑定到frameBuffer中，因为最终输出的是GPU中正在渲染的图，而不是
+     *  输出frameBuffer中的texture。
+     *
+     */
+    @SuppressLint("WrongCall")
+    @Override
+    public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
+                       final FloatBuffer textureBuffer) {
+        runPendingOnDrawTasks();
+        if (!isInitialized() || mFrameBuffers == null || mFrameBufferTextures == null) {
+            return;
+        }
+
+        GPUImageFilterGroup root = getRoot();
+        int[] _FrameBuffers = GPUImageFilterGroupHelper.getInstance().getFrameBuffers();
+        int[] _FrameBufferTextures = GPUImageFilterGroupHelper.getInstance().getFrameBufferTextures();
+
+        if (mFilters != null) {
+            int size = mFilters.size();
+            int previousTexture = textureId;
+            //此处处理图片的时候，由于GPU处理图片的原因，图片会发生翻转，这里的处理逻辑是保证滤镜数组第一个是一个空的
+            //GPUImageFilter，用于提前触发图片翻转。同时保证最后一个滤镜也是空滤镜，是为了方便处理，保证最后一个滤镜不是GPUImageGroup。
+            for (int i = 0; i < size; i++) {
+                GPUImageFilter filter = mFilters.get(i);
+                boolean isNotLast = i < size - 1;
+
+
+                if (filter.isGroup()) {//清理工作交给group自己做，group中处理的统一是filpBuffer，因为有前置滤镜保证图片已经被翻转。
+                    //第一次处理之后，frameBuffer中得到的previoutTexure是倒立的图片，直接传入flipBuffer将图片纹理进行翻转再处理
+                    //需要注意的是，虽然处理完显示出来是正的图片，但是存储到frameBuffer中的仍然是翻转的图片，不过后续传入的参数还是flipBuffer
+                    filter.onDraw(previousTexture, cubeBuffer, mGLTextureFlipBuffer);
+                    previousTexture = _FrameBufferTextures[filter.getIndex() + filter.getSize() - 1];
+                    continue;
+                }
+
+                if (root.getSize() - 1 != filter.getIndex()) {//不是最后一个滤镜处理，将当前处理绑定到frameBuffer中。
+                    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, _FrameBuffers[filter.getIndex()]);
+                    GLES20.glClearColor(0, 0, 0, 0);
+                }
+
+                //处理非group的情况
+                if (i == 0) {
+                    //第一次处理的时候，rootFilter 图片是正的，使用传入的textureBuffer即，处理完之后frameBuffer中是倒立的图片
+                    //如果不是rootFilter，此时frameBuffer中已经是倒立的图片，但是传入的参数就是flipBuffer，也就不需要做特殊处理了
+                    filter.onDraw(previousTexture, cubeBuffer, textureBuffer);
+                } else {
+                    //第一次处理之后，frameBuffer中得到的previoutTexure是倒立的图片，直接传入flipBuffer将图片纹理进行翻转再处理
+                    //处理完显示出来是正的图片，但是存储到frameBuffer中的仍然是翻转的图片。
+                    filter.onDraw(previousTexture, cubeBuffer, mGLTextureFlipBuffer);
+                }
+
+                //做frameBuffer的清理工作
+                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
+                previousTexture = _FrameBufferTextures[filter.getIndex()];
+            }
+        }
+    }
+
+    /**
+     * Gets the filters.
+     *
+     * @return the filters
+     */
+    public List<GPUImageFilter> getFilters() {
+        return mFilters;
+    }
+
+    @Override
+    public int getSize() {
+        int size = 0;
+        for (GPUImageFilter filter : mFilters) {
+            size += filter.getSize();
+        }
+        return size;
+    }
+
+    public GPUImageFilterGroup getRoot() {
+        GPUImageFilterGroup parent = this;
+        while (null != parent.getParent()) {
+            parent = parent.getParent();
+        }
+        return parent;
+    }
+
+    @Override
+    public void setParent(GPUImageFilterGroup parent) {
+        this.mParent = parent;
+        for (GPUImageFilter filter : mFilters) {
+            filter.setParent(this);
+        }
+    }
+
+    public boolean isGroup() {
+        return true;
+    }
+
+    @Override
+    public void setIndex(int index) {
+        super.setIndex(index);//group不计index，index计数只用在叶子滤镜上。
+        for (GPUImageFilter filter : mFilters) {
+            filter.setIndex(index);
+            index += filter.getSize();
+        }
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroupHelper.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroupHelper.java
new file mode 100644
index 00000000..c913ed88
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroupHelper.java
@@ -0,0 +1,53 @@
+package jp.co.cyberagent.android.gpuimage.core;
+
+import android.opengl.GLES20;
+
+/**
+ * Created by qihuan on 3/10/15.
+ */
+public class GPUImageFilterGroupHelper {
+
+    private int[] mFrameBuffers;
+    private int[] mFrameBufferTextures;
+
+    private static GPUImageFilterGroupHelper instance;
+
+    private GPUImageFilterGroupHelper() {
+    }
+
+    public static GPUImageFilterGroupHelper getInstance() {
+        if (instance == null) {
+            instance = new GPUImageFilterGroupHelper();
+        }
+        return instance;
+    }
+
+    public int[] getFrameBufferTextures() {
+        return mFrameBufferTextures;
+    }
+
+    public int[] getFrameBuffers() {
+        return mFrameBuffers;
+    }
+
+    public void setmFrameBuffers(int[] mFrameBuffers) {
+        this.mFrameBuffers = mFrameBuffers;
+    }
+
+    public void setmFrameBufferTextures(int[] mFrameBufferTextures) {
+        this.mFrameBufferTextures = mFrameBufferTextures;
+    }
+
+    public void updateFilters(GPUImageFilterGroup filterGroup) {
+        if (null == filterGroup.getFilters() || filterGroup.getFilters().size() == 0) {
+            return;
+        }
+        int index = 0;//index指向的是每一个叶子滤镜
+        for (GPUImageFilter filter : filterGroup.getFilters()) {
+            //更新filter
+            filter.setParent(filterGroup);
+            filter.setIndex(index);
+            index += filter.getSize();
+        }
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
index 9565b71c..c608b85d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
@@ -26,6 +26,7 @@
 import android.opengl.GLES20;
 import android.opengl.GLSurfaceView.Renderer;
 
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageNativeLibrary;
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 
 import javax.microedition.khronos.egl.EGLConfig;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoInputFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoInputFilter.java
index afc3b864..ba791d1b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoInputFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassFilter.java
index bf3fbf17..ae06d8c1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 public class GPUImageTwoPassFilter extends GPUImageFilterGroup {
     public GPUImageTwoPassFilter(String firstVertexShader, String firstFragmentShader,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassTextureSamplingFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassTextureSamplingFilter.java
index 19c0365b..8b24d37a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassTextureSamplingFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
index ff32e5db..884c525b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.content.Context;
 import android.graphics.Bitmap;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java b/library/src/jp/co/cyberagent/android/gpuimage/core/OpenGlUtils.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/OpenGlUtils.java
index e8589704..7a9a5620 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/OpenGlUtils.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import java.nio.IntBuffer;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java b/library/src/jp/co/cyberagent/android/gpuimage/core/PixelBuffer.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/PixelBuffer.java
index 45317a13..a0fc93e5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/PixelBuffer.java
@@ -6,7 +6,7 @@
  * http://www.anddev.org/android-2d-3d-graphics-opengl-tutorials-f2/possible-to-do-opengl-off-screen-rendering-in-android-t13232.html#p41662
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import static javax.microedition.khronos.egl.EGL10.EGL_ALPHA_SIZE;
 import static javax.microedition.khronos.egl.EGL10.EGL_BLUE_SIZE;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java b/library/src/jp/co/cyberagent/android/gpuimage/core/Rotation.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/Rotation.java
index bd2e840e..24430ad4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/Rotation.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/Rotation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.core;
 
 public enum Rotation {
     NORMAL, ROTATION_90, ROTATION_180, ROTATION_270;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3ConvolutionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3ConvolutionFilter.java
index 0c5e5a03..92587126 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3ConvolutionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3TextureSamplingFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3TextureSamplingFilter.java
index 2e6820a3..cae04a6c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImage3x3TextureSamplingFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 public class GPUImage3x3TextureSamplingFilter extends GPUImageFilter {
     public static final String THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" + 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAddBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAddBlendFilter.java
index 59dcb343..3b2db56a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAddBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageAddBlendFilter extends GPUImageTwoInputFilter {
     public static final String ADD_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAlphaBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAlphaBlendFilter.java
index 753c24d6..41908c77 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageAlphaBlendFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBoxBlurFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBoxBlurFilter.java
index 4e681b3c..f980ff48 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBoxBlurFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * A hardware-accelerated 9-hit box blur of an image
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBrightnessFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBrightnessFilter.java
index e528ee87..3f71e207 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBrightnessFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * brightness value ranges from -1.0 to 1.0, with 0.0 as the normal level
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBulgeDistortionFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBulgeDistortionFilter.java
index af49bedd..201b6425 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageBulgeDistortionFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 public class GPUImageBulgeDistortionFilter extends GPUImageFilter {
     public static final String BULGE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCGAColorspaceFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCGAColorspaceFilter.java
index 52585956..65161220 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCGAColorspaceFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageCGAColorspaceFilter extends GPUImageFilter {
     public static final String CGACOLORSPACE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageChromaKeyBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageChromaKeyBlendFilter.java
index c5adf8f4..b5b545e5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageChromaKeyBlendFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
+
 /**
  * Selectively replaces a color in the first image with the second image
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBalanceFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBalanceFilter.java
index 68c078a6..88964784 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBalanceFilter.java
@@ -1,7 +1,9 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Created by edward_chiang on 13/10/16.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBlendFilter.java
index 0f5de140..47327610 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageColorBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBurnBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBurnBlendFilter.java
index e3b5c42a..2b0d2f35 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorBurnBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageColorBurnBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_BURN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorDodgeBlendFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorDodgeBlendFilter.java
index 702a3a98..514c8055 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorDodgeBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageColorDodgeBlendFilter extends GPUImageTwoInputFilter {
     public static final String COLOR_DODGE_BLEND_FRAGMENT_SHADER = "precision mediump float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorInvertFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorInvertFilter.java
index 2d8df9b9..6d1c337b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorInvertFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Invert all the colors in the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorMatrixFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorMatrixFilter.java
index 59203c4d..1d1382b4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageColorMatrixFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Applies a ColorMatrix to the image.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageContrastFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageContrastFilter.java
index 1d2b9107..3dc9a66c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageContrastFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Changes the contrast of the image.<br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCrosshatchFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCrosshatchFilter.java
index 04a3d4c7..6634c934 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageCrosshatchFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * crossHatchSpacing: The fractional width of the image to use as the spacing for the crosshatch. The default is 0.03.
  * lineWidth: A relative width for the crosshatch lines. The default is 0.003.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDarkenBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDarkenBlendFilter.java
index 385e8e3a..f33802d1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDarkenBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageDarkenBlendFilter extends GPUImageTwoInputFilter {
     public static final String DARKEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDifferenceBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDifferenceBlendFilter.java
index 1a32cd0c..c8bfd2db 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDifferenceBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageDifferenceBlendFilter extends GPUImageTwoInputFilter {
     public static final String DIFFERENCE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDilationFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDilationFilter.java
index f6ce4e2f..25806f04 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDilationFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * For each pixel, this sets it to the maximum value of the red channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDirectionalSobelEdgeDetectionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDirectionalSobelEdgeDetectionFilter.java
index a5884a12..27d66141 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDirectionalSobelEdgeDetectionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 
 public class GPUImageDirectionalSobelEdgeDetectionFilter extends GPUImage3x3TextureSamplingFilter {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDissolveBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDissolveBlendFilter.java
index cd2880a6..39e865e4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDissolveBlendFilter.java
@@ -14,9 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
-
-import android.opengl.GLES20;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDivideBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDivideBlendFilter.java
index 179cd4ee..62ff73ff 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageDivideBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageDivideBlendFilter extends GPUImageTwoInputFilter {
     public static final String DIVIDE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageEmbossFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageEmbossFilter.java
index f4cbdef7..6441c86e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageEmbossFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies an emboss effect to the image.<br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExclusionBlendFilter.java
similarity index 93%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExclusionBlendFilter.java
index dcfc9346..c59d4c33 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExclusionBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageExclusionBlendFilter extends GPUImageTwoInputFilter {
     public static final String EXCLUSION_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExposureFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExposureFilter.java
index de5de414..f399f9f0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageExposureFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * exposure: The adjusted exposure (-10.0 - 10.0, with 0.0 as the default)
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFalseColorFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFalseColorFilter.java
index c815ad0f..fb407f79 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageFalseColorFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 public class GPUImageFalseColorFilter extends GPUImageFilter {
     public static final String FALSECOLOR_FRAGMENT_SHADER = "" +
             "precision lowp float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGammaFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGammaFilter.java
index 1f902d0f..75385062 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGammaFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * gamma value ranges from 0.0 to 3.0, with 1.0 as the normal level
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGaussianBlurFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGaussianBlurFilter.java
index c912f73e..cd3d0fce 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGaussianBlurFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * A more generalized 9x9 Gaussian blur filter
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGlassSphereFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGlassSphereFilter.java
index 460019cc..00dba3e4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGlassSphereFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 public class GPUImageGlassSphereFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGrayscaleFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGrayscaleFilter.java
index b0a67f9e..18eda995 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageGrayscaleFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Applies a grayscale effect to the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHardLightBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHardLightBlendFilter.java
index 5bcb9c90..e9269ed0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHardLightBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageHardLightBlendFilter extends GPUImageTwoInputFilter {
     public static final String HARD_LIGHT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHazeFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHazeFilter.java
index bb230abc..b4f09cc5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHazeFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * The haze filter can be used to add or remove haze.
  *
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHighlightShadowFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHighlightShadowFilter.java
index 878c508a..23ee583b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHighlightShadowFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Adjusts the shadows and highlights of an image
  * shadows: Increase to lighten shadows, from 0.0 to 1.0, with 0.0 as the default.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueBlendFilter.java
index 3950901c..a5682472 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageHueBlendFilter extends GPUImageTwoInputFilter {
     public static final String HUE_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueFilter.java
index 9fcf7939..53d8758e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageHueFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 public class GPUImageHueFilter extends GPUImageFilter {
     public static final String HUE_FRAGMENT_SHADER = "" +
       "precision highp float;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageKuwaharaFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageKuwaharaFilter.java
index 6fc7f32b..759b12d5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageKuwaharaFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Kuwahara image abstraction, drawn from the work of Kyprianidis, et. al. in their publication
  * "Anisotropic Kuwahara Filtering on the GPU" within the GPU Pro collection. This produces an oil-painting-like
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLaplacianFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLaplacianFilter.java
index d320f64d..fa560e5b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLaplacianFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLevelsFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLevelsFilter.java
index d7fbcfdf..a26c2cd2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLevelsFilter.java
@@ -1,12 +1,13 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
-import android.util.Log;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Created by vashisthg 30/05/14.
  */
-public class GPUImageLevelsFilter extends GPUImageFilter{
+public class GPUImageLevelsFilter extends GPUImageFilter {
 
     private static final String LOGTAG = GPUImageLevelsFilter.class.getSimpleName();
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLightenBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLightenBlendFilter.java
index 77399cb1..209169cb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLightenBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageLightenBlendFilter extends GPUImageTwoInputFilter {
     public static final String LIGHTEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLinearBurnBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLinearBurnBlendFilter.java
index 2623b528..d8f1ea68 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLinearBurnBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageLinearBurnBlendFilter extends GPUImageTwoInputFilter {
     public static final String LINEAR_BURN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLookupFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLookupFilter.java
index b9cfa2be..85e01e9c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLookupFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageLookupFilter extends GPUImageTwoInputFilter {
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLuminosityBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLuminosityBlendFilter.java
index 85e7bfda..6191770c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageLuminosityBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageLuminosityBlendFilter extends GPUImageTwoInputFilter {
     public static final String LUMINOSITY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMixBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMixBlendFilter.java
index 7bf68859..95f27bd6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMixBlendFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
+
 public class GPUImageMixBlendFilter extends GPUImageTwoInputFilter {
 
     private int mMixLocation;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMonochromeFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMonochromeFilter.java
index e426a340..bf21e6e8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMonochromeFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Converts the image to a single-color version, based on the luminance of each pixel
  * intensity: The degree to which the specific color replaces the normal image color (0.0 - 1.0, with 1.0 as the default)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMultiplyBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMultiplyBlendFilter.java
index 1e002e36..fb5e89c4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageMultiplyBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageMultiplyBlendFilter extends GPUImageTwoInputFilter {
     public static final String MULTIPLY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNativeLibrary.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNativeLibrary.java
index ce8c31b8..383fbcc5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNativeLibrary.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageNativeLibrary {
     static {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNonMaximumSuppressionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNonMaximumSuppressionFilter.java
index a6f5af48..0cf07f5a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNonMaximumSuppressionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageNonMaximumSuppressionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String NMS_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNormalBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNormalBlendFilter.java
index a886bd40..3d5ff2b6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageNormalBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 /**
  * This equation is a simplification of the general blending equation. It assumes the destination color is opaque, and therefore drops the destination color's alpha term.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOpacityFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOpacityFilter.java
index 55f198d1..ec632cfc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOpacityFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Adjusts the alpha channel of the incoming image
  * opacity: The value to multiply the incoming alpha channel for each pixel by (0.0 - 1.0, with 1.0 as the default)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOverlayBlendFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOverlayBlendFilter.java
index 4dba4200..15e67ca1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageOverlayBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageOverlayBlendFilter extends GPUImageTwoInputFilter {
     public static final String OVERLAY_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePixelationFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePixelationFilter.java
index c0ec15d1..8d949fc5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePixelationFilter.java
@@ -14,9 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Applies a grayscale effect to the image.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePosterizeFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePosterizeFilter.java
index 3b7c8ff7..6b95d6c0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImagePosterizeFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Reduces the color range of the image. <br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBDilationFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBDilationFilter.java
index 2d5e28c7..afff0a55 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBDilationFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * For each pixel, this sets it to the maximum value of each color channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBFilter.java
index f0af18cb..ee3ea3ea 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageRGBFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Adjusts the individual RGB channels of an image
  * red: Normalized values by which each color channel is multiplied. The range is from 0.0 up, with 1.0 as the default.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationBlendFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationBlendFilter.java
index 1c0f90d6..99f7b6b6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageSaturationBlendFilter extends GPUImageTwoInputFilter {
     public static final String SATURATION_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationFilter.java
index 0725953d..d176830b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSaturationFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * saturation: The degree of saturation or desaturation to apply to the image (0.0 - 2.0, with 1.0 as the default)
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageScreenBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageScreenBlendFilter.java
index 2c63a699..dd08238a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageScreenBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageScreenBlendFilter extends GPUImageTwoInputFilter {
     public static final String SCREEN_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSepiaFilter.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSepiaFilter.java
index cbcf3534..b2d1d387 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSepiaFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 /**
  * Applies a simple sepia effect.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSharpenFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSharpenFilter.java
index 4317b66c..ba946174 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSharpenFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Sharpens the picture. <br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSketchFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSketchFilter.java
index dd78e708..384a5865 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSketchFilter.java
@@ -14,10 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
-import java.util.ArrayList;
-import java.util.List;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  * Converts video to look like a sketch.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSmoothToonFilter.java
similarity index 94%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSmoothToonFilter.java
index a569ce97..720a3bef 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSmoothToonFilter.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
-import android.opengl.GLES20;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  *  This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelEdgeDetection.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelEdgeDetection.java
index 2a775d48..e6f8f1e1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelEdgeDetection.java
@@ -14,10 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
-import java.util.ArrayList;
-import java.util.List;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelThresholdFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelThresholdFilter.java
index f1dcf64e..311e9e5c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSobelThresholdFilter.java
@@ -1,4 +1,4 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSoftLightBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSoftLightBlendFilter.java
index 0e1b742e..99d17223 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSoftLightBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageSoftLightBlendFilter extends GPUImageTwoInputFilter {
     public static final String SOFT_LIGHT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSourceOverBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSourceOverBlendFilter.java
index fd6a7b98..3e4bdb48 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSourceOverBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageSourceOverBlendFilter extends GPUImageTwoInputFilter {
     public static final String SOURCE_OVER_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSphereRefractionFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSphereRefractionFilter.java
index 6314cf19..5e9d068c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSphereRefractionFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 public class GPUImageSphereRefractionFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
             "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSubtractBlendFilter.java
similarity index 92%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSubtractBlendFilter.java
index 52b54ecc..fe08fec3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSubtractBlendFilter.java
@@ -14,7 +14,9 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
 
 public class GPUImageSubtractBlendFilter extends GPUImageTwoInputFilter {
     public static final String SUBTRACT_BLEND_FRAGMENT_SHADER = "varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSwirlFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSwirlFilter.java
index d4947b9a..c498fcad 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageSwirlFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Creates a swirl distortion on the image.
  */
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageThresholdEdgeDetection.java
similarity index 83%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageThresholdEdgeDetection.java
index c136155a..37686e0c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageThresholdEdgeDetection.java
@@ -1,4 +1,6 @@
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToneCurveFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToneCurveFilter.java
index 0f6e1d08..cc822778 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToneCurveFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.Point;
 import android.graphics.PointF;
@@ -26,6 +26,9 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.OpenGlUtils;
+
 public class GPUImageToneCurveFilter extends GPUImageFilter {
     public static final String TONE_CURVE_FRAGMENT_SHADER = "" +
             " varying highp vec2 textureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToonFilter.java
similarity index 99%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToonFilter.java
index 5148d1d0..040f606a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageToonFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageVignetteFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageVignetteFilter.java
index 439e8bd0..d0d97787 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageVignetteFilter.java
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Performs a vignetting effect, fading out the image at the edges
  * x:
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWeakPixelInclusionFilter.java
similarity index 98%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWeakPixelInclusionFilter.java
index 3e1b8f01..5b467262 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWeakPixelInclusionFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 public class GPUImageWeakPixelInclusionFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String WEAKPIXEL_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWhiteBalanceFilter.java
similarity index 96%
rename from library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWhiteBalanceFilter.java
index 1818da99..488a72e7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filters/GPUImageWhiteBalanceFilter.java
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage;
+package jp.co.cyberagent.android.gpuimage.filters;
 
 import android.opengl.GLES20;
 
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
 /**
  * Adjusts the white balance of incoming image. <br>
  * <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java b/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
index c439d914..dfeb0e5f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.util;
 
-import jp.co.cyberagent.android.gpuimage.Rotation;
+import jp.co.cyberagent.android.gpuimage.core.Rotation;
 
 public class TextureRotationUtil {
 
diff --git a/sample/res/layout/activity_gallery.xml b/sample/res/layout/activity_gallery.xml
index c2575162..edd9d867 100644
--- a/sample/res/layout/activity_gallery.xml
+++ b/sample/res/layout/activity_gallery.xml
@@ -9,7 +9,7 @@
         android:layout_height="0dp"
         android:layout_weight="1">
 
-        <jp.co.cyberagent.android.gpuimage.GPUImageView
+        <jp.co.cyberagent.android.gpuimage.core.GPUImageView
             android:id="@+id/gpuimage"
             android:layout_gravity="center"
             android:layout_width="wrap_content"
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index e344fd23..ae66989f 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -21,7 +21,80 @@
 import android.content.DialogInterface;
 import android.graphics.BitmapFactory;
 import android.graphics.PointF;
-import jp.co.cyberagent.android.gpuimage.*;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoInputFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImage3x3ConvolutionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageAddBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageAlphaBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageBoxBlurFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageBulgeDistortionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageCGAColorspaceFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageChromaKeyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageColorBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageColorBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageColorBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageColorDodgeBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageColorInvertFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageCrosshatchFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDarkenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDifferenceBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDilationFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDirectionalSobelEdgeDetectionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDissolveBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageDivideBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageEmbossFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageExclusionBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageFalseColorFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGammaFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGaussianBlurFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGlassSphereFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHardLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHazeFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHighlightShadowFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHueBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageKuwaharaFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLaplacianFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLevelsFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLightenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLinearBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLookupFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageLuminosityBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageMultiplyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageNonMaximumSuppressionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageNormalBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageOpacityFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageOverlayBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImagePixelationFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImagePosterizeFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageRGBDilationFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageRGBFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSaturationBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageScreenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSepiaFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSharpenFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSketchFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSmoothToonFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSobelEdgeDetection;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSoftLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSourceOverBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSphereRefractionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSubtractBlendFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageSwirlFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageToneCurveFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageToonFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageVignetteFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageWeakPixelInclusionFilter;
+import jp.co.cyberagent.android.gpuimage.filters.GPUImageWhiteBalanceFilter;
 
 import java.util.LinkedList;
 import java.util.List;
@@ -170,11 +243,11 @@ private static GPUImageFilter createFilterForType(final Context context, final F
             case MONOCHROME:
             	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
             case OPACITY:
-                return new GPUImageOpacityFilter(1.0f);  
+                return new GPUImageOpacityFilter(1.0f);
             case RGB:
-                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);  
+                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);
             case WHITE_BALANCE:
-                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);    
+                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);
             case VIGNETTE:
                 PointF centerPoint = new PointF();
                 centerPoint.x = 0.5f;
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index ba832284..0c252e0a 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -39,9 +39,9 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-import jp.co.cyberagent.android.gpuimage.GPUImage;
-import jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener;
-import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImage;
+import jp.co.cyberagent.android.gpuimage.core.GPUImage.OnPictureSavedListener;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
index ad734823..6b386390 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
@@ -16,9 +16,9 @@
 
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
-import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
-import jp.co.cyberagent.android.gpuimage.GPUImageView;
-import jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageView;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageView.OnPictureSavedListener;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
