diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 91968c85..ba54d997 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -47,6 +47,8 @@
 import java.net.URL;
 import java.util.List;
 
+import jp.co.cyberagent.android.gpuimage.videosupport.VideoSourceRenderer;
+
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
  * tasks through a simple interface.
@@ -123,6 +125,12 @@ public void requestRender() {
         }
     }
 
+    public void setUpVideoSource(VideoSourceRenderer videoSource){
+        mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
+
+        videoSource.setVideoRenderer(mRenderer);
+    }
+
     /**
      * Sets the up camera to be connected to GPUImage to get a filtered preview.
      *
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index b4561b6e..737e6b64 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -27,6 +27,7 @@
 import android.opengl.GLSurfaceView.Renderer;
 
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+import jp.co.cyberagent.android.gpuimage.videosupport.VideoFrameCallback;
 
 import javax.microedition.khronos.egl.EGLConfig;
 import javax.microedition.khronos.opengles.GL10;
@@ -41,7 +42,8 @@
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
-public class GPUImageRenderer implements Renderer, PreviewCallback {
+public class GPUImageRenderer implements Renderer, PreviewCallback, VideoFrameCallback
+{
     public static final int NO_IMAGE = -1;
     static final float CUBE[] = {
             -1.0f, -1.0f,
@@ -170,6 +172,31 @@ public void run() {
         }
     }
 
+
+    @Override
+    public void onVideoFrame(final byte[] data, final int width, final int height) {
+
+        if (mGLRgbBuffer == null) {
+            mGLRgbBuffer = IntBuffer.allocate(width * height);
+        }
+        if (mRunOnDraw.isEmpty()) {
+            runOnDraw(new Runnable() {
+                @Override
+                public void run() {
+                    GPUImageNativeLibrary.YUVtoRBGA(data, width, height,
+                            mGLRgbBuffer.array());
+                    mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, width, height, mGLTextureId);
+
+                    if (mImageWidth != width) {
+                        mImageWidth = width;
+                        mImageHeight = height;
+                        adjustImageScaling();
+                    }
+                }
+            });
+        }
+    }
+
     public void setUpSurfaceTexture(final Camera camera) {
         runOnDraw(new Runnable() {
             @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
index 2cf7f00c..c6809566 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
@@ -82,6 +82,30 @@ public static int loadTexture(final IntBuffer data, final Size size, final int u
         return textures[0];
     }
 
+    public static int loadTexture(final IntBuffer data, final int width, final int height, final int usedTexId) {
+        int textures[] = new int[1];
+        if (usedTexId == NO_TEXTURE) {
+            GLES30.glGenTextures(1, textures, 0);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, textures[0]);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_LINEAR);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);
+            GLES30.glTexImage2D(GLES30.GL_TEXTURE_2D, 0, GLES30.GL_RGBA, width, height,
+                    0, GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, data);
+        } else {
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, usedTexId);
+            GLES30.glTexSubImage2D(GLES30.GL_TEXTURE_2D, 0, 0, 0, width,
+                    height, GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, data);
+            textures[0] = usedTexId;
+        }
+        return textures[0];
+    }
+
     public static int loadTextureAsBitmap(final IntBuffer data, final Size size, final int usedTexId) {
         Bitmap bitmap = Bitmap
                 .createBitmap(data.array(), size.width, size.height, Config.ARGB_8888);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/videosupport/VideoFrameCallback.java b/library/src/jp/co/cyberagent/android/gpuimage/videosupport/VideoFrameCallback.java
new file mode 100644
index 00000000..8989e70c
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/videosupport/VideoFrameCallback.java
@@ -0,0 +1,12 @@
+package jp.co.cyberagent.android.gpuimage.videosupport;
+
+/**
+ * Created by Ronan Burns on 02/06/2017.
+ */
+/*
+    This interface accepts video frames in YUV420sp (NV21) format, similar to most camera previews
+ */
+public interface VideoFrameCallback
+{
+    void onVideoFrame(byte[] data, int width, int height);
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/videosupport/VideoSourceRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/videosupport/VideoSourceRenderer.java
new file mode 100644
index 00000000..7d8a97d9
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/videosupport/VideoSourceRenderer.java
@@ -0,0 +1,10 @@
+package jp.co.cyberagent.android.gpuimage.videosupport;
+
+/**
+ * Created by BBT007 on 02/06/2017.
+ */
+
+public interface VideoSourceRenderer
+{
+    void setVideoRenderer(VideoFrameCallback videoFrameCallback);
+}
