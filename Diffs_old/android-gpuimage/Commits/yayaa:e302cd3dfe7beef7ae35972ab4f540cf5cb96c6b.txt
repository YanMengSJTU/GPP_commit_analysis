diff --git a/build.gradle b/build.gradle
index ecc0a83e..3a145e74 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0-beta6'
+        classpath 'com.android.tools.build:gradle:2.1.0'
     }
 }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8392a5a9..ddefd0da 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -103,9 +103,9 @@ public void setGLSurfaceView(final GLSurfaceView view) {
     /**
      * Sets the background color
      *
-     * @param red red color value
+     * @param red   red color value
      * @param green green color value
-     * @param blue red color value
+     * @param blue  red color value
      */
     public void setBackgroundColor(float red, float green, float blue) {
         mRenderer.setBackgroundColor(red, green, blue);
@@ -132,13 +132,13 @@ public void setUpCamera(final Camera camera) {
     /**
      * Sets the up camera to be connected to GPUImage to get a filtered preview.
      *
-     * @param camera the camera
-     * @param degrees by how many degrees the image should be rotated
+     * @param camera         the camera
+     * @param degrees        by how many degrees the image should be rotated
      * @param flipHorizontal if the image should be flipped horizontally
-     * @param flipVertical if the image should be flipped vertically
+     * @param flipVertical   if the image should be flipped vertically
      */
     public void setUpCamera(final Camera camera, final int degrees, final boolean flipHorizontal,
-            final boolean flipVertical) {
+                            final boolean flipVertical) {
         mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
             setUpCameraGingerbread(camera);
@@ -203,6 +203,15 @@ public void setScaleType(ScaleType scaleType) {
         requestRender();
     }
 
+    /**
+     * Returns current rotation
+     *
+     * @return
+     */
+    public Rotation getRotation() {
+        return mRenderer.getRotation();
+    }
+
     /**
      * Sets the rotation of the displayed image.
      *
@@ -263,6 +272,35 @@ private String getPath(final Uri uri) {
         return path;
     }
 
+    /**
+     * Returns current bitmap with applied filter and required rotation
+     *
+     * @return
+     */
+    public Bitmap getCurrentBitmapWithFilter() {
+        Rotation rotation = getRotation();
+
+        GPUImageRenderer renderer = new GPUImageRenderer(mFilter);
+        renderer.setRotation(rotation, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+        renderer.setScaleType(mScaleType);
+
+        int width, height;
+        if (rotation == Rotation.ROTATION_90 || rotation == Rotation.ROTATION_270) {
+            width = mCurrentBitmap.getHeight();
+            height = mCurrentBitmap.getWidth();
+        } else {
+            width = mCurrentBitmap.getWidth();
+            height = mCurrentBitmap.getHeight();
+        }
+
+        PixelBuffer buffer = new PixelBuffer(width, height);
+        buffer.setRenderer(renderer);
+        renderer.setImageBitmap(mCurrentBitmap, false);
+        Bitmap result = buffer.getBitmap();
+
+        return result;
+    }
+
     /**
      * Gets the current displayed image with applied filter as a Bitmap.
      *
@@ -285,13 +323,13 @@ public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap) {
 
                 @Override
                 public void run() {
-                    synchronized(mFilter) {
+                    synchronized (mFilter) {
                         mFilter.destroy();
                         mFilter.notify();
                     }
                 }
             });
-            synchronized(mFilter) {
+            synchronized (mFilter) {
                 requestRender();
                 try {
                     mFilter.wait();
@@ -329,12 +367,12 @@ public void run() {
      * bitmap. The order of the calls to the listener will be the same as the
      * filter order.
      *
-     * @param bitmap the bitmap on which the filters will be applied
-     * @param filters the filters which will be applied on the bitmap
+     * @param bitmap   the bitmap on which the filters will be applied
+     * @param filters  the filters which will be applied on the bitmap
      * @param listener the listener on which the results will be notified
      */
     public static void getBitmapForMultipleFilters(final Bitmap bitmap,
-            final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener) {
+                                                   final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener) {
         if (filters.isEmpty()) {
             return;
         }
@@ -355,7 +393,7 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
     /**
      * Deprecated: Please use
      * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
-     *
+     * <p>
      * Save current image with applied filter to Pictures. It will be stored on
      * the default Picture folder on the phone below the given folderName and
      * fileName. <br>
@@ -363,33 +401,33 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
      * listener.
      *
      * @param folderName the folder name
-     * @param fileName the file name
-     * @param listener the listener
+     * @param fileName   the file name
+     * @param listener   the listener
      */
     @Deprecated
     public void saveToPictures(final String folderName, final String fileName,
-            final OnPictureSavedListener listener) {
+                               final OnPictureSavedListener listener) {
         saveToPictures(mCurrentBitmap, folderName, fileName, listener);
     }
 
     /**
      * Deprecated: Please use
      * {@link GPUImageView#saveToPictures(String, String, jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener)}
-     *
+     * <p>
      * Apply and save the given bitmap with applied filter to Pictures. It will
      * be stored on the default Picture folder on the phone below the given
      * folerName and fileName. <br>
      * This method is async and will notify when the image was saved through the
      * listener.
      *
-     * @param bitmap the bitmap
+     * @param bitmap     the bitmap
      * @param folderName the folder name
-     * @param fileName the file name
-     * @param listener the listener
+     * @param fileName   the file name
+     * @param listener   the listener
      */
     @Deprecated
     public void saveToPictures(final Bitmap bitmap, final String folderName, final String fileName,
-            final OnPictureSavedListener listener) {
+                               final OnPictureSavedListener listener) {
         new SaveTask(bitmap, folderName, fileName, listener).execute();
     }
 
@@ -438,7 +476,7 @@ private int getOutputHeight() {
         private final Handler mHandler;
 
         public SaveTask(final Bitmap bitmap, final String folderName, final String fileName,
-                final OnPictureSavedListener listener) {
+                        final OnPictureSavedListener listener) {
             mBitmap = bitmap;
             mFolderName = folderName;
             mFileName = fileName;
@@ -461,8 +499,8 @@ private void saveImage(final String folderName, final String fileName, final Bit
                 file.getParentFile().mkdirs();
                 image.compress(CompressFormat.JPEG, 80, new FileOutputStream(file));
                 MediaScannerConnection.scanFile(mContext,
-                        new String[] {
-                            file.toString()
+                        new String[]{
+                                file.toString()
                         }, null,
                         new MediaScannerConnection.OnScanCompletedListener() {
                             @Override
@@ -516,7 +554,7 @@ protected Bitmap decode(BitmapFactory.Options options) {
         @Override
         protected int getImageOrientation() throws IOException {
             Cursor cursor = mContext.getContentResolver().query(mUri,
-                    new String[] { MediaStore.Images.ImageColumns.ORIENTATION }, null, null, null);
+                    new String[]{MediaStore.Images.ImageColumns.ORIENTATION}, null, null, null);
 
             if (cursor == null || cursor.getCount() != 1) {
                 return 0;
@@ -713,5 +751,5 @@ private Bitmap rotateImage(final Bitmap bitmap) {
         void response(T item);
     }
 
-    public enum ScaleType { CENTER_INSIDE, CENTER_CROP }
+    public enum ScaleType {CENTER_INSIDE, CENTER_CROP}
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index 2b356a90..828da6a7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -184,6 +184,21 @@ public void requestRender() {
         mGLSurfaceView.requestRender();
     }
 
+    /**
+     * Save current bitmap with applied filter to Pictures. Since this method creates a new bitmap
+     * from source and applying filters over again the result will be the same sizes with source
+     * instead of capture methods result's being views size on screen. And this will not be causing
+     * black space on screen, since it's not using current surfaceView to re-render bitmap
+     * in order to capture it.
+     *
+     * @param folderName the folder name
+     * @param fileName   the file name
+     * @param listener   the listener
+     */
+    public void saveBitmap(String folderName, String fileName, OnPictureSavedListener listener) {
+        new SaveTask(folderName, fileName, false, listener).execute();
+    }
+
     /**
      * Save current image with applied filter to Pictures. It will be stored on
      * the default Picture folder on the phone below the given folderName and
@@ -249,6 +264,7 @@ public void onGlobalLayout() {
                 waiter.release();
             }
         });
+
         post(new Runnable() {
             @Override
             public void run() {
@@ -258,6 +274,7 @@ public void run() {
                 mGLSurfaceView.requestLayout();
             }
         });
+
         waiter.acquire();
 
         // Run one render pass
@@ -404,6 +421,7 @@ private void init() {
         private final String mFileName;
         private final int mWidth;
         private final int mHeight;
+        private final boolean shouldReRender;
         private final OnPictureSavedListener mListener;
         private final Handler mHandler;
 
@@ -412,20 +430,35 @@ public SaveTask(final String folderName, final String fileName,
             this(folderName, fileName, 0, 0, listener);
         }
 
-        public SaveTask(final String folderName, final String fileName, int width, int height,
+        public SaveTask(final String folderName, final String fileName, boolean reRender,
                         final OnPictureSavedListener listener) {
+            this(folderName, fileName, reRender, 0, 0, listener);
+        }
+
+        public SaveTask(final String folderName, final String fileName, int width, int height, final OnPictureSavedListener listener) {
+            this(folderName, fileName, true, width, height, listener);
+        }
+
+        private SaveTask(String folderName, String fileName, boolean reRender, int width, int height, OnPictureSavedListener listener) {
             mFolderName = folderName;
             mFileName = fileName;
+            shouldReRender = reRender;
             mWidth = width;
             mHeight = height;
             mListener = listener;
             mHandler = new Handler();
         }
 
+        @SuppressWarnings("WrongThread")
         @Override
         protected Void doInBackground(final Void... params) {
             try {
-                Bitmap result = mWidth != 0 ? capture(mWidth, mHeight) : capture();
+                Bitmap result;
+                if (shouldReRender) {
+                    result = mWidth != 0 ? capture(mWidth, mHeight) : capture();
+                } else {
+                    result = getGPUImage().getCurrentBitmapWithFilter();
+                }
                 saveImage(mFolderName, mFileName, result);
             } catch (InterruptedException e) {
                 e.printStackTrace();
