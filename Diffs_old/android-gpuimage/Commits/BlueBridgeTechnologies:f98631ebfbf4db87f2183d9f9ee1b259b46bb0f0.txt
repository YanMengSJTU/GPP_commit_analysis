diff --git a/build.gradle b/build.gradle
index 8a29e6b0..d60b038a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0-beta6'
+        classpath 'com.android.tools.build:gradle:2.3.2'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6c0732ab..efaf6fff 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Dec 06 18:27:05 JST 2014
+#Wed May 31 12:27:31 IST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 4e0ded68..09c76eaf 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -40,6 +40,7 @@ android {
     lintOptions {
         abortOnError false
     }
+    buildToolsVersion '25.0.0'
 }
 
 task androidJavadocs(type: Javadoc) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8392a5a9..91968c85 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -39,10 +39,13 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -92,7 +95,7 @@ private boolean supportsOpenGLES2(final Context context) {
      */
     public void setGLSurfaceView(final GLSurfaceView view) {
         mGlSurfaceView = view;
-        mGlSurfaceView.setEGLContextClientVersion(2);
+        mGlSurfaceView.setEGLContextClientVersion(3);
         mGlSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
         mGlSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);
         mGlSurfaceView.setRenderer(mRenderer);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
index 0c5e5a03..491aac93 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Runs a 3x3 convolution kernel against the image
@@ -88,7 +88,7 @@ public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel) {
     @Override
     public void onInit() {
         super.onInit();
-        mUniformConvolutionMatrix = GLES20.glGetUniformLocation(getProgram(), "convolutionMatrix");
+        mUniformConvolutionMatrix = GLES30.glGetUniformLocation(getProgram(), "convolutionMatrix");
         setConvolutionKernel(mConvolutionKernel);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
index 2e6820a3..08e2ed94 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImage3x3TextureSamplingFilter extends GPUImageFilter {
     public static final String THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER = "" +
@@ -79,8 +79,8 @@ public GPUImage3x3TextureSamplingFilter(final String fragmentShader) {
     @Override
     public void onInit() {
         super.onInit();
-        mUniformTexelWidthLocation = GLES20.glGetUniformLocation(getProgram(), "texelWidth");
-        mUniformTexelHeightLocation = GLES20.glGetUniformLocation(getProgram(), "texelHeight");
+        mUniformTexelWidthLocation = GLES30.glGetUniformLocation(getProgram(), "texelWidth");
+        mUniformTexelHeightLocation = GLES30.glGetUniformLocation(getProgram(), "texelHeight");
         if (mTexelWidth != 0) {
             updateTexelValues();
         }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
index 275253ab..33568ae4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter.java
@@ -6,7 +6,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 
 public class GPUImageBilateralFilter extends GPUImageFilter {
@@ -128,8 +128,8 @@ public GPUImageBilateralFilter(final float distanceNormalizationFactor) {
 	@Override
 	public void onInit() {
 		super.onInit();
-		mDisFactorLocation = GLES20.glGetUniformLocation(getProgram(), "distanceNormalizationFactor");
-		mSingleStepOffsetLocation = GLES20.glGetUniformLocation(getProgram(), "singleStepOffset");
+		mDisFactorLocation = GLES30.glGetUniformLocation(getProgram(), "distanceNormalizationFactor");
+		mSingleStepOffsetLocation = GLES30.glGetUniformLocation(getProgram(), "singleStepOffset");
 	}
 	
 	@Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
index e528ee87..4021a41a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * brightness value ranges from -1.0 to 1.0, with 0.0 as the normal level
@@ -50,7 +50,7 @@ public GPUImageBrightnessFilter(final float brightness) {
     @Override
     public void onInit() {
         super.onInit();
-        mBrightnessLocation = GLES20.glGetUniformLocation(getProgram(), "brightness");
+        mBrightnessLocation = GLES30.glGetUniformLocation(getProgram(), "brightness");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
index af49bedd..f93b67d9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter.java
@@ -17,7 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageBulgeDistortionFilter extends GPUImageFilter {
     public static final String BULGE_FRAGMENT_SHADER = "" +
@@ -72,10 +72,10 @@ public GPUImageBulgeDistortionFilter(float radius, float scale, PointF center) {
     @Override
     public void onInit() {
         super.onInit();
-        mScaleLocation = GLES20.glGetUniformLocation(getProgram(), "scale");
-        mRadiusLocation = GLES20.glGetUniformLocation(getProgram(), "radius");
-        mCenterLocation = GLES20.glGetUniformLocation(getProgram(), "center");
-        mAspectRatioLocation = GLES20.glGetUniformLocation(getProgram(), "aspectRatio");
+        mScaleLocation = GLES30.glGetUniformLocation(getProgram(), "scale");
+        mRadiusLocation = GLES30.glGetUniformLocation(getProgram(), "radius");
+        mCenterLocation = GLES30.glGetUniformLocation(getProgram(), "center");
+        mAspectRatioLocation = GLES30.glGetUniformLocation(getProgram(), "aspectRatio");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
index 7957b05a..85a6982c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Selectively replaces a color in the first image with the second image
@@ -65,9 +65,9 @@ public GPUImageChromaKeyBlendFilter() {
     @Override
     public void onInit() {
         super.onInit();
-        mThresholdSensitivityLocation = GLES20.glGetUniformLocation(getProgram(), "thresholdSensitivity");
-        mSmoothingLocation = GLES20.glGetUniformLocation(getProgram(), "smoothing");
-        mColorToReplaceLocation = GLES20.glGetUniformLocation(getProgram(), "colorToReplace");
+        mThresholdSensitivityLocation = GLES30.glGetUniformLocation(getProgram(), "thresholdSensitivity");
+        mSmoothingLocation = GLES30.glGetUniformLocation(getProgram(), "smoothing");
+        mColorToReplaceLocation = GLES30.glGetUniformLocation(getProgram(), "colorToReplace");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
index 68c078a6..0ea8716d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter.java
@@ -1,6 +1,6 @@
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Created by edward_chiang on 13/10/16.
@@ -160,10 +160,10 @@ public GPUImageColorBalanceFilter() {
     @Override
     public void onInit() {
         super.onInit();
-        mShadowsLocation = GLES20.glGetUniformLocation(getProgram(), "shadowsShift");
-        mMidtonesLocation = GLES20.glGetUniformLocation(getProgram(), "midtonesShift");
-        mHighlightsLocation = GLES20.glGetUniformLocation(getProgram(), "highlightsShift");
-        mPreserveLuminosityLocation = GLES20.glGetUniformLocation(getProgram(), "preserveLuminosity");
+        mShadowsLocation = GLES30.glGetUniformLocation(getProgram(), "shadowsShift");
+        mMidtonesLocation = GLES30.glGetUniformLocation(getProgram(), "midtonesShift");
+        mHighlightsLocation = GLES30.glGetUniformLocation(getProgram(), "highlightsShift");
+        mPreserveLuminosityLocation = GLES30.glGetUniformLocation(getProgram(), "preserveLuminosity");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
index 59203c4d..93ad4c65 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Applies a ColorMatrix to the image.
@@ -61,8 +61,8 @@ public GPUImageColorMatrixFilter(final float intensity, final float[] colorMatri
     @Override
     public void onInit() {
         super.onInit();
-        mColorMatrixLocation = GLES20.glGetUniformLocation(getProgram(), "colorMatrix");
-        mIntensityLocation = GLES20.glGetUniformLocation(getProgram(), "intensity");
+        mColorMatrixLocation = GLES30.glGetUniformLocation(getProgram(), "colorMatrix");
+        mIntensityLocation = GLES30.glGetUniformLocation(getProgram(), "intensity");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
index 1d2b9107..1d8e9f90 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Changes the contrast of the image.<br>
@@ -52,7 +52,7 @@ public GPUImageContrastFilter(float contrast) {
     @Override
     public void onInit() {
         super.onInit();
-        mContrastLocation = GLES20.glGetUniformLocation(getProgram(), "contrast");
+        mContrastLocation = GLES30.glGetUniformLocation(getProgram(), "contrast");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
index 04a3d4c7..108277d3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * crossHatchSpacing: The fractional width of the image to use as the spacing for the crosshatch. The default is 0.03.
@@ -85,8 +85,8 @@ public GPUImageCrosshatchFilter(float crossHatchSpacing, float lineWidth) {
     @Override
     public void onInit() {
         super.onInit();
-        mCrossHatchSpacingLocation = GLES20.glGetUniformLocation(getProgram(), "crossHatchSpacing");
-        mLineWidthLocation = GLES20.glGetUniformLocation(getProgram(), "lineWidth");
+        mCrossHatchSpacingLocation = GLES30.glGetUniformLocation(getProgram(), "crossHatchSpacing");
+        mLineWidthLocation = GLES30.glGetUniformLocation(getProgram(), "lineWidth");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
index cd2880a6..988e9e7f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Mix ranges from 0.0 (only image 1) to 1.0 (only image 2), with 0.5 (half of either) as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
index de5de414..50df3bf5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * exposure: The adjusted exposure (-10.0 - 10.0, with 0.0 as the default)
@@ -50,7 +50,7 @@ public GPUImageExposureFilter(final float exposure) {
     @Override
     public void onInit() {
         super.onInit();
-        mExposureLocation = GLES20.glGetUniformLocation(getProgram(), "exposure");
+        mExposureLocation = GLES30.glGetUniformLocation(getProgram(), "exposure");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
index c815ad0f..562a386d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageFalseColorFilter extends GPUImageFilter {
     public static final String FALSECOLOR_FRAGMENT_SHADER = "" +
@@ -61,8 +61,8 @@ public GPUImageFalseColorFilter(float[] firstColor, float[] secondColor) {
     @Override
     public void onInit() {
         super.onInit();
-        mFirstColorLocation = GLES20.glGetUniformLocation(getProgram(), "firstColor");
-        mSecondColorLocation = GLES20.glGetUniformLocation(getProgram(), "secondColor");
+        mFirstColorLocation = GLES30.glGetUniformLocation(getProgram(), "firstColor");
+        mSecondColorLocation = GLES30.glGetUniformLocation(getProgram(), "secondColor");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
index 7a8641aa..d46696c6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
@@ -19,7 +19,7 @@
 import android.content.Context;
 import android.content.res.AssetManager;
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 import java.io.InputStream;
 import java.nio.FloatBuffer;
@@ -76,9 +76,9 @@ public final void init() {
 
     public void onInit() {
         mGLProgId = OpenGlUtils.loadProgram(mVertexShader, mFragmentShader);
-        mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, "position");
-        mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, "inputImageTexture");
-        mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,
+        mGLAttribPosition = GLES30.glGetAttribLocation(mGLProgId, "position");
+        mGLUniformTexture = GLES30.glGetUniformLocation(mGLProgId, "inputImageTexture");
+        mGLAttribTextureCoordinate = GLES30.glGetAttribLocation(mGLProgId,
                 "inputTextureCoordinate");
         mIsInitialized = true;
     }
@@ -88,7 +88,7 @@ public void onInitialized() {
 
     public final void destroy() {
         mIsInitialized = false;
-        GLES20.glDeleteProgram(mGLProgId);
+        GLES30.glDeleteProgram(mGLProgId);
         onDestroy();
     }
 
@@ -102,29 +102,29 @@ public void onOutputSizeChanged(final int width, final int height) {
 
     public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                        final FloatBuffer textureBuffer) {
-        GLES20.glUseProgram(mGLProgId);
+        GLES30.glUseProgram(mGLProgId);
         runPendingOnDrawTasks();
         if (!mIsInitialized) {
             return;
         }
 
         cubeBuffer.position(0);
-        GLES20.glVertexAttribPointer(mGLAttribPosition, 2, GLES20.GL_FLOAT, false, 0, cubeBuffer);
-        GLES20.glEnableVertexAttribArray(mGLAttribPosition);
+        GLES30.glVertexAttribPointer(mGLAttribPosition, 2, GLES30.GL_FLOAT, false, 0, cubeBuffer);
+        GLES30.glEnableVertexAttribArray(mGLAttribPosition);
         textureBuffer.position(0);
-        GLES20.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, GLES20.GL_FLOAT, false, 0,
+        GLES30.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, GLES30.GL_FLOAT, false, 0,
                 textureBuffer);
-        GLES20.glEnableVertexAttribArray(mGLAttribTextureCoordinate);
+        GLES30.glEnableVertexAttribArray(mGLAttribTextureCoordinate);
         if (textureId != OpenGlUtils.NO_TEXTURE) {
-            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);
-            GLES20.glUniform1i(mGLUniformTexture, 0);
+            GLES30.glActiveTexture(GLES30.GL_TEXTURE0);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, textureId);
+            GLES30.glUniform1i(mGLUniformTexture, 0);
         }
         onDrawArraysPre();
-        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
-        GLES20.glDisableVertexAttribArray(mGLAttribPosition);
-        GLES20.glDisableVertexAttribArray(mGLAttribTextureCoordinate);
-        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
+        GLES30.glDrawArrays(GLES30.GL_TRIANGLE_STRIP, 0, 4);
+        GLES30.glDisableVertexAttribArray(mGLAttribPosition);
+        GLES30.glDisableVertexAttribArray(mGLAttribTextureCoordinate);
+        GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, 0);
     }
 
     protected void onDrawArraysPre() {}
@@ -167,7 +167,7 @@ protected void setInteger(final int location, final int intValue) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform1i(location, intValue);
+                GLES30.glUniform1i(location, intValue);
             }
         });
     }
@@ -176,7 +176,7 @@ protected void setFloat(final int location, final float floatValue) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform1f(location, floatValue);
+                GLES30.glUniform1f(location, floatValue);
             }
         });
     }
@@ -185,7 +185,7 @@ protected void setFloatVec2(final int location, final float[] arrayValue) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform2fv(location, 1, FloatBuffer.wrap(arrayValue));
+                GLES30.glUniform2fv(location, 1, FloatBuffer.wrap(arrayValue));
             }
         });
     }
@@ -194,7 +194,7 @@ protected void setFloatVec3(final int location, final float[] arrayValue) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform3fv(location, 1, FloatBuffer.wrap(arrayValue));
+                GLES30.glUniform3fv(location, 1, FloatBuffer.wrap(arrayValue));
             }
         });
     }
@@ -203,7 +203,7 @@ protected void setFloatVec4(final int location, final float[] arrayValue) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform4fv(location, 1, FloatBuffer.wrap(arrayValue));
+                GLES30.glUniform4fv(location, 1, FloatBuffer.wrap(arrayValue));
             }
         });
     }
@@ -212,7 +212,7 @@ protected void setFloatArray(final int location, final float[] arrayValue) {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glUniform1fv(location, arrayValue.length, FloatBuffer.wrap(arrayValue));
+                GLES30.glUniform1fv(location, arrayValue.length, FloatBuffer.wrap(arrayValue));
             }
         });
     }
@@ -225,7 +225,7 @@ public void run() {
                 float[] vec2 = new float[2];
                 vec2[0] = point.x;
                 vec2[1] = point.y;
-                GLES20.glUniform2fv(location, 1, vec2, 0);
+                GLES30.glUniform2fv(location, 1, vec2, 0);
             }
         });
     }
@@ -235,7 +235,7 @@ protected void setUniformMatrix3f(final int location, final float[] matrix) {
 
             @Override
             public void run() {
-                GLES20.glUniformMatrix3fv(location, 1, false, matrix, 0);
+                GLES30.glUniformMatrix3fv(location, 1, false, matrix, 0);
             }
         });
     }
@@ -245,7 +245,7 @@ protected void setUniformMatrix4f(final int location, final float[] matrix) {
 
             @Override
             public void run() {
-                GLES20.glUniformMatrix4fv(location, 1, false, matrix, 0);
+                GLES30.glUniformMatrix4fv(location, 1, false, matrix, 0);
             }
         });
     }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
index 10ea41ca..c42e8932 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
@@ -17,7 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.annotation.SuppressLint;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 
 import java.nio.ByteBuffer;
@@ -116,11 +116,11 @@ public void onDestroy() {
 
     private void destroyFramebuffers() {
         if (mFrameBufferTextures != null) {
-            GLES20.glDeleteTextures(mFrameBufferTextures.length, mFrameBufferTextures, 0);
+            GLES30.glDeleteTextures(mFrameBufferTextures.length, mFrameBufferTextures, 0);
             mFrameBufferTextures = null;
         }
         if (mFrameBuffers != null) {
-            GLES20.glDeleteFramebuffers(mFrameBuffers.length, mFrameBuffers, 0);
+            GLES30.glDeleteFramebuffers(mFrameBuffers.length, mFrameBuffers, 0);
             mFrameBuffers = null;
         }
     }
@@ -149,26 +149,26 @@ public void onOutputSizeChanged(final int width, final int height) {
             mFrameBufferTextures = new int[size - 1];
 
             for (int i = 0; i < size - 1; i++) {
-                GLES20.glGenFramebuffers(1, mFrameBuffers, i);
-                GLES20.glGenTextures(1, mFrameBufferTextures, i);
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i]);
-                GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, width, height, 0,
-                        GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, null);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-                GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                        GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-
-                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);
-                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0,
-                        GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i], 0);
-
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
-                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
+                GLES30.glGenFramebuffers(1, mFrameBuffers, i);
+                GLES30.glGenTextures(1, mFrameBufferTextures, i);
+                GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, mFrameBufferTextures[i]);
+                GLES30.glTexImage2D(GLES30.GL_TEXTURE_2D, 0, GLES30.GL_RGBA, width, height, 0,
+                        GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, null);
+                GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                        GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);
+                GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                        GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_LINEAR);
+                GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                        GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);
+                GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                        GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);
+
+                GLES30.glBindFramebuffer(GLES30.GL_FRAMEBUFFER, mFrameBuffers[i]);
+                GLES30.glFramebufferTexture2D(GLES30.GL_FRAMEBUFFER, GLES30.GL_COLOR_ATTACHMENT0,
+                        GLES30.GL_TEXTURE_2D, mFrameBufferTextures[i], 0);
+
+                GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, 0);
+                GLES30.glBindFramebuffer(GLES30.GL_FRAMEBUFFER, 0);
             }
         }
     }
@@ -193,8 +193,8 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                 GPUImageFilter filter = mMergedFilters.get(i);
                 boolean isNotLast = i < size - 1;
                 if (isNotLast) {
-                    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);
-                    GLES20.glClearColor(0, 0, 0, 0);
+                    GLES30.glBindFramebuffer(GLES30.GL_FRAMEBUFFER, mFrameBuffers[i]);
+                    GLES30.glClearColor(0, 0, 0, 0);
                 }
 
                 if (i == 0) {
@@ -206,7 +206,7 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                 }
 
                 if (isNotLast) {
-                    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
+                    GLES30.glBindFramebuffer(GLES30.GL_FRAMEBUFFER, 0);
                     previousTexture = mFrameBufferTextures[i];
                 }
             }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
index 1f902d0f..61c1e859 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * gamma value ranges from 0.0 to 3.0, with 1.0 as the normal level
@@ -50,7 +50,7 @@ public GPUImageGammaFilter(final float gamma) {
     @Override
     public void onInit() {
         super.onInit();
-        mGammaLocation = GLES20.glGetUniformLocation(getProgram(), "gamma");
+        mGammaLocation = GLES30.glGetUniformLocation(getProgram(), "gamma");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
index 460019cc..78f14f1f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter.java
@@ -17,7 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageGlassSphereFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
@@ -84,10 +84,10 @@ public GPUImageGlassSphereFilter(PointF center, float radius, float refractiveIn
     @Override
     public void onInit() {
         super.onInit();
-        mCenterLocation = GLES20.glGetUniformLocation(getProgram(), "center");
-        mRadiusLocation = GLES20.glGetUniformLocation(getProgram(), "radius");
-        mAspectRatioLocation = GLES20.glGetUniformLocation(getProgram(), "aspectRatio");
-        mRefractiveIndexLocation = GLES20.glGetUniformLocation(getProgram(), "refractiveIndex");
+        mCenterLocation = GLES30.glGetUniformLocation(getProgram(), "center");
+        mRadiusLocation = GLES30.glGetUniformLocation(getProgram(), "radius");
+        mAspectRatioLocation = GLES30.glGetUniformLocation(getProgram(), "aspectRatio");
+        mRefractiveIndexLocation = GLES30.glGetUniformLocation(getProgram(), "refractiveIndex");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java
index 52e27d04..8b3d4863 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHalftoneFilter.java
@@ -1,6 +1,6 @@
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageHalftoneFilter extends GPUImageFilter {
     public static final String HALFTONE_FRAGMENT_SHADER = "" +
@@ -44,8 +44,8 @@ public GPUImageHalftoneFilter(float fractionalWidthOfAPixel) {
     @Override
     public void onInit() {
         super.onInit();
-        mFractionalWidthOfPixelLocation = GLES20.glGetUniformLocation(getProgram(), "fractionalWidthOfPixel");
-        mAspectRatioLocation = GLES20.glGetUniformLocation(getProgram(), "aspectRatio");
+        mFractionalWidthOfPixelLocation = GLES30.glGetUniformLocation(getProgram(), "fractionalWidthOfPixel");
+        mAspectRatioLocation = GLES30.glGetUniformLocation(getProgram(), "aspectRatio");
         setFractionalWidthOfAPixel(mFractionalWidthOfAPixel);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
index bb230abc..bb08e5d7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * The haze filter can be used to add or remove haze.
@@ -64,8 +64,8 @@ public GPUImageHazeFilter(float distance, float slope) {
     @Override
     public void onInit() {
         super.onInit();
-        mDistanceLocation = GLES20.glGetUniformLocation(getProgram(), "distance");
-        mSlopeLocation = GLES20.glGetUniformLocation(getProgram(), "slope");
+        mDistanceLocation = GLES30.glGetUniformLocation(getProgram(), "distance");
+        mSlopeLocation = GLES30.glGetUniformLocation(getProgram(), "slope");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
index 878c508a..09c04cb8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Adjusts the shadows and highlights of an image
@@ -63,8 +63,8 @@ public GPUImageHighlightShadowFilter(final float shadows, final float highlights
     @Override
     public void onInit() {
         super.onInit();
-        mHighlightsLocation = GLES20.glGetUniformLocation(getProgram(), "highlights");
-        mShadowsLocation = GLES20.glGetUniformLocation(getProgram(), "shadows");
+        mHighlightsLocation = GLES30.glGetUniformLocation(getProgram(), "highlights");
+        mShadowsLocation = GLES30.glGetUniformLocation(getProgram(), "shadows");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
index 9fcf7939..abbbef4d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageHueFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageHueFilter extends GPUImageFilter {
     public static final String HUE_FRAGMENT_SHADER = "" +
@@ -79,7 +79,7 @@ public GPUImageHueFilter(final float hue) {
     @Override
     public void onInit() {
         super.onInit();
-        mHueLocation = GLES20.glGetUniformLocation(getProgram(), "hueAdjust");
+        mHueLocation = GLES30.glGetUniformLocation(getProgram(), "hueAdjust");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
index 6fc7f32b..b10f90c1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Kuwahara image abstraction, drawn from the work of Kyprianidis, et. al. in their publication
@@ -129,7 +129,7 @@ public GPUImageKuwaharaFilter(int radius) {
     @Override
     public void onInit() {
         super.onInit();
-        mRadiusLocation = GLES20.glGetUniformLocation(getProgram(), "radius");
+        mRadiusLocation = GLES30.glGetUniformLocation(getProgram(), "radius");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
index d320f64d..6dee6014 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageLaplacianFilter extends GPUImage3x3TextureSamplingFilter {
     public static final String LAPLACIAN_FRAGMENT_SHADER = "" +
@@ -79,7 +79,7 @@ private GPUImageLaplacianFilter(final float[] convolutionKernel) {
     @Override
     public void onInit() {
         super.onInit();
-        mUniformConvolutionMatrix = GLES20.glGetUniformLocation(getProgram(), "convolutionMatrix");
+        mUniformConvolutionMatrix = GLES30.glGetUniformLocation(getProgram(), "convolutionMatrix");
         setConvolutionKernel(mConvolutionKernel);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
index d7fbcfdf..98d015fb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter.java
@@ -1,6 +1,6 @@
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 import android.util.Log;
 
 /**
@@ -57,11 +57,11 @@ private GPUImageLevelsFilter(final float[] min, final float[] mid, final float[]
     @Override
     public void onInit() {
         super.onInit();
-        mMinLocation = GLES20.glGetUniformLocation(getProgram(), "levelMinimum");
-        mMidLocation = GLES20.glGetUniformLocation(getProgram(), "levelMiddle");
-        mMaxLocation = GLES20.glGetUniformLocation(getProgram(), "levelMaximum");
-        mMinOutputLocation = GLES20.glGetUniformLocation(getProgram(), "minOutput");
-        mMaxOutputLocation = GLES20.glGetUniformLocation(getProgram(), "maxOutput");
+        mMinLocation = GLES30.glGetUniformLocation(getProgram(), "levelMinimum");
+        mMidLocation = GLES30.glGetUniformLocation(getProgram(), "levelMiddle");
+        mMaxLocation = GLES30.glGetUniformLocation(getProgram(), "levelMaximum");
+        mMinOutputLocation = GLES30.glGetUniformLocation(getProgram(), "minOutput");
+        mMaxOutputLocation = GLES30.glGetUniformLocation(getProgram(), "maxOutput");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
index 42c9ebdc..e2ef2b2a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageLookupFilter extends GPUImageTwoInputFilter {
 
@@ -72,7 +72,7 @@ public GPUImageLookupFilter(final float intensity) {
     @Override
     public void onInit() {
         super.onInit();
-        mIntensityLocation = GLES20.glGetUniformLocation(getProgram(), "intensity");
+        mIntensityLocation = GLES30.glGetUniformLocation(getProgram(), "intensity");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
index 7bf68859..3cd90bfc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageMixBlendFilter extends GPUImageTwoInputFilter {
 
@@ -35,7 +35,7 @@ public GPUImageMixBlendFilter(String fragmentShader, float mix) {
     @Override
     public void onInit() {
         super.onInit();
-        mMixLocation = GLES20.glGetUniformLocation(getProgram(), "mixturePercent");
+        mMixLocation = GLES30.glGetUniformLocation(getProgram(), "mixturePercent");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
index e426a340..bb90c216 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Converts the image to a single-color version, based on the luminance of each pixel
@@ -73,8 +73,8 @@ public GPUImageMonochromeFilter(final float intensity, final float[] color) {
     @Override
     public void onInit() {
         super.onInit();
-        mIntensityLocation = GLES20.glGetUniformLocation(getProgram(), "intensity");
-        mFilterColorLocation = GLES20.glGetUniformLocation(getProgram(), "filterColor");
+        mIntensityLocation = GLES30.glGetUniformLocation(getProgram(), "intensity");
+        mFilterColorLocation = GLES30.glGetUniformLocation(getProgram(), "filterColor");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
index 55f198d1..0e906a5e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Adjusts the alpha channel of the incoming image
@@ -51,7 +51,7 @@ public GPUImageOpacityFilter(final float opacity) {
     @Override
     public void onInit() {
         super.onInit();
-        mOpacityLocation = GLES20.glGetUniformLocation(getProgram(), "opacity");
+        mOpacityLocation = GLES30.glGetUniformLocation(getProgram(), "opacity");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
index c0ec15d1..7cb2917d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 /**
  * Applies a grayscale effect to the image.
  */
@@ -54,9 +54,9 @@ public GPUImagePixelationFilter() {
     @Override
     public void onInit() {
         super.onInit();
-        mImageWidthFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageWidthFactor");
-        mImageHeightFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageHeightFactor");
-        mPixelLocation = GLES20.glGetUniformLocation(getProgram(), "pixel");
+        mImageWidthFactorLocation = GLES30.glGetUniformLocation(getProgram(), "imageWidthFactor");
+        mImageHeightFactorLocation = GLES30.glGetUniformLocation(getProgram(), "imageHeightFactor");
+        mPixelLocation = GLES30.glGetUniformLocation(getProgram(), "pixel");
         setPixel(mPixel);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
index 3b7c8ff7..b353fe2e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Reduces the color range of the image. <br>
@@ -52,7 +52,7 @@ public GPUImagePosterizeFilter(final int colorLevels) {
     @Override
     public void onInit() {
         super.onInit();
-        mGLUniformColorLevels = GLES20.glGetUniformLocation(getProgram(), "colorLevels");
+        mGLUniformColorLevels = GLES30.glGetUniformLocation(getProgram(), "colorLevels");
         setColorLevels(mColorLevels);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
index f0af18cb..1fba71c5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Adjusts the individual RGB channels of an image
@@ -62,9 +62,9 @@ public GPUImageRGBFilter(final float red, final float green, final float blue) {
     @Override
     public void onInit() {
         super.onInit();
-        mRedLocation = GLES20.glGetUniformLocation(getProgram(), "red");
-        mGreenLocation = GLES20.glGetUniformLocation(getProgram(), "green");
-        mBlueLocation = GLES20.glGetUniformLocation(getProgram(), "blue");
+        mRedLocation = GLES30.glGetUniformLocation(getProgram(), "red");
+        mGreenLocation = GLES30.glGetUniformLocation(getProgram(), "green");
+        mBlueLocation = GLES30.glGetUniformLocation(getProgram(), "blue");
         mIsInitialized = true;
         setRed(mRed);
         setGreen(mGreen);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 691550bd..b4561b6e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -23,7 +23,7 @@
 import android.hardware.Camera;
 import android.hardware.Camera.PreviewCallback;
 import android.hardware.Camera.Size;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 import android.opengl.GLSurfaceView.Renderer;
 
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
@@ -95,8 +95,8 @@ public GPUImageRenderer(final GPUImageFilter filter) {
 
     @Override
     public void onSurfaceCreated(final GL10 unused, final EGLConfig config) {
-        GLES20.glClearColor(mBackgroundRed, mBackgroundGreen, mBackgroundBlue, 1);
-        GLES20.glDisable(GLES20.GL_DEPTH_TEST);
+        GLES30.glClearColor(mBackgroundRed, mBackgroundGreen, mBackgroundBlue, 1);
+        GLES30.glDisable(GLES30.GL_DEPTH_TEST);
         mFilter.init();
     }
 
@@ -104,8 +104,8 @@ public void onSurfaceCreated(final GL10 unused, final EGLConfig config) {
     public void onSurfaceChanged(final GL10 gl, final int width, final int height) {
         mOutputWidth = width;
         mOutputHeight = height;
-        GLES20.glViewport(0, 0, width, height);
-        GLES20.glUseProgram(mFilter.getProgram());
+        GLES30.glViewport(0, 0, width, height);
+        GLES30.glUseProgram(mFilter.getProgram());
         mFilter.onOutputSizeChanged(width, height);
         adjustImageScaling();
         synchronized (mSurfaceChangedWaiter) {
@@ -115,7 +115,7 @@ public void onSurfaceChanged(final GL10 gl, final int width, final int height) {
 
     @Override
     public void onDrawFrame(final GL10 gl) {
-        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
+        GLES30.glClear(GLES30.GL_COLOR_BUFFER_BIT | GLES30.GL_DEPTH_BUFFER_BIT);
         runAll(mRunOnDraw);
         mFilter.onDraw(mGLTextureId, mGLCubeBuffer, mGLTextureBuffer);
         runAll(mRunOnDrawEnd);
@@ -175,7 +175,7 @@ public void setUpSurfaceTexture(final Camera camera) {
             @Override
             public void run() {
                 int[] textures = new int[1];
-                GLES20.glGenTextures(1, textures, 0);
+                GLES30.glGenTextures(1, textures, 0);
                 mSurfaceTexture = new SurfaceTexture(textures[0]);
                 try {
                     camera.setPreviewTexture(mSurfaceTexture);
@@ -199,7 +199,7 @@ public void run() {
                     oldFilter.destroy();
                 }
                 mFilter.init();
-                GLES20.glUseProgram(mFilter.getProgram());
+                GLES30.glUseProgram(mFilter.getProgram());
                 mFilter.onOutputSizeChanged(mOutputWidth, mOutputHeight);
             }
         });
@@ -210,7 +210,7 @@ public void deleteImage() {
 
             @Override
             public void run() {
-                GLES20.glDeleteTextures(1, new int[]{
+                GLES30.glDeleteTextures(1, new int[]{
                         mGLTextureId
                 }, 0);
                 mGLTextureId = NO_IMAGE;
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
index 0725953d..f8662f28 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * saturation: The degree of saturation or desaturation to apply to the image (0.0 - 2.0, with 1.0 as the default)
@@ -56,7 +56,7 @@ public GPUImageSaturationFilter(final float saturation) {
     @Override
     public void onInit() {
         super.onInit();
-        mSaturationLocation = GLES20.glGetUniformLocation(getProgram(), "saturation");
+        mSaturationLocation = GLES30.glGetUniformLocation(getProgram(), "saturation");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
index 4317b66c..f554ffcc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Sharpens the picture. <br>
@@ -100,9 +100,9 @@ public GPUImageSharpenFilter(final float sharpness) {
     @Override
     public void onInit() {
         super.onInit();
-        mSharpnessLocation = GLES20.glGetUniformLocation(getProgram(), "sharpness");
-        mImageWidthFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageWidthFactor");
-        mImageHeightFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageHeightFactor");
+        mSharpnessLocation = GLES30.glGetUniformLocation(getProgram(), "sharpness");
+        mImageWidthFactorLocation = GLES30.glGetUniformLocation(getProgram(), "imageWidthFactor");
+        mImageHeightFactorLocation = GLES30.glGetUniformLocation(getProgram(), "imageHeightFactor");
         setSharpness(mSharpness);
     }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
index a569ce97..86b3d7a9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  *  This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
index f1dcf64e..efa99b30 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter.java
@@ -1,6 +1,6 @@
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageSobelThresholdFilter extends
 		GPUImage3x3TextureSamplingFilter {
@@ -58,7 +58,7 @@ public GPUImageSobelThresholdFilter(float threshold) {
     @Override
     public void onInit() {
     	super.onInit();
-    	mUniformThresholdLocation = GLES20.glGetUniformLocation(getProgram(), "threshold");
+    	mUniformThresholdLocation = GLES30.glGetUniformLocation(getProgram(), "threshold");
     }
     
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
index 6314cf19..40244c10 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter.java
@@ -17,7 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageSphereRefractionFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
@@ -69,10 +69,10 @@ public GPUImageSphereRefractionFilter(PointF center, float radius, float refract
     @Override
     public void onInit() {
         super.onInit();
-        mCenterLocation = GLES20.glGetUniformLocation(getProgram(), "center");
-        mRadiusLocation = GLES20.glGetUniformLocation(getProgram(), "radius");
-        mAspectRatioLocation = GLES20.glGetUniformLocation(getProgram(), "aspectRatio");
-        mRefractiveIndexLocation = GLES20.glGetUniformLocation(getProgram(), "refractiveIndex");
+        mCenterLocation = GLES30.glGetUniformLocation(getProgram(), "center");
+        mRadiusLocation = GLES30.glGetUniformLocation(getProgram(), "radius");
+        mAspectRatioLocation = GLES30.glGetUniformLocation(getProgram(), "aspectRatio");
+        mRefractiveIndexLocation = GLES30.glGetUniformLocation(getProgram(), "refractiveIndex");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
index d4947b9a..ae181092 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter.java
@@ -17,7 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Creates a swirl distortion on the image.
@@ -72,9 +72,9 @@ public GPUImageSwirlFilter(float radius, float angle, PointF center) {
     @Override
     public void onInit() {
         super.onInit();
-        mAngleLocation = GLES20.glGetUniformLocation(getProgram(), "angle");
-        mRadiusLocation = GLES20.glGetUniformLocation(getProgram(), "radius");
-        mCenterLocation = GLES20.glGetUniformLocation(getProgram(), "center");
+        mAngleLocation = GLES30.glGetUniformLocation(getProgram(), "angle");
+        mRadiusLocation = GLES30.glGetUniformLocation(getProgram(), "radius");
+        mCenterLocation = GLES30.glGetUniformLocation(getProgram(), "center");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
index 0f6e1d08..19b59c79 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
@@ -18,7 +18,7 @@
 
 import android.graphics.Point;
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 import java.io.*;
 import java.nio.ByteBuffer;
@@ -69,14 +69,14 @@ public GPUImageToneCurveFilter() {
     @Override
     public void onInit() {
         super.onInit();
-        mToneCurveTextureUniformLocation = GLES20.glGetUniformLocation(getProgram(), "toneCurveTexture");
-        GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
-        GLES20.glGenTextures(1, mToneCurveTexture, 0);
-        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mToneCurveTexture[0]);
-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
+        mToneCurveTextureUniformLocation = GLES30.glGetUniformLocation(getProgram(), "toneCurveTexture");
+        GLES30.glActiveTexture(GLES30.GL_TEXTURE3);
+        GLES30.glGenTextures(1, mToneCurveTexture, 0);
+        GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, mToneCurveTexture[0]);
+        GLES30.glTexParameteri(GLES30.GL_TEXTURE_2D, GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_LINEAR);
+        GLES30.glTexParameteri(GLES30.GL_TEXTURE_2D, GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);
+        GLES30.glTexParameteri(GLES30.GL_TEXTURE_2D, GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);
+        GLES30.glTexParameteri(GLES30.GL_TEXTURE_2D, GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);
     }
 
     @Override
@@ -91,9 +91,9 @@ public void onInitialized() {
     @Override
     protected void onDrawArraysPre() {
         if (mToneCurveTexture[0] != OpenGlUtils.NO_TEXTURE) {
-            GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mToneCurveTexture[0]);
-            GLES20.glUniform1i(mToneCurveTextureUniformLocation, 3);
+            GLES30.glActiveTexture(GLES30.GL_TEXTURE3);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, mToneCurveTexture[0]);
+            GLES30.glUniform1i(mToneCurveTextureUniformLocation, 3);
         }
     }
 
@@ -167,8 +167,8 @@ private void updateToneCurveTexture() {
         runOnDraw(new Runnable() {
             @Override
             public void run() {
-                GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mToneCurveTexture[0]);
+                GLES30.glActiveTexture(GLES30.GL_TEXTURE3);
+                GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, mToneCurveTexture[0]);
 
                 if ((mRedCurve.size() >= 256) && (mGreenCurve.size() >= 256) && (mBlueCurve.size() >= 256) && (mRgbCompositeCurve.size() >= 256)) {
                     byte[] toneCurveByteArray = new byte[256 * 4];
@@ -180,10 +180,10 @@ public void run() {
                         toneCurveByteArray[currentCurveIndex * 4 + 3] = (byte) (255 & 0xff);
                     }
 
-                    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, 256 /*width*/, 1 /*height*/, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, ByteBuffer.wrap(toneCurveByteArray));
+                    GLES30.glTexImage2D(GLES30.GL_TEXTURE_2D, 0, GLES30.GL_RGBA, 256 /*width*/, 1 /*height*/, 0, GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, ByteBuffer.wrap(toneCurveByteArray));
                 }
 //        Buffer pixels!
-//        GLES20.glTexImage2D(int target,
+//        GLES30.glTexImage2D(int target,
 //            int level,
 //            int internalformat,
 //            int width,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
index 5148d1d0..a29e91d5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToonFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * This uses Sobel edge detection to place a black border around objects,
@@ -88,8 +88,8 @@ public GPUImageToonFilter(float threshold, float quantizationLevels) {
     @Override
     public void onInit() {
         super.onInit();
-        mThresholdLocation = GLES20.glGetUniformLocation(getProgram(), "threshold");
-        mQuantizationLevelsLocation = GLES20.glGetUniformLocation(getProgram(), "quantizationLevels");
+        mThresholdLocation = GLES30.glGetUniformLocation(getProgram(), "threshold");
+        mQuantizationLevelsLocation = GLES30.glGetUniformLocation(getProgram(), "quantizationLevels");
     }
 
     @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java
index 0a962cc5..b252b8f7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTransformFilter.java
@@ -1,6 +1,6 @@
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 import android.opengl.Matrix;
 
 import java.nio.ByteBuffer;
@@ -48,8 +48,8 @@ public GPUImageTransformFilter() {
     @Override
     public void onInit() {
         super.onInit();
-        transformMatrixUniform = GLES20.glGetUniformLocation(getProgram(), "transformMatrix");
-        orthographicMatrixUniform = GLES20.glGetUniformLocation(getProgram(), "orthographicMatrix");
+        transformMatrixUniform = GLES30.glGetUniformLocation(getProgram(), "transformMatrix");
+        orthographicMatrixUniform = GLES30.glGetUniformLocation(getProgram(), "orthographicMatrix");
 
         setUniformMatrix4f(transformMatrixUniform, transform3D);
         setUniformMatrix4f(orthographicMatrixUniform, orthographicMatrix);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
index afc3b864..56916005 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
@@ -22,7 +22,7 @@
 
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 import android.graphics.Bitmap;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageTwoInputFilter extends GPUImageFilter {
     private static final String VERTEX_SHADER = "attribute vec4 position;\n" +
@@ -58,9 +58,9 @@ public GPUImageTwoInputFilter(String vertexShader, String fragmentShader) {
     public void onInit() {
         super.onInit();
 
-        mFilterSecondTextureCoordinateAttribute = GLES20.glGetAttribLocation(getProgram(), "inputTextureCoordinate2");
-        mFilterInputTextureUniform2 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture2"); // This does assume a name of "inputImageTexture2" for second input texture in the fragment shader
-        GLES20.glEnableVertexAttribArray(mFilterSecondTextureCoordinateAttribute);
+        mFilterSecondTextureCoordinateAttribute = GLES30.glGetAttribLocation(getProgram(), "inputTextureCoordinate2");
+        mFilterInputTextureUniform2 = GLES30.glGetUniformLocation(getProgram(), "inputImageTexture2"); // This does assume a name of "inputImageTexture2" for second input texture in the fragment shader
+        GLES30.glEnableVertexAttribArray(mFilterSecondTextureCoordinateAttribute);
 
         if (mBitmap != null&&!mBitmap.isRecycled()) {
             setBitmap(mBitmap);
@@ -81,7 +81,7 @@ public void run() {
                     if (bitmap == null || bitmap.isRecycled()) {
                         return;
                     }
-                    GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
+                    GLES30.glActiveTexture(GLES30.GL_TEXTURE3);
                     mFilterSourceTexture2 = OpenGlUtils.loadTexture(bitmap, OpenGlUtils.NO_TEXTURE, false);
                 }
             }
@@ -101,7 +101,7 @@ public void recycleBitmap() {
 
     public void onDestroy() {
         super.onDestroy();
-        GLES20.glDeleteTextures(1, new int[]{
+        GLES30.glDeleteTextures(1, new int[]{
                 mFilterSourceTexture2
         }, 0);
         mFilterSourceTexture2 = OpenGlUtils.NO_TEXTURE;
@@ -109,13 +109,13 @@ public void onDestroy() {
 
     @Override
     protected void onDrawArraysPre() {
-        GLES20.glEnableVertexAttribArray(mFilterSecondTextureCoordinateAttribute);
-        GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
-        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mFilterSourceTexture2);
-        GLES20.glUniform1i(mFilterInputTextureUniform2, 3);
+        GLES30.glEnableVertexAttribArray(mFilterSecondTextureCoordinateAttribute);
+        GLES30.glActiveTexture(GLES30.GL_TEXTURE3);
+        GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, mFilterSourceTexture2);
+        GLES30.glUniform1i(mFilterInputTextureUniform2, 3);
 
         mTexture2CoordinatesBuffer.position(0);
-        GLES20.glVertexAttribPointer(mFilterSecondTextureCoordinateAttribute, 2, GLES20.GL_FLOAT, false, 0, mTexture2CoordinatesBuffer);
+        GLES30.glVertexAttribPointer(mFilterSecondTextureCoordinateAttribute, 2, GLES30.GL_FLOAT, false, 0, mTexture2CoordinatesBuffer);
     }
 
     public void setRotation(final Rotation rotation, final boolean flipHorizontal, final boolean flipVertical) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
index 19c0365b..313298eb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 public class GPUImageTwoPassTextureSamplingFilter extends GPUImageTwoPassFilter {
     public GPUImageTwoPassTextureSamplingFilter(String firstVertexShader, String firstFragmentShader,
@@ -34,15 +34,15 @@ public void onInit() {
     protected void initTexelOffsets() {
         float ratio = getHorizontalTexelOffsetRatio();
         GPUImageFilter filter = mFilters.get(0);
-        int texelWidthOffsetLocation = GLES20.glGetUniformLocation(filter.getProgram(), "texelWidthOffset");
-        int texelHeightOffsetLocation = GLES20.glGetUniformLocation(filter.getProgram(), "texelHeightOffset");
+        int texelWidthOffsetLocation = GLES30.glGetUniformLocation(filter.getProgram(), "texelWidthOffset");
+        int texelHeightOffsetLocation = GLES30.glGetUniformLocation(filter.getProgram(), "texelHeightOffset");
         filter.setFloat(texelWidthOffsetLocation, ratio / mOutputWidth);
         filter.setFloat(texelHeightOffsetLocation, 0);
 
         ratio = getVerticalTexelOffsetRatio();
         filter = mFilters.get(1);
-        texelWidthOffsetLocation = GLES20.glGetUniformLocation(filter.getProgram(), "texelWidthOffset");
-        texelHeightOffsetLocation = GLES20.glGetUniformLocation(filter.getProgram(), "texelHeightOffset");
+        texelWidthOffsetLocation = GLES30.glGetUniformLocation(filter.getProgram(), "texelWidthOffset");
+        texelHeightOffsetLocation = GLES30.glGetUniformLocation(filter.getProgram(), "texelHeightOffset");
         filter.setFloat(texelWidthOffsetLocation, 0);
         filter.setFloat(texelHeightOffsetLocation, ratio / mOutputHeight);
     }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index cc6a0247..4b558cd9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -23,7 +23,7 @@
 import android.graphics.drawable.Drawable;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 import android.opengl.GLSurfaceView;
 import android.os.*;
 import android.util.AttributeSet;
@@ -309,7 +309,7 @@ public Bitmap capture() throws InterruptedException {
             @Override
             public void run() {
                 final IntBuffer pixelBuffer = IntBuffer.allocate(width * height);
-                GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuffer);
+                GLES30.glReadPixels(0, 0, width, height, GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, pixelBuffer);
                 int[] pixelArray = pixelBuffer.array();
 
                 // Convert upside down mirror-reversed image to right-side up normal image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
index 439e8bd0..afee1ea9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter.java
@@ -17,7 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.graphics.PointF;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Performs a vignetting effect, fading out the image at the edges
@@ -74,10 +74,10 @@ public GPUImageVignetteFilter(final PointF vignetteCenter, final float[] vignett
     @Override
     public void onInit() {
         super.onInit();
-        mVignetteCenterLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteCenter");
-        mVignetteColorLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteColor");
-        mVignetteStartLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteStart");
-        mVignetteEndLocation = GLES20.glGetUniformLocation(getProgram(), "vignetteEnd");
+        mVignetteCenterLocation = GLES30.glGetUniformLocation(getProgram(), "vignetteCenter");
+        mVignetteColorLocation = GLES30.glGetUniformLocation(getProgram(), "vignetteColor");
+        mVignetteStartLocation = GLES30.glGetUniformLocation(getProgram(), "vignetteStart");
+        mVignetteEndLocation = GLES30.glGetUniformLocation(getProgram(), "vignetteEnd");
         
         setVignetteCenter(mVignetteCenter);
         setVignetteColor(mVignetteColor);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
index 1818da99..6a23a5ec 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 
 /**
  * Adjusts the white balance of incoming image. <br>
@@ -71,8 +71,8 @@ public GPUImageWhiteBalanceFilter(final float temperature, final float tint) {
     @Override
     public void onInit() {
         super.onInit();
-        mTemperatureLocation = GLES20.glGetUniformLocation(getProgram(), "temperature");
-        mTintLocation = GLES20.glGetUniformLocation(getProgram(), "tint");
+        mTemperatureLocation = GLES30.glGetUniformLocation(getProgram(), "temperature");
+        mTintLocation = GLES30.glGetUniformLocation(getProgram(), "tint");
 
         setTemperature(mTemperature);
         setTint(mTint);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
index e8589704..2cf7f00c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/OpenGlUtils.java
@@ -21,7 +21,7 @@
 import android.graphics.Bitmap;
 import android.graphics.Bitmap.Config;
 import android.hardware.Camera.Size;
-import android.opengl.GLES20;
+import android.opengl.GLES30;
 import android.opengl.GLUtils;
 import android.util.Log;
 
@@ -35,21 +35,21 @@ public static int loadTexture(final Bitmap img, final int usedTexId) {
     public static int loadTexture(final Bitmap img, final int usedTexId, final boolean recycle) {
         int textures[] = new int[1];
         if (usedTexId == NO_TEXTURE) {
-            GLES20.glGenTextures(1, textures, 0);
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-
-            GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, img, 0);
+            GLES30.glGenTextures(1, textures, 0);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, textures[0]);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_LINEAR);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);
+
+            GLUtils.texImage2D(GLES30.GL_TEXTURE_2D, 0, img, 0);
         } else {
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);
-            GLUtils.texSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, img);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, usedTexId);
+            GLUtils.texSubImage2D(GLES30.GL_TEXTURE_2D, 0, 0, 0, img);
             textures[0] = usedTexId;
         }
         if (recycle) {
@@ -61,22 +61,22 @@ public static int loadTexture(final Bitmap img, final int usedTexId, final boole
     public static int loadTexture(final IntBuffer data, final Size size, final int usedTexId) {
         int textures[] = new int[1];
         if (usedTexId == NO_TEXTURE) {
-            GLES20.glGenTextures(1, textures, 0);
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,
-                    GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-            GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, size.width, size.height,
-                    0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);
+            GLES30.glGenTextures(1, textures, 0);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, textures[0]);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_LINEAR);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);
+            GLES30.glTexParameterf(GLES30.GL_TEXTURE_2D,
+                    GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);
+            GLES30.glTexImage2D(GLES30.GL_TEXTURE_2D, 0, GLES30.GL_RGBA, size.width, size.height,
+                    0, GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, data);
         } else {
-            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);
-            GLES20.glTexSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, size.width,
-                    size.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);
+            GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, usedTexId);
+            GLES30.glTexSubImage2D(GLES30.GL_TEXTURE_2D, 0, 0, 0, size.width,
+                    size.height, GLES30.GL_RGBA, GLES30.GL_UNSIGNED_BYTE, data);
             textures[0] = usedTexId;
         }
         return textures[0];
@@ -90,12 +90,12 @@ public static int loadTextureAsBitmap(final IntBuffer data, final Size size, fin
 
     public static int loadShader(final String strSource, final int iType) {
         int[] compiled = new int[1];
-        int iShader = GLES20.glCreateShader(iType);
-        GLES20.glShaderSource(iShader, strSource);
-        GLES20.glCompileShader(iShader);
-        GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);
+        int iShader = GLES30.glCreateShader(iType);
+        GLES30.glShaderSource(iShader, strSource);
+        GLES30.glCompileShader(iShader);
+        GLES30.glGetShaderiv(iShader, GLES30.GL_COMPILE_STATUS, compiled, 0);
         if (compiled[0] == 0) {
-            Log.d("Load Shader Failed", "Compilation\n" + GLES20.glGetShaderInfoLog(iShader));
+            Log.d("Load Shader Failed", "Compilation\n" + GLES30.glGetShaderInfoLog(iShader));
             return 0;
         }
         return iShader;
@@ -106,31 +106,31 @@ public static int loadProgram(final String strVSource, final String strFSource)
         int iFShader;
         int iProgId;
         int[] link = new int[1];
-        iVShader = loadShader(strVSource, GLES20.GL_VERTEX_SHADER);
+        iVShader = loadShader(strVSource, GLES30.GL_VERTEX_SHADER);
         if (iVShader == 0) {
             Log.d("Load Program", "Vertex Shader Failed");
             return 0;
         }
-        iFShader = loadShader(strFSource, GLES20.GL_FRAGMENT_SHADER);
+        iFShader = loadShader(strFSource, GLES30.GL_FRAGMENT_SHADER);
         if (iFShader == 0) {
             Log.d("Load Program", "Fragment Shader Failed");
             return 0;
         }
 
-        iProgId = GLES20.glCreateProgram();
+        iProgId = GLES30.glCreateProgram();
 
-        GLES20.glAttachShader(iProgId, iVShader);
-        GLES20.glAttachShader(iProgId, iFShader);
+        GLES30.glAttachShader(iProgId, iVShader);
+        GLES30.glAttachShader(iProgId, iFShader);
 
-        GLES20.glLinkProgram(iProgId);
+        GLES30.glLinkProgram(iProgId);
 
-        GLES20.glGetProgramiv(iProgId, GLES20.GL_LINK_STATUS, link, 0);
+        GLES30.glGetProgramiv(iProgId, GLES30.GL_LINK_STATUS, link, 0);
         if (link[0] <= 0) {
             Log.d("Load Program", "Linking Failed");
             return 0;
         }
-        GLES20.glDeleteShader(iVShader);
-        GLES20.glDeleteShader(iFShader);
+        GLES30.glDeleteShader(iVShader);
+        GLES30.glDeleteShader(iFShader);
         return iProgId;
     }
 
diff --git a/sample/build.gradle b/sample/build.gradle
index f64f4a42..14a496f9 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -26,6 +26,7 @@ android {
     lintOptions {
         abortOnError true
     }
+    buildToolsVersion '25.0.0'
 }
 repositories {
     jcenter()
