diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 4cba60d5..a42b03bf 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -50,7 +50,7 @@
 public class GPUImage {
     private final Context mContext;
     private final GPUImageRenderer mRenderer;
-    private GLSurfaceView mGlSurfaceView;
+    private GLSurfaceView mGLSurfaceView;
     private GLTextureView mGLTextureView;
     private GPUImageFilter mFilter;
     private Bitmap mCurrentBitmap;
@@ -91,13 +91,13 @@ private boolean supportsOpenGLES2(final Context context) {
      * @param view the GLSurfaceView
      */
     public void setGLSurfaceView(final GLSurfaceView view) {
-        mGlSurfaceView = view;
-        mGlSurfaceView.setEGLContextClientVersion(2);
-        mGlSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
-        mGlSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);
-        mGlSurfaceView.setRenderer(mRenderer);
-        mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
-        mGlSurfaceView.requestRender();
+        mGLSurfaceView = view;
+        mGLSurfaceView.setEGLContextClientVersion(2);
+        mGLSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
+        mGLSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);
+        mGLSurfaceView.setRenderer(mRenderer);
+        mGLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
+        mGLSurfaceView.requestRender();
     }
 
     /**
@@ -130,14 +130,62 @@ public void setBackgroundColor(float red, float green, float blue) {
      * Request the preview to be rendered again.
      */
     public void requestRender() {
-        if (mGlSurfaceView != null) {
-            mGlSurfaceView.requestRender();
+        if (mGLSurfaceView != null) {
+            mGLSurfaceView.requestRender();
         }
         if (mGLTextureView != null) {
             mGLTextureView.requestRender();
         }
     }
 
+    /**
+     * Pauses the GLSurfaceView or GLTextureView.
+     */
+    public void onPause() {
+        if (mGLSurfaceView != null) {
+            mGLSurfaceView.onPause();
+        }
+        if (mGLTextureView != null) {
+            mGLTextureView.onPause();
+        }
+    }
+
+    /**
+     * Resumes the GLSurfaceView or GLTextureView.
+     */
+    public void onResume() {
+        if (mGLSurfaceView != null) {
+            mGLSurfaceView.onResume();
+        }
+        if (mGLTextureView != null) {
+            mGLTextureView.onResume();
+        }
+    }
+
+    /**
+     * Set the rendering mode - RENDERMODE_CONTINUOUSLY.
+     */
+    public void setContinuouslyRenderMode() {
+        if (mGLSurfaceView != null) {
+            mGLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
+        }
+        if (mGLTextureView != null) {
+            mGLTextureView.setRenderMode(GLTextureView.RENDERMODE_CONTINUOUSLY);
+        }
+    }
+
+    /**
+     * Set the rendering mode - RENDERMODE_WHEN_DIRTY.
+     */
+    public void setWhenDirtyRenderMode() {
+        if (mGLSurfaceView != null) {
+            mGLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
+        }
+        if (mGLTextureView != null) {
+            mGLTextureView.setRenderMode(GLTextureView.RENDERMODE_WHEN_DIRTY);
+        }
+    }
+
     /**
      * Sets the up camera to be connected to GPUImage to get a filtered preview.
      *
@@ -157,12 +205,7 @@ public void setUpCamera(final Camera camera) {
      */
     public void setUpCamera(final Camera camera, final int degrees, final boolean flipHorizontal,
             final boolean flipVertical) {
-        if (mGlSurfaceView!= null) {
-            mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
-        }
-        if (mGLTextureView != null) {
-            mGLTextureView.setRenderMode(GLTextureView.RENDERMODE_CONTINUOUSLY);
-        }
+        setContinuouslyRenderMode();
 
         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
             setUpCameraGingerbread(camera);
@@ -303,7 +346,7 @@ public Bitmap getBitmapWithFilterApplied() {
      * @return the bitmap with filter applied
      */
     public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap) {
-        if (mGlSurfaceView != null || mGLTextureView != null) {
+        if (mGLSurfaceView != null || mGLTextureView != null) {
             mRenderer.deleteImage();
             mRenderer.runOnDraw(new Runnable() {
 
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
index ad734823..293bc6c1 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
@@ -51,9 +51,11 @@ public void onCreate(final Bundle savedInstanceState) {
 
         mGPUImageView = (GPUImageView) findViewById(R.id.gpuimage);
 
-        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-        photoPickerIntent.setType("image/*");
-        startActivityForResult(photoPickerIntent, REQUEST_PICK_IMAGE);
+        if (savedInstanceState == null) {
+            Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+            photoPickerIntent.setType("image/*");
+            startActivityForResult(photoPickerIntent, REQUEST_PICK_IMAGE);
+        }
     }
 
     @Override
