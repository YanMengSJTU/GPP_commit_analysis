diff --git a/build.gradle b/build.gradle
index 0bfd6f80..fddeb7bb 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.2'
+        classpath 'com.android.tools.build:gradle:2.3.3'
     }
 }
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 2a548b4a..37106171 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,3 @@
-#Thu Jun 15 18:20:40 IST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 5fb5e346..e7ccf96c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -78,8 +78,7 @@
     private float mBackgroundGreen = 0;
     private float mBackgroundBlue = 0;
 
-    private Camera mCamera;
-    private Size mCameraPreviewSize;
+    private Size mPreloadedPreviewSize;
 
     public GPUImageRenderer(final GPUImageFilter filter) {
         mFilter = filter;
@@ -151,25 +150,22 @@ private void runAll(Queue<Runnable> queue) {
 
     @Override
     public void onPreviewFrame(final byte[] data, final Camera camera) {
-        if(mCamera != camera){
-            mCamera = camera;
-            mCameraPreviewSize = camera.getParameters().getPreviewSize();
-        }
+        final Size previewSize = mPreloadedPreviewSize != null ? mPreloadedPreviewSize : camera.getParameters().getPreviewSize();
         if (mGLRgbBuffer == null) {
-            mGLRgbBuffer = IntBuffer.allocate(mCameraPreviewSize.width * mCameraPreviewSize.height);
+            mGLRgbBuffer = IntBuffer.allocate(previewSize.width * previewSize.height);
         }
         if (mRunOnDraw.isEmpty()) {
             runOnDraw(new Runnable() {
                 @Override
                 public void run() {
-                    GPUImageNativeLibrary.YUVtoRBGA(data, mCameraPreviewSize.width, mCameraPreviewSize.height,
+                    GPUImageNativeLibrary.YUVtoRBGA(data, previewSize.width, previewSize.height,
                             mGLRgbBuffer.array());
-                    mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, mCameraPreviewSize, mGLTextureId);
+                    mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, previewSize, mGLTextureId);
                     camera.addCallbackBuffer(data);
 
-                    if (mImageWidth != mCameraPreviewSize.width) {
-                        mImageWidth = mCameraPreviewSize.width;
-                        mImageHeight = mCameraPreviewSize.height;
+                    if (mImageWidth != previewSize.width) {
+                        mImageWidth = previewSize.width;
+                        mImageHeight = previewSize.height;
                         adjustImageScaling();
                     }
                 }
@@ -177,6 +173,15 @@ public void run() {
         }
     }
 
+    /**
+     * Calling this method is not necessary, but due to the high cost of calling `camera.getParameters().getPreviewSize()`
+     * you can call it with the previewSize you will provide to improve performance.
+     * @param previewSize
+     */
+    public void setPreviewSize(Size previewSize){
+        this.mPreloadedPreviewSize = previewSize;
+    }
+
     public void setUpSurfaceTexture(final Camera camera) {
         runOnDraw(new Runnable() {
             @Override
