diff --git a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
index 59760dc2..95e10edc 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImage.java
@@ -43,7 +43,6 @@
 import java.net.URL;
 import java.util.List;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.util.PixelBuffer;
 import jp.co.cyberagent.android.gpuimage.util.Rotation;
 
@@ -51,12 +50,13 @@
  * The main accessor for GPUImage functionality. This class helps to do common
  * tasks through a simple interface.
  */
+// TODO: 2017/9/12 主要控制类
 public class GPUImage {
     private final Context mContext;
-    private final GPUImageRenderer mRenderer;
-    private GLSurfaceView mGlSurfaceView;
-    private GPUImageFilter mFilter;
-    private Bitmap mCurrentBitmap;
+    private final GPUImageRenderer mRenderer;// TODO: 2017/9/12 渲染插件
+    private GLSurfaceView mGlSurfaceView;// TODO: 2017/9/12 渲染view
+    private GPUImageFilter mFilter;// TODO: 2017/9/12 滤镜
+    private Bitmap mCurrentBitmap;// TODO: 2017/9/12 基于位图操作？
     private ScaleType mScaleType = ScaleType.CENTER_CROP;
 
     /**
@@ -71,7 +71,7 @@ public GPUImage(final Context context) {
 
         mContext = context;
         mFilter = new GPUImageFilter();
-        mRenderer = new GPUImageRenderer(mFilter);
+        mRenderer = new GPUImageRenderer(mFilter);// TODO: 2017/9/12 渲染器持有滤镜
     }
 
     /**
@@ -93,6 +93,7 @@ private boolean supportsOpenGLES2(final Context context) {
      *
      * @param view the GLSurfaceView
      */
+    // TODO: 2017/9/12 配置渲染view
     public void setGLSurfaceView(final GLSurfaceView view) {
         mGlSurfaceView = view;
         mGlSurfaceView.setEGLContextClientVersion(2);
@@ -111,7 +112,7 @@ public void setGLSurfaceView(final GLSurfaceView view) {
      * @param blue red color value
      */
     public void setBackgroundColor(float red, float green, float blue) {
-        mRenderer.setBackgroundColor(red, green, blue);
+        mRenderer.setBackgroundColor(red, green, blue);// TODO: 2017/9/12 传递清屏颜色
     }
 
     /**
@@ -140,13 +141,14 @@ public void setUpCamera(final Camera camera) {
      * @param flipHorizontal if the image should be flipped horizontally
      * @param flipVertical if the image should be flipped vertically
      */
+    // TODO: 2017/9/12 设置相机
     public void setUpCamera(final Camera camera, final int degrees, final boolean flipHorizontal,
             final boolean flipVertical) {
-        mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
+        mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);// TODO: 2017/9/12 重置渲染模式为不间断
         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
             setUpCameraGingerbread(camera);
         } else {
-            camera.setPreviewCallback(mRenderer);
+            camera.setPreviewCallback(mRenderer);// TODO: 2017/9/12 机智的合并相机回调和渲染类
             camera.startPreview();
         }
         Rotation rotation = Rotation.NORMAL;
@@ -166,7 +168,7 @@ public void setUpCamera(final Camera camera, final int degrees, final boolean fl
 
     @TargetApi(11)
     private void setUpCameraGingerbread(final Camera camera) {
-        mRenderer.setUpSurfaceTexture(camera);
+        mRenderer.setUpSurfaceTexture(camera);// TODO: 2017/9/12 机智的合并相机回调和渲染类
     }
 
     /**
@@ -177,7 +179,7 @@ private void setUpCameraGingerbread(final Camera camera) {
      */
     public void setFilter(final GPUImageFilter filter) {
         mFilter = filter;
-        mRenderer.setFilter(mFilter);
+        mRenderer.setFilter(mFilter);// TODO: 2017/9/12 传递滤镜给渲染器
         requestRender();
     }
 
@@ -281,7 +283,7 @@ public Bitmap getBitmapWithFilterApplied() {
      * @param bitmap the bitmap on which the current filter should be applied
      * @return the bitmap with filter applied
      */
-    public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap) {
+    public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap) {// TODO: 2017/9/12 不懂
         if (mGlSurfaceView != null) {
             mRenderer.deleteImage();
             mRenderer.runOnDraw(new Runnable() {
@@ -304,6 +306,7 @@ public void run() {
             }
         }
 
+        // TODO: 2017/9/12 好像很牛逼的样子，多滤镜关键方法？
         GPUImageRenderer renderer = new GPUImageRenderer(mFilter);
         renderer.setRotation(Rotation.NORMAL,
                 mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
@@ -336,6 +339,7 @@ public void run() {
      * @param filters the filters which will be applied on the bitmap
      * @param listener the listener on which the results will be notified
      */
+    // TODO: 2017/9/12 多滤镜的相关处理？
     public static void getBitmapForMultipleFilters(final Bitmap bitmap,
             final List<GPUImageFilter> filters, final ResponseListener<Bitmap> listener) {
         if (filters.isEmpty()) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilter.java
similarity index 85%
rename from library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilter.java
index 82084cd4..9769c6a3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage.filter.base;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.content.Context;
 import android.content.res.AssetManager;
@@ -27,6 +27,7 @@
 
 import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
 
+// TODO: 2017/9/12 滤镜基类
 public class GPUImageFilter {
     public static final String NO_FILTER_VERTEX_SHADER = "" +
             "attribute vec4 position;\n" +
@@ -49,16 +50,16 @@
             "     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n" +
             "}";
 
-    private final LinkedList<Runnable> mRunOnDraw;
-    private final String mVertexShader;
+    private final LinkedList<Runnable> mRunOnDraw;// TODO: 2017/9/12 全家桶套路
+    private final String mVertexShader;// TODO: 2017/9/12 着色器
     private final String mFragmentShader;
-    protected int mGLProgId;
-    protected int mGLAttribPosition;
-    protected int mGLUniformTexture;
-    protected int mGLAttribTextureCoordinate;
+    protected int mGLProgId;// TODO: 2017/9/12 管线句柄
+    protected int mGLAttribPosition;// TODO: 2017/9/12 顶点变量句柄
+    protected int mGLUniformTexture;// TODO: 2017/9/12 纹理变量句柄
+    protected int mGLAttribTextureCoordinate;// TODO: 2017/9/12 纹理坐标变量句柄
     protected int mOutputWidth;
     protected int mOutputHeight;
-    private boolean mIsInitialized;
+    private boolean mIsInitialized;// TODO: 2017/9/12 可绘制开关
 
     public GPUImageFilter() {
         this(NO_FILTER_VERTEX_SHADER, NO_FILTER_FRAGMENT_SHADER);
@@ -70,13 +71,14 @@ public GPUImageFilter(final String vertexShader, final String fragmentShader) {
         mFragmentShader = fragmentShader;
     }
 
+    // TODO: 2017/9/12 外部调用方法，入口
     public final void init() {
         onInit();
-        mIsInitialized = true;
+        mIsInitialized = true;// TODO: 2017/9/12 打开开关
         onInitialized();
     }
 
-    public void onInit() {
+    public void onInit() {// TODO: 2017/9/12 初始化主体方法，GLSL配置、传参，子类定制化配置
         mGLProgId = OpenGlUtils.loadProgram(mVertexShader, mFragmentShader);
         mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, "position");
         mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, "inputImageTexture");
@@ -101,22 +103,24 @@ public void onOutputSizeChanged(final int width, final int height) {
         mOutputHeight = height;
     }
 
+    // TODO: 2017/9/12 OpenGL绘制，传入纹理句柄、顶点buf、纹理顶点buf
     public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                        final FloatBuffer textureBuffer) {
-        GLES20.glUseProgram(mGLProgId);
-        runPendingOnDrawTasks();
+        GLES20.glUseProgram(mGLProgId);// TODO: 2017/9/12 使用通道
+        runPendingOnDrawTasks();// TODO: 2017/9/12 先处理全家桶
         if (!mIsInitialized) {
             return;
         }
-
+        // TODO: 2017/9/12 处理顶点
         cubeBuffer.position(0);
         GLES20.glVertexAttribPointer(mGLAttribPosition, 2, GLES20.GL_FLOAT, false, 0, cubeBuffer);
         GLES20.glEnableVertexAttribArray(mGLAttribPosition);
+        // TODO: 2017/9/12 处理纹理顶点
         textureBuffer.position(0);
-        GLES20.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, GLES20.GL_FLOAT, false, 0,
-                textureBuffer);
+        GLES20.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, GLES20.GL_FLOAT, false, 0,textureBuffer);
         GLES20.glEnableVertexAttribArray(mGLAttribTextureCoordinate);
         if (textureId != OpenGlUtils.NO_TEXTURE) {
+            // TODO: 2017/9/12 应用纹理
             GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
             GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);
             GLES20.glUniform1i(mGLUniformTexture, 0);
@@ -130,6 +134,7 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
 
     protected void onDrawArraysPre() {}
 
+    // TODO: 2017/9/12 绘制前处理全家桶
     protected void runPendingOnDrawTasks() {
         while (!mRunOnDraw.isEmpty()) {
             mRunOnDraw.removeFirst().run();
@@ -164,6 +169,8 @@ public int getUniformTexture() {
         return mGLUniformTexture;
     }
 
+    // TODO: 2017/9/12 一系列传递属性的方法
+
     protected void setInteger(final int location, final int intValue) {
         runOnDraw(new Runnable() {
             @Override
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroup.java
similarity index 95%
rename from library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilterGroup.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroup.java
index ffd1605d..b8a6de3c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageFilterGroup.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageFilterGroup.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage.filter.base;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.annotation.SuppressLint;
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.util.Rotation;
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 import java.util.ArrayList;
 import java.util.List;
 
+import jp.co.cyberagent.android.gpuimage.util.Rotation;
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+
 import static jp.co.cyberagent.android.gpuimage.core.GPUImageRenderer.CUBE;
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
@@ -93,7 +93,7 @@ public void addFilter(GPUImageFilter aFilter) {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onInit()
+     * @see jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onInit()
      */
     @Override
     public void onInit() {
@@ -105,7 +105,7 @@ public void onInit() {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onDestroy()
+     * @see jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onDestroy()
      */
     @Override
     public void onDestroy() {
@@ -130,7 +130,7 @@ private void destroyFramebuffers() {
     /*
      * (non-Javadoc)
      * @see
-     * jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onOutputSizeChanged(int,
+     * jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onOutputSizeChanged(int,
      * int)
      */
     @Override
@@ -177,7 +177,7 @@ public void onOutputSizeChanged(final int width, final int height) {
 
     /*
      * (non-Javadoc)
-     * @see jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter#onDraw(int,
+     * @see jp.co.cyberagent.android.gpuimage.core.GPUImageFilter#onDraw(int,
      * java.nio.FloatBuffer, java.nio.FloatBuffer)
      */
     @SuppressLint("WrongCall")    
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
index 44b682be..6a0bef54 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageRenderer.java
@@ -37,7 +37,6 @@
 import javax.microedition.khronos.egl.EGLConfig;
 import javax.microedition.khronos.opengles.GL10;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageNativeLibrary;
 import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
 import jp.co.cyberagent.android.gpuimage.util.Rotation;
@@ -46,6 +45,7 @@
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
+// TODO: 2017/9/12 渲染器，兼职相机预览回调
 public class GPUImageRenderer implements Renderer, PreviewCallback {
     public static final int NO_IMAGE = -1;
     public static final float CUBE[] = {
@@ -55,15 +55,15 @@
             1.0f, 1.0f,
     };
 
-    private GPUImageFilter mFilter;
+    private GPUImageFilter mFilter;// TODO: 2017/9/12 滤镜 
 
-    public final Object mSurfaceChangedWaiter = new Object();
+    public final Object mSurfaceChangedWaiter = new Object();// TODO: 2017/9/12 加锁的玩意儿？？？
 
-    private int mGLTextureId = NO_IMAGE;
-    private SurfaceTexture mSurfaceTexture = null;
-    private final FloatBuffer mGLCubeBuffer;
-    private final FloatBuffer mGLTextureBuffer;
-    private IntBuffer mGLRgbBuffer;
+    private int mGLTextureId = NO_IMAGE;// TODO: 2017/9/12 纹理句柄 
+    private SurfaceTexture mSurfaceTexture = null; // TODO: 2017/9/12 读取相机帧用的，纹理器？
+    private final FloatBuffer mGLCubeBuffer;// TODO: 2017/9/12 顶点buf
+    private final FloatBuffer mGLTextureBuffer;// TODO: 2017/9/12 纹理buf
+    private IntBuffer mGLRgbBuffer;// TODO: 2017/9/12 图像buf
 
     private int mOutputWidth;
     private int mOutputHeight;
@@ -71,10 +71,10 @@
     private int mImageHeight;
     private int mAddedPadding;
 
-    private final Queue<Runnable> mRunOnDraw;
-    private final Queue<Runnable> mRunOnDrawEnd;
-    private Rotation mRotation;
-    private boolean mFlipHorizontal;
+    private final Queue<Runnable> mRunOnDraw;// TODO: 2017/9/12 绘制队列
+    private final Queue<Runnable> mRunOnDrawEnd;// TODO: 2017/9/12 绘制后任务？
+    private Rotation mRotation;// TODO: 2017/9/12 旋转用
+    private boolean mFlipHorizontal;// TODO: 2017/9/12 翻转
     private boolean mFlipVertical;
     private GPUImage.ScaleType mScaleType = GPUImage.ScaleType.CENTER_CROP;
 
@@ -87,6 +87,7 @@ public GPUImageRenderer(final GPUImageFilter filter) {
         mRunOnDraw = new LinkedList<Runnable>();
         mRunOnDrawEnd = new LinkedList<Runnable>();
 
+        // TODO: 2017/9/12 初始化顶点、纹理buf
         mGLCubeBuffer = ByteBuffer.allocateDirect(CUBE.length * 4)
                 .order(ByteOrder.nativeOrder())
                 .asFloatBuffer();
@@ -95,12 +96,12 @@ public GPUImageRenderer(final GPUImageFilter filter) {
         mGLTextureBuffer = ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4)
                 .order(ByteOrder.nativeOrder())
                 .asFloatBuffer();
-        setRotation(Rotation.NORMAL, false, false);
+        setRotation(Rotation.NORMAL, false, false);// TODO: 2017/9/12 操作略复杂
     }
 
     @Override
     public void onSurfaceCreated(final GL10 unused, final EGLConfig config) {
-        GLES20.glClearColor(mBackgroundRed, mBackgroundGreen, mBackgroundBlue, 1);
+        GLES20.glClearColor(mBackgroundRed, mBackgroundGreen, mBackgroundBlue, 1);// TODO: 2017/9/12 清屏为指定rgb
         GLES20.glDisable(GLES20.GL_DEPTH_TEST);
         mFilter.init();
     }
@@ -109,10 +110,10 @@ public void onSurfaceCreated(final GL10 unused, final EGLConfig config) {
     public void onSurfaceChanged(final GL10 gl, final int width, final int height) {
         mOutputWidth = width;
         mOutputHeight = height;
-        GLES20.glViewport(0, 0, width, height);
-        GLES20.glUseProgram(mFilter.getProgram());
+        GLES20.glViewport(0, 0, width, height);// TODO: 2017/9/12 重置视点
+        GLES20.glUseProgram(mFilter.getProgram());// TODO: 2017/9/12 应用滤镜提供的管线
         mFilter.onOutputSizeChanged(width, height);
-        adjustImageScaling();
+        adjustImageScaling();// TODO: 2017/9/12 图像调整
         synchronized (mSurfaceChangedWaiter) {
             mSurfaceChangedWaiter.notifyAll();
         }
@@ -120,30 +121,18 @@ public void onSurfaceChanged(final GL10 gl, final int width, final int height) {
 
     @Override
     public void onDrawFrame(final GL10 gl) {
-        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
-        runAll(mRunOnDraw);
-        mFilter.onDraw(mGLTextureId, mGLCubeBuffer, mGLTextureBuffer);
-        runAll(mRunOnDrawEnd);
+        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);// TODO: 2017/9/12 用缓冲区清屏
+        runAll(mRunOnDraw);// TODO: 2017/9/12 运行绘制队列
+        mFilter.onDraw(mGLTextureId, mGLCubeBuffer, mGLTextureBuffer);// TODO: 2017/9/12 通知滤镜绘制事件
+        runAll(mRunOnDrawEnd);// TODO: 2017/9/12 运行绘制后事件
         if (mSurfaceTexture != null) {
-            mSurfaceTexture.updateTexImage();
+            mSurfaceTexture.updateTexImage();// TODO: 2017/9/12  通知纹理器更新
         }
     }
 
-    /**
-     * Sets the background color
-     *
-     * @param red red color value
-     * @param green green color value
-     * @param blue red color value
-     */
-    public void setBackgroundColor(float red, float green, float blue) {
-        mBackgroundRed = red;
-        mBackgroundGreen = green;
-        mBackgroundBlue = blue;
-    }
 
     private void runAll(Queue<Runnable> queue) {
-        synchronized (queue) {
+        synchronized (queue) {// TODO: 2017/9/12 排队宠幸
             while (!queue.isEmpty()) {
                 queue.poll().run();
             }
@@ -151,40 +140,47 @@ private void runAll(Queue<Runnable> queue) {
     }
 
     @Override
+    // TODO: 2017/9/12 相机预览回调，渲染任务
     public void onPreviewFrame(final byte[] data, final Camera camera) {
         final Size previewSize = camera.getParameters().getPreviewSize();
+        // TODO: 2017/9/12 根据相机大小创建图像buf
         if (mGLRgbBuffer == null) {
             mGLRgbBuffer = IntBuffer.allocate(previewSize.width * previewSize.height);
         }
         if (mRunOnDraw.isEmpty()) {
+            // TODO: 2017/9/12 绘制队列放空后（why?）添加绘制任务
+            // TODO: 2017/9/12 why:保证渲染前的配置任务执行完？
             runOnDraw(new Runnable() {
                 @Override
                 public void run() {
                     GPUImageNativeLibrary.YUVtoRBGA(data, previewSize.width, previewSize.height,
-                            mGLRgbBuffer.array());
+                            mGLRgbBuffer.array());// TODO: 2017/9/12 转码一波
+                    // TODO: 2017/9/12 图像buf填装到OpenGL
                     mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, previewSize, mGLTextureId);
-                    camera.addCallbackBuffer(data);
+                    camera.addCallbackBuffer(data);// TODO: 2017/9/12 还给相机？
 
                     if (mImageWidth != previewSize.width) {
                         mImageWidth = previewSize.width;
                         mImageHeight = previewSize.height;
-                        adjustImageScaling();
+                        adjustImageScaling();// TODO: 2017/9/12 图像调整
                     }
                 }
             });
         }
     }
 
+    // TODO: 2017/9/12 为相机配置纹理器（可能是第一个绘制任务）
     public void setUpSurfaceTexture(final Camera camera) {
+        // TODO: 2017/9/12 直接加入绘制队列
         runOnDraw(new Runnable() {
             @Override
             public void run() {
                 int[] textures = new int[1];
-                GLES20.glGenTextures(1, textures, 0);
-                mSurfaceTexture = new SurfaceTexture(textures[0]);
+                GLES20.glGenTextures(1, textures, 0);// TODO: 2017/9/12 开一个纹理
+                mSurfaceTexture = new SurfaceTexture(textures[0]);// TODO: 2017/9/12  纹理绑定到纹理器
                 try {
-                    camera.setPreviewTexture(mSurfaceTexture);
-                    camera.setPreviewCallback(GPUImageRenderer.this);
+                    camera.setPreviewTexture(mSurfaceTexture);// TODO: 2017/9/12 纹理器给相机
+                    camera.setPreviewCallback(GPUImageRenderer.this);// TODO: 2017/9/12 配置相机预览回调
                     camera.startPreview();
                 } catch (IOException e) {
                     e.printStackTrace();
@@ -193,26 +189,26 @@ public void run() {
         });
     }
 
+    // TODO: 2017/9/12 更改滤镜，配置型绘制任务
     public void setFilter(final GPUImageFilter filter) {
         runOnDraw(new Runnable() {
-
             @Override
             public void run() {
                 final GPUImageFilter oldFilter = mFilter;
                 mFilter = filter;
                 if (oldFilter != null) {
-                    oldFilter.destroy();
+                    oldFilter.destroy();// TODO: 2017/9/12 释放一波
                 }
                 mFilter.init();
-                GLES20.glUseProgram(mFilter.getProgram());
+                GLES20.glUseProgram(mFilter.getProgram());// TODO: 2017/9/12 应用新的管线
                 mFilter.onOutputSizeChanged(mOutputWidth, mOutputHeight);
             }
         });
     }
 
+    // TODO: 2017/9/12 删除纹理，用途？已加入绘制全家桶
     public void deleteImage() {
         runOnDraw(new Runnable() {
-
             @Override
             public void run() {
                 GLES20.glDeleteTextures(1, new int[]{
@@ -227,51 +223,42 @@ public void setImageBitmap(final Bitmap bitmap) {
         setImageBitmap(bitmap, true);
     }
 
+    // TODO: 2017/9/12 设置图片，加入绘制全家桶
     public void setImageBitmap(final Bitmap bitmap, final boolean recycle) {
         if (bitmap == null) {
             return;
         }
 
         runOnDraw(new Runnable() {
-
             @Override
             public void run() {
                 Bitmap resizedBitmap = null;
                 if (bitmap.getWidth() % 2 == 1) {
+                    // TODO: 2017/9/12 就为了设置width为偶数？
                     resizedBitmap = Bitmap.createBitmap(bitmap.getWidth() + 1, bitmap.getHeight(),
                             Bitmap.Config.ARGB_8888);
                     Canvas can = new Canvas(resizedBitmap);
-                    can.drawARGB(0x00, 0x00, 0x00, 0x00);
+                    can.drawARGB(0x00, 0x00, 0x00, 0x00);// TODO: 2017/9/12 先画一个空的干嘛？
                     can.drawBitmap(bitmap, 0, 0, null);
                     mAddedPadding = 1;
                 } else {
                     mAddedPadding = 0;
                 }
 
-                mGLTextureId = OpenGlUtils.loadTexture(
-                        resizedBitmap != null ? resizedBitmap : bitmap, mGLTextureId, recycle);
+                // TODO: 2017/9/12 图片链接到纹理
+                mGLTextureId = OpenGlUtils.loadTexture(resizedBitmap != null ? resizedBitmap : bitmap, mGLTextureId, recycle);
                 if (resizedBitmap != null) {
-                    resizedBitmap.recycle();
+                    resizedBitmap.recycle();// TODO: 2017/9/12 图片给到OpenGL后可释放
                 }
                 mImageWidth = bitmap.getWidth();
                 mImageHeight = bitmap.getHeight();
-                adjustImageScaling();
+                adjustImageScaling();// TODO: 2017/9/12 调整图像
             }
         });
     }
 
-    public void setScaleType(GPUImage.ScaleType scaleType) {
-        mScaleType = scaleType;
-    }
-
-    protected int getFrameWidth() {
-        return mOutputWidth;
-    }
-
-    protected int getFrameHeight() {
-        return mOutputHeight;
-    }
 
+    // TODO: 2017/9/12 调整图像，实际调整顶点和纹理坐标
     private void adjustImageScaling() {
         float outputWidth = mOutputWidth;
         float outputHeight = mOutputHeight;
@@ -294,6 +281,7 @@ private void adjustImageScaling() {
         if (mScaleType == GPUImage.ScaleType.CENTER_CROP) {
             float distHorizontal = (1 - 1 / ratioWidth) / 2;
             float distVertical = (1 - 1 / ratioHeight) / 2;
+            // TODO: 2017/9/12 重新计算纹理坐标
             textureCords = new float[]{
                     addDistance(textureCords[0], distHorizontal), addDistance(textureCords[1], distVertical),
                     addDistance(textureCords[2], distHorizontal), addDistance(textureCords[3], distVertical),
@@ -309,6 +297,7 @@ private void adjustImageScaling() {
             };
         }
 
+        // TODO: 2017/9/12 重置坐标buf
         mGLCubeBuffer.clear();
         mGLCubeBuffer.put(cube).position(0);
         mGLTextureBuffer.clear();
@@ -319,8 +308,7 @@ private float addDistance(float coordinate, float distance) {
         return coordinate == 0.0f ? distance : 1 - distance;
     }
 
-    public void setRotationCamera(final Rotation rotation, final boolean flipHorizontal,
-            final boolean flipVertical) {
+    public void setRotationCamera(final Rotation rotation, final boolean flipHorizontal, final boolean flipVertical) {
         setRotation(rotation, flipVertical, flipHorizontal);
     }
 
@@ -329,8 +317,7 @@ public void setRotation(final Rotation rotation) {
         adjustImageScaling();
     }
 
-    public void setRotation(final Rotation rotation,
-                            final boolean flipHorizontal, final boolean flipVertical) {
+    public void setRotation(final Rotation rotation, final boolean flipHorizontal, final boolean flipVertical) {
         mFlipHorizontal = flipHorizontal;
         mFlipVertical = flipVertical;
         setRotation(rotation);
@@ -359,4 +346,30 @@ protected void runOnDrawEnd(final Runnable runnable) {
             mRunOnDrawEnd.add(runnable);
         }
     }
+
+    /**
+     * Sets the background color
+     *
+     * @param red   red color value
+     * @param green green color value
+     * @param blue  red color value
+     */
+    public void setBackgroundColor(float red, float green, float blue) {
+        mBackgroundRed = red;
+        mBackgroundGreen = green;
+        mBackgroundBlue = blue;
+    }
+
+
+    public void setScaleType(GPUImage.ScaleType scaleType) {
+        mScaleType = scaleType;
+    }
+
+    protected int getFrameWidth() {
+        return mOutputWidth;
+    }
+
+    protected int getFrameHeight() {
+        return mOutputHeight;
+    }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageTwoPassTextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassTextureSamplingFilter.java
similarity index 97%
rename from library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageTwoPassTextureSamplingFilter.java
rename to library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassTextureSamplingFilter.java
index 00888b8a..c25c905a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/base/GPUImageTwoPassTextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageTwoPassTextureSamplingFilter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package jp.co.cyberagent.android.gpuimage.filter.base;
+package jp.co.cyberagent.android.gpuimage.core;
 
 import android.opengl.GLES20;
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
index e086c97c..6c4fba5f 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/core/GPUImageView.java
@@ -25,6 +25,7 @@
 import android.opengl.GLSurfaceView;
 import android.os.*;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.Gravity;
 import android.view.ViewTreeObserver;
 import android.widget.FrameLayout;
@@ -36,12 +37,13 @@
 import java.nio.IntBuffer;
 import java.util.concurrent.Semaphore;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.util.Rotation;
 
 // TODO: 2017/9/12 包装类？
 public class GPUImageView extends FrameLayout {
 
+    private static final String TAG = "GPUImageView";
+
     private GLSurfaceView mGLSurfaceView;// TODO: 2017/9/12 渲染插件
     private GPUImage mGPUImage;// TODO: 2017/9/12 主插件
     private GPUImageFilter mFilter;// TODO: 2017/9/12 滤镜插件
@@ -59,7 +61,7 @@ public GPUImageView(Context context, AttributeSet attrs) {
     }
 
     private void init(Context context, AttributeSet attrs) {
-        mGLSurfaceView = new GPUImageGLSurfaceView(context, attrs);
+        mGLSurfaceView = new GPUImageGLSurfaceView(context, attrs);// TODO: 2017/9/12 渲染View与自己相同的属性、布局
         addView(mGLSurfaceView);
         mGPUImage = new GPUImage(getContext());
         mGPUImage.setGLSurfaceView(mGLSurfaceView);
@@ -106,7 +108,7 @@ public GPUImage getGPUImage() {
      * @param blue red color value
      */
     public void setBackgroundColor(float red, float green, float blue) {
-        mGPUImage.setBackgroundColor(red, green, blue);
+        mGPUImage.setBackgroundColor(red, green, blue);// TODO: 2017/9/12 传递清屏颜色
     }
 
     // TODO Should be an xml attribute. But then GPUImage can not be distributed as .jar anymore.
@@ -142,7 +144,7 @@ public void setRotation(Rotation rotation) {
      */
     public void setFilter(GPUImageFilter filter) {
         mFilter = filter;
-        mGPUImage.setFilter(filter);
+        mGPUImage.setFilter(filter);// TODO: 2017/9/12 传递滤镜
         requestRender();
     }
 
@@ -162,7 +164,7 @@ public GPUImageFilter getFilter() {
      */
     public void setImage(final Bitmap bitmap) {
         mGPUImage.setImage(bitmap);
-    }
+    }// TODO: 2017/9/12 传递位图
 
     /**
      * Sets the image on which the filter should be applied from a Uri.
@@ -184,7 +186,7 @@ public void setImage(final File file) {
 
     public void requestRender() {
         mGLSurfaceView.requestRender();
-    }
+    }// TODO: 2017/9/12 通知渲染
 
     /**
      * Save current image with applied filter to Pictures. It will be stored on
@@ -199,7 +201,7 @@ public void requestRender() {
      */
     public void saveToPictures(final String folderName, final String fileName,
                                final OnPictureSavedListener listener) {
-        new SaveTask(folderName, fileName, listener).execute();
+        new SaveTask(folderName, fileName, listener).execute(); // TODO: 2017/9/12 保存到图片
     }
 
     /**
@@ -229,6 +231,7 @@ public void saveToPictures(final String folderName, final String fileName,
      * @return Bitmap of picture with given size
      * @throws InterruptedException
      */
+    // TODO: 2017/9/12 保存图片的时候使用到，读取缓存区帧对象
     public Bitmap capture(final int width, final int height) throws InterruptedException {
         // This method needs to run on a background thread because it will take a longer time
         if (Looper.myLooper() == Looper.getMainLooper()) {
@@ -239,7 +242,7 @@ public Bitmap capture(final int width, final int height) throws InterruptedExcep
 
         final Semaphore waiter = new Semaphore(0);
 
-        // Layout with new size
+        // Layout with new size //
         getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
             @Override
             public void onGlobalLayout() {
@@ -269,9 +272,9 @@ public void run() {
                 waiter.release();
             }
         });
-        requestRender();
+        requestRender();// TODO: 2017/9/12 一番操作后通知渲染
         waiter.acquire();
-        Bitmap bitmap = capture();
+        Bitmap bitmap = capture();// TODO: 2017/9/12 正式缩放
 
 
         mForceSize = null;
@@ -300,22 +303,25 @@ public void run() {
      * @throws InterruptedException
      */
     public Bitmap capture() throws InterruptedException {
-        final Semaphore waiter = new Semaphore(0);
+        final Semaphore waiter = new Semaphore(0);// TODO: 2017/9/12 毛玩意儿？
 
+        // TODO: 2017/9/12 获取渲染View的大小
         final int width = mGLSurfaceView.getMeasuredWidth();
         final int height = mGLSurfaceView.getMeasuredHeight();
 
-        // Take picture on OpenGL thread
+        // Take picture on OpenGL thread // TODO: 2017/9/12 依赖OpenGL 实施缩放
         final int[] pixelMirroredArray = new int[width * height];
         mGPUImage.runOnGLThread(new Runnable() {
             @Override
             public void run() {
                 final IntBuffer pixelBuffer = IntBuffer.allocate(width * height);
+                // TODO: 2017/9/12 读取缓冲区数据
                 GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuffer);
                 int[] pixelArray = pixelBuffer.array();
+                Log.d(TAG, "run: pixelArray = " + pixelArray);
 
                 // Convert upside down mirror-reversed image to right-side up normal image.
-                for (int i = 0; i < height; i++) {
+                for (int i = 0; i < height; i++) {// TODO: 2017/9/12 还原镜像后的图像
                     for (int j = 0; j < width; j++) {
                         pixelMirroredArray[(height - i - 1) * width + j] = pixelArray[i * width + j];
                     }
@@ -327,79 +333,12 @@ public void run() {
         waiter.acquire();
 
         Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
-        bitmap.copyPixelsFromBuffer(IntBuffer.wrap(pixelMirroredArray));
+        bitmap.copyPixelsFromBuffer(IntBuffer.wrap(pixelMirroredArray));// TODO: 2017/9/12 保存图像
         return bitmap;
     }
 
-    /**
-     * Pauses the GLSurfaceView.
-     */
-    public void onPause() {
-        mGLSurfaceView.onPause();
-    }
-
-    /**
-     * Resumes the GLSurfaceView.
-     */
-    public void onResume() {
-        mGLSurfaceView.onResume();
-    }
-
-    public static class Size {
-        int width;
-        int height;
-
-        public Size(int width, int height) {
-            this.width = width;
-            this.height = height;
-        }
-    }
-
-    private class GPUImageGLSurfaceView extends GLSurfaceView {
-        public GPUImageGLSurfaceView(Context context) {
-            super(context);
-        }
-
-        public GPUImageGLSurfaceView(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            if (mForceSize != null) {
-                super.onMeasure(MeasureSpec.makeMeasureSpec(mForceSize.width, MeasureSpec.EXACTLY),
-                        MeasureSpec.makeMeasureSpec(mForceSize.height, MeasureSpec.EXACTLY));
-            } else {
-                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-            }
-        }
-    }
-
-    private class LoadingView extends FrameLayout {
-        public LoadingView(Context context) {
-            super(context);
-            init();
-        }
-
-        public LoadingView(Context context, AttributeSet attrs) {
-            super(context, attrs);
-            init();
-        }
-
-        public LoadingView(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-            init();
-        }
-
-        private void init() {
-            ProgressBar view = new ProgressBar(getContext());
-            view.setLayoutParams(
-                    new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.CENTER));
-            addView(view);
-            setBackgroundColor(Color.BLACK);
-        }
-    }
 
+    // TODO: 2017/9/12 保存图片异步类
     private class SaveTask extends AsyncTask<Void, Void, Void> {
         private final String mFolderName;
         private final String mFileName;
@@ -468,4 +407,73 @@ public void run() {
     public interface OnPictureSavedListener {
         void onPictureSaved(Uri uri);
     }
+
+    /**
+     * Pauses the GLSurfaceView.
+     */
+    public void onPause() {
+        mGLSurfaceView.onPause();
+    }
+
+    /**
+     * Resumes the GLSurfaceView.
+     */
+    public void onResume() {
+        mGLSurfaceView.onResume();
+    }
+
+    public static class Size {
+        int width;
+        int height;
+
+        public Size(int width, int height) {
+            this.width = width;
+            this.height = height;
+        }
+    }
+
+    private class GPUImageGLSurfaceView extends GLSurfaceView {
+        public GPUImageGLSurfaceView(Context context) {
+            super(context);
+        }
+
+        public GPUImageGLSurfaceView(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            if (mForceSize != null) {
+                super.onMeasure(MeasureSpec.makeMeasureSpec(mForceSize.width, MeasureSpec.EXACTLY),
+                        MeasureSpec.makeMeasureSpec(mForceSize.height, MeasureSpec.EXACTLY));
+            } else {
+                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            }
+        }
+    }
+
+    private class LoadingView extends FrameLayout {
+        public LoadingView(Context context) {
+            super(context);
+            init();
+        }
+
+        public LoadingView(Context context, AttributeSet attrs) {
+            super(context, attrs);
+            init();
+        }
+
+        public LoadingView(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+            init();
+        }
+
+        private void init() {
+            ProgressBar view = new ProgressBar(getContext());
+            view.setLayoutParams(
+                    new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.CENTER));
+            addView(view);
+            setBackgroundColor(Color.BLACK);
+        }
+    }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java
index 521937f8..ca544c83 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImage3x3TextureSamplingFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImage3x3TextureSamplingFilter extends GPUImageFilter {
     public static final String THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java
index 4e30278a..05850bb8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBilateralFilter.java
@@ -8,7 +8,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 
 public class GPUImageBilateralFilter extends GPUImageFilter {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java
index 83dc4a29..5db6804e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBoxBlurFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * A hardware-accelerated 9-hit box blur of an image
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java
index a20fed35..ca0ddbc8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBrightnessFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * brightness value ranges from -1.0 to 1.0, with 0.0 as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java
index d5ac5d36..cb1f302c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageBulgeDistortionFilter.java
@@ -19,7 +19,7 @@
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageBulgeDistortionFilter extends GPUImageFilter {
     public static final String BULGE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java
index b9fdd193..beec6a64 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCGAColorspaceFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageCGAColorspaceFilter extends GPUImageFilter {
     public static final String CGACOLORSPACE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java
index 641ad94c..ae78b437 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorBalanceFilter.java
@@ -2,7 +2,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Created by edward_chiang on 13/10/16.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java
index 14aee00e..0806d571 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorInvertFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Invert all the colors in the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java
index 8ebebc38..ca9dd48e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageColorMatrixFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Applies a ColorMatrix to the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java
index 8567d6f9..cfd5f4b8 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageContrastFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Changes the contrast of the image.<br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java
index 8bb421c0..f97967bb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageCrosshatchFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * crossHatchSpacing: The fractional width of the image to use as the spacing for the crosshatch. The default is 0.03.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java
index 67813432..1190f995 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageDilationFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * For each pixel, this sets it to the maximum value of the red channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java
index 6716ece6..14eb40aa 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageExposureFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * exposure: The adjusted exposure (-10.0 - 10.0, with 0.0 as the default)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java
index 4ffa8449..6866ccf5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageFalseColorFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageFalseColorFilter extends GPUImageFilter {
     public static final String FALSECOLOR_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java
index c20956f3..5e373d97 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGammaFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * gamma value ranges from 0.0 to 3.0, with 1.0 as the normal level
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java
index 396bd5a3..04ae36ae 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGaussianBlurFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * A more generalized 9x9 Gaussian blur filter
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java
index d80927e1..b1b8cf33 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGlassSphereFilter.java
@@ -19,7 +19,7 @@
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageGlassSphereFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java
index 69fcaaaf..0fe6a74d 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageGrayscaleFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Applies a grayscale effect to the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java
index bcc97247..50d0cd52 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHalftoneFilter.java
@@ -2,7 +2,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageHalftoneFilter extends GPUImageFilter {
     public static final String HALFTONE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java
index c2ed84b8..2a3e3b94 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHazeFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * The haze filter can be used to add or remove haze.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java
index 2132e046..c30f9adb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHighlightShadowFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Adjusts the shadows and highlights of an image
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java
index 4013e664..3efa10a4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageHueFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageHueFilter extends GPUImageFilter {
     public static final String HUE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java
index bf42657d..2a1575bf 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageKuwaharaFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Kuwahara image abstraction, drawn from the work of Kyprianidis, et. al. in their publication
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java
index 758b1fde..eda60a4a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageLevelsFilter.java
@@ -2,7 +2,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Created by vashisthg 30/05/14.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java
index 598208ee..71b6c78c 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageMonochromeFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Converts the image to a single-color version, based on the luminance of each pixel
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java
index 82fc475f..eca8a8ca 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageOpacityFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Adjusts the alpha channel of the incoming image
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java
index 3e3d5d7e..dba75873 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePixelationFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Applies a grayscale effect to the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java
index d0fc5fdd..76149b45 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImagePosterizeFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Reduces the color range of the image. <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java
index e4751ae0..124a97f4 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBDilationFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageTwoPassTextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageTwoPassTextureSamplingFilter;
 
 /**
  * For each pixel, this sets it to the maximum value of each color channel in a rectangular neighborhood extending
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java
index ded88207..defb3555 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageRGBFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Adjusts the individual RGB channels of an image
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java
index 3ac2e637..d5b395ea 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSaturationFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * saturation: The degree of saturation or desaturation to apply to the image (0.0 - 2.0, with 1.0 as the default)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java
index 0007283e..b4967de0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSharpenFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Sharpens the picture. <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java
index 66650646..eeac84e7 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSketchFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  * Converts video to look like a sketch.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java
index 627cb23b..e1422068 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSmoothToonFilter.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  *  This uses a similar process as the GPUImageToonFilter, only it precedes the toon effect
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java
index dcec2e81..a3111d98 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSphereRefractionFilter.java
@@ -19,7 +19,7 @@
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageSphereRefractionFilter extends GPUImageFilter {
     public static final String SPHERE_FRAGMENT_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java
index 0196a980..a4682358 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageSwirlFilter.java
@@ -19,7 +19,7 @@
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Creates a swirl distortion on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java
index 327bb520..b7b2b37e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageToneCurveFilter.java
@@ -26,7 +26,7 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
 
 public class GPUImageToneCurveFilter extends GPUImageFilter {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java
index 3fd12a04..fb562f92 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTransformFilter.java
@@ -7,7 +7,7 @@
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 public class GPUImageTransformFilter extends GPUImageFilter {
     public static final String TRANSFORM_VERTEX_SHADER = "" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java
index ee1623f6..cf1a1645 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoInputFilter.java
@@ -16,16 +16,17 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
+import android.graphics.Bitmap;
+import android.opengl.GLES20;
+
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.util.OpenGlUtils;
 import jp.co.cyberagent.android.gpuimage.util.Rotation;
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-import android.graphics.Bitmap;
-import android.opengl.GLES20;
 
 public class GPUImageTwoInputFilter extends GPUImageFilter {
     private static final String VERTEX_SHADER = "attribute vec4 position;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java
index d3efb0b6..610a3b25 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageTwoPassFilter.java
@@ -16,8 +16,8 @@
 
 package jp.co.cyberagent.android.gpuimage.filter;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 public class GPUImageTwoPassFilter extends GPUImageFilterGroup {
     public GPUImageTwoPassFilter(String firstVertexShader, String firstFragmentShader,
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java
index a6bc6843..753e1704 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageVignetteFilter.java
@@ -19,7 +19,7 @@
 import android.graphics.PointF;
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Performs a vignetting effect, fading out the image at the edges
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java
index 21c36d40..9b5c681b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/GPUImageWhiteBalanceFilter.java
@@ -18,7 +18,7 @@
 
 import android.opengl.GLES20;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 
 /**
  * Adjusts the white balance of incoming image. <br>
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/filter/custom/DoubleFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/filter/custom/DoubleFilter.java
new file mode 100644
index 00000000..00d33530
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/filter/custom/DoubleFilter.java
@@ -0,0 +1,35 @@
+package jp.co.cyberagent.android.gpuimage.filter.custom;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+
+/**
+ * Created by fanjie on 2017/9/12. 来一个屌炸天的双纹理滤镜
+ */
+
+public class DoubleFilter extends GPUImageFilter {
+
+    public static final String VERTEX_SHADER = "" +
+            "attribute vec4 position;\n" +
+            "attribute vec4 inputTextureCoordinate;\n" +
+            " \n" +
+            "varying vec2 textureCoordinate;\n" +
+            " \n" +
+            "void main()\n" +
+            "{\n" +
+            "    gl_Position = position;\n" +
+            "    textureCoordinate = inputTextureCoordinate.xy;\n" +
+            "}";
+    public static final String FRAGMENT_SHADER = "" +
+            "varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            "uniform sampler2D inputImageTexture;\n" +
+            " \n" +
+            "void main()\n" +
+            "{\n" +
+            "     gl_FragColor = texture2D(inputImageTexture, textureCoordinate * vec2(2.0,1.0));\n" +
+            "}";
+
+    public DoubleFilter() {
+        super(VERTEX_SHADER, FRAGMENT_SHADER);
+    }
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java
index 870e8867..bb9130e9 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageSobelEdgeDetection.java
@@ -18,7 +18,7 @@
 
 import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3TextureSamplingFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageGrayscaleFilter;
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java
index b6050a1e..0786e2c5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/util/GPUImageThresholdEdgeDetection.java
@@ -3,7 +3,7 @@
 import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3TextureSamplingFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageGrayscaleFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSobelThresholdFilter;
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 
 /**
  * Applies sobel edge detection on the image.
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index 33397871..f172ced9 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -23,6 +23,11 @@
 import android.graphics.PointF;
 import android.opengl.Matrix;
 
+import java.util.LinkedList;
+import java.util.List;
+
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilterGroup;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3ConvolutionFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImage3x3TextureSamplingFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageAddBlendFilter;
@@ -50,8 +55,6 @@
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageExclusionBlendFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageExposureFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageFalseColorFilter;
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilterGroup;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageGammaFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageGaussianBlurFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageGlassSphereFilter;
@@ -86,7 +89,6 @@
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSharpenFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSketchFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSmoothToonFilter;
-import jp.co.cyberagent.android.gpuimage.util.GPUImageSobelEdgeDetection;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSoftLightBlendFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSourceOverBlendFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageSphereRefractionFilter;
@@ -99,14 +101,14 @@
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageVignetteFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageWeakPixelInclusionFilter;
 import jp.co.cyberagent.android.gpuimage.filter.GPUImageWhiteBalanceFilter;
-
-import java.util.LinkedList;
-import java.util.List;
+import jp.co.cyberagent.android.gpuimage.filter.custom.DoubleFilter;
+import jp.co.cyberagent.android.gpuimage.util.GPUImageSobelEdgeDetection;
 
 public class GPUImageFilterTools {
     public static void showDialog(final Context context,
             final OnGpuImageFilterChosenListener listener) {
         final FilterList filters = new FilterList();
+        filters.addFilter("Me!Me!Me!", FilterType.DOUBLE);
         filters.addFilter("Contrast", FilterType.CONTRAST);
         filters.addFilter("Invert", FilterType.INVERT);
         filters.addFilter("Pixelation", FilterType.PIXELATION);
@@ -204,6 +206,8 @@ public void onClick(final DialogInterface dialog, final int item) {
 
     private static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
         switch (type) {
+            case DOUBLE:
+                return new DoubleFilter();
             case CONTRAST:
                 return new GPUImageContrastFilter(2.0f);
             case GAMMA:
@@ -327,7 +331,6 @@ private static GPUImageFilter createFilterForType(final Context context, final F
                 return new GPUImageGaussianBlurFilter();
             case CROSSHATCH:
                 return new GPUImageCrosshatchFilter();
-
             case BOX_BLUR:
                 return new GPUImageBoxBlurFilter();
             case CGA_COLORSPACE:
@@ -400,7 +403,7 @@ private static GPUImageFilter createBlendFilter(Context context, Class<? extends
     }
 
     private enum FilterType {
-        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
+        DOUBLE,CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
         SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
         BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
         BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index 0745f221..0c252e0a 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -41,7 +41,7 @@
 
 import jp.co.cyberagent.android.gpuimage.core.GPUImage;
 import jp.co.cyberagent.android.gpuimage.core.GPUImage.OnPictureSavedListener;
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
index 1895690c..6b386390 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
@@ -16,7 +16,7 @@
 
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
-import jp.co.cyberagent.android.gpuimage.filter.base.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.core.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.core.GPUImageView;
 import jp.co.cyberagent.android.gpuimage.core.GPUImageView.OnPictureSavedListener;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
