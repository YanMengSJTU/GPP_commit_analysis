diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8ac626fd..a8d3f577 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -166,6 +166,7 @@ public void setUpCamera(final Camera camera, final int degrees, final boolean fl
                 break;
         }
         mRenderer.setRotationCamera(rotation, flipHorizontal, flipVertical);
+        mRenderer.setCameraPreviewSize(camera.getParameters().getPreviewSize());
     }
 
     @TargetApi(11)
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 4d4fa7ed..14f3bfd2 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -153,27 +153,35 @@ private void runAll(Queue<Runnable> queue) {
         }
     }
 
+    void setCameraPreviewSize(Size previewSize){
+        this.mPreviewSize = previewSize;
+    }
+
+    private Size mPreviewSize;
+
     @Override
     public void onPreviewFrame(final byte[] data, final Camera camera) {
         if(rendererListener != null){
             rendererListener.onCameraFrame(data, camera);
         }
-        final Size previewSize = camera.getParameters().getPreviewSize();
+        if(mPreviewSize == null){
+            mPreviewSize = camera.getParameters().getPreviewSize();
+        }
         if (mGLRgbBuffer == null) {
-            mGLRgbBuffer = IntBuffer.allocate(previewSize.width * previewSize.height);
+            mGLRgbBuffer = IntBuffer.allocate(mPreviewSize.width * mPreviewSize.height);
         }
         if (mRunOnDraw.isEmpty()) {
             runOnDraw(new Runnable() {
                 @Override
                 public void run() {
-                    GPUImageNativeLibrary.YUVtoRBGA(data, previewSize.width, previewSize.height,
+                    GPUImageNativeLibrary.YUVtoRBGA(data, mPreviewSize.width, mPreviewSize.height,
                             mGLRgbBuffer.array());
-                    mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, previewSize, mGLTextureId);
+                    mGLTextureId = OpenGlUtils.loadTexture(mGLRgbBuffer, mPreviewSize, mGLTextureId);
                     camera.addCallbackBuffer(data);
 
-                    if (mImageWidth != previewSize.width) {
-                        mImageWidth = previewSize.width;
-                        mImageHeight = previewSize.height;
+                    if (mImageWidth != mPreviewSize.width || mImageHeight != mPreviewSize.height) {
+                        mImageWidth = mPreviewSize.width;
+                        mImageHeight = mPreviewSize.height;
                         adjustImageScaling();
                     }
                 }
