diff --git a/build.gradle b/build.gradle
index 8a29e6b0..698bcf86 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0-beta6'
+        classpath 'com.android.tools.build:gradle:2.2.0'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6c0732ab..88ba3991 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Dec 06 18:27:05 JST 2014
+#Tue Dec 06 15:24:25 CST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 4e0ded68..0906ee4b 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -18,7 +18,7 @@ android {
             moduleName "gpuimage-library"
             stl "gnustl_shared"
             abiFilters "all"
-            ldLibs "log"
+            ldLibs "log","GLESv2","jnigraphics"
         }
     }
 
diff --git a/library/jni/yuv-decoder.c b/library/jni/yuv-decoder.c
index fed6281e..0c806e3a 100644
--- a/library/jni/yuv-decoder.c
+++ b/library/jni/yuv-decoder.c
@@ -1,6 +1,11 @@
 #include <jni.h>
 #include <android/log.h>
 
+#include <android/bitmap.h>
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+
+
 
 JNIEXPORT void JNICALL Java_jp_co_cyberagent_android_gpuimage_GPUImageNativeLibrary_YUVtoRBGA(JNIEnv * env, jobject obj, jbyteArray yuv420sp, jint width, jint height, jintArray rgbOut)
 {
@@ -112,4 +117,38 @@ JNIEXPORT void JNICALL Java_jp_co_cyberagent_android_gpuimage_GPUImageNativeLibr
 
     (*env)->ReleasePrimitiveArrayCritical(env, rgbOut, rgbData, 0);
     (*env)->ReleasePrimitiveArrayCritical(env, yuv420sp, yuv, 0);
-}
\ No newline at end of file
+}
+
+
+JNIEXPORT void JNICALL Java_jp_co_cyberagent_android_gpuimage_GPUImageNativeLibrary_gpuBitmap(JNIEnv *jenv, jclass thiz, jobject src)
+{
+    unsigned char * srcByteBuffer;
+    int result = 0;
+    int i,j;
+    AndroidBitmapInfo srcInfo;
+
+    result = AndroidBitmap_getInfo(jenv, src, &srcInfo);
+    if(result != ANDROID_BITMAP_RESULT_SUCCESS) {
+        return;
+    }
+
+    result = AndroidBitmap_lockPixels(jenv,src,(void**)&srcByteBuffer);
+    if(result != ANDROID_BITMAP_RESULT_SUCCESS) {
+        return;
+    }
+
+    int width = srcInfo.width;
+    int height = srcInfo.height;
+    glReadPixels(0, 0, srcInfo.width, srcInfo.height, GL_RGBA, GL_UNSIGNED_BYTE, srcByteBuffer);
+
+    int *pIntBuffer = (int*)srcByteBuffer;
+
+    for (i = 0; i < height / 2; i++) {
+        for (j = 0; j < width; j++) {
+            int temp = pIntBuffer[(height - i - 1) * width + j];
+            pIntBuffer[(height - i - 1) * width + j] = pIntBuffer[i * width + j];
+            pIntBuffer[i * width + j] = temp;
+        }
+    }
+    AndroidBitmap_unlockPixels(jenv,src);
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
index ce8c31b8..d76482f3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
@@ -16,6 +16,8 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
+import android.graphics.Bitmap;
+
 public class GPUImageNativeLibrary {
     static {
         System.loadLibrary("gpuimage-library");
@@ -24,4 +26,6 @@
     public static native void YUVtoRBGA(byte[] yuv, int width, int height, int[] out);
 
     public static native void YUVtoARBG(byte[] yuv, int width, int height, int[] out);
+
+    public static native void gpuBitmap(Bitmap srcBitmap);
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index cc6a0247..20332cf3 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -19,11 +19,8 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
-import android.opengl.GLES20;
 import android.opengl.GLSurfaceView;
 import android.os.*;
 import android.util.AttributeSet;
@@ -35,7 +32,6 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
-import java.nio.IntBuffer;
 import java.util.concurrent.Semaphore;
 
 public class GPUImageView extends FrameLayout {
@@ -292,6 +288,7 @@ public void run() {
         return bitmap;
     }
 
+
     /**
      * Capture the current image with the size as it is displayed and retrieve it as Bitmap.
      * @return current output as Bitmap
@@ -304,29 +301,18 @@ public Bitmap capture() throws InterruptedException {
         final int height = mGLSurfaceView.getMeasuredHeight();
 
         // Take picture on OpenGL thread
-        final int[] pixelMirroredArray = new int[width * height];
+        final Bitmap resultBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
         mGPUImage.runOnGLThread(new Runnable() {
             @Override
             public void run() {
-                final IntBuffer pixelBuffer = IntBuffer.allocate(width * height);
-                GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuffer);
-                int[] pixelArray = pixelBuffer.array();
-
-                // Convert upside down mirror-reversed image to right-side up normal image.
-                for (int i = 0; i < height; i++) {
-                    for (int j = 0; j < width; j++) {
-                        pixelMirroredArray[(height - i - 1) * width + j] = pixelArray[i * width + j];
-                    }
-                }
+                GPUImageNativeLibrary.gpuBitmap(resultBitmap);
                 waiter.release();
             }
         });
         requestRender();
         waiter.acquire();
 
-        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
-        bitmap.copyPixelsFromBuffer(IntBuffer.wrap(pixelMirroredArray));
-        return bitmap;
+        return resultBitmap;
     }
 
     /**
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
index ac23f599..5a65829e 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
@@ -189,22 +189,7 @@ private int getConfigAttrib(final EGLConfig config, final int attribute) {
     }
 
     private void convertToBitmap() {
-        int[] iat = new int[mWidth * mHeight];
-        IntBuffer ib = IntBuffer.allocate(mWidth * mHeight);
-        mGL.glReadPixels(0, 0, mWidth, mHeight, GL_RGBA, GL_UNSIGNED_BYTE, ib);
-        int[] ia = ib.array();
-
-        //Stupid !
-        // Convert upside down mirror-reversed image to right-side up normal
-        // image.
-        for (int i = 0; i < mHeight; i++) {
-            for (int j = 0; j < mWidth; j++) {
-                iat[(mHeight - i - 1) * mWidth + j] = ia[i * mWidth + j];
-            }
-        }
-        
-
         mBitmap = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888);
-        mBitmap.copyPixelsFromBuffer(IntBuffer.wrap(iat));
+        GPUImageNativeLibrary.gpuBitmap(mBitmap);
     }
 }
