diff --git a/library/project.properties b/library/project.properties
index dfa4dd09..91d2b024 100644
--- a/library/project.properties
+++ b/library/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-16
+target=android-19
 android.library=true
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 06b65d4b..6b4c84f0 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -39,7 +39,6 @@
 import android.view.WindowManager;
 
 import java.io.*;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.List;
 import java.util.concurrent.Semaphore;
@@ -202,6 +201,28 @@ public void deleteImage() {
         mCurrentBitmap = null;
         requestRender();
     }
+    
+    /**
+     * Rotates the current image.
+     */
+    public void rotateImage(final int degrees) {
+        switch (degrees) {
+	        case 0:
+	        	mRenderer.setRotation(Rotation.NORMAL, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+	        case 1:
+	        	mRenderer.setRotation(Rotation.ROTATION_90, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+	        case 2:
+	        	mRenderer.setRotation(Rotation.ROTATION_180, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+	        case 3:
+	        	mRenderer.setRotation(Rotation.ROTATION_270, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+	        default:
+	        	mRenderer.setRotation(Rotation.NORMAL, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+	    }
+        if (mCurrentBitmap != null) {
+            mRenderer.setImageBitmap(mCurrentBitmap, false);
+        }
+        requestRender();
+    }
 
     /**
      * Sets the image on which the filter should be applied from a Uri.
@@ -225,8 +246,7 @@ private String getPath(final Uri uri) {
         String[] projection = {
                 MediaStore.Images.Media.DATA,
         };
-        Cursor cursor = mContext.getContentResolver()
-                .query(uri, projection, null, null, null);
+        Cursor cursor = mContext.getContentResolver().query(uri, projection, null, null, null);
         int pathIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
         String path = null;
         if (cursor.moveToFirst()) {
@@ -273,8 +293,7 @@ public void run() {
         }
 
         GPUImageRenderer renderer = new GPUImageRenderer(mFilter);
-        renderer.setRotation(Rotation.NORMAL,
-                mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
+        renderer.setRotation(Rotation.NORMAL, mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
         renderer.setScaleType(mScaleType);
         PixelBuffer buffer = new PixelBuffer(bitmap.getWidth(), bitmap.getHeight());
         buffer.setRenderer(renderer);
@@ -334,8 +353,7 @@ public static void getBitmapForMultipleFilters(final Bitmap bitmap,
      * @param fileName the file name
      * @param listener the listener
      */
-    public void saveToPictures(final String folderName, final String fileName,
-            final OnPictureSavedListener listener) {
+    public void saveToPictures(final String folderName, final String fileName, final OnPictureSavedListener listener) {
         saveToPictures(mCurrentBitmap, folderName, fileName, listener);
     }
 
@@ -351,8 +369,7 @@ public void saveToPictures(final String folderName, final String fileName,
      * @param fileName the file name
      * @param listener the listener
      */
-    public void saveToPictures(final Bitmap bitmap, final String folderName, final String fileName,
-            final OnPictureSavedListener listener) {
+    public void saveToPictures(final Bitmap bitmap, final String folderName, final String fileName, final OnPictureSavedListener listener) {
         new SaveTask(bitmap, folderName, fileName, listener).execute();
     }
 
@@ -362,10 +379,10 @@ private int getOutputWidth() {
         } else if (mCurrentBitmap != null) {
             return mCurrentBitmap.getWidth();
         } else {
-            WindowManager windowManager =
-                    (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+            WindowManager windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
             Display display = windowManager.getDefaultDisplay();
             return display.getWidth();
+            //return display.getSize(Point pt);
         }
     }
 
@@ -390,8 +407,7 @@ private int getOutputHeight() {
         private final OnPictureSavedListener mListener;
         private final Handler mHandler;
 
-        public SaveTask(final Bitmap bitmap, final String folderName, final String fileName,
-                final OnPictureSavedListener listener) {
+        public SaveTask(final Bitmap bitmap, final String folderName, final String fileName, final OnPictureSavedListener listener) {
             mBitmap = bitmap;
             mFolderName = folderName;
             mFileName = fileName;
@@ -407,12 +423,11 @@ protected Void doInBackground(final Void... params) {
         }
 
         private void saveImage(final String folderName, final String fileName, final Bitmap image) {
-            File path = Environment
-                    .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
+            File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
             File file = new File(path, folderName + "/" + fileName);
             try {
                 file.getParentFile().mkdirs();
-                image.compress(CompressFormat.JPEG, 80, new FileOutputStream(file));
+                image.compress(CompressFormat.JPEG, 80, new FileOutputStream(file)); // OVERWRITE ?
                 MediaScannerConnection.scanFile(mContext,
                         new String[] {
                             file.toString()
@@ -468,8 +483,7 @@ protected Bitmap decode(BitmapFactory.Options options) {
 
         @Override
         protected int getImageOrientation() throws IOException {
-            Cursor cursor = mContext.getContentResolver().query(mUri,
-                    new String[] { MediaStore.Images.ImageColumns.ORIENTATION }, null, null, null);
+            Cursor cursor = mContext.getContentResolver().query(mUri, new String[] { MediaStore.Images.ImageColumns.ORIENTATION }, null, null, null);
 
             if (cursor == null || cursor.getCount() != 1) {
                 return 0;
@@ -642,8 +656,7 @@ private Bitmap rotateImage(final Bitmap bitmap) {
                 if (orientation != 0) {
                     Matrix matrix = new Matrix();
                     matrix.postRotate(orientation);
-                    rotatedBitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),
-                            bitmap.getHeight(), matrix, true);
+                    rotatedBitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                     bitmap.recycle();
                 }
             } catch (IOException e) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
index c0ec15d1..7bde9530 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter.java
@@ -17,6 +17,7 @@
 package jp.co.cyberagent.android.gpuimage;
 
 import android.opengl.GLES20;
+import android.util.Log;
 /**
  * Applies a grayscale effect to the image.
  */
@@ -69,6 +70,8 @@ public void onOutputSizeChanged(final int width, final int height) {
 
     public void setPixel(final float pixel) {
       mPixel = pixel;
+      Log.v("GENERATE", "PIXEL SLIDER is " + pixel);
+
       setFloat(mPixelLocation, mPixel);
     }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePolkaDotFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePolkaDotFilter.java
new file mode 100644
index 00000000..95273a5d
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImagePolkaDotFilter.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* 
+ * Ported from iOS to Android by Hybridity
+ * 
+ */
+
+package jp.co.cyberagent.android.gpuimage;
+
+import android.opengl.GLES20;
+import android.util.Log;
+/**
+ * Applies a polkadot effect to the image.
+ */
+public class GPUImagePolkaDotFilter extends GPUImageFilter {
+    public static final String POLKA_DOT_FRAGMENT_SHADER = "" +
+
+    		"precision highp float;\n" +
+    		"varying highp vec2 textureCoordinate;\n" +
+		"uniform sampler2D inputImageTexture;\n" +
+	
+		"uniform highp float fractionalWidthOfPixel;\n" +
+		"uniform highp float aspectRatio;\n" +
+		"uniform highp float dotScaling;\n" +
+	
+		"void main()\n" +
+			"{\n" +
+			"highp vec2 sampleDivisor = vec2(fractionalWidthOfPixel, fractionalWidthOfPixel / aspectRatio);\n" +
+			"highp vec2 samplePos = textureCoordinate - mod(textureCoordinate, sampleDivisor) + 0.5 * sampleDivisor;\n" +
+			"highp vec2 textureCoordinateToUse = vec2(textureCoordinate.x, (textureCoordinate.y * aspectRatio + 0.5 - 0.5 * aspectRatio));\n" +
+			"highp vec2 adjustedSamplePos = vec2(samplePos.x, (samplePos.y * aspectRatio + 0.5 - 0.5 * aspectRatio));\n" +
+			"highp float distanceFromSamplePoint = distance(adjustedSamplePos, textureCoordinateToUse);\n" +
+			"lowp float checkForPresenceWithinDot = step(distanceFromSamplePoint, (fractionalWidthOfPixel * 0.5) * dotScaling);\n" +
+			"lowp vec4 inputColor = texture2D(inputImageTexture, samplePos);\n" +
+			"gl_FragColor = vec4(inputColor.rgb * checkForPresenceWithinDot, inputColor.a);\n" +
+	    "}";
+
+    private int mImageWidthFactorLocation;
+    private int mImageHeightFactorLocation;
+    private float w, h;
+    private float mDot;
+    private int mPolkaLocation;
+    private int fractionalWidthOfAPixelLocation;
+    private float fractionalWidthOfAPixel;
+    private int aspectRatioLocation;
+    private float aspectRatio;
+    
+    public GPUImagePolkaDotFilter() {
+        super(NO_FILTER_VERTEX_SHADER, POLKA_DOT_FRAGMENT_SHADER);
+        mDot = 0.90f;
+    }
+
+    @Override
+    public void onInit() {
+        super.onInit();
+
+        fractionalWidthOfAPixelLocation = GLES20.glGetUniformLocation(getProgram(), "fractionalWidthOfPixel");
+        aspectRatioLocation = GLES20.glGetUniformLocation(getProgram(), "aspectRatio");
+        mPolkaLocation = GLES20.glGetUniformLocation(getProgram(), "dotScaling");
+        mImageWidthFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageWidthFactor");
+        mImageHeightFactorLocation = GLES20.glGetUniformLocation(getProgram(), "imageHeightFactor");
+        
+        setFloat(fractionalWidthOfAPixelLocation, 0.05f);        
+        setFloat(aspectRatioLocation, 1.0f);
+        
+        setDotScaling(mDot);
+    }
+
+    @Override
+    public void onOutputSizeChanged(final int width, final int height) {
+        super.onOutputSizeChanged(width, height);
+        w = 1.0f / width;
+        h = 1.0f / height;
+        setFloat(mImageWidthFactorLocation, 0.0f);
+        setFloat(mImageHeightFactorLocation, 0.0f);
+        //setFloat(fractionalWidthOfAPixelLocation, 0.05f);        
+        //setFloat(aspectRatioLocation, (1.0f / width) /  (1.0f / height) );
+        Log.v("GENERATE", "POLKA W is " + w + " and H is " + h);
+    }
+
+    public void setDotScaling(final float pixel) {
+    		mDot = pixel;
+        //Log.v("GENERATE", "POLKA SLIDER is " + pixel);
+    		Log.v("GENERATE", " and noooww  POLKA W is " + w + " and H is " + h);
+        setFloat(fractionalWidthOfAPixelLocation, 0.05f);        
+        setFloat(mImageWidthFactorLocation, 0.0f);
+        setFloat(mImageHeightFactorLocation, 0.0f);
+    		setFloat(mPolkaLocation, mDot);
+    }
+}
diff --git a/sample/project.properties b/sample/project.properties
index 853a8af2..c29acc4f 100644
--- a/sample/project.properties
+++ b/sample/project.properties
@@ -11,6 +11,6 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-16
+target=android-19
 proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 android.library.reference.1=../library
