diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index cb158ed7..19a3e18e 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -134,9 +134,9 @@ private void takePicture() {
         params.setJpegQuality(100);
 
         mCamera.mCameraInstance.setParameters(params);
-        for (Camera.Size size : params.getSupportedPictureSizes()) {
-            Log.i("ASDF", "Supported: " + size.width + "x" + size.height);
-        }
+//        for (Camera.Size size : params.getSupportedPictureSizes()) {
+//            Log.i("ASDF", "Supported: " + size.width + "x" + size.height);
+//        }
 
         final long start = System.currentTimeMillis();
 
@@ -146,7 +146,8 @@ private void takePicture() {
                     @Override
                     public void onPictureTaken(byte[] data, final Camera camera) {
 
-                        Log.i("ASDF", "Capture time: " + (System.currentTimeMillis() - start) + " millis");
+                        long timeTaken = (System.currentTimeMillis() - start);
+                        Log.i("ASDF", "mCamera.mCameraInstance.takePicture: " + timeTaken + " millis");
 
                         final File pictureFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
                         if (pictureFile == null) {
@@ -155,6 +156,10 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                             return;
                         }
 
+                        long timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                        timeTaken = (System.currentTimeMillis() - start);
+                        Log.i("ASDF", "getOutputMediaFile: " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
                         try {
                             FileOutputStream fos = new FileOutputStream(pictureFile);
                             fos.write(data);
@@ -165,11 +170,33 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                             Log.d("ASDF", "Error accessing file: " + e.getMessage());
                         }
 
+                        timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                        timeTaken = (System.currentTimeMillis() - start);
+                        Log.i("ASDF", "fos.write(data): " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
                         data = null;
                         Bitmap bitmap = BitmapFactory.decodeFile(pictureFile.getAbsolutePath());
+
+                        timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                        timeTaken = (System.currentTimeMillis() - start);
+                        Log.i("ASDF", "BitmapFactory.decodeFile: " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
+                        // Enable if doing byte[] to bitmap directly
+//                        Bitmap bitmap = getBitmapFromBytes(data, 2448, 3264);
+//                        long timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+//                        timeTaken = (System.currentTimeMillis() - start);
+//                        Log.i("ASDF", "getBitmapFromBytes: " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
                         // mGPUImage.setImage(bitmap);
                         final GLSurfaceView view = (GLSurfaceView) findViewById(R.id.surfaceView);
                         view.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
+
+                        timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                        timeTaken = (System.currentTimeMillis() - start);
+                        Log.i("ASDF", "setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY): " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
+                        final long timeTakenTemp = timeTaken;
+
                         mGPUImage.saveToPictures(bitmap, "GPUImage",
                                 System.currentTimeMillis() + ".jpg",
                                 new OnPictureSavedListener() {
@@ -178,19 +205,77 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                                     public void onPictureSaved(final Uri
                                             uri) {
 
-                                        Log.i("ASDF", "Save time: " + (System.currentTimeMillis() - start) + " millis");
+                                        long timeTakenDiff = (System.currentTimeMillis() - start) - timeTakenTemp;
+                                        long timeTaken = (System.currentTimeMillis() - start);
+                                        Log.i("ASDF", "mGPUImage.saveToPictures: " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
 
                                         pictureFile.delete();
+                                        timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                                        timeTaken = (System.currentTimeMillis() - start);
+                                        Log.i("ASDF", "pictureFile.delete: " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
                                         camera.startPreview();
+
+                                        timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                                        timeTaken = (System.currentTimeMillis() - start);
+                                        Log.i("ASDF", "camera.startPreview(): " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
                                         view.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
 
-                                        Log.i("ASDF", "All done time: " + (System.currentTimeMillis() - start) + " millis");
+                                        timeTakenDiff = (System.currentTimeMillis() - start) - timeTaken;
+                                        timeTaken = (System.currentTimeMillis() - start);
+                                        Log.i("ASDF", "setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY): " + timeTakenDiff + " millis (" + timeTaken + " millis in total)");
+
+                                        Log.i("ASDF", "All done: " + timeTaken + " millis");
                                     }
                                 });
                     }
                 });
     }
 
+    public static Bitmap getBitmapFromBytes(byte[] content, int width, int height) {
+        try {
+            // First decode with inJustDecodeBounds=true to check dimensions
+            final BitmapFactory.Options options = new BitmapFactory.Options();
+            options.inJustDecodeBounds = true;
+            BitmapFactory.decodeByteArray(content, 0, content.length, options);
+
+            // Calculate inSampleSize
+            options.inSampleSize = calculateInSampleSize(options, width, height);
+
+            // Decode bitmap with inSampleSize set
+            options.inJustDecodeBounds = false;
+            return BitmapFactory.decodeByteArray(content, 0, content.length, options);
+
+        } catch (Exception e) {
+            Log.e("ASDF", "Failed to get bitmap - " + e.getMessage());
+            return null;
+        }
+    }
+
+    protected static int calculateInSampleSize(
+            BitmapFactory.Options options, int reqWidth, int reqHeight) {
+        // Raw height and width of image
+        final int height = options.outHeight;
+        final int width = options.outWidth;
+        int inSampleSize = 1;
+
+        if (height > reqHeight || width > reqWidth) {
+
+            final int halfHeight = height / 2;
+            final int halfWidth = width / 2;
+
+            // Calculate the largest inSampleSize value that is a power of 2 and keeps both
+            // height and width larger than the requested height and width.
+            while ((halfHeight / inSampleSize) > reqHeight
+                    && (halfWidth / inSampleSize) > reqWidth) {
+                inSampleSize *= 2;
+            }
+        }
+
+        return inSampleSize;
+    }
+
     public static final int MEDIA_TYPE_IMAGE = 1;
     public static final int MEDIA_TYPE_VIDEO = 2;
 
