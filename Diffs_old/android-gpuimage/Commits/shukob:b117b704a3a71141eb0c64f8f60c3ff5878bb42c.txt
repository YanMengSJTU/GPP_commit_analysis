diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
index 5f24a7b7..4e5ff0be 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
@@ -116,6 +116,14 @@ public void run() {
         initGL();
         initGLComponents();
         if (mFilter != null) {
+            if (!mFilter.isInitialized()) {
+                mFilter.runOnDraw(new Runnable() {
+                    @Override
+                    public void run() {
+                        mFilter.init();
+                    }
+                });
+            }
             mFilter.setGLTexture(GLES20.GL_TEXTURE1);
         }
         Log.d(LOG_TAG, "OpenGL init OK.");
@@ -423,45 +431,11 @@ private void prepareFramebuffer(int width, int height) {
 
     @Override
     protected void adjustImageScaling() {
-//        float outputWidth = mOutputWidth;
-//        float outputHeight = mOutputHeight;
-//        if (mRotation == Rotation.ROTATION_270 || mRotation == Rotation.ROTATION_90) {
-//            outputWidth = mOutputHeight;
-//            outputHeight = mOutputWidth;
-//        }
-//
-//        float ratio1 = outputWidth / mImageWidth;
-//        float ratio2 = outputHeight / mImageHeight;
-//        float ratioMax = Math.max(ratio1, ratio2);
-//        int imageWidthNew = Math.round(mImageWidth * ratioMax);
-//        int imageHeightNew = Math.round(mImageHeight * ratioMax);
-//
-//        float ratioWidth = imageWidthNew / outputWidth;
-//        float ratioHeight = imageHeightNew / outputHeight;
-//
-//        float[] cube = CUBE;
-//        float[] textureCords = TextureRotationUtil.getRotation(mRotation, mFlipHorizontal, mFlipVertical);
-//        if (mScaleType == GPUImage.ScaleType.CENTER_CROP) {
-//            float distHorizontal = (1 - 1 / ratioWidth) / 2;
-//            float distVertical = (1 - 1 / ratioHeight) / 2;
-//            textureCords = new float[]{
-//                    addDistance(textureCords[0], distHorizontal), addDistance(textureCords[1], distVertical),
-//                    addDistance(textureCords[2], distHorizontal), addDistance(textureCords[3], distVertical),
-//                    addDistance(textureCords[4], distHorizontal), addDistance(textureCords[5], distVertical),
-//                    addDistance(textureCords[6], distHorizontal), addDistance(textureCords[7], distVertical),
-//            };
-//        } else {
-//            cube = new float[]{
-//                    CUBE[0] / ratioHeight, CUBE[1] / ratioWidth,
-//                    CUBE[2] / ratioHeight, CUBE[3] / ratioWidth,
-//                    CUBE[4] / ratioHeight, CUBE[5] / ratioWidth,
-//                    CUBE[6] / ratioHeight, CUBE[7] / ratioWidth,
-//            };
-//        }
-
         mGLCubeBuffer.clear();
         mGLCubeBuffer.put(CUBE).position(0);
         mGLTextureBuffer.clear();
         mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);
     }
+
+
 }
diff --git a/sample/res/layout/activity_movie.xml b/sample/res/layout/activity_movie.xml
index 757cb1e0..0dfc07c4 100644
--- a/sample/res/layout/activity_movie.xml
+++ b/sample/res/layout/activity_movie.xml
@@ -1,15 +1,23 @@
 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
     xmlns:res="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     tools:context="jp.co.cyberagent.android.gpuimage.sample.activity.ActivityMovie">
 
     <com.malmstein.fenster.view.FensterVideoView
-        res:scaleType="crop"
         android:id="@+id/video_view"
         android:layout_width="match_parent"
-        android:layout_height="match_parent"/>
+        android:layout_height="match_parent"
+        res:scaleType="crop"/>
+
+    <Button
+        android:id="@+id/button_choose_filter"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentRight="true"
+        android:text="Choose Filter"/>
 </RelativeLayout>
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
index ce09c4c0..8c4bd4ed 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
@@ -2,8 +2,10 @@
 
 import android.app.Activity;
 import android.graphics.SurfaceTexture;
+import android.hardware.Camera;
 import android.media.MediaPlayer;
 import android.os.Bundle;
+import android.view.View;
 
 import com.malmstein.fenster.view.FensterVideoView;
 
@@ -11,26 +13,22 @@
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRenderer;
 import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageTextureRenderer;
 import jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.R;
 
-public class ActivityMovie extends Activity {
+public class ActivityMovie extends Activity implements View.OnClickListener {
 
     FensterVideoView videoView;
-    GPUImageFilter filter = new GPUImageSepiaFilter();
+    GPUImageFilter filter = new GPUImageFilter();
 
     class Renderer extends GPUImageTextureRenderer implements FensterVideoView.Renderer {
         public Renderer(final GPUImageFilter filter) {
             super(filter);
-            filter.runOnDraw(new Runnable() {
-                @Override
-                public void run() {
-                    filter.init();
-                }
-            });
         }
     }
 
@@ -48,7 +46,27 @@ public void onPrepared(MediaPlayer mp) {
             }
         });
         videoView.start();
+        findViewById(R.id.button_choose_filter).setOnClickListener(this);
+
     }
 
+    @Override
+    public void onClick(final View v) {
+        switch (v.getId()) {
+            case R.id.button_choose_filter:
+                GPUImageFilterTools.showDialog(this, new GPUImageFilterTools.OnGpuImageFilterChosenListener() {
+
+                    @Override
+                    public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
+                        switchFilterTo(filter);
+                    }
+                });
+        }
+    }
+
+    void switchFilterTo(GPUImageFilter filter) {
+        this.filter = filter;
+        ((GPUImageRenderer) videoView.getRenderer()).setFilter(filter);
+    }
 
 }
