diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
index 896c2648..703cae2a 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
@@ -54,8 +54,8 @@
     protected int mGLAttribPosition;
     protected int mGLUniformTexture;
     protected int mGLAttribTextureCoordinate;
-    private int mOutputWidth;
-    private int mOutputHeight;
+    protected int mOutputWidth;
+    protected int mOutputHeight;
     private boolean mIsInitialized;
 
     public GPUImageFilter() {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
index 59b225b7..7ec43aba 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
@@ -23,6 +23,7 @@
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
+import java.util.ArrayList;
 import java.util.List;
 
 import static jp.co.cyberagent.android.gpuimage.GPUImageRenderer.CUBE;
@@ -34,7 +35,8 @@
  */
 public class GPUImageFilterGroup extends GPUImageFilter {
 
-    private final List<GPUImageFilter> mFilters;
+    protected List<GPUImageFilter> mFilters;
+    protected List<GPUImageFilter> mMergedFilters;
     private int[] mFrameBuffers;
     private int[] mFrameBufferTextures;
 
@@ -47,8 +49,14 @@
      *
      * @param filters the filters which represent this filter
      */
-    public GPUImageFilterGroup(final List<GPUImageFilter> filters) {
+    public GPUImageFilterGroup(List<GPUImageFilter> filters) 
+    {
         mFilters = filters;
+        if(mFilters==null)
+        	mFilters=new ArrayList<GPUImageFilter>();
+        else
+        	updateMergedFilters();
+        
         mGLCubeBuffer = ByteBuffer.allocateDirect(CUBE.length * 4)
                 .order(ByteOrder.nativeOrder())
                 .asFloatBuffer();
@@ -65,6 +73,14 @@ public GPUImageFilterGroup(final List<GPUImageFilter> filters) {
                 .asFloatBuffer();
         mGLTextureFlipBuffer.put(flipTexture).position(0);
     }
+    
+    public void addFilter(GPUImageFilter aFilter)
+    {
+    	if(aFilter==null)
+    		return;
+    	mFilters.add(aFilter);
+    	updateMergedFilters();
+    }
 
     /*
      * (non-Javadoc)
@@ -114,11 +130,16 @@ public void onOutputSizeChanged(final int width, final int height) {
         if (mFrameBuffers != null) {
             destroyFramebuffers();
         }
-        mFrameBuffers = new int[mFilters.size() - 1];
-        mFrameBufferTextures = new int[mFilters.size() - 1];
 
-        for (int i = 0; i < mFilters.size() - 1; i++) {
-            mFilters.get(i).onOutputSizeChanged(width, height);
+        int size=mFilters.size();
+        for (int i=0;i<size;i++)
+        	mFilters.get(i).onOutputSizeChanged(width, height);
+
+        size=mMergedFilters.size();
+        mFrameBuffers = new int[size - 1];
+        mFrameBufferTextures = new int[size - 1];
+
+        for (int i = 0; i < size - 1; i++) {
             GLES20.glGenFramebuffers(1, mFrameBuffers, i);
             GLES20.glGenTextures(1, mFrameBufferTextures, i);
             GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mFrameBufferTextures[i]);
@@ -140,7 +161,6 @@ public void onOutputSizeChanged(final int width, final int height) {
             GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
             GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
         }
-        mFilters.get(mFilters.size() - 1).onOutputSizeChanged(width, height);
     }
 
     /*
@@ -158,10 +178,10 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
          if (!isInitialized() || mFrameBuffers == null || mFrameBufferTextures == null) {
              return;
          }
-         int size=mFilters.size() ;
+         int size=mMergedFilters.size() ;
          int previousTexture = textureId;
          for (int i=0;i<size; i++) {
-             GPUImageFilter filter = mFilters.get(i);
+             GPUImageFilter filter = mMergedFilters.get(i);
              if(i<size-1)
              {
              	GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFrameBuffers[i]);
@@ -190,7 +210,39 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
      *
      * @return the filters
      */
-    public List<GPUImageFilter> getFilters() {
+    public List<GPUImageFilter> getFilters() 
+    {
         return mFilters;
     }
+
+    public List<GPUImageFilter> getMergedFilters() 
+    {
+        return mMergedFilters;
+    }
+
+    public void updateMergedFilters() 
+    {
+    	if(mFilters==null)
+    		return;
+
+    	if(mMergedFilters==null)
+    		mMergedFilters=new ArrayList<GPUImageFilter>();
+    	else
+    		mMergedFilters.clear();
+    	
+    	List<GPUImageFilter> filters;
+    	for(GPUImageFilter filter:mFilters)
+    	{
+    		if(filter instanceof GPUImageFilterGroup)
+    		{
+    			((GPUImageFilterGroup)filter).updateMergedFilters();
+    			filters=((GPUImageFilterGroup)filter).getMergedFilters();
+    			if(filters==null||filters.isEmpty())
+    				continue;
+    			mMergedFilters.addAll(filters);
+    			continue;
+    		}
+    		mMergedFilters.add(filter);
+    	}
+    }
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
index b7c1d6b9..ce4ecaeb 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter.java
@@ -16,16 +16,14 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.opengl.GLES20;
-import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
-
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 
+import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
+import android.graphics.Bitmap;
+import android.opengl.GLES20;
+
 public class GPUImageTwoInputFilter extends GPUImageFilter {
     private static final String VERTEX_SHADER = "attribute vec4 position;\n" +
             "attribute vec4 inputTextureCoordinate;\n" +
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
new file mode 100644
index 00000000..99004348
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter.java
@@ -0,0 +1,12 @@
+package jp.co.cyberagent.android.gpuimage;
+
+
+public class GPUImageTwoPassFilter extends GPUImageFilterGroup 
+{
+	public GPUImageTwoPassFilter(String firstVertexShader,String firstFragmentShader,String secondVertexShader,String secondFragmentShader) 
+	{
+		super(null);
+		mFilters.add(new GPUImageFilter(firstVertexShader,firstFragmentShader));
+		mFilters.add(new GPUImageFilter(secondVertexShader,secondFragmentShader));
+	}
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
new file mode 100644
index 00000000..fb4a69cf
--- /dev/null
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter.java
@@ -0,0 +1,59 @@
+package jp.co.cyberagent.android.gpuimage;
+
+import android.opengl.GLES20;
+
+public class GPUImageTwoPassTextureSamplingFilter extends GPUImageTwoPassFilter 
+{
+	protected int texelWidthOffsetLocation;
+	protected int texelHeightOffsetLocation;
+
+	public GPUImageTwoPassTextureSamplingFilter(String firstVertexShader,
+			String firstFragmentShader, String secondVertexShader,
+			String secondFragmentShader) 
+	{
+		super(firstVertexShader, firstFragmentShader, secondVertexShader,
+				secondFragmentShader);
+	}
+
+	@Override
+	public void onInit() 
+	{
+        super.onInit();
+        initTexelOffsets();
+    }
+	
+	protected void initTexelOffsets()
+	{
+		
+		float ratio=getHorizontalTexelOffsetRatio();
+		GPUImageFilter filter=mFilters.get(0);
+        int texelWidthOffsetLocation=GLES20.glGetUniformLocation(filter.getProgram(),"texelWidthOffset");
+        int texelHeightOffsetLocation=GLES20.glGetUniformLocation(filter.getProgram(),"texelHeightOffset");
+        filter.setFloat(texelWidthOffsetLocation,ratio/mOutputWidth);
+        filter.setFloat(texelHeightOffsetLocation,0);
+
+		ratio=getVerticalTexelOffsetRatio();
+        filter=mFilters.get(1);
+        texelWidthOffsetLocation=GLES20.glGetUniformLocation(filter.getProgram(),"texelWidthOffset");
+        texelHeightOffsetLocation=GLES20.glGetUniformLocation(filter.getProgram(),"texelHeightOffset");
+        filter.setFloat(texelWidthOffsetLocation,0);
+        filter.setFloat(texelHeightOffsetLocation,ratio/mOutputHeight);
+	}
+
+	@Override
+	public void onOutputSizeChanged(int width,int height) 
+    {
+		super.onOutputSizeChanged(width,height);
+        initTexelOffsets();
+	}
+	
+	public float getVerticalTexelOffsetRatio()
+	{
+		return 1f;
+	}
+
+	public float getHorizontalTexelOffsetRatio()
+	{
+		return 1f;
+	}
+}
