diff --git a/library/Android.mk b/library/Android.mk
index aa84ecf1..50ceaeca 100644
--- a/library/Android.mk
+++ b/library/Android.mk
@@ -4,7 +4,7 @@ include $(CLEAR_VARS)
 LOCAL_MODULE := gpuimage-library
 LOCAL_LDFLAGS := -Wl,--build-id
 LOCAL_LDLIBS := \
-	-llog \
+	-llog -lGLESv2 -ljnigraphics\
 
 LOCAL_SRC_FILES := \
 	jni/yuv-decoder.c \
diff --git a/library/build.gradle b/library/build.gradle
index 37c6796a..386627f3 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -19,7 +19,7 @@ android {
             stl "gnustl_shared"
             abiFilters = []
             abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
-            ldLibs "log"
+            ldLibs "log", "GLESv2", "jnigraphics"
         }
     }
 
diff --git a/library/jni/yuv-decoder.c b/library/jni/yuv-decoder.c
index fed6281e..115fd0fb 100644
--- a/library/jni/yuv-decoder.c
+++ b/library/jni/yuv-decoder.c
@@ -1,6 +1,10 @@
 #include <jni.h>
 #include <android/log.h>
 
+#include <android/bitmap.h>
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+
 
 JNIEXPORT void JNICALL Java_jp_co_cyberagent_android_gpuimage_GPUImageNativeLibrary_YUVtoRBGA(JNIEnv * env, jobject obj, jbyteArray yuv420sp, jint width, jint height, jintArray rgbOut)
 {
@@ -112,4 +116,37 @@ JNIEXPORT void JNICALL Java_jp_co_cyberagent_android_gpuimage_GPUImageNativeLibr
 
     (*env)->ReleasePrimitiveArrayCritical(env, rgbOut, rgbData, 0);
     (*env)->ReleasePrimitiveArrayCritical(env, yuv420sp, yuv, 0);
-}
\ No newline at end of file
+}
+
+JNIEXPORT void JNICALL Java_jp_co_cyberagent_android_gpuimage_GPUImageNativeLibrary_adjustBitmap(JNIEnv *jenv, jclass thiz, jobject src)
+{
+    unsigned char * srcByteBuffer;
+    int result = 0;
+    int i,j;
+    AndroidBitmapInfo srcInfo;
+
+    result = AndroidBitmap_getInfo(jenv, src, &srcInfo);
+    if(result != ANDROID_BITMAP_RESULT_SUCCESS) {
+        return;
+    }
+
+    result = AndroidBitmap_lockPixels(jenv,src,(void**)&srcByteBuffer);
+    if(result != ANDROID_BITMAP_RESULT_SUCCESS) {
+        return;
+    }
+
+    int width = srcInfo.width;
+    int height = srcInfo.height;
+    glReadPixels(0, 0, srcInfo.width, srcInfo.height, GL_RGBA, GL_UNSIGNED_BYTE, srcByteBuffer);
+
+    int *pIntBuffer = (int*)srcByteBuffer;
+
+    for(i = 0; i < height / 2; i++) {
+        for (j = 0; j < width; j++) {
+            int temp = pIntBuffer[(height - i - 1) * width + j];
+            pIntBuffer[(height - i - 1) * width + j] = pIntBuffer[i * width + j];
+            pIntBuffer[i * width + j] = temp;
+        }
+    }
+    AndroidBitmap_unlockPixels(jenv,src);
+}
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
index ce8c31b8..f747510b 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary.java
@@ -16,6 +16,8 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
+import android.graphics.Bitmap;
+
 public class GPUImageNativeLibrary {
     static {
         System.loadLibrary("gpuimage-library");
@@ -24,4 +26,6 @@
     public static native void YUVtoRBGA(byte[] yuv, int width, int height, int[] out);
 
     public static native void YUVtoARBG(byte[] yuv, int width, int height, int[] out);
+
+    public static native void adjustBitmap(Bitmap srcBitmap);
 }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index cc6a0247..89181b52 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -19,13 +19,14 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
-import android.opengl.GLES20;
 import android.opengl.GLSurfaceView;
-import android.os.*;
+import android.os.AsyncTask;
+import android.os.Build;
+import android.os.Environment;
+import android.os.Handler;
+import android.os.Looper;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.ViewTreeObserver;
@@ -35,7 +36,6 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
-import java.nio.IntBuffer;
 import java.util.concurrent.Semaphore;
 
 public class GPUImageView extends FrameLayout {
@@ -304,29 +304,18 @@ public Bitmap capture() throws InterruptedException {
         final int height = mGLSurfaceView.getMeasuredHeight();
 
         // Take picture on OpenGL thread
-        final int[] pixelMirroredArray = new int[width * height];
+        final Bitmap resultBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
         mGPUImage.runOnGLThread(new Runnable() {
             @Override
             public void run() {
-                final IntBuffer pixelBuffer = IntBuffer.allocate(width * height);
-                GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuffer);
-                int[] pixelArray = pixelBuffer.array();
-
-                // Convert upside down mirror-reversed image to right-side up normal image.
-                for (int i = 0; i < height; i++) {
-                    for (int j = 0; j < width; j++) {
-                        pixelMirroredArray[(height - i - 1) * width + j] = pixelArray[i * width + j];
-                    }
-                }
+                GPUImageNativeLibrary.adjustBitmap(resultBitmap);
                 waiter.release();
             }
         });
         requestRender();
         waiter.acquire();
 
-        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
-        bitmap.copyPixelsFromBuffer(IntBuffer.wrap(pixelMirroredArray));
-        return bitmap;
+        return resultBitmap;
     }
 
     /**
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
index fd9fe785..55f2d1c1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
@@ -190,15 +190,7 @@ private int getConfigAttrib(final EGLConfig config, final int attribute) {
     }
 
     private void convertToBitmap() {
-        IntBuffer ib = IntBuffer.allocate(mWidth * mHeight);
-        mGL.glReadPixels(0, 0, mWidth, mHeight, GL_RGBA, GL_UNSIGNED_BYTE, ib);
-
         mBitmap = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888);
-        mBitmap.copyPixelsFromBuffer(ib);
-
-        // Convert upside down mirror-reversed image to right-side up normal image.
-        Matrix matrix = new Matrix();
-        matrix.preScale(1.0f, -1.0f);
-        mBitmap = Bitmap.createBitmap(mBitmap, 0, 0, mWidth, mHeight, matrix, false);
+        GPUImageNativeLibrary.adjustBitmap(mBitmap);
     }
 }
