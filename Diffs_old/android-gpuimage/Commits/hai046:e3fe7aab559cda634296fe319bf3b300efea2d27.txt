diff --git a/haizhu_fs/camera_gpuimagefilter_fs b/haizhu_fs/camera_gpuimagefilter_fs
new file mode 100644
index 00000000..ffe0f85b
--- /dev/null
+++ b/haizhu_fs/camera_gpuimagefilter_fs
@@ -0,0 +1,16 @@
+varying highp vec2 textureCoordinate;
+ 
+uniform sampler2D inputImageTexture;
+ 
+uniform sampler2D uvTexture;
+precision mediump float;
+void main()
+{
+	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    gl_FragColor = y;//texture2D(inputImageTexture, textureCoordinate);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_gpuimagegrayscalefilter_fs b/haizhu_fs/camera_gpuimagegrayscalefilter_fs
new file mode 100644
index 00000000..f7885230
--- /dev/null
+++ b/haizhu_fs/camera_gpuimagegrayscalefilter_fs
@@ -0,0 +1,25 @@
+precision highp float;
+
+varying vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+
+const highp vec3 W = vec3(0.2125, 0.7154, 0.0721);
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+void main()
+{
+
+	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+  	lowp vec4 textureColor = y;//texture2D(inputImageTexture, textureCoordinate);
+  	float luminance = dot(textureColor.rgb, W);
+
+  	gl_FragColor = vec4(vec3(luminance), textureColor.a);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_gpuimagetonecurvefilter_fs b/haizhu_fs/camera_gpuimagetonecurvefilter_fs
new file mode 100644
index 00000000..b0e6c1f7
--- /dev/null
+++ b/haizhu_fs/camera_gpuimagetonecurvefilter_fs
@@ -0,0 +1,22 @@
+ varying highp vec2 textureCoordinate;
+ uniform sampler2D inputImageTexture;
+ uniform sampler2D toneCurveTexture;
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+ void main()
+ {
+   	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+     lowp vec4 textureColor =y;// texture2D(inputImageTexture, textureCoordinate);
+     lowp float redCurveValue = texture2D(toneCurveTexture, vec2(textureColor.r, 0.0)).r;
+     lowp float greenCurveValue = texture2D(toneCurveTexture, vec2(textureColor.g, 0.0)).g;
+     lowp float blueCurveValue = texture2D(toneCurveTexture, vec2(textureColor.b, 0.0)).b;
+
+     gl_FragColor = vec4(redCurveValue, greenCurveValue, blueCurveValue, textureColor.a);
+ }
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter01_fs b/haizhu_fs/camera_imagefilter01_fs
new file mode 100644
index 00000000..f9b3ec7b
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter01_fs
@@ -0,0 +1,35 @@
+precision lowp float;
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+void main()
+{
+    
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    vec4 texel = y;//texture2D(inputImageTexture, textureCoordinate);
+    vec3 papa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(papa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(papa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(papa1.b, texel.b)).b;
+    
+    vec4 mapped;
+    mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;
+    mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;
+    mapped.a = 1.0;
+    
+    gl_FragColor = mapped;
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter04_fs b/haizhu_fs/camera_imagefilter04_fs
new file mode 100644
index 00000000..dee5c53d
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter04_fs
@@ -0,0 +1,39 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+void main()
+{
+    
+    
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    
+    vec4 texel =y;// texture2D(inputImageTexture, textureCoordinate);
+    vec3 pa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(pa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(pa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(pa1.b, texel.b)).b;
+    
+    vec4 pa2;
+    pa2.r = texture2D(inputImageTexture4, vec2(texel.r, 0.0)).r;
+    pa2.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    pa2.b = texture2D(inputImageTexture4, vec2(texel.b, 1.0)).b;
+    pa2.a = 1.0;
+    
+    gl_FragColor = pa2;
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter05_fs b/haizhu_fs/camera_imagefilter05_fs
new file mode 100644
index 00000000..da9cb039
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter05_fs
@@ -0,0 +1,39 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+void main()
+{
+    
+    
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    
+    vec4 texel =y;// texture2D(inputImageTexture, textureCoordinate);
+    
+    vec3 pa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(pa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(pa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(pa1.b, texel.b)).b;
+    
+    vec4 pa2;
+    pa2.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;
+    pa2.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    pa2.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;
+    pa2.a = 1.0;
+    gl_FragColor = pa2;
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter06_fs b/haizhu_fs/camera_imagefilter06_fs
new file mode 100644
index 00000000..f01580f4
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter06_fs
@@ -0,0 +1,43 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+void main()
+{
+
+
+	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    
+    vec3 texel =y.rgb ;//texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 tc = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(tc, tc);
+    vec2 pa1 = vec2(d * 0.7, texel.r);
+    texel.r = texture2D(inputImageTexture3, pa1).r;
+    pa1.y = texel.g;
+    texel.g = texture2D(inputImageTexture3, pa1).g;
+    pa1.y = texel.b;
+    texel.b    = texture2D(inputImageTexture3, pa1).b;
+    
+    vec2 red = vec2(texel.r, 0.16666);
+    vec2 green = vec2(texel.g, 0.5);
+    vec2 blue = vec2(texel.b, .83333);
+    texel.r = texture2D(inputImageTexture2, red).r;
+    texel.g = texture2D(inputImageTexture2, green).g;
+    texel.b = texture2D(inputImageTexture2, blue).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+    
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter07_fs b/haizhu_fs/camera_imagefilter07_fs
new file mode 100644
index 00000000..5f16f074
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter07_fs
@@ -0,0 +1,35 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+uniform sampler2D uvTexture;
+precision mediump float;
+void main()
+{
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+  	
+    vec4 texel =y;// texture2D(inputImageTexture, textureCoordinate);
+    vec3 pa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(pa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(pa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(pa1.b, texel.b)).b;
+    
+    vec4 pa2;
+    pa2.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;
+    pa2.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    pa2.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;
+    pa2.a = 1.0;
+    
+    gl_FragColor = pa2;
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter08_fs b/haizhu_fs/camera_imagefilter08_fs
new file mode 100644
index 00000000..a3b865a0
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter08_fs
@@ -0,0 +1,39 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+
+uniform sampler2D uvTexture;
+precision mediump float;
+void main()
+{
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+  	
+    vec3 texel = y.rgb;//texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 r = vec2(texel.r, 0.16666);
+    vec2 g = vec2(texel.g, 0.5);
+    vec2 b = vec2(texel.b, 0.83333);
+    
+    texel.rgb = vec3(texture2D(inputImageTexture2, r).r,
+                     texture2D(inputImageTexture2, g).g,
+                     texture2D(inputImageTexture2, b).b);
+                     
+    vec2 pa1 = (2.0 * textureCoordinate) - 1.0;
+    vec2 pa2 = vec2(dot(pa1, pa1), texel.r);
+    texel.r = texture2D(inputImageTexture3, pa2).r;
+    pa2.y = texel.g;
+    texel.g = texture2D(inputImageTexture3, pa2).g;
+    pa2.y = texel.b;
+    texel.b = texture2D(inputImageTexture3, pa2).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter09_fs b/haizhu_fs/camera_imagefilter09_fs
new file mode 100644
index 00000000..13f6a5c6
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter09_fs
@@ -0,0 +1,100 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+uniform sampler2D inputImageTexture5;
+uniform sampler2D inputImageTexture6;
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+const mat3 saturate = mat3(
+                           1.210300,
+                           -0.089700,
+                           -0.091000,
+                           -0.176100,
+                           1.123900,
+                           -0.177400,
+                           -0.034200,
+                           -0.034200,
+                           1.265800);
+const vec3 rgbPrime = vec3(0.25098, 0.14640522, 0.0);
+const vec3 desaturate = vec3(.3, .59, .11);
+
+void main()
+{
+    
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    
+    
+    vec3 texel ;//= texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    
+    vec2 papa1;
+    papa1.y = 0.5;
+    
+    papa1.x = y.r;
+    texel.r = texture2D(inputImageTexture2, papa1).r;
+    
+    papa1.x = y.g;
+    texel.g = texture2D(inputImageTexture2, papa1).g;
+    
+    papa1.x = y.b;
+    texel.b = texture2D(inputImageTexture2, papa1).b;
+    
+    float papa2;
+    vec3 result;
+    papa2 = dot(desaturate, texel);
+    
+    
+    papa1.x = papa2;
+    result.r = texture2D(inputImageTexture3, papa1).r;
+    papa1.x = papa2;
+    result.g = texture2D(inputImageTexture3, papa1).g;
+    papa1.x = papa2;
+    result.b = texture2D(inputImageTexture3, papa1).b;
+    
+    texel = saturate * mix(texel, result, .5);
+    
+    vec2 tc = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(tc, tc);
+    
+    vec3 sampled;
+    papa1.y = .5;
+    
+    papa1 = vec2(d, texel.r);
+    texel.r = texture2D(inputImageTexture4, papa1).r;
+    papa1.y = texel.g;
+    texel.g = texture2D(inputImageTexture4, papa1).g;
+    papa1.y = texel.b;
+    texel.b = texture2D(inputImageTexture4, papa1).b;
+    float value = smoothstep(0.0, 1.25, pow(d, 1.35)/1.65);
+    
+    papa1.x = texel.r;
+    sampled.r = texture2D(inputImageTexture5, papa1).r;
+    papa1.x = texel.g;
+    sampled.g = texture2D(inputImageTexture5, papa1).g;
+    papa1.x = texel.b;
+    sampled.b = texture2D(inputImageTexture5, papa1).b;
+    texel = mix(sampled, texel, value);
+    
+    
+    papa1.x = texel.r;
+    texel.r = texture2D(inputImageTexture6, papa1).r;
+    papa1.x = texel.g;
+    texel.g = texture2D(inputImageTexture6, papa1).g;
+    papa1.x = texel.b;
+    texel.b = texture2D(inputImageTexture6, papa1).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter11_fs b/haizhu_fs/camera_imagefilter11_fs
new file mode 100644
index 00000000..9e739eb0
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter11_fs
@@ -0,0 +1,83 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+uniform sampler2D inputImageTexture5;
+uniform sampler2D inputImageTexture6;
+
+mat3 pa1 = mat3(
+                           1.105150,
+                           -0.044850,
+                           -0.046000,
+                           -0.088050,
+                           1.061950,
+                           -0.089200,
+                           -0.017100,
+                           -0.017100,
+                           1.132900);
+                           
+vec3 pa2 = vec3(.3, .59, .11);
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+void main()
+{
+    
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+    vec3 texel = y.rgb;//texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 pa3;
+    pa3.y = 0.5;
+    pa3.x = texel.r;
+    texel.r = texture2D(inputImageTexture2, pa3).r;
+    pa3.x = texel.g;
+    texel.g = texture2D(inputImageTexture2, pa3).g;
+    pa3.x = texel.b;
+    texel.b = texture2D(inputImageTexture2, pa3).b;
+    
+    texel = pa1 * texel;
+    
+    
+    vec2 pa4 = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(pa4, pa4);
+    vec3 pa5;
+    pa3.y = 0.5;
+    pa3.x = texel.r;
+    pa5.r = texture2D(inputImageTexture3, pa3).r;
+    pa3.x = texel.g;
+    pa5.g = texture2D(inputImageTexture3, pa3).g;
+    pa3.x = texel.b;
+    pa5.b = texture2D(inputImageTexture3, pa3).b;
+    float pa6 = smoothstep(0.0, 1.0, d);
+    texel = mix(pa5, texel, pa6);
+    
+    pa3.x = texel.r;
+    texel.r = texture2D(inputImageTexture4, pa3).r;
+    pa3.x = texel.g;
+    texel.g = texture2D(inputImageTexture4, pa3).g;
+    pa3.x = texel.b;
+    texel.b = texture2D(inputImageTexture4, pa3).b;
+    
+    
+    pa3.x = dot(texel, pa2);
+    texel = mix(texture2D(inputImageTexture5, pa3).rgb, texel, .5);
+    
+    pa3.x = texel.r;
+    texel.r = texture2D(inputImageTexture6, pa3).r;
+    pa3.x = texel.g;
+    texel.g = texture2D(inputImageTexture6, pa3).g;
+    pa3.x = texel.b;
+    texel.b = texture2D(inputImageTexture6, pa3).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter12_fs b/haizhu_fs/camera_imagefilter12_fs
new file mode 100644
index 00000000..5d7e16db
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter12_fs
@@ -0,0 +1,42 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+void main()
+{
+    
+   	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+ 
+    
+    vec3 texel ;
+    //= texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    
+    texel = vec3(
+                 texture2D(inputImageTexture2, vec2(y.r, .16666)).r,
+                 texture2D(inputImageTexture2, vec2(y.g, .5)).g,
+                 texture2D(inputImageTexture2, vec2(y.b, .83333)).b);
+                 
+    vec2 pa1 = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(pa1, pa1);
+    vec2 pa2 = vec2(d, texel.r);
+    texel.r = texture2D(inputImageTexture3, pa2).r;
+    pa2.y = texel.g;
+    texel.g = texture2D(inputImageTexture3, pa2).g;
+    pa2.y = texel.b;
+    texel.b = texture2D(inputImageTexture3, pa2).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter15_fs b/haizhu_fs/camera_imagefilter15_fs
new file mode 100644
index 00000000..95c5554a
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter15_fs
@@ -0,0 +1,28 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+void main()
+{
+
+	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+  	
+    vec3 texel = y.rgb;
+    texel = vec3(
+                 texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,
+                 texture2D(inputImageTexture2, vec2(texel.g, .5)).g,
+                 texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter16_fs b/haizhu_fs/camera_imagefilter16_fs
new file mode 100644
index 00000000..a25db843
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter16_fs
@@ -0,0 +1,27 @@
+precision mediump float;
+precision lowp float;
+varying highp vec2 textureCoordinate;
+uniform sampler2D inputImageTexture;
+uniform sampler2D uvTexture;
+uniform sampler2D inputImageTexture2;
+
+void main()
+{
+	vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+  	//gl_FragColor = y;    
+ 
+ 
+    vec3 texel;
+    texel.r = texture2D(inputImageTexture2, vec2(y.r, 0.5)).r;
+    
+    texel.g = texture2D(inputImageTexture2,  vec2(y.g, 0.5)).g;
+    
+    texel.b = texture2D(inputImageTexture2,  vec2(y.b, 0.5)).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/camera_imagefilter17_fs b/haizhu_fs/camera_imagefilter17_fs
new file mode 100644
index 00000000..a980cf9e
--- /dev/null
+++ b/haizhu_fs/camera_imagefilter17_fs
@@ -0,0 +1,29 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+
+uniform sampler2D uvTexture;
+precision mediump float;
+
+void main()
+{
+    
+    vec4 y = vec4((texture2D(inputImageTexture, textureCoordinate).r - 16./255.) * 1.164);  
+  	vec4 u = vec4(texture2D(uvTexture, textureCoordinate).a - 128./255.);  
+  	vec4 v = vec4(texture2D(uvTexture, textureCoordinate).r - 128./255.);  
+  	y += v * vec4(1.596, -0.813, 0, 0);
+  	y += u * vec4(0, -0.392, 2.017, 0);  
+  	y.a = 1.0;
+  	
+    vec3 texel = y.rgb;
+    
+    texel = vec3(
+                 texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,
+                 texture2D(inputImageTexture2, vec2(texel.g, .5)).g,
+                 texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);
+                 
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/gpuimagefilter_fs b/haizhu_fs/gpuimagefilter_fs
new file mode 100644
index 00000000..07f6790b
--- /dev/null
+++ b/haizhu_fs/gpuimagefilter_fs
@@ -0,0 +1,9 @@
+varying highp vec2 textureCoordinate;
+ 
+uniform sampler2D inputImageTexture;
+
+void main()
+{
+	 
+    gl_FragColor = texture2D(inputImageTexture, textureCoordinate);
+}
\ No newline at end of file
diff --git a/haizhu_fs/gpuimagegrayscalefilter_fs b/haizhu_fs/gpuimagegrayscalefilter_fs
new file mode 100644
index 00000000..4f8d7343
--- /dev/null
+++ b/haizhu_fs/gpuimagegrayscalefilter_fs
@@ -0,0 +1,15 @@
+precision highp float;
+
+varying vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+
+const highp vec3 W = vec3(0.2125, 0.7154, 0.0721);
+
+void main()
+{
+  lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
+  float luminance = dot(textureColor.rgb, W);
+
+  gl_FragColor = vec4(vec3(luminance), textureColor.a);
+}
\ No newline at end of file
diff --git a/haizhu_fs/gpuimagetonecurvefilter_fs b/haizhu_fs/gpuimagetonecurvefilter_fs
new file mode 100644
index 00000000..45357736
--- /dev/null
+++ b/haizhu_fs/gpuimagetonecurvefilter_fs
@@ -0,0 +1,13 @@
+ varying highp vec2 textureCoordinate;
+ uniform sampler2D inputImageTexture;
+ uniform sampler2D toneCurveTexture;
+
+ void main()
+ {
+     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
+     lowp float redCurveValue = texture2D(toneCurveTexture, vec2(textureColor.r, 0.0)).r;
+     lowp float greenCurveValue = texture2D(toneCurveTexture, vec2(textureColor.g, 0.0)).g;
+     lowp float blueCurveValue = texture2D(toneCurveTexture, vec2(textureColor.b, 0.0)).b;
+
+     gl_FragColor = vec4(redCurveValue, greenCurveValue, blueCurveValue, textureColor.a);
+ }
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter01_fs b/haizhu_fs/imagefilter01_fs
new file mode 100644
index 00000000..5e365d7c
--- /dev/null
+++ b/haizhu_fs/imagefilter01_fs
@@ -0,0 +1,26 @@
+precision lowp float;
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+void main()
+{
+    
+    vec4 texel = texture2D(inputImageTexture, textureCoordinate);
+    vec3 papa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(papa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(papa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(papa1.b, texel.b)).b;
+    
+    vec4 mapped;
+    mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;
+    mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;
+    mapped.a = 1.0;
+    
+    gl_FragColor = mapped;
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter04_fs b/haizhu_fs/imagefilter04_fs
new file mode 100644
index 00000000..c433473c
--- /dev/null
+++ b/haizhu_fs/imagefilter04_fs
@@ -0,0 +1,27 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+void main()
+{
+    
+    vec4 texel = texture2D(inputImageTexture, textureCoordinate);
+    vec3 pa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(pa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(pa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(pa1.b, texel.b)).b;
+    
+    vec4 pa2;
+    pa2.r = texture2D(inputImageTexture4, vec2(texel.r, 0.0)).r;
+    pa2.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    pa2.b = texture2D(inputImageTexture4, vec2(texel.b, 1.0)).b;
+    pa2.a = 1.0;
+    
+    gl_FragColor = pa2;
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter05_fs b/haizhu_fs/imagefilter05_fs
new file mode 100644
index 00000000..75a01944
--- /dev/null
+++ b/haizhu_fs/imagefilter05_fs
@@ -0,0 +1,27 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+void main()
+{
+    
+    vec4 texel = texture2D(inputImageTexture, textureCoordinate);
+    
+    vec3 pa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(pa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(pa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(pa1.b, texel.b)).b;
+    
+    vec4 pa2;
+    pa2.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;
+    pa2.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    pa2.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;
+    pa2.a = 1.0;
+    gl_FragColor = pa2;
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter06_fs b/haizhu_fs/imagefilter06_fs
new file mode 100644
index 00000000..bc4ec1ad
--- /dev/null
+++ b/haizhu_fs/imagefilter06_fs
@@ -0,0 +1,32 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+
+void main()
+{
+    
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 tc = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(tc, tc);
+    vec2 pa1 = vec2(d * 0.7, texel.r);
+    texel.r = texture2D(inputImageTexture3, pa1).r;
+    pa1.y = texel.g;
+    texel.g = texture2D(inputImageTexture3, pa1).g;
+    pa1.y = texel.b;
+    texel.b    = texture2D(inputImageTexture3, pa1).b;
+    
+    vec2 red = vec2(texel.r, 0.16666);
+    vec2 green = vec2(texel.g, 0.5);
+    vec2 blue = vec2(texel.b, .83333);
+    texel.r = texture2D(inputImageTexture2, red).r;
+    texel.g = texture2D(inputImageTexture2, green).g;
+    texel.b = texture2D(inputImageTexture2, blue).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+    
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter07_fs b/haizhu_fs/imagefilter07_fs
new file mode 100644
index 00000000..26112ac9
--- /dev/null
+++ b/haizhu_fs/imagefilter07_fs
@@ -0,0 +1,27 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+
+void main()
+{
+    
+    vec4 texel = texture2D(inputImageTexture, textureCoordinate);
+    vec3 pa1 = texture2D(inputImageTexture2, textureCoordinate).rgb;
+    
+    texel.r = texture2D(inputImageTexture3, vec2(pa1.r, texel.r)).r;
+    texel.g = texture2D(inputImageTexture3, vec2(pa1.g, texel.g)).g;
+    texel.b = texture2D(inputImageTexture3, vec2(pa1.b, texel.b)).b;
+    
+    vec4 pa2;
+    pa2.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;
+    pa2.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;
+    pa2.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;
+    pa2.a = 1.0;
+    
+    gl_FragColor = pa2;
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter08_fs b/haizhu_fs/imagefilter08_fs
new file mode 100644
index 00000000..97b1e4fa
--- /dev/null
+++ b/haizhu_fs/imagefilter08_fs
@@ -0,0 +1,31 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+
+void main()
+{
+    
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 r = vec2(texel.r, 0.16666);
+    vec2 g = vec2(texel.g, 0.5);
+    vec2 b = vec2(texel.b, 0.83333);
+    
+    texel.rgb = vec3(texture2D(inputImageTexture2, r).r,
+                     texture2D(inputImageTexture2, g).g,
+                     texture2D(inputImageTexture2, b).b);
+                     
+    vec2 pa1 = (2.0 * textureCoordinate) - 1.0;
+    vec2 pa2 = vec2(dot(pa1, pa1), texel.r);
+    texel.r = texture2D(inputImageTexture3, pa2).r;
+    pa2.y = texel.g;
+    texel.g = texture2D(inputImageTexture3, pa2).g;
+    pa2.y = texel.b;
+    texel.b = texture2D(inputImageTexture3, pa2).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter09_fs b/haizhu_fs/imagefilter09_fs
new file mode 100644
index 00000000..85dc0f6a
--- /dev/null
+++ b/haizhu_fs/imagefilter09_fs
@@ -0,0 +1,88 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+uniform sampler2D inputImageTexture5;
+uniform sampler2D inputImageTexture6;
+
+const mat3 saturate = mat3(
+                           1.210300,
+                           -0.089700,
+                           -0.091000,
+                           -0.176100,
+                           1.123900,
+                           -0.177400,
+                           -0.034200,
+                           -0.034200,
+                           1.265800);
+const vec3 rgbPrime = vec3(0.25098, 0.14640522, 0.0);
+const vec3 desaturate = vec3(.3, .59, .11);
+
+void main()
+{
+    
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    
+    vec2 papa1;
+    papa1.y = 0.5;
+    
+    papa1.x = texel.r;
+    texel.r = texture2D(inputImageTexture2, papa1).r;
+    
+    papa1.x = texel.g;
+    texel.g = texture2D(inputImageTexture2, papa1).g;
+    
+    papa1.x = texel.b;
+    texel.b = texture2D(inputImageTexture2, papa1).b;
+    
+    float papa2;
+    vec3 result;
+    papa2 = dot(desaturate, texel);
+    
+    
+    papa1.x = papa2;
+    result.r = texture2D(inputImageTexture3, papa1).r;
+    papa1.x = papa2;
+    result.g = texture2D(inputImageTexture3, papa1).g;
+    papa1.x = papa2;
+    result.b = texture2D(inputImageTexture3, papa1).b;
+    
+    texel = saturate * mix(texel, result, .5);
+    
+    vec2 tc = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(tc, tc);
+    
+    vec3 sampled;
+    papa1.y = .5;
+    
+    papa1 = vec2(d, texel.r);
+    texel.r = texture2D(inputImageTexture4, papa1).r;
+    papa1.y = texel.g;
+    texel.g = texture2D(inputImageTexture4, papa1).g;
+    papa1.y = texel.b;
+    texel.b = texture2D(inputImageTexture4, papa1).b;
+    float value = smoothstep(0.0, 1.25, pow(d, 1.35)/1.65);
+    
+    papa1.x = texel.r;
+    sampled.r = texture2D(inputImageTexture5, papa1).r;
+    papa1.x = texel.g;
+    sampled.g = texture2D(inputImageTexture5, papa1).g;
+    papa1.x = texel.b;
+    sampled.b = texture2D(inputImageTexture5, papa1).b;
+    texel = mix(sampled, texel, value);
+    
+    
+    papa1.x = texel.r;
+    texel.r = texture2D(inputImageTexture6, papa1).r;
+    papa1.x = texel.g;
+    texel.g = texture2D(inputImageTexture6, papa1).g;
+    papa1.x = texel.b;
+    texel.b = texture2D(inputImageTexture6, papa1).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter11_fs b/haizhu_fs/imagefilter11_fs
new file mode 100644
index 00000000..f0432895
--- /dev/null
+++ b/haizhu_fs/imagefilter11_fs
@@ -0,0 +1,74 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+uniform sampler2D inputImageTexture4;
+uniform sampler2D inputImageTexture5;
+uniform sampler2D inputImageTexture6;
+
+mat3 pa1 = mat3(
+                           1.105150,
+                           -0.044850,
+                           -0.046000,
+                           -0.088050,
+                           1.061950,
+                           -0.089200,
+                           -0.017100,
+                           -0.017100,
+                           1.132900);
+                           
+vec3 pa2 = vec3(.3, .59, .11);
+
+void main()
+{
+    
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 pa3;
+    pa3.y = 0.5;
+    pa3.x = texel.r;
+    texel.r = texture2D(inputImageTexture2, pa3).r;
+    pa3.x = texel.g;
+    texel.g = texture2D(inputImageTexture2, pa3).g;
+    pa3.x = texel.b;
+    texel.b = texture2D(inputImageTexture2, pa3).b;
+    
+    texel = pa1 * texel;
+    
+    
+    vec2 pa4 = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(pa4, pa4);
+    vec3 pa5;
+    pa3.y = 0.5;
+    pa3.x = texel.r;
+    pa5.r = texture2D(inputImageTexture3, pa3).r;
+    pa3.x = texel.g;
+    pa5.g = texture2D(inputImageTexture3, pa3).g;
+    pa3.x = texel.b;
+    pa5.b = texture2D(inputImageTexture3, pa3).b;
+    float pa6 = smoothstep(0.0, 1.0, d);
+    texel = mix(pa5, texel, pa6);
+    
+    pa3.x = texel.r;
+    texel.r = texture2D(inputImageTexture4, pa3).r;
+    pa3.x = texel.g;
+    texel.g = texture2D(inputImageTexture4, pa3).g;
+    pa3.x = texel.b;
+    texel.b = texture2D(inputImageTexture4, pa3).b;
+    
+    
+    pa3.x = dot(texel, pa2);
+    texel = mix(texture2D(inputImageTexture5, pa3).rgb, texel, .5);
+    
+    pa3.x = texel.r;
+    texel.r = texture2D(inputImageTexture6, pa3).r;
+    pa3.x = texel.g;
+    texel.g = texture2D(inputImageTexture6, pa3).g;
+    pa3.x = texel.b;
+    texel.b = texture2D(inputImageTexture6, pa3).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter12_fs b/haizhu_fs/imagefilter12_fs
new file mode 100644
index 00000000..7408da68
--- /dev/null
+++ b/haizhu_fs/imagefilter12_fs
@@ -0,0 +1,29 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+uniform sampler2D inputImageTexture3;
+
+void main()
+{
+    
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    texel = vec3(
+                 texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,
+                 texture2D(inputImageTexture2, vec2(texel.g, .5)).g,
+                 texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);
+                 
+    vec2 pa1 = (2.0 * textureCoordinate) - 1.0;
+    float d = dot(pa1, pa1);
+    vec2 pa2 = vec2(d, texel.r);
+    texel.r = texture2D(inputImageTexture3, pa2).r;
+    pa2.y = texel.g;
+    texel.g = texture2D(inputImageTexture3, pa2).g;
+    pa2.y = texel.b;
+    texel.b = texture2D(inputImageTexture3, pa2).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter15_fs b/haizhu_fs/imagefilter15_fs
new file mode 100644
index 00000000..d2543f3f
--- /dev/null
+++ b/haizhu_fs/imagefilter15_fs
@@ -0,0 +1,16 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+
+void main()
+{
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    texel = vec3(
+                 texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,
+                 texture2D(inputImageTexture2, vec2(texel.g, .5)).g,
+                 texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter16_fs b/haizhu_fs/imagefilter16_fs
new file mode 100644
index 00000000..95bad78d
--- /dev/null
+++ b/haizhu_fs/imagefilter16_fs
@@ -0,0 +1,25 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+
+void main()
+{
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    vec2 pa1;
+    pa1.y = .5;
+    
+    pa1.x = texel.r;
+    texel.r = texture2D(inputImageTexture2, pa1).r;
+    
+    pa1.x = texel.g;
+    texel.g = texture2D(inputImageTexture2, pa1).g;
+    
+    pa1.x = texel.b;
+    texel.b = texture2D(inputImageTexture2, pa1).b;
+    
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
diff --git a/haizhu_fs/imagefilter17_fs b/haizhu_fs/imagefilter17_fs
new file mode 100644
index 00000000..811322f2
--- /dev/null
+++ b/haizhu_fs/imagefilter17_fs
@@ -0,0 +1,19 @@
+precision lowp float;
+
+varying highp vec2 textureCoordinate;
+
+uniform sampler2D inputImageTexture;
+uniform sampler2D inputImageTexture2;
+
+void main()
+{
+    
+    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;
+    
+    texel = vec3(
+                 texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,
+                 texture2D(inputImageTexture2, vec2(texel.g, .5)).g,
+                 texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);
+                 
+    gl_FragColor = vec4(texel, 1.0);
+}
\ No newline at end of file
