diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 823609b8..b3f30b60 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -16,6 +16,15 @@
 
 package jp.co.cyberagent.android.gpuimage;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.util.List;
+import java.util.concurrent.Semaphore;
+
 import android.annotation.TargetApi;
 import android.app.ActivityManager;
 import android.content.Context;
@@ -38,12 +47,6 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import java.io.*;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
  * tasks through a simple interface.
@@ -221,6 +224,7 @@ public void setImage(final File file) {
         new LoadImageFileTask(this, file).execute();
     }
 
+    /*
     private String getPath(final Uri uri) {
         String[] projection = {
                 MediaStore.Images.Media.DATA,
@@ -235,7 +239,8 @@ private String getPath(final Uri uri) {
         cursor.close();
         return path;
     }
-
+	*/
+    
     /**
      * Gets the current displayed image with applied filter as a Bitmap.
      * 
@@ -356,7 +361,8 @@ public void saveToPictures(final Bitmap bitmap, final String folderName, final S
         new SaveTask(bitmap, folderName, fileName, listener).execute();
     }
 
-    private int getOutputWidth() {
+    @SuppressWarnings("deprecation")
+	private int getOutputWidth() {
         if (mRenderer != null && mRenderer.getFrameWidth() != 0) {
             return mRenderer.getFrameWidth();
         } else if (mCurrentBitmap != null) {
@@ -369,7 +375,8 @@ private int getOutputWidth() {
         }
     }
 
-    private int getOutputHeight() {
+    @SuppressWarnings("deprecation")
+	private int getOutputHeight() {
         if (mRenderer != null && mRenderer.getFrameHeight() != 0) {
             return mRenderer.getFrameHeight();
         } else if (mCurrentBitmap != null) {
@@ -519,7 +526,6 @@ protected int getImageOrientation() throws IOException {
         private int mOutputWidth;
         private int mOutputHeight;
 
-        @SuppressWarnings("deprecation")
         public LoadImageTask(final GPUImage gpuImage) {
             mGPUImage = gpuImage;
         }
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
index cc710d44..a980dfb5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter.java
@@ -99,7 +99,8 @@ protected void onDrawArraysPre() {
 
     public void setFromCurveFileInputStream(InputStream input) {
         try {
-            int version = readShort(input);
+            @SuppressWarnings("unused")
+			int version = readShort(input);
             int totalCurves = readShort(input);
 
             ArrayList<PointF[]> curves = new ArrayList<PointF[]>(totalCurves);
