diff --git a/build.gradle b/build.gradle
index dc1fe785..69c8683f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.0-beta1'
+        classpath 'com.android.tools.build:gradle:2.3.0'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/gradle.properties b/gradle.properties
index 40c44d7f..737a43c8 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -5,7 +5,7 @@ ARTIFACT_ID=gpuimage-library
 COMPILE_SDK_VERSION=23
 BUILD_TOOLS_VERSION=23.0.2
 TARGET_SDK_VERSION=23
-MIN_SDK_VERSION=8
+MIN_SDK_VERSION=18
 
 POM_DESCRIPTION=Image filters for Android with OpenGL (based on GPUImage for iOS)
 POM_URL=https://github.com/cyberagent/android-gpuimage
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6c0732ab..71423c85 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Dec 06 18:27:05 JST 2014
+#Mon Mar 20 10:46:54 KST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 01ef9558..86fb8788 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -40,6 +40,7 @@ android {
     lintOptions {
         abortOnError false
     }
+    buildToolsVersion '25.0.0'
 }
 
 task androidJavadocs(type: Javadoc) {
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
index 8392a5a9..9893e799 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -25,12 +25,10 @@
 import android.graphics.Bitmap.CompressFormat;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-import android.graphics.PixelFormat;
 import android.hardware.Camera;
 import android.media.ExifInterface;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
-import android.opengl.GLSurfaceView;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Environment;
@@ -42,7 +40,6 @@
 import java.io.*;
 import java.net.URL;
 import java.util.List;
-import java.util.concurrent.Semaphore;
 
 /**
  * The main accessor for GPUImage functionality. This class helps to do common
@@ -51,7 +48,7 @@
 public class GPUImage {
     private final Context mContext;
     private final GPUImageRenderer mRenderer;
-    private GLSurfaceView mGlSurfaceView;
+    private GLTextureView mGLTextureView;
     private GPUImageFilter mFilter;
     private Bitmap mCurrentBitmap;
     private ScaleType mScaleType = ScaleType.CENTER_CROP;
@@ -86,18 +83,18 @@ private boolean supportsOpenGLES2(final Context context) {
     }
 
     /**
-     * Sets the GLSurfaceView which will display the preview.
+     * Sets the GLTextureView which will display the preview.
      *
-     * @param view the GLSurfaceView
+     * @param view the GLTextureView
      */
-    public void setGLSurfaceView(final GLSurfaceView view) {
-        mGlSurfaceView = view;
-        mGlSurfaceView.setEGLContextClientVersion(2);
-        mGlSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
-        mGlSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);
-        mGlSurfaceView.setRenderer(mRenderer);
-        mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
-        mGlSurfaceView.requestRender();
+    public void setGLTextureView(final GLTextureView view) {
+        mGLTextureView = view;
+        mGLTextureView.setEGLContextClientVersion(2);
+        mGLTextureView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
+        mGLTextureView.setOpaque(false);
+        mGLTextureView.setRenderer(mRenderer);
+        mGLTextureView.setRenderMode(GLTextureView.RENDERMODE_WHEN_DIRTY);
+        mGLTextureView.requestRender();
     }
 
     /**
@@ -115,8 +112,8 @@ public void setBackgroundColor(float red, float green, float blue) {
      * Request the preview to be rendered again.
      */
     public void requestRender() {
-        if (mGlSurfaceView != null) {
-            mGlSurfaceView.requestRender();
+        if (mGLTextureView != null) {
+            mGLTextureView.requestRender();
         }
     }
 
@@ -139,7 +136,7 @@ public void setUpCamera(final Camera camera) {
      */
     public void setUpCamera(final Camera camera, final int degrees, final boolean flipHorizontal,
             final boolean flipVertical) {
-        mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
+        mGLTextureView.setRenderMode(GLTextureView.RENDERMODE_CONTINUOUSLY);
         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
             setUpCameraGingerbread(camera);
         } else {
@@ -279,7 +276,7 @@ public Bitmap getBitmapWithFilterApplied() {
      * @return the bitmap with filter applied
      */
     public Bitmap getBitmapWithFilterApplied(final Bitmap bitmap) {
-        if (mGlSurfaceView != null) {
+        if (mGLTextureView != null) {
             mRenderer.deleteImage();
             mRenderer.runOnDraw(new Runnable() {
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index 691550bd..a7af3f00 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -24,7 +24,6 @@
 import android.hardware.Camera.PreviewCallback;
 import android.hardware.Camera.Size;
 import android.opengl.GLES20;
-import android.opengl.GLSurfaceView.Renderer;
 
 import jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil;
 
@@ -41,7 +40,7 @@
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 
 @TargetApi(11)
-public class GPUImageRenderer implements Renderer, PreviewCallback {
+public class GPUImageRenderer implements GLTextureView.Renderer, PreviewCallback {
     public static final int NO_IMAGE = -1;
     static final float CUBE[] = {
             -1.0f, -1.0f,
@@ -113,6 +112,11 @@ public void onSurfaceChanged(final GL10 gl, final int width, final int height) {
         }
     }
 
+    @Override
+    public void onSurfaceDestroyed(GL10 gl) {
+
+    }
+
     @Override
     public void onDrawFrame(final GL10 gl) {
         GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index cc6a0247..804a1842 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -19,12 +19,9 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.opengl.GLES20;
-import android.opengl.GLSurfaceView;
 import android.os.*;
 import android.util.AttributeSet;
 import android.view.Gravity;
@@ -40,7 +37,7 @@
 
 public class GPUImageView extends FrameLayout {
 
-    private GLSurfaceView mGLSurfaceView;
+    private GLTextureView mGLTextureView;
     private GPUImage mGPUImage;
     private GPUImageFilter mFilter;
     public Size mForceSize = null;
@@ -57,10 +54,10 @@ public GPUImageView(Context context, AttributeSet attrs) {
     }
 
     private void init(Context context, AttributeSet attrs) {
-        mGLSurfaceView = new GPUImageGLSurfaceView(context, attrs);
-        addView(mGLSurfaceView);
+        mGLTextureView = new GPUImageGLTextureView(context, attrs);
+        addView(mGLTextureView);
         mGPUImage = new GPUImage(getContext());
-        mGPUImage.setGLSurfaceView(mGLSurfaceView);
+        mGPUImage.setGLTextureView(mGLTextureView);
     }
 
     @Override
@@ -110,7 +107,7 @@ public void setBackgroundColor(float red, float green, float blue) {
     // TODO Should be an xml attribute. But then GPUImage can not be distributed as .jar anymore.
     public void setRatio(float ratio) {
         mRatio = ratio;
-        mGLSurfaceView.requestLayout();
+        mGLTextureView.requestLayout();
         mGPUImage.deleteImage();
     }
 
@@ -181,7 +178,7 @@ public void setImage(final File file) {
     }
 
     public void requestRender() {
-        mGLSurfaceView.requestRender();
+        mGLTextureView.requestRender();
     }
 
     /**
@@ -255,7 +252,7 @@ public void run() {
                 // Show loading
                 addView(new LoadingView(getContext()));
 
-                mGLSurfaceView.requestLayout();
+                mGLTextureView.requestLayout();
             }
         });
         waiter.acquire();
@@ -276,7 +273,7 @@ public void run() {
         post(new Runnable() {
             @Override
             public void run() {
-                mGLSurfaceView.requestLayout();
+                mGLTextureView.requestLayout();
             }
         });
         requestRender();
@@ -300,8 +297,8 @@ public void run() {
     public Bitmap capture() throws InterruptedException {
         final Semaphore waiter = new Semaphore(0);
 
-        final int width = mGLSurfaceView.getMeasuredWidth();
-        final int height = mGLSurfaceView.getMeasuredHeight();
+        final int width = mGLTextureView.getMeasuredWidth();
+        final int height = mGLTextureView.getMeasuredHeight();
 
         // Take picture on OpenGL thread
         final int[] pixelMirroredArray = new int[width * height];
@@ -330,17 +327,17 @@ public void run() {
     }
 
     /**
-     * Pauses the GLSurfaceView.
+     * Pauses the GLTextureView.
      */
     public void onPause() {
-        mGLSurfaceView.onPause();
+        mGLTextureView.onPause();
     }
 
     /**
-     * Resumes the GLSurfaceView.
+     * Resumes the GLTextureView.
      */
     public void onResume() {
-        mGLSurfaceView.onResume();
+        mGLTextureView.onResume();
     }
 
     public static class Size {
@@ -353,12 +350,12 @@ public Size(int width, int height) {
         }
     }
 
-    private class GPUImageGLSurfaceView extends GLSurfaceView {
-        public GPUImageGLSurfaceView(Context context) {
+    private class GPUImageGLTextureView extends GLTextureView {
+        public GPUImageGLTextureView(Context context) {
             super(context);
         }
 
-        public GPUImageGLSurfaceView(Context context, AttributeSet attrs) {
+        public GPUImageGLTextureView(Context context, AttributeSet attrs) {
             super(context, attrs);
         }
 
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
index ac23f599..1da39dd5 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/PixelBuffer.java
@@ -32,14 +32,13 @@
 import javax.microedition.khronos.opengles.GL10;
 
 import android.graphics.Bitmap;
-import android.opengl.GLSurfaceView;
 import android.util.Log;
 
 public class PixelBuffer {
     final static String TAG = "PixelBuffer";
     final static boolean LIST_CONFIGS = false;
 
-    GLSurfaceView.Renderer mRenderer; // borrow this interface
+    GLTextureView.Renderer mRenderer; // borrow this interface
     int mWidth, mHeight;
     Bitmap mBitmap;
 
@@ -89,7 +88,7 @@ public PixelBuffer(final int width, final int height) {
         mThreadOwner = Thread.currentThread().getName();
     }
 
-    public void setRenderer(final GLSurfaceView.Renderer renderer) {
+    public void setRenderer(final GLTextureView.Renderer renderer) {
         mRenderer = renderer;
 
         // Does this thread own the OpenGL context?
diff --git a/sample/build.gradle b/sample/build.gradle
index f64f4a42..14a496f9 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -26,6 +26,7 @@ android {
     lintOptions {
         abortOnError true
     }
+    buildToolsVersion '25.0.0'
 }
 repositories {
     jcenter()
diff --git a/sample/res/layout/activity_camera.xml b/sample/res/layout/activity_camera.xml
index c0f357b5..0f571908 100644
--- a/sample/res/layout/activity_camera.xml
+++ b/sample/res/layout/activity_camera.xml
@@ -3,7 +3,7 @@
     android:layout_height="match_parent"
     android:orientation="vertical" >
 
-    <android.opengl.GLSurfaceView
+    <jp.co.cyberagent.android.gpuimage.GLTextureView
         android:id="@+id/surfaceView"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
index ed5ba8bd..2cecad57 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityCamera.java
@@ -23,7 +23,6 @@
 import android.hardware.Camera.CameraInfo;
 import android.hardware.Camera.Parameters;
 import android.net.Uri;
-import android.opengl.GLSurfaceView;
 import android.os.Bundle;
 import android.os.Environment;
 import android.util.Log;
@@ -40,6 +39,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
+import jp.co.cyberagent.android.gpuimage.GLTextureView;
 import jp.co.cyberagent.android.gpuimage.GPUImage;
 import jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
@@ -73,7 +73,7 @@ public void onCreate(final Bundle savedInstanceState) {
         findViewById(R.id.button_record).setOnClickListener(this);
 
         mGPUImage = new GPUImage(this);
-        mGPUImage.setGLSurfaceView((GLSurfaceView) findViewById(R.id.surfaceView));
+        mGPUImage.setGLTextureView((GLTextureView) findViewById(R.id.surfaceView));
 
         mMovieWriter = new GPUImageMovieWriter();
         mGPUImage.setFilter(mMovieWriter);
@@ -191,8 +191,8 @@ public void onPictureTaken(byte[] data, final Camera camera) {
                         data = null;
                         Bitmap bitmap = BitmapFactory.decodeFile(pictureFile.getAbsolutePath());
                         // mGPUImage.setImage(bitmap);
-                        final GLSurfaceView view = (GLSurfaceView) findViewById(R.id.surfaceView);
-                        view.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
+                        final GLTextureView view = (GLTextureView) findViewById(R.id.surfaceView);
+                        view.setRenderMode(GLTextureView.RENDERMODE_WHEN_DIRTY);
                         mGPUImage.saveToPictures(bitmap, "GPUImage",
                                 System.currentTimeMillis() + ".jpg",
                                 new OnPictureSavedListener() {
@@ -202,7 +202,7 @@ public void onPictureSaved(final Uri
                                             uri) {
                                         pictureFile.delete();
                                         camera.startPreview();
-                                        view.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
+                                        view.setRenderMode(GLTextureView.RENDERMODE_CONTINUOUSLY);
                                     }
                                 });
                     }
