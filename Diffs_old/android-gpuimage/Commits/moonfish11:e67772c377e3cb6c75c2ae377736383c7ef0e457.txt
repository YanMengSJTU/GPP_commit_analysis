diff --git a/sample/build.gradle b/sample/build.gradle
index f64f4a42..277f5a7e 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -5,6 +5,7 @@ android {
     buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId "jp.co.cyberagent.android.gpuimage.sample"
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
     }
diff --git a/sample/res/drawable-nodpi/amaro_map.png b/sample/res/drawable-nodpi/amaro_map.png
new file mode 100644
index 00000000..c8560b86
Binary files /dev/null and b/sample/res/drawable-nodpi/amaro_map.png differ
diff --git a/sample/res/drawable-nodpi/blackboard.png b/sample/res/drawable-nodpi/blackboard.png
new file mode 100644
index 00000000..2a8b1055
Binary files /dev/null and b/sample/res/drawable-nodpi/blackboard.png differ
diff --git a/sample/res/drawable-nodpi/brannan_blowout.png b/sample/res/drawable-nodpi/brannan_blowout.png
new file mode 100644
index 00000000..440a0cb0
Binary files /dev/null and b/sample/res/drawable-nodpi/brannan_blowout.png differ
diff --git a/sample/res/drawable-nodpi/brannan_contrast.png b/sample/res/drawable-nodpi/brannan_contrast.png
new file mode 100644
index 00000000..d9e1dd7d
Binary files /dev/null and b/sample/res/drawable-nodpi/brannan_contrast.png differ
diff --git a/sample/res/drawable-nodpi/brannan_luma.png b/sample/res/drawable-nodpi/brannan_luma.png
new file mode 100644
index 00000000..ba79a038
Binary files /dev/null and b/sample/res/drawable-nodpi/brannan_luma.png differ
diff --git a/sample/res/drawable-nodpi/brannan_process.png b/sample/res/drawable-nodpi/brannan_process.png
new file mode 100644
index 00000000..63e54775
Binary files /dev/null and b/sample/res/drawable-nodpi/brannan_process.png differ
diff --git a/sample/res/drawable-nodpi/brannan_screen.png b/sample/res/drawable-nodpi/brannan_screen.png
new file mode 100644
index 00000000..3f5e4115
Binary files /dev/null and b/sample/res/drawable-nodpi/brannan_screen.png differ
diff --git a/sample/res/drawable-nodpi/earlybird_blowout.png b/sample/res/drawable-nodpi/earlybird_blowout.png
new file mode 100644
index 00000000..4e663409
Binary files /dev/null and b/sample/res/drawable-nodpi/earlybird_blowout.png differ
diff --git a/sample/res/drawable-nodpi/earlybird_curves.png b/sample/res/drawable-nodpi/earlybird_curves.png
new file mode 100644
index 00000000..db01e239
Binary files /dev/null and b/sample/res/drawable-nodpi/earlybird_curves.png differ
diff --git a/sample/res/drawable-nodpi/earlybird_map.png b/sample/res/drawable-nodpi/earlybird_map.png
new file mode 100644
index 00000000..7c7d704f
Binary files /dev/null and b/sample/res/drawable-nodpi/earlybird_map.png differ
diff --git a/sample/res/drawable-nodpi/earlybird_overlay_map.png b/sample/res/drawable-nodpi/earlybird_overlay_map.png
new file mode 100644
index 00000000..2f2f316c
Binary files /dev/null and b/sample/res/drawable-nodpi/earlybird_overlay_map.png differ
diff --git a/sample/res/drawable-nodpi/edge_burn.png b/sample/res/drawable-nodpi/edge_burn.png
new file mode 100644
index 00000000..43606cf3
Binary files /dev/null and b/sample/res/drawable-nodpi/edge_burn.png differ
diff --git a/sample/res/drawable-nodpi/hefe_gradient_map.png b/sample/res/drawable-nodpi/hefe_gradient_map.png
new file mode 100644
index 00000000..53aef863
Binary files /dev/null and b/sample/res/drawable-nodpi/hefe_gradient_map.png differ
diff --git a/sample/res/drawable-nodpi/hefe_map.png b/sample/res/drawable-nodpi/hefe_map.png
new file mode 100644
index 00000000..6f2f4cf5
Binary files /dev/null and b/sample/res/drawable-nodpi/hefe_map.png differ
diff --git a/sample/res/drawable-nodpi/hefe_metal.png b/sample/res/drawable-nodpi/hefe_metal.png
new file mode 100644
index 00000000..31327c19
Binary files /dev/null and b/sample/res/drawable-nodpi/hefe_metal.png differ
diff --git a/sample/res/drawable-nodpi/hefe_soft_light.png b/sample/res/drawable-nodpi/hefe_soft_light.png
new file mode 100644
index 00000000..ee02e18b
Binary files /dev/null and b/sample/res/drawable-nodpi/hefe_soft_light.png differ
diff --git a/sample/res/drawable-nodpi/hudson_background.png b/sample/res/drawable-nodpi/hudson_background.png
new file mode 100644
index 00000000..359f5770
Binary files /dev/null and b/sample/res/drawable-nodpi/hudson_background.png differ
diff --git a/sample/res/drawable-nodpi/hudson_map.png b/sample/res/drawable-nodpi/hudson_map.png
new file mode 100644
index 00000000..6a94c3f8
Binary files /dev/null and b/sample/res/drawable-nodpi/hudson_map.png differ
diff --git a/sample/res/drawable-nodpi/inkwell_map.png b/sample/res/drawable-nodpi/inkwell_map.png
new file mode 100644
index 00000000..7c0a74bb
Binary files /dev/null and b/sample/res/drawable-nodpi/inkwell_map.png differ
diff --git a/sample/res/drawable-nodpi/kelvin_map.png b/sample/res/drawable-nodpi/kelvin_map.png
new file mode 100644
index 00000000..0ea3e4cb
Binary files /dev/null and b/sample/res/drawable-nodpi/kelvin_map.png differ
diff --git a/sample/res/drawable-nodpi/lomo_map.png b/sample/res/drawable-nodpi/lomo_map.png
new file mode 100644
index 00000000..775ec0cf
Binary files /dev/null and b/sample/res/drawable-nodpi/lomo_map.png differ
diff --git a/sample/res/drawable-nodpi/lookup_amatorka.png b/sample/res/drawable-nodpi/lookup_amatorka.png
index 4a2cc8ac..8eacd7e4 100644
Binary files a/sample/res/drawable-nodpi/lookup_amatorka.png and b/sample/res/drawable-nodpi/lookup_amatorka.png differ
diff --git a/sample/res/drawable-nodpi/nashville_map.png b/sample/res/drawable-nodpi/nashville_map.png
new file mode 100644
index 00000000..7e1db4b4
Binary files /dev/null and b/sample/res/drawable-nodpi/nashville_map.png differ
diff --git a/sample/res/drawable-nodpi/nblowout.png b/sample/res/drawable-nodpi/nblowout.png
new file mode 100644
index 00000000..dc69497a
Binary files /dev/null and b/sample/res/drawable-nodpi/nblowout.png differ
diff --git a/sample/res/drawable-nodpi/nmap.png b/sample/res/drawable-nodpi/nmap.png
new file mode 100644
index 00000000..1f73b10f
Binary files /dev/null and b/sample/res/drawable-nodpi/nmap.png differ
diff --git a/sample/res/drawable-nodpi/overlay_map.png b/sample/res/drawable-nodpi/overlay_map.png
new file mode 100644
index 00000000..ee03af09
Binary files /dev/null and b/sample/res/drawable-nodpi/overlay_map.png differ
diff --git a/sample/res/drawable-nodpi/rise_map.png b/sample/res/drawable-nodpi/rise_map.png
new file mode 100644
index 00000000..e56b4d9a
Binary files /dev/null and b/sample/res/drawable-nodpi/rise_map.png differ
diff --git a/sample/res/drawable-nodpi/sierra_map.png b/sample/res/drawable-nodpi/sierra_map.png
new file mode 100644
index 00000000..e4e93180
Binary files /dev/null and b/sample/res/drawable-nodpi/sierra_map.png differ
diff --git a/sample/res/drawable-nodpi/sierra_vignette.png b/sample/res/drawable-nodpi/sierra_vignette.png
new file mode 100644
index 00000000..3c457efc
Binary files /dev/null and b/sample/res/drawable-nodpi/sierra_vignette.png differ
diff --git a/sample/res/drawable-nodpi/soft_light.png b/sample/res/drawable-nodpi/soft_light.png
new file mode 100644
index 00000000..1e7faf36
Binary files /dev/null and b/sample/res/drawable-nodpi/soft_light.png differ
diff --git a/sample/res/drawable-nodpi/sutro_curves.png b/sample/res/drawable-nodpi/sutro_curves.png
new file mode 100644
index 00000000..bddcf685
Binary files /dev/null and b/sample/res/drawable-nodpi/sutro_curves.png differ
diff --git a/sample/res/drawable-nodpi/sutro_edge_burn.png b/sample/res/drawable-nodpi/sutro_edge_burn.png
new file mode 100644
index 00000000..2be48fd3
Binary files /dev/null and b/sample/res/drawable-nodpi/sutro_edge_burn.png differ
diff --git a/sample/res/drawable-nodpi/sutro_metal.png b/sample/res/drawable-nodpi/sutro_metal.png
new file mode 100644
index 00000000..6f7cf33f
Binary files /dev/null and b/sample/res/drawable-nodpi/sutro_metal.png differ
diff --git a/sample/res/drawable-nodpi/toaster_color_shift.png b/sample/res/drawable-nodpi/toaster_color_shift.png
new file mode 100644
index 00000000..92c34139
Binary files /dev/null and b/sample/res/drawable-nodpi/toaster_color_shift.png differ
diff --git a/sample/res/drawable-nodpi/toaster_curves.png b/sample/res/drawable-nodpi/toaster_curves.png
new file mode 100644
index 00000000..a2a26d57
Binary files /dev/null and b/sample/res/drawable-nodpi/toaster_curves.png differ
diff --git a/sample/res/drawable-nodpi/toaster_metal.png b/sample/res/drawable-nodpi/toaster_metal.png
new file mode 100644
index 00000000..13eee5fd
Binary files /dev/null and b/sample/res/drawable-nodpi/toaster_metal.png differ
diff --git a/sample/res/drawable-nodpi/toaster_overlay_map_warm.png b/sample/res/drawable-nodpi/toaster_overlay_map_warm.png
new file mode 100644
index 00000000..249f333a
Binary files /dev/null and b/sample/res/drawable-nodpi/toaster_overlay_map_warm.png differ
diff --git a/sample/res/drawable-nodpi/toaster_soft_light.png b/sample/res/drawable-nodpi/toaster_soft_light.png
new file mode 100644
index 00000000..7e0f40b5
Binary files /dev/null and b/sample/res/drawable-nodpi/toaster_soft_light.png differ
diff --git a/sample/res/drawable-nodpi/valencia_gradient_map.png b/sample/res/drawable-nodpi/valencia_gradient_map.png
new file mode 100644
index 00000000..cb563d8f
Binary files /dev/null and b/sample/res/drawable-nodpi/valencia_gradient_map.png differ
diff --git a/sample/res/drawable-nodpi/valencia_map.png b/sample/res/drawable-nodpi/valencia_map.png
new file mode 100644
index 00000000..0df543c8
Binary files /dev/null and b/sample/res/drawable-nodpi/valencia_map.png differ
diff --git a/sample/res/drawable-nodpi/vignette_map.png b/sample/res/drawable-nodpi/vignette_map.png
new file mode 100644
index 00000000..6094297f
Binary files /dev/null and b/sample/res/drawable-nodpi/vignette_map.png differ
diff --git a/sample/res/drawable-nodpi/walden_map.png b/sample/res/drawable-nodpi/walden_map.png
new file mode 100644
index 00000000..86528405
Binary files /dev/null and b/sample/res/drawable-nodpi/walden_map.png differ
diff --git a/sample/res/drawable-nodpi/xpro_map.png b/sample/res/drawable-nodpi/xpro_map.png
new file mode 100644
index 00000000..e861a468
Binary files /dev/null and b/sample/res/drawable-nodpi/xpro_map.png differ
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
index 6f2f6dd4..02f05ee9 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterTools.java
@@ -21,98 +21,108 @@
 import android.content.DialogInterface;
 import android.graphics.BitmapFactory;
 import android.graphics.PointF;
-import android.opengl.Matrix;
-
-import jp.co.cyberagent.android.gpuimage.*;
 
 import java.util.LinkedList;
 import java.util.List;
 
+import jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageAddBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageChromaKeyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorDodgeBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorInvertFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDarkenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDifferenceBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDissolveBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDivideBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExclusionBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHardLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLightenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLinearBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLookupFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLuminosityBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageMultiplyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageNormalBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageOverlayBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRGBFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageScreenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSobelEdgeDetection;
+import jp.co.cyberagent.android.gpuimage.GPUImageSoftLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSourceOverBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSubtractBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageToneCurveFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageVignetteFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IF1977Filter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFAmaroFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFBrannanFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFEarlybirdFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFHefeFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFHudsonFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFInkwellFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFLomoFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFLordKelvinFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFNashvilleFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFRiseFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFSierraFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFSutroFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFToasterFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFValenciaFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFWaldenFilter;
+import jp.co.cyberagent.android.gpuimage.sample.filter.IFXprollFilter;
+
 public class GPUImageFilterTools {
     public static void showDialog(final Context context,
             final OnGpuImageFilterChosenListener listener) {
         final FilterList filters = new FilterList();
+
+        filters.addFilter("1977", FilterType.I_1977);
+        filters.addFilter("Amaro", FilterType.I_AMARO);
+        filters.addFilter("Brannan", FilterType.I_BRANNAN);
+        filters.addFilter("Earlybird", FilterType.I_EARLYBIRD);
+        filters.addFilter("Hefe", FilterType.I_HEFE);
+        filters.addFilter("Hudson", FilterType.I_HUDSON);
+        filters.addFilter("Inkwell", FilterType.I_INKWELL);
+        filters.addFilter("Lomo", FilterType.I_LOMO);
+        filters.addFilter("LordKelvin", FilterType.I_LORDKELVIN);
+        filters.addFilter("Nashville", FilterType.I_NASHVILLE);
+        filters.addFilter("Rise", FilterType.I_NASHVILLE);
+        filters.addFilter("Sierra", FilterType.I_SIERRA);
+        filters.addFilter("sutro", FilterType.I_SUTRO);
+        filters.addFilter("Toaster", FilterType.I_TOASTER);
+        filters.addFilter("Valencia", FilterType.I_VALENCIA);
+        filters.addFilter("Walden", FilterType.I_WALDEN);
+        filters.addFilter("Xproll", FilterType.I_XPROII);
         filters.addFilter("Contrast", FilterType.CONTRAST);
-        filters.addFilter("Invert", FilterType.INVERT);
-        filters.addFilter("Pixelation", FilterType.PIXELATION);
-        filters.addFilter("Hue", FilterType.HUE);
-        filters.addFilter("Gamma", FilterType.GAMMA);
         filters.addFilter("Brightness", FilterType.BRIGHTNESS);
         filters.addFilter("Sepia", FilterType.SEPIA);
-        filters.addFilter("Grayscale", FilterType.GRAYSCALE);
-        filters.addFilter("Sharpness", FilterType.SHARPEN);
-        filters.addFilter("Sobel Edge Detection", FilterType.SOBEL_EDGE_DETECTION);
-        filters.addFilter("3x3 Convolution", FilterType.THREE_X_THREE_CONVOLUTION);
-        filters.addFilter("Emboss", FilterType.EMBOSS);
-        filters.addFilter("Posterize", FilterType.POSTERIZE);
-        filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
-        filters.addFilter("Saturation", FilterType.SATURATION);
-        filters.addFilter("Exposure", FilterType.EXPOSURE);
-        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
-        filters.addFilter("Monochrome", FilterType.MONOCHROME);
-        filters.addFilter("Opacity", FilterType.OPACITY);
-        filters.addFilter("RGB", FilterType.RGB);
-        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
         filters.addFilter("Vignette", FilterType.VIGNETTE);
         filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
-
-        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
-        filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
-        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
-        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
-        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
-        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
-        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
-        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
-        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
-        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
-        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
-        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
-        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
-        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
-        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
-        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
-        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
-        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
-        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
-        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
-        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
-        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
-        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
-        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
-
         filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
-        filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
-        filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
-
-        filters.addFilter("Box Blur", FilterType.BOX_BLUR);
-        filters.addFilter("CGA Color Space", FilterType.CGA_COLORSPACE);
-        filters.addFilter("Dilation", FilterType.DILATION);
-        filters.addFilter("Kuwahara", FilterType.KUWAHARA);
-        filters.addFilter("RGB Dilation", FilterType.RGB_DILATION);
-        filters.addFilter("Sketch", FilterType.SKETCH);
-        filters.addFilter("Toon", FilterType.TOON);
-        filters.addFilter("Smooth Toon", FilterType.SMOOTH_TOON);
-        filters.addFilter("Halftone", FilterType.HALFTONE);
-
-        filters.addFilter("Bulge Distortion", FilterType.BULGE_DISTORTION);
-        filters.addFilter("Glass Sphere", FilterType.GLASS_SPHERE);
-        filters.addFilter("Haze", FilterType.HAZE);
-        filters.addFilter("Laplacian", FilterType.LAPLACIAN);
-        filters.addFilter("Non Maximum Suppression", FilterType.NON_MAXIMUM_SUPPRESSION);
-        filters.addFilter("Sphere Refraction", FilterType.SPHERE_REFRACTION);
-        filters.addFilter("Swirl", FilterType.SWIRL);
-        filters.addFilter("Weak Pixel Inclusion", FilterType.WEAK_PIXEL_INCLUSION);
-        filters.addFilter("False Color", FilterType.FALSE_COLOR);
-
-        filters.addFilter("Color Balance", FilterType.COLOR_BALANCE);
-
-        filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
-
-        filters. addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
-
-        filters.addFilter("Transform (2-D)", FilterType.TRANSFORM2D);
-
 
         AlertDialog.Builder builder = new AlertDialog.Builder(context);
         builder.setTitle("Choose a filter");
@@ -127,7 +137,7 @@ public void onClick(final DialogInterface dialog, final int item) {
         builder.create().show();
     }
 
-    private static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
+    public static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
         switch (type) {
             case CONTRAST:
                 return new GPUImageContrastFilter(2.0f);
@@ -178,11 +188,11 @@ private static GPUImageFilter createFilterForType(final Context context, final F
             case MONOCHROME:
             	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
             case OPACITY:
-                return new GPUImageOpacityFilter(1.0f);
+                return new GPUImageOpacityFilter(1.0f);  
             case RGB:
-                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);
+                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);  
             case WHITE_BALANCE:
-                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);
+                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);    
             case VIGNETTE:
                 PointF centerPoint = new PointF();
                 centerPoint.x = 0.5f;
@@ -248,60 +258,41 @@ private static GPUImageFilter createFilterForType(final Context context, final F
                 GPUImageLookupFilter amatorka = new GPUImageLookupFilter();
                 amatorka.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.lookup_amatorka));
                 return amatorka;
-            case GAUSSIAN_BLUR:
-                return new GPUImageGaussianBlurFilter();
-            case CROSSHATCH:
-                return new GPUImageCrosshatchFilter();
-
-            case BOX_BLUR:
-                return new GPUImageBoxBlurFilter();
-            case CGA_COLORSPACE:
-                return new GPUImageCGAColorspaceFilter();
-            case DILATION:
-                return new GPUImageDilationFilter();
-            case KUWAHARA:
-                return new GPUImageKuwaharaFilter();
-            case RGB_DILATION:
-                return new GPUImageRGBDilationFilter();
-            case SKETCH:
-                return new GPUImageSketchFilter();
-            case TOON:
-                return new GPUImageToonFilter();
-            case SMOOTH_TOON:
-                return new GPUImageSmoothToonFilter();
-
-            case BULGE_DISTORTION:
-                return new GPUImageBulgeDistortionFilter();
-            case GLASS_SPHERE:
-                return new GPUImageGlassSphereFilter();
-            case HAZE:
-                return new GPUImageHazeFilter();
-            case LAPLACIAN:
-                return new GPUImageLaplacianFilter();
-            case NON_MAXIMUM_SUPPRESSION:
-                return new GPUImageNonMaximumSuppressionFilter();
-            case SPHERE_REFRACTION:
-                return new GPUImageSphereRefractionFilter();
-            case SWIRL:
-                return new GPUImageSwirlFilter();
-            case WEAK_PIXEL_INCLUSION:
-                return new GPUImageWeakPixelInclusionFilter();
-            case FALSE_COLOR:
-                return new GPUImageFalseColorFilter();
-            case COLOR_BALANCE:
-                return new GPUImageColorBalanceFilter();
-            case LEVELS_FILTER_MIN:
-                GPUImageLevelsFilter levelsFilter = new GPUImageLevelsFilter();
-                levelsFilter.setMin(0.0f, 3.0f, 1.0f);
-                return levelsFilter;
-            case HALFTONE:
-                return new GPUImageHalftoneFilter();
-
-            case BILATERAL_BLUR:
-                return new GPUImageBilateralFilter();
-
-            case TRANSFORM2D:
-                return new GPUImageTransformFilter();
+
+            case I_1977:
+                return new IF1977Filter(context);
+            case I_AMARO:
+                return new IFAmaroFilter(context);
+            case I_BRANNAN:
+                return new IFBrannanFilter(context);
+            case I_EARLYBIRD:
+                return new IFEarlybirdFilter(context);
+            case I_HEFE:
+                return new IFHefeFilter(context);
+            case I_HUDSON:
+                return new IFHudsonFilter(context);
+            case I_INKWELL:
+                return new IFInkwellFilter(context);
+            case I_LOMO:
+                return new IFLomoFilter(context);
+            case I_LORDKELVIN:
+                return new IFLordKelvinFilter(context);
+            case I_NASHVILLE:
+                return new IFNashvilleFilter(context);
+            case I_RISE:
+                return new IFRiseFilter(context);
+            case I_SIERRA:
+                return new IFSierraFilter(context);
+            case I_SUTRO:
+                return new IFSutroFilter(context);
+            case I_TOASTER:
+                return new IFToasterFilter(context);
+            case I_VALENCIA:
+                return new IFValenciaFilter(context);
+            case I_WALDEN:
+                return new IFWaldenFilter(context);
+            case I_XPROII:
+                return new IFXprollFilter(context);
 
             default:
                 throw new IllegalStateException("No filter of that type!");
@@ -324,16 +315,16 @@ private static GPUImageFilter createBlendFilter(Context context, Class<? extends
         void onGpuImageFilterChosenListener(GPUImageFilter filter);
     }
 
-    private enum FilterType {
+    public static enum FilterType {
         CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
         SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
         BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
         BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
-        GAUSSIAN_BLUR, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
-        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR, HALFTONE, TRANSFORM2D
+        I_1977, I_AMARO, I_BRANNAN, I_EARLYBIRD, I_HEFE, I_HUDSON, I_INKWELL, I_LOMO, I_LORDKELVIN, I_NASHVILLE, I_RISE, I_SIERRA, I_SUTRO,
+        I_TOASTER, I_VALENCIA, I_WALDEN, I_XPROII
     }
 
-    private static class FilterList {
+    public static class FilterList {
         public List<String> names = new LinkedList<String>();
         public List<FilterType> filters = new LinkedList<FilterType>();
 
@@ -359,10 +350,10 @@ public FilterAdjuster(final GPUImageFilter filter) {
                 adjuster = new BrightnessAdjuster().filter(filter);
             } else if (filter instanceof GPUImageSobelEdgeDetection) {
                 adjuster = new SobelAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageEmbossFilter) {
-                adjuster = new EmbossAdjuster().filter(filter);
             } else if (filter instanceof GPUImage3x3TextureSamplingFilter) {
                 adjuster = new GPU3x3TextureAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageEmbossFilter) {
+                adjuster = new EmbossAdjuster().filter(filter);
             } else if (filter instanceof GPUImageHueFilter) {
                 adjuster = new HueAdjuster().filter(filter);
             } else if (filter instanceof GPUImagePosterizeFilter) {
@@ -387,45 +378,22 @@ public FilterAdjuster(final GPUImageFilter filter) {
                 adjuster = new VignetteAdjuster().filter(filter);
             } else if (filter instanceof GPUImageDissolveBlendFilter) {
                 adjuster = new DissolveBlendAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageGaussianBlurFilter) {
-                adjuster = new GaussianBlurAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageCrosshatchFilter) {
-                adjuster = new CrosshatchBlurAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageBulgeDistortionFilter) {
-                adjuster = new BulgeDistortionAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageGlassSphereFilter) {
-                adjuster = new GlassSphereAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageHazeFilter) {
-                adjuster = new HazeAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSphereRefractionFilter) {
-                adjuster = new SphereRefractionAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageSwirlFilter) {
-                adjuster = new SwirlAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageColorBalanceFilter) {
-                adjuster = new ColorBalanceAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageLevelsFilter) {
-                adjuster = new LevelsMinMidAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageBilateralFilter) {
-                adjuster = new BilateralAdjuster().filter(filter);
-            } else if (filter instanceof GPUImageTransformFilter) {
-                adjuster = new RotateAdjuster().filter(filter);
-            }
-            else {
-
+            } else {
                 adjuster = null;
             }
         }
 
-        public boolean canAdjust() {
-            return adjuster != null;
-        }
-
         public void adjust(final int percentage) {
             if (adjuster != null) {
                 adjuster.adjust(percentage);
             }
         }
 
+        public boolean canAdjust() {
+            return adjuster != null;
+        }
+
+
         private abstract class Adjuster<T extends GPUImageFilter> {
             private T filter;
 
@@ -534,14 +502,14 @@ public void adjust(final int percentage) {
                 getFilter().setSaturation(range(percentage, 0.0f, 2.0f));
             }
         }
-
+        
         private class ExposureAdjuster extends Adjuster<GPUImageExposureFilter> {
             @Override
             public void adjust(final int percentage) {
                 getFilter().setExposure(range(percentage, -10.0f, 10.0f));
             }
-        }
-
+        }   
+        
         private class HighlightShadowAdjuster extends Adjuster<GPUImageHighlightShadowFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -549,7 +517,7 @@ public void adjust(final int percentage) {
                 getFilter().setHighlights(range(percentage, 0.0f, 1.0f));
             }
         }
-
+        
         private class MonochromeAdjuster extends Adjuster<GPUImageMonochromeFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -557,14 +525,14 @@ public void adjust(final int percentage) {
                 //getFilter().setColor(new float[]{0.6f, 0.45f, 0.3f, 1.0f});
             }
         }
-
+        
         private class OpacityAdjuster extends Adjuster<GPUImageOpacityFilter> {
             @Override
             public void adjust(final int percentage) {
                 getFilter().setOpacity(range(percentage, 0.0f, 1.0f));
             }
-        }
-
+        }   
+        
         private class RGBAdjuster extends Adjuster<GPUImageRGBFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -572,8 +540,8 @@ public void adjust(final int percentage) {
                 //getFilter().setGreen(range(percentage, 0.0f, 1.0f));
                 //getFilter().setBlue(range(percentage, 0.0f, 1.0f));
             }
-        }
-
+        }   
+        
         private class WhiteBalanceAdjuster extends Adjuster<GPUImageWhiteBalanceFilter> {
             @Override
             public void adjust(final int percentage) {
@@ -595,92 +563,5 @@ public void adjust(final int percentage) {
                 getFilter().setMix(range(percentage, 0.0f, 1.0f));
             }
         }
-
-        private class GaussianBlurAdjuster extends Adjuster<GPUImageGaussianBlurFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setBlurSize(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class CrosshatchBlurAdjuster extends Adjuster<GPUImageCrosshatchFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setCrossHatchSpacing(range(percentage, 0.0f, 0.06f));
-                getFilter().setLineWidth(range(percentage, 0.0f, 0.006f));
-            }
-        }
-
-        private class BulgeDistortionAdjuster extends Adjuster<GPUImageBulgeDistortionFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-                getFilter().setScale(range(percentage, -1.0f, 1.0f));
-            }
-        }
-
-        private class GlassSphereAdjuster extends Adjuster<GPUImageGlassSphereFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class HazeAdjuster extends Adjuster<GPUImageHazeFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setDistance(range(percentage, -0.3f, 0.3f));
-                getFilter().setSlope(range(percentage, -0.3f, 0.3f));
-            }
-        }
-
-        private class SphereRefractionAdjuster extends Adjuster<GPUImageSphereRefractionFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
-            }
-        }
-
-        private class SwirlAdjuster extends Adjuster<GPUImageSwirlFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setAngle(range(percentage, 0.0f, 2.0f));
-            }
-        }
-
-        private class ColorBalanceAdjuster extends Adjuster<GPUImageColorBalanceFilter> {
-
-            @Override
-            public void adjust(int percentage) {
-                getFilter().setMidtones(new float[]{
-                        range(percentage, 0.0f, 1.0f),
-                        range(percentage / 2, 0.0f, 1.0f),
-                        range(percentage / 3, 0.0f, 1.0f)});
-            }
-        }
-
-        private class LevelsMinMidAdjuster extends Adjuster<GPUImageLevelsFilter> {
-            @Override
-            public void adjust(int percentage) {
-                getFilter().setMin(0.0f, range(percentage, 0.0f, 1.0f), 1.0f);
-            }
-        }
-
-        private class BilateralAdjuster extends Adjuster<GPUImageBilateralFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                getFilter().setDistanceNormalizationFactor(range(percentage, 0.0f, 15.0f));
-            }
-        }
-
-        private class RotateAdjuster extends Adjuster<GPUImageTransformFilter> {
-            @Override
-            public void adjust(final int percentage) {
-                float[] transform = new float[16];
-                Matrix.setRotateM(transform, 0, 360 * percentage / 100, 0, 0, 1.0f);
-                getFilter().setTransform3D(transform);
-            }
-        }
-
     }
 }
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterToolsOld.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterToolsOld.java
new file mode 100644
index 00000000..a9af1aac
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/GPUImageFilterToolsOld.java
@@ -0,0 +1,761 @@
+/*
+ * Copyright (C) 2012 CyberAgent
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.BitmapFactory;
+import android.graphics.PointF;
+import android.opengl.Matrix;
+
+import java.util.LinkedList;
+import java.util.List;
+
+import jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageAddBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBilateralFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBoxBlurFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageBulgeDistortionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageCGAColorspaceFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageChromaKeyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorDodgeBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageColorInvertFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageCrosshatchFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDarkenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDifferenceBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDilationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDissolveBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageDivideBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExclusionBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFalseColorFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup;
+import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGaussianBlurFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGlassSphereFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHalftoneFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHardLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHazeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageHueFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageKuwaharaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLaplacianFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLevelsFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLightenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLinearBurnBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLookupFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageLuminosityBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageMultiplyBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageNonMaximumSuppressionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageNormalBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageOverlayBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRGBDilationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageRGBFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageScreenBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSketchFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSmoothToonFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSobelEdgeDetection;
+import jp.co.cyberagent.android.gpuimage.GPUImageSoftLightBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSourceOverBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSphereRefractionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSubtractBlendFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageSwirlFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageToneCurveFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageToonFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageTransformFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageVignetteFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageWeakPixelInclusionFilter;
+import jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter;
+
+public class GPUImageFilterToolsOld {
+    public static void showDialog(final Context context,
+            final OnGpuImageFilterChosenListener listener) {
+        final FilterList filters = new FilterList();
+        filters.addFilter("Contrast", FilterType.CONTRAST);
+        filters.addFilter("Invert", FilterType.INVERT);
+        filters.addFilter("Pixelation", FilterType.PIXELATION);
+        filters.addFilter("Hue", FilterType.HUE);
+        filters.addFilter("Gamma", FilterType.GAMMA);
+        filters.addFilter("Brightness", FilterType.BRIGHTNESS);
+        filters.addFilter("Sepia", FilterType.SEPIA);
+        filters.addFilter("Grayscale", FilterType.GRAYSCALE);
+        filters.addFilter("Sharpness", FilterType.SHARPEN);
+        filters.addFilter("Sobel Edge Detection", FilterType.SOBEL_EDGE_DETECTION);
+        filters.addFilter("3x3 Convolution", FilterType.THREE_X_THREE_CONVOLUTION);
+        filters.addFilter("Emboss", FilterType.EMBOSS);
+        filters.addFilter("Posterize", FilterType.POSTERIZE);
+        filters.addFilter("Grouped filters", FilterType.FILTER_GROUP);
+        filters.addFilter("Saturation", FilterType.SATURATION);
+        filters.addFilter("Exposure", FilterType.EXPOSURE);
+        filters.addFilter("Highlight Shadow", FilterType.HIGHLIGHT_SHADOW);
+        filters.addFilter("Monochrome", FilterType.MONOCHROME);
+        filters.addFilter("Opacity", FilterType.OPACITY);
+        filters.addFilter("RGB", FilterType.RGB);
+        filters.addFilter("White Balance", FilterType.WHITE_BALANCE);
+        filters.addFilter("Vignette", FilterType.VIGNETTE);
+        filters.addFilter("ToneCurve", FilterType.TONE_CURVE);
+
+        filters.addFilter("Blend (Difference)", FilterType.BLEND_DIFFERENCE);
+        filters.addFilter("Blend (Source Over)", FilterType.BLEND_SOURCE_OVER);
+        filters.addFilter("Blend (Color Burn)", FilterType.BLEND_COLOR_BURN);
+        filters.addFilter("Blend (Color Dodge)", FilterType.BLEND_COLOR_DODGE);
+        filters.addFilter("Blend (Darken)", FilterType.BLEND_DARKEN);
+        filters.addFilter("Blend (Dissolve)", FilterType.BLEND_DISSOLVE);
+        filters.addFilter("Blend (Exclusion)", FilterType.BLEND_EXCLUSION);
+        filters.addFilter("Blend (Hard Light)", FilterType.BLEND_HARD_LIGHT);
+        filters.addFilter("Blend (Lighten)", FilterType.BLEND_LIGHTEN);
+        filters.addFilter("Blend (Add)", FilterType.BLEND_ADD);
+        filters.addFilter("Blend (Divide)", FilterType.BLEND_DIVIDE);
+        filters.addFilter("Blend (Multiply)", FilterType.BLEND_MULTIPLY);
+        filters.addFilter("Blend (Overlay)", FilterType.BLEND_OVERLAY);
+        filters.addFilter("Blend (Screen)", FilterType.BLEND_SCREEN);
+        filters.addFilter("Blend (Alpha)", FilterType.BLEND_ALPHA);
+        filters.addFilter("Blend (Color)", FilterType.BLEND_COLOR);
+        filters.addFilter("Blend (Hue)", FilterType.BLEND_HUE);
+        filters.addFilter("Blend (Saturation)", FilterType.BLEND_SATURATION);
+        filters.addFilter("Blend (Luminosity)", FilterType.BLEND_LUMINOSITY);
+        filters.addFilter("Blend (Linear Burn)", FilterType.BLEND_LINEAR_BURN);
+        filters.addFilter("Blend (Soft Light)", FilterType.BLEND_SOFT_LIGHT);
+        filters.addFilter("Blend (Subtract)", FilterType.BLEND_SUBTRACT);
+        filters.addFilter("Blend (Chroma Key)", FilterType.BLEND_CHROMA_KEY);
+        filters.addFilter("Blend (Normal)", FilterType.BLEND_NORMAL);
+
+        filters.addFilter("Lookup (Amatorka)", FilterType.LOOKUP_AMATORKA);
+        filters.addFilter("Gaussian Blur", FilterType.GAUSSIAN_BLUR);
+        filters.addFilter("Crosshatch", FilterType.CROSSHATCH);
+
+        filters.addFilter("Box Blur", FilterType.BOX_BLUR);
+        filters.addFilter("CGA Color Space", FilterType.CGA_COLORSPACE);
+        filters.addFilter("Dilation", FilterType.DILATION);
+        filters.addFilter("Kuwahara", FilterType.KUWAHARA);
+        filters.addFilter("RGB Dilation", FilterType.RGB_DILATION);
+        filters.addFilter("Sketch", FilterType.SKETCH);
+        filters.addFilter("Toon", FilterType.TOON);
+        filters.addFilter("Smooth Toon", FilterType.SMOOTH_TOON);
+        filters.addFilter("Halftone", FilterType.HALFTONE);
+
+        filters.addFilter("Bulge Distortion", FilterType.BULGE_DISTORTION);
+        filters.addFilter("Glass Sphere", FilterType.GLASS_SPHERE);
+        filters.addFilter("Haze", FilterType.HAZE);
+        filters.addFilter("Laplacian", FilterType.LAPLACIAN);
+        filters.addFilter("Non Maximum Suppression", FilterType.NON_MAXIMUM_SUPPRESSION);
+        filters.addFilter("Sphere Refraction", FilterType.SPHERE_REFRACTION);
+        filters.addFilter("Swirl", FilterType.SWIRL);
+        filters.addFilter("Weak Pixel Inclusion", FilterType.WEAK_PIXEL_INCLUSION);
+        filters.addFilter("False Color", FilterType.FALSE_COLOR);
+
+        filters.addFilter("Color Balance", FilterType.COLOR_BALANCE);
+
+        filters.addFilter("Levels Min (Mid Adjust)", FilterType.LEVELS_FILTER_MIN);
+
+        filters. addFilter("Bilateral Blur", FilterType.BILATERAL_BLUR);
+
+        filters.addFilter("Transform (2-D)", FilterType.TRANSFORM2D);
+
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(context);
+        builder.setTitle("Choose a filter");
+        builder.setItems(filters.names.toArray(new String[filters.names.size()]),
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(final DialogInterface dialog, final int item) {
+                        listener.onGpuImageFilterChosenListener(
+                                createFilterForType(context, filters.filters.get(item)));
+                    }
+                });
+        builder.create().show();
+    }
+
+    private static GPUImageFilter createFilterForType(final Context context, final FilterType type) {
+        switch (type) {
+            case CONTRAST:
+                return new GPUImageContrastFilter(2.0f);
+            case GAMMA:
+                return new GPUImageGammaFilter(2.0f);
+            case INVERT:
+                return new GPUImageColorInvertFilter();
+            case PIXELATION:
+                return new GPUImagePixelationFilter();
+            case HUE:
+                return new GPUImageHueFilter(90.0f);
+            case BRIGHTNESS:
+                return new GPUImageBrightnessFilter(1.5f);
+            case GRAYSCALE:
+                return new GPUImageGrayscaleFilter();
+            case SEPIA:
+                return new GPUImageSepiaFilter();
+            case SHARPEN:
+                GPUImageSharpenFilter sharpness = new GPUImageSharpenFilter();
+                sharpness.setSharpness(2.0f);
+                return sharpness;
+            case SOBEL_EDGE_DETECTION:
+                return new GPUImageSobelEdgeDetection();
+            case THREE_X_THREE_CONVOLUTION:
+                GPUImage3x3ConvolutionFilter convolution = new GPUImage3x3ConvolutionFilter();
+                convolution.setConvolutionKernel(new float[] {
+                        -1.0f, 0.0f, 1.0f,
+                        -2.0f, 0.0f, 2.0f,
+                        -1.0f, 0.0f, 1.0f
+                });
+                return convolution;
+            case EMBOSS:
+                return new GPUImageEmbossFilter();
+            case POSTERIZE:
+                return new GPUImagePosterizeFilter();
+            case FILTER_GROUP:
+                List<GPUImageFilter> filters = new LinkedList<GPUImageFilter>();
+                filters.add(new GPUImageContrastFilter());
+                filters.add(new GPUImageDirectionalSobelEdgeDetectionFilter());
+                filters.add(new GPUImageGrayscaleFilter());
+                return new GPUImageFilterGroup(filters);
+            case SATURATION:
+                return new GPUImageSaturationFilter(1.0f);
+            case EXPOSURE:
+                return new GPUImageExposureFilter(0.0f);
+            case HIGHLIGHT_SHADOW:
+            	return new GPUImageHighlightShadowFilter(0.0f, 1.0f);
+            case MONOCHROME:
+            	return new GPUImageMonochromeFilter(1.0f, new float[]{0.6f, 0.45f, 0.3f, 1.0f});
+            case OPACITY:
+                return new GPUImageOpacityFilter(1.0f);
+            case RGB:
+                return new GPUImageRGBFilter(1.0f, 1.0f, 1.0f);
+            case WHITE_BALANCE:
+                return new GPUImageWhiteBalanceFilter(5000.0f, 0.0f);
+            case VIGNETTE:
+                PointF centerPoint = new PointF();
+                centerPoint.x = 0.5f;
+                centerPoint.y = 0.5f;
+                return new GPUImageVignetteFilter(centerPoint, new float[] {0.0f, 0.0f, 0.0f}, 0.3f, 0.75f);
+            case TONE_CURVE:
+                GPUImageToneCurveFilter toneCurveFilter = new GPUImageToneCurveFilter();
+                toneCurveFilter.setFromCurveFileInputStream(
+                        context.getResources().openRawResource(R.raw.tone_cuver_sample));
+                return toneCurveFilter;
+            case BLEND_DIFFERENCE:
+                return createBlendFilter(context, GPUImageDifferenceBlendFilter.class);
+            case BLEND_SOURCE_OVER:
+                return createBlendFilter(context, GPUImageSourceOverBlendFilter.class);
+            case BLEND_COLOR_BURN:
+                return createBlendFilter(context, GPUImageColorBurnBlendFilter.class);
+            case BLEND_COLOR_DODGE:
+                return createBlendFilter(context, GPUImageColorDodgeBlendFilter.class);
+            case BLEND_DARKEN:
+                return createBlendFilter(context, GPUImageDarkenBlendFilter.class);
+            case BLEND_DISSOLVE:
+                return createBlendFilter(context, GPUImageDissolveBlendFilter.class);
+            case BLEND_EXCLUSION:
+                return createBlendFilter(context, GPUImageExclusionBlendFilter.class);
+
+
+            case BLEND_HARD_LIGHT:
+                return createBlendFilter(context, GPUImageHardLightBlendFilter.class);
+            case BLEND_LIGHTEN:
+                return createBlendFilter(context, GPUImageLightenBlendFilter.class);
+            case BLEND_ADD:
+                return createBlendFilter(context, GPUImageAddBlendFilter.class);
+            case BLEND_DIVIDE:
+                return createBlendFilter(context, GPUImageDivideBlendFilter.class);
+            case BLEND_MULTIPLY:
+                return createBlendFilter(context, GPUImageMultiplyBlendFilter.class);
+            case BLEND_OVERLAY:
+                return createBlendFilter(context, GPUImageOverlayBlendFilter.class);
+            case BLEND_SCREEN:
+                return createBlendFilter(context, GPUImageScreenBlendFilter.class);
+            case BLEND_ALPHA:
+                return createBlendFilter(context, GPUImageAlphaBlendFilter.class);
+            case BLEND_COLOR:
+                return createBlendFilter(context, GPUImageColorBlendFilter.class);
+            case BLEND_HUE:
+                return createBlendFilter(context, GPUImageHueBlendFilter.class);
+            case BLEND_SATURATION:
+                return createBlendFilter(context, GPUImageSaturationBlendFilter.class);
+            case BLEND_LUMINOSITY:
+                return createBlendFilter(context, GPUImageLuminosityBlendFilter.class);
+            case BLEND_LINEAR_BURN:
+                return createBlendFilter(context, GPUImageLinearBurnBlendFilter.class);
+            case BLEND_SOFT_LIGHT:
+                return createBlendFilter(context, GPUImageSoftLightBlendFilter.class);
+            case BLEND_SUBTRACT:
+                return createBlendFilter(context, GPUImageSubtractBlendFilter.class);
+            case BLEND_CHROMA_KEY:
+                return createBlendFilter(context, GPUImageChromaKeyBlendFilter.class);
+            case BLEND_NORMAL:
+                return createBlendFilter(context, GPUImageNormalBlendFilter.class);
+
+            case LOOKUP_AMATORKA:
+                GPUImageLookupFilter amatorka = new GPUImageLookupFilter();
+                amatorka.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.lookup_amatorka));
+                return amatorka;
+            case GAUSSIAN_BLUR:
+                return new GPUImageGaussianBlurFilter();
+            case CROSSHATCH:
+                return new GPUImageCrosshatchFilter();
+
+            case BOX_BLUR:
+                return new GPUImageBoxBlurFilter();
+            case CGA_COLORSPACE:
+                return new GPUImageCGAColorspaceFilter();
+            case DILATION:
+                return new GPUImageDilationFilter();
+            case KUWAHARA:
+                return new GPUImageKuwaharaFilter();
+            case RGB_DILATION:
+                return new GPUImageRGBDilationFilter();
+            case SKETCH:
+                return new GPUImageSketchFilter();
+            case TOON:
+                return new GPUImageToonFilter();
+            case SMOOTH_TOON:
+                return new GPUImageSmoothToonFilter();
+
+            case BULGE_DISTORTION:
+                return new GPUImageBulgeDistortionFilter();
+            case GLASS_SPHERE:
+                return new GPUImageGlassSphereFilter();
+            case HAZE:
+                return new GPUImageHazeFilter();
+            case LAPLACIAN:
+                return new GPUImageLaplacianFilter();
+            case NON_MAXIMUM_SUPPRESSION:
+                return new GPUImageNonMaximumSuppressionFilter();
+            case SPHERE_REFRACTION:
+                return new GPUImageSphereRefractionFilter();
+            case SWIRL:
+                return new GPUImageSwirlFilter();
+            case WEAK_PIXEL_INCLUSION:
+                return new GPUImageWeakPixelInclusionFilter();
+            case FALSE_COLOR:
+                return new GPUImageFalseColorFilter();
+            case COLOR_BALANCE:
+                return new GPUImageColorBalanceFilter();
+            case LEVELS_FILTER_MIN:
+                GPUImageLevelsFilter levelsFilter = new GPUImageLevelsFilter();
+                levelsFilter.setMin(0.0f, 3.0f, 1.0f);
+                return levelsFilter;
+            case HALFTONE:
+                return new GPUImageHalftoneFilter();
+
+            case BILATERAL_BLUR:
+                return new GPUImageBilateralFilter();
+
+            case TRANSFORM2D:
+                return new GPUImageTransformFilter();
+
+            default:
+                throw new IllegalStateException("No filter of that type!");
+        }
+
+    }
+
+    private static GPUImageFilter createBlendFilter(Context context, Class<? extends GPUImageTwoInputFilter> filterClass) {
+        try {
+            GPUImageTwoInputFilter filter = filterClass.newInstance();
+            filter.setBitmap(BitmapFactory.decodeResource(context.getResources(), R.drawable.ic_launcher));
+            return filter;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    public interface OnGpuImageFilterChosenListener {
+        void onGpuImageFilterChosenListener(GPUImageFilter filter);
+    }
+
+    private enum FilterType {
+        CONTRAST, GRAYSCALE, SHARPEN, SEPIA, SOBEL_EDGE_DETECTION, THREE_X_THREE_CONVOLUTION, FILTER_GROUP, EMBOSS, POSTERIZE, GAMMA, BRIGHTNESS, INVERT, HUE, PIXELATION,
+        SATURATION, EXPOSURE, HIGHLIGHT_SHADOW, MONOCHROME, OPACITY, RGB, WHITE_BALANCE, VIGNETTE, TONE_CURVE, BLEND_COLOR_BURN, BLEND_COLOR_DODGE, BLEND_DARKEN, BLEND_DIFFERENCE,
+        BLEND_DISSOLVE, BLEND_EXCLUSION, BLEND_SOURCE_OVER, BLEND_HARD_LIGHT, BLEND_LIGHTEN, BLEND_ADD, BLEND_DIVIDE, BLEND_MULTIPLY, BLEND_OVERLAY, BLEND_SCREEN, BLEND_ALPHA,
+        BLEND_COLOR, BLEND_HUE, BLEND_SATURATION, BLEND_LUMINOSITY, BLEND_LINEAR_BURN, BLEND_SOFT_LIGHT, BLEND_SUBTRACT, BLEND_CHROMA_KEY, BLEND_NORMAL, LOOKUP_AMATORKA,
+        GAUSSIAN_BLUR, CROSSHATCH, BOX_BLUR, CGA_COLORSPACE, DILATION, KUWAHARA, RGB_DILATION, SKETCH, TOON, SMOOTH_TOON, BULGE_DISTORTION, GLASS_SPHERE, HAZE, LAPLACIAN, NON_MAXIMUM_SUPPRESSION,
+        SPHERE_REFRACTION, SWIRL, WEAK_PIXEL_INCLUSION, FALSE_COLOR, COLOR_BALANCE, LEVELS_FILTER_MIN, BILATERAL_BLUR, HALFTONE, TRANSFORM2D
+    }
+
+    private static class FilterList {
+        public List<String> names = new LinkedList<String>();
+        public List<FilterType> filters = new LinkedList<FilterType>();
+
+        public void addFilter(final String name, final FilterType filter) {
+            names.add(name);
+            filters.add(filter);
+        }
+    }
+
+    public static class FilterAdjuster {
+        private final Adjuster<? extends GPUImageFilter> adjuster;
+
+        public FilterAdjuster(final GPUImageFilter filter) {
+            if (filter instanceof GPUImageSharpenFilter) {
+                adjuster = new SharpnessAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSepiaFilter) {
+                adjuster = new SepiaAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageContrastFilter) {
+                adjuster = new ContrastAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageGammaFilter) {
+                adjuster = new GammaAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageBrightnessFilter) {
+                adjuster = new BrightnessAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSobelEdgeDetection) {
+                adjuster = new SobelAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageEmbossFilter) {
+                adjuster = new EmbossAdjuster().filter(filter);
+            } else if (filter instanceof GPUImage3x3TextureSamplingFilter) {
+                adjuster = new GPU3x3TextureAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageHueFilter) {
+                adjuster = new HueAdjuster().filter(filter);
+            } else if (filter instanceof GPUImagePosterizeFilter) {
+                adjuster = new PosterizeAdjuster().filter(filter);
+            } else if (filter instanceof GPUImagePixelationFilter) {
+                adjuster = new PixelationAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSaturationFilter) {
+                adjuster = new SaturationAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageExposureFilter) {
+                adjuster = new ExposureAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageHighlightShadowFilter) {
+                adjuster = new HighlightShadowAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageMonochromeFilter) {
+                adjuster = new MonochromeAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageOpacityFilter) {
+                adjuster = new OpacityAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageRGBFilter) {
+                adjuster = new RGBAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageWhiteBalanceFilter) {
+                adjuster = new WhiteBalanceAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageVignetteFilter) {
+                adjuster = new VignetteAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageDissolveBlendFilter) {
+                adjuster = new DissolveBlendAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageGaussianBlurFilter) {
+                adjuster = new GaussianBlurAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageCrosshatchFilter) {
+                adjuster = new CrosshatchBlurAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageBulgeDistortionFilter) {
+                adjuster = new BulgeDistortionAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageGlassSphereFilter) {
+                adjuster = new GlassSphereAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageHazeFilter) {
+                adjuster = new HazeAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSphereRefractionFilter) {
+                adjuster = new SphereRefractionAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageSwirlFilter) {
+                adjuster = new SwirlAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageColorBalanceFilter) {
+                adjuster = new ColorBalanceAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageLevelsFilter) {
+                adjuster = new LevelsMinMidAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageBilateralFilter) {
+                adjuster = new BilateralAdjuster().filter(filter);
+            } else if (filter instanceof GPUImageTransformFilter) {
+                adjuster = new RotateAdjuster().filter(filter);
+            }
+            else {
+
+                adjuster = null;
+            }
+        }
+
+        public boolean canAdjust() {
+            return adjuster != null;
+        }
+
+        public void adjust(final int percentage) {
+            if (adjuster != null) {
+                adjuster.adjust(percentage);
+            }
+        }
+
+        private abstract class Adjuster<T extends GPUImageFilter> {
+            private T filter;
+
+            @SuppressWarnings("unchecked")
+            public Adjuster<T> filter(final GPUImageFilter filter) {
+                this.filter = (T) filter;
+                return this;
+            }
+
+            public T getFilter() {
+                return filter;
+            }
+
+            public abstract void adjust(int percentage);
+
+            protected float range(final int percentage, final float start, final float end) {
+                return (end - start) * percentage / 100.0f + start;
+            }
+
+            protected int range(final int percentage, final int start, final int end) {
+                return (end - start) * percentage / 100 + start;
+            }
+        }
+
+        private class SharpnessAdjuster extends Adjuster<GPUImageSharpenFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setSharpness(range(percentage, -4.0f, 4.0f));
+            }
+        }
+
+        private class PixelationAdjuster extends Adjuster<GPUImagePixelationFilter> {
+          @Override
+          public void adjust(final int percentage) {
+              getFilter().setPixel(range(percentage, 1.0f, 100.0f));
+          }
+        }
+
+        private class HueAdjuster extends Adjuster<GPUImageHueFilter> {
+          @Override
+          public void adjust(final int percentage) {
+            getFilter().setHue(range(percentage, 0.0f, 360.0f));
+          }
+        }
+
+        private class ContrastAdjuster extends Adjuster<GPUImageContrastFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setContrast(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class GammaAdjuster extends Adjuster<GPUImageGammaFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setGamma(range(percentage, 0.0f, 3.0f));
+            }
+        }
+
+        private class BrightnessAdjuster extends Adjuster<GPUImageBrightnessFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setBrightness(range(percentage, -1.0f, 1.0f));
+            }
+        }
+
+        private class SepiaAdjuster extends Adjuster<GPUImageSepiaFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setIntensity(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class SobelAdjuster extends Adjuster<GPUImageSobelEdgeDetection> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
+            }
+        }
+
+        private class EmbossAdjuster extends Adjuster<GPUImageEmbossFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setIntensity(range(percentage, 0.0f, 4.0f));
+            }
+        }
+
+        private class PosterizeAdjuster extends Adjuster<GPUImagePosterizeFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                // In theorie to 256, but only first 50 are interesting
+                getFilter().setColorLevels(range(percentage, 1, 50));
+            }
+        }
+
+        private class GPU3x3TextureAdjuster extends Adjuster<GPUImage3x3TextureSamplingFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setLineSize(range(percentage, 0.0f, 5.0f));
+            }
+        }
+
+        private class SaturationAdjuster extends Adjuster<GPUImageSaturationFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setSaturation(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class ExposureAdjuster extends Adjuster<GPUImageExposureFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setExposure(range(percentage, -10.0f, 10.0f));
+            }
+        }
+
+        private class HighlightShadowAdjuster extends Adjuster<GPUImageHighlightShadowFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setShadows(range(percentage, 0.0f, 1.0f));
+                getFilter().setHighlights(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class MonochromeAdjuster extends Adjuster<GPUImageMonochromeFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setIntensity(range(percentage, 0.0f, 1.0f));
+                //getFilter().setColor(new float[]{0.6f, 0.45f, 0.3f, 1.0f});
+            }
+        }
+
+        private class OpacityAdjuster extends Adjuster<GPUImageOpacityFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setOpacity(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class RGBAdjuster extends Adjuster<GPUImageRGBFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRed(range(percentage, 0.0f, 1.0f));
+                //getFilter().setGreen(range(percentage, 0.0f, 1.0f));
+                //getFilter().setBlue(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class WhiteBalanceAdjuster extends Adjuster<GPUImageWhiteBalanceFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setTemperature(range(percentage, 2000.0f, 8000.0f));
+                //getFilter().setTint(range(percentage, -100.0f, 100.0f));
+            }
+        }
+
+        private class VignetteAdjuster extends Adjuster<GPUImageVignetteFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setVignetteStart(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class DissolveBlendAdjuster extends Adjuster<GPUImageDissolveBlendFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setMix(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class GaussianBlurAdjuster extends Adjuster<GPUImageGaussianBlurFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setBlurSize(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class CrosshatchBlurAdjuster extends Adjuster<GPUImageCrosshatchFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setCrossHatchSpacing(range(percentage, 0.0f, 0.06f));
+                getFilter().setLineWidth(range(percentage, 0.0f, 0.006f));
+            }
+        }
+
+        private class BulgeDistortionAdjuster extends Adjuster<GPUImageBulgeDistortionFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
+                getFilter().setScale(range(percentage, -1.0f, 1.0f));
+            }
+        }
+
+        private class GlassSphereAdjuster extends Adjuster<GPUImageGlassSphereFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class HazeAdjuster extends Adjuster<GPUImageHazeFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setDistance(range(percentage, -0.3f, 0.3f));
+                getFilter().setSlope(range(percentage, -0.3f, 0.3f));
+            }
+        }
+
+        private class SphereRefractionAdjuster extends Adjuster<GPUImageSphereRefractionFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setRadius(range(percentage, 0.0f, 1.0f));
+            }
+        }
+
+        private class SwirlAdjuster extends Adjuster<GPUImageSwirlFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setAngle(range(percentage, 0.0f, 2.0f));
+            }
+        }
+
+        private class ColorBalanceAdjuster extends Adjuster<GPUImageColorBalanceFilter> {
+
+            @Override
+            public void adjust(int percentage) {
+                getFilter().setMidtones(new float[]{
+                        range(percentage, 0.0f, 1.0f),
+                        range(percentage / 2, 0.0f, 1.0f),
+                        range(percentage / 3, 0.0f, 1.0f)});
+            }
+        }
+
+        private class LevelsMinMidAdjuster extends Adjuster<GPUImageLevelsFilter> {
+            @Override
+            public void adjust(int percentage) {
+                getFilter().setMin(0.0f, range(percentage, 0.0f, 1.0f), 1.0f);
+            }
+        }
+
+        private class BilateralAdjuster extends Adjuster<GPUImageBilateralFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                getFilter().setDistanceNormalizationFactor(range(percentage, 0.0f, 15.0f));
+            }
+        }
+
+        private class RotateAdjuster extends Adjuster<GPUImageTransformFilter> {
+            @Override
+            public void adjust(final int percentage) {
+                float[] transform = new float[16];
+                Matrix.setRotateM(transform, 0, 360 * percentage / 100, 0, 0, 1.0f);
+                getFilter().setTransform3D(transform);
+            }
+        }
+
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IF1977Filter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IF1977Filter.java
new file mode 100644
index 00000000..3d915388
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IF1977Filter.java
@@ -0,0 +1,40 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IF1977Filter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     texel = vec3(\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.g, .5)).g,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IF1977Filter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.nmap);
+        addInputTexture(R.drawable.nblowout);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFAmaroFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFAmaroFilter.java
new file mode 100644
index 00000000..f878d3e8
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFAmaroFilter.java
@@ -0,0 +1,40 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFAmaroFilter extends IFImageFilter {
+    private static final String SHADER = "\n precision lowp float;\n\n " +
+            "varying highp vec2 textureCoordinate;\n\n " +
+            "uniform sampler2D inputImageTexture;\n " +
+            "uniform sampler2D inputImageTexture2;\n " +
+            "uniform sampler2D inputImageTexture3;\n " +
+            "uniform sampler2D inputImageTexture4;\n\n " +
+            "void main()\n  " +
+            "{\n\n  " +
+            "vec4 texel = texture2D(inputImageTexture, textureCoordinate);\n   " +
+            "vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb;\n\n   " +
+            "texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r;\n   " +
+            "texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g;\n   " +
+            "texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b;\n\n   " +
+            "vec4 mapped;\n   mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;\n   " +
+            "mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;\n   " +
+            "mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;\n   " +
+            "mapped.a = 1.0;\n\n   " +
+            "gl_FragColor = mapped;\n }";
+
+    public IFAmaroFilter(Context context) {
+        super(context, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.blackboard);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.amaro_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFBrannanFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFBrannanFilter.java
new file mode 100644
index 00000000..072cfd39
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFBrannanFilter.java
@@ -0,0 +1,99 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFBrannanFilter extends IFImageFilter {
+    private static final String SHADER = "\n" +
+            " precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;  //process\n" +
+            " uniform sampler2D inputImageTexture3;  //blowout\n" +
+            " uniform sampler2D inputImageTexture4;  //contrast\n" +
+            " uniform sampler2D inputImageTexture5;  //luma\n" +
+            " uniform sampler2D inputImageTexture6;  //screen\n" +
+            " \n" +
+            " mat3 saturateMatrix = mat3(\n" +
+            "                            1.105150,\n" +
+            "                            -0.044850,\n" +
+            "                            -0.046000,\n" +
+            "                            -0.088050,\n" +
+            "                            1.061950,\n" +
+            "                            -0.089200,\n" +
+            "                            -0.017100,\n" +
+            "                            -0.017100,\n" +
+            "                            1.132900);\n" +
+            " \n" +
+            " vec3 luma = vec3(.3, .59, .11);\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     vec2 lookup;\n" +
+            "     lookup.y = 0.5;\n" +
+            "     lookup.x = texel.r;\n" +
+            "     texel.r = texture2D(inputImageTexture2, lookup).r;\n" +
+            "     lookup.x = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture2, lookup).g;\n" +
+            "     lookup.x = texel.b;\n" +
+            "     texel.b = texture2D(inputImageTexture2, lookup).b;\n" +
+            "     \n" +
+            "     texel = saturateMatrix * texel;\n" +
+            "     \n" +
+            "     \n" +
+            "     vec2 tc = (2.0 * textureCoordinate) - 1.0;\n" +
+            "     float d = dot(tc, tc);\n" +
+            "     vec3 sampled;\n" +
+            "     lookup.y = 0.5;\n" +
+            "     lookup.x = texel.r;\n" +
+            "     sampled.r = texture2D(inputImageTexture3, lookup).r;\n" +
+            "     lookup.x = texel.g;\n" +
+            "     sampled.g = texture2D(inputImageTexture3, lookup).g;\n" +
+            "     lookup.x = texel.b;\n" +
+            "     sampled.b = texture2D(inputImageTexture3, lookup).b;\n" +
+            "     float value = smoothstep(0.0, 1.0, d);\n" +
+            "     texel = mix(sampled, texel, value);\n" +
+            "     \n" +
+            "     lookup.x = texel.r;\n" +
+            "     texel.r = texture2D(inputImageTexture4, lookup).r;\n" +
+            "     lookup.x = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture4, lookup).g;\n" +
+            "     lookup.x = texel.b;\n" +
+            "     texel.b = texture2D(inputImageTexture4, lookup).b;\n" +
+            "     \n" +
+            "     \n" +
+            "     lookup.x = dot(texel, luma);\n" +
+            "     texel = mix(texture2D(inputImageTexture5, lookup).rgb, texel, .5);\n" +
+            "\n" +
+            "     lookup.x = texel.r;\n" +
+            "     texel.r = texture2D(inputImageTexture6, lookup).r;\n" +
+            "     lookup.x = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture6, lookup).g;\n" +
+            "     lookup.x = texel.b;\n" +
+            "     texel.b = texture2D(inputImageTexture6, lookup).b;\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFBrannanFilter(Context context) {
+        super(context, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.brannan_process);
+        addInputTexture(R.drawable.brannan_blowout);
+        addInputTexture(R.drawable.brannan_contrast);
+        addInputTexture(R.drawable.brannan_luma);
+        addInputTexture(R.drawable.brannan_screen);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFEarlybirdFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFEarlybirdFilter.java
new file mode 100644
index 00000000..0ebcc4fa
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFEarlybirdFilter.java
@@ -0,0 +1,131 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFEarlybirdFilter extends IFImageFilter {
+    private static final String SHADER = "\n" +
+            " precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //earlyBirdCurves\n" +
+            " uniform sampler2D inputImageTexture3; //earlyBirdOverlay\n" +
+            " uniform sampler2D inputImageTexture4; //vig\n" +
+            " uniform sampler2D inputImageTexture5; //earlyBirdBlowout\n" +
+            " uniform sampler2D inputImageTexture6; //earlyBirdMap\n" +
+            " \n" +
+            " const mat3 saturate = mat3(\n" +
+            "                            1.210300,\n" +
+            "                            -0.089700,\n" +
+            "                            -0.091000,\n" +
+            "                            -0.176100,\n" +
+            "                            1.123900,\n" +
+            "                            -0.177400,\n" +
+            "                            -0.034200,\n" +
+            "                            -0.034200,\n" +
+            "                            1.265800);\n" +
+            " const vec3 rgbPrime = vec3(0.25098, 0.14640522, 0.0); \n" +
+            " const vec3 desaturate = vec3(.3, .59, .11);\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     \n" +
+            "     vec2 lookup;    \n" +
+            "     lookup.y = 0.5;\n" +
+            "     \n" +
+            "     lookup.x = texel.r;\n" +
+            "     texel.r = texture2D(inputImageTexture2, lookup).r;\n" +
+            "     \n" +
+            "     lookup.x = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture2, lookup).g;\n" +
+            "     \n" +
+            "     lookup.x = texel.b;\n" +
+            "     texel.b = texture2D(inputImageTexture2, lookup).b;\n" +
+            "     \n" +
+            "     float desaturatedColor;\n" +
+            "     vec3 result;\n" +
+            "     desaturatedColor = dot(desaturate, texel);\n" +
+            "     \n" +
+            "     \n" +
+            "     lookup.x = desaturatedColor;\n" +
+            "     result.r = texture2D(inputImageTexture3, lookup).r;\n" +
+            "     lookup.x = desaturatedColor;\n" +
+            "     result.g = texture2D(inputImageTexture3, lookup).g;\n" +
+            "     lookup.x = desaturatedColor;\n" +
+            "     result.b = texture2D(inputImageTexture3, lookup).b;\n" +
+            "     \n" +
+            "     texel = saturate * mix(texel, result, .5);\n" +
+            "     \n" +
+            "     vec2 tc = (2.0 * textureCoordinate) - 1.0;\n" +
+            "     float d = dot(tc, tc);\n" +
+            "     \n" +
+            "     vec3 sampled;\n" +
+            "     lookup.y = .5;\n" +
+            "     \n" +
+            "     /*\n" +
+            "      lookup.x = texel.r;\n" +
+            "      sampled.r = texture2D(inputImageTexture4, lookup).r;\n" +
+            "      \n" +
+            "      lookup.x = texel.g;\n" +
+            "      sampled.g = texture2D(inputImageTexture4, lookup).g;\n" +
+            "      \n" +
+            "      lookup.x = texel.b;\n" +
+            "      sampled.b = texture2D(inputImageTexture4, lookup).b;\n" +
+            "      \n" +
+            "      float value = smoothstep(0.0, 1.25, pow(d, 1.35)/1.65);\n" +
+            "      texel = mix(texel, sampled, value);\n" +
+            "      */\n" +
+            "     \n" +
+            "     //---\n" +
+            "     \n" +
+            "     lookup = vec2(d, texel.r);\n" +
+            "     texel.r = texture2D(inputImageTexture4, lookup).r;\n" +
+            "     lookup.y = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture4, lookup).g;\n" +
+            "     lookup.y = texel.b;\n" +
+            "     texel.b\t= texture2D(inputImageTexture4, lookup).b;\n" +
+            "     float value = smoothstep(0.0, 1.25, pow(d, 1.35)/1.65);\n" +
+            "     \n" +
+            "     //---\n" +
+            "     \n" +
+            "     lookup.x = texel.r;\n" +
+            "     sampled.r = texture2D(inputImageTexture5, lookup).r;\n" +
+            "     lookup.x = texel.g;\n" +
+            "     sampled.g = texture2D(inputImageTexture5, lookup).g;\n" +
+            "     lookup.x = texel.b;\n" +
+            "     sampled.b = texture2D(inputImageTexture5, lookup).b;\n" +
+            "     texel = mix(sampled, texel, value);\n" +
+            "     \n" +
+            "     \n" +
+            "     lookup.x = texel.r;\n" +
+            "     texel.r = texture2D(inputImageTexture6, lookup).r;\n" +
+            "     lookup.x = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture6, lookup).g;\n" +
+            "     lookup.x = texel.b;\n" +
+            "     texel.b = texture2D(inputImageTexture6, lookup).b;\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFEarlybirdFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.earlybird_curves);
+        addInputTexture(R.drawable.earlybird_overlay_map);
+        addInputTexture(R.drawable.vignette_map);
+        addInputTexture(R.drawable.earlybird_blowout);
+        addInputTexture(R.drawable.earlybird_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFHefeFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFHefeFilter.java
new file mode 100644
index 00000000..0ee25604
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFHefeFilter.java
@@ -0,0 +1,63 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFHefeFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;  //edgeBurn\n" +
+            " uniform sampler2D inputImageTexture3;  //hefeMap\n" +
+            " uniform sampler2D inputImageTexture4;  //hefeGradientMap\n" +
+            " uniform sampler2D inputImageTexture5;  //hefeSoftLight\n" +
+            " uniform sampler2D inputImageTexture6;  //hefeMetal\n" +
+            " \n" +
+            " void main()\n" +
+            "{\t\n" +
+            "\tvec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "\tvec3 edge = texture2D(inputImageTexture2, textureCoordinate).rgb;\n" +
+            "\ttexel = texel * edge;\n" +
+            "\t\n" +
+            "\ttexel = vec3(\n" +
+            "                 texture2D(inputImageTexture3, vec2(texel.r, .16666)).r,\n" +
+            "                 texture2D(inputImageTexture3, vec2(texel.g, .5)).g,\n" +
+            "                 texture2D(inputImageTexture3, vec2(texel.b, .83333)).b);\n" +
+            "\t\n" +
+            "\tvec3 luma = vec3(.30, .59, .11);\n" +
+            "\tvec3 gradSample = texture2D(inputImageTexture4, vec2(dot(luma, texel), .5)).rgb;\n" +
+            "\tvec3 final = vec3(\n" +
+            "                      texture2D(inputImageTexture5, vec2(gradSample.r, texel.r)).r,\n" +
+            "                      texture2D(inputImageTexture5, vec2(gradSample.g, texel.g)).g,\n" +
+            "                      texture2D(inputImageTexture5, vec2(gradSample.b, texel.b)).b\n" +
+            "                      );\n" +
+            "    \n" +
+            "    vec3 metal = texture2D(inputImageTexture6, textureCoordinate).rgb;\n" +
+            "    vec3 metaled = vec3(\n" +
+            "                        texture2D(inputImageTexture5, vec2(metal.r, texel.r)).r,\n" +
+            "                        texture2D(inputImageTexture5, vec2(metal.g, texel.g)).g,\n" +
+            "                        texture2D(inputImageTexture5, vec2(metal.b, texel.b)).b\n" +
+            "                        );\n" +
+            "\t\n" +
+            "\tgl_FragColor = vec4(metaled, 1.0);\n" +
+            "}\n";
+
+    public IFHefeFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.edge_burn);
+        addInputTexture(R.drawable.hefe_map);
+        addInputTexture(R.drawable.hefe_gradient_map);
+        addInputTexture(R.drawable.hefe_soft_light);
+        addInputTexture(R.drawable.hefe_metal);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFHudsonFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFHudsonFilter.java
new file mode 100644
index 00000000..06483305
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFHudsonFilter.java
@@ -0,0 +1,49 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFHudsonFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //blowout;\n" +
+            " uniform sampler2D inputImageTexture3; //overlay;\n" +
+            " uniform sampler2D inputImageTexture4; //map\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec4 texel = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "     \n" +
+            "     vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r;\n" +
+            "     texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g;\n" +
+            "     texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b;\n" +
+            "     \n" +
+            "     vec4 mapped;\n" +
+            "     mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;\n" +
+            "     mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;\n" +
+            "     mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;\n" +
+            "     mapped.a = 1.0;\n" +
+            "     gl_FragColor = mapped;\n" +
+            " }\n";
+
+    public IFHudsonFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.hudson_background);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.hudson_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFImageFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFImageFilter.java
new file mode 100644
index 00000000..63c4b520
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFImageFilter.java
@@ -0,0 +1,187 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.opengl.GLES20;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
+import jp.co.cyberagent.android.gpuimage.OpenGlUtils;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFImageFilter extends GPUImageFilter {
+    private int filterInputTextureUniform2;
+    private int filterInputTextureUniform3;
+    private int filterInputTextureUniform4;
+    private int filterInputTextureUniform5;
+    private int filterInputTextureUniform6;
+    public int filterSourceTexture2 = OpenGlUtils.NO_TEXTURE;
+    public int filterSourceTexture3 = OpenGlUtils.NO_TEXTURE;
+    public int filterSourceTexture4 = OpenGlUtils.NO_TEXTURE;
+    public int filterSourceTexture5 = OpenGlUtils.NO_TEXTURE;
+    public int filterSourceTexture6 = OpenGlUtils.NO_TEXTURE;
+    private List<Integer> mResIds;
+    private Context mContext;
+
+
+    public IFImageFilter(Context context, String fragmentShaderString) {
+        super(NO_FILTER_VERTEX_SHADER, fragmentShaderString);
+        mContext = context;
+    }
+
+    public void onInit() {
+        super.onInit();
+        filterInputTextureUniform2 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture2");
+        filterInputTextureUniform3 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture3");
+        filterInputTextureUniform4 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture4");
+        filterInputTextureUniform5 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture5");
+        filterInputTextureUniform6 = GLES20.glGetUniformLocation(getProgram(), "inputImageTexture6");
+
+        initInputTexture();
+    }
+
+    public void onDestroy() {
+        super.onDestroy();
+
+        if (filterSourceTexture2 != OpenGlUtils.NO_TEXTURE) {
+            int[] arrayOfInt1 = new int[1];
+            arrayOfInt1[0] = this.filterSourceTexture2;
+            GLES20.glDeleteTextures(1, arrayOfInt1, 0);
+            this.filterSourceTexture2 = OpenGlUtils.NO_TEXTURE;
+        }
+
+        if (filterSourceTexture3 != OpenGlUtils.NO_TEXTURE) {
+            int[] arrayOfInt2 = new int[1];
+            arrayOfInt2[0] = this.filterSourceTexture3;
+            GLES20.glDeleteTextures(1, arrayOfInt2, 0);
+            this.filterSourceTexture3 = OpenGlUtils.NO_TEXTURE;
+        }
+
+        if (filterSourceTexture4 != OpenGlUtils.NO_TEXTURE) {
+            int[] arrayOfInt3 = new int[1];
+            arrayOfInt3[0] = this.filterSourceTexture4;
+            GLES20.glDeleteTextures(1, arrayOfInt3, 0);
+            this.filterSourceTexture4 = OpenGlUtils.NO_TEXTURE;
+        }
+
+        if (filterSourceTexture5 != OpenGlUtils.NO_TEXTURE) {
+            int[] arrayOfInt4 = new int[1];
+            arrayOfInt4[0] = this.filterSourceTexture5;
+            GLES20.glDeleteTextures(1, arrayOfInt4, 0);
+            this.filterSourceTexture5 = OpenGlUtils.NO_TEXTURE;
+        }
+
+        if (filterSourceTexture6 != OpenGlUtils.NO_TEXTURE) {
+            int[] arrayOfInt5 = new int[1];
+            arrayOfInt5[0] = this.filterSourceTexture6;
+            GLES20.glDeleteTextures(1, arrayOfInt5, 0);
+            this.filterSourceTexture6 = OpenGlUtils.NO_TEXTURE;
+        }
+
+    }
+
+    @Override
+    protected void onDrawArraysPre() {
+        super.onDrawArraysPre();
+
+        if (filterSourceTexture2 != OpenGlUtils.NO_TEXTURE) {
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, filterSourceTexture2);
+            GLES20.glUniform1i(filterInputTextureUniform2, 3);
+        }
+
+        if (filterSourceTexture3 != OpenGlUtils.NO_TEXTURE) {
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE4);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, filterSourceTexture3);
+            GLES20.glUniform1i(filterInputTextureUniform3, 4);
+        }
+
+        if (filterSourceTexture4 != OpenGlUtils.NO_TEXTURE) {
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE5);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, filterSourceTexture4);
+            GLES20.glUniform1i(filterInputTextureUniform4, 5);
+        }
+
+        if (filterSourceTexture5 != OpenGlUtils.NO_TEXTURE) {
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE6);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, filterSourceTexture5);
+            GLES20.glUniform1i(filterInputTextureUniform5, 6);
+        }
+
+        if (filterSourceTexture6 != OpenGlUtils.NO_TEXTURE) {
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE7);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, filterSourceTexture6);
+            GLES20.glUniform1i(filterInputTextureUniform6, 7);
+        }
+
+    }
+
+    public void addInputTexture(int resId) {
+        if (mResIds == null) {
+            mResIds = new ArrayList<Integer>();
+        }
+        mResIds.add(resId);
+    }
+
+    public void initInputTexture() {
+        if (mResIds == null) {
+            return;
+        }
+        if (mResIds.size() > 0) {
+            runOnDraw(new Runnable() {
+                @Override
+                public void run() {
+                    Bitmap b = BitmapFactory.decodeResource(mContext.getResources(), mResIds.get(0));
+                    filterSourceTexture2 = OpenGlUtils.loadTexture(b, OpenGlUtils.NO_TEXTURE, true);
+                }
+            });
+        }
+
+        if (mResIds.size() > 1) {
+            runOnDraw(new Runnable() {
+                @Override
+                public void run() {
+                    Bitmap b = BitmapFactory.decodeResource(mContext.getResources(), mResIds.get(1));
+                    filterSourceTexture3 = OpenGlUtils.loadTexture(b, OpenGlUtils.NO_TEXTURE, true);
+                }
+            });
+        }
+
+        if (mResIds.size() > 2) {
+            runOnDraw(new Runnable() {
+                @Override
+                public void run() {
+                    Bitmap b = BitmapFactory.decodeResource(mContext.getResources(), mResIds.get(2));
+                    filterSourceTexture4 = OpenGlUtils.loadTexture(b, OpenGlUtils.NO_TEXTURE, true);
+                }
+            });
+        }
+
+        if (mResIds.size() > 3) {
+            runOnDraw(new Runnable() {
+                @Override
+                public void run() {
+                    Bitmap b = BitmapFactory.decodeResource(mContext.getResources(), mResIds.get(3));
+                    filterSourceTexture5 = OpenGlUtils.loadTexture(b, OpenGlUtils.NO_TEXTURE, true);
+                }
+            });
+        }
+
+        if (mResIds.size() > 4) {
+            runOnDraw(new Runnable() {
+                @Override
+                public void run() {
+                    Bitmap b = BitmapFactory.decodeResource(mContext.getResources(), mResIds.get(4));
+                    filterSourceTexture6 = OpenGlUtils.loadTexture(b, OpenGlUtils.NO_TEXTURE, true);
+                }
+            });
+        }
+    }
+
+
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFInkwellFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFInkwellFilter.java
new file mode 100644
index 00000000..f427ee0e
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFInkwellFilter.java
@@ -0,0 +1,34 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFInkwellFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     texel = vec3(dot(vec3(0.3, 0.6, 0.1), texel));\n" +
+            "     texel = vec3(texture2D(inputImageTexture2, vec2(texel.r, .16666)).r);\n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFInkwellFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.inkwell_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFLomoFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFLomoFilter.java
new file mode 100644
index 00000000..16bb4d97
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFLomoFilter.java
@@ -0,0 +1,54 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFLomoFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;\n" +
+            " uniform sampler2D inputImageTexture3;\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     vec2 red = vec2(texel.r, 0.16666);\n" +
+            "     vec2 green = vec2(texel.g, 0.5);\n" +
+            "     vec2 blue = vec2(texel.b, 0.83333);\n" +
+            "     \n" +
+            "     texel.rgb = vec3(\n" +
+            "                      texture2D(inputImageTexture2, red).r,\n" +
+            "                      texture2D(inputImageTexture2, green).g,\n" +
+            "                      texture2D(inputImageTexture2, blue).b);\n" +
+            "     \n" +
+            "     vec2 tc = (2.0 * textureCoordinate) - 1.0;\n" +
+            "     float d = dot(tc, tc);\n" +
+            "     vec2 lookup = vec2(d, texel.r);\n" +
+            "     texel.r = texture2D(inputImageTexture3, lookup).r;\n" +
+            "     lookup.y = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture3, lookup).g;\n" +
+            "     lookup.y = texel.b;\n" +
+            "     texel.b\t= texture2D(inputImageTexture3, lookup).b;\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel,1.0);\n" +
+            " }\n";
+
+    public IFLomoFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.lomo_map);
+        addInputTexture(R.drawable.vignette_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFLordKelvinFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFLordKelvinFilter.java
new file mode 100644
index 00000000..f7a1fe26
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFLordKelvinFilter.java
@@ -0,0 +1,45 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFLordKelvinFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     vec2 lookup;\n" +
+            "     lookup.y = .5;\n" +
+            "     \n" +
+            "     lookup.x = texel.r;\n" +
+            "     texel.r = texture2D(inputImageTexture2, lookup).r;\n" +
+            "     \n" +
+            "     lookup.x = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture2, lookup).g;\n" +
+            "     \n" +
+            "     lookup.x = texel.b;\n" +
+            "     texel.b = texture2D(inputImageTexture2, lookup).b;\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFLordKelvinFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.kelvin_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFNashvilleFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFNashvilleFilter.java
new file mode 100644
index 00000000..58995c88
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFNashvilleFilter.java
@@ -0,0 +1,36 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFNashvilleFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2;\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     texel = vec3(\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.g, .5)).g,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);\n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFNashvilleFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.nashville_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFRiseFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFRiseFilter.java
new file mode 100644
index 00000000..d409f5fb
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFRiseFilter.java
@@ -0,0 +1,40 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFRiseFilter extends IFImageFilter {
+    private static final String SHADER = "\n precision lowp float;\n\n " +
+            "varying highp vec2 textureCoordinate;\n\n " +
+            "uniform sampler2D inputImageTexture;\n " +
+            "uniform sampler2D inputImageTexture2;\n " +
+            "uniform sampler2D inputImageTexture3;\n " +
+            "uniform sampler2D inputImageTexture4;\n\n " +
+            "void main()\n  " +
+            "{\n\n  " +
+            "vec4 texel = texture2D(inputImageTexture, textureCoordinate);\n   " +
+            "vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb;\n\n   " +
+            "texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r;\n   " +
+            "texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g;\n   " +
+            "texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b;\n\n   " +
+            "vec4 mapped;\n   mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;\n   " +
+            "mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;\n   " +
+            "mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;\n   " +
+            "mapped.a = 1.0;\n\n   " +
+            "gl_FragColor = mapped;\n }";
+
+    public IFRiseFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.blackboard);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.rise_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFSierraFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFSierraFilter.java
new file mode 100644
index 00000000..bd24a6a4
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFSierraFilter.java
@@ -0,0 +1,49 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFSierraFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //blowout;\n" +
+            " uniform sampler2D inputImageTexture3; //overlay;\n" +
+            " uniform sampler2D inputImageTexture4; //map\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec4 texel = texture2D(inputImageTexture, textureCoordinate);\n" +
+            "     vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r;\n" +
+            "     texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g;\n" +
+            "     texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b;\n" +
+            "     \n" +
+            "     vec4 mapped;\n" +
+            "     mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r;\n" +
+            "     mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g;\n" +
+            "     mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b;\n" +
+            "     mapped.a = 1.0;\n" +
+            "     \n" +
+            "     gl_FragColor = mapped;\n" +
+            " }\n";
+
+    public IFSierraFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.sierra_vignette);
+        addInputTexture(R.drawable.overlay_map);
+        addInputTexture(R.drawable.sierra_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFSutroFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFSutroFilter.java
new file mode 100644
index 00000000..29cc8d9a
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFSutroFilter.java
@@ -0,0 +1,67 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFSutroFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //sutroMap;\n" +
+            " uniform sampler2D inputImageTexture3; //sutroMetal;\n" +
+            " uniform sampler2D inputImageTexture4; //softLight\n" +
+            " uniform sampler2D inputImageTexture5; //sutroEdgeburn\n" +
+            " uniform sampler2D inputImageTexture6; //sutroCurves\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     vec2 tc = (2.0 * textureCoordinate) - 1.0;\n" +
+            "     float d = dot(tc, tc);\n" +
+            "     vec2 lookup = vec2(d, texel.r);\n" +
+            "     texel.r = texture2D(inputImageTexture2, lookup).r;\n" +
+            "     lookup.y = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture2, lookup).g;\n" +
+            "     lookup.y = texel.b;\n" +
+            "     texel.b\t= texture2D(inputImageTexture2, lookup).b;\n" +
+            "     \n" +
+            "     vec3 rgbPrime = vec3(0.1019, 0.0, 0.0); \n" +
+            "     float m = dot(vec3(.3, .59, .11), texel.rgb) - 0.03058;\n" +
+            "     texel = mix(texel, rgbPrime + m, 0.32);\n" +
+            "     \n" +
+            "     vec3 metal = texture2D(inputImageTexture3, textureCoordinate).rgb;\n" +
+            "     texel.r = texture2D(inputImageTexture4, vec2(metal.r, texel.r)).r;\n" +
+            "     texel.g = texture2D(inputImageTexture4, vec2(metal.g, texel.g)).g;\n" +
+            "     texel.b = texture2D(inputImageTexture4, vec2(metal.b, texel.b)).b;\n" +
+            "     \n" +
+            "     texel = texel * texture2D(inputImageTexture5, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     texel.r = texture2D(inputImageTexture6, vec2(texel.r, .16666)).r;\n" +
+            "     texel.g = texture2D(inputImageTexture6, vec2(texel.g, .5)).g;\n" +
+            "     texel.b = texture2D(inputImageTexture6, vec2(texel.b, .83333)).b;\n" +
+            "     \n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFSutroFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.vignette_map);
+        addInputTexture(R.drawable.sutro_metal);
+        addInputTexture(R.drawable.soft_light);
+        addInputTexture(R.drawable.sutro_edge_burn);
+        addInputTexture(R.drawable.sutro_curves);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFToasterFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFToasterFilter.java
new file mode 100644
index 00000000..cf0db738
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFToasterFilter.java
@@ -0,0 +1,90 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFToasterFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //toasterMetal\n" +
+            " uniform sampler2D inputImageTexture3; //toasterSoftlight\n" +
+            " uniform sampler2D inputImageTexture4; //toasterCurves\n" +
+            " uniform sampler2D inputImageTexture5; //toasterOverlayMapWarm\n" +
+            " uniform sampler2D inputImageTexture6; //toasterColorshift\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     lowp vec3 texel;\n" +
+            "     mediump vec2 lookup;\n" +
+            "     vec2 blue;\n" +
+            "     vec2 green;\n" +
+            "     vec2 red;\n" +
+            "     lowp vec4 tmpvar_1;\n" +
+            "     tmpvar_1 = texture2D (inputImageTexture, textureCoordinate);\n" +
+            "     texel = tmpvar_1.xyz;\n" +
+            "     lowp vec4 tmpvar_2;\n" +
+            "     tmpvar_2 = texture2D (inputImageTexture2, textureCoordinate);\n" +
+            "     lowp vec2 tmpvar_3;\n" +
+            "     tmpvar_3.x = tmpvar_2.x;\n" +
+            "     tmpvar_3.y = tmpvar_1.x;\n" +
+            "     texel.x = texture2D (inputImageTexture3, tmpvar_3).x;\n" +
+            "     lowp vec2 tmpvar_4;\n" +
+            "     tmpvar_4.x = tmpvar_2.y;\n" +
+            "     tmpvar_4.y = tmpvar_1.y;\n" +
+            "     texel.y = texture2D (inputImageTexture3, tmpvar_4).y;\n" +
+            "     lowp vec2 tmpvar_5;\n" +
+            "     tmpvar_5.x = tmpvar_2.z;\n" +
+            "     tmpvar_5.y = tmpvar_1.z;\n" +
+            "     texel.z = texture2D (inputImageTexture3, tmpvar_5).z;\n" +
+            "     red.x = texel.x;\n" +
+            "     red.y = 0.16666;\n" +
+            "     green.x = texel.y;\n" +
+            "     green.y = 0.5;\n" +
+            "     blue.x = texel.z;\n" +
+            "     blue.y = 0.833333;\n" +
+            "     texel.x = texture2D (inputImageTexture4, red).x;\n" +
+            "     texel.y = texture2D (inputImageTexture4, green).y;\n" +
+            "     texel.z = texture2D (inputImageTexture4, blue).z;\n" +
+            "     mediump vec2 tmpvar_6;\n" +
+            "     tmpvar_6 = ((2.0 * textureCoordinate) - 1.0);\n" +
+            "     mediump vec2 tmpvar_7;\n" +
+            "     tmpvar_7.x = dot (tmpvar_6, tmpvar_6);\n" +
+            "     tmpvar_7.y = texel.x;\n" +
+            "     lookup = tmpvar_7;\n" +
+            "     texel.x = texture2D (inputImageTexture5, tmpvar_7).x;\n" +
+            "     lookup.y = texel.y;\n" +
+            "     texel.y = texture2D (inputImageTexture5, lookup).y;\n" +
+            "     lookup.y = texel.z;\n" +
+            "     texel.z = texture2D (inputImageTexture5, lookup).z;\n" +
+            "     red.x = texel.x;\n" +
+            "     green.x = texel.y;\n" +
+            "     blue.x = texel.z;\n" +
+            "     texel.x = texture2D (inputImageTexture6, red).x;\n" +
+            "     texel.y = texture2D (inputImageTexture6, green).y;\n" +
+            "     texel.z = texture2D (inputImageTexture6, blue).z;\n" +
+            "     lowp vec4 tmpvar_8;\n" +
+            "     tmpvar_8.w = 1.0;\n" +
+            "     tmpvar_8.xyz = texel;\n" +
+            "     gl_FragColor = tmpvar_8;\n" +
+            " }";
+
+    public IFToasterFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.toaster_metal);
+        addInputTexture(R.drawable.toaster_soft_light);
+        addInputTexture(R.drawable.toaster_curves);
+        addInputTexture(R.drawable.toaster_overlay_map_warm);
+        addInputTexture(R.drawable.toaster_color_shift);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFValenciaFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFValenciaFilter.java
new file mode 100644
index 00000000..ecbd07b5
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFValenciaFilter.java
@@ -0,0 +1,61 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFValenciaFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //map\n" +
+            " uniform sampler2D inputImageTexture3; //gradMap\n" +
+            " \n" +
+            " mat3 saturateMatrix = mat3(\n" +
+            "                            1.1402,\n" +
+            "                            -0.0598,\n" +
+            "                            -0.061,\n" +
+            "                            -0.1174,\n" +
+            "                            1.0826,\n" +
+            "                            -0.1186,\n" +
+            "                            -0.0228,\n" +
+            "                            -0.0228,\n" +
+            "                            1.1772);\n" +
+            " \n" +
+            " vec3 lumaCoeffs = vec3(.3, .59, .11);\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     texel = vec3(\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.r, .1666666)).r,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.g, .5)).g,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.b, .8333333)).b\n" +
+            "                  );\n" +
+            "     \n" +
+            "     texel = saturateMatrix * texel;\n" +
+            "     float luma = dot(lumaCoeffs, texel);\n" +
+            "     texel = vec3(\n" +
+            "                  texture2D(inputImageTexture3, vec2(luma, texel.r)).r,\n" +
+            "                  texture2D(inputImageTexture3, vec2(luma, texel.g)).g,\n" +
+            "                  texture2D(inputImageTexture3, vec2(luma, texel.b)).b);\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFValenciaFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.valencia_map);
+        addInputTexture(R.drawable.valencia_gradient_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFWaldenFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFWaldenFilter.java
new file mode 100644
index 00000000..dcc890d8
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFWaldenFilter.java
@@ -0,0 +1,50 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFWaldenFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //map\n" +
+            " uniform sampler2D inputImageTexture3; //vigMap\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     texel = vec3(\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.r, .16666)).r,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.g, .5)).g,\n" +
+            "                  texture2D(inputImageTexture2, vec2(texel.b, .83333)).b);\n" +
+            "     \n" +
+            "     vec2 tc = (2.0 * textureCoordinate) - 1.0;\n" +
+            "     float d = dot(tc, tc);\n" +
+            "     vec2 lookup = vec2(d, texel.r);\n" +
+            "     texel.r = texture2D(inputImageTexture3, lookup).r;\n" +
+            "     lookup.y = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture3, lookup).g;\n" +
+            "     lookup.y = texel.b;\n" +
+            "     texel.b\t= texture2D(inputImageTexture3, lookup).b;\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            " }\n";
+
+    public IFWaldenFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.walden_map);
+        addInputTexture(R.drawable.vignette_map);
+    }
+}
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFXprollFilter.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFXprollFilter.java
new file mode 100644
index 00000000..a112b8b1
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/filter/IFXprollFilter.java
@@ -0,0 +1,53 @@
+package jp.co.cyberagent.android.gpuimage.sample.filter;
+
+import android.content.Context;
+
+import jp.co.cyberagent.android.gpuimage.sample.R;
+
+/**
+ * Created by sam on 14-8-9.
+ */
+public class IFXprollFilter extends IFImageFilter {
+    private static final String SHADER = "precision lowp float;\n" +
+            " \n" +
+            " varying highp vec2 textureCoordinate;\n" +
+            " \n" +
+            " uniform sampler2D inputImageTexture;\n" +
+            " uniform sampler2D inputImageTexture2; //map\n" +
+            " uniform sampler2D inputImageTexture3; //vigMap\n" +
+            " \n" +
+            " void main()\n" +
+            " {\n" +
+            "     \n" +
+            "     vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb;\n" +
+            "     \n" +
+            "     vec2 tc = (2.0 * textureCoordinate) - 1.0;\n" +
+            "     float d = dot(tc, tc);\n" +
+            "     vec2 lookup = vec2(d, texel.r);\n" +
+            "     texel.r = texture2D(inputImageTexture3, lookup).r;\n" +
+            "     lookup.y = texel.g;\n" +
+            "     texel.g = texture2D(inputImageTexture3, lookup).g;\n" +
+            "     lookup.y = texel.b;\n" +
+            "     texel.b\t= texture2D(inputImageTexture3, lookup).b;\n" +
+            "     \n" +
+            "     vec2 red = vec2(texel.r, 0.16666);\n" +
+            "     vec2 green = vec2(texel.g, 0.5);\n" +
+            "     vec2 blue = vec2(texel.b, .83333);\n" +
+            "     texel.r = texture2D(inputImageTexture2, red).r;\n" +
+            "     texel.g = texture2D(inputImageTexture2, green).g;\n" +
+            "     texel.b = texture2D(inputImageTexture2, blue).b;\n" +
+            "     \n" +
+            "     gl_FragColor = vec4(texel, 1.0);\n" +
+            "     \n" +
+            " }\n";
+
+    public IFXprollFilter(Context paramContext) {
+        super(paramContext, SHADER);
+        setRes();
+    }
+
+    private void setRes() {
+        addInputTexture(R.drawable.xpro_map);
+        addInputTexture(R.drawable.vignette_map);
+    }
+}
