diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
index e7b68fe9..be3046c6 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
@@ -29,6 +29,7 @@
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+import java.util.Arrays;
 
 import javax.microedition.khronos.egl.EGL10;
 import javax.microedition.khronos.egl.EGLConfig;
@@ -40,6 +41,8 @@
 
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_NO_ROTATION;
 import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_ROTATED_180;
+import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_ROTATED_270;
+import static jp.co.cyberagent.android.gpuimage.util.TextureRotationUtil.TEXTURE_ROTATED_90;
 
 @TargetApi(11)
 public class GPUImageTextureRenderer extends GPUImageRenderer implements SurfaceTexture.OnFrameAvailableListener {
@@ -435,12 +438,27 @@ private void prepareFramebuffer(int width, int height) {
 
     @Override
     protected void adjustImageScaling() {
+        float[] texture = TEXTURE_NO_ROTATION;
+        switch (mRotation) {
+            case NORMAL:
+                break;
+            case ROTATION_90:
+                texture = TEXTURE_ROTATED_90;
+                break;
+            case ROTATION_180:
+                texture = TEXTURE_ROTATED_180;
+                break;
+            case ROTATION_270:
+                texture = TEXTURE_ROTATED_270;
+                break;
+        }
         mGLCubeBuffer.clear();
         mGLCubeBuffer.put(CUBE).position(0);
         mGLTextureBuffer.clear();
-        mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);
+        mGLTextureBuffer.put(texture).position(0);
     }
 
+
     public GPUImageFilter getFilter() {
         return mFilter;
     }
diff --git a/sample/build.gradle b/sample/build.gradle
index 11f09b01..1299d10d 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -38,4 +38,5 @@ dependencies {
 //    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:+@aar'
     compile 'com.android.support:support-v4:21.+'
     compile 'com.github.skonb:fenster:78b6a3e3a5'
+    compile 'com.github.wseemann:FFmpegMediaMetadataRetriever:1.0.3'
 }
diff --git a/sample/res/layout/activity_movie.xml b/sample/res/layout/activity_movie.xml
index 0dfc07c4..d7c9761d 100644
--- a/sample/res/layout/activity_movie.xml
+++ b/sample/res/layout/activity_movie.xml
@@ -20,4 +20,12 @@
         android:layout_alignParentBottom="true"
         android:layout_alignParentRight="true"
         android:text="Choose Filter"/>
+
+    <Button
+        android:id="@+id/button_choose_movie"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:text="Choose Movie"/>
 </RelativeLayout>
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
index dbac3c31..3e9eab59 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
@@ -1,14 +1,21 @@
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
 import android.app.Activity;
+import android.content.Intent;
+import android.database.Cursor;
 import android.graphics.SurfaceTexture;
 import android.hardware.Camera;
 import android.media.MediaPlayer;
+import android.net.Uri;
 import android.os.Bundle;
+import android.provider.MediaStore;
+import android.util.Log;
 import android.view.View;
 
 import com.malmstein.fenster.view.FensterVideoView;
 
+import java.util.HashMap;
+
 import jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
@@ -18,11 +25,14 @@
 import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageTextureRenderer;
 import jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter;
+import jp.co.cyberagent.android.gpuimage.Rotation;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.R;
+import wseemann.media.FFmpegMediaMetadataRetriever;
 
 public class ActivityMovie extends Activity implements View.OnClickListener {
 
+    static final int REQUEST_PICK_MOVIE = 1001;
     FensterVideoView videoView;
     GPUImageFilter filter = null;
 
@@ -47,14 +57,19 @@ protected void onCreate(Bundle savedInstanceState) {
         videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
             @Override
             public void onPrepared(MediaPlayer mp) {
-                videoView.start();
+                if (!videoView.isPlaying()) {
+                    videoView.start();
+                } else {
+                    videoView.resume();
+                }
             }
         });
         videoView.start();
         findViewById(R.id.button_choose_filter).setOnClickListener(this);
-
+        findViewById(R.id.button_choose_movie).setOnClickListener(this);
     }
 
+
     @Override
     public void onClick(final View v) {
         switch (v.getId()) {
@@ -66,12 +81,79 @@ public void onGpuImageFilterChosenListener(final GPUImageFilter filter) {
                         switchFilterTo(filter);
                     }
                 });
+                break;
+            case R.id.button_choose_movie:
+                videoView.pause();
+                Intent moviePickerIntent = new Intent(Intent.ACTION_PICK, MediaStore.Video.Media.EXTERNAL_CONTENT_URI);
+                Intent chooserIntent = Intent.createChooser(moviePickerIntent, "Choose application to pick movie.");
+                startActivityForResult(chooserIntent, REQUEST_PICK_MOVIE);
+                break;
         }
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+        videoView.setRenderer(new Renderer());
+        ((GPUImageRenderer) videoView.getRenderer()).setRotation(rotation);
+    }
+
     void switchFilterTo(GPUImageFilter filter) {
         this.filter = filter;
         ((GPUImageRenderer) videoView.getRenderer()).setFilter(filter);
     }
 
+    Rotation rotation = Rotation.NORMAL;
+
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        switch (requestCode) {
+            case REQUEST_PICK_MOVIE: {
+                if (resultCode == Activity.RESULT_OK) {
+                    Uri selectedVideo = null;
+                    selectedVideo = data.getData();
+                    String[] filePathColumn = new String[]{MediaStore.Video.Media.DATA, MediaStore.Video.Media.DURATION};
+                    Cursor cursor = getContentResolver().query(
+                            selectedVideo, filePathColumn, null, null, null);
+                    cursor.moveToFirst();
+
+                    int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
+
+                    String filePath = cursor.getString(columnIndex);
+                    cursor.moveToFirst();
+
+                    columnIndex = cursor.getColumnIndex(filePathColumn[1]);
+                    long duration = cursor.getLong(columnIndex);
+                    cursor.close();
+                    FFmpegMediaMetadataRetriever retriever = new FFmpegMediaMetadataRetriever();
+                    if (selectedVideo != null) {
+                        retriever.setDataSource(this, selectedVideo);
+                        videoView.setVideo(selectedVideo, 0);
+                    } else {
+                        retriever.setDataSource(filePath);
+                        videoView.setVideo(filePath, 0);
+                    }
+                    String rotation = retriever.extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
+                    switch (rotation) {
+                        case "90":
+                            this.rotation = Rotation.ROTATION_90;
+                            break;
+                        case "180":
+                            this.rotation = Rotation.ROTATION_180;
+                            break;
+                        case "270":
+                            this.rotation = Rotation.ROTATION_270;
+                            break;
+                        case "0":
+                            this.rotation = Rotation.NORMAL;
+                            break;
+                    }
+
+                    videoView.resume();
+                }
+            }
+        }
+    }
 }
