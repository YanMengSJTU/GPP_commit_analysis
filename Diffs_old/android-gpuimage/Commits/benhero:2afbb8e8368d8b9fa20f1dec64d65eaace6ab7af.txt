diff --git a/sample/res/layout/activity_video.xml b/sample/res/layout/activity_video.xml
index c2575162..1f2c34ae 100644
--- a/sample/res/layout/activity_video.xml
+++ b/sample/res/layout/activity_video.xml
@@ -1,8 +1,7 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:background="#000000"
-    android:orientation="vertical">
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical">
 
     <FrameLayout
         android:layout_width="match_parent"
@@ -11,16 +10,23 @@
 
         <jp.co.cyberagent.android.gpuimage.GPUImageView
             android:id="@+id/gpuimage"
-            android:layout_gravity="center"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:visibility="gone"/>
+
+        <SurfaceView
+            android:id="@+id/video_surface"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"/>
 
         <SeekBar
             android:id="@+id/seekBar"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_gravity="bottom"
-            android:max="100" />
+            android:max="100"/>
     </FrameLayout>
 
     <LinearLayout
@@ -32,13 +38,13 @@
             android:id="@+id/button_choose_filter"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="Choose filter" />
+            android:text="Choose filter"/>
 
         <Button
             android:id="@+id/button_save"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="Save" />
+            android:text="Save"/>
     </LinearLayout>
 
 </LinearLayout>
\ No newline at end of file
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java
index 7b2d023a..8fa55170 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityVideo.java
@@ -1,9 +1,15 @@
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
 import android.content.Intent;
+import android.database.Cursor;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
 import android.net.Uri;
 import android.os.Bundle;
+import android.provider.MediaStore;
 import android.support.v7.app.AppCompatActivity;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
 import android.view.View;
 import android.widget.SeekBar;
 import android.widget.Toast;
@@ -21,10 +27,14 @@
 public class ActivityVideo extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,
         View.OnClickListener, GPUImageView.OnPictureSavedListener {
 
-    private static final int REQUEST_PICK_IMAGE = 1;
+    private static final int REQUEST_PICK_VIDEO = 1;
     private GPUImageFilter mFilter;
     private GPUImageFilterTools.FilterAdjuster mFilterAdjuster;
     private GPUImageView mGPUImageView;
+    private SurfaceView mSurfaceView;
+    private MediaPlayer mMediaPlayer;
+    private SurfaceHolder mHolder;
+    private String mPath;
 
     @Override
     public void onCreate(final Bundle savedInstanceState) {
@@ -33,18 +43,64 @@ public void onCreate(final Bundle savedInstanceState) {
         ((SeekBar) findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);
         findViewById(R.id.button_choose_filter).setOnClickListener(this);
         findViewById(R.id.button_save).setOnClickListener(this);
+        mSurfaceView = (SurfaceView) findViewById(R.id.video_surface);
 
         mGPUImageView = (GPUImageView) findViewById(R.id.gpuimage);
 
         Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-        photoPickerIntent.setType("image/*");
-        startActivityForResult(photoPickerIntent, REQUEST_PICK_IMAGE);
+        photoPickerIntent.setType("video/*");
+        startActivityForResult(photoPickerIntent, REQUEST_PICK_VIDEO);
+    }
+
+    private void initPlayer() {
+        mMediaPlayer = new MediaPlayer();
+        mHolder = mSurfaceView.getHolder();
+        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+        mHolder.addCallback(new SurfaceHolder.Callback() {
+            @Override
+            public void surfaceCreated(SurfaceHolder holder) {
+                mHolder = holder;
+                play();
+            }
+
+            @Override
+            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
+
+            }
+
+            @Override
+            public void surfaceDestroyed(SurfaceHolder holder) {
+                if (mMediaPlayer != null && mMediaPlayer.isPlaying()) {
+                    mMediaPlayer.stop();
+                }
+            }
+        });
+    }
+
+    private void play() {
+        try {
+            mMediaPlayer.reset();
+            mMediaPlayer.setDisplay(mHolder);
+            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+            mMediaPlayer.setDataSource(mPath);
+            mMediaPlayer.prepareAsync();
+            mMediaPlayer.setLooping(true);
+            mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+                @Override
+                public void onPrepared(MediaPlayer mp) {
+                    mMediaPlayer.seekTo(0);
+                    mMediaPlayer.start();
+                }
+            });
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
     protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
         switch (requestCode) {
-            case REQUEST_PICK_IMAGE:
+            case REQUEST_PICK_VIDEO:
                 if (resultCode == RESULT_OK) {
                     handleImage(data.getData());
                 } else {
@@ -113,6 +169,12 @@ public void onProgressChanged(final SeekBar seekBar, final int progress, final b
         mGPUImageView.requestRender();
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        mMediaPlayer.release();
+    }
+
     @Override
     public void onStartTrackingTouch(final SeekBar seekBar) {
     }
@@ -121,7 +183,22 @@ public void onStartTrackingTouch(final SeekBar seekBar) {
     public void onStopTrackingTouch(final SeekBar seekBar) {
     }
 
-    private void handleImage(final Uri selectedImage) {
-        mGPUImageView.setImage(selectedImage);
+    private void handleImage(final Uri uri) {
+        mPath = getRealPathFromURI(uri);
+        initPlayer();
+    }
+
+    private String getRealPathFromURI(Uri contentURI) {
+        String result;
+        Cursor cursor = getContentResolver().query(contentURI, null, null, null, null);
+        if (cursor == null) {
+            result = contentURI.getPath();
+        } else {
+            cursor.moveToFirst();
+            int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
+            result = cursor.getString(idx);
+            cursor.close();
+        }
+        return result;
     }
 }
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/AspectFrameLayout.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/AspectFrameLayout.java
new file mode 100644
index 00000000..61073ce7
--- /dev/null
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/AspectFrameLayout.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2014 Google Inc. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package jp.co.cyberagent.android.gpuimage.sample.activity;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.FrameLayout;
+
+/**
+ * Layout that adjusts to maintain a specific aspect ratio.
+ */
+public class AspectFrameLayout extends FrameLayout {
+    private static final String TAG = "AspectFrameLayout";
+
+    private double mTargetAspect = -1.0;        // initially use default window size
+    /**
+     * 是否自动适配尺寸
+     */
+    private boolean mIsAutoFit = true;
+
+    public AspectFrameLayout(Context context) {
+        super(context);
+    }
+
+    public AspectFrameLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    /**
+     * Sets the desired aspect ratio.  The value is <code>width / height</code>.
+     */
+    public void setAspectRatio(double aspectRatio) {
+        if (aspectRatio < 0) {
+            throw new IllegalArgumentException();
+        }
+        if (mTargetAspect != aspectRatio) {
+            mTargetAspect = aspectRatio;
+            requestLayout();
+        }
+    }
+
+    public void setAutoFit(boolean autoFit) {
+        mIsAutoFit = autoFit;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        if (!mIsAutoFit) {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            return;
+        }
+
+        // Target aspect ratio will be < 0 if it hasn't been set yet.  In that case,
+        // we just use whatever we've been handed.
+        if (mTargetAspect > 0) {
+            int initialWidth = MeasureSpec.getSize(widthMeasureSpec);
+            int initialHeight = MeasureSpec.getSize(heightMeasureSpec);
+
+            // factor the padding out
+            int horizPadding = getPaddingLeft() + getPaddingRight();
+            int vertPadding = getPaddingTop() + getPaddingBottom();
+            initialWidth -= horizPadding;
+            initialHeight -= vertPadding;
+
+            double viewAspectRatio = (double) initialWidth / initialHeight;
+            double aspectDiff = mTargetAspect / viewAspectRatio - 1;
+
+            if (Math.abs(aspectDiff) < 0.01) {
+                // We're very close already.  We don't want to risk switching from e.g. non-scaled
+                // 1280x720 to scaled 1280x719 because of some floating-point round-off error,
+                // so if we're really close just leave it alone.
+            } else {
+                if (aspectDiff > 0) {
+                    // limited by narrow width; restrict height
+                    initialHeight = (int) (initialWidth / mTargetAspect);
+                } else {
+                    // limited by short height; restrict width
+                    initialWidth = (int) (initialHeight * mTargetAspect);
+                }
+                initialWidth += horizPadding;
+                initialHeight += vertPadding;
+                widthMeasureSpec = MeasureSpec.makeMeasureSpec(initialWidth, MeasureSpec.EXACTLY);
+                heightMeasureSpec = MeasureSpec.makeMeasureSpec(initialHeight, MeasureSpec.EXACTLY);
+            }
+        }
+
+        //Log.d(TAG, "set width=[" + MeasureSpec.toString(widthMeasureSpec) +
+        //        "] height=[" + View.MeasureSpec.toString(heightMeasureSpec) + "]");
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    }
+}
