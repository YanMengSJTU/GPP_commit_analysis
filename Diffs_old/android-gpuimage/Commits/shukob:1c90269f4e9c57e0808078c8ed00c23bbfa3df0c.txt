diff --git a/build.gradle b/build.gradle
index 812762da..c09e2bdf 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.5.0'
+        classpath 'com.android.tools.build:gradle:2.2.3'
     }
 }
 
diff --git a/gradle.properties b/gradle.properties
index fea483de..7f3185a0 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -22,11 +22,11 @@ POM_LICENCE_URL=http\://www.apache.org/licenses/LICENSE-2.0.txt
 POM_DESCRIPTION=Image filters for Android with OpenGL (based on GPUImage for iOS)
 POM_LICENCE_NAME=The Apache Software License, Version 2.0
 android.useDeprecatedNdk=true
-BUILD_TOOLS_VERSION=23.0.2
+BUILD_TOOLS_VERSION=25.0.2
 VERSION_NAME=1.3.0
 VERSION_CODE=9
 POM_SCM_DEV_CONNECTION=scm\:git@github.com\:CyberAgent/android-gpuimage.git
-TARGET_SDK_VERSION=22
+TARGET_SDK_VERSION=25
 POM_URL=https\://github.com/cyberagent/android-gpuimage
 COMPILE_SDK_VERSION=22
 POM_SCM_CONNECTION=scm\:git@github.com\:CyberAgent/android-gpuimage.git
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java
index 9a4f995c..65591f85 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageCanvasOverlayFilter.java
@@ -95,8 +95,13 @@ public Surface getCanvasSurface() {
     }
 
     @Override
-    public void onDraw(int textureId, FloatBuffer cubeBuffer, FloatBuffer textureBuffer) {
-        super.onDraw(textureId, cubeBuffer, textureBuffer);
+    public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
+                       final FloatBuffer textureBuffer) {
+        onDraw(textureId, cubeBuffer, textureBuffer, identityMatrix);
+    }
+    @Override
+    public void onDraw(int textureId, FloatBuffer cubeBuffer, FloatBuffer textureBuffer, final float[] textureMatrix) {
+        super.onDraw(textureId, cubeBuffer, textureBuffer, textureMatrix);
         if (canvasSurface != null) {
             if (frameAvailable) {
                 canvasTexture.updateTexImage();
@@ -113,6 +118,7 @@ public void onDraw(int textureId, FloatBuffer cubeBuffer, FloatBuffer textureBuf
             GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
             GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, textures[0]);
             GLES20.glUniform1i(canvasUniformTexture, 2);
+            GLES20.glUniformMatrix4fv(mGLUniformTextureMatrix, 1, false, textureMatrix, 0);
             GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
             GLES20.glDisableVertexAttribArray(canvasAttribPosition);
             GLES20.glDisableVertexAttribArray(canvasAttribTextureCoordinate);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
index ead45f47..92342195 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
@@ -34,11 +34,12 @@
             "attribute vec4 inputTextureCoordinate;\n" +
             " \n" +
             "varying vec2 textureCoordinate;\n" +
+            "uniform mediump mat4 textureMatrix;\n" +
             " \n" +
             "void main()\n" +
             "{\n" +
             "    gl_Position = position;\n" +
-            "    textureCoordinate = inputTextureCoordinate.xy;\n" +
+            "    textureCoordinate = (textureMatrix * inputTextureCoordinate).xy;\n" +
             "}";
     public static final String NO_FILTER_FRAGMENT_SHADER = "" +
             "precision mediump float;\n" +
@@ -58,12 +59,15 @@
     protected int mGLProgId;
     protected int mGLAttribPosition;
     protected int mGLUniformTexture;
+    protected int mGLUniformTextureMatrix;
     protected int mGLAttribTextureCoordinate;
     protected int mOutputWidth;
     protected int mOutputHeight;
     private boolean mIsInitialized;
     protected int mGLTexture = GLES20.GL_TEXTURE0;
     protected boolean mExternalOES;
+    protected float[] identityMatrix = new float[]{1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};
+
 
     public GPUImageFilter() {
         this(NO_FILTER_VERTEX_SHADER, NO_FILTER_FRAGMENT_SHADER);
@@ -118,6 +122,7 @@ public void onInit() {
         mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, "inputImageTexture");
         mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,
                 "inputTextureCoordinate");
+        mGLUniformTextureMatrix = GLES20.glGetUniformLocation(mGLProgId, "textureMatrix");
         GLES20.glUseProgram(mGLProgId);
         mIsInitialized = true;
     }
@@ -141,6 +146,11 @@ public void onOutputSizeChanged(final int width, final int height) {
 
     public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
                        final FloatBuffer textureBuffer) {
+        onDraw(textureId, cubeBuffer, textureBuffer, identityMatrix);
+    }
+
+    public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
+                       final FloatBuffer textureBuffer, final float[] textureMatrix) {
 
         GLES20.glUseProgram(mGLProgId);
         runPendingOnDrawTasks();
@@ -164,6 +174,7 @@ public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
             }
             GLES20.glUniform1i(mGLUniformTexture, mGLTexture - GLES20.GL_TEXTURE0);
         }
+        GLES20.glUniformMatrix4fv(mGLUniformTextureMatrix, 1, false, textureMatrix, 0);
         onDrawArraysPre();
         GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
         GLES20.glDisableVertexAttribArray(mGLAttribPosition);
diff --git a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
index f06a2c75..addaa9c1 100644
--- a/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
+++ b/library/src/jp/co/cyberagent/android/gpuimage/GPUImageTextureRenderer.java
@@ -283,7 +283,7 @@ private void setupTexture() {
 
         inputTexture = new SurfaceTexture(textures[0]);
         inputTexture.setOnFrameAvailableListener(this);
-        if(mImageWidth !=0 && mImageHeight != 0){
+        if (mImageWidth != 0 && mImageHeight != 0) {
             inputTexture.setDefaultBufferSize(mImageWidth, mImageHeight);
         }
         if (onInputTextureAvailableCallback != null) {
@@ -311,7 +311,7 @@ protected boolean draw() {
         GLES20.glViewport(0, 0, mImageWidth, mImageHeight);
         GLES20.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
         GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
-        mNoFilter.onDraw(textures[0], mGLCubeBuffer, mGLTextureBuffer);
+        mNoFilter.onDraw(textures[0], mGLCubeBuffer, mGLTextureBuffer, videoTextureTransform);
         onDrawAfterNoFilter();
 
         GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);
@@ -361,7 +361,7 @@ public void setVideoSize(final int width, final int height) {
             mImageWidth = width;
             mImageHeight = height;
             frameBufferPrepared = false;
-            if (inputTexture != null){
+            if (inputTexture != null) {
                 inputTexture.setDefaultBufferSize(mImageWidth, mImageHeight);
             }
         }
@@ -469,20 +469,8 @@ private void prepareFramebuffer(int width, int height) {
 
     @Override
     protected void adjustImageScaling() {
-        float[] texture = TEXTURE_NO_ROTATION;
-        switch (mRotation) {
-            case NORMAL:
-                break;
-            case ROTATION_90:
-                texture = TEXTURE_ROTATED_90;
-                break;
-            case ROTATION_180:
-                texture = TEXTURE_ROTATED_180;
-                break;
-            case ROTATION_270:
-                texture = TEXTURE_ROTATED_270;
-                break;
-        }
+//        float[] texture = TextureRotationUtil.getRotation(mRotation, false, true);
+        float[] texture = TextureRotationUtil.getRotation(Rotation.NORMAL, false, true);
         mGLCubeBuffer.clear();
         mGLCubeBuffer.put(CUBE).position(0);
         mGLTextureBuffer.clear();
diff --git a/sample/build.gradle b/sample/build.gradle
index 07351244..81915c72 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -38,7 +38,7 @@ dependencies {
     compile project(':library')
 //    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:+@aar'
     compile 'com.android.support:support-v4:21.+'
-    compile 'com.github.skonb:fenster:876aaa4d26'
+    compile 'com.github.skonb:fenster:d7d57c8882e8f036bc60a4770be56569fa36c7a0'
     compile 'com.github.wseemann:FFmpegMediaMetadataRetriever:1.0.3'
     compile 'org.bytedeco:javacv:1.1'
     compile 'org.bytedeco:javacpp:1.1'
diff --git a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
index 94e29987..d900261c 100644
--- a/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
+++ b/sample/src/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMovie.java
@@ -37,7 +37,7 @@
     FensterVideoView videoView;
     GPUImageFilter filter = null;
 
-    class Renderer extends GPUImageRecordableTextureRenderer implements FensterVideoView.Renderer {
+    class Renderer extends GPUImageTextureRenderer implements FensterVideoView.Renderer {
         public Renderer() {
             super();
         }
