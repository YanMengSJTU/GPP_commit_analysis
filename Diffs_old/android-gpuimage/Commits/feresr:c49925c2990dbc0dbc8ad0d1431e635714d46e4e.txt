diff --git a/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImage.java b/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImage.java
index d8aa9133..815fa135 100644
--- a/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImage.java
+++ b/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImage.java
@@ -54,7 +54,7 @@
  */
 public class GPUImage {
 
-    public enum ScaleType {CENTER_INSIDE, CENTER_CROP}
+    public enum ScaleType {CENTER_INSIDE, CENTER_CROP, MATRIX}
 
     static final int SURFACE_TYPE_SURFACE_VIEW = 0;
     static final int SURFACE_TYPE_TEXTURE_VIEW = 1;
@@ -67,6 +67,7 @@
     private GPUImageFilter filter;
     private Bitmap currentBitmap;
     private ScaleType scaleType = ScaleType.CENTER_CROP;
+    private Matrix matrix = new Matrix();
     private int scaleWidth, scaleHeight;
 
     /**
@@ -252,6 +253,11 @@ public void setScaleType(ScaleType scaleType) {
         requestRender();
     }
 
+    public void setMatrix(Matrix matrix) {
+        this.matrix = matrix;
+        renderer.setMatrix(matrix);
+    }
+
     /**
      * This gets the size of the image. This makes it easier to adjust
      * the size of your imagePreview to the the size of the scaled image.
@@ -378,6 +384,7 @@ public void run() {
         renderer.setRotation(Rotation.NORMAL,
                 this.renderer.isFlippedHorizontally(), this.renderer.isFlippedVertically());
         renderer.setScaleType(scaleType);
+        renderer.setMatrix(matrix);
         PixelBuffer buffer = new PixelBuffer(bitmap.getWidth(), bitmap.getHeight());
         buffer.setRenderer(renderer);
         renderer.setImageBitmap(bitmap, recycle);
diff --git a/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java b/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
index e8cd690b..2ec47ecc 100644
--- a/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
+++ b/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
@@ -18,6 +18,7 @@
 
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Matrix;
 import android.graphics.SurfaceTexture;
 import android.hardware.Camera;
 import android.hardware.Camera.PreviewCallback;
@@ -74,6 +75,13 @@
     private boolean flipHorizontal;
     private boolean flipVertical;
     private GPUImage.ScaleType scaleType = GPUImage.ScaleType.CENTER_CROP;
+    private Matrix matrix = new Matrix();
+    private final float[] MATRIX_TEXTURE_COORDINATES = {
+            0.0f, 1.0f,
+            1.0f, 1.0f,
+            0.0f, 0.0f,
+            1.0f, 0.0f,
+    };
 
     private float backgroundRed = 0;
     private float backgroundGreen = 0;
@@ -263,6 +271,11 @@ public void setScaleType(GPUImage.ScaleType scaleType) {
         this.scaleType = scaleType;
     }
 
+    public void setMatrix(Matrix matrix) {
+        this.matrix = matrix;
+        adjustImageScaling();
+    }
+
     protected int getFrameWidth() {
         return outputWidth;
     }
@@ -299,13 +312,15 @@ private void adjustImageScaling() {
                     addDistance(textureCords[4], distHorizontal), addDistance(textureCords[5], distVertical),
                     addDistance(textureCords[6], distHorizontal), addDistance(textureCords[7], distVertical),
             };
-        } else {
+        } else if (scaleType == GPUImage.ScaleType.CENTER_INSIDE) {
             cube = new float[]{
                     CUBE[0] / ratioHeight, CUBE[1] / ratioWidth,
                     CUBE[2] / ratioHeight, CUBE[3] / ratioWidth,
                     CUBE[4] / ratioHeight, CUBE[5] / ratioWidth,
                     CUBE[6] / ratioHeight, CUBE[7] / ratioWidth,
             };
+        } else {
+            matrix.mapPoints(textureCords, MATRIX_TEXTURE_COORDINATES);
         }
 
         glCubeBuffer.clear();
@@ -314,6 +329,7 @@ private void adjustImageScaling() {
         glTextureBuffer.put(textureCords).position(0);
     }
 
+
     private float addDistance(float coordinate, float distance) {
         return coordinate == 0.0f ? distance : 1 - distance;
     }
diff --git a/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java b/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java
index a4fbacd8..00cf0b86 100644
--- a/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java
+++ b/library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageView.java
@@ -20,6 +20,7 @@
 import android.content.res.TypedArray;
 import android.graphics.Bitmap;
 import android.graphics.Color;
+import android.graphics.Matrix;
 import android.hardware.Camera;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
@@ -91,6 +92,10 @@ private void init(Context context, AttributeSet attrs) {
         addView(surfaceView);
     }
 
+    public void setGpuMatrix(Matrix matrix) {
+        gpuImage.setMatrix(matrix);
+    }
+
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         if (ratio != 0.0f) {
