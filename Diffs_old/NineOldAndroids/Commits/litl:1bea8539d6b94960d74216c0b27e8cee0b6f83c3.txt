diff --git a/.gitignore b/.gitignore
index 9c07bbb..153ddfa 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,6 +11,7 @@ gen
 .idea
 *.iml
 *.ipl
+classes
 
 #Maven
 target
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5f8c2bf..6958529 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,30 @@
 Change Log
 ==========
 
+Version 2.4.0 *(2012-06-24)*
+----------------------------
+
+ * Add `ViewHelper` class which will delegate new `View` property calls to
+   their native counterparts when available.
+ * Fix: Do not invalidate parent if view is not attached to anything.
+ * Fix: Respect pivot for both scaling in addition to rotating.
+
+
+Version 2.3.0 *(2012-04-25)*
+----------------------------
+
+ * Intelligent invalidation of parent view will only cause a redraw of the
+   parts that have changed. *(Thanks to Florent Pillet)*
+ * Maintain weak reference to animated view so that we do not prevent it from
+   being garbage collected.
+ * Ensure animation remains possible if view was removed from its parent at
+   some point.
+ * Fix memory leaks that may occur in some situations keeping hard references
+   to views after they were no longer needed.
+ * Allow reflection on private methods to mirror the JNI behavior.
+ * Avoid type conflict on some devices when loading animations from XML.
+
+
 Version 2.2.0 *(2012-01-30)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 96873ac..f108da5 100644
--- a/README.md
+++ b/README.md
@@ -16,7 +16,7 @@ The API is exactly the same as the [Honeycomb API][2], just change your imports
 to use `com.nineoldandroids.XXX`.
 
 Take a look at a few demos taken from the [platform ApiDemos][3] in the
-`sample/` folder. You can also try it out on the [Android Market][4].
+`sample/` folder. You can also try it out on the [Play Store][4].
 
 More information is available on [nineoldandroids.com][6].
 
@@ -34,17 +34,9 @@ a dependency:
     <dependency>
       <groupId>com.nineoldandroids</groupId>
       <artifactId>library</artifactId>
-      <version>2.2.0</version>
+      <version>2.4.0</version>
     </dependency>
 
-You must also include the following repository:
-
-    <repository>
-      <id>com.jakewharton</id>
-      <url>http://r.jakewharton.com/maven/release</url>
-    </repository>
-
-
 
 
 Developed By
@@ -57,7 +49,7 @@ Developed By
 License
 =======
 
-    Copyright 2011 Jake Wharton
+    Copyright 2012 Jake Wharton
 
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
@@ -76,6 +68,6 @@ License
  [1]: http://android-developers.blogspot.com/2011/02/animation-in-honeycomb.html
  [2]: http://developer.android.com/reference/android/view/animation/package-summary.html
  [3]: http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/animation/index.html
- [4]: https://market.android.com/details?id=com.jakewharton.nineoldandroids.sample
+ [4]: https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample
  [5]: https://github.com/JakeWharton/NineOldAndroids/downloads
  [6]: http://nineoldandroids.com
diff --git a/library/AndroidManifest.xml b/library/AndroidManifest.xml
index edf85b8..0e057cf 100644
--- a/library/AndroidManifest.xml
+++ b/library/AndroidManifest.xml
@@ -3,8 +3,8 @@
 <manifest
 	xmlns:android="http://schemas.android.com/apk/res/android"
 	package="com.nineoldandroids"
-	android:versionCode="40"
-	android:versionName="2.2.0">
+	android:versionCode="60"
+	android:versionName="2.4.0">
 	
     <uses-sdk android:minSdkVersion="1" />
 
diff --git a/library/pom.xml b/library/pom.xml
index cef7433..6d8cac5 100644
--- a/library/pom.xml
+++ b/library/pom.xml
@@ -11,7 +11,7 @@
 	<parent>
 		<groupId>com.nineoldandroids</groupId>
 		<artifactId>parent</artifactId>
-		<version>2.2.0</version>
+		<version>2.4.0</version>
 		<relativePath>../pom.xml</relativePath>
 	</parent>
 	
@@ -33,14 +33,6 @@
 				<extensions>true</extensions>
 			</plugin>
 
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<configuration>
-					<skip>true</skip>
-				</configuration>
-			</plugin>
-
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-checkstyle-plugin</artifactId>
diff --git a/library/src/com/nineoldandroids/animation/AnimatorInflater.java b/library/src/com/nineoldandroids/animation/AnimatorInflater.java
index 1051c6a..f3ab192 100644
--- a/library/src/com/nineoldandroids/animation/AnimatorInflater.java
+++ b/library/src/com/nineoldandroids/animation/AnimatorInflater.java
@@ -51,23 +51,23 @@
     private static final int PropertyAnimator_propertyName = 0;
 
     private static final int[] Animator = new int[] {
-        /* 0 */ android.R.attr.duration,
-        /* 1 */ android.R.attr.startOffset,
-        /* 2 */ android.R.attr.valueType,
-        /* 3 */ android.R.attr.valueFrom,
-        /* 4 */ android.R.attr.valueTo,
-        /* 5 */ android.R.attr.repeatCount,
-        /* 6 */ android.R.attr.repeatMode,
-        /* 7 */ android.R.attr.interpolator,
+        /* 0 */ android.R.attr.interpolator,
+        /* 1 */ android.R.attr.duration,
+        /* 2 */ android.R.attr.startOffset,
+        /* 3 */ android.R.attr.repeatCount,
+        /* 4 */ android.R.attr.repeatMode,
+        /* 5 */ android.R.attr.valueFrom,
+        /* 6 */ android.R.attr.valueTo,
+        /* 7 */ android.R.attr.valueType,
     };
-    private static final int Animator_duration = 0;
-    private static final int Animator_startOffset = 1;
-    private static final int Animator_valueType = 2;
-    private static final int Animator_valueFrom = 3;
-    private static final int Animator_valueTo = 4;
-    private static final int Animator_repeatCount = 5;
-    private static final int Animator_repeatMode = 6;
-    private static final int Animator_interpolator = 7;
+    private static final int Animator_interpolator = 0;
+    private static final int Animator_duration = 1;
+    private static final int Animator_startOffset = 2;
+    private static final int Animator_repeatCount = 3;
+    private static final int Animator_repeatMode = 4;
+    private static final int Animator_valueFrom = 5;
+    private static final int Animator_valueTo = 6;
+    private static final int Animator_valueType = 7;
 
     /**
      * These flags are used when parsing AnimatorSet objects
@@ -149,8 +149,11 @@ private static Animator createAnimatorFromXml(Context c, XmlPullParser parser,
                 anim = new AnimatorSet();
                 TypedArray a = c.obtainStyledAttributes(attrs,
                         /*com.android.internal.R.styleable.*/AnimatorSet);
-                int ordering = a.getInt(/*com.android.internal.R.styleable.*/AnimatorSet_ordering,
-                        TOGETHER);
+
+                TypedValue orderingValue = new TypedValue();
+                a.getValue(/*com.android.internal.R.styleable.*/AnimatorSet_ordering, orderingValue);
+                int ordering = orderingValue.type == TypedValue.TYPE_INT_DEC ? orderingValue.data : TOGETHER;
+
                 createAnimatorFromXml(c, parser, attrs, (AnimatorSet) anim,  ordering);
                 a.recycle();
             } else {
diff --git a/library/src/com/nineoldandroids/animation/PropertyValuesHolder.java b/library/src/com/nineoldandroids/animation/PropertyValuesHolder.java
index 560c265..8e2fb30 100644
--- a/library/src/com/nineoldandroids/animation/PropertyValuesHolder.java
+++ b/library/src/com/nineoldandroids/animation/PropertyValuesHolder.java
@@ -385,8 +385,16 @@ private Method getPropertyFunction(Class targetClass, String prefix, Class value
             try {
                 returnVal = targetClass.getMethod(methodName, args);
             } catch (NoSuchMethodException e) {
-                Log.e("PropertyValuesHolder",
-                        "Couldn't find no-arg method for property " + mPropertyName + ": " + e);
+                /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                 * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                 */
+                try {
+                    returnVal = targetClass.getDeclaredMethod(methodName, args);
+                    returnVal.setAccessible(true);
+                } catch (NoSuchMethodException e2) {
+                    Log.e("PropertyValuesHolder",
+                            "Couldn't find no-arg method for property " + mPropertyName + ": " + e);
+                }
             }
         } else {
             args = new Class[1];
@@ -409,7 +417,18 @@ private Method getPropertyFunction(Class targetClass, String prefix, Class value
                     mValueType = typeVariant;
                     return returnVal;
                 } catch (NoSuchMethodException e) {
-                    // Swallow the error and keep trying other variants
+                    /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                     * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                     */
+                    try {
+                        returnVal = targetClass.getDeclaredMethod(methodName, args);
+                        returnVal.setAccessible(true);
+                        // change the value type to suit
+                        mValueType = typeVariant;
+                        return returnVal;
+                    } catch (NoSuchMethodException e2) {
+                        // Swallow the error and keep trying other variants
+                    }
                 }
             }
             // If we got here, then no appropriate function was found
@@ -1008,4 +1027,4 @@ void setupSetter(Class targetClass) {
     //native static private int nGetFloatMethod(Class targetClass, String methodName);
     //native static private void nCallIntMethod(Object target, int methodID, int arg);
     //native static private void nCallFloatMethod(Object target, int methodID, float arg);
-}
\ No newline at end of file
+}
diff --git a/library/src/com/nineoldandroids/util/ReflectiveProperty.java b/library/src/com/nineoldandroids/util/ReflectiveProperty.java
index 2f99621..10b14c0 100644
--- a/library/src/com/nineoldandroids/util/ReflectiveProperty.java
+++ b/library/src/com/nineoldandroids/util/ReflectiveProperty.java
@@ -50,26 +50,42 @@ public ReflectiveProperty(Class<T> propertyHolder, Class<V> valueType, String na
         String capitalizedName = firstLetter + theRest;
         String getterName = PREFIX_GET + capitalizedName;
         try {
-            mGetter = propertyHolder.getMethod(getterName, (Class<?>[])null);
+            mGetter = propertyHolder.getMethod(getterName, (Class<?>[]) null);
         } catch (NoSuchMethodException e) {
-            // getName() not available - try isName() instead
-            getterName = PREFIX_IS + capitalizedName;
             try {
-                mGetter = propertyHolder.getMethod(getterName, (Class<?>[])null);
-            } catch (NoSuchMethodException e1) {
-                // Try public field instead
+                /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                 * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                 */
+                mGetter = propertyHolder.getDeclaredMethod(getterName, (Class<?>[]) null);
+                mGetter.setAccessible(true);
+            } catch (NoSuchMethodException e2) {
+                // getName() not available - try isName() instead
+                getterName = PREFIX_IS + capitalizedName;
                 try {
-                    mField = propertyHolder.getField(name);
-                    Class fieldType = mField.getType();
-                    if (!typesMatch(valueType, fieldType)) {
-                        throw new NoSuchPropertyException("Underlying type (" + fieldType + ") " +
-                                "does not match Property type (" + valueType + ")");
+                    mGetter = propertyHolder.getMethod(getterName, (Class<?>[]) null);
+                } catch (NoSuchMethodException e3) {
+                    try {
+                        /* The native implementation uses JNI to do reflection, which allows access to private methods.
+                         * getDeclaredMethod(..) does not find superclass methods, so it's implemented as a fallback.
+                         */
+                        mGetter = propertyHolder.getDeclaredMethod(getterName, (Class<?>[]) null);
+                        mGetter.setAccessible(true);
+                    } catch (NoSuchMethodException e4) {
+                        // Try public field instead
+                        try {
+                            mField = propertyHolder.getField(name);
+                            Class fieldType = mField.getType();
+                            if (!typesMatch(valueType, fieldType)) {
+                                throw new NoSuchPropertyException("Underlying type (" + fieldType + ") " +
+                                        "does not match Property type (" + valueType + ")");
+                            }
+                            return;
+                        } catch (NoSuchFieldException e5) {
+                            // no way to access property - throw appropriate exception
+                            throw new NoSuchPropertyException("No accessor method or field found for"
+                                    + " property with name " + name);
+                        }
                     }
-                    return;
-                } catch (NoSuchFieldException e2) {
-                    // no way to access property - throw appropriate exception
-                    throw new NoSuchPropertyException("No accessor method or field found for"
-                            + " property with name " + name);
                 }
             }
         }
@@ -81,7 +97,10 @@ public ReflectiveProperty(Class<T> propertyHolder, Class<V> valueType, String na
         }
         String setterName = PREFIX_SET + capitalizedName;
         try {
-            mSetter = propertyHolder.getMethod(setterName, getterType);
+            // mSetter = propertyHolder.getMethod(setterName, getterType);
+            // The native implementation uses JNI to do reflection, which allows access to private methods.
+            mSetter = propertyHolder.getDeclaredMethod(setterName, getterType);
+            mSetter.setAccessible(true);
         } catch (NoSuchMethodException ignored) {
             // Okay to not have a setter - just a readonly property
         }
diff --git a/library/src/com/nineoldandroids/view/ViewHelper.java b/library/src/com/nineoldandroids/view/ViewHelper.java
new file mode 100644
index 0000000..d79dc0f
--- /dev/null
+++ b/library/src/com/nineoldandroids/view/ViewHelper.java
@@ -0,0 +1,292 @@
+package com.nineoldandroids.view;
+
+import android.view.View;
+
+import static com.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY;
+import static com.nineoldandroids.view.animation.AnimatorProxy.wrap;
+
+public final class ViewHelper {
+    private ViewHelper() {}
+
+    public static float getAlpha(View view) {
+        return NEEDS_PROXY ? wrap(view).getAlpha() : Honeycomb.getAlpha(view);
+    }
+
+    public static void setAlpha(View view, float alpha) {
+        if (NEEDS_PROXY) {
+            wrap(view).setAlpha(alpha);
+        } else {
+            Honeycomb.setAlpha(view, alpha);
+        }
+    }
+
+    public static float getPivotX(View view) {
+        return NEEDS_PROXY ? wrap(view).getPivotX() : Honeycomb.getPivotX(view);
+    }
+
+    public static void setPivotX(View view, float pivotX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setPivotX(pivotX);
+        } else {
+            Honeycomb.setPivotX(view, pivotX);
+        }
+    }
+
+    public static float getPivotY(View view) {
+        return NEEDS_PROXY ? wrap(view).getPivotY() : Honeycomb.getPivotY(view);
+    }
+
+    public static void setPivotY(View view, float pivotY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setPivotY(pivotY);
+        } else {
+            Honeycomb.setPivotY(view, pivotY);
+        }
+    }
+
+    public static float getRotation(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotation() : Honeycomb.getRotation(view);
+    }
+
+    public static void setRotation(View view, float rotation) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotation(rotation);
+        } else {
+            Honeycomb.setRotation(view, rotation);
+        }
+    }
+
+    public static float getRotationX(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotationX() : Honeycomb.getRotationX(view);
+    }
+
+    public static void setRotationX(View view, float rotationX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotationX(rotationX);
+        } else {
+            Honeycomb.setRotationX(view, rotationX);
+        }
+    }
+
+    public static float getRotationY(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotationY() : Honeycomb.getRotationY(view);
+    }
+
+    public static void setRotationY(View view, float rotationY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotationY(rotationY);
+        } else {
+            Honeycomb.setRotationY(view, rotationY);
+        }
+    }
+
+    public static float getScaleX(View view) {
+        return NEEDS_PROXY ? wrap(view).getScaleX() : Honeycomb.getScaleX(view);
+    }
+
+    public static void setScaleX(View view, float scaleX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScaleX(scaleX);
+        } else {
+            Honeycomb.setScaleX(view, scaleX);
+        }
+    }
+
+    public static float getScaleY(View view) {
+        return NEEDS_PROXY ? wrap(view).getScaleY() : Honeycomb.getScaleY(view);
+    }
+
+    public static void setScaleY(View view, float scaleY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScaleY(scaleY);
+        } else {
+            Honeycomb.setScaleY(view, scaleY);
+        }
+    }
+
+    public static float getScrollX(View view) {
+        return NEEDS_PROXY ? wrap(view).getScrollX() : Honeycomb.getScrollX(view);
+    }
+
+    public static void setScrollX(View view, int scrollX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScrollX(scrollX);
+        } else {
+            Honeycomb.setScrollX(view, scrollX);
+        }
+    }
+
+    public static float getScrollY(View view) {
+        return NEEDS_PROXY ? wrap(view).getScrollY() : Honeycomb.getScrollY(view);
+    }
+
+    public static void setScrollY(View view, int scrollY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScrollY(scrollY);
+        } else {
+            Honeycomb.setScrollY(view, scrollY);
+        }
+    }
+
+    public static float getTranslationX(View view) {
+        return NEEDS_PROXY ? wrap(view).getTranslationX() : Honeycomb.getTranslationX(view);
+    }
+
+    public static void setTranslationX(View view, float translationX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setTranslationX(translationX);
+        } else {
+            Honeycomb.setTranslationX(view, translationX);
+        }
+    }
+
+    public static float getTranslationY(View view) {
+        return NEEDS_PROXY ? wrap(view).getTranslationY() : Honeycomb.getTranslationY(view);
+    }
+
+    public static void setTranslationY(View view, float translationY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setTranslationY(translationY);
+        } else {
+            Honeycomb.setTranslationY(view, translationY);
+        }
+    }
+
+    public static float getX(View view) {
+        return NEEDS_PROXY ? wrap(view).getX() : Honeycomb.getX(view);
+    }
+
+    public static void setX(View view, float x) {
+        if (NEEDS_PROXY) {
+            wrap(view).setX(x);
+        } else {
+            Honeycomb.setX(view, x);
+        }
+    }
+
+    public static float getY(View view) {
+        return NEEDS_PROXY ? wrap(view).getY() : Honeycomb.getY(view);
+    }
+
+    public static void setY(View view, float y) {
+        if (NEEDS_PROXY) {
+            wrap(view).setY(y);
+        } else {
+            Honeycomb.setY(view, y);
+        }
+    }
+
+    private static final class Honeycomb {
+        static float getAlpha(View view) {
+            return view.getAlpha();
+        }
+
+        static void setAlpha(View view, float alpha) {
+            view.setAlpha(alpha);
+        }
+
+        static float getPivotX(View view) {
+            return view.getPivotX();
+        }
+
+        static void setPivotX(View view, float pivotX) {
+            view.setPivotX(pivotX);
+        }
+
+        static float getPivotY(View view) {
+            return view.getPivotY();
+        }
+
+        static void setPivotY(View view, float pivotY) {
+            view.setPivotY(pivotY);
+        }
+
+        static float getRotation(View view) {
+            return view.getRotation();
+        }
+
+        static void setRotation(View view, float rotation) {
+            view.setRotation(rotation);
+        }
+
+        static float getRotationX(View view) {
+            return view.getRotationX();
+        }
+
+        static void setRotationX(View view, float rotationX) {
+            view.setRotationX(rotationX);
+        }
+
+        static float getRotationY(View view) {
+            return view.getRotationY();
+        }
+
+        static void setRotationY(View view, float rotationY) {
+            view.setRotationY(rotationY);
+        }
+
+        static float getScaleX(View view) {
+            return view.getScaleX();
+        }
+
+        static void setScaleX(View view, float scaleX) {
+            view.setScaleX(scaleX);
+        }
+
+        static float getScaleY(View view) {
+            return view.getScaleY();
+        }
+
+        static void setScaleY(View view, float scaleY) {
+            view.setScaleY(scaleY);
+        }
+
+        static float getScrollX(View view) {
+            return view.getScrollX();
+        }
+
+        static void setScrollX(View view, int scrollX) {
+            view.setScrollX(scrollX);
+        }
+
+        static float getScrollY(View view) {
+            return view.getScrollY();
+        }
+
+        static void setScrollY(View view, int scrollY) {
+            view.setScrollY(scrollY);
+        }
+
+        static float getTranslationX(View view) {
+            return view.getTranslationX();
+        }
+
+        static void setTranslationX(View view, float translationX) {
+            view.setTranslationX(translationX);
+        }
+
+        static float getTranslationY(View view) {
+            return view.getTranslationY();
+        }
+
+        static void setTranslationY(View view, float translationY) {
+            view.setTranslationY(translationY);
+        }
+
+        static float getX(View view) {
+            return view.getX();
+        }
+
+        static void setX(View view, float x) {
+            view.setX(x);
+        }
+
+        static float getY(View view) {
+            return view.getY();
+        }
+
+        static void setY(View view, float y) {
+            view.setY(y);
+        }
+    }
+}
diff --git a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
index 5a79ce4..7ad2ada 100644
--- a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
+++ b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
@@ -16,6 +16,7 @@
 
 package com.nineoldandroids.view;
 
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Set;
@@ -24,12 +25,13 @@
 import com.nineoldandroids.animation.Animator;
 import com.nineoldandroids.animation.ValueAnimator;
 
-public class ViewPropertyAnimatorHC extends ViewPropertyAnimator {
+class ViewPropertyAnimatorHC extends ViewPropertyAnimator {
+
     /**
-     * The View whose properties are being animated by this class. This is set at
-     * construction time.
+     * A WeakReference holding the View whose properties are being animated by this class.
+     * This is set at construction time.
      */
-    private final View mView;
+    private final WeakReference<View> mView;
 
     /**
      * The duration of the underlying Animator object. By default, we don't set the duration
@@ -202,7 +204,7 @@ boolean cancel(int propertyConstant) {
      * @param view The View associated with this ViewPropertyAnimator
      */
     ViewPropertyAnimatorHC(View view) {
-        mView = view;
+        mView = new WeakReference<View>(view);
     }
 
     /**
@@ -292,7 +294,10 @@ public void cancel() {
             }
         }
         mPendingAnimations.clear();
-        mView.removeCallbacks(mAnimationStarter);
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+        }
     }
 
     @Override
@@ -511,8 +516,11 @@ private void animatePropertyBy(int constantName, float startValue, float byValue
 
         NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);
         mPendingAnimations.add(nameValuePair);
-        mView.removeCallbacks(mAnimationStarter);
-        mView.post(mAnimationStarter);
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+            v.post(mAnimationStarter);
+        }
     }
 
     /**
@@ -525,47 +533,50 @@ private void animatePropertyBy(int constantName, float startValue, float byValue
      */
     private void setValue(int propertyConstant, float value) {
         //final View.TransformationInfo info = mView.mTransformationInfo;
-        switch (propertyConstant) {
-            case TRANSLATION_X:
-                //info.mTranslationX = value;
-                mView.setTranslationX(value);
-                break;
-            case TRANSLATION_Y:
-                //info.mTranslationY = value;
-                mView.setTranslationY(value);
-                break;
-            case ROTATION:
-                //info.mRotation = value;
-                mView.setRotation(value);
-                break;
-            case ROTATION_X:
-                //info.mRotationX = value;
-                mView.setRotationX(value);
-                break;
-            case ROTATION_Y:
-                //info.mRotationY = value;
-                mView.setRotationY(value);
-                break;
-            case SCALE_X:
-                //info.mScaleX = value;
-                mView.setScaleX(value);
-                break;
-            case SCALE_Y:
-                //info.mScaleY = value;
-                mView.setScaleY(value);
-                break;
-            case X:
-                //info.mTranslationX = value - mView.mLeft;
-                mView.setX(value);
-                break;
-            case Y:
-                //info.mTranslationY = value - mView.mTop;
-                mView.setY(value);
-                break;
-            case ALPHA:
-                //info.mAlpha = value;
-                mView.setAlpha(value);
-                break;
+        View v = mView.get();
+        if (v != null) {
+            switch (propertyConstant) {
+                case TRANSLATION_X:
+                    //info.mTranslationX = value;
+                    v.setTranslationX(value);
+                    break;
+                case TRANSLATION_Y:
+                    //info.mTranslationY = value;
+                    v.setTranslationY(value);
+                    break;
+                case ROTATION:
+                    //info.mRotation = value;
+                    v.setRotation(value);
+                    break;
+                case ROTATION_X:
+                    //info.mRotationX = value;
+                    v.setRotationX(value);
+                    break;
+                case ROTATION_Y:
+                    //info.mRotationY = value;
+                    v.setRotationY(value);
+                    break;
+                case SCALE_X:
+                    //info.mScaleX = value;
+                    v.setScaleX(value);
+                    break;
+                case SCALE_Y:
+                    //info.mScaleY = value;
+                    v.setScaleY(value);
+                    break;
+                case X:
+                    //info.mTranslationX = value - v.mLeft;
+                    v.setX(value);
+                    break;
+                case Y:
+                    //info.mTranslationY = value - v.mTop;
+                    v.setY(value);
+                    break;
+                case ALPHA:
+                    //info.mAlpha = value;
+                    v.setAlpha(value);
+                    break;
+            }
         }
     }
 
@@ -577,37 +588,40 @@ private void setValue(int propertyConstant, float value) {
      */
     private float getValue(int propertyConstant) {
         //final View.TransformationInfo info = mView.mTransformationInfo;
-        switch (propertyConstant) {
-            case TRANSLATION_X:
-                //return info.mTranslationX;
-                return mView.getTranslationX();
-            case TRANSLATION_Y:
-                //return info.mTranslationY;
-                return mView.getTranslationY();
-            case ROTATION:
-                //return info.mRotation;
-                return mView.getRotation();
-            case ROTATION_X:
-                //return info.mRotationX;
-                return mView.getRotationX();
-            case ROTATION_Y:
-                //return info.mRotationY;
-                return mView.getRotationY();
-            case SCALE_X:
-                //return info.mScaleX;
-                return mView.getScaleX();
-            case SCALE_Y:
-                //return info.mScaleY;
-                return mView.getScaleY();
-            case X:
-                //return mView.mLeft + info.mTranslationX;
-                return mView.getX();
-            case Y:
-                //return mView.mTop + info.mTranslationY;
-                return mView.getY();
-            case ALPHA:
-                //return info.mAlpha;
-                return mView.getAlpha();
+        View v = mView.get();
+        if (v != null) {
+            switch (propertyConstant) {
+                case TRANSLATION_X:
+                    //return info.mTranslationX;
+                    return v.getTranslationX();
+                case TRANSLATION_Y:
+                    //return info.mTranslationY;
+                    return v.getTranslationY();
+                case ROTATION:
+                    //return info.mRotation;
+                    return v.getRotation();
+                case ROTATION_X:
+                    //return info.mRotationX;
+                    return v.getRotationX();
+                case ROTATION_Y:
+                    //return info.mRotationY;
+                    return v.getRotationY();
+                case SCALE_X:
+                    //return info.mScaleX;
+                    return v.getScaleX();
+                case SCALE_Y:
+                    //return info.mScaleY;
+                    return v.getScaleY();
+                case X:
+                    //return v.mLeft + info.mTranslationX;
+                    return v.getX();
+                case Y:
+                    //return v.mTop + info.mTranslationY;
+                    return v.getY();
+                case ALPHA:
+                    //return info.mAlpha;
+                    return v.getAlpha();
+            }
         }
         return 0;
     }
@@ -647,6 +661,12 @@ public void onAnimationEnd(Animator animation) {
                 mListener.onAnimationEnd(animation);
             }
             mAnimatorMap.remove(animation);
+            // If the map is empty, it means all animation are done or canceled, so the listener
+            // isn't needed anymore. Not nulling it would cause it to leak any objects used in
+            // its implementation
+            if (mAnimatorMap.isEmpty()) {
+                mListener = null;
+            }
         }
 
         /**
@@ -670,7 +690,10 @@ public void onAnimationUpdate(ValueAnimator animation) {
             PropertyBundle propertyBundle = mAnimatorMap.get(animation);
             int propertyMask = propertyBundle.mPropertyMask;
             if ((propertyMask & TRANSFORM_MASK) != 0) {
-                mView.invalidate(/*false*/);
+                View v = mView.get();
+                if (v != null) {
+                    v.invalidate(/*false*/);
+                }
             }
             ArrayList<NameValuesHolder> valueList = propertyBundle.mNameValuesHolder;
             if (valueList != null) {
@@ -691,7 +714,10 @@ public void onAnimationUpdate(ValueAnimator animation) {
             }*/
             // invalidate(false) in all cases except if alphaHandled gets set to true
             // via the call to setAlphaNoInvalidation(), above
-            mView.invalidate(/*alphaHandled*/);
+            View v = mView.get();
+            if (v != null) {
+                v.invalidate(/*alphaHandled*/);
+            }
         }
     }
 }
diff --git a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
index 41c768f..b60a820 100644
--- a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
+++ b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
@@ -1,201 +1,298 @@
 package com.nineoldandroids.view;
 
+import java.lang.ref.WeakReference;
+
 import android.view.View;
 import android.view.animation.Interpolator;
 import com.nineoldandroids.animation.Animator.AnimatorListener;
 
 class ViewPropertyAnimatorICS extends ViewPropertyAnimator {
-    private final android.view.ViewPropertyAnimator mNative;
+    /**
+     * A value to be returned when the WeakReference holding the native implementation
+     * returns <code>null</code>
+     */
+    private final static long RETURN_WHEN_NULL = -1L;
+
+    /**
+     * A WeakReference holding the native implementation of ViewPropertyAnimator
+     */
+    private final WeakReference<android.view.ViewPropertyAnimator> mNative;
 
     ViewPropertyAnimatorICS(View view) {
-        mNative = view.animate();
+        mNative = new WeakReference<android.view.ViewPropertyAnimator>(view.animate());
     }
 
     @Override
     public ViewPropertyAnimator setDuration(long duration) {
-        mNative.setDuration(duration);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.setDuration(duration);
+        }
         return this;
     }
 
     @Override
     public long getDuration() {
-        return mNative.getDuration();
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            return n.getDuration();
+        }
+        return RETURN_WHEN_NULL;
     }
 
     @Override
     public ViewPropertyAnimator setStartDelay(long startDelay) {
-        mNative.setStartDelay(startDelay);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.setStartDelay(startDelay);
+        }
         return this;
     }
 
     @Override
     public long getStartDelay() {
-        return mNative.getStartDelay();
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            return n.getStartDelay();
+        }
+        return RETURN_WHEN_NULL;
     }
 
     @Override
     public ViewPropertyAnimator setInterpolator(Interpolator interpolator) {
-        mNative.setInterpolator(interpolator);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.setInterpolator(interpolator);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator setListener(final AnimatorListener listener) {
-        if (listener == null) {
-            mNative.setListener(null);
-        } else {
-            mNative.setListener(new android.animation.Animator.AnimatorListener() {
-                @Override
-                public void onAnimationStart(android.animation.Animator animation) {
-                    listener.onAnimationStart(null);
-                }
-
-                @Override
-                public void onAnimationRepeat(android.animation.Animator animation) {
-                    listener.onAnimationRepeat(null);
-                }
-
-                @Override
-                public void onAnimationEnd(android.animation.Animator animation) {
-                    listener.onAnimationEnd(null);
-                }
-
-                @Override
-                public void onAnimationCancel(android.animation.Animator animation) {
-                    listener.onAnimationCancel(null);
-                }
-            });
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            if (listener == null) {
+                n.setListener(null);
+            } else {
+                n.setListener(new android.animation.Animator.AnimatorListener() {
+                    @Override
+                    public void onAnimationStart(android.animation.Animator animation) {
+                        listener.onAnimationStart(null);
+                    }
+
+                    @Override
+                    public void onAnimationRepeat(android.animation.Animator animation) {
+                        listener.onAnimationRepeat(null);
+                    }
+
+                    @Override
+                    public void onAnimationEnd(android.animation.Animator animation) {
+                        listener.onAnimationEnd(null);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(android.animation.Animator animation) {
+                        listener.onAnimationCancel(null);
+                    }
+                });
+            }
         }
         return this;
     }
 
     @Override
     public void start() {
-        mNative.start();
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.start();
+        }
     }
 
     @Override
     public void cancel() {
-        mNative.cancel();
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.cancel();
+        }
     }
 
     @Override
     public ViewPropertyAnimator x(float value) {
-        mNative.x(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.x(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator xBy(float value) {
-        mNative.xBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.xBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator y(float value) {
-        mNative.y(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.y(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator yBy(float value) {
-        mNative.yBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.yBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator rotation(float value) {
-        mNative.rotation(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotation(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator rotationBy(float value) {
-        mNative.rotationBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator rotationX(float value) {
-        mNative.rotationX(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationX(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator rotationXBy(float value) {
-        mNative.rotationXBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationXBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator rotationY(float value) {
-        mNative.rotationY(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationY(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator rotationYBy(float value) {
-        mNative.rotationYBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.rotationYBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator translationX(float value) {
-        mNative.translationX(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationX(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator translationXBy(float value) {
-        mNative.translationXBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationXBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator translationY(float value) {
-        mNative.translationY(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationY(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator translationYBy(float value) {
-        mNative.translationYBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.translationYBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator scaleX(float value) {
-        mNative.scaleX(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleX(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator scaleXBy(float value) {
-        mNative.scaleXBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleXBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator scaleY(float value) {
-        mNative.scaleY(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleY(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator scaleYBy(float value) {
-        mNative.scaleYBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.scaleYBy(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator alpha(float value) {
-        mNative.alpha(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.alpha(value);
+        }
         return this;
     }
 
     @Override
     public ViewPropertyAnimator alphaBy(float value) {
-        mNative.alphaBy(value);
+        android.view.ViewPropertyAnimator n = mNative.get();
+        if (n != null) {
+            n.alphaBy(value);
+        }
         return this;
     }
 }
diff --git a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
index 1c968e9..c170f6d 100644
--- a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
+++ b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
@@ -16,6 +16,7 @@
 
 package com.nineoldandroids.view;
 
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Set;
@@ -25,7 +26,7 @@
 import com.nineoldandroids.animation.ValueAnimator;
 import com.nineoldandroids.view.animation.AnimatorProxy;
 
-public class ViewPropertyAnimatorPreHC extends ViewPropertyAnimator {
+class ViewPropertyAnimatorPreHC extends ViewPropertyAnimator {
     /**
      * Proxy animation class which will allow us access to post-Honeycomb properties that were not
      * otherwise available.
@@ -33,10 +34,10 @@
     private final AnimatorProxy mProxy;
 
     /**
-     * The View whose properties are being animated by this class. This is set at
-     * construction time.
+     * A WeakReference holding the View whose properties are being animated by this class. This is
+     * set at construction time.
      */
-    private final View mView;
+    private final WeakReference<View> mView;
 
     /**
      * The duration of the underlying Animator object. By default, we don't set the duration
@@ -209,7 +210,7 @@ boolean cancel(int propertyConstant) {
      * @param view The View associated with this ViewPropertyAnimator
      */
     ViewPropertyAnimatorPreHC(View view) {
-        mView = view;
+        mView = new WeakReference<View>(view);
         mProxy = AnimatorProxy.wrap(view);
     }
 
@@ -300,7 +301,10 @@ public void cancel() {
             }
         }
         mPendingAnimations.clear();
-        mView.removeCallbacks(mAnimationStarter);
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+        }
     }
 
     @Override
@@ -519,8 +523,11 @@ private void animatePropertyBy(int constantName, float startValue, float byValue
 
         NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);
         mPendingAnimations.add(nameValuePair);
-        mView.removeCallbacks(mAnimationStarter);
-        mView.post(mAnimationStarter);
+        View v = mView.get();
+        if (v != null) {
+            v.removeCallbacks(mAnimationStarter);
+            v.post(mAnimationStarter);
+        }
     }
 
     /**
@@ -655,6 +662,12 @@ public void onAnimationEnd(Animator animation) {
                 mListener.onAnimationEnd(animation);
             }
             mAnimatorMap.remove(animation);
+            // If the map is empty, it means all animation are done or canceled, so the listener
+            // isn't needed anymore. Not nulling it would cause it to leak any objects used in
+            // its implementation
+            if (mAnimatorMap.isEmpty()) {
+                mListener = null;
+            }
         }
 
         /**
@@ -678,7 +691,10 @@ public void onAnimationUpdate(ValueAnimator animation) {
             PropertyBundle propertyBundle = mAnimatorMap.get(animation);
             int propertyMask = propertyBundle.mPropertyMask;
             if ((propertyMask & TRANSFORM_MASK) != 0) {
-                mView.invalidate(/*false*/);
+                View v = mView.get();
+                if (v != null) {
+                    v.invalidate(/*false*/);
+                }
             }
             ArrayList<NameValuesHolder> valueList = propertyBundle.mNameValuesHolder;
             if (valueList != null) {
@@ -699,7 +715,10 @@ public void onAnimationUpdate(ValueAnimator animation) {
             }*/
             // invalidate(false) in all cases except if alphaHandled gets set to true
             // via the call to setAlphaNoInvalidation(), above
-            mView.invalidate(/*alphaHandled*/);
+            View v = mView.get();
+            if (v != null) {
+                v.invalidate(/*alphaHandled*/);
+            }
         }
     }
 }
diff --git a/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java b/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
index 7ea410c..ef3dda2 100644
--- a/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
+++ b/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
@@ -1,14 +1,16 @@
 package com.nineoldandroids.view.animation;
 
-import java.util.WeakHashMap;
 import android.graphics.Camera;
 import android.graphics.Matrix;
+import android.graphics.RectF;
 import android.os.Build;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.animation.Animation;
 import android.view.animation.Transformation;
 
+import java.lang.ref.WeakReference;
+import java.util.WeakHashMap;
+
 /**
  * A proxy class to allow for modifying post-3.0 view properties on all pre-3.0
  * platforms. <strong>DO NOT</strong> wrap your views with this class if you
@@ -31,63 +33,72 @@
      */
     public static AnimatorProxy wrap(View view) {
         AnimatorProxy proxy = PROXIES.get(view);
-        if (proxy == null) {
+        // This checks if the proxy already exists and whether it still is the animation of the given view
+        if (proxy == null || proxy != view.getAnimation()) {
             proxy = new AnimatorProxy(view);
             PROXIES.put(view, proxy);
         }
         return proxy;
     }
 
-    private final View mView;
-    private final ViewGroup mViewParent;
-    private final Camera mCamera;
-    private boolean mHasPivot = false;
+    private final WeakReference<View> mView;
+    private final Camera mCamera = new Camera();
+    private boolean mHasPivot;
 
     private float mAlpha = 1;
-    private float mPivotX = 0;
-    private float mPivotY = 0;
-    private float mRotationX = 0;
-    private float mRotationY = 0;
-    private float mRotationZ = 0;
+    private float mPivotX;
+    private float mPivotY;
+    private float mRotationX;
+    private float mRotationY;
+    private float mRotationZ;
     private float mScaleX = 1;
     private float mScaleY = 1;
-    private float mTranslationX = 0;
-    private float mTranslationY = 0;
+    private float mTranslationX;
+    private float mTranslationY;
+
+    private final RectF mBefore = new RectF();
+    private final RectF mAfter = new RectF();
+    private final Matrix mTempMatrix = new Matrix();
 
     private AnimatorProxy(View view) {
         setDuration(0); //perform transformation immediately
         setFillAfter(true); //persist transformation beyond duration
         view.setAnimation(this);
-        mView = view;
-        mViewParent = (ViewGroup)view.getParent();
-        mCamera = new Camera();
+        mView = new WeakReference<View>(view);
     }
 
     public float getAlpha() {
         return mAlpha;
     }
     public void setAlpha(float alpha) {
-        mAlpha = alpha;
-        mView.invalidate();
+        if (mAlpha != alpha) {
+            mAlpha = alpha;
+            View view = mView.get();
+            if (view != null) {
+                view.invalidate();
+            }
+        }
     }
     public float getPivotX() {
         return mPivotX;
     }
     public void setPivotX(float pivotX) {
-        mHasPivot = true;
-        if (mPivotX != pivotX) {
+        if (!mHasPivot || mPivotX != pivotX) {
+            prepareForUpdate();
+            mHasPivot = true;
             mPivotX = pivotX;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getPivotY() {
         return mPivotY;
     }
     public void setPivotY(float pivotY) {
-        mHasPivot = true;
-        if (mPivotY != pivotY) {
+        if (!mHasPivot || mPivotY != pivotY) {
+            prepareForUpdate();
+            mHasPivot = true;
             mPivotY = pivotY;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getRotation() {
@@ -95,8 +106,9 @@ public float getRotation() {
     }
     public void setRotation(float rotation) {
         if (mRotationZ != rotation) {
+            prepareForUpdate();
             mRotationZ = rotation;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getRotationX() {
@@ -104,17 +116,20 @@ public float getRotationX() {
     }
     public void setRotationX(float rotationX) {
         if (mRotationX != rotationX) {
+            prepareForUpdate();
             mRotationX = rotationX;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getRotationY() {
         return mRotationY;
     }
+
     public void setRotationY(float rotationY) {
         if (mRotationY != rotationY) {
+            prepareForUpdate();
             mRotationY = rotationY;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getScaleX() {
@@ -122,8 +137,9 @@ public float getScaleX() {
     }
     public void setScaleX(float scaleX) {
         if (mScaleX != scaleX) {
+            prepareForUpdate();
             mScaleX = scaleX;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getScaleY() {
@@ -131,29 +147,46 @@ public float getScaleY() {
     }
     public void setScaleY(float scaleY) {
         if (mScaleY != scaleY) {
+            prepareForUpdate();
             mScaleY = scaleY;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public int getScrollX() {
-        return mView.getScrollX();
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getScrollX();
     }
     public void setScrollX(int value) {
-        mView.scrollTo(value, mView.getScrollY());
+        View view = mView.get();
+        if (view != null) {
+            view.scrollTo(value, view.getScrollY());
+        }
     }
     public int getScrollY() {
-        return mView.getScrollY();
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getScrollY();
     }
     public void setScrollY(int value) {
-        mView.scrollTo(mView.getScrollY(), value);
+        View view = mView.get();
+        if (view != null) {
+            view.scrollTo(view.getScrollX(), value);
+        }
     }
+
     public float getTranslationX() {
         return mTranslationX;
     }
     public void setTranslationX(float translationX) {
         if (mTranslationX != translationX) {
+            prepareForUpdate();
             mTranslationX = translationX;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getTranslationY() {
@@ -161,40 +194,101 @@ public float getTranslationY() {
     }
     public void setTranslationY(float translationY) {
         if (mTranslationY != translationY) {
+            prepareForUpdate();
             mTranslationY = translationY;
-            mViewParent.invalidate();
+            invalidateAfterUpdate();
         }
     }
     public float getX() {
-        return mView.getLeft() + mTranslationX;
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getLeft() + mTranslationX;
     }
     public void setX(float x) {
-        setTranslationX(x - mView.getLeft());
+        View view = mView.get();
+        if (view != null) {
+            setTranslationX(x - view.getLeft());
+        }
     }
     public float getY() {
-        return mView.getTop() + mTranslationY;
+        View view = mView.get();
+        if (view == null) {
+            return 0;
+        }
+        return view.getTop() + mTranslationY;
     }
     public void setY(float y) {
-        setTranslationY(y - mView.getTop());
+        View view = mView.get();
+        if (view != null) {
+            setTranslationY(y - view.getTop());
+        }
     }
 
-    @Override
-    protected void applyTransformation(float interpolatedTime, Transformation t) {
-        t.setAlpha(mAlpha);
+    private void prepareForUpdate() {
+        View view = mView.get();
+        if (view != null) {
+            computeRect(mBefore, view);
+        }
+    }
+    private void invalidateAfterUpdate() {
+        View view = mView.get();
+        if (view == null || view.getParent() == null) {
+            return;
+        }
 
-        final View view = mView;
+        final RectF after = mAfter;
+        computeRect(after, view);
+        after.union(mBefore);
+
+        ((View)view.getParent()).invalidate(
+                (int) Math.floor(after.left),
+                (int) Math.floor(after.top),
+                (int) Math.ceil(after.right),
+                (int) Math.ceil(after.bottom));
+    }
+
+    private void computeRect(final RectF r, View view) {
+        // compute current rectangle according to matrix transformation
         final float w = view.getWidth();
         final float h = view.getHeight();
-        final Matrix m = t.getMatrix();
+
+        // use a rectangle at 0,0 to make sure we don't run into issues with scaling
+        r.set(0, 0, w, h);
+
+        final Matrix m = mTempMatrix;
+        m.reset();
+        transformMatrix(m, view);
+        mTempMatrix.mapRect(r);
+
+        r.offset(view.getLeft(), view.getTop());
+
+        // Straighten coords if rotations flipped them
+        if (r.right < r.left) {
+            final float f = r.right;
+            r.right = r.left;
+            r.left = f;
+        }
+        if (r.bottom < r.top) {
+            final float f = r.top;
+            r.top = r.bottom;
+            r.bottom = f;
+        }
+    }
+
+    private void transformMatrix(Matrix m, View view) {
+        final float w = view.getWidth();
+        final float h = view.getHeight();
+        final boolean hasPivot = mHasPivot;
+        final float pX = hasPivot ? mPivotX : w / 2f;
+        final float pY = hasPivot ? mPivotY : h / 2f;
 
         final float rX = mRotationX;
         final float rY = mRotationY;
         final float rZ = mRotationZ;
         if ((rX != 0) || (rY != 0) || (rZ != 0)) {
             final Camera camera = mCamera;
-            final boolean hasPivot = mHasPivot;
-            final float pX = hasPivot ? mPivotX : w/2f;
-            final float pY = hasPivot ? mPivotY : h/2f;
             camera.save();
             camera.rotateX(rX);
             camera.rotateY(rY);
@@ -207,12 +301,22 @@ protected void applyTransformation(float interpolatedTime, Transformation t) {
 
         final float sX = mScaleX;
         final float sY = mScaleY;
-        if ((sX != 0) || (sX != 0)) {
-            final float deltaSX = ((sX * w) - w) / 2f;
-            final float deltaSY = ((sY * h) - h) / 2f;
+        if ((sX != 1.0f) || (sY != 1.0f)) {
             m.postScale(sX, sY);
-            m.postTranslate(-deltaSX, -deltaSY);
+            final float sPX = -(pX / w) * ((sX * w) - w);
+            final float sPY = -(pY / h) * ((sY * h) - h);
+            m.postTranslate(sPX, sPY);
         }
+
         m.postTranslate(mTranslationX, mTranslationY);
     }
+
+    @Override
+    protected void applyTransformation(float interpolatedTime, Transformation t) {
+        View view = mView.get();
+        if (view != null) {
+            t.setAlpha(mAlpha);
+            transformMatrix(t.getMatrix(), view);
+        }
+    }
 }
diff --git a/pom.xml b/pom.xml
index 11cd5f7..f33140e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -3,10 +3,16 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
+	<parent>
+		<groupId>org.sonatype.oss</groupId>
+		<artifactId>oss-parent</artifactId>
+		<version>7</version>
+	</parent>
+
 	<groupId>com.nineoldandroids</groupId>
 	<artifactId>parent</artifactId>
 	<packaging>pom</packaging>
-	<version>2.2.0</version>
+	<version>2.4.0</version>
 
 	<name>Nine Old Androids (Parent)</name>
 	<description>Android library for using the Honeycomb animation API on all versions of the platform back to 1.0!</description>
@@ -45,19 +51,6 @@
 		</license>
 	</licenses>
 
-	<distributionManagement>
-		<repository>
-			<id>personal-repository</id>
-			<name>JakeWharton.com Maven Repository</name>
-			<url>scp://r.jakewharton.com/home/jakewharton_repository/r.jakewharton.com/maven/release/</url>
-		</repository>
-		<snapshotRepository>
-			<id>personal-repository</id>
-			<name>JakeWharton.com Maven Repository</name>
-			<url>scp://r.jakewharton.com/home/jakewharton_repository/r.jakewharton.com/maven/snapshot/</url>
-		</snapshotRepository>
-	</distributionManagement>
-
 	<organization>
 		<name>Jake Wharton</name>
 		<url>http://jakewharton.com</url>
@@ -76,7 +69,7 @@
 		<android.version>4.0.1.2</android.version>
 		<android.platform>14</android.platform>
 
-		<android-maven.version>3.0.0</android-maven.version>
+		<android-maven.version>3.2.0</android-maven.version>
 	</properties>
 
 	<dependencyManagement>
@@ -102,12 +95,6 @@
 					</configuration>
 				</plugin>
 
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-javadoc-plugin</artifactId>
-					<version>2.8</version>
-				</plugin>
-
 				<plugin>
 					<groupId>com.jayway.maven.plugins.android.generation2</groupId>
 					<artifactId>android-maven-plugin</artifactId>
diff --git a/sample/AndroidManifest.xml b/sample/AndroidManifest.xml
index 886dad4..e9e523e 100644
--- a/sample/AndroidManifest.xml
+++ b/sample/AndroidManifest.xml
@@ -2,8 +2,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.jakewharton.nineoldandroids.sample"
-    android:versionCode="40"
-    android:versionName="2.2.0">
+    android:versionCode="60"
+    android:versionName="2.4.0">
 
     <uses-sdk
         android:minSdkVersion="1"
diff --git a/sample/pom.xml b/sample/pom.xml
index 3f06827..3f74f77 100644
--- a/sample/pom.xml
+++ b/sample/pom.xml
@@ -11,7 +11,7 @@
 	<parent>
 		<groupId>com.nineoldandroids</groupId>
 		<artifactId>parent</artifactId>
-		<version>2.2.0</version>
+		<version>2.4.0</version>
 		<relativePath>../pom.xml</relativePath>
 	</parent>
 
@@ -39,14 +39,6 @@
 				<extensions>true</extensions>
 			</plugin>
 
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<configuration>
-					<skip>true</skip>
-				</configuration>
-			</plugin>
-
  			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-checkstyle-plugin</artifactId>
diff --git a/sample/res/layout/toggles.xml b/sample/res/layout/toggles.xml
index 26d45d9..ee35102 100644
--- a/sample/res/layout/toggles.xml
+++ b/sample/res/layout/toggles.xml
@@ -1,75 +1,100 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical">
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+              android:orientation="vertical">
     <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content">
         <Button
-            android:id="@+id/tx"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="TX"/>
+                android:id="@+id/tx"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="TX"/>
         <Button
-            android:id="@+id/ty"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="TY"/>
+                android:id="@+id/ty"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="TY"/>
         <Button
-            android:id="@+id/sx"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="SX"/>
+                android:id="@+id/sx"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="SX"/>
         <Button
-            android:id="@+id/sy"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="SY"/>
+                android:id="@+id/sy"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="SY"/>
     </LinearLayout>
     <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content">
         <Button
-            android:id="@+id/a"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="Alpha"/>
+                android:id="@+id/a"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="Alpha"/>
         <Button
-            android:id="@+id/rx"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="RX"/>
+                android:id="@+id/rx"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="RX"/>
         <Button
-            android:id="@+id/ry"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="RY"/>
+                android:id="@+id/ry"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="RY"/>
         <Button
-            android:id="@+id/rz"
-            android:layout_width="0dp"
+                android:id="@+id/rz"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="RZ"/>
+    </LinearLayout>
+    <LinearLayout
             android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="RZ"/>
+            android:layout_width="fill_parent"
+            android:orientation="horizontal">
+        <Button
+                android:id="@+id/pivot_zero_zero"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:text="Pivot (0,0)"/>
+        <Button
+                android:id="@+id/pivot_center"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:text="Pivot Center"/>
+        <Button
+                android:id="@+id/pivot_width_height"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:text="Pivot (w,h)"/>
     </LinearLayout>
     <LinearLayout
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent"
-        android:gravity="center">
-        <FrameLayout
-            android:id="@+id/target"
-            android:layout_width="100dp"
-            android:layout_height="100dp"
-            android:background="#FFFF0000"/>
+            android:layout_height="0dp"
+            android:layout_width="fill_parent"
+            android:layout_weight="1"
+            android:gravity="center">
+        <Button
+                android:id="@+id/target"
+                android:layout_width="100dp"
+                android:layout_height="100dp"
+                android:text="Sample Text"
+                android:gravity="center"/>
     </LinearLayout>
 </LinearLayout>
\ No newline at end of file
diff --git a/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java b/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java
index bd31d80..ca416c6 100644
--- a/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java
+++ b/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java
@@ -1,11 +1,11 @@
 package com.jakewharton.nineoldandroids.sample;
 
-import com.nineoldandroids.animation.ObjectAnimator;
 import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
 import android.view.View.OnClickListener;
-import android.widget.Button;
+import com.nineoldandroids.animation.ObjectAnimator;
+import com.nineoldandroids.view.ViewHelper;
 
 public class Toggles extends Activity {
     @Override
@@ -16,53 +16,74 @@ public void onCreate(Bundle savedInstanceState) {
         final View target = findViewById(R.id.target);
         final int duration = 2 * 1000;
 
-        ((Button)findViewById(R.id.tx)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.tx).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "translationX", 0, 50, -50, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.ty)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.ty).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "translationY", 0, 50, -50, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.sx)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.sx).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "scaleX", 1, 2, 1).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.sy)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.sy).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "scaleY", 1, 2, 1).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.a)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.a).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "alpha", 1, 0, 1).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.rx)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.rx).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "rotationX", 0, 180, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.ry)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.ry).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "rotationY", 0, 180, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.rz)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.rz).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "rotation", 0, 180, 0).setDuration(duration).start();
             }
         });
+        findViewById(R.id.pivot_zero_zero).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ViewHelper.setPivotX(target, 0);
+                ViewHelper.setPivotY(target, 0);
+            }
+        });
+        findViewById(R.id.pivot_center).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ViewHelper.setPivotX(target, target.getWidth() / 2f);
+                ViewHelper.setPivotY(target, target.getHeight() / 2f);
+            }
+        });
+        findViewById(R.id.pivot_width_height).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ViewHelper.setPivotX(target, target.getWidth());
+                ViewHelper.setPivotY(target, target.getHeight());
+            }
+        });
     }
 }
