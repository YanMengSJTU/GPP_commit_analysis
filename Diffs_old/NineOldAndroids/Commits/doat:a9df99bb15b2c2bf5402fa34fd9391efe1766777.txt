diff --git a/CHANGELOG.md b/CHANGELOG.md
index f2d6b83..6958529 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,15 @@
 Change Log
 ==========
 
+Version 2.4.0 *(2012-06-24)*
+----------------------------
+
+ * Add `ViewHelper` class which will delegate new `View` property calls to
+   their native counterparts when available.
+ * Fix: Do not invalidate parent if view is not attached to anything.
+ * Fix: Respect pivot for both scaling in addition to rotating.
+
+
 Version 2.3.0 *(2012-04-25)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 8114419..f108da5 100644
--- a/README.md
+++ b/README.md
@@ -16,7 +16,7 @@ The API is exactly the same as the [Honeycomb API][2], just change your imports
 to use `com.nineoldandroids.XXX`.
 
 Take a look at a few demos taken from the [platform ApiDemos][3] in the
-`sample/` folder. You can also try it out on the [Android Market][4].
+`sample/` folder. You can also try it out on the [Play Store][4].
 
 More information is available on [nineoldandroids.com][6].
 
@@ -34,17 +34,9 @@ a dependency:
     <dependency>
       <groupId>com.nineoldandroids</groupId>
       <artifactId>library</artifactId>
-      <version>2.3.0</version>
+      <version>2.4.0</version>
     </dependency>
 
-You must also include the following repository:
-
-    <repository>
-      <id>com.jakewharton</id>
-      <url>http://r.jakewharton.com/maven/release</url>
-    </repository>
-
-
 
 
 Developed By
@@ -57,7 +49,7 @@ Developed By
 License
 =======
 
-    Copyright 2011 Jake Wharton
+    Copyright 2012 Jake Wharton
 
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
@@ -76,6 +68,6 @@ License
  [1]: http://android-developers.blogspot.com/2011/02/animation-in-honeycomb.html
  [2]: http://developer.android.com/reference/android/view/animation/package-summary.html
  [3]: http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/animation/index.html
- [4]: https://market.android.com/details?id=com.jakewharton.nineoldandroids.sample
+ [4]: https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample
  [5]: https://github.com/JakeWharton/NineOldAndroids/downloads
  [6]: http://nineoldandroids.com
diff --git a/library/AndroidManifest.xml b/library/AndroidManifest.xml
index ebafeeb..0e057cf 100644
--- a/library/AndroidManifest.xml
+++ b/library/AndroidManifest.xml
@@ -3,8 +3,8 @@
 <manifest
 	xmlns:android="http://schemas.android.com/apk/res/android"
 	package="com.nineoldandroids"
-	android:versionCode="50"
-	android:versionName="2.3.0">
+	android:versionCode="60"
+	android:versionName="2.4.0">
 	
     <uses-sdk android:minSdkVersion="1" />
 
diff --git a/library/pom.xml b/library/pom.xml
index 75cee2e..6d8cac5 100644
--- a/library/pom.xml
+++ b/library/pom.xml
@@ -11,7 +11,7 @@
 	<parent>
 		<groupId>com.nineoldandroids</groupId>
 		<artifactId>parent</artifactId>
-		<version>2.3.0</version>
+		<version>2.4.0</version>
 		<relativePath>../pom.xml</relativePath>
 	</parent>
 	
diff --git a/library/src/com/nineoldandroids/view/ViewHelper.java b/library/src/com/nineoldandroids/view/ViewHelper.java
new file mode 100644
index 0000000..d79dc0f
--- /dev/null
+++ b/library/src/com/nineoldandroids/view/ViewHelper.java
@@ -0,0 +1,292 @@
+package com.nineoldandroids.view;
+
+import android.view.View;
+
+import static com.nineoldandroids.view.animation.AnimatorProxy.NEEDS_PROXY;
+import static com.nineoldandroids.view.animation.AnimatorProxy.wrap;
+
+public final class ViewHelper {
+    private ViewHelper() {}
+
+    public static float getAlpha(View view) {
+        return NEEDS_PROXY ? wrap(view).getAlpha() : Honeycomb.getAlpha(view);
+    }
+
+    public static void setAlpha(View view, float alpha) {
+        if (NEEDS_PROXY) {
+            wrap(view).setAlpha(alpha);
+        } else {
+            Honeycomb.setAlpha(view, alpha);
+        }
+    }
+
+    public static float getPivotX(View view) {
+        return NEEDS_PROXY ? wrap(view).getPivotX() : Honeycomb.getPivotX(view);
+    }
+
+    public static void setPivotX(View view, float pivotX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setPivotX(pivotX);
+        } else {
+            Honeycomb.setPivotX(view, pivotX);
+        }
+    }
+
+    public static float getPivotY(View view) {
+        return NEEDS_PROXY ? wrap(view).getPivotY() : Honeycomb.getPivotY(view);
+    }
+
+    public static void setPivotY(View view, float pivotY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setPivotY(pivotY);
+        } else {
+            Honeycomb.setPivotY(view, pivotY);
+        }
+    }
+
+    public static float getRotation(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotation() : Honeycomb.getRotation(view);
+    }
+
+    public static void setRotation(View view, float rotation) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotation(rotation);
+        } else {
+            Honeycomb.setRotation(view, rotation);
+        }
+    }
+
+    public static float getRotationX(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotationX() : Honeycomb.getRotationX(view);
+    }
+
+    public static void setRotationX(View view, float rotationX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotationX(rotationX);
+        } else {
+            Honeycomb.setRotationX(view, rotationX);
+        }
+    }
+
+    public static float getRotationY(View view) {
+        return NEEDS_PROXY ? wrap(view).getRotationY() : Honeycomb.getRotationY(view);
+    }
+
+    public static void setRotationY(View view, float rotationY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setRotationY(rotationY);
+        } else {
+            Honeycomb.setRotationY(view, rotationY);
+        }
+    }
+
+    public static float getScaleX(View view) {
+        return NEEDS_PROXY ? wrap(view).getScaleX() : Honeycomb.getScaleX(view);
+    }
+
+    public static void setScaleX(View view, float scaleX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScaleX(scaleX);
+        } else {
+            Honeycomb.setScaleX(view, scaleX);
+        }
+    }
+
+    public static float getScaleY(View view) {
+        return NEEDS_PROXY ? wrap(view).getScaleY() : Honeycomb.getScaleY(view);
+    }
+
+    public static void setScaleY(View view, float scaleY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScaleY(scaleY);
+        } else {
+            Honeycomb.setScaleY(view, scaleY);
+        }
+    }
+
+    public static float getScrollX(View view) {
+        return NEEDS_PROXY ? wrap(view).getScrollX() : Honeycomb.getScrollX(view);
+    }
+
+    public static void setScrollX(View view, int scrollX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScrollX(scrollX);
+        } else {
+            Honeycomb.setScrollX(view, scrollX);
+        }
+    }
+
+    public static float getScrollY(View view) {
+        return NEEDS_PROXY ? wrap(view).getScrollY() : Honeycomb.getScrollY(view);
+    }
+
+    public static void setScrollY(View view, int scrollY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setScrollY(scrollY);
+        } else {
+            Honeycomb.setScrollY(view, scrollY);
+        }
+    }
+
+    public static float getTranslationX(View view) {
+        return NEEDS_PROXY ? wrap(view).getTranslationX() : Honeycomb.getTranslationX(view);
+    }
+
+    public static void setTranslationX(View view, float translationX) {
+        if (NEEDS_PROXY) {
+            wrap(view).setTranslationX(translationX);
+        } else {
+            Honeycomb.setTranslationX(view, translationX);
+        }
+    }
+
+    public static float getTranslationY(View view) {
+        return NEEDS_PROXY ? wrap(view).getTranslationY() : Honeycomb.getTranslationY(view);
+    }
+
+    public static void setTranslationY(View view, float translationY) {
+        if (NEEDS_PROXY) {
+            wrap(view).setTranslationY(translationY);
+        } else {
+            Honeycomb.setTranslationY(view, translationY);
+        }
+    }
+
+    public static float getX(View view) {
+        return NEEDS_PROXY ? wrap(view).getX() : Honeycomb.getX(view);
+    }
+
+    public static void setX(View view, float x) {
+        if (NEEDS_PROXY) {
+            wrap(view).setX(x);
+        } else {
+            Honeycomb.setX(view, x);
+        }
+    }
+
+    public static float getY(View view) {
+        return NEEDS_PROXY ? wrap(view).getY() : Honeycomb.getY(view);
+    }
+
+    public static void setY(View view, float y) {
+        if (NEEDS_PROXY) {
+            wrap(view).setY(y);
+        } else {
+            Honeycomb.setY(view, y);
+        }
+    }
+
+    private static final class Honeycomb {
+        static float getAlpha(View view) {
+            return view.getAlpha();
+        }
+
+        static void setAlpha(View view, float alpha) {
+            view.setAlpha(alpha);
+        }
+
+        static float getPivotX(View view) {
+            return view.getPivotX();
+        }
+
+        static void setPivotX(View view, float pivotX) {
+            view.setPivotX(pivotX);
+        }
+
+        static float getPivotY(View view) {
+            return view.getPivotY();
+        }
+
+        static void setPivotY(View view, float pivotY) {
+            view.setPivotY(pivotY);
+        }
+
+        static float getRotation(View view) {
+            return view.getRotation();
+        }
+
+        static void setRotation(View view, float rotation) {
+            view.setRotation(rotation);
+        }
+
+        static float getRotationX(View view) {
+            return view.getRotationX();
+        }
+
+        static void setRotationX(View view, float rotationX) {
+            view.setRotationX(rotationX);
+        }
+
+        static float getRotationY(View view) {
+            return view.getRotationY();
+        }
+
+        static void setRotationY(View view, float rotationY) {
+            view.setRotationY(rotationY);
+        }
+
+        static float getScaleX(View view) {
+            return view.getScaleX();
+        }
+
+        static void setScaleX(View view, float scaleX) {
+            view.setScaleX(scaleX);
+        }
+
+        static float getScaleY(View view) {
+            return view.getScaleY();
+        }
+
+        static void setScaleY(View view, float scaleY) {
+            view.setScaleY(scaleY);
+        }
+
+        static float getScrollX(View view) {
+            return view.getScrollX();
+        }
+
+        static void setScrollX(View view, int scrollX) {
+            view.setScrollX(scrollX);
+        }
+
+        static float getScrollY(View view) {
+            return view.getScrollY();
+        }
+
+        static void setScrollY(View view, int scrollY) {
+            view.setScrollY(scrollY);
+        }
+
+        static float getTranslationX(View view) {
+            return view.getTranslationX();
+        }
+
+        static void setTranslationX(View view, float translationX) {
+            view.setTranslationX(translationX);
+        }
+
+        static float getTranslationY(View view) {
+            return view.getTranslationY();
+        }
+
+        static void setTranslationY(View view, float translationY) {
+            view.setTranslationY(translationY);
+        }
+
+        static float getX(View view) {
+            return view.getX();
+        }
+
+        static void setX(View view, float x) {
+            view.setX(x);
+        }
+
+        static float getY(View view) {
+            return view.getY();
+        }
+
+        static void setY(View view, float y) {
+            view.setY(y);
+        }
+    }
+}
diff --git a/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java b/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
index 7f38347..ef3dda2 100644
--- a/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
+++ b/library/src/com/nineoldandroids/view/animation/AnimatorProxy.java
@@ -1,7 +1,5 @@
 package com.nineoldandroids.view.animation;
 
-import java.lang.ref.WeakReference;
-import java.util.WeakHashMap;
 import android.graphics.Camera;
 import android.graphics.Matrix;
 import android.graphics.RectF;
@@ -10,6 +8,9 @@
 import android.view.animation.Animation;
 import android.view.animation.Transformation;
 
+import java.lang.ref.WeakReference;
+import java.util.WeakHashMap;
+
 /**
  * A proxy class to allow for modifying post-3.0 view properties on all pre-3.0
  * platforms. <strong>DO NOT</strong> wrap your views with this class if you
@@ -225,22 +226,6 @@ public void setY(float y) {
         }
     }
 
-    public float getScale() {
-        // this is a pseudo-property for the frequent case where
-        // scaleX and scaleY are being updated synchronously
-        return Math.max(mScaleX, mScaleY);
-    }
-    public void setScale(float scale) {
-        // this is a pseudo-property for the frequent case where
-        // scaleX and scaleY are being updated synchronously
-        if (mScaleX != scale || mScaleY != scale) {
-            prepareForUpdate();
-            mScaleX = scale;
-            mScaleY = scale;
-            invalidateAfterUpdate();
-        }
-    }
-
     private void prepareForUpdate() {
         View view = mView.get();
         if (view != null) {
@@ -248,24 +233,20 @@ private void prepareForUpdate() {
         }
     }
     private void invalidateAfterUpdate() {
- 		View view = mView.get();
-		if (view == null)
-		{
-			return;
-		}
+        View view = mView.get();
+        if (view == null || view.getParent() == null) {
+            return;
+        }
+
+        final RectF after = mAfter;
+        computeRect(after, view);
+        after.union(mBefore);
 
-		final RectF after = mAfter;
-		computeRect(after, view);
-		after.union(mBefore);
-		View parent = (View) view.getParent();
-		
-		if (parent != null)
-		{
-			parent.invalidate((int) Math.floor(after.left), (int) Math.floor(after.top),
-					(int) Math.ceil(after.right), (int) Math.ceil(after.bottom));
-		}
-		else
-			view.invalidate();
+        ((View)view.getParent()).invalidate(
+                (int) Math.floor(after.left),
+                (int) Math.floor(after.top),
+                (int) Math.ceil(after.right),
+                (int) Math.ceil(after.bottom));
     }
 
     private void computeRect(final RectF r, View view) {
@@ -299,15 +280,15 @@ private void computeRect(final RectF r, View view) {
     private void transformMatrix(Matrix m, View view) {
         final float w = view.getWidth();
         final float h = view.getHeight();
+        final boolean hasPivot = mHasPivot;
+        final float pX = hasPivot ? mPivotX : w / 2f;
+        final float pY = hasPivot ? mPivotY : h / 2f;
 
         final float rX = mRotationX;
         final float rY = mRotationY;
         final float rZ = mRotationZ;
         if ((rX != 0) || (rY != 0) || (rZ != 0)) {
             final Camera camera = mCamera;
-            final boolean hasPivot = mHasPivot;
-            final float pX = hasPivot ? mPivotX : w / 2f;
-            final float pY = hasPivot ? mPivotY : h / 2f;
             camera.save();
             camera.rotateX(rX);
             camera.rotateY(rY);
@@ -321,11 +302,12 @@ private void transformMatrix(Matrix m, View view) {
         final float sX = mScaleX;
         final float sY = mScaleY;
         if ((sX != 1.0f) || (sY != 1.0f)) {
-            final float deltaSX = ((sX * w) - w) / 2f;
-            final float deltaSY = ((sY * h) - h) / 2f;
             m.postScale(sX, sY);
-            m.postTranslate(-deltaSX, -deltaSY);
+            final float sPX = -(pX / w) * ((sX * w) - w);
+            final float sPY = -(pY / h) * ((sY * h) - h);
+            m.postTranslate(sPX, sPY);
         }
+
         m.postTranslate(mTranslationX, mTranslationY);
     }
 
diff --git a/pom.xml b/pom.xml
index 6854ca8..f33140e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -12,7 +12,7 @@
 	<groupId>com.nineoldandroids</groupId>
 	<artifactId>parent</artifactId>
 	<packaging>pom</packaging>
-	<version>2.3.0</version>
+	<version>2.4.0</version>
 
 	<name>Nine Old Androids (Parent)</name>
 	<description>Android library for using the Honeycomb animation API on all versions of the platform back to 1.0!</description>
@@ -69,7 +69,7 @@
 		<android.version>4.0.1.2</android.version>
 		<android.platform>14</android.platform>
 
-		<android-maven.version>3.1.1</android-maven.version>
+		<android-maven.version>3.2.0</android-maven.version>
 	</properties>
 
 	<dependencyManagement>
diff --git a/sample/AndroidManifest.xml b/sample/AndroidManifest.xml
index 08174c9..e9e523e 100644
--- a/sample/AndroidManifest.xml
+++ b/sample/AndroidManifest.xml
@@ -2,8 +2,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.jakewharton.nineoldandroids.sample"
-    android:versionCode="50"
-    android:versionName="2.3.0">
+    android:versionCode="60"
+    android:versionName="2.4.0">
 
     <uses-sdk
         android:minSdkVersion="1"
diff --git a/sample/pom.xml b/sample/pom.xml
index a1ca6d8..3f74f77 100644
--- a/sample/pom.xml
+++ b/sample/pom.xml
@@ -11,7 +11,7 @@
 	<parent>
 		<groupId>com.nineoldandroids</groupId>
 		<artifactId>parent</artifactId>
-		<version>2.3.0</version>
+		<version>2.4.0</version>
 		<relativePath>../pom.xml</relativePath>
 	</parent>
 
diff --git a/sample/res/layout/toggles.xml b/sample/res/layout/toggles.xml
index 26d45d9..ee35102 100644
--- a/sample/res/layout/toggles.xml
+++ b/sample/res/layout/toggles.xml
@@ -1,75 +1,100 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical">
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+              android:orientation="vertical">
     <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content">
         <Button
-            android:id="@+id/tx"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="TX"/>
+                android:id="@+id/tx"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="TX"/>
         <Button
-            android:id="@+id/ty"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="TY"/>
+                android:id="@+id/ty"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="TY"/>
         <Button
-            android:id="@+id/sx"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="SX"/>
+                android:id="@+id/sx"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="SX"/>
         <Button
-            android:id="@+id/sy"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="SY"/>
+                android:id="@+id/sy"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="SY"/>
     </LinearLayout>
     <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content">
         <Button
-            android:id="@+id/a"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="Alpha"/>
+                android:id="@+id/a"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="Alpha"/>
         <Button
-            android:id="@+id/rx"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="RX"/>
+                android:id="@+id/rx"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="RX"/>
         <Button
-            android:id="@+id/ry"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="RY"/>
+                android:id="@+id/ry"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="RY"/>
         <Button
-            android:id="@+id/rz"
-            android:layout_width="0dp"
+                android:id="@+id/rz"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="RZ"/>
+    </LinearLayout>
+    <LinearLayout
             android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="RZ"/>
+            android:layout_width="fill_parent"
+            android:orientation="horizontal">
+        <Button
+                android:id="@+id/pivot_zero_zero"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:text="Pivot (0,0)"/>
+        <Button
+                android:id="@+id/pivot_center"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:text="Pivot Center"/>
+        <Button
+                android:id="@+id/pivot_width_height"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:text="Pivot (w,h)"/>
     </LinearLayout>
     <LinearLayout
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent"
-        android:gravity="center">
-        <FrameLayout
-            android:id="@+id/target"
-            android:layout_width="100dp"
-            android:layout_height="100dp"
-            android:background="#FFFF0000"/>
+            android:layout_height="0dp"
+            android:layout_width="fill_parent"
+            android:layout_weight="1"
+            android:gravity="center">
+        <Button
+                android:id="@+id/target"
+                android:layout_width="100dp"
+                android:layout_height="100dp"
+                android:text="Sample Text"
+                android:gravity="center"/>
     </LinearLayout>
 </LinearLayout>
\ No newline at end of file
diff --git a/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java b/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java
index bd31d80..ca416c6 100644
--- a/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java
+++ b/sample/src/com/jakewharton/nineoldandroids/sample/Toggles.java
@@ -1,11 +1,11 @@
 package com.jakewharton.nineoldandroids.sample;
 
-import com.nineoldandroids.animation.ObjectAnimator;
 import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
 import android.view.View.OnClickListener;
-import android.widget.Button;
+import com.nineoldandroids.animation.ObjectAnimator;
+import com.nineoldandroids.view.ViewHelper;
 
 public class Toggles extends Activity {
     @Override
@@ -16,53 +16,74 @@ public void onCreate(Bundle savedInstanceState) {
         final View target = findViewById(R.id.target);
         final int duration = 2 * 1000;
 
-        ((Button)findViewById(R.id.tx)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.tx).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "translationX", 0, 50, -50, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.ty)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.ty).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "translationY", 0, 50, -50, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.sx)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.sx).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "scaleX", 1, 2, 1).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.sy)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.sy).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "scaleY", 1, 2, 1).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.a)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.a).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "alpha", 1, 0, 1).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.rx)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.rx).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "rotationX", 0, 180, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.ry)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.ry).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "rotationY", 0, 180, 0).setDuration(duration).start();
             }
         });
-        ((Button)findViewById(R.id.rz)).setOnClickListener(new OnClickListener() {
+        findViewById(R.id.rz).setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View v) {
                 ObjectAnimator.ofFloat(target, "rotation", 0, 180, 0).setDuration(duration).start();
             }
         });
+        findViewById(R.id.pivot_zero_zero).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ViewHelper.setPivotX(target, 0);
+                ViewHelper.setPivotY(target, 0);
+            }
+        });
+        findViewById(R.id.pivot_center).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ViewHelper.setPivotX(target, target.getWidth() / 2f);
+                ViewHelper.setPivotY(target, target.getHeight() / 2f);
+            }
+        });
+        findViewById(R.id.pivot_width_height).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ViewHelper.setPivotX(target, target.getWidth());
+                ViewHelper.setPivotY(target, target.getHeight());
+            }
+        });
     }
 }
