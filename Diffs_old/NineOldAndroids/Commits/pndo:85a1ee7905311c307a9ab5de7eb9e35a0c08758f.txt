diff --git a/library/src/com/nineoldandroids/util/NameValuesHolder.java b/library/src/com/nineoldandroids/util/NameValuesHolder.java
new file mode 100644
index 0000000..bd219cf
--- /dev/null
+++ b/library/src/com/nineoldandroids/util/NameValuesHolder.java
@@ -0,0 +1,36 @@
+package com.nineoldandroids.util;
+
+/**
+ * This is the information we need to set each property during the animation.
+ * mNameConstant is used to set the appropriate field in View, and the from/delta
+ * values are used to calculate the animated value for a given animation fraction
+ * during the animation.
+ */
+public class NameValuesHolder
+{
+    private int mNameConstant;
+    private float mFromValue;
+    private float mDeltaValue;
+
+    public NameValuesHolder(int nameConstant, float fromValue, float deltaValue)
+    {
+        mNameConstant = nameConstant;
+        mFromValue = fromValue;
+        mDeltaValue = deltaValue;
+    }
+
+    public int getNameConstant()
+    {
+        return mNameConstant;
+    }
+
+    public float getFromValue()
+    {
+        return mFromValue;
+    }
+
+    public float getDeltaValue()
+    {
+        return mDeltaValue;
+    }
+}
diff --git a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
index b547246..160bfc4 100644
--- a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
+++ b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorHC.java
@@ -20,6 +20,7 @@
 import android.view.animation.Interpolator;
 import com.nineoldandroids.animation.Animator;
 import com.nineoldandroids.animation.ValueAnimator;
+import com.nineoldandroids.util.NameValuesHolder;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -412,7 +413,7 @@ private void startAnimation()
         for (int i = 0; i < propertyCount; ++i)
         {
             NameValuesHolder nameValuesHolder = nameValueList.get(i);
-            propertyMask |= nameValuesHolder.mNameConstant;
+            propertyMask |= nameValuesHolder.getNameConstant();
         }
         mAnimatorMap.put(animator, new PropertyBundle(propertyMask, nameValueList));
         animator.addUpdateListener(mAnimatorEventListener);
@@ -656,7 +657,7 @@ boolean cancel(int propertyConstant)
                 for (int i = 0; i < count; ++i)
                 {
                     NameValuesHolder nameValuesHolder = mNameValuesHolder.get(i);
-                    if (nameValuesHolder.mNameConstant == propertyConstant)
+                    if (nameValuesHolder.getNameConstant() == propertyConstant)
                     {
                         mNameValuesHolder.remove(i);
                         mPropertyMask &= ~propertyConstant;
@@ -668,26 +669,6 @@ boolean cancel(int propertyConstant)
         }
     }
 
-    /**
-     * This is the information we need to set each property during the animation.
-     * mNameConstant is used to set the appropriate field in View, and the from/delta
-     * values are used to calculate the animated value for a given animation fraction
-     * during the animation.
-     */
-    private static class NameValuesHolder
-    {
-        int mNameConstant;
-        float mFromValue;
-        float mDeltaValue;
-
-        NameValuesHolder(int nameConstant, float fromValue, float deltaValue)
-        {
-            mNameConstant = nameConstant;
-            mFromValue = fromValue;
-            mDeltaValue = deltaValue;
-        }
-    }
-
     /**
      * Utility class that handles the various Animator events. The only ones we care
      * about are the end event (which we use to clean up the animator map when an animator
@@ -777,11 +758,11 @@ public void onAnimationUpdate(ValueAnimator animation)
                 for (int i = 0; i < count; ++i)
                 {
                     NameValuesHolder values = valueList.get(i);
-                    float value = values.mFromValue + fraction * values.mDeltaValue;
+                    float value = values.getFromValue() + fraction * values.getDeltaValue();
                     //if (values.mNameConstant == ALPHA) {
                     //    alphaHandled = mView.setAlphaNoInvalidation(value);
                     //} else {
-                    setValue(values.mNameConstant, value);
+                    setValue(values.getNameConstant(), value);
                     //}
                 }
             }
diff --git a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
index 19b8afe..a60b4cd 100644
--- a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
+++ b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorICS.java
@@ -1,5 +1,7 @@
 package com.nineoldandroids.view;
 
+import android.annotation.TargetApi;
+import android.os.Build;
 import android.view.View;
 import android.view.animation.Interpolator;
 import com.nineoldandroids.animation.Animator.AnimatorListener;
diff --git a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
index ecd4d23..5926b43 100644
--- a/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
+++ b/library/src/com/nineoldandroids/view/ViewPropertyAnimatorPreHC.java
@@ -20,6 +20,7 @@
 import android.view.animation.Interpolator;
 import com.nineoldandroids.animation.Animator;
 import com.nineoldandroids.animation.ValueAnimator;
+import com.nineoldandroids.util.NameValuesHolder;
 import com.nineoldandroids.view.animation.AnimatorProxy;
 
 import java.lang.ref.WeakReference;
@@ -417,7 +418,7 @@ private void startAnimation()
         for (int i = 0; i < propertyCount; ++i)
         {
             NameValuesHolder nameValuesHolder = nameValueList.get(i);
-            propertyMask |= nameValuesHolder.mNameConstant;
+            propertyMask |= nameValuesHolder.getNameConstant();
         }
         mAnimatorMap.put(animator, new PropertyBundle(propertyMask, nameValueList));
         animator.addUpdateListener(mAnimatorEventListener);
@@ -653,7 +654,7 @@ boolean cancel(int propertyConstant)
                 for (int i = 0; i < count; ++i)
                 {
                     NameValuesHolder nameValuesHolder = mNameValuesHolder.get(i);
-                    if (nameValuesHolder.mNameConstant == propertyConstant)
+                    if (nameValuesHolder.getNameConstant() == propertyConstant)
                     {
                         mNameValuesHolder.remove(i);
                         mPropertyMask &= ~propertyConstant;
@@ -665,26 +666,6 @@ boolean cancel(int propertyConstant)
         }
     }
 
-    /**
-     * This is the information we need to set each property during the animation.
-     * mNameConstant is used to set the appropriate field in View, and the from/delta
-     * values are used to calculate the animated value for a given animation fraction
-     * during the animation.
-     */
-    private static class NameValuesHolder
-    {
-        int mNameConstant;
-        float mFromValue;
-        float mDeltaValue;
-
-        NameValuesHolder(int nameConstant, float fromValue, float deltaValue)
-        {
-            mNameConstant = nameConstant;
-            mFromValue = fromValue;
-            mDeltaValue = deltaValue;
-        }
-    }
-
     /**
      * Utility class that handles the various Animator events. The only ones we care
      * about are the end event (which we use to clean up the animator map when an animator
@@ -774,11 +755,11 @@ public void onAnimationUpdate(ValueAnimator animation)
                 for (int i = 0; i < count; ++i)
                 {
                     NameValuesHolder values = valueList.get(i);
-                    float value = values.mFromValue + fraction * values.mDeltaValue;
+                    float value = values.getFromValue() + fraction * values.getDeltaValue();
                     //if (values.mNameConstant == ALPHA) {
                     //    alphaHandled = mView.setAlphaNoInvalidation(value);
                     //} else {
-                    setValue(values.mNameConstant, value);
+                    setValue(values.getNameConstant(), value);
                     //}
                 }
             }
