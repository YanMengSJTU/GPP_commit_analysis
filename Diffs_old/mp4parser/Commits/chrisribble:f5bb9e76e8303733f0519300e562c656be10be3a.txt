diff --git a/isoparser/src/main/java/org/mp4parser/BasicContainer.java b/isoparser/src/main/java/org/mp4parser/BasicContainer.java
index 9151a14a..8ae9077b 100644
--- a/isoparser/src/main/java/org/mp4parser/BasicContainer.java
+++ b/isoparser/src/main/java/org/mp4parser/BasicContainer.java
@@ -1,5 +1,6 @@
 package org.mp4parser;
 
+import java.io.Closeable;
 import java.io.EOFException;
 import java.io.IOException;
 import java.nio.channels.ReadableByteChannel;
@@ -117,7 +118,16 @@ public void initContainer(ReadableByteChannel readableByteChannel, long containe
         }
     }
 
+    @Override
+    public void close() throws IOException {
+        for (Box box : boxes) {
+            if (box instanceof Closeable) {
+                ((Closeable) box).close();
+            }
+        }
+    }
 
+    @Override
     public String toString() {
         StringBuilder buffer = new StringBuilder();
 
@@ -126,7 +136,7 @@ public String toString() {
             if (i > 0) {
                 buffer.append(";");
             }
-            buffer.append(boxes.get(i).toString());
+            buffer.append(boxes.get(i));
         }
         buffer.append("]");
         return buffer.toString();
diff --git a/isoparser/src/main/java/org/mp4parser/Container.java b/isoparser/src/main/java/org/mp4parser/Container.java
index 0108efde..849de7c7 100644
--- a/isoparser/src/main/java/org/mp4parser/Container.java
+++ b/isoparser/src/main/java/org/mp4parser/Container.java
@@ -1,5 +1,6 @@
 package org.mp4parser;
 
+import java.io.Closeable;
 import java.io.IOException;
 import java.nio.channels.WritableByteChannel;
 import java.util.List;
@@ -7,7 +8,7 @@
 /**
  * Interface for all ISO boxes that may contain other boxes.
  */
-public interface Container {
+public interface Container extends Closeable {
 
     /**
      * Gets all child boxes. May not return <code>null</code>.
diff --git a/isoparser/src/main/java/org/mp4parser/IsoFile.java b/isoparser/src/main/java/org/mp4parser/IsoFile.java
index b204245c..e43d2f70 100644
--- a/isoparser/src/main/java/org/mp4parser/IsoFile.java
+++ b/isoparser/src/main/java/org/mp4parser/IsoFile.java
@@ -19,12 +19,10 @@
 import org.mp4parser.boxes.iso14496.part12.MovieBox;
 import org.mp4parser.support.DoNotParseDetail;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.*;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.channels.WritableByteChannel;
+import java.nio.charset.StandardCharsets;
 
 /**
  * The most upper container for ISO Boxes. It is a container box that is a file.
@@ -32,16 +30,19 @@
  */
 @DoNotParseDetail
 public class IsoFile extends BasicContainer implements Closeable {
-    private static Logger LOG = LoggerFactory.getLogger(IsoFile.class);
-    private ReadableByteChannel readableByteChannel;
+    private final ReadableByteChannel readableByteChannel;
+
+    private FileInputStream fis;
 
 
     public IsoFile(String file) throws IOException {
-        this(new FileInputStream(file).getChannel(), new PropertyBoxParserImpl());
+        this(new File(file));
     }
 
     public IsoFile(File file) throws IOException {
-        this(new FileInputStream(file).getChannel(), new PropertyBoxParserImpl());
+        this.fis = new FileInputStream(file);
+        this.readableByteChannel = fis.getChannel();
+        initContainer(readableByteChannel, -1, new PropertyBoxParserImpl());
     }
 
     /**
@@ -72,11 +73,7 @@ public static String bytesToFourCC(byte[] type) {
         if (type != null) {
             System.arraycopy(type, 0, result, 0, Math.min(type.length, 4));
         }
-        try {
-            return new String(result, "ISO-8859-1");
-        } catch (UnsupportedEncodingException e) {
-            throw new Error("Required character encoding is missing", e);
-        }
+        return new String(result, StandardCharsets.ISO_8859_1);
     }
 
 
@@ -104,12 +101,17 @@ public void getBox(WritableByteChannel os) throws IOException {
         writeContainer(os);
     }
 
+    @Override
     public void close() throws IOException {
         this.readableByteChannel.close();
+        if (this.fis != null) {
+            this.fis.close();
+        }
+        super.close();
     }
 
     @Override
     public String toString() {
-        return "model(" + readableByteChannel.toString() + ")";
+        return "model(" + readableByteChannel + ")";
     }
 }
diff --git a/isoparser/src/main/java/org/mp4parser/boxes/apple/TimeCodeBox.java b/isoparser/src/main/java/org/mp4parser/boxes/apple/TimeCodeBox.java
index 2d8ca7b4..8dc15bd3 100644
--- a/isoparser/src/main/java/org/mp4parser/boxes/apple/TimeCodeBox.java
+++ b/isoparser/src/main/java/org/mp4parser/boxes/apple/TimeCodeBox.java
@@ -168,7 +168,7 @@ public void setRest(byte[] rest) {
     }
 
     public void setBoxes(List<? extends Box> boxes) {
-        throw new RuntimeException("Time Code Box doesn't accept any children");
+        throw new UnsupportedOperationException("Time Code Box doesn't accept any children");
     }
 
     public <T extends Box> List<T> getBoxes(Class<T> clazz) {
@@ -181,4 +181,9 @@ public void setBoxes(List<? extends Box> boxes) {
 
     public void writeContainer(WritableByteChannel bb) throws IOException {
     }
+
+    @Override
+    public void close() throws IOException {
+        // no-op
+    }
 }
diff --git a/isoparser/src/main/java/org/mp4parser/boxes/iso14496/part12/MediaDataBox.java b/isoparser/src/main/java/org/mp4parser/boxes/iso14496/part12/MediaDataBox.java
index eca3940b..dea3aaf5 100644
--- a/isoparser/src/main/java/org/mp4parser/boxes/iso14496/part12/MediaDataBox.java
+++ b/isoparser/src/main/java/org/mp4parser/boxes/iso14496/part12/MediaDataBox.java
@@ -20,9 +20,7 @@
 import org.mp4parser.ParsableBox;
 import org.mp4parser.support.DoNotParseDetail;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import java.io.Closeable;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -45,15 +43,11 @@
  * so Media Data Box headers and free space may easily be skipped, and files without any box structure may
  * also be referenced and used.
  */
-public final class MediaDataBox implements ParsableBox {
+public final class MediaDataBox implements ParsableBox, Closeable {
     public static final String TYPE = "mdat";
-    private static Logger LOG = LoggerFactory.getLogger(MediaDataBox.class);
     ByteBuffer header;
     File dataFile;
 
-    public MediaDataBox() {
-    }
-
     public String getType() {
         return TYPE;
     }
@@ -61,10 +55,10 @@ public String getType() {
 
     public void getBox(WritableByteChannel writableByteChannel) throws IOException {
         writableByteChannel.write((ByteBuffer) ((Buffer)header).rewind());
-        FileChannel fc = new FileInputStream(dataFile).getChannel();
-
-        fc.transferTo(0, dataFile.lastModified(), writableByteChannel);
-        fc.close();
+        try (FileInputStream fis = new FileInputStream(dataFile);
+             FileChannel fc = fis.getChannel()) {
+            fc.transferTo(0, dataFile.lastModified(), writableByteChannel);
+        }
     }
 
     public long getSize() {
@@ -83,14 +77,17 @@ public void parse(ReadableByteChannel dataSource, ByteBuffer header, long conten
 
         this.header = ByteBuffer.allocate(header.limit());
         this.header.put(header);
-        RandomAccessFile raf = new RandomAccessFile(dataFile, "rw");
-        try {
+        try (RandomAccessFile raf = new RandomAccessFile(dataFile, "rw")) {
             raf.getChannel().transferFrom(dataSource, 0, contentSize);
-        } finally {
-            raf.close();
         }
 
     }
 
 
+    @Override
+    public void close() throws IOException {
+        if (dataFile != null) {
+            dataFile.delete();
+        }
+    }
 }
