diff --git a/examples/src/main/java/com/googlecode/mp4parser/muxformats/Mp3Example.java b/examples/src/main/java/com/googlecode/mp4parser/muxformats/Mp3Example.java
new file mode 100644
index 00000000..810fd472
--- /dev/null
+++ b/examples/src/main/java/com/googlecode/mp4parser/muxformats/Mp3Example.java
@@ -0,0 +1,29 @@
+package com.googlecode.mp4parser.muxformats;
+
+import com.coremedia.iso.boxes.Container;
+import com.googlecode.mp4parser.FileDataSourceImpl;
+import com.googlecode.mp4parser.authoring.Movie;
+import com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;
+import com.googlecode.mp4parser.authoring.tracks.MP3TrackImpl;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.channels.FileChannel;
+import java.io.*;
+
+/**
+ * Created with vi.
+ */
+public class Mp3Example {
+    public static void main(String[] args) throws IOException {
+        MP3TrackImpl myTrack = new MP3TrackImpl(new FileDataSourceImpl("/home/ubuntu/mpthreetest.mp3"));
+        Movie m = new Movie();
+        m.addTrack(myTrack);
+        DefaultMp4Builder mp4Builder = new DefaultMp4Builder();
+        Container out = mp4Builder.build(m);
+        FileOutputStream fos = new FileOutputStream("output.mp4");
+        FileChannel fc = fos.getChannel();
+        out.writeContainer(fc);
+        fos.close();
+    }
+}
diff --git a/isoparser/src/main/java/com/googlecode/mp4parser/authoring/tracks/MP3TrackImpl.java b/isoparser/src/main/java/com/googlecode/mp4parser/authoring/tracks/MP3TrackImpl.java
index 101e2107..40137837 100644
--- a/isoparser/src/main/java/com/googlecode/mp4parser/authoring/tracks/MP3TrackImpl.java
+++ b/isoparser/src/main/java/com/googlecode/mp4parser/authoring/tracks/MP3TrackImpl.java
@@ -30,6 +30,7 @@
 public class MP3TrackImpl extends AbstractTrack {
     private static final int MPEG_V1 = 0x3; // only support V1
     private static final int MPEG_L3 = 1; // only support L3
+    private static final int ID3_V1 = 0x544147; // Support ID3v1'TAG' headers
     private static final int[] SAMPLE_RATE = {44100, 48000, 32000, 0};
     private static final int[] BIT_RATE = {0, 32000, 40000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 160000, 192000, 224000, 256000, 320000, 0};
     private static final int SAMPLES_PER_FRAME = 1152; // Samples per L3 frame
@@ -196,8 +197,14 @@ private MP3Header readMP3Header(DataSource channel) throws IOException {
 
         BitReaderBuffer brb = new BitReaderBuffer((ByteBuffer) bb.rewind());
         int sync = brb.readBits(11); // A
-        if (sync != 0x7ff)
+        if (sync != 0x7ff) {
+            // Check for other types of acceptible headers before erroring - I expect some more here are possible
+            brb = new BitReaderBuffer((ByteBuffer) bb.rewind());
+            int special = brb.readBits(24);
+            if (special == ID3_V1) // TAG ID3v1 header
+                return null;
             throw new IOException("Expected Start Word 0x7ff");
+        }
         hdr.mpegVersion = brb.readBits(2); // B
 
         if (hdr.mpegVersion != MPEG_V1)
