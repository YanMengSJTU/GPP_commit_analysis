diff --git a/isoparser/pom.xml b/isoparser/pom.xml
index 1cd5f50b..a854b071 100644
--- a/isoparser/pom.xml
+++ b/isoparser/pom.xml
@@ -22,33 +22,6 @@
         </resources>
         <defaultGoal>install</defaultGoal>
         <plugins>
-            <plugin>
-                <groupId>org.codehaus.mojo</groupId>
-                <artifactId>aspectj-maven-plugin</artifactId>
-                <version>1.5</version>
-                <executions>
-                    <execution>
-                        <goals>
-                            <goal>compile</goal>
-                        </goals>
-                    </execution>
-                </executions>
-                <dependencies>
-
-                    <dependency>
-                        <groupId>org.aspectj</groupId>
-                        <artifactId>aspectjtools</artifactId>
-                        <version>1.8.2</version>
-                    </dependency>
-
-                </dependencies>
-                <configuration>
-                    <complianceLevel>1.5</complianceLevel>
-                    <source>1.5</source>
-                    <target>1.5</target>
-                </configuration>
-            </plugin>
-
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-resources-plugin</artifactId>
@@ -82,11 +55,6 @@
     </build>
 
     <dependencies>
-        <dependency>
-            <groupId>org.aspectj</groupId>
-            <artifactId>aspectjrt</artifactId>
-            <version>1.8.2</version>
-        </dependency>
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
diff --git a/isoparser/src/main/java/com/coremedia/iso/PropertyBoxParserImpl.java b/isoparser/src/main/java/com/coremedia/iso/PropertyBoxParserImpl.java
index 7ad45407..8ac29866 100644
--- a/isoparser/src/main/java/com/coremedia/iso/PropertyBoxParserImpl.java
+++ b/isoparser/src/main/java/com/coremedia/iso/PropertyBoxParserImpl.java
@@ -16,6 +16,9 @@
 package com.coremedia.iso;
 
 import com.coremedia.iso.boxes.Box;
+import com.coremedia.iso.boxes.Container;
+import com.googlecode.mp4parser.AbstractBox;
+import com.googlecode.mp4parser.DataSource;
 
 import java.io.BufferedInputStream;
 import java.io.IOException;
@@ -35,7 +38,10 @@
     Properties mapping;
     Pattern constuctorPattern = Pattern.compile("(.*)\\((.*?)\\)");
 
-    public PropertyBoxParserImpl(String... customProperties) {
+    private final boolean parseDetails;
+
+    public PropertyBoxParserImpl(boolean parseDetails, String... customProperties) {
+        this.parseDetails = parseDetails;
         InputStream is = getClass().getResourceAsStream("/isoparser-default.properties");
         try {
             mapping = new Properties();
@@ -72,10 +78,18 @@ public PropertyBoxParserImpl(String... customProperties) {
         }
     }
 
-    public PropertyBoxParserImpl(Properties mapping) {
+    public PropertyBoxParserImpl(String... customProperties) {
+        this(true, customProperties);
+    }
+
+    public PropertyBoxParserImpl(boolean parseDetails, Properties mapping) {
+        this.parseDetails = parseDetails;
         this.mapping = mapping;
     }
 
+    public PropertyBoxParserImpl(Properties mapping) {
+        this(true, mapping);
+    }
 
     @Override
     public Box createBox(String type, byte[] userType, String parent) {
@@ -173,4 +187,19 @@ public void invoke(String type, byte[] userType, String parent) {
         }
 
     }
+
+    @Override
+    public Box parseBox(DataSource byteChannel, Container parent) throws IOException {
+        Box box = super.parseBox(byteChannel, parent);
+
+        if (parseDetails && box instanceof AbstractBox) {
+            AbstractBox abstractBox = (AbstractBox)box;
+            if (!abstractBox.isParsed()) {
+                //System.err.println(String.format("parsed detail %s", box.getClass().getSimpleName()));
+                abstractBox.parseDetails();
+            }
+        }
+
+        return box;
+    }
 }
diff --git a/isoparser/src/main/java/com/googlecode/mp4parser/RequiresParseDetailAspect.java b/isoparser/src/main/java/com/googlecode/mp4parser/RequiresParseDetailAspect.java
deleted file mode 100644
index 5a9695ff..00000000
--- a/isoparser/src/main/java/com/googlecode/mp4parser/RequiresParseDetailAspect.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright 2012 Sebastian Annies, Hamburg
- *
- * Licensed under the Apache License, Version 2.0 (the License);
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an AS IS BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.googlecode.mp4parser;
-
-import org.aspectj.lang.JoinPoint;
-import org.aspectj.lang.annotation.Aspect;
-import org.aspectj.lang.annotation.Before;
-
-@Aspect
-/**
- * An aspect to trigger the actual parsing of boxes' content when it is actually needed. This aspect
- * calls {@link com.googlecode.mp4parser.AbstractBox#parseDetails()} before actually executing
- * the method.
- */
-public class RequiresParseDetailAspect {
-
-
-    @Before("this(com.googlecode.mp4parser.AbstractBox) && ((execution(public * * (..)) && !( " +
-            "execution(* parseDetails()) || " +
-            "execution(* getNumOfBytesToFirstChild()) || " +
-            "execution(* getType()) || " +
-            "execution(* isParsed()) || " +
-            "execution(* getHeader(*)) || " +
-            "execution(* parse()) || " +
-            "execution(* getBox(*)) || " +
-            "execution(* getSize()) || " +
-            "execution(* getOffset()) || " +
-            "execution(* parseDetails()) || " +
-            "execution(* _parseDetails(*)) || " +
-            "execution(* parse(*,*,*,*)) || " +
-            "execution(* getIsoFile()) || " +
-            "execution(* getParent()) || " +
-            "execution(* setParent(*)) || " +
-            "execution(* getUserType()) || " +
-            "execution(* setUserType(*))) && " +
-            "!@annotation(com.googlecode.mp4parser.annotations.DoNotParseDetail)) || @annotation(com.googlecode.mp4parser.annotations.ParseDetail))")
-    public void before(JoinPoint joinPoint) {
-        if (joinPoint.getTarget() instanceof AbstractBox) {
-            if (!((AbstractBox) joinPoint.getTarget()).isParsed()) {
-                //System.err.println(String.format("parsed detail %s", joinPoint.getTarget().getClass().getSimpleName()));
-                ((AbstractBox) joinPoint.getTarget()).parseDetails();
-            }
-        } else {
-            throw new RuntimeException("Only methods in subclasses of " + AbstractBox.class.getName() + " can  be annotated with ParseDetail");
-        }
-
-    }
-
-
-}
\ No newline at end of file
