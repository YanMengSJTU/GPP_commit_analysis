diff --git a/CHANGELOG.md b/CHANGELOG.md
index a7e175fbf9..243efa1555 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,13 +1,17 @@
-## 5.3.1 (YYYY-MM-DD)
+## 5.3.1 (2018-06-19)
 
 ### Bug Fixes
 
+* [ObjectServer] Fixed a bug which could potentially flood Realm Object Server with PING messages.
+* Calling `Realm.deleteAll()` on a Realm file that contains more classes than in the schema throws exception (#5745).
+* `Realm.isEmpty()` returning false in some cases, even if all tables part of the schema are empty (#5745).
 * Fixed rare native crash materializing as `Assertion failed: ref + size <= after_ref with (ref, size, after_ref, ndx, m_free_positions.size())` (#5300).
 
 ### Internal
 
 * Upgraded to Realm Core 5.6.2
-* Upgraded to Realm Core 3.5.4
+* Upgraded to Realm Sync 3.5.6
+* Upgraded to Object Store commit `0bcb9643b8fb14323df697999b79c4a5341a8a21`
 
 
 ## 5.3.0 (2018-06-12)
diff --git a/dependencies.list b/dependencies.list
index f5c32f339a..38c280404a 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,7 +1,7 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=3.5.4
-REALM_SYNC_SHA256=72ff45e9e8d285c1baa13f83492652de2199542dfe80d075951d6277957baaed
+REALM_SYNC_VERSION=3.5.6
+REALM_SYNC_SHA256=f24e404bbd649d3f5071ece7eb8ab7d667a3d2a95dc83766ebf8e0534b83125d
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index 25f5176911..b3ca5ba035 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -96,6 +96,7 @@
 import io.realm.entities.PrimaryKeyRequiredAsBoxedShort;
 import io.realm.entities.PrimaryKeyRequiredAsString;
 import io.realm.entities.RandomPrimaryKey;
+import io.realm.entities.StringAndInt;
 import io.realm.entities.StringOnly;
 import io.realm.entities.StringOnlyReadOnly;
 import io.realm.exceptions.RealmException;
@@ -3790,6 +3791,41 @@ public void deleteAll() {
         assertTrue(realm.isEmpty());
     }
 
+    // Test for https://github.com/realm/realm-java/issues/5745
+    @Test
+    public void deleteAll_realmWithMoreTables() {
+        realm.close();
+        RealmConfiguration config1 = configFactory.createConfigurationBuilder()
+                .name("deleteAllTest.realm")
+                .schema(StringOnly.class, StringAndInt.class)
+                .build();
+        realm = Realm.getInstance(config1);
+        realm.executeTransaction(r -> {
+            r.createObject(StringOnly.class);
+            r.createObject(StringAndInt.class);
+        });
+        realm.close();
+
+        RealmConfiguration config2 = configFactory.createConfigurationBuilder()
+                .name("deleteAllTest.realm")
+                .schema(StringOnly.class)
+                .build();
+
+        realm = Realm.getInstance(config2);
+        realm.beginTransaction();
+        realm.deleteAll();
+        realm.commitTransaction();
+        assertTrue(realm.isEmpty());
+        realm.close();
+
+        // deleteAll() will only delete tables part of the schema, so reopening with the old
+        // should reveal the old data
+        realm = Realm.getInstance(config1);
+        assertFalse(realm.isEmpty());
+        assertEquals(1, realm.where(StringAndInt.class).count());
+    }
+
+
     @Test
     public void waitForChange_emptyDataChange() throws InterruptedException {
         final CountDownLatch bgRealmOpened = new CountDownLatch(1);
diff --git a/realm/realm-library/src/main/java/io/realm/BaseRealm.java b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
index 885ba03f55..2ec27f65bd 100644
--- a/realm/realm-library/src/main/java/io/realm/BaseRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
@@ -589,10 +589,7 @@ public boolean isClosed() {
      *
      * @return {@code true} if empty, @{code false} otherwise.
      */
-    public boolean isEmpty() {
-        checkIfValid();
-        return sharedRealm.isEmpty();
-    }
+    abstract public boolean isEmpty();
 
     /**
      * Returns the schema for this Realm.
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index c8e164bc64..92d6e12c1f 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -295,6 +295,15 @@ static DynamicRealm createInstance(OsSharedRealm sharedRealm) {
         return configuration.getRxFactory().from(this);
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean isEmpty() {
+        checkIfValid();
+        return sharedRealm.isEmpty();
+    }
+
 // FIXME: Depends on a typed schema. Find a work-around
 //    /**
 //     * {@inheritDoc}
diff --git a/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java b/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java
index 7740f4899e..35ca6cc8a6 100644
--- a/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java
@@ -16,7 +16,11 @@
 
 package io.realm;
 
+import java.util.LinkedHashSet;
+import java.util.Set;
+
 import io.realm.internal.ColumnIndices;
+import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.Table;
 
 /**
@@ -43,6 +47,20 @@ public RealmObjectSchema get(String className) {
         return new ImmutableRealmObjectSchema(realm, this, table, getColumnInfo(className));
     }
 
+    @Override
+    public Set<RealmObjectSchema> getAll() {
+        // Only return schema objects for classes defined by the schema in the RealmConfiguration
+        RealmProxyMediator schemaMediator = realm.getConfiguration().getSchemaMediator();
+        Set<Class<? extends RealmModel>> classes = schemaMediator.getModelClasses();
+        Set<RealmObjectSchema> schemas = new LinkedHashSet<>(classes.size());
+        for (Class<? extends RealmModel> clazz : classes) {
+            String className = schemaMediator.getSimpleClassName(clazz);
+            RealmObjectSchema objectSchema = get(className);
+            schemas.add(objectSchema);
+        }
+        return schemas;
+    }
+
     @Override
     public RealmObjectSchema create(String className) {
         throw new UnsupportedOperationException(SCHEMA_IMMUTABLE_EXCEPTION_MSG);
diff --git a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
index 83c0c72ec0..5506207945 100644
--- a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
@@ -16,7 +16,9 @@
 
 package io.realm;
 
+import java.util.LinkedHashSet;
 import java.util.Locale;
+import java.util.Set;
 
 import io.realm.internal.OsObjectStore;
 import io.realm.internal.Table;
@@ -42,6 +44,20 @@ public RealmObjectSchema get(String className) {
         return new MutableRealmObjectSchema(realm, this, table);
     }
 
+    @Override
+    public Set<RealmObjectSchema> getAll() {
+        // Return all tables prefixed with class__ in the Realm file
+        int tableCount = (int) realm.getSharedRealm().size();
+        Set<RealmObjectSchema> schemas = new LinkedHashSet<>(tableCount);
+        for (int i = 0; i < tableCount; i++) {
+            RealmObjectSchema objectSchema = get(Table.getClassNameForTable(realm.getSharedRealm().getTableName(i)));
+            if (objectSchema != null) {
+                schemas.add(objectSchema);
+            }
+        }
+        return schemas;
+    }
+
     @Override
     public RealmObjectSchema create(String className) {
         // Adding a class is always permitted.
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 30125037cd..d6f25dbc53 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -201,6 +201,20 @@ private static OsSchemaInfo createExpectedSchemaInfo(RealmProxyMediator mediator
         return configuration.getRxFactory().from(this);
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean isEmpty() {
+        checkIfValid();
+        for (RealmObjectSchema clazz : schema.getAll()) {
+            if (!clazz.getClassName().startsWith("__") && clazz.getTable().size() > 0) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     /**
      * Returns the schema for this Realm. The schema is immutable.
      * Any attempt to modify it will result in an {@link UnsupportedOperationException}.
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index bd789c569f..6f0045c270 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -25,6 +25,7 @@
 
 import io.realm.internal.ColumnIndices;
 import io.realm.internal.ColumnInfo;
+import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.Table;
 import io.realm.internal.Util;
 import io.realm.internal.util.Pair;
@@ -81,17 +82,7 @@
      *
      * @return the set of all classes in this Realm or no RealmObject classes can be saved in the Realm.
      */
-    public Set<RealmObjectSchema> getAll() {
-        int tableCount = (int) realm.getSharedRealm().size();
-        Set<RealmObjectSchema> schemas = new LinkedHashSet<>(tableCount);
-        for (int i = 0; i < tableCount; i++) {
-            RealmObjectSchema objectSchema = get(Table.getClassNameForTable(realm.getSharedRealm().getTableName(i)));
-            if (objectSchema != null) {
-                schemas.add(objectSchema);
-            }
-        }
-        return schemas;
-    }
+    public abstract Set<RealmObjectSchema> getAll();
 
     /**
      * Adds a new class to the Realm.
diff --git a/version.txt b/version.txt
index 0984c4c1ad..7daa13a179 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.4.0-SNAPSHOT
\ No newline at end of file
+5.4.0-SNAPSHOT
