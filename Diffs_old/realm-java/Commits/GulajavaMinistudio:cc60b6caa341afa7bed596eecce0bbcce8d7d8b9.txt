diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3aefb83c90..8a3f6ca335 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -13,6 +13,22 @@
 ### Credits
 
 
+## 3.4.1 (YYYY-MM-DD)
+
+### Breaking Changes
+
+### Deprecated
+
+### Enhancements
+
+### Bug Fixes
+
+### Internal
+
+* Removed `Table#Table()`, `Table#addEmptyRow()`, `Table#addEmptyRows()`, `Table#add(Object...)`, `Table#pivot(long,long,PivotType)` and `Table#createnative()`.
+
+
+
 ## 3.4.0 (2017-06-22)
 
 ### Breaking Changes
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index e2eaedd57d..bc16c86a53 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -1493,10 +1493,10 @@ private void addPrimaryKeyCheckIfNeeded(ClassMetaData metadata, boolean throwIfP
             writer.beginControlFlow("if (rowIndex == Table.NO_MATCH)");
             if (Utils.isString(metadata.getPrimaryKey())) {
                 writer.emitStatement(
-                        "rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue)");
+                        "rowIndex = OsObject.createRowWithPrimaryKey(table, primaryKeyValue)");
             } else {
                 writer.emitStatement(
-                        "rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, ((%s) object).%s())",
+                        "rowIndex = OsObject.createRowWithPrimaryKey(table, ((%s) object).%s())",
                         interfaceName, primaryKeyGetter);
             }
 
@@ -1508,7 +1508,7 @@ private void addPrimaryKeyCheckIfNeeded(ClassMetaData metadata, boolean throwIfP
             writer.endControlFlow();
             writer.emitStatement("cache.put(object, rowIndex)");
         } else {
-            writer.emitStatement("long rowIndex = OsObject.createRow(realm.sharedRealm, table)");
+            writer.emitStatement("long rowIndex = OsObject.createRow(table)");
             writer.emitStatement("cache.put(object, rowIndex)");
         }
     }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index 2840c67b83..7e51275132 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -30,7 +30,7 @@
 
 @SuppressWarnings("all")
 public class AllTypesRealmProxy extends some.test.AllTypes
-    implements RealmObjectProxy, AllTypesRealmProxyInterface {
+        implements RealmObjectProxy, AllTypesRealmProxyInterface {
 
     static final class AllTypesColumnInfo extends ColumnInfo {
         long columnStringIndex;
@@ -578,7 +578,7 @@ public static String getTableName() {
 
     @SuppressWarnings("cast")
     public static some.test.AllTypes createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
-        throws JSONException {
+            throws JSONException {
         final List<String> excludeFields = new ArrayList<String>(2);
         some.test.AllTypes obj = null;
         if (update) {
@@ -690,7 +690,7 @@ public static String getTableName() {
     @SuppressWarnings("cast")
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public static some.test.AllTypes createUsingJsonStream(Realm realm, JsonReader reader)
-        throws IOException {
+            throws IOException {
         boolean jsonHasPrimaryKey = false;
         some.test.AllTypes obj = new some.test.AllTypes();
         reader.beginObject();
@@ -895,7 +895,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
         }
         if (rowIndex == Table.NO_MATCH) {
-            rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
+            rowIndex = OsObject.createRowWithPrimaryKey(table, primaryKeyValue);
         } else {
             Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
         }
@@ -960,7 +960,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
             }
             if (rowIndex == Table.NO_MATCH) {
-                rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
+                rowIndex = OsObject.createRowWithPrimaryKey(table, primaryKeyValue);
             } else {
                 Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
             }
@@ -1017,7 +1017,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
             rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
         }
         if (rowIndex == Table.NO_MATCH) {
-            rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
+            rowIndex = OsObject.createRowWithPrimaryKey(table, primaryKeyValue);
         }
         cache.put(object, rowIndex);
         Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
@@ -1087,7 +1087,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
             }
             if (rowIndex == Table.NO_MATCH) {
-                rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
+                rowIndex = OsObject.createRowWithPrimaryKey(table, primaryKeyValue);
             }
             cache.put(object, rowIndex);
             Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index b1d9ba35ec..04b7de7941 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -29,7 +29,7 @@
 
 @SuppressWarnings("all")
 public class BooleansRealmProxy extends some.test.Booleans
-    implements RealmObjectProxy, BooleansRealmProxyInterface {
+        implements RealmObjectProxy, BooleansRealmProxyInterface {
 
     static final class BooleansColumnInfo extends ColumnInfo {
         long doneIndex;
@@ -273,7 +273,7 @@ public static String getTableName() {
 
     @SuppressWarnings("cast")
     public static some.test.Booleans createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
-        throws JSONException {
+            throws JSONException {
         final List<String> excludeFields = Collections.<String> emptyList();
         some.test.Booleans obj = realm.createObjectInternal(some.test.Booleans.class, true, excludeFields);
         if (json.has("done")) {
@@ -310,7 +310,7 @@ public static String getTableName() {
     @SuppressWarnings("cast")
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public static some.test.Booleans createUsingJsonStream(Realm realm, JsonReader reader)
-        throws IOException {
+            throws IOException {
         some.test.Booleans obj = new some.test.Booleans();
         reader.beginObject();
         while (reader.hasNext()) {
@@ -396,7 +396,7 @@ public static long insert(Realm realm, some.test.Booleans object, Map<RealmModel
         Table table = realm.getTable(some.test.Booleans.class);
         long tableNativePtr = table.getNativePtr();
         BooleansColumnInfo columnInfo = (BooleansColumnInfo) realm.schema.getColumnInfo(some.test.Booleans.class);
-        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+        long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
@@ -419,7 +419,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+            long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
             Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
             Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
@@ -435,7 +435,7 @@ public static long insertOrUpdate(Realm realm, some.test.Booleans object, Map<Re
         Table table = realm.getTable(some.test.Booleans.class);
         long tableNativePtr = table.getNativePtr();
         BooleansColumnInfo columnInfo = (BooleansColumnInfo) realm.schema.getColumnInfo(some.test.Booleans.class);
-        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+        long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
@@ -458,7 +458,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+            long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
             Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
             Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 41ebb879e5..c90fd7dfcc 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -29,7 +29,7 @@
 
 @SuppressWarnings("all")
 public class NullTypesRealmProxy extends some.test.NullTypes
-    implements RealmObjectProxy, NullTypesRealmProxyInterface {
+        implements RealmObjectProxy, NullTypesRealmProxyInterface {
 
     static final class NullTypesColumnInfo extends ColumnInfo {
         long fieldStringNotNullIndex;
@@ -1085,7 +1085,7 @@ public static String getTableName() {
 
     @SuppressWarnings("cast")
     public static some.test.NullTypes createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
-        throws JSONException {
+            throws JSONException {
         final List<String> excludeFields = new ArrayList<String>(1);
         if (json.has("fieldObjectNull")) {
             excludeFields.add("fieldObjectNull");
@@ -1255,7 +1255,7 @@ public static String getTableName() {
     @SuppressWarnings("cast")
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public static some.test.NullTypes createUsingJsonStream(Realm realm, JsonReader reader)
-        throws IOException {
+            throws IOException {
         some.test.NullTypes obj = new some.test.NullTypes();
         reader.beginObject();
         while (reader.hasNext()) {
@@ -1499,7 +1499,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
         Table table = realm.getTable(some.test.NullTypes.class);
         long tableNativePtr = table.getNativePtr();
         NullTypesColumnInfo columnInfo = (NullTypesColumnInfo) realm.schema.getColumnInfo(some.test.NullTypes.class);
-        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+        long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
         String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
         if (realmGet$fieldStringNotNull != null) {
@@ -1607,7 +1607,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+            long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
             String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
             if (realmGet$fieldStringNotNull != null) {
@@ -1708,7 +1708,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
         Table table = realm.getTable(some.test.NullTypes.class);
         long tableNativePtr = table.getNativePtr();
         NullTypesColumnInfo columnInfo = (NullTypesColumnInfo) realm.schema.getColumnInfo(some.test.NullTypes.class);
-        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+        long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
         String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
         if (realmGet$fieldStringNotNull != null) {
@@ -1858,7 +1858,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+            long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
             String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
             if (realmGet$fieldStringNotNull != null) {
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index 543b16baee..f8ff4c3b6f 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -29,7 +29,7 @@
 
 @SuppressWarnings("all")
 public class SimpleRealmProxy extends some.test.Simple
-    implements RealmObjectProxy, SimpleRealmProxyInterface {
+        implements RealmObjectProxy, SimpleRealmProxyInterface {
 
     static final class SimpleColumnInfo extends ColumnInfo {
         long nameIndex;
@@ -209,7 +209,7 @@ public static String getTableName() {
 
     @SuppressWarnings("cast")
     public static some.test.Simple createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
-        throws JSONException {
+            throws JSONException {
         final List<String> excludeFields = Collections.<String> emptyList();
         some.test.Simple obj = realm.createObjectInternal(some.test.Simple.class, true, excludeFields);
         if (json.has("name")) {
@@ -232,7 +232,7 @@ public static String getTableName() {
     @SuppressWarnings("cast")
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public static some.test.Simple createUsingJsonStream(Realm realm, JsonReader reader)
-        throws IOException {
+            throws IOException {
         some.test.Simple obj = new some.test.Simple();
         reader.beginObject();
         while (reader.hasNext()) {
@@ -302,7 +302,7 @@ public static long insert(Realm realm, some.test.Simple object, Map<RealmModel,L
         Table table = realm.getTable(some.test.Simple.class);
         long tableNativePtr = table.getNativePtr();
         SimpleColumnInfo columnInfo = (SimpleColumnInfo) realm.schema.getColumnInfo(some.test.Simple.class);
-        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+        long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
         String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
         if (realmGet$name != null) {
@@ -326,7 +326,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+            long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
             String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
             if (realmGet$name != null) {
@@ -343,7 +343,7 @@ public static long insertOrUpdate(Realm realm, some.test.Simple object, Map<Real
         Table table = realm.getTable(some.test.Simple.class);
         long tableNativePtr = table.getNativePtr();
         SimpleColumnInfo columnInfo = (SimpleColumnInfo) realm.schema.getColumnInfo(some.test.Simple.class);
-        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+        long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
         String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
         if (realmGet$name != null) {
@@ -369,7 +369,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            long rowIndex = OsObject.createRow(realm.sharedRealm, table);
+            long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
             String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
             if (realmGet$name != null) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
index b92522931e..469de59c00 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
@@ -33,6 +33,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
+import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
@@ -53,8 +54,9 @@
 import io.realm.entities.PrimaryKeyAsBoxedLong;
 import io.realm.entities.PrimaryKeyAsBoxedShort;
 import io.realm.entities.PrimaryKeyAsString;
-import io.realm.entities.StringOnly;
 import io.realm.internal.Collection;
+import io.realm.internal.OsObject;
+import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.async.RealmThreadPoolExecutor;
 import io.realm.log.LogLevel;
@@ -106,22 +108,185 @@ public static RealmFieldType getColumnType(Object o) {
     }
 
     /**
-     * Creates an empty table with 1 column of all our supported column types, currently 9 columns.
+     * Appends the specified row to the end of the table. For internal testing usage only.
      *
-     * @return
+     * @param table the table where the object to be added.
+     * @param values values.
+     * @return the row index of the appended row.
+     * @deprecated Remove this functions since it doesn't seem to be useful. And this function does deal with tables
+     * with primary key defined well. Primary key has to be set with `setXxxUnique` as the first thing to do after row
+     * added.
      */
-    public static Table getTableWithAllColumnTypes() {
-        Table t = new Table();
-
-        t.addColumn(RealmFieldType.BINARY, "binary");
-        t.addColumn(RealmFieldType.BOOLEAN, "boolean");
-        t.addColumn(RealmFieldType.DATE, "date");
-        t.addColumn(RealmFieldType.DOUBLE, "double");
-        t.addColumn(RealmFieldType.FLOAT, "float");
-        t.addColumn(RealmFieldType.INTEGER, "long");
-        t.addColumn(RealmFieldType.STRING, "string");
-
-        return t;
+    public static long addRowWithValues(Table table, Object... values) {
+        long rowIndex = OsObject.createRow(table);
+
+        // Checks values types.
+        int columns = (int) table.getColumnCount();
+        if (columns != values.length) {
+            throw new IllegalArgumentException("The number of value parameters (" +
+                    String.valueOf(values.length) +
+                    ") does not match the number of columns in the table (" +
+                    String.valueOf(columns) + ").");
+        }
+        RealmFieldType[] colTypes = new RealmFieldType[columns];
+        for (int columnIndex = 0; columnIndex < columns; columnIndex++) {
+            Object value = values[columnIndex];
+            RealmFieldType colType = table.getColumnType(columnIndex);
+            colTypes[columnIndex] = colType;
+            if (!colType.isValid(value)) {
+                // String representation of the provided value type.
+                String providedType;
+                if (value == null) {
+                    providedType = "null";
+                } else {
+                    providedType = value.getClass().toString();
+                }
+
+                throw new IllegalArgumentException("Invalid argument no " + String.valueOf(1 + columnIndex) +
+                        ". Expected a value compatible with column type " + colType + ", but got " + providedType + ".");
+            }
+        }
+
+        // Inserts values.
+        for (long columnIndex = 0; columnIndex < columns; columnIndex++) {
+            Object value = values[(int) columnIndex];
+            switch (colTypes[(int) columnIndex]) {
+                case BOOLEAN:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        table.setBoolean(columnIndex, rowIndex, (Boolean) value, false);
+                    }
+                    break;
+                case INTEGER:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        long longValue = ((Number) value).longValue();
+                        table.setLong(columnIndex, rowIndex, longValue, false);
+                    }
+                    break;
+                case FLOAT:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        table.setFloat(columnIndex, rowIndex, (Float) value, false);
+                    }
+                    break;
+                case DOUBLE:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        table.setDouble(columnIndex, rowIndex, (Double) value, false);
+                    }
+                    break;
+                case STRING:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        table.setString(columnIndex, rowIndex, (String) value, false);
+                    }
+                    break;
+                case DATE:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        table.setDate(columnIndex, rowIndex, (Date) value, false);
+                    }
+                    break;
+                case BINARY:
+                    if (value == null) {
+                        table.setNull(columnIndex, rowIndex, false);
+                    } else {
+                        table.setBinaryByteArray(columnIndex, rowIndex, (byte[]) value, false);
+                    }
+                    break;
+                case UNSUPPORTED_MIXED:
+                case UNSUPPORTED_TABLE:
+                default:
+                    throw new RuntimeException("Unexpected columnType: " + String.valueOf(colTypes[(int) columnIndex]));
+            }
+        }
+        return rowIndex;
+    }
+
+    /**
+     * Creates an empty table whose name is "temp" with 1 column of all our supported column types, currently 7 columns.
+     *
+     * @param sharedRealm A {@link SharedRealm} where the table is created.
+     * @return created table.
+     */
+    public static Table createTableWithAllColumnTypes(SharedRealm sharedRealm) {
+        return createTableWithAllColumnTypes(sharedRealm, "temp");
+    }
+
+    /**
+     * Creates an empty table with 1 column of all our supported column types, currently 7 columns.
+     *
+     * @param sharedRealm A {@link SharedRealm} where the table is created.
+     * @param name name of the table.
+     * @return created table.
+     */
+    @SuppressWarnings("WeakerAccess")
+    public static Table createTableWithAllColumnTypes(SharedRealm sharedRealm,
+            @SuppressWarnings("SameParameterValue") String name) {
+        boolean wasInTransaction = sharedRealm.isInTransaction();
+        if (!wasInTransaction) {
+            sharedRealm.beginTransaction();
+        }
+        try {
+            Table t = sharedRealm.createTable(name);
+
+            t.addColumn(RealmFieldType.BINARY, "binary");
+            t.addColumn(RealmFieldType.BOOLEAN, "boolean");
+            t.addColumn(RealmFieldType.DATE, "date");
+            t.addColumn(RealmFieldType.DOUBLE, "double");
+            t.addColumn(RealmFieldType.FLOAT, "float");
+            t.addColumn(RealmFieldType.INTEGER, "long");
+            t.addColumn(RealmFieldType.STRING, "string");
+
+            return t;
+        } catch (RuntimeException e) {
+            if (!wasInTransaction) {
+                sharedRealm.cancelTransaction();
+            }
+            throw e;
+        } finally {
+            if (!wasInTransaction && sharedRealm.isInTransaction()) {
+                sharedRealm.commitTransaction();
+            }
+        }
+    }
+
+    public static Table createTable(SharedRealm sharedRealm, String name) {
+        return createTable(sharedRealm, name, null);
+    }
+
+    public interface AdditionalTableSetup {
+        void execute(Table table);
+    }
+
+    public static Table createTable(SharedRealm sharedRealm, String name, AdditionalTableSetup additionalSetup) {
+        boolean wasInTransaction = sharedRealm.isInTransaction();
+        if (!wasInTransaction) {
+            sharedRealm.beginTransaction();
+        }
+        try {
+            Table table = sharedRealm.createTable(name);
+            if (additionalSetup != null) {
+                additionalSetup.execute(table);
+            }
+            return table;
+        } catch (RuntimeException e) {
+            if (!wasInTransaction) {
+                sharedRealm.cancelTransaction();
+            }
+            throw e;
+        } finally {
+            if (!wasInTransaction && sharedRealm.isInTransaction()) {
+                sharedRealm.commitTransaction();
+            }
+        }
     }
 
     public static String streamToString(InputStream in) throws IOException {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
index 99e06fed58..673bff18d0 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
@@ -87,22 +87,22 @@ private void populateData() {
         table.addColumn(RealmFieldType.INTEGER, "age");
 
         // Add data to the table
-        long row = table.addEmptyRow();
+        long row = OsObject.createRow(table);
         table.setString(0, row, "John", false);
         table.setString(1, row, "Lee", false);
         table.setLong(2, row, 4, false);
 
-        row = table.addEmptyRow();
+        row = OsObject.createRow(table);
         table.setString(0, row, "John", false);
         table.setString(1, row, "Anderson", false);
         table.setLong(2, row, 3, false);
 
-        row = table.addEmptyRow();
+        row = OsObject.createRow(table);
         table.setString(0, row, "Erik", false);
         table.setString(1, row, "Lee", false);
         table.setLong(2, row, 1, false);
 
-        row = table.addEmptyRow();
+        row = OsObject.createRow(table);
         table.setString(0, row, "Henry", false);
         table.setString(1, row, "Anderson", false);
         table.setLong(2, row, 1, false);
@@ -126,7 +126,7 @@ public void run() {
     private void addRow(SharedRealm sharedRealm) {
         sharedRealm.beginTransaction();
         table = sharedRealm.getTable("test_table");
-        table.addEmptyRow();
+        OsObject.createRow(table);
         sharedRealm.commitTransaction();
     }
 
@@ -310,7 +310,7 @@ public void onChange(Collection element) {
             }
         });
         sharedRealm.beginTransaction();
-        table.addEmptyRow();
+        OsObject.createRow(table);
         sharedRealm.commitTransaction();
         sharedRealm.refresh();
         TestHelper.awaitOrFail(latch);
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java
index 1eaeee2ba7..74e66ff861 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java
@@ -20,11 +20,15 @@
 import android.support.test.runner.AndroidJUnit4;
 
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
+import io.realm.TestHelper;
+import io.realm.rule.TestRealmConfigurationFactory;
 
 import static junit.framework.TestCase.assertEquals;
 
@@ -32,14 +36,28 @@
 @RunWith(AndroidJUnit4.class)
 public class JNIColumnInfoTest {
 
-    Table table;
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    @SuppressWarnings("FieldCanBeLocal")
+    private SharedRealm sharedRealm;
+    private Table table;
 
     @Before
     public void setUp() {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
-        table = new Table();
-        table.addColumn(RealmFieldType.STRING, "firstName");
-        table.addColumn(RealmFieldType.STRING, "lastName");
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
+
+        table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.STRING, "firstName");
+                table.addColumn(RealmFieldType.STRING, "lastName");
+            }
+        });
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
index d77bf67ecd..6fa6a32ea9 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
@@ -19,7 +19,9 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.junit.After;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -28,8 +30,10 @@
 
 import io.realm.Case;
 import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
 import io.realm.TestHelper;
+import io.realm.rule.TestRealmConfigurationFactory;
 
 import static junit.framework.TestCase.assertEquals;
 import static org.junit.Assert.fail;
@@ -38,6 +42,12 @@
 @RunWith(AndroidJUnit4.class)
 public class JNIQueryTest {
 
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    private SharedRealm sharedRealm;
     private Table table;
     private final long[] oneNullTable = new long[]{NativeObject.NULLPTR};
 
@@ -45,19 +55,33 @@
     @Before
     public void setUp() throws Exception {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
+    }
+
+    @After
+    public void tearDown() {
+        if (sharedRealm != null && !sharedRealm.isClosed()) {
+            sharedRealm.close();
+        }
     }
 
     private void init() {
-        table = new Table();
-        table.addColumn(RealmFieldType.INTEGER, "number");
-        table.addColumn(RealmFieldType.STRING, "name");
-
-        table.add(10, "A");
-        table.add(11, "B");
-        table.add(12, "C");
-        table.add(13, "B");
-        table.add(14, "D");
-        table.add(16, "D");
+        table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.INTEGER, "number");
+                table.addColumn(RealmFieldType.STRING, "name");
+
+                TestHelper.addRowWithValues(table, 10, "A");
+                TestHelper.addRowWithValues(table, 11, "B");
+                TestHelper.addRowWithValues(table, 12, "C");
+                TestHelper.addRowWithValues(table, 13, "B");
+                TestHelper.addRowWithValues(table, 14, "D");
+                TestHelper.addRowWithValues(table, 16, "D");
+            }
+        });
+
         assertEquals(6, table.size());
     }
 
@@ -112,7 +136,7 @@ public void nonCompleteQuery() {
 
     @Test
     public void invalidColumnIndexEqualTo() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // Boolean
@@ -159,7 +183,7 @@ public void invalidColumnIndexEqualTo() {
 
     @Test
     public void invalidColumnIndexNotEqualTo() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
 
@@ -202,7 +226,7 @@ public void invalidColumnIndexNotEqualTo() {
 
     @Test
     public void invalidColumnIndexGreaterThan() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // Date
@@ -229,7 +253,7 @@ public void invalidColumnIndexGreaterThan() {
 
     @Test
     public void invalidColumnIndexGreaterThanOrEqual() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // Date
@@ -256,7 +280,7 @@ public void invalidColumnIndexGreaterThanOrEqual() {
 
     @Test
     public void invalidColumnIndexLessThan() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // Date
@@ -283,7 +307,7 @@ public void invalidColumnIndexLessThan() {
 
     @Test
     public void invalidColumnIndexLessThanOrEqual() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // Date
@@ -310,7 +334,7 @@ public void invalidColumnIndexLessThanOrEqual() {
 
     @Test
     public void invalidColumnIndexBetween() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // Date
@@ -337,7 +361,7 @@ public void invalidColumnIndexBetween() {
 
     @Test
     public void invalidColumnIndexContains() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         TableQuery query = table.where();
 
         // String
@@ -359,9 +383,13 @@ public void invalidColumnIndexContains() {
     @SuppressWarnings("ConstantConditions")
     @Test
     public void nullInputQuery() {
-        Table t = new Table();
-        t.addColumn(RealmFieldType.DATE, "dateCol");
-        t.addColumn(RealmFieldType.STRING, "stringCol");
+        Table t = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                t.addColumn(RealmFieldType.DATE, "dateCol");
+                t.addColumn(RealmFieldType.STRING, "stringCol");
+            }
+        });
 
         Date nullDate = null;
         try { t.where().equalTo(new long[]{0}, oneNullTable, nullDate);               fail("Date is null"); } catch (IllegalArgumentException ignore) { }
@@ -392,19 +420,22 @@ public void nullInputQuery() {
     @Test
     public void shouldFind() {
         // Creates a table.
-        Table table = new Table();
-
-        table.addColumn(RealmFieldType.STRING, "username");
-        table.addColumn(RealmFieldType.INTEGER, "score");
-        table.addColumn(RealmFieldType.BOOLEAN, "completed");
-
-        // Inserts some values.
-        table.add("Arnold", 420, false);    // 0
-        table.add("Jane", 770, false);      // 1 *
-        table.add("Erik", 600, false);      // 2
-        table.add("Henry", 601, false);     // 3 *
-        table.add("Bill", 564, true);       // 4
-        table.add("Janet", 875, false);     // 5 *
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.STRING, "username");
+                table.addColumn(RealmFieldType.INTEGER, "score");
+                table.addColumn(RealmFieldType.BOOLEAN, "completed");
+
+                // Inserts some values.
+                TestHelper.addRowWithValues(table, "Arnold", 420, false);    // 0
+                TestHelper.addRowWithValues(table, "Jane", 770, false);      // 1 *
+                TestHelper.addRowWithValues(table, "Erik", 600, false);      // 2
+                TestHelper.addRowWithValues(table, "Henry", 601, false);     // 3 *
+                TestHelper.addRowWithValues(table, "Bill", 564, true);       // 4
+                TestHelper.addRowWithValues(table, "Janet", 875, false);     // 5 *
+            }
+        });
 
         TableQuery query = table.where().greaterThan(new long[]{1}, oneNullTable, 600);
 
@@ -434,9 +465,11 @@ public void shouldFind() {
 
     @Test
     public void queryTestForNoMatches() {
-        Table t = TestHelper.getTableWithAllColumnTypes();
+        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
 
-        t.add(new byte[]{1,2,3}, true, new Date(1384423149761L), 4.5d, 5.7f, 100, "string");
+        sharedRealm.beginTransaction();
+        TestHelper.addRowWithValues(t, new byte[]{1,2,3}, true, new Date(1384423149761L), 4.5d, 5.7f, 100, "string");
+        sharedRealm.commitTransaction();
 
         TableQuery q = t.where().greaterThan(new long[]{5}, oneNullTable, 1000); // No matches
 
@@ -447,7 +480,7 @@ public void queryTestForNoMatches() {
     @Test
     public void queryWithWrongDataType() {
 
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
 
         // Queries the table.
         TableQuery query = table.where();
@@ -528,7 +561,7 @@ public void queryWithWrongDataType() {
 
     @Test
     public void columnIndexOutOfBounds() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
+        Table table = TestHelper.createTableWithAllColumnTypes(sharedRealm);
 
         // Queries the table.
         TableQuery query = table.where();
@@ -630,12 +663,16 @@ public void columnIndexOutOfBounds() {
     @Test
     public void maximumDate() {
 
-        Table table = new Table();
-        table.addColumn(RealmFieldType.DATE, "date");
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.DATE, "date");
 
-        table.add(new Date(0));
-        table.add(new Date(10000));
-        table.add(new Date(1000));
+                TestHelper.addRowWithValues(table, new Date(0));
+                TestHelper.addRowWithValues(table, new Date(10000));
+                TestHelper.addRowWithValues(table, new Date(1000));
+            }
+        });
 
         assertEquals(new Date(10000), table.where().maximumDate(0));
     }
@@ -643,12 +680,16 @@ public void maximumDate() {
     @Test
     public void minimumDate() {
 
-        Table table = new Table();
-        table.addColumn(RealmFieldType.DATE, "date");
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.DATE, "date");
 
-        table.add(new Date(10000));
-        table.add(new Date(0));
-        table.add(new Date(1000));
+                TestHelper.addRowWithValues(table, new Date(10000));
+                TestHelper.addRowWithValues(table, new Date(0));
+                TestHelper.addRowWithValues(table, new Date(1000));
+            }
+        });
 
         assertEquals(new Date(0), table.where().minimumDate(0));
     }
@@ -656,21 +697,25 @@ public void minimumDate() {
     @Test
     public void dateQuery() throws Exception {
 
-        Table table = new Table();
-        table.addColumn(RealmFieldType.DATE, "date");
-
         final Date past = new Date(TimeUnit.SECONDS.toMillis(Integer.MIN_VALUE - 100L));
         final Date future = new Date(TimeUnit.SECONDS.toMillis(Integer.MAX_VALUE + 1L));
         final Date distantPast = new Date(Long.MIN_VALUE);
         final Date distantFuture = new Date(Long.MAX_VALUE);
 
-        table.add(new Date(10000));
-        table.add(new Date(0));
-        table.add(new Date(1000));
-        table.add(future);
-        table.add(distantFuture);
-        table.add(past);
-        table.add(distantPast);
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.DATE, "date");
+
+                TestHelper.addRowWithValues(table, new Date(10000));
+                TestHelper.addRowWithValues(table, new Date(0));
+                TestHelper.addRowWithValues(table, new Date(1000));
+                TestHelper.addRowWithValues(table, future);
+                TestHelper.addRowWithValues(table, distantFuture);
+                TestHelper.addRowWithValues(table, past);
+                TestHelper.addRowWithValues(table, distantPast);
+            }
+        });
 
         assertEquals(1L, table.where().equalTo(new long[]{0}, oneNullTable, distantPast).count());
         assertEquals(6L, table.where().notEqualTo(new long[]{0}, oneNullTable, distantPast).count());
@@ -755,18 +800,22 @@ public void dateQuery() throws Exception {
     @Test
     public void byteArrayQuery() throws Exception {
 
-        Table table = new Table();
-        table.addColumn(RealmFieldType.BINARY, "binary");
-
         final byte[] binary1 = new byte[] {0x01, 0x02, 0x03, 0x04};
         final byte[] binary2 = new byte[] {0x05, 0x02, 0x03, 0x08};
         final byte[] binary3 = new byte[] {0x09, 0x0a, 0x0b, 0x04};
         final byte[] binary4 = new byte[] {0x05, 0x0a, 0x0b, 0x10};
 
-        table.add((Object) binary1);
-        table.add((Object) binary2);
-        table.add((Object) binary3);
-        table.add((Object) binary4);
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.BINARY, "binary");
+
+                TestHelper.addRowWithValues(table, (Object) binary1);
+                TestHelper.addRowWithValues(table, (Object) binary2);
+                TestHelper.addRowWithValues(table, (Object) binary3);
+                TestHelper.addRowWithValues(table, (Object) binary4);
+            }
+        });
 
         // Equal to
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
index 12258cb24e..93bf8332ce 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
@@ -16,15 +16,23 @@
 
 package io.realm.internal;
 
+import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.test.MoreAsserts;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.util.Date;
 
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
+import io.realm.TestHelper;
+import io.realm.rule.TestRealmConfigurationFactory;
 
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNull;
@@ -35,24 +43,51 @@
 @RunWith(AndroidJUnit4.class)
 public class JNIRowTest {
 
-    @Test
-    public void nonNullValues() {
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
 
-        Table table = new Table();
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    private SharedRealm sharedRealm;
 
-        table.addColumn(RealmFieldType.STRING, "string");
-        table.addColumn(RealmFieldType.INTEGER, "integer");
-        table.addColumn(RealmFieldType.FLOAT, "float");
-        table.addColumn(RealmFieldType.DOUBLE, "double");
-        table.addColumn(RealmFieldType.BOOLEAN, "boolean");
-        table.addColumn(RealmFieldType.DATE, "date");
-        table.addColumn(RealmFieldType.BINARY, "binary");
+    @Before
+    public void setUp() throws Exception {
+        Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
 
+        sharedRealm.beginTransaction();
+    }
 
-        byte[] data = new byte[2];
+    @After
+    public void tearDown() {
+        if (sharedRealm != null && sharedRealm.isInTransaction()) {
+            sharedRealm.cancelTransaction();
+        }
 
-        table.add("abc", 3, (float) 1.2, 1.3, true, new Date(0), data);
+        if (sharedRealm != null && !sharedRealm.isClosed()) {
+            sharedRealm.close();
+        }
+    }
 
+    @Test
+    public void nonNullValues() {
+        final byte[] data = new byte[2];
+
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.STRING, "string");
+                table.addColumn(RealmFieldType.INTEGER, "integer");
+                table.addColumn(RealmFieldType.FLOAT, "float");
+                table.addColumn(RealmFieldType.DOUBLE, "double");
+                table.addColumn(RealmFieldType.BOOLEAN, "boolean");
+                table.addColumn(RealmFieldType.DATE, "date");
+                table.addColumn(RealmFieldType.BINARY, "binary");
+
+                TestHelper.addRowWithValues(table, "abc", 3, (float) 1.2, 1.3, true, new Date(0), data);
+            }
+        });
 
         UncheckedRow row = table.getUncheckedRow(0);
 
@@ -64,7 +99,6 @@ public void nonNullValues() {
         assertEquals(new Date(0), row.getDate(5));
         MoreAsserts.assertEquals(data, row.getBinaryByteArray(6));
 
-
         row.setString(0, "a");
         row.setLong(1, 1);
         row.setFloat(2, (float) 8.8);
@@ -87,8 +121,7 @@ public void nonNullValues() {
     @Test
     public void nullValues() {
 
-        Table table = new Table();
-
+        Table table = TestHelper.createTable(sharedRealm, "temp");
         long colStringIndex = table.addColumn(RealmFieldType.STRING, "string", true);
         long colIntIndex = table.addColumn(RealmFieldType.INTEGER, "integer", true);
         table.addColumn(RealmFieldType.FLOAT, "float");
@@ -96,8 +129,8 @@ public void nullValues() {
         long colBoolIndex = table.addColumn(RealmFieldType.BOOLEAN, "boolean", true);
         table.addColumn(RealmFieldType.DATE, "date");
         table.addColumn(RealmFieldType.BINARY, "binary");
+        long rowIndex = OsObject.createRow(table);
 
-        long rowIndex = table.addEmptyRow();
         UncheckedRow row = table.getUncheckedRow(rowIndex);
 
         row.setString(colStringIndex, "test");
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNISortedLongTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNISortedLongTest.java
index 4145a51749..fdfaa4cdf9 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNISortedLongTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNISortedLongTest.java
@@ -19,33 +19,64 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
+import io.realm.TestHelper;
+import io.realm.rule.TestRealmConfigurationFactory;
 
 import static org.junit.Assert.assertEquals;
 
 
 @RunWith(AndroidJUnit4.class)
 public class JNISortedLongTest {
-    Table table;
 
-    void init() {
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    private SharedRealm sharedRealm;
+    private Table table;
+
+    @Before
+    public void setUp() throws Exception {
+        Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
+    }
+
+    @After
+    public void tearDown() {
+        if (sharedRealm != null && !sharedRealm.isClosed()) {
+            sharedRealm.close();
+        }
+    }
+
+    private void init() {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
-        table = new Table();
-        table.addColumn(RealmFieldType.INTEGER, "number");
-        table.addColumn(RealmFieldType.STRING, "name");
-
-        table.add(1, "A");
-        table.add(10, "B");
-        table.add(20, "C");
-        table.add(30, "B");
-        table.add(40, "D");
-        table.add(50, "D");
-        table.add(60, "D");
-        table.add(60, "D");
+        table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.INTEGER, "number");
+                table.addColumn(RealmFieldType.STRING, "name");
+
+                TestHelper.addRowWithValues(table, 1, "A");
+                TestHelper.addRowWithValues(table, 10, "B");
+                TestHelper.addRowWithValues(table, 20, "C");
+                TestHelper.addRowWithValues(table, 30, "B");
+                TestHelper.addRowWithValues(table, 40, "D");
+                TestHelper.addRowWithValues(table, 50, "D");
+                TestHelper.addRowWithValues(table, 60, "D");
+                TestHelper.addRowWithValues(table, 60, "D");
+            }
+        });
 
         assertEquals(8, table.size());
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
index 32fce953ba..c98458c169 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
@@ -16,6 +16,11 @@
 
 package io.realm.internal;
 
+import android.support.test.InstrumentationRegistry;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -26,8 +31,10 @@
 import java.util.Date;
 import java.util.List;
 
-import io.realm.RealmFieldType;
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.TestHelper;
+import io.realm.rule.TestRealmConfigurationFactory;
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -36,8 +43,29 @@
 @RunWith(Parameterized.class)
 public class JNITableInsertTest {
 
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    private SharedRealm sharedRealm;
+
     private List<Object> value = new ArrayList<>();
 
+    @Before
+    public void setUp() throws Exception {
+        Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
+    }
+
+    @After
+    public void tearDown() {
+        if (sharedRealm != null && !sharedRealm.isClosed()) {
+            sharedRealm.close();
+        }
+    }
+
     @Parameterized.Parameters
     public static Collection<Object[]> parameters() {
         List<Object> value = new ArrayList<>();
@@ -58,46 +86,31 @@ public JNITableInsertTest(List<Object> value) {
         this.value = value;
     }
 
-    @Test
-    public void testShouldThrowExceptionWhenColumnNameIsTooLong() {
-
-        Table table = new Table();
-        try {
-            table.addColumn(RealmFieldType.STRING, "THIS STRING HAS 64 CHARACTERS, "
-                    + "LONGER THAN THE MAX 63 CHARACTERS");
-            fail("Too long name");
-        } catch (IllegalArgumentException ignore) {
-        }
-    }
-
-    @Test
-    public void testWhenColumnNameIsExactly63CharLong() {
-
-        Table table = new Table();
-        table.addColumn(RealmFieldType.STRING, "THIS STRING HAS 63 CHARACTERS PERFECT FOR THE MAX 63 CHARACTERS");
-    }
-
     @Test
     public void testGenericAddOnTable() {
         for (int i = 0; i < value.size(); i++) {
             for (int j = 0; j < value.size(); j++) {
-
-                Table t = new Table();
-
-                // If the objects matches no exception will be thrown.
-                if (value.get(i).getClass().equals(value.get(j).getClass())) {
-                    assertTrue(true);
-
-                } else {
-                    // Adds column.
-                    t.addColumn(TestHelper.getColumnType(value.get(j)), value.get(j).getClass().getSimpleName());
-                    // Adds value.
-                    try {
-                        t.add(value.get(i));
-                        fail("No matching type");
-                    } catch (IllegalArgumentException ignored) {
+                final Object valueI = value.get(i);
+                final Object valueJ = value.get(j);
+
+                TestHelper.createTable(sharedRealm, "temp" + i + "_" + j, new TestHelper.AdditionalTableSetup() {
+                    @Override
+                    public void execute(Table t) {
+                        // If the objects matches no exception will be thrown.
+                        if (valueI.getClass().equals(valueJ.getClass())) {
+                            assertTrue(true);
+                        } else {
+                            // Adds column.
+                            t.addColumn(TestHelper.getColumnType(valueJ), valueJ.getClass().getSimpleName());
+                            // Adds value.
+                            try {
+                                TestHelper.addRowWithValues(t, valueI);
+                                fail("No matching type");
+                            } catch (IllegalArgumentException ignored) {
+                            }
+                        }
                     }
-                }
+                });
             }
         }
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
index 296f22c764..fd893254ba 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Locale;
+import java.util.concurrent.atomic.AtomicLong;
 
 import io.realm.Realm;
 import io.realm.RealmConfiguration;
@@ -49,31 +50,39 @@
     @Rule
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
 
-    private Table t;
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    private SharedRealm sharedRealm;
 
     @Before
     public void setUp() {
-        t = new Table();
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
     }
 
     @Test
     public void tableToString() {
-        Table t = new Table();
-
-        t.addColumn(RealmFieldType.STRING, "stringCol");
-        t.addColumn(RealmFieldType.INTEGER, "intCol");
-        t.addColumn(RealmFieldType.BOOLEAN, "boolCol");
-
-        t.add("s1", 1, true);
-        t.add("s2", 2, false);
+        Table t = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                t.addColumn(RealmFieldType.STRING, "stringCol");
+                t.addColumn(RealmFieldType.INTEGER, "intCol");
+                t.addColumn(RealmFieldType.BOOLEAN, "boolCol");
+
+                TestHelper.addRowWithValues(t, "s1", 1, true);
+                TestHelper.addRowWithValues(t, "s2", 2, false);
+            }
+        });
 
-        String expected = "The Table contains 3 columns: stringCol, intCol, boolCol. And 2 rows.";
+        String expected = "The Table temp contains 3 columns: stringCol, intCol, boolCol. And 2 rows.";
         assertEquals(expected, t.toString());
     }
 
     @Test
     public void rowOperationsOnZeroRow() {
-        Table t = new Table();
+        Table t = TestHelper.createTable(sharedRealm, "temp");
+
+        sharedRealm.beginTransaction();
         // Removes rows without columns.
         try { t.moveLastOver(0);  fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
         try { t.moveLastOver(10); fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
@@ -82,27 +91,14 @@ public void rowOperationsOnZeroRow() {
         t.addColumn(RealmFieldType.STRING, "");
         try { t.moveLastOver(0);  fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
         try { t.moveLastOver(10); fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
+        sharedRealm.commitTransaction();
     }
 
     @Test
     public void zeroColOperations() {
-        Table tableZeroCols = new Table();
-
-        // Adds rows.
-        try {
-            tableZeroCols.add("val");
-            fail("No columns in table");
-        } catch (IndexOutOfBoundsException ignored) {}
-        try {
-            tableZeroCols.addEmptyRow();
-            fail("No columns in table");
-        } catch (IndexOutOfBoundsException ignored) {}
-        try {
-            tableZeroCols.addEmptyRows(10);
-            fail("No columns in table");
-        } catch (IndexOutOfBoundsException ignored) {}
-
+        Table tableZeroCols = TestHelper.createTable(sharedRealm, "temp");
 
+        sharedRealm.beginTransaction();
         // Col operations
         try {
             tableZeroCols.removeColumn(0);
@@ -120,12 +116,15 @@ public void zeroColOperations() {
             tableZeroCols.renameColumn(10, "newName");
             fail("No columns in table");
         } catch (ArrayIndexOutOfBoundsException ignored) {}
+        sharedRealm.commitTransaction();
     }
 
     @Test
     public void findFirstNonExisting() {
-        Table t = TestHelper.getTableWithAllColumnTypes();
-        t.add(new byte[] {1, 2, 3}, true, new Date(1384423149761L), 4.5D, 5.7F, 100, "string");
+        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
+        sharedRealm.beginTransaction();
+        TestHelper.addRowWithValues(t, new byte[] {1, 2, 3}, true, new Date(1384423149761L), 4.5D, 5.7F, 100, "string");
+        sharedRealm.commitTransaction();
 
         assertEquals(-1, t.findFirstBoolean(1, false));
         assertEquals(-1, t.findFirstDate(2, new Date(138442314986L)));
@@ -137,11 +136,13 @@ public void findFirstNonExisting() {
     @Test
     public void findFirst() {
         final int TEST_SIZE = 10;
-        Table t = TestHelper.getTableWithAllColumnTypes();
+        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
+        sharedRealm.beginTransaction();
         for (int i = 0; i < TEST_SIZE; i++) {
-            t.add(new byte[] {1, 2, 3}, true, new Date(i), (double) i, (float) i, i, "string " + i);
+            TestHelper.addRowWithValues(t, new byte[] {1, 2, 3}, true, new Date(i), (double) i, (float) i, i, "string " + i);
         }
-        t.add(new byte[] {1, 2, 3}, true, new Date(TEST_SIZE), (double) TEST_SIZE, (float) TEST_SIZE, TEST_SIZE, "");
+        TestHelper.addRowWithValues(t, new byte[] {1, 2, 3}, true, new Date(TEST_SIZE), (double) TEST_SIZE, (float) TEST_SIZE, TEST_SIZE, "");
+        sharedRealm.commitTransaction();
 
         assertEquals(0, t.findFirstBoolean(1, true));
         for (int i = 0; i < TEST_SIZE; i++) {
@@ -164,8 +165,12 @@ public void findFirst() {
 
     @Test
     public void getValuesFromNonExistingColumn() {
-        Table t = TestHelper.getTableWithAllColumnTypes();
-        t.addEmptyRows(10);
+        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
+        sharedRealm.beginTransaction();
+        for (int i = 0; i < 10; i++) {
+            OsObject.createRow(t);
+        }
+        sharedRealm.commitTransaction();
 
         try {
             t.getBinaryByteArray(-1, 0);
@@ -261,8 +266,12 @@ public void getValuesFromNonExistingColumn() {
 
     @Test
     public void getNonExistingColumn() {
-        Table t = new Table();
-        t.addColumn(RealmFieldType.INTEGER, "int");
+        Table t = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                t.addColumn(RealmFieldType.INTEGER, "int");
+            }
+        });
 
         assertEquals(-1, t.getColumnIndex("non-existing column"));
         try {
@@ -273,12 +282,17 @@ public void getNonExistingColumn() {
 
     @Test
     public void setNulls() {
-        Table t = new Table();
-        t.addColumn(RealmFieldType.STRING, "");
-        t.addColumn(RealmFieldType.DATE, "");
-        t.addColumn(RealmFieldType.BINARY, "");
-        t.add("String val", new Date(), new byte[] {1, 2, 3});
+        Table t = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                t.addColumn(RealmFieldType.STRING, "");
+                t.addColumn(RealmFieldType.DATE, "");
+                t.addColumn(RealmFieldType.BINARY, "");
+                TestHelper.addRowWithValues(t, "String val", new Date(), new byte[] {1, 2, 3});
+            }
+        });
 
+        sharedRealm.beginTransaction();
         try {
             t.setString(0, 0, null, false);
             fail("null string not allowed");
@@ -287,17 +301,7 @@ public void setNulls() {
             t.setDate(1, 0, null, false);
             fail("null Date not allowed");
         } catch (IllegalArgumentException ignored) { }
-    }
-
-    @Test
-    public void addNegativeEmptyRows() {
-        Table t = new Table();
-        t.addColumn(RealmFieldType.STRING, "colName");
-
-        try {
-            t.addEmptyRows(-1);
-            fail("Argument is negative");
-        } catch (IllegalArgumentException ignored) { }
+        sharedRealm.commitTransaction();
     }
 
     @Test
@@ -324,6 +328,7 @@ public void getName() {
 
     @Test
     public void shouldThrowWhenSetIndexOnWrongRealmFieldType() {
+        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
         for (long colIndex = 0; colIndex < t.getColumnCount(); colIndex++) {
 
             // All types supported addSearchIndex and removeSearchIndex.
@@ -334,6 +339,7 @@ public void shouldThrowWhenSetIndexOnWrongRealmFieldType() {
                             t.getColumnType(colIndex) != RealmFieldType.DATE);
 
             // Tries to addSearchIndex().
+            sharedRealm.beginTransaction();
             try {
                 t.addSearchIndex(colIndex);
                 if (exceptionExpected) {
@@ -341,8 +347,10 @@ public void shouldThrowWhenSetIndexOnWrongRealmFieldType() {
                 }
             } catch (IllegalArgumentException ignored) {
             }
+            sharedRealm.commitTransaction();
 
             // Tries to removeSearchIndex().
+            sharedRealm.beginTransaction();
             try {
                 // Currently core will do nothing if the column doesn't have a search index.
                 t.removeSearchIndex(colIndex);
@@ -351,7 +359,7 @@ public void shouldThrowWhenSetIndexOnWrongRealmFieldType() {
                 }
             } catch (IllegalArgumentException ignored) {
             }
-
+            sharedRealm.commitTransaction();
 
             // Tries to hasSearchIndex() for all columnTypes.
             t.hasSearchIndex(colIndex);
@@ -360,31 +368,39 @@ public void shouldThrowWhenSetIndexOnWrongRealmFieldType() {
 
     @Test
     public void columnName() {
-        Table t = new Table();
-        try {
-            t.addColumn(RealmFieldType.STRING, "I am 64 characters..............................................");
-            fail("Only 63 characters supported");
-        } catch (IllegalArgumentException ignored) { }
-        t.addColumn(RealmFieldType.STRING, "I am 63 characters.............................................");
+        TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                try {
+                    t.addColumn(RealmFieldType.STRING, "I am 64 characters..............................................");
+                    fail("Only 63 characters supported");
+                } catch (IllegalArgumentException ignored) { }
+                t.addColumn(RealmFieldType.STRING, "I am 63 characters.............................................");
+            }
+        });
     }
 
     @Test
     public void tableNumbers() {
-        Table t = new Table();
-        t.addColumn(RealmFieldType.INTEGER, "intCol");
-        t.addColumn(RealmFieldType.DOUBLE, "doubleCol");
-        t.addColumn(RealmFieldType.FLOAT, "floatCol");
-        t.addColumn(RealmFieldType.STRING, "StringCol");
-
-        // Adds 3 rows of data with same values in each column.
-        t.add(1, 2.0D, 3.0F, "s1");
-        t.add(1, 2.0D, 3.0F, "s1");
-        t.add(1, 2.0D, 3.0F, "s1");
-
-        // Adds other values.
-        t.add(10, 20.0D, 30.0F, "s10");
-        t.add(100, 200.0D, 300.0F, "s100");
-        t.add(1000, 2000.0D, 3000.0F, "s1000");
+        Table t = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                t.addColumn(RealmFieldType.INTEGER, "intCol");
+                t.addColumn(RealmFieldType.DOUBLE, "doubleCol");
+                t.addColumn(RealmFieldType.FLOAT, "floatCol");
+                t.addColumn(RealmFieldType.STRING, "StringCol");
+
+                // Adds 3 rows of data with same values in each column.
+                TestHelper.addRowWithValues(t, 1, 2.0D, 3.0F, "s1");
+                TestHelper.addRowWithValues(t, 1, 2.0D, 3.0F, "s1");
+                TestHelper.addRowWithValues(t, 1, 2.0D, 3.0F, "s1");
+
+                // Adds other values.
+                TestHelper.addRowWithValues(t, 10, 20.0D, 30.0F, "s10");
+                TestHelper.addRowWithValues(t, 100, 200.0D, 300.0F, "s100");
+                TestHelper.addRowWithValues(t, 1000, 2000.0D, 3000.0F, "s1000");
+            }
+        });
 
         // Counts instances of values added in the first 3 rows.
         assertEquals(3, t.count(0, 1));
@@ -397,8 +413,10 @@ public void tableNumbers() {
         assertEquals(4, t.findFirstFloat(2, 300.0F)); // Find rows index for first float value of 300.0 in column 2.
 
         // Sets double and float.
+        sharedRealm.beginTransaction();
         t.setDouble(1, 2, -2.0D, false);
         t.setFloat(2, 2, -3.0F, false);
+        sharedRealm.commitTransaction();
 
         // Gets double tests.
         assertEquals(-2.0D, t.getDouble(1, 2));
@@ -418,56 +436,68 @@ public void tableNumbers() {
     public void convertToNullable() {
         RealmFieldType[] columnTypes = {RealmFieldType.BOOLEAN, RealmFieldType.DATE, RealmFieldType.DOUBLE,
                 RealmFieldType.FLOAT, RealmFieldType.INTEGER, RealmFieldType.BINARY, RealmFieldType.STRING};
-        for (RealmFieldType columnType : columnTypes) {
+        int tableIndex = 0;
+        for (final RealmFieldType columnType : columnTypes) {
             // Tests various combinations of column names and nullability.
             String[] columnNames = {"foobar", "__TMP__0"};
-            for (boolean nullable : new boolean[] {Table.NOT_NULLABLE, Table.NULLABLE}) {
-                for (String columnName : columnNames) {
-                    Table table = new Table();
-                    long colIndex = table.addColumn(columnType, columnName, nullable);
-                    table.addColumn(RealmFieldType.BOOLEAN, "bool");
-                    table.addEmptyRow();
-                    if (columnType == RealmFieldType.BOOLEAN) {
-                        table.setBoolean(colIndex, 0, true, false);
-                    } else if (columnType == RealmFieldType.DATE) {
-                        table.setDate(colIndex, 0, new Date(0), false);
-                    } else if (columnType == RealmFieldType.DOUBLE) {
-                        table.setDouble(colIndex, 0, 1.0, false);
-                    } else if (columnType == RealmFieldType.FLOAT) {
-                        table.setFloat(colIndex, 0, 1.0F, false);
-                    } else if (columnType == RealmFieldType.INTEGER) {
-                        table.setLong(colIndex, 0, 1, false);
-                    } else if (columnType == RealmFieldType.BINARY) {
-                        table.setBinaryByteArray(colIndex, 0, new byte[] {0}, false);
-                    } else if (columnType == RealmFieldType.STRING) {
-                        table.setString(colIndex, 0, "Foo", false);
-                    }
-                    try {
-                        table.addEmptyRow();
-                        if (columnType == RealmFieldType.BINARY) {
-                            table.setBinaryByteArray(colIndex, 1, null, false);
-                        } else if (columnType == RealmFieldType.STRING) {
-                            table.setString(colIndex, 1, null, false);
-                        } else {
-                            table.getCheckedRow(1).setNull(colIndex);
+            for (final boolean nullable : new boolean[] {Table.NOT_NULLABLE, Table.NULLABLE}) {
+                for (final String columnName : columnNames) {
+                    final AtomicLong colIndexRef = new AtomicLong();
+                    Table table = TestHelper.createTable(sharedRealm, "temp" + tableIndex, new TestHelper.AdditionalTableSetup() {
+                        @Override
+                        public void execute(Table table) {
+                            long colIndex = table.addColumn(columnType, columnName, nullable);
+                            colIndexRef.set(colIndex);
+                            table.addColumn(RealmFieldType.BOOLEAN, "bool");
+                            OsObject.createRow(table);
+                            if (columnType == RealmFieldType.BOOLEAN) {
+                                table.setBoolean(colIndex, 0, true, false);
+                            } else if (columnType == RealmFieldType.DATE) {
+                                table.setDate(colIndex, 0, new Date(0), false);
+                            } else if (columnType == RealmFieldType.DOUBLE) {
+                                table.setDouble(colIndex, 0, 1.0, false);
+                            } else if (columnType == RealmFieldType.FLOAT) {
+                                table.setFloat(colIndex, 0, 1.0F, false);
+                            } else if (columnType == RealmFieldType.INTEGER) {
+                                table.setLong(colIndex, 0, 1, false);
+                            } else if (columnType == RealmFieldType.BINARY) {
+                                table.setBinaryByteArray(colIndex, 0, new byte[] {0}, false);
+                            } else if (columnType == RealmFieldType.STRING) {
+                                table.setString(colIndex, 0, "Foo", false);
+                            }
+                            try {
+                                OsObject.createRow(table);
+                                if (columnType == RealmFieldType.BINARY) {
+                                    table.setBinaryByteArray(colIndex, 1, null, false);
+                                } else if (columnType == RealmFieldType.STRING) {
+                                    table.setString(colIndex, 1, null, false);
+                                } else {
+                                    table.getCheckedRow(1).setNull(colIndex);
+                                }
+
+                                if (!nullable) {
+                                    fail();
+                                }
+                            } catch (IllegalArgumentException ignored) {
+                            }
+                            table.moveLastOver(table.size() - 1);
                         }
-
-                        if (!nullable) {
-                            fail();
-                        }
-                    } catch (IllegalArgumentException ignored) {
-                    }
-                    table.moveLastOver(table.size() - 1);
+                    });
                     assertEquals(1, table.size());
 
+                    long colIndex = colIndexRef.get();
+
+                    sharedRealm.beginTransaction();
                     table.convertColumnToNullable(colIndex);
+                    sharedRealm.commitTransaction();
                     assertTrue(table.isColumnNullable(colIndex));
                     assertEquals(1, table.size());
                     assertEquals(2, table.getColumnCount());
                     assertTrue(table.getColumnIndex(columnName) >= 0);
                     assertEquals(colIndex, table.getColumnIndex(columnName));
 
-                    table.addEmptyRow();
+                    sharedRealm.beginTransaction();
+                    OsObject.createRow(table);
                     if (columnType == RealmFieldType.BINARY) {
                         table.setBinaryByteArray(colIndex, 0, null, false);
                     } else if (columnType == RealmFieldType.STRING) {
@@ -475,6 +505,7 @@ public void convertToNullable() {
                     } else {
                         table.getCheckedRow(0).setNull(colIndex);
                     }
+                    sharedRealm.commitTransaction();
 
                     assertEquals(2, table.size());
 
@@ -485,6 +516,7 @@ public void convertToNullable() {
                     } else {
                         assertTrue(table.getUncheckedRow(1).isNull(colIndex));
                     }
+                    tableIndex++;
                 }
             }
         }
@@ -494,53 +526,65 @@ public void convertToNullable() {
     public void convertToNotNullable() {
         RealmFieldType[] columnTypes = {RealmFieldType.BOOLEAN, RealmFieldType.DATE, RealmFieldType.DOUBLE,
                 RealmFieldType.FLOAT, RealmFieldType.INTEGER, RealmFieldType.BINARY, RealmFieldType.STRING};
-        for (RealmFieldType columnType : columnTypes) {
+        int tableIndex = 0;
+        for (final RealmFieldType columnType : columnTypes) {
             // Tests various combinations of column names and nullability.
             String[] columnNames = {"foobar", "__TMP__0"};
-            for (boolean nullable : new boolean[] {Table.NOT_NULLABLE, Table.NULLABLE}) {
-                for (String columnName : columnNames) {
-                    Table table = new Table();
-                    long colIndex = table.addColumn(columnType, columnName, nullable);
-                    table.addColumn(RealmFieldType.BOOLEAN, "bool");
-                    table.addEmptyRow();
-                    if (columnType == RealmFieldType.BOOLEAN) {
-                        table.setBoolean(colIndex, 0, true, false);
-                    } else if (columnType == RealmFieldType.DATE) {
-                        table.setDate(colIndex, 0, new Date(1), false);
-                    } else if (columnType == RealmFieldType.DOUBLE) {
-                        table.setDouble(colIndex, 0, 1.0, false);
-                    } else if (columnType == RealmFieldType.FLOAT) {
-                        table.setFloat(colIndex, 0, 1.0F, false);
-                    } else if (columnType == RealmFieldType.INTEGER) {
-                        table.setLong(colIndex, 0, 1, false);
-                    } else if (columnType == RealmFieldType.BINARY) {
-                        table.setBinaryByteArray(colIndex, 0, new byte[] {0}, false);
-                    } else if (columnType == RealmFieldType.STRING) { table.setString(colIndex, 0, "Foo", false); }
-                    try {
-                        table.addEmptyRow();
-                        if (columnType == RealmFieldType.BINARY) {
-                            table.setBinaryByteArray(colIndex, 1, null, false);
-                        } else if (columnType == RealmFieldType.STRING) {
-                            table.setString(colIndex, 1, null, false);
-                        } else {
-                            table.getCheckedRow(1).setNull(colIndex);
-                        }
-
-                        if (!nullable) {
-                            fail();
+            for (final boolean nullable : new boolean[] {Table.NOT_NULLABLE, Table.NULLABLE}) {
+                for (final String columnName : columnNames) {
+                    final AtomicLong colIndexRef = new AtomicLong();
+                    Table table = TestHelper.createTable(sharedRealm, "temp" + tableIndex, new TestHelper.AdditionalTableSetup() {
+                        @Override
+                        public void execute(Table table) {
+                            long colIndex = table.addColumn(columnType, columnName, nullable);
+                            colIndexRef.set(colIndex);
+                            table.addColumn(RealmFieldType.BOOLEAN, "bool");
+                            OsObject.createRow(table);
+                            if (columnType == RealmFieldType.BOOLEAN) {
+                                table.setBoolean(colIndex, 0, true, false);
+                            } else if (columnType == RealmFieldType.DATE) {
+                                table.setDate(colIndex, 0, new Date(1), false);
+                            } else if (columnType == RealmFieldType.DOUBLE) {
+                                table.setDouble(colIndex, 0, 1.0, false);
+                            } else if (columnType == RealmFieldType.FLOAT) {
+                                table.setFloat(colIndex, 0, 1.0F, false);
+                            } else if (columnType == RealmFieldType.INTEGER) {
+                                table.setLong(colIndex, 0, 1, false);
+                            } else if (columnType == RealmFieldType.BINARY) {
+                                table.setBinaryByteArray(colIndex, 0, new byte[] {0}, false);
+                            } else if (columnType == RealmFieldType.STRING) { table.setString(colIndex, 0, "Foo", false); }
+                            try {
+                                OsObject.createRow(table);
+                                if (columnType == RealmFieldType.BINARY) {
+                                    table.setBinaryByteArray(colIndex, 1, null, false);
+                                } else if (columnType == RealmFieldType.STRING) {
+                                    table.setString(colIndex, 1, null, false);
+                                } else {
+                                    table.getCheckedRow(1).setNull(colIndex);
+                                }
+
+                                if (!nullable) {
+                                    fail();
+                                }
+                            } catch (IllegalArgumentException ignored) {
+                            }
                         }
-                    } catch (IllegalArgumentException ignored) {
-                    }
+                    });
                     assertEquals(2, table.size());
 
+                    long colIndex = colIndexRef.get();
+
+                    sharedRealm.beginTransaction();
                     table.convertColumnToNotNullable(colIndex);
+                    sharedRealm.commitTransaction();
                     assertFalse(table.isColumnNullable(colIndex));
                     assertEquals(2, table.size());
                     assertEquals(2, table.getColumnCount());
                     assertTrue(table.getColumnIndex(columnName) >= 0);
                     assertEquals(colIndex, table.getColumnIndex(columnName));
 
-                    table.addEmptyRow();
+                    sharedRealm.beginTransaction();
+                    OsObject.createRow(table);
                     try {
                         if (columnType == RealmFieldType.BINARY) {
                             table.setBinaryByteArray(colIndex, 0, null, false);
@@ -555,6 +599,8 @@ public void convertToNotNullable() {
                     } catch (IllegalArgumentException ignored) {
                     }
                     table.moveLastOver(table.size() -1);
+                    sharedRealm.commitTransaction();
+
                     assertEquals(2, table.size());
 
                     if (columnType == RealmFieldType.BINARY) {
@@ -576,6 +622,7 @@ public void convertToNotNullable() {
                             assertEquals(0, table.getLong(colIndex, 1));
                         }
                     }
+                    tableIndex++;
                 }
             }
         }
@@ -584,9 +631,13 @@ public void convertToNotNullable() {
     // Adds column and read back if it is nullable or not.
     @Test
     public void isNullable() {
-        Table table = new Table();
-        table.addColumn(RealmFieldType.STRING, "string1", Table.NOT_NULLABLE);
-        table.addColumn(RealmFieldType.STRING, "string2", Table.NULLABLE);
+        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.STRING, "string1", Table.NOT_NULLABLE);
+                table.addColumn(RealmFieldType.STRING, "string2", Table.NULLABLE);
+            }
+        });
 
         assertFalse(table.isColumnNullable(0));
         assertTrue(table.isColumnNullable(1));
@@ -594,8 +645,6 @@ public void isNullable() {
 
     @Test
     public void defaultValue_setAndGet() {
-        // t is not used in this test.
-        t = null;
         final SharedRealm sharedRealm = SharedRealm.getInstance(configFactory.createConfiguration());
         //noinspection TryFinallyCanBeTryWithResources
         try {
@@ -626,7 +675,7 @@ public void defaultValue_setAndGet() {
             }
 
             sharedRealm.beginTransaction();
-            table.addEmptyRow();
+            OsObject.createRow(table);
 
             ListIterator<Pair<RealmFieldType, Object>> it = columnInfoList.listIterator();
             for (int columnIndex = 0; columnIndex < columnInfoList.size(); columnIndex++) {
@@ -717,8 +766,6 @@ public void defaultValue_setAndGet() {
 
     @Test
     public void defaultValue_setMultipleTimes() {
-        // t is not used in this test.
-        t = null;
         final SharedRealm sharedRealm = SharedRealm.getInstance(configFactory.createConfiguration());
         //noinspection TryFinallyCanBeTryWithResources
         try {
@@ -749,8 +796,8 @@ public void defaultValue_setMultipleTimes() {
             }
 
             sharedRealm.beginTransaction();
-            table.addEmptyRow();
-            table.addEmptyRow(); // For link field update.
+            OsObject.createRow(table);
+            OsObject.createRow(table); // For link field update.
 
             ListIterator<Pair<RealmFieldType, Object>> it = columnInfoList.listIterator();
             for (int columnIndex = 0; columnIndex < columnInfoList.size(); columnIndex++) {
@@ -849,8 +896,6 @@ public void defaultValue_setMultipleTimes() {
 
     @Test
     public void defaultValue_overwrittenByNonDefault() {
-        // t is not used in this test.
-        t = null;
         final SharedRealm sharedRealm = SharedRealm.getInstance(configFactory.createConfiguration());
         //noinspection TryFinallyCanBeTryWithResources
         try {
@@ -881,8 +926,8 @@ public void defaultValue_overwrittenByNonDefault() {
             }
 
             sharedRealm.beginTransaction();
-            table.addEmptyRow();
-            table.addEmptyRow(); // For link field update.
+            OsObject.createRow(table);
+            OsObject.createRow(table); // For link field update.
 
             // Sets as default.
             ListIterator<Pair<RealmFieldType, Object>> it = columnInfoList.listIterator();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/PivotTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/PivotTest.java
deleted file mode 100644
index 574fcb43c3..0000000000
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/PivotTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright 2015 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.internal;
-
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import io.realm.Realm;
-import io.realm.RealmFieldType;
-import io.realm.internal.Table.PivotType;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
-
-@RunWith(AndroidJUnit4.class)
-public class PivotTest {
-
-    Table t;
-    long colIndexSex;
-    long colIndexAge;
-    long colIndexHired;
-
-    @Before
-    public void setUp() {
-        Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
-        t = new Table();
-        colIndexSex = t.addColumn(RealmFieldType.STRING, "sex");
-        colIndexAge = t.addColumn(RealmFieldType.INTEGER, "age");
-        colIndexHired = t.addColumn(RealmFieldType.BOOLEAN, "hired");
-
-        for (long i=0;i<50000;i++){
-            String sex = i % 2 == 0 ? "Male" : "Female";
-            t.add(sex, 20 + (i%20), true);
-        }
-    }
-
-    @Test
-    public void pivotTable(){
-
-        Table resultCount = t.pivot(colIndexSex, colIndexAge, PivotType.COUNT);
-        assertEquals(2, resultCount.size());
-        assertEquals(25000, resultCount.getLong(1, 0));
-        assertEquals(25000, resultCount.getLong(1, 1));
-
-        Table resultMin = t.pivot(colIndexSex, colIndexAge, PivotType.MIN);
-        assertEquals(20, resultMin.getLong(1, 0));
-        assertEquals(21, resultMin.getLong(1, 1));
-
-        Table resultMax = t.pivot(colIndexSex, colIndexAge, PivotType.MAX);
-        assertEquals(38, resultMax.getLong(1, 0));
-        assertEquals(39, resultMax.getLong(1, 1));
-
-        try { t.pivot(colIndexHired, colIndexAge, PivotType.SUM); fail("Group by not a String column"); } catch (UnsupportedOperationException ignore) { }
-        try { t.pivot(colIndexSex, colIndexHired, PivotType.SUM); fail("Aggregation not an int column"); } catch (UnsupportedOperationException ignore) { }
-    }
-}
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
index e9b8e4bd87..f6f9970675 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
@@ -96,9 +96,9 @@ public void removingPrimaryKeyRemovesConstraint_typeSetters() {
         tbl.setPrimaryKey("name");
 
         // Creates first entry with name "Foo".
-        tbl.setString(0, tbl.addEmptyRow(), "Foo", false);
+        tbl.setString(0, OsObject.createRow(tbl), "Foo", false);
 
-        long rowIndex = tbl.addEmptyRow();
+        long rowIndex = OsObject.createRow(tbl);
         try {
             tbl.setString(0, rowIndex, "Foo", false); // Tries to create 2nd entry with name Foo.
         } catch (RealmPrimaryKeyConstraintException e1) {
@@ -119,7 +119,7 @@ public void removingPrimaryKeyRemovesConstraint_typeSetters() {
     public void addEmptyRowWithPrimaryKeyWrongTypeStringThrows() {
         Table t = getTableWithStringPrimaryKey();
         try {
-            OsObject.createWithPrimaryKey(sharedRealm, t, 42);
+            OsObject.createWithPrimaryKey(t, 42);
             fail();
         } catch (IllegalArgumentException ignored) {
         }
@@ -129,7 +129,7 @@ public void addEmptyRowWithPrimaryKeyWrongTypeStringThrows() {
     @Test
     public void addEmptyRowWithPrimaryKeyNullString() {
         Table t = getTableWithStringPrimaryKey();
-        OsObject.createWithPrimaryKey(sharedRealm, t, null);
+        OsObject.createWithPrimaryKey(t, null);
         assertEquals(1, t.size());
         sharedRealm.cancelTransaction();
     }
@@ -138,7 +138,7 @@ public void addEmptyRowWithPrimaryKeyNullString() {
     public void addEmptyRowWithPrimaryKeyWrongTypeIntegerThrows() {
         Table t = getTableWithIntegerPrimaryKey();
         try {
-            OsObject.createWithPrimaryKey(sharedRealm, t, "Foo");
+            OsObject.createWithPrimaryKey(t, "Foo");
             fail();
         } catch (IllegalArgumentException ignored) {
         }
@@ -148,7 +148,7 @@ public void addEmptyRowWithPrimaryKeyWrongTypeIntegerThrows() {
     @Test
     public void addEmptyRowWithPrimaryKeyString() {
         Table t = getTableWithStringPrimaryKey();
-        UncheckedRow row = OsObject.createWithPrimaryKey(sharedRealm, t, "Foo");
+        UncheckedRow row = OsObject.createWithPrimaryKey(t, "Foo");
         assertEquals(1, t.size());
         assertEquals("Foo", row.getString(0));
         sharedRealm.cancelTransaction();
@@ -157,7 +157,7 @@ public void addEmptyRowWithPrimaryKeyString() {
     @Test
     public void addEmptyRowWithPrimaryKeyLong() {
         Table t = getTableWithIntegerPrimaryKey();
-        UncheckedRow row = OsObject.createWithPrimaryKey(sharedRealm, t, 42);
+        UncheckedRow row = OsObject.createWithPrimaryKey(t, 42);
         assertEquals(1, t.size());
         assertEquals(42L, row.getLong(0));
         sharedRealm.cancelTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java
index fe4fb16267..3efa42c683 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java
@@ -16,33 +16,73 @@
 
 package io.realm.internal;
 
+import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
+import io.realm.TestHelper;
+import io.realm.rule.TestRealmConfigurationFactory;
+
 
 import static org.junit.Assert.assertEquals;
 
 
 @RunWith(AndroidJUnit4.class)
 public class TableIndexAndDistinctTest {
-    Table table;
-
-    void init() {
-        table = new Table();
-        table.addColumn(RealmFieldType.INTEGER, "number");
-        table.addColumn(RealmFieldType.STRING, "name");
-
-        long i = 0;
-        table.add(0, "A");
-        table.add(1, "B");
-        table.add(2, "C");
-        table.add(3, "B");
-        table.add(4, "D");
-        table.add(5, "D");
-        table.add(6, "D");
+
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private RealmConfiguration config;
+    private SharedRealm sharedRealm;
+    private Table table;
+
+    @Before
+    public void setUp() throws Exception {
+        Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
+        config = configFactory.createConfiguration();
+        sharedRealm = SharedRealm.getInstance(config);
+
+        sharedRealm.beginTransaction();
+    }
+
+    @After
+    public void tearDown() {
+        if (sharedRealm != null && sharedRealm.isInTransaction()) {
+            sharedRealm.cancelTransaction();
+        }
+
+        if (sharedRealm != null && !sharedRealm.isClosed()) {
+            sharedRealm.close();
+        }
+    }
+
+    private void init() {
+        table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table table) {
+                table.addColumn(RealmFieldType.INTEGER, "number");
+                table.addColumn(RealmFieldType.STRING, "name");
+
+                TestHelper.addRowWithValues(table, 0, "A");
+                TestHelper.addRowWithValues(table, 1, "B");
+                TestHelper.addRowWithValues(table, 2, "C");
+                TestHelper.addRowWithValues(table, 3, "B");
+                TestHelper.addRowWithValues(table, 4, "D");
+                TestHelper.addRowWithValues(table, 5, "D");
+                TestHelper.addRowWithValues(table, 6, "D");
+            }
+        });
+
         assertEquals(7, table.size());
     }
 
@@ -54,36 +94,40 @@ void init() {
     public void shouldTestSettingIndexOnMultipleColumns() {
 
         // Creates a table only with String type columns
-        Table t = new Table();
-        t.addColumn(RealmFieldType.STRING, "col1");
-        t.addColumn(RealmFieldType.STRING, "col2");
-        t.addColumn(RealmFieldType.STRING, "col3");
-        t.addColumn(RealmFieldType.STRING, "col4");
-        t.addColumn(RealmFieldType.STRING, "col5");
-        t.add("row1", "row2", "row3", "row4", "row5");
-        t.add("row1", "row2", "row3", "row4", "row5");
-        t.add("row1", "row2", "row3", "row4", "row5");
-        t.add("row1", "row2", "row3", "row4", "row5");
-        t.add("row1", "row2", "row3", "row4", "row5");
+        Table t = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
+            @Override
+            public void execute(Table t) {
+                t.addColumn(RealmFieldType.STRING, "col1");
+                t.addColumn(RealmFieldType.STRING, "col2");
+                t.addColumn(RealmFieldType.STRING, "col3");
+                t.addColumn(RealmFieldType.STRING, "col4");
+                t.addColumn(RealmFieldType.STRING, "col5");
+                TestHelper.addRowWithValues(t, "row1", "row2", "row3", "row4", "row5");
+                TestHelper.addRowWithValues(t, "row1", "row2", "row3", "row4", "row5");
+                TestHelper.addRowWithValues(t, "row1", "row2", "row3", "row4", "row5");
+                TestHelper.addRowWithValues(t, "row1", "row2", "row3", "row4", "row5");
+                TestHelper.addRowWithValues(t, "row1", "row2", "row3", "row4", "row5");
+            }
+        });
 
         for (long c=0;c<t.getColumnCount();c++){
             t.addSearchIndex(c);
             assertEquals(true, t.hasSearchIndex(c));
         }
+
     }
 
 
 // TODO: parametric test
 /*    *//**
      * Checks that all other column types than String throws exception.
-     * @param o
      *//*
 
     @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = "columnIndex")
     public void shouldTestIndexOnWrongColumnType(Long index) {
 
         // Gets a table with all available column types.
-        Table t = TestHelper.getTableWithAllColumnTypes();
+        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
 
         // If column type is String, then throw the excepted exception.
         if (t.getColumnType(index).equals(RealmFieldType.STRING)){
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
index 1f28126e1e..74d2dc64ba 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
@@ -206,8 +206,8 @@ static inline size_t do_create_row_with_primary_key(JNIEnv* env, jlong shared_re
 {
     auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
     auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+    shared_realm->verify_in_write(); // throws
     JStringAccessor str_accessor(env, pk_value); // throws
-    shared_realm->verify_in_write();             // throws
     if (!pk_value && !TBL_AND_COL_NULLABLE(env, &table, pk_column_ndx)) {
         return realm::npos;
     }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
index c99f0ba198..c2afd189ce 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
@@ -101,40 +101,6 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeAddColumnLink(JNIEnv*
 }
 
 
-JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativePivot(JNIEnv* env, jobject, jlong dataTablePtr,
-                                                                jlong stringCol, jlong intCol, jint operation,
-                                                                jlong resultTablePtr)
-{
-    Table* dataTable = TBL(dataTablePtr);
-    Table* resultTable = TBL(resultTablePtr);
-    Table::AggrType pivotOp;
-    switch (operation) {
-        case 0:
-            pivotOp = Table::aggr_count;
-            break;
-        case 1:
-            pivotOp = Table::aggr_sum;
-            break;
-        case 2:
-            pivotOp = Table::aggr_avg;
-            break;
-        case 3:
-            pivotOp = Table::aggr_min;
-            break;
-        case 4:
-            pivotOp = Table::aggr_max;
-            break;
-        default:
-            ThrowException(env, UnsupportedOperation, "No pivot operation specified.");
-            return;
-    }
-
-    try {
-        dataTable->aggregate(S(stringCol), S(intCol), pivotOp, *resultTable);
-    }
-    CATCH_STD()
-}
-
 JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeRemoveColumn(JNIEnv* env, jobject, jlong nativeTablePtr,
                                                                        jlong columnIndex)
 {
@@ -528,24 +494,6 @@ JNIEXPORT jint JNICALL Java_io_realm_internal_Table_nativeGetColumnType(JNIEnv*
 
 // ---------------- Row handling
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeAddEmptyRow(JNIEnv* env, jclass, jlong nativeTablePtr,
-                                                                       jlong rows)
-{
-    Table* pTable = TBL(nativeTablePtr);
-    if (!TABLE_VALID(env, pTable)) {
-        return 0;
-    }
-    if (pTable->get_column_count() < 1) {
-        ThrowException(env, IndexOutOfBounds, concat_stringdata("Table has no columns: ", pTable->get_name()));
-        return 0;
-    }
-    try {
-        return static_cast<jlong>(pTable->add_empty_row(S(rows)));
-    }
-    CATCH_STD()
-    return 0;
-}
-
 JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeMoveLastOver(JNIEnv* env, jobject, jlong nativeTablePtr,
                                                                        jlong rowIndex)
 {
@@ -1304,16 +1252,6 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsValid(JNIEnv*, j
     return to_jbool(TBL(nativeTablePtr)->is_attached()); // noexcept
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_createNative(JNIEnv* env, jobject)
-{
-    TR_ENTER()
-    try {
-        return reinterpret_cast<jlong>(LangBindHelper::new_table());
-    }
-    CATCH_STD()
-    return 0;
-}
-
 // Checks if the primary key column contains any duplicate values, making it ineligible as a
 // primary key.
 static bool check_valid_primary_key_column(JNIEnv* env, Table* table, StringData column_name) // throws
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index f9b3451d58..27dc64e272 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -109,7 +109,7 @@ public DynamicRealmObject createObject(String className) {
                     " 'createObject(String, Object)' instead.", className));
         }
 
-        return new DynamicRealmObject(this, CheckedRow.getFromRow(OsObject.create(sharedRealm, table)));
+        return new DynamicRealmObject(this, CheckedRow.getFromRow(OsObject.create(table)));
     }
 
     /**
@@ -126,7 +126,7 @@ public DynamicRealmObject createObject(String className) {
     public DynamicRealmObject createObject(String className, Object primaryKeyValue) {
         Table table = schema.getTable(className);
         return new DynamicRealmObject(this,
-                CheckedRow.getFromRow(OsObject.createWithPrimaryKey(sharedRealm, table, primaryKeyValue)));
+                CheckedRow.getFromRow(OsObject.createWithPrimaryKey(table, primaryKeyValue)));
     }
 
     /**
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index ffd129701f..babed1e66d 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -1002,7 +1002,7 @@ private Scanner getFullStringScanner(InputStream in) {
                     " 'createObject(Class<E>, Object)' instead.", table.getClassName()));
         }
         return configuration.getSchemaMediator().newInstance(clazz, this,
-                OsObject.create(sharedRealm, table),
+                OsObject.create(table),
                 schema.getColumnInfo(clazz),
                 acceptDefaultValue, excludeFields);
     }
@@ -1049,7 +1049,7 @@ private Scanner getFullStringScanner(InputStream in) {
         Table table = schema.getTable(clazz);
 
         return configuration.getSchemaMediator().newInstance(clazz, this,
-                OsObject.createWithPrimaryKey(sharedRealm, table, primaryKeyValue),
+                OsObject.createWithPrimaryKey(table, primaryKeyValue),
                 schema.getColumnInfo(clazz),
                 acceptDefaultValue, excludeFields);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
index bcfcaaa48f..56a46768d1 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
@@ -148,9 +148,11 @@ public void setObserverPairs(ObserverPairList<ObjectObserverPair> pairs) {
     /**
      * Create an object in the given table which doesn't have a primary key column defined.
      *
+     * @param table the table where the object is created. This table must be atached to {@link SharedRealm}.
      * @return a newly created {@code UncheckedRow}.
      */
-    public static UncheckedRow create(SharedRealm sharedRealm, Table table) {
+    public static UncheckedRow create(Table table) {
+        final SharedRealm sharedRealm = table.getSharedRealm();
         return new UncheckedRow(sharedRealm.context, table,
                 nativeCreateNewObject(sharedRealm.getNativePtr(), table.getNativePtr()));
     }
@@ -159,9 +161,11 @@ public static UncheckedRow create(SharedRealm sharedRealm, Table table) {
      * Create a row in the given table which doesn't have a primary key column defined.
      * This is used for the fast bulk insertion.
      *
+     * @param table the table where the object is created.
      * @return a newly created row's index.
      */
-    public static long createRow(SharedRealm sharedRealm, Table table) {
+    public static long createRow(Table table) {
+        final SharedRealm sharedRealm = table.getSharedRealm();
         return nativeCreateRow(sharedRealm.getNativePtr(), table.getNativePtr());
     }
 
@@ -178,11 +182,13 @@ private static long getAndVerifyPrimaryKeyColumnIndex(Table table) {
      * Create an object in the given table which has a primary key column defined, and set the primary key with given
      * value.
      *
+     * @param table the table where the object is created. This table must be atached to {@link SharedRealm}.
      * @return a newly created {@code UncheckedRow}.
      */
-    public static UncheckedRow createWithPrimaryKey(SharedRealm sharedRealm, Table table, Object primaryKeyValue) {
+    public static UncheckedRow createWithPrimaryKey(Table table, Object primaryKeyValue) {
         long primaryKeyColumnIndex = getAndVerifyPrimaryKeyColumnIndex(table);
         RealmFieldType type = table.getColumnType(primaryKeyColumnIndex);
+        final SharedRealm sharedRealm = table.getSharedRealm();
 
         if (type == RealmFieldType.STRING) {
             if (primaryKeyValue != null && !(primaryKeyValue instanceof String)) {
@@ -207,11 +213,13 @@ public static UncheckedRow createWithPrimaryKey(SharedRealm sharedRealm, Table t
      * value.
      * This is used for the fast bulk insertion.
      *
+     * @param table the table where the object is created.
      * @return a newly created {@code UncheckedRow}.
      */
-    public static long createRowWithPrimaryKey(SharedRealm sharedRealm, Table table, Object primaryKeyValue) {
+    public static long createRowWithPrimaryKey(Table table, Object primaryKeyValue) {
         long primaryKeyColumnIndex = getAndVerifyPrimaryKeyColumnIndex(table);
         RealmFieldType type = table.getColumnType(primaryKeyColumnIndex);
+        final SharedRealm sharedRealm = table.getSharedRealm();
 
         if (type == RealmFieldType.STRING) {
             if (primaryKeyValue != null && !(primaryKeyValue instanceof String)) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index 5895024bc9..c50f674eba 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -30,20 +30,6 @@
  */
 public class Table implements TableSchema, NativeObject {
 
-    enum PivotType {
-        COUNT(0),
-        SUM(1),
-        AVG(2),
-        MIN(3),
-        MAX(4);
-
-        final int value; // Package protected, accessible from Table
-
-        PivotType(int value) {
-            this.value = value;
-        }
-    }
-
     public static final int TABLE_MAX_LENGTH = 56; // Max length of class names without prefix
     public static final long INFINITE = -1;
     public static final boolean NULLABLE = true;
@@ -66,23 +52,6 @@
     private final SharedRealm sharedRealm;
     private long cachedPrimaryKeyColumnIndex = NO_MATCH;
 
-    /**
-     * Constructs a Table base object. It can be used to register columns in this table. Registering into table is
-     * allowed only for empty tables. It creates a native reference of the object and keeps a reference to it.
-     */
-    public Table() {
-        this.context = new NativeContext();
-        // Native methods work will be initialized here. Generated classes will
-        // have nothing to do with the native functions. Generated Java Table
-        // classes will work as a wrapper on top of table.
-        this.nativePtr = createNative();
-        if (nativePtr == 0) {
-            throw new java.lang.OutOfMemoryError("Out of native memory.");
-        }
-        this.sharedRealm = null;
-        context.addReference(this);
-    }
-
     Table(Table parent, long nativePointer) {
         this(parent.sharedRealm, nativePointer);
     }
@@ -351,125 +320,6 @@ public void moveLastOver(long rowIndex) {
         nativeMoveLastOver(nativePtr, rowIndex);
     }
 
-    /**
-     * Adds an empty row to the table which doesn't have a primary key defined.
-     * <p>
-     * NOTE: To add a table with a primary key defined, use {@link #addEmptyRowWithPrimaryKey(Object)} instead. This
-     * won't check if this table has a primary key.
-     *
-     * @return row index.
-     */
-    public long addEmptyRow() {
-        checkImmutable();
-        return nativeAddEmptyRow(nativePtr, 1);
-    }
-
-    @SuppressWarnings("WeakerAccess")
-    public long addEmptyRows(long rows) {
-        checkImmutable();
-        if (rows < 1) {
-            throw new IllegalArgumentException("'rows' must be > 0.");
-        }
-        if (hasPrimaryKey()) {
-            if (rows > 1) {
-                throw new RealmException("Multiple empty rows cannot be created if a primary key is defined for the table.");
-            }
-            return addEmptyRow();
-        }
-        return nativeAddEmptyRow(nativePtr, rows);
-    }
-
-    /**
-     * Appends the specified row to the end of the table. For internal testing usage only.
-     *
-     * @param values values.
-     * @return the row index of the appended row.
-     * @deprecated Remove this functions since it doesn't seem to be useful. And this function does deal with tables
-     * with primary key defined well. Primary key has to be set with `setXxxUnique` as the first thing to do after row
-     * added.
-     */
-    protected long add(Object... values) {
-        long rowIndex = addEmptyRow();
-
-        checkImmutable();
-
-        // Checks values types.
-        int columns = (int) getColumnCount();
-        if (columns != values.length) {
-            throw new IllegalArgumentException("The number of value parameters (" +
-                    String.valueOf(values.length) +
-                    ") does not match the number of columns in the table (" +
-                    String.valueOf(columns) + ").");
-        }
-        RealmFieldType[] colTypes = new RealmFieldType[columns];
-        for (int columnIndex = 0; columnIndex < columns; columnIndex++) {
-            Object value = values[columnIndex];
-            RealmFieldType colType = getColumnType(columnIndex);
-            colTypes[columnIndex] = colType;
-            if (!colType.isValid(value)) {
-                // String representation of the provided value type.
-                String providedType;
-                if (value == null) {
-                    providedType = "null";
-                } else {
-                    providedType = value.getClass().toString();
-                }
-
-                throw new IllegalArgumentException("Invalid argument no " + String.valueOf(1 + columnIndex) +
-                        ". Expected a value compatible with column type " + colType + ", but got " + providedType + ".");
-            }
-        }
-
-        // Inserts values.
-        for (long columnIndex = 0; columnIndex < columns; columnIndex++) {
-            Object value = values[(int) columnIndex];
-            switch (colTypes[(int) columnIndex]) {
-                case BOOLEAN:
-                    nativeSetBoolean(nativePtr, columnIndex, rowIndex, (Boolean) value, false);
-                    break;
-                case INTEGER:
-                    if (value == null) {
-                        checkDuplicatedNullForPrimaryKeyValue(columnIndex, rowIndex);
-                        nativeSetNull(nativePtr, columnIndex, rowIndex, false);
-                    } else {
-                        long intValue = ((Number) value).longValue();
-                        checkIntValueIsLegal(columnIndex, rowIndex, intValue);
-                        nativeSetLong(nativePtr, columnIndex, rowIndex, intValue, false);
-                    }
-                    break;
-                case FLOAT:
-                    nativeSetFloat(nativePtr, columnIndex, rowIndex, (Float) value, false);
-                    break;
-                case DOUBLE:
-                    nativeSetDouble(nativePtr, columnIndex, rowIndex, (Double) value, false);
-                    break;
-                case STRING:
-                    if (value == null) {
-                        checkDuplicatedNullForPrimaryKeyValue(columnIndex, rowIndex);
-                        nativeSetNull(nativePtr, columnIndex, rowIndex, false);
-                    } else {
-                        String stringValue = (String) value;
-                        checkStringValueIsLegal(columnIndex, rowIndex, stringValue);
-                        nativeSetString(nativePtr, columnIndex, rowIndex, (String) value, false);
-                    }
-                    break;
-                case DATE:
-                    if (value == null) { throw new IllegalArgumentException("Null Date is not allowed."); }
-                    nativeSetTimestamp(nativePtr, columnIndex, rowIndex, ((Date) value).getTime(), false);
-                    break;
-                case BINARY:
-                    if (value == null) { throw new IllegalArgumentException("Null Array is not allowed"); }
-                    nativeSetByteArray(nativePtr, columnIndex, rowIndex, (byte[]) value, false);
-                    break;
-                case UNSUPPORTED_MIXED:
-                case UNSUPPORTED_TABLE:
-                default:
-                    throw new RuntimeException("Unexpected columnType: " + String.valueOf(colTypes[(int) columnIndex]));
-            }
-        }
-        return rowIndex;
-    }
-
     private boolean isPrimaryKeyColumn(long columnIndex) {
         return columnIndex == getPrimaryKey();
     }
@@ -570,6 +420,10 @@ public static void throwDuplicatePrimaryKeyException(Object value) {
     // Getters
     //
 
+    SharedRealm getSharedRealm() {
+        return sharedRealm;
+    }
+
     public long getLong(long columnIndex, long rowIndex) {
         return nativeGetLong(nativePtr, columnIndex, rowIndex);
     }
@@ -907,18 +761,6 @@ public long upperBoundLong(long columnIndex, long value) {
         return nativeUpperBoundInt(nativePtr, columnIndex, value);
     }
 
-    public Table pivot(long stringCol, long intCol, PivotType pivotType) {
-        if (!this.getColumnType(stringCol).equals(RealmFieldType.STRING)) {
-            throw new UnsupportedOperationException("Group by column must be of type String");
-        }
-        if (!this.getColumnType(intCol).equals(RealmFieldType.INTEGER)) {
-            throw new UnsupportedOperationException("Aggregation column must be of type Int");
-        }
-        Table result = new Table();
-        nativePivot(nativePtr, stringCol, intCol, pivotType.value, result.nativePtr);
-        return result;
-    }
-
     //
 
     /**
@@ -1026,8 +868,6 @@ public static String getTableNameForClass(String name) {
         return TABLE_PREFIX + name;
     }
 
-    protected native long createNative();
-
     private native boolean nativeIsValid(long nativeTablePtr);
 
     private native long nativeAddColumn(long nativeTablePtr, int type, String name, boolean isNullable);
@@ -1058,8 +898,6 @@ public static String getTableNameForClass(String name) {
 
     private native void nativeMoveLastOver(long nativeTablePtr, long rowIndex);
 
-    public static native long nativeAddEmptyRow(long nativeTablePtr, long rows);
-
     private native long nativeGetSortedViewMulti(long nativeTableViewPtr, long[] columnIndices, boolean[] ascending);
 
     private native long nativeGetLong(long nativeTablePtr, long columnIndex, long rowIndex);
@@ -1157,8 +995,6 @@ public static String getTableNameForClass(String name) {
 
     private native long nativeUpperBoundInt(long nativePtr, long columnIndex, long value);
 
-    private native void nativePivot(long nativeTablePtr, long stringCol, long intCol, int pivotType, long resultPtr);
-
     private native String nativeGetName(long nativeTablePtr);
 
     private native String nativeToJson(long nativeTablePtr);
