diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index fcb035547e..c20a722be2 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -58,7 +58,6 @@
             "io.realm.internal.ProxyUtils",
             "io.realm.internal.RealmObjectProxy",
             "io.realm.internal.Row",
-            "io.realm.internal.SharedRealm",
             "io.realm.internal.Table",
             "io.realm.internal.android.JsonUtils",
             "io.realm.log.RealmLog",
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
index 4e1a89aba5..1370de9e12 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
@@ -76,7 +76,6 @@ public void generate() throws IOException {
                 "java.util.Iterator",
                 "java.util.Collection",
                 "io.realm.internal.ColumnInfo",
-                "io.realm.internal.SharedRealm",
                 "io.realm.internal.RealmObjectProxy",
                 "io.realm.internal.RealmProxyMediator",
                 "io.realm.internal.Row",
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index 0c429a8dec..ad9ce265ac 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -15,7 +15,6 @@
 import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.UncheckedRow;
 import io.realm.internal.android.JsonUtils;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index 28beeb3ebb..77d04eae89 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -15,7 +15,6 @@
 import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.android.JsonUtils;
 import io.realm.log.RealmLog;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 65562e6d8e..2a7f2cf9d6 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -15,7 +15,6 @@
 import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.android.JsonUtils;
 import io.realm.log.RealmLog;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
index c8f0dc1849..29e965598d 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
@@ -8,7 +8,6 @@
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.Row;
-import io.realm.internal.SharedRealm;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index 150ca08c9c..4d882b466a 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -15,7 +15,6 @@
 import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.android.JsonUtils;
 import io.realm.log.RealmLog;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index 48d43d74d0..7d872718ba 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -102,7 +102,7 @@
 import io.realm.exceptions.RealmFileException;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.exceptions.RealmPrimaryKeyConstraintException;
-import io.realm.internal.SharedRealm;
+import io.realm.internal.OsSharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.util.Pair;
 import io.realm.log.RealmLog;
@@ -649,13 +649,13 @@ public void cancelTransaction() {
 
     @Test
     public void executeTransaction_null() {
-        SharedRealm.VersionID oldVersion = realm.sharedRealm.getVersionID();
+        OsSharedRealm.VersionID oldVersion = realm.sharedRealm.getVersionID();
         try {
             realm.executeTransaction(null);
             fail("null transaction should throw");
         } catch (IllegalArgumentException ignored) {
         }
-        SharedRealm.VersionID newVersion = realm.sharedRealm.getVersionID();
+        OsSharedRealm.VersionID newVersion = realm.sharedRealm.getVersionID();
         assertEquals(oldVersion, newVersion);
     }
 
@@ -4232,7 +4232,7 @@ public void namedPipeDirForExternalStorage() {
         realm.close();
         realm = null;
 
-        final File namedPipeDir = SharedRealm.getTemporaryDirectory();
+        final File namedPipeDir = OsSharedRealm.getTemporaryDirectory();
         assertTrue(namedPipeDir.isDirectory());
         TestHelper.deleteRecursively(namedPipeDir);
         //noinspection ResultOfMethodCallIgnored
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
index 4ef63520df..a765dc60c2 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
@@ -57,7 +57,7 @@
 import io.realm.entities.PrimaryKeyAsString;
 import io.realm.internal.OsResults;
 import io.realm.internal.OsObject;
-import io.realm.internal.SharedRealm;
+import io.realm.internal.OsSharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.async.RealmThreadPoolExecutor;
 import io.realm.log.LogLevel;
@@ -219,22 +219,22 @@ public static long addRowWithValues(Table table, Object... values) {
     /**
      * Creates an empty table whose name is "temp" with 1 column of all our supported column types, currently 7 columns.
      *
-     * @param sharedRealm A {@link SharedRealm} where the table is created.
+     * @param sharedRealm A {@link OsSharedRealm} where the table is created.
      * @return created table.
      */
-    public static Table createTableWithAllColumnTypes(SharedRealm sharedRealm) {
+    public static Table createTableWithAllColumnTypes(OsSharedRealm sharedRealm) {
         return createTableWithAllColumnTypes(sharedRealm, "temp");
     }
 
     /**
      * Creates an empty table with 1 column of all our supported column types, currently 7 columns.
      *
-     * @param sharedRealm A {@link SharedRealm} where the table is created.
+     * @param sharedRealm A {@link OsSharedRealm} where the table is created.
      * @param name name of the table.
      * @return created table.
      */
     @SuppressWarnings("WeakerAccess")
-    public static Table createTableWithAllColumnTypes(SharedRealm sharedRealm,
+    public static Table createTableWithAllColumnTypes(OsSharedRealm sharedRealm,
             @SuppressWarnings("SameParameterValue") String name) {
         boolean wasInTransaction = sharedRealm.isInTransaction();
         if (!wasInTransaction) {
@@ -264,7 +264,7 @@ public static Table createTableWithAllColumnTypes(SharedRealm sharedRealm,
         }
     }
 
-    public static Table createTable(SharedRealm sharedRealm, String name) {
+    public static Table createTable(OsSharedRealm sharedRealm, String name) {
         return createTable(sharedRealm, name, null);
     }
 
@@ -272,7 +272,7 @@ public static Table createTable(SharedRealm sharedRealm, String name) {
         void execute(Table table);
     }
 
-    public static Table createTable(SharedRealm sharedRealm, String name, AdditionalTableSetup additionalSetup) {
+    public static Table createTable(OsSharedRealm sharedRealm, String name, AdditionalTableSetup additionalSetup) {
         boolean wasInTransaction = sharedRealm.isInTransaction();
         if (!wasInTransaction) {
             sharedRealm.beginTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java
index a0c0d8cac8..2363200822 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIColumnInfoTest.java
@@ -40,14 +40,14 @@
     @Rule
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
 
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private Table table;
 
     @Before
     public void setUp() {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
         RealmConfiguration config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
 
         table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
             @Override
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
index 6fa6a32ea9..6e662d46a1 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
@@ -47,7 +47,7 @@
 
     @SuppressWarnings("FieldCanBeLocal")
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private Table table;
     private final long[] oneNullTable = new long[]{NativeObject.NULLPTR};
 
@@ -56,7 +56,7 @@
     public void setUp() throws Exception {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
         config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
     }
 
     @After
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
index 371f8f2176..8b62d0765a 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
@@ -48,13 +48,13 @@
 
     @SuppressWarnings("FieldCanBeLocal")
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
 
     @Before
     public void setUp() throws Exception {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
         config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
 
         sharedRealm.beginTransaction();
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
index c98458c169..cd1794b669 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
@@ -48,7 +48,7 @@
 
     @SuppressWarnings("FieldCanBeLocal")
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
 
     private List<Object> value = new ArrayList<>();
 
@@ -56,7 +56,7 @@
     public void setUp() throws Exception {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
         config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
     }
 
     @After
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
index dc61fbf252..6e92ce4b72 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
@@ -32,7 +32,6 @@
 import java.util.Locale;
 import java.util.concurrent.atomic.AtomicLong;
 
-import io.realm.Realm;
 import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
 import io.realm.TestHelper;
@@ -53,12 +52,12 @@
 
     @SuppressWarnings("FieldCanBeLocal")
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
 
     @Before
     public void setUp() {
         config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
     }
 
     @After
@@ -649,7 +648,7 @@ public void execute(Table table) {
 
     @Test
     public void defaultValue_setAndGet() {
-        final SharedRealm sharedRealm = SharedRealm.getInstance(configFactory.createConfiguration());
+        final OsSharedRealm sharedRealm = OsSharedRealm.getInstance(configFactory.createConfiguration());
         //noinspection TryFinallyCanBeTryWithResources
         try {
             sharedRealm.beginTransaction();
@@ -770,7 +769,7 @@ public void defaultValue_setAndGet() {
 
     @Test
     public void defaultValue_setMultipleTimes() {
-        final SharedRealm sharedRealm = SharedRealm.getInstance(configFactory.createConfiguration());
+        final OsSharedRealm sharedRealm = OsSharedRealm.getInstance(configFactory.createConfiguration());
         //noinspection TryFinallyCanBeTryWithResources
         try {
             sharedRealm.beginTransaction();
@@ -900,7 +899,7 @@ public void defaultValue_setMultipleTimes() {
 
     @Test
     public void defaultValue_overwrittenByNonDefault() {
-        final SharedRealm sharedRealm = SharedRealm.getInstance(configFactory.createConfiguration());
+        final OsSharedRealm sharedRealm = OsSharedRealm.getInstance(configFactory.createConfiguration());
         //noinspection TryFinallyCanBeTryWithResources
         try {
             sharedRealm.beginTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/OsListTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/OsListTests.java
index b5ff28356a..030a8f9667 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/OsListTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/OsListTests.java
@@ -45,7 +45,7 @@
     @Rule
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
 
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private UncheckedRow row;
     private OsObjectSchemaInfo testObjectSchemaInfo;
 
@@ -78,7 +78,7 @@ public void setUp() {
         OsRealmConfig.Builder configBuilder = new OsRealmConfig.Builder(config)
                 .autoUpdateNotification(true)
                 .schemaInfo(schemaInfo);
-        sharedRealm = SharedRealm.getInstance(configBuilder);
+        sharedRealm = OsSharedRealm.getInstance(configBuilder);
         sharedRealm.beginTransaction();
         Table table = sharedRealm.getTable(Table.getTableNameForClass("TestModel"));
         row = table.getUncheckedRow(OsObject.createRow(table));
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/OsObjectStoreTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/OsObjectStoreTests.java
index cb9e620b1b..290a2133e4 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/OsObjectStoreTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/OsObjectStoreTests.java
@@ -44,8 +44,8 @@
     public void callWithLock() {
         RealmConfiguration config = configFactory.createConfiguration();
 
-        // Return false if there are opened SharedRealm instance
-        SharedRealm sharedRealm = SharedRealm.getInstance(config);
+        // Return false if there are opened OsSharedRealm instance
+        OsSharedRealm sharedRealm = OsSharedRealm.getInstance(config);
         assertFalse(OsObjectStore.callWithLock(config, new Runnable() {
             @Override
             public void run() {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java
index c81e4c1aed..48590baf9e 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java
@@ -57,7 +57,7 @@
 
     private final long[] oneNullTable = new long[] {NativeObject.NULLPTR};
 
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private Table table;
 
     @Before
@@ -71,31 +71,31 @@ public void tearDown() {
         sharedRealm.close();
     }
 
-    private SharedRealm getSharedRealm() {
+    private OsSharedRealm getSharedRealm() {
         RealmConfiguration config = configFactory.createConfiguration();
         return getSharedRealm(config);
     }
 
-    private SharedRealm getSharedRealmForLooper() {
+    private OsSharedRealm getSharedRealmForLooper() {
         RealmConfiguration config = looperThread.createConfiguration();
         return getSharedRealm(config);
     }
 
-    private SharedRealm getSharedRealm(RealmConfiguration config) {
+    private OsSharedRealm getSharedRealm(RealmConfiguration config) {
         OsRealmConfig.Builder configBuilder = new OsRealmConfig.Builder(config)
                 .autoUpdateNotification(true);
-        SharedRealm sharedRealm = SharedRealm.getInstance(configBuilder);
+        OsSharedRealm sharedRealm = OsSharedRealm.getInstance(configBuilder);
         sharedRealm.beginTransaction();
         OsObjectStore.setSchemaVersion(sharedRealm, OsObjectStore.SCHEMA_NOT_VERSIONED);
         sharedRealm.commitTransaction();
         return sharedRealm;
     }
 
-    private Table getTable(SharedRealm sharedRealm) {
+    private Table getTable(OsSharedRealm sharedRealm) {
         return sharedRealm.getTable(Table.getTableNameForClass("test_table"));
     }
 
-    private void populateData(SharedRealm sharedRealm) {
+    private void populateData(OsSharedRealm sharedRealm) {
         sharedRealm.beginTransaction();
         table = sharedRealm.createTable(Table.getTableNameForClass("test_table"));
         // Specify the column types and names
@@ -127,13 +127,13 @@ private void populateData(SharedRealm sharedRealm) {
         sharedRealm.commitTransaction();
     }
 
-    private void addRowAsync(final SharedRealm sharedRealm) {
+    private void addRowAsync(final OsSharedRealm sharedRealm) {
         final CountDownLatch latch = new CountDownLatch(1);
         final RealmConfiguration configuration = sharedRealm.getConfiguration();
         new Thread(new Runnable() {
             @Override
             public void run() {
-                SharedRealm sharedRealm = getSharedRealm(configuration);
+                OsSharedRealm sharedRealm = getSharedRealm(configuration);
                 addRow(sharedRealm);
                 sharedRealm.close();
                 latch.countDown();
@@ -142,7 +142,7 @@ public void run() {
         TestHelper.awaitOrFail(latch);
     }
 
-    private void addRow(SharedRealm sharedRealm) {
+    private void addRow(OsSharedRealm sharedRealm) {
         sharedRealm.beginTransaction();
         Table table = getTable(sharedRealm);
         OsObject.createRow(table);
@@ -262,7 +262,7 @@ public void distinct() {
     @Test
     @RunTestInLooperThread
     public void addListener_shouldBeCalledToReturnTheQueryResults() {
-        final SharedRealm sharedRealm = getSharedRealmForLooper();
+        final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
 
@@ -284,7 +284,7 @@ public void onChange(OsResults osResults1) {
     @Test
     public void addListener_shouldBeCalledWhenRefreshToReturnTheQueryResults() {
         final AtomicBoolean onChangeCalled = new AtomicBoolean(false);
-        final SharedRealm sharedRealm = getSharedRealm();
+        final OsSharedRealm sharedRealm = getSharedRealm();
         Table table = getTable(sharedRealm);
 
         final OsResults osResults = new OsResults(sharedRealm, table.where());
@@ -352,7 +352,7 @@ public void onChange(OsResults element) {
     @Test
     @RunTestInLooperThread
     public void addListener_queryNotReturned() {
-        final SharedRealm sharedRealm = getSharedRealmForLooper();
+        final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
 
@@ -374,7 +374,7 @@ public void onChange(OsResults osResults1) {
     @Test
     @RunTestInLooperThread
     public void addListener_queryReturned() {
-        final SharedRealm sharedRealm = getSharedRealmForLooper();
+        final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
 
@@ -399,7 +399,7 @@ public void onChange(OsResults osResults1) {
     @Test
     @RunTestInLooperThread
     public void addListener_triggeredByLocalCommit() {
-        final SharedRealm sharedRealm = getSharedRealmForLooper();
+        final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
         final AtomicInteger listenerCounter = new AtomicInteger(0);
@@ -438,7 +438,7 @@ protected Integer convertRowToObject(UncheckedRow row) {
             return null;
         }
 
-        boolean isDetached(SharedRealm sharedRealm) {
+        boolean isDetached(OsSharedRealm sharedRealm) {
             for (WeakReference<OsResults.Iterator> iteratorRef : sharedRealm.iterators) {
                 OsResults.Iterator iterator = iteratorRef.get();
                 if (iterator == this) {
@@ -481,7 +481,7 @@ public void collectionIterator_invalid_nonLooperThread_byRefresh() {
     @Test
     @RunTestInLooperThread
     public void collectionIterator_invalid_looperThread_byRemoteTransaction() {
-        final SharedRealm sharedRealm = getSharedRealmForLooper();
+        final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
         final OsResults osResults = new OsResults(sharedRealm, table.where());
@@ -536,7 +536,7 @@ public void onChange(OsResults element) {
     @Test
     @RunTestInLooperThread
     public void load() {
-        final SharedRealm sharedRealm = getSharedRealmForLooper();
+        final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         looperThread.closeAfterTest(sharedRealm);
         populateData(sharedRealm);
         final OsResults osResults = new OsResults(sharedRealm, table.where());
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/OsSharedRealmTests.java
similarity index 91%
rename from realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java
rename to realm/realm-library/src/androidTest/java/io/realm/internal/OsSharedRealmTests.java
index 98ff45c0df..8aee472032 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/OsSharedRealmTests.java
@@ -34,19 +34,19 @@
 import static junit.framework.Assert.assertTrue;
 
 @RunWith(AndroidJUnit4.class)
-public class SharedRealmTests {
+public class OsSharedRealmTests {
     @Rule
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
     @Rule
     public final ExpectedException thrown = ExpectedException.none();
 
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
 
     @Before
     public void setUp() {
         config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
     }
 
     @After
@@ -58,10 +58,10 @@ public void tearDown() {
 
     @Test
     public void getVersionID() {
-        SharedRealm.VersionID versionID1 = sharedRealm.getVersionID();
+        OsSharedRealm.VersionID versionID1 = sharedRealm.getVersionID();
         sharedRealm.beginTransaction();
         sharedRealm.commitTransaction();
-        SharedRealm.VersionID versionID2 = sharedRealm.getVersionID();
+        OsSharedRealm.VersionID versionID2 = sharedRealm.getVersionID();
         assertFalse(versionID1.equals(versionID2));
     }
 
@@ -138,7 +138,7 @@ public void renameTable_tableNotExist() {
 
 
     private void changeSchemaByAnotherRealm() {
-        SharedRealm sharedRealm = SharedRealm.getInstance(config);
+        OsSharedRealm sharedRealm = OsSharedRealm.getInstance(config);
         sharedRealm.beginTransaction();
         sharedRealm.createTable("NewTable");
         sharedRealm.commitTransaction();
@@ -151,7 +151,7 @@ public void registerSchemaChangedCallback_beginTransaction() {
 
         assertFalse(sharedRealm.hasTable("NewTable"));
 
-        sharedRealm.registerSchemaChangedCallback(new SharedRealm.SchemaChangedCallback() {
+        sharedRealm.registerSchemaChangedCallback(new OsSharedRealm.SchemaChangedCallback() {
             @Override
             public void onSchemaChanged() {
                 assertTrue(sharedRealm.hasTable("NewTable"));
@@ -169,7 +169,7 @@ public void registerSchemaChangedCallback_refresh() {
 
         assertFalse(sharedRealm.hasTable("NewTable"));
 
-        sharedRealm.registerSchemaChangedCallback(new SharedRealm.SchemaChangedCallback() {
+        sharedRealm.registerSchemaChangedCallback(new OsSharedRealm.SchemaChangedCallback() {
             @Override
             public void onSchemaChanged() {
                 assertTrue(sharedRealm.hasTable("NewTable"));
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
index 84b0cfc9b5..04c431318f 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
@@ -21,7 +21,6 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,13 +32,10 @@
 import io.realm.DynamicRealm;
 import io.realm.DynamicRealmObject;
 import io.realm.FieldAttribute;
-import io.realm.Realm;
 import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
 import io.realm.RealmObjectSchema;
 import io.realm.RealmSchema;
-import io.realm.exceptions.RealmException;
-import io.realm.exceptions.RealmPrimaryKeyConstraintException;
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static junit.framework.Assert.assertFalse;
@@ -55,7 +51,7 @@
 
     private android.content.Context context;
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
 
     @Before
     public void setUp() throws Exception {
@@ -71,7 +67,7 @@ public void tearDown() {
     }
 
     private Table getTableWithStringPrimaryKey() {
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         sharedRealm.beginTransaction();
         OsObjectStore.setSchemaVersion(sharedRealm,0); // Create meta table
         Table t = sharedRealm.createTable(Table.getTableNameForClass("TestTable"));
@@ -82,7 +78,7 @@ private Table getTableWithStringPrimaryKey() {
     }
 
     private Table getTableWithIntegerPrimaryKey() {
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         sharedRealm.beginTransaction();
         OsObjectStore.setSchemaVersion(sharedRealm,0); // Create meta table
         Table t = sharedRealm.createTable(Table.getTableNameForClass("TestTable"));
@@ -178,7 +174,7 @@ public void addEmptyRowWithPrimaryKeyLong() {
     @Test
     public void migratePrimaryKeyTableIfNeeded_first() throws IOException {
         configFactory.copyRealmFromAssets(context, "080_annotationtypes.realm", "default.realm");
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         Table.migratePrimaryKeyTableIfNeeded(sharedRealm);
         Table t = sharedRealm.getTable("class_AnnotationTypes");
         assertEquals("id", OsObjectStore.getPrimaryKeyForObject(sharedRealm, "AnnotationTypes"));
@@ -188,7 +184,7 @@ public void migratePrimaryKeyTableIfNeeded_first() throws IOException {
     @Test
     public void migratePrimaryKeyTableIfNeeded_second() throws IOException {
         configFactory.copyRealmFromAssets(context, "0841_annotationtypes.realm", "default.realm");
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         Table.migratePrimaryKeyTableIfNeeded(sharedRealm);
         Table t = sharedRealm.getTable("class_AnnotationTypes");
         assertEquals("id", OsObjectStore.getPrimaryKeyForObject(sharedRealm, "AnnotationTypes"));
@@ -208,7 +204,7 @@ public void migratePrimaryKeyTableIfNeeded_primaryKeyTableMigratedWithRightName(
                 "Post", "Tags", "Threads", "User");
 
         configFactory.copyRealmFromAssets(context, "0841_pk_migration.realm", "default.realm");
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         Table.migratePrimaryKeyTableIfNeeded(sharedRealm);
 
         Table table = sharedRealm.getTable("pk");
@@ -223,7 +219,7 @@ public void migratePrimaryKeyTableIfNeeded_primaryKeyTableMigratedWithRightName(
     // See https://github.com/realm/realm-java/pull/3488
     @Test
     public void migratePrimaryKeyTableIfNeeded_primaryKeyTableNeedSearchIndex() {
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         sharedRealm.beginTransaction();
         OsObjectStore.setSchemaVersion(sharedRealm,0); // Create meta table
         Table table = sharedRealm.createTable(Table.getTableNameForClass("TestTable"));
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java
index 87ba794501..86f42ff0fc 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java
@@ -71,10 +71,10 @@ public void setUp() throws Exception {
     public void tearDown() {
     }
 
-    private SharedRealm getSharedRealm(RealmConfiguration config) {
+    private OsSharedRealm getSharedRealm(RealmConfiguration config) {
         OsRealmConfig.Builder configBuilder = new OsRealmConfig.Builder(config)
                 .autoUpdateNotification(true);
-        return SharedRealm.getInstance(configBuilder);
+        return OsSharedRealm.getInstance(configBuilder);
     }
 
     @Test
@@ -94,10 +94,10 @@ public void run() {
     @RunTestInLooperThread
     public void addChangeListener_byLocalChanges() {
         final AtomicBoolean commitReturns = new AtomicBoolean(false);
-        SharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
-        sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<SharedRealm>() {
+        OsSharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
+        sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<OsSharedRealm>() {
             @Override
-            public void onChange(SharedRealm sharedRealm) {
+            public void onChange(OsSharedRealm sharedRealm) {
                 // Transaction has been committed in core, but commitTransaction hasn't returned in java.
                 assertFalse(commitReturns.get());
                 looperThread.testComplete();
@@ -111,7 +111,7 @@ public void onChange(SharedRealm sharedRealm) {
 
     private void makeRemoteChanges(final RealmConfiguration config) {
         // We don't use cache from RealmCoordinator
-        SharedRealm sharedRealm = getSharedRealm(config);
+        OsSharedRealm sharedRealm = getSharedRealm(config);
         sharedRealm.beginTransaction();
         sharedRealm.commitTransaction();
         sharedRealm.close();
@@ -128,11 +128,11 @@ public void addChangeListener_byRemoteChanges() {
 
         looperThread.getRealm().close();
 
-        SharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
+        OsSharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
         looperThread.keepStrongReference(sharedRealm);
-        sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<SharedRealm>() {
+        sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<OsSharedRealm>() {
             @Override
-            public void onChange(SharedRealm sharedRealm) {
+            public void onChange(OsSharedRealm sharedRealm) {
                 int commits = commitCounter.get();
                 int listenerCount = listenerCounter.addAndGet(1);
                 assertEquals(commits, listenerCount);
@@ -152,7 +152,7 @@ public void onChange(SharedRealm sharedRealm) {
     @Test
     @RunTestInLooperThread
     public void removeChangeListeners() {
-        SharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
+        OsSharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
         Integer dummyObserver = 1;
         looperThread.keepStrongReference(dummyObserver);
         looperThread.keepStrongReference(sharedRealm);
@@ -162,9 +162,9 @@ public void onChange(Integer dummy) {
                 fail();
             }
         });
-        sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<SharedRealm>() {
+        sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<OsSharedRealm>() {
             @Override
-            public void onChange(SharedRealm sharedRealm) {
+            public void onChange(OsSharedRealm sharedRealm) {
                 sharedRealm.close();
                 looperThread.testComplete();
             }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/SortDescriptorTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/SortDescriptorTests.java
index a8c4bd22f5..6a762423c7 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/SortDescriptorTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/SortDescriptorTests.java
@@ -47,13 +47,13 @@
     @Rule
     public final ExpectedException thrown = ExpectedException.none();
 
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private Table table;
 
     @Before
     public void setUp() {
         RealmConfiguration config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
         sharedRealm.beginTransaction();
         table = sharedRealm.createTable("test_table");
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java
index 3efa42c683..2d8ea55467 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/TableIndexAndDistinctTest.java
@@ -43,14 +43,14 @@
 
     @SuppressWarnings("FieldCanBeLocal")
     private RealmConfiguration config;
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private Table table;
 
     @Before
     public void setUp() throws Exception {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
         config = configFactory.createConfiguration();
-        sharedRealm = SharedRealm.getInstance(config);
+        sharedRealm = OsSharedRealm.getInstance(config);
 
         sharedRealm.beginTransaction();
     }
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java
index b12d014bea..af07ef5986 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java
@@ -38,7 +38,7 @@
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsRealmConfig;
 import io.realm.internal.OsSchemaInfo;
-import io.realm.internal.SharedRealm;
+import io.realm.internal.OsSharedRealm;
 import io.realm.exceptions.IncompatibleSyncedFileException;
 import io.realm.objectserver.utils.StringOnlyModule;
 import io.realm.util.SyncTestUtils;
@@ -157,7 +157,7 @@ public void breakingSchemaChange_throws() {
         list.add(expectedObjectSchema);
         OsSchemaInfo schemaInfo = new OsSchemaInfo(list);
         OsRealmConfig.Builder configBuilder = new OsRealmConfig.Builder(config).schemaInfo(schemaInfo);
-        SharedRealm.getInstance(configBuilder).close();
+        OsSharedRealm.getInstance(configBuilder).close();
 
         thrown.expectMessage(
                 CoreMatchers.containsString("The following changes cannot be made in additive-only schema mode:"));
diff --git a/realm/realm-library/src/main/cpp/CMakeLists.txt b/realm/realm-library/src/main/cpp/CMakeLists.txt
index c36935cb8d..e099fe82b7 100644
--- a/realm/realm-library/src/main/cpp/CMakeLists.txt
+++ b/realm/realm-library/src/main/cpp/CMakeLists.txt
@@ -58,7 +58,7 @@ set(classes_PATH ${CMAKE_SOURCE_DIR}/../../../build/intermediates/classes/${REAL
 set(classes_LIST
     io.realm.internal.Table io.realm.internal.CheckedRow
     io.realm.internal.Util io.realm.internal.UncheckedRow
-    io.realm.internal.TableQuery io.realm.internal.SharedRealm io.realm.internal.TestUtil
+    io.realm.internal.TableQuery io.realm.internal.OsSharedRealm io.realm.internal.TestUtil
     io.realm.log.LogLevel io.realm.log.RealmLog io.realm.internal.Property io.realm.internal.OsSchemaInfo
     io.realm.internal.OsObjectSchemaInfo io.realm.internal.OsResults
     io.realm.internal.NativeObjectReference io.realm.internal.OsCollectionChangeSet
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsObjectStore.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsObjectStore.cpp
index a3018f02d8..4ffff87662 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsObjectStore.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsObjectStore.cpp
@@ -29,9 +29,8 @@ using namespace realm::jni_util;
 using namespace realm::util;
 using namespace realm::_impl;
 
-// FIXME: Enable after https://github.com/realm/realm-object-store/pull/550 merged
-//static_assert(io_realm_internal_OsObjectStore_SCHEMA_NOT_VERSIONED == static_cast<jlong>(ObjectStore::NotVersioned),
-//              "");
+static_assert(io_realm_internal_OsObjectStore_SCHEMA_NOT_VERSIONED == static_cast<jlong>(ObjectStore::NotVersioned),
+              "");
 
 JNIEXPORT void JNICALL Java_io_realm_internal_OsObjectStore_nativeSetPrimaryKeyForObject(JNIEnv* env, jclass,
                                                                                           jlong shared_realm_ptr,
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index b07e992dc8..b54172f289 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -61,7 +61,7 @@ static void finalize_realm_config(jlong ptr)
 
 static JavaClass& get_shared_realm_class(JNIEnv* env)
 {
-    static JavaClass shared_realm_class(env, "io/realm/internal/SharedRealm");
+    static JavaClass shared_realm_class(env, "io/realm/internal/OsSharedRealm");
     return shared_realm_class;
 }
 
@@ -133,7 +133,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSchemaConfi
         if (j_migration_callback) {
             static JavaMethod run_migration_callback_method(
                 env, get_shared_realm_class(env), "runMigrationCallback",
-                "(JLio/realm/internal/OsRealmConfig;Lio/realm/internal/SharedRealm$MigrationCallback;J)V", true);
+                "(JLio/realm/internal/OsRealmConfig;Lio/realm/internal/OsSharedRealm$MigrationCallback;J)V", true);
             // weak ref to avoid leaks caused by circular refs.
             JavaGlobalWeakRef j_config_weak(env, j_config);
             JavaGlobalWeakRef j_migration_cb_weak(env, j_migration_callback);
@@ -142,7 +142,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSchemaConfi
             config.migration_function = [j_migration_cb_weak, j_config_weak](SharedRealm old_realm,
                                                                                  SharedRealm realm, Schema&) {
                 JNIEnv* env = JniUtils::get_env(false);
-                // Java needs a new pointer for the SharedRealm life control.
+                // Java needs a new pointer for the OsSharedRealm life control.
                 SharedRealm* new_shared_realm_ptr = new SharedRealm(realm);
                 JavaGlobalRef config_global = j_config_weak.global_ref(env);
                 if (!config_global) {
@@ -154,7 +154,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSchemaConfi
                                               reinterpret_cast<jlong>(new_shared_realm_ptr), config_global.get(), obj,
                                               old_realm->schema_version());
                 });
-                // Close the SharedRealm. Otherwise it will only be closed when the Java OsSharedRealm gets GCed. And
+                // Close the OsSharedRealm. Otherwise it will only be closed when the Java OsSharedRealm gets GCed. And
                 // that will be too late.
                 TERMINATE_JNI_IF_JAVA_EXCEPTION_OCCURRED(
                     env, [&new_shared_realm_ptr]() { (*new_shared_realm_ptr)->close(); });
@@ -212,13 +212,13 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetInitializat
         if (j_init_callback) {
             static JavaMethod run_initialization_callback_method(
                 env, get_shared_realm_class(env), "runInitializationCallback",
-                "(JLio/realm/internal/OsRealmConfig;Lio/realm/internal/SharedRealm$InitializationCallback;)V", true);
+                "(JLio/realm/internal/OsRealmConfig;Lio/realm/internal/OsSharedRealm$InitializationCallback;)V", true);
             // weak ref to avoid leaks caused by circular refs.
             JavaGlobalWeakRef j_init_cb_weak(env, j_init_callback);
             JavaGlobalWeakRef j_config_weak(env, j_config);
             config.initialization_function = [j_init_cb_weak, j_config_weak](SharedRealm realm) {
                 JNIEnv* env = JniUtils::get_env(false);
-                // Java needs a new pointer for the SharedRealm life control.
+                // Java needs a new pointer for the OsSharedRealm life control.
                 SharedRealm* new_shared_realm_ptr = new SharedRealm(realm);
                 JavaGlobalRef config_global_ref = j_config_weak.global_ref(env);
                 if (!config_global_ref) {
@@ -229,7 +229,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetInitializat
                                               reinterpret_cast<jlong>(new_shared_realm_ptr), config_global_ref.get(),
                                               obj);
                 });
-                // Close the SharedRealm. Otherwise it will only be closed when the Java OsSharedRealm gets GCed. And
+                // Close the OsSharedRealm. Otherwise it will only be closed when the Java OsSharedRealm gets GCed. And
                 // that will be too late.
                 TERMINATE_JNI_IF_JAVA_EXCEPTION_OCCURRED(
                     env, [&new_shared_realm_ptr]() { (*new_shared_realm_ptr)->close(); });
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
similarity index 100%
rename from realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
rename to realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsSharedRealm.cpp
similarity index 86%
rename from realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
rename to realm/realm-library/src/main/cpp/io_realm_internal_OsSharedRealm.cpp
index 9649f18563..1baf6190b7 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsSharedRealm.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-#include "io_realm_internal_SharedRealm.h"
+#include "io_realm_internal_OsSharedRealm.h"
 #if REALM_ENABLE_SYNC
 #include "object-store/src/sync/sync_manager.hpp"
 #include "object-store/src/sync/sync_config.hpp"
@@ -49,7 +49,7 @@ static const char* c_table_name_exists_exception_msg = "Class already exists: '%
 typedef ObservableCollectionWrapper<Results> ResultsWrapper;
 #endif
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeInit(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeInit(JNIEnv* env, jclass,
                                                                      jstring temporary_directory_path)
 {
     TR_ENTER()
@@ -61,7 +61,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeInit(JNIEnv* env
     CATCH_STD()
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetSharedRealm(JNIEnv* env, jclass, jlong config_ptr,
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeGetSharedRealm(JNIEnv* env, jclass, jlong config_ptr,
                                                                                 jobject realm_notifier)
 {
     TR_ENTER_PTR(config_ptr)
@@ -102,7 +102,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetSharedRealm(
     return reinterpret_cast<jlong>(nullptr);
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm(JNIEnv*, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeCloseSharedRealm(JNIEnv*, jclass,
                                                                                  jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -114,7 +114,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm
     }
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeBeginTransaction(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeBeginTransaction(JNIEnv* env, jclass,
                                                                                  jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -126,7 +126,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeBeginTransaction
     CATCH_STD()
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCommitTransaction(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeCommitTransaction(JNIEnv* env, jclass,
                                                                                   jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -144,7 +144,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCommitTransactio
     CATCH_STD()
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCancelTransaction(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeCancelTransaction(JNIEnv* env, jclass,
                                                                                   jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -157,7 +157,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCancelTransactio
 }
 
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsInTransaction(JNIEnv*, jclass,
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeIsInTransaction(JNIEnv*, jclass,
                                                                                     jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -166,7 +166,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsInTransact
     return static_cast<jboolean>(shared_realm->is_in_transaction());
 }
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsEmpty(JNIEnv* env, jclass,
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeIsEmpty(JNIEnv* env, jclass,
                                                                             jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -179,7 +179,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsEmpty(JNIE
     return JNI_FALSE;
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRefresh(JNIEnv* env, jclass, jlong shared_realm_ptr)
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeRefresh(JNIEnv* env, jclass, jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
@@ -190,7 +190,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRefresh(JNIEnv*
     CATCH_STD()
 }
 
-JNIEXPORT jlongArray JNICALL Java_io_realm_internal_SharedRealm_nativeGetVersionID(JNIEnv* env, jclass,
+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_OsSharedRealm_nativeGetVersionID(JNIEnv* env, jclass,
                                                                                    jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -218,7 +218,7 @@ JNIEXPORT jlongArray JNICALL Java_io_realm_internal_SharedRealm_nativeGetVersion
     return NULL;
 }
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsClosed(JNIEnv*, jclass, jlong shared_realm_ptr)
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeIsClosed(JNIEnv*, jclass, jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
@@ -227,7 +227,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsClosed(JNI
 }
 
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetTable(JNIEnv* env, jclass, jlong shared_realm_ptr,
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeGetTable(JNIEnv* env, jclass, jlong shared_realm_ptr,
                                                                           jstring table_name)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -251,7 +251,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetTable(JNIEnv
     return reinterpret_cast<jlong>(nullptr);
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateTable(JNIEnv* env, jclass,
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeCreateTable(JNIEnv* env, jclass,
                                                                              jlong shared_realm_ptr,
                                                                              jstring j_table_name)
 {
@@ -287,7 +287,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateTable(JNI
     return reinterpret_cast<jlong>(nullptr);
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateTableWithPrimaryKeyField(
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeCreateTableWithPrimaryKeyField(
     JNIEnv* env, jclass, jlong shared_realm_ptr, jstring j_table_name, jstring j_field_name, jboolean is_string_type,
     jboolean is_nullable)
 {
@@ -329,7 +329,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateTableWith
     return reinterpret_cast<jlong>(nullptr);
 }
 
-JNIEXPORT jstring JNICALL Java_io_realm_internal_SharedRealm_nativeGetTableName(JNIEnv* env, jclass,
+JNIEXPORT jstring JNICALL Java_io_realm_internal_OsSharedRealm_nativeGetTableName(JNIEnv* env, jclass,
                                                                                 jlong shared_realm_ptr, jint index)
 {
 
@@ -343,7 +343,7 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_SharedRealm_nativeGetTableName(
     return NULL;
 }
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeHasTable(JNIEnv* env, jclass,
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeHasTable(JNIEnv* env, jclass,
                                                                              jlong shared_realm_ptr,
                                                                              jstring table_name)
 {
@@ -358,7 +358,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeHasTable(JNI
     return JNI_FALSE;
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRenameTable(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeRenameTable(JNIEnv* env, jclass,
                                                                             jlong shared_realm_ptr,
                                                                             jstring old_table_name,
                                                                             jstring new_table_name)
@@ -380,7 +380,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRenameTable(JNIE
     CATCH_STD()
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeSize(JNIEnv* env, jclass, jlong shared_realm_ptr)
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeSize(JNIEnv* env, jclass, jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
@@ -393,7 +393,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeSize(JNIEnv* en
     return 0;
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeWriteCopy(JNIEnv* env, jclass, jlong shared_realm_ptr,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeWriteCopy(JNIEnv* env, jclass, jlong shared_realm_ptr,
                                                                           jstring path, jbyteArray key)
 {
     TR_ENTER_PTR(shared_realm_ptr);
@@ -407,7 +407,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeWriteCopy(JNIEnv
     CATCH_STD()
 }
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeWaitForChange(JNIEnv* env, jclass,
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeWaitForChange(JNIEnv* env, jclass,
                                                                                   jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr);
@@ -422,7 +422,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeWaitForChang
     return JNI_FALSE;
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeStopWaitForChange(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeStopWaitForChange(JNIEnv* env, jclass,
                                                                                   jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr);
@@ -435,7 +435,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeStopWaitForChang
     CATCH_STD()
 }
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeCompact(JNIEnv* env, jclass,
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeCompact(JNIEnv* env, jclass,
                                                                             jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr);
@@ -455,13 +455,13 @@ static void finalize_shared_realm(jlong ptr)
     delete reinterpret_cast<SharedRealm*>(ptr);
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetFinalizerPtr(JNIEnv*, jclass)
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeGetFinalizerPtr(JNIEnv*, jclass)
 {
     TR_ENTER()
     return reinterpret_cast<jlong>(&finalize_shared_realm);
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeSetAutoRefresh(JNIEnv* env, jclass,
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeSetAutoRefresh(JNIEnv* env, jclass,
                                                                                jlong shared_realm_ptr,
                                                                                jboolean enabled)
 {
@@ -473,7 +473,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeSetAutoRefresh(J
     CATCH_STD()
 }
 
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsAutoRefresh(JNIEnv* env, jclass,
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsSharedRealm_nativeIsAutoRefresh(JNIEnv* env, jclass,
                                                                                   jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -485,7 +485,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_SharedRealm_nativeIsAutoRefres
     return JNI_FALSE;
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetSchemaInfo(JNIEnv*, jclass,
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSharedRealm_nativeGetSchemaInfo(JNIEnv*, jclass,
                                                                                jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -495,7 +495,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeGetSchemaInfo(J
     return reinterpret_cast<jlong>(&shared_realm->schema());
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRegisterSchemaChangedCallback(
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeRegisterSchemaChangedCallback(
     JNIEnv* env, jclass, jlong shared_realm_ptr, jobject j_schema_changed_callback)
 {
     TR_ENTER_PTR(shared_realm_ptr)
@@ -510,7 +510,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRegisterSchemaCh
     }
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRegisterPartialSyncQuery(
+JNIEXPORT void JNICALL Java_io_realm_internal_OsSharedRealm_nativeRegisterPartialSyncQuery(
     REALM_UNUSED JNIEnv* env, REALM_UNUSED jobject j_shared_realm_instance, REALM_UNUSED jlong shared_realm_ptr, REALM_UNUSED jstring j_class_name,
     REALM_UNUSED jstring j_query, REALM_UNUSED jobject j_callback)
 {
@@ -528,9 +528,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeRegisterPartialS
         JavaGlobalRef j_callback_ref(env, j_callback);
         JavaGlobalWeakRef j_shared_realm_instance_ref(env, j_shared_realm_instance);
 
-        static JavaClass shared_realm_class(env, "io/realm/internal/SharedRealm");
+        static JavaClass shared_realm_class(env, "io/realm/internal/OsSharedRealm");
         static JavaMethod partial_sync_cb(env, shared_realm_class, "runPartialSyncRegistrationCallback",
-                                          "(Ljava/lang/String;JLio/realm/internal/SharedRealm$PartialSyncCallback;)V");
+                                          "(Ljava/lang/String;JLio/realm/internal/OsSharedRealm$PartialSyncCallback;)V");
 
         auto cb = [j_callback_ref, j_shared_realm_instance_ref](Results results, std::exception_ptr err) {
             JNIEnv* env = JniUtils::get_env(true);
diff --git a/realm/realm-library/src/main/cpp/java_class_global_def.hpp b/realm/realm-library/src/main/cpp/java_class_global_def.hpp
index 268082de8e..f1baf81348 100644
--- a/realm/realm-library/src/main/cpp/java_class_global_def.hpp
+++ b/realm/realm-library/src/main/cpp/java_class_global_def.hpp
@@ -50,7 +50,7 @@ class JavaClassGlobalDef {
         , m_java_util_date(env, "java/util/Date", false)
         , m_java_lang_string(env, "java/lang/String", false)
         , m_java_lang_boolean(env, "java/lang/Boolean", false)
-        , m_shared_realm_schema_change_callback(env, "io/realm/internal/SharedRealm$SchemaChangedCallback", false)
+        , m_shared_realm_schema_change_callback(env, "io/realm/internal/OsSharedRealm$SchemaChangedCallback", false)
         , m_realm_notifier(env, "io/realm/internal/RealmNotifier", false)
     {
     }
@@ -154,7 +154,7 @@ class JavaClassGlobalDef {
     // return nullptr if binary_data is null
     static jbyteArray new_byte_array(JNIEnv* env, const BinaryData& binary_data);
 
-    // io.realm.internal.SharedRealm.SchemaChangedCallback
+    // io.realm.internal.OsSharedRealm.SchemaChangedCallback
     inline static const jni_util::JavaClass& shared_realm_schema_change_callback()
     {
         return instance()->m_shared_realm_schema_change_callback;
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index f21d1bfc09..296cac34ff 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -25,7 +25,7 @@
 
 #include "util.hpp"
 #include "io_realm_internal_Util.h"
-#include "io_realm_internal_SharedRealm.h"
+#include "io_realm_internal_OsSharedRealm.h"
 #include "shared_realm.hpp"
 #include "results.hpp"
 #include "list.hpp"
@@ -213,25 +213,25 @@ void ThrowRealmFileException(JNIEnv* env, const std::string& message, realm::Rea
     jbyte kind_code = -1; // To suppress compile warning.
     switch (kind) {
         case realm::RealmFileException::Kind::AccessError:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_ACCESS_ERROR;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_ACCESS_ERROR;
             break;
         case realm::RealmFileException::Kind::BadHistoryError:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_BAD_HISTORY;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_BAD_HISTORY;
             break;
         case realm::RealmFileException::Kind::PermissionDenied:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_PERMISSION_DENIED;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_PERMISSION_DENIED;
             break;
         case realm::RealmFileException::Kind::Exists:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_EXISTS;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_EXISTS;
             break;
         case realm::RealmFileException::Kind::NotFound:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_NOT_FOUND;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_NOT_FOUND;
             break;
         case realm::RealmFileException::Kind::IncompatibleLockFile:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_INCOMPATIBLE_LOCK_FILE;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_INCOMPATIBLE_LOCK_FILE;
             break;
         case realm::RealmFileException::Kind::FormatUpgradeRequired:
-            kind_code = io_realm_internal_SharedRealm_FILE_EXCEPTION_KIND_FORMAT_UPGRADE_REQUIRED;
+            kind_code = io_realm_internal_OsSharedRealm_FILE_EXCEPTION_KIND_FORMAT_UPGRADE_REQUIRED;
             break;
         case realm::RealmFileException::Kind::IncompatibleSyncedRealm:
 #if REALM_ENABLE_SYNC
diff --git a/realm/realm-library/src/main/java/io/realm/BaseRealm.java b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
index aa3f85e9e4..37eddd6371 100644
--- a/realm/realm-library/src/main/java/io/realm/BaseRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
@@ -38,9 +38,9 @@
 import io.realm.internal.OsObjectStore;
 import io.realm.internal.OsRealmConfig;
 import io.realm.internal.OsSchemaInfo;
+import io.realm.internal.OsSharedRealm;
 import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.Row;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.UncheckedRow;
 import io.realm.internal.Util;
@@ -76,9 +76,9 @@
     // Which RealmCache is this Realm associated to. It is null if the Realm instance is opened without being put into a
     // cache. It is also null if the Realm is closed.
     private RealmCache realmCache;
-    public SharedRealm sharedRealm;
+    public OsSharedRealm sharedRealm;
     private boolean shouldCloseSharedRealm;
-    private SharedRealm.SchemaChangedCallback schemaChangedCallback = new SharedRealm.SchemaChangedCallback() {
+    private OsSharedRealm.SchemaChangedCallback schemaChangedCallback = new OsSharedRealm.SchemaChangedCallback() {
         @Override
         public void onSchemaChanged() {
             RealmSchema schema = getSchema();
@@ -100,17 +100,17 @@ public void onSchemaChanged() {
         this.configuration = configuration;
         this.realmCache = null;
 
-        SharedRealm.MigrationCallback migrationCallback = null;
+        OsSharedRealm.MigrationCallback migrationCallback = null;
         if (schemaInfo != null && configuration.getMigration() != null) {
             migrationCallback = createMigrationCallback(configuration.getMigration());
         }
 
-        SharedRealm.InitializationCallback initializationCallback = null;
+        OsSharedRealm.InitializationCallback initializationCallback = null;
         final Realm.Transaction initialDataTransaction = configuration.getInitialDataTransaction();
         if (initialDataTransaction != null) {
-            initializationCallback = new SharedRealm.InitializationCallback() {
+            initializationCallback = new OsSharedRealm.InitializationCallback() {
                 @Override
-                public void onInit(SharedRealm sharedRealm) {
+                public void onInit(OsSharedRealm sharedRealm) {
                     initialDataTransaction.execute(Realm.createInstance(sharedRealm));
                 }
             };
@@ -121,15 +121,15 @@ public void onInit(SharedRealm sharedRealm) {
                 .migrationCallback(migrationCallback)
                 .schemaInfo(schemaInfo)
                 .initializationCallback(initializationCallback);
-        this.sharedRealm = SharedRealm.getInstance(configBuilder);
+        this.sharedRealm = OsSharedRealm.getInstance(configBuilder);
         this.shouldCloseSharedRealm = true;
 
         sharedRealm.registerSchemaChangedCallback(schemaChangedCallback);
     }
 
-    // Create a realm instance directly from a SharedRealm instance. This instance doesn't have the ownership of the
-    // given SharedRealm instance. The SharedRealm instance should not be closed when close() called.
-    BaseRealm(SharedRealm sharedRealm) {
+    // Create a realm instance directly from a OsSharedRealm instance. This instance doesn't have the ownership of the
+    // given OsSharedRealm instance. The OsSharedRealm instance should not be closed when close() called.
+    BaseRealm(OsSharedRealm sharedRealm) {
         this.threadId = Thread.currentThread().getId();
         this.configuration = sharedRealm.getConfiguration();
         this.realmCache = null;
@@ -633,7 +633,7 @@ public void run() {
      * @return {@code true} if compaction succeeded, {@code false} otherwise.
      */
     static boolean compactRealm(final RealmConfiguration configuration) {
-        SharedRealm sharedRealm = SharedRealm.getInstance(configuration);
+        OsSharedRealm sharedRealm = OsSharedRealm.getInstance(configuration);
         Boolean result = sharedRealm.compact();
         sharedRealm.close();
         return result;
@@ -680,7 +680,7 @@ public void onResult(int count) {
 
                 RealmProxyMediator mediator = configuration.getSchemaMediator();
                 OsSchemaInfo schemaInfo = new OsSchemaInfo(mediator.getExpectedObjectSchemaInfoMap().values());
-                SharedRealm.MigrationCallback migrationCallback = null;
+                OsSharedRealm.MigrationCallback migrationCallback = null;
                 final RealmMigration migrationToBeApplied = migration != null ? migration : configuration.getMigration();
                 if (migrationToBeApplied != null) {
                     migrationCallback = createMigrationCallback(migrationToBeApplied);
@@ -689,10 +689,10 @@ public void onResult(int count) {
                         .autoUpdateNotification(false)
                         .schemaInfo(schemaInfo)
                         .migrationCallback(migrationCallback);
-                SharedRealm sharedRealm = null;
+                OsSharedRealm sharedRealm = null;
                 try {
                     sharedRealm =
-                            SharedRealm.getInstance(configBuilder);
+                            OsSharedRealm.getInstance(configBuilder);
                 } finally {
                     if (sharedRealm != null) {
                         sharedRealm.close();
@@ -707,10 +707,10 @@ public void onResult(int count) {
         }
     }
 
-    private static SharedRealm.MigrationCallback createMigrationCallback(final RealmMigration migration) {
-        return new SharedRealm.MigrationCallback() {
+    private static OsSharedRealm.MigrationCallback createMigrationCallback(final RealmMigration migration) {
+        return new OsSharedRealm.MigrationCallback() {
             @Override
-            public void onMigrationNeeded(SharedRealm sharedRealm, long oldVersion, long newVersion) {
+            public void onMigrationNeeded(OsSharedRealm sharedRealm, long oldVersion, long newVersion) {
                 migration.migrate(DynamicRealm.createInstance(sharedRealm), oldVersion, newVersion);
             }
         };
@@ -730,7 +730,7 @@ protected void finalize() throws Throwable {
         super.finalize();
     }
 
-    SharedRealm getSharedRealm() {
+    OsSharedRealm getSharedRealm() {
         return sharedRealm;
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index ec14a7169e..c62b5268d6 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -24,7 +24,7 @@
 import io.realm.internal.CheckedRow;
 import io.realm.internal.OsObject;
 import io.realm.internal.OsObjectStore;
-import io.realm.internal.SharedRealm;
+import io.realm.internal.OsSharedRealm;
 import io.realm.internal.Table;
 import io.realm.log.RealmLog;
 
@@ -77,7 +77,7 @@ public void onResult(int count) {
         this.schema = new MutableRealmSchema(this);
     }
 
-    private DynamicRealm(SharedRealm sharedRealm) {
+    private DynamicRealm(OsSharedRealm sharedRealm) {
         super(sharedRealm);
         this.schema = new MutableRealmSchema(this);
     }
@@ -268,13 +268,13 @@ static DynamicRealm createInstance(RealmCache cache) {
     }
 
     /**
-     * Creates a {@link DynamicRealm} instance with a given {@link SharedRealm} instance without owning it.
+     * Creates a {@link DynamicRealm} instance with a given {@link OsSharedRealm} instance without owning it.
      * This is designed to be used in the migration block when opening a typed Realm instance.
      *
-     * @param sharedRealm the existing {@link SharedRealm} instance.
+     * @param sharedRealm the existing {@link OsSharedRealm} instance.
      * @return a {@link DynamicRealm} instance.
      */
-    static DynamicRealm createInstance(SharedRealm sharedRealm) {
+    static DynamicRealm createInstance(OsSharedRealm sharedRealm) {
         return new DynamicRealm(sharedRealm);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 90415531b0..769e460c32 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -60,11 +60,11 @@
 import io.realm.internal.OsObjectStore;
 import io.realm.internal.OsResults;
 import io.realm.internal.OsSchemaInfo;
+import io.realm.internal.OsSharedRealm;
 import io.realm.internal.RealmCore;
 import io.realm.internal.RealmNotifier;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.RealmProxyMediator;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.async.RealmAsyncTaskImpl;
 import io.realm.log.RealmLog;
@@ -172,7 +172,7 @@ private Realm(RealmCache cache) {
         }
     }
 
-    private Realm(SharedRealm sharedRealm) {
+    private Realm(OsSharedRealm sharedRealm) {
         super(sharedRealm);
         schema = new ImmutableRealmSchema(this,
                 new ColumnIndices(configuration.getSchemaMediator(), sharedRealm.getSchemaInfo()));
@@ -252,7 +252,7 @@ public static synchronized void init(Context context) {
             } else {
                 BaseRealm.applicationContext = context;
             }
-            SharedRealm.initialize(new File(context.getFilesDir(), ".realm.temp"));
+            OsSharedRealm.initialize(new File(context.getFilesDir(), ".realm.temp"));
         }
     }
 
@@ -425,10 +425,10 @@ static Realm createInstance(RealmCache cache) {
     }
 
     /**
-     * Creates a {@code Realm} instance directly from a {@link SharedRealm}. This {@code Realm} doesn't need to be
+     * Creates a {@code Realm} instance directly from a {@link OsSharedRealm}. This {@code Realm} doesn't need to be
      * closed.
      */
-    static Realm createInstance(SharedRealm sharedRealm) {
+    static Realm createInstance(OsSharedRealm sharedRealm) {
         return new Realm(sharedRealm);
     }
 
@@ -1480,7 +1480,7 @@ public RealmAsyncTask executeTransactionAsync(final Transaction transaction,
             sharedRealm.capabilities.checkCanDeliverNotification("Callback cannot be delivered on current thread.");
         }
 
-        // We need to use the same configuration to open a background SharedRealm (i.e Realm)
+        // We need to use the same configuration to open a background OsSharedRealm (i.e Realm)
         // to perform the transaction
         final RealmConfiguration realmConfiguration = getConfiguration();
         // We need to deliver the callback even if the Realm is closed. So acquire a reference to the notifier here.
@@ -1493,7 +1493,7 @@ public void run() {
                     return;
                 }
 
-                SharedRealm.VersionID versionID = null;
+                OsSharedRealm.VersionID versionID = null;
                 Throwable exception = null;
 
                 final Realm bgRealm = Realm.getInstance(realmConfiguration);
@@ -1522,7 +1522,7 @@ public void run() {
                 }
 
                 final Throwable backgroundException = exception;
-                final SharedRealm.VersionID backgroundVersionID = versionID;
+                final OsSharedRealm.VersionID backgroundVersionID = versionID;
                 // Cannot be interrupted anymore.
                 if (canDeliverNotification) {
                     if (backgroundVersionID != null && onSuccess != null) {
@@ -1719,7 +1719,7 @@ public static boolean compactRealm(RealmConfiguration configuration) {
         sharedRealm.capabilities.checkCanDeliverNotification(BaseRealm.LISTENER_NOT_ALLOWED_MESSAGE);
 
         String className = configuration.getSchemaMediator().getSimpleClassName(clazz);
-        SharedRealm.PartialSyncCallback internalCallback = new SharedRealm.PartialSyncCallback(className) {
+        OsSharedRealm.PartialSyncCallback internalCallback = new OsSharedRealm.PartialSyncCallback(className) {
             @Override
             public void onSuccess(OsResults osResults) {
                 RealmResults<E> results = new RealmResults<>(Realm.this, osResults, clazz);
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCache.java b/realm/realm-library/src/main/java/io/realm/RealmCache.java
index a7544f5da6..1399b3e22f 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCache.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCache.java
@@ -36,8 +36,8 @@
 import io.realm.internal.Capabilities;
 import io.realm.internal.ObjectServerFacade;
 import io.realm.internal.OsObjectStore;
+import io.realm.internal.OsSharedRealm;
 import io.realm.internal.RealmNotifier;
-import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
 import io.realm.internal.Util;
 import io.realm.internal.android.AndroidCapabilities;
@@ -291,14 +291,14 @@ private static RealmCache getCache(String realmPath, boolean createIfNotExist) {
             copyAssetFileIfNeeded(configuration);
             boolean fileExists = configuration.realmExists();
 
-            SharedRealm sharedRealm = null;
+            OsSharedRealm sharedRealm = null;
             try {
                 if (configuration.isSyncConfiguration()) {
                     // If waitForInitialRemoteData() was enabled, we need to make sure that all data is downloaded
                     // before proceeding. We need to open the Realm instance first to start any potential underlying
                     // SyncSession so this will work. TODO: This needs to be decoupled.
                     if (!fileExists) {
-                        sharedRealm = SharedRealm.getInstance(configuration);
+                        sharedRealm = OsSharedRealm.getInstance(configuration);
                         try {
                             ObjectServerFacade.getSyncFacadeIfPossible().downloadRemoteChanges(configuration);
                         } catch (Throwable t) {
@@ -316,7 +316,7 @@ private static RealmCache getCache(String realmPath, boolean createIfNotExist) {
                 } else {
                     if (fileExists) {
                         // Primary key problem only exists before we release sync.
-                        sharedRealm = SharedRealm.getInstance(configuration);
+                        sharedRealm = OsSharedRealm.getInstance(configuration);
                         Table.migratePrimaryKeyTableIfNeeded(sharedRealm);
                     }
                 }
diff --git a/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java b/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
index 716c0266c6..b6db6ed87a 100644
--- a/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
+++ b/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
@@ -18,7 +18,7 @@
 import java.util.Locale;
 
 import io.realm.internal.Keep;
-import io.realm.internal.SharedRealm;
+import io.realm.internal.OsSharedRealm;
 
 
 /**
@@ -70,21 +70,21 @@
         // Created from byte values by JNI.
         static Kind getKind(byte value) {
             switch (value) {
-                case SharedRealm.FILE_EXCEPTION_KIND_ACCESS_ERROR:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_ACCESS_ERROR:
                     return ACCESS_ERROR;
-                case SharedRealm.FILE_EXCEPTION_KIND_PERMISSION_DENIED:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_PERMISSION_DENIED:
                     return PERMISSION_DENIED;
-                case SharedRealm.FILE_EXCEPTION_KIND_EXISTS:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_EXISTS:
                     return EXISTS;
-                case SharedRealm.FILE_EXCEPTION_KIND_NOT_FOUND:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_NOT_FOUND:
                     return NOT_FOUND;
-                case SharedRealm.FILE_EXCEPTION_KIND_INCOMPATIBLE_LOCK_FILE:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_INCOMPATIBLE_LOCK_FILE:
                     return INCOMPATIBLE_LOCK_FILE;
-                case SharedRealm.FILE_EXCEPTION_KIND_FORMAT_UPGRADE_REQUIRED:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_FORMAT_UPGRADE_REQUIRED:
                     return FORMAT_UPGRADE_REQUIRED;
-                case SharedRealm.FILE_EXCEPTION_KIND_BAD_HISTORY:
+                case OsSharedRealm.FILE_EXCEPTION_KIND_BAD_HISTORY:
                     return BAD_HISTORY;
-                case SharedRealm.FILE_EXCEPTION_INCOMPATIBLE_SYNC_FILE:
+                case OsSharedRealm.FILE_EXCEPTION_INCOMPATIBLE_SYNC_FILE:
                     return INCOMPATIBLE_SYNC_FILE;
                 default:
                     throw new RuntimeException("Unknown value for RealmFileException kind.");
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java b/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
index 98f47c2485..07bceca628 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
@@ -55,7 +55,7 @@
             new HashMap<String, ColumnInfo>();
 
     private final RealmProxyMediator mediator;
-    // Due to the nature of Object Store's Realm::m_schema, SharedRealm's OsObjectSchemaInfo object is fixed after set.
+    // Due to the nature of Object Store's Realm::m_schema, OsSharedRealm's OsObjectSchemaInfo object is fixed after set.
     private final OsSchemaInfo osSchemaInfo;
 
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java b/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java
index c56343a1fa..1825e855b9 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java
@@ -42,7 +42,7 @@
  * and the column index field is the index of the backlink source field, in the source table</li>
  * </ul>
  * <p>
- * The instance of this class is dedicated to a single {@link SharedRealm} instance. Thus this is not supposed to be
+ * The instance of this class is dedicated to a single {@link OsSharedRealm} instance. Thus this is not supposed to be
  * used across threads.
  * An instance can be mutated, after construction, in four ways:
  * <ul>
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsList.java b/realm/realm-library/src/main/java/io/realm/internal/OsList.java
index bedf3e928a..f532d6df69 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsList.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsList.java
@@ -20,7 +20,7 @@
             new ObserverPairList<CollectionObserverPair>();
 
     public OsList(UncheckedRow row, long columnIndex) {
-        SharedRealm sharedRealm = row.getTable().getSharedRealm();
+        OsSharedRealm sharedRealm = row.getTable().getSharedRealm();
         long[] ptrs = nativeCreate(sharedRealm.getNativePtr(), row.getNativePtr(), columnIndex);
 
         this.nativePtr = ptrs[0];
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
index 8422bc5bfb..f332befe50 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
@@ -98,7 +98,7 @@ public void onCalled(ObjectObserverPair pair, Object observer) {
 
     private ObserverPairList<ObjectObserverPair> observerPairs = new ObserverPairList<ObjectObserverPair>();
 
-    public OsObject(SharedRealm sharedRealm, UncheckedRow row) {
+    public OsObject(OsSharedRealm sharedRealm, UncheckedRow row) {
         nativePtr = nativeCreate(sharedRealm.getNativePtr(), row.getNativePtr());
         sharedRealm.context.addReference(this);
     }
@@ -152,11 +152,11 @@ public void setObserverPairs(ObserverPairList<ObjectObserverPair> pairs) {
     /**
      * Create an object in the given table which doesn't have a primary key column defined.
      *
-     * @param table the table where the object is created. This table must be atached to {@link SharedRealm}.
+     * @param table the table where the object is created. This table must be atached to {@link OsSharedRealm}.
      * @return a newly created {@code UncheckedRow}.
      */
     public static UncheckedRow create(Table table) {
-        final SharedRealm sharedRealm = table.getSharedRealm();
+        final OsSharedRealm sharedRealm = table.getSharedRealm();
         return new UncheckedRow(sharedRealm.context, table,
                 nativeCreateNewObject(sharedRealm.getNativePtr(), table.getNativePtr()));
     }
@@ -169,7 +169,7 @@ public static UncheckedRow create(Table table) {
      * @return a newly created row's index.
      */
     public static long createRow(Table table) {
-        final SharedRealm sharedRealm = table.getSharedRealm();
+        final OsSharedRealm sharedRealm = table.getSharedRealm();
         return nativeCreateRow(sharedRealm.getNativePtr(), table.getNativePtr());
     }
 
@@ -186,13 +186,13 @@ private static long getAndVerifyPrimaryKeyColumnIndex(Table table) {
      * Create an object in the given table which has a primary key column defined, and set the primary key with given
      * value.
      *
-     * @param table the table where the object is created. This table must be atached to {@link SharedRealm}.
+     * @param table the table where the object is created. This table must be atached to {@link OsSharedRealm}.
      * @return a newly created {@code UncheckedRow}.
      */
     public static UncheckedRow createWithPrimaryKey(Table table, @Nullable Object primaryKeyValue) {
         long primaryKeyColumnIndex = getAndVerifyPrimaryKeyColumnIndex(table);
         RealmFieldType type = table.getColumnType(primaryKeyColumnIndex);
-        final SharedRealm sharedRealm = table.getSharedRealm();
+        final OsSharedRealm sharedRealm = table.getSharedRealm();
 
         if (type == RealmFieldType.STRING) {
             if (primaryKeyValue != null && !(primaryKeyValue instanceof String)) {
@@ -225,7 +225,7 @@ public static UncheckedRow createWithPrimaryKey(Table table, @Nullable Object pr
     // FIXME: Proxy could just pass the pk index here which is much faster.
     public static long createRowWithPrimaryKey(Table table, long primaryKeyColumnIndex, Object primaryKeyValue) {
         RealmFieldType type = table.getColumnType(primaryKeyColumnIndex);
-        final SharedRealm sharedRealm = table.getSharedRealm();
+        final OsSharedRealm sharedRealm = table.getSharedRealm();
 
         if (type == RealmFieldType.STRING) {
             if (primaryKeyValue != null && !(primaryKeyValue instanceof String)) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObjectStore.java b/realm/realm-library/src/main/java/io/realm/internal/OsObjectStore.java
index aa2b9f8192..5623f8d086 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObjectStore.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObjectStore.java
@@ -38,28 +38,28 @@
      * @throws IllegalStateException if the given field is not a valid type for primary key.
      * @throws IllegalStateException if there are duplicated values for the given field.
      */
-    public static void setPrimaryKeyForObject(SharedRealm sharedRealm, String className,
+    public static void setPrimaryKeyForObject(OsSharedRealm sharedRealm, String className,
                                               @Nullable String primaryKeyFieldName) {
         nativeSetPrimaryKeyForObject(sharedRealm.getNativePtr(), className, primaryKeyFieldName);
     }
 
-    public static @Nullable String getPrimaryKeyForObject(SharedRealm sharedRealm, String className) {
+    public static @Nullable String getPrimaryKeyForObject(OsSharedRealm sharedRealm, String className) {
         return nativeGetPrimaryKeyForObject(sharedRealm.getNativePtr(), className);
     }
 
     /**
-     * Sets the schema version to the given {@link SharedRealm}. This method will create meta tables if they don't exist.
+     * Sets the schema version to the given {@link OsSharedRealm}. This method will create meta tables if they don't exist.
      * @throws IllegalStateException if it is not in a transaction.
      */
-    public static void setSchemaVersion(SharedRealm sharedRealm, long schemaVersion) {
+    public static void setSchemaVersion(OsSharedRealm sharedRealm, long schemaVersion) {
         nativeSetSchemaVersion(sharedRealm.getNativePtr(), schemaVersion);
     }
 
     /**
-     * Returns the schema version of the given {@link SharedRealm}. If meta tables don't exist, this will return
+     * Returns the schema version of the given {@link OsSharedRealm}. If meta tables don't exist, this will return
      * {@link #SCHEMA_NOT_VERSIONED}.
      */
-    public static long getSchemaVersion(SharedRealm sharedRealm) {
+    public static long getSchemaVersion(OsSharedRealm sharedRealm) {
         return nativeGetSchemaVersion(sharedRealm.getNativePtr());
     }
 
@@ -69,7 +69,7 @@ public static long getSchemaVersion(SharedRealm sharedRealm) {
      * @return {@code true} if the table has been deleted. {@code false} if the table doesn't exist.
      * @throws IllegalStateException if it is not in a transaction.
      */
-    public static boolean deleteTableForObject(SharedRealm sharedRealm, String className) {
+    public static boolean deleteTableForObject(OsSharedRealm sharedRealm, String className) {
         return nativeDeleteTableForObject(sharedRealm.getNativePtr(), className);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
index afc199fe72..8b731071c6 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
@@ -78,13 +78,13 @@ public byte getNativeValue() {
 
     /**
      * Builder class for creating {@code OsRealmConfig}. The {@code OsRealmConfig} instance should only be created by
-     * {@link SharedRealm}.
+     * {@link OsSharedRealm}.
      */
     public static class Builder {
         private RealmConfiguration configuration;
         private OsSchemaInfo schemaInfo = null;
-        private SharedRealm.MigrationCallback migrationCallback = null;
-        private SharedRealm.InitializationCallback initializationCallback = null;
+        private OsSharedRealm.MigrationCallback migrationCallback = null;
+        private OsSharedRealm.InitializationCallback initializationCallback = null;
         private boolean autoUpdateNotification = false;
 
         /**
@@ -112,7 +112,7 @@ public Builder schemaInfo(@Nullable OsSchemaInfo schemaInfo) {
          * @param migrationCallback callback to be set.
          * @return this {@link OsRealmConfig.Builder}.
          */
-        public Builder migrationCallback(@Nullable SharedRealm.MigrationCallback migrationCallback) {
+        public Builder migrationCallback(@Nullable OsSharedRealm.MigrationCallback migrationCallback) {
             this.migrationCallback = migrationCallback;
             return this;
         }
@@ -123,7 +123,7 @@ public Builder migrationCallback(@Nullable SharedRealm.MigrationCallback migrati
          * @param initializationCallback the callback to be set.
          * @return this {@link OsRealmConfig.Builder}.
          */
-        public Builder initializationCallback(@Nullable SharedRealm.InitializationCallback initializationCallback) {
+        public Builder initializationCallback(@Nullable OsSharedRealm.InitializationCallback initializationCallback) {
             this.initializationCallback = initializationCallback;
             return this;
         }
@@ -141,7 +141,7 @@ public Builder autoUpdateNotification(boolean autoUpdateNotification) {
         }
 
         // Package private because of the OsRealmConfig needs to carry the NativeContext. This should only be called
-        // by the SharedRealm.
+        // by the OsSharedRealm.
         OsRealmConfig build() {
             return new OsRealmConfig(configuration, autoUpdateNotification, schemaInfo,
                     migrationCallback, initializationCallback);
@@ -163,10 +163,10 @@ OsRealmConfig build() {
     private final RealmConfiguration realmConfiguration;
     private final URI resolvedRealmURI;
     private final long nativePtr;
-    // Every SharedRealm instance has to be created from an OsRealmConfig instance. And the SharedRealm's NativeContext
-    // object will be the same as the context here. This is because of we may create different SharedRealm instances
+    // Every OsSharedRealm instance has to be created from an OsRealmConfig instance. And the OsSharedRealm's NativeContext
+    // object will be the same as the context here. This is because of we may create different OsSharedRealm instances
     // with different shared_ptrs which are point to the same SharedGroup object. It could happen when we create
-    // SharedRealm for migration/initialization callback. The context has to be the same object for those cases for
+    // OsSharedRealm for migration/initialization callback. The context has to be the same object for those cases for
     // core destructor's thread safety.
     private final NativeContext context = new NativeContext();
 
@@ -175,15 +175,15 @@ OsRealmConfig build() {
     @SuppressWarnings({"FieldCanBeLocal", "unused"})
     private final CompactOnLaunchCallback compactOnLaunchCallback;
     @SuppressWarnings({"FieldCanBeLocal", "unused"})
-    private final SharedRealm.MigrationCallback migrationCallback;
+    private final OsSharedRealm.MigrationCallback migrationCallback;
     @SuppressWarnings({"FieldCanBeLocal", "unused"})
-    private final SharedRealm.InitializationCallback initializationCallback;
+    private final OsSharedRealm.InitializationCallback initializationCallback;
 
     private OsRealmConfig(final RealmConfiguration config,
                           boolean autoUpdateNotification,
                           @Nullable OsSchemaInfo schemaInfo,
-                          @Nullable SharedRealm.MigrationCallback migrationCallback,
-                          @Nullable SharedRealm.InitializationCallback initializationCallback) {
+                          @Nullable OsSharedRealm.MigrationCallback migrationCallback,
+                          @Nullable OsSharedRealm.InitializationCallback initializationCallback) {
         this.realmConfiguration = config;
         this.nativePtr = nativeCreate(config.getPath(), false, true);
         NativeContext.dummyContext.addReference(this);
@@ -284,11 +284,11 @@ NativeContext getContext() {
 
     private native void nativeSetSchemaConfig(long nativePtr, byte schemaMode, long schemaVersion,
                                               long schemaInfoPtr,
-                                              @Nullable SharedRealm.MigrationCallback migrationCallback);
+                                              @Nullable OsSharedRealm.MigrationCallback migrationCallback);
 
     private static native void nativeSetCompactOnLaunchCallback(long nativePtr, CompactOnLaunchCallback callback);
 
-    private native void nativeSetInitializationCallback(long nativePtr, SharedRealm.InitializationCallback callback);
+    private native void nativeSetInitializationCallback(long nativePtr, OsSharedRealm.InitializationCallback callback);
 
     private static native void nativeEnableChangeNotification(long nativePtr, boolean enableNotification);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
index ce294974ea..73e7e7efad 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
@@ -205,7 +205,7 @@ public void set(@Nullable T object) {
 
     private final long nativePtr;
     private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
-    private final SharedRealm sharedRealm;
+    private final OsSharedRealm sharedRealm;
     private final NativeContext context;
     private final Table table;
     private boolean loaded;
@@ -276,7 +276,7 @@ static Mode getByValue(byte value) {
         }
     }
 
-    public static OsResults createBacklinksCollection(SharedRealm realm, UncheckedRow row, Table srcTable, String srcFieldName) {
+    public static OsResults createBacklinksCollection(OsSharedRealm realm, UncheckedRow row, Table srcTable, String srcFieldName) {
         long backlinksPtr = nativeCreateResultsFromBacklinks(
                 realm.getNativePtr(),
                 row.getNativePtr(),
@@ -285,7 +285,7 @@ public static OsResults createBacklinksCollection(SharedRealm realm, UncheckedRo
         return new OsResults(realm, srcTable, backlinksPtr, true);
     }
 
-    public OsResults(SharedRealm sharedRealm, TableQuery query,
+    public OsResults(OsSharedRealm sharedRealm, TableQuery query,
                      @Nullable SortDescriptor sortDescriptor, @Nullable SortDescriptor distinctDescriptor) {
         query.validateQuery();
 
@@ -300,15 +300,15 @@ public OsResults(SharedRealm sharedRealm, TableQuery query,
         this.loaded = false;
     }
 
-    public OsResults(SharedRealm sharedRealm, TableQuery query, @Nullable SortDescriptor sortDescriptor) {
+    public OsResults(OsSharedRealm sharedRealm, TableQuery query, @Nullable SortDescriptor sortDescriptor) {
         this(sharedRealm, query, sortDescriptor, null);
     }
 
-    public OsResults(SharedRealm sharedRealm, TableQuery query) {
+    public OsResults(OsSharedRealm sharedRealm, TableQuery query) {
         this(sharedRealm, query, null, null);
     }
 
-    public OsResults(SharedRealm sharedRealm, OsList osList, @Nullable SortDescriptor sortDescriptor) {
+    public OsResults(OsSharedRealm sharedRealm, OsList osList, @Nullable SortDescriptor sortDescriptor) {
         this.nativePtr = nativeCreateResultsFromList(sharedRealm.getNativePtr(), osList.getNativePtr(), sortDescriptor);
 
         this.sharedRealm = sharedRealm;
@@ -320,11 +320,11 @@ public OsResults(SharedRealm sharedRealm, OsList osList, @Nullable SortDescripto
         this.loaded = true;
     }
 
-    private OsResults(SharedRealm sharedRealm, Table table, long nativePtr) {
+    private OsResults(OsSharedRealm sharedRealm, Table table, long nativePtr) {
         this(sharedRealm, table, nativePtr, false);
     }
 
-    OsResults(SharedRealm sharedRealm, Table table, long nativePtr, boolean loaded) {
+    OsResults(OsSharedRealm sharedRealm, Table table, long nativePtr, boolean loaded) {
         this.sharedRealm = sharedRealm;
         this.context = sharedRealm.context;
         this.table = table;
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsSchemaInfo.java b/realm/realm-library/src/main/java/io/realm/internal/OsSchemaInfo.java
index 4585c514b5..c2c2a6ff1e 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsSchemaInfo.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsSchemaInfo.java
@@ -22,15 +22,15 @@
  * When it is created from java binding, it is used for initializing/validating the schemas through Object Store. It
  * won't contain the column indices information.
  * <p>
- * When this is get from the Object Store {@code SharedRealm} instance, this represents the real schema of the Realm
+ * When this is get from the Object Store {@code OsSharedRealm} instance, this represents the real schema of the Realm
  * file. It will contain all the schema information as well as the information about the column indices.
  */
 public class OsSchemaInfo implements NativeObject {
     private long nativePtr;
     private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
-    // Hold the ref to the SharedRealm to ensure the SharedRealm won't be freed before this gets GCed.
+    // Hold the ref to the OsSharedRealm to ensure the OsSharedRealm won't be freed before this gets GCed.
     @SuppressWarnings("unused")
-    private final SharedRealm sharedRealm;
+    private final OsSharedRealm sharedRealm;
 
     /**
      * Constructs a {@code OsSchemaInfo} object from a given {@code OsObjectSchemaInfo} list.
@@ -46,14 +46,14 @@ public OsSchemaInfo(java.util.Collection<OsObjectSchemaInfo> objectSchemaInfoLis
     /**
      * Constructs a {@code OsSchemaInfo} and bind its life cycle with the given {@code ShareRealm}. The native pointer
      * held by this instance points to the reference of ObjectStore's {@code Realm::m_schema}. It will be valid
-     * as long as the {@code SharedRealm} instance is not GCed.
+     * as long as the {@code OsSharedRealm} instance is not GCed.
      * <p>
-     * This should only be called by {@link SharedRealm}.
+     * This should only be called by {@link OsSharedRealm}.
      *
      * @param nativePtr the pointer to the Object Store's {@code Realm::m_schema}.
-     * @param sharedRealm the {@code SharedRealm} instance which is owning the schema object.
+     * @param sharedRealm the {@code OsSharedRealm} instance which is owning the schema object.
      */
-    OsSchemaInfo(long nativePtr, SharedRealm sharedRealm) {
+    OsSchemaInfo(long nativePtr, OsSharedRealm sharedRealm) {
         this.nativePtr = nativePtr;
         this.sharedRealm = sharedRealm;
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java b/realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java
similarity index 92%
rename from realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
rename to realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java
index bdb0cb3505..7bb3a075af 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java
@@ -31,7 +31,7 @@
 import io.realm.internal.android.AndroidRealmNotifier;
 
 @Keep
-public final class SharedRealm implements Closeable, NativeObject {
+public final class OsSharedRealm implements Closeable, NativeObject {
 
     public static class VersionID implements Comparable<VersionID> {
         public final long version;
@@ -96,12 +96,12 @@ public int hashCode() {
         /**
          * Callback function.
          *
-         * @param sharedRealm the same {@link SharedRealm} instance which has been created from the same
+         * @param sharedRealm the same {@link OsSharedRealm} instance which has been created from the same
          *                    {@link OsRealmConfig} instance.
          * @param oldVersion  the schema version of the existing Realm file.
          * @param newVersion  the expected schema version after migration.
          */
-        void onMigrationNeeded(SharedRealm sharedRealm, long oldVersion, long newVersion);
+        void onMigrationNeeded(OsSharedRealm sharedRealm, long oldVersion, long newVersion);
     }
 
     /**
@@ -110,9 +110,9 @@ public int hashCode() {
     @Keep
     public interface InitializationCallback {
         /**
-         * @param sharedRealm a {@link SharedRealm} instance which is in transaction state.
+         * @param sharedRealm a {@link OsSharedRealm} instance which is in transaction state.
          */
-        void onInit(SharedRealm sharedRealm);
+        void onInit(OsSharedRealm sharedRealm);
     }
 
     /**
@@ -165,7 +165,7 @@ protected PartialSyncCallback(String className) {
     // Package protected for testing
     final List<WeakReference<OsResults.Iterator>> iterators = new ArrayList<>();
 
-    private SharedRealm(OsRealmConfig osRealmConfig) {
+    private OsSharedRealm(OsRealmConfig osRealmConfig) {
         Capabilities capabilities = new AndroidCapabilities();
         RealmNotifier realmNotifier = new AndroidRealmNotifier(this, capabilities);
 
@@ -181,13 +181,13 @@ private SharedRealm(OsRealmConfig osRealmConfig) {
     }
 
     /**
-     * Creates a {@code SharedRealm} instance from a given Object Store's {@code SharedRealm} pointer. This is used to
-     * create {@code SharedRealm} from the callback functions. When this is called, there is another
-     * {@code SharedRealm} instance with the same {@link OsRealmConfig} which has been created before. Although they
+     * Creates a {@code OsSharedRealm} instance from a given Object Store's {@code OsSharedRealm} pointer. This is used to
+     * create {@code OsSharedRealm} from the callback functions. When this is called, there is another
+     * {@code OsSharedRealm} instance with the same {@link OsRealmConfig} which has been created before. Although they
      * are different {@code shared_ptr}, they point to the same {@code SharedGroup} instance. The {@code context} has
      * to be the same one to ensure core's destructor thread safety.
      */
-    private SharedRealm(long nativeSharedRealmPtr, OsRealmConfig osRealmConfig) {
+    private OsSharedRealm(long nativeSharedRealmPtr, OsRealmConfig osRealmConfig) {
         this.nativePtr = nativeSharedRealmPtr;
         this.osRealmConfig = osRealmConfig;
         this.schemaInfo = new OsSchemaInfo(nativeGetSchemaInfo(nativePtr), this);
@@ -202,9 +202,9 @@ private SharedRealm(long nativeSharedRealmPtr, OsRealmConfig osRealmConfig) {
 
 
     /**
-     * Creates a {@code SharedRealm} instance in dynamic schema mode.
+     * Creates a {@code OsSharedRealm} instance in dynamic schema mode.
      */
-    public static SharedRealm getInstance(RealmConfiguration config) {
+    public static OsSharedRealm getInstance(RealmConfiguration config) {
         OsRealmConfig.Builder builder = new OsRealmConfig.Builder(config);
         return getInstance(builder);
     }
@@ -212,15 +212,15 @@ public static SharedRealm getInstance(RealmConfiguration config) {
     /**
      * Creates a {@code ShareRealm} instance from the given {@link OsRealmConfig.Builder}.
      */
-    public static SharedRealm getInstance(OsRealmConfig.Builder configBuilder) {
+    public static OsSharedRealm getInstance(OsRealmConfig.Builder configBuilder) {
         OsRealmConfig osRealmConfig = configBuilder.build();
         ObjectServerFacade.getSyncFacadeIfPossible().wrapObjectStoreSessionIfRequired(osRealmConfig);
 
-        return new SharedRealm(osRealmConfig);
+        return new OsSharedRealm(osRealmConfig);
     }
 
     public static void initialize(File tempDirectory) {
-        if (SharedRealm.temporaryDirectory != null) {
+        if (OsSharedRealm.temporaryDirectory != null) {
             // already initialized
             return;
         }
@@ -234,7 +234,7 @@ public static void initialize(File tempDirectory) {
             temporaryDirectoryPath += "/";
         }
         nativeInit(temporaryDirectoryPath);
-        SharedRealm.temporaryDirectory = tempDirectory;
+        OsSharedRealm.temporaryDirectory = tempDirectory;
     }
 
     public static File getTemporaryDirectory() {
@@ -327,9 +327,9 @@ public void refresh() {
         nativeRefresh(nativePtr);
     }
 
-    public SharedRealm.VersionID getVersionID() {
+    public OsSharedRealm.VersionID getVersionID() {
         long[] versionId = nativeGetVersionID(nativePtr);
-        return new SharedRealm.VersionID(versionId[0], versionId[1]);
+        return new OsSharedRealm.VersionID(versionId[0], versionId[1]);
     }
 
     public boolean isClosed() {
@@ -379,7 +379,7 @@ public void close() {
         }
         synchronized (context) {
             nativeCloseSharedRealm(nativePtr);
-            // Don't reset the nativePtr since we still rely on Object Store to check if the given SharedRealm ptr
+            // Don't reset the nativePtr since we still rely on Object Store to check if the given OsSharedRealm ptr
             // is closed or not.
         }
     }
@@ -395,7 +395,7 @@ public long getNativeFinalizerPtr() {
     }
 
     /**
-     * @return the {@link OsSchemaInfo} of this {@code SharedRealm}.
+     * @return the {@link OsSchemaInfo} of this {@code OsSharedRealm}.
      */
     public OsSchemaInfo getSchemaInfo() {
         return schemaInfo;
@@ -482,18 +482,18 @@ private void executePendingRowQueries() {
     @SuppressWarnings("unused")
     private static void runMigrationCallback(long nativeSharedRealmPtr, OsRealmConfig osRealmConfig, MigrationCallback callback,
                                              long oldVersion) {
-        callback.onMigrationNeeded(new SharedRealm(nativeSharedRealmPtr, osRealmConfig), oldVersion,
+        callback.onMigrationNeeded(new OsSharedRealm(nativeSharedRealmPtr, osRealmConfig), oldVersion,
                 osRealmConfig.getRealmConfiguration().getSchemaVersion());
     }
 
     /**
      * Called from JNI when the schema is created the first time.
      *
-     * @param callback to be executed with a given in-transact {@link SharedRealm}.
+     * @param callback to be executed with a given in-transact {@link OsSharedRealm}.
      */
     @SuppressWarnings("unused")
     private static void runInitializationCallback(long nativeSharedRealmPtr, OsRealmConfig osRealmConfig, InitializationCallback callback) {
-        callback.onInit(new SharedRealm(nativeSharedRealmPtr, osRealmConfig));
+        callback.onInit(new OsSharedRealm(nativeSharedRealmPtr, osRealmConfig));
     }
 
     /**
diff --git a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
index ccdad47857..3b4b9802be 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
@@ -31,14 +31,14 @@
     private static final String QUERY_EXECUTED_MESSAGE =
             "The query has been executed. This 'PendingRow' is not valid anymore.";
 
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     private OsResults pendingOsResults;
     private RealmChangeListener<PendingRow> listener;
     private WeakReference<FrontEnd> frontEndRef;
     private boolean returnCheckedRow;
 
-    public PendingRow(SharedRealm sharedRealm, TableQuery query, @Nullable SortDescriptor sortDescriptor,
-            final boolean returnCheckedRow) {
+    public PendingRow(OsSharedRealm sharedRealm, TableQuery query, @Nullable SortDescriptor sortDescriptor,
+                      final boolean returnCheckedRow) {
         this.sharedRealm = sharedRealm;
         pendingOsResults = new OsResults(sharedRealm, query, sortDescriptor, null);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java b/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java
index 7b9da29d3d..6ea3d1c706 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java
@@ -22,7 +22,7 @@
 
 public class ProxyUtils {
 
-    public static void verifyField(SharedRealm sharedRealm, Map<String, RealmFieldType> columnTypes, String fieldName, RealmFieldType fieldType, String fieldSimpleType) {
+    public static void verifyField(OsSharedRealm sharedRealm, Map<String, RealmFieldType> columnTypes, String fieldName, RealmFieldType fieldType, String fieldSimpleType) {
         if (!columnTypes.containsKey(fieldName)) {
             throw new RealmMigrationNeededException(
                     sharedRealm.getPath(),
diff --git a/realm/realm-library/src/main/java/io/realm/internal/RealmNotifier.java b/realm/realm-library/src/main/java/io/realm/internal/RealmNotifier.java
index 06864b403a..cec9d4acdd 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/RealmNotifier.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/RealmNotifier.java
@@ -74,11 +74,11 @@ public void onCalled(RealmObserverPair pair, Object observer) {
                 }
             };
 
-    protected RealmNotifier(@Nullable SharedRealm sharedRealm) {
+    protected RealmNotifier(@Nullable OsSharedRealm sharedRealm) {
         this.sharedRealm = sharedRealm;
     }
 
-    private SharedRealm sharedRealm;
+    private OsSharedRealm sharedRealm;
     // TODO: The only reason we have this is that async transactions is not supported by OS yet. And OS is using ALopper
     // which will be using a different message queue from which java is using to deliver remote Realm changes message.
     // We need a way to deliver the async transaction onSuccess callback to the caller thread after the caller Realm
@@ -115,7 +115,7 @@ void didChange() {
     // Called from JavaBindingContext::before_notify.
     // This will be called in the caller thread when:
     // 1. Get changed notification by this/other Realm instances.
-    // 2. SharedRealm::refresh called.
+    // 2. OsSharedRealm::refresh called.
     // In both cases, this will be called before the any other callbacks (changed callbacks, async query callbacks.).
     // Package protected to avoid finding class by name in JNI.
     @SuppressWarnings("unused")
@@ -125,7 +125,7 @@ void beforeNotify() {
     }
 
     /**
-     * Called when close SharedRealm to clean up any event left in to queue.
+     * Called when close OsSharedRealm to clean up any event left in to queue.
      */
     @Override
     public void close() {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index 0135e69f60..8be0dc7078 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -47,13 +47,13 @@
     private final long nativePtr;
     private final NativeContext context;
 
-    private final SharedRealm sharedRealm;
+    private final OsSharedRealm sharedRealm;
 
     Table(Table parent, long nativePointer) {
         this(parent.sharedRealm, nativePointer);
     }
 
-    Table(SharedRealm sharedRealm, long nativePointer) {
+    Table(OsSharedRealm sharedRealm, long nativePointer) {
         this.context = sharedRealm.context;
         this.sharedRealm = sharedRealm;
         this.nativePtr = nativePointer;
@@ -346,7 +346,7 @@ public static void throwDuplicatePrimaryKeyException(Object value) {
     // Getters
     //
 
-    SharedRealm getSharedRealm() {
+    OsSharedRealm getSharedRealm() {
         return sharedRealm;
     }
 
@@ -523,7 +523,7 @@ public void removeSearchIndex(long columnIndex) {
      * The native method will begin a transaction and make the migration if needed.
      * This function should not be called in a transaction.
      */
-    public static void migratePrimaryKeyTableIfNeeded(SharedRealm sharedRealm) {
+    public static void migratePrimaryKeyTableIfNeeded(OsSharedRealm sharedRealm) {
         nativeMigratePrimaryKeyTableIfNeeded(sharedRealm.getNativePtr());
     }
 
@@ -543,7 +543,7 @@ boolean isImmutable() {
         return sharedRealm != null && !sharedRealm.isInTransaction();
     }
 
-    // This checking should be moved to SharedRealm level.
+    // This checking should be moved to OsSharedRealm level.
     void checkImmutable() {
         if (isImmutable()) {
             throwImmutable();
diff --git a/realm/realm-library/src/main/java/io/realm/internal/android/AndroidRealmNotifier.java b/realm/realm-library/src/main/java/io/realm/internal/android/AndroidRealmNotifier.java
index 5e4f2e067a..29f93a8fe4 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/android/AndroidRealmNotifier.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/android/AndroidRealmNotifier.java
@@ -8,7 +8,7 @@
 import io.realm.internal.Capabilities;
 import io.realm.internal.Keep;
 import io.realm.internal.RealmNotifier;
-import io.realm.internal.SharedRealm;
+import io.realm.internal.OsSharedRealm;
 
 
 /**
@@ -18,7 +18,7 @@
 public class AndroidRealmNotifier extends RealmNotifier {
     private Handler handler;
 
-    public AndroidRealmNotifier(@Nullable SharedRealm sharedRealm, Capabilities capabilities) {
+    public AndroidRealmNotifier(@Nullable OsSharedRealm sharedRealm, Capabilities capabilities) {
         super(sharedRealm);
         if (capabilities.canDeliverNotification()) {
             handler = new Handler(Looper.myLooper());
diff --git a/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java b/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java
index 8cc0f60785..d0e99acdf7 100644
--- a/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java
+++ b/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java
@@ -25,7 +25,7 @@
  * Interface for custom loggers that can be registered at {@link RealmLog#add(RealmLogger)}.
  * The different log levels are described in {@link LogLevel}.
  */
-@Keep // This interface is used as a parameter type of a native method in SharedRealm.java
+@Keep // This interface is used as a parameter type of a native method in OsSharedRealm.java
 public interface RealmLogger {
 
     /**
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index 100c89b613..24f936108f 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -32,7 +32,7 @@
     UNKNOWN(-1),                                // Catch-all
     IO_EXCEPTION(0, Category.RECOVERABLE),      // Some IO error while either contacting the server or reading the response
     JSON_EXCEPTION(1),                          // JSON input could not be parsed correctly
-    CLIENT_RESET(7),                            // Client Reset required. Don't change this value without modifying io_realm_internal_SharedRealm.cpp
+    CLIENT_RESET(7),                            // Client Reset required. Don't change this value without modifying io_realm_internal_OsSharedRealm.cpp
 
     // Realm Object Server errors (100 - 199)
     // Connection level and protocol errors.
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
index fa0406c914..4c31b68f10 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
@@ -88,7 +88,8 @@ protected static void startSyncServer() {
     }
 
     /**
-     * Stops the ROS instance used for the test.
+     * Stops the ROS instance used for the test. The {@link #startSyncServer()} will stop the sync server if needed, so
+     * normally there is no need to call this.
      */
     protected static void stopSyncServer() {
         try {
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/IsolatedIntegrationTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/IsolatedIntegrationTests.java
index e25225fbbe..09715009a1 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/IsolatedIntegrationTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/IsolatedIntegrationTests.java
@@ -26,14 +26,12 @@ public void teardownTest() {
         if (!looperThread.isRuleUsed() || looperThread.isTestComplete()) {
             // Non-looper tests can reset here
             restoreEnvironmentAfterTest();
-            stopSyncServer();
         } else {
             // Otherwise we need to wait for the test to complete
             looperThread.runAfterTest(new Runnable() {
                 @Override
                 public void run() {
                     restoreEnvironmentAfterTest();
-                    stopSyncServer();
                 }
             });
         }
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/StandardIntegrationTest.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/StandardIntegrationTest.java
index e2b7bb9513..858824853d 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/StandardIntegrationTest.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/StandardIntegrationTest.java
@@ -35,11 +35,6 @@ public static void setupTestClass() throws Exception {
         startSyncServer();
     }
 
-    @AfterClass
-    public static void tearDownTestClass() throws Exception {
-        stopSyncServer();
-    }
-
     @Before
     public void setupTest() throws IOException {
         prepareEnvironmentForTest();
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java
index d757107729..9183adda5e 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java
@@ -18,7 +18,6 @@
 
 import android.support.test.runner.AndroidJUnit4;
 
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,6 +34,7 @@
 import io.realm.ProgressListener;
 import io.realm.ProgressMode;
 import io.realm.Realm;
+import io.realm.RealmConfiguration;
 import io.realm.StandardIntegrationTest;
 import io.realm.SyncConfiguration;
 import io.realm.SyncManager;
@@ -83,19 +83,23 @@ private void assertTransferComplete(Progress progress, boolean nonZeroChange) {
     }
 
     // Create remote data for a given user.
-    private URI createRemoteData(SyncUser user) {
-        final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
-                .name("remote")
-                .build();
+    private URI createRemoteData(final SyncConfiguration config) {
         final Realm realm = Realm.getInstance(config);
         final CountDownLatch changesUploaded = new CountDownLatch(1);
         final SyncSession session = SyncManager.getSession(config);
         final long beforeAdd = realm.where(AllTypes.class).count();
         writeSampleData(realm);
 
+        final long threadId = Thread.currentThread().getId();
+
         session.addUploadProgressListener(ProgressMode.INDEFINITELY, new ProgressListener() {
             @Override
             public void onChange(Progress progress) {
+                // FIXME: This check is to make sure before this method returns, all the uploads has been done.
+                // See https://github.com/realm/realm-object-store/issues/581#issuecomment-339353832
+                if (threadId == Thread.currentThread().getId()) {
+                    return;
+                }
                 if (progress.isTransferComplete()) {
                     Realm realm = Realm.getInstance(config);
                     final long afterAdd = realm.where(AllTypes.class).count();
@@ -118,11 +122,21 @@ public void onChange(Progress progress) {
         return config.getServerUrl();
     }
 
+    private long getStoreTestDataSize(RealmConfiguration config) {
+        Realm adminRealm = Realm.getInstance(config);
+        long objectCounts = adminRealm.where(AllTypes.class).count();
+        adminRealm.close();
+
+        return objectCounts;
+    }
+
     @Test
     public void downloadProgressListener_changesOnly() {
         final CountDownLatch allChangesDownloaded = new CountDownLatch(1);
         SyncUser userWithData = UserFactory.createUniqueUser(Constants.AUTH_URL);
-        URI serverUrl = createRemoteData(userWithData);
+        SyncConfiguration userWithDataConfig = configFactory.createSyncConfigurationBuilder(userWithData, Constants.USER_REALM)
+                .build();
+        URI serverUrl = createRemoteData(userWithDataConfig);
         SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
 
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(adminUser, serverUrl.toString()).build();
@@ -133,9 +147,7 @@ public void downloadProgressListener_changesOnly() {
             public void onChange(Progress progress) {
                 if (progress.isTransferComplete()) {
                     assertTransferComplete(progress, true);
-                    Realm realm = Realm.getInstance(config);
-                    assertEquals(TEST_SIZE, realm.where(AllTypes.class).count());
-                    realm.close();
+                    assertEquals(TEST_SIZE, getStoreTestDataSize(config));
                     allChangesDownloaded.countDown();
                 }
             }
@@ -145,14 +157,16 @@ public void onChange(Progress progress) {
     }
 
     @Test
-    @Ignore("https://github.com/realm/realm-sync/issues/1770")
     public void downloadProgressListener_indefinitely() throws InterruptedException {
         final AtomicInteger transferCompleted = new AtomicInteger(0);
         final CountDownLatch allChangesDownloaded = new CountDownLatch(1);
         final CountDownLatch startWorker = new CountDownLatch(1);
         final SyncUser userWithData = UserFactory.createUniqueUser(Constants.AUTH_URL);
+        final SyncConfiguration userWithDataConfig = configFactory.createSyncConfigurationBuilder(userWithData, Constants.USER_REALM)
+                .name("remote")
+                .build();
 
-        URI serverUrl = createRemoteData(userWithData);
+        URI serverUrl = createRemoteData(userWithDataConfig);
 
         // Create worker thread that puts data into another Realm.
         // This is to avoid blocking one progress listener while waiting for another to complete.
@@ -160,7 +174,7 @@ public void downloadProgressListener_indefinitely() throws InterruptedException
             @Override
             public void run() {
                 TestHelper.awaitOrFail(startWorker);
-                createRemoteData(userWithData);
+                createRemoteData(userWithDataConfig);
             }
         });
         worker.start();
@@ -170,16 +184,16 @@ public void run() {
                 .name("local")
                 .build();
         Realm adminRealm = Realm.getInstance(adminConfig);
-        Realm userRealm = Realm.getInstance(configFactory.createSyncConfigurationBuilder(userWithData, Constants.USER_REALM).build()); // Keep session alive
         SyncSession session = SyncManager.getSession(adminConfig);
         session.addDownloadProgressListener(ProgressMode.INDEFINITELY, new ProgressListener() {
             @Override
             public void onChange(Progress progress) {
-                Realm adminRealm = Realm.getInstance(adminConfig);
-                long objectCounts = adminRealm.where(AllTypes.class).count();
-                adminRealm.close();
+                long objectCounts = getStoreTestDataSize(adminConfig);
                 // The downloading progress listener could be triggered at the db version where only contains the meta
                 // data. So we start checking from when the first 10 objects downloaded.
+                RealmLog.warn(String.format(
+                        Locale.ENGLISH,"downloadProgressListener_indefinitely download %d/%d objects count:%d",
+                        progress.getTransferredBytes(), progress.getTransferableBytes(), objectCounts));
                 if (objectCounts != 0 && progress.isTransferComplete()) {
 
                     switch (transferCompleted.incrementAndGet()) {
@@ -198,15 +212,11 @@ public void onChange(Progress progress) {
                         default:
                             fail("Transfer complete called too many times:" + transferCompleted.get());
                     }
-                    RealmLog.warn(String.format(
-                            Locale.ENGLISH,"downloadProgressListener_indefinitely download %d/%d objects count:%d",
-                            progress.getTransferredBytes(), progress.getTransferableBytes(), objectCounts));
                 }
             }
         });
         TestHelper.awaitOrFail(allChangesDownloaded);
         adminRealm.close();
-        userRealm.close();
         // worker thread will hang if logout happens before listener triggered.
         worker.join();
         userWithData.logout();
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
index 9c4d3881dc..cc3fcd95ee 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
@@ -50,6 +50,9 @@
     private static final String STOP_SERVER = "http://127.0.0.1:8888/stop";
     public static final String TAG = "IntegrationTestServer";
 
+    /**
+     * Start the sync server. If the server has been started before, stop it first.
+     */
     public static void startSyncServer() throws Exception {
         Request request = new Request.Builder()
                 .url(START_SERVER)
@@ -63,6 +66,10 @@ public static void startSyncServer() throws Exception {
         SystemClock.sleep(2000);
     }
 
+    /**
+     * Stop the sync server if it is alive. {@link #startSyncServer()} will implicitly stop the server if needed, so
+     * normally there is no need to call this.
+     */
     public static void stopSyncServer() throws Exception {
         Request request = new Request.Builder()
                 .url(STOP_SERVER)
diff --git a/tools/sync_test_server/ros-testing-server.js b/tools/sync_test_server/ros-testing-server.js
index d86165a6e8..2f841d4f43 100755
--- a/tools/sync_test_server/ros-testing-server.js
+++ b/tools/sync_test_server/ros-testing-server.js
@@ -66,6 +66,12 @@ function waitForRosToInitialize(attempts, onSuccess, onError) {
 }
 
 function startRealmObjectServer(onSuccess, onError) {
+    stopRealmObjectServer(() => {
+        doStartRealmObjectServer(onSuccess, onError)
+    }, onError)
+}
+
+function doStartRealmObjectServer(onSuccess, onError) {
     temp.mkdir('ros', function(err, path) {
         if (!err) {
             winston.info("Starting sync server in ", path);
@@ -112,8 +118,8 @@ function startRealmObjectServer(onSuccess, onError) {
 }
 
 function stopRealmObjectServer(onSuccess, onError) {
-    if(syncServerChildProcess == null) {
-        onError("No ROS process found to stop");
+    if(syncServerChildProcess == null || syncServerChildProcess.killed) {
+        onSuccess("No ROS process found or the process has been killed before");
     }
 
     syncServerChildProcess.on('exit', function(code) {
