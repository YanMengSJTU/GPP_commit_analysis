diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5403963378..5f9c327261 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,7 +4,6 @@
 
 * Updated file format of Realm files. Existing Realm files will automatically be migrated to the new format when they are opened.
 * [ObjectServer] Due to file format changes, Realm Object Server 1.3.0 or later is required.
-* [ObjectServer] Added `onClientResetRequired(SyncSession, ClientResetHandler)` method to the `ErrorHandler` interface (#4080).
 
 ### Enhancements
 
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
index 3376d0a512..7ee77dfa61 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
@@ -119,11 +119,12 @@ public void errorHandler_clientResetReported() {
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
-                        fail("Wrong error " + error.toString());
-                    }
+                        if (error.getErrorCode() != ErrorCode.CLIENT_RESET) {
+                            fail("Wrong error " + error.toString());
+                            return;
+                        }
 
-                    @Override
-                    public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
+                        final ClientResetRequiredError handler = (ClientResetRequiredError) error;
                         String filePathFromError = handler.getOriginalFile().getAbsolutePath();
                         String filePathFromConfig = session.getConfiguration().getPath();
                         assertEquals(filePathFromError, filePathFromConfig);
@@ -151,11 +152,12 @@ public void errorHandler_manualExecuteClientReset() {
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
-                        fail("Wrong error " + error.toString());
-                    }
+                        if (error.getErrorCode() != ErrorCode.CLIENT_RESET) {
+                            fail("Wrong error " + error.toString());
+                            return;
+                        }
 
-                    @Override
-                    public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
+                        final ClientResetRequiredError handler = (ClientResetRequiredError) error;
                         try {
                             handler.executeClientReset();
                             fail("All Realms should be closed before executing Client Reset can be allowed");
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
index 2e294ffe75..3b7a2a466f 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
@@ -225,11 +225,6 @@ public void errorHandler() {
             public void onError(SyncSession session, ObjectServerError error) {
 
             }
-
-            @Override
-            public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-
-            }
         };
         SyncConfiguration config = builder.errorHandler(errorHandler).build();
         assertEquals(errorHandler, config.getErrorHandler());
@@ -243,11 +238,6 @@ public void errorHandler_fromSyncManager() {
             public void onError(SyncSession session, ObjectServerError error) {
 
             }
-
-            @Override
-            public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-
-            }
         };
         SyncManager.setDefaultSessionErrorHandler(errorHandler);
 
diff --git a/realm/realm-library/src/main/cpp/CMakeLists.txt b/realm/realm-library/src/main/cpp/CMakeLists.txt
index 96b1eec789..cb5f0a97d6 100644
--- a/realm/realm-library/src/main/cpp/CMakeLists.txt
+++ b/realm/realm-library/src/main/cpp/CMakeLists.txt
@@ -46,7 +46,7 @@ set(classes_LIST
 set(jni_headers_PATH /./${PROJECT_BINARY_DIR}/jni_include)
 if (build_SYNC)
     list(APPEND classes_LIST
-        io.realm.ClientResetHandler io.realm.RealmFileUserStore
+        io.realm.ClientResetRequiredError io.realm.RealmFileUserStore
         io.realm.SyncManager io.realm.SyncSession
     )
 endif()
@@ -158,7 +158,7 @@ file(GLOB jni_SRC
 # Those source file are only needed for sync.
 if (NOT build_SYNC)
     list(REMOVE_ITEM jni_SRC
-        ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_ClientResetHandler.cpp
+        ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_ClientResetRequiredError.cpp
         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_RealmFileUserStore.cpp
         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_SyncManager.cpp
         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_SyncSession.cpp
diff --git a/realm/realm-library/src/main/cpp/io_realm_ClientResetHandler.cpp b/realm/realm-library/src/main/cpp/io_realm_ClientResetRequiredError.cpp
similarity index 89%
rename from realm/realm-library/src/main/cpp/io_realm_ClientResetHandler.cpp
rename to realm/realm-library/src/main/cpp/io_realm_ClientResetRequiredError.cpp
index 61a72c1145..39e5484af4 100644
--- a/realm/realm-library/src/main/cpp/io_realm_ClientResetHandler.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_ClientResetRequiredError.cpp
@@ -19,11 +19,11 @@
 #include <sync/sync_manager.hpp>
 
 #include "util.hpp"
-#include "io_realm_ClientResetHandler.h"
+#include "io_realm_ClientResetRequiredError.h"
 
 using namespace realm;
 
-JNIEXPORT void JNICALL Java_io_realm_ClientResetHandler_nativeExecuteClientReset(JNIEnv* env, jobject,
+JNIEXPORT void JNICALL Java_io_realm_ClientResetRequiredError_nativeExecuteClientReset(JNIEnv* env, jobject,
                                                                                jstring localRealmPath)
 {
     TR_ENTER()
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ClientResetHandler.java b/realm/realm-library/src/objectServer/java/io/realm/ClientResetRequiredError.java
similarity index 91%
rename from realm/realm-library/src/objectServer/java/io/realm/ClientResetHandler.java
rename to realm/realm-library/src/objectServer/java/io/realm/ClientResetRequiredError.java
index 1fdc1adf8b..f9a2fbe1e1 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ClientResetHandler.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ClientResetRequiredError.java
@@ -21,16 +21,16 @@
 /**
  * Class encapsulating information needed for handling a Client Reset event.
  *
- * @see io.realm.SyncSession.ErrorHandler#onClientResetRequired(SyncSession, ClientResetHandler) for more information
+ * @see io.realm.SyncSession.ErrorHandler#onError(SyncSession, ObjectServerError) for more information
  *      about when and why Client Reset occurs and how to deal with it.
  */
-public class ClientResetHandler extends ObjectServerError {
+public class ClientResetRequiredError extends ObjectServerError {
 
     private final RealmConfiguration configuration;
     private final File backupFile;
     private final File originalFile;
 
-    public ClientResetHandler(ErrorCode errorCode, String errorMessage, String backupFilePath, RealmConfiguration configuration) {
+    public ClientResetRequiredError(ErrorCode errorCode, String errorMessage, String backupFilePath, RealmConfiguration configuration) {
         super(errorCode, errorMessage);
         this.configuration = configuration;
         this.backupFile = new File(backupFilePath);
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index a8e4a827ec..1a5438ba92 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -127,8 +127,8 @@ public static ErrorCode fromInt(int errorCode) {
         throw new IllegalArgumentException("Unknown error code: " + errorCode);
     }
 
-public enum Category {
+    public enum Category {
         FATAL,          // Abort session as soon as possible
-        RECOVERABLE    // Still possible to recover the session by either rebinding or providing the required information.
+        RECOVERABLE,    // Still possible to recover the session by either rebinding or providing the required information.
     }
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index fe72ce86fe..abf5951752 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -69,6 +69,11 @@
     private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {
         @Override
         public void onError(SyncSession session, ObjectServerError error) {
+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {
+                RealmLog.error("Client Reset required for: " + session.getConfiguration().getServerUrl());
+                return;
+            }
+
             String errorMsg = String.format("Session Error[%s]: %s",
                     session.getConfiguration().getServerUrl(),
                     error.toString());
@@ -83,11 +88,6 @@ public void onError(SyncSession session, ObjectServerError error) {
                     throw new IllegalArgumentException("Unsupported error category: " + error.getErrorCode().getCategory());
             }
         }
-
-        @Override
-        public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-            RealmLog.error("Client Reset required for: " + session.getConfiguration().getPath());
-        }
     };
     // keeps track of SyncSession, using 'realm_path'. Java interface with the ObjectStore using the 'realm_path'
     private static Map<String, SyncSession> sessions = new ConcurrentHashMap<>();
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index 75736ce98f..e301800027 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -123,7 +123,7 @@ void notifySessionError(int errorCode, String errorMessage) {
         ErrorCode errCode = ErrorCode.fromInt(errorCode);
         if (errCode == ErrorCode.CLIENT_RESET) {
             // errorMessage contains the path to the backed up file
-            errorHandler.onClientResetRequired(this, new ClientResetHandler(errCode, "A Client Reset is required. " +
+            errorHandler.onError(this, new ClientResetRequiredError(errCode, "A Client Reset is required. " +
                     "Read more here: https://realm.io/docs/realm-object-server/#client-recovery-from-a-backup.",
                     errorMessage, getConfiguration()));
         } else {
@@ -251,13 +251,9 @@ void close() {
          * When an exception is thrown in the error handler, the occurrence will be logged and the exception
          * will be ignored.
          *
-         * @param session {@link SyncSession} this error happened on.
-         * @param error type of error.
-         */
-        void onError(SyncSession session, ObjectServerError error);
-
-        /**
-         * An error that indicates the Realm needs to be reset.
+         * <p>
+         * When the {@code error.getErrorCode()} returns {@link ErrorCode#CLIENT_RESET}, it indicates the Realm
+         * needs to be reset and the {@code error} can be cast to {@link ClientResetRequiredError}.
          * <p>
          * A synced Realm may need to be reset because the Realm Object Server encountered an error and had
          * to be restored from a backup. If the backup copy of the remote Realm is of an earlier version
@@ -275,7 +271,7 @@ void close() {
          * The client reset process can be initiated in one of two ways:
          * <ol>
          *     <li>
-         *         Run {@link ClientResetHandler#executeClientReset()} manually. All Realm instances must be
+         *         Run {@link ClientResetRequiredError#executeClientReset()} manually. All Realm instances must be
          *         closed before this method is called.
          *     </li>
          *     <li>
@@ -290,11 +286,11 @@ void close() {
          * synchronized to the Object Server. Those changes will only be present in the backed up file. It is therefore
          * recommended to close all open Realm instances as soon as possible.
          *
+         *
          * @param session {@link SyncSession} this error happened on.
-         * @param handler reference to the specific Client Reset error.
-         * @see <a href="https://realm.io/docs/realm-object-server/#client-recovery-from-a-backup">Client Recovery From A Backup</a>
+         * @param error type of error.
          */
-        void onClientResetRequired(SyncSession session, ClientResetHandler handler);
+        void onError(SyncSession session, ObjectServerError error);
     }
 
     String accessToken(final AuthenticationServer authServer) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 734ad92d99..b1a78314af 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -70,14 +70,13 @@ synchronized SyncConfiguration initAndGetManagementRealmConfig(
                         .errorHandler(new SyncSession.ErrorHandler() {
                             @Override
                             public void onError(SyncSession session, ObjectServerError error) {
-                                RealmLog.error(String.format("Unexpected error with %s's management Realm: %s",
-                                        user.getIdentity(),
-                                        error.toString()));
-                            }
-
-                            @Override
-                            public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-                                RealmLog.error("Client Reset required for users management Realm: " + user.toString());
+                                if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {
+                                    RealmLog.error("Client Reset required for user's management Realm: " + user.toString());
+                                } else {
+                                    RealmLog.error(String.format("Unexpected error with %s's management Realm: %s",
+                                            user.getIdentity(),
+                                            error.toString()));
+                                }
                             }
                         })
                         .modules(new PermissionModule())
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index 89d598e1b8..7bbf233fde 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -7,7 +7,6 @@
 import org.junit.runner.RunWith;
 
 import io.realm.BaseIntegrationTest;
-import io.realm.ClientResetHandler;
 import io.realm.ErrorCode;
 import io.realm.ObjectServerError;
 import io.realm.Realm;
@@ -75,11 +74,6 @@ public void onSuccess(SyncUser user) {
                             public void onError(SyncSession session, ObjectServerError error) {
                                 fail("Session failed: " + error);
                             }
-
-                            @Override
-                            public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-                                fail("Client Reset");
-                            }
                         })
                         .build();
 
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java
index 5963837ab7..bfe2e752f1 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java
@@ -27,7 +27,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.realm.BaseIntegrationTest;
-import io.realm.ClientResetHandler;
 import io.realm.ObjectServerError;
 import io.realm.Realm;
 import io.realm.RealmChangeListener;
@@ -68,11 +67,6 @@ public void create_acceptOffer() {
                     public void onError(SyncSession session, ObjectServerError error) {
                         fail("Realm 1 unexpected error: " + error);
                     }
-
-                    @Override
-                    public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-                        fail("Client Reset");
-                    }
                 })
                 .build();
         final Realm realm1 = Realm.getInstance(config1);
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
index 7d1d8c7a14..56ba8589e5 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
@@ -33,7 +33,6 @@
 import java.util.concurrent.TimeUnit;
 
 import io.realm.BaseIntegrationTest;
-import io.realm.ClientResetHandler;
 import io.realm.ObjectServerError;
 import io.realm.Realm;
 import io.realm.RealmChangeListener;
@@ -79,11 +78,6 @@ public void run() {
                                 public void onError(SyncSession session, ObjectServerError error) {
                                     fail("Sync failure: " + error);
                                 }
-
-                                @Override
-                                public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-                                    fail("Client Reset");
-                                }
                             })
                             .build();
                     Realm.deleteRealm(syncConfig);//TODO do this in Rule as async tests
@@ -145,11 +139,6 @@ public void run() {
                                 public void onError(SyncSession session, ObjectServerError error) {
                                     fail("Sync failure: " + error);
                                 }
-
-                                @Override
-                                public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
-                                    fail("Client Reset");
-                                }
                             })
                             .build();
                     Realm.deleteRealm(syncConfig);//TODO do this in Rule as async tests
