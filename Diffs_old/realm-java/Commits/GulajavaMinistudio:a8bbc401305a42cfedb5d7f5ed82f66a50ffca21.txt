diff --git a/CHANGELOG.md b/CHANGELOG.md
index d8b83a5e0c..ab23a1a016 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,9 +1,30 @@
 ## 3.2.0 (YYYY-MM-DD)
 
+### Deprecated
+
 ### Enhancements
 
 * Transient fields are now allowed in model classes, but are implicitly treated as having the `@Ignore' annotation (#4279).
 
+### Bug Fixes
+
+### Internal
+
+
+## 3.1.2 (YYYY-MM-DD)
+
+### Deprecated
+
+### Enhancements
+
+### Bug Fixes
+
+* Crash caused by JNI couldn't find `OsObject.notifyChangeListeners` when ProGuard is enabled (#4461).
+* Incompatible return type of `RealmSchema.getAll()` and `BaseRealm.getSchema()` (#4443).
+
+### Internal
+
+
 ## 3.1.1 (2017-04-07)
 
 ### Deprecated
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
index e69e20613f..d89911896d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
@@ -48,7 +48,7 @@
     private RealmObjectSchema DOG_SCHEMA;
     private DynamicRealm realm;
     private RealmObjectSchema schema;
-    private StandardRealmSchema realmSchema;
+    private RealmSchema realmSchema;
 
     @Before
     public void setUp() {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
index 86e5985fc8..da49a66229 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
@@ -47,7 +47,7 @@
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
 
     private DynamicRealm realm;
-    private StandardRealmSchema realmSchema;
+    private RealmSchema realmSchema;
 
     @Before
     public void setUp() {
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_method.cpp b/realm/realm-library/src/main/cpp/jni_util/java_method.cpp
index e28bfc184a..882e4ef38f 100644
--- a/realm/realm-library/src/main/cpp/jni_util/java_method.cpp
+++ b/realm/realm-library/src/main/cpp/jni_util/java_method.cpp
@@ -29,14 +29,14 @@ JavaMethod::JavaMethod(JNIEnv* env, jclass cls, const char* method_name, const c
         m_method_id = env->GetMethodID(cls, method_name, signature);
     }
 
-    REALM_ASSERT_DEBUG(m_method_id != nullptr);
+    REALM_ASSERT_RELEASE(m_method_id != nullptr);
 }
 
 JavaMethod::JavaMethod(JNIEnv* env, jobject obj, const char* method_name, const char* signature)
 {
     jclass cls = env->GetObjectClass(obj);
     m_method_id = env->GetMethodID(cls, method_name, signature);
-    REALM_ASSERT_DEBUG(m_method_id != nullptr);
+    REALM_ASSERT_RELEASE(m_method_id != nullptr);
     env->DeleteLocalRef(cls);
 }
 
@@ -44,7 +44,7 @@ JavaMethod::JavaMethod(JNIEnv* env, const char* class_name, const char* method_n
                        bool static_method)
 {
     jclass cls = env->FindClass(class_name);
-    REALM_ASSERT_DEBUG(cls != nullptr);
+    REALM_ASSERT_RELEASE(cls != nullptr);
     if (static_method) {
         m_method_id = env->GetStaticMethodID(cls, method_name, signature);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/BaseRealm.java b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
index c2330bf87d..894e581e0a 100644
--- a/realm/realm-library/src/main/java/io/realm/BaseRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
@@ -464,7 +464,7 @@ void setVersion(long version) {
      *
      * @return The {@link RealmSchema} for this Realm.
      */
-    public StandardRealmSchema getSchema() {
+    public RealmSchema getSchema() {
         return schema;
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java
index 922e28aba6..ff432579b9 100644
--- a/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java
@@ -18,6 +18,9 @@
 import java.util.LinkedHashSet;
 import java.util.Set;
 
+import io.realm.internal.Table;
+
+
 class OsRealmObjectSchema extends RealmObjectSchema {
     private final long nativePtr;
 
@@ -181,6 +184,16 @@ long getNativePtr() {
         return nativePtr;
     }
 
+    @Override
+    Table getTable() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    long getAndCheckFieldIndex(String fieldName) {
+        throw new UnsupportedOperationException();
+    }
+
     private Set<Property> getProperties() {
         long[] ptrs = nativeGetProperties(nativePtr);
         Set<Property> properties = new LinkedHashSet<>(ptrs.length);
diff --git a/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java b/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
index c7908c3765..6f3fbb0b16 100644
--- a/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
@@ -34,7 +34,7 @@
  */
 class OsRealmSchema extends RealmSchema {
     static final class Creator extends RealmSchema {
-        private final Map<String, OsRealmObjectSchema> schema = new HashMap<>();
+        private final Map<String, RealmObjectSchema> schema = new HashMap<>();
 
         @Override
         public void close() { }
@@ -46,7 +46,7 @@ public RealmObjectSchema get(String className) {
         }
 
         @Override
-        public Set<OsRealmObjectSchema> getAll() {
+        public Set<RealmObjectSchema> getAll() {
             return new LinkedHashSet<>(schema.values());
         }
 
@@ -99,11 +99,11 @@ public RealmObjectSchema rename(String oldClassName, String newClassName) {
     private final long nativePtr;
 
     OsRealmSchema(Creator creator) {
-        Set<OsRealmObjectSchema> realmObjectSchemas = creator.getAll();
+        Set<RealmObjectSchema> realmObjectSchemas = creator.getAll();
         long[] schemaNativePointers = new long[realmObjectSchemas.size()];
         int i = 0;
-        for (OsRealmObjectSchema schema : realmObjectSchemas) {
-            schemaNativePointers[i++] = schema.getNativePtr();
+        for (RealmObjectSchema schema : realmObjectSchemas) {
+            schemaNativePointers[i++] = ((OsRealmObjectSchema) schema).getNativePtr();
         }
         this.nativePtr = nativeCreateFromList(schemaNativePointers);
     }
@@ -115,7 +115,7 @@ public long getNativePtr() {
     // See BaseRealm uses a StandardRealmSchema, not a OsRealmSchema.
     @Override
     public void close() {
-        Set<OsRealmObjectSchema> schemas = getAll();
+        Set<RealmObjectSchema> schemas = getAll();
         for (RealmObjectSchema schema : schemas) {
             schema.close();
         }
@@ -140,9 +140,9 @@ public RealmObjectSchema get(String className) {
      * @return the set of all classes in this Realm or no RealmObject classes can be saved in the Realm.
      */
     @Override
-    public Set<OsRealmObjectSchema> getAll() {
+    public Set<RealmObjectSchema> getAll() {
         long[] ptrs = nativeGetAll(nativePtr);
-        Set<OsRealmObjectSchema> schemas = new LinkedHashSet<>(ptrs.length);
+        Set<RealmObjectSchema> schemas = new LinkedHashSet<>(ptrs.length);
         for (int i = 0; i < ptrs.length; i++) {
             schemas.add(new OsRealmObjectSchema(ptrs[i]));
         }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
index e575615082..bed6061e1f 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
@@ -19,6 +19,7 @@
 import java.util.Set;
 
 import io.realm.annotations.Required;
+import io.realm.internal.Table;
 
 
 /**
@@ -290,4 +291,7 @@ protected FieldMetaData(RealmFieldType realmType, boolean defaultNullable) {
             this.defaultNullable = defaultNullable;
         }
     }
+
+    abstract Table getTable();
+    abstract long getAndCheckFieldIndex(String fieldName);
 }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 7f3a19197d..8afbdcaea6 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -54,7 +54,7 @@
     private final Table table;
     private final BaseRealm realm;
     private final TableQuery query;
-    private final StandardRealmObjectSchema schema;
+    private final RealmObjectSchema schema;
     private Class<E> clazz;
     private String className;
     private LinkView linkView;
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index 4b3dcda6c9..0968433c78 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -54,7 +54,7 @@
      *
      * @return the set of all classes in this Realm or no RealmObject classes can be saved in the Realm.
      */
-    public abstract Set<? extends RealmObjectSchema> getAll();
+    public abstract Set<RealmObjectSchema> getAll();
 
     /**
      * Adds a new class to the Realm.
diff --git a/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java
index cced1c6d23..d46fb453ea 100644
--- a/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java
@@ -81,7 +81,8 @@
         this.columnIndices = columnIndices;
     }
 
-    public Table getTable() {
+    @Override
+    Table getTable() {
         return table;
     }
 
@@ -652,6 +653,7 @@ Long getFieldIndex(String fieldName) {
      * @return column index.
      * @throws IllegalArgumentException if the field does not exists.
      */
+    @Override
     long getAndCheckFieldIndex(String fieldName) {
         Long index = columnIndices.get(fieldName);
         if (index == null) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
index 5cf394d4ad..33e1807b04 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
@@ -24,6 +24,7 @@
 /**
  * Java wrapper for Object Store's {@code Object} class. Currently it is only used for object notifications.
  */
+@KeepMember
 public class OsObject implements NativeObject {
 
     private static class OsObjectChangeSet implements ObjectChangeSet {
@@ -143,6 +144,7 @@ public void setObserverPairs(ObserverPairList<ObjectObserverPair> pairs) {
 
     // Called by JNI
     @SuppressWarnings("unused")
+    @KeepMember
     private void notifyChangeListeners(String[] changedFields) {
         observerPairs.foreach(new Callback(changedFields));
     }
