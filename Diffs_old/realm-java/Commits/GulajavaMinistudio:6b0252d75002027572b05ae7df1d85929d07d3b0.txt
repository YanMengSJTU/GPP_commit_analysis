diff --git a/Dockerfile b/Dockerfile
index f316c71ce3..f1a65fe040 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -50,7 +50,7 @@ RUN mkdir "${ANDROID_HOME}/licenses" && \
     echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "${ANDROID_HOME}/licenses/android-sdk-license"
 RUN sdkmanager --update
 RUN sdkmanager 'platform-tools'
-RUN sdkmanager 'build-tools;26.0.1'
+RUN sdkmanager 'build-tools;26.0.2'
 RUN sdkmanager 'extras;android;m2repository'
 RUN sdkmanager 'platforms;android-26'
 
diff --git a/README.md b/README.md
index 566e4cf044..e6b22c7e0b 100644
--- a/README.md
+++ b/README.md
@@ -60,7 +60,7 @@ In case you don't want to use the precompiled version, you can build Realm yours
 ### Prerequisites
 
  * Download the [**JDK 7**](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) or [**JDK 8**](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) from Oracle and install it.
- * Download & install the Android SDK **Build-Tools 26.0.1**, **Android O (API 26)** (for example through Android Studio’s **Android SDK Manager**).
+ * Download & install the Android SDK **Build-Tools 26.0.2**, **Android O (API 26)** (for example through Android Studio’s **Android SDK Manager**).
  * Install CMake from SDK manager in Android Studio ("SDK Tools" -> "CMake").
  * If you use Android Studio, Android Studio 3.0 or later is required.
 
diff --git a/dependencies.list b/dependencies.list
index 0025e7c835..f0cdeba2d2 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -5,4 +5,4 @@ REALM_SYNC_SHA256=5e09e54e68e78683e006898f5a703f80e0ee49492fb0f9dc2384fcbbb9f02f
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
-REALM_OBJECT_SERVER_DE_VERSION=2.0.0-alpha.35
+REALM_OBJECT_SERVER_DE_VERSION=2.0.0-alpha.38
diff --git a/examples/build.gradle b/examples/build.gradle
index 2098d0d2e5..c0d569277d 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -1,5 +1,5 @@
 project.ext.sdkVersion = 26
-project.ext.buildTools = '26.0.1'
+project.ext.buildTools = '26.0.2'
 
 // Don't cache SNAPSHOT (changing) dependencies.
 configurations.all {
diff --git a/library-benchmarks/build.gradle b/library-benchmarks/build.gradle
index ce15de82a8..13ec8c5955 100644
--- a/library-benchmarks/build.gradle
+++ b/library-benchmarks/build.gradle
@@ -27,7 +27,7 @@ apply plugin: 'realm-android'
 
 android {
     compileSdkVersion 26
-    buildToolsVersion "26.0.1"
+    buildToolsVersion "26.0.2"
 
     defaultConfig {
         minSdkVersion 15
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 5115e05f78..002afb9e26 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -41,7 +41,7 @@ ext.enableDebugCore = project.hasProperty('enableDebugCore') ? project.getProper
 
 android {
     compileSdkVersion 26
-    buildToolsVersion '26.0.1'
+    buildToolsVersion '26.0.2'
 
     defaultConfig {
         minSdkVersion 9
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 0a69915366..7d0a5a2c69 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -447,10 +447,11 @@ public SyncUserInfo retrieveInfoForUser(final String providerUserIdentity, final
         AuthenticationServer authServer = SyncManager.getAuthServer();
         LookupUserIdResponse response = authServer.retrieveUser(refreshToken, provider, providerUserIdentity, getAuthenticationUrl());
         if (!response.isValid()) {
-            // Right now errors are very inconsistent. See https://github.com/realm/ros/issues/310
-            // Treat them all as "User not existing". This is too broad, and should be revisited
-            // once #310 is fixed.
-            return null;
+            if (response.getError().getErrorCode() == ErrorCode.UNKNOWN_ACCOUNT) {
+                return null;
+            } else {
+                throw response.getError();
+            }
         } else {
             return SyncUserInfo.fromLookupUserIdResponse(response);
         }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUserInfo.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUserInfo.java
index f14fe208be..a9a1369966 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUserInfo.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUserInfo.java
@@ -30,15 +30,17 @@
     private final String identity;
     private final boolean isAdmin;
     private final Map<String, String> metadata;
+    private final Map<String, String> accounts;
 
-    private SyncUserInfo(String identity, boolean isAdmin, Map<String, String> metadata) {
+    private SyncUserInfo(String identity, boolean isAdmin, Map<String, String> metadata, Map<String, String> accounts) {
         this.identity = identity;
         this.isAdmin = isAdmin;
         this.metadata = Collections.unmodifiableMap(metadata);
+        this.accounts = Collections.unmodifiableMap(accounts);
     }
 
     static SyncUserInfo fromLookupUserIdResponse(LookupUserIdResponse response) {
-        return new SyncUserInfo(response.getUserId(), response.isAdmin(), response.getMetadata());
+        return new SyncUserInfo(response.getUserId(), response.isAdmin(), response.getMetadata(), response.getAccounts());
     }
 
     /**
@@ -65,6 +67,19 @@ public boolean isAdmin() {
         return metadata;
     }
 
+    /**
+     * Returns the accounts associated with this user. The map returned is a map of {@link SyncCredentials.IdentityProvider}
+     * and the providerId used in that provider.
+     * <p>
+     * Example being {@code ("password", "my@email.com") }, if the user created an account using the standard account creation
+     * supported by the Realm Object Server.
+     * <p>
+     * A user can have multiple accounts associated with it.
+     *
+     * @return the accounts associated with the user.
+     */
+    public Map<String, String> getAccounts() { return accounts; }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordRequest.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordRequest.java
index 827ec0746a..b3ee747053 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordRequest.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordRequest.java
@@ -56,10 +56,12 @@ private ChangePasswordRequest(String token, String newPassword, String userID) {
     public String toJson() {
         try {
             JSONObject request = new JSONObject();
-            request.put("new_password", newPassword);
             if (userID != null) {
                 request.put("user_id", userID);
             }
+            JSONObject data = new JSONObject();
+            data.put("new_password", newPassword);
+            request.put("data", data);
             return request.toString();
         } catch (JSONException e) {
             throw new RuntimeException(e);
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/LookupUserIdResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LookupUserIdResponse.java
index a9d93d7c93..810b4ee87f 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/LookupUserIdResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LookupUserIdResponse.java
@@ -15,12 +15,12 @@
  */
 package io.realm.internal.network;
 
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.IOException;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Locale;
 import java.util.Map;
 
@@ -36,12 +36,13 @@
 
     private static final String JSON_FIELD_USER_ID = "user_id";
     private static final String JSON_FIELD_USER_IS_ADMIN = "is_admin";
-    private static final String JSON_FIELD_METADATA =  "metadata";
+    private static final String JSON_FIELD_METADATA = "metadata";
+    private static final String JSON_FIELD_ACCOUNTS = "accounts";
 
     private final String userId;
     private final Boolean isAdmin;
     private final Map<String, String> metadata;
-
+    private final Map<String, String> accounts;
     /**
      * Helper method for creating the proper lookup user response. This method will set the appropriate error
      * depending on any HTTP response codes or I/O errors.
@@ -85,6 +86,7 @@ private LookupUserIdResponse(ObjectServerError error) {
         this.userId = null;
         this.isAdmin = null;
         this.metadata = new HashMap<>();
+        this.accounts = new HashMap<>();
     }
 
     private LookupUserIdResponse(String serverResponse) {
@@ -93,11 +95,13 @@ private LookupUserIdResponse(String serverResponse) {
         Boolean isAdmin;
         String message;
         Map<String, String> metadata;
+        Map<String, String> accounts;
         try {
             JSONObject obj = new JSONObject(serverResponse);
             userId = obj.getString(JSON_FIELD_USER_ID);
             isAdmin = obj.getBoolean(JSON_FIELD_USER_IS_ADMIN);
-            metadata = jsonToMap(obj.getJSONObject(JSON_FIELD_METADATA));
+            metadata = jsonToMap(obj.getJSONArray(JSON_FIELD_METADATA), "key", "value");
+            accounts = jsonToMap(obj.getJSONArray(JSON_FIELD_ACCOUNTS), "provider", "provider_id");
             error = null;
 
             message = String.format(Locale.US, "Identity %s; Path %b", userId, isAdmin);
@@ -106,6 +110,7 @@ private LookupUserIdResponse(String serverResponse) {
             userId = null;
             isAdmin = null;
             metadata = new HashMap<>();
+            accounts = new HashMap<>();
             error = new ObjectServerError(ErrorCode.JSON_EXCEPTION, e);
             message = String.format(Locale.US, "Error %s", error.getErrorMessage());
         }
@@ -115,6 +120,7 @@ private LookupUserIdResponse(String serverResponse) {
         this.userId = userId;
         this.isAdmin = isAdmin;
         this.metadata = metadata;
+        this.accounts = accounts;
     }
 
     public String getUserId() {
@@ -127,21 +133,21 @@ public boolean isAdmin() {
 
     public Map<String, String> getMetadata() { return metadata; }
 
-    private static Map<String, String> jsonToMap(JSONObject json) throws JSONException {
-        Map<String, String> map = new HashMap<>();
-        if(json != JSONObject.NULL) {
-            map = toMap(json);
-        }
-        return map;
-    }
+    public Map<String, String> getAccounts() { return accounts; }
 
-    private static Map<String, String> toMap(JSONObject object) throws JSONException {
+    // Assume arrays of key/value irrespectively of what they are named.
+    // Throws if this is not the case
+    private static Map<String, String> jsonToMap(JSONArray array, String keyName, String valueName) throws JSONException {
         Map<String, String> map = new HashMap<>();
-        Iterator<String> keysItr = object.keys();
-        while(keysItr.hasNext()) {
-            String key = keysItr.next();
-            String value = object.getString(key);
-            map.put(key, value);
+        if (array == null) {
+            return map;
+        }
+        for (int i = 0; i < array.length(); i++) {
+            JSONObject obj = array.getJSONObject(i);
+            if (obj.length() != 2) {
+                throw new IllegalStateException("Array object not a key/value object. Has " + obj.length() + " fields");
+            }
+            map.put(obj.getString(keyName), obj.getString(valueName));
         }
         return map;
     }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java
index 88a6fcfd20..e3b5db8a09 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java
@@ -38,7 +38,7 @@
     public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
     private static final String ACTION_LOGOUT = "revoke"; // Auth end point for logging out users
     private static final String ACTION_CHANGE_PASSWORD = "password"; // Auth end point for changing passwords
-    private static final String ACTION_LOOKUP_USER_ID = "/users/:provider:/:providerId:"; // Auth end point for looking up user id
+    private static final String ACTION_LOOKUP_USER_ID = "users/:provider:/:providerId:"; // Auth end point for looking up user id
 
     private final OkHttpClient client = new OkHttpClient.Builder()
             .connectTimeout(10, TimeUnit.SECONDS)
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java
index bd53f9209c..c93851536e 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java
@@ -44,7 +44,6 @@
  * Catch all class for tests that not naturally fit anywhere else.
  */
 @RunWith(AndroidJUnit4.class)
-@Ignore("See https://github.com/realm/realm-java/issues/5177. All waitForInitialRemoteData tests seem to fail. Must be fixed")
 public class SyncedRealmTests extends StandardIntegrationTest {
 
     @Test
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index fddc2c5ea5..8f313270ed 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -186,7 +186,6 @@ public void onError(ObjectServerError error) {
     }
 
     @Test
-    @Ignore("Wait for https://github.com/realm/ros/issues/335")
     public void changePassword() {
         String username = UUID.randomUUID().toString();
         String originalPassword = "password";
@@ -198,15 +197,23 @@ public void changePassword() {
         String newPassword = "new-password";
         userOld.changePassword(newPassword);
         userOld.logout();
+
+        // Make sure old password doesn't work
+        try {
+            SyncUser.login(SyncCredentials.usernamePassword(username, originalPassword, false), Constants.AUTH_URL);
+            fail();
+        } catch (ObjectServerError e) {
+            assertEquals(ErrorCode.INVALID_CREDENTIALS, e.getErrorCode());
+        }
+
+        // Then login with new password
         credentials = SyncCredentials.usernamePassword(username, newPassword, false);
         SyncUser userNew = SyncUser.login(credentials, Constants.AUTH_URL);
-
         assertTrue(userNew.isValid());
         assertEquals(userOld.getIdentity(), userNew.getIdentity());
     }
 
     @Test
-    @Ignore("See https://github.com/realm/ros/issues/335")
     public void changePassword_using_admin() {
         String username = UUID.randomUUID().toString();
         String originalPassword = "password";
@@ -234,7 +241,6 @@ public void changePassword_using_admin() {
 
     @Test
     @RunTestInLooperThread
-    @Ignore("Wait for https://github.com/realm/ros/issues/335")
     public void changePassword_using_admin_async() {
         final String username = UUID.randomUUID().toString();
         final String originalPassword = "password";
@@ -274,7 +280,6 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread
-    @Ignore("Wait until https://github.com/realm/ros/issues/309 is resolved")
     public void changePassword_throwWhenUserIsLoggedOut() {
         String username = UUID.randomUUID().toString();
         String password = "password";
@@ -492,6 +497,7 @@ public void singleUserCanBeLoggedInAndOutRepeatedly() {
     }
 
     @Test
+    @Ignore("See https://github.com/realm/ros/issues/360")
     public void revokedRefreshTokenIsNotSameAfterLogin() throws InterruptedException {
         final CountDownLatch userLoggedInAgain = new CountDownLatch(1);
         final String uniqueName = UUID.randomUUID().toString();
@@ -508,7 +514,6 @@ public void loggedIn(SyncUser user) {
 
             @Override
             public void loggedOut(SyncUser user) {
-                SystemClock.sleep(1000); // Remove once https://github.com/realm/ros/issues/304 is fixed
                 SyncCredentials credentials = SyncCredentials.usernamePassword(uniqueName, "password", false);
                 SyncUser loggedInUser = SyncUser.login(credentials, Constants.AUTH_URL);
 
@@ -600,7 +605,6 @@ public void execute(Realm realm) {
     }
 
     @Test
-    @Ignore("Wait for https://github.com/realm/ros/issues/333")
     public void retrieve() {
         final SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
 
@@ -618,13 +622,13 @@ public void retrieve() {
         assertEquals(identity, userInfo.getIdentity());
         assertFalse(userInfo.isAdmin());
         assertTrue(userInfo.getMetadata().isEmpty());
+        assertEquals(username, userInfo.getAccounts().get(SyncCredentials.IdentityProvider.USERNAME_PASSWORD));
     }
 
 
     // retrieving a logged out user
     @Test
     @RunTestInLooperThread
-    @Ignore("Wait for https://github.com/realm/ros/issues/333")
     public void retrieve_logout() {
         final SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
 
@@ -661,6 +665,7 @@ public void run() {
                         assertEquals(identity, userInfo.getIdentity());
                         assertFalse(userInfo.isAdmin());
                         assertTrue(userInfo.getMetadata().isEmpty());
+                        assertEquals(username, userInfo.getAccounts().get(SyncCredentials.IdentityProvider.USERNAME_PASSWORD));
 
                         looperThread.testComplete();
                     }
@@ -692,7 +697,6 @@ public void retrieve_invalidProvider() {
     }
 
     @Test
-    @Ignore("Wait for https://github.com/realm/ros/issues/333")
     public void retrieve_notAdmin() {
         final String username1 = UUID.randomUUID().toString();
         final String password1 = "password";
@@ -716,7 +720,6 @@ public void retrieve_notAdmin() {
 
     @Test
     @RunTestInLooperThread
-    @Ignore("Wait for https://github.com/realm/ros/issues/333")
     public void retrieve_async() {
         final String username = UUID.randomUUID().toString();
         final String password = "password";
@@ -737,6 +740,7 @@ public void onSuccess(SyncUserInfo userInfo) {
                 assertEquals(identity, userInfo.getIdentity());
                 assertFalse(userInfo.isAdmin());
                 assertTrue(userInfo.getMetadata().isEmpty());
+                assertEquals(username, userInfo.getAccounts().get(SyncCredentials.IdentityProvider.USERNAME_PASSWORD));
 
                 looperThread.testComplete();
             }
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
index aba3c0ec97..9c4d3881dc 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
@@ -16,6 +16,7 @@
 
 package io.realm.objectserver.utils;
 
+import android.os.SystemClock;
 import android.util.Log;
 
 import java.io.IOException;
@@ -56,6 +57,10 @@ public static void startSyncServer() throws Exception {
 
         Response response = client.newCall(request).execute();
         if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
+
+        // Work around race condition between starting ROS and logging in first user
+        // See https://github.com/realm/ros/issues/389
+        SystemClock.sleep(2000);
     }
 
     public static void stopSyncServer() throws Exception {
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/UserFactory.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/UserFactory.java
index a669b7dda4..24345677b3 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/UserFactory.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/UserFactory.java
@@ -149,8 +149,6 @@ public void run() {
                 for (SyncUser user : users.values()) {
                     user.logout();
                 }
-                // FIXME https://github.com/realm/ros/issues/338
-                SystemClock.sleep(2000);
                 allUsersLoggedOut.countDown();
 
             }
