diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4d00d99e09..4f0c017fea 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,6 +4,14 @@
 
 * `RealmConfiguration.setModules()`. Use `RealmConfiguration.modules()` instead.
 
+### Enhancements
+
+* `RealmObjectSchema.getPrimaryKey()` (#2636)
+
+### Credits
+
+* Thanks to Brenden Kromhout (@bkromhout) for adding `RealmObjectSchema.getPrimaryKey()`.
+
 ## 0.89.0
 
 ### Breaking changes
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
index c2e75eb359..1bcde0b70d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
@@ -17,7 +17,8 @@
 package io.realm;
 
 import android.support.test.runner.AndroidJUnit4;
-
+import io.realm.entities.AllJavaTypes;
+import io.realm.rule.TestRealmConfigurationFactory;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -28,9 +29,6 @@
 import java.util.Date;
 import java.util.Set;
 
-import io.realm.entities.AllJavaTypes;
-import io.realm.rule.TestRealmConfigurationFactory;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -318,6 +316,7 @@ public void primaryKeyFieldAttribute() {
             schema.addField(fieldName, fieldType.getType(), FieldAttribute.PRIMARY_KEY);
             assertTrue(schema.hasPrimaryKey());
             assertTrue(schema.isPrimaryKey(fieldName));
+            assertEquals(fieldName, schema.getPrimaryKey());
             switch (fieldType) {
                 case BYTE:
                 case SHORT:
@@ -708,6 +707,11 @@ public void isPrimaryKey_nonExistFieldThrows() {
         schema.isPrimaryKey("I don't exist");
     }
 
+    @Test(expected = IllegalStateException.class)
+    public void getPrimaryKey_nonExistFieldThrows() {
+        schema.getPrimaryKey();
+    }
+
     private interface FieldRunnable {
         void run(String fieldName);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
index 8ba37e6d63..2fcdea4c90 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
@@ -16,6 +16,11 @@
 
 package io.realm;
 
+import io.realm.annotations.Required;
+import io.realm.internal.ImplicitTransaction;
+import io.realm.internal.Table;
+import io.realm.internal.TableOrView;
+
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
@@ -24,11 +29,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import io.realm.annotations.Required;
-import io.realm.internal.ImplicitTransaction;
-import io.realm.internal.Table;
-import io.realm.internal.TableOrView;
-
 /**
  * Class for interacting with the schema for a given RealmObject class. This makes it possible to
  * add, delete or change the fields for given class.
@@ -421,6 +421,19 @@ public boolean hasPrimaryKey() {
         return table.hasPrimaryKey();
     }
 
+    /**
+     * Returns the name of the primary key field.
+     *
+     * @return the name of the primary key field.
+     * @throws IllegalStateException if the class doesn't have a primary key defined.
+     */
+    public String getPrimaryKey() {
+        if (!table.hasPrimaryKey()) {
+            throw new IllegalStateException(getClassName() + " doesn't have a primary key.");
+        }
+        return table.getColumnName(table.getPrimaryKey());
+    }
+
     /**
      * Returns all fields in this class.
      *
