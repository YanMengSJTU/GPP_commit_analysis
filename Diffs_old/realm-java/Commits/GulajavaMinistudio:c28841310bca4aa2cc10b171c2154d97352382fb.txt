diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8f216d07c6..e150e3e9bb 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -34,6 +34,7 @@
 * Fixed a bug in how to resolve field names when querying `@LinkingObjects` as the last field (#4864).
 * Rare crash in `RealmLog` when log level was set to `LogLevel.DEBUG`.
 * [ObjectServer] Fixed a bug related to the behaviour of `SyncUser#logout` and the use of invalid `SyncUser` with `SyncConfiguration` (#4822).
+* [ObjectServer] Not all error codes from the server were recognized correctly, resulting in UNKNOWN being reported instead.
 
 ### Internal
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
index 2bc3206cf4..ca5fe29fc6 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
@@ -25,7 +25,6 @@
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.concurrent.CountDownLatch;
 
 import io.realm.entities.Dog;
 import io.realm.entities.Owner;
@@ -402,7 +401,7 @@ public void run() {
         realm.commitTransaction();
     }
 
-    // The change set should empty when the async query returns at the first time.
+    // The change set should be empty when the async query returns at the first time.
     @Test
     @RunTestInLooperThread
     public void emptyChangeSet_findAllAsync() {
@@ -414,31 +413,15 @@ public void emptyChangeSet_findAllAsync() {
         Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         final RealmResults<Dog> results = realm.where(Dog.class).findAllSortedAsync(Dog.FIELD_AGE);
+        looperThread.keepStrongReference(results);
         results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet changeSet) {
                 assertSame(collection, results);
-                assertEquals(9, collection.size());
+                assertEquals(10, collection.size());
                 assertNull(changeSet);
                 looperThread.testComplete();
             }
         });
-
-        final CountDownLatch bgDeletionLatch = new CountDownLatch(1);
-        // beginTransaction() will make the async query return immediately. So we have to create an object in another
-        // thread. Also, the latch has to be counted down after transaction committed so the async query results can
-        // contain the modification in the background transaction.
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                Realm realm = Realm.getInstance(looperThread.getConfiguration());
-                realm.beginTransaction();
-                realm.where(Dog.class).equalTo(Dog.FIELD_AGE, 0).findFirst().deleteFromRealm();
-                realm.commitTransaction();
-                realm.close();
-                bgDeletionLatch.countDown();
-            }
-        }).start();
-        TestHelper.awaitOrFail(bgDeletionLatch);
     }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
index b44bcc868f..4ac5b1521a 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
@@ -26,6 +26,8 @@
 import org.junit.runner.RunWith;
 
 import io.realm.entities.AllTypes;
+import io.realm.entities.BacklinksSource;
+import io.realm.entities.BacklinksTarget;
 import io.realm.entities.Cat;
 import io.realm.entities.pojo.AllTypesRealmModel;
 import io.realm.rule.RunInLooperThread;
@@ -35,6 +37,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(AndroidJUnit4.class)
 public class RealmChangeListenerTests {
@@ -225,4 +228,75 @@ public void onChange(RealmResults<DynamicRealmObject> result) {
         allTypes.setString(AllTypes.FIELD_STRING, "test data 1");
         dynamicRealm.commitTransaction();
     }
+
+    // 1. adding a listener on the children
+    // 2. modify parent
+    // 3. at least one child is modified
+    // 4. listener is not triggered (backlink)
+    // FIXME: will break when https://github.com/realm/realm-java/issues/4875 is solved
+    @Test
+    @RunTestInLooperThread
+    public void listenerOnChildChangeParent() {
+        final long[] nCalls = {0};
+        final Realm realm = Realm.getInstance(looperThread.getConfiguration());
+        TestHelper.populateLinkedDataSet(realm);
+
+        RealmResults<BacklinksTarget> backlinksTargets = realm.where(BacklinksTarget.class).findAll();
+        assertEquals(3, backlinksTargets.size());
+        assertTrue(backlinksTargets.last().getParents().isEmpty());
+        assertEquals(2, backlinksTargets.first().getParents().size());
+
+        looperThread.keepStrongReference(backlinksTargets);
+
+        backlinksTargets.addChangeListener(new RealmChangeListener<RealmResults<BacklinksTarget>>() {
+            @Override
+            public void onChange(RealmResults<BacklinksTarget> backlinksTargets) {
+                nCalls[0]++;
+            }
+        });
+
+        realm.beginTransaction();
+        BacklinksTarget target = backlinksTargets.last();
+        realm.where(BacklinksSource.class).findFirst().setChild(target);
+        realm.commitTransaction();
+
+        // backlinks are updated
+        assertEquals(1, backlinksTargets.last().getParents().size());
+        assertEquals(1, backlinksTargets.first().getParents().size());
+        assertEquals(0, nCalls[0]);
+        realm.close();
+        looperThread.testComplete();
+    }
+
+    // 1. adding a listener if on the parent
+    // 2. modify child
+    // 3. listener is triggered (forward link)
+    @Test@RunTestInLooperThread
+    public void listenerOnParentChangeChild() {
+        final long[] nCalls = {0};
+        final Realm realm = Realm.getInstance(looperThread.getConfiguration());
+        TestHelper.populateLinkedDataSet(realm);
+
+        RealmResults<BacklinksSource> backlinksSources = realm.where(BacklinksSource.class).findAll();
+        assertEquals(4, backlinksSources.size());
+
+        looperThread.keepStrongReference(backlinksSources);
+        backlinksSources.addChangeListener(new RealmChangeListener<RealmResults<BacklinksSource>>() {
+            @Override
+            public void onChange(RealmResults<BacklinksSource> backlinksSources) {
+                nCalls[0]++;
+            }
+        });
+
+        realm.beginTransaction();
+        BacklinksTarget backlinksTarget = realm.where(BacklinksTarget.class).findFirst();
+        backlinksTarget.setId(42);
+        realm.commitTransaction();
+
+        assertEquals(42, backlinksSources.first().getChild().getId());
+        assertEquals(1, nCalls[0]);
+
+        realm.close();
+        looperThread.testComplete();
+    }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
index 469de59c00..a0e805da98 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
@@ -33,7 +33,6 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
-import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
@@ -48,6 +47,8 @@
 import io.realm.entities.AllTypes;
 import io.realm.entities.AllTypesPrimaryKey;
 import io.realm.entities.AnnotationIndexTypes;
+import io.realm.entities.BacklinksSource;
+import io.realm.entities.BacklinksTarget;
 import io.realm.entities.NullTypes;
 import io.realm.entities.PrimaryKeyAsBoxedByte;
 import io.realm.entities.PrimaryKeyAsBoxedInteger;
@@ -1227,4 +1228,36 @@ public static boolean isSelinuxEnforcing() {
             return false;
         }
     }
+
+    public static void populateLinkedDataSet(Realm realm) {
+        realm.beginTransaction();
+        realm.delete(BacklinksSource.class);
+        realm.delete(BacklinksTarget.class);
+
+        BacklinksTarget target1 = realm.createObject(BacklinksTarget.class);
+        target1.setId(1);
+
+        BacklinksTarget target2 = realm.createObject(BacklinksTarget.class);
+        target2.setId(2);
+
+        BacklinksTarget target3 = realm.createObject(BacklinksTarget.class);
+        target3.setId(3);
+
+        BacklinksSource source1 = realm.createObject(BacklinksSource.class);
+        source1.setName("1");
+        source1.setChild(target1);
+        BacklinksSource source2 = realm.createObject(BacklinksSource.class);
+        source2.setName("2");
+        source2.setChild(target2);
+
+        BacklinksSource source3 = realm.createObject(BacklinksSource.class);
+        source3.setName("3");
+
+        BacklinksSource source4 = realm.createObject(BacklinksSource.class);
+        source4.setName("4");
+        source4.setChild(target1);
+
+        realm.commitTransaction();
+    }
+
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index 827ce43f28..a0fed2a44b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -23,7 +23,8 @@
  */
 public enum ErrorCode {
 
-    // See https://github.com/realm/realm-sync/blob/master/doc/protocol_16.md
+    // See https://github.com/realm/realm-sync/blob/master/doc/protocol_17.md
+    // See https://github.com/realm/realm-object-server/blob/master/object-server/doc/problems.md
 
     // Realm Java errors (0-49)
     UNKNOWN(-1),                                // Catch-all
@@ -65,9 +66,52 @@
     DISABLED_SESSION(213),                          // Disabled session
 
     // 300 - 599 Reserved for Standard HTTP error codes
-
-    // user lookup endpoint returns 404 in case it couldn't honor the query
+    MULTIPLE_CHOICES(300),
+    MOVED_PERMANENTLY(301),
+    FOUND(302),
+    SEE_OTHER(303),
+    NOT_MODIFIED(304),
+    USE_PROXY(305),
+    TEMPORARY_REDIRECT(307),
+    PERMANENT_REDIRECT(308),
+    BAD_REQUEST(400),
+    UNAUTHORIZED(401),
+    PAYMENT_REQUIRED(402),
+    FORBIDDEN(403),
     NOT_FOUND(404),
+    METHOD_NOT_ALLOWED(405),
+    NOT_ACCEPTABLE(406),
+    PROXY_AUTHENTICATION_REQUIRED(407),
+    REQUEST_TIMEOUT(408),
+    CONFLICT(409),
+    GONE(410),
+    LENGTH_REQUIRED(411),
+    PRECONDITION_FAILED(412),
+    PAYLOAD_TOO_LARGE(413),
+    URI_TOO_LONG(414),
+    UNSUPPORTED_MEDIA_TYPE(415),
+    RANGE_NOT_SATISFIABLE(416),
+    EXPECTATION_FAILED(417),
+    MISDIRECTED_REQUEST(421),
+    UNPROCESSABLE_ENTITY(422),
+    LOCKED(423),
+    FAILED_DEPENDENCY(424),
+    UPGRADE_REQUIRED(426),
+    PRECONDITION_REQUIRED(428),
+    TOO_MANY_REQUESTS(429),
+    REQUEST_HEADER_FIELDS_TOO_LARGE(431),
+    UNAVAILABLE_FOR_LEGAL_REASONS(451),
+    INTERNAL_SERVER_ERROR(500),
+    NOT_IMPLEMENTED(501),
+    BAD_GATEWAY(502),
+    SERVICE_UNAVAILABLE(503),
+    GATEWAY_TIMEOUT(504),
+    HTTP_VERSION_NOT_SUPPORTED(505),
+    VARIANT_ALSO_NEGOTIATES(506),
+    INSUFFICIENT_STORAGE(507),
+    LOOP_DETECTED(508),
+    NOT_EXTENDED(510),
+    NETWORK_AUTHENTICATION_REQUIRED(511),
 
     // Realm Authentication Server response errors (600 - 699)
     INVALID_PARAMETERS(601),
@@ -76,7 +120,14 @@
     UNKNOWN_ACCOUNT(612),
     EXISTING_ACCOUNT(613),
     ACCESS_DENIED(614),
-    EXPIRED_REFRESH_TOKEN(615);
+    EXPIRED_REFRESH_TOKEN(615),
+    INVALID_HOST(616),
+
+    // Other Realm Object Server response errors
+    EXPIRED_PERMISSION_OFFER(701),
+    AMBIGUOUS_PERMISSION_OFFER_TOKEN(702),
+    FILE_MAY_NOT_BE_SHARED(703),
+    SERVER_MISCONFIGURATION(801);
 
     private final int code;
     private final Category category;
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index be0a22499f..a15c83686e 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -398,6 +398,55 @@ public void loggingOutCurrentUserShouldImpactOtherInstances() throws Interrupted
         assertNull(SyncUser.currentUser());
     }
 
+    // verify that multiple users can be logged in at the same time
+    @Test
+    public void multipleUsersCanBeLoggedInSimultaneously() {
+        final String password = "password";
+        final SyncUser[] users = new SyncUser[3];
+
+        for (int i = 0; i < users.length; i++) {
+            SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), password,
+                    true);
+            users[i] = SyncUser.login(credentials, Constants.AUTH_URL);
+        }
+
+        for (int i = 0; i < users.length; i++) {
+            assertTrue(users[i].isValid());
+        }
+
+        for (int i = 0; i < users.length; i++) {
+            users[i].logout();
+        }
+
+        for (int i = 0; i < users.length; i++) {
+            assertFalse(users[i].isValid());
+        }
+    }
+
+    // verify that a single user can be logged out and back in.
+    @Test
+    public void singleUserCanBeLoggedInAndOutRepeatedly() {
+        final String username = UUID.randomUUID().toString();
+        final String password = "password";
+
+        // register the user the first time
+        SyncCredentials credentials = SyncCredentials.usernamePassword(username, password, true);
+
+        SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);
+        assertTrue(user.isValid());
+        user.logout();
+        assertFalse(user.isValid());
+
+        // on subsequent logins, the user is already registered.
+        credentials = credentials = SyncCredentials.usernamePassword(username, password, false);
+        for (int i = 0; i < 3; i++) {
+            user = SyncUser.login(credentials, Constants.AUTH_URL);
+            assertTrue(user.isValid());
+            user.logout();
+            assertFalse(user.isValid());
+        }
+    }
+
     @Test
     public void retrieve() {
         final SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
