diff --git a/CHANGELOG.md b/CHANGELOG.md
index e0a44d4fd6..38c10f6b6d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,10 @@
+## 5.3.0 (YYYY-MM-DD)
+
+### Enhancements
+
+* Added `RealmQuery.getRealm()`, `RealmResults.getRealm()`, `RealmList.getRealm()` and `OrderedRealmCollectionSnapshot.getRealm()` (#5997).
+
+
 ## 5.2.0 (2018-06-06)
 
 The feature previously named Partial Sync is now called Query-Based Sync and is now the default mode when synchronizing Realms.
@@ -14,6 +21,7 @@ This has impacted a number of API's. See below for the details.
 * [ObjectServer] Added `SyncUser.createConfiguration(url)`. Realms created this way are query-based Realms by default.
 * [ObjectServer] Added `SyncUser.getDefaultConfiguration()`.
 * The Realm bytecode transformer now supports incremental builds (#3034).
+* Improved speed and allocations when parsing field descriptions in queries (#5547).
 
 ### Bug Fixes
 
@@ -24,13 +32,6 @@ This has impacted a number of API's. See below for the details.
 * Module mediator classes being generated now produces a stable output enabling better support for incremental builds (#3034).
 
 
-## 5.1.1 (YYYY-MM-DD)
-
-### Enhancements
-
-* Improved speed and allocations when parsing field descriptions in queries (#5547).
-
-
 ## 5.1.0 (2018-04-25)
 
 ### Enhancements
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
index 3bcb03b5eb..ebe627ac31 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
@@ -46,6 +46,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -1113,4 +1114,38 @@ public void createSnapshot_shouldUseTargetTable() {
         assertNotNull(collection.getOsList());
         assertEquals(collection.getOsList().getTargetTable().getName(), snapshot.getTable().getName());
     }
+
+    @Test
+    public void getRealm() {
+        assertTrue(realm == collection.getRealm());
+    }
+
+    @Test
+    public void getRealm_throwsIfDynamicRealm() {
+        DynamicRealm dRealm = DynamicRealm.getInstance(realm.getConfiguration());
+        DynamicRealmObject obj = dRealm.where(Owner.CLASS_NAME).findFirst();
+        RealmList<DynamicRealmObject> list = obj.getList("dogs");
+        try {
+            list.getRealm();
+            fail();
+        } catch (IllegalStateException ignore) {
+        } finally {
+            dRealm.close();
+        }
+    }
+
+    @Test
+    public void getRealm_throwsIfRealmClosed() {
+        realm.close();
+        try {
+            collection.getRealm();
+            fail();
+        } catch (IllegalStateException ignore) {
+        }
+    }
+
+    @Test
+    public void getRealm_returnsNullForUnmanagedList() {
+        assertNull(new RealmList().getRealm());
+    }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
index 180c38011c..103038444d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
@@ -3475,4 +3475,32 @@ public void alwaysFalse_inverted() {
         populateTestRealm();
         assertEquals(TEST_DATA_SIZE, realm.where(AllTypes.class).not().alwaysFalse().findAll().size());
     }
+
+    @Test
+    public void getRealm() {
+        assertTrue(realm == realm.where(AllTypes.class).getRealm());
+    }
+
+    @Test
+    public void getRealm_throwsIfDynamicRealm() {
+        DynamicRealm dRealm = DynamicRealm.getInstance(realm.getConfiguration());
+        try {
+            dRealm.where(AllTypes.CLASS_NAME).getRealm();
+            fail();
+        } catch (IllegalStateException ignore) {
+        } finally {
+            dRealm.close();
+        }
+    }
+
+    @Test
+    public void getRealm_throwsIfRealmClosed() {
+        RealmQuery<AllTypes> query = realm.where(AllTypes.class);
+        realm.close();
+        try {
+            query.getRealm();
+            fail();
+        } catch (IllegalStateException ignore) {
+        }
+    }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
index 6a7e1cdbf3..69364eb7a7 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
@@ -678,4 +678,35 @@ public void execute(Realm realm) {
         assertEquals(1, obj.getFieldList().size());
         assertEquals(fieldListIntValue, obj.getFieldList().first().getFieldInt());
     }
+
+    @Test
+    public void getRealm() {
+        RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
+        assertTrue(realm == collection.getRealm());
+    }
+
+    @Test
+    public void getRealm_throwsIfDynamicRealm() {
+        DynamicRealm dRealm = DynamicRealm.getInstance(realm.getConfiguration());
+        RealmResults<DynamicRealmObject> collection = dRealm.where(AllTypes.CLASS_NAME).findAll();
+
+        try {
+            collection.getRealm();
+            fail();
+        } catch (IllegalStateException ignore) {
+        } finally {
+            dRealm.close();
+        }
+    }
+
+    @Test
+    public void getRealm_throwsIfRealmClosed() {
+        RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
+        realm.close();
+        try {
+            collection.getRealm();
+            fail();
+        } catch (IllegalStateException ignore) {
+        }
+    }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
index da24bf45d9..2ce0fc42b3 100644
--- a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
+++ b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
@@ -580,6 +580,25 @@ protected E convertRowToObject(UncheckedRow row) {
         }
     }
 
+    /**
+     * Returns the {@link Realm} instance to which this collection belongs.
+     * <p>
+     * Calling {@link Realm#close()} on the returned instance is discouraged as it is the same as
+     * calling it on the original Realm instance which may cause the Realm to fully close invalidating the
+     * query result.
+     *
+     * @return {@link Realm} instance this collection belongs to.
+     * @throws IllegalStateException if the Realm is an instance of {@link DynamicRealm} or the
+     * {@link Realm} was already closed.
+     */
+    public Realm getRealm() {
+        realm.checkIfValid();
+        if (!(realm instanceof Realm)) {
+            throw new IllegalStateException("This method is only available for typed Realms");
+        }
+        return (Realm) realm;
+    }
+
     // Custom RealmResults list iterator.
     private class RealmCollectionListIterator extends OsResults.ListIterator<E> {
         RealmCollectionListIterator(int start) {
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index a1cb1dae20..4642356f34 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -766,6 +766,28 @@ private void checkValidRealm() {
         }
     }
 
+    /**
+     * Returns the {@link Realm} instance to which this collection belongs.
+     * <p>
+     * Calling {@link Realm#close()} on the returned instance is discouraged as it is the same as
+     * calling it on the original Realm instance which may cause the Realm to fully close invalidating the
+     * list.
+     *
+     * @return {@link Realm} instance this collection belongs to or {@code null} if the collection is unmanaged.
+     * @throws IllegalStateException if the Realm is an instance of {@link DynamicRealm} or the
+     * {@link Realm} was already closed.
+     */
+    public Realm getRealm() {
+        if (realm == null) {
+            return null;
+        }
+        realm.checkIfValid();
+        if (!(realm instanceof Realm)) {
+            throw new IllegalStateException("This method is only available for typed Realms");
+        }
+        return (Realm) realm;
+    }
+
     @Override
     public String toString() {
         final String separator = ",";
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 82f884decc..32ddf59c87 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -1951,6 +1951,28 @@ public long count() {
         return this;
     }
 
+    /**
+     * Returns the {@link Realm} instance to which this query belongs.
+     * <p>
+     * Calling {@link Realm#close()} on the returned instance is discouraged as it is the same as
+     * calling it on the original Realm instance which may cause the Realm to fully close invalidating the
+     * query.
+     *
+     * @return {@link Realm} instance this query belongs to.
+     * @throws IllegalStateException if the Realm is an instance of {@link DynamicRealm} or the
+     * {@link Realm} was already closed.
+     */
+    public Realm getRealm() {
+        if (realm == null) {
+            return null;
+        }
+        realm.checkIfValid();
+        if (!(realm instanceof Realm)) {
+            throw new IllegalStateException("This method is only available for typed Realms");
+        }
+        return (Realm) realm;
+    }
+
     private boolean isDynamicQuery() {
         return className != null;
     }
