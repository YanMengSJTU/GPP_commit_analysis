diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3dc541ed7d..f81b6b2d12 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -16,6 +16,10 @@
 * Upgraded to Realm Sync 1.9.1
 * Upgraded to Realm Core 2.8.0
 
+### Credits
+
+* Thanks to Anis Ben Nsir (@abennsir) for upgrading Roboelectric in the unitTestExample (#4698).
+
 ## 3.3.3 (YYYY-MM-DD)
 
 ### Breaking Changes
@@ -25,6 +29,7 @@
 ### Bug Fixes
 
 * When converting nullable BLOB field to required, `null` values should be converted to `byte[0]` instead of `byte[1]`.
+* Fixed a bug which may cause duplicated primary key values when migrating a nullable primary key field to not nullable. `RealmObjectSchema.setRequired()` and `RealmObjectSchema.setNullable()` will throw when converting a nullable primary key field with null values stored to a required primary key field.
 
 ### Internal
 
diff --git a/Dockerfile b/Dockerfile
index 450ccf5cff..3d61d47efe 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -12,7 +12,7 @@ ENV ANDROID_HOME /opt/android-sdk-linux
 # Need by cmake
 ENV ANDROID_NDK_HOME /opt/android-ndk
 ENV ANDROID_NDK /opt/android-ndk
-ENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
+ENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
 ENV PATH ${PATH}:${NDK_HOME}
 ENV NDK_CCACHE /usr/bin/ccache
 ENV NDK_LCACHE /usr/bin/lcache
@@ -42,20 +42,18 @@ RUN DEBIAN_FRONTEND=noninteractive dpkg --add-architecture i386 \
 
 # Install the Android SDK
 RUN cd /opt && \
-    wget -q https://dl.google.com/android/repository/tools_r25.1.7-linux.zip -O android-tools-linux.zip && \
+    wget -q https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -O android-tools-linux.zip && \
     unzip android-tools-linux.zip -d ${ANDROID_HOME} && \
     rm -f android-tools-linux.zip
 
 # Grab what's needed in the SDK
-# â†“ updates tools to at least 25.1.7, but that prints 'Nothing was installed' (so I don't check the outputs).
 RUN mkdir "${ANDROID_HOME}/licenses" && \
-    echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "${ANDROID_HOME}/licenses/android-sdk-license" && \
-    echo -en "\nd23d63a1f23e25e2c7a316e29eb60396e7924281" > "${ANDROID_HOME}/licenses/android-sdk-preview-license"
-RUN echo y | android update sdk --no-ui --all --filter tools > /dev/null
-RUN echo y | android update sdk --no-ui --all --filter platform-tools | grep 'package installed'
-RUN echo y | android update sdk --no-ui --all --filter build-tools-25.0.3 | grep 'package installed'
-RUN echo y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'
-RUN echo y | android update sdk --no-ui --all --filter android-25 | grep 'package installed'
+    echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "${ANDROID_HOME}/licenses/android-sdk-license"
+RUN sdkmanager --update
+RUN sdkmanager 'platform-tools'
+RUN sdkmanager 'build-tools;25.0.3'
+RUN sdkmanager 'extras;android;m2repository'
+RUN sdkmanager 'platforms;android-25'
 
 # Install the NDK
 RUN mkdir /opt/android-ndk-tmp && \
diff --git a/examples/gradle/wrapper/gradle-wrapper.jar b/examples/gradle/wrapper/gradle-wrapper.jar
index ccad502cf0..d43d6b4489 100644
Binary files a/examples/gradle/wrapper/gradle-wrapper.jar and b/examples/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/examples/gradle/wrapper/gradle-wrapper.properties b/examples/gradle/wrapper/gradle-wrapper.properties
index 3e88d1e5c4..857845b286 100644
--- a/examples/gradle/wrapper/gradle-wrapper.properties
+++ b/examples/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue May 16 03:12:59 PDT 2017
+#Sat Jun 17 16:26:38 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/examples/gradlew b/examples/gradlew
index 4453ccea33..cccdd3d517 100755
--- a/examples/gradlew
+++ b/examples/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/examples/unitTestExample/build.gradle b/examples/unitTestExample/build.gradle
index a6752c2738..79231649c1 100644
--- a/examples/unitTestExample/build.gradle
+++ b/examples/unitTestExample/build.gradle
@@ -34,14 +34,14 @@ dependencies {
 
     // Testing
     testCompile 'junit:junit:4.12'
-    testCompile "org.robolectric:robolectric:3.0"
+    testCompile "org.robolectric:robolectric:3.3.2"
     testCompile "org.mockito:mockito-core:1.10.19"
     testCompile 'org.robolectric:shadows-support-v4:3.0'
 
-    testCompile "org.powermock:powermock-module-junit4:1.6.4"
-    testCompile "org.powermock:powermock-module-junit4-rule:1.6.4"
-    testCompile "org.powermock:powermock-api-mockito:1.6.4"
-    testCompile "org.powermock:powermock-classloading-xstream:1.6.4"
+    testCompile "org.powermock:powermock-module-junit4-rule:1.6.5"
+    testCompile "org.powermock:powermock-module-junit4:1.6.5"
+    testCompile "org.powermock:powermock-api-mockito:1.6.5"
+    testCompile "org.powermock:powermock-classloading-xstream:1.6.5"
 
 
     androidTestCompile 'com.android.support.test:runner:0.5'
diff --git a/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleActivityTest.java b/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleActivityTest.java
index e478db6428..6123c0784f 100644
--- a/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleActivityTest.java
+++ b/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleActivityTest.java
@@ -19,22 +19,20 @@
 import android.content.Context;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
-import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
-import org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl;
+import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.modules.junit4.PowerMockRunnerDelegate;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
-import org.robolectric.util.ActivityController;
 
 import java.util.Arrays;
 import java.util.List;
@@ -46,7 +44,6 @@
 import io.realm.RealmResults;
 import io.realm.examples.unittesting.model.Person;
 import io.realm.internal.RealmCore;
-import io.realm.internal.Util;
 import io.realm.log.RealmLog;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -64,13 +61,14 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 import static org.powermock.api.mockito.PowerMockito.whenNew;
 
-@RunWith(RobolectricGradleTestRunner.class)
+
+@RunWith(PowerMockRunner.class)
+@PowerMockRunnerDelegate(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
 @SuppressStaticInitializationFor("io.realm.internal.Util")
 @PrepareForTest({Realm.class, RealmConfiguration.class, RealmQuery.class, RealmResults.class, RealmCore.class, RealmLog.class})
 public class ExampleActivityTest {
-
     // Robolectric, Using Power Mock https://github.com/robolectric/robolectric/wiki/Using-PowerMock
 
     @Rule
@@ -176,14 +174,12 @@ public void setup() throws Exception {
     }
 
 
-    @Ignore("FIXME: Some problems mocking OKHttp")
     @Test
     public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions() {
         doCallRealMethod().when(mockRealm).executeTransaction(Mockito.any(Realm.Transaction.class));
 
         // Create activity
-        ActivityController<ExampleActivity> controller = Robolectric.buildActivity(ExampleActivity.class).setup();
-        ExampleActivity activity = controller.get();
+        ExampleActivity activity = Robolectric.buildActivity(ExampleActivity.class).create().start().resume().visible().get();
 
         assertThat(activity.getTitle().toString(), is("Unit Test Example"));
 
@@ -211,7 +207,7 @@ public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions() {
         verify(mockRealm, times(2)).delete(Person.class);
 
         // Call the destroy method so we can verify that the .close() method was called (below)
-        controller.destroy();
+        activity.onDestroy();
 
         // Verify that the realm got closed 2 separate times. Once in the AsyncTask, once
         // in onDestroy
@@ -222,13 +218,11 @@ public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions() {
      * Have to verify the transaction execution in a different test because
      * of a problem with Powermock: https://github.com/jayway/powermock/issues/649
      */
-    @Ignore("FIXME: Some problems mocking OKHttp")
     @Test
     public void shouldBeAbleToVerifyTransactionCalls() {
 
         // Create activity
-        ActivityController<ExampleActivity> controller = Robolectric.buildActivity(ExampleActivity.class).setup();
-        ExampleActivity activity = controller.get();
+        ExampleActivity activity = Robolectric.buildActivity(ExampleActivity.class).create().start().resume().visible().get();
 
         assertThat(activity.getTitle().toString(), is("Unit Test Example"));
 
@@ -248,7 +242,7 @@ public void shouldBeAbleToVerifyTransactionCalls() {
         verify(mockRealm, times(5)).executeTransaction(Mockito.any(Realm.Transaction.class));
 
         // Call the destroy method so we can verify that the .close() method was called (below)
-        controller.destroy();
+        activity.onDestroy();
 
         // Verify that the realm got closed 2 separate times. Once in the AsyncTask, once
         // in onDestroy
diff --git a/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java b/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java
index 147c9aa553..3f1b9c87d3 100644
--- a/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java
+++ b/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java
@@ -26,7 +26,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
 import org.powermock.modules.junit4.rule.PowerMockRule;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import io.realm.Realm;
@@ -44,7 +44,8 @@
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 
-@RunWith(RobolectricGradleTestRunner.class)
+
+@RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 19)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
 @SuppressStaticInitializationFor("io.realm.internal.Util")
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar
index c77b099c97..eb16307ec9 100644
Binary files a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar and b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
index ac21505e86..bb7811d90b 100644
--- a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue May 16 03:13:01 PDT 2017
+#Sat Jun 17 16:26:41 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/gradle-plugin/gradlew b/gradle-plugin/gradlew
index 4453ccea33..cccdd3d517 100755
--- a/gradle-plugin/gradlew
+++ b/gradle-plugin/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 967a4da89f..84a4322125 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 44bbebba2a..63400e843c 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue May 16 03:13:02 PDT 2017
+#Sat Jun 17 16:26:42 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/gradlew b/gradlew
index 4453ccea33..cccdd3d517 100755
--- a/gradlew
+++ b/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar
index 13372aef5e..2def030cb2 100644
Binary files a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar and b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
index cd7e85519c..fbde6072aa 100644
--- a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
+++ b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat May 27 11:51:11 CEST 2017
+#Sat Jun 17 16:26:46 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/library-benchmarks/gradlew b/library-benchmarks/gradlew
index 9d82f78915..cccdd3d517 100755
--- a/library-benchmarks/gradlew
+++ b/library-benchmarks/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -6,20 +6,38 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,26 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -85,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -150,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+exec "$JAVACMD" "$@"
diff --git a/library-benchmarks/gradlew.bat b/library-benchmarks/gradlew.bat
index aec99730b4..e95643d6a2 100644
--- a/library-benchmarks/gradlew.bat
+++ b/library-benchmarks/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,10 +46,9 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.jar b/realm-annotations/gradle/wrapper/gradle-wrapper.jar
index bba0767ab1..151c6715d4 100644
Binary files a/realm-annotations/gradle/wrapper/gradle-wrapper.jar and b/realm-annotations/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.properties b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
index d5c18857dd..3a7251e0c8 100644
--- a/realm-annotations/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue May 16 03:13:05 PDT 2017
+#Sat Jun 17 16:26:53 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/realm-annotations/gradlew b/realm-annotations/gradlew
index 4453ccea33..cccdd3d517 100755
--- a/realm-annotations/gradlew
+++ b/realm-annotations/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.jar b/realm-transformer/gradle/wrapper/gradle-wrapper.jar
index b0522cfc8a..ef2c66249d 100644
Binary files a/realm-transformer/gradle/wrapper/gradle-wrapper.jar and b/realm-transformer/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.properties b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
index 64338485ea..efc021e34a 100644
--- a/realm-transformer/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue May 16 03:13:06 PDT 2017
+#Sat Jun 17 16:26:55 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/realm-transformer/gradlew b/realm-transformer/gradlew
index 4453ccea33..cccdd3d517 100755
--- a/realm-transformer/gradlew
+++ b/realm-transformer/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/realm.properties b/realm.properties
index b4231e304d..9be96842d2 100644
--- a/realm.properties
+++ b/realm.properties
@@ -1,2 +1,2 @@
-gradleVersion=3.5
+gradleVersion=4.0
 ndkVersion=r10e
diff --git a/realm/gradle/wrapper/gradle-wrapper.jar b/realm/gradle/wrapper/gradle-wrapper.jar
index bba0767ab1..19278fe4f8 100644
Binary files a/realm/gradle/wrapper/gradle-wrapper.jar and b/realm/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm/gradle/wrapper/gradle-wrapper.properties b/realm/gradle/wrapper/gradle-wrapper.properties
index ad3d9f3a11..bdb7f28d10 100644
--- a/realm/gradle/wrapper/gradle-wrapper.properties
+++ b/realm/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue May 16 03:13:04 PDT 2017
+#Sat Jun 17 16:26:51 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/realm/gradlew b/realm/gradlew
index 4453ccea33..cccdd3d517 100755
--- a/realm/gradlew
+++ b/realm/gradlew
@@ -33,11 +33,11 @@ DEFAULT_JVM_OPTS=""
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -155,7 +155,7 @@ if $cygwin ; then
 fi
 
 # Escape application args
-save ( ) {
+save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index 61b7f10fa0..e2eaedd57d 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -805,30 +805,19 @@ private void emitValidateRealmType(JavaWriter writer, VariableElement field, Str
             }
             writer.endControlFlow();
         } else {
-            // check before migrating a nullable field containing null value to not-nullable PrimaryKey field for Realm version 0.89+
-            if (metadata.isPrimaryKey(field)) {
-                writer
-                        .beginControlFlow("if (table.isColumnNullable(%s) && table.findFirstNull(%s) != Table.NO_MATCH)",
-                                fieldIndexVariableReference(field), fieldIndexVariableReference(field))
-                        .emitStatement("throw new IllegalStateException(\"Cannot migrate an object with null value in field '%s'." +
-                                        " Either maintain the same type for primary key field '%s', or remove the object with null value before migration.\")",
-                                fieldName, fieldName)
-                        .endControlFlow();
+            writer.beginControlFlow("if (table.isColumnNullable(%s))", fieldIndexVariableReference(field));
+            if (Utils.isPrimitiveType(fieldTypeQualifiedName)) {
+                writer.emitStatement("throw new RealmMigrationNeededException(sharedRealm.getPath()," +
+                                " \"Field '%s' does support null values in the existing Realm file. " +
+                                "Use corresponding boxed type for field '%s' or migrate using RealmObjectSchema.setNullable().\")",
+                        fieldName, fieldName);
             } else {
-                writer.beginControlFlow("if (table.isColumnNullable(%s))", fieldIndexVariableReference(field));
-                if (Utils.isPrimitiveType(fieldTypeQualifiedName)) {
-                    writer.emitStatement("throw new RealmMigrationNeededException(sharedRealm.getPath()," +
-                                    " \"Field '%s' does support null values in the existing Realm file. " +
-                                    "Use corresponding boxed type for field '%s' or migrate using RealmObjectSchema.setNullable().\")",
-                            fieldName, fieldName);
-                } else {
-                    writer.emitStatement("throw new RealmMigrationNeededException(sharedRealm.getPath()," +
-                                    " \"Field '%s' does support null values in the existing Realm file. " +
-                                    "Remove @Required or @PrimaryKey from field '%s' or migrate using RealmObjectSchema.setNullable().\")",
-                            fieldName, fieldName);
-                }
-                writer.endControlFlow();
+                writer.emitStatement("throw new RealmMigrationNeededException(sharedRealm.getPath()," +
+                                " \"Field '%s' does support null values in the existing Realm file. " +
+                                "Remove @Required or @PrimaryKey from field '%s' or migrate using RealmObjectSchema.setNullable().\")",
+                        fieldName, fieldName);
             }
+            writer.endControlFlow();
         }
 
         // Validate @Index
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index b137dbb1a3..01283a6b7a 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -243,10 +243,10 @@ task findbugs(type: FindBugs) {
         xml.enabled = false
         html.enabled = true
         xml {
-            destination "$project.buildDir/findbugs/findbugs-output.xml"
+            destination file("$project.buildDir/findbugs/findbugs-output.xml")
         }
         html {
-            destination "$project.buildDir/findbugs/findbugs-output.html"
+            destination file("$project.buildDir/findbugs/findbugs-output.html")
         }
     }
 }
@@ -270,7 +270,7 @@ task checkstyle(type: Checkstyle) {
 
     source 'src'
     include '*/java/**/*.java'
-    // Ingore tests for now.
+    // Ignore tests for now.
     exclude '*Test*/**'
 
     // empty classpath
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
index fe03983de6..2f08cfc378 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
@@ -20,6 +20,7 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -64,6 +65,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -1148,21 +1150,14 @@ public void migrating_nullableField_toward_notNullable_PrimaryKeyThrows() throws
         for (final Class clazz : classes) {
             try {
                 RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
-                        .schemaVersion(0)
                         .schema(clazz)
-                        .migration(new RealmMigration() {
-                            @Override
-                            public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
-                                // intentionally lefts empty to demonstrate incompatibilities between nullable/not-nullable PrimaryKeys.
-                            }
-                        })
                         .build();
                 Realm realm = Realm.getInstance(realmConfig);
                 realm.close();
                 fail();
-            } catch (IllegalStateException expected) {
-                assertEquals("Cannot migrate an object with null value in field 'id'. Either maintain the same type for primary key field 'id', or remove the object with null value before migration.",
-                        expected.getMessage());
+            } catch (RealmMigrationNeededException expected) {
+                assertThat(expected.getMessage(), CoreMatchers.containsString(
+                        "Field 'id' does support null values in the existing Realm file."));
             }
         }
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
index 4322557498..b5ac52a1d5 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
@@ -18,6 +18,7 @@
 
 import android.support.test.runner.AndroidJUnit4;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -33,6 +34,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -102,22 +104,28 @@ public boolean isNullable() {
     }
 
     public enum IndexFieldType {
-        STRING(String.class),
-        SHORT(Short.class), PRIMITIVE_SHORT(short.class),
-        INT(Integer.class), PRIMITIVE_INT(int.class),
-        LONG(Long.class), PRIMITIVE_LONG(long.class),
-        BYTE(Byte.class), PRIMITIVE_BYTE(byte.class),
-        BOOLEAN(Boolean.class), PRIMITIVE_BOOLEAN(boolean.class),
-        DATE(Date.class);
+        STRING(String.class, true),
+        SHORT(Short.class, true), PRIMITIVE_SHORT(short.class, false),
+        INT(Integer.class, true), PRIMITIVE_INT(int.class, false),
+        LONG(Long.class, true), PRIMITIVE_LONG(long.class, false),
+        BYTE(Byte.class, true), PRIMITIVE_BYTE(byte.class, false),
+        BOOLEAN(Boolean.class, true), PRIMITIVE_BOOLEAN(boolean.class, false),
+        DATE(Date.class, true);
 
         private final Class<?> clazz;
+        private final boolean nullable;
 
         public Class<?> getType() {
             return clazz;
         }
 
-        IndexFieldType(Class<?> clazz) {
+        public boolean isNullable() {
+            return nullable;
+        }
+
+        IndexFieldType(Class<?> clazz, boolean nullable) {
             this.clazz = clazz;
+            this.nullable = nullable;
         }
     }
 
@@ -141,20 +149,26 @@ public boolean isNullable() {
 
     // TODO These should also be allowed? BOOLEAN, DATE
     public enum PrimaryKeyFieldType {
-        STRING(String.class),
-        SHORT(Short.class), PRIMITIVE_SHORT(short.class),
-        INT(Integer.class), PRIMITIVE_INT(int.class),
-        LONG(Long.class), PRIMITIVE_LONG(long.class),
-        BYTE(Byte.class), PRIMITIVE_BYTE(byte.class);
+        STRING(String.class, true),
+        SHORT(Short.class, true), PRIMITIVE_SHORT(short.class, false),
+        INT(Integer.class, true), PRIMITIVE_INT(int.class, false),
+        LONG(Long.class, true), PRIMITIVE_LONG(long.class, false),
+        BYTE(Byte.class, true), PRIMITIVE_BYTE(byte.class, false);
 
         private final Class<?> clazz;
+        private final boolean nullable;
 
         public Class<?> getType() {
             return clazz;
         }
 
-        PrimaryKeyFieldType(Class<?> clazz) {
+        public boolean isNullable() {
+            return nullable;
+        }
+
+        PrimaryKeyFieldType(Class<?> clazz, boolean nullable) {
             this.clazz = clazz;
+            this.nullable = nullable;
         }
     }
 
@@ -547,6 +561,102 @@ public void setRequired_nullValueBecomesDefaultValue() {
         }
     }
 
+    @Test
+    public void setRequired_true_onPrimaryKeyField_containsNullValues_shouldThrow() {
+        for (PrimaryKeyFieldType fieldType : PrimaryKeyFieldType.values()) {
+            String className = fieldType.getType().getSimpleName() + "Class";
+            String fieldName = "primaryKey";
+            schema = realmSchema.create(className);
+            if (!fieldType.isNullable()) {
+                continue;
+            }
+            schema.addField(fieldName, fieldType.getType(), FieldAttribute.PRIMARY_KEY);
+            DynamicRealmObject object = realm.createObject(schema.getClassName(), null);
+            assertTrue(object.isNull(fieldName));
+            try {
+                schema.setRequired(fieldName, true);
+                fail();
+            } catch (IllegalStateException expected) {
+                assertThat(expected.getMessage(),
+                        CoreMatchers.containsString("The primary key field 'primaryKey' has 'null' values stored."));
+            }
+            realmSchema.remove(className);
+        }
+    }
+
+    private void setRequired_onPrimaryKeyField(boolean isRequired) {
+        for (PrimaryKeyFieldType fieldType : PrimaryKeyFieldType.values()) {
+            String className = fieldType.getType().getSimpleName() + "Class";
+            String fieldName = "primaryKey";
+            schema = realmSchema.create(className);
+            if (!fieldType.isNullable()) {
+                continue;
+            }
+            if (isRequired) {
+                schema.addField(fieldName, fieldType.getType(), FieldAttribute.PRIMARY_KEY);
+            } else {
+                schema.addField(fieldName, fieldType.getType(), FieldAttribute.PRIMARY_KEY, FieldAttribute.REQUIRED);
+            }
+            realm.createObject(schema.getClassName(), "1");
+            realm.createObject(schema.getClassName(), "2");
+            assertTrue(schema.hasPrimaryKey());
+            assertTrue(schema.hasIndex(fieldName));
+
+            schema.setRequired(fieldName, isRequired);
+            assertTrue(schema.hasPrimaryKey());
+            assertTrue(schema.hasIndex(fieldName));
+
+            RealmResults<DynamicRealmObject> results = realm.where(className).findAllSorted(fieldName);
+            assertEquals(2, results.size());
+            if (fieldType == PrimaryKeyFieldType.STRING) {
+                assertEquals("1", results.get(0).getString(fieldName));
+                assertEquals("2", results.get(1).getString(fieldName));
+            } else {
+                assertEquals(1, results.get(0).getLong(fieldName));
+                assertEquals(2, results.get(1).getLong(fieldName));
+            }
+            realmSchema.remove(className);
+        }
+    }
+
+    @Test
+    public void setRequired_true_onPrimaryKeyField() {
+        setRequired_onPrimaryKeyField(true);
+    }
+
+    @Test
+    public void setRequired_false_onPrimaryKeyField() {
+        setRequired_onPrimaryKeyField(false);
+    }
+
+    private void setRequired_onIndexedField(boolean toRequired) {
+        String fieldName = "IndexedField";
+        for (IndexFieldType fieldType : IndexFieldType.values()) {
+            if (!fieldType.isNullable()) {
+                continue;
+            }
+            if (toRequired) {
+                schema.addField(fieldName, fieldType.getType(), FieldAttribute.INDEXED);
+            } else {
+                schema.addField(fieldName, fieldType.getType(), FieldAttribute.INDEXED, FieldAttribute.REQUIRED);
+            }
+            assertTrue(schema.hasIndex(fieldName));
+            schema.setRequired(fieldName, toRequired);
+            assertTrue(schema.hasIndex(fieldName));
+            schema.removeField(fieldName);
+        }
+    }
+
+    @Test
+    public void setRequired_true_onIndexedField() {
+        setRequired_onIndexedField(true);
+    }
+
+    @Test
+    public void setRequired_false_onIndexedField() {
+        setRequired_onIndexedField(false);
+    }
+
     @Test
     public void setRemovePrimaryKey() {
         for (PrimaryKeyFieldType fieldType : PrimaryKeyFieldType.values()) {
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
index 7fdfbf87b4..c99f0ba198 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
@@ -20,8 +20,19 @@
 #include "io_realm_internal_Table.h"
 #include "tablebase_tpl.hpp"
 
+#include "util/format.hpp"
+
+#include "jni_util/java_exception_thrower.hpp"
+#include "java_exception_def.hpp"
+
 using namespace std;
 using namespace realm;
+using namespace realm::_impl;
+using namespace realm::jni_util;
+using namespace realm::util;
+
+static const char* c_null_values_cannot_set_required_msg = "The primary key field '%1' has 'null' values stored.  It "
+                                                           "cannot be converted to a '@Required' primary key field.";
 
 static void finalize_table(jlong ptr);
 
@@ -192,11 +203,12 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsColumnNullable(J
 // 6. removing the original column and renaming the temporary column will make it look like original is being modified
 
 JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNullable(JNIEnv* env, jobject,
-                                                                                  jlong nativeTablePtr,
-                                                                                  jlong columnIndex)
+                                                                                  jlong native_table_ptr,
+                                                                                  jlong j_column_index,
+                                                                                  jboolean is_primary_key)
 {
-    Table* table = TBL(nativeTablePtr);
-    if (!TBL_AND_COL_INDEX_VALID(env, table, columnIndex)) {
+    Table* table = TBL(native_table_ptr);
+    if (!TBL_AND_COL_INDEX_VALID(env, table, j_column_index)) {
         return;
     }
     if (table->has_shared_type()) {
@@ -204,7 +216,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNullabl
         return;
     }
     try {
-        size_t column_index = S(columnIndex);
+        size_t column_index = S(j_column_index);
         if (table->is_nullable(column_index)) {
             return; // column is already nullable
         }
@@ -232,12 +244,22 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNullabl
             j++;
         }
 
+        // Search index has too be added first since if it is a PK field, add_xxx_unique will check it.
+        if (table->has_search_index(column_index + 1)) {
+            table->add_search_index(column_index);
+        }
+
         for (size_t i = 0; i < table->size(); ++i) {
             switch (column_type) {
                 case type_String: {
                     // Payload copy is needed
                     StringData sd(table->get_string(column_index + 1, i));
-                    table->set_string(column_index, i, sd);
+                    if (is_primary_key) {
+                        table->set_string_unique(column_index, i, sd);
+                    }
+                    else {
+                        table->set_string(column_index, i, sd);
+                    }
                     break;
                 }
                 case type_Binary: {
@@ -248,7 +270,12 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNullabl
                     break;
                 }
                 case type_Int:
-                    table->set_int(column_index, i, table->get_int(column_index + 1, i));
+                    if (is_primary_key) {
+                        table->set_int_unique(column_index, i, table->get_int(column_index + 1, i));
+                    }
+                    else {
+                        table->set_int(column_index, i, table->get_int(column_index + 1, i));
+                    }
                     break;
                 case type_Bool:
                     table->set_bool(column_index, i, table->get_bool(column_index + 1, i));
@@ -273,9 +300,6 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNullabl
                     return;
             }
         }
-        if (table->has_search_index(column_index + 1)) {
-            table->add_search_index(column_index);
-        }
         table->remove_column(column_index + 1);
         table->rename_column(table->get_column_index(tmp_column_name), column_name);
     }
@@ -283,11 +307,12 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNullabl
 }
 
 JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNotNullable(JNIEnv* env, jobject,
-                                                                                     jlong nativeTablePtr,
-                                                                                     jlong columnIndex)
+                                                                                     jlong native_table_ptr,
+                                                                                     jlong j_column_index,
+                                                                                     jboolean is_primary_key)
 {
-    Table* table = TBL(nativeTablePtr);
-    if (!TBL_AND_COL_INDEX_VALID(env, table, columnIndex)) {
+    Table* table = TBL(native_table_ptr);
+    if (!TBL_AND_COL_INDEX_VALID(env, table, j_column_index)) {
         return;
     }
     if (table->has_shared_type()) {
@@ -295,7 +320,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNotNull
         return;
     }
     try {
-        size_t column_index = S(columnIndex);
+        size_t column_index = S(j_column_index);
         if (!table->is_nullable(column_index)) {
             return; // column is already not nullable
         }
@@ -322,16 +347,32 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNotNull
             j++;
         }
 
+        // Search index has too be added first since if it is a PK field, add_xxx_unique will check it.
+        if (table->has_search_index(column_index + 1)) {
+            table->add_search_index(column_index);
+        }
+
         for (size_t i = 0; i < table->size(); ++i) {
             switch (column_type) { // FIXME: respect user-specified default values
                 case type_String: {
                     StringData sd = table->get_string(column_index + 1, i);
                     if (sd == realm::null()) {
-                        table->set_string(column_index, i, "");
+                        if (is_primary_key) {
+                            THROW_JAVA_EXCEPTION(env, JavaExceptionDef::IllegalState,
+                                                 format(c_null_values_cannot_set_required_msg, column_name));
+                        }
+                        else {
+                            table->set_string(column_index, i, "");
+                        }
                     }
                     else {
                         // Payload copy is needed
-                        table->set_string(column_index, i, sd);
+                        if (is_primary_key) {
+                            table->set_string_unique(column_index, i, sd);
+                        }
+                        else {
+                            table->set_string(column_index, i, sd);
+                        }
                     }
                     break;
                 }
@@ -349,10 +390,21 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNotNull
                 }
                 case type_Int:
                     if (table->is_null(column_index + 1, i)) {
-                        table->set_int(column_index, i, 0);
+                        if (is_primary_key) {
+                            THROW_JAVA_EXCEPTION(env, JavaExceptionDef::IllegalState,
+                                                 format(c_null_values_cannot_set_required_msg, column_name));
+                        }
+                        else {
+                            table->set_int(column_index, i, 0);
+                        }
                     }
                     else {
-                        table->set_int(column_index, i, table->get_int(column_index + 1, i));
+                        if (is_primary_key) {
+                            table->set_int_unique(column_index, i, table->get_int(column_index + 1, i));
+                        }
+                        else {
+                            table->set_int(column_index, i, table->get_int(column_index + 1, i));
+                        }
                     }
                     break;
                 case type_Bool:
@@ -399,9 +451,6 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeConvertColumnToNotNull
                     return;
             }
         }
-        if (table->has_search_index(column_index + 1)) {
-            table->add_search_index(column_index);
-        }
         table->remove_column(column_index + 1);
         table->rename_column(table->get_column_index(tmp_column_name), column_name);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index da1feceb15..5895024bc9 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -255,7 +255,7 @@ public boolean isColumnNullable(long columnIndex) {
      * @param columnIndex the column index.
      */
     public void convertColumnToNullable(long columnIndex) {
-        nativeConvertColumnToNullable(nativePtr, columnIndex);
+        nativeConvertColumnToNullable(nativePtr, columnIndex, isPrimaryKey(columnIndex));
     }
 
     /**
@@ -264,7 +264,7 @@ public void convertColumnToNullable(long columnIndex) {
      * @param columnIndex the column index.
      */
     public void convertColumnToNotNullable(long columnIndex) {
-        nativeConvertColumnToNotNullable(nativePtr, columnIndex);
+        nativeConvertColumnToNotNullable(nativePtr, columnIndex, isPrimaryKey(columnIndex));
     }
 
     // Table Size and deletion. AutoGenerated subclasses are nothing to do with this
@@ -1040,9 +1040,9 @@ public static String getTableNameForClass(String name) {
 
     private native boolean nativeIsColumnNullable(long nativePtr, long columnIndex);
 
-    private native void nativeConvertColumnToNullable(long nativeTablePtr, long columnIndex);
+    private native void nativeConvertColumnToNullable(long nativeTablePtr, long columnIndex, boolean isPrimaryKey);
 
-    private native void nativeConvertColumnToNotNullable(long nativePtr, long columnIndex);
+    private native void nativeConvertColumnToNotNullable(long nativePtr, long columnIndex, boolean isPrimaryKey);
 
     private native long nativeSize(long nativeTablePtr);
 
diff --git a/tools/sync_test_server/ros-testing-server.js b/tools/sync_test_server/ros-testing-server.js
index c9ca2c2c5d..ae43a8477a 100755
--- a/tools/sync_test_server/ros-testing-server.js
+++ b/tools/sync_test_server/ros-testing-server.js
@@ -3,6 +3,7 @@
 var winston = require('winston'); //logging
 const temp = require('temp');
 const spawn = require('child_process').spawn;
+const exec = require('child_process').exec;
 var http = require('http');
 var dispatcher = require('httpdispatcher');
 
@@ -64,10 +65,16 @@ function stopRealmObjectServer() {
     if (syncServerChildProcess) {
         syncServerChildProcess.kill();
         syncServerChildProcess = null;
+        exec('rm -r ' + 'realm-object-server', function (err, stdout, stderr) {
+            if (err) {
+                winston.err(err)
+            } else {
+                winston.info("realm-object-server directory deleted")
+            }
+        });
     }
 }
 
-
 // start sync server
 dispatcher.onGet("/start", function(req, res) {
     startRealmObjectServer();
