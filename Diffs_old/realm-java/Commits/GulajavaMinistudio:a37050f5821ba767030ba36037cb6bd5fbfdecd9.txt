diff --git a/Jenkinsfile b/Jenkinsfile
index 67632e3e81..51f049915a 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -80,7 +80,7 @@ try {
                 try {
                   backgroundPid = startLogCatCollector()
                   forwardAdbPorts()
-                  gradle('realm', 'connectedUnitTests')
+                  gradle('realm', 'connectedAndroidTest')
                   archiveLog = false;
                 } finally {
                   stopLogCatCollector(backgroundPid, archiveLog)
diff --git a/build.gradle b/build.gradle
index 3eac28d01d..a641a7f5fd 100644
--- a/build.gradle
+++ b/build.gradle
@@ -94,7 +94,18 @@ task connectedUnitTests(type:GradleBuild) {
     description = 'Run the Android unit tests of the Realm project'
     dependsOn installTransformer
     buildFile = file('realm/build.gradle')
-    tasks = ['connectedUnitTests']
+    tasks = ['connectedAndroidTest']
+    if (project.hasProperty('buildTargetABIs')) {
+        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
+    }
+}
+
+task connectedBenchmarks(type:GradleBuild) {
+    group = 'Test'
+    description = 'Run all the benchmark tests for the library '
+    dependsOn installTransformer
+    buildFile = file('library-benchmarks/build.gradle')
+    tasks = ['connectedAndroidTest']
     if (project.hasProperty('buildTargetABIs')) {
         startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
     }
diff --git a/latest b/latest
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/library-benchmarks/build.gradle b/library-benchmarks/build.gradle
new file mode 100644
index 0000000000..e185b78386
--- /dev/null
+++ b/library-benchmarks/build.gradle
@@ -0,0 +1,60 @@
+buildscript {
+    repositories {
+        mavenLocal()
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.3.2'
+        classpath "io.realm:realm-gradle-plugin:${file("${rootDir}/../version.txt").text.trim()}"
+    }
+}
+
+allprojects {
+    def props = new Properties()
+    props.load(new FileInputStream("${rootDir}/../realm.properties"))
+    props.each { key, val ->
+        project.ext.set(key, val)
+    }
+}
+
+task wrapper(type: Wrapper) {
+    gradleVersion = project.gradleVersion
+}
+
+apply plugin: 'com.android.library'
+apply plugin: 'realm-android'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "25.0.3"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 22 // Below 23 to avoid new permission system introduced in M
+        versionCode 1
+        versionName "1.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled = false
+            // Running with DEBUG = true will disable the JIT
+            debuggable = false
+        }
+    }
+}
+
+repositories {
+    mavenLocal()
+    jcenter()
+}
+
+dependencies {
+    androidTestCompile 'com.android.support.test:runner:0.5'
+    androidTestCompile 'com.android.support.test:rules:0.5'
+    androidTestCompile 'junit:junit:4.12'
+    androidTestCompile 'dk.ilios:spanner:0.6.0'
+    androidTestCompile 'com.opencsv:opencsv:3.4'
+    androidTestCompile 'junit:junit:4.12'
+}
\ No newline at end of file
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000..13372aef5e
Binary files /dev/null and b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000000..cd7e85519c
--- /dev/null
+++ b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Sat May 27 11:51:11 CEST 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/library-benchmarks/gradlew b/library-benchmarks/gradlew
new file mode 100755
index 0000000000..9d82f78915
--- /dev/null
+++ b/library-benchmarks/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/library-benchmarks/gradlew.bat b/library-benchmarks/gradlew.bat
new file mode 100644
index 0000000000..aec99730b4
--- /dev/null
+++ b/library-benchmarks/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/library-benchmarks/settings.gradle b/library-benchmarks/settings.gradle
new file mode 100644
index 0000000000..78b0be004f
--- /dev/null
+++ b/library-benchmarks/settings.gradle
@@ -0,0 +1 @@
+rootProject.name = 'realm-library-benchmarks'
\ No newline at end of file
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmAllocBenchmarks.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmAllocBenchmarks.java
similarity index 96%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmAllocBenchmarks.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmAllocBenchmarks.java
index f9f5a62a6b..3365dabc55 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmAllocBenchmarks.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmAllocBenchmarks.java
@@ -31,8 +31,8 @@
 import io.realm.RealmQuery;
 import io.realm.RealmResults;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
-import io.realm.entities.Dog;
+import io.realm.benchmarks.entities.AllTypes;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmAllocBenchmarks {
@@ -48,7 +48,7 @@ public void before() {
         Realm.deleteRealm(config);
         realm = Realm.getInstance(config);
         realm.beginTransaction();
-        realm.createObject(AllTypes.class).getColumnRealmList().add(realm.createObject(Dog.class));
+        realm.createObject(AllTypes.class).getColumnRealmList().add(realm.createObject(AllTypes.class));
         realm.commitTransaction();
     }
 
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmBenchmarks.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmBenchmarks.java
similarity index 98%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmBenchmarks.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmBenchmarks.java
index cf307a1b5b..a05d2676e8 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmBenchmarks.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmBenchmarks.java
@@ -29,7 +29,8 @@
 import io.realm.Realm;
 import io.realm.RealmConfiguration;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
+import io.realm.benchmarks.entities.AllTypes;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmBenchmarks {
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmInsertBenchmark.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmInsertBenchmark.java
similarity index 92%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmInsertBenchmark.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmInsertBenchmark.java
index 8814a1b280..b8151e9e95 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmInsertBenchmark.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmInsertBenchmark.java
@@ -32,8 +32,9 @@
 import io.realm.Realm;
 import io.realm.RealmConfiguration;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
-import io.realm.entities.AllTypesPrimaryKey;
+import io.realm.benchmarks.entities.AllTypes;
+import io.realm.benchmarks.entities.AllTypesPrimaryKey;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmInsertBenchmark {
@@ -43,8 +44,8 @@
 
     private Realm realm;
     private static final int COLLECTION_SIZE = 100;
-    private List<AllTypes> noPkObjects = new ArrayList<AllTypes>(COLLECTION_SIZE);
-    private List<AllTypesPrimaryKey> pkObjects = new ArrayList<AllTypesPrimaryKey>(COLLECTION_SIZE);
+    private List<AllTypes> noPkObjects = new ArrayList<>(COLLECTION_SIZE);
+    private List<AllTypesPrimaryKey> pkObjects = new ArrayList<>(COLLECTION_SIZE);
 
     @BeforeExperiment
     public void before() {
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectReadBenchmarks.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmObjectReadBenchmarks.java
similarity index 98%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectReadBenchmarks.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmObjectReadBenchmarks.java
index 30719457ff..974fe33815 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectReadBenchmarks.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmObjectReadBenchmarks.java
@@ -29,7 +29,8 @@
 import io.realm.Realm;
 import io.realm.RealmConfiguration;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
+import io.realm.benchmarks.entities.AllTypes;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmObjectReadBenchmarks {
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
similarity index 98%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
index 68719a222f..3cf64b0d3b 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
@@ -27,7 +27,8 @@
 import io.realm.Realm;
 import io.realm.RealmConfiguration;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
+import io.realm.benchmarks.entities.AllTypes;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmObjectWriteBenchmarks {
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmQueryBenchmarks.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmQueryBenchmarks.java
similarity index 97%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmQueryBenchmarks.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmQueryBenchmarks.java
index 8487c9d668..f1e3571c5d 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmQueryBenchmarks.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmQueryBenchmarks.java
@@ -16,8 +16,6 @@
 
 package io.realm.benchmarks;
 
-import android.support.test.InstrumentationRegistry;
-
 import org.junit.runner.RunWith;
 
 import dk.ilios.spanner.AfterExperiment;
@@ -31,7 +29,8 @@
 import io.realm.RealmResults;
 import io.realm.Sort;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
+import io.realm.benchmarks.entities.AllTypes;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmQueryBenchmarks {
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmResultsBenchmarks.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmResultsBenchmarks.java
similarity index 98%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmResultsBenchmarks.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmResultsBenchmarks.java
index f4cee113b9..e33aeed563 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmResultsBenchmarks.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/RealmResultsBenchmarks.java
@@ -30,7 +30,8 @@
 import io.realm.RealmConfiguration;
 import io.realm.RealmResults;
 import io.realm.benchmarks.config.BenchmarkConfig;
-import io.realm.entities.AllTypes;
+import io.realm.benchmarks.entities.AllTypes;
+
 
 @RunWith(SpannerRunner.class)
 public class RealmResultsBenchmarks {
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/config/BenchmarkConfig.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/config/BenchmarkConfig.java
similarity index 100%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/config/BenchmarkConfig.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/config/BenchmarkConfig.java
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/config/CSVResultProcessor.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/config/CSVResultProcessor.java
similarity index 99%
rename from realm/realm-library/src/benchmarks/java/io/realm/benchmarks/config/CSVResultProcessor.java
rename to library-benchmarks/src/androidTest/java/io/realm/benchmarks/config/CSVResultProcessor.java
index 54e69d495d..d241934afa 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/config/CSVResultProcessor.java
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/config/CSVResultProcessor.java
@@ -20,7 +20,6 @@
 import com.opencsv.CSVWriter;
 
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.text.DecimalFormat;
diff --git a/library-benchmarks/src/androidTest/java/io/realm/benchmarks/entities/AllTypes.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/entities/AllTypes.java
new file mode 100644
index 0000000000..ec212de056
--- /dev/null
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/entities/AllTypes.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.benchmarks.entities;
+
+import java.util.Date;
+
+import io.realm.RealmList;
+import io.realm.RealmObject;
+import io.realm.annotations.Required;
+
+
+public class AllTypes extends RealmObject {
+
+    public static final String CLASS_NAME = "AllTypes";
+    public static final String FIELD_STRING = "columnString";
+    public static final String FIELD_LONG = "columnLong";
+    public static final String FIELD_FLOAT = "columnFloat";
+    public static final String FIELD_DOUBLE = "columnDouble";
+    public static final String FIELD_BOOLEAN = "columnBoolean";
+    public static final String FIELD_DATE = "columnDate";
+    public static final String FIELD_BINARY = "columnBinary";
+    public static final String FIELD_REALMOBJECT = "columnRealmObject";
+    public static final String FIELD_REALMLIST = "columnRealmList";
+
+    public static final String[] INVALID_TYPES_FIELDS_FOR_DISTINCT = new String[]{FIELD_REALMOBJECT, FIELD_REALMLIST, FIELD_DOUBLE, FIELD_FLOAT};
+
+    @Required
+    private String columnString = "";
+    private long columnLong;
+    private float columnFloat;
+    private double columnDouble;
+    private boolean columnBoolean;
+    @Required
+    private Date columnDate = new Date(0);
+    @Required
+    private byte[] columnBinary = new byte[0];
+    private AllTypes columnRealmObject;
+    private RealmList<AllTypes> columnRealmList;
+
+    public String getColumnString() {
+        return columnString;
+    }
+
+    public void setColumnString(String columnString) {
+        this.columnString = columnString;
+    }
+
+    public long getColumnLong() {
+        return columnLong;
+    }
+
+    public void setColumnLong(long columnLong) {
+        this.columnLong = columnLong;
+    }
+
+    public float getColumnFloat() {
+        return columnFloat;
+    }
+
+    public void setColumnFloat(float columnFloat) {
+        this.columnFloat = columnFloat;
+    }
+
+    public double getColumnDouble() {
+        return columnDouble;
+    }
+
+    public void setColumnDouble(double columnDouble) {
+        this.columnDouble = columnDouble;
+    }
+
+    public boolean isColumnBoolean() {
+        return columnBoolean;
+    }
+
+    public void setColumnBoolean(boolean columnBoolean) {
+        this.columnBoolean = columnBoolean;
+    }
+
+    public Date getColumnDate() {
+        return columnDate;
+    }
+
+    public void setColumnDate(Date columnDate) {
+        this.columnDate = columnDate;
+    }
+
+    public byte[] getColumnBinary() {
+        return columnBinary;
+    }
+
+    public void setColumnBinary(byte[] columnBinary) {
+        this.columnBinary = columnBinary;
+    }
+
+    public AllTypes getColumnRealmObject() {
+        return columnRealmObject;
+    }
+
+    public void setColumnRealmObject(AllTypes columnRealmObject) {
+        this.columnRealmObject = columnRealmObject;
+    }
+
+    public RealmList<AllTypes> getColumnRealmList() {
+        return columnRealmList;
+    }
+
+    public void setColumnRealmList(RealmList<AllTypes> columnRealmList) {
+        this.columnRealmList = columnRealmList;
+    }
+}
diff --git a/library-benchmarks/src/androidTest/java/io/realm/benchmarks/entities/AllTypesPrimaryKey.java b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/entities/AllTypesPrimaryKey.java
new file mode 100644
index 0000000000..71dc3d88ae
--- /dev/null
+++ b/library-benchmarks/src/androidTest/java/io/realm/benchmarks/entities/AllTypesPrimaryKey.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.benchmarks.entities;
+
+import java.util.Date;
+
+import io.realm.RealmList;
+import io.realm.RealmObject;
+import io.realm.annotations.PrimaryKey;
+
+
+public class AllTypesPrimaryKey extends RealmObject {
+    private String columnString;
+    @PrimaryKey
+    private long columnLong;
+    private float columnFloat;
+    private double columnDouble;
+    private boolean columnBoolean;
+    private Date columnDate;
+    private byte[] columnBinary;
+    private AllTypesPrimaryKey columnRealmObject;
+    private RealmList<AllTypesPrimaryKey> columnRealmList;
+    private Boolean columnBoxedBoolean;
+
+    public String getColumnString() {
+        return columnString;
+    }
+
+    public void setColumnString(String columnString) {
+        this.columnString = columnString;
+    }
+
+    public long getColumnLong() {
+        return columnLong;
+    }
+
+    public void setColumnLong(long columnLong) {
+        this.columnLong = columnLong;
+    }
+
+    public float getColumnFloat() {
+        return columnFloat;
+    }
+
+    public void setColumnFloat(float columnFloat) {
+        this.columnFloat = columnFloat;
+    }
+
+    public double getColumnDouble() {
+        return columnDouble;
+    }
+
+    public void setColumnDouble(double columnDouble) {
+        this.columnDouble = columnDouble;
+    }
+
+    public boolean isColumnBoolean() {
+        return columnBoolean;
+    }
+
+    public void setColumnBoolean(boolean columnBoolean) {
+        this.columnBoolean = columnBoolean;
+    }
+
+    public Date getColumnDate() {
+        return columnDate;
+    }
+
+    public void setColumnDate(Date columnDate) {
+        this.columnDate = columnDate;
+    }
+
+    public byte[] getColumnBinary() {
+        return columnBinary;
+    }
+
+    public void setColumnBinary(byte[] columnBinary) {
+        this.columnBinary = columnBinary;
+    }
+
+    public AllTypesPrimaryKey getColumnRealmObject() {
+        return columnRealmObject;
+    }
+
+    public void setColumnRealmObject(AllTypesPrimaryKey columnRealmObject) {
+        this.columnRealmObject = columnRealmObject;
+    }
+
+    public RealmList<AllTypesPrimaryKey> getColumnRealmList() {
+        return columnRealmList;
+    }
+
+    public void setColumnRealmList(RealmList<AllTypesPrimaryKey> columnRealmList) {
+        this.columnRealmList = columnRealmList;
+    }
+
+    public Boolean getColumnBoxedBoolean() {
+        return columnBoxedBoolean;
+    }
+
+    public void setColumnBoxedBoolean(Boolean columnBoxedBoolean) {
+        this.columnBoxedBoolean = columnBoxedBoolean;
+    }
+}
diff --git a/library-benchmarks/src/main/AndroidManifest.xml b/library-benchmarks/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..f05a423d71
--- /dev/null
+++ b/library-benchmarks/src/main/AndroidManifest.xml
@@ -0,0 +1,13 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="io.realm.benchmarks">
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+
+    <application
+        android:allowBackup="true"
+        android:label="@string/app_name"
+        android:supportsRtl="true">
+    </application>
+
+</manifest>
diff --git a/library-benchmarks/src/main/res/values/strings.xml b/library-benchmarks/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..dbe19ccec8
--- /dev/null
+++ b/library-benchmarks/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">Realm Benchmarks</string>
+</resources>
diff --git a/realm/build.gradle b/realm/build.gradle
index e35f2580cb..f2eead6c59 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -1,4 +1,5 @@
 buildscript {
+    ext.kotlin_version = '1.1.2-4'
     repositories {
         mavenLocal()
         jcenter()
@@ -17,6 +18,7 @@ buildscript {
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
         classpath "io.realm:realm-transformer:${file('../version.txt').text.trim()}"
         classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
     }
 }
 
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index a948d97b99..d567cbe844 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -1,6 +1,7 @@
 import java.security.MessageDigest
 
 apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
 apply plugin: 'com.github.dcendents.android-maven'
 apply plugin: 'maven-publish'
 apply plugin: 'com.jfrog.artifactory'
@@ -80,7 +81,7 @@ android {
 
     sourceSets {
         androidTest {
-            java.srcDirs += 'src/benchmarks/java'
+            java.srcDirs += 'src/androidTest/kotlin'
         }
         androidTestObjectServer {
             java.srcDirs += 'src/syncIntegrationTest/java'
@@ -140,6 +141,7 @@ android.registerTransform(new RealmTransformer())
 
 repositories {
     maven { url "https://jitpack.io" }
+    mavenCentral()
 }
 
 dependencies {
@@ -150,10 +152,10 @@ dependencies {
     compile "io.realm:realm-annotations:${version}"
     compile 'com.getkeepsafe.relinker:relinker:1.2.2'
 
-    objectServerAnnotationProcessor project(':realm-annotations-processor')
+    kaptObjectServer project(':realm-annotations-processor')
     objectServerCompile 'com.squareup.okhttp3:okhttp:3.4.1'
 
-    androidTestAnnotationProcessor project(':realm-annotations-processor')
+    kaptAndroidTest project(':realm-annotations-processor')
     androidTestCompile fileTree(dir: 'testLibs', include: ['*.jar'])
     androidTestCompile 'io.reactivex:rxjava:1.1.0'
     androidTestCompile 'com.android.support:support-annotations:25.3.1'
@@ -162,8 +164,8 @@ dependencies {
     androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
     androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
     androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
-    androidTestCompile 'com.opencsv:opencsv:3.4'
-    androidTestCompile 'dk.ilios:spanner:0.6.0'
+    androidTestCompile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
+    androidTestCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
 }
 
 task sourcesJar(type: Jar) {
@@ -255,7 +257,6 @@ task checkstyle(type: Checkstyle) {
 
     source 'src'
     include '*/java/**/*.java'
-    exclude 'benchmarks/**'
     // Ingore tests for now.
     exclude '*Test*/**'
 
@@ -275,24 +276,6 @@ checkstyle {
 }
 check.dependsOn tasks.checkstyle
 
-// Configuration options can be found here:
-// http://developer.android.com/reference/android/support/test/runner/AndroidJUnitRunner.html
-task connectedBenchmarks(type: GradleBuild) {
-    description = 'Run all benchmarks on connected devices'
-    group = 'Verification'
-    buildFile = file("${projectDir}/build.gradle")
-    startParameter.getProjectProperties().put('android.testInstrumentationRunnerArguments.package', 'io.realm.benchmarks')
-    tasks = ['connectedCheck']
-}
-
-task connectedUnitTests(type: GradleBuild) {
-    description = 'Run all unit tests on connected devices'
-    group = 'Verification'
-    buildFile = file("${projectDir}/build.gradle")
-    startParameter.getProjectProperties().put('android.testInstrumentationRunnerArguments.notPackage', 'io.realm.benchmarks')
-    tasks = ['connectedAndroidTest']
-}
-
 install {
     repositories.mavenInstaller {
         pom {
diff --git a/realm/realm-library/src/androidTest/AndroidManifest.xml b/realm/realm-library/src/androidTest/AndroidManifest.xml
index d9e252dce4..d92707182b 100644
--- a/realm/realm-library/src/androidTest/AndroidManifest.xml
+++ b/realm/realm-library/src/androidTest/AndroidManifest.xml
@@ -8,7 +8,6 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
 
-    <uses-sdk tools:overrideLibrary="dk.ilios.spanner"/>
     <uses-sdk
         android:minSdkVersion="9"
         android:targetSdkVersion="22"/>
diff --git a/realm/realm-library/src/androidTest/java/io/realm/ColumnIndicesTests.java b/realm/realm-library/src/androidTest/java/io/realm/ColumnIndicesTests.java
index 1259fbbae9..906f913009 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/ColumnIndicesTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/ColumnIndicesTests.java
@@ -18,8 +18,6 @@
 import android.support.annotation.NonNull;
 import android.support.test.runner.AndroidJUnit4;
 
-import com.google.common.collect.ImmutableMap;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -27,6 +25,9 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 
+import java.util.Collections;
+import java.util.HashMap;
+
 import io.realm.entities.Cat;
 import io.realm.entities.Dog;
 import io.realm.internal.ColumnIndices;
@@ -73,11 +74,11 @@ private ColumnIndices create(long schemaVersion) {
         dogColumnInfo = (DogRealmProxy.DogColumnInfo) mediator.validateTable(Dog.class, realm.sharedRealm, false);
         Pair<Class<? extends RealmModel>, String> catDesc = Pair.<Class<? extends RealmModel>, String>create(Cat.class, "Cat");
         Pair<Class<? extends RealmModel>, String> dogDesc = Pair.<Class<? extends RealmModel>, String>create(Dog.class, "Dog");
-        return new ColumnIndices(schemaVersion,
-                ImmutableMap.of(
-                        catDesc, catColumnInfo,
-                        dogDesc, dogColumnInfo)
-        );
+
+        HashMap<Pair<Class<? extends RealmModel>, String>, ColumnInfo> map = new HashMap<>();
+        map.put(catDesc, catColumnInfo);
+        map.put(dogDesc, dogColumnInfo);
+        return new ColumnIndices(schemaVersion, Collections.unmodifiableMap(map));
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsUnmanagedTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsUnmanagedTests.java
index c89c7666f2..633184a5d8 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsUnmanagedTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsUnmanagedTests.java
@@ -24,7 +24,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import dk.ilios.spanner.All;
 import io.realm.entities.AllJavaTypes;
 import io.realm.rule.TestRealmConfigurationFactory;
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
index c4ebe934fd..c5ea5c07a1 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
@@ -22,8 +22,6 @@
 import android.support.test.runner.AndroidJUnit4;
 import android.util.Base64;
 
-import com.google.gson.internal.bind.util.ISO8601Utils;
-
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -37,6 +35,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
@@ -442,7 +442,7 @@ public void createFromJson_defaultValuesAreIgnored() throws JSONException {
         json.put(DefaultValueOfField.FIELD_FLOAT, fieldFloatValue);
         json.put(DefaultValueOfField.FIELD_DOUBLE, fieldDoubleValue);
         json.put(DefaultValueOfField.FIELD_BOOLEAN, fieldBooleanValue);
-        json.put(DefaultValueOfField.FIELD_DATE, ISO8601Utils.format(fieldDateValue, true));
+        json.put(DefaultValueOfField.FIELD_DATE, getISO8601Date(fieldDateValue));
         json.put(DefaultValueOfField.FIELD_BINARY, Base64.encodeToString(fieldBinaryValue, Base64.DEFAULT));
         // Value for 'fieldObject'
         final JSONObject fieldObjectJson = new JSONObject();
@@ -496,6 +496,13 @@ public void createFromJson_defaultValuesAreIgnored() throws JSONException {
         assertEquals(3, realm.where(RandomPrimaryKey.class).count());
     }
 
+    private String getISO8601Date(Date date) {
+        TimeZone tz = TimeZone.getTimeZone("UTC");
+        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"); // Quoted "Z" to indicate UTC, no timezone offset
+        df.setTimeZone(tz);
+        return df.format(date);
+    }
+
     @Test
     public void updateFromJson_defaultValuesAreIgnored() throws JSONException {
         final long fieldLongPrimaryKeyValue = DefaultValueOfField.FIELD_LONG_PRIMARY_KEY_DEFAULT_VALUE + 1;
@@ -535,7 +542,7 @@ public void updateFromJson_defaultValuesAreIgnored() throws JSONException {
         json.put(DefaultValueOfField.FIELD_FLOAT, fieldFloatValue);
         json.put(DefaultValueOfField.FIELD_DOUBLE, fieldDoubleValue);
         json.put(DefaultValueOfField.FIELD_BOOLEAN, fieldBooleanValue);
-        json.put(DefaultValueOfField.FIELD_DATE, ISO8601Utils.format(fieldDateValue, true));
+        json.put(DefaultValueOfField.FIELD_DATE, getISO8601Date(fieldDateValue));
         json.put(DefaultValueOfField.FIELD_BINARY, Base64.encodeToString(fieldBinaryValue, Base64.DEFAULT));
         // value for 'fieldObject'
         final JSONObject fieldObjectJson = new JSONObject();
diff --git a/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt b/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt
new file mode 100644
index 0000000000..b851ab45dc
--- /dev/null
+++ b/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm
+
+import android.support.test.runner.AndroidJUnit4
+import io.realm.entities.AllKotlinTypes
+import io.realm.rule.TestRealmConfigurationFactory
+import org.junit.After
+import org.junit.Assert.assertFalse
+import org.junit.Assert.assertTrue
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+import kotlin.reflect.full.memberProperties
+
+/**
+ * This class tests how Kotlin classes are interpreted by Realm and exposed in the RealmSchema
+ */
+@RunWith(AndroidJUnit4::class)
+class KotlinSchemaTests {
+
+    @get:Rule
+    val configFactory = TestRealmConfigurationFactory()
+
+    private lateinit var realm: Realm
+
+    @Before
+    fun setUp() {
+        realm = Realm.getInstance(configFactory.createConfiguration())
+    }
+
+    @After
+    fun tearDown() {
+        realm.close()
+    }
+
+    @Test
+    fun kotlinTypeNonNull() {
+        val objSchema = realm.getSchema().get(AllKotlinTypes::class.simpleName)
+
+        // Document current nullability. Ideally all should be non-nullable. This is currently
+        // not the case.
+        // TODO We should fix this. Tracked by https://github.com/realm/realm-java/issues/4701
+        assertTrue(objSchema.isNullable(AllKotlinTypes::nonNullBinary.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullBoolean.name));
+        assertTrue(objSchema.isNullable(AllKotlinTypes::nonNullString.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullLong.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullInt.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullShort.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullByte.name));
+        assertTrue(objSchema.isNullable(AllKotlinTypes::nonNullDate.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullDouble.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullFloat.name));
+        assertFalse(objSchema.isNullable(AllKotlinTypes::nonNullList.name));
+        assertTrue(objSchema.isNullable(AllKotlinTypes::nonNullObject.name));
+    }
+}
\ No newline at end of file
diff --git a/realm/realm-library/src/androidTest/kotlin/io/realm/entities/AllKotlinTypes.kt b/realm/realm-library/src/androidTest/kotlin/io/realm/entities/AllKotlinTypes.kt
new file mode 100644
index 0000000000..527f8d9593
--- /dev/null
+++ b/realm/realm-library/src/androidTest/kotlin/io/realm/entities/AllKotlinTypes.kt
@@ -0,0 +1,80 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.entities
+
+import io.realm.RealmList
+import io.realm.RealmObject
+import io.realm.RealmResults
+import io.realm.annotations.Ignore
+import io.realm.annotations.Index
+import io.realm.annotations.LinkingObjects
+import io.realm.annotations.PrimaryKey
+import java.util.*
+
+open class AllKotlinTypes : RealmObject() {
+
+    @Ignore
+    var ignoredString: String = ""
+    var nullString: String? = null
+    var nonNullString: String = ""
+    @Index
+    var indexedString: String = ""
+
+    var nullLong: Long? = null
+    @PrimaryKey
+    var nonNullLong: Long = 0
+
+    var nullShort : Short? = null
+    var nonNullShort: Short = 0
+
+    var nullInt: Int? = null
+    var nonNullInt: Int = 0
+
+    var nullByte: Byte? = null
+    var nonNullByte: Byte = 0
+
+    var nullFloat: Float? = null
+    var nonNullFloat: Float = 0F
+
+    var nullDouble: Double? = null
+    var nonNullDouble: Double = 0.0 // Double by default
+
+    var nullBoolean: Boolean? = null
+    var nonNullBoolean: Boolean = false
+
+    var nullDate: Date? = null
+    var nonNullDate: Date = Date()
+
+    var nullBinary: ByteArray? = null
+    var nonNullBinary: ByteArray = ByteArray(0)
+
+// This turns into Byte[] which we dont support for some reason?
+//    var nullBoxedBinary: Array<Byte>? = null
+//    var nonNullBoxedBinary: Array<Byte> = emptyArray()
+
+    var nullObject: AllKotlinTypes? = null
+    var nonNullObject: AllKotlinTypes = AllKotlinTypes()
+
+    var nullList: RealmList<AllKotlinTypes>? = null // This should not be allowed
+    var nonNullList: RealmList<AllKotlinTypes> = RealmList()
+
+    @LinkingObjects("nonNullObject")
+    val objectParents: RealmResults<AllKotlinTypes>? = null;
+
+    @LinkingObjects("nonNullList")
+    val listParents: RealmResults<AllKotlinTypes>? = null;
+}
