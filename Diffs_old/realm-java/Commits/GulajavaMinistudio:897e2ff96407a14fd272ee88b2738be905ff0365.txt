diff --git a/CHANGELOG.md b/CHANGELOG.md
index dcd9fac179..63016bd450 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -18,6 +18,7 @@
 * Potential crash after using `Realm.getSchema()` to change the schema of a typed Realm. `Realm.getSchema()` now returns an immutable `RealmSchema` instance.
 * `Realm.copyToRealmOrUpdate()` might cause a `RealmList` field to contain duplicated elements (#4957).
 * `RealmSchema.create(String)` and `RealmObjectSchema.setClassName(String)` did not accept class name whose length was 51 to 57.
+* Workaround for a Android JVM crash when using 'compactOnLaunch()' (#4964).
 
 ### Internal
 
diff --git a/examples/gradle/wrapper/gradle-wrapper.jar b/examples/gradle/wrapper/gradle-wrapper.jar
index 4df55a78da..3c267da2ff 100644
Binary files a/examples/gradle/wrapper/gradle-wrapper.jar and b/examples/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/examples/gradle/wrapper/gradle-wrapper.properties b/examples/gradle/wrapper/gradle-wrapper.properties
index c31c40ccb7..1e0de7e12a 100644
--- a/examples/gradle/wrapper/gradle-wrapper.properties
+++ b/examples/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:55:54 JST 2017
+#Mon Jul 31 16:48:04 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar
index c6e5e46095..77032c0114 100644
Binary files a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar and b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
index c3d219ec43..908ce6212d 100644
--- a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:55:56 JST 2017
+#Mon Jul 31 16:48:07 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index c6e5e46095..2bdcfd9171 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 4b0b2a84e8..e196fdbb69 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:55:57 JST 2017
+#Mon Jul 31 16:48:08 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/latest b/latest
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar
index b241d912ba..2782ea1181 100644
Binary files a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar and b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
index cbac5d5d24..14d2d42bc0 100644
--- a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
+++ b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:56:00 JST 2017
+#Mon Jul 31 16:48:12 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.jar b/realm-annotations/gradle/wrapper/gradle-wrapper.jar
index 1191cc8dcf..0917c8e850 100644
Binary files a/realm-annotations/gradle/wrapper/gradle-wrapper.jar and b/realm-annotations/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.properties b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
index 4c49b471ba..6ff5b1f04b 100644
--- a/realm-annotations/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:56:04 JST 2017
+#Mon Jul 31 16:42:56 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.jar b/realm-transformer/gradle/wrapper/gradle-wrapper.jar
index 1191cc8dcf..8dfdfad36e 100644
Binary files a/realm-transformer/gradle/wrapper/gradle-wrapper.jar and b/realm-transformer/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.properties b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
index 407776316f..6a7fa1e8ae 100644
--- a/realm-transformer/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:56:05 JST 2017
+#Mon Jul 31 16:48:24 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/realm.properties b/realm.properties
index 78db18bbca..bc8a4d5b07 100644
--- a/realm.properties
+++ b/realm.properties
@@ -1,2 +1,2 @@
-gradleVersion=4.0.1
+gradleVersion=4.0.2
 ndkVersion=r10e
diff --git a/realm/gradle/wrapper/gradle-wrapper.jar b/realm/gradle/wrapper/gradle-wrapper.jar
index 1470cbb470..787b1adea8 100644
Binary files a/realm/gradle/wrapper/gradle-wrapper.jar and b/realm/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm/gradle/wrapper/gradle-wrapper.properties b/realm/gradle/wrapper/gradle-wrapper.properties
index dedd4182df..aea14c26fc 100644
--- a/realm/gradle/wrapper/gradle-wrapper.properties
+++ b/realm/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 12 00:56:02 JST 2017
+#Mon Jul 31 16:48:20 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
index cfe0397ecd..35e22d36bc 100644
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
@@ -24,6 +24,7 @@
 import java.io.IOException;
 import java.util.Arrays;
 
+import javax.lang.model.element.Modifier;
 import javax.tools.JavaFileObject;
 
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
@@ -60,15 +61,6 @@
     private JavaFileObject customInterface = JavaFileObjects.forResource("some/test/CustomInterface.java");
     private JavaFileObject backlinks = JavaFileObjects.forResource("some/test/Backlinks.java");
     private JavaFileObject backlinksTarget = JavaFileObjects.forResource("some/test/BacklinkTarget.java");
-    private JavaFileObject backlinksInvalidField = JavaFileObjects.forResource("some/test/Backlinks_InvalidFieldType.java");
-    private JavaFileObject backlinksLinked = JavaFileObjects.forResource("some/test/Backlinks_LinkedFields.java");
-    private JavaFileObject backlinksMissingParam = JavaFileObjects.forResource("some/test/Backlinks_MissingParameter.java");
-    private JavaFileObject backlinksMissingGeneric = JavaFileObjects.forResource("some/test/Backlinks_MissingGeneric.java");
-    private JavaFileObject backlinksRequired = JavaFileObjects.forResource("some/test/Backlinks_Required.java");
-    private JavaFileObject backlinksIgnored = JavaFileObjects.forResource("some/test/Backlinks_Ignored.java");
-    private JavaFileObject backlinksNotFound = JavaFileObjects.forResource("some/test/Backlinks_NotFound.java");
-    private JavaFileObject backlinksNonFinalField = JavaFileObjects.forResource("some/test/Backlinks_NotFinal.java");
-    private JavaFileObject backlinksWrongType = JavaFileObjects.forResource("some/test/Backlinks_WrongType.java");
     private JavaFileObject counter = JavaFileObjects.forResource("some/test/Counter.java");
     private JavaFileObject counterIgnored = JavaFileObjects.forResource("some/test/Counter_Ignored.java");
     private JavaFileObject counterIndexed = JavaFileObjects.forResource("some/test/Counter_Indexed.java");
@@ -85,7 +77,7 @@ public void compileSimpleFile() {
     }
 
     @Test
-    public void compileProcessedSimpleFile() throws Exception {
+    public void compileProcessedSimpleFile() {
         ASSERT.about(javaSource())
                 .that(simpleModel)
                 .processedWith(new RealmProcessor())
@@ -93,24 +85,23 @@ public void compileProcessedSimpleFile() throws Exception {
     }
 
     @Test
-    public void compileProcessedEmptyFile() throws Exception {
+    public void compileProcessedEmptyFile() {
         ASSERT.about(javaSource())
                 .that(emptyModel)
                 .processedWith(new RealmProcessor())
                 .failsToCompile();
     }
 
-    // FIXME: @Ignore("Disabled because it does not seem to find the generated interface file")
     @Ignore("Disabled because it does not seem to find the generated interface file")
     @Test
-    public void compileSimpleProxyFile() throws Exception {
+    public void compileSimpleProxyFile() {
         ASSERT.about(javaSource())
                 .that(simpleProxy)
                 .compilesWithoutError();
     }
 
     @Test
-    public void compareProcessedSimpleFile() throws Exception {
+    public void compareProcessedSimpleFile() {
         ASSERT.about(javaSource())
                 .that(simpleModel)
                 .processedWith(new RealmProcessor())
@@ -120,7 +111,7 @@ public void compareProcessedSimpleFile() throws Exception {
     }
 
     @Test
-    public void compileProcessedNullTypesFile() throws Exception {
+    public void compileProcessedNullTypesFile() {
         ASSERT.about(javaSource())
                 .that(nullTypesModel)
                 .processedWith(new RealmProcessor())
@@ -128,7 +119,7 @@ public void compileProcessedNullTypesFile() throws Exception {
     }
 
     @Test
-    public void compareProcessedNullTypesFile() throws Exception {
+    public void compareProcessedNullTypesFile() {
         ASSERT.about(javaSource())
                 .that(nullTypesModel)
                 .processedWith(new RealmProcessor())
@@ -145,7 +136,7 @@ public void compileAllTypesFile() {
     }
 
     @Test
-    public void compileProcessedAllTypesFile() throws Exception {
+    public void compileProcessedAllTypesFile() {
         ASSERT.about(javaSource())
                 .that(allTypesModel)
                 .processedWith(new RealmProcessor())
@@ -153,14 +144,14 @@ public void compileProcessedAllTypesFile() throws Exception {
     }
 
     @Test
-    public void compileAllTypesProxyFile() throws Exception {
+    public void compileAllTypesProxyFile() {
         ASSERT.about(javaSource())
                 .that(allTypesModel)
                 .compilesWithoutError();
     }
 
     @Test
-    public void compareProcessedAllTypesFile() throws Exception {
+    public void compareProcessedAllTypesFile() {
         ASSERT.about(javaSource())
                 .that(allTypesModel)
                 .processedWith(new RealmProcessor())
@@ -171,7 +162,7 @@ public void compareProcessedAllTypesFile() throws Exception {
     }
 
     @Test
-    public void compileAppModuleCustomClasses() throws Exception {
+    public void compileAppModuleCustomClasses() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource("some/test/AppModuleCustomClasses.java")))
                 .processedWith(new RealmProcessor())
@@ -179,7 +170,7 @@ public void compileAppModuleCustomClasses() throws Exception {
     }
 
     @Test
-    public void compileAppModuleAllClasses() throws Exception {
+    public void compileAppModuleAllClasses() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource("some/test/AppModuleAllClasses.java")))
                 .processedWith(new RealmProcessor())
@@ -187,7 +178,7 @@ public void compileAppModuleAllClasses() throws Exception {
     }
 
     @Test
-    public void compileLibraryModulesAllClasses() throws Exception {
+    public void compileLibraryModulesAllClasses() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource("some/test/LibraryModuleAllClasses.java")))
                 .processedWith(new RealmProcessor())
@@ -195,7 +186,7 @@ public void compileLibraryModulesAllClasses() throws Exception {
     }
 
     @Test
-    public void compileLibraryModulesCustomClasses() throws Exception {
+    public void compileLibraryModulesCustomClasses() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource("some/test/LibraryModuleCustomClasses.java")))
                 .processedWith(new RealmProcessor())
@@ -203,7 +194,7 @@ public void compileLibraryModulesCustomClasses() throws Exception {
     }
 
     @Test
-    public void compileAppModuleMixedParametersFail() throws Exception {
+    public void compileAppModuleMixedParametersFail() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource(
                         "some/test/InvalidAllTypesModuleMixedParameters.java")))
@@ -212,7 +203,7 @@ public void compileAppModuleMixedParametersFail() throws Exception {
     }
 
     @Test
-    public void compileAppModuleWrongTypeFail() throws Exception {
+    public void compileAppModuleWrongTypeFail() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource(
                         "some/test/InvalidAllTypesModuleWrongType.java")))
@@ -221,7 +212,7 @@ public void compileAppModuleWrongTypeFail() throws Exception {
     }
 
     @Test
-    public void compileLibraryModuleMixedParametersFail() throws Exception {
+    public void compileLibraryModuleMixedParametersFail() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource("some/test/InvalidLibraryModuleMixedParameters.java")))
                 .processedWith(new RealmProcessor())
@@ -229,7 +220,7 @@ public void compileLibraryModuleMixedParametersFail() throws Exception {
     }
 
     @Test
-    public void compileLibraryModuleWrongTypeFail() throws Exception {
+    public void compileLibraryModuleWrongTypeFail() {
         ASSERT.about(javaSources())
                 .that(Arrays.asList(allTypesModel, JavaFileObjects.forResource("some/test/InvalidLibraryModuleWrongType.java")))
                 .processedWith(new RealmProcessor())
@@ -244,7 +235,7 @@ public void compileBooleanFile() {
     }
 
     @Test
-    public void compileProcessedBooleansFile() throws Exception {
+    public void compileProcessedBooleansFile() {
         ASSERT.about(javaSource())
                 .that(booleansModel)
                 .processedWith(new RealmProcessor())
@@ -252,14 +243,14 @@ public void compileProcessedBooleansFile() throws Exception {
     }
 
     @Test
-    public void compileBooleansProxyFile() throws Exception {
+    public void compileBooleansProxyFile() {
         ASSERT.about(javaSource())
                 .that(booleansModel)
                 .compilesWithoutError();
     }
 
     @Test
-    public void compareProcessedBooleansFile() throws Exception {
+    public void compareProcessedBooleansFile() {
         ASSERT.about(javaSource())
                 .that(booleansModel)
                 .processedWith(new RealmProcessor())
@@ -300,8 +291,8 @@ public void compileIndexTypes() throws IOException {
                 "Byte", "Short", "Integer", "Long", "Boolean"};
 
         for (String fieldType : validIndexFieldTypes) {
-            TestRealmObjectFileObject javaFileObject =
-                    TestRealmObjectFileObject.getSingleFieldInstance("ValidIndexType", "Index", fieldType, "testField");
+            RealmSyntheticTestClass javaFileObject =
+                    new RealmSyntheticTestClass.Builder().name("ValidIndexType").field("testField", fieldType, "Index").build();
             ASSERT.about(javaSource())
                     .that(javaFileObject)
                     .processedWith(new RealmProcessor())
@@ -315,8 +306,8 @@ public void compileInvalidIndexTypes() throws IOException {
         final String[] invalidIndexFieldTypes = {"float", "double", "byte[]", "Simple", "RealmList", "Float", "Double"};
 
         for (String fieldType : invalidIndexFieldTypes) {
-            TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject.getSingleFieldInstance(
-                    "InvalidIndexType", "Index", fieldType, "testField");
+            RealmSyntheticTestClass javaFileObject =
+                    new RealmSyntheticTestClass.Builder().name("InvalidIndexType").field("testField", fieldType, "Index").build();
             ASSERT.about(javaSource())
                     .that(javaFileObject)
                     .processedWith(new RealmProcessor())
@@ -330,8 +321,8 @@ public void compilePrimaryKeyTypes() throws IOException {
         final String[] validPrimaryKeyFieldTypes = {"byte", "short", "int", "long", "String", "Byte", "Short", "Integer", "Long"};
 
         for (String fieldType : validPrimaryKeyFieldTypes) {
-            TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject.getSingleFieldInstance(
-                    "ValidPrimaryKeyType", "PrimaryKey", fieldType, "testField");
+            RealmSyntheticTestClass javaFileObject =
+                    new RealmSyntheticTestClass.Builder().name("ValidPrimaryKeyType").field("testField", fieldType, "PrimaryKey").build();
             ASSERT.about(javaSource())
                     .that(javaFileObject)
                     .processedWith(new RealmProcessor())
@@ -345,9 +336,8 @@ public void compileInvalidPrimaryKeyTypes() throws IOException {
         final String[] invalidPrimaryKeyFieldTypes = {"boolean", "java.util.Date", "Simple", "RealmList<Simple>", "Boolean"};
 
         for (String fieldType : invalidPrimaryKeyFieldTypes) {
-            TestRealmObjectFileObject javaFileObject =
-                    TestRealmObjectFileObject.getSingleFieldInstance(
-                            "InvalidPrimaryKeyType", "PrimaryKey", fieldType, "testField");
+            RealmSyntheticTestClass javaFileObject =
+                    new RealmSyntheticTestClass.Builder().name("InvalidPrimaryKeyType").field("testField", fieldType, "PrimaryKey").build();
             ASSERT.about(javaSource())
                     .that(javaFileObject)
                     .processedWith(new RealmProcessor())
@@ -362,8 +352,8 @@ public void compileRequiredTypes() throws IOException {
                 "Float", "Double", "Boolean", "java.util.Date"};
 
         for (String fieldType : validPrimaryKeyFieldTypes) {
-            TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject.getSingleFieldInstance(
-                    "ValidPrimaryKeyType", "Required", fieldType, "testField");
+            RealmSyntheticTestClass javaFileObject =
+                    new RealmSyntheticTestClass.Builder().name("ValidPrimaryKeyType").field("testField", fieldType, "Required").build();
             ASSERT.about(javaSource())
                     .that(javaFileObject)
                     .processedWith(new RealmProcessor())
@@ -378,8 +368,8 @@ public void compileInvalidRequiredTypes() throws IOException {
                 "boolean", "RealmList<Simple>", "Simple"};
 
         for (String fieldType : validPrimaryKeyFieldTypes) {
-            TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject.getSingleFieldInstance(
-                    "ValidPrimaryKeyType", "Required", fieldType, "testField");
+            RealmSyntheticTestClass javaFileObject =
+                    new RealmSyntheticTestClass.Builder().name("ValidPrimaryKeyType").field("testField", fieldType, "Required").build();
             ASSERT.about(javaSource())
                     .that(javaFileObject)
                     .processedWith(new RealmProcessor())
@@ -388,7 +378,7 @@ public void compileInvalidRequiredTypes() throws IOException {
     }
 
     @Test
-    public void compileConflictingFieldName() throws Exception {
+    public void compileConflictingFieldName() {
         ASSERT.about(javaSource())
                 .that(conflictingFieldNameModel)
                 .processedWith(new RealmProcessor())
@@ -396,7 +386,7 @@ public void compileConflictingFieldName() throws Exception {
     }
 
     @Test
-    public void failOnFinalFields() throws Exception {
+    public void failOnFinalFields() {
         ASSERT.about(javaSource())
                 .that(finalModel)
                 .processedWith(new RealmProcessor())
@@ -404,7 +394,7 @@ public void failOnFinalFields() throws Exception {
     }
 
     @Test
-    public void compileTransientFields() throws Exception {
+    public void compileTransientFields() {
         ASSERT.about(javaSource())
                 .that(transientModel)
                 .processedWith(new RealmProcessor())
@@ -412,7 +402,7 @@ public void compileTransientFields() throws Exception {
     }
 
     @Test
-    public void failOnVolatileFields() throws Exception {
+    public void failOnVolatileFields() {
         ASSERT.about(javaSource())
                 .that(volatileModel)
                 .processedWith(new RealmProcessor())
@@ -421,7 +411,7 @@ public void failOnVolatileFields() throws Exception {
 
     // annotation without implementing RealmModel interface
     @Test
-    public void failOnInvalidRealmModel_1() throws Exception {
+    public void failOnInvalidRealmModel_1() {
         ASSERT.about(javaSource())
                 .that(invalidRealmModelModel_1)
                 .processedWith(new RealmProcessor())
@@ -430,7 +420,7 @@ public void failOnInvalidRealmModel_1() throws Exception {
 
     // it's not allowed to extend from another RealmObject
     @Test
-    public void failOnInvalidRealmModel_2() throws Exception {
+    public void failOnInvalidRealmModel_2() {
         ASSERT.about(javaSource())
                 .that(invalidRealmModelModel_2)
                 .processedWith(new RealmProcessor())
@@ -439,7 +429,7 @@ public void failOnInvalidRealmModel_2() throws Exception {
 
     // it's not allowed to extend from another RealmObject
     @Test
-    public void failOnInvalidRealmModel_3() throws Exception {
+    public void failOnInvalidRealmModel_3() {
         ASSERT.about(javaSource())
                 .that(invalidRealmModelModel_3)
                 .processedWith(new RealmProcessor())
@@ -447,7 +437,7 @@ public void failOnInvalidRealmModel_3() throws Exception {
     }
 
     @Test
-    public void validRealmModelUsingInheritance() throws Exception {
+    public void validRealmModelUsingInheritance() {
         ASSERT.about(javaSource())
                 .that(ValidModelPojo_ExtendingRealmObject)
                 .processedWith(new RealmProcessor())
@@ -455,7 +445,7 @@ public void validRealmModelUsingInheritance() throws Exception {
     }
 
     @Test
-    public void canNotInheritRealmList() throws Exception {
+    public void canNotInheritRealmList() {
         ASSERT.about(javaSource())
                 .that(UseExtendRealmList)
                 .processedWith(new RealmProcessor())
@@ -543,90 +533,157 @@ public void compileBacklinks() {
     }
 
     @Test
-    public void failOnLinkingObjectsWithInvalidFieldType() {
+    public void compileSyntheticBacklinks() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksInvalidField))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .processedWith(new RealmProcessor())
+                .compilesWithoutError();
+    }
+
+    @Test
+    public void failOnLinkingObjectsWithInvalidFieldType() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // Backlinks must be RealmResults
+                .type("BacklinkTarget")
+                .builder().build();
+        ASSERT.about(javaSources())
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("Fields annotated with @LinkingObjects must be RealmResults");
     }
 
     @Test
-    public void failOnLinkingObjectsWithNonFinalField() {
+    public void failOnLinkingObjectsWithNonFinalField() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // A field with a @LinkingObjects annotation must be final
+                .modifiers(Modifier.PUBLIC)
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksNonFinalField))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("must be final");
     }
 
     @Test
-    public void failsOnLinkingObjectsWithLinkedFields() {
+    public void failsOnLinkingObjectsWithLinkedFields() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // Defining a backlink more than one levels back is not supported.
+                // It can be queried though: equalTo("selectedFieldParents.selectedFieldParents")
+                .clearAnnotations()
+                .annotation("LinkingObjects(\"child.id\")")
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksLinked))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("The use of '.' to specify fields in referenced classes is not supported");
     }
 
     @Test
-    public void failsOnLinkingObjectsMissingFieldName() {
+    public void failsOnLinkingObjectsMissingFieldName() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // No backlinked field specified
+                .clearAnnotations()
+                .annotation("LinkingObjects")
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksMissingParam))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("must have a parameter identifying the link target");
     }
 
     @Test
-    public void failsOnLinkingObjectsMissingGeneric() {
+    public void failsOnLinkingObjectsMissingGeneric() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // No backlink generic param specified
+                .type("RealmResults")
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksMissingGeneric))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("must specify a generic type");
     }
 
     @Test
-    public void failsOnLinkingObjectsWithRequiredFields() {
+    public void failsOnLinkingObjectsWithRequiredFields() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // A backlinked field may not be @Required
+                .annotation("Required")
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksRequired))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("cannot be @Required");
     }
 
     @Test
-    public void failsOnLinkingObjectsWithIgnoreFields() {
+    public void failsOnLinkingObjectsWithIgnoreFields() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // An  @Ignored, backlinked field is completely ignored
+                .annotation("Ignore")
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksIgnored))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError();
     }
 
     @Test
-    public void failsOnLinkingObjectsFieldNotFound() {
+    public void failsOnLinkingObjectsFieldNotFound() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // The argument to the @LinkingObjects annotation must name a field in the target class
+                .clearAnnotations()
+                .annotation("LinkingObjects(\"xxx\")")
+                .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksNotFound))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("does not exist in class");
     }
 
     @Test
-    public void failsOnLinkingObjectsWithFieldWrongType() {
+    public void failsOnLinkingObjectsWithFieldWrongType() throws IOException {
+        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+                // The type of the field named in the @LinkingObjects annotation must match
+                // the generic type of the annotated field.  BacklinkTarget.child is a Backlink,
+                // not a Backlinks_WrongType.
+                .builder().name("Backlinks_WrongType").build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget, backlinksWrongType))
+                .that(Arrays.asList(backlinksTarget, javaFileObject))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("instead of");
     }
 
     @Test
-    public void compareNonLatinName() throws Exception {
+    public void compareNonLatinName() {
         ASSERT.about(javaSource())
                 .that(nonLatinName)
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError();
     }
+
+    // This method constructs a synthetic Backlinks test class that *should* compile correctly.
+    // It returns the ref to the backlinked Field.  Tests can modify the
+    // field in perverse ways, to verify failure modes.
+    private RealmSyntheticTestClass.Field createBacklinkTestClass() {
+        return new RealmSyntheticTestClass.Builder().name("Backlinks")
+                .field().name("id").type("int").builder()
+                .field()
+                    .name("parents")
+                    .type("RealmResults<BacklinkTarget>")
+                    .modifiers(Modifier.PUBLIC, Modifier.FINAL)
+                    .annotation("LinkingObjects(\"child\")")
+                    .initializer("null")
+                    .hasGetter(false)
+                    .hasSetter(false);
+    }
 }
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmSyntheticTestClass.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmSyntheticTestClass.java
new file mode 100644
index 0000000000..129e98dd2a
--- /dev/null
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmSyntheticTestClass.java
@@ -0,0 +1,201 @@
+/*
+ * Copyright 2015 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.processor;
+
+import com.squareup.javawriter.JavaWriter;
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.EnumSet;
+import java.util.List;
+
+import javax.lang.model.element.Modifier;
+import javax.tools.SimpleJavaFileObject;
+
+// Helper class for creating RealmObject java files
+public class RealmSyntheticTestClass extends SimpleJavaFileObject {
+    public static class Field {
+        private final Builder builder;
+        private String name;
+        private String type;
+        private String initializer;
+        private boolean hasGetter = true;
+        private boolean hasSetter = true;
+        private EnumSet<Modifier> modifiers = EnumSet.of(Modifier.PRIVATE);
+        private final List<String> annotations = new ArrayList<String>();
+
+        Field(Builder builder) {
+            this.builder = builder;
+        }
+
+        public Field name(String name) {
+            this.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
+            return this;
+        }
+
+        public Field type(String type) {
+            this.type = type;
+            return this;
+        }
+
+        public Field modifiers(Modifier... modifiers) {
+            this.modifiers = EnumSet.of(modifiers[0], modifiers); // yuk
+            return this;
+        }
+
+        public Field clearAnnotations() {
+            this.annotations.clear();
+            return this;
+        }
+
+        public Field annotation(String annotation) {
+            this.annotations.add(annotation);
+            return this;
+        }
+
+        public Field initializer(String initializer) {
+            this.initializer = initializer;
+            return this;
+        }
+
+        public Field hasGetter(boolean hasGetter) {
+            this.hasGetter = hasGetter;
+            return this;
+        }
+
+        public Field hasSetter(boolean hasSetter) {
+            this.hasSetter = hasSetter;
+            return this;
+        }
+
+        public Builder builder() {
+            return builder;
+        }
+    }
+
+    public static class Builder {
+        private final List<Field> fields = new ArrayList<Field>();
+        private String name;
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        // Note: this returns the new field, not the builder.
+        // To get the builder back, use Field.builder()
+        public Field field() {
+            Field f = new Field(this);
+            fields.add(f);
+            return f;
+        }
+
+        // Convenience method to support legacy usage
+        public Builder field(String name, String type, String annotation) {
+            field().name(name).type(type).annotation(annotation);
+            return this;
+        }
+
+        public RealmSyntheticTestClass build() throws IOException {
+            StringWriter stringWriter = new StringWriter();
+            JavaWriter writer = new JavaWriter(stringWriter);
+
+            // Package name
+            writer.emitPackage("some.test");
+
+            // Import Realm classes
+            writer.emitImports("io.realm.*");
+            writer.emitImports("io.realm.annotations.*");
+
+            // Begin the class definition
+            writer.beginType(
+                    name,                        // full qualified name of the item to generate
+                    "class",                     // the type of the item
+                    EnumSet.of(Modifier.PUBLIC), // modifiers to apply
+                    "RealmObject")               // class to extend
+                    .emitEmptyLine();
+
+            for (Field field : fields) { generateField(writer, field); }
+
+            writer.endType();
+
+            return new RealmSyntheticTestClass(stringWriter, name);
+        }
+
+        private void generateField(JavaWriter writer, Field field) throws IOException {
+            if (field.name == null) { throw new IllegalArgumentException("A field must have a name"); }
+            if (field.type == null) { throw new IllegalArgumentException("A field must have a type"); }
+
+            // Declaration of field
+            for (String annotation : field.annotations) { writer.emitAnnotation(annotation); }
+            writer.emitField(field.type, field.name, field.modifiers, field.initializer);
+
+            if (field.hasSetter) { emitSetter(writer, field); }
+            if (field.hasGetter) { emitGetter(writer, field); }
+       }
+
+        private void emitSetter(JavaWriter writer, Field field) throws IOException {
+            // Setter
+            writer.beginMethod(
+                    "void", // Return type
+                    "set" + field.name, // Method name
+                    EnumSet.of(Modifier.PUBLIC), field.type, field.name); // Modifiers
+            writer.emitStatement("realmSet$" + field.name + "(" + field.name + ")");
+            writer.endMethod();
+
+            // Realm Setter
+            writer.beginMethod(
+                    "void", // Return type
+                    "realmSet$" + field.name, // Method name
+                    EnumSet.of(Modifier.PUBLIC), field.type, field.name); // Modifiers
+            writer.emitStatement("this." + field.name + "=" + field.name);
+            writer.endMethod();
+        }
+
+        private void emitGetter(JavaWriter writer, Field field) throws IOException {
+            // Getter
+            writer.beginMethod(
+                    field.type, // Return type
+                    "get" + field.name, // Method name
+                    EnumSet.of(Modifier.PUBLIC)); // Modifiers
+            writer.emitStatement("return realmGet$" + field.name + "()");
+            writer.endMethod();
+
+            // Realm Getter
+            writer.beginMethod(
+                    field.type, // Return type
+                    "realmGet$" + field.name, // Method name
+                    EnumSet.of(Modifier.PUBLIC)); // Modifiers
+            writer.emitStatement("return " + field.name);
+            writer.endMethod();
+        }
+    }
+
+    private final StringWriter stringWriter;
+
+    private RealmSyntheticTestClass(StringWriter stringWriter, String name) {
+        super(URI.create(name + ".java"), Kind.SOURCE);
+        this.stringWriter = stringWriter;
+    }
+
+    @Override
+    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
+        return stringWriter.getBuffer();
+    }
+}
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/TestRealmObjectFileObject.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/TestRealmObjectFileObject.java
deleted file mode 100644
index 60114a4e07..0000000000
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/TestRealmObjectFileObject.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright 2015 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.processor;
-
-import com.squareup.javawriter.JavaWriter;
-
-import java.io.IOException;
-import java.io.StringWriter;
-import java.net.URI;
-import java.util.EnumSet;
-
-import javax.lang.model.element.Modifier;
-import javax.tools.SimpleJavaFileObject;
-
-// Helper class for creating RealmObject java files
-public class TestRealmObjectFileObject extends SimpleJavaFileObject {
-    private StringWriter stringWriter;
-
-    private TestRealmObjectFileObject(String name, StringWriter stringWriter) {
-        super(URI.create(name + ".java"), Kind.SOURCE);
-        this.stringWriter = stringWriter;
-    }
-
-    @Override
-    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
-        return stringWriter.getBuffer();
-    }
-
-    // Helper function to create a Realm object java file with a single field.
-    public static TestRealmObjectFileObject getSingleFieldInstance(String className,
-                                                            String annotationToField,
-                                                            String fieldType,
-                                                            String fieldName) throws IOException {
-        String FieldName = fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1, fieldName.length());
-        StringWriter stringWriter = new StringWriter();
-        JavaWriter writer = new JavaWriter(stringWriter);
-
-        // Package name
-        writer.emitPackage("some.test");
-
-        // Import Realm classes
-        writer.emitImports("io.realm.*");
-        writer.emitImports("io.realm.annotations.*");
-
-        // Begin the class definition
-        writer.beginType(
-                className, // full qualified name of the item to generate
-                "class",                     // the type of the item
-                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
-                "RealmObject")                   // class to extend
-                .emitEmptyLine();
-
-        // Declaration of field
-        writer.emitAnnotation(annotationToField);
-        writer.emitField(fieldType, fieldName, EnumSet.of(Modifier.PRIVATE));
-
-        // Getter
-        writer.beginMethod(
-                fieldType, // Return type
-                "get" + FieldName, // Method name
-                EnumSet.of(Modifier.PUBLIC)); // Modifiers
-        writer.emitStatement("return realmGet$" +  fieldName + "()");
-        writer.endMethod();
-
-        // Setter
-        writer.beginMethod(
-                "void", // Return type
-                "set"+ FieldName, // Method name
-                EnumSet.of(Modifier.PUBLIC),
-                fieldType, fieldName); // Modifiers
-        writer.emitStatement("realmSet$" + fieldName + "(" + fieldName + ")");
-        writer.endMethod();
-
-        // Realm Getter
-        writer.beginMethod(
-                fieldType, // Return type
-                "realmGet$" + fieldName, // Method name
-                EnumSet.of(Modifier.PUBLIC)); // Modifiers
-        writer.emitStatement("return " +  fieldName);
-        writer.endMethod();
-
-        // Realm Setter
-        writer.beginMethod(
-                "void", // Return type
-                "realmSet$"+ fieldName, // Method name
-                EnumSet.of(Modifier.PUBLIC),
-                fieldType, fieldName); // Modifiers
-        writer.emitStatement("this." + fieldName + "=" + fieldName);
-        writer.endMethod();
-
-        writer.endType();
-
-        return new TestRealmObjectFileObject(className, stringWriter);
-    }
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_Ignored.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_Ignored.java
deleted file mode 100644
index acceae1ffb..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_Ignored.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-import io.realm.annotations.Ignore;
-
-public class Backlinks_Ignored extends RealmObject {
-    private int id;
-
-    // An  @Ignored, backlinked field is completely ignored
-    @Ignore
-    @LinkingObjects("foo")
-    private int parents = 0;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_InvalidFieldType.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_InvalidFieldType.java
deleted file mode 100644
index 4c6afb1098..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_InvalidFieldType.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_InvalidFieldType extends RealmObject {
-    private int id;
-
-    // Backlinks must be RealmResults
-    @LinkingObjects("child")
-    private final BacklinkTarget parents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_LinkedFields.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_LinkedFields.java
deleted file mode 100644
index d2522269e4..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_LinkedFields.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_LinkedFields extends RealmObject {
-    private int id;
-
-    // Defining a backlink more than one levels back is not supported.
-    // It can be queried though: `equalTo("selectedFieldParents.selectedFieldParents")
-    @LinkingObjects("child.id")
-    private final RealmResults<BacklinkTarget> parents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_MissingGeneric.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_MissingGeneric.java
deleted file mode 100644
index ababc626a7..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_MissingGeneric.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_MissingGeneric extends RealmObject {
-    private int id;
-
-    // Forgot to specify the backlink generic param
-    @LinkingObjects("child")
-    private final RealmResults parents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_MissingParameter.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_MissingParameter.java
deleted file mode 100644
index dec9d6a6ec..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_MissingParameter.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_MissingParameter extends RealmObject {
-    private int id;
-
-    // Forgot to specify the backlinked field
-    @LinkingObjects
-    private final RealmResults<BacklinkTarget> parents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_NotFinal.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_NotFinal.java
deleted file mode 100644
index 97c406b82d..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_NotFinal.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright 2017 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_NotFinal extends RealmObject {
-    private int id;
-
-    // The field named in the @LinkingObjects annotation must be final
-    @LinkingObjects("child")
-    private RealmResults<BacklinkTarget> simpleParents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_NotFound.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_NotFound.java
deleted file mode 100644
index 05692a71fb..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_NotFound.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright 2017 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_NotFound extends RealmObject {
-    private int id;
-
-    // The argument to the @LinkingObjects annotation must name a field in the target class
-    @LinkingObjects("xxx")
-    private final RealmResults<BacklinkTarget> parents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_Required.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_Required.java
deleted file mode 100644
index 5f70fcbbfc..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_Required.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-import io.realm.annotations.Required;
-
-public class Backlinks_Required extends RealmObject {
-    private int id;
-
-    // A backlinked field may not be @Required
-    @Required
-    @LinkingObjects("child")
-    private final RealmResults<BacklinkTarget> parents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_WrongType.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_WrongType.java
deleted file mode 100644
index a09363cab4..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks_WrongType.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright 2017 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package some.test;
-
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks_WrongType extends RealmObject {
-    private int id;
-
-    // The type of the field named in the @LinkingObjects annotation must match
-    // the generic type of the annotated field
-    @LinkingObjects("child")
-    private final RealmResults<BacklinkTarget> parents = null;
-}
diff --git a/realm/realm-library/src/androidTest/AndroidManifest.xml b/realm/realm-library/src/androidTest/AndroidManifest.xml
index bc95bd28c9..5590954aa1 100644
--- a/realm/realm-library/src/androidTest/AndroidManifest.xml
+++ b/realm/realm-library/src/androidTest/AndroidManifest.xml
@@ -7,12 +7,14 @@
     <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.SET_DEBUG_APP"/>
 
     <uses-sdk
         android:minSdkVersion="9"
         android:targetSdkVersion="22"/>
 
-    <application>
+    <application
+        android:debuggable="true">
         <uses-library android:name="android.test.runner"/>
         <service
             android:name=".services.RemoteProcessService"
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
index f77eb20ccf..4079957897 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
@@ -23,6 +23,7 @@
 #include "java_sort_descriptor.hpp"
 #include "util.hpp"
 
+#include "jni_util/java_class.hpp"
 #include "jni_util/java_global_weak_ref.hpp"
 #include "jni_util/java_method.hpp"
 
@@ -285,7 +286,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Collection_nativeStartListening(JN
 {
     TR_ENTER_PTR(native_ptr)
 
-    static JavaMethod notify_change_listeners(env, instance, "notifyChangeListeners", "(J)V");
+    static JavaClass os_results_class(env, "io/realm/internal/Collection");
+    static JavaMethod notify_change_listeners(env, os_results_class, "notifyChangeListeners", "(J)V");
 
     try {
         auto wrapper = reinterpret_cast<ResultsWrapper*>(native_ptr);
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
index 74d2dc64ba..78bc65f069 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
@@ -128,7 +128,8 @@ struct ChangeCallback {
         parse_fields(env, change_set);
 
         m_wrapper->m_row_object_weak_ref.call_with_local_ref(env, [&](JNIEnv*, jobject row_obj) {
-            static JavaMethod notify_change_listeners(env, row_obj, "notifyChangeListeners",
+            static JavaClass os_object_class(env, "io/realm/internal/OsObject");
+            static JavaMethod notify_change_listeners(env, os_object_class, "notifyChangeListeners",
                                                       "([Ljava/lang/String;)V");
             env->CallVoidMethod(row_obj, notify_change_listeners, m_deleted ? nullptr : m_field_names_array);
         });
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
index 041302839a..6c066ad851 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
@@ -205,7 +205,8 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateConfig(
         config.automatic_change_notifications = auto_change_notification;
 
         if (compact_on_launch) {
-            static JavaMethod should_compact(env, compact_on_launch, "shouldCompact", "(JJ)Z");
+            static JavaClass callback_class(env, "io/realm/CompactOnLaunchCallback");
+            static JavaMethod should_compact(env, callback_class, "shouldCompact", "(JJ)Z");
             JavaGlobalRef java_compact_on_launch_ref(env, compact_on_launch);
 
             auto should_compact_on_launch_function = [java_compact_on_launch_ref](uint64_t totalBytes, uint64_t usedBytes) {
diff --git a/realm/realm-library/src/main/cpp/java_binding_context.cpp b/realm/realm-library/src/main/cpp/java_binding_context.cpp
index 7c4480d004..296d5bbc95 100644
--- a/realm/realm-library/src/main/cpp/java_binding_context.cpp
+++ b/realm/realm-library/src/main/cpp/java_binding_context.cpp
@@ -15,6 +15,7 @@
  */
 
 #include "java_binding_context.hpp"
+#include "jni_util/java_class.hpp"
 #include "jni_util/java_method.hpp"
 
 #include "util.hpp"
@@ -31,7 +32,7 @@ void JavaBindingContext::before_notify()
     if (m_java_notifier) {
         m_java_notifier.call_with_local_ref([&](JNIEnv* env, jobject notifier_obj) {
             // Method IDs from RealmNotifier implementation. Cache them as member vars.
-            static JavaMethod notify_by_other_method(env, notifier_obj, "beforeNotify", "()V");
+            static JavaMethod notify_by_other_method(env, get_notifier_class(env), "beforeNotify", "()V");
             env->CallVoidMethod(notifier_obj, notify_by_other_method);
         });
     }
@@ -47,8 +48,14 @@ void JavaBindingContext::did_change(std::vector<BindingContext::ObserverState> c
     }
     if (version_changed) {
         m_java_notifier.call_with_local_ref(env, [&](JNIEnv*, jobject notifier_obj) {
-            static JavaMethod realm_notifier_did_change_method(env, notifier_obj, "didChange", "()V");
+            static JavaMethod realm_notifier_did_change_method(env, get_notifier_class(env), "didChange", "()V");
             env->CallVoidMethod(notifier_obj, realm_notifier_did_change_method);
         });
     }
 }
+
+JavaClass const& JavaBindingContext::get_notifier_class(JNIEnv* env)
+{
+    static JavaClass notifier_class(env, "io/realm/internal/RealmNotifier");
+    return notifier_class;
+}
diff --git a/realm/realm-library/src/main/cpp/java_binding_context.hpp b/realm/realm-library/src/main/cpp/java_binding_context.hpp
index de3a15c62c..f961d4f676 100644
--- a/realm/realm-library/src/main/cpp/java_binding_context.hpp
+++ b/realm/realm-library/src/main/cpp/java_binding_context.hpp
@@ -26,8 +26,11 @@
 
 namespace realm {
 
-namespace _impl {
+namespace jni_util {
+class JavaClass;
+}
 
+namespace _impl {
 // Binding context which will be called from OS.
 class JavaBindingContext final : public BindingContext {
 private:
@@ -39,6 +42,7 @@ class JavaBindingContext final : public BindingContext {
     // A weak global ref to the implementation of RealmNotifier
     // Java should hold a strong ref to it as long as the SharedRealm lives
     jni_util::JavaGlobalWeakRef m_java_notifier;
+    jni_util::JavaClass const& get_notifier_class(JNIEnv*);
 
 public:
     virtual ~JavaBindingContext(){};
diff --git a/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp b/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp
index acee8a21a2..ebed50f6fd 100644
--- a/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp
+++ b/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp
@@ -17,6 +17,7 @@
 
 #include "java_sort_descriptor.hpp"
 #include "util.hpp"
+#include "jni_util/java_class.hpp"
 #include "jni_util/java_method.hpp"
 
 using namespace realm;
@@ -42,14 +43,14 @@ DistinctDescriptor JavaSortDescriptor::distinct_descriptor() const noexcept
 
 Table* JavaSortDescriptor::get_table_ptr() const noexcept
 {
-    static JavaMethod get_table_ptr_method(m_env, m_sort_desc_obj, "getTablePtr", "()J");
+    static JavaMethod get_table_ptr_method(m_env, get_sort_desc_class(), "getTablePtr", "()J");
     jlong table_ptr = m_env->CallLongMethod(m_sort_desc_obj, get_table_ptr_method);
     return reinterpret_cast<Table*>(table_ptr);
 }
 
 std::vector<std::vector<size_t>> JavaSortDescriptor::get_column_indices() const noexcept
 {
-    static JavaMethod get_column_indices_method(m_env, m_sort_desc_obj, "getColumnIndices", "()[[J");
+    static JavaMethod get_column_indices_method(m_env, get_sort_desc_class(), "getColumnIndices", "()[[J");
     jobjectArray column_indices =
         static_cast<jobjectArray>(m_env->CallObjectMethod(m_sort_desc_obj, get_column_indices_method));
     JniArrayOfArrays<JniLongArray, jlongArray> arrays(m_env, column_indices);
@@ -69,7 +70,7 @@ std::vector<std::vector<size_t>> JavaSortDescriptor::get_column_indices() const
 
 std::vector<bool> JavaSortDescriptor::get_ascendings() const noexcept
 {
-    static JavaMethod get_ascendings_method(m_env, m_sort_desc_obj, "getAscendings", "()[Z");
+    static JavaMethod get_ascendings_method(m_env, get_sort_desc_class(), "getAscendings", "()[Z");
 
     jbooleanArray ascendings =
         static_cast<jbooleanArray>(m_env->CallObjectMethod(m_sort_desc_obj, get_ascendings_method));
@@ -87,3 +88,10 @@ std::vector<bool> JavaSortDescriptor::get_ascendings() const noexcept
     }
     return ascending_list;
 }
+
+JavaClass const& JavaSortDescriptor::get_sort_desc_class() const noexcept
+{
+    static JavaClass sort_desc_class(m_env, "io/realm/internal/SortDescriptor");
+    return sort_desc_class;
+}
+
diff --git a/realm/realm-library/src/main/cpp/java_sort_descriptor.hpp b/realm/realm-library/src/main/cpp/java_sort_descriptor.hpp
index 16d7bfa11b..81384f9a15 100644
--- a/realm/realm-library/src/main/cpp/java_sort_descriptor.hpp
+++ b/realm/realm-library/src/main/cpp/java_sort_descriptor.hpp
@@ -22,6 +22,11 @@
 #include "descriptor_ordering.hpp"
 
 namespace realm {
+
+namespace jni_util {
+class JavaClass;
+}
+
 namespace _impl {
 
 // For converting a Java SortDescriptor object to realm::SortDescriptor.
@@ -58,6 +63,8 @@ class JavaSortDescriptor {
     realm::Table* get_table_ptr() const noexcept;
     std::vector<std::vector<size_t>> get_column_indices() const noexcept;
     std::vector<bool> get_ascendings() const noexcept;
+
+    jni_util::JavaClass const& get_sort_desc_class() const noexcept;
 };
 
 } // namespace _impl
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_method.cpp b/realm/realm-library/src/main/cpp/jni_util/java_method.cpp
index 882e4ef38f..ab4719809c 100644
--- a/realm/realm-library/src/main/cpp/jni_util/java_method.cpp
+++ b/realm/realm-library/src/main/cpp/jni_util/java_method.cpp
@@ -15,12 +15,13 @@
  */
 
 #include "java_method.hpp"
+#include "java_class.hpp"
 
 #include <realm/util/assert.hpp>
 
 using namespace realm::jni_util;
 
-JavaMethod::JavaMethod(JNIEnv* env, jclass cls, const char* method_name, const char* signature, bool static_method)
+JavaMethod::JavaMethod(JNIEnv* env, JavaClass const& cls, const char* method_name, const char* signature, bool static_method)
 {
     if (static_method) {
         m_method_id = env->GetStaticMethodID(cls, method_name, signature);
@@ -31,24 +32,3 @@ JavaMethod::JavaMethod(JNIEnv* env, jclass cls, const char* method_name, const c
 
     REALM_ASSERT_RELEASE(m_method_id != nullptr);
 }
-
-JavaMethod::JavaMethod(JNIEnv* env, jobject obj, const char* method_name, const char* signature)
-{
-    jclass cls = env->GetObjectClass(obj);
-    m_method_id = env->GetMethodID(cls, method_name, signature);
-    REALM_ASSERT_RELEASE(m_method_id != nullptr);
-    env->DeleteLocalRef(cls);
-}
-
-JavaMethod::JavaMethod(JNIEnv* env, const char* class_name, const char* method_name, const char* signature,
-                       bool static_method)
-{
-    jclass cls = env->FindClass(class_name);
-    REALM_ASSERT_RELEASE(cls != nullptr);
-    if (static_method) {
-        m_method_id = env->GetStaticMethodID(cls, method_name, signature);
-    }
-    else {
-        m_method_id = env->GetMethodID(cls, method_name, signature);
-    }
-}
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_method.hpp b/realm/realm-library/src/main/cpp/jni_util/java_method.hpp
index d582399fd3..0bcc80172a 100644
--- a/realm/realm-library/src/main/cpp/jni_util/java_method.hpp
+++ b/realm/realm-library/src/main/cpp/jni_util/java_method.hpp
@@ -22,6 +22,7 @@
 namespace realm {
 namespace jni_util {
 
+class JavaClass;
 // RAII wrapper for java method ID. Since normally method ID stays unchanged for the whole JVM life cycle, it would be
 // safe to have a static JavaMethod object to avoid calling GetMethodID multiple times.
 class JavaMethod {
@@ -30,11 +31,28 @@ class JavaMethod {
         : m_method_id(nullptr)
     {
     }
-    JavaMethod(JNIEnv* env, jclass cls, const char* method_name, const char* signature, bool static_method = false);
-    JavaMethod(JNIEnv* env, jobject obj, const char* method_name, const char* signature);
-    JavaMethod(JNIEnv* env, const char* class_name, const char* method_name, const char* signature,
+    JavaMethod(JNIEnv* env, JavaClass const& cls, const char* method_name, const char* signature,
                bool static_method = false);
 
+    // From https://developer.android.com/training/articles/perf-jni.html
+    // The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are
+    // only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not
+    // be impossible in Android. Note however that the jclass is a class reference and must be protected with a call
+    // to NewGlobalRef (see the next section).
+    //
+    // BUT THERE ARE BUGS. See below:
+    //
+    // WARNING!! For anyone wants to implement this method, please DON'T. There might be a bug in JVM implementation
+    // that the jmethodID retrieved from jobject's jclass would be invalid under some certain conditions.
+    // See https://github.com/realm/realm-java/issues/4964 for how to reproduce it.
+    // JavaMethod(JNIEnv* env, jobject obj, const char* method_name, const char* signature);
+
+    // For this constructor, there is no evidence that jmethodID will be invalidated when there is no ref to the jclass.
+    // Just in case, though we force the caller to keep a global ref by JavaClass to make sure we won't encounter another
+    // JVM bug.
+    // JavaMethod(JNIEnv* env, const char* class_name, const char* method_name, const char* signature,
+    //           bool static_method = false);
+
     JavaMethod(const JavaMethod&) = default;
     JavaMethod& operator=(const JavaMethod&) = default;
     JavaMethod(JavaMethod&& rhs) = delete;
diff --git a/realm/realm-library/src/main/java/io/realm/CompactOnLaunchCallback.java b/realm/realm-library/src/main/java/io/realm/CompactOnLaunchCallback.java
index 8da63ac6f0..697e3742e0 100644
--- a/realm/realm-library/src/main/java/io/realm/CompactOnLaunchCallback.java
+++ b/realm/realm-library/src/main/java/io/realm/CompactOnLaunchCallback.java
@@ -17,14 +17,13 @@
 package io.realm;
 
 import io.realm.internal.Keep;
-import io.realm.internal.KeepMember;
 
 /**
  * This interface is used to determine if a Realm file should be compacted the first time the file is opened and before
  * the instance is returned.
  * <p>
  * Note that compacting a file can take a while, so compacting should generally only be done on a background thread or
- * when used in combination with {@link Realm#getInstanceAsync(RealmConfiguration, Callback)}.
+ * when used in combination with {@link Realm#getInstanceAsync(RealmConfiguration, Realm.Callback)}.
  */
 @Keep
 public interface CompactOnLaunchCallback {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
index 56a46768d1..bd1a57bfc6 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
@@ -26,7 +26,7 @@
 /**
  * Java wrapper for Object Store's {@code Object} class.
  */
-@KeepMember
+@Keep
 public class OsObject implements NativeObject {
 
     private static class OsObjectChangeSet implements ObjectChangeSet {
@@ -239,7 +239,6 @@ public static long createRowWithPrimaryKey(Table table, Object primaryKeyValue)
 
     // Called by JNI
     @SuppressWarnings("unused")
-    @KeepMember
     private void notifyChangeListeners(String[] changedFields) {
         observerPairs.foreach(new Callback(changedFields));
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java
index 1f47c94e4d..7e17fdff5b 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java
@@ -37,7 +37,7 @@
  * <p>
  * Sort descriptors do not support Linking Objects, either internally or as terminal types.
  */
-@KeepMember
+@Keep
 public class SortDescriptor {
     //@VisibleForTesting
     final static Set<RealmFieldType> SORT_VALID_FIELD_TYPES = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
@@ -128,21 +128,18 @@ private SortDescriptor(Table table, long[][] columnIndices, Sort[] sortOrders) {
     }
 
     // Called by JNI.
-    @KeepMember
     @SuppressWarnings("unused")
     long[][] getColumnIndices() {
         return columnIndices;
     }
 
     // Called by JNI.
-    @KeepMember
     @SuppressWarnings("unused")
     boolean[] getAscendings() {
         return ascendings;
     }
 
     // Called by JNI.
-    @KeepMember
     @SuppressWarnings("unused")
     private long getTablePtr() {
         return table.getNativePtr();
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index f4f903684d..4277e9d13e 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -26,7 +26,6 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.realm.internal.Keep;
-import io.realm.internal.KeepMember;
 import io.realm.internal.network.AuthenticationServer;
 import io.realm.internal.network.NetworkStateReceiver;
 import io.realm.internal.network.OkHttpAuthenticationServer;
@@ -292,7 +291,6 @@ private static synchronized void notifyNetworkIsBack() {
      * can leak since we don't have control over the session lifecycle.
      */
     @SuppressWarnings("unused")
-    @KeepMember
     private static synchronized void notifyProgressListener(String localRealmPath, long listenerId, long transferedBytes, long transferableBytes) {
         SyncSession session = sessions.get(localRealmPath);
         if (session != null) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index a6c774090e..ca1973429d 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -32,7 +32,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.realm.internal.Keep;
-import io.realm.internal.KeepMember;
 import io.realm.internal.SyncObjectServerFacade;
 import io.realm.internal.android.AndroidCapabilities;
 import io.realm.internal.async.RealmAsyncTaskImpl;
@@ -153,7 +152,6 @@ public URI getServerUrl() {
     }
 
     // This callback will happen on the thread running the Sync Client.
-    @KeepMember
     void notifySessionError(int errorCode, String errorMessage) {
         if (errorHandler == null) {
             return;
@@ -179,7 +177,6 @@ void notifySessionError(int errorCode, String errorMessage) {
      * @return the state of the session.
      * @see SyncSession.State
      */
-    @KeepMember
     @SuppressWarnings("unused")
     public State getState() {
         byte state = nativeGetState(configuration.getPath());
diff --git a/tools/update_gradle_wrapper.sh b/tools/update_gradle_wrapper.sh
index ad3a95b7a2..224817cf23 100755
--- a/tools/update_gradle_wrapper.sh
+++ b/tools/update_gradle_wrapper.sh
@@ -1,6 +1,12 @@
 #!/bin/sh
 
-# This script updates Gradle Wrappers in this repository. You need to update the version number in realm.properties first, then execute ./update_gradle_wrapper.sh .
+# This script updates Gradle Wrappers in this repository.
+# To run it:
+#   1. Make sure that you have run ./gradlew assemble in the root directory
+#   2. Replace the gradle version number in realm.properties in the root directory, with the new version number.
+#   3. Run tools/update_gradle_wrapper.sh
+
+HERE=`pwd`
 
 cd "$(dirname $0)/.."
 
@@ -10,3 +16,6 @@ for i in $(find $(pwd) -type f -name gradlew); do
     ./gradlew wrapper
     sed -E -i '' s/-bin\\.zip\$/-all.zip/ gradle/wrapper/gradle-wrapper.properties
 done
+
+cd $HERE
+
