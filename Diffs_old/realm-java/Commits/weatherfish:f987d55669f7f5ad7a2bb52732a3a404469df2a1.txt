diff --git a/CHANGELOG.md b/CHANGELOG.md
index 370ea45df5..deecc12ea7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,61 @@
+## 2.3.0
+
+### Object Server API Changes (In Beta)
+
+* Add a default `UserStore` based on the Realm Object Store (`ObjectStoreUserStore`).
+
+## 2.2.2
+
+### Object Server API Changes (In Beta)
+
+* Disabled `Realm.compactRealm()` when sync is enabled as it might corrupt the Realm (https://github.com/realm/realm-core/issues/2345).
+
+### Bug fixes
+
+* "operation not permitted" issue when creating Realm file on some devices' external storage (#3629).
+
+### Enhancements
+
+* All major public classes are now non-final. This is mostly a compromise to support Mockito. All protected fields/methods are still not considered part of the public API and can change without notice (#3869).
+
+### Internal
+
+* Upgraded Realm Core to 2.1.0.
+* Upgraded Realm Sync to 1.0.0-BETA-5.0.
+
+## 2.2.1
+
+### Object Server API Changes (In Beta)
+
+* Fixed `SyncConfiguration.toString()` so it now outputs a correct description instead of an empty string (#3787).
+
+### Bug fixes
+
+* Added version number to the native library, preventing ReLinker from accidentally loading old code (#3775).
+* `Realm.getLocalInstanceCount(config)` throwing NullPointerException if called after all Realms have been closed (#3791).
+
+## 2.2.0
+
+### Object Server API Changes (In Beta)
+
+* Added support for `SyncUser.getManagementRealm()` and permission changes.
+
+### Bug fixes
+
+* Kotlin projects no longer create the `RealmDefaultModule` if no Realm model classes are present (#3746).
+* Remove `includedescriptorclasses` option from ProGuard rule file in order to support built-in shrinker of Android Gradle Plugin (#3714).
+* Unexpected `RealmMigrationNeededException` was thrown when a field was added to synced Realm.
+
+### Enhancements
+
+* Added support for the `annotationProcessor` configuration provided by Android Gradle Plugin 2.2.0 or later. Realm plugin adds its annotation processor to the `annotationProcessor` configuration instead of `apt` configuration if it is available and the `com.neenbedankt.android-apt` plugin is not used. In Kotlin projects, `kapt` is used instead of the `annotationProcessor` configuration (#3026).
+
 ## 2.1.1
 
+### Bug fixes
+
+* Fixed a bug in `Realm.insert` and `Realm.insertOrUpdate` methods causing a `StackOverFlow` when you try to insert a cyclic graph of objects between Realms (#3732).
+
 ### Object Server API Changes (In Beta)
 
 * Set default RxFactory to `SyncConfiguration`.
@@ -37,7 +93,7 @@
 * Permission error when a database file was located on external storage (#3140).
 * Memory leak when unsubscribing from a RealmResults/RealmObject RxJava Observable (#3552).
 
-### Enhancement
+### Enhancements
 
 * `Realm.compactRealm()` now works for encrypted Realms.
 * Added `first(E defaultValue)` and `last(E defaultValue)` methods to `RealmList` and `RealmResult`. These methods will return the provided object instead of throwing an `IndexOutOfBoundsException` if the list is empty.
diff --git a/Jenkinsfile b/Jenkinsfile
index 4e73462a90..364ad7d9fb 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -13,18 +13,20 @@ try {
           $class: 'GitSCM',
           branches: scm.branches,
           gitTool: 'native git',
-          extensions: scm.extensions + [[$class: 'CleanCheckout']],
+          extensions: scm.extensions + [
+            [$class: 'CleanCheckout'],
+            [$class: 'SubmoduleOption', recursiveSubmodules: true]
+          ],
           userRemoteConfigs: scm.userRemoteConfigs
         ])
-        sh 'git submodule sync'
-        sh 'git submodule update --init --recursive'
-        // Make sure not to delete the folder that Jenkins allocates to store scripts
-        sh 'git clean -ffdx -e .????????'
       }
 
       def buildEnv
       def rosEnv
       stage('Docker build') {
+        // Clean any potential old containers
+        sh 'docker rm ros || true' 
+
         // Docker image for build
         buildEnv = docker.build 'realm-java:snapshot'
         // Docker image for testing Realm Object Server
@@ -75,16 +77,18 @@ try {
             }
 
             stage('Run instrumented tests') {
-              boolean archiveLog = true
-              String backgroundPid
-              try {
-                backgroundPid = startLogCatCollector()
-                forwardAdbPorts()
-                gradle('realm', 'connectedUnitTests')
-                archiveLog = false;
-              } finally {
-                stopLogCatCollector(backgroundPid, archiveLog)
-                storeJunitResults 'realm/realm-library/build/outputs/androidTest-results/connected/**/TEST-*.xml'
+              lock("${env.NODE_NAME}-android") {
+                boolean archiveLog = true
+                String backgroundPid
+                try {
+                  backgroundPid = startLogCatCollector()
+                  forwardAdbPorts()
+                  gradle('realm', 'connectedUnitTests')
+                  archiveLog = false;
+                } finally {
+                  stopLogCatCollector(backgroundPid, archiveLog)
+                  storeJunitResults 'realm/realm-library/build/outputs/androidTest-results/connected/**/TEST-*.xml'
+                }
               }
             }
 
@@ -103,6 +107,7 @@ try {
             }
           }
       } finally {
+          sh "docker logs ros"
           rosContainer.stop()
       }
     }
diff --git a/README.md b/README.md
index e552001903..10e737e150 100644
--- a/README.md
+++ b/README.md
@@ -57,10 +57,7 @@ In case you don't want to use the precompiled version, you can build Realm yours
 
 ### Prerequisites
 
- * Make sure `make` is available in your `$PATH`.
  * Download the [**JDK 7**](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) or [**JDK 8**](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) from Oracle and install it.
- * Download & install s3cmd (`brew install s3cmd` on Mac, `sudo apt-get install s3cmd` on Ubuntu).
- * Get `.s3cfg` file and put it in your home directory. If you'd like to put it other location, add `s3cfg=<path to .s3cfg>` in `~/.gradle/gradle.properties`.
  * Download & install the Android SDK **Build-Tools 24.0.0**, **Android N (API 24)** (for example through Android Studioâ€™s **Android SDK Manager**).
  * Download the **Android NDK (= r10e)** for [OS X](http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin) or [Linux](http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin).
  * Install CMake from SDK manager in Android Studio ("SDK Tools" -> "CMake").
diff --git a/dependencies.list b/dependencies.list
index de35027e6e..e1ea9c6811 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,8 +1,8 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=1.0.0-BETA-3.2
-REALM_SYNC_SHA256=999f4fabe9f377ab03ced221e82317d6e02361da67e0a9928c66ddb56798e58e
+REALM_SYNC_VERSION=1.0.0-BETA-5.0
+REALM_SYNC_SHA256=7bbaa9cdef722d85489feb1b70da11d5640869540d9a0fc40621de7352dd9ffd
 
 # Object Server Release used by Integration tests
 # https://packagecloud.io/realm/realm?filter=debs
-REALM_OBJECT_SERVER_DE_VERSION=1.0.0-BETA-2.3-310
\ No newline at end of file
+REALM_OBJECT_SERVER_DE_VERSION=1.0.0-BETA-4.11-449
diff --git a/examples/introExample/build.gradle b/examples/introExample/build.gradle
index d61e93b5a3..6559bb309a 100644
--- a/examples/introExample/build.gradle
+++ b/examples/introExample/build.gradle
@@ -1,6 +1,5 @@
 apply plugin: 'com.android.application'
 apply plugin: 'android-command'
-apply plugin: 'com.neenbedankt.android-apt'
 apply plugin: 'realm-android'
 
 android {
diff --git a/examples/objectServerExample/build.gradle b/examples/objectServerExample/build.gradle
index dd0e37e1ae..52a4c63f4a 100644
--- a/examples/objectServerExample/build.gradle
+++ b/examples/objectServerExample/build.gradle
@@ -63,5 +63,5 @@ dependencies {
     compile 'com.android.support:support-v4:24.2.0'
     compile 'com.android.support:design:24.2.0'
     compile 'com.jakewharton:butterknife:8.3.0'
-    apt 'com.jakewharton:butterknife-compiler:8.3.0'
+    annotationProcessor 'com.jakewharton:butterknife-compiler:8.3.0'
 }
diff --git a/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java b/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java
new file mode 100644
index 0000000000..c4b618b704
--- /dev/null
+++ b/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java
@@ -0,0 +1,137 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.securetokenandroidkeystore;
+
+import android.os.Bundle;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.app.AppCompatActivity;
+import android.widget.TextView;
+
+import com.example.securetokenandroidkeystore.R;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.security.KeyStoreException;
+import java.util.UUID;
+
+import io.realm.android.CipherClient;
+import io.realm.android.SecureUserStore;
+import io.realm.SyncUser;
+import io.realm.android.SecureUserStore;
+import io.realm.SyncManager;
+import io.realm.SyncConfiguration;
+import io.realm.Realm;
+import io.realm.internal.objectserver.Token;
+import io.realm.internal.objectserver.ObjectServerUser;
+
+/**
+ * Activity responsible of unlocking the KeyStore
+ * before using the {@link realm.io.android.SecureUserStore} to encrypt
+ * the Token we get from the session
+ */
+public class MainActivity extends AppCompatActivity {
+    private CipherClient cryptoClient;
+    private TextView txtKeystoreState;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        txtKeystoreState = (TextView) findViewById(R.id.txtLabelKeyStore);
+
+        try {
+            cryptoClient = new CipherClient(this);
+            if (cryptoClient.isKeystoreUnlocked()) {
+                buildSyncConf();
+                keystoreUnlockedMessage();
+            } else {
+                cryptoClient.unlockKeystore();
+            }
+        } catch (KeyStoreException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        try {
+            // We return to the app after the KeyStore is unlocked or not.
+            if (cryptoClient.isKeystoreUnlocked()) {
+                buildSyncConf();
+                keystoreUnlockedMessage ();
+            } else {
+                keystoreLockedMessage ();
+            }
+        } catch (KeyStoreException e) {
+            e.printStackTrace();
+        }
+    }
+
+    // build SyncConfiguration with a user store to store encrypted Token.
+    private void buildSyncConf () {
+        try {
+            SyncManager.setUserStore(new SecureUserStore(MainActivity.this));
+            // the rest of Sync logic ...
+            SyncUser user = createTestUser(0);
+            String url = "realm://objectserver.realm.io/default";
+            SyncConfiguration secureConfig = new SyncConfiguration.Builder(user, url).build();
+            Realm realm = Realm.getInstance(secureConfig);
+            // ... 
+
+        } catch (KeyStoreException e) {
+            e.printStackTrace();
+        }
+    }
+    // Helpers
+    private final static String USER_TOKEN = UUID.randomUUID().toString();
+    private final static String REALM_TOKEN = UUID.randomUUID().toString();
+
+    private static SyncUser createTestUser(long expires) {
+        Token userToken = new Token(USER_TOKEN, "JohnDoe", null, expires, null);
+        Token accessToken = new Token(REALM_TOKEN, "JohnDoe", "/foo", expires, new Token.Permission[] {Token.Permission.DOWNLOAD });
+        ObjectServerUser.AccessDescription desc = new ObjectServerUser.AccessDescription(accessToken, "/data/data/myapp/files/default", false);
+
+        JSONObject obj = new JSONObject();
+        try {
+            JSONArray realmList = new JSONArray();
+            JSONObject realmDesc = new JSONObject();
+            realmDesc.put("uri", "realm://objectserver.realm.io/default");
+            realmDesc.put("description", desc.toJson());
+            realmList.put(realmDesc);
+
+            obj.put("authUrl", "http://objectserver.realm.io/auth");
+            obj.put("userToken", userToken.toJson());
+            obj.put("realms", realmList);
+            return SyncUser.fromJson(obj.toString());
+        } catch (JSONException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private void keystoreLockedMessage () {
+        txtKeystoreState.setBackgroundColor(ContextCompat.getColor(this, R.color.colorLocked));
+        txtKeystoreState.setText(R.string.locked_text);
+    }
+
+    private void keystoreUnlockedMessage () {
+        txtKeystoreState.setBackgroundColor(ContextCompat.getColor(this, R.color.colorActivated));
+        txtKeystoreState.setText(R.string.unlocked_text);
+    }
+}
+
diff --git a/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MyApplication.java b/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MyApplication.java
new file mode 100644
index 0000000000..8af665821a
--- /dev/null
+++ b/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MyApplication.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.securetokenandroidkeystore;
+
+import android.app.Application;
+
+import io.realm.Realm;
+
+public class MyApplication extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        // Initialize Realm. Should only be done once when the application starts.
+        Realm.init(this);
+    }
+}
diff --git a/examples/unitTestExample/build.gradle b/examples/unitTestExample/build.gradle
index f4a1b95430..a6752c2738 100644
--- a/examples/unitTestExample/build.gradle
+++ b/examples/unitTestExample/build.gradle
@@ -1,6 +1,5 @@
 apply plugin: 'com.android.application'
 apply plugin: 'android-command'
-apply plugin: 'com.neenbedankt.android-apt'
 apply plugin: 'realm-android'
 
 android {
diff --git a/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java b/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java
index 1c12d4114d..147c9aa553 100644
--- a/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java
+++ b/examples/unitTestExample/src/test/java/io/realm/examples/unittesting/ExampleRealmTest.java
@@ -107,7 +107,7 @@ public void shouldVerifyThatDogWasCreated() {
         dogRepo.createDog("Spot");
 
         // Attempting to verify that a method was called (executeTransaction) on a partial
-        // mock will return unexpected resultes due to the partial mock. For example,
+        // mock will return unexpected results due to the partial mock. For example,
         // verifying that `executeTransaction` was called only once will fail as Powermock
         // actually calls the method 3 times for some reason. I cannot determine why at this
         // point.
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
index f3557026e5..0b28d9a15c 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
@@ -23,8 +23,6 @@ import io.realm.transformer.RealmTransformer
 import org.gradle.api.GradleException
 import org.gradle.api.Plugin
 import org.gradle.api.Project
-import org.gradle.api.artifacts.DependencyResolutionListener
-import org.gradle.api.artifacts.ResolvableDependencies
 
 class Realm implements Plugin<Project> {
 
@@ -44,27 +42,36 @@ class Realm implements Plugin<Project> {
         def syncEnabledDefault = false
         project.extensions.create('realm', RealmPluginExtension, project, syncEnabledDefault)
 
-        def usesKotlinPlugin = project.plugins.findPlugin('kotlin-android') != null
         def usesAptPlugin = project.plugins.findPlugin('com.neenbedankt.android-apt') != null
+        def isKotlinProject = project.plugins.findPlugin('kotlin-android') != null
+        def hasAnnotationProcessorConfiguration = project.getConfigurations().findByName('annotationProcessor') != null
+        // TODO add a parameter in 'realm' block if this should be specified by users
+        def preferAptOnKotlinProject = false
 
-        def isKaptProject = usesKotlinPlugin && !usesAptPlugin
-
-        if (!isKaptProject) {
+        if (shouldApplyAndroidAptPlugin(usesAptPlugin, isKotlinProject,
+                                        hasAnnotationProcessorConfiguration, preferAptOnKotlinProject)) {
             project.plugins.apply(AndroidAptPlugin)
+            usesAptPlugin = true
         }
 
         project.android.registerTransform(new RealmTransformer(project))
 
         project.repositories.add(project.getRepositories().jcenter())
         project.dependencies.add("compile", "io.realm:realm-annotations:${Version.VERSION}")
-        if (isKaptProject) {
-            project.dependencies.add("kapt", "io.realm:realm-annotations:${Version.VERSION}")
-            project.dependencies.add("kapt", "io.realm:realm-annotations-processor:${Version.VERSION}")
-        } else {
+        if (usesAptPlugin) {
             project.dependencies.add("apt", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("apt", "io.realm:realm-annotations-processor:${Version.VERSION}")
             project.dependencies.add("androidTestApt", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("androidTestApt", "io.realm:realm-annotations-processor:${Version.VERSION}")
+        } else if (isKotlinProject && !preferAptOnKotlinProject) {
+            project.dependencies.add("kapt", "io.realm:realm-annotations:${Version.VERSION}")
+            project.dependencies.add("kapt", "io.realm:realm-annotations-processor:${Version.VERSION}")
+        } else {
+            assert hasAnnotationProcessorConfiguration
+            project.dependencies.add("annotationProcessor", "io.realm:realm-annotations:${Version.VERSION}")
+            project.dependencies.add("annotationProcessor", "io.realm:realm-annotations-processor:${Version.VERSION}")
+            project.dependencies.add("androidTestAnnotationProcessor", "io.realm:realm-annotations:${Version.VERSION}")
+            project.dependencies.add("androidTestAnnotationProcessor", "io.realm:realm-annotations-processor:${Version.VERSION}")
         }
     }
 
@@ -76,4 +83,19 @@ class Realm implements Plugin<Project> {
             return false
         }
     }
+
+    private static boolean shouldApplyAndroidAptPlugin(boolean usesAptPlugin, boolean isKotlinProject,
+                                                       boolean hasAnnotationProcessorConfiguration,
+                                                       boolean preferAptOnKotlinProject) {
+        if (usesAptPlugin) {
+            // for any projects that uses android-apt plugin already. No need to apply it twice.
+            return false
+        }
+        if (isKotlinProject) {
+            // for any Kotlin projects where user did not apply 'android-apt' plugin manually.
+            return preferAptOnKotlinProject && !hasAnnotationProcessorConfiguration
+        }
+        // for any Java Projects where user did not apply 'android-apt' plugin manually.
+        return !hasAnnotationProcessorConfiguration
+    }
 }
diff --git a/realm/build.gradle b/realm/build.gradle
index 02d42b21b4..d520cb8024 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -6,15 +6,14 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.2.0'
+        classpath 'com.android.tools.build:gradle:2.2.2'
         classpath 'de.undercouch:gradle-download-task:3.1.1'
-        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
         classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
         classpath 'com.github.skhatri:gradle-s3-plugin:1.0.2'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
-        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.5'
-        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
+        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
+        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
         classpath "io.realm:realm-transformer:${file('../version.txt').text.trim()}"
     }
 }
diff --git a/realm/config/findbugs/findbugs-filter.xml b/realm/config/findbugs/findbugs-filter.xml
index e2c1a8b2e1..10553d8870 100644
--- a/realm/config/findbugs/findbugs-filter.xml
+++ b/realm/config/findbugs/findbugs-filter.xml
@@ -37,6 +37,13 @@
         <Field name="APP_ID" />
         <Bug pattern="MS_CANNOT_BE_FINAL" />
     </Match>
+    <Match>
+        <Class name="io.realm.SyncUser" />
+        <Field name="managementRealmConfig" />
+        <Bug pattern="IS2_INCONSISTENT_SYNC" />
+    </Match>
+
+
 
     <!-- Unit tests -->
     <Match>
@@ -58,5 +65,48 @@
         <Method name="completedAsyncRealmObject" />
         <Bug pattern="RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN" />
     </Match>
-
+    <Match>
+        <Class name="io.realm.permissions.PermissionChange" />
+        <Method name="mayManage" />
+        <Bug pattern="NP_BOOLEAN_RETURN_NULL" />
+    </Match>
+    <Match>
+        <Class name="io.realm.permissions.PermissionChange" />
+        <Method name="mayRead" />
+        <Bug pattern="NP_BOOLEAN_RETURN_NULL" />
+    </Match>
+    <Match>
+        <Class name="io.realm.permissions.PermissionChange" />
+        <Method name="mayWrite" />
+        <Bug pattern="NP_BOOLEAN_RETURN_NULL" />
+    </Match>
+    <Match>
+        <Class name="io.realm.PermissionChangeRealmProxy" />
+        <Method name="realmGet$mayManage" />
+        <Bug pattern="NP_BOOLEAN_RETURN_NULL" />
+    </Match>
+    <Match>
+        <Class name="io.realm.PermissionChangeRealmProxy" />
+        <Method name="realmGet$mayRead" />
+        <Bug pattern="NP_BOOLEAN_RETURN_NULL" />
+    </Match>
+    <Match>
+        <Class name="io.realm.PermissionChangeRealmProxy" />
+        <Method name="realmGet$mayWrite" />
+        <Bug pattern="NP_BOOLEAN_RETURN_NULL" />
+    </Match>
+    <Match>
+        <Class name="io.realm.permissions.PermissionChange" />
+        <Method name="getCreatedAt" />
+        <Bug pattern="EI_EXPOSE_REP" />
+    </Match>
+    <Match>
+        <Class name="io.realm.permissions.PermissionChange" />
+        <Method name="getUpdatedAt" />
+        <Bug pattern="EI_EXPOSE_REP" />
+    </Match>
+    <Match>
+        <Class name="io.realm.PermissionChangeRealmProxy" />
+        <Bug pattern="BC_IMPOSSIBLE_CAST" />
+    </Match>
 </FindBugsFilter>
diff --git a/realm/realm-annotations-processor/build.gradle b/realm/realm-annotations-processor/build.gradle
index 6c2c3cd3cd..ac1e0ba50c 100644
--- a/realm/realm-annotations-processor/build.gradle
+++ b/realm/realm-annotations-processor/build.gradle
@@ -40,6 +40,11 @@ sourceSets {
 compileJava.dependsOn generateVersionClass
 compileTestJava.dependsOn ':realm-library:assemble'
 
+task ojoUpload() {
+    dependsOn "artifactoryPublish"
+    group = 'Publishing'
+}
+
 def commonPom = {
     licenses {
         license {
@@ -61,13 +66,13 @@ def commonPom = {
 
 publishing {
     publications {
-        realmPublication(MavenPublication) {
+        basePublication(MavenPublication) {
             groupId 'io.realm'
             artifactId = 'realm-annotations-processor'
             from components.java
             pom.withXml {
                 Node root = asNode()
-                root.appendNode('name', 'realm-gradle-plugin')
+                root.appendNode('name', 'realm-annotations-processor')
                 root.appendNode('description', 'Annotation Processor for Realm. Realm is a mobile database: a replacement for SQLite & ORMs')
                 root.appendNode('url', 'http://realm.io')
                 root.children().last() + commonPom
@@ -96,7 +101,7 @@ bintray {
     dryRun = false
     publish = false
 
-    publications = ['realmPublication']
+    publications = ['basePublication']
     pkg {
         repo = 'maven'
         name = 'realm-annotations-processor'
@@ -119,7 +124,7 @@ artifactory {
             password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
         }
         defaults {
-            publications ('realmPublication')
+            publications ('basePublication')
         }
     }
 }
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java
index 972a0f6314..de43217461 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java
@@ -204,7 +204,7 @@ private boolean checkReferenceTypes() {
     // Report if the default constructor is missing
     private boolean checkDefaultConstructor() {
         if (!hasDefaultConstructor) {
-            Utils.error("A default public constructor with no argument must be declared if a custom constructor is declared.");
+            Utils.error("A default public constructor with no argument must be declared in " + className + " if a custom constructor is declared.");
             return false;
         } else {
             return true;
@@ -322,7 +322,7 @@ public String getSimpleClassName() {
      */
     public boolean isModelClass() {
         String type = classType.toString();
-        if (type.equals("io.realm.dynamic.DynamicRealmObject")) {
+        if (type.equals("io.realm.DynamicRealmObject")) {
             return false;
         }
         return (!type.endsWith(".RealmObject") && !type.endsWith("RealmProxy"));
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ModuleMetaData.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ModuleMetaData.java
index be87d9004c..1ace559402 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ModuleMetaData.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ModuleMetaData.java
@@ -101,11 +101,13 @@ public boolean generate(ProcessingEnvironment processingEnv) {
             return false;
         }
 
-        // Add default realm module if needed.
-        if (libraryModules.size() == 0) {
+        // Create default Realm module if needed.
+        // Note: Kotlin will trigger the annotation processor even if no Realm annotations are used.
+        // The DefaultRealmModule should not be created in this case either.
+        if (libraryModules.size() == 0 && availableClasses.size() > 0) {
             shouldCreateDefaultModule = true;
-            String defautModuleName = Constants.REALM_PACKAGE_NAME + "." + Constants.DEFAULT_MODULE_CLASS_NAME;
-            modules.put(defautModuleName, availableClasses);
+            String defaultModuleName = Constants.REALM_PACKAGE_NAME + "." + Constants.DEFAULT_MODULE_CLASS_NAME;
+            modules.put(defaultModuleName, availableClasses);
         }
 
         return true;
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index b092637530..f87f679bb8 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -659,7 +659,7 @@ private void emitValidateTableMethod(JavaWriter writer) throws IOException {
 
         // create type dictionary for lookup
         writer.emitStatement("Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>()");
-        writer.beginControlFlow("for (long i = 0; i < " + metadata.getFields().size() + "; i++)");
+        writer.beginControlFlow("for (long i = 0; i < columnCount; i++)");
         writer.emitStatement("columnTypes.put(table.getColumnName(i), table.getColumnType(i))");
         writer.endControlFlow();
         writer.emitEmptyLine();
@@ -1076,7 +1076,6 @@ private void emitInsertMethod(JavaWriter writer) throws IOException {
                              .endControlFlow()
                              .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
                             .endControlFlow()
-                            .emitStatement("LinkView.nativeClose(%sNativeLinkViewPtr)", fieldName)
                         .endControlFlow()
                         .emitEmptyLine();
 
@@ -1154,7 +1153,6 @@ private void emitInsertListMethod(JavaWriter writer) throws IOException {
                              .endControlFlow()
                         .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeClose(%sNativeLinkViewPtr)", fieldName)
                         .endControlFlow()
                         .emitEmptyLine();
 
@@ -1233,7 +1231,6 @@ private void emitInsertOrUpdateMethod(JavaWriter writer) throws IOException {
                                 .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
                             .endControlFlow()
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeClose(%sNativeLinkViewPtr)", fieldName)
                         .emitEmptyLine();
 
             } else {
@@ -1314,7 +1311,6 @@ private void emitInsertOrUpdateListMethod(JavaWriter writer) throws IOException
                             .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
                             .endControlFlow()
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeClose(%sNativeLinkViewPtr)", fieldName)
                         .emitEmptyLine();
 
             } else {
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
index ee9e2beab9..e438b10348 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
@@ -69,7 +69,7 @@ public void generate() throws IOException {
                 "java.util.HashSet",
                 "java.util.List",
                 "java.util.Map",
-                "java.util.IdentityHashMap",
+                "java.util.HashMap",
                 "java.util.Set",
                 "java.util.Iterator",
                 "java.util.Collection",
@@ -330,7 +330,7 @@ private void emitInsertOrUpdateListToRealmMethod(JavaWriter writer) throws IOExc
 
         writer.emitStatement("Iterator<? extends RealmModel> iterator = objects.iterator()");
         writer.emitStatement("RealmModel object = null");
-        writer.emitStatement("Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>(objects.size())");
+        writer.emitStatement("Map<RealmModel, Long> cache = new HashMap<RealmModel, Long>(objects.size())");
 
         writer.beginControlFlow("if (iterator.hasNext())")
                 .emitSingleLineComment(" access the first element to figure out the clazz for the routing below")
@@ -371,7 +371,7 @@ private void emitInsertListToRealmMethod(JavaWriter writer) throws IOException {
 
         writer.emitStatement("Iterator<? extends RealmModel> iterator = objects.iterator()");
         writer.emitStatement("RealmModel object = null");
-        writer.emitStatement("Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>(objects.size())");
+        writer.emitStatement("Map<RealmModel, Long> cache = new HashMap<RealmModel, Long>(objects.size())");
 
         writer.beginControlFlow("if (iterator.hasNext())")
                 .emitSingleLineComment(" access the first element to figure out the clazz for the routing below")
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index 3ceaa5677f..d67ccc944c 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -375,7 +375,7 @@ private void injectObjectContext() {
             }
             final Row row = proxyState.getRow$realm();
             if (value == null) {
-                // Table#nullifyLink() does not support default value. Just use Row.
+                // Table#nullifyLink() does not support default value. Just using Row.
                 row.nullifyLink(columnInfo.columnObjectIndex);
                 return;
             }
@@ -527,7 +527,7 @@ public static AllTypesColumnInfo validateTable(SharedRealm sharedRealm, boolean
                 }
             }
             Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
-            for (long i = 0; i < 9; i++) {
+            for (long i = 0; i < columnCount; i++) {
                 columnTypes.put(table.getColumnName(i), table.getColumnType(i));
             }
 
@@ -993,7 +993,6 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
                 }
                 LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
             }
-            LinkView.nativeClose(columnRealmListNativeLinkViewPtr);
         }
 
         return rowIndex;
@@ -1057,7 +1056,6 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                         }
                         LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
                     }
-                    LinkView.nativeClose(columnRealmListNativeLinkViewPtr);
                 }
 
             }
@@ -1123,7 +1121,6 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
                 LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
             }
         }
-        LinkView.nativeClose(columnRealmListNativeLinkViewPtr);
 
         return rowIndex;
     }
@@ -1192,7 +1189,6 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                         LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
                     }
                 }
-                LinkView.nativeClose(columnRealmListNativeLinkViewPtr);
 
             }
         }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index 54abdab25d..7200c4e70e 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -260,7 +260,7 @@ public static BooleansColumnInfo validateTable(SharedRealm sharedRealm, boolean
                 }
             }
             Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
-            for (long i = 0; i < 4; i++) {
+            for (long i = 0; i < columnCount; i++) {
                 columnTypes.put(table.getColumnName(i), table.getColumnType(i));
             }
 
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 272de1cf78..608868bb72 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -980,7 +980,7 @@ private void injectObjectContext() {
             }
             final Row row = proxyState.getRow$realm();
             if (value == null) {
-                // Table#nullifyLink() does not support default value. Just use Row.
+                // Table#nullifyLink() does not support default value. Just using Row.
                 row.nullifyLink(columnInfo.fieldObjectNullIndex);
                 return;
             }
@@ -1088,7 +1088,7 @@ public static NullTypesColumnInfo validateTable(SharedRealm sharedRealm, boolean
                 }
             }
             Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
-            for (long i = 0; i < 21; i++) {
+            for (long i = 0; i < columnCount; i++) {
                 columnTypes.put(table.getColumnName(i), table.getColumnType(i));
             }
 
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
index 51049b4d90..e72e461844 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
@@ -12,8 +12,8 @@
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
-import java.util.IdentityHashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -138,7 +138,7 @@ public void insert(Realm realm, RealmModel object, Map<RealmModel, Long> cache)
     public void insert(Realm realm, Collection<? extends RealmModel> objects) {
         Iterator<? extends RealmModel> iterator = objects.iterator();
         RealmModel object = null;
-        Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>(objects.size());
+        Map<RealmModel, Long> cache = new HashMap<RealmModel, Long>(objects.size());
         if (iterator.hasNext()) {
             //  access the first element to figure out the clazz for the routing below
             object = iterator.next();
@@ -178,7 +178,7 @@ public void insertOrUpdate(Realm realm, RealmModel obj, Map<RealmModel, Long> ca
     public void insertOrUpdate(Realm realm, Collection<? extends RealmModel> objects) {
         Iterator<? extends RealmModel> iterator = objects.iterator();
         RealmModel object = null;
-        Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>(objects.size());
+        Map<RealmModel, Long> cache = new HashMap<RealmModel, Long>(objects.size());
         if (iterator.hasNext()) {
             //  access the first element to figure out the clazz for the routing below
             object = iterator.next();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index 7190607f14..3dc59b6feb 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -194,7 +194,7 @@ public static SimpleColumnInfo validateTable(SharedRealm sharedRealm, boolean al
                 }
             }
             Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
-            for (long i = 0; i < 2; i++) {
+            for (long i = 0; i < columnCount; i++) {
                 columnTypes.put(table.getColumnName(i), table.getColumnType(i));
             }
 
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index ca07f306a0..a0810cb77c 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -1,7 +1,6 @@
 import java.security.MessageDigest
 
 apply plugin: 'com.android.library'
-apply plugin: 'com.neenbedankt.android-apt'
 apply plugin: 'com.github.dcendents.android-maven'
 apply plugin: 'maven-publish'
 apply plugin: 'com.jfrog.artifactory'
@@ -40,6 +39,7 @@ android {
     defaultConfig {
         minSdkVersion 9
         targetSdkVersion 24
+        versionName version
         project.archivesBaseName = "realm-android-library"
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
         externalNativeBuild {
@@ -124,6 +124,7 @@ repositories {
 }
 
 dependencies {
+    objectServerAnnotationProcessor project(':realm-annotations-processor')
     provided 'io.reactivex:rxjava:1.1.0'
     compile "io.realm:realm-annotations:${version}"
     compile 'com.getkeepsafe.relinker:relinker:1.2.2'
@@ -134,9 +135,10 @@ dependencies {
     androidTestCompile 'com.android.support.test:rules:0.5'
     androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
     androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
+    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
     androidTestCompile 'com.opencsv:opencsv:3.4'
     androidTestCompile 'dk.ilios:spanner:0.6.0'
-    androidTestApt project(':realm-annotations-processor')
+    androidTestAnnotationProcessor project(':realm-annotations-processor')
 }
 
 task sourcesJar(type: Jar) {
@@ -364,10 +366,9 @@ artifactory {
             repoKey = 'oss-snapshot-local'
             username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
             password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
-            maven = true
         }
         defaults {
-            publishConfigs('basePublication', 'objectServerPublication')
+            publications('basePublication', 'objectServerPublication')
             publishPom = true
             publishIvy = false
         }
diff --git a/realm/realm-library/proguard-rules-common.pro b/realm/realm-library/proguard-rules-common.pro
index e4bb7abb4f..fb972bb245 100644
--- a/realm/realm-library/proguard-rules-common.pro
+++ b/realm/realm-library/proguard-rules-common.pro
@@ -2,17 +2,17 @@
 -keep @io.realm.annotations.RealmModule class *
 
 -keep class io.realm.internal.Keep
--keep,includedescriptorclasses @io.realm.internal.Keep class * { *; }
+-keep @io.realm.internal.Keep class * { *; }
 
 -keep class io.realm.internal.KeepMember
--keep,includedescriptorclasses @io.realm.internal.KeepMember class * { @io.realm.internal.KeepMember *; }
+-keep @io.realm.internal.KeepMember class * { @io.realm.internal.KeepMember *; }
 
 -dontwarn javax.**
 -dontwarn io.realm.**
 -keep class io.realm.RealmCollection
 -keep class io.realm.OrderedRealmCollection
--keepclasseswithmembernames,includedescriptorclasses class io.realm.** {
+-keepclasseswithmembernames class io.realm.** {
     native <methods>;
 }
 
--dontnote rx.Observable
\ No newline at end of file
+-dontnote rx.Observable
diff --git a/realm/realm-library/src/androidTest/AndroidManifest.xml b/realm/realm-library/src/androidTest/AndroidManifest.xml
index a44988ce92..c7741a695f 100644
--- a/realm/realm-library/src/androidTest/AndroidManifest.xml
+++ b/realm/realm-library/src/androidTest/AndroidManifest.xml
@@ -10,7 +10,7 @@
 
     <uses-sdk tools:overrideLibrary="dk.ilios.spanner"/>
     <uses-sdk
-        android:minSdkVersion="16"
+        android:minSdkVersion="9"
         android:targetSdkVersion="22"/>
 
     <application>
diff --git a/realm/realm-library/src/androidTest/java/io/realm/BulkInsertTests.java b/realm/realm-library/src/androidTest/java/io/realm/BulkInsertTests.java
index 4ae12cc5c7..ee6946c1f9 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/BulkInsertTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/BulkInsertTests.java
@@ -43,6 +43,7 @@
 import io.realm.entities.HumanModule;
 import io.realm.entities.NoPrimaryKeyWithPrimaryKeyObjectRelation;
 import io.realm.entities.NullTypes;
+import io.realm.entities.Owner;
 import io.realm.entities.PrimaryKeyAsBoxedShort;
 import io.realm.entities.PrimaryKeyAsLong;
 import io.realm.entities.PrimaryKeyAsString;
@@ -292,6 +293,46 @@ public void insertOrUpdate_cyclicType() {
         assertEquals(2, realm.where(CyclicTypePrimaryKey.class).count());
     }
 
+    @Test
+    public void insertOrUpdate_cyclicDependenciesFromOtherRealm() {
+        RealmConfiguration config1 = configFactory.createConfiguration("realm1");
+        RealmConfiguration config2 = configFactory.createConfiguration("realm2");
+
+        Realm realm1 = Realm.getInstance(config1);
+        Realm realm2 = Realm.getInstance(config2);
+
+        realm1.beginTransaction();
+        Owner owner = realm1.createObject(Owner.class);
+        owner.setName("Kiba");
+        Dog dog = realm1.createObject(Dog.class);
+        dog.setName("Akamaru");
+        owner.getDogs().add(dog);
+        dog.setOwner(owner);
+        realm1.commitTransaction();
+
+        //Copy object with relations from realm1 to realm2
+        realm2.beginTransaction();
+        realm2.insertOrUpdate(owner);
+        realm2.commitTransaction();
+
+        assertEquals(1, realm1.where(Owner.class).count());
+        assertEquals(1, realm1.where(Owner.class).findFirst().getDogs().size());
+        assertEquals(1, realm1.where(Dog.class).count());
+
+        assertEquals(realm1.where(Owner.class).count(), realm2.where(Owner.class).count());
+        assertEquals(realm1.where(Dog.class).count(), realm2.where(Dog.class).count());
+
+        assertEquals(1, realm2.where(Owner.class).findFirst().getDogs().size());
+
+        assertEquals(realm1.where(Owner.class).findFirst().getName(), realm2.where(Owner.class).findFirst().getName());
+
+        assertEquals(realm1.where(Owner.class).findFirst().getDogs().first().getName()
+                , realm2.where(Owner.class).findFirst().getDogs().first().getName());
+
+        realm1.close();
+        realm2.close();
+    }
+
     @Test
     public void insert_nullPrimaryKey() {
         PrimaryKeyAsString primaryKeyAsString = new PrimaryKeyAsString();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/GCTests.java b/realm/realm-library/src/androidTest/java/io/realm/GCTests.java
new file mode 100644
index 0000000000..106733e813
--- /dev/null
+++ b/realm/realm-library/src/androidTest/java/io/realm/GCTests.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm;
+
+
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import io.realm.entities.AllTypes;
+import io.realm.entities.Dog;
+import io.realm.rule.TestRealmConfigurationFactory;
+
+import static junit.framework.TestCase.assertNotNull;
+
+// This test is for the fact we don't have locks for native objects creation that when finalizer/phantom thread free the
+// native object, the same Realm could have some native objects creation at the same time.
+// If the native object's destructor is not thread safe, there is a big chance that those tests crash with a seg-fault.
+// test_destructor_thread_safety.cpp in core tests the similar things.
+@RunWith(AndroidJUnit4.class)
+public class GCTests {
+    @Rule
+    public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
+
+    private RealmConfiguration realmConfig;
+
+    @Before
+    public void setUp() {
+        realmConfig = configFactory.createConfiguration();
+        Realm realm = Realm.getInstance(realmConfig);
+        realm.beginTransaction();
+        realm.createObject(AllTypes.class).getColumnRealmList().add(realm.createObject(Dog.class));
+        realm.commitTransaction();
+        realm.close();
+
+    }
+
+    @After
+    public void tearDown() {
+    }
+
+    @Test
+    public void createRealmResults() {
+        for (int i = 0; i < 100; i++) {
+            Realm realm = Realm.getInstance(realmConfig);
+            for (int j = 0; j < 1000; j++) {
+                realm.where(AllTypes.class).findAll();
+            }
+            realm.close();
+        }
+    }
+
+    @Test
+    public void createRealmResultsFromRealmResults() {
+        for (int i = 0; i < 100; i++) {
+            Realm realm = Realm.getInstance(realmConfig);
+            for (int j = 0; j < 1000; j++) {
+                realm.where(AllTypes.class).findAll().where().findAll();
+            }
+            realm.close();
+        }
+    }
+
+    @Test
+    public void createRealmResultsFromRealmList() {
+        for (int i = 0; i < 100; i++) {
+            Realm realm = Realm.getInstance(realmConfig);
+            for (int j = 0; j < 1000; j++) {
+                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
+                assertNotNull(allTypes);
+                allTypes.getColumnRealmList().where().findAll();
+            }
+            realm.close();
+        }
+    }
+
+    @Test
+    public void createRealmObject() {
+        for (int i = 0; i < 100; i++) {
+            Realm realm = Realm.getInstance(realmConfig);
+            for (int j = 0; j < 1000; j++) {
+                realm.where(AllTypes.class).findFirst();
+            }
+            realm.close();
+        }
+    }
+
+    @Test
+    public void createRealmObjectFromRealmResults() {
+        for (int i = 0; i < 100; i++) {
+            Realm realm = Realm.getInstance(realmConfig);
+            for (int j = 0; j < 1000; j++) {
+                assertNotNull(realm.where(AllTypes.class).findAll().first());
+            }
+            realm.close();
+        }
+    }
+
+    @Test
+    public void createRealmObjectsFromRealmList() {
+        for (int i = 0; i < 100; i++) {
+            Realm realm = Realm.getInstance(realmConfig);
+            for (int j = 0; j < 1000; j++) {
+                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
+                assertNotNull(allTypes);
+                assertNotNull(allTypes.getColumnRealmList().first());
+            }
+            realm.close();
+        }
+    }
+}
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonAbsentPrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonAbsentPrimaryKeyTests.java
index c985be7e62..58fa4950b3 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonAbsentPrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonAbsentPrimaryKeyTests.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import android.os.Build;
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -37,6 +39,9 @@
 import io.realm.entities.PrimaryKeyAsString;
 import io.realm.rule.TestRealmConfigurationFactory;
 
+import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;
+import static org.junit.Assume.assumeThat;
+
 @RunWith(Parameterized.class)
 public class RealmJsonAbsentPrimaryKeyTests {
     @Rule
@@ -122,6 +127,8 @@ public void createOrUpdateAllFromJson_primaryKey_isAbsent_fromJsonObject() throw
     // Testing absent primary key value for createObjectFromJson() stream version
     @Test
     public void createObjectFromJson_primaryKey_isAbsent_fromJsonStream() throws JSONException, IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
         thrown.expect(IllegalArgumentException.class);
         realm.createObjectFromJson(clazz, TestHelper.stringToStream(jsonString));
@@ -140,6 +147,8 @@ public void createOrUpdateObjectFromJson_primaryKey_isAbsent_fromJsonStream() th
     // Testing absent primary key value for createAllFromJson() stream version
     @Test
     public void createAllFromJson_primaryKey_isAbsent_fromJsonStream() throws JSONException, IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         JSONArray jsonArray = new JSONArray();
         jsonArray.put(new JSONObject(jsonString));
         realm.beginTransaction();
@@ -151,6 +160,8 @@ public void createAllFromJson_primaryKey_isAbsent_fromJsonStream() throws JSONEx
     // Testing absent primary key value for createOrUpdateAllFromJson() stream version
     @Test
     public void createOrUpdateAllFromJson_primaryKey_isAbsent_fromJsonStream() throws JSONException, IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         JSONArray jsonArray = new JSONArray();
         jsonArray.put(new JSONObject(jsonString));
         realm.beginTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
index 2f1219acd6..01733ddd9e 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
@@ -17,6 +17,7 @@
 package io.realm;
 
 import android.content.Context;
+import android.os.Build;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.text.TextUtils;
@@ -55,11 +56,13 @@
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static io.realm.internal.test.ExtraTests.assertArrayEquals;
+import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.junit.Assume.assumeThat;
 
 @RunWith(AndroidJUnit4.class)
 public class RealmJsonTests {
@@ -693,12 +696,16 @@ public void createAllFromJson_stringNullClass() {
 
     @Test
     public void createAllFromJson_streamNull() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.createAllFromJson(AllTypes.class, (InputStream) null);
         assertEquals(0, realm.where(AllTypes.class).count());
     }
 
     @Test
     public void createObjectFromJson_streamAllSimpleTypes() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "all_simple_types.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -717,6 +724,8 @@ public void createObjectFromJson_streamAllSimpleTypes() throws IOException {
 
     @Test
     public void createObjectFromJson_streamDateAsLong() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "date_as_long.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -730,6 +739,8 @@ public void createObjectFromJson_streamDateAsLong() throws IOException {
 
     @Test
     public void createObjectFromJson_streamDateAsString() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "date_as_string.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -743,6 +754,8 @@ public void createObjectFromJson_streamDateAsString() throws IOException {
 
     @Test
     public void createObjectFromJson_streamDateAsISO8601String() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "date_as_iso8601_string.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -761,6 +774,8 @@ public void createObjectFromJson_streamDateAsISO8601String() throws IOException
 
     @Test
     public void createObjectFromJson_streamChildObject() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "single_child_object.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -773,6 +788,8 @@ public void createObjectFromJson_streamChildObject() throws IOException {
 
     @Test
     public void createObjectFromJson_streamEmptyChildObjectList() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "realmlist_empty.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -785,6 +802,8 @@ public void createObjectFromJson_streamEmptyChildObjectList() throws IOException
 
     @Test
     public void createObjectFromJson_streamChildObjectList() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "realmlist.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -797,6 +816,8 @@ public void createObjectFromJson_streamChildObjectList() throws IOException {
 
     @Test
     public void createAllFromJson_streamArray() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "array.json");
         realm.beginTransaction();
         realm.createAllFromJson(Dog.class, in);
@@ -810,6 +831,8 @@ public void createAllFromJson_streamArray() throws IOException {
     // Test if Json object doesn't have the field, then the field should have default value. Stream version.
     @Test
     public void createObjectFromJson_streamNoValues() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "other_json_object.json");
         realm.beginTransaction();
         realm.createObjectFromJson(AllTypes.class, in);
@@ -831,6 +854,8 @@ public void createObjectFromJson_streamNoValues() throws IOException {
 
     @Test
     public void createObjectFromJson_streamNullClass() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "array.json");
         realm.beginTransaction();
         assertNull(realm.createObjectFromJson(null, in));
@@ -840,6 +865,8 @@ public void createObjectFromJson_streamNullClass() throws IOException {
 
     @Test
     public void createObjectFromJson_streamNullJson() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "all_types_invalid.json");
         realm.beginTransaction();
         try {
@@ -854,6 +881,8 @@ public void createObjectFromJson_streamNullJson() throws IOException {
 
     @Test
     public void createObjectFromJson_streamNullInputStream() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
         assertNull(realm.createObjectFromJson(AnnotationTypes.class, (InputStream) null));
         realm.commitTransaction();
@@ -865,6 +894,8 @@ public void createObjectFromJson_streamNullInputStream() throws IOException {
      */
     @Test
     public void createOrUpdateObjectFromJson_streamNullValues() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         AllTypesPrimaryKey obj = new AllTypesPrimaryKey();
         Date date = new Date(0);
         obj.setColumnLong(1); // ID
@@ -900,6 +931,8 @@ public void createOrUpdateObjectFromJson_streamNullValues() throws IOException {
 
     @Test
     public void createOrUpdateObjectFromJson_streamNullClass() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream in = TestHelper.loadJsonFromAssets(context, "all_types_primary_key_field_only.json");
         realm.beginTransaction();
         assertNull(realm.createOrUpdateObjectFromJson(null, in));
@@ -909,6 +942,8 @@ public void createOrUpdateObjectFromJson_streamNullClass() throws IOException {
 
     @Test
     public void createOrUpdateObjectFromJson_streamInvalidJson() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         AllTypesPrimaryKey obj = new AllTypesPrimaryKey();
         obj.setColumnLong(1);
         realm.beginTransaction();
@@ -929,6 +964,8 @@ public void createOrUpdateObjectFromJson_streamInvalidJson() throws IOException
 
     @Test
     public void createOrUpdateObjectFromJson_streamNoPrimaryKeyThrows() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         try {
             realm.createOrUpdateObjectFromJson(AllTypes.class, new TestHelper.StubInputStream());
             fail();
@@ -938,6 +975,8 @@ public void createOrUpdateObjectFromJson_streamNoPrimaryKeyThrows() throws IOExc
 
     @Test
     public void createOrUpdateAllFromJson_streamInvalidJSonCurlyBracketThrows() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         try {
             realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, TestHelper.stringToStream("{"));
             fail();
@@ -947,6 +986,8 @@ public void createOrUpdateAllFromJson_streamInvalidJSonCurlyBracketThrows() thro
 
     @Test
     public void createOrUpdateObjectFromJson_streamIgnoreUnsetProperties() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
         realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, TestHelper.loadJsonFromAssets(context, "list_alltypes_primarykey.json"));
         realm.commitTransaction();
@@ -961,6 +1002,8 @@ public void createOrUpdateObjectFromJson_streamIgnoreUnsetProperties() throws IO
 
     @Test
     public void createOrUpdateObjectFromJson_inputStream() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
 
         AllTypesPrimaryKey obj = new AllTypesPrimaryKey();
@@ -982,6 +1025,8 @@ public void createOrUpdateObjectFromJson_inputStream() throws IOException {
      */
     @Test
     public void createOrUpdateObjectFromJson_objectWithPrimaryKeySetValueDirectlyFromStream() throws JSONException, IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream stream = TestHelper.stringToStream("{\"id\": 1, \"name\": \"bar\"}");
         realm.beginTransaction();
         realm.createObject(OwnerPrimaryKey.class, 0); // id = 0
@@ -1215,6 +1260,8 @@ public void createOrUpdateAllFromJson_jsonNullJson() {
 
     @Test
     public void createOrUpdateAllFromJson_streamNoPrimaryKeyThrows() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         try {
             realm.createOrUpdateAllFromJson(AllTypes.class, new TestHelper.StubInputStream());
             fail();
@@ -1224,6 +1271,8 @@ public void createOrUpdateAllFromJson_streamNoPrimaryKeyThrows() throws IOExcept
 
     @Test
     public void createOrUpdateAllFromJson_streamInvalidJSonBracketThrows() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         try {
             realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, TestHelper.stringToStream("["));
             fail();
@@ -1289,6 +1338,8 @@ public void createOrUpdateAllFromJson_jsonArray() throws JSONException, IOExcept
 
     @Test
     public void createOrUpdateAllFromJson_inputStream() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
         realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, TestHelper.loadJsonFromAssets(context, "list_alltypes_primarykey.json"));
         realm.commitTransaction();
@@ -1328,6 +1379,8 @@ public void createAllFromJson_nullTypesJsonWithNulls() throws IOException, JSONE
     // Test creating objects form JSON stream, all nullable fields with null values or non-null values
     @Test
     public void createAllFromJson_nullTypesStreamJSONWithNulls() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
         realm.createAllFromJson(NullTypes.class, TestHelper.loadJsonFromAssets(context, "nulltypes.json"));
         realm.commitTransaction();
@@ -1485,6 +1538,8 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
      */
     @Test
     public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOException, JSONException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         String json = TestHelper.streamToString(TestHelper.loadJsonFromAssets(context, "nulltypes_invalid.json"));
         JSONArray array = new JSONArray(json);
 
@@ -1612,6 +1667,8 @@ public void createObjectFromJson_objectNullClass() throws JSONException {
      */
     @Test
     public void createObjectFromJson_objectWithPrimaryKeySetValueDirectlyFromStream() throws JSONException, IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         InputStream stream = TestHelper.stringToStream("{\"id\": 1, \"name\": \"bar\"}");
         realm.beginTransaction();
         realm.createObject(OwnerPrimaryKey.class, 0); // id = 0
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java
index 4c1a04a037..95f063b2f2 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java
@@ -17,6 +17,7 @@
 package io.realm;
 
 import android.content.Context;
+import android.os.Build;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -44,9 +45,11 @@
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static io.realm.internal.test.ExtraTests.assertArrayEquals;
+import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assume.assumeThat;
 
 // tests API methods when using a model class implementing RealmModel instead
 // of extending RealmObject.
@@ -160,6 +163,8 @@ public void execute(Realm realm) {
 
     @Test
     public void createOrUpdateAllFromJson() throws IOException {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         realm.beginTransaction();
         realm.createOrUpdateAllFromJson(AllTypesRealmModel.class, TestHelper.loadJsonFromAssets(context, "list_alltypes_primarykey.json"));
         realm.commitTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index 5c570e7df7..5e65a027c3 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -17,6 +17,7 @@
 package io.realm;
 
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
@@ -1982,9 +1983,7 @@ public void run() {
         assertTrue(Realm.deleteRealm(configuration));
 
         // Directory should be empty now
-        // FIXME: .note file is the named pipe for OS android notification. Just don't delete it until we figure out
-        // one single daemon thread for notification.
-        assertEquals(/*0*/1, tempDir.listFiles().length);
+        assertEquals(0, tempDir.listFiles().length);
     }
 
     // Test that all methods that require a transaction (ie. any function that mutates Realm data)
@@ -2017,79 +2016,26 @@ public void callMutableMethodOutsideTransaction() throws JSONException, IOExcept
 
         try { realm.createObjectFromJson(AllTypesPrimaryKey.class, jsonObj);                fail(); } catch (IllegalStateException expected) {}
         try { realm.createObjectFromJson(AllTypesPrimaryKey.class, jsonObjStr);             fail(); } catch (IllegalStateException expected) {}
-        try { realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, jsonObjStream);       fail(); } catch (IllegalStateException expected) {}
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            try { realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, jsonObjStream);   fail(); } catch (IllegalStateException expected) {}
+        }
         try { realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, jsonObj);        fail(); } catch (IllegalStateException expected) {}
         try { realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, jsonObjStr);     fail(); } catch (IllegalStateException expected) {}
-        try { realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, jsonObjStream2); fail(); } catch (IllegalStateException expected) {}
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            try { realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, jsonObjStream2); fail(); } catch (IllegalStateException expected) {}
+        }
 
         try { realm.createAllFromJson(AllTypesPrimaryKey.class, jsonArr);                   fail(); } catch (IllegalStateException expected) {}
         try { realm.createAllFromJson(AllTypesPrimaryKey.class, jsonArrStr);                fail(); } catch (IllegalStateException expected) {}
-        try { realm.createAllFromJson(NoPrimaryKeyNullTypes.class, jsonArrStream);          fail(); } catch (IllegalStateException expected) {}
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            try { realm.createAllFromJson(NoPrimaryKeyNullTypes.class, jsonArrStream);      fail(); } catch (IllegalStateException expected) {}
+        }
         try { realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, jsonArr);           fail(); } catch (IllegalStateException expected) {}
         try { realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, jsonArrStr);        fail(); } catch (IllegalStateException expected) {}
-        try { realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, jsonArrStream2);    fail(); } catch (IllegalStateException expected) {}
-    }
-
-    // TODO: re-introduce this test mocking the ReferenceQueue instead of relying on the GC
-/*    // Check that FinalizerRunnable can free native resources (phantom refs)
-    public void testReferenceCleaning() throws NoSuchFieldException, IllegalAccessException {
-        testRealm.close();
-
-        RealmConfiguration config = new RealmConfiguration.Builder(getContext()).name("myown").build();
-        Realm.deleteRealm(config);
-        testRealm = Realm.getInstance(config);
-
-        // Manipulate field accessibility to facilitate testing
-        Field realmFileReference = BaseRealm.class.getDeclaredField("sharedGroupManager");
-        realmFileReference.setAccessible(true);
-        Field contextField = SharedGroup.class.getDeclaredField("context");
-        contextField.setAccessible(true);
-        Field rowReferencesField = io.realm.internal.Context.class.getDeclaredField("rowReferences");
-        rowReferencesField.setAccessible(true);
-
-        SharedGroupManager realmFile = (SharedGroupManager) realmFileReference.get(testRealm);
-        assertNotNull(realmFile);
-
-        io.realm.internal.Context context = (io.realm.internal.Context) contextField.get(realmFile.getSharedGroup());
-        assertNotNull(context);
-
-        Map<Reference<?>, Integer> rowReferences = (Map<Reference<?>, Integer>) rowReferencesField.get(context);
-        assertNotNull(rowReferences);
-
-        // insert some rows, then give the thread some time to cleanup
-        // we have 8 reference so far let's add more
-        final int numberOfPopulateTest = 1000;
-        final int numberOfObjects = 20;
-        final int totalNumberOfReferences = 8 + numberOfObjects * 2 * numberOfPopulateTest;
-
-        long tic = System.currentTimeMillis();
-        for (int i = 0; i < numberOfPopulateTest; i++) {
-            populateTestRealm(testRealm, numberOfObjects);
-        }
-        long toc = System.currentTimeMillis();
-        Log.d(RealmTest.class.getName(), "Insertion time: " + (toc - tic));
-
-        final int MAX_GC_RETRIES = 5;
-        int numberOfRetries = 0;
-        Log.i("GCing", "Hoping for the best");
-        while (rowReferences.size() > 0 && numberOfRetries < MAX_GC_RETRIES) {
-            SystemClock.sleep(TimeUnit.SECONDS.toMillis(1)); //1s
-            TestHelper.allocGarbage(0);
-            numberOfRetries++;
-            System.gc();
-        }
-        context.cleanNativeReferences();
-
-        // we can't guarantee that all references have been GC'ed but we should detect a decrease
-        boolean isDecreasing = rowReferences.size() < totalNumberOfReferences;
-        if (!isDecreasing) {
-            fail("Native resources are not being closed");
-
-        } else {
-            android.util.Log.d(RealmTest.class.getName(), "References freed : "
-                    + (totalNumberOfReferences - rowReferences.size()) + " out of " + totalNumberOfReferences);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            try { realm.createOrUpdateAllFromJson(AllTypesPrimaryKey.class, jsonArrStream2);fail(); } catch (IllegalStateException expected) {}
         }
-    }*/
+    }
 
     @Test
     public void createObject_cannotCreateDynamicRealmObject() {
@@ -3796,20 +3742,20 @@ public void run() {
     @Test
     public void getLocalInstanceCount() {
         final RealmConfiguration config = configFactory.createConfiguration("localInstanceCount");
-        assertEquals(0, Realm.getGlobalInstanceCount(config));
+        assertEquals(0, Realm.getLocalInstanceCount(config));
 
         // Open thread local Realm
         Realm realm = Realm.getInstance(config);
-        assertEquals(1, Realm.getGlobalInstanceCount(config));
+        assertEquals(1, Realm.getLocalInstanceCount(config));
 
         // Open thread local DynamicRealm
         DynamicRealm dynRealm = DynamicRealm.getInstance(config);
-        assertEquals(2, Realm.getGlobalInstanceCount(config));
+        assertEquals(2, Realm.getLocalInstanceCount(config));
 
         dynRealm.close();
-        assertEquals(1, Realm.getGlobalInstanceCount(config));
+        assertEquals(1, Realm.getLocalInstanceCount(config));
         realm.close();
-        assertEquals(0, Realm.getGlobalInstanceCount(config));
+        assertEquals(0, Realm.getLocalInstanceCount(config));
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
index b3784cbe05..5ce7dd5cb8 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
@@ -16,6 +16,7 @@
 package io.realm;
 
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.support.test.InstrumentationRegistry;
@@ -48,12 +49,14 @@
 import io.realm.rule.TestRealmConfigurationFactory;
 import io.realm.util.RealmBackgroundTask;
 
+import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.junit.Assume.assumeThat;
 
 @RunWith(AndroidJUnit4.class)
 public class TypeBasedNotificationsTests {
@@ -250,6 +253,8 @@ public void onChange(PrimaryKeyAsLong object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_createObjectFromJson() {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         final Realm realm = looperThread.realm;
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
@@ -356,6 +361,8 @@ public void onChange(AllTypes object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_createOrUpdateObjectFromJson() {
+        assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
+
         final Realm realm = looperThread.realm;
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNICloseTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNICloseTest.java
deleted file mode 100644
index 5cbffdd653..0000000000
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNICloseTest.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright 2015 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.internal;
-
-import android.test.AndroidTestCase;
-
-import io.realm.TestHelper;
-
-public class JNICloseTest extends AndroidTestCase {
-
-    /**
-     * Make sure, that it's possible to use the query on a closed table
-     */
-    public void testQueryAccessibleAfterTableClose() throws Throwable{
-        Table table = TestHelper.getTableWithAllColumnTypes();
-        table.addEmptyRows(10);
-        for (long i=0; i<table.size(); i++)
-            table.setLong(5, i, i, false);
-        TableQuery query = table.where();
-        // Closes the table, it _should_ be allowed to access the query thereafter
-        Table.nativeClose(table.nativePtr);
-        Table table2 = TestHelper.getTableWithAllColumnTypes();
-        table2.addEmptyRows(10);
-        for (int i=0; i<table2.size(); i++)
-            table2.setLong(5, i, 117 + i, false);
-
-        TableView tv = query.findAll();
-        assertEquals(10, tv.size());
-
-        // TODO: add a lot of methods
-    }
-
-    public void testAccessingViewMethodsAfterTableClose() {
-        Table table = TestHelper.getTableWithAllColumnTypes();
-        table.addEmptyRows(10);
-        TableQuery query = table.where();
-        TableView view = query.findAll();
-        //Closes the table, it should be allowed to access the view thereafter (table is ref-counted)
-        Table.nativeClose(table.nativePtr);
-
-        // Accessing methods should be ok.
-        view.size();
-        view.getBinaryByteArray(0, 0);
-        view.getBoolean(1, 0);
-        view.getDate(2, 0);
-        view.getDouble(3, 0);
-        view.getFloat(4, 0);
-        view.getLong(5, 0);
-
-        // TODO - add all methods from view
-    }
-}
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableViewTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableViewTest.java
index e1088af833..47ed416aaa 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableViewTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableViewTest.java
@@ -16,6 +16,7 @@
 
 package io.realm.internal;
 
+import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
 import org.junit.Before;
@@ -28,6 +29,7 @@
 import java.util.List;
 import java.util.Locale;
 
+import io.realm.Realm;
 import io.realm.RealmFieldType;
 import io.realm.rule.TestRealmConfigurationFactory;
 
@@ -35,6 +37,10 @@
 
 @RunWith(AndroidJUnit4.class)
 public class JNITableViewTest {
+    static {
+        Realm.init(InstrumentationRegistry.getInstrumentation().getTargetContext());
+    }
+
     @Rule
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
 
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
index f4d102aa2e..a95159a505 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
@@ -235,13 +235,13 @@ public void equals() {
     }
 
     @Test
-    public void not_equals_same() {
+    public void equals_same() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
         SyncConfiguration config1 = new SyncConfiguration.Builder(user, url).build();
         SyncConfiguration config2 = new SyncConfiguration.Builder(user, url).build();
 
-        assertFalse(config1.equals(config2));
+        assertTrue(config1.equals(config2));
     }
 
     @Test
@@ -391,4 +391,24 @@ public void defaultRxFactory() {
 
         assertNotNull(config.getRxFactory());
     }
+
+    @Test
+    public void toString_nonEmpty() {
+        SyncUser user = createTestUser();
+        String url = "realm://objectserver.realm.io/default";
+        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+
+        String configStr = config.toString();
+        assertTrue(configStr != null && !configStr.isEmpty());
+    }
+
+    // FIXME: This test can be removed when https://github.com/realm/realm-core/issues/2345 is resolved
+    @Test(expected = UnsupportedOperationException.class)
+    public void compact_NotAllowed() {
+        SyncUser user = createTestUser();
+        String url = "realm://objectserver.realm.io/default";
+        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+
+        Realm.compactRealm(config);
+    }
 }
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java
index 15d366a4da..510bfca5aa 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java
@@ -16,11 +16,8 @@
 
 package io.realm;
 
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -39,7 +36,6 @@
 @RunWith(AndroidJUnit4.class)
 public class SyncManagerTests {
 
-    private Context context;
     private UserStore userStore;
 
     @Rule
@@ -50,41 +46,29 @@
 
     @Before
     public void setUp() {
-        context = InstrumentationRegistry.getContext();
         userStore = new UserStore() {
             @Override
-            public SyncUser put(String key, SyncUser user) {
-                return null;
-            }
+            public void put(SyncUser user) {}
 
             @Override
-            public SyncUser get(String key) {
+            public SyncUser get() {
                 return null;
             }
 
             @Override
-            public SyncUser remove(String key) {
-                return null;
-            }
+            public void remove() {}
 
             @Override
             public Collection<SyncUser> allUsers() {
                 return null;
             }
 
-            @Override
-            public void clear() {
-            }
         };
     }
 
-    @After
-    public void tearDown() {
-    }
-
     @Test
     public void init() {
-        // Realm.init() calls SyncManager.init() wihich will start a thread for the sync client
+        // Realm.init() calls SyncManager.init() which will start a thread for the sync client
         boolean found = false;
         Set<Thread> threads = Thread.getAllStackTraces().keySet();
         for (Thread thread : threads) {
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/UserTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
similarity index 56%
rename from realm/realm-library/src/androidTestObjectServer/java/io/realm/UserTests.java
rename to realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
index 794b41fc30..48b1a8ef6b 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/UserTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
@@ -19,32 +19,41 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
-import org.junit.Before;
+import org.junit.After;
+import org.junit.BeforeClass;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.Collection;
 
-import io.realm.android.SharedPrefsUserStore;
 import io.realm.rule.RunInLooperThread;
 import io.realm.util.SyncTestUtils;
 
 import static io.realm.util.SyncTestUtils.createTestUser;
-import static org.junit.Assert.assertEquals;
+import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 @RunWith(AndroidJUnit4.class)
-public class UserTests {
+public class SyncUserTests {
 
     @Rule
     public final RunInLooperThread looperThread = new RunInLooperThread();
 
-    @Before
-    public void setUp() {
-        Realm.init(InstrumentationRegistry.getTargetContext());
-        SyncManager.getUserStore().clear();
+    @BeforeClass
+    public static void initUserStore() {
+        Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
+        UserStore userStore = new RealmFileUserStore(InstrumentationRegistry.getTargetContext().getFilesDir().getPath());
+        SyncManager.setUserStore(userStore);
+    }
+
+    @After
+    public void tearDown() {
+        RealmFileUserStore.nativeResetForTesting();
     }
 
     @Test
@@ -58,9 +67,8 @@ public void toAndFromJson() {
     @Test
     public void currentUser_returnsNullIfUserExpired() {
         // Add an expired user to the user store
-        UserStore userStore = new SharedPrefsUserStore(InstrumentationRegistry.getContext());
-        SyncManager.setUserStore(userStore);
-        userStore.put(UserStore.CURRENT_USER_KEY, SyncTestUtils.createTestUser(Long.MIN_VALUE));
+        UserStore userStore = SyncManager.getUserStore();
+        userStore.put(SyncTestUtils.createTestUser(Long.MIN_VALUE));
 
         // Invalid users should not be returned when asking the for the current user
         assertNull(SyncUser.currentUser());
@@ -69,14 +77,14 @@ public void currentUser_returnsNullIfUserExpired() {
     // Test that current user is cleared if it is logged out
     @Test
     public void currentUser_clearedOnLogout() {
-        // Add an expired user to the user store
+        // Add 1 valid user to the user store
         SyncUser user = SyncTestUtils.createTestUser(Long.MAX_VALUE);
-        UserStore userStore = new SharedPrefsUserStore(InstrumentationRegistry.getContext());
-        SyncManager.setUserStore(userStore);
-        userStore.put(UserStore.CURRENT_USER_KEY, user);
+        UserStore userStore = SyncManager.getUserStore();
+        userStore.put(user);
 
         SyncUser savedUser = SyncUser.currentUser();
         assertEquals(user, savedUser);
+        assertNotNull(savedUser);
         savedUser.logout();
         assertNull(SyncUser.currentUser());
     }
@@ -92,10 +100,9 @@ public void all_empty() {
     @Test
     public void all_validUsers() {
         // Add 1 expired user and 1 valid user to the user store
-        UserStore userStore = new SharedPrefsUserStore(InstrumentationRegistry.getContext());
-        SyncManager.setUserStore(userStore);
-        userStore.put(UserStore.CURRENT_USER_KEY, SyncTestUtils.createTestUser(Long.MIN_VALUE));
-        userStore.put(UserStore.CURRENT_USER_KEY, SyncTestUtils.createTestUser(Long.MAX_VALUE));
+        UserStore userStore = SyncManager.getUserStore();
+        userStore.put(SyncTestUtils.createTestUser(Long.MIN_VALUE));
+        userStore.put(SyncTestUtils.createTestUser(Long.MAX_VALUE));
 
         Collection<SyncUser> users = SyncUser.all();
         assertEquals(1, users.size());
@@ -113,4 +120,37 @@ public void currentUser_returnsUserAfterLogin() {
         assertEquals(user, User.currentUser());
     }
     */
+
+    @Test
+    public void getManagementRealm() {
+        SyncUser user = SyncTestUtils.createTestUser();
+        Realm managementRealm = user.getManagementRealm();
+        assertNotNull(managementRealm);
+        managementRealm.close();
+    }
+
+    @Test
+    public void getManagementRealm_enforceTLS() throws URISyntaxException {
+        // Non TLS
+        SyncUser user = SyncTestUtils.createTestUser("http://objectserver.realm.io/auth");
+        Realm managementRealm = user.getManagementRealm();
+        SyncConfiguration config = (SyncConfiguration) managementRealm.getConfiguration();
+        assertEquals(new URI("realm://objectserver.realm.io/" + user.getIdentity() + "/__management"), config.getServerUrl());
+        managementRealm.close();
+
+        // TLS
+        user = SyncTestUtils.createTestUser("https://objectserver.realm.io/auth");
+        managementRealm = user.getManagementRealm();
+        config = (SyncConfiguration) managementRealm.getConfiguration();
+        assertEquals(new URI("realms://objectserver.realm.io/" + user.getIdentity() + "/__management"), config.getServerUrl());
+        managementRealm.close();
+    }
+
+    @Test
+    public void toString_returnDescription() {
+        SyncUser user = SyncTestUtils.createTestUser("http://objectserver.realm.io/auth");
+        String str = user.toString();
+        assertTrue(str != null && !str.isEmpty());
+    }
+
 }
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/util/SyncTestUtils.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/util/SyncTestUtils.java
index a882b255a6..bd067ab30b 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/util/SyncTestUtils.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/util/SyncTestUtils.java
@@ -33,12 +33,21 @@
 
     public static String USER_TOKEN = UUID.randomUUID().toString();
     public static String REALM_TOKEN = UUID.randomUUID().toString();
+    public static String DEFAULT_AUTH_URL = "http://objectserver.realm.io/auth";
 
     public static SyncUser createTestUser() {
-        return createTestUser(Long.MAX_VALUE);
+        return createTestUser(DEFAULT_AUTH_URL, Long.MAX_VALUE);
     }
 
     public static SyncUser createTestUser(long expires) {
+        return createTestUser(DEFAULT_AUTH_URL, expires);
+    }
+
+    public static SyncUser createTestUser(String authUrl) {
+        return createTestUser(authUrl, Long.MAX_VALUE);
+    }
+
+    public static SyncUser createTestUser(String authUrl, long expires) {
         Token userToken = new Token(USER_TOKEN, "JohnDoe", null, expires, null);
         Token accessToken = new Token(REALM_TOKEN, "JohnDoe", "/foo", expires, new Token.Permission[] {Token.Permission.DOWNLOAD });
         ObjectServerUser.AccessDescription desc = new ObjectServerUser.AccessDescription(accessToken, "/data/data/myapp/files/default", false);
@@ -51,7 +60,7 @@ public static SyncUser createTestUser(long expires) {
             realmDesc.put("description", desc.toJson());
             realmList.put(realmDesc);
 
-            obj.put("authUrl", "http://objectserver.realm.io/auth");
+            obj.put("authUrl", authUrl);
             obj.put("userToken", userToken.toJson());
             obj.put("realms", realmList);
             return SyncUser.fromJson(obj.toString());
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmAllocBenchmarks.java b/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmAllocBenchmarks.java
new file mode 100644
index 0000000000..f9f5a62a6b
--- /dev/null
+++ b/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmAllocBenchmarks.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.benchmarks;
+
+import android.support.test.InstrumentationRegistry;
+
+import org.junit.runner.RunWith;
+
+import dk.ilios.spanner.AfterExperiment;
+import dk.ilios.spanner.BeforeExperiment;
+import dk.ilios.spanner.Benchmark;
+import dk.ilios.spanner.BenchmarkConfiguration;
+import dk.ilios.spanner.SpannerConfig;
+import dk.ilios.spanner.junit.SpannerRunner;
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
+import io.realm.RealmQuery;
+import io.realm.RealmResults;
+import io.realm.benchmarks.config.BenchmarkConfig;
+import io.realm.entities.AllTypes;
+import io.realm.entities.Dog;
+
+@RunWith(SpannerRunner.class)
+public class RealmAllocBenchmarks {
+    @BenchmarkConfiguration
+    public SpannerConfig configuration = BenchmarkConfig.getConfiguration(this.getClass().getCanonicalName());
+
+    private Realm realm;
+
+    @BeforeExperiment
+    public void before() {
+        Realm.init(InstrumentationRegistry.getTargetContext());
+        RealmConfiguration config = new RealmConfiguration.Builder().build();
+        Realm.deleteRealm(config);
+        realm = Realm.getInstance(config);
+        realm.beginTransaction();
+        realm.createObject(AllTypes.class).getColumnRealmList().add(realm.createObject(Dog.class));
+        realm.commitTransaction();
+    }
+
+    @AfterExperiment
+    public void after() {
+        realm.close();
+    }
+
+    @Benchmark
+    public void createObjects(long reps) {
+        RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
+        for (long i = 0; i < reps; i++) {
+            results.first();
+        }
+    }
+
+    @Benchmark
+    public void createQueries(long reps) {
+        for (long i = 0; i < reps; i++) {
+            realm.where(AllTypes.class);
+        }
+    }
+    @Benchmark
+    public void createRealmResults(long reps) {
+        RealmQuery<AllTypes> query = realm.where(AllTypes.class);
+        for (long i = 0; i < reps; i++) {
+            query.findAll();
+        }
+    }
+
+    @Benchmark
+    public void createRealmLists(long reps) {
+        AllTypes allTypes = realm.where(AllTypes.class).findFirst();
+        for (long i = 0; i < reps; i++) {
+            //noinspection ConstantConditions
+            allTypes.getColumnRealmList();
+        }
+    }
+}
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java b/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
index ff8be605c7..68719a222f 100644
--- a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
+++ b/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmObjectWriteBenchmarks.java
@@ -54,12 +54,26 @@ public void after() {
     }
 
     @Benchmark
-    public void writeString(long reps) {
+    public void writeShortString(long reps) {
         for (long i = 0; i < reps; i++) {
             writeObject.setColumnString("Foo");
         }
     }
 
+    @Benchmark
+    public void writeMediumString(long reps) {
+        for (long i = 0; i < reps; i++) {
+            writeObject.setColumnString("ABCDEFHIJKLMNOPQ");
+        }
+    }
+
+    @Benchmark
+    public void writeLongString(long reps) {
+        for (long i = 0; i < reps; i++) {
+            writeObject.setColumnString("ABCDEFHIJKLMNOPQABCDEFHIJKLMNOPQABCDEFHIJKLMNOPQABCDEFHIJKLMNOPQ");
+        }
+    }
+
     @Benchmark
     public void writeLong(long reps) {
         for (long i = 0; i < reps; i++) {
diff --git a/realm/realm-library/src/main/AndroidManifest.xml b/realm/realm-library/src/main/AndroidManifest.xml
index 6c57d744f5..a5dc325ad0 100644
--- a/realm/realm-library/src/main/AndroidManifest.xml
+++ b/realm/realm-library/src/main/AndroidManifest.xml
@@ -1,5 +1,2 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="io.realm" >
-
-</manifest>
\ No newline at end of file
+<manifest package="io.realm" />
diff --git a/realm/realm-library/src/main/cpp/CMakeLists.txt b/realm/realm-library/src/main/cpp/CMakeLists.txt
index 8d9ce2b0ad..19883ffcd3 100644
--- a/realm/realm-library/src/main/cpp/CMakeLists.txt
+++ b/realm/realm-library/src/main/cpp/CMakeLists.txt
@@ -37,14 +37,14 @@ set(classes_LIST
     io.realm.internal.LinkView io.realm.internal.Util io.realm.internal.UncheckedRow
     io.realm.internal.TableQuery io.realm.internal.SharedRealm io.realm.internal.TestUtil
     io.realm.log.LogLevel io.realm.log.RealmLog io.realm.Property io.realm.RealmSchema
-    io.realm.RealmObjectSchema
+    io.realm.RealmObjectSchema io.realm.internal.NativeObjectReference
 )
 # /./ is the workaround for the problem that AS cannot find the jni headers.
 # See https://github.com/googlesamples/android-ndk/issues/319
 set(jni_headers_PATH /./${PROJECT_BINARY_DIR}/jni_include)
 if (build_SYNC)
     list(APPEND classes_LIST
-        io.realm.SyncManager io.realm.internal.objectserver.ObjectServerSession)
+        io.realm.SyncManager io.realm.internal.objectserver.ObjectServerSession io.realm.RealmFileUserStore)
 endif()
 create_javah(TARGET jni_headers
     CLASSES ${classes_LIST}
@@ -118,9 +118,9 @@ endif()
 #     'best.m_nanoseconds' was declared here
 set(WARNING_CXX_FLAGS "-Wall -Wextra -pedantic -Wno-long-long -Wno-variadic-macros \
 -Wno-missing-field-initializers -Wmissing-declarations -Wno-error=uninitialized -Wno-error=maybe-uninitialized")
-set(REALM_COMMON_CXX_FLAGS "-DREALM_ANDROID -DREALM_HAVE_CONFIG -DPIC -pthread -fvisibility=hidden -std=c++14 -fsigned-char")
+set(REALM_COMMON_CXX_FLAGS "-DREALM_ANDROID -DREALM_HAVE_CONFIG -DREALM_HAVE_EPOLL -DPIC -pthread -fvisibility=hidden -std=c++14 -fsigned-char")
 if (build_SYNC)
-    set(REALM_COMMON_CXX_FLAGS "${REALM_COMMON_CXX_FLAGS} -DREALM_SYNC")
+    set(REALM_COMMON_CXX_FLAGS "${REALM_COMMON_CXX_FLAGS} -DREALM_ENABLE_SYNC=1")
 endif()
 # There might be an issue with -Os of ndk gcc 4.9. It will hang the encryption related tests.
 # And this issue doesn't seem to impact the core compiling.
@@ -146,29 +146,24 @@ file(GLOB jni_SRC
 if (NOT build_SYNC)
     list(REMOVE_ITEM jni_SRC
         ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_SyncManager.cpp
-        ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_internal_objectserver_ObjectServerSession.cpp)
+        ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_internal_objectserver_ObjectServerSession.cpp
+        ${CMAKE_CURRENT_SOURCE_DIR}/io_realm_RealmFileUserStore.cpp)
 endif()
 
 # Object Store source files
 file(GLOB objectstore_SRC
-    "object-store/src/collection_notifications.cpp"
-    "object-store/src/object_schema.cpp"
-    "object-store/src/object_store.cpp"
-    "object-store/src/schema.cpp"
-    "object-store/src/index_set.cpp"
-    "object-store/src/shared_realm.cpp"
-    "object-store/src/impl/realm_coordinator.cpp"
-    "object-store/src/impl/collection_notifier.cpp"
-    "object-store/src/impl/collection_change_builder.cpp"
-    "object-store/src/impl/transact_log_handler.cpp"
-    "object-store/src/impl/weak_realm_notifier.cpp"
-    "object-store/src/impl/android/*.cpp"
-    "object-store/src/util/*.cpp")
+    "object-store/src/*.cpp"
+    "object-store/src/impl/*.cpp"
+    "object-store/src/impl/epoll/*.cpp"
+    "object-store/src/util/*.cpp"
+    "object-store/src/impl/epoll/*.cpp"
+    "object-store/src/util/android/*.cpp")
+
 # Sync needed Object Store files
 if (build_SYNC)
     file(GLOB objectstore_sync_SRC
-        "object-store/src/sync_manager.cpp"
-        "object-store/src/sync_session.cpp")
+        "object-store/src/sync/*.cpp"
+        "object-store/src/sync/impl/*.cpp")
 endif()
 
 add_library(realm-jni SHARED ${jni_SRC} ${objectstore_SRC} ${objectstore_sync_SRC})
diff --git a/realm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp b/realm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp
new file mode 100644
index 0000000000..87600fa09d
--- /dev/null
+++ b/realm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp
@@ -0,0 +1,110 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <jni.h>
+#include <jni_util/log.hpp>
+#include "io_realm_RealmFileUserStore.h"
+#include "sync/sync_manager.hpp"
+#include "sync/sync_user.hpp"
+#include "util.hpp"
+
+using namespace realm;
+
+static const char* ERR_NO_LOGGED_IN_USER = "No user logged in yet.";
+static const char* ERR_COULD_NOT_ALLOCATE_MEMORY = "Could not allocate memory to return all users.";
+
+JNIEXPORT jstring JNICALL
+Java_io_realm_RealmFileUserStore_nativeGetCurrentUser (JNIEnv *env, jclass)
+{
+    TR_ENTER()
+    try {
+
+        const std::shared_ptr<SyncUser> &user = SyncManager::shared().get_current_user();
+        if (user) {
+            return to_jstring(env, user->refresh_token().data());
+        } else {
+            return nullptr;
+        }
+    } CATCH_STD()
+    return nullptr;
+}
+
+JNIEXPORT void JNICALL
+Java_io_realm_RealmFileUserStore_nativeUpdateOrCreateUser (JNIEnv *env, jclass, jstring identity, jstring jsonToken, jstring url)
+{
+    TR_ENTER()
+    try {
+        JStringAccessor user_identity(env, identity); // throws
+        JStringAccessor user_json_token(env, jsonToken); // throws
+        JStringAccessor auth_url(env, url); // throws
+
+        SyncManager::shared().get_user(user_identity, user_json_token, std::string(auth_url));
+    } CATCH_STD()
+}
+
+JNIEXPORT void JNICALL
+Java_io_realm_RealmFileUserStore_nativeLogoutCurrentUser (JNIEnv *env, jclass)
+{
+    TR_ENTER()
+    try {
+        const std::shared_ptr<SyncUser>& user = SyncManager::shared().get_current_user();
+        if (user) {
+            user->log_out();
+        } else {
+            throw std::runtime_error(ERR_NO_LOGGED_IN_USER);
+        }
+    } CATCH_STD()
+}
+
+
+JNIEXPORT void JNICALL
+Java_io_realm_RealmFileUserStore_nativeConfigureMetaDataSystem (JNIEnv *env, jclass, jstring baseFile)
+{
+    TR_ENTER()
+    try {
+        JStringAccessor base_file_path(env, baseFile); // throws
+        SyncManager::shared().configure_file_system(base_file_path, SyncManager::MetadataMode::NoEncryption);
+    } CATCH_STD()
+}
+
+JNIEXPORT jobjectArray JNICALL
+Java_io_realm_RealmFileUserStore_nativeGetAllUsers (JNIEnv *env, jclass)
+{
+    TR_ENTER()
+    std::vector<std::shared_ptr<SyncUser>> all_users = SyncManager::shared().all_logged_in_users();
+    if (!all_users.empty()) {
+        size_t len = all_users.size();
+        jobjectArray users_token = env->NewObjectArray(len, java_lang_string, 0);
+        if (users_token == nullptr) {
+            ThrowException(env, OutOfMemory, ERR_COULD_NOT_ALLOCATE_MEMORY);
+            return nullptr;
+        }
+        for (int i = 0; i < len; ++i) {
+            env->SetObjectArrayElement(users_token, i, to_jstring(env, all_users[i]->refresh_token().data()));
+        }
+
+        return users_token;
+    }
+    return nullptr;
+}
+
+JNIEXPORT void JNICALL
+Java_io_realm_RealmFileUserStore_nativeResetForTesting (JNIEnv *, jclass)
+{
+    TR_ENTER();
+    SyncManager::shared().reset_for_testing();
+}
+
diff --git a/realm/realm-library/src/main/cpp/io_realm_RealmSchema.cpp b/realm/realm-library/src/main/cpp/io_realm_RealmSchema.cpp
index 98649caff4..9c6f1992e3 100644
--- a/realm/realm-library/src/main/cpp/io_realm_RealmSchema.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_RealmSchema.cpp
@@ -43,7 +43,7 @@ Java_io_realm_RealmSchema_nativeCreateFromList(JNIEnv *env, jclass, jlongArray o
 }
 
 JNIEXPORT void JNICALL
-Java_io_realm_RealmSchema_nativeClose(JNIEnv *env, jclass, jlong nativePtr) {
+Java_io_realm_RealmSchema_nativeClose(JNIEnv*, jclass, jlong nativePtr) {
     TR_ENTER_PTR(nativePtr)
     Schema* schema = reinterpret_cast<Schema*>(nativePtr);
     delete schema;
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp
index 52079074e5..119cdf30fb 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp
@@ -19,12 +19,7 @@
 
 using namespace realm;
 
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeClose
-  (JNIEnv*, jclass, jlong nativeLinkViewPtr)
-{
-    LangBindHelper::unbind_linklist_ptr(*LV(nativeLinkViewPtr));
-}
-
+static void finalize_link_view(jlong ptr);
 
 JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetRow
   (JNIEnv* env, jobject, jlong nativeLinkViewPtr, jlong pos)
@@ -223,7 +218,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeRemoveAllTargetRows
 }
 
 JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetTargetTable
-  (JNIEnv* env, jobject, jlong nativeLinkViewPtr)
+  (JNIEnv*, jobject, jlong nativeLinkViewPtr)
 {
     TR_ENTER_PTR(nativeLinkViewPtr)
 
@@ -248,3 +243,16 @@ JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeRemoveTargetRow
         return lvr->remove_target_row( S(pos) );
     } CATCH_STD()
 }
+
+static void finalize_link_view(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    LangBindHelper::unbind_linklist_ptr(*LV(ptr));
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetFinalizerPtr
+  (JNIEnv *, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_link_view);
+}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_NativeObjectReference.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_NativeObjectReference.cpp
new file mode 100644
index 0000000000..ab5de83fc5
--- /dev/null
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_NativeObjectReference.cpp
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "io_realm_internal_NativeObjectReference.h"
+
+typedef void (*FinalizeFunc)(jlong);
+
+JNIEXPORT void JNICALL Java_io_realm_internal_NativeObjectReference_nativeCleanUp
+(JNIEnv *, jclass, jlong finalizer_ptr, jlong native_ptr) {
+    FinalizeFunc finalize_func = reinterpret_cast<FinalizeFunc>(finalizer_ptr);
+    finalize_func(native_ptr);
+}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
index 6d200de454..6c78f94da9 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
@@ -1,13 +1,16 @@
-#include <object-store/src/sync_manager.hpp>
 #include "io_realm_internal_SharedRealm.h"
+#ifdef REALM_ENABLE_SYNC
+#include "object-store/src/sync/sync_manager.hpp"
+#include "object-store/src/sync/sync_config.hpp"
+#endif
 
 #include "object_store.hpp"
 #include "shared_realm.hpp"
 
 #include "java_binding_context.hpp"
 #include "util.hpp"
-#ifdef REALM_SYNC
-#include "sync_config.hpp"
+#if REALM_ENABLE_SYNC
+#include "sync/sync_manager.hpp"
 #endif
 
 using namespace realm;
@@ -53,13 +56,9 @@ Java_io_realm_internal_SharedRealm_nativeCreateConfig(JNIEnv *env, jclass, jstri
         config->cache = cache;
         config->disable_format_upgrade = disable_format_upgrade;
         config->automatic_change_notifications = auto_change_notification;
-#ifdef REALM_SYNC
+#if REALM_ENABLE_SYNC
         if (sync_server_url) {
-            JStringAccessor url(env, sync_server_url);
-            JStringAccessor token(env, sync_user_token);
-            config->sync_config = std::make_shared<SyncConfig>(token, url, nullptr, SyncSessionStopPolicy::Immediately);
-            // FIXME: Sync session is handled by java now. Remove this when adapt to OS sync implementation.
-            config->sync_config->create_session = false;
+            config->force_sync_history = true;
         }
 #endif
         return reinterpret_cast<jlong>(config);
@@ -69,7 +68,7 @@ Java_io_realm_internal_SharedRealm_nativeCreateConfig(JNIEnv *env, jclass, jstri
 }
 
 JNIEXPORT void JNICALL
-Java_io_realm_internal_SharedRealm_nativeCloseConfig(JNIEnv* env, jclass, jlong config_ptr)
+Java_io_realm_internal_SharedRealm_nativeCloseConfig(JNIEnv*, jclass, jlong config_ptr)
 {
     TR_ENTER_PTR(config_ptr)
 
@@ -94,7 +93,7 @@ Java_io_realm_internal_SharedRealm_nativeGetSharedRealm(JNIEnv *env, jclass, jlo
 }
 
 JNIEXPORT void JNICALL
-Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm(JNIEnv* env, jclass, jlong shared_realm_ptr)
+Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm(JNIEnv*, jclass, jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
@@ -137,7 +136,7 @@ Java_io_realm_internal_SharedRealm_nativeCancelTransaction(JNIEnv *env, jclass,
 
 
 JNIEXPORT jboolean JNICALL
-Java_io_realm_internal_SharedRealm_nativeIsInTransaction(JNIEnv* env, jclass, jlong shared_realm_ptr)
+Java_io_realm_internal_SharedRealm_nativeIsInTransaction(JNIEnv*, jclass, jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
@@ -254,7 +253,7 @@ Java_io_realm_internal_SharedRealm_nativeGetVersionID(JNIEnv *env, jclass, jlong
 }
 
 JNIEXPORT jboolean JNICALL
-Java_io_realm_internal_SharedRealm_nativeIsClosed(JNIEnv* env, jclass, jlong shared_realm_ptr)
+Java_io_realm_internal_SharedRealm_nativeIsClosed(JNIEnv*, jclass, jlong shared_realm_ptr)
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
index 6d1aac6c62..9c697bdca5 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
@@ -23,6 +23,8 @@
 using namespace std;
 using namespace realm;
 
+static void finalize_table(jlong ptr);
+
 inline static bool is_allowed_to_index(JNIEnv* env, DataType column_type) {
     if (!(column_type == type_String ||
                 column_type == type_Int ||
@@ -1401,15 +1403,9 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_Table_nativeToJson(
 
 JNIEXPORT jboolean JNICALL Java_io_realm_internal_Table_nativeIsValid(
     JNIEnv*, jobject, jlong nativeTablePtr)
-{
-    return TBL(nativeTablePtr)->is_attached();  // noexcept
-}
-
-JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeClose(
-    JNIEnv* env, jclass, jlong nativeTablePtr)
 {
     TR_ENTER_PTR(nativeTablePtr)
-    LangBindHelper::unbind_table_ptr(TBL(nativeTablePtr));
+    return TBL(nativeTablePtr)->is_attached();  // noexcept
 }
 
 JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_createNative(JNIEnv *env, jobject)
@@ -1647,3 +1643,17 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeVersion(
     } CATCH_STD()
     return 0;
 }
+
+static void finalize_table(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    LangBindHelper::unbind_table_ptr(TBL(ptr));
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeGetFinalizerPtr
+  (JNIEnv *, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_table);
+}
+
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
index b5e89f153b..690bb7b3d2 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
@@ -31,6 +31,8 @@ using namespace realm;
 #define QUERY_VALID(env, pQuery)                    (true)
 #endif
 
+static void finalize_table_query(jlong ptr);
+
 inline bool query_valid(JNIEnv* env, Query* pQuery)
 {
     return TABLE_VALID(env, pQuery->get_table().get());
@@ -46,11 +48,6 @@ const char* ERR_IMPORT_CLOSED_REALM = "Can not import results from a closed Real
 const char* ERR_SORT_NOT_SUPPORTED = "Sort is not supported on binary data, object references and RealmList";
 //-------------------------------------------------------
 
-JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeClose(JNIEnv* env, jclass, jlong nativeQueryPtr) {
-    TR_ENTER_PTR(nativeQueryPtr)
-    delete Q(nativeQueryPtr);
-}
-
 JNIEXPORT jstring JNICALL Java_io_realm_internal_TableQuery_nativeValidateQuery
 (JNIEnv *env, jobject, jlong nativeQueryPtr)
 {
@@ -1766,7 +1763,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_TableQuery_nativeHandoverQuery
 
 
 JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeCloseQueryHandover
-  (JNIEnv* env, jclass, jlong nativeHandoverQuery)
+  (JNIEnv*, jclass, jlong nativeHandoverQuery)
   {
     TR_ENTER_PTR(nativeHandoverQuery)
     delete HO(Query, nativeHandoverQuery);
@@ -1912,3 +1909,17 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsEmpty
         }
     } CATCH_STD()
 }
+
+static void finalize_table_query(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    delete Q(ptr);
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_TableQuery_nativeGetFinalizerPtr
+  (JNIEnv *, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_table_query);
+}
+
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_TableView.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_TableView.cpp
index 8d9aa78bd5..563054f643 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_TableView.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_TableView.cpp
@@ -25,6 +25,8 @@ using namespace realm;
 // if you disable the validation, please remember to call sync_in_needed() 
 #define VIEW_VALID_AND_IN_SYNC(env, ptr) view_valid_and_in_sync(env, ptr)
 
+static void finalize_table_view(jlong ptr);
+
 inline bool view_valid_and_in_sync(JNIEnv* env, jlong nativeViewPtr) {
     bool valid = (TV(nativeViewPtr) != NULL);
     if (valid) {
@@ -148,15 +150,6 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableView_nativePivot(
     } CATCH_STD()
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_TableView_nativeClose(
-    JNIEnv*, jclass, jlong nativeViewPtr)
-{
-    if (nativeViewPtr == 0)
-        return;
-
-    delete TV(nativeViewPtr);
-}
-
 JNIEXPORT jlong JNICALL Java_io_realm_internal_TableView_nativeSize(
     JNIEnv* env, jobject, jlong nativeViewPtr)
 {
@@ -985,3 +978,16 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_TableView_nativeFindBySourceNdx
     } CATCH_STD()
     return -1;
 }
+
+static void finalize_table_view(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    delete TV(ptr);
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_TableView_nativeGetFinalizerPtr
+  (JNIEnv *, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_table_view);
+}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
index 6ee249c77e..b55fdc68e2 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
@@ -19,8 +19,10 @@
 
 using namespace realm;
 
+static void finalize_unchecked_row(jlong ptr);
+
 JNIEXPORT jlong JNICALL Java_io_realm_internal_UncheckedRow_nativeGetColumnCount
-  (JNIEnv *env, jobject, jlong nativeRowPtr)
+  (JNIEnv*, jobject, jlong nativeRowPtr)
 {
     TR_ENTER_PTR(nativeRowPtr)
     if (!ROW(nativeRowPtr)->is_attached())
@@ -57,7 +59,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_UncheckedRow_nativeGetColumnIndex
 }
 
 JNIEXPORT jint JNICALL Java_io_realm_internal_UncheckedRow_nativeGetColumnType
-  (JNIEnv* env, jobject, jlong nativeRowPtr, jlong columnIndex)
+  (JNIEnv*, jobject, jlong nativeRowPtr, jlong columnIndex)
 {
     TR_ENTER_PTR(nativeRowPtr)
     return static_cast<jint>( ROW(nativeRowPtr)->get_column_type( S(columnIndex)) ); // noexcept
@@ -328,15 +330,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeNullifyLink
     } CATCH_STD()
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeClose
-  (JNIEnv* env, jclass, jlong nativeRowPtr)
-{
-    TR_ENTER_PTR(nativeRowPtr)
-    delete ROW(nativeRowPtr);
-}
-
 JNIEXPORT jboolean JNICALL Java_io_realm_internal_UncheckedRow_nativeIsAttached
-  (JNIEnv* env, jobject, jlong nativeRowPtr)
+  (JNIEnv*, jobject, jlong nativeRowPtr)
 {
     TR_ENTER_PTR(nativeRowPtr)
     return ROW(nativeRowPtr)->is_attached();
@@ -350,7 +345,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_UncheckedRow_nativeHasColumn
 }
 
 JNIEXPORT jboolean JNICALL Java_io_realm_internal_UncheckedRow_nativeIsNull
-  (JNIEnv* env, jobject, jlong nativeRowPtr, jlong columnIndex) {
+  (JNIEnv*, jobject, jlong nativeRowPtr, jlong columnIndex) {
     TR_ENTER_PTR(nativeRowPtr)
     return ROW(nativeRowPtr)->is_null(columnIndex);
 }
@@ -366,3 +361,17 @@ JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeSetNull
         ROW(nativeRowPtr)->set_null(columnIndex);
     } CATCH_STD()
 }
+
+static void finalize_unchecked_row(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    delete ROW(ptr);
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_UncheckedRow_nativeGetFinalizerPtr
+  (JNIEnv *, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_unchecked_row);
+}
+
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Util.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Util.cpp
index 241ce22908..03bb3284a0 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Util.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Util.cpp
@@ -46,6 +46,7 @@ JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*)
         java_lang_float       = GetClass(env, "java/lang/Float");
         java_lang_float_init  = env->GetMethodID(java_lang_float, "<init>", "(F)V");
         java_lang_double      = GetClass(env, "java/lang/Double");
+        java_lang_string      = GetClass(env, "java/lang/String");
         java_lang_double_init = env->GetMethodID(java_lang_double, "<init>", "(D)V");
     }
 
@@ -62,6 +63,7 @@ JNIEXPORT void JNI_OnUnload(JavaVM* vm, void*)
         env->DeleteGlobalRef(java_lang_long);
         env->DeleteGlobalRef(java_lang_float);
         env->DeleteGlobalRef(java_lang_double);
+        env->DeleteGlobalRef(java_lang_string);
     }
 }
 
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index bafafb1464..300a2d6f28 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit bafafb1464494d0a731a036399aa5c944d92a5bf
+Subproject commit 300a2d6f284391540dcfd346893de49fa15e1771
diff --git a/realm/realm-library/src/main/cpp/objectserver_shared.hpp b/realm/realm-library/src/main/cpp/objectserver_shared.hpp
index 1253f539d4..bd78254ba4 100644
--- a/realm/realm-library/src/main/cpp/objectserver_shared.hpp
+++ b/realm/realm-library/src/main/cpp/objectserver_shared.hpp
@@ -23,8 +23,9 @@
 #include <realm/sync/history.hpp>
 #include <realm/sync/client.hpp>
 #include <realm/util/logger.hpp>
-#include <object-store/src/impl/realm_coordinator.hpp>
-#include <object-store/src/sync_manager.hpp>
+
+#include <impl/realm_coordinator.hpp>
+#include <sync/sync_manager.hpp>
 
 #include "util.hpp"
 
@@ -50,7 +51,7 @@ class JniSession {
             auto coordinator = realm::_impl::RealmCoordinator::get_existing_coordinator(
                     realm::StringData(local_realm_path));
             if (coordinator) {
-                coordinator->notify_others();
+                coordinator->wake_up_notifier_worker();
             }
         };
         auto error_handler = [&, global_obj_ref_tmp](int error_code, std::string message) {
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index 1ba8e3e2b1..570bfa9185 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -38,6 +38,7 @@ jmethodID java_lang_long_init;
 jclass java_lang_float;
 jmethodID java_lang_float_init;
 jclass java_lang_double;
+jclass java_lang_string;
 jmethodID java_lang_double_init;
 jclass session_class_ref;
 jmethodID session_error_handler;
@@ -404,7 +405,8 @@ JStringAccessor::JStringAccessor(JNIEnv* env, jstring str)
         size_t error_code;
         buf_size = Xcode::find_utf8_buf_size(begin, end, error_code);
     }
-    m_data.reset(new char[buf_size]);  // throws
+    char* tmp_char_array = new char[buf_size]; // throws
+    m_data.reset(tmp_char_array);
     {
         const jchar* in_begin = chars.data();
         const jchar* in_end   = in_begin + chars.size();
@@ -418,6 +420,8 @@ JStringAccessor::JStringAccessor(JNIEnv* env, jstring str)
             throw invalid_argument(string_to_hex("in_begin != in_end when converting to UTF-8", chars.data(), chars.size(), error_code));
         }
         m_size = out_begin - m_data.get();
+        // FIXME: Does this help on string issues? Or does it only help lldb?
+        std::memset(tmp_char_array + m_size, 0, buf_size - m_size);
     }
 }
 
diff --git a/realm/realm-library/src/main/cpp/util.hpp b/realm/realm-library/src/main/cpp/util.hpp
index 68b9a89ee6..98cce1fd3a 100644
--- a/realm/realm-library/src/main/cpp/util.hpp
+++ b/realm/realm-library/src/main/cpp/util.hpp
@@ -665,6 +665,7 @@ extern jmethodID java_lang_long_init;
 extern jclass java_lang_float;
 extern jmethodID java_lang_float_init;
 extern jclass java_lang_double;
+extern jclass java_lang_string;
 extern jmethodID java_lang_double_init;
 
 // FIXME Move to own library
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index 9b529e0f24..6df8fea533 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -44,7 +44,7 @@
  * @see Realm
  * @see RealmSchema
  */
-public final class DynamicRealm extends BaseRealm {
+public class DynamicRealm extends BaseRealm {
 
     private DynamicRealm(RealmConfiguration configuration) {
         super(configuration);
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
index 95c4ae2014..619b92ca60 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
@@ -33,7 +33,7 @@
  * Using a DynamicRealmObject is slower than using the regular RealmObject class.
  */
 @SuppressWarnings("WeakerAccess")
-public final class DynamicRealmObject extends RealmObject implements RealmObjectProxy {
+public class DynamicRealmObject extends RealmObject implements RealmObjectProxy {
 
     private final ProxyState proxyState = new ProxyState(this);
 
diff --git a/realm/realm-library/src/main/java/io/realm/Property.java b/realm/realm-library/src/main/java/io/realm/Property.java
index 82fb4a0655..ef9069c81a 100644
--- a/realm/realm-library/src/main/java/io/realm/Property.java
+++ b/realm/realm-library/src/main/java/io/realm/Property.java
@@ -21,10 +21,10 @@
  * Class for handling properties/fields.
  */
 
-public class Property {
-    public static boolean PRIMARY_KEY = true;
-    public static boolean REQUIRED    = true;
-    public static boolean INDEXED     = true;
+class Property {
+    public static final boolean PRIMARY_KEY = true;
+    public static final boolean REQUIRED    = true;
+    public static final boolean INDEXED     = true;
 
     private final long nativePtr;
 
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index a6a6844345..81c4bdebf1 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.os.Build;
 import android.util.JsonReader;
-import android.util.Log;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -38,7 +37,6 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Scanner;
@@ -124,7 +122,7 @@
  * @see <a href="http://en.wikipedia.org/wiki/ACID">ACID</a>
  * @see <a href="https://github.com/realm/realm-java/tree/master/examples">Examples using Realm</a>
  */
-public final class Realm extends BaseRealm {
+public class Realm extends BaseRealm {
 
     public static final String DEFAULT_REALM_NAME = RealmConfiguration.DEFAULT_REALM_NAME;
 
@@ -996,7 +994,7 @@ public void insert(RealmModel object) {
         if (object == null) {
             throw new IllegalArgumentException("Null object cannot be inserted into Realm.");
         }
-        Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>();
+        Map<RealmModel, Long> cache = new HashMap<RealmModel, Long>();
         configuration.getSchemaMediator().insert(this, object, cache);
     }
 
@@ -1065,7 +1063,7 @@ public void insertOrUpdate(RealmModel object) {
         if (object == null) {
             throw new IllegalArgumentException("Null object cannot be inserted into Realm.");
         }
-        Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>();
+        Map<RealmModel, Long> cache = new HashMap<RealmModel, Long>();
         configuration.getSchemaMediator().insertOrUpdate(this, object, cache);
     }
 
@@ -1557,10 +1555,13 @@ public static boolean deleteRealm(RealmConfiguration configuration) {
      *
      * @param configuration a {@link RealmConfiguration} pointing to a Realm file.
      * @return {@code true} if successful, {@code false} if any file operation failed.
-     * @throws IllegalArgumentException if the realm file is encrypted. Compacting an encrypted Realm file is not
-     *                                  supported yet.
+     * @throws UnsupportedOperationException if Realm is synchronized.
      */
     public static boolean compactRealm(RealmConfiguration configuration) {
+        // FIXME: remove this restriction when https://github.com/realm/realm-core/issues/2345 is resolved
+        if (configuration.isSyncConfiguration()) {
+            throw new UnsupportedOperationException("Compacting is not supported yet on synced Realms. See https://github.com/realm/realm-core/issues/2345");
+        }
         return BaseRealm.compactRealm(configuration);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCache.java b/realm/realm-library/src/main/java/io/realm/RealmCache.java
index 09f9a60eca..980218b28f 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCache.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCache.java
@@ -402,7 +402,8 @@ static int getLocalThreadCount(RealmConfiguration configuration) {
         } else {
             int totalRefCount = 0;
             for (RealmCacheType type : RealmCacheType.values()) {
-                totalRefCount += cache.refAndCountMap.get(type).localCount.get();
+                Integer localCount = cache.refAndCountMap.get(type).localCount.get();
+                totalRefCount += (localCount != null) ? localCount : 0;
             }
             return totalRefCount;
         }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index 3b0f54afcd..1fcb3fedef 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -49,7 +49,7 @@
  * @param <E> the class of objects in list.
  */
 
-public final class RealmList<E extends RealmModel> extends AbstractList<E> implements OrderedRealmCollection<E> {
+public class RealmList<E extends RealmModel> extends AbstractList<E> implements OrderedRealmCollection<E> {
 
     private static final String ONLY_IN_MANAGED_MODE_MESSAGE = "This method is only available in managed mode";
     private static final String NULL_OBJECTS_NOT_ALLOWED_MESSAGE = "RealmList does not accept null values";
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
index febc7e89db..e4d8115237 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
@@ -34,7 +34,7 @@
  *
  * @see io.realm.RealmMigration
  */
-public final class RealmObjectSchema {
+public class RealmObjectSchema {
 
     private static final Map<Class<?>, FieldMetaData> SUPPORTED_SIMPLE_FIELDS;
     static {
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 566a050d44..b9f6cc31c5 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -59,7 +59,7 @@
  * @see Realm#where(Class)
  * @see RealmResults#where()
  */
-public final class RealmQuery<E extends RealmModel> {
+public class RealmQuery<E extends RealmModel> {
 
     private BaseRealm realm;
     private Class<E> clazz;
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index 7bc4df26c5..6311d45e47 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -68,7 +68,7 @@
  * @see RealmQuery#findAll()
  * @see io.realm.Realm#executeTransaction(Realm.Transaction)
  */
-public final class RealmResults<E extends RealmModel> extends AbstractList<E> implements OrderedRealmCollection<E> {
+public class RealmResults<E extends RealmModel> extends AbstractList<E> implements OrderedRealmCollection<E> {
 
     private final static String NOT_SUPPORTED_MESSAGE = "This method is not supported by RealmResults.";
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index 99264bf6b1..7713b75854 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -35,7 +35,7 @@
  *
  * @see io.realm.RealmMigration
  */
-public final class RealmSchema {
+public class RealmSchema {
 
     private static final String TABLE_PREFIX = Table.TABLE_PREFIX;
     private static final String EMPTY_STRING_MSG = "Null or empty class names are not allowed";
diff --git a/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java b/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
index 5c7ba906d2..07b63b39c8 100644
--- a/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
+++ b/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
@@ -26,6 +26,7 @@
     /**
      * The specific kind of this {@link RealmFileException}.
      */
+    @Keep
     public enum Kind {
         /**
          * Thrown for any I/O related exception scenarios when a Realm is opened.
diff --git a/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java b/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java
index e969452972..75acb7df6b 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java
@@ -29,7 +29,7 @@
 
     // Used if created from other row. This keeps a strong reference to avoid GC'ing the original object, and its
     // underlying native data.
-    @SuppressWarnings("unused")
+    @SuppressWarnings({"unused", "FieldCanBeLocal"})
     private UncheckedRow originalRow;
 
     private CheckedRow(Context context, Table parent, long nativePtr) {
@@ -37,7 +37,7 @@ private CheckedRow(Context context, Table parent, long nativePtr) {
     }
 
     private CheckedRow(UncheckedRow row) {
-        super(row.context, row.parent, row.nativePointer);
+        super(row);
         this.originalRow = row;
     }
 
@@ -51,9 +51,7 @@ private CheckedRow(UncheckedRow row) {
      */
     public static CheckedRow get(Context context, Table table, long index) {
         long nativeRowPointer = table.nativeGetRowPtr(table.nativePtr, index);
-        CheckedRow row = new CheckedRow(context, table, nativeRowPointer);
-        context.addReference(NativeObjectReference.TYPE_ROW, row);
-        return row;
+        return new CheckedRow(context, table, nativeRowPointer);
     }
 
     /**
@@ -65,11 +63,8 @@ public static CheckedRow get(Context context, Table table, long index) {
      * @return a checked instance of {@link Row} for the {@link LinkView} and index specified.
      */
     public static CheckedRow get(Context context, LinkView linkView, long index) {
-        long nativeRowPointer = linkView.nativeGetRow(linkView.nativePointer, index);
-        CheckedRow row = new CheckedRow(context, linkView.getTargetTable(),
-                nativeRowPointer);
-        context.addReference(NativeObjectReference.TYPE_ROW, row);
-        return row;
+        long nativeRowPointer = linkView.nativeGetRow(linkView.getNativePtr(), index);
+        return new CheckedRow(context, linkView.getTargetTable(), nativeRowPointer);
     }
 
     /**
@@ -77,7 +72,7 @@ public static CheckedRow get(Context context, LinkView linkView, long index) {
      *
      * @return an checked instance of {@link Row}.
      */
-    public static CheckedRow getFromRow(UncheckedRow row) {
+    static CheckedRow getFromRow(UncheckedRow row) {
         return new CheckedRow(row);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Context.java b/realm/realm-library/src/main/java/io/realm/internal/Context.java
index 66b236a786..9dc084e83f 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Context.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Context.java
@@ -17,127 +17,24 @@
 package io.realm.internal;
 
 import java.lang.ref.ReferenceQueue;
-import java.util.ArrayList;
-import java.util.List;
 
+// Currently we free native objects in two threads, the SharedGroup is freed in the caller thread, others are freed in
+// RealmFinalizingDaemon thread. And the destruction in both threads are locked by the corresponding context.
+// The purpose of locking on Context is:
+// Destruction of SharedGroup (and hence Group and Table) is currently not thread-safe with respect to destruction of
+// other accessors, you have to ensure mutual exclusion. This is also illustrated by the use of locks in the test
+// test_destructor_thread_safety.cpp. Explicit call of SharedGroup::close() or Table::detach() is also not thread-safe
+// with respect to destruction of other accessors.
 public class Context {
+    private final static ReferenceQueue<NativeObject> referenceQueue = new ReferenceQueue<NativeObject>();
+    private final static Thread finalizingThread = new Thread(new FinalizerRunnable(referenceQueue));
 
-    // Pool to hold the phantom references.
-    // The size of array for storing phantom references will never decrease. Instead, we use another array to hold the
-    // index of the free slot. When adding the reference, pick the last index from freeIndexList and put the reference
-    // to the corresponding slot. When removing the reference, simply add the index to the end of freeIndexList without
-    // setting the corresponding slot to null for efficiency reasons. The reference will be freed finally when the slot
-    // gets overwritten or the whole context gets freed.
-    private static class ReferencesPool {
-        ArrayList<NativeObjectReference> pool = new ArrayList<NativeObjectReference>();
-        ArrayList<Integer> freeIndexList = new ArrayList<Integer>();
-
-        void add(NativeObjectReference ref) {
-            if (pool.size() <= ref.refIndex) {
-                pool.add(ref);
-            } else {
-                pool.set(ref.refIndex, ref);
-            }
-        }
-
-        Integer getFreeIndex() {
-            Integer index;
-            int freeIndexListSize = freeIndexList.size();
-            if (freeIndexListSize == 0) {
-                index = pool.size();
-            } else {
-                index = freeIndexList.remove(freeIndexListSize - 1);
-            }
-            return index;
-        }
-    }
-
-    // Each group of related Realm objects will have a Context object in the root.
-    // The root can be a table, a group, or a shared group.
-    // The Context object is used to store a list of native pointers 
-    // whose disposal need to be handed over from the garbage 
-    // collection thread to the users thread.
-
-    private List<Long> abandonedTables = new ArrayList<Long>();
-    private List<Long> abandonedTableViews = new ArrayList<Long>();
-    private List<Long> abandonedQueries = new ArrayList<Long>();
-
-    private ReferencesPool referencesPool = new ReferencesPool();
-    private ReferenceQueue<NativeObject> referenceQueue = new ReferenceQueue<NativeObject>();
-
-    private boolean isFinalized = false;
-
-    public synchronized void addReference(int type, NativeObject referent) {
-        referencesPool.add(new NativeObjectReference(type, referent, referenceQueue, referencesPool.getFreeIndex()));
-    }
-
-    public synchronized void executeDelayedDisposal() {
-        for (int i = 0; i < abandonedTables.size(); i++) {
-            long nativePointer = abandonedTables.get(i);
-            Table.nativeClose(nativePointer);
-        }
-        abandonedTables.clear();
-
-        for (int i = 0; i < abandonedTableViews.size(); i++) {
-            long nativePointer = abandonedTableViews.get(i);
-            TableView.nativeClose(nativePointer);
-        }
-        abandonedTableViews.clear();
-
-        for (int i = 0; i < abandonedQueries.size(); i++) {
-            long nativePointer = abandonedQueries.get(i);
-            TableQuery.nativeClose(nativePointer);
-        }
-        abandonedQueries.clear();
-
-        cleanNativeReferences();
-    }
-
-    private void cleanNativeReferences() {
-        NativeObjectReference reference = (NativeObjectReference) referenceQueue.poll();
-        while (reference != null) {
-            // Dealloc the native resources
-            reference.cleanup();
-            // Inline referencesPool.remove() to make it faster.
-            // referencesPool.pool.set(index, null); is not really needed. Make it faster by not
-            // setting the slot to null.
-            referencesPool.freeIndexList.add(reference.refIndex);
-            reference = (NativeObjectReference) referenceQueue.poll();
-        }
-    }
-
-    public void asyncDisposeTable(long nativePointer, boolean isRoot) {
-        if (isRoot || isFinalized) {
-            Table.nativeClose(nativePointer);
-        }
-        else {
-            abandonedTables.add(nativePointer);
-        }
-    }
-
-    public void asyncDisposeTableView(long nativePointer) {
-        if (isFinalized) {
-            TableView.nativeClose(nativePointer);
-        }
-        else {
-            abandonedTableViews.add(nativePointer);
-        }
-    }
-
-    public void asyncDisposeQuery(long nativePointer) {
-        if (isFinalized) {
-            TableQuery.nativeClose(nativePointer);
-        }
-        else {
-            abandonedQueries.add(nativePointer);
-        }
+    static {
+        finalizingThread.setName("RealmFinalizingDaemon");
+        finalizingThread.start();
     }
 
-    protected void finalize() throws Throwable {
-        synchronized (this) {
-            isFinalized = true;
-        }
-        executeDelayedDisposal();
-        super.finalize();
+    void addReference(NativeObject referent) {
+        new NativeObjectReference(this, referent, referenceQueue);
     }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/FinalizerRunnable.java b/realm/realm-library/src/main/java/io/realm/internal/FinalizerRunnable.java
new file mode 100644
index 0000000000..2e8db788c3
--- /dev/null
+++ b/realm/realm-library/src/main/java/io/realm/internal/FinalizerRunnable.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.internal;
+
+
+import java.lang.ref.ReferenceQueue;
+
+import io.realm.log.RealmLog;
+
+// Running in the FinalizingDaemon thread to free native objects.
+class FinalizerRunnable implements Runnable {
+    private final ReferenceQueue<NativeObject>  referenceQueue;
+
+    FinalizerRunnable(ReferenceQueue<NativeObject> referenceQueue) {
+        this.referenceQueue = referenceQueue;
+    }
+
+    @Override
+    public void run() {
+        while (true) {
+            try {
+                NativeObjectReference reference = (NativeObjectReference) referenceQueue.remove();
+                reference.cleanup();
+            } catch (InterruptedException e) {
+                // Restore the interrupted status
+                Thread.currentThread().interrupt();
+
+                RealmLog.fatal("The FinalizerRunnable thread has been interrupted." +
+                        " Native resources cannot be freed anymore");
+                break;
+            }
+        }
+    }
+}
diff --git a/realm/realm-library/src/main/java/io/realm/internal/LinkView.java b/realm/realm-library/src/main/java/io/realm/internal/LinkView.java
index 6ba77cc800..f6718b4083 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/LinkView.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/LinkView.java
@@ -21,20 +21,32 @@
 /**
  * The LinkView class represents a core {@link RealmFieldType#LIST}.
  */
-public class LinkView extends NativeObject {
+public class LinkView implements NativeObject {
 
     private final Context context;
     final Table parent;
     final long columnIndexInParent;
+    private final long nativePtr;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
 
     public LinkView(Context context, Table parent, long columnIndexInParent, long nativeLinkViewPtr) {
         this.context = context;
         this.parent = parent;
         this.columnIndexInParent = columnIndexInParent;
-        this.nativePointer = nativeLinkViewPtr;
+        this.nativePtr = nativeLinkViewPtr;
 
-        context.executeDelayedDisposal();
-        context.addReference(NativeObjectReference.TYPE_LINK_VIEW, this);
+        context.addReference(this);
+    }
+
+
+    @Override
+    public long getNativePtr() {
+        return nativePtr;
+    }
+
+    @Override
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
     }
 
     /**
@@ -66,66 +78,59 @@ public CheckedRow getCheckedRow(long index) {
      * Returns the row index in the underlying table.
      */
     public long getTargetRowIndex(long linkViewIndex) {
-        return nativeGetTargetRowIndex(nativePointer, linkViewIndex);
+        return nativeGetTargetRowIndex(nativePtr, linkViewIndex);
     }
 
     public void add(long rowIndex) {
         checkImmutable();
-        nativeAdd(nativePointer, rowIndex);
+        nativeAdd(nativePtr, rowIndex);
     }
 
     public void insert(long pos, long rowIndex) {
         checkImmutable();
-        nativeInsert(nativePointer, pos, rowIndex);
+        nativeInsert(nativePtr, pos, rowIndex);
     }
 
     public void set(long pos, long rowIndex) {
         checkImmutable();
-        nativeSet(nativePointer, pos, rowIndex);
+        nativeSet(nativePtr, pos, rowIndex);
     }
 
     public void move(long oldPos, long newPos) {
         checkImmutable();
-        nativeMove(nativePointer, oldPos, newPos);
+        nativeMove(nativePtr, oldPos, newPos);
     }
 
     public void remove(long pos) {
         checkImmutable();
-        nativeRemove(nativePointer, pos);
+        nativeRemove(nativePtr, pos);
     }
 
     public void clear() {
         checkImmutable();
-        nativeClear(nativePointer);
+        nativeClear(nativePtr);
     }
 
     public boolean contains(long tableRowIndex) {
-        long index = nativeFind(nativePointer, tableRowIndex);
+        long index = nativeFind(nativePtr, tableRowIndex);
         return (index != TableOrView.NO_MATCH);
     }
 
     public long size() {
-        return nativeSize(nativePointer);
+        return nativeSize(nativePtr);
     }
 
     public boolean isEmpty() {
-        return nativeIsEmpty(nativePointer);
+        return nativeIsEmpty(nativePtr);
     }
 
     public TableQuery where() {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        this.context.executeDelayedDisposal();
-        long nativeQueryPtr = nativeWhere(nativePointer);
-        try {
-            return new TableQuery(this.context, this.parent, nativeQueryPtr);
-        } catch (RuntimeException e) {
-            TableQuery.nativeClose(nativeQueryPtr);
-            throw e;
-        }
+        long nativeQueryPtr = nativeWhere(nativePtr);
+        return new TableQuery(this.context, this.parent, nativeQueryPtr);
     }
 
     public boolean isAttached() {
-        return nativeIsAttached(nativePointer);
+        return nativeIsAttached(nativePtr);
     }
 
     /**
@@ -140,7 +145,7 @@ public Table getTable() {
      */
     public void removeAllTargetRows() {
         checkImmutable();
-        nativeRemoveAllTargetRows(nativePointer);
+        nativeRemoveAllTargetRows(nativePtr);
     }
 
     /**
@@ -148,20 +153,13 @@ public void removeAllTargetRows() {
      */
     public void removeTargetRow(int index) {
         checkImmutable();
-        nativeRemoveTargetRow(nativePointer, index);
+        nativeRemoveTargetRow(nativePtr, index);
     }
 
     public Table getTargetTable() {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
-        long nativeTablePointer = nativeGetTargetTable(nativePointer);
-        try {
-            // Copy context reference from parent
-            return new Table(this.parent, nativeTablePointer);
-        } catch (RuntimeException e) {
-            Table.nativeClose(nativeTablePointer);
-            throw e;
-        }
+        long nativeTablePointer = nativeGetTargetTable(nativePtr);
+        Table table = new Table(this.parent, nativeTablePointer);
+        return table;
     }
 
     private void checkImmutable() {
@@ -170,7 +168,6 @@ private void checkImmutable() {
         }
     }
 
-    public static native void nativeClose(long nativeLinkViewPtr);
     native long nativeGetRow(long nativeLinkViewPtr, long pos);
     private native long nativeGetTargetRowIndex(long nativeLinkViewPtr, long linkViewIndex);
     public static native void nativeAdd(long nativeLinkViewPtr, long rowIndex);
@@ -187,4 +184,5 @@ private void checkImmutable() {
     private native void nativeRemoveTargetRow(long nativeLinkViewPtr, long rowIndex);
     private native void nativeRemoveAllTargetRows(long nativeLinkViewPtr);
     private native long nativeGetTargetTable(long nativeLinkViewPtr);
+    private static native long nativeGetFinalizerPtr();
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/NativeObject.java b/realm/realm-library/src/main/java/io/realm/internal/NativeObject.java
index cad7f390cc..ce326dbf9b 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/NativeObject.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/NativeObject.java
@@ -19,8 +19,21 @@
 /**
  * This abstract class represents a native object from core.
  * It specifies the operations common to all such objects.
- * All Java classes wrapping a core class should extend NativeObject.
+ * All Java classes wrapping a core class should implement NativeObject.
  */
-public abstract class NativeObject {
-    long nativePointer;
+interface NativeObject {
+    /**
+     * Gets the pointer of a native object.
+     *
+     * @return the native pointer.
+     */
+    long getNativePtr();
+
+    /**
+     * Gets the function pointer which points to the function to free the native object.
+     * The function should be defined like: {@code typedef void (*FinalizeFunc)(jlong ptr)}.
+     *
+     * @return the function pointer for freeing the native resource.
+     */
+    long getNativeFinalizerPtr();
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/NativeObjectReference.java b/realm/realm-library/src/main/java/io/realm/internal/NativeObjectReference.java
index 2427e0a020..e07a4275e3 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/NativeObjectReference.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/NativeObjectReference.java
@@ -22,44 +22,75 @@
 /**
  * This class is used for holding the reference to the native pointers present in NativeObjects.
  * This is required as phantom references cannot access the original objects for this value.
+ * The phantom references will be stored in a double linked list to avoid the reference itself gets GCed. When the
+ * referent get GCed, the reference will be added to the ReferenceQueue. Loop in the daemon thread will retrieve the
+ * phantom reference from the ReferenceQueue then dealloc the referent and remove the reference from the double linked
+ * list. See {@link FinalizerRunnable} for more implementation details.
  */
-public final class NativeObjectReference extends PhantomReference<NativeObject> {
+final class NativeObjectReference extends PhantomReference<NativeObject> {
 
-    // Using int here instead of enum to make it faster since the cleanup needs to be called
-    // in a loop to dealloc every native reference.
-    public static final int TYPE_LINK_VIEW = 0;
-    public static final int TYPE_ROW = 1;
+    // Linked list to keep the reference of the PhantomReference
+    private static class ReferencePool {
+        NativeObjectReference head;
+
+        synchronized void add(NativeObjectReference ref) {
+            ref.prev = null;
+            ref.next = head;
+            if (head != null) {
+                head.prev = ref;
+            }
+            head = ref;
+        }
+
+        synchronized void remove(NativeObjectReference ref) {
+            NativeObjectReference next = ref.next;
+            NativeObjectReference prev = ref.prev;
+            ref.next = null;
+            ref.prev = null;
+            if (prev != null) {
+                prev.next = next;
+            } else {
+                head = next;
+            }
+            if (next != null) {
+                next.prev = prev;
+            }
+        }
+    }
 
     // The pointer to the native object to be handled
-    final long nativePointer;
-    final int type;
-    // Use boxed type to avoid box/un-box when access the freeIndexList
-    final Integer refIndex;
+    private final long nativePtr;
+    // The pointer to the native finalize function
+    private final long nativeFinalizerPtr;
+    private final Context context;
+    private NativeObjectReference prev;
+    private NativeObjectReference next;
 
-    NativeObjectReference(int type,
+    private static ReferencePool referencePool = new ReferencePool();
+
+    NativeObjectReference(Context context,
                           NativeObject referent,
-                          ReferenceQueue<? super NativeObject> referenceQueue,
-                          Integer index) {
+                          ReferenceQueue<? super NativeObject> referenceQueue) {
         super(referent, referenceQueue);
-        this.type = type;
-        this.nativePointer = referent.nativePointer;
-        refIndex = index;
+        this.nativePtr = referent.getNativePtr();
+        this.nativeFinalizerPtr = referent.getNativeFinalizerPtr();
+        this.context = context;
+        referencePool.add(this);
     }
 
     /**
      * To dealloc native resources.
      */
     void cleanup() {
-        switch (type) {
-            case TYPE_LINK_VIEW:
-                LinkView.nativeClose(nativePointer);
-                break;
-            case TYPE_ROW:
-                UncheckedRow.nativeClose(nativePointer);
-                break;
-            default:
-                // Cannot get here.
-                throw new IllegalStateException("Unknown native reference type " + type + ".");
+        synchronized (context) {
+            nativeCleanUp(nativeFinalizerPtr, nativePtr);
         }
+        // Remove the PhantomReference from the pool to free it.
+        referencePool.remove(this);
     }
+
+    /**
+     *  Calls the native finalizer function to free the given native pointer.
+     */
+    private static native void nativeCleanUp(long nativeFinalizer, long nativePointer);
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java b/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java
index 1890f18271..496aa18734 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java
@@ -26,6 +26,8 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.Locale;
 
+import io.realm.BuildConfig;
+
 /**
  * Utility methods for Realm Core.
  */
@@ -56,7 +58,7 @@ public static synchronized void loadLibrary(Context context) {
         if (libraryIsLoaded) {
             return;
         }
-        ReLinker.loadLibrary(context, "realm-jni");
+        ReLinker.loadLibrary(context, "realm-jni", BuildConfig.VERSION_NAME);
         libraryIsLoaded = true;
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index 88ba67d577..b5c210ba29 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -28,7 +28,7 @@
  * (define/insert/delete/update) a table has. All the native communications to the Realm C++ library are also handled by
  * this class.
  */
-public class Table implements TableOrView, TableSchema {
+public class Table implements TableOrView, TableSchema, NativeObject {
 
     public static final int TABLE_MAX_LENGTH = 56; // Max length of class names without prefix
     public static final String TABLE_PREFIX = Util.getTablePrefix();
@@ -43,7 +43,8 @@
     private static final long PRIMARY_KEY_FIELD_COLUMN_INDEX = 1;
     private static final long NO_PRIMARY_KEY = -2;
 
-    long nativePtr;
+    protected long nativePtr;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
     private final Context context;
     private final SharedRealm sharedRealm;
     private long cachedPrimaryKeyColumnIndex = NO_MATCH;
@@ -61,7 +62,8 @@ public Table() {
         if (nativePtr == 0) {
             throw new java.lang.OutOfMemoryError("Out of native memory.");
         }
-        sharedRealm = null;
+        this.sharedRealm = null;
+        context.addReference(this);
     }
 
     Table(Table parent, long nativePointer) {
@@ -72,6 +74,17 @@ public Table() {
         this.context = sharedRealm.context;
         this.sharedRealm = sharedRealm;
         this.nativePtr = nativePointer;
+        context.addReference(this);
+    }
+
+    @Override
+    public long getNativePtr() {
+        return nativePtr;
+    }
+
+    @Override
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
     }
 
     @Override
@@ -83,18 +96,6 @@ public long getNativeTablePointer() {
         return nativePtr;
     }
 
-    @Override
-    protected void finalize() throws Throwable {
-        synchronized (context) {
-            if (nativePtr != 0) {
-                // Don't dispose the table immediately if it is created from a SharedRealm to avoid long run finalizer.
-                context.asyncDisposeTable(nativePtr, sharedRealm == null);
-                nativePtr = 0; // Set to 0 if finalize is called before close() for some reason
-            }
-        }
-        super.finalize();
-    }
-
     /*
      * Checks if the Table is valid.
      * Whenever a Table/subtable is changed/updated all it's subtables are invalidated.
@@ -716,17 +717,10 @@ public long getLink(long columnIndex, long rowIndex) {
     }
 
     public Table getLinkTarget(long columnIndex) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeTablePointer = nativeGetLinkTarget(nativePtr, columnIndex);
-        try {
-            // Copy context reference from parent
-            return new Table(this.sharedRealm, nativeTablePointer);
-        }
-        catch (RuntimeException e) {
-            Table.nativeClose(nativeTablePointer);
-            throw e;
-        }
+        // Copy context reference from parent
+        Table table = new Table(this.sharedRealm, nativeTablePointer);
+        return table;
     }
 
     @Override
@@ -1060,16 +1054,9 @@ public long count(long columnIndex, String value) {
 
     @Override
     public TableQuery where() {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeQueryPtr = nativeWhere(nativePtr);
-        try {
-            // Copy context reference from parent
-            return new TableQuery(this.context, this, nativeQueryPtr);
-        } catch (RuntimeException e) {
-            TableQuery.nativeClose(nativeQueryPtr);
-            throw e;
-        }
+        // Copy context reference from parent
+        return new TableQuery(this.context, this, nativeQueryPtr);
     }
 
     /**
@@ -1133,66 +1120,32 @@ public long findFirstNull(long columnIndex) {
 
     @Override
     public TableView findAllLong(long columnIndex, long value) {
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllInt(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this, nativeViewPtr);
     }
 
     @Override
     public TableView findAllBoolean(long columnIndex, boolean value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllBool(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this, nativeViewPtr);
     }
 
     @Override
     public TableView findAllFloat(long columnIndex, float value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllFloat(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this, nativeViewPtr);
     }
 
     @Override
     public TableView findAllDouble(long columnIndex, double value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllDouble(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this, nativeViewPtr);
     }
 
     @Override
     public TableView findAllString(long columnIndex, String value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllString(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this, nativeViewPtr);
     }
 
     // Experimental feature
@@ -1219,15 +1172,8 @@ public Table pivot(long stringCol, long intCol, PivotType pivotType) {
     //
 
     public TableView getDistinctView(long columnIndex) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        this.context.executeDelayedDisposal();
         long nativeViewPtr = nativeGetDistinctView(nativePtr, columnIndex);
-        try {
-            return new TableView(this.context, this, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this, nativeViewPtr);
     }
 
     /**
@@ -1324,8 +1270,6 @@ public static String tableNameToClassName(String tableName) {
     }
 
     protected native long createNative();
-    // Free the underlying table ref. It is important that the nativeTablePtr become a invalid pointer after return.
-    static native void nativeClose(long nativeTablePtr);
     private native boolean nativeIsValid(long nativeTablePtr);
     private native long nativeAddColumn(long nativeTablePtr, int type, String name, boolean isNullable);
     private native long nativeAddColumnLink(long nativeTablePtr, int type, String name, long targetTablePtr);
@@ -1419,4 +1363,5 @@ public static String tableNameToClassName(String tableName) {
     private native String nativeToJson(long nativeTablePtr);
     private native boolean nativeHasSameSchema(long thisTable, long otherTable);
     private native long nativeVersion(long nativeTablePtr);
+    private static native long nativeGetFinalizerPtr();
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java b/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java
index 5060ad4e23..d8c6433681 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java
@@ -16,17 +16,17 @@
 
 package io.realm.internal;
 
-import java.io.Closeable;
 import java.util.Date;
 
 import io.realm.Case;
 import io.realm.Sort;
 import io.realm.internal.async.BadVersionException;
 
-public class TableQuery implements Closeable {
+public class TableQuery implements NativeObject {
     protected boolean DEBUG = false;
 
     protected long nativePtr;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
     protected final Table table;
     // Don't convert this into local variable and don't remove this.
     // Core requests Query to hold the TableView reference which it is built from.
@@ -48,6 +48,7 @@ public TableQuery(Context context, Table table, long nativeQueryPtr) {
         this.table = table;
         this.nativePtr = nativeQueryPtr;
         this.origin = null;
+        context.addReference(this);
     }
 
     public TableQuery(Context context, Table table, long nativeQueryPtr, TableOrView origin) {
@@ -58,28 +59,17 @@ public TableQuery(Context context, Table table, long nativeQueryPtr, TableOrView
         this.table = table;
         this.nativePtr = nativeQueryPtr;
         this.origin = origin;
+        context.addReference(this);
     }
 
-    public void close() {
-        synchronized (context) {
-            if (nativePtr != 0) {
-                nativeClose(nativePtr);
-
-                if (DEBUG)
-                    System.err.println("++++ Query CLOSE, ptr= " + nativePtr);
-
-                nativePtr = 0;
-            }
-        }
+    @Override
+    public long getNativePtr() {
+        return nativePtr;
     }
 
-    protected void finalize() {
-        synchronized (context) {
-            if (nativePtr != 0) {
-                context.asyncDisposeQuery(nativePtr);
-                nativePtr = 0; // Set to 0 if finalize is called before close() for some reason
-            }
-        }
+    @Override
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
     }
 
     /**
@@ -449,29 +439,15 @@ public static long findWithHandover(SharedRealm sharedRealm, long ptrQuery) {
     public TableView findAll(long start, long end, long limit) {
         validateQuery();
 
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAll(nativePtr, start, end, limit);
-        try {
-            return new TableView(this.context, this.table, nativeViewPtr, this);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.table, nativeViewPtr, this);
     }
 
     public TableView findAll() {
         validateQuery();
 
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAll(nativePtr, 0, Table.INFINITE, Table.INFINITE);
-        try {
-            return new TableView(this.context, this.table, nativeViewPtr, this);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.table, nativeViewPtr, this);
     }
 
     // handover find* methods
@@ -510,14 +486,7 @@ public static long findAllMultiSortedWithHandover(SharedRealm sharedRealm, long
      */
     public TableView importHandoverTableView(long handoverPtr, SharedRealm sharedRealm) throws BadVersionException {
         long nativeTvPtr = nativeImportHandoverTableViewIntoSharedGroup(handoverPtr, sharedRealm.getNativePtr());
-        try {
-            return new TableView(this.context, this.table, nativeTvPtr);
-        } catch (RuntimeException e) {
-            if (nativeTvPtr != 0) {
-                TableView.nativeClose(nativeTvPtr);
-            }
-            throw e;
-        }
+        return new TableView(this.context, this.table, nativeTvPtr);
     }
 
     /**
@@ -742,7 +711,6 @@ private void throwImmutable() {
         throw new IllegalStateException("Mutable method call during read transaction.");
     }
 
-    protected static native void nativeClose(long nativeQueryPtr);
     private native String nativeValidateQuery(long nativeQueryPtr);
     private native void nativeTableview(long nativeQueryPtr, long nativeTableViewPtr);
     private native void nativeGroup(long nativeQueryPtr);
@@ -816,4 +784,5 @@ private void throwImmutable() {
     private static native long nativeImportHandoverRowIntoSharedGroup(long handoverRowPtr, long callerSharedRealmPtr);
     public static native void nativeCloseQueryHandover(long nativePtr);
     private static native long[] nativeBatchUpdateQueries(long bgSharedRealmPtr, long[] handoverQueries, long[][] parameters, long[][] queriesParameters, boolean[][] multiSortOrder) throws BadVersionException;
+    private static native long nativeGetFinalizerPtr();
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/TableView.java b/realm/realm-library/src/main/java/io/realm/internal/TableView.java
index 746e206b8d..9c352f08bc 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/TableView.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/TableView.java
@@ -29,13 +29,19 @@
  * The view doesn't copy data from the table, but contains merely a list of row-references into the original table
  * with the real data.
  */
-public class TableView implements TableOrView {
+public class TableView implements TableOrView, NativeObject {
     // Don't convert this into local variable and don't remove this.
     // Core requests TableView to hold the Query reference.
     @SuppressWarnings({"unused"})
     private final TableQuery query; // the query which created this TableView
     private long version; // Last seen version number. Call refresh() to update this.
 
+    protected long nativePtr;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
+    protected final Table parent;
+    private final Context context;
+
+
     /**
      * Creates a TableView. This constructor is used if the TableView is created from a table.
      *
@@ -48,6 +54,7 @@ protected TableView(Context context, Table parent, long nativePtr) {
         this.parent = parent;
         this.nativePtr = nativePtr;
         this.query = null;
+        context.addReference(this);
     }
 
     /**
@@ -64,21 +71,22 @@ protected TableView(Context context, Table parent, long nativePtr, TableQuery qu
         this.parent = parent;
         this.nativePtr = nativePtr;
         this.query = query;
+        context.addReference(this);
     }
 
     @Override
-    public Table getTable() {
-        return parent;
+    public long getNativePtr() {
+        return nativePtr;
     }
 
     @Override
-    protected void finalize() {
-        synchronized (context) {
-            if (nativePtr != 0) {
-                context.asyncDisposeTableView(nativePtr);
-                nativePtr = 0; // Set to 0 if finalize is called before close() for some reason
-            }
-        }
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
+    }
+
+    @Override
+    public Table getTable() {
+        return parent;
     }
 
     /**
@@ -467,67 +475,32 @@ public long upperBoundLong(long columnIndex, long value) {
 
     @Override
     public TableView findAllLong(long columnIndex, long value){
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllInt(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this.parent, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.parent, nativeViewPtr);
     }
 
     @Override
     public TableView findAllBoolean(long columnIndex, boolean value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllBool(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this.parent, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.parent, nativeViewPtr);
     }
 
     @Override
     public TableView findAllFloat(long columnIndex, float value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllFloat(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this.parent, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.parent, nativeViewPtr);
     }
 
     @Override
     public TableView findAllDouble(long columnIndex, double value) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllDouble(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this.parent, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.parent, nativeViewPtr);
     }
 
     @Override
     public TableView findAllString(long columnIndex, String value){
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        context.executeDelayedDisposal();
         long nativeViewPtr = nativeFindAllString(nativePtr, columnIndex, value);
-        try {
-            return new TableView(this.context, this.parent, nativeViewPtr);
-        } catch (RuntimeException e) {
-            TableView.nativeClose(nativeViewPtr);
-            throw e;
-        }
+        return new TableView(this.context, this.parent, nativeViewPtr);
     }
 
     //
@@ -694,15 +667,8 @@ public String toString() {
 
     @Override
     public TableQuery where() {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        this.context.executeDelayedDisposal();
         long nativeQueryPtr = nativeWhere(nativePtr);
-        try {
-            return new TableQuery(this.context, this.parent, nativeQueryPtr, this);
-        } catch (RuntimeException e) {
-            TableQuery.nativeClose(nativeQueryPtr);
-            throw e;
-        }
+        return new TableQuery(this.context, this.parent, nativeQueryPtr, this);
     }
 
     /**
@@ -721,10 +687,6 @@ private void throwImmutable() {
         throw new IllegalStateException("Realm data can only be changed inside a write transaction.");
     }
 
-    protected long nativePtr;
-    protected final Table parent;
-    private final Context context;
-
     @Override
     public long count(long columnIndex, String value) {
         // TODO: implement
@@ -757,8 +719,6 @@ public Table pivot(long stringCol, long intCol, PivotType pivotType){
      * @throws UnsupportedOperationException if a column is not indexed.
      */
     public void distinct(long columnIndex) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        this.context.executeDelayedDisposal();
         nativeDistinct(nativePtr, columnIndex);
     }
 
@@ -772,8 +732,6 @@ public void distinct(long columnIndex) {
      * @throws IllegalArgumentException if a column is unsupported type, or is not indexed.
      */
     public void distinct(List<Long> columnIndexes) {
-        // Execute the disposal of abandoned realm objects each time a new realm object is created
-        this.context.executeDelayedDisposal();
         long[] indexes = new long[columnIndexes.size()];
         for (int i = 0; i < columnIndexes.size(); i++) {
             indexes[i] = columnIndexes.get(i);
@@ -787,7 +745,6 @@ public long syncIfNeeded() {
         return version;
     }
 
-    static native void nativeClose(long nativeViewPtr);
     private native long nativeSize(long nativeViewPtr);
     private native long nativeGetSourceRowIndex(long nativeViewPtr, long rowIndex);
     private native long nativeGetColumnCount(long nativeViewPtr);
@@ -852,4 +809,5 @@ public long syncIfNeeded() {
     private native long nativeSyncIfNeeded(long nativeTablePtr);
     private native void nativeDistinctMulti(long nativeViewPtr, long[] columnIndexes);
     private native long nativeSync(long nativeTablePtr);
+    private static native long nativeGetFinalizerPtr();
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java b/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java
index 6e4bb8e9a4..b5b963f072 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java
@@ -29,17 +29,37 @@
  *
  * For low-level access to Row data where error checking is required, use {@link CheckedRow}.
  */
-public class UncheckedRow extends NativeObject implements Row {
+public class UncheckedRow implements NativeObject, Row {
 
     final Context context; // This is only kept because for now it's needed by the constructor of LinkView
-    final Table parent;
+    private final Table parent;
+    private final long nativePtr;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
 
-    protected UncheckedRow(Context context, Table parent, long nativePtr) {
+    UncheckedRow(Context context, Table parent, long nativePtr) {
         this.context = context;
         this.parent = parent;
-        this.nativePointer = nativePtr;
+        this.nativePtr = nativePtr;
+        context.addReference(this);
+    }
+
+    // This is called by the CheckedRow constructor. The caller should hold a reference to the
+    // source UncheckedRow since the native destruction is handled by the source UncheckedRow.
+    UncheckedRow(UncheckedRow row) {
+        this.context = row.context;
+        this.parent = row.parent;
+        this.nativePtr = row.nativePtr;
+        // The destruction is handled by the source UncheckedRow. No need to add to the ref pool.
+    }
 
-        context.executeDelayedDisposal();
+    @Override
+    public long getNativePtr() {
+        return nativePtr;
+    }
+
+    @Override
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
     }
 
     /**
@@ -50,11 +70,9 @@ protected UncheckedRow(Context context, Table parent, long nativePtr) {
      * @param index the index of the row.
      * @return an instance of Row for the table and index specified.
      */
-    public static UncheckedRow getByRowIndex(Context context, Table table, long index) {
+    static UncheckedRow getByRowIndex(Context context, Table table, long index) {
         long nativeRowPointer = table.nativeGetRowPtr(table.nativePtr, index);
-        UncheckedRow row = new UncheckedRow(context, table, nativeRowPointer);
-        context.addReference(NativeObjectReference.TYPE_ROW, row);
-        return row;
+        return new UncheckedRow(context, table, nativeRowPointer);
     }
 
     /**
@@ -65,10 +83,8 @@ public static UncheckedRow getByRowIndex(Context context, Table table, long inde
      * @param nativeRowPointer pointer of a row.
      * @return an instance of Row for the table and row specified.
      */
-    public static UncheckedRow getByRowPointer(Context context, Table table, long nativeRowPointer) {
-        UncheckedRow row = new UncheckedRow(context, table, nativeRowPointer);
-        context.addReference(NativeObjectReference.TYPE_ROW, row);
-        return row;
+    static UncheckedRow getByRowPointer(Context context, Table table, long nativeRowPointer) {
+        return new UncheckedRow(context, table, nativeRowPointer);
     }
 
     /**
@@ -79,22 +95,19 @@ public static UncheckedRow getByRowPointer(Context context, Table table, long na
      * @param index the index of the row.
      * @return an instance of Row for the LinkView and index specified.
      */
-    public static UncheckedRow getByRowIndex(Context context, LinkView linkView, long index) {
-        long nativeRowPointer = linkView.nativeGetRow(linkView.nativePointer, index);
-        UncheckedRow row = new UncheckedRow(context, linkView.getTargetTable(),
-                nativeRowPointer);
-        context.addReference(NativeObjectReference.TYPE_ROW, row);
-        return row;
+    static UncheckedRow getByRowIndex(Context context, LinkView linkView, long index) {
+        long nativeRowPointer = linkView.nativeGetRow(linkView.getNativePtr(), index);
+        return new UncheckedRow(context, linkView.getTargetTable(), nativeRowPointer);
     }
 
     @Override
     public long getColumnCount() {
-        return nativeGetColumnCount(nativePointer);
+        return nativeGetColumnCount(nativePtr);
     }
 
     @Override
     public String getColumnName(long columnIndex) {
-        return nativeGetColumnName(nativePointer, columnIndex);
+        return nativeGetColumnName(nativePtr, columnIndex);
     }
 
 
@@ -103,12 +116,12 @@ public long getColumnIndex(String columnName) {
         if (columnName == null) {
             throw new IllegalArgumentException("Column name can not be null.");
         }
-        return nativeGetColumnIndex(nativePointer, columnName);
+        return nativeGetColumnIndex(nativePtr, columnName);
     }
 
     @Override
     public RealmFieldType getColumnType(long columnIndex) {
-        return RealmFieldType.fromNativeValue(nativeGetColumnType(nativePointer, columnIndex));
+        return RealmFieldType.fromNativeValue(nativeGetColumnType(nativePtr, columnIndex));
     }
 
     // Getters
@@ -120,57 +133,57 @@ public Table getTable() {
 
     @Override
     public long getIndex() {
-        return nativeGetIndex(nativePointer);
+        return nativeGetIndex(nativePtr);
     }
 
     @Override
     public long getLong(long columnIndex) {
-        return nativeGetLong(nativePointer, columnIndex);
+        return nativeGetLong(nativePtr, columnIndex);
     }
 
     @Override
     public boolean getBoolean(long columnIndex) {
-        return nativeGetBoolean(nativePointer, columnIndex);
+        return nativeGetBoolean(nativePtr, columnIndex);
     }
 
     @Override
     public float getFloat(long columnIndex) {
-        return nativeGetFloat(nativePointer, columnIndex);
+        return nativeGetFloat(nativePtr, columnIndex);
     }
 
     @Override
     public double getDouble(long columnIndex) {
-        return nativeGetDouble(nativePointer, columnIndex);
+        return nativeGetDouble(nativePtr, columnIndex);
     }
 
     @Override
     public Date getDate(long columnIndex) {
-        return new Date(nativeGetTimestamp(nativePointer, columnIndex));
+        return new Date(nativeGetTimestamp(nativePtr, columnIndex));
     }
 
     @Override
     public String getString(long columnIndex) {
-        return nativeGetString(nativePointer, columnIndex);
+        return nativeGetString(nativePtr, columnIndex);
     }
 
     @Override
     public byte[] getBinaryByteArray(long columnIndex) {
-        return nativeGetByteArray(nativePointer, columnIndex);
+        return nativeGetByteArray(nativePtr, columnIndex);
     }
 
     @Override
     public long getLink(long columnIndex) {
-        return nativeGetLink(nativePointer, columnIndex);
+        return nativeGetLink(nativePtr, columnIndex);
     }
 
     @Override
     public boolean isNullLink(long columnIndex) {
-        return nativeIsNullLink(nativePointer, columnIndex);
+        return nativeIsNullLink(nativePtr, columnIndex);
     }
 
     @Override
     public LinkView getLinkList(long columnIndex) {
-        long nativeLinkViewPtr = nativeGetLinkView(nativePointer, columnIndex);
+        long nativeLinkViewPtr = nativeGetLinkView(nativePtr, columnIndex);
         return new LinkView(context, parent, columnIndex, nativeLinkViewPtr);
     }
 
@@ -180,25 +193,25 @@ public LinkView getLinkList(long columnIndex) {
     public void setLong(long columnIndex, long value) {
         parent.checkImmutable();
         getTable().checkIntValueIsLegal(columnIndex, getIndex(), value);
-        nativeSetLong(nativePointer, columnIndex, value);
+        nativeSetLong(nativePtr, columnIndex, value);
     }
 
     @Override
     public void setBoolean(long columnIndex, boolean value) {
         parent.checkImmutable();
-        nativeSetBoolean(nativePointer, columnIndex, value);
+        nativeSetBoolean(nativePtr, columnIndex, value);
     }
 
     @Override
     public void setFloat(long columnIndex, float value) {
         parent.checkImmutable();
-        nativeSetFloat(nativePointer, columnIndex, value);
+        nativeSetFloat(nativePtr, columnIndex, value);
     }
 
     @Override
     public void setDouble(long columnIndex, double value) {
         parent.checkImmutable();
-        nativeSetDouble(nativePointer, columnIndex, value);
+        nativeSetDouble(nativePtr, columnIndex, value);
     }
 
     @Override
@@ -208,7 +221,7 @@ public void setDate(long columnIndex, Date date) {
             throw new IllegalArgumentException("Null Date is not allowed.");
         }
         long timestamp = date.getTime();
-        nativeSetTimestamp(nativePointer, columnIndex, timestamp);
+        nativeSetTimestamp(nativePtr, columnIndex, timestamp);
     }
 
     /**
@@ -222,34 +235,34 @@ public void setString(long columnIndex, String value) {
         parent.checkImmutable();
         if (value == null) {
             getTable().checkDuplicatedNullForPrimaryKeyValue(columnIndex, getIndex());
-            nativeSetNull(nativePointer, columnIndex);
+            nativeSetNull(nativePtr, columnIndex);
         } else {
             getTable().checkStringValueIsLegal(columnIndex, getIndex(), value);
-            nativeSetString(nativePointer, columnIndex, value);
+            nativeSetString(nativePtr, columnIndex, value);
         }
     }
 
     @Override
     public void setBinaryByteArray(long columnIndex, byte[] data) {
         parent.checkImmutable();
-        nativeSetByteArray(nativePointer, columnIndex, data);
+        nativeSetByteArray(nativePtr, columnIndex, data);
     }
 
     @Override
     public void setLink(long columnIndex, long value) {
         parent.checkImmutable();
-        nativeSetLink(nativePointer, columnIndex, value);
+        nativeSetLink(nativePtr, columnIndex, value);
     }
 
     @Override
     public void nullifyLink(long columnIndex) {
         parent.checkImmutable();
-        nativeNullifyLink(nativePointer, columnIndex);
+        nativeNullifyLink(nativePtr, columnIndex);
     }
 
     @Override
     public boolean isNull(long columnIndex) {
-        return nativeIsNull(nativePointer, columnIndex);
+        return nativeIsNull(nativePtr, columnIndex);
     }
 
     /**
@@ -261,7 +274,7 @@ public boolean isNull(long columnIndex) {
     public void setNull(long columnIndex) {
         parent.checkImmutable();
         getTable().checkDuplicatedNullForPrimaryKeyValue(columnIndex, getIndex());
-        nativeSetNull(nativePointer, columnIndex);
+        nativeSetNull(nativePtr, columnIndex);
     }
 
     /**
@@ -275,12 +288,12 @@ public CheckedRow convertToChecked() {
 
     @Override
     public boolean isAttached() {
-        return nativePointer != 0 && nativeIsAttached(nativePointer);
+        return nativePtr != 0 && nativeIsAttached(nativePtr);
     }
 
     @Override
     public boolean hasColumn(String fieldName) {
-        return nativeHasColumn(nativePointer, fieldName);
+        return nativeHasColumn(nativePtr, fieldName);
     }
 
     protected native long nativeGetColumnCount(long nativeTablePtr);
@@ -307,9 +320,9 @@ public boolean hasColumn(String fieldName) {
     protected native void nativeSetByteArray(long nativePtr, long columnIndex, byte[] data);
     protected native void nativeSetLink(long nativeRowPtr, long columnIndex, long value);
     protected native void nativeNullifyLink(long nativeRowPtr, long columnIndex);
-    static native void nativeClose(long nativeRowPtr);
     protected native boolean nativeIsAttached(long nativeRowPtr);
     protected native boolean nativeHasColumn(long nativeRowPtr, String columnName);
     protected native boolean nativeIsNull(long nativeRowPtr, long columnIndex);
     protected native void nativeSetNull(long nativeRowPtr, long columnIndex);
+    private static native long nativeGetFinalizerPtr();
 }
diff --git a/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java b/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java
index f94c7859d6..5c7b0e4f08 100644
--- a/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java
+++ b/realm/realm-library/src/main/java/io/realm/log/RealmLogger.java
@@ -16,13 +16,13 @@
 
 package io.realm.log;
 
-import io.realm.internal.KeepMember;
+import io.realm.internal.Keep;
 
 /**
  * Interface for custom loggers that can be registered at {@link RealmLog#add(RealmLogger)}.
  * The different log levels are described in {@link LogLevel}.
  */
-@KeepMember
+@Keep // This interface is used as a parameter type of a native method in SharedRealm.java
 public interface RealmLogger {
 
     /**
@@ -34,6 +34,5 @@
      * @param throwable optional exception to log.
      * @param message optional additional message.
      */
-    @KeepMember
     void log(int level, String tag, Throwable throwable, String message);
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java b/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
index 38b0c0c1cb..9e8abe33a4 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
@@ -19,7 +19,6 @@
 import android.content.Context;
 import android.content.pm.PackageInfo;
 
-import io.realm.android.SharedPrefsUserStore;
 import io.realm.annotations.Beta;
 import io.realm.internal.Keep;
 
@@ -43,7 +42,7 @@ public static void init(Context context) {
         }
 
         // Configure default UserStore
-        UserStore userStore = new SharedPrefsUserStore(context);
+        UserStore userStore = new RealmFileUserStore(context.getFilesDir().getPath());
 
         SyncManager.init(appId, userStore);
     }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFileUserStore.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFileUserStore.java
new file mode 100644
index 0000000000..0d89455e30
--- /dev/null
+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFileUserStore.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+
+/**
+ * A User Store backed by a Realm file to store user.
+ */
+public class RealmFileUserStore implements UserStore {
+    protected RealmFileUserStore(String path) {
+        nativeConfigureMetaDataSystem(path);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void put(SyncUser user) {
+        String userJson = user.toJson();
+        // create or update token (userJson) using identity
+        nativeUpdateOrCreateUser(user.getIdentity(), userJson, user.getSyncUser().getAuthenticationUrl().toString());
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public SyncUser get() {
+        String userJson = nativeGetCurrentUser();
+        if (userJson != null) {
+            return SyncUser.fromJson(userJson);
+        }
+        return null;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void remove() {
+        nativeLogoutCurrentUser();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Collection<SyncUser> allUsers() {
+        String[] allUsers = nativeGetAllUsers();
+        if (allUsers != null && allUsers.length > 0) {
+            ArrayList<SyncUser> users = new ArrayList<SyncUser>(allUsers.length);
+            for (String userJson : allUsers) {
+                users.add(SyncUser.fromJson(userJson));
+            }
+            return users;
+        }
+        return Collections.emptyList();
+    }
+
+    // init and load the Metadata Realm containing SyncUsers
+    protected static native void nativeConfigureMetaDataSystem(String baseFile);
+
+    // return json data (token) of the current logged in user
+    protected static native String nativeGetCurrentUser();
+
+    protected static native String[] nativeGetAllUsers();
+
+    protected static native void nativeUpdateOrCreateUser(String identity, String jsonToken, String url);
+
+    protected static native void nativeLogoutCurrentUser();
+
+    // Should only be called for tests
+    static native void nativeResetForTesting();
+
+}
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index d268398d76..bc630cf99b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -71,7 +71,7 @@
  * {@link Realm#getDefaultInstance()} like ordinary unsynchronized Realms.
  */
 @Beta
-public final class SyncConfiguration extends RealmConfiguration {
+public class SyncConfiguration extends RealmConfiguration {
 
     public static final int PORT_REALM = 80;
     public static final int PORT_REALMS = 443;
@@ -177,8 +177,17 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder();
-        // TODO
+        StringBuilder stringBuilder = new StringBuilder(super.toString());
+        stringBuilder.append("\n");
+        stringBuilder.append("serverUrl: " + serverUrl);
+        stringBuilder.append("\n");
+        stringBuilder.append("user: " + user);
+        stringBuilder.append("\n");
+        stringBuilder.append("syncPolicy: " + syncPolicy);
+        stringBuilder.append("\n");
+        stringBuilder.append("errorHandler: " + errorHandler);
+        stringBuilder.append("\n");
+        stringBuilder.append("deleteRealmOnLogout: " + deleteRealmOnLogout);
         return stringBuilder.toString();
     }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 59341b4fb7..0fd80867e4 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -43,7 +43,7 @@
  */
 @Keep
 @Beta
-public final class SyncManager {
+public class SyncManager {
 
     /**
      * APP ID sent to the Realm Object Server. Is automatically initialized to the package name for the app.
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index 64db6280f7..0aabe1e5d9 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -40,7 +40,7 @@
  */
 @Keep
 @Beta
-public final class SyncSession {
+public class SyncSession {
 
     private final ObjectServerSession osSession;
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 808ae04c0a..a892c980bb 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -44,6 +44,8 @@
 import io.realm.internal.objectserver.ObjectServerUser;
 import io.realm.internal.objectserver.Token;
 import io.realm.log.RealmLog;
+import io.realm.permissions.PermissionChange;
+import io.realm.permissions.PermissionModule;
 
 /**
  * @Beta
@@ -60,6 +62,7 @@
 @Beta
 public class SyncUser {
 
+    private SyncConfiguration managementRealmConfig;
     private final ObjectServerUser syncUser;
 
     private SyncUser(ObjectServerUser user) {
@@ -74,7 +77,7 @@ private SyncUser(ObjectServerUser user) {
      *         been invalidated.
      */
     public static SyncUser currentUser() {
-        SyncUser user = SyncManager.getUserStore().get(UserStore.CURRENT_USER_KEY);
+        SyncUser user = SyncManager.getUserStore().get();
         if (user != null && user.isValid()) {
             return user;
         }
@@ -111,7 +114,7 @@ public static SyncUser fromJson(String user) {
         try {
             JSONObject obj = new JSONObject(user);
             URL authUrl = new URL(obj.getString("authUrl"));
-            Token userToken = Token.from(obj.getJSONObject("userToken"));
+            Token userToken = Token.from(obj.getJSONObject("userToken"));//TODO rename to refresh_token
             ObjectServerUser syncUser = new ObjectServerUser(userToken, authUrl);
             JSONArray realmTokens = obj.getJSONArray("realms");
             for (int i = 0; i < realmTokens.length(); i++) {
@@ -155,7 +158,7 @@ public static SyncUser login(final SyncCredentials credentials, final String aut
                 ObjectServerUser syncUser = new ObjectServerUser(result.getRefreshToken(), authUrl);
                 SyncUser user = new SyncUser(syncUser);
                 RealmLog.info("Succeeded authenticating user.\n%s", user);
-                SyncManager.getUserStore().put(UserStore.CURRENT_USER_KEY, user);
+                SyncManager.getUserStore().put(user);
                 SyncManager.notifyUserLoggedIn(user);
                 return user;
             } else {
@@ -262,9 +265,7 @@ public void logout() {
             // FIXME We still need to cache the user token so it can be revoked.
             syncUser.clearTokens();
 
-            if (SyncUser.this.equals(SyncUser.currentUser())) {
-                SyncManager.getUserStore().remove(UserStore.CURRENT_USER_KEY);
-            }
+            SyncManager.getUserStore().remove();
 
             // Delete all Realms if needed.
             for (ObjectServerUser.AccessDescription desc : syncUser.getRealms()) {
@@ -354,6 +355,41 @@ public String getAccessToken() {
         return (userToken != null) ? userToken.value() : null;
     }
 
+    /**
+     * Returns an instance of the Management Realm owned by the user.
+     * <p>
+     * This Realm can be used to control access and permissions for Realms owned by the user. This includes
+     * giving other users access to Realms.
+     *
+     * @see <a href="https://realm.io/docs/realm-object-server/#permissions">How to control permissions</a>
+     */
+    public Realm getManagementRealm() {
+        synchronized (this) {
+            if (managementRealmConfig == null) {
+                String managementUrl = getManagementRealmUrl(syncUser.getAuthenticationUrl());
+                managementRealmConfig = new SyncConfiguration.Builder(this, managementUrl)
+                        .modules(new PermissionModule())
+                        .build();
+            }
+        }
+
+        return Realm.getInstance(managementRealmConfig);
+    }
+
+    // Creates the URL to the permission Realm based on the authentication URL.
+    private static String getManagementRealmUrl(URL authUrl) {
+        String scheme = "realm";
+        if (authUrl.getProtocol().equalsIgnoreCase("https")) {
+            scheme = "realms";
+        }
+        try {
+            return new URI(scheme, authUrl.getUserInfo(), authUrl.getHost(), authUrl.getPort(),
+                    "/~/__management", null, null).toString();
+        } catch (URISyntaxException e) {
+            throw new IllegalArgumentException("Could not create URL to the management Realm", e);
+        }
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
@@ -370,6 +406,17 @@ public int hashCode() {
         return syncUser.hashCode();
     }
 
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder("{");
+        sb.append("UserId: ").append(syncUser.getIdentity());
+        sb.append(", AuthUrl: ").append(syncUser.getAuthenticationUrl());
+        sb.append(", IsValid: ").append(isValid());
+        sb.append(", Sessions: ").append(syncUser.getSessions().size());
+        sb.append("}");
+        return sb.toString();
+    }
+
     // Expose internal representation for other package protected classes
     ObjectServerUser getSyncUser() {
         return syncUser;
diff --git a/realm/realm-library/src/objectServer/java/io/realm/UserStore.java b/realm/realm-library/src/objectServer/java/io/realm/UserStore.java
index 528cae598b..052f3759b9 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/UserStore.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/UserStore.java
@@ -18,7 +18,6 @@
 
 import java.util.Collection;
 
-import io.realm.android.SharedPrefsUserStore;
 import io.realm.annotations.Beta;
 
 /**
@@ -29,37 +28,37 @@
  * be called on the Main Thread. All implementations of this interface should be thread safe.
  *
  * @see SyncManager#setUserStore(UserStore)
- * @see SharedPrefsUserStore
+ * @see RealmFileUserStore
  */
 @Beta
 public interface UserStore {
 
-    String CURRENT_USER_KEY = "realm$currentUser";
-
     /**
-     * Saves a {@link SyncUser} object under the given key. If another user already exists, it will be replaced.
+     * Saves a {@link SyncUser} object. If another user already exists, it will be replaced.
+     *  {@link SyncUser#getIdentity()} is used as a unique identifier of a given {@link SyncUser}.
      *
-     * @param key key used to store the User.
      * @param user {@link SyncUser} object to store.
-     * @return The previous user saved with this key or {@code null} if no user was replaced.
-     *
      */
-    SyncUser put(String key, SyncUser user);
+    void put(SyncUser user);
 
     /**
-     * Retrieves the {@link SyncUser} with the given key.
+     * Retrieves the current {@link SyncUser}.
      *
-     * @param key {@link SyncUser} saved under the given key or {@code null} if no user exists for that key.
+     * For now, current User cannot be called if more that one valid, logged in user
+     * exists, it will throw an exception.
      */
-    SyncUser get(String key);
+    //TODO when ObjectStore integration of SyncManager is completed & multiple
+    //     users are allowed, consider passing the User identity to lookup apply
+    //     the operation to a particular user.
+    SyncUser get();
 
     /**
-     * Removes the user with the given key from the store.
-     *
-     * @param key key for the user to remove.
-     * @return {@link SyncUser} that was removed or {@code null} if no user matched the key.
+     * Removes the current user from the store.
      */
-    SyncUser remove(String key);
+    //TODO when ObjectStore integration of SyncManager is completed & multiple
+    //     users are allowed, consider passing the User identity to lookup apply
+    //     the operation to a particular user.
+    void remove();
 
     /**
      * Returns a collection of all users saved in the User store.
@@ -67,10 +66,4 @@
      * @return Collection of all users. If no users exist, an empty collection is returned.
      */
     Collection<SyncUser> allUsers();
-
-
-    /**
-     * Removes all saved users.
-     */
-    void clear();
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/android/SharedPrefsUserStore.java b/realm/realm-library/src/objectServer/java/io/realm/android/SharedPrefsUserStore.java
deleted file mode 100644
index 31d4b2b1b5..0000000000
--- a/realm/realm-library/src/objectServer/java/io/realm/android/SharedPrefsUserStore.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * Copyright 2016 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.android;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Map;
-import java.util.Set;
-
-import io.realm.SyncUser;
-import io.realm.UserStore;
-
-/**
- * A User Store backed by a SharedPreferences file.
- */
-public class SharedPrefsUserStore implements UserStore {
-
-    private final SharedPreferences sp;
-    private SyncUser cachedCurrentUser; // Keep a quick reference to the current user
-
-    public SharedPrefsUserStore(Context context) {
-        sp = context.getSharedPreferences("realm_object_server_users", Context.MODE_PRIVATE);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public SyncUser put(String key, SyncUser user) {
-        String previousUser = sp.getString(key, null);
-        SharedPreferences.Editor editor = sp.edit();
-        editor.putString(key, user.toJson());
-        // Optimistically save. If the user isn't saved due to a process crash it isn't dangerous.
-        editor.apply();
-
-        if (UserStore.CURRENT_USER_KEY.equals(key)) {
-            cachedCurrentUser = user;
-        }
-
-        if (previousUser != null) {
-            return SyncUser.fromJson(previousUser);
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public SyncUser get(String key) {
-        if (UserStore.CURRENT_USER_KEY.equals(key) && cachedCurrentUser != null) {
-            return cachedCurrentUser;
-        }
-
-        String userData = sp.getString(key, "");
-        if (userData.equals("")) {
-            return null;
-        }
-
-        SyncUser user = SyncUser.fromJson(userData);
-        if (UserStore.CURRENT_USER_KEY.equals(key)) {
-            cachedCurrentUser = user;
-        }
-        return user;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public SyncUser remove(String key) {
-        String currentUser = sp.getString(key, null);
-        SharedPreferences.Editor editor = sp.edit();
-        editor.putString(key, null);
-        editor.apply();
-
-        if (UserStore.CURRENT_USER_KEY.equals(key) && cachedCurrentUser != null) {
-            cachedCurrentUser = null;
-        }
-
-        if (currentUser != null) {
-            return SyncUser.fromJson(currentUser);
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public Collection<SyncUser> allUsers() {
-        Map<String, ?> all = sp.getAll();
-        ArrayList<SyncUser> users = new ArrayList<SyncUser>(all.size());
-        for (Object userJson : all.values()) {
-            users.add(SyncUser.fromJson((String) userJson));
-        }
-        return users;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void clear() {
-        Set<String> all = sp.getAll().keySet();
-        SharedPreferences.Editor editor = sp.edit();
-        for (String key : all) {
-            editor.remove(key);
-        }
-        editor.apply();
-    }
-}
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/syncpolicy/AutomaticSyncPolicy.java b/realm/realm-library/src/objectServer/java/io/realm/internal/syncpolicy/AutomaticSyncPolicy.java
index fc01484223..6f4b784181 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/syncpolicy/AutomaticSyncPolicy.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/syncpolicy/AutomaticSyncPolicy.java
@@ -86,4 +86,22 @@ private boolean rebind(ObjectServerSession session) {
             return true;
         }
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AutomaticSyncPolicy that = (AutomaticSyncPolicy) o;
+
+        if (recurringErrors != that.recurringErrors) return false;
+        return lastError != null ? lastError.equals(that.lastError) : that.lastError == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = lastError != null ? lastError.hashCode() : 0;
+        result = 31 * result + recurringErrors;
+        return result;
+    }
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/permissions/PermissionChange.java b/realm/realm-library/src/objectServer/java/io/realm/permissions/PermissionChange.java
new file mode 100644
index 0000000000..e8d402d259
--- /dev/null
+++ b/realm/realm-library/src/objectServer/java/io/realm/permissions/PermissionChange.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.permissions;
+
+import java.util.Date;
+import java.util.UUID;
+
+import io.realm.RealmObject;
+import io.realm.annotations.PrimaryKey;
+import io.realm.annotations.Required;
+
+/**
+ * This class is used for requesting changes to a Realm's permissions.
+ *
+ * @see <a href="https://realm.io/docs/realm-object-server/#permissions">Controlling Permissions</a>
+ */
+public class PermissionChange extends RealmObject {
+
+    // Base fields
+    @PrimaryKey
+    @Required
+    private String id = UUID.randomUUID().toString();
+    @Required
+    private Date createdAt = new Date();
+    @Required
+    private Date updatedAt = new Date();
+    private Integer statusCode = null; // null=not processed, 0=success, >0=error
+    private String statusMessage;
+
+    @Required
+    private String realmUrl;
+    @Required
+    private String userId;
+    private Boolean mayRead = false;
+    private Boolean mayWrite = false;
+    private Boolean mayManage = false;
+
+    public PermissionChange() {
+        // Default constructor required by Realm
+    }
+
+    /**
+     * Construct a Permission Change Object.
+     *
+     * @param realmUrl Realm to change permissions for. Use {@code *} to change the permissions of all Realms.
+     * @param userId User or users to effect. Use {@code *} to change the permissions for all users.
+     * @param mayRead Define read access. {@code true} or {@code false} to request this new value. {@code null} to
+     *                keep current value.
+     * @param mayWrite Define write access. {@code true} or {@code false} to request this new value. {@code null} to
+     *                 keep current value.
+     * @param mayManage Define manage access. {@code true} or {@code false} to request this new value. {@code null} to
+     *                  keep current value.
+     *
+     * @see <a href="https://realm.io/docs/realm-object-server/#permissions">Controlling Permissions</a>
+     */
+    public PermissionChange(String realmUrl, String userId, Boolean mayRead, Boolean mayWrite, Boolean mayManage) {
+        this.realmUrl = realmUrl;
+        this.userId = userId;
+        this.mayRead = mayRead;
+        this.mayWrite = mayWrite;
+        this.mayManage = mayManage;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public Date getCreatedAt() {
+        return createdAt;
+    }
+
+    public Date getUpdatedAt() {
+        return updatedAt;
+    }
+
+    /**
+     * Returns the status code for this change.
+     *
+     * @return {@code null} if not yet processed. {@code 0} if successful, {@code >0} if an error happened. See {@link #getStatusMessage()}.
+     */
+    public Integer getStatusCode() {
+        return statusCode;
+    }
+
+    public String getStatusMessage() {
+        return statusMessage;
+    }
+
+    public String getRealmUrl() {
+        return realmUrl;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public Boolean mayRead() {
+        return mayRead;
+    }
+
+    public Boolean mayWrite() {
+        return mayWrite;
+    }
+
+    public Boolean mayManage() {
+        return mayManage;
+    }
+}
diff --git a/realm/realm-library/src/objectServer/java/io/realm/permissions/PermissionModule.java b/realm/realm-library/src/objectServer/java/io/realm/permissions/PermissionModule.java
new file mode 100644
index 0000000000..5c245e3215
--- /dev/null
+++ b/realm/realm-library/src/objectServer/java/io/realm/permissions/PermissionModule.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.permissions;
+
+import io.realm.annotations.RealmModule;
+
+@RealmModule(library = true, classes = { PermissionChange.class })
+public class PermissionModule {
+}
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
index d2cf5bf6ed..9b15ae11e3 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/HttpUtils.java
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 
+import io.realm.log.RealmLog;
 import okhttp3.Headers;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
@@ -44,10 +45,10 @@ public static void startSyncServer() throws Exception {
 
         Headers responseHeaders = response.headers();
         for (int i = 0; i < responseHeaders.size(); i++) {
-            System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
+            RealmLog.debug(responseHeaders.name(i) + ": " + responseHeaders.value(i));
         }
 
-        System.out.println(response.body().string());
+        RealmLog.debug(response.body().string());
 
         // FIXME: Server ready checking should be done in the control server side!
         if (!waitAuthServerReady()) {
@@ -58,7 +59,7 @@ public static void startSyncServer() throws Exception {
 
     // Checking the server
     private static boolean waitAuthServerReady() throws InterruptedException {
-        int retryTimes = 20;
+        int retryTimes = 50;
         Request request = new Request.Builder()
                 .url(Constants.AUTH_SERVER_URL)
                 .build();
@@ -69,9 +70,10 @@ private static boolean waitAuthServerReady() throws InterruptedException {
                 if (response.isSuccessful()) {
                     return true;
                 }
+                RealmLog.error("Error response from auth server: %s", response.toString());
             } catch (IOException e) {
-                e.printStackTrace();
-                Thread.sleep(50);
+                RealmLog.error(e);
+                Thread.sleep(100);
             }
             retryTimes--;
         }
@@ -89,9 +91,9 @@ public static void stopSyncServer() throws Exception {
 
         Headers responseHeaders = response.headers();
         for (int i = 0; i < responseHeaders.size(); i++) {
-            System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
+            RealmLog.debug(responseHeaders.name(i) + ": " + responseHeaders.value(i));
         }
 
-        System.out.println(response.body().string());
+        RealmLog.debug(response.body().string());
     }
 }
diff --git a/tools/sync_test_server/Dockerfile b/tools/sync_test_server/Dockerfile
index e659183e3b..f733015ca4 100644
--- a/tools/sync_test_server/Dockerfile
+++ b/tools/sync_test_server/Dockerfile
@@ -5,13 +5,17 @@ ARG ROS_DE_VERSION
 # Add realm repo
 RUN apt-get update -qq \
     && apt-get install -y curl npm \
-    && curl -s https://packagecloud.io/install/repositories/realm/realm/script.deb.sh | bash \
-    && npm install winston temp httpdispatcher
+    && curl -s https://packagecloud.io/install/repositories/realm/realm/script.deb.sh | bash
+
+# ROS npm dependencies
+RUN npm init -y
+RUN npm install winston temp httpdispatcher@1.0.0
+
 COPY keys/private.pem keys/public.pem configuration.yml /
 COPY ros-testing-server.js /usr/bin/
 # Install realm object server
 RUN apt-get update -qq \
-    && apt-get install -y realm-object-server-de=$ROS_DE_VERSION \
+    && apt-get install -y realm-object-server-developer=$ROS_DE_VERSION \
     && apt-get clean
 
 CMD /usr/bin/ros-testing-server.js /tmp/ros-testing-server.log
diff --git a/version.txt b/version.txt
index 31941db520..a9d981d17e 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-2.2.0-SNAPSHOT
+2.3.0-SNAPSHOT
