diff --git a/CHANGELOG.md b/CHANGELOG.md
index 61977723f0..d24e74b28c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 ## 5.4.0 (YYYY-MM-DD)
 
+### Enhancements
+
+* Removing a ChangeListener on invalid objects or `RealmResults` should warn instead of throwing (fixes #5855).
+
 ### Credits
 
 * Thanks to @kageiit for removing Groovy from the Realm Transformer (#3971).
@@ -28,6 +32,8 @@
 * [ObjectServer] `Realm.compactRealm(config)` now works on synchronized Realms (#5937).
 * [ObjectServer] `SyncConfiguration.compactOnLaunch()` and `SyncConfiguration.compactOnLaunch(callback)` has been added (#5937).
 * Added `RealmQuery.getRealm()`, `RealmResults.getRealm()`, `RealmList.getRealm()` and `OrderedRealmCollectionSnapshot.getRealm()` (#5997).
+* Removing a ChangeListener on invalid objects or `RealmResults` should warn instead of throwing (fixes #5855).
+
 
 ### Internal
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
index 4ac5b1521a..740dddad4f 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
@@ -19,6 +19,7 @@
 import android.support.test.rule.UiThreadTestRule;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -29,11 +30,14 @@
 import io.realm.entities.BacklinksSource;
 import io.realm.entities.BacklinksTarget;
 import io.realm.entities.Cat;
+import io.realm.entities.StringOnly;
 import io.realm.entities.pojo.AllTypesRealmModel;
+import io.realm.log.RealmLog;
 import io.realm.rule.RunInLooperThread;
 import io.realm.rule.RunTestInLooperThread;
 import io.realm.rule.TestRealmConfigurationFactory;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -271,7 +275,8 @@ public void onChange(RealmResults<BacklinksTarget> backlinksTargets) {
     // 1. adding a listener if on the parent
     // 2. modify child
     // 3. listener is triggered (forward link)
-    @Test@RunTestInLooperThread
+    @Test
+    @RunTestInLooperThread
     public void listenerOnParentChangeChild() {
         final long[] nCalls = {0};
         final Realm realm = Realm.getInstance(looperThread.getConfiguration());
@@ -299,4 +304,53 @@ public void onChange(RealmResults<BacklinksSource> backlinksSources) {
         realm.close();
         looperThread.testComplete();
     }
+
+    @Test
+    @RunTestInLooperThread
+    public void removeListenerOnInvalidObjectShouldWarn() {
+        realm = Realm.getInstance(realmConfig);
+        RealmChangeListener<StringOnly> listener = realmModel -> {
+        };
+        RealmChangeListener<RealmResults<StringOnly>> listenerAll = realmModel -> {
+        };
+
+        realm.beginTransaction();
+        StringOnly stringOnly = realm.createObject(StringOnly.class);
+        realm.commitTransaction();
+
+        stringOnly.addChangeListener(listener);
+
+        RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
+        all.addChangeListener(listenerAll);
+
+        realm.close();
+
+        // add a custom logger to capture expected warning message
+        TestHelper.TestLogger testLogger = new TestHelper.TestLogger();
+        RealmLog.add(testLogger);
+
+        stringOnly.removeChangeListener(listener);
+        assertThat(testLogger.message, CoreMatchers.containsString(
+                "Calling removeChangeListener on a closed Realm " + realm.getPath() + ", make sure to close all listeners before closing the Realm."));
+
+        testLogger.message = "";
+        stringOnly.removeAllChangeListeners();
+        assertThat(testLogger.message, CoreMatchers.containsString(
+                "Calling removeChangeListener on a closed Realm " + realm.getPath() + ", make sure to close all listeners before closing the Realm."));
+
+
+        testLogger.message = "";
+        all.removeChangeListener(listenerAll);
+        assertThat(testLogger.message, CoreMatchers.containsString(
+                "Calling removeChangeListener on a closed Realm " + realm.getPath() + ", make sure to close all listeners before closing the Realm."));
+
+        testLogger.message = "";
+        all.removeAllChangeListeners();
+        assertThat(testLogger.message, CoreMatchers.containsString(
+                "Calling removeChangeListener on a closed Realm " + realm.getPath() + ", make sure to close all listeners before closing the Realm."));
+
+        RealmLog.remove(testLogger);
+
+        looperThread.testComplete();
+    }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index b3ca5ba035..8ab30fc5a1 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -3715,50 +3715,38 @@ public void run() throws Exception {
     }
 
     @Test
-    public void removeChangeListenerThrowExceptionOnNonLooperThread() {
+    public void removeChangeListenerThrowExceptionOnWrongThread() {
         final CountDownLatch signalTestFinished = new CountDownLatch(1);
-        Thread thread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                Realm realm = Realm.getInstance(realmConfig);
-                try {
-                    realm.removeChangeListener(new RealmChangeListener<Realm>() {
-                        @Override
-                        public void onChange(Realm object) {
-                        }
-                    });
-                    fail("Should not be able to invoke removeChangeListener");
-                } catch (IllegalStateException ignored) {
-                } finally {
-                    realm.close();
-                    signalTestFinished.countDown();
-                }
+        Realm realm = Realm.getInstance(realmConfig);
+        Thread thread = new Thread(() -> {
+            try {
+                realm.removeChangeListener(object -> {});
+                fail("Should not be able to invoke removeChangeListener");
+            } catch (IllegalStateException ignored) {
+            } finally {
+                signalTestFinished.countDown();
             }
         });
         thread.start();
-
         try {
             TestHelper.awaitOrFail(signalTestFinished);
         } finally {
             thread.interrupt();
+            realm.close();
         }
     }
 
     @Test
-    public void removeAllChangeListenersThrowExceptionOnNonLooperThread() {
+    public void removeAllChangeListenersThrowExceptionOnWrongThreadThread() {
         final CountDownLatch signalTestFinished = new CountDownLatch(1);
-        Thread thread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                Realm realm = Realm.getInstance(realmConfig);
-                try {
-                    realm.removeAllChangeListeners();
-                    fail("Should not be able to invoke removeChangeListener");
-                } catch (IllegalStateException ignored) {
-                } finally {
-                    realm.close();
-                    signalTestFinished.countDown();
-                }
+        Realm realm = Realm.getInstance(realmConfig);
+        Thread thread = new Thread(() -> {
+            try {
+                realm.removeAllChangeListeners();
+                fail("Should not be able to invoke removeChangeListener");
+            } catch (IllegalStateException ignored) {
+            } finally {
+                signalTestFinished.countDown();
             }
         });
         thread.start();
@@ -3767,6 +3755,7 @@ public void run() {
             TestHelper.awaitOrFail(signalTestFinished);
         } finally {
             thread.interrupt();
+            realm.close();
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/BaseRealm.java b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
index 2ec27f65bd..83b0bd14bd 100644
--- a/realm/realm-library/src/main/java/io/realm/BaseRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
@@ -51,9 +51,7 @@
 import io.realm.internal.async.RealmThreadPoolExecutor;
 import io.realm.log.RealmLog;
 import io.realm.sync.permissions.ObjectPrivileges;
-import io.realm.sync.permissions.RealmPermissions;
 import io.realm.sync.permissions.RealmPrivileges;
-import io.realm.sync.permissions.Role;
 
 /**
  * Base class for all Realm instances.
@@ -227,8 +225,10 @@ public boolean isInTransaction() {
         if (listener == null) {
             throw new IllegalArgumentException("Listener should not be null");
         }
-        checkIfValid();
-        sharedRealm.capabilities.checkCanDeliverNotification(LISTENER_NOT_ALLOWED_MESSAGE);
+        if (isClosed()) {
+            RealmLog.warn("Calling removeChangeListener on a closed Realm %s, " +
+                    "make sure to close all listeners before closing the Realm.", configuration.getPath());
+        }
         //noinspection unchecked
         sharedRealm.realmNotifier.removeChangeListener((T) this, listener);
     }
@@ -260,8 +260,10 @@ public boolean isInTransaction() {
      * @see io.realm.RealmChangeListener
      */
     protected void removeAllListeners() {
-        checkIfValid();
-        sharedRealm.capabilities.checkCanDeliverNotification("removeListener cannot be called on current thread.");
+        if (isClosed()) {
+            RealmLog.warn("Calling removeChangeListener on a closed Realm %s, " +
+                    "make sure to close all listeners before closing the Realm.", configuration.getPath());
+        }
         sharedRealm.realmNotifier.removeChangeListeners(this);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObject.java b/realm/realm-library/src/main/java/io/realm/RealmObject.java
index de4a42443f..06b79e8dfd 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObject.java
@@ -25,6 +25,7 @@
 import io.realm.internal.ManagableObject;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
+import io.realm.log.RealmLog;
 import io.realm.rx.ObjectChange;
 
 /**
@@ -584,8 +585,10 @@ public final void removeChangeListener(RealmChangeListener listener) {
         if (object instanceof RealmObjectProxy) {
             RealmObjectProxy proxy = (RealmObjectProxy) object;
             BaseRealm realm = proxy.realmGet$proxyState().getRealm$realm();
-            realm.checkIfValid();
-            realm.sharedRealm.capabilities.checkCanDeliverNotification(BaseRealm.LISTENER_NOT_ALLOWED_MESSAGE);
+            if (realm.isClosed()) {
+                RealmLog.warn("Calling removeChangeListener on a closed Realm %s, " +
+                        "make sure to close all listeners before closing the Realm.", realm.configuration.getPath());
+            }
             //noinspection unchecked
             proxy.realmGet$proxyState().removeChangeListener(listener);
         } else {
@@ -623,8 +626,10 @@ public final void removeAllChangeListeners() {
         if (object instanceof RealmObjectProxy) {
             RealmObjectProxy proxy = (RealmObjectProxy) object;
             BaseRealm realm = proxy.realmGet$proxyState().getRealm$realm();
-            realm.checkIfValid();
-            realm.sharedRealm.capabilities.checkCanDeliverNotification(BaseRealm.LISTENER_NOT_ALLOWED_MESSAGE);
+            if (realm.isClosed()) {
+                RealmLog.warn("Calling removeChangeListener on a closed Realm %s, " +
+                        "make sure to close all listeners before closing the Realm.", realm.configuration.getPath());
+            }
             proxy.realmGet$proxyState().removeAllChangeListeners();
         } else {
             throw new IllegalArgumentException("Cannot remove listeners from this unmanaged RealmObject (created outside of Realm)");
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index a2596932d2..0698d6571d 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -29,6 +29,7 @@
 import io.realm.internal.Row;
 import io.realm.internal.Table;
 import io.realm.internal.UncheckedRow;
+import io.realm.log.RealmLog;
 import io.realm.rx.CollectionChange;
 
 /**
@@ -169,7 +170,7 @@ public boolean load() {
      * {@link android.app.IntentService} thread.
      */
     public void addChangeListener(RealmChangeListener<RealmResults<E>> listener) {
-        checkForAddRemoveListener(listener, true);
+        checkForAddListener(listener);
         osResults.addListener(this, listener);
     }
 
@@ -207,18 +208,29 @@ public void addChangeListener(RealmChangeListener<RealmResults<E>> listener) {
      * {@link android.app.IntentService} thread.
      */
     public void addChangeListener(OrderedRealmCollectionChangeListener<RealmResults<E>> listener) {
-        checkForAddRemoveListener(listener, true);
+        checkForAddListener(listener);
         osResults.addListener(this, listener);
     }
 
-    private void checkForAddRemoveListener(@Nullable Object listener, boolean checkListener) {
-        if (checkListener && listener == null) {
+    private void checkForAddListener(@Nullable Object listener) {
+        if (listener == null) {
             throw new IllegalArgumentException("Listener should not be null");
         }
         realm.checkIfValid();
         realm.sharedRealm.capabilities.checkCanDeliverNotification(BaseRealm.LISTENER_NOT_ALLOWED_MESSAGE);
     }
 
+    private void checkForRemoveListener(@Nullable Object listener, boolean checkListener) {
+        if (checkListener && listener == null) {
+            throw new IllegalArgumentException("Listener should not be null");
+        }
+
+        if (realm.isClosed()) {
+            RealmLog.warn("Calling removeChangeListener on a closed Realm %s, " +
+                    "make sure to close all listeners before closing the Realm.", realm.configuration.getPath());
+        }
+    }
+
     /**
      * Removes all user-defined change listeners.
      *
@@ -226,7 +238,7 @@ private void checkForAddRemoveListener(@Nullable Object listener, boolean checkL
      * @see io.realm.RealmChangeListener
      */
     public void removeAllChangeListeners() {
-        checkForAddRemoveListener(null, false);
+        checkForRemoveListener(null, false);
         osResults.removeAllListeners();
     }
 
@@ -239,7 +251,7 @@ public void removeAllChangeListeners() {
      * @see io.realm.RealmChangeListener
      */
     public void removeChangeListener(RealmChangeListener<RealmResults<E>> listener) {
-        checkForAddRemoveListener(listener, true);
+        checkForRemoveListener(listener, true);
         osResults.removeListener(this, listener);
     }
 
@@ -252,7 +264,7 @@ public void removeChangeListener(RealmChangeListener<RealmResults<E>> listener)
      * @see io.realm.RealmChangeListener
      */
     public void removeChangeListener(OrderedRealmCollectionChangeListener<RealmResults<E>> listener) {
-        checkForAddRemoveListener(listener, true);
+        checkForRemoveListener(listener, true);
         osResults.removeListener(this, listener);
     }
 
