diff --git a/CHANGELOG.md b/CHANGELOG.md
index 55ffbf9fe6..fb7f7f0c09 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,9 +1,27 @@
+## 5.2.0 (YYYY-MM-DD)
+
+The feature previously named Partial Sync is now called Query-Based Sync and is now the default mode when synchronizing Realms.
+This has impacted a number of API's. See below for the details.
+
+### Deprecated
+
+* [ObjectServer] `SyncConfiguration.automatic()` has been removed in favour of `SyncUser.getDefaultConfiguration()`.
+* [ObjectServer] `new SyncConfiguration.Builder(user, url)` has been deprecated in favour of `SyncUser.createConfiguration(url)`. NOTE: Creating configurations using `SyncUser` will default to using query-based Realms, while creating them using `new SyncConfiguration.Builder(user, url)` will default to fully synchronized Realms.
+* [ObjectServer] With query-based sync being the default `SyncConfiguration.Builder.partialRealm()` has been deprecated. Use ``SyncConfiguration.Builder.fullSynchronization()` if you want full synchronisation instead.
+
+### Enhancements
+
+* [ObjectServer] Added `SyncUser.createConfiguration(url)`. Realms created this way are query-based Realms by default.
+* [ObjectServer] Added `SyncUser.getDefaultConfiguration()`.
+
+
 ## 5.1.1 (YYYY-MM-DD)
 
 ### Enhancements
 
 * Improved speed and allocations when parsing field descriptions in queries (#5547).
 
+
 ## 5.1.0 (2018-04-25)
 
 ### Enhancements
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
index 7c156bf79d..21471813c2 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
@@ -68,8 +68,7 @@
     @Before
     public void setUp() {
         user = createTestUser();
-        configuration = new SyncConfiguration.Builder(user, REALM_URI)
-                .partialRealm()
+        configuration = user.createConfiguration(REALM_URI)
                 .modules(new TestModule())
                 .build();
         realm = Realm.getInstance(configuration);
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
index c9caeaedc9..458807bab3 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
@@ -65,7 +65,7 @@
     @Before
     public void setUp() {
         user = createTestUser();
-        configuration = new SyncConfiguration.Builder(user, REALM_URI).addModule(new ObjectPermissionsModule()).build();
+        configuration = user.createConfiguration(REALM_URI).addModule(new ObjectPermissionsModule()).build();
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
index bf05c006ab..ae0d52c770 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
@@ -20,6 +20,7 @@
 import android.support.test.runner.AndroidJUnit4;
 
 import org.junit.After;
+import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
@@ -61,12 +62,17 @@
     @Rule
     public final ExpectedException thrown = ExpectedException.none();
 
+    @Before
+    public void setUp() {
+        Realm.init(InstrumentationRegistry.getTargetContext());
+    }
+
     @After
     public void tearDown() {
-        for (SyncUser syncUser : SyncUser.all().values()) {
-            syncUser.logOut();
+        UserStore userStore = SyncManager.getUserStore();
+        for (SyncUser syncUser : userStore.allUsers()) {
+            userStore.remove(syncUser.getIdentity(), syncUser.getAuthenticationUrl().toString());
         }
-        SyncManager.reset();
     }
 
     @Test
@@ -98,7 +104,7 @@ public void serverUrl_setsFolderAndFileName() {
             String expectedFolder = validUrl[1];
             String expectedFileName = validUrl[2];
 
-            SyncConfiguration config = new SyncConfiguration.Builder(user, serverUrl).build();
+            SyncConfiguration config = user.createConfiguration(serverUrl).build();
 
             assertEquals(new File(InstrumentationRegistry.getContext().getFilesDir(), expectedFolder), config.getRealmDirectory());
             assertEquals(expectedFileName, config.getRealmFileName());
@@ -139,7 +145,7 @@ public void serverUrl_flexibleInput() {
             String serverUrlInput = (String) test[1];
             String resolvedServerUrl = ((String) test[2]).replace("~", user.getIdentity());
 
-            SyncConfiguration config = new SyncConfiguration.Builder(user, serverUrlInput).build();
+            SyncConfiguration config = user.createConfiguration(serverUrlInput).build();
 
             assertEquals(String.format("Input '%s' did not resolve correctly.", serverUrlInput),
                     resolvedServerUrl, config.getServerUrl().toString());
@@ -165,7 +171,7 @@ public void serverUrl_invalidUrlThrows() {
 
         for (String invalidUrl : invalidUrls) {
             try {
-                new SyncConfiguration.Builder(createTestUser(), invalidUrl);
+                createTestUser().createConfiguration(invalidUrl);
                 fail(invalidUrl + " should have failed.");
             } catch (IllegalArgumentException ignore) {
             }
@@ -186,7 +192,7 @@ public void serverUrl_length() {
                 SyncConfiguration.MAX_FILE_NAME_LENGTH, SyncConfiguration.MAX_FILE_NAME_LENGTH + 1, 1000};
 
         for (int len : lengths) {
-            SyncConfiguration config = new SyncConfiguration.Builder(createTestUser(), makeServerUrl(len)).build();
+            SyncConfiguration config = createTestUser().createConfiguration(makeServerUrl(len)).build();
             assertTrue("Length: " + len, config.getRealmFileName().length() <= SyncConfiguration.MAX_FILE_NAME_LENGTH);
             assertTrue("Length: " + len, config.getPath().length() <= SyncConfiguration.MAX_FULL_PATH_LENGTH);
         }
@@ -194,7 +200,7 @@ public void serverUrl_length() {
 
     @Test
     public void serverUrl_invalidChars() {
-        SyncConfiguration.Builder builder = new SyncConfiguration.Builder(createTestUser(), "realm://objectserver.realm.io/~/?");
+        SyncConfiguration.Builder builder = createTestUser().createConfiguration("realm://objectserver.realm.io/~/?");
         SyncConfiguration config = builder.build();
         assertFalse(config.getRealmFileName().contains("?"));
     }
@@ -208,14 +214,14 @@ public void serverUrl_port() {
         urlPort.put("realms://objectserver.realm.io:2443/~/default", 2443);
 
         for (String url : urlPort.keySet()) {
-            SyncConfiguration config = new SyncConfiguration.Builder(createTestUser(), url).build();
+            SyncConfiguration config = createTestUser().createConfiguration(url).build();
             assertEquals(urlPort.get(url).intValue(), config.getServerUrl().getPort());
         }
     }
 
     @Test
     public void errorHandler() {
-        SyncConfiguration.Builder builder = new SyncConfiguration.Builder(createTestUser(), "realm://objectserver.realm.io/default");
+        SyncConfiguration.Builder builder = createTestUser().createConfiguration("realm://objectserver.realm.io/default");
         SyncSession.ErrorHandler errorHandler = new SyncSession.ErrorHandler() {
             @Override
             public void onError(SyncSession session, ObjectServerError error) {
@@ -240,7 +246,7 @@ public void onError(SyncSession session, ObjectServerError error) {
         // Create configuration using the default handler
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+        SyncConfiguration config = user.createConfiguration(url).build();
         assertEquals(errorHandler, config.getErrorHandler());
         SyncManager.setDefaultSessionErrorHandler(null);
     }
@@ -250,7 +256,7 @@ public void onError(SyncSession session, ObjectServerError error) {
     public void errorHandler_nullThrows() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration.Builder builder = new SyncConfiguration.Builder(user, url);
+        SyncConfiguration.Builder builder = user.createConfiguration(url);
 
         try {
             builder.errorHandler(null);
@@ -262,7 +268,7 @@ public void errorHandler_nullThrows() {
     public void equals() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url)
+        SyncConfiguration config = user.createConfiguration(url)
                 .build();
         assertTrue(config.equals(config));
     }
@@ -271,8 +277,8 @@ public void equals() {
     public void equals_same() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config1 = new SyncConfiguration.Builder(user, url).build();
-        SyncConfiguration config2 = new SyncConfiguration.Builder(user, url).build();
+        SyncConfiguration config1 = user.createConfiguration(url).build();
+        SyncConfiguration config2 = user.createConfiguration(url).build();
 
         assertTrue(config1.equals(config2));
     }
@@ -282,8 +288,8 @@ public void equals_not() {
         SyncUser user = createTestUser();
         String url1 = "realm://objectserver.realm.io/default1";
         String url2 = "realm://objectserver.realm.io/default2";
-        SyncConfiguration config1 = new SyncConfiguration.Builder(user, url1).build();
-        SyncConfiguration config2 = new SyncConfiguration.Builder(user, url2).build();
+        SyncConfiguration config1 = user.createConfiguration(url1).build();
+        SyncConfiguration config2 = user.createConfiguration(url2).build();
         assertFalse(config1.equals(config2));
     }
 
@@ -291,7 +297,7 @@ public void equals_not() {
     public void hashCode_equal() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url)
+        SyncConfiguration config = user.createConfiguration(url)
                 .build();
 
         assertEquals(config.hashCode(), config.hashCode());
@@ -302,8 +308,8 @@ public void hashCode_notEquals() {
         SyncUser user = createTestUser();
         String url1 = "realm://objectserver.realm.io/default1";
         String url2 = "realm://objectserver.realm.io/default2";
-        SyncConfiguration config1 = new SyncConfiguration.Builder(user, url1).build();
-        SyncConfiguration config2 = new SyncConfiguration.Builder(user, url2).build();
+        SyncConfiguration config1 = user.createConfiguration(url1).build();
+        SyncConfiguration config2 = user.createConfiguration(url2).build();
         assertNotEquals(config1.hashCode(), config2.hashCode());
     }
 
@@ -311,7 +317,7 @@ public void hashCode_notEquals() {
     public void get_syncSpecificValues() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+        SyncConfiguration config = user.createConfiguration(url).build();
         assertTrue(user.equals(config.getUser()));
         assertEquals("realm://objectserver.realm.io/default", config.getServerUrl().toString());
         assertFalse(config.shouldDeleteRealmOnLogout());
@@ -322,7 +328,7 @@ public void get_syncSpecificValues() {
     public void encryption() {
        SyncUser user = createTestUser();
        String url = "realm://objectserver.realm.io/default";
-       SyncConfiguration config = new SyncConfiguration.Builder(user, url)
+       SyncConfiguration config = user.createConfiguration(url)
                .encryptionKey(TestHelper.getRandomKey())
                .build();
        assertNotNull(config.getEncryptionKey());
@@ -333,7 +339,7 @@ public void encryption_invalid_null() {
        SyncUser user = createTestUser();
        String url = "realm://objectserver.realm.io/default";
 
-       new SyncConfiguration.Builder(user, url).encryptionKey(null);
+       user.createConfiguration(url).encryptionKey(null);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -341,14 +347,14 @@ public void encryption_invalid_wrong_length() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
 
-        new SyncConfiguration.Builder(user, url).encryptionKey(new byte[]{1, 2, 3});
+        user.createConfiguration(url).encryptionKey(new byte[]{1, 2, 3});
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void directory_null() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        new SyncConfiguration.Builder(user, url).directory(null);
+        user.createConfiguration(url).directory(null);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -357,7 +363,7 @@ public void directory_writeProtectedDir() {
         String url = "realm://objectserver.realm.io/default";
 
         File dir = new File("/");
-        new SyncConfiguration.Builder(user, url).directory(dir);
+        user.createConfiguration(url).directory(dir);
     }
 
     @Test
@@ -369,7 +375,7 @@ public void directory_dirIsAFile() throws IOException {
         File file = new File(dir, "dummyfile");
         assertTrue(file.createNewFile());
         thrown.expect(IllegalArgumentException.class);
-        new SyncConfiguration.Builder(user, url).directory(file);
+        user.createConfiguration(url).directory(file);
         file.delete(); // clean up
     }
 
@@ -379,7 +385,7 @@ public void deleteOnLogout() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
 
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url)
+        SyncConfiguration config = user.createConfiguration(url)
                 //.deleteRealmOnLogout()
                 .build();
         assertTrue(config.shouldDeleteRealmOnLogout());
@@ -420,7 +426,7 @@ public void execute(Realm realm) {
     public void defaultRxFactory() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+        SyncConfiguration config = user.createConfiguration(url).build();
 
         assertNotNull(config.getRxFactory());
     }
@@ -429,7 +435,7 @@ public void defaultRxFactory() {
     public void toString_nonEmpty() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+        SyncConfiguration config = user.createConfiguration(url).build();
 
         String configStr = config.toString();
         assertTrue(configStr != null && !configStr.isEmpty());
@@ -440,7 +446,7 @@ public void toString_nonEmpty() {
     public void compact_NotAllowed() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
+        SyncConfiguration config = user.createConfiguration(url).build();
 
         Realm.compactRealm(config);
     }
@@ -452,9 +458,13 @@ public void multipleUsersReferenceSameRealm() {
         SyncUser user1 = createNamedTestUser("user1");
         SyncUser user2 = createNamedTestUser("user2");
         String sharedUrl = "realm://ros.realm.io/42/default";
-        SyncConfiguration config1 = new SyncConfiguration.Builder(user1, sharedUrl).modules(new StringOnlyModule()).build();
+        SyncConfiguration config1 = user1.createConfiguration(sharedUrl)
+                .modules(new StringOnlyModule())
+                .build();
         Realm realm1 = Realm.getInstance(config1);
-        SyncConfiguration config2 = new SyncConfiguration.Builder(user2, sharedUrl).modules(new StringOnlyModule()).build();
+        SyncConfiguration config2 = user2.createConfiguration(sharedUrl)
+                .modules(new StringOnlyModule())
+                .build();
         Realm realm2 = null;
 
         // Verify that two different configurations can be used for the same URL
@@ -472,55 +482,22 @@ public void multipleUsersReferenceSameRealm() {
     }
 
     @Test
-    public void automatic_throwsIfNoUserIsLoggedIn() {
-        try {
-            SyncConfiguration.automatic();
-            fail();
-        } catch (IllegalStateException e) {
-            assertTrue(e.getMessage().startsWith("No user was logged in"));
-        }
-    }
-
-    @Test
-    public void automatic_throwsIfMultipleUsersIsLoggedIn() {
-        SyncTestUtils.createTestUser();
-        SyncTestUtils.createTestUser();
-        try {
-            SyncConfiguration.automatic();
-            fail();
-        } catch (IllegalStateException e) {
-            assertEquals("Current user is not valid if more that one valid, logged-in user exists.", e.getMessage());
-        }
-    }
-
-    @Test
-    public void automaticWithUser_throwsIfNullOrInvalid() {
-        try {
-            //noinspection ConstantConditions
-            SyncConfiguration.automatic(null);
-            fail();
-        } catch (IllegalArgumentException e) {
-            assertTrue(e.getMessage().startsWith("Non-null 'user' required."));
-        }
-        SyncUser user = SyncTestUtils.createTestUser();
+    public void getDefaultConfiguration_throwsIfNotLoggedIn() {
+        SyncUser user = createTestUser();
         user.logOut();
         try {
-            SyncConfiguration.automatic(user);
+            user.getDefaultConfiguration();
             fail();
-        } catch (IllegalArgumentException e) {
-            assertEquals("User is no logger valid.  Log the user in again.", e.getMessage());
+        } catch (IllegalStateException e) {
+            assertTrue(e.getMessage().startsWith("The default configuration can only be created for users that are logged in."));
         }
     }
 
     @Test
-    public void automatic_isPartial() {
+    public void getDefaultConfiguration_isFullySynchronized() {
         SyncUser user = SyncTestUtils.createTestUser();
-
-        SyncConfiguration config = SyncConfiguration.automatic();
-        assertTrue(config.isPartialRealm());
-
-        config = SyncConfiguration.automatic(user);
-        assertTrue(config.isPartialRealm());
+        SyncConfiguration config = user.getDefaultConfiguration();
+        assertFalse(config.isFullySynchronizedRealm());
     }
 
     @Test
@@ -547,7 +524,7 @@ public void automatic_convertsAuthUrl() {
             String realmUrl = (String) test[1];
 
             SyncUser user = SyncTestUtils.createTestUser(authUrl);
-            SyncConfiguration config = SyncConfiguration.automatic();
+            SyncConfiguration config = user.getDefaultConfiguration();
             URI url = config.getServerUrl();
             assertEquals(realmUrl, url.toString());
             user.logOut();
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java
index 89c13dd672..2ec72220e6 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncManagerTests.java
@@ -83,7 +83,10 @@ public boolean isActive(String identity, String authenticationUrl) {
     @After
     public void tearDown() {
         UserFactory.logoutAllUsers();
-        SyncManager.reset();
+        UserStore userStore = SyncManager.getUserStore();
+        for (SyncUser syncUser : userStore.allUsers()) {
+            userStore.remove(syncUser.getIdentity(), syncUser.getAuthenticationUrl().toString());
+        }
     }
 
     @Test
@@ -159,7 +162,7 @@ public void loggedOut(SyncUser user) {
     public void session() throws IOException {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url)
+        SyncConfiguration config = user.createConfiguration(url)
                 .modules(new StringOnlyModule())
                 .build();
         // This will trigger the creation of the session
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
index 603eae46ae..136470a0bc 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
@@ -103,7 +103,10 @@ public static void initUserStore() {
 
     @Before
     public void setUp() {
-        SyncManager.reset();
+        UserStore userStore = SyncManager.getUserStore();
+        for (SyncUser syncUser : userStore.allUsers()) {
+            userStore.remove(syncUser.getIdentity(), syncUser.getAuthenticationUrl().toString());
+        }
     }
 
     @After
@@ -469,7 +472,7 @@ public void allSessions() {
         SyncUser user = createTestUser();
         assertEquals(0, user.allSessions().size());
 
-        SyncConfiguration configuration1 = new SyncConfiguration.Builder(user, url1).modules(new AllTypesModelModule()).build();
+        SyncConfiguration configuration1 = user.createConfiguration(url1).modules(new AllTypesModelModule()).build();
         Realm realm1 = Realm.getInstance(configuration1);
         List<SyncSession> allSessions = user.allSessions();
         assertEquals(1, allSessions.size());
@@ -478,7 +481,7 @@ public void allSessions() {
         assertEquals(user, session.getUser());
         assertEquals(url1, session.getServerUrl().toString());
 
-        SyncConfiguration configuration2 = new SyncConfiguration.Builder(user, url2).modules(new AllTypesModelModule()).build();
+        SyncConfiguration configuration2 = user.createConfiguration(url2).modules(new AllTypesModelModule()).build();
         Realm realm2 = Realm.getInstance(configuration2);
         allSessions = user.allSessions();
         assertEquals(2, allSessions.size());
@@ -541,8 +544,7 @@ public void logoutUserShouldDeleteRealmAfterRestart() throws InterruptedExceptio
         Realm.init(InstrumentationRegistry.getTargetContext());
 
         SyncUser user = createTestUser();
-        SyncConfiguration syncConfiguration = new SyncConfiguration
-                .Builder(user, "realm://127.0.0.1:9080/~/tests")
+        SyncConfiguration syncConfiguration = user.createConfiguration("realm://127.0.0.1:9080/~/tests")
                 .modules(new StringOnlyModule())
                 .build();
 
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java
index 6c6cab9b26..93e5974d27 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java
@@ -62,7 +62,6 @@ private Realm getNormalRealm() {
 
     private Realm getPartialRealm() {
         SyncConfiguration config = configFactory.createSyncConfigurationBuilder(SyncTestUtils.createTestUser(), "http://foo.com/fullsync")
-                .partialRealm()
                 .build();
         realm = Realm.getInstance(config);
         return realm;
@@ -70,6 +69,7 @@ private Realm getPartialRealm() {
 
     private Realm getFullySyncRealm() {
         SyncConfiguration config = configFactory.createSyncConfigurationBuilder(SyncTestUtils.createTestUser(), "http://foo.com/fullsync")
+                .fullSynchronization()
                 .build();
         realm = Realm.getInstance(config);
         return realm;
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/TestSyncConfigurationFactory.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/TestSyncConfigurationFactory.java
index 36d0625db0..938c29072f 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/TestSyncConfigurationFactory.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/TestSyncConfigurationFactory.java
@@ -27,7 +27,7 @@
 public class TestSyncConfigurationFactory extends TestRealmConfigurationFactory {
 
     public SyncConfiguration.Builder createSyncConfigurationBuilder(SyncUser user, String url) {
-        return new SyncConfiguration.Builder(user, url)
+        return user.createConfiguration(url)
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                 .addModule(new ObjectPermissionsModule())
                 .directory(getRoot());
diff --git a/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java b/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java
index 97c1fcf9cd..54abab36e7 100644
--- a/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java
+++ b/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java
@@ -127,8 +127,7 @@
      * Returns {@code true} if the query result is considered "complete". For all local Realms, or
      * fully synchronized Realms, this method will always return {@code true}.
      * <p>
-     * This method thus only makes sense for partially synchronized Realms (as defined by setting
-     * {@link SyncConfiguration.Builder#partialRealm()}.
+     * This method thus only makes sense for query-based synchronized Realms.
      * <p>
      * For those Realms, data is only downloaded when queried which means that until the data is
      * downloaded, a local query might return a query result that would not have been possible on a
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 3bf2ba64fd..7ff6e42b79 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -1590,7 +1590,7 @@ public void run() {
      * Deletes all objects of the specified class from the Realm.
      *
      * @param clazz the class which objects should be removed.
-     * @throws IllegalStateException if the corresponding Realm is a partially synchronized Realm, is
+     * @throws IllegalStateException if the corresponding Realm is a query-based synchronized Realm, is
      * closed or called from an incorrect thread.
      */
     public void delete(Class<? extends RealmModel> clazz) {
@@ -1728,7 +1728,7 @@ public static boolean compactRealm(RealmConfiguration configuration) {
      * @return a {@link RealmAsyncTask} representing a cancellable task.
      * @throws IllegalArgumentException if no {@code subscriptionName} or {@code callback} was provided.
      * @throws IllegalStateException if called on a non-looper thread.
-     * @throws UnsupportedOperationException if the Realm is not a partially synchronized Realm.
+     * @throws UnsupportedOperationException if the Realm is not a query-based synchronized Realm.
      */
     @Beta
     public RealmAsyncTask unsubscribeAsync(String subscriptionName, Realm.UnsubscribeCallback callback) {
@@ -1741,7 +1741,7 @@ public RealmAsyncTask unsubscribeAsync(String subscriptionName, Realm.Unsubscrib
         }
         sharedRealm.capabilities.checkCanDeliverNotification("This method is only available from a Looper thread.");
         if (!ObjectServerFacade.getSyncFacadeIfPossible().isPartialRealm(configuration)) {
-            throw new UnsupportedOperationException("Realm is not a partially synchronized Realm: " + configuration.getPath());
+            throw new UnsupportedOperationException("Realm is fully synchronized Realm. This method is only available when using query-based synchronization: " + configuration.getPath());
         }
 
         return executeTransactionAsync(new Transaction() {
@@ -1944,7 +1944,7 @@ public void onError(Exception ignore) {}
     }
 
     /**
-     * Interface used when canceling partial sync subscriptions.
+     * Interface used when canceling query-based sync subscriptions.
      *
      * @see #unsubscribeAsync(String, UnsubscribeCallback)
      */
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 67ae7832ff..82f884decc 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -1769,11 +1769,8 @@ public long count() {
     /**
      * Finds all objects that fulfill the query conditions. This method is only available from a Looper thread.
      * <p>
-     * On partially synchronized Realms, defined by setting {@link SyncConfiguration.Builder#partialRealm()},
-     * this method will also create an anonymous subscription that will download all server data matching
-     * the query.
-     * </p>
-     *
+     * If the Realm is a Query-based synchronized Realms, this method will also create an anonymous subscription
+     * that will download all server data matching the query.
      *
      * @return immediately an empty {@link RealmResults}. Users need to register a listener
      * {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notified when the query completes.
@@ -1797,14 +1794,14 @@ public long count() {
     /**
      * Finds all objects that fulfill the query condition(s). This method is only available from a Looper thread.
      * <p>
-     * This method is only available on partially synchronized Realms and will also create a named subscription
+     * This method is only available on query-based synchronized Realms and will also create a named subscription
      * that will synchronize all server data matching the query. Named subscriptions can be removed again by
      * calling {@code Realm.unsubscribe(subscriptionName}.
      *
      * @return immediately an empty {@link RealmResults}. Users need to register a listener
      * {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notified when the query completes.
      * @see io.realm.RealmResults
-     * @throws IllegalStateException If the Realm is a not a partially synchronized Realm.
+     * @throws IllegalStateException If the Realm is a not a query-based synchronized Realm.
      */
     public RealmResults<E> findAllAsync(String subscriptionName) {
         realm.checkIfValid();
diff --git a/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java b/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
index c9471a7df1..e8f088abd1 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
@@ -178,8 +178,8 @@ public boolean isGlobalRealm() {
     private PermissionManager(SyncUser user) {
         this.user = user;
         threadId = Thread.currentThread().getId();
-        managementRealmConfig = new SyncConfiguration.Builder(
-                user, getRealmUrl(RealmType.MANAGEMENT_REALM, user.getAuthenticationUrl()))
+        managementRealmConfig = user.createConfiguration(getRealmUrl(RealmType.MANAGEMENT_REALM, user.getAuthenticationUrl()))
+                .fullSynchronization()
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
@@ -192,8 +192,8 @@ public void onError(SyncSession session, ObjectServerError error) {
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                 .build();
 
-        permissionRealmConfig = new SyncConfiguration.Builder(
-                user, getRealmUrl(RealmType.PERMISSION_REALM, user.getAuthenticationUrl()))
+        permissionRealmConfig = user.createConfiguration(getRealmUrl(RealmType.PERMISSION_REALM, user.getAuthenticationUrl()))
+                .fullSynchronization()
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
@@ -209,8 +209,8 @@ public void onError(SyncSession session, ObjectServerError error) {
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                 .build();
 
-        defaultPermissionRealmConfig = new SyncConfiguration.Builder(
-                user, getRealmUrl(RealmType.DEFAULT_PERMISSION_REALM, user.getAuthenticationUrl()))
+        defaultPermissionRealmConfig = user.createConfiguration(getRealmUrl(RealmType.DEFAULT_PERMISSION_REALM, user.getAuthenticationUrl()))
+                .fullSynchronization()
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index 7cbf711b85..9496aa33ea 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -22,7 +22,6 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.net.URL;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.Arrays;
@@ -34,7 +33,7 @@
 
 import javax.annotation.Nullable;
 
-import io.realm.annotations.Beta;
+import io.reactivex.annotations.Beta;
 import io.realm.annotations.RealmModule;
 import io.realm.exceptions.RealmException;
 import io.realm.internal.OsRealmConfig;
@@ -46,23 +45,41 @@
 import io.realm.rx.RxObservableFactory;
 
 /**
- * An {@link SyncConfiguration} is used to setup a Realm that can be synchronized between devices using the Realm
+ * A {@link SyncConfiguration} is used to setup a Realm that can be synchronized between devices using the Realm
  * Object Server.
  * <p>
  * A valid {@link SyncUser} is required to create a {@link SyncConfiguration}. See {@link SyncCredentials} and
- * {@link SyncUser#logInAsync(SyncCredentials, String, SyncUser.Callback)} for more information on
- * how to get a user object.
+ * {@link SyncUser#logInAsync(SyncCredentials, String, SyncUser.Callback)} for more information on how to get a user object.
  * <p>
  * A minimal {@link SyncConfiguration} can be found below.
  * <pre>
  * {@code
- * SyncConfiguration config = new SyncConfiguration.Builder(context)
- *   .serverUrl("realm://objectserver.realm.io/~/default")
- *   .user(myUser)
- *   .build();
+ * SyncUser user = SyncUser.current();
+ * String url = "realm://myinstance.cloud.realm.io/default";
+ * SyncConfiguration config = new SyncConfiguration.Builder(user, url).build();
  * }
  * </pre>
  *
+ * Synchronized Realms come in two forms:
+ * <ul>
+ *     <li>
+ *         <b>Query-based synchronization:</b>
+ *         This is the default mode. The Realm will only synchronize data you have queried for.
+ *         This means the Realm on the device is initially empty and will gradually fill up as
+ *         you start to query for data. This is useful if the server side Realm is too large
+ *         to fit on the device or contains data from multiple users. Data synchronized this way
+ *         can also be removed from the device again without being deleted on the server.
+ *     </li>
+ *     <li>
+ *         <b>Full synchronization</b>
+ *         Enable this mode by setting {@link Builder#fullSynchronization()}. In this mode
+ *         the entire Realm is synchronized in the background without having to query for
+ *         data first. This means that data generally will be available quicker but should only
+ *         be used if the server side Realm is small and doesn't contain data the device is not
+ *         allowed to see.
+ *     </li>
+ * </ul>
+ * <p>
  * Synchronized Realms only support additive migrations which can be detected and performed automatically, so
  * the following builder options are not accessible compared to a normal Realm:
  *
@@ -73,6 +90,9 @@
  *
  * Synchronized Realms are created by using {@link Realm#getInstance(RealmConfiguration)} and
  * {@link Realm#getDefaultInstance()} like ordinary unsynchronized Realms.
+ *
+ * @see <a href="https://docs.realm.io/platform/using-synced-realms/syncing-data">The docs</a> for more
+ * information about the two types of synchronization.
  */
 public class SyncConfiguration extends RealmConfiguration {
 
@@ -183,6 +203,32 @@ public static RealmConfiguration forRecovery(String canonicalPath, @Nullable byt
         return forRecovery(canonicalPath, encryptionKey, schemaMediator);
     }
 
+    /**
+     * Returns a {@link RealmConfiguration} appropriate to open a read-only, non-synced Realm to recover any pending changes.
+     * This is useful when trying to open a backup/recovery Realm (after a client reset).
+     *
+     * Note: This will use the default Realm module (composed of all {@link RealmModel}), and
+     * assume no encryption should be used as well.
+     *
+     * @param canonicalPath the absolute path to the Realm file defined by this configuration.
+     * @return RealmConfiguration that can be used offline
+     */
+    public static RealmConfiguration forRecovery(String canonicalPath) {
+        return forRecovery(canonicalPath, null);
+    }
+
+    static RealmConfiguration forRecovery(String canonicalPath, @Nullable byte[] encryptionKey, RealmProxyMediator schemaMediator) {
+        return new RealmConfiguration(null,null, canonicalPath,null, encryptionKey, 0,null, false, OsRealmConfig.Durability.FULL, schemaMediator, null, null, true, null, true);
+    }
+
+    static URI resolveServerUrl(URI serverUrl, String userIdentifier) {
+        try {
+            return new URI(serverUrl.toString().replace("/~/", "/" + userIdentifier + "/"));
+        } catch (URISyntaxException e) {
+            throw new IllegalArgumentException("Could not replace '/~/' with a valid user ID.", e);
+        }
+    }
+
     /**
      * Creates an automatic default configuration based on the the currently logged in user.
      * <p>
@@ -192,14 +238,16 @@ public static RealmConfiguration forRecovery(String canonicalPath, @Nullable byt
      * @throws IllegalStateException if no user are logged in, or multiple users have. Only one should
      * be logged in when calling this method.
      * @return The constructed {@link SyncConfiguration}.
+     * @deprecated use {@link SyncUser#getDefaultConfiguration()} instead.
      */
+    @Deprecated
     @Beta
     public static SyncConfiguration automatic() {
         SyncUser user = SyncUser.current();
         if (user == null) {
             throw new IllegalStateException("No user was logged in.");
         }
-        return getDefaultConfig(user);
+        return user.getDefaultConfiguration();
     }
 
     /**
@@ -210,7 +258,9 @@ public static SyncConfiguration automatic() {
      *
      * @throws IllegalArgumentException if no user was provided or the user isn't valid.
      * @return The constructed {@link SyncConfiguration}.
+     * @deprecated use {@link SyncUser#getDefaultConfiguration()} instead.
      */
+    @Deprecated
     @Beta
     public static SyncConfiguration automatic(SyncUser user) {
         if (user == null) {
@@ -219,58 +269,7 @@ public static SyncConfiguration automatic(SyncUser user) {
         if (!user.isValid()) {
             throw new IllegalArgumentException("User is no logger valid.  Log the user in again.");
         }
-        return getDefaultConfig(user);
-    }
-
-    private static SyncConfiguration getDefaultConfig(SyncUser user) {
-        return new SyncConfiguration.Builder(user, createUrl(user))
-                .partialRealm()
-                .build();
-    }
-
-    // Infer the URL to the default Realm based on the server used to login the user
-    private static String createUrl(SyncUser user) {
-        URL url = user.getAuthenticationUrl();
-        String protocol = url.getProtocol();
-        String host = url.getHost();
-        int port = url.getPort();
-        if (port != -1) { // port set
-            host += ":" + port;
-        }
-
-        if (protocol.equalsIgnoreCase("https")) {
-            protocol = "realms";
-        } else {
-            protocol = "realm";
-        }
-
-        return protocol + "://" + host + "/default";
-    }
-
-    /**
-     * Returns a {@link RealmConfiguration} appropriate to open a read-only, non-synced Realm to recover any pending changes.
-     * This is useful when trying to open a backup/recovery Realm (after a client reset).
-     *
-     * Note: This will use the default Realm module (composed of all {@link RealmModel}), and
-     * assume no encryption should be used as well.
-     *
-     * @param canonicalPath the absolute path to the Realm file defined by this configuration.
-     * @return RealmConfiguration that can be used offline
-     */
-    public static RealmConfiguration forRecovery(String canonicalPath) {
-        return forRecovery(canonicalPath, null);
-    }
-
-    static RealmConfiguration forRecovery(String canonicalPath, @Nullable byte[] encryptionKey, RealmProxyMediator schemaMediator) {
-        return new RealmConfiguration(null,null, canonicalPath,null, encryptionKey, 0,null, false, OsRealmConfig.Durability.FULL, schemaMediator, null, null, true, null, true);
-    }
-
-    static URI resolveServerUrl(URI serverUrl, String userIdentifier) {
-        try {
-            return new URI(serverUrl.toString().replace("/~/", "/" + userIdentifier + "/"));
-        } catch (URISyntaxException e) {
-            throw new IllegalArgumentException("Could not replace '/~/' with a valid user ID.", e);
-        }
+        return user.getDefaultConfiguration();
     }
 
     // Extract the full server path, minus the file name
@@ -430,18 +429,28 @@ boolean isSyncConfiguration() {
     }
 
     /**
-     * Whether this configuration is for a partial synchronization Realm.
+     * Whether this configuration is for a query-based Realm.
      * <p>
-     * Partial synchronization allows a synchronized Realm to be opened in such a way that
+     * Query-based synchronization allows a synchronized Realm to be opened in such a way that
      * only objects queried by the user are synchronized to the device.
      *
-     * @return {@code true} to open a partial synchronization Realm {@code false} otherwise.
-     * @see Builder#partialRealm() for more details.
+     * @return {@code true} to open a query-based Realm {@code false} otherwise.
+     * @deprecated use {@link #isFullySynchronizedRealm()} instead.
      */
+    @Deprecated
     public boolean isPartialRealm() {
         return isPartial;
     }
 
+    /**
+     * Returns whether this configuration is for a fully synchronized Realm or not.
+     *
+     * @see Builder#fullSynchronization() for more details.
+     */
+    public boolean isFullySynchronizedRealm() {
+        return !isPartial;
+    }
+
     /**
      * Builder used to construct instances of a SyncConfiguration in a fluent manner.
      */
@@ -477,9 +486,10 @@ public boolean isPartialRealm() {
         @Nullable
         private String serverCertificateFilePath;
         private OsRealmConfig.SyncSessionStopPolicy sessionStopPolicy = OsRealmConfig.SyncSessionStopPolicy.AFTER_CHANGES_UPLOADED;
-        private boolean isPartial = false;
+        private boolean isPartial = true; // Partial Synchronization is enabled by default
         /**
-         * Creates an instance of the Builder for the SyncConfiguration.
+         * Creates an instance of the Builder for the SyncConfiguration. This SyncConfiguration
+         * will be for a fully synchronized Realm.
          * <p>
          * Opening a synchronized Realm requires a valid user and an unique URI that identifies that Realm. In URIs,
          * {@code /~/} can be used as a placeholder for a user ID in case the Realm should only be available to one
@@ -504,9 +514,12 @@ public boolean isPartialRealm() {
          *            assume the file is located on the same server returned by {@link SyncUser#getAuthenticationUrl()}.
          *
          * @see SyncUser#isValid()
+         * @deprecated Use {@link SyncUser#createConfiguration(String)} instead.
          */
+        @Deprecated
         public Builder(SyncUser user, String uri) {
             this(BaseRealm.applicationContext, user, uri);
+            fullSynchronization();
         }
 
         Builder(Context context, SyncUser user, String url) {
@@ -941,14 +954,30 @@ public Builder waitForInitialRemoteData() {
         }
 
         /**
-         * Setting this will open a partially synchronized Realm.
+         * Setting this will open a query-based Realm.
+         *
          * @see #isPartialRealm()
+         * @deprecated Use {@link SyncUser#createConfiguration(String)} instead.
          */
+        @Deprecated
         public SyncConfiguration.Builder partialRealm() {
             this.isPartial = true;
             return this;
         }
 
+        /**
+         * Define this Realm as a fully synchronized Realm.
+         * <p>
+         * Full synchronization, unlike the default query-based synchronization, will transparently
+         * synchronize the entire Realm without needing to query for the data. This option is
+         * useful if the serverside Realm is small and all the data in the Realm should be
+         * available to the user.
+         */
+        public SyncConfiguration.Builder fullSynchronization() {
+            this.isPartial = false;
+            return this;
+        }
+
         private String MD5(String in) {
             try {
                 MessageDigest digest = MessageDigest.getInstance("MD5");
@@ -1069,7 +1098,7 @@ public SyncConfiguration build() {
                 }
             }
 
-            // If partial sync is enabled, also add support for Object Level Permissions
+            // If query based sync is enabled, also add support for Object Level Permissions
             if (isPartial) {
                 addModule(new ObjectPermissionsModule());
             }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 08f553c743..8c55cd7138 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -19,6 +19,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -44,7 +45,6 @@
 import io.realm.internal.network.ExponentialBackoffTask;
 import io.realm.internal.network.LogoutResponse;
 import io.realm.internal.network.LookupUserIdResponse;
-import io.realm.internal.network.UpdateAccountRequest;
 import io.realm.internal.network.UpdateAccountResponse;
 import io.realm.internal.objectserver.Token;
 import io.realm.log.RealmLog;
@@ -66,6 +66,7 @@
     private final URL authenticationUrl;
     // maps all RealmConfiguration and accessToken, using this SyncUser.
     private final Map<SyncConfiguration, Token> realms = new HashMap<SyncConfiguration, Token>();
+    private SyncConfiguration defaultConfiguration;
 
     SyncUser(Token refreshToken, URL authenticationUrl) {
         this.identity = refreshToken.identity();
@@ -212,6 +213,79 @@ public SyncUser run() throws ObjectServerError {
         }.start();
     }
 
+    /**
+     * Opening a synchronized Realm requires a {@link SyncConfiguration}. This method creates a
+     * {@link SyncConfiguration.Builder} that can be used to create it by calling {@link SyncConfiguration.Builder#build()}.
+     * <p>
+     * The default synchronization mode for this Realm is <a href="https://docs.realm.io/platform/using-synced-realms/syncing-data">query-based synchronizaton</a>,
+     * but see the {@link SyncConfiguration.Builder} class for more details on how to configure a Realm.
+     * <p>
+     * A synchronized Realm is identified by an unique URI. In the URI, {@code /~/} can be used as a placeholder for
+     * a user ID in case the Realm should only be available to one user e.g., {@code "realm://objectserver.realm.io/~/default"}.
+     * <p>
+     * The URL cannot end with {@code .realm}, {@code .realm.lock} or {@code .realm.management}.
+     * <p>
+     * The {@code /~/} will automatically be replaced with the user ID when creating the {@link SyncConfiguration}.
+     * <p>
+     * Moreover, the URI defines the local location on disk. The location of a synchronized Realm file is
+     * {@code /data/data/<packageName>/files/realm-object-server/<user-id>/<last-path-segment>}, but this behavior
+     * can be overwritten using {@link SyncConfiguration.Builder#name(String)} and {@link SyncConfiguration.Builder#directory(File)}.
+     * <p>
+     * Many Android devices are using FAT32 file systems. FAT32 file systems have a limitation that
+     * file names cannot be longer than 255 characters. Moreover, the entire URI should not exceed 256 characters.
+     * If the file name and underlying path are too long to handle for FAT32, a shorter unique name will be generated.
+     * See also @{link https://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx}.
+     *
+     * @param uri URI identifying the Realm. If only a path like {@code /~/default} is given, the configuration will
+     *            assume the file is located on the same server returned by {@link #getAuthenticationUrl()}.
+     *
+     * @throws IllegalStateException if the user isn't valid. See {@link #isValid()}.
+     */
+    public SyncConfiguration.Builder createConfiguration(String uri) {
+        if (!isValid()) {
+            throw new IllegalStateException("Configurations can only be created from valid users");
+        }
+        return new SyncConfiguration.Builder(this, uri).partialRealm();
+    }
+
+    /**
+     * Returns the default configuration for this user. The default configuration points to the
+     * default query-based Realm on the server the user authenticated against.
+     *
+     * @return the default configuration for this user.
+     * @throws IllegalStateException if the user isn't valid. See {@link #isValid()}.
+     */
+    public SyncConfiguration getDefaultConfiguration() {
+        if (!isValid()) {
+            throw new IllegalStateException("The default configuration can only be created for users that are logged in.");
+        }
+        if (defaultConfiguration == null) {
+            defaultConfiguration = new SyncConfiguration.Builder(this, createUrl(this))
+                    .partialRealm()
+                    .build();
+        }
+        return defaultConfiguration;
+    }
+
+    // Infer the URL to the default Realm based on the server used to login the user
+    private static String createUrl(SyncUser user) {
+        URL url = user.getAuthenticationUrl();
+        String protocol = url.getProtocol();
+        String host = url.getHost();
+        int port = url.getPort();
+        if (port != -1) { // port set
+            host += ":" + port;
+        }
+
+        if (protocol.equalsIgnoreCase("https")) {
+            protocol = "realms";
+        } else {
+            protocol = "realm";
+        }
+
+        return protocol + "://" + host + "/default";
+    }
+
     /**
      * Log a user out, destroying their server state, unregistering them from the SDK, and removing
      * any synced Realms associated with them, from on-disk storage on next app launch (or directly
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
index b0ac440bbf..fc34b1df5d 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
@@ -94,7 +94,7 @@ public void realmClosed(RealmConfiguration configuration) {
             String syncRealmAuthUrl = user.getAuthenticationUrl().toString();
             String rosSerializedUser = user.toJson();
             byte sessionStopPolicy = syncConfig.getSessionStopPolicy().getNativeValue();
-            return new Object[]{rosUserIdentity, rosServerUrl, syncRealmAuthUrl, rosSerializedUser, syncConfig.syncClientValidateSsl(), syncConfig.getServerCertificateFilePath(), sessionStopPolicy, syncConfig.isPartialRealm()};
+            return new Object[]{rosUserIdentity, rosServerUrl, syncRealmAuthUrl, rosSerializedUser, syncConfig.syncClientValidateSsl(), syncConfig.getServerCertificateFilePath(), sessionStopPolicy, !syncConfig.isFullySynchronizedRealm()};
         } else {
             return new Object[8];
         }
@@ -180,7 +180,7 @@ public boolean wasDownloadInterrupted(Throwable throwable) {
     public boolean isPartialRealm(RealmConfiguration configuration) {
         if (configuration instanceof SyncConfiguration) {
             SyncConfiguration syncConfig = (SyncConfiguration) configuration;
-            return syncConfig.isPartialRealm();
+            return !syncConfig.isFullySynchronizedRealm();
         }
         
         return false;
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
index 160ac6c8e3..90c95223cd 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
@@ -151,7 +151,7 @@ private static void deleteFile(File file) throws IOException {
         }
 
         public SyncConfiguration.Builder createSyncConfigurationBuilder(SyncUser user, String url) {
-            return new SyncConfiguration.Builder(user, url)
+            return user.createConfiguration(url)
                     .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                     .modules(Realm.getDefaultModule(), new ObjectPermissionsModule())
                     .directory(looperThread.getRoot());
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
index 37dc8a475f..ce297cdd15 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
@@ -118,7 +118,7 @@ public void onSuccess(RealmResults<Permission> permissions) {
                 assertInitialPermissions(permissions);
 
                 // Create new Realm, which should create a new Permission entry
-                SyncConfiguration config2 = new SyncConfiguration.Builder(user, Constants.USER_REALM_2)
+                SyncConfiguration config2 = user.createConfiguration(Constants.USER_REALM_2)
                         .schema(AllJavaTypes.class)
                         .errorHandler(new SyncSession.ErrorHandler() {
                             @Override
@@ -166,7 +166,7 @@ public void onSuccess(RealmResults<Permission> permissions) {
                 assertInitialPermissions(permissions);
 
                 for (int i = 0; i < TEST_SIZE; i++) {
-                    SyncConfiguration configNew = new SyncConfiguration.Builder(user, "realm://" + Constants.HOST + "/~/test" + i)
+                    SyncConfiguration configNew = user.createConfiguration("realm://" + Constants.HOST + "/~/test" + i)
                             .schema(AllJavaTypes.class)
                             .build();
                     Realm newRealm = Realm.getInstance(configNew);
@@ -776,7 +776,7 @@ public void applyPermissions_usersWithNoExistingPermissions() {
             public void onSuccess() {
                 // Default permissions are not recorded in the __permission Realm for user2
                 // Only way to check is by opening the Realm.
-                SyncConfiguration config = new SyncConfiguration.Builder(user2, url)
+                SyncConfiguration config = user2.createConfiguration(url)
                         .schema(AllJavaTypes.class)
                         .waitForInitialRemoteData()
                         .errorHandler(new SyncSession.ErrorHandler() {
@@ -1184,7 +1184,7 @@ public void run() {
      */
     private String createRemoteRealm(SyncUser user, String realmName) {
         String url = Constants.AUTH_SERVER_URL + "~/" + realmName;
-        SyncConfiguration config = new SyncConfiguration.Builder(user, url)
+        SyncConfiguration config = user.createConfiguration(url)
                 .name(realmName)
                 .schema(AllJavaTypes.class)
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
index a899730c7e..08c58ce930 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
@@ -58,6 +58,7 @@ public void trustedRootCA() throws InterruptedException {
         // 1. Copy a valid Realm to the server
         //noinspection unchecked
         final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .build();
         Realm realm = Realm.getInstance(syncConfig);
@@ -76,6 +77,7 @@ public void trustedRootCA() throws InterruptedException {
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
         //noinspection unchecked
         SyncConfiguration syncConfigSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .fullSynchronization()
                 .name("useSsl")
                 .schema(StringOnly.class)
                 .waitForInitialRemoteData()
@@ -103,6 +105,7 @@ public void withoutSSLVerification() throws InterruptedException {
         // 1. Copy a valid Realm to the server
         //noinspection unchecked
         final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .build();
         Realm realm = Realm.getInstance(syncConfig);
@@ -121,6 +124,7 @@ public void withoutSSLVerification() throws InterruptedException {
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
         //noinspection unchecked
         SyncConfiguration syncConfigSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .fullSynchronization()
                 .name("useSsl")
                 .schema(StringOnly.class)
                 .waitForInitialRemoteData()
@@ -238,6 +242,7 @@ public void combiningTrustedRootCA_and_disableSSLVerification() throws Interrupt
         // 1. Copy a valid Realm to the server using ssl_verify_path option
         //noinspection unchecked
         final SyncConfiguration syncConfigWithCertificate = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .trustedRootCA("trusted_ca.pem")
                 .build();
@@ -257,6 +262,7 @@ public void combiningTrustedRootCA_and_disableSSLVerification() throws Interrupt
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
         //noinspection unchecked
         SyncConfiguration syncConfigDisableSSL = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .fullSynchronization()
                 .name("useSsl")
                 .schema(StringOnly.class)
                 .waitForInitialRemoteData()
@@ -288,6 +294,7 @@ public void sslVerifyCallback_isUsed() throws InterruptedException {
         // 1. Copy a valid Realm to the server using ssl_verify_path option
         //noinspection unchecked
         final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .build();
         Realm realm = Realm.getInstance(syncConfig);
@@ -307,6 +314,7 @@ public void sslVerifyCallback_isUsed() throws InterruptedException {
         //noinspection unchecked
         SyncConfiguration syncConfigSecure = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
                 .name("useSsl")
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .waitForInitialRemoteData()
                 .build();
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
index 6c73bcd8a2..7ccccc9e46 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
@@ -79,6 +79,7 @@ public void getState_loggedOut() {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         SyncConfiguration syncConfiguration = configFactory
                 .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .build();
         Realm realm = Realm.getInstance(syncConfiguration);
 
@@ -98,9 +99,11 @@ public void uploadDownloadAllChanges() throws InterruptedException {
         SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
         SyncConfiguration userConfig = configFactory
                 .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .build();
         SyncConfiguration adminConfig = configFactory
                 .createSyncConfigurationBuilder(adminUser, userConfig.getServerUrl().toString())
+                .fullSynchronization()
                 .build();
 
         Realm userRealm = Realm.getInstance(userConfig);
@@ -123,9 +126,11 @@ public void interruptWaits() throws InterruptedException {
         SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
         final SyncConfiguration userConfig = configFactory
                 .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .build();
         final SyncConfiguration adminConfig = configFactory
                 .createSyncConfigurationBuilder(adminUser, userConfig.getServerUrl().toString())
+                .fullSynchronization()
                 .build();
 
         Thread t = new Thread(new Runnable() {
@@ -227,13 +232,14 @@ public void logout_sameSyncUserMultipleSessions() {
 
     // A Realm that was opened before a user logged out should be able to resume uploading if the user logs back in.
     @Test
-    public void logBackResumeUpload() throws InterruptedException, NoSuchFieldException, IllegalAccessException {
+    public void logBackResumeUpload() throws InterruptedException {
         final String uniqueName = UUID.randomUUID().toString();
         SyncCredentials credentials = SyncCredentials.usernamePassword(uniqueName, "password", true);
         SyncUser user = SyncUser.logIn(credentials, Constants.AUTH_URL);
 
         final SyncConfiguration syncConfiguration = configFactory
                 .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .modules(new StringOnlyModule())
                 .waitForInitialRemoteData()
                 .build();
@@ -275,6 +281,7 @@ public void run() {
 
                 SyncConfiguration adminConfig = configurationFactory.createSyncConfigurationBuilder(adminUser, syncConfiguration.getServerUrl().toString())
                         .modules(new StringOnlyModule())
+                        .fullSynchronization()
                         .waitForInitialRemoteData()
                         .build();
                 final Realm adminRealm = Realm.getInstance(adminConfig);
@@ -322,6 +329,7 @@ public void uploadChangesWhenRealmOutOfScope() throws InterruptedException {
 
         final SyncConfiguration syncConfiguration = configFactory
                 .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.AFTER_CHANGES_UPLOADED)
                 .modules(new StringOnlyModule())
                 .build();
@@ -348,6 +356,7 @@ public void run() {
                 SyncUser admin = UserFactory.createAdminUser(Constants.AUTH_URL);
 
                 SyncConfiguration adminConfig = configurationFactory.createSyncConfigurationBuilder(admin, syncConfiguration.getServerUrl().toString())
+                        .fullSynchronization()
                         .modules(new StringOnlyModule())
                         .build();
                 final Realm adminRealm = Realm.getInstance(adminConfig);
@@ -383,6 +392,7 @@ public void downloadChangesWhenRealmOutOfScope() throws InterruptedException {
 
         final SyncConfiguration syncConfiguration = configFactory
                 .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .modules(new StringOnlyModule())
                 .build();
         Realm realm = Realm.getInstance(syncConfiguration);
@@ -417,6 +427,7 @@ public void run() {
                 SyncUser adminUser = SyncUser.logIn(credentialsAdmin, Constants.AUTH_URL);
 
                 SyncConfiguration adminConfig = configurationFactory.createSyncConfigurationBuilder(adminUser, syncConfiguration.getServerUrl().toString())
+                        .fullSynchronization()
                         .modules(new StringOnlyModule())
                         .waitForInitialRemoteData()
                         .build();
@@ -460,6 +471,7 @@ public void clientReset_manualTriggerAllowSessionToRestart() {
         final AtomicReference<SyncConfiguration> configRef = new AtomicReference<>(null);
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
                 .directory(looperThread.getRoot())
+                .fullSynchronization()
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmIntegrationTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmIntegrationTests.java
index 24cab081af..d5a4e520c2 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmIntegrationTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmIntegrationTests.java
@@ -50,15 +50,16 @@
 @RunWith(AndroidJUnit4.class)
 public class SyncedRealmIntegrationTests extends StandardIntegrationTest {
 
-
     @Test
+    @RunTestInLooperThread
     public void loginLogoutResumeSyncing() throws InterruptedException {
         String username = UUID.randomUUID().toString();
         String password = "password";
         SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
 
-        SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
+        SyncConfiguration config = user.createConfiguration(Constants.USER_REALM)
                 .schema(StringOnly.class)
+                .fullSynchronization()
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                 .build();
 
@@ -83,7 +84,8 @@ public void loginLogoutResumeSyncing() throws InterruptedException {
         }
 
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, false), Constants.AUTH_URL);
-        SyncConfiguration config2 = new SyncConfiguration.Builder(user, Constants.USER_REALM)
+        SyncConfiguration config2 = user.createConfiguration(Constants.USER_REALM)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .build();
 
@@ -92,13 +94,15 @@ public void loginLogoutResumeSyncing() throws InterruptedException {
         realm2.refresh();
         assertEquals(1, realm2.where(StringOnly.class).count());
         realm2.close();
+        looperThread.testComplete();
     }
 
     @Test
     @UiThreadTest
     public void waitForInitialRemoteData_mainThreadThrows() {
         final SyncUser user = SyncTestUtils.createTestUser(Constants.AUTH_URL);
-        SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
+        SyncConfiguration config = user.createConfiguration(Constants.USER_REALM)
+                .fullSynchronization()
                 .waitForInitialRemoteData()
                 .build();
 
@@ -124,6 +128,7 @@ public void waitForInitialRemoteData() throws InterruptedException {
 
         // 1. Copy a valid Realm to the server (and pray it does it within 10 seconds)
         final SyncConfiguration configOld = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                 .build();
@@ -143,8 +148,9 @@ public void execute(Realm realm) {
         // 2. Local state should now be completely reset. Open the same sync Realm but different local name again with
         // a new configuration which should download the uploaded changes (pray it managed to do so within the time frame).
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
-        SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
+        SyncConfiguration config = user.createConfiguration(Constants.USER_REALM)
                 .name("newRealm")
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .waitForInitialRemoteData()
                 .build();
@@ -174,7 +180,7 @@ public void execute(Realm realm) {
     public void waitForInitialData_resilientInCaseOfRetries() throws InterruptedException {
         SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), "password", true);
         SyncUser user = SyncUser.logIn(credentials, Constants.AUTH_URL);
-        final SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
+        final SyncConfiguration config = user.createConfiguration(Constants.USER_REALM)
                 .waitForInitialRemoteData()
                 .build();
 
@@ -211,7 +217,7 @@ public void run() {
     public void waitForInitialData_resilientInCaseOfRetriesAsync() {
         SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), "password", true);
         SyncUser user = SyncUser.logIn(credentials, Constants.AUTH_URL);
-        final SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
+        final SyncConfiguration config = user.createConfiguration(Constants.USER_REALM)
                 .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                 .directory(configurationFactory.getRoot())
                 .waitForInitialRemoteData()
@@ -244,6 +250,7 @@ public void waitForInitialRemoteData_readOnlyTrue() throws InterruptedException
 
         // 1. Copy a valid Realm to the server (and pray it does it within 10 seconds)
         final SyncConfiguration configOld = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .schema(StringOnly.class)
                 .build();
         Realm realm = Realm.getInstance(configOld);
@@ -264,6 +271,7 @@ public void execute(Realm realm) {
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, false), Constants.AUTH_URL);
         final SyncConfiguration configNew = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
                 .name("newRealm")
+                .fullSynchronization()
                 .waitForInitialRemoteData()
                 .readOnly()
                 .schema(StringOnly.class)
@@ -326,7 +334,7 @@ public void waitForInitialRemoteData_readOnlyFalse_upgradeSchema() {
     public void defaultRealm() throws InterruptedException {
         SyncCredentials credentials = SyncCredentials.nickname("test", false);
         SyncUser user = SyncUser.logIn(credentials, Constants.AUTH_URL);
-        SyncConfiguration config = SyncConfiguration.automatic();
+        SyncConfiguration config = user.getDefaultConfiguration();
         Realm realm = Realm.getInstance(config);
         SyncManager.getSession(config).downloadAllServerChanges();
         realm.refresh();
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index 26c68b52fa..61f6ea1d15 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -399,13 +399,13 @@ public void cachedInstanceShouldNotThrowIfRefreshTokenExpires() throws Interrupt
         SyncCredentials credentials = SyncCredentials.usernamePassword(username, password, true);
         final SyncUser user = spy(SyncUser.logIn(credentials, Constants.AUTH_URL));
 
-        when(user.isValid()).thenReturn(true, false);
+        when(user.isValid()).thenReturn(true, true, false);
 
         final RealmConfiguration configuration = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM).build();
         Realm realm = Realm.getInstance(configuration);
 
         assertFalse(user.isValid());
-        verify(user, times(2)).isValid();
+        verify(user, times(3)).isValid();
 
         final CountDownLatch backgroundThread = new CountDownLatch(1);
         // Should not throw when using an expired refresh_token form a different thread
@@ -446,7 +446,7 @@ public void buildingSyncConfigurationShouldThrowIfInvalidUser() {
             // We should not be able to build a configuration with an invalid/logged out user
             configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM).build();
             fail("Invalid user, it should not be possible to create a SyncConfiguration");
-        } catch (IllegalArgumentException expected) {
+        } catch (IllegalStateException expected) {
             // User not authenticated or authentication expired.
         }
 
@@ -454,7 +454,7 @@ public void buildingSyncConfigurationShouldThrowIfInvalidUser() {
             // We should not be able to build a configuration with an invalid/logged out user
             configurationFactory.createSyncConfigurationBuilder(currentUser, Constants.USER_REALM).build();
             fail("Invalid currentUser, it should not be possible to create a SyncConfiguration");
-        } catch (IllegalArgumentException expected) {
+        } catch (IllegalStateException expected) {
             // User not authenticated or authentication expired.
         }
     }
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/EncryptedSynchronizedRealmTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/EncryptedSynchronizedRealmTests.java
index 7c8b64a2f7..c0e1ae5cea 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/EncryptedSynchronizedRealmTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/EncryptedSynchronizedRealmTests.java
@@ -48,6 +48,7 @@ public void setEncryptionKey_canReOpenRealmWithoutKey() {
         final byte[] randomKey = TestHelper.getRandomKey();
 
         SyncConfiguration configWithEncryption = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .modules(new StringOnlyModule())
                 .waitForInitialRemoteData()
                 .errorHandler(new SyncSession.ErrorHandler() {
@@ -75,6 +76,7 @@ public void onError(SyncSession session, ObjectServerError error) {
         // fail
         user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, false), Constants.AUTH_URL);
         SyncConfiguration configWithoutEncryption = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .name("newName")
                 .modules(new StringOnlyModule())
                 .waitForInitialRemoteData()
@@ -165,6 +167,7 @@ public void setEncryptionKey_differentClientsWithDifferentKeys() throws Interrup
         final byte[] randomKey = TestHelper.getRandomKey();
 
         SyncConfiguration configWithEncryption = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .fullSynchronization()
                 .modules(new StringOnlyModule())
                 .waitForInitialRemoteData()
                 .errorHandler(new SyncSession.ErrorHandler() {
@@ -195,6 +198,7 @@ public void onError(SyncSession session, ObjectServerError error) {
         final byte[] adminRandomKey = TestHelper.getRandomKey();
 
         SyncConfiguration adminConfigWithEncryption = configurationFactory.createSyncConfigurationBuilder(adminUser, configWithEncryption.getServerUrl().toString())
+                .fullSynchronization()
                 .modules(new StringOnlyModule())
                 .waitForInitialRemoteData()
                 .errorHandler(new SyncSession.ErrorHandler() {
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ObjectLevelPermissionIntegrationTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ObjectLevelPermissionIntegrationTests.java
index 29c9c89cbe..437957706f 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ObjectLevelPermissionIntegrationTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ObjectLevelPermissionIntegrationTests.java
@@ -72,7 +72,6 @@ public void getPrivileges_serverDefaults() throws InterruptedException {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.DEFAULT_REALM)
                 .modules(schemaModule)
-                .partialRealm()
                 .build();
 
         Realm realm = Realm.getInstance(syncConfig);
@@ -119,7 +118,6 @@ public void restrictAccessToOwner() throws InterruptedException {
         SyncConfiguration user1SyncConfig = configurationFactory
                 .createSyncConfigurationBuilder(user1, Constants.DEFAULT_REALM)
                 .modules(schemaModules)
-                .partialRealm()
                 .build();
         Realm user1Realm = Realm.getInstance(user1SyncConfig);
         user1Realm.beginTransaction();
@@ -149,6 +147,7 @@ public void restrictAccessToOwner() throws InterruptedException {
         // Connect with admin user and verify that user1 object is visible (non-partial Realm)
         SyncUser adminUser = UserFactory.createNicknameUser(Constants.AUTH_URL, "admin2", true);
         SyncConfiguration adminConfig = configurationFactory.createSyncConfigurationBuilder(adminUser, Constants.DEFAULT_REALM)
+                .fullSynchronization()
                 .modules(schemaModules)
                 .waitForInitialRemoteData()
                 .build();
@@ -166,7 +165,6 @@ public void restrictAccessToOwner() throws InterruptedException {
         SyncUser user2 = UserFactory.createUniqueUser(Constants.AUTH_URL);
         SyncConfiguration syncConfig2 = configurationFactory.createSyncConfigurationBuilder(user2, Constants.DEFAULT_REALM)
                 .modules(schemaModules)
-                .partialRealm()
                 .build();
         Realm user2Realm = Realm.getInstance(syncConfig2);
         looperThread.closeAfterTest(user2Realm);
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
index 214af8c97d..e20642aa6c 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
@@ -73,7 +73,8 @@ protected void run() {
                 user = UserFactory.getInstance().loginWithDefaultUser(Constants.AUTH_URL);
                 String realmUrl = Constants.SYNC_SERVER_URL;
 
-                final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user, realmUrl)
+                final SyncConfiguration syncConfig = user.createConfiguration(realmUrl)
+                        .fullSynchronization()
                         .modules(new ProcessCommitTestsModule())
                         .directory(getService().getRoot())
                         .build();
@@ -124,7 +125,8 @@ public void expectSimpleCommit() {
 
         final SyncUser user = UserFactory.getInstance().createDefaultUser(Constants.AUTH_URL);
         String realmUrl = Constants.SYNC_SERVER_URL;
-        final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user,realmUrl)
+        final SyncConfiguration syncConfig = user.createConfiguration(realmUrl)
+                .fullSynchronization()
                 .modules(new ProcessCommitTestsModule())
                 .directory(looperThread.getRoot())
                 .build();
@@ -157,7 +159,8 @@ protected void run() {
                 user = UserFactory.getInstance().loginWithDefaultUser(Constants.AUTH_URL);
                 String realmUrl = Constants.SYNC_SERVER_URL;
 
-                final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user, realmUrl)
+                final SyncConfiguration syncConfig = user.createConfiguration(realmUrl)
+                        .fullSynchronization()
                         .modules(new ProcessCommitTestsModule())
                         .directory(getService().getRoot())
                         .name(UUID.randomUUID().toString() + ".realm")
@@ -204,7 +207,8 @@ public void expectALot() throws Throwable {
 
         final SyncUser user = UserFactory.getInstance().createDefaultUser(Constants.AUTH_URL);
         String realmUrl = Constants.SYNC_SERVER_URL;
-        final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user,realmUrl)
+        final SyncConfiguration syncConfig = user.createConfiguration(realmUrl)
+                .fullSynchronization()
                 .modules(new ProcessCommitTestsModule())
                 .directory(looperThread.getRoot())
                 .build();
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java
index 5efddd5eb7..228a5f08e1 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProgressListenerTests.java
@@ -61,7 +61,9 @@
     @Nonnull
     private SyncConfiguration createSyncConfig() {
         SyncUser user = UserFactory.createAdminUser(Constants.AUTH_URL);
-        return configFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL).build();
+        return configFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
+                .build();
     }
 
     private void writeSampleData(Realm realm) {
@@ -135,11 +137,14 @@ public void downloadProgressListener_changesOnly() {
         final CountDownLatch allChangesDownloaded = new CountDownLatch(1);
         SyncUser userWithData = UserFactory.createUniqueUser(Constants.AUTH_URL);
         SyncConfiguration userWithDataConfig = configFactory.createSyncConfigurationBuilder(userWithData, Constants.USER_REALM)
+                .fullSynchronization()
                 .build();
         URI serverUrl = createRemoteData(userWithDataConfig);
         SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
 
-        final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(adminUser, serverUrl.toString()).build();
+        final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(adminUser, serverUrl.toString())
+                .fullSynchronization()
+                .build();
         Realm realm = Realm.getInstance(config);
         SyncSession session = SyncManager.getSession(config);
         session.addDownloadProgressListener(ProgressMode.CURRENT_CHANGES, new ProgressListener() {
@@ -164,6 +169,7 @@ public void downloadProgressListener_indefinitely() throws InterruptedException
         final SyncUser userWithData = UserFactory.createUniqueUser(Constants.AUTH_URL);
         final SyncConfiguration userWithDataConfig = configFactory.createSyncConfigurationBuilder(userWithData, Constants.USER_REALM)
                 .name("remote")
+                .fullSynchronization()
                 .build();
 
         URI serverUrl = createRemoteData(userWithDataConfig);
@@ -182,6 +188,7 @@ public void run() {
         SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
         final SyncConfiguration adminConfig = configFactory.createSyncConfigurationBuilder(adminUser, serverUrl.toString())
                 .name("local")
+                .fullSynchronization()
                 .build();
         Realm adminRealm = Realm.getInstance(adminConfig);
         SyncSession session = SyncManager.getSession(adminConfig);
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/PartialSyncTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/QueryBasedSyncTests.java
similarity index 97%
rename from realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/PartialSyncTests.java
rename to realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/QueryBasedSyncTests.java
index accd479d25..6865121afa 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/PartialSyncTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/QueryBasedSyncTests.java
@@ -33,7 +33,7 @@
 import static org.junit.Assert.fail;
 
 @RunWith(AndroidJUnit4.class)
-public class PartialSyncTests extends StandardIntegrationTest {
+public class QueryBasedSyncTests extends StandardIntegrationTest {
 
     private static final int TEST_SIZE = 10;
 
@@ -42,7 +42,6 @@
     public void invalidQuery() {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         final SyncConfiguration partialSyncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
-                .partialRealm()
                 .build();
         final Realm realm = Realm.getInstance(partialSyncConfig);
         looperThread.closeAfterTest(realm);
@@ -68,7 +67,6 @@ public void invalidQuery() {
     public void listQueries_doNotCreateSubscriptions() {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         final SyncConfiguration partialSyncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
-                .partialRealm()
                 .build();
 
         final DynamicRealm dRealm = DynamicRealm.getInstance(partialSyncConfig);
@@ -159,6 +157,7 @@ public void namedSubscription() throws InterruptedException {
     public void partialSync_namedSubscriptionThrowsOnNonPartialRealms() {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         final SyncConfiguration fullSyncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
+                .fullSynchronization()
                 .name("fullySynchronizedRealm")
                 .build();
 
@@ -248,7 +247,7 @@ public void onError(String subscriptionName, Throwable error) {
 
     @Test
     @RunTestInLooperThread
-    public void unsubscribeAsync_nonExistingIdThrows() throws InterruptedException {
+    public void unsubscribeAsync_nonExistingIdThrows() {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         Realm realm = getPartialRealm(user);
         looperThread.closeAfterTest(realm);
@@ -271,7 +270,7 @@ public void onError(String subscriptionName, Throwable error) {
 
     @Test
     @RunTestInLooperThread
-    public void clearTable() throws InterruptedException {
+    public void clearTable() {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
         Realm realm = getPartialRealm(user);
         looperThread.closeAfterTest(realm);
@@ -301,7 +300,6 @@ private Realm getPartialRealm(SyncUser user) {
         final SyncConfiguration partialSyncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
                 .name("partialSync")
                 .modules(new PartialSyncModule())
-                .partialRealm()
                 .build();
         return Realm.getInstance(partialSyncConfig);
     }
@@ -309,7 +307,6 @@ private Realm getPartialRealm(SyncUser user) {
     private void createServerData(SyncUser user, String url) throws InterruptedException {
         final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, url)
                 .waitForInitialRemoteData()
-                .partialRealm()
                 .modules(new PartialSyncModule())
                 .build();
 
diff --git a/version.txt b/version.txt
index 6555596f93..92baa8632a 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.2.0-SNAPSHOT
\ No newline at end of file
+5.2.0-SNAPSHOT
