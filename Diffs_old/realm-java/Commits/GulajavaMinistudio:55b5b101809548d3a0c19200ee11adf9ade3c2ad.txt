diff --git a/CHANGELOG.md b/CHANGELOG.md
index 47022631a8..2e10c710f6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,21 @@
-## 4.2.0 (2017-11-17)
+## 4.2.1 (YYYY-MM-DD)
 
-### Breaking Changes
+### Enhancements
+
+### Bug Fixes
+
+* Added missing `toString()` for the implementation of `OrderedCollectionChangeSet`.
+
+### Internal
+
+* Use `OsList` instead of `OsResults` to add notification token on for `RealmList<RealmModel>`.
+
+### Credits
+
+* Thanks to @tbsandee for fixing a typo (#5548).
+
+
+## 4.2.0 (2017-11-17)
 
 ### Enhancements
 
@@ -14,7 +29,7 @@
 * Leaked file handler in the Realm Transformer (#5521).
 * Potential fix for "RealmError: Incompatible lock file" crash (#2459).
 
-### Interal
+### Internal
 
 * Updated JavaAssist to 3.22.0-GA.
 * Upgraded to Realm Sync 2.1.4.
@@ -22,7 +37,7 @@
 
 ### Credits
 
-Thanks to @rakshithravi1997 for adding `RealmQuery.and()` (#5520).
+* Thanks to @rakshithravi1997 for adding `RealmQuery.and()` (#5520).
 
 
 ## 4.1.1 (2017-10-27)
@@ -114,7 +129,7 @@ The internal file format has been upgraded. Opening an older Realm will upgrade
 
 ### Credits
 
-Thanks to @JussiPekonen for adding support for 2-digit time zone designators when importing JSON (#5309).
+* Thanks to @JussiPekonen for adding support for 2-digit time zone designators when importing JSON (#5309).
 
 
 ## 3.7.2 (2017-09-12)
diff --git a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
index ca5fe29fc6..1c3788f092 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
@@ -26,6 +26,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import javax.annotation.Nullable;
+
 import io.realm.entities.Dog;
 import io.realm.entities.Owner;
 import io.realm.rule.RunInLooperThread;
@@ -38,9 +40,11 @@
 import static junit.framework.Assert.assertSame;
 import static junit.framework.Assert.fail;
 import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertNotEquals;
 
 
 // Tests for the ordered collection fine grained notifications for both RealmResults and RealmList.
+@SuppressWarnings("ConstantConditions") // Suppress the null return value warnings for RealmList.get()
 @RunWith(Parameterized.class)
 public class OrderedCollectionChangeSetTests {
 
@@ -110,16 +114,6 @@ private void checkRanges(OrderedCollectionChangeSet.Range[] ranges, int... index
         }
     }
 
-    // Re-adds the dogs so they would be sorted by age in the list.
-    private void reorderRealmList(Realm realm) {
-        RealmResults<Dog> dogs = realm.where(Dog.class).findAllSorted(Dog.FIELD_AGE);
-        Owner owner = realm.where(Owner.class).findFirst();
-        owner.getDogs().clear();
-        for (Dog dog : dogs) {
-            owner.getDogs().add(dog);
-        }
-    }
-
     // Deletes Dogs objects which's columnLong is in the indices array.
     private void deleteObjects(Realm realm, int... indices) {
         for (int index : indices) {
@@ -130,10 +124,25 @@ private void deleteObjects(Realm realm, int... indices) {
     // Creates Dogs objects with columnLong set to the value elements in indices array.
     private void createObjects(Realm realm, int... indices) {
         for (int index : indices) {
-            realm.createObject(Dog.class).setAge(index);
-        }
-        if (type == ObservablesType.REALM_LIST) {
-            reorderRealmList(realm);
+            Dog dog = realm.createObject(Dog.class);
+            dog.setAge(index);
+            if (type == ObservablesType.REALM_LIST) {
+                Owner owner = realm.where(Owner.class).findFirst();
+                assertNotNull(owner);
+                RealmList<Dog> dogs = owner.getDogs();
+                boolean added = false;
+                // Insert the newly created dog to the RealmList by the order of age.
+                for (int i = 0; i < dogs.size(); i++) {
+                    if (dog.getAge() <= dogs.get(i).getAge()) {
+                        dogs.add(i, dog);
+                        added = true;
+                        break;
+                    }
+                }
+                if (!added) {
+                    dogs.add(dog);
+                }
+            }
         }
     }
 
@@ -147,9 +156,41 @@ private void modifyObjects(Realm realm, int... indices) {
     }
 
     private void moveObjects(Realm realm, int originAge, int newAge) {
-        realm.where(Dog.class).equalTo(Dog.FIELD_AGE, originAge).findFirst().setAge(newAge);
         if (type == ObservablesType.REALM_LIST) {
-            reorderRealmList(realm);
+            // For RealmList we need to:
+            // 1. Find the object by the original age and move it to the new place where it should be with the new age
+            //    set -- the RealmList is sorted by age.
+            // 2. Set the object's age with new value.
+            RealmList<Dog> dogs = realm.where(Owner.class).findFirst().getDogs();
+            int originIdx = -1;
+            int newIdx = -1;
+            for (int i = 0; i < dogs.size(); i++) {
+                Dog dog = dogs.get(i);
+                assertNotNull(dog);
+                if (dog.getAge() == originAge) {
+                    originIdx = i;
+                    break;
+                }
+            }
+            assertNotEquals(-1, originIdx);
+            for (int i = 0; i < dogs.size(); i++) {
+                if (i == originIdx) {
+                    // not precise code, but good enough for testing.
+                    continue;
+                }
+                if (newAge <= dogs.get(i).getAge()) {
+                    newIdx = i;
+                    break;
+                }
+            }
+            if (newIdx == -1) {
+                newIdx = dogs.size() - 1;
+            }
+            dogs.get(originIdx).setAge(newAge);
+            dogs.move(originIdx, newIdx);
+        } else {
+            // Since the RealmResults is sorted by age, just simply set the object's age with new value.
+            realm.where(Dog.class).equalTo(Dog.FIELD_AGE, originAge).findFirst().setAge(newAge);
         }
     }
 
@@ -160,7 +201,7 @@ private void registerCheckListener(Realm realm, final ChangesCheck changesCheck)
                 looperThread.keepStrongReference(results);
                 results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
                     @Override
-                    public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet changeSet) {
+                    public void onChange(RealmResults<Dog> collection, @Nullable OrderedCollectionChangeSet changeSet) {
                         changesCheck.check(changeSet);
                     }
                 });
@@ -170,7 +211,7 @@ public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet ch
                 looperThread.keepStrongReference(list);
                 list.addChangeListener(new OrderedRealmCollectionChangeListener<RealmList<Dog>>() {
                     @Override
-                    public void onChange(RealmList<Dog> collection, OrderedCollectionChangeSet changeSet) {
+                    public void onChange(RealmList<Dog> collection, @Nullable OrderedCollectionChangeSet changeSet) {
                         changesCheck.check(changeSet);
                     }
                 });
@@ -416,7 +457,7 @@ public void emptyChangeSet_findAllAsync() {
         looperThread.keepStrongReference(results);
         results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
             @Override
-            public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet changeSet) {
+            public void onChange(RealmResults<Dog> collection, @Nullable OrderedCollectionChangeSet changeSet) {
                 assertSame(collection, results);
                 assertEquals(10, collection.size());
                 assertNull(changeSet);
diff --git a/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java b/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java
index a162848569..52ca14ee0c 100644
--- a/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java
+++ b/realm/realm-library/src/main/java/io/realm/OrderedCollectionChangeSet.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import java.util.Locale;
+
 /**
  * This interface describes the changes made to a collection during the last update.
  * <p>
@@ -95,5 +97,10 @@ public Range(int startIndex, int length) {
             this.startIndex = startIndex;
             this.length = length;
         }
+
+        @Override
+        public String toString() {
+            return String.format(Locale.ENGLISH, "startIndex: %d, length: %d", startIndex, length);
+        }
     }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index 267d9aff0b..c0b9ac8fec 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -63,7 +63,7 @@
 
     private static final String ONLY_IN_MANAGED_MODE_MESSAGE = "This method is only available in managed mode.";
     static final String ALLOWED_ONLY_FOR_REALM_MODEL_ELEMENT_MESSAGE = "This feature is available only when the element type is implementing RealmModel.";
-    public static final String REMOVE_OUTSIDE_TRANSACTION_ERROR = "Objects can only be removed from inside a write transaction.";
+    private static final String REMOVE_OUTSIDE_TRANSACTION_ERROR = "Objects can only be removed from inside a write transaction.";
 
     @Nullable
     protected Class<E> clazz;
@@ -71,11 +71,9 @@
     protected String className;
 
     // Always null if RealmList is unmanaged, always non-null if managed.
-    final ManagedListOperator<E> osListOperator;
+    private final ManagedListOperator<E> osListOperator;
     final protected BaseRealm realm;
     private List<E> unmanagedList;
-    // Used for listeners on RealmList<RealmModel>
-    private OsResults osResults;
 
     /**
      * Creates a RealmList in unmanaged mode, where the elements are not controlled by a Realm.
@@ -966,11 +964,7 @@ private void checkForAddRemoveListener(@Nullable Object listener, boolean checkL
      */
     public void addChangeListener(OrderedRealmCollectionChangeListener<RealmList<E>> listener) {
         checkForAddRemoveListener(listener, true);
-        if (osListOperator.forRealmModel()) {
-            getOrCreateOsResultsForListener().addListener(this, listener);
-        } else {
-            osListOperator.getOsList().addListener(this, listener);
-        }
+        osListOperator.getOsList().addListener(this, listener);
     }
 
     /**
@@ -983,11 +977,7 @@ public void addChangeListener(OrderedRealmCollectionChangeListener<RealmList<E>>
      */
     public void removeChangeListener(OrderedRealmCollectionChangeListener<RealmList<E>> listener) {
         checkForAddRemoveListener(listener, true);
-        if (osListOperator.forRealmModel()) {
-            getOrCreateOsResultsForListener().removeListener(this, listener);
-        } else {
-            osListOperator.getOsList().removeListener(this, listener);
-        }
+        osListOperator.getOsList().removeListener(this, listener);
     }
 
     /**
@@ -1025,11 +1015,7 @@ public void removeChangeListener(OrderedRealmCollectionChangeListener<RealmList<
      */
     public void addChangeListener(RealmChangeListener<RealmList<E>> listener) {
         checkForAddRemoveListener(listener, true);
-        if (osListOperator.forRealmModel()) {
-            getOrCreateOsResultsForListener().addListener(this, listener);
-        } else {
-            osListOperator.getOsList().addListener(this, listener);
-        }
+        osListOperator.getOsList().addListener(this, listener);
     }
 
     /**
@@ -1042,11 +1028,7 @@ public void addChangeListener(RealmChangeListener<RealmList<E>> listener) {
      */
     public void removeChangeListener(RealmChangeListener<RealmList<E>> listener) {
         checkForAddRemoveListener(listener, true);
-        if (osListOperator.forRealmModel()) {
-            getOrCreateOsResultsForListener().removeListener(this, listener);
-        } else {
-            osListOperator.getOsList().removeListener(this, listener);
-        }
+        osListOperator.getOsList().removeListener(this, listener);
     }
 
     /**
@@ -1057,11 +1039,7 @@ public void removeChangeListener(RealmChangeListener<RealmList<E>> listener) {
      */
     public void removeAllChangeListeners() {
         checkForAddRemoveListener(null, false);
-        if (osListOperator.forRealmModel()) {
-            getOrCreateOsResultsForListener().removeAllListeners();
-        } else {
-            osListOperator.getOsList().removeAllListeners();
-        }
+        osListOperator.getOsList().removeAllListeners();
     }
 
     // Custom RealmList iterator.
@@ -1281,20 +1259,6 @@ private static boolean isClassForRealmModel(Class<?> clazz) {
         }
         throw new IllegalArgumentException("Unexpected value class: " + clazz.getName());
     }
-
-    // TODO: Object Store is not able to merge change set for links list. Luckily since we were still using LinkView
-    // when ship the fine grain notifications, the listener on RealmList is actually added to a OS Results which is
-    // created from the link view. OS Results is computing the change set by comparing the old/new collection. So it
-    // will give the right results if you remove all elements from a RealmList then add all them back and add one more
-    // new element. By right results it means the change set only include one insertion. But if the listener is on the
-    // OS List, the change set will include all ranges of th list. So we keep the old behaviour for
-    // RealmList<RealmModel> for now. See https://github.com/realm/realm-object-store/issues/541
-    private OsResults getOrCreateOsResultsForListener() {
-        if (osResults == null) {
-            this.osResults = new OsResults(realm.sharedRealm, osListOperator.getOsList(), null);
-        }
-        return osResults;
-    }
 }
 
 /**
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java b/realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java
index 986c18ba6d..93bbc3e7ac 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java
@@ -16,6 +16,8 @@
 
 package io.realm.internal;
 
+import java.util.Arrays;
+
 import javax.annotation.Nullable;
 
 import io.realm.OrderedCollectionChangeSet;
@@ -132,4 +134,22 @@ public long getNativeFinalizerPtr() {
 
     // Returns the indices array.
     private native static int[] nativeGetIndices(long nativePtr, int type);
+
+    @Override
+    public String toString() {
+        if (nativePtr == 0)  {
+            return "Change set is empty.";
+        }
+
+        String string = "Deletion Ranges: " +
+                Arrays.toString(getDeletionRanges()) +
+                "\n" +
+                "Insertion Ranges: " +
+                Arrays.toString(getInsertionRanges()) +
+                "\n" +
+                "Change Ranges: " +
+                Arrays.toString(getChangeRanges());
+        return string;
+
+    }
 }
