diff --git a/CHANGELOG.md b/CHANGELOG.md
index f81b6b2d12..3cb8140005 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,8 @@
 
 ### Breaking Changes
 
+* [ObjectServer] Updated protocol version to 18 which is only compatible with ROS > 1.6.0.
+
 ### Enhancements
 
 * [ObjectServer] Added support for Sync Progress Notifications through `SyncSession.addDownloadProgressListener(ProgressMode, ProgressListener)` and `SyncSession.addUploadProgressListener(ProgressMode, ProgressListener)` (#4104).
@@ -13,8 +15,8 @@
 
 ### Internal
 
-* Upgraded to Realm Sync 1.9.1
-* Upgraded to Realm Core 2.8.0
+* Upgraded to Realm Sync 1.10.1
+* Upgraded to Realm Core 2.8.4
 
 ### Credits
 
@@ -30,6 +32,7 @@
 
 * When converting nullable BLOB field to required, `null` values should be converted to `byte[0]` instead of `byte[1]`.
 * Fixed a bug which may cause duplicated primary key values when migrating a nullable primary key field to not nullable. `RealmObjectSchema.setRequired()` and `RealmObjectSchema.setNullable()` will throw when converting a nullable primary key field with null values stored to a required primary key field.
+* [ObjectServer] Retrying connections with exponential backoff, when encountering `ConnectException` (#4310).
 
 ### Internal
 
diff --git a/dependencies.list b/dependencies.list
index 70a8b12116..82afed2cb5 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,7 +1,7 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=1.9.1
-REALM_SYNC_SHA256=b1bd4be71c414f17fee01c05888989ecd0c22a57d4c760c6750f6634c2c29ee8
+REALM_SYNC_VERSION=1.10.1
+REALM_SYNC_SHA256=b48fd48461b563e2a6b1605ec346aca48b64b64a12d42a0f5a61135906d49074
 
 # Object Server Release used by Integration tests
 # `realm` is stable releases, `realm-testing` is developer builds.
@@ -10,4 +10,4 @@ REALM_SYNC_SHA256=b1bd4be71c414f17fee01c05888989ecd0c22a57d4c760c6750f6634c2c29e
 # /tools/sync_test_server/Dockerfile specify which repo (apt) we should
 # install/use between 'realm' and 'realm-testing', the version below should
 # correspond to an existing version on the *specified* repo.
-REALM_OBJECT_SERVER_DE_VERSION=1.7.5-180
+REALM_OBJECT_SERVER_DE_VERSION=1.7.6-62
diff --git a/examples/build.gradle b/examples/build.gradle
index 6d5c61e9f7..1d0e7df2e9 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -22,9 +22,8 @@ allprojects {
             maven { url 'https://jitpack.io' }
         }
         dependencies {
-            classpath 'com.android.tools.build:gradle:2.3.2'
+            classpath 'com.android.tools.build:gradle:2.3.3'
             classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
-            classpath 'com.github.JakeWharton:sdk-manager-plugin:0ce4cdf08009d79223850a59959d9d6e774d0f77'
             classpath 'com.novoda:gradle-android-command-plugin:1.5.0'
             classpath "io.realm:realm-gradle-plugin:${currentVersion}"
         }
diff --git a/realm/build.gradle b/realm/build.gradle
index fc408fc2ed..eed959332f 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -8,13 +8,13 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.2'
+        classpath 'com.android.tools.build:gradle:2.3.3'
         classpath 'de.undercouch:gradle-download-task:3.1.1'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
-        classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
+        classpath 'com.novoda:gradle-android-command-plugin:1.5.0'
         classpath 'com.github.skhatri:gradle-s3-plugin:1.0.2'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
-        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
+        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.0.1'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
         classpath "io.realm:realm-transformer:${file('../version.txt').text.trim()}"
         classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
index 33e47f88a9..ce7de91091 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
@@ -40,7 +40,7 @@ protected void setUp() throws Exception {
         Realm.init(InstrumentationRegistry.getInstrumentation().getContext());
     }
 
-    void init() {
+    private void init() {
         table = new Table();
         table.addColumn(RealmFieldType.INTEGER, "number");
         table.addColumn(RealmFieldType.STRING, "name");
@@ -106,45 +106,45 @@ public void testInvalidColumnIndexEqualTo() {
         TableQuery query = table.where();
 
         // Boolean
-        try { query.equalTo(new long[]{-1}, oneNullTable, true); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, true);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, true); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, true); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, true);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, true); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Date
-        try { query.equalTo(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.equalTo(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.equalTo(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.equalTo(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String
-        try { query.equalTo(new long[]{-1}, oneNullTable, "a"); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, "a");  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, "a"); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, "a"); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, "a");  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, "a"); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String case true
-        try { query.equalTo(new long[]{-1}, oneNullTable, "a", Case.SENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, "a", Case.SENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, "a", Case.SENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, "a", Case.SENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, "a", Case.SENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, "a", Case.SENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String case false
-        try { query.equalTo(new long[]{-1}, oneNullTable, "a", Case.INSENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{9}, oneNullTable, "a", Case.INSENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.equalTo(new long[]{10}, oneNullTable, "a", Case.INSENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{-1}, oneNullTable, "a", Case.INSENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{9}, oneNullTable, "a", Case.INSENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.equalTo(new long[]{10}, oneNullTable, "a", Case.INSENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
     public void testInvalidColumnIndexNotEqualTo() {
@@ -153,40 +153,40 @@ public void testInvalidColumnIndexNotEqualTo() {
 
 
         // Date
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, "a"); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, "a");  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, "a"); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, "a"); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, "a");  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, "a"); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String case true
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, "a", Case.SENSITIVE); fail("-1column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, "a", Case.SENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, "a", Case.SENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, "a", Case.SENSITIVE); fail("-1column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, "a", Case.SENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, "a", Case.SENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String case false
-        try { query.notEqualTo(new long[]{-1}, oneNullTable, "a", Case.INSENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{9}, oneNullTable, "a", Case.INSENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{10}, oneNullTable, "a", Case.INSENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.notEqualTo(new long[]{-1}, oneNullTable, "a", Case.INSENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{9}, oneNullTable, "a", Case.INSENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{10}, oneNullTable, "a", Case.INSENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
 
@@ -195,25 +195,25 @@ public void testInvalidColumnIndexGreaterThan() {
         TableQuery query = table.where();
 
         // Date
-        try { query.greaterThan(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThan(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.greaterThan(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThan(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.greaterThan(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThan(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.greaterThan(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThan(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
 
@@ -222,25 +222,25 @@ public void testInvalidColumnIndexGreaterThanOrEqual() {
         TableQuery query = table.where();
 
         // Date
-        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, new Date()); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, new Date()); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, 4.5d); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, 4.5d); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, 1.4f); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, 1.4f); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, 1); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.greaterThanOrEqual(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{9}, oneNullTable, 1); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
 
@@ -249,25 +249,25 @@ public void testInvalidColumnIndexLessThan() {
         TableQuery query = table.where();
 
         // Date
-        try { query.lessThan(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThan(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.lessThan(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThan(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.lessThan(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThan(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{9}, oneNullTable, 1.4f);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.lessThan(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThan(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{9}, oneNullTable, 1);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
     public void testInvalidColumnIndexLessThanOrEqual() {
@@ -275,25 +275,25 @@ public void testInvalidColumnIndexLessThanOrEqual() {
         TableQuery query = table.where();
 
         // Date
-        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, 4.5d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, 4.5d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, 4.5d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, 1.4f); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, 1.4f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, 1.4f); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, 1.4f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, 1); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.lessThanOrEqual(new long[]{-1}, oneNullTable, 1); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{9}, oneNullTable, 1); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{10}, oneNullTable, 1); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
 
@@ -302,25 +302,25 @@ public void testInvalidColumnIndexBetween() {
         TableQuery query = table.where();
 
         // Date
-        try { query.between(new long[]{-1}, new Date(), new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{9}, new Date(), new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{10}, new Date(), new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.between(new long[]{-1}, new Date(), new Date()); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{9}, new Date(), new Date());  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{10}, new Date(), new Date()); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Double
-        try { query.between(new long[]{-1}, 4.5d, 6.0d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{9}, 4.5d, 6.0d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{10}, 4.5d, 6.0d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.between(new long[]{-1}, 4.5d, 6.0d); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{9}, 4.5d, 6.0d);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{10}, 4.5d, 6.0d); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Float
-        try { query.between(new long[]{-1}, 1.4f, 5.8f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{9}, 1.4f, 5.8f); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{10}, 1.4f, 5.8f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.between(new long[]{-1}, 1.4f, 5.8f); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{9}, 1.4f, 5.8f); fail("9 column index"); }   catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{10}, 1.4f, 5.8f); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // Int / long
-        try { query.between(new long[]{-1}, 1, 10); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{9}, 1, 10);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{10}, 1, 10); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.between(new long[]{-1}, 1, 10); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{9}, 1, 10);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{10}, 1, 10); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
 
@@ -329,50 +329,51 @@ public void testInvalidColumnIndexContains() {
         TableQuery query = table.where();
 
         // String
-        try { query.contains(new long[]{-1}, oneNullTable, "hey"); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{9}, oneNullTable, "hey");  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{10}, oneNullTable, "hey"); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.contains(new long[]{-1}, oneNullTable, "hey"); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{9}, oneNullTable, "hey");  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{10}, oneNullTable, "hey"); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String case true
-        try { query.contains(new long[]{-1}, oneNullTable, "hey", Case.SENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{9}, oneNullTable, "hey", Case.SENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{10}, oneNullTable, "hey", Case.SENSITIVE); fail("-0 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.contains(new long[]{-1}, oneNullTable, "hey", Case.SENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{9}, oneNullTable, "hey", Case.SENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{10}, oneNullTable, "hey", Case.SENSITIVE); fail("-0 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
 
         // String case false
-        try { query.contains(new long[]{-1}, oneNullTable, "hey", Case.INSENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{9}, oneNullTable, "hey", Case.INSENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{10}, oneNullTable, "hey", Case.INSENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException e) {}
+        try { query.contains(new long[]{-1}, oneNullTable, "hey", Case.INSENSITIVE); fail("-1 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{9}, oneNullTable, "hey", Case.INSENSITIVE);  fail("9 column index"); }  catch (ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{10}, oneNullTable, "hey", Case.INSENSITIVE); fail("10 column index"); } catch (ArrayIndexOutOfBoundsException ignore) {}
     }
 
+    @SuppressWarnings("ConstantConditions")
     public void testNullInputQuery() {
         Table t = new Table();
         t.addColumn(RealmFieldType.DATE, "dateCol");
         t.addColumn(RealmFieldType.STRING, "stringCol");
 
         Date nullDate = null;
-        try { t.where().equalTo(new long[]{0}, oneNullTable, nullDate);               fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().notEqualTo(new long[]{0}, oneNullTable, nullDate);            fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().greaterThan(new long[]{0}, oneNullTable, nullDate);           fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().greaterThanOrEqual(new long[]{0}, oneNullTable, nullDate);    fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().lessThan(new long[]{0}, oneNullTable, nullDate);              fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().lessThanOrEqual(new long[]{0}, oneNullTable, nullDate);       fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().between(new long[]{0}, nullDate, new Date());   fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().between(new long[]{0}, new Date(), nullDate);   fail("Date is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().between(new long[]{0}, nullDate, nullDate);     fail("Dates are null"); } catch (IllegalArgumentException e) { }
+        try { t.where().equalTo(new long[]{0}, oneNullTable, nullDate);               fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().notEqualTo(new long[]{0}, oneNullTable, nullDate);            fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().greaterThan(new long[]{0}, oneNullTable, nullDate);           fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().greaterThanOrEqual(new long[]{0}, oneNullTable, nullDate);    fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().lessThan(new long[]{0}, oneNullTable, nullDate);              fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().lessThanOrEqual(new long[]{0}, oneNullTable, nullDate);       fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().between(new long[]{0}, nullDate, new Date());   fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().between(new long[]{0}, new Date(), nullDate);   fail("Date is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().between(new long[]{0}, nullDate, nullDate);     fail("Dates are null"); } catch (IllegalArgumentException ignore) { }
 
         String nullString = null;
-        try { t.where().equalTo(new long[]{1}, oneNullTable, nullString);                         fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().equalTo(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);       fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().notEqualTo(new long[]{1}, oneNullTable, nullString);                      fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().notEqualTo(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);    fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().contains(new long[]{1}, oneNullTable, nullString);                        fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().contains(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);      fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().beginsWith(new long[]{1}, oneNullTable, nullString);                      fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().beginsWith(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);    fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().endsWith(new long[]{1}, oneNullTable, nullString);                        fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().endsWith(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);      fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().like(new long[]{1}, oneNullTable, nullString);                            fail("String is null"); } catch (IllegalArgumentException e) { }
-        try { t.where().like(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);          fail("String is null"); } catch (IllegalArgumentException e) { }
+        try { t.where().equalTo(new long[]{1}, oneNullTable, nullString);                         fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().equalTo(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);       fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().notEqualTo(new long[]{1}, oneNullTable, nullString);                      fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().notEqualTo(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);    fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().contains(new long[]{1}, oneNullTable, nullString);                        fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().contains(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);      fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().beginsWith(new long[]{1}, oneNullTable, nullString);                      fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().beginsWith(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);    fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().endsWith(new long[]{1}, oneNullTable, nullString);                        fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().endsWith(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);      fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().like(new long[]{1}, oneNullTable, nullString);                            fail("String is null"); } catch (IllegalArgumentException ignore) { }
+        try { t.where().like(new long[]{1}, oneNullTable, nullString, Case.INSENSITIVE);          fail("String is null"); } catch (IllegalArgumentException ignore) { }
     }
 
 
@@ -416,16 +417,15 @@ public void testShouldFind() {
 
         // Tests out of range.
         assertEquals(-1, query.find(6));
-        try {  query.find(7);  fail("Exception expected");  } catch (ArrayIndexOutOfBoundsException e) {  }
+        try {  query.find(7);  fail("Exception expected");  } catch (ArrayIndexOutOfBoundsException ignore) {  }
     }
 
 
 
     public void testQueryTestForNoMatches() {
-        Table t = new Table();
-        t = TestHelper.getTableWithAllColumnTypes();
+        Table t = TestHelper.getTableWithAllColumnTypes();
 
-        t.add(new byte[]{1,2,3}, true, new Date(1384423149761l), 4.5d, 5.7f, 100, "string");
+        t.add(new byte[]{1,2,3}, true, new Date(1384423149761L), 4.5d, 5.7f, 100, "string");
 
         TableQuery q = t.where().greaterThan(new long[]{5}, oneNullTable, 1000); // No matches
 
@@ -444,57 +444,60 @@ public void testQueryWithWrongDataType() {
 
         // Compares strings in non string columns.
         for (int i = 0; i <= 6; i++) {
-            try { query.equalTo(new long[]{i}, oneNullTable, "string");                 assert(false); } catch(IllegalArgumentException e) {}
-            try { query.notEqualTo(new long[]{i}, oneNullTable, "string");              assert(false); } catch(IllegalArgumentException e) {}
-            try { query.beginsWith(new long[]{i}, oneNullTable, "string");              assert(false); } catch(IllegalArgumentException e) {}
-            try { query.endsWith(new long[]{i}, oneNullTable, "string");                assert(false); } catch(IllegalArgumentException e) {}
-            try { query.like(new long[]{i}, oneNullTable, "string");                    assert(false); } catch(IllegalArgumentException e) {}
-            try { query.contains(new long[]{i}, oneNullTable, "string");                assert(false); } catch(IllegalArgumentException e) {}
+            if (i != 6) {
+                try { query.equalTo(new long[]{i}, oneNullTable, "string");    fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.notEqualTo(new long[]{i}, oneNullTable, "string"); fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.beginsWith(new long[]{i}, oneNullTable, "string"); fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.endsWith(new long[]{i}, oneNullTable, "string");   fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.like(new long[]{i}, oneNullTable, "string");       fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.contains(new long[]{i}, oneNullTable, "string");   fail(); } catch(IllegalArgumentException ignore) {}
+            }
         }
 
+
         // Compares integer in non integer columns.
         for (int i = 0; i <= 6; i++) {
             if (i != 5) {
-                try { query.equalTo(new long[]{i}, oneNullTable, 123);                      assert(false); } catch(IllegalArgumentException e) {}
-                try { query.notEqualTo(new long[]{i}, oneNullTable, 123);                   assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThan(new long[]{i}, oneNullTable, 123);                     assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThanOrEqual(new long[]{i}, oneNullTable, 123);              assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThan(new long[]{i}, oneNullTable, 123);                  assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThanOrEqual(new long[]{i}, oneNullTable, 123);           assert(false); } catch(IllegalArgumentException e) {}
-                try { query.between(new long[]{i}, 123, 321);                               assert(false); } catch(IllegalArgumentException e) {}
+                try { query.equalTo(new long[]{i}, oneNullTable, 123);            fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.notEqualTo(new long[]{i}, oneNullTable, 123);         fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThan(new long[]{i}, oneNullTable, 123);           fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThanOrEqual(new long[]{i}, oneNullTable, 123);    fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThan(new long[]{i}, oneNullTable, 123);        fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThanOrEqual(new long[]{i}, oneNullTable, 123); fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.between(new long[]{i}, 123, 321);                     fail(); } catch(IllegalArgumentException ignore) {}
             }
         }
 
         // Compares float in non float columns.
         for (int i = 0; i <= 6; i++) {
             if (i != 4) {
-                try { query.equalTo(new long[]{i}, oneNullTable, 123F);                     assert(false); } catch(IllegalArgumentException e) {}
-                try { query.notEqualTo(new long[]{i}, oneNullTable, 123F);                  assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThan(new long[]{i}, oneNullTable, 123F);                    assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThanOrEqual(new long[]{i}, oneNullTable, 123F);             assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThan(new long[]{i}, oneNullTable, 123F);                 assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThanOrEqual(new long[]{i}, oneNullTable, 123F);          assert(false); } catch(IllegalArgumentException e) {}
-                try { query.between(new long[]{i}, 123F, 321F);                             assert(false); } catch(IllegalArgumentException e) {}
+                try { query.equalTo(new long[]{i}, oneNullTable, 123F);            fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.notEqualTo(new long[]{i}, oneNullTable, 123F);         fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThan(new long[]{i}, oneNullTable, 123F);           fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThanOrEqual(new long[]{i}, oneNullTable, 123F);    fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThan(new long[]{i}, oneNullTable, 123F);        fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThanOrEqual(new long[]{i}, oneNullTable, 123F); fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.between(new long[]{i}, 123F, 321F);                    fail(); } catch(IllegalArgumentException ignore) {}
             }
         }
 
         // Compares double in non double columns.
         for (int i = 0; i <= 6; i++) {
             if (i != 3) {
-                try { query.equalTo(new long[]{i}, oneNullTable, 123D);                     assert(false); } catch(IllegalArgumentException e) {}
-                try { query.notEqualTo(new long[]{i}, oneNullTable, 123D);                  assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThan(new long[]{i}, oneNullTable, 123D);                    assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThanOrEqual(new long[]{i}, oneNullTable, 123D);             assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThan(new long[]{i}, oneNullTable, 123D);                 assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThanOrEqual(new long[]{i}, oneNullTable, 123D);          assert(false); } catch(IllegalArgumentException e) {}
-                try { query.between(new long[]{i}, 123D, 321D);                             assert(false); } catch(IllegalArgumentException e) {}
+                try { query.equalTo(new long[]{i}, oneNullTable, 123D);                     fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.notEqualTo(new long[]{i}, oneNullTable, 123D);                  fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThan(new long[]{i}, oneNullTable, 123D);                    fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThanOrEqual(new long[]{i}, oneNullTable, 123D);             fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThan(new long[]{i}, oneNullTable, 123D);                 fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThanOrEqual(new long[]{i}, oneNullTable, 123D);          fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.between(new long[]{i}, 123D, 321D);                             fail(); } catch(IllegalArgumentException ignore) {}
             }
         }
 
         // Compares boolean in non boolean columns.
         for (int i = 0; i <= 6; i++) {
             if (i != 1) {
-              try { query.equalTo(new long[]{i}, oneNullTable, true);                       assert(false); } catch(IllegalArgumentException e) {}
+              try { query.equalTo(new long[]{i}, oneNullTable, true);                       fail(); } catch(IllegalArgumentException ignore) {}
             }
         }
 
@@ -502,12 +505,12 @@ public void testQueryWithWrongDataType() {
         /* TODO:
         for (int i = 0; i <= 8; i++) {
             if (i != 2) {
-                try { query.equal(i, new Date());                   assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThan(i, new Date());                assert(false); } catch(IllegalArgumentException e) {}
-                try { query.lessThanOrEqual(i, new Date());         assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThan(i, new Date());             assert(false); } catch(IllegalArgumentException e) {}
-                try { query.greaterThanOrEqual(i, new Date());      assert(false); } catch(IllegalArgumentException e) {}
-                try { query.between(i, new Date(), new Date());     assert(false); } catch(IllegalArgumentException e) {}
+                try { query.equal(i, new Date());                   fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThan(i, new Date());                fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.lessThanOrEqual(i, new Date());         fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThan(i, new Date());             fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.greaterThanOrEqual(i, new Date());      fail(); } catch(IllegalArgumentException ignore) {}
+                try { query.between(i, new Date(), new Date());     fail(); } catch(IllegalArgumentException ignore) {}
             }
         }
         */
@@ -520,98 +523,98 @@ public void testColumnIndexOutOfBounds() {
         // Queries the table.
         TableQuery query = table.where();
 
-        try { query.minimumInt(0);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumFloat(0);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumDouble(0);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumInt(1);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumFloat(1);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumDouble(1);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumInt(2);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumFloat(2);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumDouble(2);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumInt(6);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumFloat(6);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.minimumDouble(6);           assert(false); } catch(IllegalArgumentException e) {}
-
-        try { query.maximumInt(0);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumFloat(0);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumDouble(0);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumInt(1);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumFloat(1);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumDouble(1);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumInt(2);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumFloat(2);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumDouble(2);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumInt(6);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumFloat(6);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.maximumDouble(6);           assert(false); } catch(IllegalArgumentException e) {}
-
-        try { query.sumInt(0);                     assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumFloat(0);                assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumDouble(0);               assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumInt(1);                     assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumFloat(1);                assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumDouble(1);               assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumInt(2);                     assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumFloat(2);                assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumDouble(2);               assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumInt(6);                     assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumFloat(6);                assert(false); } catch(IllegalArgumentException e) {}
-        try { query.sumDouble(6);               assert(false); } catch(IllegalArgumentException e) {}
-
-        try { query.averageInt(0);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageFloat(0);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageDouble(0);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageInt(1);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageFloat(1);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageDouble(1);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageInt(2);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageFloat(2);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageDouble(2);           assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageInt(6);                 assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageFloat(6);            assert(false); } catch(IllegalArgumentException e) {}
-        try { query.averageDouble(6);           assert(false); } catch(IllegalArgumentException e) {}
+        try { query.minimumInt(0);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumFloat(0);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumDouble(0);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumInt(1);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumFloat(1);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumDouble(1);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumInt(2);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumFloat(2);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumDouble(2);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumInt(6);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumFloat(6);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.minimumDouble(6);           fail(); } catch(IllegalArgumentException ignore) {}
+
+        try { query.maximumInt(0);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumFloat(0);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumDouble(0);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumInt(1);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumFloat(1);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumDouble(1);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumInt(2);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumFloat(2);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumDouble(2);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumInt(6);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumFloat(6);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.maximumDouble(6);           fail(); } catch(IllegalArgumentException ignore) {}
+
+        try { query.sumInt(0);                     fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumFloat(0);                fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumDouble(0);               fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumInt(1);                     fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumFloat(1);                fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumDouble(1);               fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumInt(2);                     fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumFloat(2);                fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumDouble(2);               fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumInt(6);                     fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumFloat(6);                fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.sumDouble(6);               fail(); } catch(IllegalArgumentException ignore) {}
+
+        try { query.averageInt(0);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageFloat(0);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageDouble(0);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageInt(1);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageFloat(1);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageDouble(1);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageInt(2);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageFloat(2);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageDouble(2);           fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageInt(6);                 fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageFloat(6);            fail(); } catch(IllegalArgumentException ignore) {}
+        try { query.averageDouble(6);           fail(); } catch(IllegalArgumentException ignore) {}
         // Out of bounds for string
-        try { query.equalTo(new long[]{7}, oneNullTable, "string");                 assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{7}, oneNullTable, "string");              assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.beginsWith(new long[]{7}, oneNullTable, "string");              assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.endsWith(new long[]{7}, oneNullTable, "string");                assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.like(new long[]{7}, oneNullTable, "string");                    assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.contains(new long[]{7}, oneNullTable, "string");                assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{7}, oneNullTable, "string");                 fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{7}, oneNullTable, "string");              fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.beginsWith(new long[]{7}, oneNullTable, "string");              fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.endsWith(new long[]{7}, oneNullTable, "string");                fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.like(new long[]{7}, oneNullTable, "string");                    fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.contains(new long[]{7}, oneNullTable, "string");                fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Out of bounds for integer
-        try { query.equalTo(new long[]{7}, oneNullTable, 123);                      assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{7}, oneNullTable, 123);                   assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{7}, oneNullTable, 123);                     assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{7}, oneNullTable, 123);              assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{7}, oneNullTable, 123);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{7}, oneNullTable, 123);           assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{7}, 123, 321);                               assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{7}, oneNullTable, 123);                      fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{7}, oneNullTable, 123);                   fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{7}, oneNullTable, 123);                     fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{7}, oneNullTable, 123);              fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{7}, oneNullTable, 123);                  fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{7}, oneNullTable, 123);           fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{7}, 123, 321);                               fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Out of bounds for float
-        try { query.equalTo(new long[]{7}, oneNullTable, 123F);                     assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{7}, oneNullTable, 123F);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{7}, oneNullTable, 123F);                    assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{7}, oneNullTable, 123F);             assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{7}, oneNullTable, 123F);                 assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{7}, oneNullTable, 123F);          assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{7}, 123F, 321F);                             assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{7}, oneNullTable, 123F);                     fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{7}, oneNullTable, 123F);                  fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{7}, oneNullTable, 123F);                    fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{7}, oneNullTable, 123F);             fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{7}, oneNullTable, 123F);                 fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{7}, oneNullTable, 123F);          fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{7}, 123F, 321F);                             fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Out of bounds for double
-        try { query.equalTo(new long[]{7}, oneNullTable, 123D);                     assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.notEqualTo(new long[]{7}, oneNullTable, 123D);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThan(new long[]{7}, oneNullTable, 123D);                    assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.lessThanOrEqual(new long[]{7}, oneNullTable, 123D);             assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThan(new long[]{7}, oneNullTable, 123D);                 assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.greaterThanOrEqual(new long[]{7}, oneNullTable, 123D);          assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
-        try { query.between(new long[]{7}, 123D, 321D);                             assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{7}, oneNullTable, 123D);                     fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.notEqualTo(new long[]{7}, oneNullTable, 123D);                  fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThan(new long[]{7}, oneNullTable, 123D);                    fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.lessThanOrEqual(new long[]{7}, oneNullTable, 123D);             fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThan(new long[]{7}, oneNullTable, 123D);                 fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.greaterThanOrEqual(new long[]{7}, oneNullTable, 123D);          fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
+        try { query.between(new long[]{7}, 123D, 321D);                             fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
 
 
         // Out of bounds for boolean
-        try { query.equalTo(new long[]{7}, oneNullTable, true);                     assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
+        try { query.equalTo(new long[]{7}, oneNullTable, true);                     fail(); } catch(ArrayIndexOutOfBoundsException ignore) {}
     }
 
     public void testMaximumDate() {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
index 1241e4ba64..32fce953ba 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
@@ -36,11 +36,11 @@
 @RunWith(Parameterized.class)
 public class JNITableInsertTest {
 
-    List<Object> value = new ArrayList<Object>();
+    private List<Object> value = new ArrayList<>();
 
     @Parameterized.Parameters
     public static Collection<Object[]> parameters() {
-        List<Object> value = new ArrayList<Object>();
+        List<Object> value = new ArrayList<>();
         value.add(0, true);
         value.add(1, "abc");
         value.add(2, 123L);
@@ -66,7 +66,7 @@ public void testShouldThrowExceptionWhenColumnNameIsTooLong() {
             table.addColumn(RealmFieldType.STRING, "THIS STRING HAS 64 CHARACTERS, "
                     + "LONGER THAN THE MAX 63 CHARACTERS");
             fail("Too long name");
-        } catch (IllegalArgumentException e) {
+        } catch (IllegalArgumentException ignore) {
         }
     }
 
@@ -95,7 +95,7 @@ public void testGenericAddOnTable() {
                     try {
                         t.add(value.get(i));
                         fail("No matching type");
-                    } catch (IllegalArgumentException e) {
+                    } catch (IllegalArgumentException ignored) {
                     }
                 }
             }
diff --git a/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp b/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp
index d9f15dd859..dd391c2b26 100644
--- a/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp
@@ -23,13 +23,19 @@
 #include <binding_callback_thread_observer.hpp>
 
 #include "util.hpp"
-#include "jni_util/jni_utils.hpp"
+#include "jni_util/java_class.hpp"
 #include "jni_util/java_method.hpp"
+#include "jni_util/jni_utils.hpp"
 
 using namespace realm;
 using namespace realm::jni_util;
+using namespace realm::util;
 
 struct AndroidClientListener : public realm::BindingCallbackThreadObserver {
+    AndroidClientListener(JNIEnv* env)
+        : m_realm_exception_class(env, "io/realm/exceptions/RealmError")
+    {
+    }
 
     void did_create_thread() override
     {
@@ -44,7 +50,23 @@ struct AndroidClientListener : public realm::BindingCallbackThreadObserver {
         // Failing to detach the JVM before closing the thread will crash on ART
         JniUtils::detach_current_thread();
     }
-} s_client_thread_listener;
+
+    void handle_error(std::exception const& e) override
+    {
+        JNIEnv* env = JniUtils::get_env(true);
+        std::string msg = format("An exception has been thrown on the sync client thread:\n%1", e.what());
+        Log::f(msg.c_str());
+        // Since user has no way to handle exceptions thrown on the sync client thread, we just convert it to a Java
+        // exception to get more debug information for ourself.
+        // FIXME: We really need to find a universal and clever way to get the native backtrace when exception thrown
+        env->ThrowNew(m_realm_exception_class, msg.c_str());
+    }
+
+private:
+    // For some reasons, FindClass() doesn't work in the native thread even when the JVM is attached before. Get the
+    // RealmError class on a normal JVM thread and throw it later on the sync client thread.
+    JavaClass m_realm_exception_class;
+};
 
 struct AndroidSyncLoggerFactory : public realm::SyncLoggerFactory {
     // The level param is ignored. Use the global RealmLog.setLevel() to control all log levels.
@@ -72,8 +94,9 @@ JNIEXPORT void JNICALL Java_io_realm_SyncManager_nativeInitializeSyncManager(JNI
         JStringAccessor base_file_path(env, sync_base_dir); // throws
         SyncManager::shared().configure_file_system(base_file_path, SyncManager::MetadataMode::NoEncryption);
 
+        static AndroidClientListener client_thread_listener(env);
         // Register Sync Client thread start/stop callback
-        g_binding_callback_thread_observer = &s_client_thread_listener;
+        g_binding_callback_thread_observer = &client_thread_listener;
 
         // init logger
         SyncManager::shared().set_logger_factory(s_sync_logger_factory);
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index f5e1ce7bb5..1e3cbb1789 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit f5e1ce7bb5ceda14dfff9b2412618f8ea9f6be74
+Subproject commit 1e3cbb178952e26112a474f596aad6bf4f938adf
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index 1a5438ba92..427e782030 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import java.net.ConnectException;
+
 /**
  * This class enumerate all potential errors related to using the Object Server or synchronizing data.
  */
@@ -127,6 +129,16 @@ public static ErrorCode fromInt(int errorCode) {
         throw new IllegalArgumentException("Unknown error code: " + errorCode);
     }
 
+    /**
+     * Helper method for mapping between {@link Exception} and {@link ErrorCode}.
+     * @param exception to be mapped as an {@link ErrorCode}.
+     * @return mapped {@link ErrorCode}.
+     */
+    public static ErrorCode fromException(Exception exception) {
+        // ConnectException is recoverable (with exponential backoff)
+        return (exception instanceof ConnectException) ? ErrorCode.IO_EXCEPTION : ErrorCode.UNKNOWN;
+    }
+
     public enum Category {
         FATAL,          // Abort session as soon as possible
         RECOVERABLE,    // Still possible to recover the session by either rebinding or providing the required information.
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
index 6f45d1146f..1fdaa9f8cf 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
@@ -74,6 +74,13 @@ public static AuthenticateResponse from(ObjectServerError error) {
         return new AuthenticateResponse(error);
     }
 
+    /**
+     * Helper method for creating a failed response from an {@link Exception}.
+     */
+    public static AuthenticateResponse from(Exception exception) {
+        return AuthenticateResponse.from(new ObjectServerError(ErrorCode.fromException(exception), exception));
+    }
+
     /**
      * Helper method for creating a valid user login response. The user returned will be assumed to have all permissions
      * and doesn't expire.
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordResponse.java
index 4fc951d3e5..777869ab6b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/ChangePasswordResponse.java
@@ -19,7 +19,6 @@
 
 import io.realm.ErrorCode;
 import io.realm.ObjectServerError;
-import io.realm.log.RealmLog;
 import okhttp3.Response;
 
 /**
@@ -27,7 +26,14 @@
  */
 public class ChangePasswordResponse extends AuthServerResponse {
 
-    public static ChangePasswordResponse from(Response response) {
+    /**
+     * Helper method for creating the proper change password response. This method will set the appropriate error
+     * depending on any HTTP response codes or I/O errors.
+     *
+     * @param response the server response.
+     * @return the change password response.
+     */
+    static ChangePasswordResponse from(Response response) {
         if (response.isSuccessful()) {
             return new ChangePasswordResponse();
         }
@@ -40,10 +46,20 @@ public static ChangePasswordResponse from(Response response) {
         }
     }
 
-    public static ChangePasswordResponse createFailure(ObjectServerError objectServerError) {
+    /**
+     * Helper method for creating a failed response.
+     */
+    public static ChangePasswordResponse from(ObjectServerError objectServerError) {
         return new ChangePasswordResponse(objectServerError);
     }
 
+    /**
+     * Helper method for creating a failed response from an {@link Exception}.
+     */
+    public static ChangePasswordResponse from(Exception exception) {
+        return ChangePasswordResponse.from(new ObjectServerError(ErrorCode.fromException(exception), exception));
+    }
+
     private ChangePasswordResponse() {
         this.error = null;
     }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/LogoutResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LogoutResponse.java
index 6a0181ca95..f13fbf6b2e 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/LogoutResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LogoutResponse.java
@@ -56,6 +56,13 @@ public static LogoutResponse from(ObjectServerError error) {
         return new LogoutResponse(error);
     }
 
+    /**
+     * Helper method for creating a failed response from an {@link Exception}.
+     */
+    public static LogoutResponse from(Exception exception) {
+        return LogoutResponse.from(new ObjectServerError(ErrorCode.fromException(exception), exception));
+    }
+
     /**
      * Creates an unsuccessful authentication response. This should only happen in case of network or I/O
      * related issues.
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java
index 709544e2f6..1c7bc4afb0 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpAuthenticationServer.java
@@ -21,8 +21,6 @@
 import java.net.URL;
 import java.util.concurrent.TimeUnit;
 
-import io.realm.ErrorCode;
-import io.realm.ObjectServerError;
 import io.realm.SyncCredentials;
 import io.realm.internal.objectserver.Token;
 import io.realm.log.RealmLog;
@@ -54,7 +52,7 @@ public AuthenticateResponse loginUser(SyncCredentials credentials, URL authentic
             String requestBody = AuthenticateRequest.userLogin(credentials).toJson();
             return authenticate(authenticationUrl, requestBody);
         } catch (Exception e) {
-            return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN, e));
+            return AuthenticateResponse.from(e);
         }
     }
 
@@ -64,7 +62,7 @@ public AuthenticateResponse loginToRealm(Token refreshToken, URI serverUrl, URL
             String requestBody = AuthenticateRequest.realmLogin(refreshToken, serverUrl).toJson();
             return authenticate(authenticationUrl, requestBody);
         } catch (Exception e) {
-            return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN, e));
+            return AuthenticateResponse.from(e);
         }
     }
 
@@ -74,7 +72,7 @@ public AuthenticateResponse refreshUser(Token userToken, URI serverUrl, URL auth
             String requestBody = AuthenticateRequest.userRefresh(userToken, serverUrl).toJson();
             return authenticate(authenticationUrl, requestBody);
         } catch (Exception e) {
-            return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN, e));
+            return AuthenticateResponse.from(e);
         }
     }
 
@@ -84,7 +82,7 @@ public LogoutResponse logout(Token userToken, URL authenticationUrl) {
             String requestBody = LogoutRequest.create(userToken).toJson();
             return logout(buildActionUrl(authenticationUrl, ACTION_LOGOUT), requestBody);
         } catch (Exception e) {
-            return LogoutResponse.from(new ObjectServerError(ErrorCode.UNKNOWN, e));
+            return LogoutResponse.from(e);
         }
     }
 
@@ -93,8 +91,8 @@ public ChangePasswordResponse changePassword(Token userToken, String newPassword
         try {
             String requestBody = ChangePasswordRequest.create(userToken, newPassword).toJson();
             return changePassword(buildActionUrl(authenticationUrl, ACTION_CHANGE_PASSWORD), requestBody);
-        } catch (Throwable e) {
-            return ChangePasswordResponse.createFailure(new ObjectServerError(ErrorCode.UNKNOWN, e));
+        } catch (Exception e) {
+            return ChangePasswordResponse.from(e);
         }
     }
 
@@ -103,8 +101,8 @@ public ChangePasswordResponse changePassword(Token adminToken, String userId, St
         try {
             String requestBody = ChangePasswordRequest.create(adminToken, userId, newPassword).toJson();
             return changePassword(buildActionUrl(authenticationUrl, ACTION_CHANGE_PASSWORD), requestBody);
-        } catch (Throwable e) {
-            return ChangePasswordResponse.createFailure(new ObjectServerError(ErrorCode.UNKNOWN, e));
+        } catch (Exception e) {
+            return ChangePasswordResponse.from(e);
         }
     }
 
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/suite/IntegrationTestSuite.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/suite/IntegrationTestSuite.java
new file mode 100644
index 0000000000..87b8f5cb8b
--- /dev/null
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/suite/IntegrationTestSuite.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.objectserver.suite;
+
+
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+
+import io.realm.SSLConfigurationTests;
+import io.realm.SyncedRealmTests;
+import io.realm.objectserver.AuthTests;
+import io.realm.objectserver.EncryptedSynchronizedRealmTests;
+import io.realm.objectserver.ManagementRealmTests;
+import io.realm.objectserver.ProcessCommitTests;
+
+// Test suite includes all integration tests. Makes it easy to run all integration tests in the Android Studio.
+@RunWith(Suite.class)
+@Suite.SuiteClasses({
+        SSLConfigurationTests.class,
+        SyncedRealmTests.class,
+        AuthTests.class,
+        EncryptedSynchronizedRealmTests.class,
+        ManagementRealmTests.class,
+        ProcessCommitTests.class})
+public class IntegrationTestSuite {
+}
