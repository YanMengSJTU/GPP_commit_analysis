diff --git a/CHANGELOG.md b/CHANGELOG.md
index 829f3bd168..196609245e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -35,6 +35,7 @@
 * Broken case insensitive query with indexed field (#4788).
 * [ObjectServer] Bug related to the behaviour of `SyncUser#logout` and the use of invalid `SyncUser` with `SyncConfiguration` (#4822).
 * [ObjectServer] Not all error codes from the server were recognized correctly, resulting in UNKNOWN being reported instead.
+* [ObjectServer] Prevent the use of a `SyncUser` that explicitly logged out, to open a Realm (#4975).
 
 ### Internal
 
diff --git a/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java b/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java
index 67c611202c..8200675ba4 100644
--- a/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/ImmutableRealmSchema.java
@@ -32,7 +32,7 @@
 
     @Override
     public RealmObjectSchema get(String className) {
-        checkEmpty(className, EMPTY_STRING_MSG);
+        checkNotEmpty(className, EMPTY_STRING_MSG);
 
         String internalClassName = Table.getTableNameForClass(className);
         if (!realm.getSharedRealm().hasTable(internalClassName)) { return null; }
diff --git a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
index e3ce877039..fd52865647 100644
--- a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import java.util.Locale;
+
 import io.realm.internal.Table;
 
 /**
@@ -29,7 +31,7 @@
 
     @Override
     public RealmObjectSchema get(String className) {
-        checkEmpty(className, EMPTY_STRING_MSG);
+        checkNotEmpty(className, EMPTY_STRING_MSG);
 
         String internalClassName = Table.getTableNameForClass(className);
         if (!realm.getSharedRealm().hasTable(internalClassName)) { return null; }
@@ -40,11 +42,15 @@ public RealmObjectSchema get(String className) {
     @Override
     public RealmObjectSchema create(String className) {
         // Adding a class is always permitted.
-        checkEmpty(className, EMPTY_STRING_MSG);
+        checkNotEmpty(className, EMPTY_STRING_MSG);
 
         String internalTableName = Table.getTableNameForClass(className);
         if (internalTableName.length() > Table.TABLE_MAX_LENGTH) {
-            throw new IllegalArgumentException("Class name is too long. Limit is 56 characters: " + className.length());
+            throw new IllegalArgumentException(
+                    String.format(Locale.US,
+                            "Class name is too long. Limit is %1$d characters: %2$s",
+                            Table.TABLE_MAX_LENGTH,
+                            className.length()));
         }
         return new MutableRealmObjectSchema(realm, this, realm.getSharedRealm().createTable(internalTableName));
     }
@@ -52,7 +58,7 @@ public RealmObjectSchema create(String className) {
     @Override
     public void remove(String className) {
         realm.checkNotInSync(); // Destructive modifications are not permitted.
-        checkEmpty(className, EMPTY_STRING_MSG);
+        checkNotEmpty(className, EMPTY_STRING_MSG);
         String internalTableName = Table.getTableNameForClass(className);
         checkHasTable(className, "Cannot remove class because it is not in this Realm: " + className);
         Table table = getTable(className);
@@ -65,8 +71,8 @@ public void remove(String className) {
     @Override
     public RealmObjectSchema rename(String oldClassName, String newClassName) {
         realm.checkNotInSync(); // Destructive modifications are not permitted.
-        checkEmpty(oldClassName, "Class names cannot be empty or null");
-        checkEmpty(newClassName, "Class names cannot be empty or null");
+        checkNotEmpty(oldClassName, "Class names cannot be empty or null");
+        checkNotEmpty(newClassName, "Class names cannot be empty or null");
         String oldInternalName = Table.getTableNameForClass(oldClassName);
         String newInternalName = Table.getTableNameForClass(newClassName);
         checkHasTable(oldClassName, "Cannot rename class because it doesn't exist in this Realm: " + oldClassName);
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index ecbb4e4f91..5a0acbfdde 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -138,7 +138,7 @@ public boolean contains(String className) {
         return realm.getSharedRealm().hasTable(Table.getTableNameForClass(className));
     }
 
-    void checkEmpty(String str, String error) {
+    void checkNotEmpty(String str, String error) {
         if (str == null || str.isEmpty()) {
             throw new IllegalArgumentException(error);
         }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index e99a35d903..f4f903684d 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -242,7 +242,7 @@ static void setAuthServerImpl(AuthenticationServer authServerImpl) {
     }
 
     // Return the currently configured User store.
-    static UserStore getUserStore() {
+    public static UserStore getUserStore() {
         return userStore;
     }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 1ef1f5cf10..44dc82dbae 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -535,7 +535,7 @@ public String toJson() {
      */
     public boolean isValid() {
         Token userToken = getSyncUser().getUserToken();
-        return syncUser.isLoggedIn() && userToken != null && userToken.expiresMs() > System.currentTimeMillis() && SyncManager.getUserStore().isActive(syncUser.getIdentity());
+        return userToken != null && userToken.expiresMs() > System.currentTimeMillis() && SyncManager.getUserStore().isActive(syncUser.getIdentity());
     }
 
     /**
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
index d70160e7fb..1f294630e6 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
@@ -91,13 +91,13 @@ public void realmClosed(RealmConfiguration configuration) {
             // make sure the user is still valid
             SyncUser user = syncConfig.getUser();
             if (!user.isValid()) {
-                if (user.getAccessToken() == null) {
+                if (!SyncManager.getUserStore().isActive(user.getIdentity())) {
                     throw new IllegalStateException("The SyncUser is already logged out and can not use the provided configuration to open a Realm.");
                 } else {
                     // user was not logged out but the `refresh_token` is not longer valid
                     // the user will still get a stall version of Realm, that will work offline
                     // but not sync.
-                    RealmLog.warn("Can not use the provided configuration to open a Realm, the SyncUser is no longer valid.");
+                    RealmLog.warn("The provided configuration uses an expired SyncUser token, this Realm instance will work offline.");
                 }
             }
             String rosServerUrl = syncConfig.getServerUrl().toString();
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index a15c83686e..3bab0bd93d 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -359,6 +359,21 @@ public void usingConfigurationWithInvalidUserShouldThrow() {
         }
     }
 
+    @Test
+    public void logout_currentUserMoreThanOne() {
+        SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
+        final RealmConfiguration config1 = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .build();
+        SyncUser.currentUser().logout();
+        SyncUser user2 = UserFactory.createUniqueUser(Constants.AUTH_URL);
+        try {
+            Realm.getInstance(config1);
+            fail("SyncUser is not longer valid, it should not be possible to get a Realm instance");
+        } catch (IllegalStateException expected) {
+        }
+        assertEquals(user2, SyncUser.currentUser());
+    }
+
     // logging out 'user' should have the same impact on other instance(s) of the same user
     @Test
     public void loggingOutUserShouldImpactOtherInstances() throws InterruptedException {
