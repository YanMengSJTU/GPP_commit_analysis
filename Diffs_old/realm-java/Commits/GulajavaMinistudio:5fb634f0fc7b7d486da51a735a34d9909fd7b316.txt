diff --git a/CHANGELOG.md b/CHANGELOG.md
index 196609245e..5aeb08f0b6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -15,6 +15,7 @@
 ### Bug Fixes
 
 * Potential crash after using `Realm.getSchema()` to change the schema of a typed Realm. `Realm.getSchema()` now returns an immutable `RealmSchema` instance.
+* `RealmSchema.create(String)` and `RealmObjectSchema.setClassName(String)` did not accept class name whose length was 51 to 57.
 
 ### Internal
 
diff --git a/SUPPORT.md b/SUPPORT.md
new file mode 100644
index 0000000000..4cfe265eca
--- /dev/null
+++ b/SUPPORT.md
@@ -0,0 +1,19 @@
+# Support
+
+The Realm team is here to help you with your Realm-related issues!
+
+## Documentation
+
+Before asking questions, please familiarize yourself with our [Java](https://realm.io/docs/java/latest) documentation. We also have a number of [Tech Notes](https://realm.io/docs/tech-notes/) which cover various topics that may be of interest.
+
+## Stack Overflow
+
+If you have questions about configuring or using Realm you can ask them on Stack Overflow. We continually monitor the [`realm` tag](https://stackoverflow.com/tags/realm). Please also tag your question with `java`, `android`, or other tags as appropriate.
+
+When asking questions on Stack Overflow, please keep in mind Stack Overflow's [question guidelines](https://stackoverflow.com/help/how-to-ask), and please use their search functionality to see if your question has been asked before.
+
+## GitHub Issues
+
+If you are running into issues with Realm, including potential bugs or feature requests, we encourage you to file an issue on our [GitHub issue tracker](https://github.com/realm/realm-java/issues). Please check out our [Contribution Guidelines](CONTRIBUTING.md) for information on how to properly file an issue.
+
+We greatly appreciate demonstration projects that we can run for ourselves in order to see issues or potential bugs; we prioritize clearly-written tickets that include reproduction cases. You may attach these to the ticket; let us know if you need to share them confidentially, and weâ€™ll provide instructions on how to do so.
diff --git a/realm/realm-library/src/androidTest/java/io/realm/MutableRealmIntegerTests.java b/realm/realm-library/src/androidTest/java/io/realm/MutableRealmIntegerTests.java
index 9ae057fd57..ae1c0c78f0 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/MutableRealmIntegerTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/MutableRealmIntegerTests.java
@@ -23,7 +23,6 @@
 import org.json.JSONObject;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -158,7 +157,7 @@ public void validAndManaged_managed() {
     }
 
     /**
-     * @Required MutableRealmIntegers should not be nullable.
+     * {@literal @}Required MutableRealmIntegers should not be nullable.
      * There are other tests testing nullabilty: just need to test @Required here.
      * There is no attempt to control the nullability of an unmanaged MutableRealmInteger.
      * An attempt to copy an unmanaged model object with a null-valued MutableRealmInteger
@@ -197,8 +196,8 @@ public void required() {
 
 
     /**
-     * @Indexed MutableRealmIntegers should have indices.
-     * Without @Index they should not.
+     * MutableRealmIntegers annotated with {@literal @}Index should have indices.
+     * Without {@literal @}Index they should not.
      */
     @Test
     public void indexed() {
@@ -311,7 +310,7 @@ public void isLive() {
      * Assure that changes to a MutableRealmInteger acquired from a managed object are reflected in the object.
      */
     @Test
-    public void copyToisLive() {
+    public void copyToIsLive() {
         MutableRealmIntegerTypes obj = new MutableRealmIntegerTypes();
         MutableRealmInteger unmanagedRI = obj.getColumnNullableMutableRealmInteger();
         unmanagedRI.set(42L);
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
index a902259033..e5e9537463 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
@@ -32,6 +32,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.Date;
+import java.util.Locale;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import io.realm.entities.AllTypes;
@@ -487,14 +488,16 @@ public void setClassName_throwOnLongClassName() {
         realm.commitTransaction();
         realm.close();
 
+        final String tooLongClassName = "MigrationNameIsLongerThan57Char_ThisShouldThrowAnException";
+        assertEquals(58, tooLongClassName.length());
+
         // Gets ready for the 2nd version migration.
         RealmMigration migration = new RealmMigration() {
             @Override
             public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                 realm.getSchema()
                         .get(MigrationPrimaryKey.CLASS_NAME)
-                        // 57 characters
-                        .setClassName("MigrationNameIsLongerThan56CharThisShouldThrowAnException");
+                        .setClassName(tooLongClassName);
             }
         };
         RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
@@ -507,7 +510,12 @@ public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
             Realm.getInstance(realmConfig);
             fail();
         } catch (IllegalArgumentException expected) {
-            assertEquals("Class name is too long. Limit is 56 characters: 'MigrationNameIsLongerThan56CharThisShouldThrowAnException' (57)",
+            assertEquals(
+                    String.format(Locale.US,
+                            "Class name is too long. Limit is %1$d characters: '%2$s' (%3$d)",
+                            tooLongClassName.length() - 1,
+                            tooLongClassName,
+                            tooLongClassName.length()),
                     expected.getMessage());
         }
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
index 670308eb55..076e0ff0af 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
@@ -32,6 +32,7 @@
 
 import io.realm.entities.AllJavaTypes;
 import io.realm.entities.Dog;
+import io.realm.internal.Table;
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static org.junit.Assert.assertEquals;
@@ -955,15 +956,23 @@ public void renameField_withPrimaryKey() {
 
     @Test
     public void setGetClassName() {
-        assertEquals("Dog", DOG_SCHEMA.getClassName());
-        String newClassName = "Darby";
-        if (type == ObjectSchemaType.MUTABLE) {
-            DOG_SCHEMA.setClassName(newClassName);
-            assertEquals(newClassName, DOG_SCHEMA.getClassName());
-            assertTrue(realmSchema.contains(newClassName));
-        } else {
+        final String[] validClassNames = {
+                TestHelper.getRandomString(1),
+                "Darby",
+                TestHelper.getRandomString(Table.CLASS_NAME_MAX_LENGTH)
+        };
+
+        if (type == ObjectSchemaType.IMMUTABLE) {
             thrown.expect(UnsupportedOperationException.class);
-            DOG_SCHEMA.setClassName(newClassName);
+            DOG_SCHEMA.setClassName(validClassNames[0]);
+            return;
+        }
+
+        assertEquals("Dog", DOG_SCHEMA.getClassName());
+        for (String validClassName : validClassNames) {
+            DOG_SCHEMA.setClassName(validClassName);
+            assertEquals(validClassName, DOG_SCHEMA.getClassName());
+            assertTrue(realmSchema.contains(validClassName));
         }
     }
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
index 8aef9fc1ea..d1306b0652 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
@@ -36,6 +36,7 @@
 import io.realm.entities.DogPrimaryKey;
 import io.realm.entities.Owner;
 import io.realm.entities.PrimaryKeyAsString;
+import io.realm.internal.Table;
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static org.junit.Assert.assertEquals;
@@ -117,12 +118,21 @@ public void getAll() {
 
     @Test
     public void create() {
-        if (type == SchemaType.MUTABLE) {
-            realmSchema.create("Foo");
-            assertTrue(realmSchema.contains("Foo"));
-        } else {
+        final String[] validClassNames = {
+                TestHelper.getRandomString(1),
+                "Darby",
+                TestHelper.getRandomString(Table.CLASS_NAME_MAX_LENGTH)
+        };
+
+        if (type == SchemaType.IMMUTABLE) {
             thrown.expect(UnsupportedOperationException.class);
-            realmSchema.create("Foo");
+            realmSchema.create(validClassNames[0]);
+            return;
+        }
+
+        for (String validClassName : validClassNames) {
+            realmSchema.create(validClassName);
+            assertTrue(realmSchema.contains(validClassName));
         }
     }
 
@@ -132,11 +142,12 @@ public void create_invalidNameThrows() {
             return;
         }
 
-        String[] names = { null, "", TestHelper.getRandomString(57) };
+        String[] names = { null, "", TestHelper.getRandomString(58) };
 
         for (String name : names) {
             try {
                 realmSchema.create(name);
+                fail();
             } catch (IllegalArgumentException ignored) {
             }
             assertFalse(String.format("'%s' failed", name), realmSchema.contains(name));
diff --git a/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java
index 8b2a021b9c..1e6ea61c0b 100644
--- a/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java
@@ -40,8 +40,10 @@ public RealmObjectSchema setClassName(String className) {
         realm.checkNotInSync(); // renaming a table is not permitted
         checkEmpty(className);
         String internalTableName = Table.getTableNameForClass(className);
-        if (internalTableName.length() > Table.TABLE_MAX_LENGTH) {
-            throw new IllegalArgumentException("Class name is too long. Limit is 56 characters: \'" + className + "\' (" + Integer.toString(className.length()) + ")");
+        if (className.length() > Table.CLASS_NAME_MAX_LENGTH) {
+            throw new IllegalArgumentException(String.format(Locale.US,
+                    "Class name is too long. Limit is %1$d characters: \'%2$s\' (%3$d)",
+                    Table.CLASS_NAME_MAX_LENGTH, className, className.length()));
         }
         if (realm.sharedRealm.hasTable(internalTableName)) {
             throw new IllegalArgumentException("Class already exists: " + className);
diff --git a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
index fd52865647..fbc8f34db5 100644
--- a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
@@ -45,11 +45,11 @@ public RealmObjectSchema create(String className) {
         checkNotEmpty(className, EMPTY_STRING_MSG);
 
         String internalTableName = Table.getTableNameForClass(className);
-        if (internalTableName.length() > Table.TABLE_MAX_LENGTH) {
+        if (className.length() > Table.CLASS_NAME_MAX_LENGTH) {
             throw new IllegalArgumentException(
                     String.format(Locale.US,
                             "Class name is too long. Limit is %1$d characters: %2$s",
-                            Table.TABLE_MAX_LENGTH,
+                            Table.CLASS_NAME_MAX_LENGTH,
                             className.length()));
         }
         return new MutableRealmObjectSchema(realm, this, realm.getSharedRealm().createTable(internalTableName));
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index da46f0298e..858b4b1334 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -32,13 +32,14 @@
  */
 public class Table implements TableSchema, NativeObject {
 
-    public static final int TABLE_MAX_LENGTH = 56; // Max length of class names without prefix
+    private static final String TABLE_PREFIX = Util.getTablePrefix();
+    private static final int TABLE_NAME_MAX_LENGTH = 63; // Max length of table names
+    public static final int CLASS_NAME_MAX_LENGTH = TABLE_NAME_MAX_LENGTH - TABLE_PREFIX.length(); // Max length of class names
     public static final long INFINITE = -1;
     public static final boolean NULLABLE = true;
     public static final boolean NOT_NULLABLE = false;
     public static final int NO_MATCH = -1;
 
-    private static final String TABLE_PREFIX = Util.getTablePrefix();
     private static final String PRIMARY_KEY_TABLE_NAME = "pk";
     private static final String PRIMARY_KEY_CLASS_COLUMN_NAME = "pk_table";
     private static final long PRIMARY_KEY_CLASS_COLUMN_INDEX = 0;
