diff --git a/CHANGELOG.md b/CHANGELOG.md
index b2ab370eff..55ffbf9fe6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,9 @@
+## 5.1.1 (YYYY-MM-DD)
+
+### Enhancements
+
+* Improved speed and allocations when parsing field descriptions in queries (#5547).
+
 ## 5.1.0 (2018-04-25)
 
 ### Enhancements
diff --git a/Jenkinsfile b/Jenkinsfile
index 4a7876c51d..557e7f03f4 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -202,7 +202,7 @@ def archiveRosLog(String id) {
 def sendMetrics(String metricName, String metricValue, Map<String, String> tags) {
   def tagsString = getTagsString(tags)
   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '5b8ad2d9-61a4-43b5-b4df-b8ff6b1f16fa', passwordVariable: 'influx_pass', usernameVariable: 'influx_user']]) {
-    sh "curl -i -XPOST 'https://greatscott-pinheads-70.c.influxdb.com:8086/write?db=realm' --data-binary '${metricName},${tagsString} value=${metricValue}i' --user '${env.influx_user}:${env.influx_pass}'"
+    sh "curl -i -XPOST 'https://influxdb.realmlab.net/write?db=realm' --data-binary '${metricName},${tagsString} value=${metricValue}i' --user '${env.influx_user}:${env.influx_pass}'"
   }
 }
 
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java
index 4ed36faccc..81964c00fd 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java
@@ -4,6 +4,7 @@
 import android.support.test.runner.AndroidJUnit4;
 
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -26,6 +27,7 @@ public static void setUp() {
     //            adb push <realm-java>/tools/sync_test_server/keys/android_test_certificate.crt /sdcard/
     //            then import the certificate from the device (Settings/Security/Install from storage)
     @Test
+    @Ignore("Root certificate have expired. Replace with newer one. https://github.com/realm/realm-java/issues/5970")
     public void sslVerifyCallback_certificateChainWithRootCAInstalledShouldValidate() {
         // simulating the following certificate chain
         // ---
@@ -109,6 +111,7 @@ public void sslVerifyCallback_certificateChainWithRootCAInstalledShouldValidate(
     }
 
     @Test
+    @Ignore("Root certificate have expired. Replace with newer one. https://github.com/realm/realm-java/issues/5970")
     public void sslVerifyCallback_shouldVerifyHostname() {
         // simulating the following certificate chain
         // ---
diff --git a/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java
index 6d3857bb88..a9f1b9cbe4 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java
@@ -15,12 +15,14 @@
  */
 package io.realm.internal.fields;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
+import java.util.regex.Pattern;
 
 import io.realm.RealmFieldType;
 import io.realm.internal.ColumnInfo;
@@ -38,6 +40,9 @@
  * </ul>
  */
 public abstract class FieldDescriptor {
+
+    private static final Pattern FIELD_SEPARATOR = Pattern.compile("\\.");
+
     public interface SchemaProxy {
         boolean hasCache();
 
@@ -273,10 +278,17 @@ protected final void setCompilationResults(
         if (fieldDescription == null || fieldDescription.equals("")) {
             throw new IllegalArgumentException("Invalid query: field name is empty");
         }
-        if (fieldDescription.endsWith(".")) {
+
+        int lastDotIndex = fieldDescription.lastIndexOf(".");
+        if (lastDotIndex == fieldDescription.length() - 1) {
             throw new IllegalArgumentException("Invalid query: field name must not end with a period ('.')");
         }
-        return Arrays.asList(fieldDescription.split("\\."));
+
+        if (lastDotIndex > -1) {
+            return Arrays.asList(FIELD_SEPARATOR.split(fieldDescription));
+        } else {
+            return Collections.singletonList(fieldDescription);
+        }
     }
 
     private void verifyColumnType(String className, String columnName, RealmFieldType columnType, Set<RealmFieldType> validTypes) {
