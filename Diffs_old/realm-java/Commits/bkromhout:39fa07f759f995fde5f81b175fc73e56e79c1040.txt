diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0e29df4f4d..e91f1840d4 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -7,6 +7,8 @@
 * Removed `BaseRealm` from the public API.
 * Removed `HandlerController` from the public API.
 * Removed constructor of `RealmAsyncTask` from the public API8 (#1594).
+* `RealmBaseAdapter` has been moved to its own GitHub repository: https://github.com/realm/realm-android-adapters
+  See https://github.com/realm/realm-android-adapters/README.md for further info on how to include it.
 
 ### Deprecated
 
diff --git a/examples/adapterExample/build.gradle b/examples/adapterExample/build.gradle
deleted file mode 100644
index 707733ce88..0000000000
--- a/examples/adapterExample/build.gradle
+++ /dev/null
@@ -1,29 +0,0 @@
-apply plugin: 'android-sdk-manager'
-apply plugin: 'com.android.application'
-apply plugin: 'android-command'
-apply plugin: 'realm-android'
-
-android {
-    //noinspection GroovyAssignabilityCheck
-    compileSdkVersion rootProject.sdkVersion
-    //noinspection GroovyAssignabilityCheck
-    buildToolsVersion rootProject.buildTools
-
-    defaultConfig {
-        applicationId "io.realm.examples.realmadapters"
-        //noinspection GroovyAssignabilityCheck
-        targetSdkVersion rootProject.sdkVersion
-        minSdkVersion 15
-        versionCode 1
-        versionName "1.0"
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-        }
-    }
-
-    command {
-        events 2000
-    }
-}
diff --git a/examples/adapterExample/lint.xml b/examples/adapterExample/lint.xml
deleted file mode 100644
index 829e13eda8..0000000000
--- a/examples/adapterExample/lint.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<lint>
-    <issue id="AllowBackup" severity="ignore" />
-    <issue id="GoogleAppIndexingWarning" severity="ignore" />
-    <issue id="IconMissingDensityFolder" severity="ignore" />
-    <issue id="IconLauncherShape" severity="ignore" />
-</lint>
diff --git a/examples/adapterExample/src/main/AndroidManifest.xml b/examples/adapterExample/src/main/AndroidManifest.xml
deleted file mode 100644
index 5958789fd6..0000000000
--- a/examples/adapterExample/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest package="io.realm.examples.realmadapters"
-          xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <application
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name"
-        android:theme="@style/AppTheme">
-
-        <activity
-            android:name=".AdapterExampleActivity"
-            android:configChanges="keyboardHidden|orientation|screenSize"
-            android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-
-    </application>
-
-</manifest>
diff --git a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/AdapterExampleActivity.java b/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/AdapterExampleActivity.java
deleted file mode 100644
index df09a02d9d..0000000000
--- a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/AdapterExampleActivity.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.examples.realmadapters;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.os.Message;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.ListView;
-
-import io.realm.Realm;
-import io.realm.RealmConfiguration;
-import io.realm.RealmResults;
-import io.realm.examples.realmadapters.models.TimeStamp;
-
-
-public class AdapterExampleActivity extends Activity {
-
-    private Realm realm;
-    private WorkerThread workerThread;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_my);
-
-        RealmConfiguration realmConfig = new RealmConfiguration.Builder(this).build();
-        Realm.deleteRealm(realmConfig);
-        // Set the default Realm configuration at the beginning.
-        Realm.setDefaultConfiguration(realmConfig);
-        realm = Realm.getDefaultInstance();
-
-        RealmResults<TimeStamp> timeStamps = realm.where(TimeStamp.class).findAll();
-        final MyAdapter adapter = new MyAdapter(this, timeStamps);
-        ListView listView = (ListView) findViewById(R.id.listView);
-        listView.setAdapter(adapter);
-        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                TimeStamp timeStamp = adapter.getAdapterData().get(i);
-                Message message = buildMessage(WorkerHandler.REMOVE_TIMESTAMP, timeStamp.getTimeStamp());
-
-                workerThread.workerHandler.sendMessage(message);
-                return true;
-            }
-        });
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        workerThread.quit();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        workerThread = new WorkerThread();
-        workerThread.start();
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        realm.close(); // Remember to close Realm when done.
-    }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        getMenuInflater().inflate(R.menu.my, menu);
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        int id = item.getItemId();
-        if (id == R.id.action_add) {
-            Message message = buildMessage(WorkerHandler.ADD_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-            workerThread.workerHandler.sendMessage(message);
-        }
-        return true;
-    }
-
-    private static Message buildMessage(int action, String timeStamp) {
-        Bundle bundle = new Bundle(2);
-        bundle.putInt(WorkerHandler.ACTION, action);
-        bundle.putString(WorkerHandler.TIMESTAMP, timeStamp);
-        Message message = new Message();
-        message.setData(bundle);
-        return message;
-    }
-}
diff --git a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/MyAdapter.java b/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/MyAdapter.java
deleted file mode 100644
index 48ab829baf..0000000000
--- a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/MyAdapter.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.examples.realmadapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListAdapter;
-import android.widget.TextView;
-
-import io.realm.OrderedRealmCollection;
-import io.realm.RealmBaseAdapter;
-import io.realm.examples.realmadapters.models.TimeStamp;
-
-class MyAdapter extends RealmBaseAdapter<TimeStamp> implements ListAdapter {
-
-    private static class ViewHolder {
-        TextView timestamp;
-    }
-
-    public MyAdapter(Context context, OrderedRealmCollection<TimeStamp> realmResults) {
-        super(context, realmResults, true);
-    }
-
-    @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
-        ViewHolder viewHolder;
-        if (convertView == null) {
-            convertView = inflater.inflate(android.R.layout.simple_list_item_1, parent, false);
-            viewHolder = new ViewHolder();
-            viewHolder.timestamp = (TextView) convertView.findViewById(android.R.id.text1);
-            convertView.setTag(viewHolder);
-        } else {
-            viewHolder = (ViewHolder) convertView.getTag();
-        }
-
-        TimeStamp item = adapterData.get(position);
-        viewHolder.timestamp.setText(item.getTimeStamp());
-        return convertView;
-    }
-
-    public OrderedRealmCollection<TimeStamp> getAdapterData() {
-        return adapterData;
-    }
-}
diff --git a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/WorkerHandler.java b/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/WorkerHandler.java
deleted file mode 100644
index 062da433f3..0000000000
--- a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/WorkerHandler.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.realm.examples.realmadapters;
-
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-
-import io.realm.Realm;
-import io.realm.examples.realmadapters.models.TimeStamp;
-
-class WorkerHandler extends Handler {
-
-    public static final int ADD_TIMESTAMP = 1;
-    public static final int REMOVE_TIMESTAMP = 2;
-
-    public static final String ACTION = "action";
-    public static final String TIMESTAMP = "timestamp";
-
-    private final Realm realm;
-
-    public WorkerHandler(Realm realm) {
-        this.realm = realm;
-    }
-
-    @Override
-    public void handleMessage(Message msg) {
-        final Bundle bundle = msg.getData();
-
-        final int action = bundle.getInt(ACTION);
-        final String timestamp = bundle.getString(TIMESTAMP);
-
-        switch (action) {
-            case ADD_TIMESTAMP:
-                realm.beginTransaction();
-                realm.createObject(TimeStamp.class).setTimeStamp(timestamp);
-                realm.commitTransaction();
-                break;
-            case REMOVE_TIMESTAMP:
-                realm.beginTransaction();
-                realm.where(TimeStamp.class).equalTo("timeStamp", timestamp).findAll().deleteAllFromRealm();
-                realm.commitTransaction();
-                break;
-        }
-    }
-}
diff --git a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/WorkerThread.java b/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/WorkerThread.java
deleted file mode 100644
index 00f7551eea..0000000000
--- a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/WorkerThread.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.realm.examples.realmadapters;
-
-import android.os.Handler;
-import android.os.Looper;
-
-import java.util.concurrent.CountDownLatch;
-
-import io.realm.Realm;
-
-class WorkerThread extends Thread {
-
-    public Handler workerHandler;
-    private CountDownLatch realmOpen;
-
-    @Override
-    public void run() {
-        Realm realm = null;
-        try {
-            Looper.prepare();
-            realm = Realm.getDefaultInstance();
-            realmOpen = new CountDownLatch(1);
-            workerHandler = new WorkerHandler(realm);
-            Looper.loop();
-        } finally {
-            if (realm != null) {
-                realm.close();
-                realmOpen.countDown();
-            }
-        }
-    }
-
-    public void quit() {
-        workerHandler.getLooper().quit();
-        try {
-            realmOpen.await();
-        } catch (InterruptedException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/models/TimeStamp.java b/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/models/TimeStamp.java
deleted file mode 100644
index 8945954fa2..0000000000
--- a/examples/adapterExample/src/main/java/io/realm/examples/realmadapters/models/TimeStamp.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.realm.examples.realmadapters.models;
-
-import io.realm.RealmObject;
-
-public class TimeStamp extends RealmObject {
-    private String timeStamp;
-
-    public String getTimeStamp() {
-        return timeStamp;
-    }
-
-    public void setTimeStamp(String timeStamp) {
-        this.timeStamp = timeStamp;
-    }
-}
diff --git a/examples/adapterExample/src/main/res/drawable-xxhdpi/ic_launcher.png b/examples/adapterExample/src/main/res/drawable-xxhdpi/ic_launcher.png
deleted file mode 100644
index 433021180b..0000000000
Binary files a/examples/adapterExample/src/main/res/drawable-xxhdpi/ic_launcher.png and /dev/null differ
diff --git a/examples/adapterExample/src/main/res/layout/activity_my.xml b/examples/adapterExample/src/main/res/layout/activity_my.xml
deleted file mode 100644
index 375a00e263..0000000000
--- a/examples/adapterExample/src/main/res/layout/activity_my.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:paddingLeft="@dimen/activity_horizontal_margin"
-    android:paddingRight="@dimen/activity_horizontal_margin"
-    android:paddingTop="@dimen/activity_vertical_margin"
-    android:paddingBottom="@dimen/activity_vertical_margin"
-    tools:context=".AdapterExampleActivity">
-
-
-    <ListView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/listView"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentLeft="true"
-        android:layout_alignParentStart="true"
-        tools:listitem="@android:layout/simple_list_item_1" />
-</RelativeLayout>
diff --git a/examples/adapterExample/src/main/res/menu/my.xml b/examples/adapterExample/src/main/res/menu/my.xml
deleted file mode 100644
index bd4fcccd3e..0000000000
--- a/examples/adapterExample/src/main/res/menu/my.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<menu xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    tools:context=".MyActivity" >
-    <item android:id="@+id/action_add"
-        android:icon="@android:drawable/ic_menu_add"
-        android:title="@string/add"
-        android:showAsAction="always"/>
-</menu>
diff --git a/examples/adapterExample/src/main/res/values-w820dp/dimens.xml b/examples/adapterExample/src/main/res/values-w820dp/dimens.xml
deleted file mode 100644
index 63fc816444..0000000000
--- a/examples/adapterExample/src/main/res/values-w820dp/dimens.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<resources>
-    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
-         (such as screen margins) for screens with more than 820dp of available width. This
-         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
-    <dimen name="activity_horizontal_margin">64dp</dimen>
-</resources>
diff --git a/examples/adapterExample/src/main/res/values/dimens.xml b/examples/adapterExample/src/main/res/values/dimens.xml
deleted file mode 100644
index 47c8224673..0000000000
--- a/examples/adapterExample/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-</resources>
diff --git a/examples/adapterExample/src/main/res/values/strings.xml b/examples/adapterExample/src/main/res/values/strings.xml
deleted file mode 100644
index 11de42b091..0000000000
--- a/examples/adapterExample/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">Adapter example</string>
-    <string name="add">Add</string>
-
-</resources>
diff --git a/examples/adapterExample/src/main/res/values/styles.xml b/examples/adapterExample/src/main/res/values/styles.xml
deleted file mode 100644
index ff6c9d2c0f..0000000000
--- a/examples/adapterExample/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<resources>
-
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
-    </style>
-
-</resources>
diff --git a/examples/settings.gradle b/examples/settings.gradle
index 529a4f486c..9b18f1e779 100644
--- a/examples/settings.gradle
+++ b/examples/settings.gradle
@@ -1,4 +1,3 @@
-include 'adapterExample'
 include 'encryptionExample'
 include 'gridViewExample'
 include 'introExample'
diff --git a/realm/realm-library/proguard-rules.pro b/realm/realm-library/proguard-rules.pro
index 980b5b3ce2..0b2181d2ed 100644
--- a/realm/realm-library/proguard-rules.pro
+++ b/realm/realm-library/proguard-rules.pro
@@ -4,3 +4,5 @@
 -keep @io.realm.internal.Keep class * { *; }
 -dontwarn javax.**
 -dontwarn io.realm.**
+-keep class io.realm.RealmCollection
+-keep class io.realm.OrderedRealmCollection
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmAdapterTest.java b/realm/realm-library/src/androidTest/java/io/realm/RealmAdapterTest.java
deleted file mode 100644
index f42ca7a48f..0000000000
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmAdapterTest.java
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.annotation.UiThreadTest;
-import android.support.test.rule.UiThreadTestRule;
-import android.support.test.runner.AndroidJUnit4;
-import android.view.View;
-import android.widget.TextView;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import io.realm.entities.AllTypes;
-import io.realm.entities.RealmAdapter;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
-@RunWith(AndroidJUnit4.class)
-public class RealmAdapterTest {
-    @Rule
-    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();
-    private Context context;
-
-    private final static String FIELD_STRING = "columnString";
-    private final static int TEST_DATA_SIZE = 47;
-
-    private boolean automaticUpdate = true;
-    private Realm testRealm;
-
-    @Before
-    public void setUp() throws Exception {
-        // Injecting the Instrumentation instance is required
-        // for your test to run with AndroidJUnitRunner.
-        context = InstrumentationRegistry.getInstrumentation().getContext();
-
-        RealmConfiguration realmConfig = TestHelper.createConfiguration(context);
-        Realm.deleteRealm(realmConfig);
-        testRealm = Realm.getInstance(realmConfig);
-
-        testRealm.beginTransaction();
-        for (int i = 0; i < TEST_DATA_SIZE; ++i) {
-            AllTypes allTypes = testRealm.createObject(AllTypes.class);
-            allTypes.setColumnString("test data " + i);
-        }
-        testRealm.commitTransaction();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        testRealm.close();
-    }
-
-    @Test
-    public void testAdapterParameterExceptions() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        try {
-            RealmAdapter realmAdapter = new RealmAdapter(null, resultList, automaticUpdate);
-            fail("Should throw exception if context is null");
-        } catch (IllegalArgumentException ignore) {
-        }
-    }
-
-    @Test
-    public void testUpdateRealmResultInAdapter() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        resultList.sort(FIELD_STRING);
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, false);
-        assertEquals(resultList.first().getColumnString(), realmAdapter.getRealmResults().first().getColumnString());
-        assertEquals(resultList.size(), realmAdapter.getRealmResults().size());
-
-        testRealm.beginTransaction();
-        AllTypes allTypes = testRealm.createObject(AllTypes.class);
-        allTypes.setColumnString("test data " + TEST_DATA_SIZE);
-        testRealm.commitTransaction();
-        assertEquals(resultList.last().getColumnString(), realmAdapter.getRealmResults().last().getColumnString());
-        assertEquals(resultList.size(), realmAdapter.getRealmResults().size());
-
-        RealmResults<AllTypes> emptyResultList = testRealm.where(AllTypes.class).equalTo(FIELD_STRING, "Not there").findAll();
-        realmAdapter.updateRealmResults(emptyResultList);
-        assertEquals(emptyResultList.size(), realmAdapter.getRealmResults().size());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testClearFromAdapter() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-
-        testRealm.beginTransaction();
-        realmAdapter.getRealmResults().deleteAllFromRealm();
-        testRealm.commitTransaction();
-
-        assertEquals(0, realmAdapter.getCount());
-        assertEquals(0, resultList.size());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testRemoveFromAdapter() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-
-        testRealm.beginTransaction();
-        realmAdapter.getRealmResults().deleteFromRealm(0);
-        testRealm.commitTransaction();
-        assertEquals(TEST_DATA_SIZE - 1, realmAdapter.getCount());
-
-        resultList = testRealm.where(AllTypes.class).equalTo(FIELD_STRING, "test data 0").findAll();
-        assertEquals(0, resultList.size());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testSortWithAdapter() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        resultList.sort(FIELD_STRING, Sort.DESCENDING);
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-        assertEquals(resultList.first().getColumnString(), realmAdapter.getRealmResults().first().getColumnString());
-        assertEquals(resultList.size(), realmAdapter.getRealmResults().size());
-
-        resultList.sort(FIELD_STRING);
-
-        assertEquals(resultList.last().getColumnString(), realmAdapter.getRealmResults().last().getColumnString());
-        assertEquals(resultList.get(TEST_DATA_SIZE / 2).getColumnString(), realmAdapter.getRealmResults().get(TEST_DATA_SIZE / 2).getColumnString());
-        assertEquals(resultList.size(), realmAdapter.getRealmResults().size());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testEmptyRealmResult() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).equalTo(FIELD_STRING, "Not there").findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-        assertEquals(0, realmAdapter.getRealmResults().size());
-        assertEquals(0, realmAdapter.getCount());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testGetItem() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-
-        assertEquals(resultList.get(0).getColumnString(), realmAdapter.getItem(0).getColumnString());
-        assertEquals(resultList.size(), realmAdapter.getRealmResults().size());
-        assertEquals(resultList.last().getColumnString(), realmAdapter.getRealmResults().last().getColumnString());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testGetItemId() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-        for (int i = 0; i < resultList.size(); i++) {
-            assertEquals(i, realmAdapter.getItemId(i));
-        }
-    }
-
-    @Test
-    @UiThreadTest
-    public void testGetCount() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-        assertEquals(TEST_DATA_SIZE, realmAdapter.getCount());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testGetView() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-        View view = realmAdapter.getView(0, null, null);
-
-        TextView name = (TextView) view.findViewById(android.R.id.text1);
-
-        assertNotNull(view);
-        assertNotNull(name);
-        assertEquals(resultList.get(0).getColumnString(), name.getText());
-    }
-
-    @Test
-    public void testNullResults() {
-        RealmAdapter realmAdapter = new RealmAdapter(context, null, automaticUpdate);
-
-        assertEquals(0, realmAdapter.getCount());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testNonNullToNullResults() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, resultList, automaticUpdate);
-        realmAdapter.updateRealmResults(null);
-
-        assertEquals(0, realmAdapter.getCount());
-    }
-
-    @Test
-    @UiThreadTest
-    public void testNullToNonNullResults() {
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
-        RealmAdapter realmAdapter = new RealmAdapter(context, null, automaticUpdate);
-        realmAdapter.updateRealmResults(resultList);
-
-        assertEquals(TEST_DATA_SIZE, realmAdapter.getCount());
-    }
-}
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/RealmAdapter.java b/realm/realm-library/src/androidTest/java/io/realm/entities/RealmAdapter.java
deleted file mode 100644
index 35bc61ca1a..0000000000
--- a/realm/realm-library/src/androidTest/java/io/realm/entities/RealmAdapter.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.entities;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListAdapter;
-import android.widget.TextView;
-
-import io.realm.OrderedRealmCollection;
-import io.realm.RealmBaseAdapter;
-import io.realm.RealmResults;
-
-public class RealmAdapter extends RealmBaseAdapter<AllTypes> implements ListAdapter {
-
-    private static class ViewHolder {
-        TextView textView;
-    }
-
-    public RealmAdapter(Context context, RealmResults<AllTypes> realmResults, boolean automaticUpdate) {
-        super(context, realmResults, automaticUpdate);
-    }
-
-    @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
-        ViewHolder viewHolder;
-        if (convertView == null) {
-            convertView = inflater.inflate(android.R.layout.simple_list_item_1, parent, false);
-            viewHolder = new ViewHolder();
-            viewHolder.textView = (TextView) convertView.findViewById(android.R.id.text1);
-            convertView.setTag(viewHolder);
-        } else {
-            viewHolder = (ViewHolder) convertView.getTag();
-        }
-
-        AllTypes item = adapterData.get(position);
-        viewHolder.textView.setText(item.getColumnString());
-        return convertView;
-    }
-
-    public OrderedRealmCollection<AllTypes> getRealmResults() {
-        return adapterData;
-    }
-}
diff --git a/realm/realm-library/src/main/java/io/realm/RealmBaseAdapter.java b/realm/realm-library/src/main/java/io/realm/RealmBaseAdapter.java
deleted file mode 100644
index 2e9d6be95c..0000000000
--- a/realm/realm-library/src/main/java/io/realm/RealmBaseAdapter.java
+++ /dev/null
@@ -1,156 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.widget.BaseAdapter;
-
-/**
- * The RealmBaseAdapter class is an abstract utility class for binding UI elements to Realm data, much like an
- * {@link android.widget.CursorAdapter}.
- * <p>
- * This adapter will automatically handle any updates to its data and call {@link #notifyDataSetChanged()} as
- * appropriate.
- * <p>
- * The RealmAdapter will stop receiving updates if the Realm instance providing the {@link io.realm.RealmResults} is
- * closed. Trying to access read objects, will at this point also result in a
- * {@link io.realm.exceptions.RealmException}.
- */
-public abstract class RealmBaseAdapter<T extends RealmModel> extends BaseAdapter {
-
-    protected LayoutInflater inflater;
-    protected OrderedRealmCollection<T> adapterData;
-    protected Context context;
-    private final RealmChangeListener listener;
-
-    public RealmBaseAdapter(Context context, OrderedRealmCollection<T> data, boolean automaticUpdate) {
-        if (context == null) {
-            throw new IllegalArgumentException("Context cannot be null");
-        }
-        this.context = context;
-        this.adapterData = data;
-        this.inflater = LayoutInflater.from(context);
-        this.listener = (!automaticUpdate) ? null : new RealmChangeListener() {
-            @Override
-            public void onChange() {
-                notifyDataSetChanged();
-            }
-        };
-
-        if (listener != null && data != null) {
-            addListener(data);
-        }
-    }
-
-    private void addListener(OrderedRealmCollection<T> data) {
-        if (data instanceof RealmResults) {
-            RealmResults realmResults = (RealmResults) data;
-            realmResults.realm.handlerController.addChangeListenerAsWeakReference(listener);
-        } else if (data instanceof RealmList) {
-            RealmList realmList = (RealmList) data;
-            realmList.realm.handlerController.addChangeListenerAsWeakReference(listener);
-        } else {
-            throw new IllegalArgumentException("RealmCollection not supported: " + data.getClass());
-        }
-    }
-
-    private void removeListener(OrderedRealmCollection<T> data) {
-        if (data instanceof RealmResults) {
-            RealmResults realmResults = (RealmResults) data;
-            realmResults.realm.handlerController.removeWeakChangeListener(listener);
-        } else if (data instanceof RealmList) {
-            RealmList realmList = (RealmList) data;
-            realmList.realm.handlerController.removeWeakChangeListener(listener);
-        } else {
-            throw new IllegalArgumentException("RealmCollection not supported: " + data.getClass());
-        }
-    }
-
-    /**
-     * Returns how many items are in the data set.
-     *
-     * @return count of items.
-     */
-    @Override
-    public int getCount() {
-        if (adapterData == null) {
-            return 0;
-        }
-        return adapterData.size();
-    }
-
-    /**
-     * Returns the item associated with the specified position.
-     *
-     * @param i index of item whose data we want.
-     * @return the item at the specified position.
-     */
-    @Override
-    public T getItem(int i) {
-        if (adapterData == null) {
-            return null;
-        }
-        return adapterData.get(i);
-    }
-
-    /**
-     * Returns the current ID for an item. Note that item IDs are not stable so you cannot rely on the item ID being the
-     * same after {@link #notifyDataSetChanged()} or {@link #updateRealmResults(RealmResults)} has been called.
-     *
-     * @param i index of item in the adapter.
-     * @return current item ID.
-     */
-    @Override
-    public long getItemId(int i) {
-        // TODO: find better solution once we have unique IDs
-        return i;
-    }
-
-    /**
-     * DEPRECATED: Use {@link #updateData(OrderedRealmCollection)} instead.
-     */
-    @Deprecated
-    public void updateRealmResults(RealmResults<T> queryResults) {
-        updateData(queryResults);
-    }
-
-    /**
-     * Updates the data associated with the Adapter.
-     *
-     * Note that RealmResults and RealmLists are "live" views, so they will automatically be updated to reflect the
-     * latest changes. This will also trigger {@code notifyDataSetChanged()} to be called on the adapter.
-     *
-     * This method is therefor only useful if you want to display data based on a new query without replacing the
-     * adapter.
-     *
-     * @param data the new {@link OrderedRealmCollection} to display.
-     */
-    public void updateData(OrderedRealmCollection<T> data) {
-        if (listener != null) {
-            if (adapterData != null) {
-                removeListener(adapterData);
-            }
-            if (data != null) {
-                addListener(data);
-            }
-        }
-
-        this.adapterData = data;
-        notifyDataSetChanged();
-    }
-}
