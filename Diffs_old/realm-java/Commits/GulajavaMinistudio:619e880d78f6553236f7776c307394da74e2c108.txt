diff --git a/CHANGELOG.md b/CHANGELOG.md
index ea90d0b865..ef54a97dd0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,60 +1,43 @@
-## 3.1.0 (YYYY-MM-DD)
+## 3.2.0 (YYYY-MM-DD)
+
+
+## 3.1.0 (2017-04-05)
 
 ### Breaking Changes
 
-* Updated file format of Realm files. Existing Realm files will automatically be migrated to the new format when they are opened.
+* Updated file format of Realm files. Existing Realm files will automatically be migrated to the new format when they are opened, but older versions of Realm cannot open these files.
 * [ObjectServer] Due to file format changes, Realm Object Server 1.3.0 or later is required.
 
 ### Enhancements
 
-* The real `RealmMigrationNeededException` is now thrown instead of `IllegalArgumentException` if no migration is provided for a Realm that requires it.
-* Partial implementation of `LinkingObjects`.  There is documentation in `io.realm.annotations.LinkingObjects`.  Internal docs are in `io.realm.processor.Backlink`.
-  * Queries on linking objects do not work.  Queries like `were(...).equalTo("field.linkingObjects.id", 7).findAll()` are not yet supported.
-  * Linking objects are not yet supported on dynamic objects
-  * Migration for linking objects is not yet supported.
+* Added support for reverse relationships through the `@LinkingObjects` annotation. See `io.realm.annotations.LinkingObjects` for documentation.  
+  * This feature is in `@Beta`.
+  * Queries on linking objects do not work.  Queries like `where(...).equalTo("field.linkingObjects.id", 7).findAll()` are not yet supported.
   * Backlink verification is incomplete.  Evil code can cause native crashes.
-* [ObjectServer] In case of a Client Reset, information about the location of the backed up Realm file is now reported through the `ErrorHandler` interface (#4080).
-* [ObjectServer] Authentication URLs now automatically append `/auth` if no other path segment is set (#4370).
 * The listener on `RealmObject` will only be triggered if the object changes (#3894).
-* Added `RealmObjectChangeListener` to get detailed information about `RealmObject` changes.
-
-### Bug Fixes
-
-* Crash with `LogicError` with `Bad version number` on notifier thread (#4369).
-
-### Deprecated
-
-### Internal
-
-* Using the Object Store's Session and SyncManager.
-* Upgraded to Realm Sync 1.5.0.
-* Upgraded to Realm Core 2.5.1.
-
-
-## 3.0.1 (YYYY-MM-DD)
-
-### Enhancements
-
-* Now using Gradle 3.4.1
-* Now `targetSdkVersion` is 25.
+* Added `RealmObjectChangeListener` interface that provide detailed information about `RealmObject` field changes.
 * Listeners on `RealmList` and `RealmResults` will be triggered immediately when the transaction is committed on the same thread (#4245).
+* The real `RealmMigrationNeededException` is now thrown instead of `IllegalArgumentException` if no migration is provided for a Realm that requires it.
 * `RealmQuery.distinct()` can be performed on unindexed fields (#2285).
+* `targetSdkVersion` is now 25.
+* [ObjectServer] In case of a Client Reset, information about the location of the backed up Realm file is now reported through the `ErrorHandler` interface (#4080).
+* [ObjectServer] Authentication URLs now automatically append `/auth` if no other path segment is set (#4370).
 
 ### Bug Fixes
 
+* Crash with `LogicError` with `Bad version number` on notifier thread (#4369).
 * `Realm.migrateRealm(RealmConfiguration)` now fails correctly with an `IllegalArgumentException` if a `SyncConfiguration` is provided (#4075).
 * Fixed a potential cause for Realm file corruptions (never reported).
 * Add `@Override` annotation to proxy class accessors and stop using raw type in proxy classes in order to remove warnings from javac (#4329).
 * `findFirstAsync()` now returns an invalid object if there is no object matches the query condition instead of running the query repeatedly until it can find one (#4352).
 * [ObjectServer] Changing the log level after starting a session now works correctly (#4337).
 
-### Deprecated
-
 ### Internal
 
-* Upgraded to Realm Sync 1.3.2.
-* Upgraded to Realm Core 2.4.0.
-
+* Using the Object Store's Session and SyncManager.
+* Upgraded to Realm Sync 1.5.0.
+* Upgraded to Realm Core 2.5.1.
+* Upgraded Gradle to 3.4.1
 
 ## 3.0.0 (2017-02-28)
 
diff --git a/build.gradle b/build.gradle
index 870ada9c85..ddc7ff1dc6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -195,6 +195,7 @@ task distributionPackage(type:Zip) {
     from('changelog.txt')
     from('LICENSE')
     from('version.txt')
+    from('realm.properties')
     from('realm/realm-library/build/libs') {
         include 'realm-android-${currentVersion}-javadoc.jar'
         into 'docs'
diff --git a/examples/build.gradle b/examples/build.gradle
index 32279e957a..df34fdd8a0 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -22,11 +22,10 @@ allprojects {
             maven { url 'https://jitpack.io' }
         }
         dependencies {
-            classpath 'com.android.tools.build:gradle:2.3.0'
+            classpath 'com.android.tools.build:gradle:2.3.1'
             classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
             classpath 'com.github.JakeWharton:sdk-manager-plugin:0ce4cdf08009d79223850a59959d9d6e774d0f77'
             classpath 'com.novoda:gradle-android-command-plugin:1.5.0'
-            classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
             classpath "io.realm:realm-gradle-plugin:${currentVersion}"
         }
     }
diff --git a/examples/jsonExample/build.gradle b/examples/jsonExample/build.gradle
index 1b9bd2a6a7..c46861f443 100644
--- a/examples/jsonExample/build.gradle
+++ b/examples/jsonExample/build.gradle
@@ -1,5 +1,4 @@
 apply plugin: 'com.android.application'
-apply plugin: 'com.neenbedankt.android-apt'
 apply plugin: 'android-command'
 apply plugin: 'realm-android'
 
@@ -29,5 +28,5 @@ android {
 
 dependencies {
     provided 'org.projectlombok:lombok:1.16.6'
-    apt 'org.projectlombok:lombok:1.16.6'
+    annotationProcessor 'org.projectlombok:lombok:1.16.6'
 }
diff --git a/realm/build.gradle b/realm/build.gradle
index 53a4573382..b7c98a3e74 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -7,7 +7,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.0'
+        classpath 'com.android.tools.build:gradle:2.3.1'
         classpath 'de.undercouch:gradle-download-task:3.1.1'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
         classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index aaf75da32c..f95147ab65 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -3694,7 +3694,7 @@ public void schemaIndexCacheIsUpdatedAfterSchemaChange() {
 
         // get the pre-update index for the "name" column.
         CatRealmProxy.CatColumnInfo catColumnInfo
-                = (CatRealmProxy.CatColumnInfo) realm.schema.getColumnIndices().getColumnInfo(Cat.class);
+                = (CatRealmProxy.CatColumnInfo) realm.schema.getColumnInfo(Cat.class);
         final long nameIndex = catColumnInfo.nameIndex;
 
         // Change the index of the column "name".
@@ -3717,7 +3717,7 @@ public void execute(Realm realm) {
         assertNotEquals(nameIndex, nameIndexNew);
 
         // Verify that the index in the ColumnInfo has been updated.
-        catColumnInfo = (CatRealmProxy.CatColumnInfo) realm.schema.getColumnIndices().getColumnInfo(Cat.class);
+        catColumnInfo = (CatRealmProxy.CatColumnInfo) realm.schema.getColumnInfo(Cat.class);
         assertEquals(nameIndexNew.get(), catColumnInfo.nameIndex);
         assertEquals(nameIndexNew.get(), (long) catColumnInfo.getIndicesMap().get(Cat.FIELD_NAME));
 
diff --git a/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java b/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
index f173f4da32..13097cf10a 100644
--- a/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
@@ -90,7 +90,6 @@ public long getNativePtr() {
         return this.nativePtr;
     }
 
-    // THIS IS NEVER CALLED!
     // See BaseRealm uses a StandardRealmSchema, not a OsRealmSchema.
     @Override
     public void close() {
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 06302c0736..6e747797eb 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -293,7 +293,7 @@ private static Realm createAndValidate(RealmConfiguration configuration, ColumnI
 
         if (columnIndices != null) {
             // Copies global cache as a Realm local indices cache.
-            realm.schema.setColumnIndices(columnIndices);
+            realm.schema.setInitialColumnIndices(columnIndices);
         } else {
             final boolean syncingConfig = configuration.isSyncConfiguration();
 
@@ -359,7 +359,7 @@ private static void initializeRealm(Realm realm) {
                 columnInfoMap.put(modelClass, mediator.validateTable(modelClass, realm.sharedRealm, false));
             }
 
-            realm.getSchema().setColumnIndices(
+            realm.getSchema().setInitialColumnIndices(
                     (unversioned) ? configuration.getSchemaVersion() : currentVersion,
                     columnInfoMap);
 
@@ -385,6 +385,7 @@ private static void initializeRealm(Realm realm) {
     // to prevent multi-process interaction while the Realm is initialized.
     private static void initializeSyncedRealm(Realm realm) {
         boolean commitChanges = false;
+        OsRealmSchema schema = null;
         try {
             realm.beginTransaction();
             long currentVersion = realm.getVersion();
@@ -401,7 +402,7 @@ private static void initializeSyncedRealm(Realm realm) {
             }
 
             // Assumption: When SyncConfiguration then additive schema update mode.
-            final OsRealmSchema schema = new OsRealmSchema(schemaCreator);
+            schema = new OsRealmSchema(schemaCreator);
             long newVersion = configuration.getSchemaVersion();
             // !!! FIXME: This appalling kludge is necessitated by current package structure/visiblity constraints.
             // It absolutely breaks encapsulation and needs to be fixed!
@@ -425,7 +426,7 @@ private static void initializeSyncedRealm(Realm realm) {
                 columnInfoMap.put(modelClass, mediator.validateTable(modelClass, realm.sharedRealm, false));
             }
 
-            realm.getSchema().setColumnIndices(
+            realm.getSchema().setInitialColumnIndices(
                     (unversioned) ? newVersion : currentVersion,
                     columnInfoMap);
 
@@ -439,6 +440,9 @@ private static void initializeSyncedRealm(Realm realm) {
             commitChanges = false;
             throw e;
         } finally {
+            if (schema != null) {
+                schema.close();
+            }
             if (commitChanges) {
                 realm.commitTransaction();
             } else {
@@ -1690,7 +1694,7 @@ ColumnIndices updateSchemaCache(ColumnIndices[] globalCacheArray) {
 
             cacheForCurrentVersion = createdGlobalCache = new ColumnIndices(currentSchemaVersion, map);
         }
-        schema.setColumnIndices(cacheForCurrentVersion, mediator);
+        schema.updateColumnIndices(cacheForCurrentVersion, mediator);
         return createdGlobalCache;
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCache.java b/realm/realm-library/src/main/java/io/realm/RealmCache.java
index 27a63ac04a..b4cab8a8ec 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCache.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCache.java
@@ -164,7 +164,7 @@ private RealmCache(RealmConfiguration config) {
             if (realmClass == Realm.class && refAndCount.globalCount == 0) {
                 final BaseRealm realm = refAndCount.localRealm.get();
                 // Stores a copy of local ColumnIndices as a global cache.
-                RealmCache.storeColumnIndices(cache.typedColumnIndicesArray, realm.schema.getColumnIndices());
+                RealmCache.storeColumnIndices(cache.typedColumnIndicesArray, realm.schema.cloneColumnIndices());
             }
             // This is the first instance in current thread, increase the global count.
             refAndCount.globalCount++;
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index e7a42bbc7e..ea53642122 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -89,19 +89,35 @@
      */
     public abstract boolean contains(String className);
 
-    final void setColumnIndices(ColumnIndices columnIndices) {
+    final void setInitialColumnIndices(ColumnIndices columnIndices) {
+        if (this.columnIndices != null) {
+            throw new IllegalStateException("An instance of ColumnIndices is already set.");
+        }
         this.columnIndices = columnIndices.clone();
     }
 
-    final void setColumnIndices(long version, Map<Class<? extends RealmModel>, ColumnInfo> columnInfoMap) {
+    final void setInitialColumnIndices(long version, Map<Class<? extends RealmModel>, ColumnInfo> columnInfoMap) {
+        if (this.columnIndices != null) {
+            throw new IllegalStateException("An instance of ColumnIndices is already set.");
+        }
         columnIndices = new ColumnIndices(version, columnInfoMap);
     }
 
-    void setColumnIndices(ColumnIndices cacheForCurrentVersion, RealmProxyMediator mediator) {
-        columnIndices.copyFrom(cacheForCurrentVersion, mediator);
+    /**
+     * Updates all {@link ColumnInfo} elements in {@code columnIndices}.
+     *
+     * <p>
+     * The ColumnInfo elements are shared between all {@link RealmObject}s created by the Realm instance
+     * which owns this RealmSchema. Updating them also means updating indices information in those {@link RealmObject}s.
+     *
+     * @param schemaVersion new schema version.
+     * @param mediator mediator for the Realm.
+     */
+    void updateColumnIndices(ColumnIndices schemaVersion, RealmProxyMediator mediator) {
+        columnIndices.copyFrom(schemaVersion, mediator);
     }
 
-    final ColumnIndices getColumnIndices() {
+    final ColumnIndices cloneColumnIndices() {
         checkIndices();
         return columnIndices.clone();
     }
diff --git a/version.txt b/version.txt
index 0628777500..4395ff5923 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-3.1.0-SNAPSHOT
\ No newline at end of file
+3.2.0-SNAPSHOT
\ No newline at end of file
