diff --git a/CHANGELOG.md b/CHANGELOG.md
index 6b5538f8cf..4b4581228d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,25 @@
+## 5.13.1(2019-08-05)
+
+### Enhancements
+* None.
+
+### Fixed
+* [ObjectServer] The C++ networking layer now correctly uses any system defined proxy the same way the Java networking layer does. (Issue [#6574](https://github.com/realm/realm-java/pull/6574)). 
+* The Realm bytecode transformer now works correctly with Android Gradle Plugin 3.6.0-alpha01 and beyond. (Issue [#6531](https://github.com/realm/realm-java/issues/6531)).
+* Queries on RealmLists with objects containing indexed integers could return the wrong result. (Issue [#6522](https://github.com/realm/realm-java/issues/6522), since 5.11.0)
+
+### Compatibility
+* Realm Object Server: 3.21.0 or later.
+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)
+* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
+
+### Internal
+* Updated JavaAssist in the Realm Transformer to 3.25.0-GA.
+* Updated to Realm Core 5.23.1.
+* Updated to Realm Sync 4.7.1.
+* Updated to Object Store commit: bcc6a7524e52071bfcd35cf740f506e0cc6a595e
+
+
 ## 5.13.0(2019-07-23)
 
 ### Enhancements
diff --git a/dependencies.list b/dependencies.list
index 78968bcff3..6c5ad0f65f 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,7 +1,7 @@
 # Realm Sync release used by Realm Java (This includes Realm Core)
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=4.6.1
-REALM_SYNC_SHA256=eb4fbf83717156fabae6357199b22ef25546f2da24ded5668290351613faf9d0
+REALM_SYNC_VERSION=4.7.1
+REALM_SYNC_SHA256=28c37d53e63d80db6be1f3e566adac7eea291f496be2b5274cfb94658b435d3d
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
diff --git a/realm-transformer/build.gradle b/realm-transformer/build.gradle
index 92d70f7526..d5cac03d0e 100644
--- a/realm-transformer/build.gradle
+++ b/realm-transformer/build.gradle
@@ -47,9 +47,7 @@ configurations {
 sourceSets {
     main {
         compileClasspath += configurations.provided
-        java {
-            srcDirs += ['build/generated-src/main/java', 'src/main/kotlin']
-        }
+        java.srcDirs += ['build/generated-src/main/java', 'src/main/kotlin']
     }
 }
 
@@ -58,7 +56,7 @@ dependencies {
     compile "io.realm:realm-annotations:${version}"
     compileOnly "com.android.tools.build:gradle:${properties.get("GRADLE_BUILD_TOOLS")}"
     compileOnly 'com.android.tools.build:gradle:3.1.1'
-    compile 'org.javassist:javassist:3.21.0-GA'
+    compile 'org.javassist:javassist:3.25.0-GA'
     compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
 
     testCompile 'junit:junit:4.12'
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt
index 74efc31a08..2e4a38aa2b 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt
@@ -150,10 +150,7 @@ class RealmTransformer(val project: Project) : Transform() {
                 }
             }
 
-            val packages: Set<String> = outputModelClasses.map {
-                it.packageName
-            }.toSet()
-
+            val packages: Set<String> = outputModelClasses.map { it.packageName }.toSet()
             val targetSdk: String? = project.getTargetSdk()
             val minSdk: String?  = project.getMinSdk()
 
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt
index 0a73198128..463b3e06ea 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt
@@ -125,21 +125,34 @@ abstract class BuildTemplate(val project: Project, val outputProvider: Transform
                 it.file.walkTopDown().forEach {
                     if (it.isFile) {
                         if (!it.absolutePath.endsWith(SdkConstants.DOT_CLASS)) {
-                            logger.debug("  Copying resource $it")
-                            val dest = File(getOutputFile(outputProvider), it.absolutePath.substring(dirPath.length))
+                            logger.debug("  Copying resource file: $it")
+                            val dest = File(getOutputFile(outputProvider, Format.DIRECTORY), it.absolutePath.substring(dirPath.length))
+                            dest.parentFile.mkdirs()
+                            Files.copy(it, dest)
+                        }
+                    }
+                }
+            }
+
+            it.jarInputs.forEach {
+                logger.debug("Found JAR file: ${it.file.absolutePath}")
+                val dirPath: String = it.file.absolutePath
+                it.file.walkTopDown().forEach {
+                    if (it.isFile) {
+                        if (it.absolutePath.endsWith(SdkConstants.DOT_JAR)) {
+                            logger.debug("  Copying jar file: $it")
+                            val dest = File(getOutputFile(outputProvider, Format.JAR), it.absolutePath.substring(dirPath.length))
                             dest.parentFile.mkdirs()
                             Files.copy(it, dest)
                         }
                     }
                 }
             }
-            // no need to implement the code for `it.jarInputs.each` since PROJECT SCOPE does not use jar input.
         }
     }
 
-    protected fun getOutputFile(outputProvider: TransformOutputProvider): File {
-        return outputProvider.getContentLocation(
-                "realm", transform.inputTypes, transform.scopes, Format.DIRECTORY)
+    protected fun getOutputFile(outputProvider: TransformOutputProvider, format: Format): File {
+        return outputProvider.getContentLocation("realm", transform.inputTypes, transform.scopes, format)
     }
 
     /**
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/build/FullBuild.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/build/FullBuild.kt
index 3bbcd1bfef..0536bbb4ff 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/build/FullBuild.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/build/FullBuild.kt
@@ -17,6 +17,7 @@
 package io.realm.transformer.build
 
 import com.android.SdkConstants
+import com.android.build.api.transform.Format
 import com.android.build.api.transform.TransformInput
 import com.android.build.api.transform.TransformOutputProvider
 import io.realm.transformer.BytecodeModifier
@@ -130,10 +131,14 @@ class FullBuild(project: Project, outputProvider: TransformOutputProvider, trans
 
         // Use accessors instead of direct field access
         outputClassNames.forEach {
-            logger.debug("Modify accessors in class: $it")
-            val ctClass: CtClass = classPool.getCtClass(it)
-            BytecodeModifier.useRealmAccessors(classPool, ctClass, allManagedFields)
-            ctClass.writeFile(getOutputFile(outputProvider).canonicalPath)
+            logger.debug("Modifying accessors in class: $it")
+            try {
+                val ctClass: CtClass = classPool.getCtClass(it)
+                BytecodeModifier.useRealmAccessors(classPool, ctClass, allManagedFields)
+                ctClass.writeFile(getOutputFile(outputProvider, Format.DIRECTORY).canonicalPath)
+            } catch (e: Exception) {
+                throw RuntimeException("Failed to transform $it.", e)
+            }
         }
     }
 
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/build/IncrementalBuild.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/build/IncrementalBuild.kt
index 8a9c9b9783..4bdb65193e 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/build/IncrementalBuild.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/build/IncrementalBuild.kt
@@ -17,6 +17,7 @@
 package io.realm.transformer.build
 
 import com.android.SdkConstants
+import com.android.build.api.transform.Format
 import com.android.build.api.transform.Status
 import com.android.build.api.transform.TransformInput
 import com.android.build.api.transform.TransformOutputProvider
@@ -51,12 +52,10 @@ class IncrementalBuild(project: Project, outputProvider: TransformOutputProvider
             logger.debug("Modify accessors in class: $it")
             val ctClass: CtClass = classPool.getCtClass(it)
             BytecodeModifier.useRealmAccessors(classPool, ctClass, null)
-            ctClass.writeFile(getOutputFile(outputProvider).canonicalPath)
+            ctClass.writeFile(getOutputFile(outputProvider, Format.DIRECTORY).canonicalPath)
         }
-
     }
 
-
     /**
      * Categorize the transform input into its two main categorizes: `directoryFiles` which are
      * source files in the current project and `jarFiles` which are source files found in jars.
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index 8e45a0430e..f49b8a57ba 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -451,4 +451,29 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSyncConfigS
     CATCH_STD()
 }
 
+static_assert(SyncConfig::ProxyConfig::Type::HTTP == static_cast<SyncConfig::ProxyConfig::Type>(io_realm_internal_OsRealmConfig_PROXYCONFIG_TYPE_VALUE_HTTP),
+              "");
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSyncConfigProxySettings(
+    JNIEnv* env, jclass, jlong native_ptr, jbyte proxy_type,
+    jstring j_proxy_address, jint proxy_port)
+{
+    TR_ENTER_PTR(native_ptr);
+
+    auto& config = *reinterpret_cast<Realm::Config*>(native_ptr);
+    // To ensure the sync_config has been created and this function won't be called multiple time on the same config.
+    REALM_ASSERT(config.sync_config);
+    REALM_ASSERT(!config.sync_config->proxy_config);
+
+    try {
+        SyncConfig::ProxyConfig proxy_config;
+        proxy_config.type = static_cast<SyncConfig::ProxyConfig::Type>(proxy_type);
+        proxy_config.address = JStringAccessor(env, j_proxy_address);
+        proxy_config.port = proxy_port;
+
+        config.sync_config->proxy_config.emplace(std::move(proxy_config));
+    }
+    CATCH_STD()
+}
+
 #endif
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index f0d75261fc..bcc6a7524e 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit f0d75261fc8d332c20dc82f643dd795c0f4c7aec
+Subproject commit bcc6a7524e52071bfcd35cf740f506e0cc6a595e
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
index 2ad76beb4a..95643c1ce4 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
@@ -17,9 +17,11 @@
 package io.realm.internal;
 
 import java.io.File;
+import java.net.ProxySelector;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Map;
+import java.util.List;
 
 import javax.annotation.Nullable;
 
@@ -165,6 +167,7 @@ public Builder fifoFallbackDir(File dir) {
     private static final byte SYNCSESSION_STOP_POLICY_VALUE_IMMEDIATELY = 0;
     private static final byte SYNCSESSION_STOP_POLICY_VALUE_LIVE_INDEFINETELY = 1;
     private static final byte SYNCSESSION_STOP_POLICY_VALUE_AFTER_CHANGES_UPLOADED = 2;
+    private static final byte PROXYCONFIG_TYPE_VALUE_HTTP = 0;
 
     private final static long nativeFinalizerPtr = nativeGetFinalizerPtr();
 
@@ -284,6 +287,49 @@ private OsRealmConfig(final RealmConfiguration config,
                 RealmLog.error(e, "Cannot create a URI from the Realm URL address");
             }
             nativeSetSyncConfigSslSettings(nativePtr, syncClientValidateSsl, syncSslTrustCertificatePath);
+
+            // TODO: maybe expose the option for a custom Proxy or ProxySelector in the config?
+            ProxySelector proxySelector = ProxySelector.getDefault();
+            if (resolvedRealmURI != null && proxySelector != null) {
+                URI websocketUrl = null;
+                try {
+                    // replace scheme in URI so that a proxy selector won't be confused by 'realm://'
+                    websocketUrl = new URI(resolvedSyncRealmUrl.replaceFirst("realm", "http"));
+                } catch (URISyntaxException e) {
+                    // we shouldn't ever get here if parsing the resolved url above worked
+                    RealmLog.error(e, "Cannot create a URI from the Realm URL address");
+                }
+                List<java.net.Proxy> proxies = proxySelector.select(websocketUrl);
+                if (proxies != null && !proxies.isEmpty()) {
+                    java.net.Proxy proxy = proxies.get(0);
+                    if (proxy.type() != java.net.Proxy.Type.DIRECT) {
+                        byte proxyType = -1;
+                        switch (proxy.type()) {
+                            case HTTP:
+                                proxyType = PROXYCONFIG_TYPE_VALUE_HTTP;
+                                break;
+                            default:
+                                // this should never happen
+                        }
+
+                        if (proxy.type() == java.net.Proxy.Type.HTTP) {
+                            java.net.SocketAddress address = proxy.address();
+                            if (address instanceof java.net.InetSocketAddress) {
+                                java.net.InetSocketAddress inetAddress = (java.net.InetSocketAddress) address;
+                                nativeSetSyncConfigProxySettings(nativePtr, proxyType,
+                                        inetAddress.getHostString(), inetAddress.getPort());
+                            } else {
+                                RealmLog.error("Unsupported proxy socket address type: " + address.getClass().getName());
+                            }
+                        } else {
+                            // FIXME: enable once realm-sync adds support for SOCKS proxies
+                            RealmLog.error("SOCKS proxies are not supported.");
+                        }
+                    }
+                }
+
+            }
+
         }
         this.resolvedRealmURI = resolvedRealmURI;
     }
@@ -335,5 +381,7 @@ private static native String nativeCreateAndSetSyncConfig(long nativePtr, String
     private static native void nativeSetSyncConfigSslSettings(long nativePtr,
                                                               boolean validateSsl, String trustCertificatePath);
 
+    private static native void nativeSetSyncConfigProxySettings(long nativePtr, byte type, String address, int port);
+
     private static native long nativeGetFinalizerPtr();
 }
diff --git a/version.txt b/version.txt
index 7041f18668..d077af9147 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.14.0-SNAPSHOT
+5.14.0-SNAPSHOT
\ No newline at end of file
