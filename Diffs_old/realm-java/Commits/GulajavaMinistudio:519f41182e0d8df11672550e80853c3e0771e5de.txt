diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java
index 74e6df85f3..5ad88f013c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java
@@ -36,6 +36,7 @@
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 @RunWith(Parameterized.class)
@@ -202,7 +203,8 @@ public void createObject_duplicatedNullPrimaryKeyThrows() throws NoSuchMethodExc
             realm.createObject(testClazz, null);
             fail("Null value as primary key already exists.");
         } catch (RealmPrimaryKeyConstraintException expected) {
-            assertEquals("Primary key value already exists: 'null' .", expected.getMessage());
+            assertTrue("Exception message is: " + expected.getMessage(),
+                    expected.getMessage().contains("Primary key value already exists: 'null' ."));
         } finally {
             realm.cancelTransaction();
         }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index df3d0ad061..a7e3847eae 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -1308,7 +1308,8 @@ public void copyToRealm_duplicatedNullPrimaryKeyThrows() {
                 }
                 fail("Null value as primary key already exists.");
             } catch (RealmPrimaryKeyConstraintException expected) {
-                assertEquals("Primary key value already exists: 'null' .", expected.getMessage());
+                assertTrue("Exception message is: " + expected.getMessage(),
+                        expected.getMessage().contains("Primary key value already exists: 'null' ."));
             } finally {
                 realm.cancelTransaction();
             }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
index f6b040603f..4c6da841e1 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
@@ -26,11 +26,15 @@
 #include "jni_util/java_global_weak_ref.hpp"
 #include "jni_util/java_method.hpp"
 #include "jni_util/java_class.hpp"
+#include "jni_util/java_exception_thrower.hpp"
 
 using namespace realm;
 using namespace realm::jni_util;
 using namespace realm::_impl;
 
+static const char* PK_CONSTRAINT_EXCEPTION_CLASS = "io/realm/exceptions/RealmPrimaryKeyConstraintException";
+static const char* PK_EXCEPTION_MSG_FORMAT = "Primary key value already exists: %1 .";
+
 // We need to control the life cycle of Object, weak ref of Java OsObject and the NotificationToken.
 // Wrap all three together, so when the Java object gets GCed, all three of them will be invalidated.
 struct ObjectWrapper {
@@ -163,13 +167,6 @@ static inline size_t do_create_row(jlong shared_realm_ptr, jlong table_ptr)
     return table.add_empty_row();
 }
 
-template <class T>
-static void throw_duplicated_primary_key_exception(JNIEnv* env, T value)
-{
-    static JavaClass dup_pk_exception(env, "io/realm/exceptions/RealmPrimaryKeyConstraintException");
-    env->ThrowNew(dup_pk_exception, format("Primary key value already exists: %1 .", value).c_str());
-}
-
 static inline size_t do_create_row_with_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ptr,
                                                     jlong pk_column_ndx, jlong pk_value, jboolean is_pk_null)
 {
@@ -181,15 +178,14 @@ static inline size_t do_create_row_with_primary_key(JNIEnv* env, jlong shared_re
     }
 
     if (is_pk_null) {
-        if (table.find_first_null(pk_column_ndx) != realm::npos) {
-            throw_duplicated_primary_key_exception(env, "'null'");
-            return realm::npos;
+        if (table.find_first_null(pk_column_ndx) != npos) {
+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS, format(PK_EXCEPTION_MSG_FORMAT, "'null'"));
         }
     }
     else {
-        if (table.find_first_int(pk_column_ndx, pk_value) != realm::npos) {
-            throw_duplicated_primary_key_exception(env, reinterpret_cast<long long>(pk_value));
-            return realm::npos;
+        if (table.find_first_int(pk_column_ndx, pk_value) != npos) {
+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS,
+                                 format(PK_EXCEPTION_MSG_FORMAT, reinterpret_cast<long long>(pk_value)));
         }
     }
 
@@ -216,15 +212,14 @@ static inline size_t do_create_row_with_primary_key(JNIEnv* env, jlong shared_re
     }
 
     if (pk_value) {
-        if (table.find_first_string(pk_column_ndx, str_accessor) != realm::npos) {
-            throw_duplicated_primary_key_exception(env, str_accessor.operator std::string());
-            return realm::npos;
+        if (table.find_first_string(pk_column_ndx, str_accessor) != npos) {
+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS,
+                                 format(PK_EXCEPTION_MSG_FORMAT, str_accessor.operator std::string()));
         }
     }
     else {
-        if (table.find_first_null(pk_column_ndx) != realm::npos) {
-            throw_duplicated_primary_key_exception(env, "'null'");
-            return realm::npos;
+        if (table.find_first_null(pk_column_ndx) != npos) {
+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS, format(PK_EXCEPTION_MSG_FORMAT, "'null'"));
         }
     }
 
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_class.cpp b/realm/realm-library/src/main/cpp/jni_util/java_class.cpp
index eaf526e75c..6d5d89dc1c 100644
--- a/realm/realm-library/src/main/cpp/jni_util/java_class.cpp
+++ b/realm/realm-library/src/main/cpp/jni_util/java_class.cpp
@@ -31,6 +31,13 @@ JavaClass::JavaClass(JNIEnv* env, const char* class_name, bool free_on_unload)
     }
 }
 
+JavaClass::JavaClass(JavaClass&& rhs)
+    : m_ref_owner(std::move(rhs.m_ref_owner))
+    , m_class(rhs.m_class)
+{
+    rhs.m_class = nullptr;
+}
+
 JavaGlobalRef JavaClass::get_jclass(JNIEnv* env, const char* class_name)
 {
     jclass cls = env->FindClass(class_name);
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_class.hpp b/realm/realm-library/src/main/cpp/jni_util/java_class.hpp
index c95dce29d4..7aaf3a00ed 100644
--- a/realm/realm-library/src/main/cpp/jni_util/java_class.hpp
+++ b/realm/realm-library/src/main/cpp/jni_util/java_class.hpp
@@ -35,6 +35,8 @@ class JavaClass {
     {
     }
 
+    JavaClass(JavaClass&&);
+
     inline jclass get() noexcept
     {
         return m_class;
@@ -46,7 +48,6 @@ class JavaClass {
     }
 
     // Not implemented for now.
-    JavaClass(JavaClass&&) = delete;
     JavaClass(JavaClass&) = delete;
     JavaClass& operator=(JavaClass&&) = delete;
 
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_exception_thrower.cpp b/realm/realm-library/src/main/cpp/jni_util/java_exception_thrower.cpp
new file mode 100644
index 0000000000..63cd8a9ba7
--- /dev/null
+++ b/realm/realm-library/src/main/cpp/jni_util/java_exception_thrower.cpp
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "java_exception_thrower.hpp"
+#include "log.hpp"
+
+#include <util/format.hpp>
+
+using namespace realm::util;
+using namespace realm::jni_util;
+
+JavaExceptionThrower::JavaExceptionThrower(JNIEnv* env, const char* class_name, std::string message,
+                                           const char* file_path, int line_num)
+    : std::runtime_error(std::move(message))
+    , m_exception_class(env, class_name, false)
+    , m_file_path(file_path)
+    , m_line_num(line_num)
+{
+}
+
+void JavaExceptionThrower::throw_java_exception(JNIEnv* env)
+{
+    std::string message = format("%1\n(%2:%3)", what(), m_file_path, m_line_num);
+    Log::w(message.c_str());
+    env->ThrowNew(m_exception_class, message.c_str());
+}
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_exception_thrower.hpp b/realm/realm-library/src/main/cpp/jni_util/java_exception_thrower.hpp
new file mode 100644
index 0000000000..1d5bcdde69
--- /dev/null
+++ b/realm/realm-library/src/main/cpp/jni_util/java_exception_thrower.hpp
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef REALM_JNI_UTIL_JAVA_EXCEPTION_THROWER_HPP
+#define REALM_JNI_UTIL_JAVA_EXCEPTION_THROWER_HPP
+
+#include <jni.h>
+
+#include <stdexcept>
+
+#include "java_class.hpp"
+
+namespace realm {
+namespace jni_util {
+
+#define THROW_JAVA_EXCEPTION(env, class_name, message)                                                               \
+    throw realm::jni_util::JavaExceptionThrower(env, class_name, message, __FILE__, __LINE__)
+
+// Class to help throw a Java exception from JNI code.
+// This exception will be called from CATCH_STD and throw a Java exception there.
+class JavaExceptionThrower : public std::runtime_error {
+public:
+    JavaExceptionThrower(JNIEnv* env, const char* class_name, std::string message, const char* file_path,
+                         int line_num);
+
+    virtual void throw_java_exception(JNIEnv* env);
+
+private:
+    JavaClass m_exception_class;
+    const char* m_file_path;
+    int m_line_num;
+};
+
+} // namespace realm
+} // namesapce jni_util
+
+#endif // REALM_JNI_UTIL_JAVA_EXCEPTION_THROWER_HPP
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index e562c12564..41ab64d1c8 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -28,6 +28,8 @@
 #include "shared_realm.hpp"
 #include "results.hpp"
 
+#include "jni_util/java_exception_thrower.hpp"
+
 using namespace std;
 using namespace realm;
 using namespace realm::util;
@@ -52,6 +54,9 @@ void ConvertException(JNIEnv* env, const char* file, int line)
     try {
         throw;
     }
+    catch (JavaExceptionThrower& e) {
+        e.throw_java_exception(env);
+    }
     catch (bad_alloc& e) {
         ss << e.what() << " in " << file << " line " << line;
         ThrowException(env, OutOfMemory, ss.str());
diff --git a/tools/release.sh b/tools/release.sh
index e355ee2744..b0e91f557a 100755
--- a/tools/release.sh
+++ b/tools/release.sh
@@ -2,7 +2,6 @@
 
 # Script to make release on the local machine.
 # See https://github.com/realm/realm-wiki/wiki/Java-Release-Checklist for more details.
-# FIXME: Only patch release is supported now.
 
 set -euo pipefail
 IFS=$'\n\t'
@@ -93,14 +92,35 @@ prepare_branch() {
     git fetch --all
     git checkout releases
     git reset --hard origin/releases
-    if [[ "$BRANCH_TO_RELEASE" != "releases" ]] ; then
-        echo "Releasing from other branches than 'releases' is not supported right now."
-        exit -1
-    fi
-
     git clean -xfd
     git submodule update --init --recursive
 
+    # Merge the branch to the releases branch and check the CHANGELOG.md
+    if [[ "$BRANCH_TO_RELEASE" != "releases" ]] ; then
+        git merge "origin/$BRANCH_TO_RELEASE"
+
+        while true
+        do
+            read -r -p "Type the command to edit CHANGELOG.md, default(vim):" editor
+            if [ -z "$editor" ] ; then
+                editor="vim"
+            fi
+            "$editor" CHANGELOG.md
+
+            read -r -p "Please merge the unreleased entries in the 'CHANGELOG.md' and then press any key to continue..." _
+            if [ "$(grep -c "YYYY-MM-DD" CHANGELOG.md)" -eq 1 ] ; then
+                break
+            else
+                echo "There are more than one or none unreleased entries in the 'CHANGELOG.md'."
+            fi
+        done
+        # CHANGELOG.md is modified.
+        if ! git diff-index --quiet HEAD CHANGELOG.md ; then
+            git add CHANGELOG.md
+            git commit -m "Merge entries in changelog"
+        fi
+    fi
+
     if ! grep -q "SNAPSHOT" version.txt ; then
         echo "'version.txt' doesn't contain 'SNAPSHOT'."
         exit -1
