diff --git a/CHANGELOG.md b/CHANGELOG.md
index 31f208cafe..6fb7588b41 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,22 +1,23 @@
-## 5.0.2 (YYYY-MM-DD)
-
-### Bug Fixes
-
-* `RealmList.move()` did not move items correctly for unmanaged lists (#5860).
-* `RealmObject.isValid()` not correctly returns `false` if `null` is provided as an argument (#5865).
-
-
 ## 5.0.1 (YYYY-MM-DD)
 
 ### Enhancements
 
 * [ObjectServer] `SyncConfiguration.automatic()` will make use of the host port to work out the default Realm URL.
 * [ObjectServer] A role is now automatically created for each user with that user as its only member. This simplifies the common use case of restricting access to specific objects to a single user. This role can be accessed at `PermissionUser.getRole()`.
+* [ObjectServer] Expose `Role.getMembers()` to access the list of associated `UserPermission`.
 
 ### Bug Fixes
 
+* `RealmList.move()` did not move items correctly for unmanaged lists (#5860).
+* `RealmObject.isValid()` not correctly returns `false` if `null` is provided as an argument (#5865).
 * `RealmQuery.findFirst()` and `RealmQuery.findFirstAsync()` not working correctly with sorting (#5714).
+* Permission `noPrivileges` and `allPrivileges` were returning opposite privileges.
+* Fixes an issue caused by JNI local table reference overflow (#5880).
+
+### Internal
 
+* Upgraded to Realm Sync 3.0.1
+* Upgraded to Realm Core 5.4.2
 
 ## 5.0.0 (2018-03-15)
 
diff --git a/Jenkinsfile b/Jenkinsfile
index a6eeb60267..8412e67f04 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -27,10 +27,10 @@ try {
         // A full build is done on `master`.
         // TODO Once Android emulators are available on all nodes, we can switch to x86 builds
         // on PR's for even more throughput.
-        def ABIs = ""
+        def abiFilter = ""
         def instrumentationTestTarget = "connectedAndroidTest"
         if (!['master', 'next-major'].contains(env.BRANCH_NAME)) {
-            ABIs = "armeabi-v7a"
+            abiFilter = "-PbuildTargetABIs=armeabi-v7a"
             instrumentationTestTarget = "connectedObjectServerDebugAndroidTest" // Run in debug more for better error reporting
         }
 
@@ -60,7 +60,7 @@ try {
                 stage('JVM tests') {
                   try {
                     withCredentials([[$class: 'FileBinding', credentialsId: 'c0cc8f9e-c3f1-4e22-b22f-6568392e26ae', variable: 'S3CFG']]) {
-                      sh "chmod +x gradlew && ./gradlew assemble check javadoc -Ps3cfg=${env.S3CFG} -PbuildTargetABIs=${ABIs}"
+                      sh "chmod +x gradlew && ./gradlew assemble check javadoc -Ps3cfg=${env.S3CFG} ${abiFilter}"
                     }
                   } finally {
                     storeJunitResults 'realm/realm-annotations-processor/build/test-results/test/TEST-*.xml'
@@ -87,7 +87,7 @@ try {
 
                 stage('Static code analysis') {
                   try {
-                    gradle('realm', 'findbugs pmd checkstyle -PbuildTargetABIs=${ABIs}')
+                    gradle('realm', "findbugs pmd checkstyle ${abiFilter}")
                   } finally {
                     publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'realm/realm-library/build/findbugs', reportFiles: 'findbugs-output.html', reportName: 'Findbugs issues'])
                     publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'realm/realm-library/build/reports/pmd', reportFiles: 'pmd.html', reportName: 'PMD Issues'])
@@ -122,7 +122,7 @@ try {
                   stage('Collect metrics') {
                     collectAarMetrics()
                   }
-                }   
+                }
 
                 if (['master', 'next-major'].contains(env.BRANCH_NAME)) {
                   stage('Publish to OJO') {
diff --git a/dependencies.list b/dependencies.list
index 6a3c2d6332..d48cd91181 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,8 +1,8 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=3.0.0
-REALM_SYNC_SHA256=9141177ccc92d8f9282625dace61eee5c3d971d2daca7593266e175b610a24cf
+REALM_SYNC_VERSION=3.0.1
+REALM_SYNC_SHA256=7764304d5dc7db7b4b9be9916f753c14c61c40e9f09fd1d92abeee3d8474405f
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
-REALM_OBJECT_SERVER_DE_VERSION=3.0.0
+REALM_OBJECT_SERVER_DE_VERSION=3.1.0
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
index 045f290af4..7c156bf79d 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
@@ -507,6 +507,19 @@ public void getRoles_closedRealmThrows() {
 //        } catch (IllegalStateException ignore) {
 //        }
     }
+    @Test
+    public void noPrivileges() {
+        Role role = new Role("foo");
+        Permission admin = new Permission.Builder(role).allPrivileges().build();
+        assertFullAccess(admin);
+    }
+
+    @Test
+    public void allPrivileges() {
+        Role role = new Role("foo");
+        Permission nobody = new Permission.Builder(role).noPrivileges().build();
+        assertNoAccess(nobody);
+    }
 
     private void assertFullAccess(RealmPrivileges privileges) {
         assertTrue(privileges.canRead());
@@ -540,6 +553,16 @@ private void assertFullAccess(Permission permission) {
         assertTrue(permission.canModifySchema());
     }
 
+    private void assertNoAccess(Permission permission) {
+        assertFalse(permission.canCreate());
+        assertFalse(permission.canRead());
+        assertFalse(permission.canUpdate());
+        assertFalse(permission.canDelete());
+        assertFalse(permission.canQuery());
+        assertFalse(permission.canSetPermissions());
+        assertFalse(permission.canModifySchema());
+    }
+
     private void assertNoAccess(RealmPrivileges privileges) {
         assertFalse(privileges.canRead());
         assertFalse(privileges.canUpdate());
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index 928e244ca5..cdd27c396a 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -281,8 +281,12 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
             }
 
             JNIEnv* env = realm::jni_util::JniUtils::get_env(true);
-            env->CallStaticVoidMethod(sync_manager_class, java_error_callback_method, error_code,
-                                      to_jstring(env, error_message), to_jstring(env, session.get()->path()));
+            jstring jerror_message = to_jstring(env, error_message);
+            jstring jsession_path = to_jstring(env, session.get()->path());
+            env->CallStaticVoidMethod(sync_manager_class, java_error_callback_method, error_code, jerror_message,
+                                      jsession_path);
+            env->DeleteLocalRef(jerror_message);
+            env->DeleteLocalRef(jsession_path);
         };
 
         // path on disk of the Realm file.
@@ -294,14 +298,18 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
 
             JNIEnv* env = realm::jni_util::JniUtils::get_env(true);
 
+            jstring jpath = to_jstring(env, path.c_str());
+            jstring jrefresh_token = to_jstring(env, session->user()->refresh_token().c_str());
             jstring access_token_string = (jstring)env->CallStaticObjectMethod(
-                sync_manager_class, java_bind_session_method, to_jstring(env, path.c_str()),
-                to_jstring(env, session->user()->refresh_token().c_str()));
+                sync_manager_class, java_bind_session_method, jpath, jrefresh_token);
             if (access_token_string) {
                 // reusing cached valid token
                 JStringAccessor access_token(env, access_token_string);
                 session->refresh_access_token(access_token, realm::util::Optional<std::string>(syncConfig.realm_url()));
+                env->DeleteLocalRef(access_token_string);
             }
+            env->DeleteLocalRef(jpath);
+            env->DeleteLocalRef(jrefresh_token);
         };
 
         // Get logged in user
@@ -377,6 +385,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSyncConfigS
                     bool isValid = env->CallStaticBooleanMethod(sync_manager_class, java_ssl_verify_callback,
                                                                 jserver_address,
                                                                 jpem, depth) == JNI_TRUE;
+                    env->DeleteLocalRef(jserver_address);
+                    env->DeleteLocalRef(jpem);
                     return isValid;
                 };
             config.sync_config->ssl_verify_callback = std::move(ssl_verify_callback);
diff --git a/realm/realm-library/src/main/java/io/realm/sync/permissions/Permission.java b/realm/realm-library/src/main/java/io/realm/sync/permissions/Permission.java
index d0838b4287..50f8ce2d87 100644
--- a/realm/realm-library/src/main/java/io/realm/sync/permissions/Permission.java
+++ b/realm/realm-library/src/main/java/io/realm/sync/permissions/Permission.java
@@ -69,20 +69,6 @@ public Builder(Role role) {
          * Enables all privileges.
          */
         public Builder allPrivileges() {
-            canRead = false;
-            canUpdate = false;
-            canDelete = false;
-            canSetPermissions = false;
-            canQuery = false;
-            canCreate = false;
-            canModifySchema = false;
-            return this;
-        }
-
-        /**
-         * Disables all privileges.
-         */
-        public Builder noPrivileges() {
             canRead = true;
             canUpdate = true;
             canDelete = true;
@@ -93,6 +79,20 @@ public Builder noPrivileges() {
             return this;
         }
 
+        /**
+         * Disables all privileges.
+         */
+        public Builder noPrivileges() {
+            canRead = false;
+            canUpdate = false;
+            canDelete = false;
+            canSetPermissions = false;
+            canQuery = false;
+            canCreate = false;
+            canModifySchema = false;
+            return this;
+        }
+
         /**
          * Defines if this role can read from given resource or not.
          *
diff --git a/realm/realm-library/src/main/java/io/realm/sync/permissions/Role.java b/realm/realm-library/src/main/java/io/realm/sync/permissions/Role.java
index 629ab67ff3..dc72ac906a 100644
--- a/realm/realm-library/src/main/java/io/realm/sync/permissions/Role.java
+++ b/realm/realm-library/src/main/java/io/realm/sync/permissions/Role.java
@@ -110,4 +110,13 @@ public boolean removeMember(String userId) {
     public boolean hasMember(String userId) {
         return members.where().equalTo("id", userId).count() > 0;
     }
+
+    /**
+     * Returns the list of {@link PermissionUser} within this role.
+     *
+     * @return list of members associated with this role.
+     */
+    public RealmList<PermissionUser> getMembers() {
+        return members;
+    }
 }
