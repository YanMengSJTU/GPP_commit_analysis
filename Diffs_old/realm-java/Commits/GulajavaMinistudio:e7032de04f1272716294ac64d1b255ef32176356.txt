diff --git a/CHANGELOG.md b/CHANGELOG.md
index 608561c02d..9bb00126ad 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,4 @@
-4.0.0-BETA3 (YYYY-MM-DD)
+## 4.0.0-BETA3 (YYYY-MM-DD)
 
 ### Internal
 
@@ -31,6 +31,12 @@
 * Upgraded to Realm Core 3.0.0-rc3.
 
 
+## 3.7.2 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* Fixed a JNI memory issue when doing queries which might potentially cause various native crashes.
+
 ## 3.7.1 (2017-09-07)
 
 ### Bug Fixes
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index a7a1c2385e..099e984014 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -23,6 +23,7 @@
 #include <sync/sync_session.hpp>
 #endif
 
+#include "java_accessor.hpp"
 #include "util.hpp"
 #include "jni_util/java_method.hpp"
 #include "jni_util/java_class.hpp"
@@ -32,6 +33,7 @@
 
 using namespace realm;
 using namespace realm::jni_util;
+using namespace realm::_impl;
 
 static_assert(SchemaMode::Automatic ==
                   static_cast<SchemaMode>(io_realm_internal_OsRealmConfig_SCHEMA_MODE_VALUE_AUTOMATIC),
@@ -92,11 +94,11 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetEncryptionK
 {
     TR_ENTER_PTR(native_ptr)
     try {
-        JniByteArray key_array(env, j_key_array);
+        JByteArrayAccessor jarray_accessor(env, j_key_array);
         auto& config = *reinterpret_cast<Realm::Config*>(native_ptr);
         // Encryption key should be set before creating sync_config.
         REALM_ASSERT(!config.sync_config);
-        config.encryption_key = key_array;
+        config.encryption_key = jarray_accessor.transform<std::vector<char>>();
     }
     CATCH_STD()
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsSchemaInfo.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsSchemaInfo.cpp
index 3056e554df..0f428436a7 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsSchemaInfo.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsSchemaInfo.cpp
@@ -21,9 +21,10 @@
 #include <property.hpp>
 #include <util/format.hpp>
 
+#include "java_accessor.hpp"
 #include "java_exception_def.hpp"
-#include "jni_util/java_exception_thrower.hpp"
 #include "util.hpp"
+#include "jni_util/java_exception_thrower.hpp"
 
 using namespace realm;
 using namespace realm::jni_util;
@@ -42,8 +43,8 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsSchemaInfo_nativeCreateFromList
     TR_ENTER()
     try {
         std::vector<ObjectSchema> object_schemas;
-        JniLongArray array(env, objectSchemaPtrs_);
-        for (jsize i = 0; i < array.len(); ++i) {
+        JLongArrayAccessor array(env, objectSchemaPtrs_);
+        for (jsize i = 0; i < array.size(); ++i) {
             object_schemas.push_back(*reinterpret_cast<ObjectSchema*>(array[i]));
         }
         auto* schema = new Schema(std::move(object_schemas));
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
index f5699fa2d5..37babfa46e 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
@@ -24,11 +24,12 @@
 #include <realm/util/assert.hpp>
 
 #include <shared_realm.hpp>
-#include "object_store.hpp"
+
+#include "java_accessor.hpp"
 #include "java_binding_context.hpp"
-#include "util.hpp"
 #include "java_exception_def.hpp"
-
+#include "object_store.hpp"
+#include "util.hpp"
 #include "jni_util/java_method.hpp"
 #include "jni_util/java_class.hpp"
 #include "jni_util/java_exception_thrower.hpp"
@@ -466,8 +467,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeWriteCopy(JNIEnv
     auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
     try {
         JStringAccessor path_str(env, path);
-        JniByteArray key_buffer(env, key);
-        shared_realm->write_copy(path_str, key_buffer);
+        JByteArrayAccessor jarray_accessor(env, key);
+        shared_realm->write_copy(path_str, jarray_accessor.transform<BinaryData>());
     }
     CATCH_STD()
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
index a61b776b4f..707c8c02f3 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
@@ -22,8 +22,9 @@
 
 #include "util/format.hpp"
 
-#include "jni_util/java_exception_thrower.hpp"
+#include "java_accessor.hpp"
 #include "java_exception_def.hpp"
+#include "jni_util/java_exception_thrower.hpp"
 
 using namespace std;
 using namespace realm;
@@ -818,8 +819,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetByteArray(JNIEnv* e
             return;
         }
 
-        JniByteArray byteAccessor(env, dataArray);
-        TBL(nativeTablePtr)->set_binary(S(columnIndex), S(rowIndex), byteAccessor, B(isDefault));
+        JByteArrayAccessor jarray_accessor(env, dataArray);
+        TBL(nativeTablePtr)
+            ->set_binary(S(columnIndex), S(rowIndex), jarray_accessor.transform<BinaryData>(), B(isDefault));
     }
     CATCH_STD()
 }
@@ -1183,10 +1185,10 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeGetSortedViewMulti(JN
 {
     Table* pTable = TBL(nativeTablePtr);
 
-    JniLongArray long_arr(env, columnIndices);
-    JniBooleanArray bool_arr(env, ascending);
-    jsize arr_len = long_arr.len();
-    jsize asc_len = bool_arr.len();
+    JLongArrayAccessor long_arr(env, columnIndices);
+    JBooleanArrayAccessor bool_arr(env, ascending);
+    jsize arr_len = long_arr.size();
+    jsize asc_len = bool_arr.size();
 
     if (arr_len == 0) {
         ThrowException(env, IllegalArgument, "You must provide at least one field name.");
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
index 39adab3874..d8706d945c 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
@@ -24,8 +24,9 @@
 #include <object_store.hpp>
 #include <results.hpp>
 
-#include "util.hpp"
+#include "java_accessor.hpp"
 #include "java_class_global_def.hpp"
+#include "util.hpp"
 
 using namespace realm;
 using namespace realm::jni_util;
@@ -69,10 +70,11 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_TableQuery_nativeValidateQuery(
 // If the corresponding entry in tablesArray is anything other than a nullptr, the link is a backlink.
 // In that case, the tablesArray element is the pointer to the backlink source table and the
 // indicesArray entry is the source column index in the source table.
-static TableRef getTableForLinkQuery(jlong nativeQueryPtr, JniLongArray& tablesArray, JniLongArray& indicesArray)
+static TableRef getTableForLinkQuery(jlong nativeQueryPtr, const JLongArrayAccessor& tablesArray,
+                                     const JLongArrayAccessor& indicesArray)
 {
     auto table_ref = reinterpret_cast<Query *>(nativeQueryPtr)->get_table();
-    jsize link_element_count = indicesArray.len() - 1;
+    jsize link_element_count = indicesArray.size() - 1;
     for (int i = 0; i < link_element_count; ++i) {
         auto col_index = size_t(indicesArray[i]);
         auto table_ptr = reinterpret_cast<Table *>(tablesArray[i]);
@@ -87,10 +89,11 @@ static TableRef getTableForLinkQuery(jlong nativeQueryPtr, JniLongArray& tablesA
 }
 
 // Return TableRef point to original table or the link table
-static TableRef getTableByArray(jlong nativeQueryPtr, JniLongArray& tablesArray, JniLongArray& indicesArray)
+static TableRef getTableByArray(jlong nativeQueryPtr, const JLongArrayAccessor& tablesArray,
+                                const JLongArrayAccessor& indicesArray)
 {
     auto table_ref = reinterpret_cast<Query *>(nativeQueryPtr)->get_table();
-    jsize link_element_count = indicesArray.len() - 1;
+    jsize link_element_count = indicesArray.size() - 1;
     for (int i = 0; i < link_element_count; ++i) {
         auto table_ptr = reinterpret_cast<Table *>(tablesArray[i]);
         if (table_ptr == nullptr) {
@@ -161,9 +164,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqual__J_3J_3JJ(J
                                                                             jlongArray columnIndexes,
                                                                             jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Int)) {
@@ -185,9 +188,9 @@ JNIEXPORT void JNICALL JNICALL Java_io_realm_internal_TableQuery_nativeNotEqual_
                                                                                        jlongArray tablePointers,
                                                                                        jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Int)) {
@@ -209,9 +212,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreater__J_3J_3JJ
                                                                               jlongArray columnIndexes,
                                                                               jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Int)) {
@@ -234,9 +237,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreaterEqual__J_3
                                                                                    jlongArray tablePointers,
                                                                                    jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Int)) {
@@ -257,9 +260,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLess__J_3J_3JJ(JN
                                                                            jlongArray columnIndexes,
                                                                            jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Int)) {
@@ -280,9 +283,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLessEqual__J_3J_3
                                                                                 jlongArray columnIndexes,
                                                                                 jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Int)) {
@@ -304,8 +307,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeBetween__J_3JJJ(J
                                                                                jlongArray columnIndexes, jlong value1,
                                                                                jlong value2)
 {
-    JniLongArray arr(env, columnIndexes);
-    jsize arr_len = arr.len();
+    JLongArrayAccessor arr(env, columnIndexes);
+    jsize arr_len = arr.size();
     if (arr_len == 1) {
         if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, arr[0], type_Int)) {
             return;
@@ -327,9 +330,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqual__J_3J_3JF(J
                                                                             jlongArray columnIndexes,
                                                                             jlongArray tablePointers, jfloat value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Float)) {
@@ -352,9 +355,9 @@ JNIEXPORT void JNICALL JNICALL Java_io_realm_internal_TableQuery_nativeNotEqual_
                                                                                        jlongArray tablePointers,
                                                                                        jfloat value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Float)) {
@@ -376,9 +379,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreater__J_3J_3JF
                                                                               jlongArray columnIndexes,
                                                                               jlongArray tablePointers, jfloat value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Float)) {
@@ -401,9 +404,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreaterEqual__J_3
                                                                                    jlongArray tablePointers,
                                                                                    jfloat value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Float)) {
@@ -424,9 +427,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLess__J_3J_3JF(JN
                                                                            jlongArray columnIndexes,
                                                                            jlongArray tablePointers, jfloat value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Float)) {
@@ -448,9 +451,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLessEqual__J_3J_3
                                                                                 jlongArray tablePointers,
                                                                                 jfloat value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Float)) {
@@ -472,8 +475,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeBetween__J_3JFF(J
                                                                                jlongArray columnIndexes,
                                                                                jfloat value1, jfloat value2)
 {
-    JniLongArray arr(env, columnIndexes);
-    jsize arr_len = arr.len();
+    JLongArrayAccessor arr(env, columnIndexes);
+    jsize arr_len = arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, arr[0], type_Float)) {
@@ -496,9 +499,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqual__J_3J_3JD(J
                                                                             jlongArray columnIndexes,
                                                                             jlongArray tablePointers, jdouble value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Double)) {
@@ -521,9 +524,9 @@ JNIEXPORT void JNICALL JNICALL Java_io_realm_internal_TableQuery_nativeNotEqual_
                                                                                        jlongArray tablePointers,
                                                                                        jdouble value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Double)) {
@@ -545,9 +548,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreater__J_3J_3JD
                                                                               jlongArray columnIndexes,
                                                                               jlongArray tablePointers, jdouble value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Double)) {
@@ -570,9 +573,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreaterEqual__J_3
                                                                                    jlongArray tablePointers,
                                                                                    jdouble value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Double)) {
@@ -593,9 +596,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLess__J_3J_3JD(JN
                                                                            jlongArray columnIndexes,
                                                                            jlongArray tablePointers, jdouble value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Double)) {
@@ -618,9 +621,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLessEqual__J_3J_3
                                                                                 jlongArray tablePointers,
                                                                                 jdouble value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Double)) {
@@ -642,8 +645,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeBetween__J_3JDD(J
                                                                                jlongArray columnIndexes,
                                                                                jdouble value1, jdouble value2)
 {
-    JniLongArray arr(env, columnIndexes);
-    jsize arr_len = arr.len();
+    JLongArrayAccessor arr(env, columnIndexes);
+    jsize arr_len = arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, arr[0], type_Double)) {
@@ -666,9 +669,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqualTimestamp(JN
                                                                               jlongArray columnIndexes,
                                                                               jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Timestamp)) {
@@ -692,9 +695,9 @@ JNIEXPORT void JNICALL JNICALL Java_io_realm_internal_TableQuery_nativeNotEqualT
                                                                                          jlongArray tablePointers,
                                                                                          jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Timestamp)) {
@@ -717,9 +720,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreaterTimestamp(
                                                                                 jlongArray columnIndexes,
                                                                                 jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Timestamp)) {
@@ -743,9 +746,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeGreaterEqualTimes
                                                                                      jlongArray tablePointers,
                                                                                      jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Timestamp)) {
@@ -768,9 +771,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLessTimestamp(JNI
                                                                              jlongArray columnIndexes,
                                                                              jlongArray tablePointers, jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Timestamp)) {
@@ -794,9 +797,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeLessEqualTimestam
                                                                                   jlongArray tablePointers,
                                                                                   jlong value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Timestamp)) {
@@ -819,8 +822,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeBetweenTimestamp(
                                                                                 jlongArray columnIndexes,
                                                                                 jlong value1, jlong value2)
 {
-    JniLongArray arr(env, columnIndexes);
-    jsize arr_len = arr.len();
+    JLongArrayAccessor arr(env, columnIndexes);
+    jsize arr_len = arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, arr[0], type_Timestamp)) {
@@ -844,9 +847,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeEqual__J_3J_3JZ(J
                                                                             jlongArray columnIndexes,
                                                                             jlongArray tablePointers, jboolean value)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Bool)) {
@@ -872,9 +875,9 @@ static void TableQuery_StringPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongA
                                        jlongArray tablePointers, jstring value,
                                        jboolean caseSensitive, StringPredicate predicate)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     try {
         TableRef table_ref = getTableForLinkQuery(nativeQueryPtr, table_arr, index_arr);
         if (value == NULL) {
@@ -998,50 +1001,43 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeContains(JNIEnv*
 enum BinaryPredicate { BinaryEqual, BinaryNotEqual };
 
 static void TableQuery_BinaryPredicate(JNIEnv* env, jlong nativeQueryPtr, jlongArray columnIndexes,
-                                       jlongArray tablePointers, jbyteArray value,
-                                       BinaryPredicate predicate)
+                                       jlongArray tablePointers, jbyteArray value, BinaryPredicate predicate)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
     try {
+        JLongArrayAccessor table_arr(env, tablePointers);
+        JLongArrayAccessor index_arr(env, columnIndexes);
+        jsize arr_len = index_arr.size();
         TableRef table_ref = getTableForLinkQuery(nativeQueryPtr, table_arr, index_arr);
-        JniByteArray bytes(env, value);
-        BinaryData value2;
-        if (value == NULL) {
-            if (!TBL_AND_COL_NULLABLE(env, table_ref.get(), index_arr[arr_len - 1])) {
-                return;
-            }
-            value2 = BinaryData();
-        }
-        else {
-            if (!bytes.ptr()) {
-                ThrowException(env, IllegalArgument, "binaryPredicate");
-                return;
-            }
-            value2 = BinaryData(reinterpret_cast<char*>(bytes.ptr()), S(bytes.len()));
+
+        if (value == NULL && !TBL_AND_COL_NULLABLE(env, table_ref.get(), index_arr[arr_len - 1])) {
+            return;
         }
 
+        JByteArrayAccessor jarray_accessor(env, value);
         if (arr_len == 1) {
             if (!QUERY_COL_TYPE_VALID(env, nativeQueryPtr, index_arr[0], type_Binary)) {
                 return;
             }
             switch (predicate) {
                 case BinaryEqual:
-                    Q(nativeQueryPtr)->equal(S(index_arr[0]), value2);
+                    Q(nativeQueryPtr)->equal(S(index_arr[0]), jarray_accessor.transform<BinaryData>());
                     break;
                 case BinaryNotEqual:
-                    Q(nativeQueryPtr)->not_equal(S(index_arr[0]), value2);
+                    Q(nativeQueryPtr)->not_equal(S(index_arr[0]), jarray_accessor.transform<BinaryData>());
                     break;
             }
         }
         else {
             switch (predicate) {
                 case BinaryEqual:
-                    Q(nativeQueryPtr)->and_query(table_ref->column<Binary>(size_t(index_arr[arr_len - 1])) == value2);
+                    Q(nativeQueryPtr)
+                        ->and_query(table_ref->column<Binary>(size_t(index_arr[arr_len - 1])) ==
+                                    jarray_accessor.transform<BinaryData>());
                     break;
                 case BinaryNotEqual:
-                    Q(nativeQueryPtr)->and_query(table_ref->column<Binary>(size_t(index_arr[arr_len - 1])) != value2);
+                    Q(nativeQueryPtr)
+                        ->and_query(table_ref->column<Binary>(size_t(index_arr[arr_len - 1])) !=
+                                    jarray_accessor.transform<BinaryData>());
                     break;
             }
         }
@@ -1499,9 +1495,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsNull(JNIEnv* en
                                                                       jlongArray tablePointers)
 {
     try {
-        JniLongArray table_arr(env, tablePointers);
-        JniLongArray index_arr(env, columnIndexes);
-        jsize arr_len = index_arr.len();
+        JLongArrayAccessor table_arr(env, tablePointers);
+        JLongArrayAccessor index_arr(env, columnIndexes);
+        jsize arr_len = index_arr.size();
         auto pQuery = reinterpret_cast<Query *>(nativeQueryPtr);
 
         jlong column_idx = index_arr[arr_len - 1];
@@ -1579,9 +1575,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsNotNull(JNIEnv*
                                                                          jlongArray columnIndexes,
                                                                          jlongArray tablePointers)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     Query* pQuery = Q(nativeQueryPtr);
     try {
         jlong column_idx = index_arr[arr_len - 1];
@@ -1661,9 +1657,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsEmpty(JNIEnv* e
                                                                        jlongArray columnIndexes,
                                                                        jlongArray tablePointers)
 {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     Query* pQuery = reinterpret_cast<Query *>(nativeQueryPtr);
     try {
         TableRef src_table_ref = getTableForLinkQuery(nativeQueryPtr, table_arr, index_arr);
@@ -1732,9 +1728,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsEmpty(JNIEnv* e
 JNIEXPORT void JNICALL
 Java_io_realm_internal_TableQuery_nativeIsNotEmpty(JNIEnv *env, jobject, jlong nativeQueryPtr,
                                                    jlongArray columnIndexes, jlongArray tablePointers) {
-    JniLongArray table_arr(env, tablePointers);
-    JniLongArray index_arr(env, columnIndexes);
-    jsize arr_len = index_arr.len();
+    JLongArrayAccessor table_arr(env, tablePointers);
+    JLongArrayAccessor index_arr(env, columnIndexes);
+    jsize arr_len = index_arr.size();
     Query* pQuery = reinterpret_cast<Query *>(nativeQueryPtr);
     try {
         TableRef src_table_ref = getTableForLinkQuery(nativeQueryPtr, table_arr, index_arr);
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
index 7be68bc5fe..bf3a2a2543 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
@@ -15,9 +15,12 @@
  */
 
 #include "io_realm_internal_UncheckedRow.h"
+
+#include "java_accessor.hpp"
 #include "util.hpp"
 
 using namespace realm;
+using namespace realm::_impl;
 
 static void finalize_unchecked_row(jlong ptr);
 
@@ -305,30 +308,17 @@ JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeSetByteArray(JN
         return;
     }
 
-    jbyte* bytePtr = nullptr;
     try {
-        if (value == nullptr) {
-            if (!(ROW(nativeRowPtr)->get_table()->is_nullable(S(columnIndex)))) {
-                ThrowNullValueException(env, ROW(nativeRowPtr)->get_table(), S(columnIndex));
-                return;
-            }
-            ROW(nativeRowPtr)->set_binary(S(columnIndex), BinaryData());
-        }
-        else {
-            bytePtr = env->GetByteArrayElements(value, NULL);
-            if (!bytePtr) {
-                ThrowException(env, IllegalArgument, "doByteArray");
-                return;
-            }
-            size_t dataLen = S(env->GetArrayLength(value));
-            ROW(nativeRowPtr)->set_binary(S(columnIndex), BinaryData(reinterpret_cast<char*>(bytePtr), dataLen));
+        auto& row = *reinterpret_cast<realm::Row*>(nativeRowPtr);
+        if (value == nullptr && !(row.get_table()->is_nullable(S(columnIndex)))) {
+            ThrowNullValueException(env, ROW(nativeRowPtr)->get_table(), S(columnIndex));
+            return;
         }
-    }
-    CATCH_STD()
 
-    if (bytePtr) {
-        env->ReleaseByteArrayElements(value, bytePtr, JNI_ABORT);
+        JByteArrayAccessor jarray_accessor(env, value);
+        row.set_binary(static_cast<size_t>(columnIndex), jarray_accessor.transform<BinaryData>());
     }
+    CATCH_STD()
 }
 
 JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeSetLink(JNIEnv* env, jobject, jlong nativeRowPtr,
diff --git a/realm/realm-library/src/main/cpp/java_accessor.hpp b/realm/realm-library/src/main/cpp/java_accessor.hpp
new file mode 100644
index 0000000000..7658acd7d1
--- /dev/null
+++ b/realm/realm-library/src/main/cpp/java_accessor.hpp
@@ -0,0 +1,225 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef REALM_JNI_IMPL_JAVA_ACCESSOR_HPP
+#define REALM_JNI_IMPL_JAVA_ACCESSOR_HPP
+
+#include <jni.h>
+
+#include <vector>
+#include <memory>
+
+#include <realm/binary_data.hpp>
+
+#include <util/format.hpp>
+
+#include "java_exception_def.hpp"
+#include "jni_util/java_exception_thrower.hpp"
+
+// Utility classes for accessing Java objects from JNI
+namespace realm {
+namespace _impl {
+
+template <typename, typename>
+class JPrimitiveArrayAccessor;
+typedef JPrimitiveArrayAccessor<jbyteArray, jbyte> JByteArrayAccessor;
+typedef JPrimitiveArrayAccessor<jbooleanArray, jboolean> JBooleanArrayAccessor;
+typedef JPrimitiveArrayAccessor<jlongArray, jlong> JLongArrayAccessor;
+
+// JPrimitiveArrayAccessor and JObjectArrayAccessor are not supposed to be used across JNI borders. They won't acquire
+// references of the original Java object. Thus, you have to ensure the original java object is available during the
+// life cycle of those accessors. Moreover, some returned object like BinaryData and StringData, they don't own the
+// memory they use. So the accessor has to be available during the life cycle of those returned objects.
+
+// Accessor for Java primitive arrays
+template <typename ArrayType, typename ElementType>
+class JPrimitiveArrayAccessor {
+public:
+    JPrimitiveArrayAccessor(JNIEnv* env, ArrayType jarray)
+        : m_size(jarray ? env->GetArrayLength(jarray) : 0)
+        , m_elements_holder(std::make_shared<ElementsHolder>(env, jarray))
+    {
+        check_init(env);
+    }
+    ~JPrimitiveArrayAccessor() = default;
+
+    JPrimitiveArrayAccessor(JPrimitiveArrayAccessor&&) = default;
+    JPrimitiveArrayAccessor& operator=(JPrimitiveArrayAccessor&&) = default;
+    JPrimitiveArrayAccessor(const JPrimitiveArrayAccessor&) = default;
+    JPrimitiveArrayAccessor& operator=(const JPrimitiveArrayAccessor&) = default;
+
+    inline bool is_null() {
+        return !m_elements_holder->m_jarray;
+    }
+
+    inline jsize size() const noexcept
+    {
+        return m_size;
+    }
+
+    inline ElementType* data() const noexcept
+    {
+        return m_elements_holder->m_data_ptr;
+    }
+
+    inline const ElementType& operator[](const int index) const noexcept
+    {
+        return m_elements_holder->m_data_ptr[index];
+    }
+
+    // Converts the Java array into an instance of T. The returned value's life cycle may still rely on this accessor.
+    // (e.g.: BinaryData/StringData)
+    template <typename T>
+    T transform();
+
+private:
+    // Holding the data returned by GetXxxArrayElements call.
+    struct ElementsHolder {
+        ElementsHolder(JNIEnv*, ArrayType);
+        ~ElementsHolder();
+
+        JNIEnv* m_env;
+        const ArrayType m_jarray;
+        ElementType* m_data_ptr;
+        const jint m_release_mode = JNI_ABORT;
+    };
+
+    jsize m_size;
+    // For enabling copy/move constructors. ReleaseXxxArrayElements should only be called once.
+    std::shared_ptr<ElementsHolder> m_elements_holder;
+
+    inline void check_init(JNIEnv* env)
+    {
+        if (m_elements_holder->m_jarray != nullptr && m_elements_holder->m_data_ptr == nullptr) {
+            THROW_JAVA_EXCEPTION(env, JavaExceptionDef::IllegalArgument,
+                                 util::format("GetXxxArrayElements failed on %1.",
+                                              reinterpret_cast<int64_t>(m_elements_holder->m_jarray)));
+        }
+    }
+};
+
+// Accessor for Java object arrays
+template <typename AccessorType, typename ObjectType>
+class JObjectArrayAccessor {
+public:
+    JObjectArrayAccessor(JNIEnv* env, jobjectArray jobject_array)
+        : m_env(env)
+        , m_jobject_array(jobject_array)
+        , m_size(jobject_array ? env->GetArrayLength(jobject_array) : 0)
+    {
+    }
+    ~JObjectArrayAccessor()
+    {
+    }
+
+    // Not implemented
+    JObjectArrayAccessor(JObjectArrayAccessor&&) = delete;
+    JObjectArrayAccessor& operator=(JObjectArrayAccessor&&) = delete;
+    JObjectArrayAccessor(const JObjectArrayAccessor&) = delete;
+    JObjectArrayAccessor& operator=(const JObjectArrayAccessor&) = delete;
+
+    inline jsize size() const noexcept
+    {
+        return m_size;
+    }
+
+    inline AccessorType operator[](const int index) const noexcept
+    {
+        return AccessorType(m_env, static_cast<ObjectType>(m_env->GetObjectArrayElement(m_jobject_array, index)));
+    }
+
+private:
+    JNIEnv* m_env;
+    jobjectArray m_jobject_array;
+    jsize m_size;
+};
+
+// Accessor for jbyteArray
+template <>
+inline JPrimitiveArrayAccessor<jbyteArray, jbyte>::ElementsHolder::ElementsHolder(JNIEnv* env, jbyteArray jarray)
+    : m_env(env)
+    , m_jarray(jarray)
+    , m_data_ptr(jarray ? env->GetByteArrayElements(jarray, nullptr) : nullptr)
+{
+}
+
+template <>
+inline JPrimitiveArrayAccessor<jbyteArray, jbyte>::ElementsHolder::~ElementsHolder()
+{
+    if (m_jarray) {
+        m_env->ReleaseByteArrayElements(m_jarray, m_data_ptr, m_release_mode);
+    }
+}
+
+template <>
+template <>
+inline BinaryData JPrimitiveArrayAccessor<jbyteArray, jbyte>::transform<BinaryData>()
+{
+    return is_null() ? realm::BinaryData()
+                     : realm::BinaryData(reinterpret_cast<const char*>(m_elements_holder->m_data_ptr), m_size);
+}
+
+template <>
+template <>
+inline std::vector<char> JPrimitiveArrayAccessor<jbyteArray, jbyte>::transform<std::vector<char>>()
+{
+    if (is_null()) {
+        return {};
+    }
+
+    std::vector<char> v(m_size);
+    std::copy_n(m_elements_holder->m_data_ptr, v.size(), v.begin());
+    return v;
+}
+
+// Accessor for jbooleanArray
+template <>
+inline JPrimitiveArrayAccessor<jbooleanArray, jboolean>::ElementsHolder::ElementsHolder(JNIEnv* env, jbooleanArray jarray)
+    : m_env(env)
+    , m_jarray(jarray)
+    , m_data_ptr(jarray ? env->GetBooleanArrayElements(jarray, nullptr) : nullptr)
+{
+}
+
+template <>
+inline JPrimitiveArrayAccessor<jbooleanArray, jboolean>::ElementsHolder::~ElementsHolder()
+{
+    if (m_jarray) {
+        m_env->ReleaseBooleanArrayElements(m_jarray, m_data_ptr, m_release_mode);
+    }
+}
+
+// Accessor for jlongArray
+template <>
+inline JPrimitiveArrayAccessor<jlongArray, jlong>::ElementsHolder::ElementsHolder(JNIEnv* env, jlongArray jarray)
+    : m_env(env)
+    , m_jarray(jarray)
+    , m_data_ptr(jarray ? env->GetLongArrayElements(jarray, nullptr) : nullptr)
+{
+}
+
+template <>
+inline JPrimitiveArrayAccessor<jlongArray, jlong>::ElementsHolder::~ElementsHolder()
+{
+    if (m_jarray) {
+        m_env->ReleaseLongArrayElements(m_jarray, m_data_ptr, m_release_mode);
+    }
+}
+
+} // namespace realm
+} // namespace _impl
+
+#endif // REALM_JNI_IMPL_JAVA_ACCESSOR_HPP
diff --git a/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp b/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp
index ebed50f6fd..90adec02ef 100644
--- a/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp
+++ b/realm/realm-library/src/main/cpp/java_sort_descriptor.cpp
@@ -15,6 +15,7 @@
  */
 
 
+#include "java_accessor.hpp"
 #include "java_sort_descriptor.hpp"
 #include "util.hpp"
 #include "jni_util/java_class.hpp"
@@ -53,14 +54,14 @@ std::vector<std::vector<size_t>> JavaSortDescriptor::get_column_indices() const
     static JavaMethod get_column_indices_method(m_env, get_sort_desc_class(), "getColumnIndices", "()[[J");
     jobjectArray column_indices =
         static_cast<jobjectArray>(m_env->CallObjectMethod(m_sort_desc_obj, get_column_indices_method));
-    JniArrayOfArrays<JniLongArray, jlongArray> arrays(m_env, column_indices);
-    jsize arr_len = arrays.len();
+    JObjectArrayAccessor<JLongArrayAccessor, jlongArray> arrays(m_env, column_indices);
+    jsize arr_len = arrays.size();
     std::vector<std::vector<size_t>> indices;
 
     for (int i = 0; i < arr_len; ++i) {
-        JniLongArray& jni_long_array = arrays[i];
+        auto jni_long_array = arrays[i];
         std::vector<size_t> col_indices;
-        for (int j = 0; j < jni_long_array.len(); ++j) {
+        for (int j = 0; j < jni_long_array.size(); ++j) {
             col_indices.push_back(static_cast<size_t>(jni_long_array[j]));
         }
         indices.push_back(std::move(col_indices));
@@ -79,9 +80,9 @@ std::vector<bool> JavaSortDescriptor::get_ascendings() const noexcept
         return {};
     }
 
-    JniBooleanArray ascending_array(m_env, ascendings);
+    JBooleanArrayAccessor ascending_array(m_env, ascendings);
     std::vector<bool> ascending_list;
-    jsize arr_len = ascending_array.len();
+    jsize arr_len = ascending_array.size();
 
     for (int i = 0; i < arr_len; i++) {
         ascending_list.push_back(static_cast<bool>(ascending_array[i]));
diff --git a/realm/realm-library/src/main/cpp/util.hpp b/realm/realm-library/src/main/cpp/util.hpp
index 5f08eec906..30346e469b 100644
--- a/realm/realm-library/src/main/cpp/util.hpp
+++ b/realm/realm-library/src/main/cpp/util.hpp
@@ -478,216 +478,6 @@ class JStringAccessor {
     std::size_t m_size;
 };
 
-class JniLongArray {
-public:
-    JniLongArray(JNIEnv* env, jlongArray javaArray)
-        : m_env(env)
-        , m_javaArray(javaArray)
-        , m_arrayLength(javaArray == NULL ? 0 : env->GetArrayLength(javaArray))
-        , m_array(javaArray == NULL ? NULL : env->GetLongArrayElements(javaArray, NULL))
-        , m_releaseMode(JNI_ABORT)
-    {
-    }
-
-    JniLongArray(JniLongArray& other) = delete;
-
-    JniLongArray(JniLongArray&& other)
-        : m_env(other.m_env)
-        , m_javaArray(other.m_javaArray)
-        , m_arrayLength(other.m_arrayLength)
-        , m_array(other.m_array)
-        , m_releaseMode(other.m_releaseMode)
-    {
-        other.m_env = nullptr;
-        other.m_javaArray = nullptr;
-        other.m_arrayLength = 0;
-        other.m_array = nullptr;
-    }
-
-    ~JniLongArray()
-    {
-        if (m_array) {
-            m_env->ReleaseLongArrayElements(m_javaArray, m_array, m_releaseMode);
-        }
-    }
-
-    inline jsize len() const noexcept
-    {
-        return m_arrayLength;
-    }
-
-    inline jlong* ptr() const noexcept
-    {
-        return m_array;
-    }
-
-    inline jlong& operator[](const int index) noexcept
-    {
-        return m_array[index];
-    }
-
-    inline void updateOnRelease() noexcept
-    {
-        m_releaseMode = 0;
-    }
-
-private:
-    JNIEnv* m_env;
-    jlongArray m_javaArray;
-    jsize m_arrayLength;
-    jlong* m_array;
-    jint m_releaseMode;
-};
-
-template <typename T, typename J>
-class JniArrayOfArrays {
-public:
-    JniArrayOfArrays(JNIEnv* env, jobjectArray javaArray)
-        : m_env(env)
-        , m_javaArray(javaArray)
-        , m_arrayLength(javaArray == nullptr ? 0 : env->GetArrayLength(javaArray))
-    {
-        for (int i = 0; i < m_arrayLength; ++i) {
-            // No type checking. Internal use only.
-            J j_array = static_cast<J>(env->GetObjectArrayElement(m_javaArray, i));
-            m_array.push_back(T(env, j_array));
-        }
-    }
-
-    ~JniArrayOfArrays()
-    {
-    }
-
-    inline jsize len() const noexcept
-    {
-        return m_arrayLength;
-    }
-
-    inline T& operator[](const int index) noexcept
-    {
-        return m_array[index];
-    }
-
-private:
-    JNIEnv* const m_env;
-    jobjectArray const m_javaArray;
-    jsize const m_arrayLength;
-    std::vector<T> m_array;
-};
-
-class JniByteArray {
-public:
-    JniByteArray(JNIEnv* env, jbyteArray javaArray)
-        : m_env(env)
-        , m_javaArray(javaArray)
-        , m_arrayLength(javaArray == NULL ? 0 : env->GetArrayLength(javaArray))
-        , m_array(javaArray == NULL ? NULL : env->GetByteArrayElements(javaArray, NULL))
-        , m_releaseMode(JNI_ABORT)
-    {
-        if (m_javaArray != nullptr && m_array == nullptr) {
-            // javaArray is not null but GetByteArrayElements returns null, something is really wrong.
-            throw std::runtime_error(
-                realm::util::format("GetByteArrayElements failed on byte array %x", m_javaArray));
-        }
-    }
-
-    ~JniByteArray()
-    {
-        if (m_array) {
-            m_env->ReleaseByteArrayElements(m_javaArray, m_array, m_releaseMode);
-        }
-    }
-
-    inline jsize len() const noexcept
-    {
-        return m_arrayLength;
-    }
-
-    inline jbyte* ptr() const noexcept
-    {
-        return m_array;
-    }
-
-    inline jbyte& operator[](const int index) noexcept
-    {
-        return m_array[index];
-    }
-
-    inline operator realm::BinaryData() const noexcept
-    {
-        return realm::BinaryData(reinterpret_cast<const char*>(m_array), m_arrayLength);
-    }
-
-    inline operator std::vector<char>() const noexcept
-    {
-        if (m_array == nullptr) {
-            return {};
-        }
-
-        std::vector<char> v(m_arrayLength);
-        std::copy_n(m_array, v.size(), v.begin());
-        return v;
-    }
-
-    inline void updateOnRelease() noexcept
-    {
-        m_releaseMode = 0;
-    }
-
-private:
-    JNIEnv* const m_env;
-    jbyteArray const m_javaArray;
-    jsize const m_arrayLength;
-    jbyte* const m_array;
-    jint m_releaseMode;
-};
-
-class JniBooleanArray {
-public:
-    JniBooleanArray(JNIEnv* env, jbooleanArray javaArray)
-        : m_env(env)
-        , m_javaArray(javaArray)
-        , m_arrayLength(javaArray == NULL ? 0 : env->GetArrayLength(javaArray))
-        , m_array(javaArray == NULL ? NULL : env->GetBooleanArrayElements(javaArray, NULL))
-        , m_releaseMode(JNI_ABORT)
-    {
-    }
-
-    ~JniBooleanArray()
-    {
-        if (m_array) {
-            m_env->ReleaseBooleanArrayElements(m_javaArray, m_array, m_releaseMode);
-        }
-    }
-
-    inline jsize len() const noexcept
-    {
-        return m_arrayLength;
-    }
-
-    inline jboolean* ptr() const noexcept
-    {
-        return m_array;
-    }
-
-    inline jboolean& operator[](const int index) noexcept
-    {
-        return m_array[index];
-    }
-
-    inline void updateOnRelease() noexcept
-    {
-        m_releaseMode = 0;
-    }
-
-private:
-    JNIEnv* const m_env;
-    jbooleanArray const m_javaArray;
-    jsize const m_arrayLength;
-    jboolean* const m_array;
-    jint m_releaseMode;
-};
-
 inline jlong to_milliseconds(const realm::Timestamp& ts)
 {
     // From core's reference implementation aka unit test
