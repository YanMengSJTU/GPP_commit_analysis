diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5aee64320e..a6d4d27d24 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -15,6 +15,7 @@
 ### Bug Fixes
 
 * `equals()` and `hashCode()` of managed `RealmObject`s that come from linking objects don't work correctly (#4487).
+* Field name was missing in exception message when `null` was set to required field (#4484).
 
 ### Internal
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
index fac6bd2193..cdd594baf3 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
@@ -598,25 +598,29 @@ public void setter_nullOnRequiredFieldsThrows() {
         DynamicRealmObject dObj = new DynamicRealmObject(obj);
         try {
             for (SupportedType type : SupportedType.values()) {
+                String fieldName = null;
                 try {
                     switch (type) {
                         case OBJECT: continue; // Ignore
-                        case LIST: dObj.setNull(NullTypes.FIELD_LIST_NULL); break;
-                        case BOOLEAN: dObj.setNull(NullTypes.FIELD_BOOLEAN_NOT_NULL); break;
-                        case BYTE: dObj.setNull(NullTypes.FIELD_BYTE_NOT_NULL); break;
-                        case SHORT: dObj.setNull(NullTypes.FIELD_SHORT_NOT_NULL); break;
-                        case INT: dObj.setNull(NullTypes.FIELD_INTEGER_NOT_NULL); break;
-                        case LONG: dObj.setNull(NullTypes.FIELD_LONG_NOT_NULL); break;
-                        case FLOAT: dObj.setNull(NullTypes.FIELD_FLOAT_NOT_NULL); break;
-                        case DOUBLE: dObj.setNull(NullTypes.FIELD_DOUBLE_NOT_NULL); break;
-                        case STRING: dObj.setNull(NullTypes.FIELD_STRING_NOT_NULL); break;
-                        case BINARY: dObj.setNull(NullTypes.FIELD_BYTES_NOT_NULL); break;
-                        case DATE: dObj.setNull(NullTypes.FIELD_DATE_NOT_NULL); break;
+                        case LIST: fieldName = NullTypes.FIELD_LIST_NULL; break;
+                        case BOOLEAN: fieldName = NullTypes.FIELD_BOOLEAN_NOT_NULL; break;
+                        case BYTE: fieldName = NullTypes.FIELD_BYTE_NOT_NULL; break;
+                        case SHORT: fieldName = NullTypes.FIELD_SHORT_NOT_NULL; break;
+                        case INT: fieldName = NullTypes.FIELD_INTEGER_NOT_NULL; break;
+                        case LONG: fieldName = NullTypes.FIELD_LONG_NOT_NULL; break;
+                        case FLOAT: fieldName = NullTypes.FIELD_FLOAT_NOT_NULL; break;
+                        case DOUBLE: fieldName = NullTypes.FIELD_DOUBLE_NOT_NULL; break;
+                        case STRING: fieldName = NullTypes.FIELD_STRING_NOT_NULL; break;
+                        case BINARY: fieldName = NullTypes.FIELD_BYTES_NOT_NULL; break;
+                        case DATE: fieldName = NullTypes.FIELD_DATE_NOT_NULL; break;
                         default:
                             fail("Unknown type: " + type);
                     }
+
+                    dObj.setNull(fieldName);
                     fail("Setting value to null should throw: " + type);
                 } catch (IllegalArgumentException ignored) {
+                    assertTrue(ignored.getMessage().contains(fieldName));
                 }
             }
         } finally {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
index 351024dcd8..2d50dacb12 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
@@ -1447,6 +1447,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(0));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_STRING_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1456,6 +1457,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(1));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BYTES_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1474,6 +1476,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(3));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BYTE_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1483,6 +1486,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(4));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_SHORT_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1492,6 +1496,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(5));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_INTEGER_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1501,6 +1506,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(6));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_LONG_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1510,6 +1516,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(7));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_FLOAT_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1519,6 +1526,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(8));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_DOUBLE_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1528,6 +1536,7 @@ public void createObjectFromJson_nullTypesJSONToNotNullFields() throws IOExcepti
             realm.createObjectFromJson(NullTypes.class, array.getJSONObject(9));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_DATE_NOT_NULL));
         } catch (Exception e) {
             fail("Unexpected exception: " + e);
         }
@@ -1552,6 +1561,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(0)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_STRING_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1561,6 +1571,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(1)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BYTES_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1570,6 +1581,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(2)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BOOLEAN_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1579,6 +1591,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(3)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BYTE_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1588,6 +1601,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(4)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_SHORT_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1597,6 +1611,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(5)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_INTEGER_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1606,6 +1621,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(6)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_LONG_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1615,6 +1631,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(7)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_FLOAT_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1624,6 +1641,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(8)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_DOUBLE_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1633,6 +1651,7 @@ public void createObjectFromJson_nullTypesJSONStreamToNotNullFields() throws IOE
             realm.createObjectFromJson(NoPrimaryKeyNullTypes.class, convertJsonObjectToStream(array.getJSONObject(9)));
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_DATE_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
index e5e80ec6b4..54d4e674df 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
@@ -1439,6 +1439,7 @@ public void setter_nullValueInRequiredField() {
             list.first().setFieldStringNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_STRING_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1449,6 +1450,7 @@ public void setter_nullValueInRequiredField() {
             list.first().setFieldBytesNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BYTES_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1459,6 +1461,7 @@ public void setter_nullValueInRequiredField() {
             list.first().setFieldBooleanNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BOOLEAN_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1466,9 +1469,10 @@ public void setter_nullValueInRequiredField() {
         // 4 Byte
         try {
             realm.beginTransaction();
-            list.first().setFieldBytesNotNull(null);
+            list.first().setFieldByteNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_BYTE_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1481,6 +1485,7 @@ public void setter_nullValueInRequiredField() {
             list.first().setFieldFloatNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_FLOAT_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1491,6 +1496,7 @@ public void setter_nullValueInRequiredField() {
             list.first().setFieldDoubleNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_DOUBLE_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
@@ -1501,6 +1507,7 @@ public void setter_nullValueInRequiredField() {
             list.first().setFieldDateNotNull(null);
             fail();
         } catch (IllegalArgumentException ignored) {
+            assertTrue(ignored.getMessage().contains(NullTypes.FIELD_DATE_NOT_NULL));
         } finally {
             realm.cancelTransaction();
         }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
index 3017d94dfc..107836df2c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
@@ -2558,14 +2558,14 @@ public void isNull_listFieldThrows() {
             realm.where(Owner.class).isNull("dogs");
             fail();
         } catch (IllegalArgumentException expected) {
-            assertEquals("Illegal Argument: RealmList is not nullable.", expected.getMessage());
+            assertEquals("Illegal Argument: RealmList(dogs) is not nullable.", expected.getMessage());
         }
 
         try {
             realm.where(Cat.class).isNull("owner.dogs");
             fail();
         } catch (IllegalArgumentException expected) {
-            assertEquals("Illegal Argument: RealmList is not nullable.", expected.getMessage());
+            assertEquals("Illegal Argument: RealmList(dogs) is not nullable.", expected.getMessage());
         }
     }
 
@@ -2576,14 +2576,14 @@ public void isNotNull_listFieldThrows() {
             realm.where(Owner.class).isNotNull("dogs");
             fail();
         } catch (IllegalArgumentException expected) {
-            assertEquals("Illegal Argument: RealmList is not nullable.", expected.getMessage());
+            assertEquals("Illegal Argument: RealmList(dogs) is not nullable.", expected.getMessage());
         }
 
         try {
             realm.where(Cat.class).isNotNull("owner.dogs");
             fail();
         } catch (IllegalArgumentException expected) {
-            assertEquals("Illegal Argument: RealmList is not nullable.", expected.getMessage());
+            assertEquals("Illegal Argument: RealmList(dogs) is not nullable.", expected.getMessage());
         }
     }
 
diff --git a/realm/realm-library/src/main/cpp/util.hpp b/realm/realm-library/src/main/cpp/util.hpp
index 11d6a91cc4..29c2813d17 100644
--- a/realm/realm-library/src/main/cpp/util.hpp
+++ b/realm/realm-library/src/main/cpp/util.hpp
@@ -343,7 +343,7 @@ inline bool TypeValid(JNIEnv* env, T* pTable, jlong columnIndex, int expectColTy
     int colType = pTable->get_column_type(col);
     if (colType != expectColType) {
         realm::jni_util::Log::e("Expected columnType %1, but got %2.", expectColType, pTable->get_column_type(col));
-        ThrowException(env, IllegalArgument, "ColumnType invalid.");
+        ThrowException(env, IllegalArgument, "ColumnType of '" + std::string(pTable->get_column_name(col)) + "' is invalid.");
         return false;
     }
     return true;
@@ -360,7 +360,8 @@ inline bool TypeIsLinkLike(JNIEnv* env, T* pTable, jlong columnIndex)
 
     realm::jni_util::Log::e("Expected columnType %1 or %2, but got %3", realm::type_Link, realm::type_LinkList,
                             colType);
-    ThrowException(env, IllegalArgument, "ColumnType invalid: expected type_Link or type_LinkList");
+    ThrowException(env, IllegalArgument, "ColumnType of '" + std::string(pTable->get_column_name(col)) + "' is invalid:"
+                                         " expected type_Link or type_LinkList");
     return false;
 }
 
@@ -374,7 +375,7 @@ inline bool ColIsNullable(JNIEnv* env, T* pTable, jlong columnIndex)
     }
 
     if (colType == realm::type_LinkList) {
-        ThrowException(env, IllegalArgument, "RealmList is not nullable.");
+        ThrowException(env, IllegalArgument, "RealmList(" + std::string(pTable->get_column_name(col)) + ") is not nullable.");
         return false;
     }
 
@@ -383,7 +384,7 @@ inline bool ColIsNullable(JNIEnv* env, T* pTable, jlong columnIndex)
     }
 
     realm::jni_util::Log::e("Expected nullable column type");
-    ThrowException(env, IllegalArgument, "This field is not nullable.");
+    ThrowException(env, IllegalArgument, "This field(" + std::string(pTable->get_column_name(col)) + ") is not nullable.");
     return false;
 }
 
