diff --git a/CHANGELOG.md b/CHANGELOG.md
index de72b9094d..4a1351d1a7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,7 @@
 ### Enhancements
 
 * Added support for using non-encrypted Realms in multiple processes. Some caveats apply. Read [doc](https://realm.io/docs/java/latest/#multiprocess) for more info (#1091).
+* Added support for importing primitive lists from JSON (#5362).
 
 ### Bug Fixes
 
@@ -17,11 +18,14 @@
 
 ### Bug Fixes
 
-* Leaked file handler in the Realm Transformer (#5521)
+* Leaked file handler in the Realm Transformer (#5521).
+* Potential fix for "RealmError: Incompatible lock file" crash (#2459).
 
 ### Internal
 
-* Updated JavaAssist to 3.22.0-GA
+* Updated JavaAssist to 3.22.0-GA.
+* Upgraded to Realm Sync 2.1.4.
+* Upgraded to Realm Core 4.0.3.
 
 
 ## 4.1.1 (2017-10-27)
@@ -34,7 +38,7 @@
 
 ### Internal
 
-* Updated Realm Sync to 2.1.0
+* Updated Realm Sync to 2.1.0.
 
 
 ## 4.1.0 (2017-10-20)
@@ -79,7 +83,7 @@ The internal file format has been upgraded. Opening an older Realm will upgrade
 ### Enhancements
 
 * [ObjectServer] `SyncUserInfo` now also exposes a users metadata using `SyncUserInfo.getMetadata()`
-* `RealmList` can now contain `String`, `byte[]`, `Boolean`, `Long`, `Integer`, `Short`, `Byte`, `Double`, `Float` and `Date` values. [Queries](https://github.com/realm/realm-java/issues/5361) and [Importing primitive lists from JSON](https://github.com/realm/realm-java/issues/5361) are not supported yet.
+* `RealmList` can now contain `String`, `byte[]`, `Boolean`, `Long`, `Integer`, `Short`, `Byte`, `Double`, `Float` and `Date` values. [Queries](https://github.com/realm/realm-java/issues/5361) and [Importing primitive lists from JSON](https://github.com/realm/realm-java/issues/5362) are not supported yet.
 * Added support for lists of primitives in `RealmObjectSchema` with `addRealmListField(String fieldName, Class<?> primitiveType)`
 * Added support for lists of primitives in `DynamicRealmObject` with `setList(String fieldName, RealmList<?> list)` and `getList(String fieldName, Class<?> primitiveType)`.
 * Minor performance improvement when copy/insert objects into Realm.
diff --git a/dependencies.list b/dependencies.list
index 49ad30bacb..de1b76ac57 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,7 +1,7 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=2.1.0
-REALM_SYNC_SHA256=cd52b2ee53ef80b4b9ec80eede7ca5fa28a96353ad7e4d26cf516dbb12586966
+REALM_SYNC_VERSION=2.1.4
+REALM_SYNC_SHA256=6d32ef44acbf4a63b654ceeaadce036feeefd04a4ca649a95a22a0e7d56df84d
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index c20a722be2..6faacbfa29 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -55,7 +55,7 @@
             "io.realm.internal.OsSchemaInfo",
             "io.realm.internal.OsObjectSchemaInfo",
             "io.realm.internal.Property",
-            "io.realm.internal.ProxyUtils",
+            "io.realm.ProxyUtils",
             "io.realm.internal.RealmObjectProxy",
             "io.realm.internal.Row",
             "io.realm.internal.Table",
@@ -2006,9 +2006,8 @@ private void emitCreateOrUpdateUsingJsonObject(JavaWriter writer) throws IOExcep
                         writer);
 
             } else if (Utils.isRealmValueList(field)) {
-                // FIXME need to implement logic for value list fields.
-                writer.emitSingleLineComment(String.format(Locale.ENGLISH,
-                        "TODO implement logic for value list %1$s.", field.getSimpleName()));
+                writer.emitStatement("ProxyUtils.setRealmListWithJsonObject(objProxy.%1$s(), json, \"%2$s\")",
+                        metadata.getInternalGetter(fieldName), fieldName);
             } else if (Utils.isMutableRealmInteger(field)) {
                 RealmJsonTypeHelper.emitFillJavaTypeWithJsonValue(
                         "objProxy",
@@ -2091,8 +2090,9 @@ private void emitCreateUsingJsonStream(JavaWriter writer) throws IOException {
                         writer);
 
             } else if (Utils.isRealmValueList(field)) {
-                // FIXME need to implement logic for value list fields.
-                writer.emitSingleLineComment("TODO implement logic for value list.");
+                writer.emitStatement("objProxy.%1$s(ProxyUtils.createRealmListWithJsonStream(%2$s.class, reader))",
+                        metadata.getInternalSetter(fieldName),
+                        Utils.getRealmListType(field));
             } else if (Utils.isMutableRealmInteger(field)) {
                 RealmJsonTypeHelper.emitFillJavaTypeFromStream(
                         "objProxy",
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java
index 24d20531cd..7e7a274af1 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java
@@ -10,6 +10,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.ReferenceType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
@@ -218,7 +219,7 @@ public static boolean isRealmResults(VariableElement field) {
     // get the fully-qualified type name for the generic type of a RealmResults
     public static String getRealmResultsType(VariableElement field) {
         if (!Utils.isRealmResults(field)) { return null; }
-        DeclaredType type = getGenericTypeForContainer(field);
+        ReferenceType type = getGenericTypeForContainer(field);
         if (null == type) { return null; }
         return type.toString();
     }
@@ -226,14 +227,14 @@ public static String getRealmResultsType(VariableElement field) {
     // get the fully-qualified type name for the generic type of a RealmList
     public static String getRealmListType(VariableElement field) {
         if (!Utils.isRealmList(field)) { return null; }
-        DeclaredType type = getGenericTypeForContainer(field);
+        ReferenceType type = getGenericTypeForContainer(field);
         if (null == type) { return null; }
         return type.toString();
     }
 
     // Note that, because subclassing subclasses of RealmObject is forbidden,
     // there is no need to deal with constructs like:  <code>RealmResults&lt;? extends Foos&lt;</code>.
-    public static DeclaredType getGenericTypeForContainer(VariableElement field) {
+    public static ReferenceType getGenericTypeForContainer(VariableElement field) {
         TypeMirror fieldType = field.asType();
         TypeKind kind = fieldType.getKind();
         if (kind != TypeKind.DECLARED) { return null; }
@@ -243,9 +244,10 @@ public static DeclaredType getGenericTypeForContainer(VariableElement field) {
 
         fieldType = args.get(0);
         kind = fieldType.getKind();
-        if (kind != TypeKind.DECLARED) { return null; }
+        // We also support RealmList<byte[]>
+        if (kind != TypeKind.DECLARED && kind != TypeKind.ARRAY) { return null; }
 
-        return (DeclaredType) fieldType;
+        return (ReferenceType) fieldType;
     }
 
     /**
@@ -265,7 +267,7 @@ public static String getFieldTypeSimpleName(VariableElement field) {
     /**
      * @return the simple type name for a field.
      */
-    public static String getFieldTypeSimpleName(DeclaredType type) {
+    public static String getFieldTypeSimpleName(ReferenceType type) {
         return (null == type) ? null : getFieldTypeSimpleName(type.toString());
     }
 
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index ad9ce265ac..fb00a17894 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -5,6 +5,7 @@
 import android.os.Build;
 import android.util.JsonReader;
 import android.util.JsonToken;
+import io.realm.ProxyUtils;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.OsList;
@@ -12,7 +13,6 @@
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
 import io.realm.internal.Property;
-import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.Table;
@@ -1041,16 +1041,16 @@ public static String getSimpleClassName() {
                 }
             }
         }
-        // TODO implement logic for value list columnStringList.
-        // TODO implement logic for value list columnBinaryList.
-        // TODO implement logic for value list columnBooleanList.
-        // TODO implement logic for value list columnLongList.
-        // TODO implement logic for value list columnIntegerList.
-        // TODO implement logic for value list columnShortList.
-        // TODO implement logic for value list columnByteList.
-        // TODO implement logic for value list columnDoubleList.
-        // TODO implement logic for value list columnFloatList.
-        // TODO implement logic for value list columnDateList.
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnStringList(), json, "columnStringList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnBinaryList(), json, "columnBinaryList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnBooleanList(), json, "columnBooleanList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnLongList(), json, "columnLongList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnIntegerList(), json, "columnIntegerList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnShortList(), json, "columnShortList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnByteList(), json, "columnByteList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnDoubleList(), json, "columnDoubleList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnFloatList(), json, "columnFloatList");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnDateList(), json, "columnDateList");
         return obj;
     }
 
@@ -1150,25 +1150,25 @@ public static String getSimpleClassName() {
                     reader.endArray();
                 }
             } else if (name.equals("columnStringList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnStringList(ProxyUtils.createRealmListWithJsonStream(java.lang.String.class, reader));
             } else if (name.equals("columnBinaryList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnBinaryList(ProxyUtils.createRealmListWithJsonStream(byte[].class, reader));
             } else if (name.equals("columnBooleanList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnBooleanList(ProxyUtils.createRealmListWithJsonStream(java.lang.Boolean.class, reader));
             } else if (name.equals("columnLongList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnLongList(ProxyUtils.createRealmListWithJsonStream(java.lang.Long.class, reader));
             } else if (name.equals("columnIntegerList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnIntegerList(ProxyUtils.createRealmListWithJsonStream(java.lang.Integer.class, reader));
             } else if (name.equals("columnShortList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnShortList(ProxyUtils.createRealmListWithJsonStream(java.lang.Short.class, reader));
             } else if (name.equals("columnByteList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnByteList(ProxyUtils.createRealmListWithJsonStream(java.lang.Byte.class, reader));
             } else if (name.equals("columnDoubleList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnDoubleList(ProxyUtils.createRealmListWithJsonStream(java.lang.Double.class, reader));
             } else if (name.equals("columnFloatList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnFloatList(ProxyUtils.createRealmListWithJsonStream(java.lang.Float.class, reader));
             } else if (name.equals("columnDateList")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$columnDateList(ProxyUtils.createRealmListWithJsonStream(java.util.Date.class, reader));
             } else {
                 reader.skipValue();
             }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index 77d04eae89..b9573557f8 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -5,6 +5,7 @@
 import android.os.Build;
 import android.util.JsonReader;
 import android.util.JsonToken;
+import io.realm.ProxyUtils;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.OsList;
@@ -12,7 +13,6 @@
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
 import io.realm.internal.Property;
-import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.Table;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 2a7f2cf9d6..bef81c5e86 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -5,6 +5,7 @@
 import android.os.Build;
 import android.util.JsonReader;
 import android.util.JsonToken;
+import io.realm.ProxyUtils;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.OsList;
@@ -12,7 +13,6 @@
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
 import io.realm.internal.Property;
-import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.Table;
@@ -1985,26 +1985,26 @@ public static String getSimpleClassName() {
                 objProxy.realmSet$fieldObjectNull(fieldObjectNullObj);
             }
         }
-        // TODO implement logic for value list fieldStringListNotNull.
-        // TODO implement logic for value list fieldStringListNull.
-        // TODO implement logic for value list fieldBinaryListNotNull.
-        // TODO implement logic for value list fieldBinaryListNull.
-        // TODO implement logic for value list fieldBooleanListNotNull.
-        // TODO implement logic for value list fieldBooleanListNull.
-        // TODO implement logic for value list fieldLongListNotNull.
-        // TODO implement logic for value list fieldLongListNull.
-        // TODO implement logic for value list fieldIntegerListNotNull.
-        // TODO implement logic for value list fieldIntegerListNull.
-        // TODO implement logic for value list fieldShortListNotNull.
-        // TODO implement logic for value list fieldShortListNull.
-        // TODO implement logic for value list fieldByteListNotNull.
-        // TODO implement logic for value list fieldByteListNull.
-        // TODO implement logic for value list fieldDoubleListNotNull.
-        // TODO implement logic for value list fieldDoubleListNull.
-        // TODO implement logic for value list fieldFloatListNotNull.
-        // TODO implement logic for value list fieldFloatListNull.
-        // TODO implement logic for value list fieldDateListNotNull.
-        // TODO implement logic for value list fieldDateListNull.
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldStringListNotNull(), json, "fieldStringListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldStringListNull(), json, "fieldStringListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBinaryListNotNull(), json, "fieldBinaryListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBinaryListNull(), json, "fieldBinaryListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBooleanListNotNull(), json, "fieldBooleanListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBooleanListNull(), json, "fieldBooleanListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldLongListNotNull(), json, "fieldLongListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldLongListNull(), json, "fieldLongListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldIntegerListNotNull(), json, "fieldIntegerListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldIntegerListNull(), json, "fieldIntegerListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldShortListNotNull(), json, "fieldShortListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldShortListNull(), json, "fieldShortListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldByteListNotNull(), json, "fieldByteListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldByteListNull(), json, "fieldByteListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDoubleListNotNull(), json, "fieldDoubleListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDoubleListNull(), json, "fieldDoubleListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldFloatListNotNull(), json, "fieldFloatListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldFloatListNull(), json, "fieldFloatListNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDateListNotNull(), json, "fieldDateListNotNull");
+        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDateListNull(), json, "fieldDateListNull");
         return obj;
     }
 
@@ -2177,45 +2177,45 @@ public static String getSimpleClassName() {
                     objProxy.realmSet$fieldObjectNull(fieldObjectNullObj);
                 }
             } else if (name.equals("fieldStringListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldStringListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.String.class, reader));
             } else if (name.equals("fieldStringListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldStringListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.String.class, reader));
             } else if (name.equals("fieldBinaryListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldBinaryListNotNull(ProxyUtils.createRealmListWithJsonStream(byte[].class, reader));
             } else if (name.equals("fieldBinaryListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldBinaryListNull(ProxyUtils.createRealmListWithJsonStream(byte[].class, reader));
             } else if (name.equals("fieldBooleanListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldBooleanListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Boolean.class, reader));
             } else if (name.equals("fieldBooleanListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldBooleanListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Boolean.class, reader));
             } else if (name.equals("fieldLongListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldLongListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Long.class, reader));
             } else if (name.equals("fieldLongListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldLongListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Long.class, reader));
             } else if (name.equals("fieldIntegerListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldIntegerListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Integer.class, reader));
             } else if (name.equals("fieldIntegerListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldIntegerListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Integer.class, reader));
             } else if (name.equals("fieldShortListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldShortListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Short.class, reader));
             } else if (name.equals("fieldShortListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldShortListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Short.class, reader));
             } else if (name.equals("fieldByteListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldByteListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Byte.class, reader));
             } else if (name.equals("fieldByteListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldByteListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Byte.class, reader));
             } else if (name.equals("fieldDoubleListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldDoubleListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Double.class, reader));
             } else if (name.equals("fieldDoubleListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldDoubleListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Double.class, reader));
             } else if (name.equals("fieldFloatListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldFloatListNotNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Float.class, reader));
             } else if (name.equals("fieldFloatListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldFloatListNull(ProxyUtils.createRealmListWithJsonStream(java.lang.Float.class, reader));
             } else if (name.equals("fieldDateListNotNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldDateListNotNull(ProxyUtils.createRealmListWithJsonStream(java.util.Date.class, reader));
             } else if (name.equals("fieldDateListNull")) {
-                // TODO implement logic for value list.
+                objProxy.realmSet$fieldDateListNull(ProxyUtils.createRealmListWithJsonStream(java.util.Date.class, reader));
             } else {
                 reader.skipValue();
             }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index 4d882b466a..4473a97537 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -5,6 +5,7 @@
 import android.os.Build;
 import android.util.JsonReader;
 import android.util.JsonToken;
+import io.realm.ProxyUtils;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.OsList;
@@ -12,7 +13,6 @@
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
 import io.realm.internal.Property;
-import io.realm.internal.ProxyUtils;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.Table;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
index c5ea5c07a1..d1edfba2a0 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
@@ -43,6 +43,8 @@
 import java.util.GregorianCalendar;
 import java.util.TimeZone;
 
+import javax.annotation.Nullable;
+
 import io.realm.entities.AllTypes;
 import io.realm.entities.AllTypesPrimaryKey;
 import io.realm.entities.AnnotationTypes;
@@ -51,6 +53,7 @@
 import io.realm.entities.NoPrimaryKeyNullTypes;
 import io.realm.entities.NullTypes;
 import io.realm.entities.OwnerPrimaryKey;
+import io.realm.entities.PrimitiveListTypes;
 import io.realm.entities.RandomPrimaryKey;
 import io.realm.exceptions.RealmException;
 import io.realm.internal.Util;
@@ -60,6 +63,7 @@
 import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -401,7 +405,15 @@ public void createFromJson_respectDefaultValues() throws JSONException {
         assertEquals(DefaultValueOfField.FIELD_DOUBLE_DEFAULT_VALUE, managedObj.getFieldDouble(), 0d);
         assertEquals(DefaultValueOfField.FIELD_BOOLEAN_DEFAULT_VALUE, managedObj.isFieldBoolean());
         assertEquals(DefaultValueOfField.FIELD_DATE_DEFAULT_VALUE, managedObj.getFieldDate());
-        assertTrue(Arrays.equals(DefaultValueOfField.FIELD_BINARY_DEFAULT_VALUE, managedObj.getFieldBinary()));
+        assertArrayEquals(DefaultValueOfField.FIELD_BINARY_DEFAULT_VALUE, managedObj.getFieldBinary());
+        assertArrayEquals(DefaultValueOfField.FIELD_BYTE_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldByteList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_SHORT_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldShortList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_INTEGER_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldIntegerList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_LONG_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldLongList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_BOOLEAN_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldBooleanList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_BINARY_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldBinaryList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_STRING_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldStringList().toArray());
+        assertArrayEquals(DefaultValueOfField.FIELD_DATE_LIST_DEFAULT_VALUE.toArray(), managedObj.getFieldDateList().toArray());
         assertEquals(RandomPrimaryKey.FIELD_INT_DEFAULT_VALUE, managedObj.getFieldObject().getFieldInt());
         assertEquals(1, managedObj.getFieldList().size());
         assertEquals(RandomPrimaryKey.FIELD_INT_DEFAULT_VALUE, managedObj.getFieldList().first().getFieldInt());
@@ -1709,4 +1721,121 @@ public void createObjectFromJson_objectWithPrimaryKeySetValueDirectlyFromStream(
         assertEquals(1, owners.get(1).getId());
         assertEquals("bar", owners.get(1).getName());
     }
+
+    private void testPrimitiveListWithValues(String fieldName, Object[] values) throws JSONException, IOException {
+        testPrimitiveListWithValues(fieldName, values, values);
+    }
+
+    private void testPrimitiveListWithValues(String fieldName, @Nullable Object[] valuesToSave, Object[] valuesToLoad)
+            throws JSONException, IOException {
+        JSONObject jsonObject = new JSONObject();
+        JSONArray jsonArray = valuesToSave != null ? new JSONArray(valuesToSave) : null;
+        jsonObject.put(fieldName, jsonArray);
+
+        // Test from JSONObject
+        realm.beginTransaction();
+        PrimitiveListTypes primitiveListTypes = realm.createObjectFromJson(PrimitiveListTypes.class, jsonObject);
+        realm.commitTransaction();
+        assertNotNull(primitiveListTypes);
+        assertArrayEquals(valuesToLoad, primitiveListTypes.getList(fieldName).toArray());
+
+        // Test from JSONStream
+        realm.beginTransaction();
+        primitiveListTypes = realm.createObjectFromJson(PrimitiveListTypes.class, convertJsonObjectToStream(jsonObject));
+        realm.commitTransaction();
+        assertNotNull(primitiveListTypes);
+        assertArrayEquals(valuesToLoad, primitiveListTypes.getList(fieldName).toArray());
+    }
+
+    @Test
+    public void createObjectFromJson_primitiveList_mixedValues() throws JSONException, IOException {
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_STRING_LIST, new String[] {"a", null, "bc"});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_BOOLEAN_LIST, new Boolean[] {true, null, false});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_DOUBLE_LIST, new Double[] {1.0d, null, 2.0d});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_FLOAT_LIST, new Float[] {1.0f, null, 2.0f});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_BYTE_LIST, new Byte[] {1, null, 2});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_SHORT_LIST, new Short[] {1, null, 2});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_INT_LIST, new Integer[] {1, null, 2});
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_LONG_LIST, new Long[] {1L, null, 2L});
+
+        // Date as integer
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_DATE_LIST,
+                new Integer[] {0, null, 1},
+                new Date[] {new Date(0), null, new Date(1)});
+        // Date as String
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_DATE_LIST,
+                new String [] {"/Date(1000)/", null, "/Date(2000)/"},
+                new Date[] {new Date(1000), null, new Date(2000)});
+        // Date as String timezone
+        // Oct 03 2015 14:45.33
+        Calendar cal = GregorianCalendar.getInstance();
+        cal.setTimeZone(TimeZone.getTimeZone("Australia/West"));
+        cal.set(2015, Calendar.OCTOBER, 3, 14, 45, 33);
+        cal.set(Calendar.MILLISECOND, 376);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_DATE_LIST,
+                new String [] {"/Date(1443854733376+0800)/", null},
+                new Date[] {cal.getTime(), null});
+
+
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_BINARY_LIST,
+                new String[] {new String(Base64.encode(new byte[] {1, 2, 3}, Base64.DEFAULT), UTF_8),
+                        null, new String(Base64.encode(new byte[] {4, 5, 6}, Base64.DEFAULT), UTF_8)},
+                new byte[][] {new byte[]{1, 2, 3}, null, new byte[]{4, 5, 6}});
+    }
+
+    // Null list will be saved as empty list since We don't support nullable RealmList
+    @Test
+    public void createObjectFromJson_primitiveList_nullList() throws IOException, JSONException {
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_STRING_LIST, null, new String[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_BOOLEAN_LIST, null, new Boolean[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_DOUBLE_LIST, null, new Double[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_FLOAT_LIST, null, new Float[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_BYTE_LIST, null, new Byte[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_SHORT_LIST, null, new Short[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_INT_LIST, null, new Integer[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_LONG_LIST, null, new Long[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_DATE_LIST, null, new Date[0]);
+        testPrimitiveListWithValues(PrimitiveListTypes.FIELD_BYTE_LIST, null, new byte[0][]);
+    }
+
+    private void testRequiredPrimitiveListWithNullValue(String fieldName) throws JSONException, IOException {
+        JSONObject jsonObject = new JSONObject();
+        JSONArray jsonArray =new JSONArray();
+        jsonArray.put(null);
+        jsonObject.put(fieldName, jsonArray);
+
+        // Test from JSONObject
+        realm.beginTransaction();
+        try {
+            realm.createObjectFromJson(PrimitiveListTypes.class, jsonObject);
+            fail();
+        } catch (IllegalArgumentException ignored) {
+        } finally {
+            realm.cancelTransaction();
+        }
+
+        // Test from JSONStream
+        realm.beginTransaction();
+        try {
+            realm.createObjectFromJson(PrimitiveListTypes.class, convertJsonObjectToStream(jsonObject));
+            fail();
+        } catch (IllegalArgumentException ignored) {
+        } finally {
+            realm.cancelTransaction();
+        }
+    }
+
+    @Test
+    public void createObjectFromJson_primitiveList_nullValueForRequiredField() throws IOException, JSONException {
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_STRING_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_BOOLEAN_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_DOUBLE_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_FLOAT_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_BYTE_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_SHORT_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_INT_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_LONG_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_DATE_LIST);
+        testRequiredPrimitiveListWithNullValue(PrimitiveListTypes.FIELD_REQUIRED_BYTE_LIST);
+    }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimitiveListTypes.java b/realm/realm-library/src/androidTest/java/io/realm/entities/PrimitiveListTypes.java
new file mode 100644
index 0000000000..9e80a1b946
--- /dev/null
+++ b/realm/realm-library/src/androidTest/java/io/realm/entities/PrimitiveListTypes.java
@@ -0,0 +1,145 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.entities;
+
+import java.util.Date;
+
+import io.realm.RealmList;
+import io.realm.RealmObject;
+import io.realm.annotations.Required;
+
+public class PrimitiveListTypes extends RealmObject {
+    public static final String FIELD_STRING_LIST = "stringList";
+    public static final String FIELD_BINARY_LIST = "binaryList";
+    public static final String FIELD_BOOLEAN_LIST = "booleanList";
+    public static final String FIELD_DOUBLE_LIST = "doubleList";
+    public static final String FIELD_FLOAT_LIST = "floatList";
+    public static final String FIELD_DATE_LIST = "dateList";
+    public static final String FIELD_BYTE_LIST = "byteList";
+    public static final String FIELD_SHORT_LIST = "shortList";
+    public static final String FIELD_INT_LIST = "intList";
+    public static final String FIELD_LONG_LIST = "longList";
+    public static final String FIELD_REQUIRED_STRING_LIST = "requiredStringList";
+    public static final String FIELD_REQUIRED_BINARY_LIST = "requiredBinaryList";
+    public static final String FIELD_REQUIRED_BOOLEAN_LIST = "requiredBooleanList";
+    public static final String FIELD_REQUIRED_DOUBLE_LIST = "requiredDoubleList";
+    public static final String FIELD_REQUIRED_FLOAT_LIST = "requiredFloatList";
+    public static final String FIELD_REQUIRED_DATE_LIST = "requiredDateList";
+    public static final String FIELD_REQUIRED_BYTE_LIST = "requiredByteList";
+    public static final String FIELD_REQUIRED_SHORT_LIST = "requiredShortList";
+    public static final String FIELD_REQUIRED_INT_LIST = "requiredIntList";
+    public static final String FIELD_REQUIRED_LONG_LIST = "requiredLongList";
+
+    @SuppressWarnings("unused")
+    private RealmList<String> stringList;
+    @SuppressWarnings("unused")
+    private RealmList<byte[]> binaryList;
+    @SuppressWarnings("unused")
+    private RealmList<Boolean> booleanList;
+    @SuppressWarnings("unused")
+    private RealmList<Double> doubleList;
+    @SuppressWarnings("unused")
+    private RealmList<Float> floatList;
+    @SuppressWarnings("unused")
+    private RealmList<Date> dateList;
+    @SuppressWarnings("unused")
+    private RealmList<Byte> byteList;
+    @SuppressWarnings("unused")
+    private RealmList<Short> shortList;
+    @SuppressWarnings("unused")
+    private RealmList<Integer> intList;
+    @SuppressWarnings("unused")
+    private RealmList<Long> longList;
+
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<String> requiredStringList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<byte[]> requiredBinaryList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Boolean> requiredBooleanList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Double> requiredDoubleList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Float> requiredFloatList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Date> requiredDateList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Byte> requiredByteList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Short> requiredShortList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Integer> requiredIntList;
+    @SuppressWarnings("unused")
+    @Required
+    private RealmList<Long> requiredLongList;
+
+    public RealmList getList(String fieldName) {
+        switch (fieldName) {
+            case FIELD_STRING_LIST:
+                return stringList;
+            case FIELD_BINARY_LIST:
+                return binaryList;
+            case FIELD_BOOLEAN_LIST:
+                return booleanList;
+            case FIELD_DOUBLE_LIST:
+                return doubleList;
+            case FIELD_FLOAT_LIST:
+                return floatList;
+            case FIELD_DATE_LIST:
+                return dateList;
+            case FIELD_BYTE_LIST:
+                return byteList;
+            case FIELD_SHORT_LIST:
+                return shortList;
+            case FIELD_INT_LIST:
+                return intList;
+            case FIELD_LONG_LIST:
+                return longList;
+            case FIELD_REQUIRED_STRING_LIST:
+                return requiredStringList;
+            case FIELD_REQUIRED_BINARY_LIST:
+                return requiredBinaryList;
+            case FIELD_REQUIRED_BOOLEAN_LIST:
+                return requiredBooleanList;
+            case FIELD_REQUIRED_DOUBLE_LIST:
+                return requiredDoubleList;
+            case FIELD_REQUIRED_FLOAT_LIST:
+                return requiredFloatList;
+            case FIELD_REQUIRED_DATE_LIST:
+                return requiredDateList;
+            case FIELD_REQUIRED_BYTE_LIST:
+                return requiredByteList;
+            case FIELD_REQUIRED_SHORT_LIST:
+                return requiredShortList;
+            case FIELD_REQUIRED_INT_LIST:
+                return requiredIntList;
+            case FIELD_REQUIRED_LONG_LIST:
+                return requiredLongList;
+            default:
+                throw new IllegalArgumentException("Unknown field name: '" + fieldName + "'.");
+        }
+    }
+}
diff --git a/realm/realm-library/src/main/java/io/realm/ProxyUtils.java b/realm/realm-library/src/main/java/io/realm/ProxyUtils.java
new file mode 100644
index 0000000000..e4d4c3648b
--- /dev/null
+++ b/realm/realm-library/src/main/java/io/realm/ProxyUtils.java
@@ -0,0 +1,257 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm;
+
+import android.annotation.TargetApi;
+import android.os.Build;
+import android.util.JsonReader;
+import android.util.JsonToken;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.util.Date;
+import java.util.Locale;
+
+import javax.annotation.Nullable;
+
+import io.realm.internal.OsList;
+import io.realm.internal.android.JsonUtils;
+
+class ProxyUtils {
+
+    /**
+     * Called by proxy to set the managed {@link RealmList} according to the given {@link JSONObject}.
+     *
+     * @param realmList the managed {@link RealmList}.
+     * @param jsonObject the {@link JSONObject} which may contain the data of the list to be set.
+     * @param fieldName the field name of the {@link RealmList}.
+     * @param <E> type of the {@link RealmList}.
+     * @throws JSONException if it fails to parse JSON.
+     */
+    static <E> void setRealmListWithJsonObject(
+            RealmList<E> realmList, JSONObject jsonObject, String fieldName) throws JSONException {
+        if (!jsonObject.has(fieldName))  {
+            return;
+        }
+
+        OsList osList = realmList.getOsList();
+        if (jsonObject.isNull(fieldName)) {
+            osList.removeAll();
+            return;
+        }
+
+        JSONArray jsonArray = jsonObject.getJSONArray(fieldName);
+        osList.removeAll();
+        int arraySize = jsonArray.length();
+
+        if (realmList.clazz == Boolean.class) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                    osList.addNull();
+                } else {
+                    osList.addBoolean(jsonArray.getBoolean(i));
+                }
+            }
+        } else if (realmList.clazz == Float.class) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                    osList.addNull();
+                } else {
+                    osList.addFloat((float) jsonArray.getDouble(i));
+                }
+            }
+        } else if (realmList.clazz == Double.class) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                    osList.addNull();
+                } else {
+                    osList.addDouble(jsonArray.getDouble(i));
+                }
+            }
+        } else if (realmList.clazz == String.class) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                    osList.addNull();
+                } else {
+                    osList.addString(jsonArray.getString(i));
+                }
+            }
+        } else if (realmList.clazz == byte[].class) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                    osList.addNull();
+                } else {
+                    osList.addBinary(JsonUtils.stringToBytes(jsonArray.getString(i)));
+                }
+            }
+        } else if (realmList.clazz == Date.class ) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                   osList.addNull();
+                   continue;
+                }
+
+                Object timestamp = jsonArray.get(i);
+                if (timestamp instanceof String) {
+                    osList.addDate(JsonUtils.stringToDate((String) timestamp));
+                } else {
+                    osList.addDate(new Date(jsonArray.getLong(i)));
+                }
+            }
+        } else if (realmList.clazz == Long.class || realmList.clazz == Integer.class ||
+                realmList.clazz == Short.class || realmList.clazz == Byte.class) {
+            for (int i = 0; i < arraySize; i++) {
+                if (jsonArray.isNull(i)) {
+                    osList.addNull();
+                } else {
+                    osList.addLong(jsonArray.getLong(i));
+                }
+            }
+        } else {
+            throwWrongElementType(realmList.clazz);
+        }
+    }
+
+    /**
+     * Called by proxy to create a unmanaged {@link RealmList} according to the given {@link JsonReader}.
+     *
+     * @param elementClass the type of the {@link RealmList}.
+     * @param jsonReader the JSON stream to be parsed which may contain the data of the list to be set.
+     * @param <E> type of the {@link RealmList}.
+     * @throws IOException if it fails to parse JSON stream.
+     */
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    static <E> RealmList<E> createRealmListWithJsonStream(Class<E> elementClass, JsonReader jsonReader) throws IOException {
+
+        if (jsonReader.peek() == null) {
+            jsonReader.skipValue();
+            return null;
+        }
+
+        jsonReader.beginArray();
+        RealmList realmList = new RealmList<E>();
+
+        if (elementClass == Boolean.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add(jsonReader.nextBoolean());
+                }
+            }
+        } else if (elementClass == Float.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add((float) jsonReader.nextDouble());
+                }
+            }
+        } else if (elementClass == Double.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add(jsonReader.nextDouble());
+                }
+            }
+        } else if (elementClass == String.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add(jsonReader.nextString());
+                }
+            }
+        } else if (elementClass == byte[].class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add(JsonUtils.stringToBytes(jsonReader.nextString()));
+                }
+            }
+        } else if (elementClass == Date.class) {
+            while (jsonReader.hasNext()) {
+                JsonToken token = jsonReader.peek();
+                if (token == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else if (token == JsonToken.NUMBER) {
+                    realmList.add(new Date(jsonReader.nextLong()));
+                } else {
+                    realmList.add(JsonUtils.stringToDate(jsonReader.nextString()));
+                }
+            }
+        } else if (elementClass == Long.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add(jsonReader.nextLong());
+                }
+            }
+        } else if (elementClass == Integer.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add((int)jsonReader.nextLong());
+                }
+            }
+        } else if (elementClass == Short.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add((short)jsonReader.nextLong());
+                }
+            }
+        } else if (elementClass == Byte.class) {
+            while (jsonReader.hasNext()) {
+                if (jsonReader.peek() == JsonToken.NULL) {
+                    jsonReader.skipValue();
+                    realmList.add(null);
+                } else {
+                    realmList.add((byte)jsonReader.nextLong());
+                }
+            }
+        } else {
+            throwWrongElementType(elementClass);
+        }
+
+        jsonReader.endArray();
+
+        return realmList;
+    }
+
+    private static void throwWrongElementType(@Nullable  Class clazz) {
+        throw new IllegalArgumentException(String.format(Locale.ENGLISH, "Element type '%s' is not handled.",
+                clazz));
+    }
+
+}
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java b/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java
deleted file mode 100644
index 6ea3d1c706..0000000000
--- a/realm/realm-library/src/main/java/io/realm/internal/ProxyUtils.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright 2017 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.realm.internal;
-
-import java.util.Map;
-
-import io.realm.RealmFieldType;
-import io.realm.exceptions.RealmMigrationNeededException;
-
-public class ProxyUtils {
-
-    public static void verifyField(OsSharedRealm sharedRealm, Map<String, RealmFieldType> columnTypes, String fieldName, RealmFieldType fieldType, String fieldSimpleType) {
-        if (!columnTypes.containsKey(fieldName)) {
-            throw new RealmMigrationNeededException(
-                    sharedRealm.getPath(),
-                    String.format("Missing field '%s' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().", fieldName));
-        }
-        if (columnTypes.get(fieldName) != fieldType) {
-            throw new RealmMigrationNeededException(
-                    sharedRealm.getPath(),
-                    String.format("Invalid type '%s' for field '%s' in existing Realm file.", fieldSimpleType, fieldName));
-        }
-    }
-}
