diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1e3f8e1102..8f216d07c6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,7 @@
 ### Breaking Changes
 
 * An `IllegalStateException` will be thrown if the given `RealmModule` doesn't include all required model classes (#3398).
+* Removed `io.realm.internal.OutOfMemoryError`. `java.lang.OutOfMemoryError` will be thrown instead.
 
 ### Deprecated
 
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index f1e2dfedde..9ee2ba5d0e 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -183,6 +183,9 @@ dependencies {
     androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
     androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
     androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
+
+    // specify error prone version to prevent sudden failure
+    errorprone 'com.google.errorprone:error_prone_core:2.0.21'
 }
 
 task sourcesJar(type: Jar) {
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_TestUtil.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_TestUtil.cpp
index 6eab915b78..7b7fcb5198 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_TestUtil.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_TestUtil.cpp
@@ -45,7 +45,7 @@ static jstring throwOrGetExpectedMessage(JNIEnv* env, jlong testcase, bool shoul
                 ThrowException(env, UnsupportedOperation, "parm1", "parm2");
             break;
         case OutOfMemory:
-            expect = "io.realm.internal.OutOfMemoryError: parm1 parm2";
+            expect = "java.lang.OutOfMemoryError: parm1 parm2";
             if (should_throw)
                 ThrowException(env, OutOfMemory, "parm1", "parm2");
             break;
diff --git a/realm/realm-library/src/main/cpp/java_exception_def.cpp b/realm/realm-library/src/main/cpp/java_exception_def.cpp
index 81246e4483..75819d603b 100644
--- a/realm/realm-library/src/main/cpp/java_exception_def.cpp
+++ b/realm/realm-library/src/main/cpp/java_exception_def.cpp
@@ -20,3 +20,4 @@ using namespace realm::_impl;
 
 const char* JavaExceptionDef::IllegalState = "java/lang/IllegalStateException";
 const char* JavaExceptionDef::IllegalArgument = "java/lang/IllegalArgumentException";
+const char* JavaExceptionDef::OutOfMemory = "java/lang/OutOfMemoryError";
diff --git a/realm/realm-library/src/main/cpp/java_exception_def.hpp b/realm/realm-library/src/main/cpp/java_exception_def.hpp
index 9842d185f4..6ff17ebe36 100644
--- a/realm/realm-library/src/main/cpp/java_exception_def.hpp
+++ b/realm/realm-library/src/main/cpp/java_exception_def.hpp
@@ -26,6 +26,7 @@ class JavaExceptionDef {
     // Class names
     static const char* IllegalState;
     static const char* IllegalArgument;
+    static const char* OutOfMemory;
 };
 
 } // namespace realm
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index 41ab64d1c8..0ddeaaf2b1 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -27,6 +27,7 @@
 #include "io_realm_internal_SharedRealm.h"
 #include "shared_realm.hpp"
 #include "results.hpp"
+#include "java_exception_def.hpp"
 
 #include "jni_util/java_exception_thrower.hpp"
 
@@ -34,6 +35,7 @@ using namespace std;
 using namespace realm;
 using namespace realm::util;
 using namespace realm::jni_util;
+using namespace realm::_impl;
 
 // Caching classes and constructors for boxed types.
 jclass java_lang_long;
@@ -158,7 +160,7 @@ void ThrowException(JNIEnv* env, ExceptionKind exception, const std::string& cla
             break;
 
         case OutOfMemory:
-            jExceptionClass = env->FindClass("io/realm/internal/OutOfMemoryError");
+            jExceptionClass = env->FindClass(JavaExceptionDef::OutOfMemory);
             message = classStr + " " + itemStr;
             break;
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java b/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java
deleted file mode 100644
index f74c99e86f..0000000000
--- a/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.internal;
-
-
-/**
- * Can be thrown when Realm runs out of memory.
- * A JVM that catches this will be able to cleanup, e.g. release other resources to avoid also running out of memory.
- */
-@SuppressWarnings({"serial", "JavaLangClash"})
-@Keep
-public class OutOfMemoryError extends Error {
-
-    public OutOfMemoryError() {
-        super();
-    }
-
-    public OutOfMemoryError(String message) {
-        super(message);
-    }
-
-    public OutOfMemoryError(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public OutOfMemoryError(Throwable cause) {
-        super(cause);
-    }
-}
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
index cca7e44aec..42bd324388 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
@@ -38,11 +38,9 @@
 import io.realm.objectserver.utils.Constants;
 import io.realm.objectserver.utils.RemoteIntegrationTestService;
 import io.realm.objectserver.utils.UserFactory;
-import io.realm.rule.RunInLooperThread;
 import io.realm.rule.RunTestInLooperThread;
 import io.realm.rule.RunTestWithRemoteService;
 import io.realm.rule.RunWithRemoteService;
-import io.realm.rule.TestSyncConfigurationFactory;
 import io.realm.services.RemoteTestService;
 
 import static org.junit.Assert.assertEquals;
@@ -111,7 +109,9 @@ public void expectSimpleCommit() {
 
         final SyncUser user = UserFactory.getInstance().createDefaultUser(Constants.AUTH_URL);
         String realmUrl = Constants.SYNC_SERVER_URL;
-        final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, realmUrl).build();
+        final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user,realmUrl)
+                .directory(looperThread.getRoot())
+                .build();
         final Realm realm = Realm.getInstance(syncConfig);
         final RealmResults<ProcessInfo> all = realm.where(ProcessInfo.class).findAll();
         looperThread.keepStrongReference(all);
@@ -187,7 +187,9 @@ public void expectALot() throws Throwable {
 
         final SyncUser user = UserFactory.getInstance().createDefaultUser(Constants.AUTH_URL);
         String realmUrl = Constants.SYNC_SERVER_URL;
-        final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, realmUrl).build();
+        final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user,realmUrl)
+                .directory(looperThread.getRoot())
+                .build();
         final Realm realm = Realm.getInstance(syncConfig);
         final RealmResults<TestObject> all = realm.where(TestObject.class).findAllSorted("intProp");
         looperThread.keepStrongReference(all);
