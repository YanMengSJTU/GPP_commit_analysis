diff --git a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
index b223597f85..6b7f3c73a1 100644
--- a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
+++ b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
@@ -32,7 +32,7 @@ import java.util.*
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<String?>,
+                                         value: Array<out String?>,
                                          casing: Case = Case.SENSITIVE): RealmQuery<T> {
     return this.`in`(propertyName, value, casing)
 }
@@ -48,7 +48,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Byte?>): RealmQuery<T> {
+                                         value: Array<out Byte?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -62,7 +62,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Short?>): RealmQuery<T> {
+                                         value: Array<out Short?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -76,7 +76,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * or empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Int?>): RealmQuery<T> {
+                                         value: Array<out Int?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -90,7 +90,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Long?>): RealmQuery<T> {
+                                         value: Array<out Long?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -104,7 +104,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Double?>): RealmQuery<T> {
+                                         value: Array<out Double?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -119,7 +119,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Float?>): RealmQuery<T> {
+                                         value: Array<out Float?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -134,7 +134,7 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * or empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Boolean?>): RealmQuery<T> {
+                                         value: Array<out Boolean?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
 
@@ -148,147 +148,6 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
  * empty.
  */
 fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Date?>): RealmQuery<T> {
+                                         value: Array<out Date?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @param casing how casing is handled. [Case.INSENSITIVE] works only for the Latin-1 characters.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a String field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<String>,
-                                         casing: Case = Case.SENSITIVE): RealmQuery<T> {
-    return this.`in`(propertyName, value, casing)
-}
-
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Byte field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Byte>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Short field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Short>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Integer field or `values` is `null`
- * or empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Int>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Long field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Long>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Double field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Double>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Float field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Float>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Boolean field or `values` is `null`
- * or empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Boolean>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
-/**
- * In comparison. This allows you to test if objects match any value in an array of values.
- *
- * @param fieldName the field to compare.
- * @param values array of values to compare with and it cannot be null or empty.
- * @return the query object.
- * @throws java.lang.IllegalArgumentException if the field isn't a Date field or `values` is `null` or
- * empty.
- */
-@JvmName("nonNullOneOf")
-fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
-                                         value: Array<Date>): RealmQuery<T> {
-    return this.`in`(propertyName, value)
-}
-
