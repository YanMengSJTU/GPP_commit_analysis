diff --git a/CHANGELOG.md b/CHANGELOG.md
index b2d8cfe396..7cc16f18cf 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -11,6 +11,7 @@
 
 * Assigning a managed object's own list to itself would accidentally clear it (#5395).
 * Don't try to acquire `ApplicationContext` if not available in `Realm.init(Context)` (#5389).
+* Removing and re-adding a changelistener from inside a changelistener sometimes caused notifications to be missed (#5411).
 
 ## Internal
 
diff --git a/dependencies.list b/dependencies.list
index 9f4ab3db86..d997db1ea9 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -5,4 +5,5 @@ REALM_SYNC_SHA256=2d3661cdb94d6509b4a43d6daab17c9223fbb1e6608e317205bd61b4ef1b95
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
-REALM_OBJECT_SERVER_DE_VERSION=2.0.0-rc.4
+REALM_OBJECT_SERVER_DE_VERSION=2.0.0-rc.5
+
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index 8a387856db..b416d9ac98 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit 8a387856db0beb6a95e385546d1752188aff14a6
+Subproject commit b416d9ac9893aa1b36f0a4c0c2d6533e78fe5060
diff --git a/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java b/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
index e05ff917a8..dff2d1f602 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
@@ -23,6 +23,7 @@
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Deque;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
@@ -198,6 +199,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                 .errorHandler(new SyncSession.ErrorHandler() {
                     @Override
                     public void onError(SyncSession session, ObjectServerError error) {
+                        RealmLog.error("Error in __permission:\n" + error.toString());
                         synchronized (errorLock) {
                             permissionRealmError = error;
                         }
@@ -588,9 +590,11 @@ public void run() {
                 loadingPermissions.addChangeListener(new RealmChangeListener <RealmResults<Permission>>() {
                     @Override
                     public void onChange(RealmResults <Permission> loadedPermissions) {
-                        // FIXME Wait until both the __permission and __management Realm are available
-                        if (loadedPermissions.size() > 0) {
+                        RealmLog.error(String.format("1stCallback: Size: %s, Permissions: %s", loadedPermissions.size(), Arrays.toString(loadedPermissions.toArray())));
+                        // Don't report ready until both __permission and __management Realm are there
+                        if (loadedPermissions.size() > 1) {
                             loadingPermissions.removeChangeListener(this);
+                            loadingPermissions = null;
                             if (checkAndReportInvalidState()) { return; }
                             if (userPermissions == null) {
                                 userPermissions = loadedPermissions;
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
index 070f9fa348..770ae872c4 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
@@ -106,9 +106,8 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/437")
     public void getPermissions_updatedWithNewRealms() {
-        PermissionManager pm = user.getPermissionManager();
+        final PermissionManager pm = user.getPermissionManager();
         looperThread.closeAfterTest(pm);
         pm.getPermissions(new PermissionManager.PermissionsCallback() {
             @Override
@@ -132,6 +131,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                 permissions.addChangeListener(new RealmChangeListener<RealmResults<Permission>>() {
                     @Override
                     public void onChange(RealmResults<Permission> permissions) {
+                        RealmLog.error(String.format("2ndCallback: Size: %s, Permissions: %s", permissions.size(), Arrays.toString(permissions.toArray())));
                         Permission p = permissions.where().endsWith("path", "tests2").findFirst();
                         if (p != null) {
                             assertTrue(p.mayRead());
@@ -152,8 +152,8 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/437")
     public void getPermissions_updatedWithNewRealms_stressTest() {
+        final int TEST_SIZE = 10;
         final PermissionManager pm = user.getPermissionManager();
         looperThread.closeAfterTest(pm);
         pm.getPermissions(new PermissionManager.PermissionsCallback() {
@@ -162,8 +162,8 @@ public void onSuccess(RealmResults<Permission> permissions) {
                 assertTrue(permissions.isLoaded());
                 assertInitialPermissions(permissions);
 
-                for (int i = 0; i < 10; i++) {
-                    SyncConfiguration configNew = new SyncConfiguration.Builder(user, "realm://127.0.0.1:9080/~/test" + i).build();
+                for (int i = 0; i < TEST_SIZE; i++) {
+                    SyncConfiguration configNew = new SyncConfiguration.Builder(user, "realm://" + Constants.HOST + "/~/test" + i).build();
                     Realm newRealm = Realm.getInstance(configNew);
                     looperThread.closeAfterTest(newRealm);
                 }
@@ -173,8 +173,8 @@ public void onSuccess(RealmResults<Permission> permissions) {
                 permissions.addChangeListener(new RealmChangeListener<RealmResults<Permission>>() {
                     @Override
                     public void onChange(RealmResults<Permission> permissions) {
-                        RealmLog.error(Arrays.toString(permissions.toArray()));  // FIXME Debug output for CI. Remove before release.
-                        Permission p = permissions.where().endsWith("path", "test9").findFirst();
+                        RealmLog.error(String.format("Size: %s, Permissions: %s", permissions.size(), Arrays.toString(permissions.toArray())));
+                        Permission p = permissions.where().endsWith("path", "test" + (TEST_SIZE - 1)).findFirst();
                         if (p != null) {
                             assertTrue(p.mayRead());
                             assertTrue(p.mayWrite());
@@ -243,7 +243,7 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/432")
+    @Ignore("Wait for default permission Realm support")
     public void getPermissions_addTaskAfterClientReset() {
         final PermissionManager pm = user.getPermissionManager();
         looperThread.closeAfterTest(pm);
@@ -428,7 +428,7 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/432")
+    @Ignore("See https://github.com/realm/ros/issues/520")
     public void getDefaultPermissions_returnLoadedResults() {
         PermissionManager pm = user.getPermissionManager();
         looperThread.closeAfterTest(pm);
@@ -449,7 +449,7 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/432")
+    @Ignore("See https://github.com/realm/ros/issues/520")
     public void getDefaultPermissions_noLongerValidWhenPermissionManagerIsClosed() {
         final PermissionManager pm = user.getPermissionManager();
         pm.getDefaultPermissions(new PermissionManager.PermissionsCallback() {
@@ -481,6 +481,7 @@ public void getDefaultPermissions_updatedWithNewRealms() {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
+    @Ignore("See https://github.com/realm/ros/issues/520")
     public void getDefaultPermissions_closed() throws IOException {
         PermissionManager pm = user.getPermissionManager();
         pm.close();
@@ -716,7 +717,6 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/426")
     public void applyPermissions_withUsername() {
         String user1Username = TestHelper.getRandomEmail();
         String user2Username = TestHelper.getRandomEmail();
@@ -831,7 +831,6 @@ public void onError(ObjectServerError error) {
 
     @Test
     @RunTestInLooperThread(emulateMainThread = true)
-    @Ignore("See https://github.com/realm/ros/issues/430")
     public void makeOffer_noManageAccessThrows() {
         // User 2 creates a Realm
         SyncUser user2 = UserFactory.createUniqueUser();
@@ -1208,19 +1207,7 @@ public void onChange(Progress progress) {
      * states and fail if neither of these can be verified.
      */
     private void assertInitialPermissions(RealmResults<Permission> permissions) {
-        // For a new user, the PermissionManager should contain 1 entry for the __permission Realm, but we are
-        // creating the __management Realm at the same time, so this might be here as well.
-        permissions = permissions.sort("path");
-        if (permissions.size() == 1) {
-            // FIXME It is very unpredictable which Permission is returned. This needs to be fixed.
-            Permission permission = permissions.first();
-            assertTrue(permission.getPath().endsWith("__permission") || permission.getPath().endsWith("__management"));
-        } else if (permissions.size() == 2) {
-            assertTrue("Failed: " + permissions.get(0).toString(), permissions.get(0).getPath().endsWith("__management"));
-            assertTrue("Failed: " + permissions.get(1).toString(), permissions.get(1).getPath().endsWith("__permission"));
-        } else {
-            fail("Permission Realm contains unknown permissions: " + Arrays.toString(permissions.toArray()));
-        }
+        assertEquals("Could not find __permissions Realm", 1, permissions.where().endsWith("path", "__permission").count());
+        assertEquals("Could not find __management Realm", 1, permissions.where().endsWith("path", "__management").count());
     }
-
 }
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index 8f313270ed..bc3f4e6f39 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -497,7 +497,6 @@ public void singleUserCanBeLoggedInAndOutRepeatedly() {
     }
 
     @Test
-    @Ignore("See https://github.com/realm/ros/issues/360")
     public void revokedRefreshTokenIsNotSameAfterLogin() throws InterruptedException {
         final CountDownLatch userLoggedInAgain = new CountDownLatch(1);
         final String uniqueName = UUID.randomUUID().toString();
@@ -536,7 +535,6 @@ public void loggedOut(SyncUser user) {
     // WARNING: this test can fail if there's a difference between the server's and device's clock, causing the
     // refresh access token to be too far in time.
     @Test(timeout = 30000)
-    @Ignore("Resolve https://github.com/realm/ros/issues/277")
     public void preemptiveTokenRefresh() throws NoSuchFieldException, IllegalAccessException, InterruptedException {
         SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
 
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
index 0bf26e0eca..3f2e74c5ad 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
@@ -18,14 +18,13 @@
 
 public class Constants {
 
-    public static final String USER_REALM = "realm://127.0.0.1:9080/~/tests";
-    public static final String USER_REALM_2 = "realm://127.0.0.1:9080/~/tests2";
-    public static final String USER_REALM_SECURE = "realms://127.0.0.1:9443/~/tests";
-    public static final String SYNC_SERVER_URL = "realm://127.0.0.1:9080/~/tests";
-    public static final String SYNC_SERVER_URL_2 = "realm://127.0.0.1/~/tests2";
+    public static String HOST = "127.0.0.1";
+    public static final String USER_REALM = "realm://" + HOST + ":9080/~/tests";
+    public static final String USER_REALM_2 = "realm://" + HOST + ":9080/~/tests2";
+    public static final String USER_REALM_SECURE = "realms://" + HOST + ":9443/~/tests";
+    public static final String SYNC_SERVER_URL = "realm://" + HOST + ":9080/~/tests";
+    public static final String SYNC_SERVER_URL_2 = "realm://" + HOST + "/~/tests2";
 
-    public static final String AUTH_SERVER_URL = "http://127.0.0.1:9080/";
+    public static final String AUTH_SERVER_URL = "http://" + HOST + ":9080/";
     public static final String AUTH_URL = AUTH_SERVER_URL + "auth";
-
-    public static final long TEST_TIMEOUT_SECS = 300;
 }
diff --git a/tools/sync_test_server/Dockerfile b/tools/sync_test_server/Dockerfile
index e53b38b584..97cd798d1b 100644
--- a/tools/sync_test_server/Dockerfile
+++ b/tools/sync_test_server/Dockerfile
@@ -6,7 +6,7 @@ ARG ROS_DE_VERSION
 RUN npm install -g realm-object-server@$ROS_DE_VERSION -S
 
 # Install test server dependencies
-RUN npm install winston temp httpdispatcher@1.0.0
+RUN npm install winston temp httpdispatcher@1.0.0 fs-extra
 
 COPY keys/public.pem keys/private.pem keys/127_0_0_1-server.key.pem keys/127_0_0_1-chain.crt.pem configuration.yml /
 COPY ros-testing-server.js /usr/bin/
diff --git a/tools/sync_test_server/ros-testing-server.js b/tools/sync_test_server/ros-testing-server.js
index 0e46a056d8..d199e33677 100755
--- a/tools/sync_test_server/ros-testing-server.js
+++ b/tools/sync_test_server/ros-testing-server.js
@@ -6,6 +6,7 @@ const spawn = require('child_process').spawn;
 const exec = require('child_process').exec;
 var http = require('http');
 var dispatcher = require('httpdispatcher');
+var fs = require('fs-extra');
 
 // Automatically track and cleanup files at exit
 temp.track();
@@ -63,9 +64,23 @@ function startRealmObjectServer(onSuccess, onError) {
             var env = Object.create( process.env );
             winston.info(env.NODE_ENV);
             env.NODE_ENV = 'development';
+
+            // Manually cleanup Global Notifier State
+            // See https://github.com/realm/ros/issues/437#issuecomment-335380095
+            var globalNotifierDir = path + '/realm-object-server';
+            winston.info('Cleaning state in: ' + globalNotifierDir);
+            fs.removeSync(globalNotifierDir)
+            if (fs.existsSync(globalNotifierDir)) {
+                onError("Could not delete the global notifier directory: " + globalNotifierDir);
+                return;
+            }
+            fs.mkdirsSync(path + '/realm-object-server/io.realm.object-server-utility/metadata/')
+
+            // Start ROS
             syncServerChildProcess = spawn('ros',
                     ['start',
                         '--data', path,
+                        // '--loglevel', 'detail', // Enable when debugging
                         '--access-token-ttl', '20' //WARNING : Changing this value may impact the timeout of the refresh token test (AuthTests#preemptiveTokenRefresh)
                     ],
                     { env: env, cwd: path});
