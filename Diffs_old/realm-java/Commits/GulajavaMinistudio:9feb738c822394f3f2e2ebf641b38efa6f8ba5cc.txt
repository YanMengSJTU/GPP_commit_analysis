diff --git a/CHANGELOG.md b/CHANGELOG.md
index 726e42690c..8754e08d95 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,10 @@
+## 4.3.2 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* Throws a better exception message when calling `RealmObjectSchema.addField()` with a `RealmModel` class (#3388).
+
+
 ## 4.3.1 (2017-12-06)
 
 ### Bug Fixes
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
index 039e411a32..74c3b6e0cd 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java
@@ -356,6 +356,20 @@ public void run(String fieldName) {
         }
     }
 
+    @Test
+    public void addField_realmModelThrows() {
+        if (type == ObjectSchemaType.IMMUTABLE) {
+            return;
+        }
+        try {
+            schema.addField("test", Dog.class);
+            fail();
+        } catch (IllegalArgumentException e) {
+            assertThat(e.getMessage(), CoreMatchers.containsString(
+                    "Use 'addRealmObjectField()' instead to add fields that link to other RealmObjects:"));
+        }
+    }
+
     private void checkAddFieldTwice(String fieldName, FieldRunnable runnable) {
         runnable.run(fieldName);
         try {
diff --git a/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java
index 51e269bb93..8015c22c75 100644
--- a/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/MutableRealmObjectSchema.java
@@ -87,6 +87,10 @@ public RealmObjectSchema addField(String fieldName, Class<?> fieldType, FieldAtt
         if (metadata == null) {
             if (SUPPORTED_LINKED_FIELDS.containsKey(fieldType)) {
                 throw new IllegalArgumentException("Use addRealmObjectField() instead to add fields that link to other RealmObjects: " + fieldName);
+            } else if (RealmModel.class.isAssignableFrom(fieldType)) {
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        "Use 'addRealmObjectField()' instead to add fields that link to other RealmObjects: %s(%s)",
+                        fieldName, fieldType));
             } else {
                 throw new IllegalArgumentException(String.format(Locale.US,
                         "Realm doesn't support this field type: %s(%s)",
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
index 3442f1074e..338e194e51 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
@@ -136,8 +136,8 @@ public String getClassName() {
      * @param attributes set of attributes for this field.
      * @return the updated schema.
      * @throws IllegalArgumentException if the type isn't supported, field name is illegal or a field with that name
-     * @throws UnsupportedOperationException if this {@link RealmObjectSchema} is immutable.
      * already exists.
+     * @throws UnsupportedOperationException if this {@link RealmObjectSchema} is immutable.
      */
     public abstract RealmObjectSchema addField(String fieldName, Class<?> fieldType, FieldAttribute... attributes);
 
diff --git a/tools/sync_test_server/ros-testing-server.js b/tools/sync_test_server/ros-testing-server.js
index e183378084..bdf1938075 100755
--- a/tools/sync_test_server/ros-testing-server.js
+++ b/tools/sync_test_server/ros-testing-server.js
@@ -51,7 +51,9 @@ function waitForRosToInitialize(attempts, onSuccess, onError, startSequence) {
     http.get("http://0.0.0.0:9080/health", function(res) {
         if (res.statusCode != 200) {
             winston.info("ROS /health/ returned: " + res.statusCode)
-            waitForRosToInitialize(attempts - 1, onSuccess, onError, startSequence)
+            setTimeout(function() {
+                waitForRosToInitialize(attempts - 1, onSuccess, onError, startSequence);
+            }, 500);
         } else {
             onSuccess(startSequence);
         }
@@ -61,7 +63,7 @@ function waitForRosToInitialize(attempts, onSuccess, onError, startSequence) {
         // Wait a little before trying again (common startup is ~1 second).
         setTimeout(function() {
             waitForRosToInitialize(attempts - 1, onSuccess, onError, startSequence);
-        }, 200);
+        }, 500);
     });
 }
 
@@ -112,7 +114,8 @@ function doStartRealmObjectServer(onSuccess, onError) {
                 winston.info(`${data}`);
             });
 
-            waitForRosToInitialize(100, onSuccess, onError, Date.now());
+            // The interval between every health check is 0.5 second. Give the ROS 15 seconds to get fully initialized.
+            waitForRosToInitialize(30, onSuccess, onError, Date.now());
         }
     });
 }
