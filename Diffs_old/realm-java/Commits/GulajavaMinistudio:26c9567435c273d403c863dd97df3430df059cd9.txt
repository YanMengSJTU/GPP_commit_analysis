diff --git a/CHANGELOG.md b/CHANGELOG.md
index d50771c0d4..0249ad15df 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,8 +1,42 @@
-## 5.13.1(2019-08-05)
+## 5.14.1(YYYY-MM-DD)
+
+### Enhancements
+* None.
+
+### Fixed
+* `Realm.copyToRealm()` and `Realm.insertOrUpdate()` crashed on model classes if `@LinkingObjects` was used to target a field with a re-defined internal name in the parent class (e.g. by using `@RealmField`). (Issue [#6581](https://github.com/realm/realm-java/issues/6581))  
+
+### Compatibility
+* Realm Object Server: 3.21.0 or later.
+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)
+* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
+
+### Internal
+* None.
+
+
+## 5.14.0(2019-08-12)
 
 ### Deprecated
-* `SyncCredentials.nickname()` has been deprecated in favour of `SyncCredentials.usernamePassword()`.
-* `SyncCredentials.IdentityProvider.NICKNAME` has been deprecated in favour of `SyncCredentials.IdentityProvider.USERNAME_PASSWORD`.
+* [ObjectServer] `SyncCredentials.nickname()` has been deprecated in favour of `SyncCredentials.usernamePassword()`.
+* [ObjectServer] `SyncCredentials.IdentityProvider.NICKNAME` has been deprecated in favour of `SyncCredentials.IdentityProvider.USERNAME_PASSWORD`.
+
+### Enhancements
+* None.
+
+### Fixed
+* None.
+
+### Compatibility
+* Realm Object Server: 3.21.0 or later.
+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)
+* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
+
+### Internal
+* None.
+
+
+## 5.13.1(2019-08-05)
 
 ### Enhancements
 * None.
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt
index 985a6ec120..d19f6dcf60 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt
@@ -142,7 +142,10 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi
                     emitStatement("this.%1\$sIndex = addColumnDetails(\"%1\$s\", \"%2\$s\", objectSchemaInfo)", field.javaName, field.internalFieldName)
                 }
                 for (backlink in metadata.backlinkFields) {
-                    emitStatement("addBacklinkDetails(schemaInfo, \"%s\", \"%s\", \"%s\")", backlink.targetField, classCollection.getClassFromQualifiedName(backlink.sourceClass!!).internalClassName, backlink.sourceField)
+                    val sourceClass = classCollection.getClassFromQualifiedName(backlink.sourceClass!!)
+                    val internalSourceClassName = sourceClass.internalClassName
+                    val internalSourceFieldName = sourceClass.getInternalFieldName(backlink.sourceField!!)
+                    emitStatement("addBacklinkDetails(schemaInfo, \"%s\", \"%s\", \"%s\")", backlink.targetField, internalSourceClassName, internalSourceFieldName)
                 }
                 emitStatement("this.maxColumnIndexValue = objectSchemaInfo.getMaxColumnIndex()")
             endConstructor()
diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
index 2b6b8c5019..3cd48ae070 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
@@ -31,9 +31,11 @@
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.realm.entities.AllJavaTypes;
+import io.realm.entities.BacklinkWithOverridenNames;
 import io.realm.entities.BacklinksSource;
 import io.realm.entities.BacklinksTarget;
 import io.realm.exceptions.RealmException;
@@ -692,6 +694,32 @@ public void query_multipleReferencesWithDistinct() {
         assertTrue(child.getListParents().contains(parent));
     }
 
+
+    @Test
+    public void copyToRealm_modelWithRenamedTargetFields() {
+        realm.beginTransaction();
+        BacklinkWithOverridenNames obj = new BacklinkWithOverridenNames(UUID.randomUUID().toString());
+        realm.copyToRealmOrUpdate(obj);
+        realm.commitTransaction();
+        assertEquals(1, realm.where(BacklinkWithOverridenNames.class).count());
+    }
+
+    @Test
+    public void insert_modelWithRenamedTargetFields() {
+        realm.beginTransaction();
+        BacklinkWithOverridenNames obj = new BacklinkWithOverridenNames(UUID.randomUUID().toString());
+        realm.insertOrUpdate(obj);
+        realm.commitTransaction();
+        assertEquals(1, realm.where(BacklinkWithOverridenNames.class).count());
+    }
+
+    @Test
+    public void query_modelWithRenamedFields() {
+        assertEquals(0, realm.where(BacklinkWithOverridenNames.class).equalTo("child.id", "foo").count());
+        assertEquals(0, realm.where(BacklinkWithOverridenNames.class).equalTo("parents.id", "foo").count());
+    }
+
+
     // Based on a quick conversation with Christian Melchior and Mark Rowe,
     // it appears that notifications are enqueued, briefly, on a non-Java
     // thread.  That makes their delivery onto the looper thread unpredictable.
diff --git a/realm/realm-library/src/testUtils/java/io/realm/entities/BacklinkWithOverridenNames.java b/realm/realm-library/src/testUtils/java/io/realm/entities/BacklinkWithOverridenNames.java
new file mode 100644
index 0000000000..513526364d
--- /dev/null
+++ b/realm/realm-library/src/testUtils/java/io/realm/entities/BacklinkWithOverridenNames.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2019 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.entities;
+
+import io.realm.RealmObject;
+import io.realm.RealmResults;
+import io.realm.annotations.LinkingObjects;
+import io.realm.annotations.PrimaryKey;
+import io.realm.annotations.RealmClass;
+import io.realm.annotations.RealmField;
+
+@RealmClass(name = "backlink_override_name")
+public class BacklinkWithOverridenNames extends RealmObject {
+
+    @PrimaryKey
+    public String id;
+
+    @RealmField(name = "forward_link")
+    public BacklinkWithOverridenNames child;
+
+    @LinkingObjects("child")
+    public final RealmResults<BacklinkWithOverridenNames> parents = null;
+
+    public BacklinkWithOverridenNames() {
+
+    }
+
+    public BacklinkWithOverridenNames(String id) {
+        this.id = id;
+    }
+}
diff --git a/version.txt b/version.txt
index d077af9147..a4a35bfee5 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.14.0-SNAPSHOT
\ No newline at end of file
+5.14.1-SNAPSHOT
\ No newline at end of file
