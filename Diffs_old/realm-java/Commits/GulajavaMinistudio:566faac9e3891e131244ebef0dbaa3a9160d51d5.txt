diff --git a/CHANGELOG.md b/CHANGELOG.md
index d8b9721c92..8983a736d0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -15,15 +15,15 @@
 * None
 
 
-## 5.8.0 (YYYY-MM-DD)
+## 5.8.0 (2018-11-06)
 
 This release also contains all changes from 5.8.0-BETA1 and 5.8.0-BETA2.
 
 ### Enhancements
 * [ObjectServer] Added Subscription class available to Query-based Realms. This exposes a Subscription more directly. This class is in beta. [#6231](https://github.com/realm/realm-java/pull/6231).
-* [ObjectServer] Added `Realm.getSubscriptions()`, `Realm.getSubscriptions(String pattern)` and `Realm.getSubscription` to make it easier to find existing subscriptions. These API's are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)
-* [ObjectServer] Added `RealmQuery.subscribe()` and `RealmQuery.subscribe(String name)` to subscribe immediately inside a transaction. These API's are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)
-* [ObjectServer] Added support for subscribing directly inside `SyncConfiguration.initialData()`. This can be coupled with `SyncConfiguration.waitForInitialRemoteData()` in order to block a Realm from opening until the initial subscriptions are ready and have downloaded data. This API are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)
+  * [ObjectServer] Added `Realm.getSubscriptions()`, `Realm.getSubscriptions(String pattern)` and `Realm.getSubscription` to make it easier to find existing subscriptions. These API's are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)
+  * [ObjectServer] Added `RealmQuery.subscribe()` and `RealmQuery.subscribe(String name)` to subscribe immediately inside a transaction. These API's are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)
+  * [ObjectServer] Added support for subscribing directly inside `SyncConfiguration.initialData()`. This can be coupled with `SyncConfiguration.waitForInitialRemoteData()` in order to block a Realm from opening until the initial subscriptions are ready and have downloaded data. This API are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)
 * [ObjectServer] Improved performance when merging changes from the server.
 * [ObjectServer] Added support for timeouts when uploading or downloading data manually using `SyncSession.downloadAllServerChanges(long timeout, TimeUnit unit)` and `SyncSession.uploadAllLocalChanges(long timeout, TimeUnit unit)`. [#6073](https://github.com/realm/realm-java/pull/6073)
 * [ObjectServer] Added support for timing out when downloading initial data for synchronized Realms using `SyncConfiguration.waitForInitialRemoteData(long timeout, TimeUnit unit)`. [#6247](https://github.com/realm/realm-java/issues/6247)
diff --git a/Dockerfile b/Dockerfile
index 94700dcac9..ddcc4b4c7e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -52,7 +52,7 @@ RUN sdkmanager --update
 # Accept all licenses
 RUN yes y | sdkmanager --licenses
 RUN sdkmanager 'platform-tools'
-RUN sdkmanager 'build-tools;27.0.1'
+RUN sdkmanager 'build-tools;28.0.3'
 RUN sdkmanager 'extras;android;m2repository'
 RUN sdkmanager 'platforms;android-27'
 RUN sdkmanager 'cmake;3.6.4111459'
diff --git a/Jenkinsfile b/Jenkinsfile
index e65e707d01..0d12486c6b 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -59,52 +59,56 @@ try {
                   "-v ${env.HOME}/ccache:/tmp/.ccache " +
                   "-e REALM_CORE_DOWNLOAD_DIR=/tmp/.gradle " +
                   "--network container:${rosContainer.id}") {
-                stage('JVM tests') {
-                  try {
-                    withCredentials([[$class: 'FileBinding', credentialsId: 'c0cc8f9e-c3f1-4e22-b22f-6568392e26ae', variable: 'S3CFG']]) {
-                      sh "chmod +x gradlew && ./gradlew assemble check javadoc -Ps3cfg=${env.S3CFG} ${abiFilter} --stacktrace"
+
+                // Lock required around all usages of Gradle as it isn't
+                // able to share its cache between builds.
+                lock("${env.NODE_NAME}-android") {
+
+                  stage('JVM tests') {
+                    try {
+                      withCredentials([[$class: 'FileBinding', credentialsId: 'c0cc8f9e-c3f1-4e22-b22f-6568392e26ae', variable: 'S3CFG']]) {
+                        sh "chmod +x gradlew && ./gradlew assemble check javadoc -Ps3cfg=${env.S3CFG} ${abiFilter} --stacktrace"
+                      }
+                    } finally {
+                      storeJunitResults 'realm/realm-annotations-processor/build/test-results/test/TEST-*.xml'
+                      storeJunitResults 'examples/unitTestExample/build/test-results/**/TEST-*.xml'
+                      step([$class: 'LintPublisher'])
                     }
-                  } finally {
-                    storeJunitResults 'realm/realm-annotations-processor/build/test-results/test/TEST-*.xml'
-                    storeJunitResults 'examples/unitTestExample/build/test-results/**/TEST-*.xml'
-                    step([$class: 'LintPublisher'])
                   }
-                }
 
-                stage('Gradle plugin tests') {
-                  try {
-                    gradle('gradle-plugin', 'check')
-                  } finally {
-                    storeJunitResults 'gradle-plugin/build/test-results/test/TEST-*.xml'
+                  stage('Gradle plugin tests') {
+                    try {
+                      gradle('gradle-plugin', 'check')
+                    } finally {
+                      storeJunitResults 'gradle-plugin/build/test-results/test/TEST-*.xml'
+                    }
                   }
-                }
 
-                stage('Realm Transformer tests') {
-                  try {
-                    gradle('realm-transformer', 'check')
-                  } finally {
-                    storeJunitResults 'realm-transformer/build/test-results/test/TEST-*.xml'
+                  stage('Realm Transformer tests') {
+                    try {
+                      gradle('realm-transformer', 'check')
+                    } finally {
+                      storeJunitResults 'realm-transformer/build/test-results/test/TEST-*.xml'
+                    }
                   }
-                }
 
-                stage('Static code analysis') {
-                  try {
-                    gradle('realm', "findbugs pmd checkstyle ${abiFilter}")
-                  } finally {
-                    publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'realm/realm-library/build/findbugs', reportFiles: 'findbugs-output.html', reportName: 'Findbugs issues'])
-                    publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'realm/realm-library/build/reports/pmd', reportFiles: 'pmd.html', reportName: 'PMD Issues'])
-                    step([$class: 'CheckStylePublisher',
-                  canComputeNew: false,
-                  defaultEncoding: '',
-                  healthy: '',
-                  pattern: 'realm/realm-library/build/reports/checkstyle/checkstyle.xml',
-                  unHealthy: ''
-                 ])
+                  stage('Static code analysis') {
+                    try {
+                      gradle('realm', "findbugs pmd checkstyle ${abiFilter}")
+                    } finally {
+                      publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'realm/realm-library/build/findbugs', reportFiles: 'findbugs-output.html', reportName: 'Findbugs issues'])
+                      publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'realm/realm-library/build/reports/pmd', reportFiles: 'pmd.html', reportName: 'PMD Issues'])
+                      step([$class: 'CheckStylePublisher',
+                    canComputeNew: false,
+                    defaultEncoding: '',
+                    healthy: '',
+                    pattern: 'realm/realm-library/build/reports/checkstyle/checkstyle.xml',
+                    unHealthy: ''
+                   ])
+                    }
                   }
-                }
 
-                stage('Run instrumented tests') {
-                  lock("${env.NODE_NAME}-android") {
+                  stage('Run instrumented tests') {
                     String backgroundPid
                     try {
                       backgroundPid = startLogCatCollector()
@@ -116,20 +120,20 @@ try {
                       storeJunitResults 'realm/kotlin-extensions/build/outputs/androidTest-results/connected/**/TEST-*.xml'
                     }
                   }
-                }
 
-                // TODO: add support for running monkey on the example apps
+                  // TODO: add support for running monkey on the example apps
 
-                if (['master'].contains(env.BRANCH_NAME)) {
-                  stage('Collect metrics') {
-                    collectAarMetrics()
+                  if (['master'].contains(env.BRANCH_NAME)) {
+                    stage('Collect metrics') {
+                      collectAarMetrics()
+                    }
                   }
-                }
 
-                if (['master', 'next-major'].contains(env.BRANCH_NAME)) {
-                  stage('Publish to OJO') {
-                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'bintray', passwordVariable: 'BINTRAY_KEY', usernameVariable: 'BINTRAY_USER']]) {
-                      sh "chmod +x gradlew && ./gradlew -PbintrayUser=${env.BINTRAY_USER} -PbintrayKey=${env.BINTRAY_KEY} assemble ojoUpload --stacktrace"
+                  if (['master', 'next-major'].contains(env.BRANCH_NAME)) {
+                    stage('Publish to OJO') {
+                      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'bintray', passwordVariable: 'BINTRAY_KEY', usernameVariable: 'BINTRAY_USER']]) {
+                        sh "chmod +x gradlew && ./gradlew -PbintrayUser=${env.BINTRAY_USER} -PbintrayKey=${env.BINTRAY_KEY} assemble ojoUpload --stacktrace"
+                      }
                     }
                   }
                 }
@@ -228,9 +232,9 @@ def collectAarMetrics() {
     sh """set -xe
       cd realm/realm-library/build/outputs/aar
       unzip realm-android-library-${flavor}-release.aar -d unzipped${flavor}
-      find \$ANDROID_HOME -name dx | sort -r | head -n 1 > dx
-      \$(cat dx) --dex --output=temp${flavor}.dex unzipped${flavor}/classes.jar
-      cat temp${flavor}.dex | head -c 92 | tail -c 4 | hexdump -e '1/4 \"%d\"' > methods${flavor}
+      find \$ANDROID_HOME -name d8 | sort -r | head -n 1 > d8
+      \$(cat d8) --release --output ./unzipped${flavor} unzipped${flavor}/classes.jar
+      cat ./unzipped${flavor}/temp${flavor}.dex | head -c 92 | tail -c 4 | hexdump -e '1/4 \"%d\"' > methods${flavor}
     """
 
     def methods = readFile("realm/realm-library/build/outputs/aar/methods${flavor}")
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 1dd7a7315b..f91b89788e 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -321,7 +321,7 @@ private static void initializeRealm(Context context, String userAgent) {
             checkFilesDirAvailable(context);
             RealmCore.loadLibrary(context);
             setDefaultConfiguration(new RealmConfiguration.Builder(context).build());
-            ObjectServerFacade.getSyncFacadeIfPossible().init(context, userAgent);
+            ObjectServerFacade.getSyncFacadeIfPossible().initialize(context, userAgent);
             if (context.getApplicationContext() != null) {
                 BaseRealm.applicationContext = context.getApplicationContext();
             } else {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
index a1df724e0d..51fc48ad73 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
@@ -56,7 +56,7 @@
     /**
      * Initializes the Object Server library
      */
-    public void init(Context context, String userAgent) {
+    public void initialize(Context context, String userAgent) {
     }
 
     /**
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
index c9febaefc9..8663635ab7 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
@@ -51,7 +51,7 @@
     private static volatile Method removeSessionMethod;
 
     @Override
-    public void init(Context context, String userAgent) {
+    public void initialize(Context context, String userAgent) {
         // Trying to keep things out the public API is no fun :/
         // Just use reflection on init. It is a one-time method call so should be acceptable.
         //noinspection TryWithIdenticalCatches
diff --git a/version.txt b/version.txt
index 6ef65ad751..f678e79be4 100644
--- a/version.txt
+++ b/version.txt
@@ -1,2 +1 @@
-5.8.0-SNAPSHOT
-
+5.8.1-SNAPSHOT
\ No newline at end of file
