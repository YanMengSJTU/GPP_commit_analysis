diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2c2c8cf386..5ef9519f74 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,9 +1,20 @@
+## 1.1.0
+
+### Enhancements
+
+* Enhanced `Table.toString()` to show a PrimaryKey field details (#2903).
+
 ## 1.0.1
 
 ### Bug fixes
 
-* Fixed a crash when calling Table.toString() in debugger (#2429).
+* Fixed a crash when calling `Table.toString()` in debugger (#2429).
 * Revised `RealmResults.isLoaded()` description (#2895).
+* Fixed a crash that RealmResults was not updated in Realm's change listener by adjusting the calling orders of listeners on Realm, RealmObject and RealmResults (#2926).
+
+### Enhancements
+
+* Removes RxJava related APIs during bytecode transforming to make RealmObject plays well with reflection when rx.Observable doesn't exist.
 
 ## 1.0.0
 
diff --git a/build.gradle b/build.gradle
index cef0f4b666..a5770bd504 100644
--- a/build.gradle
+++ b/build.gradle
@@ -69,10 +69,19 @@ task check(type:GradleBuild) {
     }
 }
 
+task integrationTestsConnectedCheck(type:GradleBuild) {
+    group = 'Test'
+    description = 'Run the integration tests of the Realm project'
+    dependsOn installTransformer
+    buildFile = file('integration-tests/build.gradle')
+    tasks = ['connectedCheck']
+}
+
 task connectedUnitTests(type:GradleBuild) {
     group = 'Test'
     description = 'Run the Android unit tests of the Realm project'
     dependsOn installTransformer
+    dependsOn integrationTestsConnectedCheck
     buildFile = file('realm/build.gradle')
     tasks = ['connectedUnitTests']
     if (project.hasProperty('buildTargetABIs')) {
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
index 06600161bd..7ecfe11eaf 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
@@ -19,6 +19,7 @@ package io.realm.gradle
 import com.android.build.gradle.AppPlugin
 import com.android.build.gradle.LibraryPlugin
 import com.neenbedankt.gradle.androidapt.AndroidAptPlugin
+import io.realm.transformer.RealmOptionalAPITransformer
 import io.realm.transformer.RealmTransformer
 import org.gradle.api.GradleException
 import org.gradle.api.Plugin
@@ -48,6 +49,9 @@ class Realm implements Plugin<Project> {
         }
 
         project.android.registerTransform(new RealmTransformer(project))
+        if (!isAndroidLib) {
+            project.android.registerTransform(new RealmOptionalAPITransformer())
+        }
         project.repositories.add(project.getRepositories().jcenter())
         project.dependencies.add("compile", "io.realm:realm-android-library:${Version.VERSION}")
         project.dependencies.add("compile", "io.realm:realm-annotations:${Version.VERSION}")
diff --git a/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy b/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy
index 432348538b..b25f55bdb7 100644
--- a/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy
+++ b/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy
@@ -17,6 +17,8 @@
 package io.realm.gradle
 
 import com.android.build.api.transform.Transform
+import io.realm.transformer.RealmOptionalAPITransformer
+import io.realm.transformer.RealmTransformer
 import org.gradle.api.GradleException
 import org.gradle.api.Project
 import org.gradle.api.artifacts.Dependency
@@ -67,6 +69,7 @@ class PluginTest {
         assertTrue(containsDependency(project.dependencies, 'io.realm', 'realm-annotations', currentVersion))
 
         assertTrue(containsTransform(project.android.transforms, RealmTransformer.class))
+        assertTrue(containsTransform(project.android.transforms, RealmOptionalAPITransformer.class))
     }
 
     @Test
diff --git a/integration-tests/build.gradle b/integration-tests/build.gradle
new file mode 100644
index 0000000000..129dd076eb
--- /dev/null
+++ b/integration-tests/build.gradle
@@ -0,0 +1,34 @@
+project.ext.sdkVersion = 23
+project.ext.buildTools = '23.0.0'
+
+// Don't cache SNAPSHOT (changing) dependencies.
+configurations.all {
+    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
+}
+
+allprojects {
+    def currentVersion = file("${rootDir}/../version.txt").text.trim()
+
+    buildscript {
+        repositories {
+            mavenLocal()
+            jcenter()
+        }
+        dependencies {
+            classpath 'com.android.tools.build:gradle:2.1.0'
+            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
+            classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
+            classpath 'com.novoda:gradle-android-command-plugin:1.5.0'
+            classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+            classpath "io.realm:realm-gradle-plugin:${currentVersion}"
+        }
+    }
+
+    group = 'io.realm'
+    version = currentVersion
+
+    repositories {
+        mavenLocal()
+        jcenter()
+    }
+}
diff --git a/integration-tests/gradle/wrapper/gradle-wrapper.jar b/integration-tests/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000..13372aef5e
Binary files /dev/null and b/integration-tests/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/integration-tests/gradle/wrapper/gradle-wrapper.properties b/integration-tests/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000000..122a0dca2e
--- /dev/null
+++ b/integration-tests/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Mon Dec 28 10:00:20 PST 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
diff --git a/integration-tests/gradlew b/integration-tests/gradlew
new file mode 100755
index 0000000000..9d82f78915
--- /dev/null
+++ b/integration-tests/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/integration-tests/gradlew.bat b/integration-tests/gradlew.bat
new file mode 100644
index 0000000000..aec99730b4
--- /dev/null
+++ b/integration-tests/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/integration-tests/optionalAPIExists/.gitignore b/integration-tests/optionalAPIExists/.gitignore
new file mode 100644
index 0000000000..796b96d1c4
--- /dev/null
+++ b/integration-tests/optionalAPIExists/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/integration-tests/optionalAPIExists/build.gradle b/integration-tests/optionalAPIExists/build.gradle
new file mode 100644
index 0000000000..fbf57a4759
--- /dev/null
+++ b/integration-tests/optionalAPIExists/build.gradle
@@ -0,0 +1,27 @@
+apply plugin: 'com.android.application'
+apply plugin: 'realm-android'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
+
+    defaultConfig {
+        applicationId "io.realm.tests.optionalapiexists"
+        minSdkVersion 9
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    testCompile 'junit:junit:4.12'
+    compile 'io.reactivex:rxjava:1.1.0'
+}
diff --git a/integration-tests/optionalAPIExists/proguard-rules.pro b/integration-tests/optionalAPIExists/proguard-rules.pro
new file mode 100644
index 0000000000..8456b3daec
--- /dev/null
+++ b/integration-tests/optionalAPIExists/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /home/cc/.android-sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/integration-tests/optionalAPIExists/src/androidTest/java/io/realm/tests/optionalapiexists/ApplicationTest.java b/integration-tests/optionalAPIExists/src/androidTest/java/io/realm/tests/optionalapiexists/ApplicationTest.java
new file mode 100644
index 0000000000..7553ce9c47
--- /dev/null
+++ b/integration-tests/optionalAPIExists/src/androidTest/java/io/realm/tests/optionalapiexists/ApplicationTest.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.tests.optionalapiexists;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import io.realm.DynamicRealm;
+import io.realm.DynamicRealmObject;
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
+import io.realm.RealmResults;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+
+    private Realm realm;
+    private DynamicRealm dynamicRealm;
+    private RealmConfiguration realmConfiguration;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        realmConfiguration = new RealmConfiguration.Builder(this.getContext()).build();
+
+        realm = Realm.getInstance(realmConfiguration);
+        realm.executeTransaction(new Realm.Transaction() {
+            @Override
+            public void execute(Realm realm) {
+                realm.createObject(Dog.class);
+            }
+        });
+        // Open the dynamic Realm after transaction.
+        dynamicRealm = DynamicRealm.getInstance(realmConfiguration);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        realm.close();
+        dynamicRealm.close();
+        Realm.deleteRealm(realmConfiguration);
+        super.tearDown();
+    }
+
+    public void testRealmAsObservableRemoved() {
+        assertNotNull(realm.asObservable());
+    }
+
+    public void testRealmObjectAsObservableRemoved() {
+        Dog dog = realm.where(Dog.class).findFirst();
+        assertNotNull(dog.asObservable());
+    }
+
+    public void testDynamicRealmAsObservableRemoved() {
+        assertNotNull(dynamicRealm.asObservable());
+    }
+
+    public void testDynamicRealmObjectAsObservableRemoved() {
+        DynamicRealmObject dog = dynamicRealm.where("Dog").findFirst();
+        assertNotNull(dog.asObservable());
+    }
+
+    public void testRealmResultsAsObservableRemoved() {
+        RealmResults<Dog> results = realm.where(Dog.class).findAll();
+        assertNotNull(results.asObservable());
+    }
+}
diff --git a/integration-tests/optionalAPIExists/src/main/AndroidManifest.xml b/integration-tests/optionalAPIExists/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..d846ee6f5c
--- /dev/null
+++ b/integration-tests/optionalAPIExists/src/main/AndroidManifest.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest package="io.realm.tests.optionalapiexists"
+          xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <application
+        android:allowBackup="true"
+        android:label="optionalAPIExists"
+        android:supportsRtl="true" >
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/integration-tests/optionalAPIExists/src/main/java/io/realm/tests/optionalapiexists/Dog.java b/integration-tests/optionalAPIExists/src/main/java/io/realm/tests/optionalapiexists/Dog.java
new file mode 100644
index 0000000000..84700f6b22
--- /dev/null
+++ b/integration-tests/optionalAPIExists/src/main/java/io/realm/tests/optionalapiexists/Dog.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.tests.optionalapiexists;
+
+import io.realm.RealmObject;
+
+public class Dog extends RealmObject {
+    @SuppressWarnings("unused")
+    String name;
+}
diff --git a/integration-tests/optionalAPIExists/src/main/java/io/realm/tests/optionalapiexists/MainActivity.java b/integration-tests/optionalAPIExists/src/main/java/io/realm/tests/optionalapiexists/MainActivity.java
new file mode 100644
index 0000000000..7f92feee88
--- /dev/null
+++ b/integration-tests/optionalAPIExists/src/main/java/io/realm/tests/optionalapiexists/MainActivity.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.tests.optionalapiexists;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class MainActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+    }
+}
diff --git a/integration-tests/optionalAPIRemoved/.gitignore b/integration-tests/optionalAPIRemoved/.gitignore
new file mode 100644
index 0000000000..796b96d1c4
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/integration-tests/optionalAPIRemoved/build.gradle b/integration-tests/optionalAPIRemoved/build.gradle
new file mode 100644
index 0000000000..56863ce43f
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/build.gradle
@@ -0,0 +1,26 @@
+apply plugin: 'com.android.application'
+apply plugin: 'realm-android'
+
+android {
+    compileSdkVersion rootProject.sdkVersion
+    buildToolsVersion rootProject.buildTools
+
+    defaultConfig {
+        applicationId "io.realm.tests.removeoptionalapitest"
+        minSdkVersion 9
+        targetSdkVersion rootProject.sdkVersion
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    testCompile 'junit:junit:4.12'
+    androidTestCompile 'io.reactivex:rxjava:1.1.0'
+}
diff --git a/integration-tests/optionalAPIRemoved/proguard-rules.pro b/integration-tests/optionalAPIRemoved/proguard-rules.pro
new file mode 100644
index 0000000000..8456b3daec
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /home/cc/.android-sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/integration-tests/optionalAPIRemoved/src/androidTest/java/io/realm/tests/removeoptionalapitest/ApplicationTest.java b/integration-tests/optionalAPIRemoved/src/androidTest/java/io/realm/tests/removeoptionalapitest/ApplicationTest.java
new file mode 100644
index 0000000000..f248b97f01
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/src/androidTest/java/io/realm/tests/removeoptionalapitest/ApplicationTest.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.tests.removeoptionalapitest;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import io.realm.DynamicRealm;
+import io.realm.DynamicRealmObject;
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
+import io.realm.RealmResults;
+import rx.Observable;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+
+    private Realm realm;
+    private DynamicRealm dynamicRealm;
+    private RealmConfiguration realmConfiguration;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        realmConfiguration = new RealmConfiguration.Builder(this.getContext()).build();
+
+        realm = Realm.getInstance(realmConfiguration);
+        realm.executeTransaction(new Realm.Transaction() {
+            @Override
+            public void execute(Realm realm) {
+                realm.createObject(Dog.class);
+            }
+        });
+        // Open the dynamic Realm after transaction.
+        dynamicRealm = DynamicRealm.getInstance(realmConfiguration);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        realm.close();
+        dynamicRealm.close();
+        Realm.deleteRealm(realmConfiguration);
+        super.tearDown();
+    }
+
+    public void testRealmAsObservableRemoved() {
+        try {
+            @SuppressWarnings("unused")
+            Observable<Realm> observable = realm.asObservable();
+            fail();
+        } catch (NoSuchMethodError ignored) {
+        }
+    }
+
+    public void testRealmObjectAsObservableRemoved() {
+        Dog dog = realm.where(Dog.class).findFirst();
+
+        try {
+            @SuppressWarnings("unused")
+            Observable<Dog> observable = dog.asObservable();
+            fail();
+        } catch (NoSuchMethodError ignored) {
+        }
+    }
+
+    public void testDynamicRealmAsObservableRemoved() {
+        try {
+            @SuppressWarnings("unused")
+            Observable<DynamicRealm> observable = dynamicRealm.asObservable();
+            fail();
+        } catch (NoSuchMethodError ignored) {
+        }
+    }
+
+    public void testDynamicRealmObjectAsObservableRemoved() {
+        DynamicRealmObject dog = dynamicRealm.where("Dog").findFirst();
+
+        try {
+            @SuppressWarnings("unused")
+            Observable<DynamicRealmObject> observable = dog.asObservable();
+            fail();
+        } catch (NoSuchMethodError ignored) {
+        }
+    }
+
+    public void testRealmResultsAsObservableRemoved() {
+        RealmResults<Dog> results = realm.where(Dog.class).findAll();
+
+        try {
+            @SuppressWarnings("unused")
+            Observable<RealmResults<Dog>> observable = results.asObservable();
+            fail();
+        } catch (NoSuchMethodError ignored) {
+        }
+    }
+}
diff --git a/integration-tests/optionalAPIRemoved/src/main/AndroidManifest.xml b/integration-tests/optionalAPIRemoved/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..9201846149
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/src/main/AndroidManifest.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest package="io.realm.tests.removeoptionalapitest"
+          xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <application
+        android:allowBackup="true"
+        android:label="optionalAPIRemoved"
+        android:supportsRtl="true" >
+        <activity
+            android:name=".MainActivity" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/integration-tests/optionalAPIRemoved/src/main/java/io/realm/tests/removeoptionalapitest/Dog.java b/integration-tests/optionalAPIRemoved/src/main/java/io/realm/tests/removeoptionalapitest/Dog.java
new file mode 100644
index 0000000000..e04ed805ae
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/src/main/java/io/realm/tests/removeoptionalapitest/Dog.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.tests.removeoptionalapitest;
+
+import io.realm.RealmObject;
+
+public class Dog extends RealmObject {
+    @SuppressWarnings("unused")
+    String name;
+}
diff --git a/integration-tests/optionalAPIRemoved/src/main/java/io/realm/tests/removeoptionalapitest/MainActivity.java b/integration-tests/optionalAPIRemoved/src/main/java/io/realm/tests/removeoptionalapitest/MainActivity.java
new file mode 100644
index 0000000000..dec189185d
--- /dev/null
+++ b/integration-tests/optionalAPIRemoved/src/main/java/io/realm/tests/removeoptionalapitest/MainActivity.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.tests.removeoptionalapitest;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class MainActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+    }
+}
diff --git a/integration-tests/settings.gradle b/integration-tests/settings.gradle
new file mode 100644
index 0000000000..f804c6689a
--- /dev/null
+++ b/integration-tests/settings.gradle
@@ -0,0 +1,4 @@
+include ':optionalAPIRemoved', ':optionalAPIExists'
+
+rootProject.name = 'integration-tests'
+
diff --git a/realm-annotations/src/main/java/io/realm/annotations/internal/OptionalAPI.java b/realm-annotations/src/main/java/io/realm/annotations/internal/OptionalAPI.java
new file mode 100644
index 0000000000..0b397d7671
--- /dev/null
+++ b/realm-annotations/src/main/java/io/realm/annotations/internal/OptionalAPI.java
@@ -0,0 +1,16 @@
+package io.realm.annotations.internal;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * This annotation is used to mark an API as optional with one or more class {@link #dependencies()}. The bytecode
+ * transformer will decide on build time to remove the corresponding API if it doesn't fulfill the dependencies.
+ */
+@Retention(RetentionPolicy.CLASS)
+@Target(ElementType.METHOD)
+public @interface OptionalAPI {
+    String[] dependencies();
+}
diff --git a/realm-transformer/build.gradle b/realm-transformer/build.gradle
index 5b98178bea..e7ebc88668 100644
--- a/realm-transformer/build.gradle
+++ b/realm-transformer/build.gradle
@@ -1,14 +1,18 @@
 buildscript {
+    ext.kotlin_version = '1.0.1-2'
     repositories {
         jcenter()
+        mavenCentral()
     }
     dependencies {
         classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
     }
 }
 
 apply plugin: 'groovy'
+apply plugin: 'kotlin'
 apply plugin: 'java'
 apply plugin: 'maven'
 apply plugin: 'maven-publish'
@@ -24,6 +28,7 @@ targetCompatibility = '1.6'
 repositories {
     mavenLocal()
     jcenter()
+    mavenCentral()
 }
 
 configurations {
@@ -39,6 +44,7 @@ sourceSets {
             srcDir 'build/generated-src/main/java'
         }
     }
+    main.java.srcDirs += 'src/main/kotlin'
 }
 
 dependencies {
@@ -51,6 +57,7 @@ dependencies {
     testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
         exclude module: 'groovy-all'
     }
+    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
 }
 
 // for Ant filter
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/RealmOptionalAPITransformer.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/RealmOptionalAPITransformer.kt
new file mode 100644
index 0000000000..e17ccf978e
--- /dev/null
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/RealmOptionalAPITransformer.kt
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.transformer
+
+import com.android.build.api.transform.Format
+import com.android.build.api.transform.Context
+import com.android.build.api.transform.Transform
+import com.android.build.api.transform.QualifiedContent.ContentType
+import com.android.build.api.transform.QualifiedContent.Scope
+import com.android.build.api.transform.QualifiedContent.DefaultContentType
+import com.android.build.api.transform.TransformInput
+import com.android.build.api.transform.TransformOutputProvider
+import com.google.common.collect.ImmutableSet
+import io.realm.annotations.internal.OptionalAPI
+import io.realm.transformer.util.appendThisToClassNames
+import io.realm.transformer.util.appendThisToClassPool
+import io.realm.transformer.util.createClassPool
+import org.slf4j.LoggerFactory
+import java.util.HashSet
+
+class RealmOptionalAPITransformer : Transform() {
+
+    private val logger = LoggerFactory.getLogger("realm-logger")
+    private val transformerName = "realm-optional-api"
+
+    override fun getName(): String? = "RealmOptionalAPITransformer"
+
+    override fun isIncremental(): Boolean = false
+
+    override fun getInputTypes(): MutableSet<ContentType>? = ImmutableSet.of(DefaultContentType.CLASSES)
+
+    override fun getScopes(): MutableSet<Scope>? = ImmutableSet.of(Scope.EXTERNAL_LIBRARIES)
+
+    override fun getReferencedScopes(): MutableSet<Scope>? = ImmutableSet.of(Scope.PROJECT, Scope.PROJECT_LOCAL_DEPS,
+            Scope.SUB_PROJECTS, Scope.SUB_PROJECTS_LOCAL_DEPS, Scope.EXTERNAL_LIBRARIES)
+
+    override fun transform(context: Context?,
+                           inputs: MutableCollection<TransformInput>?,
+                           referencedInputs: MutableCollection<TransformInput>?,
+                           outputProvider: TransformOutputProvider?,
+                           isIncremental: Boolean) {
+
+        val classNames = HashSet<String>()
+        inputs!!.appendThisToClassNames(classNames)
+        val refClassNames = HashSet<String>()
+        referencedInputs!!.appendThisToClassNames(refClassNames)
+        val classPool = createClassPool()
+        inputs.appendThisToClassPool(classPool)
+
+        classNames.filter { it.startsWith("io.realm.") }.forEach {
+            classPool.get(it).declaredMethods.forEach {
+                val optionalAPIAnnotation = it.getAnnotation(OptionalAPI::class.java) as? OptionalAPI
+                val dependenciesList = optionalAPIAnnotation?.dependencies?.toList()
+
+                if (optionalAPIAnnotation == null) {
+                    logger.debug("${it.declaringClass.name} ${it.name} doesn't have @OptionalAPI annotation.")
+                } else if (dependenciesList == null || dependenciesList.size == 0) {
+                    throw IllegalArgumentException("${it.name} doesn't have proper dependencies: " +
+                            "${optionalAPIAnnotation.dependencies}.")
+                } else if (!refClassNames.containsAll(dependenciesList)) {
+                    // Doesn't have enough dependencies, remove the API
+                    logger.debug("${it.declaringClass.name} ${it.name} will be removed since some of the dependencies " +
+                            "in $dependenciesList don't exist.")
+                    it.declaringClass.removeMethod(it)
+                } else {
+                    logger.debug("${it.declaringClass.name} ${it.name} has all dependencies in $dependenciesList.")
+                }
+            }
+        }
+
+        // Create outputs
+        classNames.forEach {
+            val ctClass = classPool.getCtClass(it)
+            ctClass.writeFile(
+                    outputProvider!!.getContentLocation(transformerName, inputTypes, scopes, Format.DIRECTORY).canonicalPath)
+        }
+    }
+}
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/util/MutableCollectionExt.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/util/MutableCollectionExt.kt
new file mode 100644
index 0000000000..77ab24630e
--- /dev/null
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/util/MutableCollectionExt.kt
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.transformer.util
+
+import com.android.SdkConstants
+import com.android.build.api.transform.TransformInput
+import javassist.ClassPool
+import java.io.File
+import java.util.jar.JarFile
+
+// Find all classes and append their names to the given String collection
+fun MutableCollection<TransformInput>.appendThisToClassNames(classNames: MutableCollection<String>) {
+    for (item: TransformInput in this) {
+        for (input in item.directoryInputs) {
+            val dirPath = input.file.absolutePath
+            input.file.walkTopDown().filter { it.isFile && it.endsWith(SdkConstants.DOT_CLASS) }.forEach {
+                val qualifiedClassName = it.absolutePath.substring(
+                        dirPath.length + 1,
+                        input.file.absolutePath.length - SdkConstants.DOT_CLASS.length)
+                        .replace(File.separatorChar, '.')
+                classNames.add(qualifiedClassName)
+            }
+        }
+
+        for (input in item.jarInputs) {
+            val jarFile = JarFile(input.file)
+            jarFile.entries().asSequence().filter { it.name.endsWith(SdkConstants.DOT_CLASS) }.forEach {
+                val path = it.name
+                // The jar might not using File.separatorChar as the path separator. So we just replace both `\` and
+                // `/`. It depends on how the jar file was created.
+                // See http://stackoverflow.com/questions/13846000/file-separators-of-path-name-of-zipentry
+                val qualifiedClassName = path.substring(0, path.length - SdkConstants.DOT_CLASS.length)
+                        .replace('/', '.')
+                        .replace('\\', '.')
+                classNames.add(qualifiedClassName)
+            }
+        }
+    }
+}
+
+// Add all the classes in this collection to the given ClassPool
+fun MutableCollection<TransformInput>.appendThisToClassPool(classPool: ClassPool) {
+    this.forEach {
+        it.directoryInputs.forEach { classPool.appendClassPath(it.file.absolutePath) }
+        it.jarInputs.forEach { classPool.appendClassPath(it.file.absolutePath) }
+    }
+}
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/util/Utils.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/util/Utils.kt
new file mode 100644
index 0000000000..75f76d3594
--- /dev/null
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/util/Utils.kt
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2016 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.transformer.util
+
+import javassist.ClassPool
+import javassist.LoaderClassPath
+
+fun createClassPool() : ClassPool {
+    // Don't use ClassPool.getDefault(). Doing consecutive builds in the same run (e.g. debug+release)
+    // will use a cached object and all the classes will be frozen.
+    val classPool = ClassPool()
+    classPool.appendSystemPath()
+    classPool.appendClassPath(LoaderClassPath(ClassLoader.getSystemClassLoader()))
+
+    return classPool
+}
+
diff --git a/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java b/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java
index 1fb67510d6..c7766fad60 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java
@@ -255,7 +255,8 @@ public void realmResultsStableDuringLooperEvent() throws InterruptedException, E
         final AtomicBoolean isRealmOpen = new AtomicBoolean(true);
         final Map<Integer, Integer> results = new ConcurrentHashMap<Integer, Integer>();
         final Looper[] looper = new Looper[1];
-        final RealmChangeListener<Realm> listener[] = new RealmChangeListener[1];
+        //noinspection unchecked
+        final RealmChangeListener<Realm>[] listener = new RealmChangeListener[1];
 
         ExecutorService executorService = Executors.newSingleThreadExecutor();
         Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
@@ -1044,4 +1045,128 @@ public void onChange(AllTypes object) {
             }
         });
     }
+
+    @Test
+    @RunTestInLooperThread
+    public void realmListener_realmResultShouldBeSynced() {
+        final AtomicInteger changeCounter = new AtomicInteger(0);
+        final Realm realm = looperThread.realm;
+        realm.executeTransaction(new Realm.Transaction() {
+            @Override
+            public void execute(Realm realm) {
+                realm.createObject(AllTypes.class);
+            }
+        });
+        final RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
+        assertEquals(1, results.size());
+
+        realm.addChangeListener(new RealmChangeListener<Realm>() {
+            @Override
+            public void onChange(Realm element) {
+                switch (changeCounter.getAndIncrement()) {
+                    case 0:
+                        // Change event triggered by populating
+                        assertEquals(1, realm.where(AllTypes.class).count());
+                        assertEquals(1, results.size());
+
+                        realm.executeTransactionAsync(new Realm.Transaction() {
+                            @Override
+                            public void execute(Realm realm) {
+                                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
+                                assertNotNull(allTypes);
+                                allTypes.deleteFromRealm();
+                                assertEquals(0, realm.where(AllTypes.class).count());
+                            }
+                        });
+                        break;
+                    case 1:
+                        // Change event triggered by deletion in async transaction.
+                        assertEquals(0, realm.where(AllTypes.class).count());
+                        assertEquals(0, results.size());
+                        realm.close();
+                        looperThread.testComplete();
+                        break;
+                    default:
+                        break;
+                }
+            }
+        });
+    }
+
+    // We precisely depend on the order of triggering change listeners right now.
+    // So it should be:
+    // 1. Synced object listener
+    // 2. Synced results listener
+    // 3. Global listener
+    // Async listeners are not concerned by this test. Since they are triggered by different event and no advance read
+    // involved.
+    // If this case fails on your code, think twice before changing the test!
+    // https://github.com/realm/realm-java/issues/2408 is related to this test!
+    @Test
+    @RunTestInLooperThread
+    public void callingOrdersOfListeners() {
+        final Realm realm = looperThread.realm;
+        final AtomicInteger count = new AtomicInteger(0);
+
+        final RealmChangeListener<RealmResults<AllTypes>> syncedResultsListener =
+                new RealmChangeListener<RealmResults<AllTypes>>() {
+                    @Override
+                    public void onChange(RealmResults<AllTypes> element) {
+                        // First called
+                        assertEquals(0, count.getAndIncrement());
+                    }
+                };
+
+        final RealmChangeListener<AllTypes> syncedObjectListener = new RealmChangeListener<AllTypes>() {
+            @Override
+            public void onChange(AllTypes element) {
+                // Second called
+                assertEquals(1, count.getAndIncrement());
+            }
+        };
+        final RealmChangeListener<Realm> globalListener = new RealmChangeListener<Realm>() {
+            @Override
+            public void onChange(Realm element) {
+                // third called
+                assertEquals(2, count.getAndIncrement());
+                looperThread.testComplete();
+            }
+        };
+
+
+        realm.beginTransaction();
+        final AllTypes allTypes = realm.createObject(AllTypes.class);
+        realm.commitTransaction();
+
+        // We need to create one objects first and let the pass the first change event
+        final RealmChangeListener<Realm> initListener = new RealmChangeListener<Realm>() {
+            @Override
+            public void onChange(Realm element) {
+                looperThread.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        // Clear the change listeners
+                        realm.removeAllChangeListeners();
+
+                        // Now we can start testing
+                        allTypes.addChangeListener(syncedObjectListener);
+                        RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
+                        results.addChangeListener(syncedResultsListener);
+                        realm.addChangeListener(globalListener);
+
+                        // Now we trigger those listeners
+                        realm.executeTransactionAsync(new Realm.Transaction() {
+                            @Override
+                            public void execute(Realm realm) {
+                                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
+                                assertNotNull(allTypes);
+                                allTypes.setColumnLong(42);
+                            }
+                        });
+                    }
+                });
+            }
+        };
+        realm.addChangeListener(initListener);
+    }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/BaseRealm.java b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
index 07afb45826..ebb39bcd37 100644
--- a/realm/realm-library/src/main/java/io/realm/BaseRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/BaseRealm.java
@@ -30,6 +30,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import io.realm.annotations.internal.OptionalAPI;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.InvalidRow;
 import io.realm.internal.RealmObjectProxy;
@@ -181,6 +182,7 @@ public void removeChangeListener(RealmChangeListener<? extends BaseRealm> listen
      * @throws UnsupportedOperationException if the required RxJava framework is not on the classpath.
      * @see <a href="https://realm.io/docs/java/latest/#rxjava">RxJava and Realm</a>
      */
+    @OptionalAPI(dependencies = {"rx.Observable"})
     public abstract Observable asObservable();
 
     /**
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index ffd4bf796f..e1f2cd89df 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -18,6 +18,7 @@
 
 import android.os.Looper;
 
+import io.realm.annotations.internal.OptionalAPI;
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmIOException;
 import io.realm.internal.Table;
@@ -188,6 +189,7 @@ static DynamicRealm createInstance(RealmConfiguration configuration) {
      * {@inheritDoc}
      */
     @Override
+    @OptionalAPI(dependencies = {"rx.Observable"})
     public Observable<DynamicRealm> asObservable() {
         return configuration.getRxFactory().from(this);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/HandlerController.java b/realm/realm-library/src/main/java/io/realm/HandlerController.java
index d202599e34..919c56f342 100644
--- a/realm/realm-library/src/main/java/io/realm/HandlerController.java
+++ b/realm/realm-library/src/main/java/io/realm/HandlerController.java
@@ -258,7 +258,6 @@ private void updateAsyncEmptyRealmObject() {
     }
 
     void notifyAllListeners() {
-        notifyGlobalListeners();
         notifyTypeBasedListeners();
 
         // empty async RealmObject shouldn't block the realm to advance
@@ -268,6 +267,12 @@ void notifyAllListeners() {
         if (!realm.isClosed() && threadContainsAsyncEmptyRealmObject()) {
             updateAsyncEmptyRealmObject();
         }
+        // It is very important to notify the global listeners last.
+        // We don't sync RealmResults in realmChanged, instead, they are synced in notifySyncRealmResultsCallbacks.
+        // This is because of we need to compare the TableView version in order to decide if it changes. Thus, we cannot
+        // sync the RealmResults together with advance read - the result's listener won't get called.
+        // NotificationTest.callingOrdersOfListeners will fail if orders change.
+        notifyGlobalListeners();
     }
 
     private void notifyTypeBasedListeners() {
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index fd62a7a6f7..97ddcb253c 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -41,6 +41,7 @@
 import java.util.Set;
 import java.util.concurrent.Future;
 
+import io.realm.annotations.internal.OptionalAPI;
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmIOException;
 import io.realm.exceptions.RealmMigrationNeededException;
@@ -142,6 +143,7 @@
      * {@inheritDoc}
      */
     @Override
+    @OptionalAPI(dependencies = {"rx.Observable"})
     public Observable<Realm> asObservable() {
         return configuration.getRxFactory().from(this);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObject.java b/realm/realm-library/src/main/java/io/realm/RealmObject.java
index 8a91e74e77..4495b0757e 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObject.java
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import io.realm.annotations.RealmClass;
+import io.realm.annotations.internal.OptionalAPI;
 import io.realm.internal.InvalidRow;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
@@ -353,6 +354,7 @@ public final void removeChangeListeners() {
      * corresponding Realm instance doesn't support RxJava.
      * @see <a href="https://realm.io/docs/java/latest/#rxjava">RxJava and Realm</a>
      */
+    @OptionalAPI(dependencies = {"rx.Observable"})
     public final <E extends RealmObject> Observable<E> asObservable() {
         return (Observable<E>) RealmObject.asObservable(this);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
index 17870df854..3b592fccb4 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObjectSchema.java
@@ -490,9 +490,9 @@ private void addModifiers(String fieldName, FieldAttribute[] attributes) {
                 }
 
                 if (containsAttribute(attributes, FieldAttribute.PRIMARY_KEY)) {
-                    addIndex(fieldName);
-                    indexAdded = true;
+                    // Note : adding primary key implies application of FieldAttribute.INDEXED attribute.
                     addPrimaryKey(fieldName);
+                    indexAdded = true;
                 }
 
                 // REQUIRED is being handled when adding the column using addField through the nullable parameter.
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index dbbf002956..42c8a5adf8 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -29,6 +29,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.Future;
 
+import io.realm.annotations.internal.OptionalAPI;
 import io.realm.internal.InvalidRow;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Table;
@@ -973,7 +974,9 @@ public void removeChangeListeners() {
      * corresponding Realm instance doesn't support RxJava.
      * @see <a href="https://realm.io/docs/java/latest/#rxjava">RxJava and Realm</a>
      */
+
     @SuppressWarnings("unchecked")
+    @OptionalAPI(dependencies = {"rx.Observable"})
     public Observable<RealmResults<E>> asObservable() {
         if (realm instanceof Realm) {
             return realm.configuration.getRxFactory().from((Realm) realm, this);
