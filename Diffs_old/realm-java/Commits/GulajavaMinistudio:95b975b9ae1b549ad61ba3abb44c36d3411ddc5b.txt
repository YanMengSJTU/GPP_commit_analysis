diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5a54642629..726e42690c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,11 @@
-## 4.3.0 (YYYY-MM-DD)
+## 4.3.1 (2017-12-06)
+
+### Bug Fixes
+
+* Fixed kotlin standard library being added to both Java and Kotlin projects (#5587).
+
+
+## 4.3.0 (2017-12-05)
 
 ### Deprecated
 
@@ -8,6 +15,7 @@
 
 ### Enhancements
 
+* [ObjectServer] Added explicit support for JSON Web Tokens (JWT) using `SyncCredentials.jwt(String token)`. It requires Object Server 2.0.23+ (#5580).
 * Projects using Kotlin now include additional extension functions that make working with Kotlin easier. See [docs](https://realm.io/docs/java/latest/#kotlin) for more info (#4684).
 * New query predicate: `sort()`.
 * New query predicate: `distinctValues()`. Will be renamed to `distinct` in next major version.
@@ -15,32 +23,23 @@
 
 ### Bug Fixes
 
-### Internal
-
-### Credits
-
-* Thanks to @madisp for adding better support for incremental compilers (#5567).
-
-
-## 4.2.1 (YYYY-MM-DD)
-
-### Enhancements
-
-### Bug Fixes
-
 * Added missing `toString()` for the implementation of `OrderedCollectionChangeSet`.
 * Sync queries are evaluated immediately to solve the performance issue when the query results are huge, `RealmResults.size()` takes too long time (#5387).
 * Correctly close the Realm instance if an exception was thrown while opening it. This avoids `IllegalStateException` when deleting the Realm in the catch block (#5570).
+* Fixed the listener on `RealmList` not being called when removing the listener then adding it again (#5507). Please notice that a similar issue still exists for `RealmResults`.
 
 ### Internal
 
 * Use `OsList` instead of `OsResults` to add notification token on for `RealmList<RealmModel>`.
 * Updated Gradle and plugins to support Android Studio `3.0.0` (#5472).
+* Upgraded to Realm Sync 2.1.8.
+* Upgraded to Realm Core 4.0.4.
 
 ### Credits
 
 * Thanks to @tbsandee for fixing a typo (#5548).
 * Thanks to @vivekkiran for updating Gradle and plugins to support Android Studio `3.0.0` (#5472).
+* Thanks to @madisp for adding better support for incremental compilers (#5567).
 
 
 ## 4.2.0 (2017-11-17)
diff --git a/dependencies.list b/dependencies.list
index 35394be8e1..3703b72124 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,9 +1,9 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=2.1.4
-REALM_SYNC_SHA256=6d32ef44acbf4a63b654ceeaadce036feeefd04a4ca649a95a22a0e7d56df84d
+REALM_SYNC_VERSION=2.1.8
+REALM_SYNC_SHA256=14e4aabe270638aa96f84396be27985b6809e532183035c5150dd2933d676248
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
-REALM_OBJECT_SERVER_DE_VERSION=2.0.18
+REALM_OBJECT_SERVER_DE_VERSION=2.1.0
 
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
index bd1ea27e38..12b51751ad 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
@@ -59,7 +59,10 @@ class RealmPluginExtension {
         // then add again
         def syncArtifactName = "realm-android-library${syncEnabled ? '-object-server' : ''}"
         project.dependencies.add(dependencyConfigurationName, "io.realm:${syncArtifactName}:${Version.VERSION}")
-        def kotlinExtArtifactName = "realm-android-kotlin-extensions${kotlinExtensionsEnabled ? '-object-server' : ''}"
-        project.dependencies.add(dependencyConfigurationName, "io.realm:${kotlinExtArtifactName}:${Version.VERSION}")
+
+        if (kotlinExtensionsEnabled) {
+            def kotlinExtArtifactName = "realm-android-kotlin-extensions${syncEnabled ? '-object-server' : ''}"
+            project.dependencies.add(dependencyConfigurationName, "io.realm:${kotlinExtArtifactName}:${Version.VERSION}")
+        }
     }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
index 4b5cf29e3d..a8e0b8701c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
@@ -194,11 +194,25 @@ private void moveObjects(Realm realm, int originAge, int newAge) {
         }
     }
 
-    private void registerCheckListener(Realm realm, final ChangesCheck changesCheck) {
+    private OrderedRealmCollection<Dog> getTestingCollection(Realm realm) {
         switch (type) {
             case REALM_RESULTS:
                 RealmResults<Dog> results = realm.where(Dog.class).sort(Dog.FIELD_AGE).findAll();
                 looperThread.keepStrongReference(results);
+                return results;
+            case REALM_LIST:
+                RealmList<Dog> list = realm.where(Owner.class).findFirst().getDogs();
+                looperThread.keepStrongReference(list);
+                return list;
+        }
+        fail();
+        return null;
+    }
+
+    private void registerCheckListener(Realm realm, final ChangesCheck changesCheck) {
+        switch (type) {
+            case REALM_RESULTS:
+                RealmResults<Dog> results = (RealmResults<Dog>) getTestingCollection(realm);
                 results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
                     @Override
                     public void onChange(RealmResults<Dog> collection, @Nullable OrderedCollectionChangeSet changeSet) {
@@ -207,7 +221,7 @@ public void onChange(RealmResults<Dog> collection, @Nullable OrderedCollectionCh
                 });
                 break;
             case REALM_LIST:
-                RealmList<Dog> list = realm.where(Owner.class).findFirst().getDogs();
+                RealmList<Dog> list = (RealmList<Dog>) getTestingCollection(realm);
                 looperThread.keepStrongReference(list);
                 list.addChangeListener(new OrderedRealmCollectionChangeListener<RealmList<Dog>>() {
                     @Override
@@ -465,4 +479,80 @@ public void onChange(RealmResults<Dog> collection, @Nullable OrderedCollectionCh
             }
         });
     }
+
+    // To reproduce https://github.com/realm/realm-java/issues/5507
+    // 1. Add listener to a collection
+    // A. change the collection in a background thread
+    // 2. Remove the listener
+    // 3. Add another listener
+    // 4. the listener added in step 3 should be triggered with change set in step A
+    @Test
+    @RunTestInLooperThread
+    public void addChangeListener_bug5507() throws InterruptedException {
+        // FIXME: See https://github.com/realm/realm-object-store/issues/605
+        if (type == ObservablesType.REALM_RESULTS) {
+            looperThread.testComplete();
+            return;
+        }
+
+        Realm realm = looperThread.getRealm();
+        populateData(realm, 1);
+
+        OrderedRealmCollectionChangeListener<OrderedRealmCollection<Dog>> listener1 =
+                new OrderedRealmCollectionChangeListener<OrderedRealmCollection<Dog>>() {
+            @Override
+            public void onChange(OrderedRealmCollection<Dog> dogs, @Nullable OrderedCollectionChangeSet changeSet) {
+                fail();
+            }
+        };
+
+        OrderedRealmCollection<Dog> dogs = getTestingCollection(realm);
+        assertEquals(1, dogs.size());
+
+        if (type == ObservablesType.REALM_LIST) {
+            //noinspection unchecked
+            ((RealmList) dogs).addChangeListener(listener1);
+        } else {
+            //noinspection unchecked
+            ((RealmResults) dogs).addChangeListener(listener1);
+        }
+
+        Thread bgThread = new Thread(new Runnable() {
+            @Override
+            public void run() {
+                Realm realm = Realm.getInstance(looperThread.getConfiguration());
+                realm.beginTransaction();
+                createObjects(realm, 2);
+                realm.commitTransaction();
+                realm.close();
+            }
+        });
+        bgThread.start();
+        bgThread.join();
+
+        if (type == ObservablesType.REALM_LIST) {
+            //noinspection unchecked
+            ((RealmList) dogs).removeChangeListener(listener1);
+        } else {
+            //noinspection unchecked
+            ((RealmResults) dogs).removeChangeListener(listener1);
+        }
+
+        OrderedRealmCollectionChangeListener<OrderedRealmCollection<Dog>> listener2 =
+                new OrderedRealmCollectionChangeListener<OrderedRealmCollection<Dog>>() {
+                    @Override
+                    public void onChange(OrderedRealmCollection<Dog> dogs, @Nullable OrderedCollectionChangeSet changeSet) {
+                        assertEquals(2, dogs.size());
+                        looperThread.testComplete();
+                    }
+                };
+
+        if (type == ObservablesType.REALM_LIST) {
+            //noinspection unchecked
+            ((RealmList) dogs).addChangeListener(listener2);
+        } else {
+            //noinspection unchecked
+            ((RealmResults) dogs).addChangeListener(listener2);
+        }
+    }
 }
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/CredentialsTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/CredentialsTests.java
index c0a5d4fffc..41e9115fb0 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/CredentialsTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/CredentialsTests.java
@@ -86,6 +86,27 @@ public void google_invalidInput() {
         }
     }
 
+    @Test
+    public void jwt() {
+        SyncCredentials creds = SyncCredentials.jwt("foo");
+
+        assertEquals(SyncCredentials.IdentityProvider.JWT, creds.getIdentityProvider());
+        assertEquals("foo", creds.getUserIdentifier());
+        assertTrue(creds.getUserInfo().isEmpty());
+    }
+
+    @Test
+    public void jwt_invalidInput() {
+        String[] invalidInput = {null, ""};
+        for (String input : invalidInput) {
+            try {
+                SyncCredentials.jwt(input);
+                fail(input + " should have failed");
+            } catch (IllegalArgumentException ignored) {
+            }
+        }
+    }
+
     @Test
     public void usernamePassword_register() {
         SyncCredentials creds = SyncCredentials.usernamePassword("foo", "bar", true);
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index 3eb19c014f..2b7db38bd1 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit 3eb19c014fdfa0f02a03d4acf71d046d29a6dfa6
+Subproject commit 2b7db38bd112c82c55a0fa4bbecd24f652d45ba1
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 1662b3de8f..7cb8bb2634 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -1528,7 +1528,7 @@ public boolean isValid() {
         this.query.or();
         return this;
     }
-    
+
     /**
      * Logical-and two conditions
      * Realm automatically applies logical-and between all query statements, so this is intended only as a mean to increase readability.
@@ -1537,7 +1537,7 @@ public boolean isValid() {
      */
     public RealmQuery<E> and() {
     	realm.checkIfValid();
-    	
+
     	return this;
     }
 
@@ -1588,6 +1588,8 @@ public boolean isValid() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#distinctValues(String)} then {@link RealmQuery#findAll()}
+     *
      * Returns a distinct set of objects of a specific class. If the result is sorted, the first
      * object will be returned in case of multiple occurrences, otherwise it is undefined which
      * object is returned.
@@ -1608,6 +1610,8 @@ public boolean isValid() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#distinctValues(String)} then {@link RealmQuery#findAllAsync()}
+     *
      * Asynchronously returns a distinct set of objects of a specific class. If the result is
      * sorted, the first object will be returned in case of multiple occurrences, otherwise it is
      * undefined which object is returned.
@@ -1630,6 +1634,8 @@ public boolean isValid() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#distinctValues(String, String[])} then {@link RealmQuery#findAll()}
+     *
      * Returns a distinct set of objects from a specific class. When multiple distinct fields are
      * given, all unique combinations of values in the fields will be returned. In case of multiple
      * matches, it is undefined which object is returned. Unless the result is sorted, then the
@@ -1835,6 +1841,8 @@ public long count() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String, Sort)} then {@link RealmQuery#findAll()}
+     *
      * Finds all objects that fulfill the query conditions and sorted by specific field name.
      * <p>
      * Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',
@@ -1856,6 +1864,8 @@ public long count() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String, Sort)} then {@link RealmQuery#findAllAsync()}
+     *
      * Similar to {@link #findAllSorted(String, Sort)} but runs asynchronously on a worker thread
      * (need a Realm opened from a looper thread to work).
      *
@@ -1994,6 +2004,8 @@ public long count() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String)} then {@link RealmQuery#findAll()}
+     *
      * Finds all objects that fulfill the query conditions and sorted by specific field name in ascending order.
      * <p>
      * Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',
@@ -2011,6 +2023,8 @@ public long count() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String)} then {@link RealmQuery#findAllAsync()}
+     *
      * Similar to {@link #findAllSorted(String)} but runs asynchronously on a worker thread.
      * This method is only available from a Looper thread.
      *
@@ -2025,6 +2039,8 @@ public long count() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String[], Sort[])} then {@link RealmQuery#findAll()}
+     *
      * Finds all objects that fulfill the query conditions and sorted by specific field names.
      * <p>
      * Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',
@@ -2050,6 +2066,8 @@ private boolean isDynamicQuery() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String[], Sort[])} then {@link RealmQuery#findAllAsync()}
+     *
      * Similar to {@link #findAllSorted(String[], Sort[])} but runs asynchronously.
      * from a worker thread.
      * This method is only available from a Looper thread.
@@ -2070,6 +2088,8 @@ private boolean isDynamicQuery() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String, Sort, String, Sort)} then {@link RealmQuery#findAll()}
+     *
      * Finds all objects that fulfill the query conditions and sorted by specific field names in ascending order.
      * <p>
      * Sorting is currently limited to character sets in 'Latin Basic', 'Latin Supplement', 'Latin Extended A',
@@ -2091,6 +2111,8 @@ private boolean isDynamicQuery() {
     }
 
     /**
+     * @deprecated Since 4.3.0, now use {@link RealmQuery#sort(String, Sort, String, Sort)} then {@link RealmQuery#findAllAsync()}
+     *
      * Similar to {@link #findAllSorted(String, Sort, String, Sort)} but runs asynchronously on a worker thread
      * This method is only available from a Looper thread.
      *
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncCredentials.java b/realm/realm-library/src/objectServer/java/io/realm/SyncCredentials.java
index 5bd7176a6d..0ff32a6bfe 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncCredentials.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncCredentials.java
@@ -97,6 +97,19 @@ public static SyncCredentials google(String googleToken) {
         return new SyncCredentials(googleToken, IdentityProvider.GOOGLE, null);
     }
 
+    /**
+     * Creates credentials based on a JSON Web Token (JWT).
+     *
+     * @param jwtToken a JWT token that identifies the user.
+     * @return a set of credentials that can be used to log into the Object Server using
+     * {@link SyncUser#loginAsync(SyncCredentials, String, SyncUser.Callback)}.
+     * @throws IllegalArgumentException if the token is either {@code null} or empty.
+     */
+    public static SyncCredentials jwt(String jwtToken) {
+        assertStringNotEmpty(jwtToken, "jwtToken");
+        return new SyncCredentials(jwtToken, IdentityProvider.JWT, null);
+    }
+
     /**
      * Creates credentials based on a login with username and password. These credentials will only be verified
      * by the Object Server.
@@ -263,6 +276,12 @@ public String getUserIdentifier() {
          */
         public static final String GOOGLE = "google";
 
+        /**
+         * Credentials are given in the form of a standard JSON Web Token that will be verified
+         * by the Realm Object Server.
+         */
+        public static final String JWT = "jwt";
+
         /**
          * Credentials will be verified by the Object Server.
          *
diff --git a/version.txt b/version.txt
index 9aadf8cf65..b2595557b0 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-4.3.0-SNAPSHOT
+4.3.2-SNAPSHOT
\ No newline at end of file
