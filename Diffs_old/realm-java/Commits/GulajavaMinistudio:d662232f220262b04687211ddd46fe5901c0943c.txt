diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java
index 4233fb4fd6..193a0804f9 100644
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2017 Realm Inc.
+ * Copyright 2017 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package io.realm.processor;
 
 import com.google.testing.compile.JavaFileObjects;
@@ -31,8 +30,8 @@
 
 
 public class RealmBacklinkProcessorTest {
-    private JavaFileObject backlinks = JavaFileObjects.forResource("some/test/Backlinks.java");
-    private JavaFileObject backlinksTarget = JavaFileObjects.forResource("some/test/BacklinkTarget.java");
+    private final JavaFileObject backlinks = JavaFileObjects.forResource("some/test/Backlinks.java");
+    private final JavaFileObject backlinksTarget = JavaFileObjects.forResource("some/test/BacklinkTarget.java");
 
     @Test
     public void compileBacklinks() {
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
index 69fc43ba03..9907db2b3c 100644
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
@@ -24,7 +24,6 @@
 import java.io.IOException;
 import java.util.Arrays;
 
-import javax.lang.model.element.Modifier;
 import javax.tools.JavaFileObject;
 
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
@@ -33,33 +32,32 @@
 
 
 public class RealmProcessorTest {
-
-    private JavaFileObject simpleModel = JavaFileObjects.forResource("some/test/Simple.java");
-    private JavaFileObject simpleProxy = JavaFileObjects.forResource("io/realm/SimpleRealmProxy.java");
-    private JavaFileObject allTypesModel = JavaFileObjects.forResource("some/test/AllTypes.java");
-    private JavaFileObject allTypesProxy = JavaFileObjects.forResource("io/realm/AllTypesRealmProxy.java");
-    private JavaFileObject allTypesDefaultModule = JavaFileObjects.forResource("io/realm/RealmDefaultModule.java");
-    private JavaFileObject allTypesDefaultMediator = JavaFileObjects.forResource("io/realm/RealmDefaultModuleMediator.java");
-    private JavaFileObject booleansModel = JavaFileObjects.forResource("some/test/Booleans.java");
-    private JavaFileObject booleansProxy = JavaFileObjects.forResource("io/realm/BooleansRealmProxy.java");
-    private JavaFileObject emptyModel = JavaFileObjects.forResource("some/test/Empty.java");
-    private JavaFileObject finalModel = JavaFileObjects.forResource("some/test/Final.java");
-    private JavaFileObject transientModel = JavaFileObjects.forResource("some/test/Transient.java");
-    private JavaFileObject volatileModel = JavaFileObjects.forResource("some/test/Volatile.java");
-    private JavaFileObject fieldNamesModel = JavaFileObjects.forResource("some/test/FieldNames.java");
-    private JavaFileObject customAccessorModel = JavaFileObjects.forResource("some/test/CustomAccessor.java");
-    private JavaFileObject nullTypesModel = JavaFileObjects.forResource("some/test/NullTypes.java");
-    private JavaFileObject nullTypesProxy = JavaFileObjects.forResource("io/realm/NullTypesRealmProxy.java");
-    private JavaFileObject missingGenericTypeModel = JavaFileObjects.forResource("some/test/MissingGenericType.java");
-    private JavaFileObject conflictingFieldNameModel = JavaFileObjects.forResource("some/test/ConflictingFieldName.java");
-    private JavaFileObject invalidRealmModelModel_1 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_1.java");
-    private JavaFileObject invalidRealmModelModel_2 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_2.java");
-    private JavaFileObject invalidRealmModelModel_3 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_3.java");
-    private JavaFileObject ValidModelPojo_ExtendingRealmObject = JavaFileObjects.forResource("some/test/ValidModelRealmModel_ExtendingRealmObject.java");
-    private JavaFileObject UseExtendRealmList = JavaFileObjects.forResource("some/test/UseExtendRealmList.java");
-    private JavaFileObject SimpleRealmModel = JavaFileObjects.forResource("some/test/SimpleRealmModel.java");
-    private JavaFileObject customInterface = JavaFileObjects.forResource("some/test/CustomInterface.java");
-    private JavaFileObject nonLatinName = JavaFileObjects.forResource("some/test/ÁrvíztűrőTükörfúrógép.java");
+    private final JavaFileObject simpleModel = JavaFileObjects.forResource("some/test/Simple.java");
+    private final JavaFileObject simpleProxy = JavaFileObjects.forResource("io/realm/SimpleRealmProxy.java");
+    private final JavaFileObject allTypesModel = JavaFileObjects.forResource("some/test/AllTypes.java");
+    private final JavaFileObject allTypesProxy = JavaFileObjects.forResource("io/realm/AllTypesRealmProxy.java");
+    private final JavaFileObject allTypesDefaultModule = JavaFileObjects.forResource("io/realm/RealmDefaultModule.java");
+    private final JavaFileObject allTypesDefaultMediator = JavaFileObjects.forResource("io/realm/RealmDefaultModuleMediator.java");
+    private final JavaFileObject booleansModel = JavaFileObjects.forResource("some/test/Booleans.java");
+    private final JavaFileObject booleansProxy = JavaFileObjects.forResource("io/realm/BooleansRealmProxy.java");
+    private final JavaFileObject emptyModel = JavaFileObjects.forResource("some/test/Empty.java");
+    private final JavaFileObject finalModel = JavaFileObjects.forResource("some/test/Final.java");
+    private final JavaFileObject transientModel = JavaFileObjects.forResource("some/test/Transient.java");
+    private final JavaFileObject volatileModel = JavaFileObjects.forResource("some/test/Volatile.java");
+    private final JavaFileObject fieldNamesModel = JavaFileObjects.forResource("some/test/FieldNames.java");
+    private final JavaFileObject customAccessorModel = JavaFileObjects.forResource("some/test/CustomAccessor.java");
+    private final JavaFileObject nullTypesModel = JavaFileObjects.forResource("some/test/NullTypes.java");
+    private final JavaFileObject nullTypesProxy = JavaFileObjects.forResource("io/realm/NullTypesRealmProxy.java");
+    private final JavaFileObject missingGenericTypeModel = JavaFileObjects.forResource("some/test/MissingGenericType.java");
+    private final JavaFileObject conflictingFieldNameModel = JavaFileObjects.forResource("some/test/ConflictingFieldName.java");
+    private final JavaFileObject invalidRealmModelModel_1 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_1.java");
+    private final JavaFileObject invalidRealmModelModel_2 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_2.java");
+    private final JavaFileObject invalidRealmModelModel_3 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_3.java");
+    private final JavaFileObject ValidModelPojo_ExtendingRealmObject = JavaFileObjects.forResource("some/test/ValidModelRealmModel_ExtendingRealmObject.java");
+    private final JavaFileObject UseExtendRealmList = JavaFileObjects.forResource("some/test/UseExtendRealmList.java");
+    private final JavaFileObject SimpleRealmModel = JavaFileObjects.forResource("some/test/SimpleRealmModel.java");
+    private final JavaFileObject customInterface = JavaFileObjects.forResource("some/test/CustomInterface.java");
+    private final JavaFileObject nonLatinName = JavaFileObjects.forResource("some/test/ÁrvíztűrőTükörfúrógép.java");
 
     @Test
     public void compileSimpleFile() {
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 99c276bee9..f98cc6f16e 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -102,6 +102,11 @@ android {
         }
     }
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+
     packagingOptions {
         exclude 'META-INF/NOTICE.txt'
         exclude 'META-INF/LICENSE.txt'
diff --git a/realm/realm-library/latest b/realm/realm-library/latest
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
index 2d61e6b637..994c8ddad6 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
@@ -201,7 +201,8 @@ public void run(Realm realm) {
                         assertEquals(2, looperThreadRealm.where(AllJavaTypes.class).findAll().size());
                     }
                 },
-                child, parent);
+                child,
+                parent);
     }
 
     // A listener registered on the backlinked field should be called when a commit adds a backlink
@@ -237,7 +238,8 @@ public void run(Realm realm) {
                         assertEquals(1, counter.get());
                     }
                 },
-                child, parent);
+                child,
+                parent);
     }
 
     // A listener registered on the backlinked field should not be called after the listener is removed
@@ -273,7 +275,8 @@ public void run(Realm realm) {
                         assertEquals(2, looperThreadRealm.where(AllJavaTypes.class).findAll().size());
                     }
                 },
-                child, parent);
+                child,
+                parent);
     }
 
     // A listener registered on the backlinked object should be called when a backlinked object is deleted
@@ -310,7 +313,8 @@ public void run(Realm realm) {
                         assertEquals(1, counter.get());
                     }
                 },
-                child, parent);
+                child,
+                parent);
     }
 
     // A listener registered on the backlinked object should not called for an unrelated change
@@ -344,7 +348,8 @@ public void run(Realm realm) {
                         assertEquals(1, looperThreadRealm.where(AllJavaTypes.class).findAll().size());
                     }
                 },
-                child, parent);
+                child,
+                parent);
     }
 
     // Fields annotated with @LinkingObjects should not be affected by JSON updates
@@ -450,6 +455,8 @@ public void execute(Realm realm) {
         final BacklinksTarget target = realm.where(BacklinksTarget.class)
                 .equalTo(BacklinksTarget.FIELD_ID, 1L).findFirst();
 
+        assertNotNull(target);
+
         realm.executeTransaction(new Realm.Transaction() {
             @Override
             public void execute(Realm realm) {
@@ -493,6 +500,8 @@ public void execute(Realm realm) {
             }
         });
 
+        assertNotNull(target);
+
         // precondition
         assertFalse(target.isValid());
 
@@ -503,14 +512,19 @@ public void execute(Realm realm) {
     }
 
     /**
-     * Table validation should fail if the backinked column already exists in the target table.
+     * Table validation should fail if the backlinked column already exists in the target table.
      * The realm `backlinks-fieldInUse.realm` contains the classes `BacklinksSource` and `BacklinksTarget`
-     * except that in the definition of `BacklinksTarget`, the field parent is defined as:
+     * except that in the definition of {@code BacklinksTarget}, the field parent is defined as:
      * <pre>
      * {@code
      *     private RealmList<BacklinksSource> parents;
      * }
      * </pre>
+     *
+     * <p/>
+     * The backlinked field does exist but it is list of links to {@code BacklinksSource} children
+     * not a list of backlinks to  {@code BacklinksSource} parents of which the {@code BacklinksTarget}
+     * is a child.
      */
     @Test
     public void migration_backlinkedFieldInUse() {
@@ -537,7 +551,7 @@ public void migration_backlinkedFieldInUse() {
     }
 
     /**
-     * Table validation should fail if the backinked column points to a non-existent class.
+     * Table validation should fail if the backlinked column points to a non-existent class.
      * The realm `backlinks-missingSourceClass.realm` contains two tables very like those
      * defined by `BacklinksSource` and `BacklinksTarget`.  In it, though, the source class
      * is named XXXBacklinksSource, like so:
@@ -547,10 +561,10 @@ public void migration_backlinkedFieldInUse() {
      *     private final RealmResults<XXXBacklinksSource> parents = null;
      * }
      * </pre>
-     * If the both classes were used in the configuration, the test would fail because of the
-     * missing class.  Since the configuration contains only the single class `BacklinksTarget`,
-     * basic validation passes.  Backlink validation, however, should fail, seeking the
-     * `BacklinksSource` table.
+     * If both classes were present in the configuration, the test would fail because there
+     * is no class named BacklinksSource in the Realm.  Since the configuration contains only the
+     * single class `BacklinksTarget`, though, basic validation should pass. Backlink validation,
+     * however, should fail, seeking the `BacklinksSource` table.
      */
     @Ignore("Need to rebuild the test library")
     @Test
@@ -620,7 +634,7 @@ public void migration_backlinkedSourceFieldDoesntExist() {
     }
 
     /**
-     * Table validation should fail if the backinked column points to a field of the wrong type.
+     * Table validation should fail if the backlinked column points to a field of the wrong type.
      * This test is built in almost exactly the way as was `migration_backlinkedSourceFieldDoesntExist`
      * The realm `backlinks-sourceFieldWrongType.realm` was constructed with classes `BacklinksWrongTypeTarget`
      * and `BacklinksWrongTypeSource`.  Again, these two classes are nearly identical in their counterparts
diff --git a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
index 2d85a0b9bf..00a73fbbc3 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
@@ -728,7 +728,8 @@ private void addModule(Object module) {
          * create a module. These classes must be available in the default module. Calling this will remove any
          * previously configured modules.
          */
-        Builder schema(Class<? extends RealmModel> firstClass, Class<? extends RealmModel>... additionalClasses) {
+        @SafeVarargs
+        final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends RealmModel>... additionalClasses) {
             if (firstClass == null) {
                 throw new IllegalArgumentException("A non-null class must be provided");
             }
