diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
index 2f08cfc378..cd779ac531 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
@@ -751,41 +751,6 @@ public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
         realm.close();
     }
 
-    // Adding search index is idempotent.
-    @Test
-    public void addingSearchIndexTwice() throws IOException {
-        final Class[] classes = {PrimaryKeyAsLong.class, PrimaryKeyAsString.class};
-
-        for (final Class clazz : classes) {
-            final AtomicBoolean didMigrate = new AtomicBoolean(false);
-
-            RealmMigration migration = new RealmMigration() {
-                @Override
-                public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
-                    RealmObjectSchema schema = realm.getSchema().getSchemaForClass(clazz.getSimpleName());
-                    schema.addIndex("id");
-                    // @PrimaryKey fields in PrimaryKeyAsLong and PrimaryKeyAsString.class should be set 'nullable'.
-                    schema.setNullable("name", true);
-                    didMigrate.set(true);
-                }
-            };
-            RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
-                    .schemaVersion(42)
-                    .schema(clazz)
-                    .migration(migration)
-                    .build();
-            Realm.deleteRealm(realmConfig);
-            configFactory.copyRealmFromAssets(context, "default-before-migration.realm", Realm.DEFAULT_REALM_NAME);
-            Realm.migrateRealm(realmConfig);
-            realm = Realm.getInstance(realmConfig);
-            assertEquals(42, realm.getVersion());
-            assertTrue(didMigrate.get());
-            Table table = realm.getTable(clazz);
-            assertEquals(true, table.hasSearchIndex(table.getColumnIndex("id")));
-            realm.close();
-        }
-    }
-
     @Test
     public void setAnnotations() {
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index a7e3847eae..d6ca5add85 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -835,36 +835,32 @@ public void utf8Tests() {
 
     // The test writes and reads random Strings.
     @Test
-    @Ignore("This test is slow. Move it to another testsuite that runs once a day on Jenkins")
     public void unicodeStrings() {
-        List<String> chars_array = getCharacterArray();
+        List<String> charsArray = getCharacterArray();
         // Change seed value for new random values.
         long seed = 20;
         Random random = new Random(seed);
 
-
-        String test_char = "";
-        String test_char_old = "";
-
-        int random_value;
+        StringBuilder testChar = new StringBuilder();
+        realm.beginTransaction();
         for (int i = 0; i < 1000; i++) {
-            random_value = random.nextInt(25);
+            testChar.setLength(0);
+            int length = random.nextInt(25);
 
-            for (int j = 0; j < random_value; j++) {
-                test_char = test_char_old + chars_array.get(random.nextInt(27261));
-                test_char_old = test_char;
+            for (int j = 0; j < length; j++) {
+                testChar.append(charsArray.get(random.nextInt(27261)));
             }
-            realm.beginTransaction();
             StringOnly stringOnly = realm.createObject(StringOnly.class);
-            stringOnly.setChars(test_char);
-            realm.commitTransaction();
 
+            // tests setter
+            stringOnly.setChars(testChar.toString());
+
+            // tests getter
             realm.where(StringOnly.class).findFirst().getChars();
 
-            realm.beginTransaction();
             realm.delete(StringOnly.class);
-            realm.commitTransaction();
         }
+        realm.cancelTransaction();
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java b/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
index f44a42e56a..e5b6d65565 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
@@ -89,7 +89,7 @@
 
     // Runnable guaranteed to trigger after the test either succeeded or failed.
     // Access guarded by 'lock'
-    private Runnable runAfterTestIsComplete;
+    private List<Runnable> runAfterTestIsComplete = new ArrayList<>();
 
     /**
      * Get the configuration for the test realm.
@@ -162,7 +162,7 @@ public void closeAfterTest(Closeable closeable) {
      */
     public void runAfterTest(Runnable task) {
         synchronized (lock) {
-            runAfterTestIsComplete = task;
+            runAfterTestIsComplete.add(task);
         }
     }
 
@@ -485,8 +485,8 @@ public void run() {
                 try {
                     looperTearDown();
                     closeResources();
-                    if (runAfterTestIsComplete != null) {
-                        runAfterTestIsComplete.run();
+                    for (Runnable task : runAfterTestIsComplete) {
+                        task.run();
                     }
                 } catch (Throwable t) {
                     setAssertionError(t);
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java b/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
index 272ead6c89..29e7faef4a 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
@@ -19,6 +19,9 @@
 import android.content.Context;
 import android.content.pm.PackageInfo;
 
+import java.io.File;
+import java.io.IOException;
+
 import io.realm.internal.Keep;
 
 /**
@@ -41,7 +44,25 @@ public static void init(Context context) {
         // init the "sync_manager.cpp" metadata Realm, this is also needed later, when re try
         // to schedule a client reset. in realm-java#master this is already done, when initialising
         // the RealmFileUserStore (not available now on releases)
-        SyncManager.nativeInitializeSyncManager(context.getFilesDir().getPath());
+        if (SyncManager.Debug.separatedDirForSyncManager) {
+            try {
+                // Files.createTempDirectory is not available on JDK 6.
+                File dir = File.createTempFile("remote_sync_", "_" + android.os.Process.myPid(),
+                        context.getFilesDir());
+                if (!dir.delete()) {
+                    throw new IllegalStateException(String.format("Temp file '%s' cannot be deleted.", dir.getPath()));
+                }
+                if (!dir.mkdir()) {
+                    throw new IllegalStateException(String.format("Directory '%s' for SyncManager cannot be created. ",
+                            dir.getPath()));
+                }
+                SyncManager.nativeInitializeSyncManager(dir.getPath());
+            } catch (IOException e) {
+                throw new IllegalStateException(e);
+            }
+        } else {
+            SyncManager.nativeInitializeSyncManager(context.getFilesDir().getPath());
+        }
 
         // Configure default UserStore
         UserStore userStore = new RealmFileUserStore();
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 63ef781fca..8e070e1dbd 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -56,6 +56,11 @@
          */
         public static boolean skipOnlineChecking = false;
 
+        /**
+         * Set this to true to init a SyncManager with a directory named by the process ID. This is useful for
+         * integration tests which are emulating multiple sync client by using multiple processes.
+         */
+        public static boolean separatedDirForSyncManager = false;
     }
 
     /**
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/RemoteIntegrationTestService.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/RemoteIntegrationTestService.java
index 872b1089ec..d80d79abba 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/RemoteIntegrationTestService.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/RemoteIntegrationTestService.java
@@ -24,5 +24,6 @@
     public RemoteIntegrationTestService() {
         super();
         SyncManager.Debug.skipOnlineChecking = true;
+        SyncManager.Debug.separatedDirForSyncManager = true;
     }
 }
