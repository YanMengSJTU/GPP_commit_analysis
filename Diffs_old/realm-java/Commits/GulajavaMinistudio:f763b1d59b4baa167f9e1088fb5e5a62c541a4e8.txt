diff --git a/CHANGELOG.md b/CHANGELOG.md
index aab89cd4b6..cc489e5518 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,13 @@
 * Added support for mapping between a Java name and the underlying name in the Realm file using `@RealmModule`, `@RealmClass` and `@RealmField` annotations (#5280).
 
 
+## 4.3.4 (YYYY-MM-DD)
+
+## Bug Fixes
+
+* Added missing `RealmQuery.oneOf()` for Kotlin that accepts non-nullable types (#5717).
+
+
 ## 4.3.3 (2018-01-19)
 
 ### Internal
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt
index a7c9049eb6..19da173b66 100644
--- a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt
@@ -45,8 +45,13 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                     .oneOf(AllPropTypesClass::stringVar.name, arrayOf<String?>("test"))
+                     .oneOf(AllPropTypesClass::nullableStringVar.name, arrayOf<String?>(null, "test"))
                      .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::stringVar.name, arrayOf<String>("test"))
+                        .count())
     }
 
     @Test
@@ -58,7 +63,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::byteVar.name, arrayOf<Byte?>(3))
+                        .oneOf(AllPropTypesClass::nullableByteVar.name, arrayOf<Byte?>(null, 3))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::byteVar.name, arrayOf<Byte>(3))
                         .count())
     }
 
@@ -71,7 +81,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::shortVar.name, arrayOf<Short?>(3))
+                        .oneOf(AllPropTypesClass::nullableShortVar.name, arrayOf<Short?>(null, 3))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::shortVar.name, arrayOf<Short>(3))
                         .count())
     }
 
@@ -84,7 +99,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::intVar.name, arrayOf<Int?>(3))
+                        .oneOf(AllPropTypesClass::nullableIntVar.name, arrayOf<Int?>(null, 3))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::intVar.name, arrayOf<Int>(3))
                         .count())
     }
 
@@ -97,7 +117,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::longVar.name, arrayOf<Long?>(3))
+                        .oneOf(AllPropTypesClass::nullableLongVar.name, arrayOf<Long?>(null, 3))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::longVar.name, arrayOf<Long>(3))
                         .count())
     }
 
@@ -110,7 +135,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::doubleVar.name, arrayOf<Double?>(3.5))
+                        .oneOf(AllPropTypesClass::nullableDoubleVar.name, arrayOf<Double?>(null, 3.5))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::doubleVar.name, arrayOf<Double>(3.5))
                         .count())
     }
 
@@ -123,7 +153,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::floatVar.name, arrayOf<Float?>(3.5f))
+                        .oneOf(AllPropTypesClass::nullableFloatVar.name, arrayOf<Float?>(null, 3.5f))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::floatVar.name, arrayOf<Float>(3.5f))
                         .count())
     }
 
@@ -134,6 +169,11 @@ class KotlinRealmQueryTests {
         obj.booleanVar = true
         realm.commitTransaction()
 
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::nullableBooleanVar.name, arrayOf<Boolean?>(null, true))
+                        .count())
+
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
                         .oneOf(AllPropTypesClass::booleanVar.name, arrayOf<Boolean?>(true))
@@ -152,7 +192,12 @@ class KotlinRealmQueryTests {
 
         assertEquals(1,
                 realm.where<AllPropTypesClass>()
-                        .oneOf(AllPropTypesClass::dateVar.name, arrayOf<Date?>(testDate))
+                        .oneOf(AllPropTypesClass::nullableDateVar.name, arrayOf<Date?>(null, testDate))
+                        .count())
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::dateVar.name, arrayOf<Date>(testDate))
                         .count())
     }
 
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt
index 35202fc7da..4870b0a3c3 100644
--- a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt
@@ -17,4 +17,13 @@ open class AllPropTypesClass : RealmModel {
     var booleanVar : Boolean = false
     var dateVar : Date = Date()
 
+    var nullableStringVar: String? = null
+    var nullableByteVar: Byte? = null
+    var nullableShortVar: Short? = null
+    var nullableIntVar: Int? = null
+    var nullableLongVar: Long? = null
+    var nullableDoubleVar: Double? = null
+    var nullableFloatVar: Float? = null
+    var nullableBooleanVar : Boolean? = null
+    var nullableDateVar : Date? = null
 }
diff --git a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
index e9f2c1a4a8..b223597f85 100644
--- a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
+++ b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
@@ -151,3 +151,144 @@ fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
                                          value: Array<Date?>): RealmQuery<T> {
     return this.`in`(propertyName, value)
 }
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @param casing how casing is handled. [Case.INSENSITIVE] works only for the Latin-1 characters.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a String field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<String>,
+                                         casing: Case = Case.SENSITIVE): RealmQuery<T> {
+    return this.`in`(propertyName, value, casing)
+}
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Byte field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Byte>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Short field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Short>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Integer field or `values` is `null`
+ * or empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Int>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Long field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Long>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Double field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Double>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Float field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Float>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Boolean field or `values` is `null`
+ * or empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Boolean>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Date field or `values` is `null` or
+ * empty.
+ */
+@JvmName("nonNullOneOf")
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Date>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
