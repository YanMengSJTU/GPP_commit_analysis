diff --git a/realm/realm-library/src/androidTest/java/io/realm/SortTest.java b/realm/realm-library/src/androidTest/java/io/realm/SortTest.java
index 396969108f..6960e847ce 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/SortTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/SortTest.java
@@ -31,6 +31,8 @@
 
 import io.realm.entities.AllTypes;
 import io.realm.entities.StringOnly;
+import io.realm.internal.Table;
+import io.realm.internal.UncheckedRow;
 import io.realm.rule.RunInLooperThread;
 import io.realm.rule.RunTestInLooperThread;
 import io.realm.rule.TestRealmConfigurationFactory;
@@ -83,6 +85,11 @@ private void populateRealm(Realm realm) {
         realm.commitTransaction();
     }
 
+    private UncheckedRow getRowBySourceIndexFromAllTypesTable(long sourceRowIndex) {
+        Table table = realm.getTable(AllTypes.class);
+        return table.getUncheckedRow(sourceRowIndex);
+    }
+
     @Before
     public void setUp() {
         // Creates a Realm with the following objects:
@@ -156,19 +163,19 @@ private void checkSortTwoFieldsStringAscendingIntAscending(RealmResults<AllTypes
 
         assertEquals("Adam", results.get(0).getColumnString());
         assertEquals(4, results.get(0).getColumnLong());
-        assertEquals(0, results.getCollection().indexOf(2));
+        assertEquals(0, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(2)));
 
         assertEquals("Adam", results.get(1).getColumnString());
         assertEquals(5, results.get(1).getColumnLong());
-        assertEquals(1, results.getCollection().indexOf(0));
+        assertEquals(1, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(0)));
 
         assertEquals("Adam", results.get(2).getColumnString());
         assertEquals(5, results.get(2).getColumnLong());
-        assertEquals(2, results.getCollection().indexOf(3));
+        assertEquals(2, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(3)));
 
         assertEquals("Brian", results.get(3).getColumnString());
         assertEquals(4, results.get(3).getColumnLong());
-        assertEquals(3, results.getCollection().indexOf(1));
+        assertEquals(3, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(1)));
     }
 
     private void checkSortTwoFieldsIntString(RealmResults<AllTypes> results) {
@@ -182,19 +189,19 @@ private void checkSortTwoFieldsIntString(RealmResults<AllTypes> results) {
 
         assertEquals("Adam", results.get(0).getColumnString());
         assertEquals(4, results.get(0).getColumnLong());
-        assertEquals(0, results.getCollection().indexOf(2));
+        assertEquals(0, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(2)));
 
         assertEquals("Brian", results.get(1).getColumnString());
         assertEquals(4, results.get(1).getColumnLong());
-        assertEquals(1, results.getCollection().indexOf(1));
+        assertEquals(1, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(1)));
 
         assertEquals("Adam", results.get(2).getColumnString());
         assertEquals(5, results.get(2).getColumnLong());
-        assertEquals(2, results.getCollection().indexOf(0));
+        assertEquals(2, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(0)));
 
         assertEquals("Adam", results.get(3).getColumnString());
         assertEquals(5, results.get(3).getColumnLong());
-        assertEquals(3, results.getCollection().indexOf(3));
+        assertEquals(3, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(3)));
     }
 
     private void checkSortTwoFieldsIntAscendingStringDescending(RealmResults<AllTypes> results) {
@@ -208,19 +215,19 @@ private void checkSortTwoFieldsIntAscendingStringDescending(RealmResults<AllType
 
         assertEquals("Brian", results.get(0).getColumnString());
         assertEquals(4, results.get(0).getColumnLong());
-        assertEquals(0, results.getCollection().indexOf(1));
+        assertEquals(0, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(1)));
 
         assertEquals("Adam", results.get(1).getColumnString());
         assertEquals(4, results.get(1).getColumnLong());
-        assertEquals(1, results.getCollection().indexOf(2));
+        assertEquals(1, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(2)));
 
         assertEquals("Adam", results.get(2).getColumnString());
         assertEquals(5, results.get(2).getColumnLong());
-        assertEquals(2, results.getCollection().indexOf(0));
+        assertEquals(2, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(0)));
 
         assertEquals("Adam", results.get(3).getColumnString());
         assertEquals(5, results.get(3).getColumnLong());
-        assertEquals(3, results.getCollection().indexOf(3));
+        assertEquals(3, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(3)));
     }
 
     private void checkSortTwoFieldsStringAscendingIntDescending(RealmResults<AllTypes> results) {
@@ -234,19 +241,19 @@ private void checkSortTwoFieldsStringAscendingIntDescending(RealmResults<AllType
 
         assertEquals("Adam", results.get(0).getColumnString());
         assertEquals(5, results.get(0).getColumnLong());
-        assertEquals(0, results.getCollection().indexOf(0));
+        assertEquals(0, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(0)));
 
         assertEquals("Adam", results.get(1).getColumnString());
         assertEquals(5, results.get(1).getColumnLong());
-        assertEquals(1, results.getCollection().indexOf(3));
+        assertEquals(1, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(3)));
 
         assertEquals("Adam", results.get(2).getColumnString());
         assertEquals(4, results.get(2).getColumnLong());
-        assertEquals(2, results.getCollection().indexOf(2));
+        assertEquals(2, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(2)));
 
         assertEquals("Brian", results.get(3).getColumnString());
         assertEquals(4, results.get(3).getColumnLong());
-        assertEquals(3, results.getCollection().indexOf(1));
+        assertEquals(3, results.getCollection().indexOf(getRowBySourceIndexFromAllTypesTable(1)));
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
index 74bd40c9ee..2c6b451d71 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
@@ -224,14 +224,6 @@ public void indexOf() {
         assertEquals(3, collection.indexOf(row));
     }
 
-    @Test
-    public void indexOf_long() {
-        SortDescriptor sortDescriptor = SortDescriptor.getTestInstance(table, new long[] {2});
-
-        Collection collection = new Collection(sharedRealm, table.where(), sortDescriptor);
-        assertEquals(3, collection.indexOf(0));
-    }
-
     @Test
     public void distinct() {
         Collection collection = new Collection(sharedRealm, table.where().lessThan(new long[] {2}, oneNullTable, 4));
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
index 4079957897..1e209a2143 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
@@ -134,7 +134,7 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_Collection_nativeContains(JNIE
     try {
         auto wrapper = reinterpret_cast<ResultsWrapper*>(native_ptr);
         auto row = reinterpret_cast<Row*>(native_row_ptr);
-        size_t index = wrapper->m_results.index_of(*row);
+        size_t index = wrapper->m_results.index_of(RowExpr(*row));
         return to_jbool(index != not_found);
     }
     CATCH_STD();
@@ -219,12 +219,16 @@ JNIEXPORT jobject JNICALL Java_io_realm_internal_Collection_nativeAggregate(JNIE
             case io_realm_internal_Collection_AGGREGATE_FUNCTION_MAXIMUM:
                 value = wrapper->m_results.max(index);
                 break;
-            case io_realm_internal_Collection_AGGREGATE_FUNCTION_AVERAGE:
-                value = wrapper->m_results.average(index);
-                if (!value) {
+            case io_realm_internal_Collection_AGGREGATE_FUNCTION_AVERAGE: {
+                Optional<double> value_count(wrapper->m_results.average(index));
+                if (value_count) {
+                    value = Optional<Mixed>(Mixed(value_count.value()));
+                }
+                else {
                     value = Optional<Mixed>(0.0);
                 }
                 break;
+            }
             case io_realm_internal_Collection_AGGREGATE_FUNCTION_SUM:
                 value = wrapper->m_results.sum(index);
                 break;
@@ -362,22 +366,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Collection_nativeIndexOf(JNIEnv*
         auto wrapper = reinterpret_cast<ResultsWrapper*>(native_ptr);
         auto row = reinterpret_cast<Row*>(row_native_ptr);
 
-        return static_cast<jlong>(wrapper->m_results.index_of(*row));
-    }
-    CATCH_STD()
-    return npos;
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Collection_nativeIndexOfBySourceRowIndex(JNIEnv* env, jclass,
-                                                                                        jlong native_ptr,
-                                                                                        jlong source_row_index)
-{
-    TR_ENTER_PTR(native_ptr)
-    try {
-        auto wrapper = reinterpret_cast<ResultsWrapper*>(native_ptr);
-        auto index = static_cast<size_t>(source_row_index);
-
-        return static_cast<jlong>(wrapper->m_results.index_of(index));
+        return static_cast<jlong>(wrapper->m_results.index_of(RowExpr(*row)));
     }
     CATCH_STD()
     return npos;
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index 2274604de9..54a98b2152 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit 2274604de9c1b34667a78246d86437f64ae6896f
+Subproject commit 54a98b215284e58b73e0664723fbd852ffb04902
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Collection.java b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
index ba43dbbf43..d424302ef5 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Collection.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
@@ -470,11 +470,6 @@ public int indexOf(UncheckedRow row) {
         return (index > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int) index;
     }
 
-    public int indexOf(long sourceRowIndex) {
-        long index = nativeIndexOfBySourceRowIndex(nativePtr, sourceRowIndex);
-        return (index > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int) index;
-    }
-
     public void delete(long index) {
         nativeDelete(nativePtr, index);
     }
@@ -603,8 +598,6 @@ private static native long nativeCreateResultsFromLinkView(long sharedRealmNativ
 
     private static native long nativeIndexOf(long nativePtr, long rowNativePtr);
 
-    private static native long nativeIndexOfBySourceRowIndex(long nativePtr, long sourceRowIndex);
-
     private static native boolean nativeIsValid(long nativePtr);
 
     private static native byte nativeGetMode(long nativePtr);
