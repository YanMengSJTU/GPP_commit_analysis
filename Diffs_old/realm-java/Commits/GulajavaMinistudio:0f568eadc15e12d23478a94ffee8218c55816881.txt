diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7e83ab4b78..ae02ab79f5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -20,8 +20,10 @@
 ### Bug Fixes
 
 * Fixed the compile warnings of using deprecated method `RealmProxyMediator.getTableName()` in generated mediator classes (#5455).
+* [ObjectServer] now retrying network query when encountering any `IOException` (#5453).
+* Fixed a `NoClassDefFoundError` due to using `@SafeVarargs` below API 19 (#5463).
 
-### Interal
+### Internal
 
 * Updated Realm Sync to 2.1.0
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
index 6678fe935d..766a47e23e 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
@@ -762,7 +762,6 @@ private void addModule(Object module) {
          * create a module. These classes must be available in the default module. Calling this will remove any
          * previously configured modules.
          */
-        @SafeVarargs
         final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends RealmModel>... additionalClasses) {
             //noinspection ConstantConditions
             if (firstClass == null) {
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index e1ba427ce4..267d9aff0b 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -99,7 +99,6 @@ public RealmList() {
      *
      * @param objects initial objects in the list.
      */
-    @SafeVarargs
     public RealmList(E... objects) {
         //noinspection ConstantConditions
         if (objects == null) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index 9aab07578b..100c89b613 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -16,7 +16,8 @@
 
 package io.realm;
 
-import java.net.ConnectException;
+
+import java.io.IOException;
 
 /**
  * This class enumerate all potential errors related to using the Object Server or synchronizing data.
@@ -200,8 +201,12 @@ public static ErrorCode fromInt(int errorCode) {
      * @return mapped {@link ErrorCode}.
      */
     public static ErrorCode fromException(Exception exception) {
-        // ConnectException is recoverable (with exponential backoff)
-        return (exception instanceof ConnectException) ? ErrorCode.IO_EXCEPTION : ErrorCode.UNKNOWN;
+        // IOException are recoverable (with exponential backoff)
+        if (exception instanceof IOException) {
+            return ErrorCode.IO_EXCEPTION;
+        } else {
+            return ErrorCode.UNKNOWN;
+        }
     }
 
     public enum Category {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 0d3e9b1c74..ce82386309 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -249,7 +249,7 @@ public void logout() {
             final Token refreshTokenToBeRevoked = refreshToken;
 
             ThreadPoolExecutor networkPoolExecutor = SyncManager.NETWORK_POOL_EXECUTOR;
-            networkPoolExecutor.submit(new ExponentialBackoffTask<LogoutResponse>() {
+            networkPoolExecutor.submit(new ExponentialBackoffTask<LogoutResponse>(3) {
 
                 @Override
                 protected LogoutResponse execute() {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/ExponentialBackoffTask.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/ExponentialBackoffTask.java
index 1e428dd190..a5686ae139 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/ExponentialBackoffTask.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/ExponentialBackoffTask.java
@@ -24,6 +24,15 @@
  * Abstracts the concept of running an network task with incremental backoff. It will run forever until interrupted.
  */
 public abstract class ExponentialBackoffTask<T extends AuthServerResponse> implements Runnable {
+    private final int maxRetries;
+
+    public ExponentialBackoffTask(int maxRetries) {
+        this.maxRetries = maxRetries;
+    }
+
+    public ExponentialBackoffTask() {
+        this(Integer.MAX_VALUE - 1);
+    }
 
     // Task to perform
     protected abstract T execute();
@@ -69,7 +78,7 @@ public void run() {
                 onSuccess(response);
                 break;
             } else {
-                if (shouldAbortTask(response)) {
+                if (shouldAbortTask(response) || attempt == maxRetries + 1) {
                     onError(response);
                     break;
                 }
