diff --git a/CHANGELOG.md b/CHANGELOG.md
index 00b0614820..e2fdb3786b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,8 +4,9 @@
 
 * [ObjectServer] Added `SyncSession.uploadAllLocalChanges()`.
 * [ObjectServer] APIs of `UserStore` have been changed to support same user identity but different authentication server scenario.
+* [ObjectServer] Added `SyncUser.allSessions` to retrive the all valid sessions belonging to the user (#4783).
 * Added `Nullable` annotation to methods that may return `null` in order to improve Kotlin usability. This also introduced a dependency to `com.google.code.findbugs:jsr305`.
-* Added support for new data type `MutableRealmIntegers`. The new type behaves almost exactly as a reference to a Long (mutable nullable, etc) but supports `increment` and `decrement` methods, which implement a Conflict Free Replicated Data Type, whose value will converge even when changed across distributed devices with poor connections. (#4266).
+* Added support for new data type `MutableRealmIntegers`. The new type behaves almost exactly as a reference to a Long (mutable nullable, etc) but supports `increment` and `decrement` methods, which implement a Conflict Free Replicated Data Type, whose value will converge even when changed across distributed devices with poor connections (#4266).
 
 ### Bug Fixes
 
@@ -19,7 +20,7 @@
 * Potential crash after using `Realm.getSchema()` to change the schema of a typed Realm. `Realm.getSchema()` now returns an immutable `RealmSchema` instance.
 * `Realm.copyToRealmOrUpdate()` might cause a `RealmList` field to contain duplicated elements (#4957).
 * `RealmSchema.create(String)` and `RealmObjectSchema.setClassName(String)` did not accept class name whose length was 51 to 57.
-* Workaround for a Android JVM crash when using 'compactOnLaunch()' (#4964).
+* Workaround for an Android JVM crash when using `compactOnLaunch()` (#4964).
 
 ### Internal
 
@@ -736,7 +737,7 @@ No changes since 0.91.1.
 
 ### Breaking changes
 
-* @PrimaryKey field value can now be null for String, Byte, Short, Integer, and Long types. Older Realms should be migrated, using RealmObjectSchema.setNullable(), or by adding the @Required annotation. (#2515).
+* @PrimaryKey field value can now be null for String, Byte, Short, Integer, and Long types. Older Realms should be migrated, using RealmObjectSchema.setNullable(), or by adding the @Required annotation (#2515).
 * `RealmResults.clear()` now throws UnsupportedOperationException. Use `RealmResults.deleteAllFromRealm()` instead.
 * `RealmResults.remove(int)` now throws UnsupportedOperationException. Use `RealmResults.deleteFromRealm(int)` instead.
 * `RealmResults.sort()` and `RealmList.sort()` now return the sorted result instead of sorting in-place.
@@ -778,7 +779,7 @@ No changes since 0.91.1.
 ### Bug fixes
 
 * Field annotated with @Ignored should not have accessors generated by the bytecode transformer (#2478).
-* RealmResults and RealmObjects can no longer accidentially be GC'ed if using `asObservable()`. Previously this caused the observable to stop emitting. (#2485).
+* RealmResults and RealmObjects can no longer accidentially be GC'ed if using `asObservable()`. Previously this caused the observable to stop emitting (#2485).
 * Fixed an build issue when using Realm in library projects on Windows (#2484).
 * Custom equals(), toString() and hashCode() are no longer incorrectly overwritten by the proxy class (#2545).
 
@@ -887,7 +888,7 @@ No changes since 0.91.1.
 * Updated Realm Core to 0.95.6
   - Fixed a bug where an async query can be copied incomplete in rare cases (#1717).
 * Fixed potential memory leak when using async query.
-* Added a check to prevent removing a RealmChangeListener from a non-Looper thread (#1962). (Thank you @hohnamkung)
+* Added a check to prevent removing a RealmChangeListener from a non-Looper thread (#1962). (Thank you @hohnamkung.)
 
 ## 0.87.0 (2015-12-17)
 * Added Realm.asObservable(), RealmResults.asObservable(), RealmObject.asObservable(), DynamicRealm.asObservable() and DynamicRealmObject.asObservable().
@@ -937,7 +938,7 @@ No changes since 0.91.1.
 * Added Realm.isEmpty().
 * Setters in managed object for RealmObject and RealmList now throw IllegalArgumentException if the value contains an invalid (unmanaged, removed, closed, from different Realm) object (#1749).
 * Attempting to refresh a Realm while a transaction is in process will now throw an IllegalStateException (#1712).
-* The Realm AAR now also contains the ProGuard configuration (#1767). (Thank you @skyisle)
+* The Realm AAR now also contains the ProGuard configuration (#1767). (Thank you @skyisle.)
 * Updated Realm Core to 0.95.
   - Removed reliance on POSIX signals when using encryption.
 
@@ -959,7 +960,7 @@ No changes since 0.91.1.
 
 ## 0.84.0 (2015-10-22)
 * Added support for async queries and transactions.
-* Added support for parsing JSON Dates with timezone information. (Thank you @LateralKevin)
+* Added support for parsing JSON Dates with timezone information. (Thank you @LateralKevin.)
 * Added RealmQuery.isEmpty().
 * Added Realm.isClosed() method.
 * Added Realm.distinct() method.
@@ -1031,7 +1032,7 @@ No changes since 0.91.1.
 * Deprecated Realm.deleteFile(). It has been replaced by Realm.deleteRealm(RealmConfiguration).
 * Deprecated Realm.compactFile(). It has been replaced by Realm.compactRealm(RealmConfiguration).
 * RealmList.add(), RealmList.addAt() and RealmList.set() now copy unmanaged objects transparently into Realm.
-* Realm now works with Kotlin (M12+). (Thank you @cypressious)
+* Realm now works with Kotlin (M12+). (Thank you @cypressious.)
 * Fixed a performance regression introduced in 0.80.3 occurring during the validation of the Realm schema.
 * Added a check to give a better error message when null is used as value for a primary key.
 * Fixed unchecked cast warnings when building with Realm.
@@ -1045,7 +1046,7 @@ No changes since 0.91.1.
 * RealmChangedListener now also gets called on the same thread that did the commit.
 * Fixed bug where Realm.createOrUpdateWithJson() reset Date and Binary data to default values if not found in the JSON output.
 * Fixed a memory leak when using RealmBaseAdapter.
-* RealmBaseAdapter now allow RealmResults to be null. (Thanks @zaki50)
+* RealmBaseAdapter now allow RealmResults to be null. (Thanks @zaki50.)
 * Fixed a bug where a change to a model class (`RealmList<A>` to `RealmList<B>`) would not throw a RealmMigrationNeededException.
 * Fixed a bug where setting multiple RealmLists didn't remove the previously added objects.
 * Solved ConcurrentModificationException thrown when addChangeListener/removeChangeListener got called in the onChange. (Thanks @beeender)
diff --git a/examples/gradle/wrapper/gradle-wrapper.jar b/examples/gradle/wrapper/gradle-wrapper.jar
index 3c267da2ff..b938b9891b 100644
Binary files a/examples/gradle/wrapper/gradle-wrapper.jar and b/examples/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/examples/gradle/wrapper/gradle-wrapper.properties b/examples/gradle/wrapper/gradle-wrapper.properties
index 1e0de7e12a..6e5f7d4d82 100644
--- a/examples/gradle/wrapper/gradle-wrapper.properties
+++ b/examples/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:48:04 PDT 2017
+#Tue Aug 08 09:18:52 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar
index 77032c0114..1997dcaafe 100644
Binary files a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar and b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
index 908ce6212d..5b4d3bae5d 100644
--- a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:48:07 PDT 2017
+#Tue Aug 08 09:18:55 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 2bdcfd9171..555beb482c 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index e196fdbb69..55e3e0344d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:48:08 PDT 2017
+#Tue Aug 08 09:18:56 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradlew b/gradlew
index cccdd3d517..4f0d4910d0 100755
--- a/gradlew
+++ b/gradlew
@@ -160,6 +160,9 @@ save () {
     echo " "
 }
 APP_ARGS=$(save "$@")
+# Realm's work-around for a bug in Gradle 4.1 https://github.com/gradle/gradle/issues/2673
+APP_ARGS="${APP_ARGS} '--console=plain' \\
+ "
 
 # Collect all arguments for the java command, following the shell quoting and substitution rules
 eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar
index 2782ea1181..55420b622f 100644
Binary files a/library-benchmarks/gradle/wrapper/gradle-wrapper.jar and b/library-benchmarks/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
index 14d2d42bc0..db87399dd3 100644
--- a/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
+++ b/library-benchmarks/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:48:12 PDT 2017
+#Tue Aug 08 09:18:59 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.jar b/realm-annotations/gradle/wrapper/gradle-wrapper.jar
index 0917c8e850..fcb4ed4337 100644
Binary files a/realm-annotations/gradle/wrapper/gradle-wrapper.jar and b/realm-annotations/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.properties b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
index 6ff5b1f04b..79d8ff7b73 100644
--- a/realm-annotations/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:42:56 PDT 2017
+#Tue Aug 08 09:19:02 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.jar b/realm-transformer/gradle/wrapper/gradle-wrapper.jar
index 8dfdfad36e..47c7f9ed18 100644
Binary files a/realm-transformer/gradle/wrapper/gradle-wrapper.jar and b/realm-transformer/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.properties b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
index 6a7fa1e8ae..4381dc5c6a 100644
--- a/realm-transformer/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:48:24 PDT 2017
+#Tue Aug 08 09:19:04 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/realm.properties b/realm.properties
index bc8a4d5b07..3d842610f2 100644
--- a/realm.properties
+++ b/realm.properties
@@ -1,2 +1,2 @@
-gradleVersion=4.0.2
+gradleVersion=4.1
 ndkVersion=r10e
diff --git a/realm/gradle/wrapper/gradle-wrapper.jar b/realm/gradle/wrapper/gradle-wrapper.jar
index 787b1adea8..15c7b608fb 100644
Binary files a/realm/gradle/wrapper/gradle-wrapper.jar and b/realm/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm/gradle/wrapper/gradle-wrapper.properties b/realm/gradle/wrapper/gradle-wrapper.properties
index aea14c26fc..c3448f25a5 100644
--- a/realm/gradle/wrapper/gradle-wrapper.properties
+++ b/realm/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jul 31 16:48:20 PDT 2017
+#Tue Aug 08 09:19:01 JST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
index d1306b0652..0106d8ac2d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmSchemaTests.java
@@ -42,7 +42,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -322,4 +324,48 @@ public void remove_shouldRemoveInfoFromPKTable() {
         objectSchema.addPrimaryKey(PrimaryKeyAsString.FIELD_PRIMARY_KEY);
         assertEquals(PrimaryKeyAsString.FIELD_PRIMARY_KEY, objectSchema.getPrimaryKey());
     }
+
+    @Test
+    public void remove_shouldClearDynamicCache() {
+        if (type == SchemaType.IMMUTABLE) {
+            return;
+        }
+
+        realmSchema.create("foo");
+        // getSchemaForClass is an internal method, but used from DynamicRealmObject and RealmQuery
+        final RealmObjectSchema previousFoo = realmSchema.getSchemaForClass("foo");
+
+        realmSchema.remove("foo");
+
+        realmSchema.create("foo");
+        final RealmObjectSchema newFoo = realmSchema.getSchemaForClass("foo");
+
+        assertNotSame(previousFoo, newFoo);
+
+        try {
+            previousFoo.getClassName();
+            fail();
+        } catch (IllegalStateException ignored) {
+        }
+
+        assertEquals("foo", newFoo.getClassName());
+    }
+
+    @Test
+    public void rename_shouldUpdateDynamicCache() {
+        if (type == SchemaType.IMMUTABLE) {
+            return;
+        }
+
+        realmSchema.create("foo");
+        // getSchemaForClass is an internal method, but used from DynamicRealmObject and RealmQuery
+        final RealmObjectSchema foo = realmSchema.getSchemaForClass("foo");
+
+        realmSchema.rename("foo", "bar");
+
+        final RealmObjectSchema bar = realmSchema.getSchemaForClass("bar");
+
+        assertSame(foo, bar);
+        assertEquals("bar", bar.getClassName());
+    }
 }
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
index 32f8b61834..bc26df1be3 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
@@ -34,7 +34,9 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.util.List;
 import java.util.Map;
+import java.util.Iterator;
 import java.util.UUID;
 
 import io.realm.internal.network.AuthenticateResponse;
@@ -356,4 +358,49 @@ public void changePassword_noneAdminThrows() {
         thrown.expect(IllegalStateException.class);
         user.changePassword("user-id", "new-password");
     }
+
+    @Test
+    public void allSessions() {
+        String url1 = "realm://objectserver.realm.io/default";
+        String url2 = "realm://objectserver.realm.io/~/default";
+
+        SyncUser user = createTestUser();
+        assertEquals(0, user.allSessions().size());
+
+        SyncConfiguration configuration1 = new SyncConfiguration.Builder(user, url1).build();
+        Realm realm1 = Realm.getInstance(configuration1);
+        List<SyncSession> allSessions = user.allSessions();
+        assertEquals(1, allSessions.size());
+        Iterator<SyncSession> iter = allSessions.iterator();
+        SyncSession session = iter.next();
+        assertEquals(user, session.getUser());
+        assertEquals(url1, session.getServerUrl().toString());
+
+        SyncConfiguration configuration2 = new SyncConfiguration.Builder(user, url2).build();
+        Realm realm2 = Realm.getInstance(configuration2);
+        allSessions = user.allSessions();
+        assertEquals(2, allSessions.size());
+        iter = allSessions.iterator();
+        String individualUrl = url2.replace("~", user.getIdentity());
+        int foundCount = 0;
+        while (iter.hasNext()) {
+            session = iter.next();
+            assertEquals(user, session.getUser());
+            if (individualUrl.equals(session.getServerUrl().toString())) {
+                foundCount++;
+            }
+        }
+        assertEquals(1, foundCount);
+        realm1.close();
+
+        allSessions = user.allSessions();
+        assertEquals(1, allSessions.size());
+        iter = allSessions.iterator();
+        session = iter.next();
+        assertEquals(user, session.getUser());
+        assertEquals(individualUrl, session.getServerUrl().toString());
+
+        realm2.close();
+        assertEquals(0, user.allSessions().size());
+    }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
index fbc8f34db5..0de3679e5f 100644
--- a/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/MutableRealmSchema.java
@@ -66,6 +66,7 @@ public void remove(String className) {
             table.setPrimaryKey(null);
         }
         realm.getSharedRealm().removeTable(internalTableName);
+        removeFromClassNameToSchemaMap(internalTableName);
     }
 
     @Override
@@ -96,6 +97,12 @@ public RealmObjectSchema rename(String oldClassName, String newClassName) {
             table.setPrimaryKey(pkField);
         }
 
-        return new MutableRealmObjectSchema(realm, this, table);
+        RealmObjectSchema objectSchema = removeFromClassNameToSchemaMap(oldInternalName);
+        if (objectSchema == null || !objectSchema.getTable().isValid() || !objectSchema.getClassName().equals(newClassName)) {
+            objectSchema = new MutableRealmObjectSchema(realm, this, table);
+        }
+        putToClassNameToSchemaMap(newInternalName, objectSchema);
+
+        return objectSchema;
     }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCache.java b/realm/realm-library/src/main/java/io/realm/RealmCache.java
index a71d9b3161..9c40c7c890 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCache.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCache.java
@@ -358,7 +358,7 @@ private static RealmCache getCache(String realmPath, boolean createIfNotExist) {
 
             if (realmClass == Realm.class && refAndCount.globalCount == 0) {
                 // Stores a copy of local ColumnIndices as a global cache.
-                RealmCache.storeColumnIndices(typedColumnIndicesArray, realm.getSchema().getImmutableColumnIndicies());
+                RealmCache.storeColumnIndices(typedColumnIndicesArray, realm.getSchema().getImmutableColumnIndices());
             }
             // This is the first instance in current thread, increase the global count.
             refAndCount.globalCount++;
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index 5a0acbfdde..3060fb16c7 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -210,7 +210,7 @@ RealmObjectSchema getSchemaForClass(Class<? extends RealmModel> clazz) {
     RealmObjectSchema getSchemaForClass(String className) {
         String tableName = Table.getTableNameForClass(className);
         RealmObjectSchema dynamicSchema = dynamicClassToSchema.get(tableName);
-        if (dynamicSchema == null) {
+        if (dynamicSchema == null || !dynamicSchema.getTable().isValid() || !dynamicSchema.getClassName().equals(className)) {
             if (!realm.getSharedRealm().hasTable(tableName)) {
                 throw new IllegalArgumentException("The class " + className + " doesn't exist in this Realm.");
             }
@@ -268,7 +268,7 @@ private boolean isProxyClass(Class<? extends RealmModel> modelClass, Class<? ext
      * @return a new, thread-safe copy of this Schema's ColumnIndices.
      * @see ColumnIndices for the effectively final contract.
      */
-    final ColumnIndices getImmutableColumnIndicies() {
+    final ColumnIndices getImmutableColumnIndices() {
         checkIndices();
         return new ColumnIndices(columnIndices, false);
     }
@@ -292,6 +292,14 @@ protected final ColumnInfo getColumnInfo(String className) {
         return columnIndices.getColumnInfo(className);
     }
 
+    final void putToClassNameToSchemaMap(String name, RealmObjectSchema objectSchema) {
+        dynamicClassToSchema.put(name, objectSchema);
+    }
+
+    final RealmObjectSchema removeFromClassNameToSchemaMap(String name) {
+        return dynamicClassToSchema.remove(name);
+    }
+
     private void checkIndices() {
         if (!haveColumnInfo()) {
             throw new IllegalStateException("Attempt to use column index before set.");
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 4277e9d13e..91da2e53f4 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ArrayBlockingQueue;
@@ -229,6 +231,25 @@ private static synchronized void removeSession(SyncConfiguration syncConfigurati
         }
     }
 
+    /**
+     * Retruns the all valid sessions belonging to the user.
+     *
+     * @param syncUser the user to use.
+     * @return the all valid sessions belonging to the user.
+     */
+    static List<SyncSession> getAllSessions(SyncUser syncUser) {
+        if (syncUser == null) {
+            throw new IllegalArgumentException("A non-empty 'syncUser' is required.");
+        }
+        ArrayList<SyncSession> allSessions = new ArrayList<SyncSession>();
+        for (SyncSession syncSession : sessions.values()) {
+            if (syncSession.getState() != SyncSession.State.ERROR && syncSession.getUser().equals(syncUser)) {
+                allSessions.add(syncSession);
+            }
+        }
+        return allSessions;
+    }
+
     static AuthenticationServer getAuthServer() {
         return authServer;
     }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 7d0e7ece20..f31b525dc2 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -28,6 +28,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.Future;
@@ -583,6 +584,15 @@ public Realm getManagementRealm() {
         return Realm.getInstance(managementConfig.initAndGetManagementRealmConfig(syncUser, this));
     }
 
+    /**
+     * Returns all the valid sessions belonging to the user.
+     *
+     * @return the all valid sessions belong to the user.
+     */
+    public List<SyncSession> allSessions() {
+        return SyncManager.getAllSessions(this);
+    }
+
     /**
      * Returns the {@link URL} where this user was authenticated.
      *
diff --git a/tools/update_gradle_wrapper.sh b/tools/update_gradle_wrapper.sh
index 224817cf23..b20f7006b1 100755
--- a/tools/update_gradle_wrapper.sh
+++ b/tools/update_gradle_wrapper.sh
@@ -10,6 +10,8 @@ HERE=`pwd`
 
 cd "$(dirname $0)/.."
 
+pushd .
+
 for i in $(find $(pwd) -type f -name gradlew); do
     cd $(dirname $i)
     pwd
@@ -17,5 +19,13 @@ for i in $(find $(pwd) -type f -name gradlew); do
     sed -E -i '' s/-bin\\.zip\$/-all.zip/ gradle/wrapper/gradle-wrapper.properties
 done
 
+popd
+
+sed -i '' '/^APP_ARGS=/a\
+# Realm'"'"'s work-around for a bug in Gradle 4.1 https://github.com/gradle/gradle/issues/2673\
+APP_ARGS="\${APP_ARGS} '"'"'--console=plain'"'"' \\\\\
+\ "\
+' gradlew
+
 cd $HERE
 
