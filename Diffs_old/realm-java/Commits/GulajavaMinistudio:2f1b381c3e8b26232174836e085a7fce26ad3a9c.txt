diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5cffb2de46..218a261eb0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -43,12 +43,14 @@
 * Upgraded to Realm Core 3.0.0-rc5.
 * Always use Object Store to create primary key table.
 
+
 ## 4.0.0-BETA2 (2017-07-27)
 
 ### Bug Fixes
 
 * [ObjectServer] Realm no longer throws a native “unsupported instruction” exception in some cases when opening a synced Realm asynchronously (https://github.com/realm/realm-object-store/issues/502).
 
+
 ## 4.0.0-BETA1 (2017-07-13)
 
 ### Breaking Changes
@@ -78,6 +80,17 @@
 * Upgraded to Realm Core 3.0.0-rc3.
 
 
+## 3.7.3 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* Added support for ISO8601 2-digit time zone designators (#5309).
+
+### Credits
+
+Thanks to @JussiPekonen for adding support for 2-digit time zone designators when importing JSON (#5309).
+
+
 ## 3.7.2 (2017-09-12)
 
 ### Bug Fixes
@@ -86,6 +99,7 @@
 * Fixed a bug that `RealmList.deleteFromRealm(int)`, `RealmList.deleteFirstFromRealm()` and `RealmList.deleteLastFromRealm()` did not remove target objects from Realm. This bug was introduced in `3.7.1` (#5233).
 * Crash with "'xxx' doesn't exist in current schema." when ProGuard is enabled (#5211).
 
+
 ## 3.7.1 (2017-09-07)
 
 ### Bug Fixes
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/android/ISO8601UtilsTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/android/ISO8601UtilsTest.java
index 0fffbd9f57..492b34b359 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/android/ISO8601UtilsTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/android/ISO8601UtilsTest.java
@@ -123,6 +123,17 @@ public void testParseOptional() throws java.text.ParseException {
         assertEquals(dateZeroSecondAndMillis, d);
     }
 
+    public void testTimeZoneDesignator() throws java.text.ParseException {
+        Date d = ISO8601Utils.parse("2007-08-13T21:51+02:00", new ParsePosition(0));
+        assertEquals(dateZeroSecondAndMillis, d);
+
+        d = ISO8601Utils.parse("2007-08-13T21:51+0200", new ParsePosition(0));
+        assertEquals(dateZeroSecondAndMillis, d);
+
+        d = ISO8601Utils.parse("2007-08-13T21:51+02", new ParsePosition(0));
+        assertEquals(dateZeroSecondAndMillis, d);
+    }
+
     public void testParseRfc3339Examples() throws java.text.ParseException {
         // Two digit milliseconds.
         Date d = ISO8601Utils.parse("1985-04-12T23:20:50.52Z", new ParsePosition(0));
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java
index 60b25da8fe..16ceef31c0 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmMigrationTests.java
@@ -19,19 +19,27 @@
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
 import io.realm.entities.IndexedFields;
 import io.realm.entities.PrimaryKeyAsString;
 import io.realm.entities.StringOnly;
+import io.realm.internal.OsObjectSchemaInfo;
+import io.realm.internal.OsRealmConfig;
+import io.realm.internal.OsSchemaInfo;
+import io.realm.internal.SharedRealm;
 import io.realm.exceptions.IncompatibleSyncedFileException;
 import io.realm.objectserver.utils.StringOnlyModule;
 import io.realm.rule.TestSyncConfigurationFactory;
@@ -51,6 +59,8 @@
 
     @Rule
     public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory();
+    @Rule
+    public final ExpectedException thrown = ExpectedException.none();
 
     @BeforeClass
     public static void beforeClass () {
@@ -135,30 +145,26 @@ public void missingFields_hiddenSilently() {
 
     // Check that a Realm cannot be opened if it contain breaking schema changes, like changing a primary key
     @Test
-    @Ignore("This test will throw earlier when trying to add a PK field. That case is already covered by" +
-            " SchemaTest.addField_withPrimaryKeyModifier_notAllowed(). Although this test will still be valuable for" +
-            "Object Store schema integration.")
-    // FIXME: Enabled this after OS schema integration.
     public void breakingSchemaChange_throws() {
         SyncConfiguration config = configFactory.createSyncConfigurationBuilder(SyncTestUtils.createTestUser(), "http://foo.com/auth")
                 .schema(PrimaryKeyAsString.class)
                 .build();
 
         // Setup initial Realm schema (with a different primary key)
-        DynamicRealm dynamicRealm = DynamicRealm.getInstance(config);
-        RealmSchema schema = dynamicRealm.getSchema();
-        dynamicRealm.beginTransaction();
-        schema.create(PrimaryKeyAsString.class.getSimpleName())
-                .addField(PrimaryKeyAsString.FIELD_PRIMARY_KEY, String.class)
-                .addField(PrimaryKeyAsString.FIELD_ID, long.class, FieldAttribute.PRIMARY_KEY);
-        dynamicRealm.commitTransaction();
-        dynamicRealm.close();
-
-        try {
-            Realm.getInstance(config);
-            fail();
-        } catch (IllegalStateException ignored) {
-        }
+        OsObjectSchemaInfo expectedObjectSchema = new OsObjectSchemaInfo.Builder(PrimaryKeyAsString.CLASS_NAME)
+                .addPersistedProperty(PrimaryKeyAsString.FIELD_PRIMARY_KEY, RealmFieldType.STRING, false, true, false)
+                .addPersistedProperty(PrimaryKeyAsString.FIELD_ID, RealmFieldType.INTEGER, true, true, true)
+                .build();
+        List<OsObjectSchemaInfo> list = new ArrayList<OsObjectSchemaInfo>();
+        list.add(expectedObjectSchema);
+        OsSchemaInfo schemaInfo = new OsSchemaInfo(list);
+        OsRealmConfig.Builder configBuilder = new OsRealmConfig.Builder(config).schemaInfo(schemaInfo);
+        SharedRealm.getInstance(configBuilder).close();
+
+        thrown.expectMessage(
+                CoreMatchers.containsString("The following changes cannot be made in additive-only schema mode:"));
+        thrown.expect(IllegalStateException.class);
+        Realm.getInstance(config);
     }
 
     // Check that indexes are not being added if the schema version is the same
diff --git a/realm/realm-library/src/main/java/io/realm/internal/android/ISO8601Utils.java b/realm/realm-library/src/main/java/io/realm/internal/android/ISO8601Utils.java
index 1a2c0fba4c..d430757548 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/android/ISO8601Utils.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/android/ISO8601Utils.java
@@ -158,6 +158,10 @@ public static Date parse(String date, ParsePosition pos) throws ParseException {
             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
                 String timezoneOffset = date.substring(offset);
                 offset += timezoneOffset.length();
+                // Convert 2-digit time zone designator to 4-digit designator
+                if (timezoneOffset.length() == 3) {
+                    timezoneOffset += "00";
+                }
                 // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
                 if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
                     timezone = TIMEZONE_Z;
