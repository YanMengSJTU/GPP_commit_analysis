diff --git a/Jenkinsfile b/Jenkinsfile
index b1613502e4..dc74785a4d 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -51,7 +51,7 @@ try {
                 }
               } finally {
                 storeJunitResults 'realm/realm-annotations-processor/build/test-results/test/TEST-*.xml'
-                // storeJunitResults 'examples/unitTestExample/build/test-results/**/TEST-*.xml' FIXME when updating examples
+                storeJunitResults 'examples/unitTestExample/build/test-results/**/TEST-*.xml'
                 step([$class: 'LintPublisher'])
               }
             }
diff --git a/examples/newsreaderExample/build.gradle b/examples/newsreaderExample/build.gradle
index a1b3fdb34c..c62c2d757f 100644
--- a/examples/newsreaderExample/build.gradle
+++ b/examples/newsreaderExample/build.gradle
@@ -13,6 +13,7 @@ android {
         versionCode 1
         versionName "1.0"
     }
+
     buildTypes {
         release {
             // FIXME: Fix the proguard with 3rd party libs
@@ -20,32 +21,39 @@ android {
             signingConfig signingConfigs.debug
         }
     }
+
     command {
         monkey.events 2000
     }
+
     lintOptions {
         disable 'InvalidPackage'
     }
+
     packagingOptions {
         exclude 'META-INF/services/javax.annotation.processing.Processor'
         exclude 'META-INF/NOTICE'
         exclude 'META-INF/LICENSE'
     }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
-    implementation fileTree(dir: 'libs', include: ['*.jar'])
     //noinspection GradleDependency
     implementation 'com.android.support:appcompat-v7:26.0.1'
     //noinspection GradleDependency
     implementation 'com.android.support:design:26.0.1'
-    implementation 'io.reactivex:rxjava:1.1.0'
-    implementation 'io.reactivex:rxandroid:1.1.0'
-    implementation 'com.squareup.retrofit:retrofit:2.0.0-beta2'
-    implementation 'com.squareup.retrofit:converter-jackson:2.0.0-beta2'
-    implementation 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
     implementation 'com.jakewharton.timber:timber:4.1.0'
     implementation 'com.jakewharton:butterknife:8.5.1'
-    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
+    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
+    implementation 'com.squareup.retrofit2:converter-jackson:2.3.0'
+    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
+    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
+    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
     implementation 'me.zhanghai.android.materialprogressbar:library:1.1.4'
+    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
 }
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/NewsReaderApplication.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/NewsReaderApplication.java
index 77674d9c2b..7bba7cdf16 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/NewsReaderApplication.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/NewsReaderApplication.java
@@ -19,10 +19,9 @@
 import android.app.Application;
 import android.content.Context;
 
+import io.reactivex.plugins.RxJavaPlugins;
 import io.realm.Realm;
 import io.realm.RealmConfiguration;
-import rx.plugins.RxJavaErrorHandler;
-import rx.plugins.RxJavaPlugins;
 import timber.log.Timber;
 
 public abstract class NewsReaderApplication extends Application {
@@ -35,13 +34,7 @@ public void onCreate() {
         context = this;
 
         initializeTimber();
-        RxJavaPlugins.getInstance().registerErrorHandler(new RxJavaErrorHandler() {
-            @Override
-            public void handleError(Throwable e) {
-                super.handleError(e);
-                Timber.e(e.toString());
-            }
-        });
+        RxJavaPlugins.setErrorHandler(throwable -> Timber.e(throwable.toString()));
 
         // Configure default configuration for Realm
         Realm.init(this);
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Model.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Model.java
index bfd914f6ad..401ba2ac0a 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Model.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Model.java
@@ -22,10 +22,10 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import io.reactivex.Flowable;
+import io.reactivex.Observable;
 import io.realm.RealmResults;
 import io.realm.examples.newsreader.model.entity.NYTimesStory;
-import rx.Observable;
-import rx.functions.Func1;
 
 /**
  * Model class for handling the business rules of the app.
@@ -78,7 +78,7 @@ private Model(Repository repository) {
     /**
      * Returns the news feed for the currently selected category.
      */
-    public Observable<RealmResults<NYTimesStory>> getSelectedNewsFeed() {
+    public Flowable<RealmResults<NYTimesStory>> getSelectedNewsFeed() {
         return repository.loadNewsFeed(selectedSection, false);
     }
 
@@ -106,20 +106,14 @@ public void markAsRead(@NonNull String storyId, boolean read) {
     /**
      * Returns the story with the given Id
      */
-    public Observable<NYTimesStory> getStory(@NonNull final String storyId) {
+    public Flowable<NYTimesStory> getStory(@NonNull final String storyId) {
         // Repository is only responsible for loading the data
         // Any validation is done by the model
         // See http://blog.danlew.net/2015/12/08/error-handling-in-rxjava/
         if (TextUtils.isEmpty(storyId)) {
             throw new IllegalArgumentException("Invalid storyId: " + storyId);
         }
-        return repository.loadStory(storyId)
-                .filter(new Func1<NYTimesStory, Boolean>() {
-                    @Override
-                    public Boolean call(NYTimesStory story) {
-                        return story.isValid();
-                    }
-                });
+        return repository.loadStory(storyId).filter(story -> story.isValid());
     }
 
     /**
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Repository.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Repository.java
index ab86adcbac..dc75037989 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Repository.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/Repository.java
@@ -24,6 +24,9 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
+import io.reactivex.Flowable;
+import io.reactivex.Observable;
+import io.reactivex.subjects.BehaviorSubject;
 import io.realm.Realm;
 import io.realm.RealmResults;
 import io.realm.Sort;
@@ -31,9 +34,6 @@
 import io.realm.examples.newsreader.R;
 import io.realm.examples.newsreader.model.entity.NYTimesStory;
 import io.realm.examples.newsreader.model.network.NYTimesDataLoader;
-import rx.Observable;
-import rx.functions.Func1;
-import rx.subjects.BehaviorSubject;
 import timber.log.Timber;
 
 /**
@@ -51,7 +51,7 @@
     private final NYTimesDataLoader dataLoader;
     private final String apiKey;
     private Map<String, Long> lastNetworkRequest = new HashMap<>();
-    private BehaviorSubject<Boolean> networkLoading = BehaviorSubject.create(false);
+    private BehaviorSubject<Boolean> networkLoading = BehaviorSubject.createDefault(false);
 
     @UiThread
     public Repository() {
@@ -67,14 +67,14 @@ public Repository() {
      */
     @UiThread
     public Observable<Boolean> networkInUse() {
-        return networkLoading.asObservable();
+        return networkLoading.hide();
     }
 
     /**
      * Loads the news feed as well as all future updates.
      */
     @UiThread
-    public Observable<RealmResults<NYTimesStory>> loadNewsFeed(@NonNull String sectionKey, boolean forceReload) {
+    public Flowable<RealmResults<NYTimesStory>> loadNewsFeed(@NonNull String sectionKey, boolean forceReload) {
         // Start loading data from the network if needed
         // It will put all data into Realm
         if (forceReload || timeSinceLastNetworkRequest(sectionKey) > MINIMUM_NETWORK_WAIT_SEC) {
@@ -84,9 +84,10 @@ public Repository() {
 
         // Return the data in Realm. The query result will be automatically updated when the network requests
         // save data in Realm
-        return realm.where(NYTimesStory.class).equalTo(NYTimesStory.API_SECTION, sectionKey)
+        return realm.where(NYTimesStory.class)
+                .equalTo(NYTimesStory.API_SECTION, sectionKey)
                 .findAllSortedAsync(NYTimesStory.PUBLISHED_DATE, Sort.DESCENDING)
-                .asObservable();
+                .asFlowable();
     }
 
     private long timeSinceLastNetworkRequest(@NonNull String sectionKey) {
@@ -128,15 +129,10 @@ public void onError(Throwable throwable) {
      * Returns story details
      */
     @UiThread
-    public Observable<NYTimesStory> loadStory(final String storyId) {
+    public Flowable<NYTimesStory> loadStory(final String storyId) {
         return realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL, storyId).findFirstAsync()
-                .<NYTimesStory>asObservable()
-                .filter(new Func1<NYTimesStory, Boolean>() {
-                    @Override
-                    public Boolean call(NYTimesStory story) {
-                        return story.isLoaded();
-                    }
-                });
+                .<NYTimesStory>asFlowable()
+                .filter(story -> story.isLoaded());
     }
 
     /**
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesDataLoader.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesDataLoader.java
index c9be445097..7e3d6a4624 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesDataLoader.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesDataLoader.java
@@ -24,15 +24,15 @@
 import java.util.List;
 import java.util.Locale;
 
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.functions.Consumer;
+import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subjects.BehaviorSubject;
 import io.realm.Realm;
 import io.realm.examples.newsreader.model.entity.NYTimesStory;
-import retrofit.JacksonConverterFactory;
-import retrofit.Retrofit;
-import retrofit.RxJavaCallAdapterFactory;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.functions.Action1;
-import rx.schedulers.Schedulers;
-import rx.subjects.BehaviorSubject;
+import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
+import retrofit2.converter.jackson.JacksonConverterFactory;
+import retrofit2.Retrofit;
 import timber.log.Timber;
 
 /**
@@ -49,7 +49,7 @@
 
     public NYTimesDataLoader() {
         Retrofit retrofit = new Retrofit.Builder()
-                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
+                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                 .addConverterFactory(JacksonConverterFactory.create())
                 .baseUrl("http://api.nytimes.com/")
                 .build();
@@ -69,19 +69,13 @@ private void loadNextSection(@NonNull final String sectionKey) {
         nyTimesService.topStories(sectionKey, apiKey)
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Action1<NYTimesResponse<List<NYTimesStory>>>() {
-                    @Override
-                    public void call(NYTimesResponse<List<NYTimesStory>> response) {
-                        Timber.d("Success - Data received: %s", sectionKey);
-                        processAndAddData(realm, response.section, response.results);
-                        networkInUse.onNext(false);
-                    }
-                }, new Action1<Throwable>() {
-                    @Override
-                    public void call(Throwable throwable) {
-                        networkInUse.onNext(false);
-                        Timber.d("Failure: Data not loaded: %s - %s", sectionKey, throwable.toString());
-                    }
+                .subscribe(response -> {
+                    Timber.d("Success - Data received: %s", sectionKey);
+                    processAndAddData(realm, response.section, response.results);
+                    networkInUse.onNext(false);
+                }, throwable -> {
+                    networkInUse.onNext(false);
+                    Timber.d("Failure: Data not loaded: %s - %s", sectionKey, throwable.toString());
                 });
     }
 
@@ -89,35 +83,27 @@ public void call(Throwable throwable) {
     private void processAndAddData(final Realm realm, final String sectionKey, final List<NYTimesStory> stories) {
         if (stories.isEmpty()) return;
 
-        realm.executeTransactionAsync(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                for (NYTimesStory story : stories) {
-                    Date parsedPublishedDate = inputDateFormat.parse(story.getPublishedDate(), new ParsePosition(0));
-                    story.setSortTimeStamp(parsedPublishedDate.getTime());
-                    story.setPublishedDate(outputDateFormat.format(parsedPublishedDate));
+        realm.executeTransactionAsync(r -> {
+            for (NYTimesStory story : stories) {
+                Date parsedPublishedDate = inputDateFormat.parse(story.getPublishedDate(), new ParsePosition(0));
+                story.setSortTimeStamp(parsedPublishedDate.getTime());
+                story.setPublishedDate(outputDateFormat.format(parsedPublishedDate));
 
-                    // Find existing story in Realm (if any)
-                    // If it exists, we need to merge the local state with the remote, because the local state
-                    // contains more info than is available on the server.
-                    NYTimesStory persistedStory = realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL, story.getUrl()).findFirst();
-                    if (persistedStory != null) {
-                        // Only local state is the `read` boolean.
-                        story.setRead(persistedStory.isRead());
-                   }
+                // Find existing story in Realm (if any)
+                // If it exists, we need to merge the local state with the remote, because the local state
+                // contains more info than is available on the server.
+                NYTimesStory persistedStory = r.where(NYTimesStory.class).equalTo(NYTimesStory.URL, story.getUrl()).findFirst();
+                if (persistedStory != null) {
+                    // Only local state is the `read` boolean.
+                    story.setRead(persistedStory.isRead());
+                }
 
-                    // Only create or update the local story if needed
-                    if (persistedStory == null || !persistedStory.getUpdatedDate().equals(story.getUpdatedDate())) {
-                        story.setApiSection(sectionKey);
-                        realm.copyToRealmOrUpdate(story);
-                    }
+                // Only create or update the local story if needed
+                if (persistedStory == null || !persistedStory.getUpdatedDate().equals(story.getUpdatedDate())) {
+                    story.setApiSection(sectionKey);
+                    r.copyToRealmOrUpdate(story);
                 }
             }
-        }, new Realm.Transaction.OnError() {
-            @Override
-            public void onError(Throwable throwable) {
-                Timber.e(throwable, "Could not save data");
-            }
-        });
+        }, throwable -> Timber.e(throwable, "Could not save data"));
     }
 }
\ No newline at end of file
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesService.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesService.java
index a234cfede0..41c799c578 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesService.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/NYTimesService.java
@@ -19,11 +19,11 @@
 
 import java.util.List;
 
+import io.reactivex.Observable;
 import io.realm.examples.newsreader.model.entity.NYTimesStory;
-import retrofit.http.GET;
-import retrofit.http.Path;
-import retrofit.http.Query;
-import rx.Observable;
+import retrofit2.http.GET;
+import retrofit2.http.Path;
+import retrofit2.http.Query;
 
 /**
  * Retrofit interface for the New York Times WebService
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/RealmListNYTimesMultimediumDeserializer.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/RealmListNYTimesMultimediumDeserializer.java
index 9db49e3b1f..e0626af31f 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/RealmListNYTimesMultimediumDeserializer.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/model/network/RealmListNYTimesMultimediumDeserializer.java
@@ -32,17 +32,17 @@
 
 public class RealmListNYTimesMultimediumDeserializer extends JsonDeserializer<List<NYTimesMultimedium>> {
 
-    ObjectMapper objectMapper;
+    private ObjectMapper objectMapper;
 
     public RealmListNYTimesMultimediumDeserializer() {
         objectMapper = new ObjectMapper();
     }
 
     @Override
-    public List<NYTimesMultimedium> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
+    public List<NYTimesMultimedium> deserialize(JsonParser parser, DeserializationContext context) throws IOException {
         RealmList<NYTimesMultimedium> list = new RealmList<>();
 
-        TreeNode treeNode = jp.getCodec().readTree(jp);
+        TreeNode treeNode = parser.getCodec().readTree(parser);
         if (!(treeNode instanceof ArrayNode)) {
             return list;
         }
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsActivity.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsActivity.java
index 5222153ecf..99e6d0b499 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsActivity.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsActivity.java
@@ -58,7 +58,7 @@ protected void onCreate(Bundle savedInstanceState) {
         // Setup initial views
         setContentView(R.layout.activity_details);
         ButterKnife.bind(this);
-        toolbar = (Toolbar) findViewById(R.id.toolbar);
+        toolbar = findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
         loaderView.setVisibility(View.VISIBLE);
 
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsPresenter.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsPresenter.java
index 0efde8359c..d5c36c1e7c 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsPresenter.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/details/DetailsPresenter.java
@@ -18,14 +18,12 @@
 
 import java.util.concurrent.TimeUnit;
 
+import io.reactivex.Observable;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
 import io.realm.examples.newsreader.model.Model;
-import io.realm.examples.newsreader.model.entity.NYTimesStory;
 import io.realm.examples.newsreader.ui.Presenter;
-import rx.Observable;
-import rx.Subscription;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.functions.Action1;
-import rx.subscriptions.CompositeSubscription;
 
 /**
  * Presenter class for controlling the Main Activity
@@ -35,7 +33,7 @@
     private final DetailsActivity view;
     private final Model model;
     private final String storyId;
-    private CompositeSubscription subscriptions;
+    private CompositeDisposable compositeDisposable = new CompositeDisposable();
 
     public DetailsPresenter(DetailsActivity detailsActivity, Model model, String storyId) {
         this.storyId = storyId;
@@ -51,32 +49,24 @@ public void onCreate() {
     @Override
     public void onResume() {
         // Show story details
-        Subscription detailsSubscription = model.getStory(storyId)
-                .subscribe(new Action1<NYTimesStory>() {
-                    @Override
-                    public void call(NYTimesStory story) {
-                        view.hideLoader();
-                        view.showStory(story);
-                        view.setRead(story.isRead());
-                    }
+        Disposable detailsDisposable = model.getStory(storyId)
+                .subscribe(story -> {
+                    view.hideLoader();
+                    view.showStory(story);
+                    view.setRead(story.isRead());
                 });
+        compositeDisposable.add(detailsDisposable);
 
         // Mark story as read if screen is visible for 2 seconds
-        Subscription timerSubscription = Observable.timer(2, TimeUnit.SECONDS)
+        Disposable timberDisposable = Observable.timer(2, TimeUnit.SECONDS)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Action1<Long>() {
-                    @Override
-                    public void call(Long aLong) {
-                        model.markAsRead(storyId, true);
-                    }
-                });
-        
-        subscriptions = new CompositeSubscription(detailsSubscription, timerSubscription);
+                .subscribe(aLong -> model.markAsRead(storyId, true));
+        compositeDisposable.add(timberDisposable);
     }
 
     @Override
     public void onPause() {
-        subscriptions.unsubscribe();
+        compositeDisposable.clear();
     }
 
     @Override
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainActivity.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainActivity.java
index fd6030a7c0..41b2d41c10 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainActivity.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainActivity.java
@@ -58,26 +58,16 @@ protected void onCreate(Bundle savedInstanceState) {
         // Setup initial views
         setContentView(R.layout.activity_main);
         ButterKnife.bind(this);
-        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        Toolbar toolbar = findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
         //noinspection ConstantConditions
         getSupportActionBar().setDisplayShowTitleEnabled(false);
 
         adapter = null;
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                presenter.listItemSelected(position);
-            }
-        });
+        listView.setOnItemClickListener((parent, view, position, id) -> presenter.listItemSelected(position));
         listView.setEmptyView(getLayoutInflater().inflate(R.layout.common_emptylist, listView, false));
 
-        refreshView.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
-            @Override
-            public void onRefresh() {
-                presenter.refreshList();
-            }
-        });
+        refreshView.setOnRefreshListener(() -> presenter.refreshList());
         progressBar.setVisibility(View.INVISIBLE);
 
         // After setup, notify presenter
diff --git a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainPresenter.java b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainPresenter.java
index e9d3a840f4..96cd119a4f 100644
--- a/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainPresenter.java
+++ b/examples/newsreaderExample/src/main/java/io/realm/examples/newsreader/ui/main/MainPresenter.java
@@ -21,17 +21,14 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
 
-import io.realm.RealmResults;
+import io.reactivex.disposables.Disposable;
 import io.realm.examples.newsreader.model.Model;
 import io.realm.examples.newsreader.model.entity.NYTimesStory;
 import io.realm.examples.newsreader.ui.Presenter;
 import io.realm.examples.newsreader.ui.details.DetailsActivity;
-import rx.Subscription;
-import rx.functions.Action1;
 
 /**
  * Presenter class for controlling the Main Activity
@@ -42,8 +39,8 @@
     private final Model model;
     private List<NYTimesStory> storiesData;
     private Map<String, String> sections;
-    private Subscription loaderSubscription;
-    private Subscription listDataSubscription;
+    private Disposable loaderDisposable;
+    private Disposable listDataDisposable;
 
     public MainPresenter(MainActivity mainActivity, Model model) {
         this.view = mainActivity;
@@ -55,34 +52,24 @@ public void onCreate() {
         sections = model.getSections();
         // Sort sections alphabetically, but always have Home at the top
         ArrayList<String> sectionList = new ArrayList<>(sections.values());
-        Collections.sort(sectionList, new Comparator<String>() {
-            @Override
-            public int compare(String lhs, String rhs) {
-                if (lhs.equals("Home")) return -1;
-                if (rhs.equals("Home")) return 1;
-                return lhs.compareToIgnoreCase(rhs);
-            }
+        Collections.sort(sectionList, (lhs, rhs) -> {
+            if (lhs.equals("Home")) return -1;
+            if (rhs.equals("Home")) return 1;
+            return lhs.compareToIgnoreCase(rhs);
         });
         view.configureToolbar(sectionList);
     }
 
     @Override
     public void onResume() {
-        loaderSubscription = model.isNetworkUsed()
-                .subscribe(new Action1<Boolean>() {
-                    @Override
-                    public void call(Boolean networkInUse) {
-                        view.showNetworkLoading(networkInUse);
-                    }
-                });
-
+        loaderDisposable = model.isNetworkUsed().subscribe(networkInUse -> view.showNetworkLoading(networkInUse));
         sectionSelected(model.getCurrentSectionKey());
     }
 
     @Override
     public void onPause() {
-        loaderSubscription.unsubscribe();
-        listDataSubscription.unsubscribe();
+        loaderDisposable.dispose();
+        listDataDisposable.dispose();
     }
 
     @Override
@@ -111,16 +98,13 @@ public void titleSpinnerSectionSelected(@NonNull String sectionLabel) {
 
     private void sectionSelected(@NonNull String sectionKey) {
         model.selectSection(sectionKey);
-        if (listDataSubscription != null) {
-            listDataSubscription.unsubscribe();
+        if (listDataDisposable != null) {
+            listDataDisposable.dispose();
         }
-        listDataSubscription = model.getSelectedNewsFeed()
-                .subscribe(new Action1<RealmResults<NYTimesStory>>() {
-                    @Override
-                    public void call(RealmResults<NYTimesStory> stories) {
-                        storiesData = stories;
-                        view.showList(stories);
-                    }
+        listDataDisposable = model.getSelectedNewsFeed()
+                .subscribe(stories -> {
+                    storiesData = stories;
+                    view.showList(stories);
                 });
     }
 }
diff --git a/examples/rxJavaExample/build.gradle b/examples/rxJavaExample/build.gradle
index 070174b3b4..2a0393b8ab 100644
--- a/examples/rxJavaExample/build.gradle
+++ b/examples/rxJavaExample/build.gradle
@@ -28,11 +28,23 @@ android {
     command {
         monkey.events 2000
     }
+
+    packagingOptions {
+        exclude 'META-INF/LICENSE'
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
-    implementation 'io.reactivex:rxandroid:1.1.0'
-    implementation 'io.reactivex:rxjava:1.1.0'
-    implementation 'com.jakewharton.rxbinding:rxbinding:0.3.0'
-    implementation 'com.squareup.retrofit:retrofit:1.9.0'
+    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
+    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
+    implementation 'com.android.support:appcompat-v7:26.0.1'
+    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
+    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
+    implementation 'com.squareup.retrofit2:converter-jackson:2.3.0'
+    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
 }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java
index 91bd8f5d2c..dfd5532375 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java
@@ -19,7 +19,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
-import android.view.View;
+import android.support.v7.app.AppCompatActivity;
 import android.view.ViewGroup;
 import android.widget.Button;
 
@@ -31,7 +31,7 @@
 import io.realm.examples.rxjava.retrofit.RetrofitExample;
 import io.realm.examples.rxjava.throttle.ThrottleSearchActivity;
 
-public class MainActivity extends Activity {
+public class MainActivity extends AppCompatActivity {
 
     private ViewGroup container;
     private final TreeMap<String, Class<? extends Activity>> buttons = new TreeMap<String, Class<? extends Activity>>() {{
@@ -45,7 +45,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
-        container = (ViewGroup) findViewById(R.id.list);
+        container = findViewById(R.id.list);
         setupButtons();
     }
 
@@ -53,12 +53,7 @@ private void setupButtons() {
         for (final Map.Entry<String, Class<? extends Activity>> entry : buttons.entrySet()) {
             Button button = new Button(this);
             button.setText(entry.getKey());
-            button.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    startActivity(entry.getValue());
-                }
-            });
+            button.setOnClickListener(view -> startActivity(entry.getValue()));
             container.addView(button);
         }
     }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java
index 9ac0f17b60..52ed89fdb1 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java
@@ -28,7 +28,6 @@
 
 public class MyApplication extends Application {
 
-    private static MyApplication context;
     private static final TreeMap<String, String> testPersons = new TreeMap<>();
     static {
         testPersons.put("Chris", null);
@@ -39,12 +38,12 @@
         testPersons.put("Donn", "donnfelker");
         testPersons.put("Nabil", "nhachicha");
         testPersons.put("Ron", null);
+        testPersons.put("Leonardo", "dalinaum");
     }
 
     @Override
     public void onCreate() {
         super.onCreate();
-        context = this;
         Realm.init(this);
         RealmConfiguration config = new RealmConfiguration.Builder().build();
         Realm.deleteRealm(config);
@@ -54,23 +53,16 @@ public void onCreate() {
 
     // Create test data
     private void createTestData() {
-        final Random r = new Random(42);
+        final Random random = new Random(42);
         Realm realm = Realm.getDefaultInstance();
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                for (Map.Entry<String, String> entry : testPersons.entrySet()) {
-                    Person p = realm.createObject(Person.class);
-                    p.setName(entry.getKey());
-                    p.setGithubUserName(entry.getValue());
-                    p.setAge(r.nextInt(100));
-                }
+        realm.executeTransaction(r -> {
+            for (Map.Entry<String, String> entry : testPersons.entrySet()) {
+                Person p = r.createObject(Person.class);
+                p.setName(entry.getKey());
+                p.setGithubUserName(entry.getValue());
+                p.setAge(random.nextInt(100));
             }
         });
         realm.close();
     }
-
-    public static MyApplication getContext() {
-        return context;
-    }
 }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java
index ebcb5e1a05..291c5b5fba 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java
@@ -16,35 +16,31 @@
 
 package io.realm.examples.rxjava.animation;
 
-import android.app.Activity;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
 import java.util.concurrent.TimeUnit;
 
+import io.reactivex.Flowable;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.Disposable;
 import io.realm.Realm;
-import io.realm.RealmResults;
 import io.realm.examples.rxjava.R;
 import io.realm.examples.rxjava.model.Person;
-import rx.Observable;
-import rx.Subscription;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.functions.Action1;
-import rx.functions.Func1;
-import rx.functions.Func2;
 
-public class AnimationActivity extends Activity {
+public class AnimationActivity extends AppCompatActivity {
 
     private Realm realm;
-    private Subscription subscription;
+    private Disposable disposable;
     private ViewGroup container;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_animations);
-        container = (ViewGroup) findViewById(R.id.list);
+        container = findViewById(R.id.list);
         realm = Realm.getDefaultInstance();
     }
 
@@ -55,34 +51,21 @@ protected void onResume() {
         // Load all persons and start inserting them with 1 sec. intervals.
         // All RealmObject access has to be done on the same thread `findAllAsync` was called on.
         // Warning: This example doesn't handle back pressure well.
-        subscription = realm.where(Person.class).findAllAsync().asObservable()
-                .flatMap(new Func1<RealmResults<Person>, Observable<Person>>() {
-                    @Override
-                    public Observable<Person> call(RealmResults<Person> persons) {
-                        return Observable.from(persons);
-                    }
-                })
-                .zipWith(Observable.interval(1, TimeUnit.SECONDS), new Func2<Person, Long, Person>() {
-                    @Override
-                    public Person call(Person person, Long tick) {
-                        return person;
-                    }
-                })
+        disposable = realm.where(Person.class).findAllAsync().asFlowable()
+                .flatMap(persons -> Flowable.fromIterable(persons))
+                .zipWith(Flowable.interval(1, TimeUnit.SECONDS), (person, tick) -> person)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Action1<Person>() {
-                    @Override
-                    public void call(Person person) {
-                        TextView personView = new TextView(AnimationActivity.this);
-                        personView.setText(person.getName());
-                        container.addView(personView);
-                    }
+                .subscribe(person -> {
+                    TextView personView = new TextView(AnimationActivity.this);
+                    personView.setText(person.getName());
+                    container.addView(personView);
                 });
     }
 
     @Override
     protected void onPause() {
         super.onPause();
-        subscription.unsubscribe();
+        disposable.dispose();
     }
 
     @Override
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java
index fcfd43d85e..4a269e0dd2 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java
@@ -16,24 +16,21 @@
 
 package io.realm.examples.rxjava.gotchas;
 
-import android.app.Activity;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-import java.util.List;
 import java.util.Random;
 
+import io.reactivex.Flowable;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
 import io.realm.Realm;
 import io.realm.Sort;
 import io.realm.examples.rxjava.R;
 import io.realm.examples.rxjava.model.Person;
-import rx.Observable;
-import rx.Subscription;
-import rx.functions.Action1;
-import rx.functions.Func1;
-import rx.schedulers.Schedulers;
-import rx.subscriptions.CompositeSubscription;
 
 /**
  * This class shows some of the current obstacles when combining RxJava and Realm. 2 things are
@@ -52,151 +49,95 @@
  * - https://github.com/realm/realm-java/issues/1208
  * - https://github.com/realm/realm-java/issues/931
  */
-public class GotchasActivity extends Activity {
+public class GotchasActivity extends AppCompatActivity {
     private Realm realm;
-    private Subscription subscription;
+    private CompositeDisposable compositeDisposable = new CompositeDisposable();
     private ViewGroup container;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_gotchas);
-        container = (ViewGroup) findViewById(R.id.list);
+        container = findViewById(R.id.list);
         realm = Realm.getDefaultInstance();
     }
 
     @Override
     protected void onResume() {
         super.onResume();
-
-        Subscription distinctSubscription = testDistinct();
-        Subscription bufferSubscription = testBuffer();
-        Subscription subscribeOnSubscription = testSubscribeOn();
+        testDistinct();
+        testBuffer();
+        testSubscribeOn();
 
         // Trigger updates
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                realm.where(Person.class).findAllSorted( "name", Sort.ASCENDING).get(0).setAge(new Random().nextInt(100));
-            }
-        });
-
-        subscription = new CompositeSubscription(
-                distinctSubscription,
-                bufferSubscription,
-                subscribeOnSubscription
-        );
+        realm.executeTransaction(r ->
+                r.where(Person.class).findAllSorted( "name", Sort.ASCENDING).get(0).setAge(new Random().nextInt(100)));
     }
 
     /**
      * Shows how to be careful with `subscribeOn()`
      */
-    private Subscription testSubscribeOn() {
-        Subscription subscribeOn = realm.asObservable()
-                .map(new Func1<Realm, Person>() {
-                    @Override
-                    public Person call(Realm realm) {
-                        return realm.where(Person.class).findAllSorted("name").get(0);
-                    }
-                })
+    private void testSubscribeOn() {
+        Disposable subscribeOnDisposable = realm.asFlowable()
+                .map(realm -> realm.where(Person.class).findAllSorted("name").get(0))
                 // The Realm was created on the UI thread. Accessing it on `Schedulers.io()` will crash.
                 // Avoid using subscribeOn() and use Realms `findAllAsync*()` methods instead.
                 .subscribeOn(Schedulers.io()) //
-                .subscribe(new Action1<Person>() {
-                    @Override
-                    public void call(Person person) {
-                        // Do nothing
-                    }
-                }, new Action1<Throwable>() {
-                    @Override
-                    public void call(Throwable throwable) {
-                        showStatus("subscribeOn: " + throwable.toString());
-                    }
-                });
+                .subscribe(
+                        person -> {}, // Do nothing
+                        throwable -> showStatus("subscribeOn: " + throwable.toString())
+                );
+        compositeDisposable.add(subscribeOnDisposable);
 
         // Use Realms Async API instead
-        Subscription asyncSubscribeOn = realm.where(Person.class).findAllSortedAsync("name").get(0).<Person>asObservable()
-                .subscribe(new Action1<Person>() {
-                    @Override
-                    public void call(Person person) {
-                        showStatus("subscribeOn/async: " + person.getName() + ":" + person.getAge());
-                    }
-                }, new Action1<Throwable>() {
-                    @Override
-                    public void call(Throwable throwable) {
-                        showStatus("subscribeOn/async: " + throwable.toString());
-                    }
-                });
-
-        return new CompositeSubscription(subscribeOn, asyncSubscribeOn);
+        Disposable asyncSubscribeOnDisposable = realm.where(Person.class).findAllSortedAsync("name").get(0).<Person>asFlowable()
+                .subscribe(
+                        person -> showStatus("subscribeOn/async: " + person.getName() + ":" + person.getAge()),
+                        throwable -> showStatus("subscribeOn/async: " +throwable.toString())
+                );
+        compositeDisposable.add(asyncSubscribeOnDisposable);
     }
 
     /**
      * Shows how to be careful with `buffer()`
      */
-    private Subscription testBuffer() {
-        Observable<Person> personObserver = realm.asObservable().map(new Func1<Realm, Person>() {
-            @Override
-            public Person call(Realm realm) {
-                return realm.where(Person.class).findAllSorted("name").get(0);
-            }
-        });
+    private void testBuffer() {
+        Flowable<Person> personFlowable =
+                realm.asFlowable().map(realm -> realm.where(Person.class).findAllSorted("name").get(0));
 
         // buffer() caches objects until the buffer is full. Due to Realms auto-update of all objects it means
         // that all objects in the cache will contain the same data.
         // Either avoid using buffer or copy data into an unmanaged object.
-        return personObserver
+        Disposable disposable = personFlowable
                 .buffer(2)
-                .subscribe(new Action1<List<Person>>() {
-                    @Override
-                    public void call(List<Person> persons) {
-                        showStatus("Buffer[0] : " + persons.get(0).getName() + ":" + persons.get(0).getAge());
-                        showStatus("Buffer[1] : " + persons.get(1).getName() + ":" + persons.get(1).getAge());
-                    }
+                .subscribe(people -> {
+                    showStatus("Buffer[0] : " + people.get(0).getName() + ":" + people.get(0).getAge());
+                    showStatus("Buffer[1] : " + people.get(1).getName() + ":" + people.get(1).getAge());
                 });
+        compositeDisposable.add(disposable);
     }
 
     /**
      * Shows how to to be careful when using `distinct()`
      */
-    private Subscription testDistinct() {
-        Observable<Person> personObserver = realm.asObservable().map(new Func1<Realm, Person>() {
-            @Override
-            public Person call(Realm realm) {
-                return realm.where(Person.class).findAllSorted("name").get(0);
-            }
-        });
+    private void testDistinct() {
+        Flowable<Person> personFlowable =
+                realm.asFlowable().map(realm -> realm.where(Person.class).findAllSorted("name").get(0));
 
         // distinct() and distinctUntilChanged() uses standard equals with older objects stored in a HashMap.
         // Realm objects auto-update which means the objects stored will also auto-update.
         // This makes comparing against older objects impossible (even if the new object has changed) because the
         // cached object will also have changed.
         // Use a keySelector function to work around this.
-        Subscription distinctItemTest = personObserver
+        Disposable distinctDisposable = personFlowable
                 .distinct() // Because old == new. This will only allow the first version of the "Chris" object to pass.
-                .subscribe(new Action1<Person>() {
-                    @Override
-                    public void call(Person p) {
-                        showStatus("distinct(): " + p.getName() + ":" + p.getAge());
-                    }
-                });
+                .subscribe(person -> showStatus("distinct(): " + person.getName() + ":" + person.getAge()));
+        compositeDisposable.add(distinctDisposable);
 
-        Subscription distinctKeySelectorItemTest = personObserver
-                .distinct(new Func1<Person, Integer>() { // Use a keySelector function instead
-                    @Override
-                    public Integer call(Person p) {
-                        return p.getAge();
-                    }
-                })
-                .subscribe(new Action1<Person>() {
-                    @Override
-                    public void call(Person p) {
-                        showStatus("distinct(keySelector): " + p.getName() + ":" + p.getAge());
-                    }
-                });
-
-
-        return new CompositeSubscription(distinctItemTest, distinctKeySelectorItemTest);
+        Disposable distinctKeySelectorDisposable = personFlowable
+                .distinct(person -> person.getAge())
+                .subscribe(person -> showStatus("distinct(keySelector): " + person.getName() + ":" + person.getAge()));
+        compositeDisposable.add(distinctKeySelectorDisposable);
     }
 
     private void showStatus(String message) {
@@ -208,7 +149,7 @@ private void showStatus(String message) {
     @Override
     protected void onPause() {
         super.onPause();
-        subscription.unsubscribe();
+        compositeDisposable.clear();
     }
 
     @Override
@@ -216,5 +157,4 @@ protected void onDestroy() {
         super.onDestroy();
         realm.close();
     }
-
 }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GithubApi.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubApi.java
similarity index 82%
rename from examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GithubApi.java
rename to examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubApi.java
index f28d8ab6f8..4302178386 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GithubApi.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubApi.java
@@ -16,17 +16,17 @@
 
 package io.realm.examples.rxjava.retrofit;
 
-import retrofit.http.GET;
-import retrofit.http.Path;
-import rx.Observable;
+import io.reactivex.Flowable;
+import retrofit2.http.GET;
+import retrofit2.http.Path;
 
 /**
  * GitHub API definition
  */
-interface GithubApi {
+interface GitHubApi {
     /**
      * See https://developer.github.com/v3/users/
      */
     @GET("/users/{user}")
-    Observable<GitHubUser> user(@Path("user") String user);
+    Flowable<GitHubUser> user(@Path("user") String user);
 }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubUser.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubUser.java
index a659b752c8..860ee27525 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubUser.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/GitHubUser.java
@@ -16,10 +16,13 @@
 
 package io.realm.examples.rxjava.retrofit;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
 /**
  * Model class for GitHub users: https://developer.github.com/v3/users/#get-a-single-user
  */
 @SuppressWarnings("unused")
+@JsonIgnoreProperties(ignoreUnknown = true)
 class GitHubUser {
     public String name;
     public int public_repos;
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/RetrofitExample.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/RetrofitExample.java
index 2412dfb88b..4f01dbfa11 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/RetrofitExample.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/retrofit/RetrofitExample.java
@@ -16,40 +16,41 @@
 
 package io.realm.examples.rxjava.retrofit;
 
-import android.app.Activity;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
 import java.util.Locale;
 
+import io.reactivex.Flowable;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
 import io.realm.Realm;
-import io.realm.RealmResults;
 import io.realm.examples.rxjava.R;
 import io.realm.examples.rxjava.model.Person;
-import retrofit.RequestInterceptor;
-import retrofit.RestAdapter;
-import rx.Observable;
-import rx.Subscription;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.functions.Action1;
-import rx.functions.Func1;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import retrofit2.Retrofit;
+import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
+import retrofit2.converter.jackson.JacksonConverterFactory;
 
 import static android.text.TextUtils.isEmpty;
 import static java.lang.String.format;
 
-public class RetrofitExample extends Activity {
+public class RetrofitExample extends AppCompatActivity {
 
     private Realm realm;
-    private Subscription subscription;
+    private Disposable disposable;
     private ViewGroup container;
-    private GithubApi api;
+    private GitHubApi api;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_network);
-        container = (ViewGroup) findViewById(R.id.list);
+        container = findViewById(R.id.list);
         realm = Realm.getDefaultInstance();
         api = createGitHubApi();
     }
@@ -59,57 +60,33 @@ protected void onResume() {
         super.onResume();
 
         // Load all persons and merge them with their latest stats from GitHub (if they have any)
-        subscription = realm.where(Person.class).isNotNull("githubUserName").findAllSortedAsync("name").asObservable()
-                .filter(new Func1<RealmResults<Person>, Boolean>() {
-                    @Override
-                    public Boolean call(RealmResults<Person> persons) {
-                        // We only want the list once it is loaded.
-                        return persons.isLoaded();
-                    }
-                })
-                .flatMap(new Func1<RealmResults<Person>, Observable<Person>>() {
-                    @Override
-                    public Observable<Person> call(RealmResults<Person> persons) {
-                        // Emit each person individually
-                        return Observable.from(persons);
-                    }
-                })
-                .flatMap(new Func1<Person, Observable<GitHubUser>>() {
-                    @Override
-                    public Observable<GitHubUser> call(Person person) {
-                        // get GitHub statistics. Retrofit automatically does this on a separate thread.
-                        return api.user(person.getGithubUserName());
-                    }
-                })
-                .map(new Func1<GitHubUser, UserViewModel>() {
-                    @Override
-                    public UserViewModel call(GitHubUser gitHubUser) {
-                        // Map Network model to our View model
-                        return new UserViewModel(gitHubUser.name, gitHubUser.public_repos, gitHubUser.public_gists);
-                    }
-                })
-                .observeOn(AndroidSchedulers.mainThread()) // Retrofit put us on a worker thread. Move back to UI
-                .subscribe(new Action1<UserViewModel>() {
-                    @Override
-                    public void call(UserViewModel user) {
-                        // Print user info.
-                        TextView userView = new TextView(RetrofitExample.this);
-                        userView.setText(String.format(Locale.US, "%s : %d/%d",
-                                user.getUsername(), user.getPublicRepos(), user.getPublicGists()));
-                        container.addView(userView);
-                    }
-                }, new Action1<Throwable>() {
-                    @Override
-                    public void call(Throwable throwable) {
-                        throwable.printStackTrace();
-                    }
-                });
+        disposable = realm.where(Person.class).isNotNull("githubUserName").findAllSortedAsync("name").asFlowable()
+                // We only want the list once it is loaded.
+                .filter(people -> people.isLoaded())
+                .switchMap(people -> Flowable.fromIterable(people))
+
+                // get GitHub statistics.
+                .flatMap(person -> api.user(person.getGithubUserName()))
+
+                // Map Network model to our View model
+                .map(gitHubUser -> new UserViewModel(gitHubUser.name, gitHubUser.public_repos, gitHubUser.public_gists))
+
+                // Retrofit put us on a worker thread. Move back to UI
+                .observeOn(AndroidSchedulers.mainThread())
+
+                .subscribe(user -> {
+                    // Print user info.
+                    TextView userView = new TextView(RetrofitExample.this);
+                    userView.setText(
+                            String.format(Locale.US, "%s : %d/%d", user.getUsername(), user.getPublicRepos(), user.getPublicGists()));
+                    container.addView(userView);
+                }, throwable -> throwable.printStackTrace());
     }
 
     @Override
     protected void onPause() {
         super.onPause();
-        subscription.unsubscribe();
+        disposable.dispose();
     }
 
     @Override
@@ -118,20 +95,31 @@ protected void onDestroy() {
         realm.close();
     }
 
-    private GithubApi createGitHubApi() {
+    private GitHubApi createGitHubApi() {
 
-        RestAdapter.Builder builder = new RestAdapter.Builder().setEndpoint("https://api.github.com/");
+        Retrofit.Builder builder = new Retrofit.Builder()
+                .baseUrl("https://api.github.com/")
+                .addCallAdapterFactory(RxJava2CallAdapterFactory.createWithScheduler(Schedulers.io()))
+                .addConverterFactory(JacksonConverterFactory.create());
 
-        final String githubToken = ""; // Set GitHub OAuth token to avoid throttling if example is used a lot
-        if (!isEmpty(githubToken)) {
-            builder.setRequestInterceptor(new RequestInterceptor() {
-                @Override
-                public void intercept(RequestFacade request) {
-                    request.addHeader("Authorization", format("token %s", githubToken));
-                }
+        OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder();
+
+        final String gitHubToken = ""; // Set GitHub OAuth token to avoid throttling if example is used a lot
+
+        if (!isEmpty(gitHubToken)) {
+            httpClientBuilder.addInterceptor(chain -> {
+                Request originalRequest = chain.request();
+                Request modifiedRequest = originalRequest
+                        .newBuilder()
+                        .header("Authorization", format("token %s", gitHubToken))
+                        .method(originalRequest.method(), originalRequest.body())
+                        .build();
+                return chain.proceed(modifiedRequest);
             });
         }
 
-        return builder.build().create(GithubApi.class);
+        OkHttpClient httpClient = httpClientBuilder.build();
+        builder.client(httpClient);
+        return builder.build().create(GitHubApi.class);
     }
 }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java
index 6a5c27991b..5b4bdd1df8 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java
@@ -16,31 +16,27 @@
 
 package io.realm.examples.rxjava.throttle;
 
-import android.app.Activity;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 import android.view.ViewGroup;
 import android.widget.EditText;
 import android.widget.TextView;
 
-import com.jakewharton.rxbinding.widget.RxTextView;
-import com.jakewharton.rxbinding.widget.TextViewTextChangeEvent;
+import com.jakewharton.rxbinding2.widget.RxTextView;
 
 import java.util.concurrent.TimeUnit;
 
+import io.reactivex.BackpressureStrategy;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.Disposable;
 import io.realm.Realm;
-import io.realm.RealmResults;
 import io.realm.examples.rxjava.R;
 import io.realm.examples.rxjava.model.Person;
-import rx.Observable;
-import rx.Subscription;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.functions.Action1;
-import rx.functions.Func1;
 
-public class ThrottleSearchActivity extends Activity {
+public class ThrottleSearchActivity extends AppCompatActivity {
 
     private Realm realm;
-    private Subscription subscription;
+    private Disposable disposable;
     private EditText searchInputView;
     private ViewGroup searchResultsView;
 
@@ -48,8 +44,8 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_throttlesearch);
-        searchInputView = (EditText) findViewById(R.id.search);
-        searchResultsView = (ViewGroup) findViewById(R.id.search_results);
+        searchInputView = findViewById(R.id.search);
+        searchResultsView = findViewById(R.id.search_results);
         realm = Realm.getDefaultInstance();
     }
 
@@ -58,49 +54,35 @@ protected void onResume() {
         super.onResume();
 
         // Listen to key presses and only start search after user paused to avoid excessive redrawing on the screen.
-        subscription = RxTextView.textChangeEvents(searchInputView)
+        disposable = RxTextView.textChangeEvents(searchInputView)
                 .debounce(200, TimeUnit.MILLISECONDS) // default Scheduler is Schedulers.computation()
                 .observeOn(AndroidSchedulers.mainThread()) // Needed to access Realm data
-                .flatMap(new Func1<TextViewTextChangeEvent, Observable<RealmResults<Person>>>() {
-                    @Override
-                    public Observable<RealmResults<Person>> call(TextViewTextChangeEvent event) {
-                        // Use Async API to move Realm queries off the main thread.
-                        // Realm currently doesn't support the standard Schedulers.
-                        return realm.where(Person.class)
-                                .beginsWith("name", event.text().toString())
-                                .findAllSortedAsync("name").asObservable();
-                    }
-                })
-                .filter(new Func1<RealmResults<Person>, Boolean>() {
-                    @Override
-                    public Boolean call(RealmResults<Person> persons) {
-                        // Only continue once data is actually loaded
-                        // RealmObservables will emit the unloaded (empty) list as its first item
-                        return persons.isLoaded();
-                    }
+                .toFlowable(BackpressureStrategy.BUFFER)
+                .switchMap(textChangeEvent -> {
+                    // Use Async API to move Realm queries off the main thread.
+                    // Realm currently doesn't support the standard Schedulers.
+                    return realm.where(Person.class)
+                            .beginsWith("name", textChangeEvent.text().toString())
+                            .findAllSortedAsync("name")
+                            .asFlowable();
                 })
-                .subscribe(new Action1<RealmResults<Person>>() {
-                    @Override
-                    public void call(RealmResults<Person> persons) {
-                        searchResultsView.removeAllViews();
-                        for (Person person : persons) {
-                            TextView view = new TextView(ThrottleSearchActivity.this);
-                            view.setText(person.getName());
-                            searchResultsView.addView(view);
-                        }
-                    }
-                }, new Action1<Throwable>() {
-                    @Override
-                    public void call(Throwable throwable) {
-                        throwable.printStackTrace();
+                // Only continue once data is actually loaded
+                // RealmObservables will emit the unloaded (empty) list as its first item
+                .filter(people -> people.isLoaded())
+                .subscribe(people -> {
+                    searchResultsView.removeAllViews();
+                    for (Person person : people) {
+                        TextView view = new TextView(ThrottleSearchActivity.this);
+                        view.setText(person.getName());
+                        searchResultsView.addView(view);
                     }
-                });
+                }, throwable -> throwable.printStackTrace());
     }
 
     @Override
     protected void onPause() {
         super.onPause();
-        subscription.unsubscribe();
+        disposable.dispose();
     }
 
     @Override
diff --git a/examples/rxJavaExample/src/main/res/values/colors.xml b/examples/rxJavaExample/src/main/res/values/colors.xml
new file mode 100644
index 0000000000..cb09b5ec1d
--- /dev/null
+++ b/examples/rxJavaExample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
\ No newline at end of file
diff --git a/examples/rxJavaExample/src/main/res/values/styles.xml b/examples/rxJavaExample/src/main/res/values/styles.xml
index ff6c9d2c0f..b4390a2166 100644
--- a/examples/rxJavaExample/src/main/res/values/styles.xml
+++ b/examples/rxJavaExample/src/main/res/values/styles.xml
@@ -1,8 +1,9 @@
 <resources>
 
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
     </style>
 
 </resources>
diff --git a/examples/settings.gradle b/examples/settings.gradle
index 361ed3b8f1..0f9f5242bd 100644
--- a/examples/settings.gradle
+++ b/examples/settings.gradle
@@ -9,9 +9,9 @@ include 'moduleExample:app'
 include 'moduleExample:library'
 include 'realmModuleExample'
 include 'threadExample'
-//include 'unitTestExample' FIXME: Upgrade to RxJava2
-//include 'newsreaderExample' FIXME: Upgrade to RxJava2
-//include 'rxJavaExample' FIXME: Upgrade to RxJava2
+include 'unitTestExample'
+include 'newsreaderExample'
+include 'rxJavaExample'
 include 'objectServerExample'
 
 rootProject.name = 'realm-examples'
diff --git a/examples/unitTestExample/build.gradle b/examples/unitTestExample/build.gradle
index 553d5fd771..965507acd9 100644
--- a/examples/unitTestExample/build.gradle
+++ b/examples/unitTestExample/build.gradle
@@ -30,11 +30,18 @@ android {
     command {
         monkey.events 2000
     }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 
 dependencies {
-    testImplementation 'io.reactivex:rxjava:1.1.0'
+    implementation 'com.android.support:appcompat-v7:26.0.1'
+
+    testImplementation 'io.reactivex.rxjava2:rxjava:2.1.0'
 
     // Testing
     testImplementation 'junit:junit:4.12'
diff --git a/examples/unitTestExample/src/androidTest/java/io/realm/examples/unittesting/jUnit4ExampleTest.java b/examples/unitTestExample/src/androidTest/java/io/realm/examples/unittesting/jUnit4ExampleTest.java
index f605f1e1ea..12f8d2e44e 100644
--- a/examples/unitTestExample/src/androidTest/java/io/realm/examples/unittesting/jUnit4ExampleTest.java
+++ b/examples/unitTestExample/src/androidTest/java/io/realm/examples/unittesting/jUnit4ExampleTest.java
@@ -33,7 +33,7 @@
 public class jUnit4ExampleTest {
 
     @Rule
-    public ActivityTestRule<ExampleActivity> mActivityRule = new ActivityTestRule<ExampleActivity>(ExampleActivity.class);
+    public ActivityTestRule<ExampleActivity> mActivityRule = new ActivityTestRule<>(ExampleActivity.class);
 
     @Test
     public void testShouldBeAbleToLaunchActivityAndSeeRealmResults() {
diff --git a/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java b/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java
index 479037fabb..4b0f94e752 100644
--- a/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java
+++ b/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java
@@ -16,21 +16,18 @@
 
 package io.realm.examples.unittesting;
 
-import android.app.Activity;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
-import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import io.realm.Realm;
-import io.realm.RealmConfiguration;
 import io.realm.RealmResults;
 import io.realm.examples.unittesting.model.Person;
 
-
-public class ExampleActivity extends Activity {
+public class ExampleActivity extends AppCompatActivity {
 
     public static final String TAG = ExampleActivity.class.getName();
     private LinearLayout rootLayout = null;
@@ -42,7 +39,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         Realm.init(getApplicationContext());
         setContentView(R.layout.activity_example);
-        rootLayout = ((LinearLayout) findViewById(R.id.container));
+        rootLayout = findViewById(R.id.container);
         rootLayout.removeAllViews();
 
         // Open the default Realm for the UI thread.
@@ -71,24 +68,17 @@ protected void onPostExecute(String result) {
 
         foo.execute();
 
-        findViewById(R.id.clean_up).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                v.setEnabled(false);
-                cleanUp();
-                v.setEnabled(true);
-            }
+        findViewById(R.id.clean_up).setOnClickListener(view -> {
+            view.setEnabled(false);
+            Log.d("TAG", "clean up");
+            cleanUp();
+            view.setEnabled(true);
         });
     }
 
     private void cleanUp() {
         // Delete all persons
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                realm.delete(Person.class);
-            }
-        });
+        realm.executeTransaction(r -> r.delete(Person.class));
     }
 
     @Override
@@ -108,15 +98,12 @@ private void basicCRUD(Realm realm) {
         showStatus("Perform basic Create/Read/Update/Delete (CRUD) operations...");
 
         // All writes must be wrapped in a transaction to facilitate safe multi threading
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                // Add a person
-                Person person = realm.createObject(Person.class);
-                person.setId(1);
-                person.setName("John Young");
-                person.setAge(14);
-            }
+        realm.executeTransaction(r -> {
+            // Add a person
+            Person person = r.createObject(Person.class);
+            person.setId(1);
+            person.setName("John Young");
+            person.setAge(14);
         });
 
         // Find the first person (no query conditions) and read a field
@@ -124,28 +111,22 @@ public void execute(Realm realm) {
         showStatus(person.getName() + ":" + person.getAge());
 
         // Update person in a transaction
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                person.setName("John Senior");
-                person.setAge(89);
-            }
+        realm.executeTransaction(r -> {
+            person.setName("John Senior");
+            person.setAge(89);
         });
 
         showStatus(person.getName() + " got older: " + person.getAge());
 
         // Add two more people
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                Person jane = realm.createObject(Person.class);
-                jane.setName("Jane");
-                jane.setAge(27);
-
-                Person doug = realm.createObject(Person.class);
-                doug.setName("Robert");
-                doug.setAge(42);
-            }
+        realm.executeTransaction(r -> {
+            Person jane = r.createObject(Person.class);
+            jane.setName("Jane");
+            jane.setAge(27);
+
+            Person doug = r.createObject(Person.class);
+            doug.setName("Robert");
+            doug.setAge(42);
         });
 
         RealmResults<Person> people = realm.where(Person.class).findAll();
@@ -164,7 +145,8 @@ private String complexQuery() {
         // Find all persons where age between 1 and 99 and name begins with "J".
         RealmResults<Person> results = realm.where(Person.class)
                 .between("age", 1, 99)       // Notice implicit "and" operation
-                .beginsWith("name", "J").findAll();
+                .beginsWith("name", "J")
+                .findAll();
         status += "\nNumber of people aged between 1 and 99 who's name start with 'J': " + results.size();
 
         realm.close();
diff --git a/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/repository/DogRepositoryImpl.java b/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/repository/DogRepositoryImpl.java
index 60ff3b2eeb..b421c16413 100644
--- a/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/repository/DogRepositoryImpl.java
+++ b/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/repository/DogRepositoryImpl.java
@@ -19,17 +19,13 @@
 import io.realm.Realm;
 import io.realm.examples.unittesting.model.Dog;
 
-
 public class DogRepositoryImpl implements DogRepository {
     @Override
     public void createDog(final String name) {
         Realm realm = Realm.getDefaultInstance();
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                Dog dog = realm.createObject(Dog.class);
-                dog.setName(name);
-            }
+        realm.executeTransaction(r -> {
+            Dog dog = r.createObject(Dog.class);
+            dog.setName(name);
         });
         realm.close();
     }
diff --git a/examples/unitTestExample/src/main/res/values/colors.xml b/examples/unitTestExample/src/main/res/values/colors.xml
new file mode 100644
index 0000000000..cb09b5ec1d
--- /dev/null
+++ b/examples/unitTestExample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
\ No newline at end of file
diff --git a/examples/unitTestExample/src/main/res/values/styles.xml b/examples/unitTestExample/src/main/res/values/styles.xml
index ff6c9d2c0f..b4390a2166 100644
--- a/examples/unitTestExample/src/main/res/values/styles.xml
+++ b/examples/unitTestExample/src/main/res/values/styles.xml
@@ -1,8 +1,9 @@
 <resources>
 
-    <!-- Base application theme. -->
-    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
-        <!-- Customize your theme here. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
     </style>
 
 </resources>
