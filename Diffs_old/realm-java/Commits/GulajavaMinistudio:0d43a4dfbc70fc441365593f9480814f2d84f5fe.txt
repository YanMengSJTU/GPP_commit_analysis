diff --git a/CHANGELOG.md b/CHANGELOG.md
index 499c1a45cf..aa0065b4f5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,10 +1,12 @@
-## 5.12.0(YYYY-MM-DD)
+## 5.12.0(2019-06-20)
 
 ### Enhancements
 * [ObjectServer] Added `SyncManager.refreshConnections()` that can be used to manually trigger a reconnect for all sessions. This is useful if the device has been offline for a long time or fail to detect that it regained connectivity. (Issue [#259](https://github.com/realm/realm-java-private/issues/259))
+* Added `RealmResults.asJson()` in `@Beta` that returns the result of the query as a JSON payload (#6540).
 
 ### Fixed
 * [ObjectServer] `PermissionManager` stopped working if an intermittent network error was reported. (Issue [#6492](https://github.com/realm/realm-java/issues/6492), since 3.7.0)
+* The Kotlin extensions library no longer defines a `app_name`, which in some cases conflicted with the `app_name` defined by applications. (Issue [#6536](https://github.com/realm/realm-java/issues/6536), since 4.3.0) 
 
 ### Compatibility
 * Realm Object Server: 3.21.0 or later.
@@ -12,8 +14,9 @@
 * APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
 
 ### Internal
-* None.
-
+* Updated to Realm Core 5.22.0.
+* Updated to Relm Sync 4.6.1.
+* Updated to Object Store commit 7c3ff8235579550a3e3c6060c47140b2005174f5
 
 ## 5.11.0(2019-05-01)
 
diff --git a/dependencies.list b/dependencies.list
index 48b5b292ce..78968bcff3 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,7 +1,7 @@
 # Realm Sync release used by Realm Java (This includes Realm Core)
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=4.4.2
-REALM_SYNC_SHA256=7f3386bc9e590788afc6fd61744dd187148862513ddbd7e65c32d1d9c371e1ce
+REALM_SYNC_VERSION=4.6.1
+REALM_SYNC_SHA256=eb4fbf83717156fabae6357199b22ef25546f2da24ded5668290351613faf9d0
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
diff --git a/realm/kotlin-extensions/src/main/res/values/strings.xml b/realm/kotlin-extensions/src/main/res/values/strings.xml
deleted file mode 100644
index 764b07b814..0000000000
--- a/realm/kotlin-extensions/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<resources>
-    <string name="app_name">kotlin-extensions</string>
-</resources>
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 4562cf3be7..25a384aab7 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -226,6 +226,7 @@ dependencies {
     androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
     androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
+    androidTestImplementation "org.skyscreamer:jsonassert:1.5.0"
 
     // specify error prone version to prevent sudden failure
     errorprone 'com.google.errorprone:error_prone_core:2.1.2'
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
index 2714b81ba6..fa62390c24 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
@@ -19,6 +19,7 @@
 import android.support.test.annotation.UiThreadTest;
 import android.support.test.runner.AndroidJUnit4;
 
+import org.json.JSONException;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -26,16 +27,21 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.skyscreamer.jsonassert.JSONAssert;
 
+import java.text.SimpleDateFormat;
 import java.util.Arrays;
+import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
+import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.realm.entities.AllJavaTypes;
 import io.realm.entities.AllTypes;
+import io.realm.entities.CyclicType;
 import io.realm.entities.DefaultValueOfField;
 import io.realm.entities.Dog;
 import io.realm.entities.MappedAllJavaTypes;
@@ -1685,4 +1691,240 @@ public void setValue_specificType_internalNameOnDynamicRealms() {
             dynamicRealm.close();
         }
     }
+
+    @Test
+    public void asJSON() throws JSONException {
+        Date date = Calendar.getInstance().getTime();
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+        sdf.setTimeZone(TimeZone.getTimeZone("GMT")); // Core return dates in UTC time
+        String now = sdf.format(date);
+
+        realm.beginTransaction();
+
+        AllTypes allTypes = realm.createObject(AllTypes.class);
+        Dog dog1 = realm.createObject(Dog.class);
+        Dog dog2 = realm.createObject(Dog.class);
+        Dog dog3 = realm.createObject(Dog.class);
+
+        dog1.setName("dog1");
+        dog1.setAge(1);
+        dog1.setBirthday(date);
+        dog1.setHasTail(true);
+        dog1.setHeight(1.1f);
+        dog1.setWeight(10.1f);
+
+        dog2.setName("dog2");
+        dog2.setAge(2);
+        dog2.setBirthday(date);
+        dog2.setHasTail(false);
+        dog2.setHeight(2.1f);
+        dog2.setWeight(20.1f);
+
+        dog3.setName("dog3");
+        dog3.setAge(3);
+        dog3.setBirthday(date);
+        dog3.setHasTail(true);
+        dog3.setHeight(3.1f);
+        dog3.setWeight(30.1f);
+
+        Owner owner = realm.createObject(Owner.class);
+        owner.setName("Dog owner 1");
+        dog3.setOwner(owner);
+
+        allTypes.setColumnString("alltypes1");
+        allTypes.setColumnLong(1337L);
+        allTypes.setColumnFloat(3.14f);
+        allTypes.setColumnDouble(0.89123);
+        allTypes.setColumnBoolean(false);
+        allTypes.setColumnDate(date);
+        allTypes.setColumnBinary(new byte[]{1, 2, 3});
+        allTypes.setColumnRealmObject(dog1);
+        allTypes.getColumnRealmList().add(dog2);
+        allTypes.getColumnRealmList().add(dog3);
+        allTypes.getColumnStringList().add("Foo");
+        allTypes.getColumnStringList().add("Bar");
+        allTypes.getColumnBooleanList().add(false);
+        allTypes.getColumnBooleanList().add(true);
+        allTypes.getColumnLongList().add(1000L);
+        allTypes.getColumnLongList().add(2000L);
+        allTypes.getColumnDoubleList().add(1.123);
+        allTypes.getColumnDoubleList().add(5.321);
+        allTypes.getColumnFloatList().add(0.12f);
+        allTypes.getColumnFloatList().add(0.13f);
+        allTypes.getColumnDateList().add(date);
+        allTypes.getColumnDateList().add(date);
+
+        AllTypes allTypes2 = realm.createObject(AllTypes.class);
+        allTypes2.setColumnString("alltypes2");
+        realm.commitTransaction();
+
+        RealmResults<AllTypes> all = realm.where(AllTypes.class)
+                .equalTo("columnString", "alltypes1").findAll();
+        assertEquals(1, all.size());
+        String json = all.asJSON();
+        final String expectedJSON = "[\n" +
+                "    {\n" +
+                "        \"columnString\": \"alltypes1\",\n" +
+                "        \"columnLong\": 1337,\n" +
+                "        \"columnFloat\": 3.1400001,\n" +
+                "        \"columnDouble\": 0.89122999999999997,\n" +
+                "        \"columnBoolean\": false,\n" +
+                "        \"columnDate\": \"" + now + "\",\n" +
+                "        \"columnBinary\": \"010203\",\n" +
+                "        \"columnMutableRealmInteger\": 0,\n" +
+                "        \"columnRealmObject\": [\n" +
+                "            {\n" +
+                "                \"name\": \"dog1\",\n" +
+                "                \"age\": 1,\n" +
+                "                \"height\": 1.1,\n" +
+                "                \"weight\": 10.100000381469727,\n" +
+                "                \"hasTail\": true,\n" +
+                "                \"birthday\": \"" + now + "\",\n" +
+                "                \"owner\": []\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnRealmList\": [\n" +
+                "            {\n" +
+                "                \"name\": \"dog2\",\n" +
+                "                \"age\": 2,\n" +
+                "                \"height\": 2.0999999,\n" +
+                "                \"weight\": 20.100000381469727,\n" +
+                "                \"hasTail\": false,\n" +
+                "                \"birthday\": \"" + now + "\",\n" +
+                "                \"owner\": []\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"name\": \"dog3\",\n" +
+                "                \"age\": 3,\n" +
+                "                \"height\": 3.0999999,\n" +
+                "                \"weight\": 30.100000381469727,\n" +
+                "                \"hasTail\": true,\n" +
+                "                \"birthday\": \"" + now + "\",\n" +
+                "                \"owner\": [\n" +
+                "                    {\n" +
+                "                        \"name\": \"Dog owner 1\",\n" +
+                "                        \"dogs\": [],\n" +
+                "                        \"cat\": []\n" +
+                "                    }\n" +
+                "                ]\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnStringList\": [\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": \"Foo\"\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": \"Bar\"\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnBinaryList\": [],\n" +
+                "        \"columnBooleanList\": [\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": false\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": true\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnLongList\": [\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": 1000\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": 2000\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnDoubleList\": [\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": 1.123\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": 5.3209999999999997\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnFloatList\": [\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": 0.12\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": 0.13\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"columnDateList\": [\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": \"" + now + "\"\n" +
+                "            },\n" +
+                "            {\n" +
+                "                \"!ARRAY_VALUE\": \"" + now + "\"\n" +
+                "            }\n" +
+                "        ]\n" +
+                "    }\n" +
+                "]";
+        JSONAssert.assertEquals(expectedJSON, json, false);
+    }
+
+    @Test
+    public void asJSON_cycles() throws JSONException {
+        Date date = Calendar.getInstance().getTime();
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+        sdf.setTimeZone(TimeZone.getTimeZone("GMT")); // Core return dates in UTC time
+        String now = sdf.format(date);
+
+        CyclicType oneCyclicType = new CyclicType();
+        oneCyclicType.setName("One");
+        oneCyclicType.setDate(date);
+
+        CyclicType anotherCyclicType = new CyclicType();
+        anotherCyclicType.setName("Two");
+        anotherCyclicType.setDate(date);
+
+        oneCyclicType.setObject(anotherCyclicType);
+        anotherCyclicType.setObject(oneCyclicType);
+
+        realm.beginTransaction();
+        realm.insert(Arrays.asList(oneCyclicType, anotherCyclicType));
+        realm.commitTransaction();
+
+        RealmResults<CyclicType> realmObjects = realm.where(CyclicType.class).sort(CyclicType.FIELD_NAME).findAll();
+        assertEquals(2, realmObjects.size());
+        String json = realmObjects.asJSON();
+        String expectedJSON = "[\n" +
+                "    {\n" +
+                "        \"id\": 0,\n" +
+                "        \"name\": \"One\",\n" +
+                "        \"date\": \"" + now + "\",\n" +
+                "        \"object\": [\n" +
+                "            {\n" +
+                "                \"id\": 0,\n" +
+                "                \"name\": \"Two\",\n" +
+                "                \"date\": \"" + now + "\",\n" +
+                "                \"object\": \"0\",\n" +
+                "                \"otherObject\": [],\n" +
+                "                \"objects\": []\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"otherObject\": [],\n" +
+                "        \"objects\": []\n" +
+                "    },\n" +
+                "    {\n" +
+                "        \"id\": 0,\n" +
+                "        \"name\": \"Two\",\n" +
+                "        \"date\": \"" + now + "\",\n" +
+                "        \"object\": [\n" +
+                "            {\n" +
+                "                \"id\": 0,\n" +
+                "                \"name\": \"One\",\n" +
+                "                \"date\": \"" + now + "\",\n" +
+                "                \"object\": \"1\",\n" +
+                "                \"otherObject\": [],\n" +
+                "                \"objects\": []\n" +
+                "            }\n" +
+                "        ],\n" +
+                "        \"otherObject\": [],\n" +
+                "        \"objects\": []\n" +
+                "    }\n" +
+                "]";
+        JSONAssert.assertEquals(expectedJSON, json, false);
+    }
+
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
index b8b4f19ec0..e03f7d0c56 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
@@ -279,6 +279,21 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsResults_nativeWhere(JNIEnv* env
     return 0;
 }
 
+JNIEXPORT jstring JNICALL Java_io_realm_internal_OsResults_toJSON(JNIEnv* env, jclass, jlong native_ptr, jint maxDepth)
+{
+    TR_ENTER_PTR(native_ptr)
+    try {
+        auto wrapper = reinterpret_cast<ResultsWrapper*>(native_ptr);
+
+        auto table_view = wrapper->collection().get_tableview();
+        std::stringstream ss;
+        table_view.to_json(ss, maxDepth);
+        return to_jstring(env, ss.str().c_str());
+    }
+    CATCH_STD()
+    return nullptr;
+}
+
 JNIEXPORT jlong JNICALL Java_io_realm_internal_OsResults_nativeIndexOf(JNIEnv* env, jclass, jlong native_ptr,
                                                                         jlong row_native_ptr)
 {
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index e4b1314d21..7c3ff82355 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit e4b1314d21b521fd604af7f1aacf3ca94272c19a
+Subproject commit 7c3ff8235579550a3e3c6060c47140b2005174f5
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index eac557b1d7..802ab27c60 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -20,16 +20,14 @@
 import android.os.Looper;
 
 import java.util.Date;
-import java.util.Iterator;
 import java.util.Locale;
 
 import javax.annotation.Nullable;
 
 import io.reactivex.Flowable;
 import io.reactivex.Observable;
+import io.realm.annotations.Beta;
 import io.realm.internal.CheckedRow;
-import io.realm.internal.ColumnInfo;
-import io.realm.internal.OsList;
 import io.realm.internal.OsResults;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
@@ -40,8 +38,6 @@
 import io.realm.log.RealmLog;
 import io.realm.rx.CollectionChange;
 
-import static io.realm.RealmFieldType.LIST;
-
 /**
  * This class holds all the matches of a {@link RealmQuery} for a given Realm. The objects are not copied from
  * the Realm to the RealmResults list, but are just referenced from the RealmResult instead. This saves memory and
@@ -749,6 +745,22 @@ public void removeChangeListener(OrderedRealmCollectionChangeListener<RealmResul
         }
     }
 
+    /**
+     * Returns a JSON representation of the matches of a {@link RealmQuery}. Cycles will be returned as row indices.
+     *
+     * This is a helper method used to inspect data, or for debugging purpose, this method could pull a large string which
+     * could cause an OutOfMemory error.
+     *
+     * @return string representation of a JSON array containing entries of the resulting {@link RealmQuery}.
+     */
+    @Beta // until https://github.com/realm/realm-core/issues/3305 is fixed
+    public String asJSON() {
+        // maxDepth = -1:
+        // Follow links to infinite depth, but only follow each link exactly once.
+        // Cycle links are printed as a simple sequence of integers of row indexes in the link column.
+        return osResults.toJSON(-1);
+    }
+
     private void checkNonEmptyFieldName(String fieldName) {
         if (Util.isEmptyString(fieldName)) {
             throw new IllegalArgumentException("Non-empty 'fieldname' required.");
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
index 47925d1cba..9994ed1884 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
@@ -355,6 +355,10 @@ public TableQuery where() {
         return new TableQuery(this.context, this.table, nativeQueryPtr);
     }
 
+    public String toJSON(int maxDepth) {
+        return toJSON(nativePtr, maxDepth);
+    }
+
     public Number aggregateNumber(Aggregate aggregateMethod, long columnIndex) {
         return (Number) nativeAggregate(nativePtr, columnIndex, aggregateMethod.getValue());
     }
@@ -706,6 +710,8 @@ public void load() {
 
     private static native long nativeWhere(long nativePtr);
 
+    private static native String toJSON(long nativePtr, int maxDepth);
+
     private static native long nativeIndexOf(long nativePtr, long rowNativePtr);
 
     private static native boolean nativeIsValid(long nativePtr);
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
index 4624b3881f..19817ab1b4 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
@@ -216,6 +216,7 @@ public void combining_trustedRootCA_and_withoutSSLVerification_willThrow() {
 
     @Test
     @RunTestInLooperThread
+    @Ignore("FIXME: https://github.com/realm/realm-java/issues/6472")
     public void trustedRootCA_notExisting_certificate_willThrow() {
         String username = UUID.randomUUID().toString();
         String password = "password";
diff --git a/version.txt b/version.txt
index 647e7292a9..9e323a785b 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.12.0-SNAPSHOT
\ No newline at end of file
+5.13.0-SNAPSHOT
