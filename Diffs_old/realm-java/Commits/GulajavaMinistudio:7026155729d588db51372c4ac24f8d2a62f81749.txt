diff --git a/README.md b/README.md
index fcd8d6c7f3..96361c603a 100644
--- a/README.md
+++ b/README.md
@@ -80,7 +80,7 @@ You may unzip the file wherever you choose.  For OSX, a suggested location is `~
     export ANDROID_NDK_HOME=~/Library/Android/android-ndk-r10e
     ```
 
- * If you will be launching Android Studio from the OS X Finder, you should also run the following two commands:
+ * If you will be launching Android Studio from the macOS Finder, you should also run the following two commands:
 
     ```
     launchctl setenv ANDROID_HOME "$ANDROID_HOME"
@@ -93,13 +93,13 @@ You may unzip the file wherever you choose.  For OSX, a suggested location is `~
    export REALM_CORE_DOWNLOAD_DIR=~/.realmCore
    ```
 
-   OS X users must also run the following command in order for Android Studio to see this environment variable..
+   macOS users must also run the following command in order for Android Studio to see this environment variable..
 
    ```
    launchctl setenv REALM_CORE_DOWNLOAD_DIR "$REALM_CORE_DOWNLOAD_DIR"
    ```
 
-It would be a good idea to add all of the symbol definitions (and their accompanying `launchctl` commands, if you are using OS X) to your `~/.profile` (or `~/.zprofile` if the login shell is `zsh`)
+It would be a good idea to add all of the symbol definitions (and their accompanying `launchctl` commands, if you are using macOS) to your `~/.profile` (or `~/.zprofile` if the login shell is `zsh`)
 
 
 ### Download sources
diff --git a/realm/realm-library/src/androidTest/assets/default-before-migration.realm b/realm/realm-library/src/androidTest/assets/default-before-migration.realm
deleted file mode 100644
index 7a9ae6075f..0000000000
Binary files a/realm/realm-library/src/androidTest/assets/default-before-migration.realm and /dev/null differ
diff --git a/realm/realm-library/src/androidTest/assets/string-only-pre-null-0.82.2.realm b/realm/realm-library/src/androidTest/assets/string-only-pre-null-0.82.2.realm
new file mode 100644
index 0000000000..9995d001ea
Binary files /dev/null and b/realm/realm-library/src/androidTest/assets/string-only-pre-null-0.82.2.realm differ
diff --git a/realm/realm-library/src/androidTest/assets/string-only-required-pre-null-0.82.2.realm b/realm/realm-library/src/androidTest/assets/string-only-required-pre-null-0.82.2.realm
new file mode 100644
index 0000000000..dbeb9e429c
Binary files /dev/null and b/realm/realm-library/src/androidTest/assets/string-only-required-pre-null-0.82.2.realm differ
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
index cd779ac531..45feac73fe 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmMigrationTests.java
@@ -36,6 +36,8 @@
 
 import io.realm.entities.AllTypes;
 import io.realm.entities.AnnotationTypes;
+import io.realm.entities.CatOwner;
+import io.realm.entities.Dog;
 import io.realm.entities.FieldOrder;
 import io.realm.entities.NullTypes;
 import io.realm.entities.PrimaryKeyAsBoxedByte;
@@ -48,6 +50,7 @@
 import io.realm.entities.PrimaryKeyAsShort;
 import io.realm.entities.PrimaryKeyAsString;
 import io.realm.entities.StringOnly;
+import io.realm.entities.StringOnlyRequired;
 import io.realm.entities.Thread;
 import io.realm.entities.migration.MigrationClassRenamed;
 import io.realm.entities.migration.MigrationFieldRenameAndAdd;
@@ -64,6 +67,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
@@ -797,16 +801,29 @@ public void migrationException_getPath() throws IOException {
         }
     }
 
-    // In default-before-migration.realm, CatOwner has a RealmList<Dog> field.
-    // This is changed to RealmList<Cat> and getInstance() must throw an exception.
+    // Check if the RealmList type change can trigger a RealmMigrationNeededException.
     @Test
     public void migrationException_realmListChanged() throws IOException {
-        configFactory.copyRealmFromAssets(context,
-                "default-before-migration.realm", Realm.DEFAULT_REALM_NAME);
+        RealmConfiguration config = configFactory.createConfiguration();
+        // Initialize the schema with RealmList<Cat>
+        Realm.getInstance(configFactory.createConfiguration()).close();
+
+        DynamicRealm dynamicRealm = DynamicRealm.getInstance(config);
+        dynamicRealm.beginTransaction();
+        // Change the RealmList type to RealmList<Dog>
+        RealmObjectSchema dogSchema = dynamicRealm.getSchema().get(Dog.CLASS_NAME);
+        RealmObjectSchema ownerSchema = dynamicRealm.getSchema().get(CatOwner.CLASS_NAME);
+        ownerSchema.removeField(CatOwner.FIELD_CATS);
+        ownerSchema.addRealmListField(CatOwner.FIELD_CATS, dogSchema);
+        dynamicRealm.commitTransaction();
+        dynamicRealm.close();
+
         try {
-            realm = Realm.getInstance(configFactory.createConfiguration());
+            realm = Realm.getInstance(config);
             fail();
         } catch (RealmMigrationNeededException ignored) {
+            assertThat(ignored.getMessage(),
+                    CoreMatchers.containsString("Invalid RealmList type for field 'cats': 'class_Dog' expected "));
         }
     }
 
@@ -816,7 +833,7 @@ public void migrationException_realmListChanged() throws IOException {
     @Test
     public void openPreNullRealmRequiredMissing() throws IOException {
         configFactory.copyRealmFromAssets(context,
-                "default-before-migration.realm", Realm.DEFAULT_REALM_NAME);
+                "string-only-pre-null-0.82.2.realm", Realm.DEFAULT_REALM_NAME);
         RealmMigration realmMigration = new RealmMigration() {
             @Override
             public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
@@ -844,13 +861,15 @@ public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
     // old class (without @Required) can be used,
     @Test
     public void migratePreNull() throws IOException {
+        final AtomicBoolean migrationCalled = new AtomicBoolean(false);
         configFactory.copyRealmFromAssets(context,
-                "default-before-migration.realm", Realm.DEFAULT_REALM_NAME);
+                "string-only-pre-null-0.82.2.realm", Realm.DEFAULT_REALM_NAME);
         RealmMigration migration = new RealmMigration() {
             @Override
             public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                 RealmObjectSchema objectSchema = realm.getSchema().get(StringOnly.CLASS_NAME);
                 objectSchema.setRequired(StringOnly.FIELD_CHARS, false);
+                migrationCalled.set(true);
             }
         };
 
@@ -860,8 +879,13 @@ public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                 .migration(migration)
                 .build();
         Realm realm = Realm.getInstance(realmConfig);
+        assertTrue(migrationCalled.get());
+
+        StringOnly stringOnly = realm.where(StringOnly.class).findFirst();
+        assertNotNull(stringOnly);
+        // This object was created with 0.82.2
+        assertEquals("String_set_with_0.82.2", stringOnly.getChars());
         realm.beginTransaction();
-        StringOnly stringOnly = realm.createObject(StringOnly.class);
         stringOnly.setChars(null);
         realm.commitTransaction();
         realm.close();
@@ -873,19 +897,25 @@ public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
     @Test
     public void openPreNullWithRequired() throws IOException {
         configFactory.copyRealmFromAssets(context,
-                "default-before-migration.realm", Realm.DEFAULT_REALM_NAME);
+                "string-only-required-pre-null-0.82.2.realm", Realm.DEFAULT_REALM_NAME);
         RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                 .schemaVersion(0)
-                .schema(AllTypes.class)
+                .schema(StringOnlyRequired.class)
                 .build();
         Realm realm = Realm.getInstance(realmConfig);
 
+        StringOnlyRequired stringOnlyRequired = realm.where(StringOnlyRequired.class).findFirst();
+        assertNotNull(stringOnlyRequired);
+        // This object was created with 0.82.2
+        assertEquals("String_set_with_0.82.2", stringOnlyRequired.getChars());
+
         realm.beginTransaction();
         try {
-            AllTypes allTypes = realm.createObject(AllTypes.class);
-            allTypes.setColumnString(null);
+            stringOnlyRequired.setChars(null);
             fail();
-        } catch (IllegalArgumentException ignored) {
+        } catch (IllegalArgumentException expected) {
+            assertThat(expected.getMessage(),
+                    CoreMatchers.containsString("Trying to set non-nullable field 'chars' to null."));
         }
         realm.cancelTransaction();
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/CatOwner.java b/realm/realm-library/src/androidTest/java/io/realm/entities/CatOwner.java
index 477ee232fd..577525d0fa 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/entities/CatOwner.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/entities/CatOwner.java
@@ -21,6 +21,10 @@
 import io.realm.annotations.Required;
 
 public class CatOwner extends RealmObject {
+    public static final String CLASS_NAME = "CatOwner";
+    public static final String FIELD_NAME = "name";
+    public static final String FIELD_CATS = "cats";
+
     @Required
     private String name;
     private RealmList<Cat> cats;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/StringOnlyRequired.java b/realm/realm-library/src/androidTest/java/io/realm/entities/StringOnlyRequired.java
new file mode 100644
index 0000000000..df6200f92e
--- /dev/null
+++ b/realm/realm-library/src/androidTest/java/io/realm/entities/StringOnlyRequired.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.entities;
+
+import io.realm.RealmObject;
+import io.realm.annotations.Required;
+
+// This class is used for the pre-null testing. Before 0.83.0, without nullable support, String is required by default.
+// To use the Realm file created before 0.83.0 without migration, @Required has to be added to the String field.
+public class StringOnlyRequired extends RealmObject {
+    @Required
+    private String chars;
+
+    public String getChars() {
+        return chars;
+    }
+
+    public void setChars(String chars) {
+        this.chars = chars;
+    }
+}
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index 27dc64e272..f69c1ad399 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import java.util.Locale;
+
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmFileException;
 import io.realm.internal.CheckedRow;
@@ -105,7 +107,8 @@ public DynamicRealmObject createObject(String className) {
         Table table = schema.getTable(className);
         // Check and throw the exception earlier for a better exception message.
         if (table.hasPrimaryKey()) {
-            throw new RealmException(String.format("'%s' has a primary key, use" +
+            throw new RealmException(String.format(Locale.US,
+                    "'%s' has a primary key, use" +
                     " 'createObject(String, Object)' instead.", className));
         }
 
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
index e3b2634a82..edc6f6abf0 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
@@ -454,7 +454,8 @@ public void set(String fieldName, Object value) {
                     value = JsonUtils.stringToDate(strValue);
                     break;
                 default:
-                    throw new IllegalArgumentException(String.format("Field %s is not a String field, " +
+                    throw new IllegalArgumentException(String.format(Locale.US,
+                            "Field %s is not a String field, " +
                             "and the provide value could not be automatically converted: %s. Use a typed" +
                             "setter instead", fieldName, value));
             }
@@ -679,7 +680,8 @@ public void setObject(String fieldName, DynamicRealmObject value) {
             Table table = proxyState.getRow$realm().getTable().getLinkTarget(columnIndex);
             Table inputTable = value.proxyState.getRow$realm().getTable();
             if (!table.hasSameSchema(inputTable)) {
-                throw new IllegalArgumentException(String.format("Type of object is wrong. Was %s, expected %s",
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        "Type of object is wrong. Was %s, expected %s",
                         inputTable.getName(), table.getName()));
             }
             proxyState.getRow$realm().setLink(columnIndex, value.proxyState.getRow$realm().getIndex());
@@ -716,7 +718,7 @@ public void setList(String fieldName, RealmList<DynamicRealmObject> list) {
             String listType = list.className != null ? list.className
                     : proxyState.getRealm$realm().getSchema().getTable(list.clazz).getClassName();
             if (!linkTargetTableName.equals(listType)) {
-                throw new IllegalArgumentException(String.format(Locale.ENGLISH,
+                throw new IllegalArgumentException(String.format(Locale.US,
                         "The elements in the list are not the proper type. " +
                                 "Was %s expected %s.", listType, linkTargetTableName));
             }
@@ -732,7 +734,7 @@ public void setList(String fieldName, RealmList<DynamicRealmObject> list) {
                 throw new IllegalArgumentException("Each element in 'list' must belong to the same Realm instance.");
             }
             if (!typeValidated && !linkTargetTable.hasSameSchema(obj.realmGet$proxyState().getRow$realm().getTable())) {
-                throw new IllegalArgumentException(String.format(Locale.ENGLISH,
+                throw new IllegalArgumentException(String.format(Locale.US,
                         "Element at index %d is not the proper type. " +
                                 "Was '%s' expected '%s'.",
                         i,
@@ -803,7 +805,8 @@ private void checkFieldType(String fieldName, long columnIndex, RealmFieldType e
             if (columnType == RealmFieldType.INTEGER || columnType == RealmFieldType.OBJECT) {
                 columnTypeIndefiniteVowel = "n";
             }
-            throw new IllegalArgumentException(String.format("'%s' is not a%s '%s', but a%s '%s'.",
+            throw new IllegalArgumentException(String.format(Locale.US,
+                    "'%s' is not a%s '%s', but a%s '%s'.",
                     fieldName, expectedIndefiniteVowel, expectedType, columnTypeIndefiniteVowel, columnType));
         }
     }
@@ -910,7 +913,7 @@ public String toString() {
                     break;
                 case LIST:
                     String targetClassName = proxyState.getRow$realm().getTable().getLinkTarget(columnIndex).getClassName();
-                    sb.append(String.format("RealmList<%s>[%s]", targetClassName, proxyState.getRow$realm().getLinkList(columnIndex).size()));
+                    sb.append(String.format(Locale.US, "RealmList<%s>[%s]", targetClassName, proxyState.getRow$realm().getLinkList(columnIndex).size()));
                     break;
                 case UNSUPPORTED_TABLE:
                 case UNSUPPORTED_MIXED:
@@ -960,7 +963,7 @@ public String toString() {
 
         final RealmFieldType fieldType = realmObjectSchema.getFieldType(srcFieldName); // throws IAE if not found
         if (fieldType != RealmFieldType.OBJECT && fieldType != RealmFieldType.LIST) {
-            throw new IllegalArgumentException(String.format(Locale.ENGLISH,
+            throw new IllegalArgumentException(String.format(Locale.US,
                     "Unexpected field type: %1$s. Field type should be either %2$s.%3$s or %2$s.%4$s.",
                     fieldType.name(),
                     RealmFieldType.class.getSimpleName(),
@@ -984,7 +987,7 @@ public String toString() {
     private void checkIsPrimaryKey(String fieldName) {
         RealmObjectSchema objectSchema = proxyState.getRealm$realm().getSchema().getSchemaForClass(getType());
         if (objectSchema.hasPrimaryKey() && objectSchema.getPrimaryKey().equals(fieldName)) {
-            throw new IllegalArgumentException(String.format(
+            throw new IllegalArgumentException(String.format(Locale.US,
                     "Primary key field '%s' cannot be changed after object was created.", fieldName));
         }
     }
diff --git a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
index 194aa13d72..b8725ec8e8 100644
--- a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
+++ b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
@@ -5,6 +5,7 @@
 import java.util.Date;
 import java.util.Iterator;
 import java.util.ListIterator;
+import java.util.Locale;
 
 import io.realm.internal.Collection;
 import io.realm.internal.InvalidRow;
@@ -246,7 +247,7 @@ private long getColumnIndexForSort(String fieldName) {
         }
         long columnIndex = collection.getTable().getColumnIndex(fieldName);
         if (columnIndex < 0) {
-            throw new IllegalArgumentException(String.format("Field '%s' does not exist.", fieldName));
+            throw new IllegalArgumentException(String.format(Locale.US, "Field '%s' does not exist.", fieldName));
         }
         return columnIndex;
     }
diff --git a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionSnapshot.java b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionSnapshot.java
index 49124234d0..6a2989647d 100644
--- a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionSnapshot.java
+++ b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionSnapshot.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import java.util.Locale;
+
 import io.realm.internal.Collection;
 import io.realm.internal.UncheckedRow;
 
@@ -128,7 +130,7 @@ public int size() {
 
     private UnsupportedOperationException getUnsupportedException(String methodName) {
         return new UnsupportedOperationException(
-                String.format("'%s()' is not supported by OrderedRealmCollectionSnapshot. " +
+                String.format(Locale.US, "'%s()' is not supported by OrderedRealmCollectionSnapshot. " +
                         "Call '%s()' on the original 'RealmCollection' instead.", methodName, methodName));
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index babed1e66d..263bfe9311 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -39,6 +39,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Scanner;
 import java.util.Set;
@@ -407,12 +408,12 @@ private static Realm createAndValidateFromCache(RealmCache cache) {
                     realm.doClose();
                     throw new RealmMigrationNeededException(
                             configuration.getPath(),
-                            String.format("Realm on disk need to migrate from v%s to v%s", currentVersion, requiredVersion));
+                            String.format(Locale.US, "Realm on disk need to migrate from v%s to v%s", currentVersion, requiredVersion));
                 }
                 if (requiredVersion < currentVersion) {
                     realm.doClose();
                     throw new IllegalArgumentException(
-                            String.format("Realm on disk is newer than the one specified: v%s vs. v%s", currentVersion, requiredVersion));
+                            String.format(Locale.US, "Realm on disk is newer than the one specified: v%s vs. v%s", currentVersion, requiredVersion));
                 }
             }
 
@@ -998,7 +999,7 @@ private Scanner getFullStringScanner(InputStream in) {
         Table table = schema.getTable(clazz);
         // Checks and throws the exception earlier for a better exception message.
         if (table.hasPrimaryKey()) {
-            throw new RealmException(String.format("'%s' has a primary key, use" +
+            throw new RealmException(String.format(Locale.US, "'%s' has a primary key, use" +
                     " 'createObject(Class<E>, Object)' instead.", table.getClassName()));
         }
         return configuration.getSchemaMediator().newInstance(clazz, this,
diff --git a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
index 55a3f7c47e..cafcd4a23d 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
@@ -25,6 +25,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Set;
 
 import io.realm.annotations.RealmModule;
@@ -322,7 +323,7 @@ protected static RealmProxyMediator createSchemaMediator(Set<Object> modules,
     private static RealmProxyMediator getModuleMediator(String fullyQualifiedModuleClassName) {
         String[] moduleNameParts = fullyQualifiedModuleClassName.split("\\.");
         String moduleSimpleName = moduleNameParts[moduleNameParts.length - 1];
-        String mediatorName = String.format("io.realm.%s%s", moduleSimpleName, "Mediator");
+        String mediatorName = String.format(Locale.US, "io.realm.%s%s", moduleSimpleName, "Mediator");
         Class<?> clazz;
         //noinspection TryWithIdenticalCatches
         try {
@@ -500,7 +501,8 @@ public Builder encryptionKey(byte[] key) {
                 throw new IllegalArgumentException("A non-null key must be provided");
             }
             if (key.length != KEY_LENGTH) {
-                throw new IllegalArgumentException(String.format("The provided key must be %s bytes. Yours was: %s",
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        "The provided key must be %s bytes. Yours was: %s",
                         KEY_LENGTH, key.length));
             }
             this.key = Arrays.copyOf(key, key.length);
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index 4380fee5ba..12903d09ac 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -25,6 +25,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.Locale;
 import java.util.NoSuchElementException;
 
 import io.realm.internal.InvalidRow;
@@ -254,7 +255,8 @@ private E copyToRealmIfNeeded(E object) {
                         return object;
                     } else {
                         // Different target table
-                        throw new IllegalArgumentException(String.format("The object has a different type from list's." +
+                        throw new IllegalArgumentException(String.format(Locale.US,
+                                "The object has a different type from list's." +
                                 " Type of the list is '%s', type of object is '%s'.", listClassName, objectClassName));
                     }
                 } else if (realm.threadId == proxy.realmGet$proxyState().getRealm$realm().threadId) {
diff --git a/realm/realm-library/src/main/java/io/realm/RealmMigration.java b/realm/realm-library/src/main/java/io/realm/RealmMigration.java
index 5140a3bf6a..44e98f30ca 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmMigration.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmMigration.java
@@ -42,7 +42,7 @@
  *     }
  *
  *     if (oldVersion < newVersion) {
- *         throw new IllegalStateException(String.format("Migration missing from v%d to v%d", oldVersion, newVersion));
+ *         throw new IllegalStateException(String.format(Locale.US, "Migration missing from v%d to v%d", oldVersion, newVersion));
  *     }
  *   }
  * }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index f0c45e581f..49b4e77fa4 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -19,6 +19,7 @@
 
 import java.util.Collections;
 import java.util.Date;
+import java.util.Locale;
 
 import io.realm.annotations.Required;
 import io.realm.internal.Collection;
@@ -1600,7 +1601,8 @@ public Number sum(String fieldName) {
             case DOUBLE:
                 return query.sumDouble(columnIndex);
             default:
-                throw new IllegalArgumentException(String.format(TYPE_MISMATCH, fieldName, "int, float or double"));
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        TYPE_MISMATCH, fieldName, "int, float or double"));
         }
     }
 
@@ -1626,7 +1628,8 @@ public double average(String fieldName) {
             case FLOAT:
                 return query.averageFloat(columnIndex);
             default:
-                throw new IllegalArgumentException(String.format(TYPE_MISMATCH, fieldName, "int, float or double"));
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        TYPE_MISMATCH, fieldName, "int, float or double"));
         }
     }
 
@@ -1651,7 +1654,8 @@ public Number min(String fieldName) {
             case DOUBLE:
                 return this.query.minimumDouble(columnIndex);
             default:
-                throw new IllegalArgumentException(String.format(TYPE_MISMATCH, fieldName, "int, float or double"));
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        TYPE_MISMATCH, fieldName, "int, float or double"));
         }
     }
 
@@ -1692,7 +1696,8 @@ public Number max(String fieldName) {
             case DOUBLE:
                 return this.query.maximumDouble(columnIndex);
             default:
-                throw new IllegalArgumentException(String.format(TYPE_MISMATCH, fieldName, "int, float or double"));
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        TYPE_MISMATCH, fieldName, "int, float or double"));
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java
index e09cc80a7d..e22f77351e 100644
--- a/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/StandardRealmObjectSchema.java
@@ -20,6 +20,7 @@
 import java.util.Date;
 import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -176,7 +177,8 @@ public StandardRealmObjectSchema addField(String fieldName, Class<?> fieldType,
             if (SUPPORTED_LINKED_FIELDS.containsKey(fieldType)) {
                 throw new IllegalArgumentException("Use addRealmObjectField() instead to add fields that link to other RealmObjects: " + fieldName);
             } else {
-                throw new IllegalArgumentException(String.format("Realm doesn't support this field type: %s(%s)",
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        "Realm doesn't support this field type: %s(%s)",
                         fieldName, fieldType));
             }
         }
@@ -678,7 +680,8 @@ private long getColumnIndex(String fieldName) {
         long columnIndex = table.getColumnIndex(fieldName);
         if (columnIndex == -1) {
             throw new IllegalArgumentException(
-                    String.format("Field name '%s' does not exist on schema for '%s'",
+                    String.format(Locale.US,
+                            "Field name '%s' does not exist on schema for '%s'",
                             fieldName, getClassName()
                     ));
         }
diff --git a/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java b/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
index bad9719003..07e6b86453 100644
--- a/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
+++ b/realm/realm-library/src/main/java/io/realm/exceptions/RealmFileException.java
@@ -15,6 +15,8 @@
  */
 package io.realm.exceptions;
 
+import java.util.Locale;
+
 import io.realm.internal.Keep;
 import io.realm.internal.SharedRealm;
 
@@ -118,6 +120,6 @@ public Kind getKind() {
 
     @Override
     public String toString() {
-        return String.format("%s Kind: %s.", super.toString(), kind);
+        return String.format(Locale.US, "%s Kind: %s.", super.toString(), kind);
     }
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java
index 273d3ef411..3936d36a50 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/SortDescriptor.java
@@ -19,6 +19,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Set;
 
 import io.realm.RealmFieldType;
@@ -103,7 +104,7 @@ static SortDescriptor getTestInstance(Table table, long[] columnIndices) {
     // could do this in the field descriptor, but this provides a better error message
     private static void checkFieldType(FieldDescriptor descriptor, Set<RealmFieldType> legalTerminalTypes, String message, String fieldDescriptions) {
         if (!legalTerminalTypes.contains(descriptor.getFinalColumnType())) {
-            throw new IllegalArgumentException(String.format(
+            throw new IllegalArgumentException(String.format(Locale.US,
                     "%s on '%s' field '%s' in '%s'.", message, descriptor.getFinalColumnType(), descriptor.getFinalColumnName(), fieldDescriptions));
         }
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java
index a5b7f6cc70..d919d1e8d0 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java
@@ -16,6 +16,7 @@
  */
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 
 import io.realm.RealmFieldType;
@@ -69,13 +70,13 @@ protected void compileFieldDescription(List<String> fields) {
             tableInfo = schema.getColumnInfo(currentTable);
             if (tableInfo == null) {
                 throw new IllegalArgumentException(
-                        String.format("Invalid query: table '%s' not found in this schema.", currentTable));
+                        String.format(Locale.US, "Invalid query: table '%s' not found in this schema.", currentTable));
             }
 
             columnIndex = tableInfo.getColumnIndex(columnName);
             if (columnIndex < 0) {
                 throw new IllegalArgumentException(
-                        String.format("Invalid query: field '%s' not found in table '%s'.", columnName, currentTable));
+                        String.format(Locale.US, "Invalid query: field '%s' not found in table '%s'.", columnName, currentTable));
             }
 
             columnType = tableInfo.getColumnType(columnName);
diff --git a/realm/realm-library/src/main/java/io/realm/internal/fields/DynamicFieldDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/fields/DynamicFieldDescriptor.java
index 55995f9355..80dc911b61 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/fields/DynamicFieldDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/fields/DynamicFieldDescriptor.java
@@ -16,6 +16,7 @@
  */
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 
 import io.realm.RealmFieldType;
@@ -64,7 +65,7 @@ protected void compileFieldDescription(List<String> fields) {
             columnIndex = currentTable.getColumnIndex(columnName);
             if (columnIndex < 0) {
                 throw new IllegalArgumentException(
-                        String.format("Invalid query: field '%s' not found in table '%s'.", columnName, tableName));
+                        String.format(Locale.US, "Invalid query: field '%s' not found in table '%s'.", columnName, tableName));
             }
 
             columnType = currentTable.getColumnType(columnIndex);
diff --git a/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java
index 6a17af9445..4ed1bcac46 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/fields/FieldDescriptor.java
@@ -19,6 +19,7 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 
 import io.realm.RealmFieldType;
@@ -273,7 +274,7 @@ protected final void setCompilationResults(
 
     private void verifyColumnType(String tableName, String columnName, RealmFieldType columnType, Set<RealmFieldType> validTypes) {
         if (!validTypes.contains(columnType)) {
-            throw new IllegalArgumentException(String.format(
+            throw new IllegalArgumentException(String.format(Locale.US,
                     "Invalid query: field '%s' in table '%s' is of invalid type '%s'.",
                     columnName, tableName, columnType.toString()));
         }
diff --git a/realm/realm-library/src/main/java/io/realm/log/RealmLog.java b/realm/realm-library/src/main/java/io/realm/log/RealmLog.java
index 80bde88777..f6f33cac71 100644
--- a/realm/realm-library/src/main/java/io/realm/log/RealmLog.java
+++ b/realm/realm-library/src/main/java/io/realm/log/RealmLog.java
@@ -18,6 +18,8 @@
 
 import android.util.Log;
 
+import java.util.Locale;
+
 
 /**
  * Global logger used by all Realm components.
@@ -275,7 +277,7 @@ private static void log(int level, Throwable throwable, String message, Object..
 
         StringBuilder stringBuilder = new StringBuilder();
         if (args != null && args.length > 0) {
-            message = String.format(message, args);
+            message = String.format(Locale.US, message, args);
         }
         if (throwable != null) {
             stringBuilder.append(Log.getStackTraceString(throwable));
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java b/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
index 29e7faef4a..401a01f9af 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ObjectServer.java
@@ -21,6 +21,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Locale;
 
 import io.realm.internal.Keep;
 
@@ -50,10 +51,12 @@ public static void init(Context context) {
                 File dir = File.createTempFile("remote_sync_", "_" + android.os.Process.myPid(),
                         context.getFilesDir());
                 if (!dir.delete()) {
-                    throw new IllegalStateException(String.format("Temp file '%s' cannot be deleted.", dir.getPath()));
+                    throw new IllegalStateException(String.format(Locale.US,
+                            "Temp file '%s' cannot be deleted.", dir.getPath()));
                 }
                 if (!dir.mkdir()) {
-                    throw new IllegalStateException(String.format("Directory '%s' for SyncManager cannot be created. ",
+                    throw new IllegalStateException(String.format(Locale.US,
+                            "Directory '%s' for SyncManager cannot be created. ",
                             dir.getPath()));
                 }
                 SyncManager.nativeInitializeSyncManager(dir.getPath());
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index 4724b9c7d5..234a3ec80e 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -27,6 +27,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -511,7 +512,8 @@ public Builder encryptionKey(byte[] key) {
                 throw new IllegalArgumentException("A non-null key must be provided");
             }
             if (key.length != KEY_LENGTH) {
-                throw new IllegalArgumentException(String.format("The provided key must be %s bytes. Yours was: %s",
+                throw new IllegalArgumentException(String.format(Locale.US,
+                        "The provided key must be %s bytes. Yours was: %s",
                         KEY_LENGTH, key.length));
             }
             this.key = Arrays.copyOf(key, key.length);
@@ -720,7 +722,7 @@ private String MD5(String in) {
                 byte[] buf = digest.digest(in.getBytes("UTF-8"));
                 StringBuilder builder = new StringBuilder();
                 for (byte b : buf) {
-                    builder.append(String.format("%02X", b));
+                    builder.append(String.format(Locale.US, "%02X", b));
                 }
                 return builder.toString();
             } catch (NoSuchAlgorithmException e) {
@@ -799,14 +801,16 @@ public SyncConfiguration build() {
                     realmFileDirectory = new File(rootDir, user.getIdentity());
                     fullPathName = realmFileDirectory.getAbsolutePath() + File.pathSeparator + realmFileName;
                     if (fullPathName.length() > MAX_FULL_PATH_LENGTH) { // we are out of ideas
-                        throw new IllegalStateException(String.format("Full path name must not exceed %d characters: %s",
+                        throw new IllegalStateException(String.format(Locale.US,
+                                "Full path name must not exceed %d characters: %s",
                                 MAX_FULL_PATH_LENGTH, fullPathName));
                     }
                 }
             }
 
             if (realmFileName.length() > MAX_FILE_NAME_LENGTH) {
-                throw new IllegalStateException(String.format("File name exceed %d characters: %d", MAX_FILE_NAME_LENGTH,
+                throw new IllegalStateException(String.format(Locale.US,
+                        "File name exceed %d characters: %d", MAX_FILE_NAME_LENGTH,
                         realmFileName.length()));
             }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 8e070e1dbd..e99a35d903 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -16,6 +16,7 @@
 
 package io.realm;
 
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.ConcurrentHashMap;
@@ -81,7 +82,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                 return;
             }
 
-            String errorMsg = String.format("Session Error[%s]: %s",
+            String errorMsg = String.format(Locale.US, "Session Error[%s]: %s",
                     session.getConfiguration().getServerUrl(),
                     error.toString());
             switch (error.getErrorCode().getCategory()) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index 846f79f290..2a0438ff01 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -20,6 +20,7 @@
 import java.util.HashMap;
 import java.util.IdentityHashMap;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
@@ -635,7 +636,8 @@ public boolean isSuccess() {
          */
         public void throwExceptionIfNeeded() {
             if (resultReceived && errorCode != null) {
-                throw new ObjectServerError(ErrorCode.UNKNOWN, String.format("Internal error (%d): %s", errorCode, errorMessage));
+                throw new ObjectServerError(ErrorCode.UNKNOWN,
+                        String.format(Locale.US, "Internal error (%d): %s", errorCode, errorMessage));
             }
         }
     }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 245a287482..94ea8c6a68 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -28,6 +28,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.Future;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -75,7 +76,8 @@ public void onError(SyncSession session, ObjectServerError error) {
                                 if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {
                                     RealmLog.error("Client Reset required for user's management Realm: " + user.toString());
                                 } else {
-                                    RealmLog.error(String.format("Unexpected error with %s's management Realm: %s",
+                                    RealmLog.error(String.format(Locale.US,
+                                            "Unexpected error with %s's management Realm: %s",
                                             user.getIdentity(),
                                             error.toString()));
                                 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
index 1fdaa9f8cf..cf9c8d85fe 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
@@ -20,6 +20,7 @@
 import org.json.JSONObject;
 
 import java.io.IOException;
+import java.util.Locale;
 
 import io.realm.ErrorCode;
 import io.realm.ObjectServerError;
@@ -132,14 +133,14 @@ private AuthenticateResponse(String serverResponse) {
             if (accessToken == null) {
                 message = "accessToken = null";
             } else {
-                message = String.format("Identity %s; Path %s", accessToken.identity(), accessToken.path());
+                message = String.format(Locale.US, "Identity %s; Path %s", accessToken.identity(), accessToken.path());
             }
         } catch (JSONException ex) {
             accessToken = null;
             refreshToken = null;
             //noinspection ThrowableInstanceNeverThrown
             error = new ObjectServerError(ErrorCode.JSON_EXCEPTION, ex);
-            message = String.format("Error %s", error.getErrorMessage());
+            message = String.format(Locale.US, "Error %s", error.getErrorMessage());
         }
         RealmLog.debug("AuthenticateResponse. " + message);
         setError(error);
