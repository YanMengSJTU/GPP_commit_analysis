diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7b3e37cc55..ce1d742950 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,14 @@
 ## 2.4.0
 
+## 2.3.1
+
+### Bug fixes
+
+* Fixed NPE problem happened in SharedRealm.finalize() (#3730).
+* Fixed a build error when the project is using Kotlin (#4087).
+* Fixed a bug causing classes to be replaced by classes already in Gradle's classpath (#3568).
+* NullPointerException when notifying a single object that it changed (#4086).
+
 ## 2.3.0
 
 ### Object Server API Changes 
diff --git a/examples/kotlinExample/build.gradle b/examples/kotlinExample/build.gradle
index 8741e4a82f..8034025e63 100644
--- a/examples/kotlinExample/build.gradle
+++ b/examples/kotlinExample/build.gradle
@@ -1,5 +1,5 @@
 buildscript {
-    ext.kotlin_version = '1.0.4'
+    ext.kotlin_version = '1.0.6'
     repositories {
         jcenter()
         mavenCentral()
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
index 38829e6538..43bf3f89cd 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
@@ -59,20 +59,14 @@ class Realm implements Plugin<Project> {
         project.repositories.add(project.getRepositories().jcenter())
         project.dependencies.add("compile", "io.realm:realm-annotations:${Version.VERSION}")
         if (usesAptPlugin) {
-            project.dependencies.add("apt", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("apt", "io.realm:realm-annotations-processor:${Version.VERSION}")
-            project.dependencies.add("androidTestApt", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("androidTestApt", "io.realm:realm-annotations-processor:${Version.VERSION}")
         } else if (isKotlinProject && !preferAptOnKotlinProject) {
-            project.dependencies.add("kapt", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("kapt", "io.realm:realm-annotations-processor:${Version.VERSION}")
-            project.dependencies.add("kaptAndroidTest", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("kaptAndroidTest", "io.realm:realm-annotations-processor:${Version.VERSION}")
         } else {
             assert hasAnnotationProcessorConfiguration
-            project.dependencies.add("annotationProcessor", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("annotationProcessor", "io.realm:realm-annotations-processor:${Version.VERSION}")
-            project.dependencies.add("androidTestAnnotationProcessor", "io.realm:realm-annotations:${Version.VERSION}")
             project.dependencies.add("androidTestAnnotationProcessor", "io.realm:realm-annotations-processor:${Version.VERSION}")
         }
     }
diff --git a/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy b/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
index 857cd304b2..e6e4813551 100644
--- a/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
+++ b/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
@@ -195,7 +195,6 @@ class RealmTransformer extends Transform {
         // will use a cached object and all the classes will be frozen.
         ClassPool classPool = new ClassPool(null)
         classPool.appendSystemPath()
-        classPool.appendClassPath(new LoaderClassPath(getClass().getClassLoader()))
 
         inputs.each {
             it.directoryInputs.each {
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 5e1e6be367..ac7f1affbd 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -53,7 +53,7 @@ android {
                         "-DCMAKE_TOOLCHAIN_FILE=${project.file('src/main/cpp/android.toolchain.cmake').path}"
                 if (project.ccachePath) arguments "-DNDK_CCACHE=$project.ccachePath"
                 if (project.lcachePath) arguments "-DNDK_LCACHE=$project.lcachePath"
-                if (project.hasProperty('buildTargetABIs')) {
+                if (project.hasProperty('buildTargetABIs') && !project.getProperty('buildTargetABIs').trim().isEmpty()) {
                     abiFilters(*project.getProperty('buildTargetABIs').trim().split('\\s*,\\s*'))
                 } else {
                     // armeabi is not supported anymore.
@@ -523,6 +523,9 @@ if (project.hasProperty('dontCleanJniFiles')) {
 project.afterEvaluate {
     android.libraryVariants.all { variant ->
         variant.externalNativeBuildTasks[0].dependsOn(checkNdk)
+        if (project.hasProperty('buildTargetABIs') && project.getProperty('buildTargetABIs').trim().isEmpty()) {
+            variant.externalNativeBuildTasks[0].enabled = false
+        }
     }
 }
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmLinkTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmLinkTests.java
index fd1af8a287..8e7e01d727 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmLinkTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmLinkTests.java
@@ -296,7 +296,7 @@ public void querySingleRelationString() {
         assertEquals(0, none1.size());
 
         RealmResults<Owner> owners2 = testRealm.where(Owner.class).notEqualTo("cat.name", "Max").findAll();
-        assertEquals(1, owners1.size());
+        assertEquals(1, owners2.size());
 
         RealmResults<Owner> none2 = testRealm.where(Owner.class).notEqualTo("cat.name", "Blackie").findAll();
         assertEquals(0, none2.size());
@@ -465,7 +465,7 @@ public void queryMultipleRelationsString() {
         assertEquals(0, none1.size());
 
         RealmResults<Owner> owners2 = testRealm.where(Owner.class).notEqualTo("dogs.name", "King").findAll();
-        assertEquals(1, owners1.size());
+        assertEquals(1, owners2.size());
 
         RealmResults<Owner> none2 = testRealm.where(Owner.class).notEqualTo("dogs.name", "Pluto").findAll();
         assertEquals(0, none1.size());
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index 5c8491f488..d449711600 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -833,7 +833,6 @@ public void unicodeStrings() {
 
         String test_char = "";
         String test_char_old = "";
-        String get_data = "";
 
         for (int i = 0; i < 1000; i++) {
             random_value = random.nextInt(25);
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
index 5ce7dd5cb8..59d59b1c7c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
@@ -35,7 +35,6 @@
 import java.lang.ref.WeakReference;
 import java.util.Date;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.realm.entities.AllTypes;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/UnManagedOrderedRealmCollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/UnManagedOrderedRealmCollectionTests.java
index ea515284b7..97f3326534 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/UnManagedOrderedRealmCollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/UnManagedOrderedRealmCollectionTests.java
@@ -29,7 +29,6 @@
 import io.realm.entities.AllJavaTypes;
 import io.realm.rule.TestRealmConfigurationFactory;
 
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
index 861d3e660c..8245069cb4 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
@@ -23,7 +23,6 @@
 
 import io.realm.Case;
 import io.realm.RealmFieldType;
-import io.realm.Sort;
 import io.realm.TestHelper;
 
 public class JNIQueryTest extends TestCase {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
index 36507e6f58..a7c570267b 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableInsertTest.java
@@ -16,8 +16,6 @@
 
 package io.realm.internal;
 
-import android.test.MoreAsserts;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -31,7 +29,6 @@
 import io.realm.RealmFieldType;
 import io.realm.TestHelper;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java b/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
index 8bec3bfa4c..d02a0ea22b 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
@@ -17,7 +17,6 @@
 package io.realm.rule;
 
 import android.content.Context;
-import android.content.res.AssetManager;
 import android.support.test.InstrumentationRegistry;
 
 import org.junit.rules.TemporaryFolder;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/services/RemoteProcessService.java b/realm/realm-library/src/androidTest/java/io/realm/services/RemoteProcessService.java
index 7a841817d0..54c724abd2 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/services/RemoteProcessService.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/services/RemoteProcessService.java
@@ -24,7 +24,6 @@
 import android.os.Message;
 import android.os.Messenger;
 import android.os.RemoteException;
-import android.util.Log;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
index 76cfd7a2b0..1e320e876b 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
@@ -29,6 +29,8 @@ static_assert(SchemaMode::Additive ==
 static_assert(SchemaMode::Manual ==
               static_cast<SchemaMode>(io_realm_internal_SharedRealm_SCHEMA_MODE_VALUE_MANUAL), "");
 
+static void finalize_shared_realm(jlong ptr);
+
 JNIEXPORT void JNICALL
 Java_io_realm_internal_SharedRealm_nativeInit(JNIEnv *env, jclass, jstring temporary_directory_path)
 {
@@ -98,8 +100,9 @@ Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm(JNIEnv*, jclass, jlong
 {
     TR_ENTER_PTR(shared_realm_ptr)
 
-    auto ptr = reinterpret_cast<SharedRealm*>(shared_realm_ptr);
-    delete ptr;
+    auto shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
+    // Close the SharedRealm only. Let the finalizer daemon thread free the SharedRealm
+    shared_realm->close();
 }
 
 JNIEXPORT void JNICALL
@@ -457,4 +460,16 @@ Java_io_realm_internal_SharedRealm_nativeRequiresMigration(JNIEnv *env, jclass,
     return JNI_FALSE;
 }
 
+static void finalize_shared_realm(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    delete reinterpret_cast<SharedRealm*>(ptr);
+}
+
+JNIEXPORT jlong JNICALL
+Java_io_realm_internal_SharedRealm_nativeGetFinalizerPtr(JNIEnv*, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_shared_realm);
+}
 
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index ee2ee17f0d..e35fbdb309 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -157,7 +157,7 @@ void ThrowException(JNIEnv* env, ExceptionKind exception, const std::string& cla
             break;
     }
     if (jExceptionClass != NULL) {
-        Log::e("Exception has been throw: %1", message.c_str());
+        Log::e("Exception has been thrown: %1", message.c_str());
         env->ThrowNew(jExceptionClass, message.c_str());
     }
     else {
diff --git a/realm/realm-library/src/main/java/io/realm/HandlerController.java b/realm/realm-library/src/main/java/io/realm/HandlerController.java
index 5f76391b8a..fa24bff167 100644
--- a/realm/realm-library/src/main/java/io/realm/HandlerController.java
+++ b/realm/realm-library/src/main/java/io/realm/HandlerController.java
@@ -628,12 +628,14 @@ private void completedAsyncRealmObject(QueryUpdateTask.Result result) {
                 } else if (compare > 0) {
                     // the caller has advanced we need to
                     // retry against the current version of the caller if it's still empty
-                    if (RealmObject.isValid(proxy)) { // already completed & has a valid pointer no need to re-run
-                        RealmLog.trace("[COMPLETED_ASYNC_REALM_OBJECT %s], realm: %s. " +
-                                "RealmObject is already loaded, just notify it",
-                                realm, HandlerController.this);
-                        proxy.realmGet$proxyState().notifyChangeListeners$realm();
+                    if (RealmObject.isLoaded(proxy)) { // already completed & has a valid pointer no need to re-run
+                        if (RealmObject.isValid(proxy)) {
+                            RealmLog.trace("[COMPLETED_ASYNC_REALM_OBJECT %s], realm: %s. " +
+                                            "RealmObject is already loaded, just notify it",
+                                    realm, HandlerController.this);
+                            proxy.realmGet$proxyState().notifyChangeListeners$realm();
 
+                        }
                     } else {
                         RealmLog.trace("[COMPLETED_ASYNC_REALM_OBJECT %s, realm: %s. " +
                                 "RealmObject is not loaded yet. Rerun the query.",
diff --git a/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java b/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java
index 496aa18734..f658b1296e 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/RealmCore.java
@@ -21,9 +21,7 @@
 import com.getkeepsafe.relinker.ReLinker;
 
 import java.io.File;
-import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 import java.util.Locale;
 
 import io.realm.BuildConfig;
diff --git a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java b/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
index 82aca6f7b8..9d3868f38e 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
@@ -23,7 +23,7 @@
 import io.realm.RealmSchema;
 import io.realm.internal.async.BadVersionException;
 
-public final class SharedRealm implements Closeable {
+public final class SharedRealm implements Closeable, NativeObject {
 
     // Const value for RealmFileException conversion
     public static final byte FILE_EXCEPTION_KIND_ACCESS_ERROR = 0;
@@ -33,6 +33,7 @@
     public static final byte FILE_EXCEPTION_KIND_NOT_FOUND = 4;
     public static final byte FILE_EXCEPTION_KIND_INCOMPATIBLE_LOCK_FILE = 5;
     public static final byte FILE_EXCEPTION_KIND_FORMAT_UPGRADE_REQUIRED = 6;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
 
     public static void initialize(File tempDirectory) {
         if (SharedRealm.temporaryDirectory != null) {
@@ -175,6 +176,7 @@ private SharedRealm(long nativePtr, RealmConfiguration configuration, RealmNotif
         this.realmNotifier = notifier;
         this.schemaChangeListener = schemaVersionListener;
         context = new Context();
+        context.addReference(this);
         this.lastSchemaVersion = schemaVersionListener == null ? -1L : getSchemaVersion();
         objectServerFacade = null;
     }
@@ -215,10 +217,6 @@ public static SharedRealm getInstance(RealmConfiguration config, RealmNotifier r
         }
     }
 
-    long getNativePtr() {
-        return nativePtr;
-    }
-
     public void beginTransaction() {
         nativeBeginTransaction(nativePtr);
         invokeSchemaChangeListenerIfSchemaChanged();
@@ -347,23 +345,21 @@ public void close() {
         synchronized (context) {
             if (nativePtr != 0) {
                 nativeCloseSharedRealm(nativePtr);
+                // It is OK to clear the nativePtr. It has been saved to the NativeObjectReference when adding to the
+                // context.
                 nativePtr = 0;
             }
         }
     }
 
     @Override
-    protected void finalize() throws Throwable {
-        synchronized (context) {
-            close();
-            // FIXME: Below is the original implementation of SharedGroup.finalize().
-            // And actually Context.asyncDisposeSharedGroup will simply call nativeClose which is not asyc at all.
-            // IMO since this implemented Closeable already, it makes no sense to implement finalize.
-            // Just keep the logic the same for now and make nativeClose private. Rethink about this when cleaning
-            // up finalizers.
-            //context.asyncDisposeSharedRealm(nativePtr);
-        }
-        super.finalize();
+    public long getNativePtr() {
+        return nativePtr;
+    }
+
+    @Override
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
     }
 
     public void invokeSchemaChangeListenerIfSchemaChanged() {
@@ -412,4 +408,5 @@ private static native long nativeCreateConfig(String realmPath, byte[] key, byte
     private static native boolean nativeCompact(long nativeSharedRealmPtr);
     private static native void nativeUpdateSchema(long nativePtr, long nativeSchemaPtr, long version);
     private static native boolean nativeRequiresMigration(long nativePtr, long nativeSchemaPtr);
+    private static native long nativeGetFinalizerPtr();
 }
