diff --git a/CHANGELOG.md b/CHANGELOG.md
index 42bed8de7e..5a54642629 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -8,6 +8,7 @@
 
 ### Enhancements
 
+* Projects using Kotlin now include additional extension functions that make working with Kotlin easier. See [docs](https://realm.io/docs/java/latest/#kotlin) for more info (#4684).
 * New query predicate: `sort()`.
 * New query predicate: `distinctValues()`. Will be renamed to `distinct` in next major version.
 * The Realm annotation processor now has a stable output when there are no changes to model classes, improving support for incremental compilers (#5567).
diff --git a/Jenkinsfile b/Jenkinsfile
index f511eb1188..7c8e9a7d6d 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -95,6 +95,7 @@ try {
                     } finally {
                       stopLogCatCollector(backgroundPid)
                       storeJunitResults 'realm/realm-library/build/outputs/androidTest-results/connected/**/TEST-*.xml'
+                      storeJunitResults 'realm/kotlin-extensions/build/outputs/androidTest-results/connected/**/TEST-*.xml'
                     }
                   }
                 }
@@ -195,8 +196,9 @@ def getTagsString(Map<String, String> tags) {
 def storeJunitResults(String path) {
   step([
 	 $class: 'JUnitResultArchiver',
-	testResults: path
-       ])
+     allowEmptyResults: true,
+     testResults: path
+   ])
 }
 
 def collectAarMetrics() {
diff --git a/examples/kotlinExample/build.gradle b/examples/kotlinExample/build.gradle
index 88e03b0551..df885d428c 100644
--- a/examples/kotlinExample/build.gradle
+++ b/examples/kotlinExample/build.gradle
@@ -44,10 +44,17 @@ android {
     }
 }
 
-// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-1-4-is-out/
+// This is added automatically if Kotlin is registered in the project, but Kotlin extension functions
+// for Realm can be excluded if needed.
+realm {
+    kotlinExtensionsEnabled = true
+}
+
+
+// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-1-50-is-out/
 tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
     kotlinOptions {
-        freeCompilerArgs = ["-Xjsr305-annotations=enable"]
+        freeCompilerArgs = ["-Xjsr305=strict"]
     }
 }
 
diff --git a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
index 643704a169..82a2cfb8f5 100644
--- a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
+++ b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
@@ -26,6 +26,8 @@ import io.realm.Sort
 import io.realm.examples.kotlin.model.Cat
 import io.realm.examples.kotlin.model.Dog
 import io.realm.examples.kotlin.model.Person
+import io.realm.kotlin.createObject
+import io.realm.kotlin.where
 import org.jetbrains.anko.doAsync
 import org.jetbrains.anko.uiThread
 import kotlin.properties.Delegates
@@ -91,13 +93,13 @@ class KotlinExampleActivity : Activity() {
         // All writes must be wrapped in a transaction to facilitate safe multi threading
         realm.executeTransaction {
             // Add a person
-            val person = realm.createObject(Person::class.java, 0)
+            val person = realm.createObject<Person>(0)
             person.name = "Young Person"
             person.age = 14
         }
 
         // Find the first person (no query conditions) and read a field
-        val person = realm.where(Person::class.java).findFirst()!!
+        val person = realm.where<Person>().findFirst()!!
         showStatus(person.name + ": " + person.age)
 
         // Update person in a transaction
@@ -110,18 +112,19 @@ class KotlinExampleActivity : Activity() {
 
     private fun basicQuery(realm: Realm) {
         showStatus("\nPerforming basic Query operation...")
-        showStatus("Number of persons: ${realm.where(Person::class.java).count()}")
+        showStatus("Number of persons: ${realm.where<Person>().count()}")
 
-        val results = realm.where(Person::class.java).equalTo("age", 99.toInt()).findAll()
+        val ageCriteria = 99
+        val results = realm.where<Person>().equalTo("age", ageCriteria).findAll()
 
         showStatus("Size of result set: " + results.size)
     }
 
     private fun basicLinkQuery(realm: Realm) {
         showStatus("\nPerforming basic Link Query operation...")
-        showStatus("Number of persons: ${realm.where(Person::class.java).count()}")
+        showStatus("Number of persons: ${realm.where<Person>().count()}")
 
-        val results = realm.where(Person::class.java).equalTo("cats.name", "Tiger").findAll()
+        val results = realm.where<Person>().equalTo("cats.name", "Tiger").findAll()
 
         showStatus("Size of result set: ${results.size}")
     }
@@ -135,10 +138,10 @@ class KotlinExampleActivity : Activity() {
         try {
             // Add ten persons in one transaction
             realm.executeTransaction {
-                val fido = realm.createObject(Dog::class.java)
+                val fido = realm.createObject<Dog>()
                 fido.name = "fido"
                 for (i in 1..9) {
-                    val person = realm.createObject(Person::class.java, i.toLong())
+                    val person = realm.createObject<Person>(i.toLong())
                     person.name = "Person no. $i"
                     person.age = i
                     person.dog = fido
@@ -150,7 +153,7 @@ class KotlinExampleActivity : Activity() {
                     person.tempReference = 42
 
                     for (j in 0..i - 1) {
-                        val cat = realm.createObject(Cat::class.java)
+                        val cat = realm.createObject<Cat>()
                         cat.name = "Cat_$j"
                         person.cats.add(cat)
                     }
@@ -158,10 +161,10 @@ class KotlinExampleActivity : Activity() {
             }
 
             // Implicit read transactions allow you to access your objects
-            status += "\nNumber of persons: ${realm.where(Person::class.java).count()}"
+            status += "\nNumber of persons: ${realm.where<Person>().count()}"
 
             // Iterate over all objects
-            for (person in realm.where(Person::class.java).findAll()) {
+            for (person in realm.where<Person>().findAll()) {
                 val dogName: String = person?.dog?.name ?: "None"
 
                 status += "\n${person.name}: ${person.age} : $dogName : ${person.cats.size}"
@@ -173,8 +176,8 @@ class KotlinExampleActivity : Activity() {
             }
 
             // Sorting
-            val sortedPersons = realm.where(Person::class.java).findAllSorted("age", Sort.DESCENDING)
-            status += "\nSorting ${sortedPersons.last()?.name} == ${realm.where(Person::class.java).findAll().first()?.name}"
+            val sortedPersons = realm.where<Person>().findAllSorted(Person::age.name, Sort.DESCENDING)
+            status += "\nSorting ${sortedPersons.last()?.name} == ${realm.where<Person>().findAll().first()?.name}"
 
         } finally {
             realm.close()
@@ -189,11 +192,11 @@ class KotlinExampleActivity : Activity() {
         // extension method 'use' (pun intended).
         Realm.getDefaultInstance().use {
             // 'it' is the implicit lambda parameter of type Realm
-            status += "\nNumber of persons: ${it.where(Person::class.java).count()}"
+            status += "\nNumber of persons: ${it.where<Person>().count()}"
 
             // Find all persons where age between 7 and 9 and name begins with "Person".
             val results = it
-                    .where(Person::class.java)
+                    .where<Person>()
                     .between("age", 7, 9)       // Notice implicit "and" operation
                     .beginsWith("name", "Person")
                     .findAll()
diff --git a/examples/settings.gradle b/examples/settings.gradle
index 9edd7eb54f..42ff9775fe 100644
--- a/examples/settings.gradle
+++ b/examples/settings.gradle
@@ -1,3 +1,4 @@
+rootProject.name = 'realm-examples'
 include 'secureTokenAndroidKeyStore'
 include 'encryptionExample'
 include 'gridViewExample'
@@ -13,5 +14,3 @@ include 'newsreaderExample'
 include 'rxJavaExample'
 include 'objectServerExample'
 include 'multiprocessExample'
-
-rootProject.name = 'realm-examples'
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
index 6a24fa434d..6064b95cf9 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
@@ -42,14 +42,16 @@ class Realm implements Plugin<Project> {
 
         def syncEnabledDefault = false
         def dependencyConfigurationName = getDependencyConfigurationName(project)
-        project.extensions.create('realm', RealmPluginExtension, project, syncEnabledDefault, dependencyConfigurationName)
-
         def usesAptPlugin = project.plugins.findPlugin('com.neenbedankt.android-apt') != null
         def isKotlinProject = project.plugins.findPlugin('kotlin-android') != null
+        def useKotlinExtensionsDefault = isKotlinProject
         def hasAnnotationProcessorConfiguration = project.getConfigurations().findByName('annotationProcessor') != null
         // TODO add a parameter in 'realm' block if this should be specified by users
         def preferAptOnKotlinProject = false
 
+
+        project.extensions.create('realm', RealmPluginExtension, project, syncEnabledDefault, useKotlinExtensionsDefault, dependencyConfigurationName)
+
         if (shouldApplyAndroidAptPlugin(usesAptPlugin, isKotlinProject,
                                         hasAnnotationProcessorConfiguration, preferAptOnKotlinProject)) {
             project.plugins.apply(AndroidAptPlugin)
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
index 42bd8e5f39..bd1ea27e38 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
@@ -21,28 +21,45 @@ import org.gradle.api.Project
 class RealmPluginExtension {
     private Project project
     def boolean syncEnabled
+    def boolean kotlinExtensionsEnabled
     private String dependencyConfigurationName
 
-    RealmPluginExtension(Project project, boolean syncEnabledDefault, String dependencyConfigurationName) {
+    RealmPluginExtension(Project project, boolean syncEnabledDefault, boolean useKotlinExtensionsDefault, String dependencyConfigurationName) {
         this.project = project
         this.dependencyConfigurationName = dependencyConfigurationName
         setSyncEnabled(syncEnabledDefault)
+        setKotlinExtensionsEnabled(useKotlinExtensionsDefault)
     }
 
     void setSyncEnabled(value) {
         this.syncEnabled = value;
+        setDependencies(syncEnabled, kotlinExtensionsEnabled)
+    }
+
+    void setKotlinExtensionsEnabled(value) {
+        this.kotlinExtensionsEnabled = value
+        setDependencies(syncEnabled, kotlinExtensionsEnabled)
+    }
 
-        // remove realm android library first
+    void setDependencies(boolean syncEnabled, boolean kotlinExtensionsEnabled) {
+        // remove libraries first
         def iterator = project.getConfigurations().getByName(dependencyConfigurationName).getDependencies().iterator();
         while (iterator.hasNext()) {
             def item = iterator.next()
-            if (item.group == 'io.realm' && item.name.startsWith('realm-android-library')) {
-                iterator.remove()
+            if (item.group == 'io.realm') {
+                if (item.name.startsWith('realm-android-library')) {
+                    iterator.remove()
+                }
+                if (item.name.startsWith('realm-android-kotlin-extensions')) {
+                    iterator.remove()
+                }
             }
         }
 
         // then add again
-        def artifactName = "realm-android-library${syncEnabled ? '-object-server' : ''}"
-        project.dependencies.add(dependencyConfigurationName, "io.realm:${artifactName}:${Version.VERSION}")
+        def syncArtifactName = "realm-android-library${syncEnabled ? '-object-server' : ''}"
+        project.dependencies.add(dependencyConfigurationName, "io.realm:${syncArtifactName}:${Version.VERSION}")
+        def kotlinExtArtifactName = "realm-android-kotlin-extensions${kotlinExtensionsEnabled ? '-object-server' : ''}"
+        project.dependencies.add(dependencyConfigurationName, "io.realm:${kotlinExtArtifactName}:${Version.VERSION}")
     }
 }
diff --git a/realm/build.gradle b/realm/build.gradle
index ce69d4e851..be9e85de9c 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -1,5 +1,10 @@
+project.ext.minSdkVersion = 9
+project.ext.compileSdkVersion = 26
+project.ext.buildToolsVersion = '26.0.2'
+
 buildscript {
     ext.kotlin_version = '1.1.51'
+    ext.dokka_version = '0.9.15'
     repositories {
         mavenLocal()
         google()
@@ -20,6 +25,7 @@ buildscript {
         classpath "io.realm:realm-transformer:${file('../version.txt').text.trim()}"
         classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
     }
 }
 
diff --git a/realm/gradle.properties b/realm/gradle.properties
index 20cd0c88de..b9c41987bf 100644
--- a/realm/gradle.properties
+++ b/realm/gradle.properties
@@ -1,2 +1,3 @@
 org.gradle.jvmargs=-Xms512m -Xmx2048m
-org.gradle.caching=true
\ No newline at end of file
+org.gradle.caching=true
+kotlin.incremental=false;
diff --git a/realm/kotlin-extensions/.gitignore b/realm/kotlin-extensions/.gitignore
new file mode 100644
index 0000000000..796b96d1c4
--- /dev/null
+++ b/realm/kotlin-extensions/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/realm/kotlin-extensions/build.gradle b/realm/kotlin-extensions/build.gradle
new file mode 100644
index 0000000000..bd05e52d59
--- /dev/null
+++ b/realm/kotlin-extensions/build.gradle
@@ -0,0 +1,370 @@
+apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
+apply plugin: 'kotlin-kapt'
+apply plugin: 'com.github.dcendents.android-maven'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.artifactory'
+apply plugin: 'de.undercouch.download'
+apply plugin: 'org.jetbrains.dokka'
+
+// TODO How many of these work on Kotlin?
+//apply plugin: 'findbugs'
+//apply plugin: 'pmd'
+//apply plugin: 'checkstyle'
+//apply plugin: 'com.github.kt3k.coveralls'
+//apply plugin: 'net.ltgt.errorprone'
+
+import io.realm.transformer.RealmTransformer
+android.registerTransform(new RealmTransformer())
+
+android {
+    compileSdkVersion rootProject.compileSdkVersion
+    buildToolsVersion rootProject.buildToolsVersion
+    defaultConfig {
+        minSdkVersion rootProject.minSdkVersion
+        targetSdkVersion rootProject.compileSdkVersion
+        versionName version
+        project.archivesBaseName = "realm-kotlin-extensions"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+    buildTypes {
+        debug {
+            // https://youtrack.jetbrains.com/issue/KT-11333
+            // Until this is resolved, enabling code coverage will break extension functions
+            // during instrumentation testing.
+            testCoverageEnabled = false
+        }
+        release {
+            minifyEnabled false
+        }
+    }
+
+    flavorDimensions 'api'
+
+    productFlavors {
+        base {
+            dimension 'api'
+        }
+        objectServer {
+            dimension 'api'
+        }
+    }
+
+    sourceSets {
+        main.java.srcDirs += 'src/main/kotlin'
+        androidTest.java.srcDirs += ['src/androidTest/kotlin', '../realm-library/src/testUtils/java']
+        objectServer.java.srcDirs += 'src/objectServer/kotlin'
+        androidTestObjectServer.java.srcDirs += 'src/androidTestObjectServer/kotlin'
+    }
+}
+
+dependencies {
+    implementation project(':realm-library')
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
+    androidTestImplementation 'junit:junit:4.12'
+    androidTestImplementation 'com.android.support.test:runner:1.0.1'
+    androidTestImplementation 'com.android.support.test:rules:1.0.1'
+    kaptAndroidTest project(':realm-annotations-processor')
+    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
+}
+
+repositories {
+    mavenCentral()
+}
+
+// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-1-50-is-out/
+tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
+    kotlinOptions {
+        freeCompilerArgs = ["-Xjsr305=strict"]
+    }
+}
+
+
+task sourcesJar(type: Jar) {
+    from android.sourceSets.objectServer.java.srcDirs
+    from android.sourceSets.main.java.srcDirs
+    classifier = 'sources'
+}
+
+dokka {
+    // TODO Filtering is currently not possible https://youtrack.jetbrains.com/issue/KT-21022
+    // This means we cannot filter R/BuildConfig files for the time being
+    outputFormat = 'html'
+    outputDirectory = "$buildDir/dokka"
+}
+
+task javadocJar(type: Jar, dependsOn: dokka) {
+    classifier = 'javadoc'
+    from "$buildDir/dokka"
+}
+
+// Deployment
+
+install {
+    repositories.mavenInstaller {
+        pom {
+            project {
+                packaging 'aar'
+
+                // Add your description here
+                name 'realm-kotlin-extensions'
+                description 'Kotlin specific APIs and extension functions for Realm for Android'
+                url 'http://realm.io'
+
+                // Set your license
+                licenses {
+                    license {
+                        name 'The Apache Software License, Version 2.0'
+                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                        distribution 'repo'
+                    }
+                }
+                issueManagement {
+                    system 'github'
+                    url 'https://github.com/realm/realm-java/issues'
+                }
+                scm {
+                    url 'scm:https://github.com/realm/realm-java'
+                    connection 'scm:git@github.com:realm/realm-java.git'
+                    developerConnection 'scm:git@github.com:realm/realm-java.git'
+                }
+            }
+        }
+    }
+}
+
+// The publications doesn't know about our AAR dependencies, so we have to manually add them to the pom
+// Credit: http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
+def createPomDependencies(configurationNames) {
+    return {
+        def dependenciesNode = asNode().appendNode('dependencies')
+        configurationNames.each { configurationName ->
+            configurations[configurationName].allDependencies.each {
+                if (it.group != null && it.name != null && it.name != 'realm-library') {
+                    def dependencyNode = dependenciesNode.appendNode('dependency')
+                    dependencyNode.appendNode('groupId', it.group)
+                    dependencyNode.appendNode('artifactId', it.name)
+                    dependencyNode.appendNode('version', it.version)
+
+                    //If there are any exclusions in dependency
+                    if (it.excludeRules.size() > 0) {
+                        def exclusionsNode = dependencyNode.appendNode('exclusions')
+                        it.excludeRules.each { rule ->
+                            def exclusionNode = exclusionsNode.appendNode('exclusion')
+                            exclusionNode.appendNode('groupId', rule.group)
+                            exclusionNode.appendNode('artifactId', rule.module)
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+publishing {
+    publications {
+        basePublication(MavenPublication) {
+            groupId 'io.realm'
+            artifactId 'realm-android-kotlin-extensions'
+            version project.version
+            artifact file("${rootDir}/kotlin-extensions/build/outputs/aar/realm-kotlin-extensions-base-release.aar")
+            artifact sourcesJar
+            artifact javadocJar
+
+            pom.withXml(createPomDependencies(["baseImplementation", "implementation", "baseApi", "api"]))
+        }
+
+        objectServerPublication(MavenPublication) {
+            groupId 'io.realm'
+            artifactId 'realm-android-kotlin-extensions-object-server'
+            version project.version
+            artifact file("${rootDir}/kotlin-extensions/build/outputs/aar/realm-kotlin-extensions-objectServer-release.aar")
+            artifact sourcesJar
+            artifact javadocJar
+
+            pom.withXml(createPomDependencies(["objectServerImplementation", "implementation", "objectServerApi", "api"]))
+        }
+    }
+    repositories {
+        maven {
+            credentials(AwsCredentials) {
+                accessKey project.hasProperty('s3AccessKey') ? s3AccessKey : 'noAccessKey'
+                secretKey project.hasProperty('s3SecretKey') ? s3SecretKey : 'noSecretKey'
+            }
+            if (project.version.endsWith('-SNAPSHOT')) {
+                url "s3://realm-ci-artifacts/maven/snapshots/"
+            } else {
+                url "s3://realm-ci-artifacts/maven/releases/"
+            }
+        }
+    }
+}
+
+artifactory {
+    contextUrl = 'https://oss.jfrog.org/artifactory'
+    publish {
+        repository {
+            repoKey = 'oss-snapshot-local'
+            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
+            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
+        }
+        defaults {
+             publications('basePublication', 'objectServerPublication')
+            publishPom = true
+            publishIvy = false
+        }
+    }
+}
+
+artifacts {
+    archives javadocJar
+    archives sourcesJar
+}
+
+publishToMavenLocal.dependsOn assemble
+
+android.productFlavors.all { flavor ->
+    def librarySuffix = flavor.name == 'base' ? '' : '-object-server'
+    def userName = project.findProperty('bintrayUser') ?: 'noUser'
+    def accessKey = project.findProperty('bintrayKey') ?: 'noKey'
+    def artifactId = "realm-android-kotlin-extensions${librarySuffix}"
+
+    // BINTRAY
+
+    task("bintrayAar${flavor.name.capitalize()}", type: Exec) {
+        dependsOn "assemble${flavor.name.capitalize()}"
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/outputs/aar/realm-kotlin-extensions-${flavor.name}-release.aar",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.aar?publish=0"
+    }
+
+    task("bintraySources${flavor.name.capitalize()}", type: Exec) {
+        dependsOn sourcesJar
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-sources.jar",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-sources.jar?publish=0"
+    }
+
+    task("bintrayJavadoc${flavor.name.capitalize()}", type: Exec) {
+        dependsOn javadocJar
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-javadoc.jar",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-javadoc.jar?publish=0"
+    }
+
+    task("bintrayPom${flavor.name.capitalize()}", type: Exec) {
+        dependsOn "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal"
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.pom?publish=0"
+    }
+
+    // OJO
+
+    task("ojoAar${flavor.name.capitalize()}", type: Exec) {
+        dependsOn "assemble${flavor.name.capitalize()}"
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/outputs/aar/realm-kotlin-extensions-${flavor.name}-release.aar",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.aar?publish=0"
+    }
+
+    task("ojoSources${flavor.name.capitalize()}", type: Exec) {
+        dependsOn sourcesJar
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-sources.jar",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-sources.jar?publish=0"
+    }
+
+    task("ojoJavadoc${flavor.name.capitalize()}", type: Exec) {
+        dependsOn javadocJar
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-javadoc.jar",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-javadoc.jar?publish=0"
+    }
+
+    task("ojoPom${flavor.name.capitalize()}", type: Exec) {
+        dependsOn "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal"
+        group = 'Publishing'
+        commandLine 'curl',
+                '-X',
+                'PUT',
+                '-T',
+                "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
+                '-u',
+                "${userName}:${accessKey}",
+                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.pom?publish=0"
+    }
+
+    task("bintray${flavor.name.capitalize()}") {
+        dependsOn "bintrayAar${flavor.name.capitalize()}"
+        dependsOn "bintraySources${flavor.name.capitalize()}"
+        dependsOn "bintrayJavadoc${flavor.name.capitalize()}"
+        dependsOn "bintrayPom${flavor.name.capitalize()}"
+        group = 'Publishing'
+    }
+
+    task("ojo${flavor.name.capitalize()}") {
+        dependsOn "ojoAar${flavor.name.capitalize()}"
+        dependsOn "ojoSources${flavor.name.capitalize()}"
+        dependsOn "ojoJavadoc${flavor.name.capitalize()}"
+        dependsOn "ojoPom${flavor.name.capitalize()}"
+        group = 'Publishing'
+    }
+}
+
+task bintrayUpload() {
+    android.productFlavors.all { flavor ->
+        dependsOn "bintray${flavor.name.capitalize()}"
+    }
+    group = 'Publishing'
+}
+
+task ojoUpload() {
+    android.productFlavors.all { flavor ->
+        dependsOn "ojo${flavor.name.capitalize()}"
+    }
+    group = 'Publishing'
+}
diff --git a/realm/kotlin-extensions/proguard-rules.pro b/realm/kotlin-extensions/proguard-rules.pro
new file mode 100644
index 0000000000..64bf447535
--- /dev/null
+++ b/realm/kotlin-extensions/proguard-rules.pro
@@ -0,0 +1,25 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /usr/local/opt/android-sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmModelTests.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmModelTests.kt
new file mode 100644
index 0000000000..4130e260d3
--- /dev/null
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmModelTests.kt
@@ -0,0 +1,229 @@
+package io.realm
+
+import android.support.test.InstrumentationRegistry
+import android.support.test.runner.AndroidJUnit4
+import io.realm.entities.PrimaryKeyClass
+import io.realm.entities.SimpleClass
+import io.realm.kotlin.*
+import io.realm.rule.RunInLooperThread
+import io.realm.rule.RunTestInLooperThread
+import io.realm.rule.TestRealmConfigurationFactory
+import org.junit.*
+import org.junit.Assert.*
+import org.junit.runner.RunWith
+
+@Suppress("FunctionName")
+@RunWith(AndroidJUnit4::class)
+class KotlinRealmModelTests {
+
+    @Suppress("MemberVisibilityCanPrivate")
+    @get:Rule
+    val configFactory = TestRealmConfigurationFactory()
+
+    @get:Rule
+    val looperThread = RunInLooperThread()
+
+    private lateinit var realm: Realm
+
+    @Before
+    fun setUp() {
+        Realm.init(InstrumentationRegistry.getTargetContext())
+        realm = Realm.getInstance(configFactory.createConfiguration())
+    }
+
+    @After
+    fun tearDown() {
+        realm.close()
+    }
+
+    @Test
+    fun deleteFromRealm() {
+        // Make sure starting with 0
+        Assert.assertEquals(0, realm.where<SimpleClass>().count())
+
+        // Add 1, check count
+        realm.executeTransaction { it.createObject<SimpleClass>() }
+        Assert.assertEquals(1, realm.where<SimpleClass>().count())
+
+        // Delete the first, check count again.  !! is intentional to make
+        // sure we are sure calling deleteFromRealm
+        realm.executeTransaction { realm.where<SimpleClass>().findFirst()!!.deleteFromRealm() }
+        Assert.assertEquals(0, realm.where<SimpleClass>().count())
+
+    }
+
+    @Test
+    fun isValid() {
+        realm.executeTransaction {
+            val obj = it.createObject<SimpleClass>()
+            assertTrue("Expected valid after insert", obj.isValid())
+
+            obj.deleteFromRealm()
+            assertFalse("Expected invalid after delete", obj.isValid())
+        }
+    }
+
+   @Test
+    fun isManaged() {
+        realm.executeTransaction {
+            var obj = SimpleClass()
+            assertFalse("Expected not managed until attached", obj.isManaged())
+
+            obj = it.copyToRealm(obj)
+            assertTrue("Expected managed after attaching", obj.isManaged())
+        }
+    }
+
+    @Test
+    @RunTestInLooperThread
+    fun addChangeListener_RealmObjectChangeListener_addObject() {
+        val realm = looperThread.realm
+        realm.beginTransaction()
+        val obj = realm.createObject<SimpleClass>()
+        realm.commitTransaction()
+
+        looperThread.keepStrongReference(obj)
+        obj.addChangeListener( RealmObjectChangeListener { updatedObj, changes ->
+            assertTrue(changes?.isFieldChanged(SimpleClass::name.name) ?: false)
+            assertEquals("simple1", updatedObj.name)
+            looperThread.testComplete()
+        })
+
+        realm.beginTransaction()
+        obj.name = "simple1"
+        realm.commitTransaction()
+    }
+
+    @Test
+    @RunTestInLooperThread
+    fun addChangeListener_RealmChangeListener_addObject() {
+        val realm = looperThread.realm
+        realm.beginTransaction()
+        val obj = realm.createObject<SimpleClass>()
+        realm.commitTransaction()
+
+        looperThread.keepStrongReference(obj)
+        obj.addChangeListener( RealmChangeListener { simpleClass ->
+            assertEquals("simple1", simpleClass.name)
+            looperThread.testComplete()
+        })
+
+        realm.beginTransaction()
+        obj.name = "simple1"
+        realm.commitTransaction()
+    }
+
+    @Test
+    @RunTestInLooperThread
+    fun removeChangeListener_RealmChangeListener_removeObject() {
+        val realm = looperThread.realm
+        realm.beginTransaction()
+        val obj = realm.createObject<PrimaryKeyClass>(101)
+        realm.commitTransaction()
+
+        val listener = RealmChangeListener<PrimaryKeyClass>{
+            fail()
+        }
+
+        obj.addChangeListener(listener)
+        obj.removeChangeListener(listener)
+
+        realm.beginTransaction()
+        obj.name = "Bobby Risigliano"
+        realm.commitTransaction()
+
+        // Try to trigger the listeners.
+        realm.sharedRealm.refresh()
+        looperThread.testComplete()
+    }
+
+    @Test
+    @RunTestInLooperThread
+    fun removeChangeListener_RealmObjectChangeListener_removeObject() {
+        val realm = looperThread.realm
+        realm.beginTransaction()
+        val obj = realm.createObject<PrimaryKeyClass>(101)
+        realm.commitTransaction()
+
+        val listener = RealmObjectChangeListener<PrimaryKeyClass>{ _,_ ->
+            fail()
+        }
+
+        obj.addChangeListener(listener)
+        obj.removeChangeListener(listener)
+
+        realm.beginTransaction()
+        obj.name = "Bobby Risigliano"
+        realm.commitTransaction()
+
+        // Try to trigger the listeners.
+        realm.sharedRealm.refresh()
+        looperThread.testComplete()
+    }
+
+    @Test
+    @RunTestInLooperThread
+    fun removeAllChangeListeners() {
+        val realm = looperThread.realm
+        realm.beginTransaction()
+        val obj = realm.createObject<PrimaryKeyClass>(101)
+        realm.commitTransaction()
+
+        val changeListener = RealmChangeListener<PrimaryKeyClass> {
+            fail()
+        }
+        val objectChangeListener = RealmObjectChangeListener<PrimaryKeyClass> { _,_ ->
+            fail()
+        }
+
+        obj.addChangeListener(changeListener)
+        obj.addChangeListener(objectChangeListener)
+
+        obj.removeAllChangeListeners()
+
+        realm.beginTransaction()
+        obj.name = "Bobby Risigliano"
+        realm.commitTransaction()
+
+        // Try to trigger the listeners.
+        realm.sharedRealm.refresh()
+        looperThread.testComplete()
+    }
+
+    @Test
+    @RunTestInLooperThread
+    @Throws(Throwable::class)
+    fun isLoaded() {
+        val realm = looperThread.realm
+
+        realm.executeTransaction { it.createObject<SimpleClass>() }
+
+        val result = realm.where<SimpleClass>().findFirstAsync()
+        assertFalse("Expect isLoaded is false just after async call", result.isLoaded())
+
+        looperThread.keepStrongReference(result)
+
+        result.addChangeListener(RealmChangeListener { r ->
+            assertTrue("Expected the loading to have completed", r.isLoaded())
+            looperThread.testComplete()
+        })
+    }
+
+    @Test
+    @RunTestInLooperThread
+    @Throws(Throwable::class)
+    fun load() {
+        val realm = looperThread.realm
+
+        realm.executeTransaction { it.createObject<SimpleClass>() }
+
+        val result = realm.where<SimpleClass>().findFirstAsync()
+        assertFalse("Expect isLoaded is false just after async call", result.isLoaded())
+
+        result.load()
+
+        assertTrue("Expected isLoaded is true after blocking on load()", result.isLoaded())
+        looperThread.testComplete()
+    }
+
+}
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt
new file mode 100644
index 0000000000..a7c9049eb6
--- /dev/null
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmQueryTests.kt
@@ -0,0 +1,159 @@
+package io.realm
+
+import android.support.test.InstrumentationRegistry
+import android.support.test.runner.AndroidJUnit4
+import io.realm.entities.AllPropTypesClass
+import io.realm.kotlin.createObject
+import io.realm.kotlin.oneOf
+import io.realm.kotlin.where
+import io.realm.rule.TestRealmConfigurationFactory
+import org.junit.After
+import org.junit.Assert.assertEquals
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+import java.util.*
+
+@Suppress("FunctionName")
+@RunWith(AndroidJUnit4::class)
+class KotlinRealmQueryTests {
+
+    @Suppress("MemberVisibilityCanPrivate")
+    @get:Rule
+    val configFactory = TestRealmConfigurationFactory()
+
+    private lateinit var realm: Realm
+
+    @Before
+    fun setUp() {
+        Realm.init(InstrumentationRegistry.getTargetContext())
+        realm = Realm.getInstance(configFactory.createConfiguration())
+    }
+
+    @After
+    fun tearDown() {
+        realm.close()
+    }
+
+    @Test
+    fun oneOf_String() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.stringVar = "test"
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                     .oneOf(AllPropTypesClass::stringVar.name, arrayOf<String?>("test"))
+                     .count())
+    }
+
+    @Test
+    fun oneOf_Byte() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.byteVar = 3
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::byteVar.name, arrayOf<Byte?>(3))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Short() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.shortVar = 3
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::shortVar.name, arrayOf<Short?>(3))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Int() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.intVar = 3
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::intVar.name, arrayOf<Int?>(3))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Long() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.longVar = 3
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::longVar.name, arrayOf<Long?>(3))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Double() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.doubleVar = 3.5
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::doubleVar.name, arrayOf<Double?>(3.5))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Float() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.floatVar = 3.5f
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::floatVar.name, arrayOf<Float?>(3.5f))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Boolean() {
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.booleanVar = true
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::booleanVar.name, arrayOf<Boolean?>(true))
+                        .count())
+    }
+
+    @Test
+    fun oneOf_Date() {
+
+        val testDate = Date()
+
+        realm.beginTransaction()
+        val obj = realm.createObject<AllPropTypesClass>()
+        obj.dateVar = testDate
+        realm.commitTransaction()
+
+        assertEquals(1,
+                realm.where<AllPropTypesClass>()
+                        .oneOf(AllPropTypesClass::dateVar.name, arrayOf<Date?>(testDate))
+                        .count())
+    }
+
+}
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmTests.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmTests.kt
new file mode 100644
index 0000000000..eebd34cf20
--- /dev/null
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmTests.kt
@@ -0,0 +1,61 @@
+package io.realm
+
+import android.support.test.InstrumentationRegistry
+import android.support.test.runner.AndroidJUnit4
+import io.realm.entities.PrimaryKeyClass
+import io.realm.entities.SimpleClass
+import io.realm.kotlin.createObject
+import io.realm.kotlin.where
+import io.realm.rule.TestRealmConfigurationFactory
+import org.junit.After
+import org.junit.Assert.assertEquals
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+
+@Suppress("FunctionName")
+@RunWith(AndroidJUnit4::class)
+class KotlinRealmTests {
+
+    @Suppress("MemberVisibilityCanPrivate")
+    @get:Rule
+    val configFactory = TestRealmConfigurationFactory()
+
+    private lateinit var realm: Realm
+
+    @Before
+    fun setUp() {
+        Realm.init(InstrumentationRegistry.getTargetContext())
+        realm = Realm.getInstance(configFactory.createConfiguration())
+    }
+
+    @After
+    fun tearDown() {
+        realm.close()
+    }
+
+    @Test
+    fun createObject() {
+        realm.executeTransaction {
+            it.createObject<SimpleClass>()
+        }
+        assertEquals(1, realm.where<SimpleClass>().count())
+    }
+
+
+    @Test
+    fun createObject_primaryKey() {
+        realm.executeTransaction {
+            it.createObject<PrimaryKeyClass>(1)
+        }
+        assertEquals(1, realm.where<PrimaryKeyClass>().count())
+    }
+
+    @Test
+    fun where() {
+        assertEquals(0, realm.where<SimpleClass>().count())
+    }
+
+
+}
\ No newline at end of file
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt
new file mode 100644
index 0000000000..35202fc7da
--- /dev/null
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/AllPropTypesClass.kt
@@ -0,0 +1,20 @@
+package io.realm.entities
+
+import io.realm.RealmModel
+import io.realm.annotations.RealmClass
+import java.util.*
+
+@RealmClass
+open class AllPropTypesClass : RealmModel {
+
+    var stringVar: String = ""
+    var byteVar: Byte = 0
+    var shortVar: Short = 0
+    var intVar: Int = 0
+    var longVar: Long = 0
+    var doubleVar: Double = 0.0
+    var floatVar: Float = 0.0f
+    var booleanVar : Boolean = false
+    var dateVar : Date = Date()
+
+}
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/PrimaryKeyClass.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/PrimaryKeyClass.kt
new file mode 100644
index 0000000000..83b1729737
--- /dev/null
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/PrimaryKeyClass.kt
@@ -0,0 +1,12 @@
+package io.realm.entities
+
+import io.realm.RealmModel
+import io.realm.annotations.PrimaryKey
+import io.realm.annotations.RealmClass
+
+@RealmClass
+open class PrimaryKeyClass: RealmModel {
+    @PrimaryKey
+    var id: Long = 0
+    var name: String = ""
+}
diff --git a/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/SimpleClass.kt b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/SimpleClass.kt
new file mode 100644
index 0000000000..2091fbe672
--- /dev/null
+++ b/realm/kotlin-extensions/src/androidTest/kotlin/io/realm/entities/SimpleClass.kt
@@ -0,0 +1,10 @@
+package io.realm.entities
+
+import io.realm.RealmModel
+import io.realm.RealmObject
+import io.realm.annotations.RealmClass
+
+@RealmClass
+open class SimpleClass : RealmModel {
+    var name: String = ""
+}
diff --git a/realm/kotlin-extensions/src/main/AndroidManifest.xml b/realm/kotlin-extensions/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..3d03c8bb1c
--- /dev/null
+++ b/realm/kotlin-extensions/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="io.realm.kotlin"/>
diff --git a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmExtensions.kt b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmExtensions.kt
new file mode 100644
index 0000000000..1307e48a38
--- /dev/null
+++ b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmExtensions.kt
@@ -0,0 +1,102 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.kotlin
+
+import io.realm.Realm
+import io.realm.RealmModel
+import io.realm.RealmQuery
+import io.realm.exceptions.RealmException
+
+/**
+ * Returns a typed RealmQuery, which can be used to query for specific objects of this type
+ *
+ * @param T the class of the object which is to be queried for.
+ * @return a typed `RealmQuery`, which can be used to query for specific objects of this type.
+ */
+inline fun <reified T : RealmModel> Realm.where(): RealmQuery<T> {
+    return this.where(T::class.java)
+}
+
+/**
+ * Deletes all objects of the specified class from the Realm.
+ *
+ * @param T the class of the object which is to be queried for.
+ * @throws IllegalStateException if the corresponding Realm is closed or called from an incorrect thread.
+ */
+inline fun <reified T : RealmModel> Realm.delete() {
+    return this.delete(T::class.java)
+}
+
+/**
+ *
+ * Instantiates and adds a new object to the Realm.
+ *
+ * This method is only available for model classes with no `@PrimaryKey` annotation.
+ * If you like to create an object that has a primary key, use [createObject] instead.
+ *
+ * @param T the Class of the object to create.
+ * @return the new object.
+ * @throws RealmException if the primary key is defined in the model class or an object cannot be created.
+ */
+inline fun <reified T : RealmModel> Realm.createObject(): T {
+    return this.createObject(T::class.java)
+}
+
+/**
+ *
+ * Instantiates and adds a new object to the Realm with the primary key value already set.
+ *
+ * If the value violates the primary key constraint, no object will be added and a RealmException will be
+ * thrown. The default value for primary key provided by the model class will be ignored.
+ *
+ * @param T the Class of the object to create.
+ * @param primaryKeyValue value for the primary key field.
+ * @return the new object.
+ * @throws RealmException if object could not be created due to the primary key being invalid.
+ * @throws IllegalStateException if the model class does not have an primary key defined.
+ * @throws IllegalArgumentException if the `primaryKeyValue` doesn't have a value that can be converted to the
+ * expected value.
+ */
+inline fun <reified T : RealmModel> Realm.createObject(primaryKeyValue: Any?): T {
+    return this.createObject(T::class.java, primaryKeyValue)
+}
+
+/**
+TODO: Figure out if we should include this is or not. Using this makes it possible to do
+
+inline fun <T> Realm.callTransaction(crossinline action: Realm.() -> T): T {
+    val ref = AtomicReference<T>()
+    executeTransaction {
+        ref.set(action(it))
+    }
+    return ref.get()
+}
+
+Missing functions. Consider these for inclusion later:
+- createAllFromJson(Class<E> clazz, InputStream inputStream)
+- createAllFromJson(Class<E> clazz, org.json.JSONArray json)
+- createAllFromJson(Class<E> clazz, String json)
+- createObjectFromJson(Class<E> clazz, InputStream inputStream)
+- createObjectFromJson(Class<E> clazz, org.json.JSONObject json)
+- createObjectFromJson(Class<E> clazz, String json)
+- createOrUpdateAllFromJson(Class<E> clazz, InputStream in)
+- createOrUpdateAllFromJson(Class<E> clazz, org.json.JSONArray json)
+- createOrUpdateAllFromJson(Class<E> clazz, String json)
+- createOrUpdateObjectFromJson(Class<E> clazz, InputStream in)
+- createOrUpdateObjectFromJson(Class<E> clazz, org.json.JSONObject json)
+- createOrUpdateObjectFromJson(Class<E> clazz, String json)
+- createOrUpdateObjectFromJson(Class<E> clazz, String json)
+*/
\ No newline at end of file
diff --git a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmModelExtensions.kt b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmModelExtensions.kt
new file mode 100644
index 0000000000..d668c7ab4f
--- /dev/null
+++ b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmModelExtensions.kt
@@ -0,0 +1,213 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.kotlin
+
+import io.realm.RealmChangeListener
+import io.realm.RealmModel
+import io.realm.RealmObject
+import io.realm.RealmObjectChangeListener
+
+/**
+ * Deletes the object from the Realm it is currently associated with.
+ *
+ * After this method is called the object will be invalid and any operation (read or write) performed on it will
+ * fail with an `IllegalStateException`.
+ *
+ * @throws IllegalStateException if the corresponding Realm is closed or in an incorrect thread.
+ * @see [isValid]
+ */
+fun RealmModel.deleteFromRealm() {
+    RealmObject.deleteFromRealm(this)
+}
+
+/**
+ * Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the
+ * Realm been closed. It will always return `true` for unmanaged objects.
+ *
+ * @return `true` if the object is still accessible or an unmanaged object, `false` otherwise.
+ */
+fun RealmModel.isValid(): Boolean {
+    return RealmObject.isValid(this)
+}
+
+/**
+ * Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying
+ * Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It
+ * is possible to register a change listener using [addChangeListener] to be
+ * notified when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads
+ * than the one that created them.
+ *
+ * If this method returns `false`, the object is unmanaged. An unmanaged object is just a normal Kotlin object,
+ * so it can be passed freely across threads, but the data in the object is not connected to the underlying Realm,
+ * so it will not be live updated.
+ *
+ * It is possible to create a managed object from an unmanaged object by using
+ * [io.realm.Realm.copyToRealm]. An unmanaged object can be created from a managed object by using
+ * [io.realm.Realm.copyFromRealm].
+ *
+ * @return `true` if the object is managed, `false` if it is unmanaged.
+ */
+fun RealmModel.isManaged(): Boolean {
+    return RealmObject.isManaged(this)
+}
+
+/**
+ * Checks if the query used to find this RealmObject has completed.
+ *
+ * Async methods like [io.realm.RealmQuery.findFirstAsync] return an RealmObject that represents the future result
+ * of the RealmQuery. It can be considered similar to a [java.util.concurrent.Future] in this regard.
+ *
+ * Once `isLoaded()` returns `true`, the object represents the query result even if the query
+ * didn't find any object matching the query parameters. In this case the RealmObject will
+ * become a `null` object.
+ *
+ * "Null" objects represents `null`.  An exception is thrown if any accessor is called, so it is important to also
+ * check isValid before calling any methods. A common pattern is:
+ *
+ *
+ * ```kotlin
+ * val person = realm.where<Person>().findFirstAsync()
+ * person.isLoaded() // == false
+ * person.addChangeListener { p ->
+ *     p.isLoaded() // always true here
+ *     if(p.isValid()) {
+ *         // It is safe to access this person.
+ *     }
+ * }
+ * ```
+ * Synchronous RealmObjects are by definition blocking hence this method will always return `true` for them.
+ * This method will return `true` if called on an unmanaged object (created outside of Realm).
+ *
+ * @return `true` if the query has completed, `false` if the query is in
+ * progress.
+ * @see [isValid]
+ */
+fun RealmModel.isLoaded(): Boolean {
+    return RealmObject.isLoaded(this)
+}
+
+/**
+ * Makes an asynchronous query blocking. This will also trigger any registered listeners.
+ *
+ * Note: This will return `true` if called for an unmanaged object (created outside of Realm).
+ *
+ * @return `true` if it successfully completed the query, `false` otherwise.
+ */
+fun RealmModel.load(): Boolean {
+    return RealmObject.load(this)
+}
+
+
+/**
+ * Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field
+ * is changed, or the RealmList field itself is changed.
+
+ * Registering a change listener will not prevent the underlying RealmObject from being garbage collected.
+ * If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a
+ * strong reference for as long as appropriate e.g. in a class variable.
+ *
+ * ```kotlin
+ * class MyActivity : Activity {
+ *
+ *     private var person: Person?
+ *
+ *     override fun onCreate(savedInstanceState: Bundle?) {
+ *         super.onCreate(savedInstanceState)
+ *         person = realm.where<Person>().findFirst()
+ *         person?.addChangeListener(RealmChangeListener { person ->
+ *             // React to change
+ *         })
+ *     }
+ * }
+ * ```
+ *
+ * @param listener the change listener to be notified.
+ * @throws IllegalArgumentException if the `object` is `null` or an unmanaged object, or the change
+ * listener is `null`.
+ * @throws IllegalStateException if you try to add a listener from a non-Looper or IntentService thread.
+ * @throws IllegalStateException if you try to add a listener inside a transaction.
+ */
+fun <E : RealmModel> E.addChangeListener(listener: RealmChangeListener<E>) {
+    RealmObject.addChangeListener(this, listener)
+}
+
+/**
+ * Adds a change listener to a RealmObject to get detailed information about the changes. The listener will be
+ * triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is
+ * changed.
+
+ * Registering a change listener will not prevent the underlying RealmObject from being garbage collected.
+ * If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a
+ * strong reference for as long as appropriate e.g. in a class variable.
+ *
+ * ```kotlin
+ * class MyActivity : Activity {
+ *
+ *     private var person: Person?
+ *
+ *     override fun onCreate(savedInstanceState: Bundle?) {
+ *         super.onCreate(savedInstanceState)
+ *         person = realm.where<Person>().findFirst()
+ *         person?.addChangeListener(RealmObjectChangeListener { person, changeSet ->
+ *             // React to change
+ *         })
+ *     }
+ * }
+ * ```
+ *
+ * @param listener the change listener to be notified.
+ * @throws IllegalArgumentException if the `object` is `null` or an unmanaged object, or the change
+ * listener is `null`.
+ * @throws IllegalStateException if you try to add a listener from a non-Looper or IntentService thread.
+ * @throws IllegalStateException if you try to add a listener inside a transaction.
+ */
+fun <E : RealmModel> E.addChangeListener(listener: RealmObjectChangeListener<E>) {
+    RealmObject.addChangeListener(this, listener)
+}
+
+/**
+ * Removes a previously registered listener on the given RealmObject.
+ *
+ * @param listener the instance to be removed.
+ * @throws IllegalArgumentException if the `object` or the change listener is `null`.
+ * @throws IllegalArgumentException if object is an unmanaged RealmObject.
+ * @throws IllegalStateException if you try to remove a listener from a non-Looper Thread.
+ */
+fun  <E : RealmModel> E.removeChangeListener(listener: RealmChangeListener<E>) {
+    RealmObject.removeChangeListener(this, listener)
+}
+
+/**
+ * Removes a previously registered listener on the given RealmObject.
+ *
+ * @param listener the instance to be removed.
+ * @throws IllegalArgumentException if the `object` or the change listener is `null`.
+ * @throws IllegalArgumentException if object is an unmanaged RealmObject.
+ * @throws IllegalStateException if you try to remove a listener from a non-Looper Thread.
+ */
+fun  <E : RealmModel> E.removeChangeListener(listener: RealmObjectChangeListener<E>) {
+    RealmObject.removeChangeListener(this, listener)
+}
+
+/**
+ * Removes all registered listeners from the given RealmObject.
+ *
+ * @throws IllegalArgumentException if object is `null` or isn't managed by Realm.
+ */
+fun RealmModel.removeAllChangeListeners() {
+    return RealmObject.removeAllChangeListeners(this)
+}
+
diff --git a/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
new file mode 100644
index 0000000000..e9f2c1a4a8
--- /dev/null
+++ b/realm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmQueryExtensions.kt
@@ -0,0 +1,153 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.kotlin
+
+import io.realm.Case
+import io.realm.RealmModel
+import io.realm.RealmQuery
+import java.util.*
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @param casing how casing is handled. [Case.INSENSITIVE] works only for the Latin-1 characters.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a String field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<String?>,
+                                         casing: Case = Case.SENSITIVE): RealmQuery<T> {
+    return this.`in`(propertyName, value, casing)
+}
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Byte field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Byte?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Short field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Short?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Integer field or `values` is `null`
+ * or empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Int?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Long field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Long?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Double field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Double?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Float field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Float?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Boolean field or `values` is `null`
+ * or empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Boolean?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
+
+/**
+ * In comparison. This allows you to test if objects match any value in an array of values.
+ *
+ * @param fieldName the field to compare.
+ * @param values array of values to compare with and it cannot be null or empty.
+ * @return the query object.
+ * @throws java.lang.IllegalArgumentException if the field isn't a Date field or `values` is `null` or
+ * empty.
+ */
+fun <T : RealmModel> RealmQuery<T>.oneOf(propertyName: String,
+                                         value: Array<Date?>): RealmQuery<T> {
+    return this.`in`(propertyName, value)
+}
diff --git a/realm/kotlin-extensions/src/main/res/values/strings.xml b/realm/kotlin-extensions/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..764b07b814
--- /dev/null
+++ b/realm/kotlin-extensions/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">kotlin-extensions</string>
+</resources>
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 016e5e4c19..ce4fd40b06 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -40,12 +40,12 @@ ext.lcachePath = project.findProperty('lcachePath') ?: System.getenv('NDK_LCACHE
 ext.enableDebugCore = project.hasProperty('enableDebugCore') ? project.getProperty('enableDebugCore') : false //FIXME Use 'false' as default until https://github.com/realm/realm-java/issues/5354 is fixed
 
 android {
-    compileSdkVersion 27
-    buildToolsVersion '27.0.1'
+    compileSdkVersion rootProject.compileSdkVersion
+    buildToolsVersion rootProject.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 27
+        minSdkVersion rootProject.minSdkVersion
+        targetSdkVersion rootProject.compileSdkVersion
         versionName version
         project.archivesBaseName = "realm-android-library"
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
@@ -90,13 +90,14 @@ android {
 
     buildTypes {
         debug {
-            testCoverageEnabled = true
+            // FIXME: If enabled, crashes with https://issuetracker.google.com/issues/37116868
+            testCoverageEnabled = false
         }
     }
 
     sourceSets {
         androidTest {
-            java.srcDirs += 'src/androidTest/kotlin'
+            java.srcDirs += ['src/androidTest/kotlin', 'src/testUtils/java']
         }
         androidTestObjectServer {
             java.srcDirs += 'src/syncIntegrationTest/java'
@@ -168,7 +169,7 @@ project.afterEvaluate {
     }
 }
 
-// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-1-4-is-out/
+// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-1-50-is-out/
 tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
     kotlinOptions {
         freeCompilerArgs = ["-Xjsr305=strict"]
@@ -612,7 +613,7 @@ android.productFlavors.all { flavor ->
     def librarySuffix = flavor.name == 'base' ? '' : '-object-server'
     def userName = project.findProperty('bintrayUser') ?: 'noUser'
     def accessKey = project.findProperty('bintrayKey') ?: 'noKey'
-
+    def artifactId = "realm-android-library${librarySuffix}"
     // BINTRAY
 
     task("bintrayAar${flavor.name.capitalize()}", type: Exec) {
@@ -625,7 +626,7 @@ android.productFlavors.all { flavor ->
                 "${buildDir}/outputs/aar/realm-android-library-${flavor.name}-release.aar",
                 '-u',
                 "${userName}:${accessKey}",
-                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}.aar?publish=0"
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.aar?publish=0"
     }
 
     task("bintraySources${flavor.name.capitalize()}", type: Exec) {
@@ -638,7 +639,7 @@ android.productFlavors.all { flavor ->
                 "${buildDir}/libs/realm-android-library-${project.version}-sources.jar",
                 '-u',
                 "${userName}:${accessKey}",
-                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}-sources.jar?publish=0"
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-sources.jar?publish=0"
     }
 
     task("bintrayJavadoc${flavor.name.capitalize()}", type: Exec) {
@@ -651,7 +652,7 @@ android.productFlavors.all { flavor ->
                 "${buildDir}/libs/realm-android-library-${project.version}-javadoc.jar",
                 '-u',
                 "${userName}:${accessKey}",
-                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}-javadoc.jar?publish=0"
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-javadoc.jar?publish=0"
     }
 
     task("bintrayPom${flavor.name.capitalize()}", type: Exec) {
@@ -664,7 +665,7 @@ android.productFlavors.all { flavor ->
                 "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
                 '-u',
                 "${userName}:${accessKey}",
-                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}.pom?publish=0"
+                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.pom?publish=0"
     }
 
     // OJO
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java b/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
rename to realm/realm-library/src/testUtils/java/io/realm/TestHelper.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/AllTypes.java b/realm/realm-library/src/testUtils/java/io/realm/entities/AllTypes.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/AllTypes.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/AllTypes.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/AllTypesPrimaryKey.java b/realm/realm-library/src/testUtils/java/io/realm/entities/AllTypesPrimaryKey.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/AllTypesPrimaryKey.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/AllTypesPrimaryKey.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/AnnotationIndexTypes.java b/realm/realm-library/src/testUtils/java/io/realm/entities/AnnotationIndexTypes.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/AnnotationIndexTypes.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/AnnotationIndexTypes.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/BacklinksSource.java b/realm/realm-library/src/testUtils/java/io/realm/entities/BacklinksSource.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/BacklinksSource.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/BacklinksSource.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/BacklinksTarget.java b/realm/realm-library/src/testUtils/java/io/realm/entities/BacklinksTarget.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/BacklinksTarget.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/BacklinksTarget.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/Cat.java b/realm/realm-library/src/testUtils/java/io/realm/entities/Cat.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/Cat.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/Cat.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/Dog.java b/realm/realm-library/src/testUtils/java/io/realm/entities/Dog.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/Dog.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/Dog.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/DogPrimaryKey.java b/realm/realm-library/src/testUtils/java/io/realm/entities/DogPrimaryKey.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/DogPrimaryKey.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/DogPrimaryKey.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/NullTypes.java b/realm/realm-library/src/testUtils/java/io/realm/entities/NullTypes.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/NullTypes.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/NullTypes.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/Owner.java b/realm/realm-library/src/testUtils/java/io/realm/entities/Owner.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/Owner.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/Owner.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedByte.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedByte.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedByte.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedByte.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedInteger.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedInteger.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedInteger.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedInteger.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedLong.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedLong.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedLong.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedLong.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedShort.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedShort.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsBoxedShort.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsBoxedShort.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsByte.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsByte.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsByte.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsByte.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsInteger.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsInteger.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsInteger.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsInteger.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsLong.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsLong.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsLong.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsLong.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsShort.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsShort.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsShort.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsShort.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsString.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsString.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyAsString.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyAsString.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedByte.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedByte.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedByte.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedByte.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedInteger.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedInteger.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedInteger.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedInteger.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedLong.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedLong.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedLong.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedLong.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedShort.java b/realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedShort.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/entities/PrimaryKeyRequiredAsBoxedShort.java
rename to realm/realm-library/src/testUtils/java/io/realm/entities/PrimaryKeyRequiredAsBoxedShort.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/objectid/NullPrimaryKey.java b/realm/realm-library/src/testUtils/java/io/realm/objectid/NullPrimaryKey.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/objectid/NullPrimaryKey.java
rename to realm/realm-library/src/testUtils/java/io/realm/objectid/NullPrimaryKey.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java b/realm/realm-library/src/testUtils/java/io/realm/rule/RunInLooperThread.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
rename to realm/realm-library/src/testUtils/java/io/realm/rule/RunInLooperThread.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunTestInLooperThread.java b/realm/realm-library/src/testUtils/java/io/realm/rule/RunTestInLooperThread.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/rule/RunTestInLooperThread.java
rename to realm/realm-library/src/testUtils/java/io/realm/rule/RunTestInLooperThread.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunTestWithRemoteService.java b/realm/realm-library/src/testUtils/java/io/realm/rule/RunTestWithRemoteService.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/rule/RunTestWithRemoteService.java
rename to realm/realm-library/src/testUtils/java/io/realm/rule/RunTestWithRemoteService.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunWithRemoteService.java b/realm/realm-library/src/testUtils/java/io/realm/rule/RunWithRemoteService.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/rule/RunWithRemoteService.java
rename to realm/realm-library/src/testUtils/java/io/realm/rule/RunWithRemoteService.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java b/realm/realm-library/src/testUtils/java/io/realm/rule/TestRealmConfigurationFactory.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
rename to realm/realm-library/src/testUtils/java/io/realm/rule/TestRealmConfigurationFactory.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/services/RemoteProcessService.java b/realm/realm-library/src/testUtils/java/io/realm/services/RemoteProcessService.java
similarity index 100%
rename from realm/realm-library/src/androidTest/java/io/realm/services/RemoteProcessService.java
rename to realm/realm-library/src/testUtils/java/io/realm/services/RemoteProcessService.java
diff --git a/realm/realm-library/src/androidTest/java/io/realm/services/RemoteTestService.java b/realm/realm-library/src/testUtils/java/io/realm/services/RemoteTestService.java
similarity index 98%
rename from realm/realm-library/src/androidTest/java/io/realm/services/RemoteTestService.java
rename to realm/realm-library/src/testUtils/java/io/realm/services/RemoteTestService.java
index 46eee6e089..57b0deec15 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/services/RemoteTestService.java
+++ b/realm/realm-library/src/testUtils/java/io/realm/services/RemoteTestService.java
@@ -29,8 +29,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
 import java.util.HashMap;
 import java.util.Map;
 
diff --git a/realm/settings.gradle b/realm/settings.gradle
index 4540b8669d..e986dd6c2c 100644
--- a/realm/settings.gradle
+++ b/realm/settings.gradle
@@ -1,3 +1,4 @@
 // Realm projects
-include 'realm-library'
-include 'realm-annotations-processor'
+include ':realm-library'
+include ':realm-annotations-processor'
+include ':kotlin-extensions'
