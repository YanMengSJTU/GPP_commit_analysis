diff --git a/CHANGELOG.md b/CHANGELOG.md
index d27d6508c8..ee66bc1da7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -17,6 +17,7 @@
 ## Bug fixes
 
 * Added missing row validation check in certain cases on invalidated/deleted objects (#4540).
+* Initializing Realm is now more resilient if `Context.getFilesDir()` isn't working correctly (#4493).
 
 ## 3.1.3 (2017-04-20)
 
diff --git a/Dockerfile b/Dockerfile
index 47bcded27d..450ccf5cff 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -53,7 +53,7 @@ RUN mkdir "${ANDROID_HOME}/licenses" && \
     echo -en "\nd23d63a1f23e25e2c7a316e29eb60396e7924281" > "${ANDROID_HOME}/licenses/android-sdk-preview-license"
 RUN echo y | android update sdk --no-ui --all --filter tools > /dev/null
 RUN echo y | android update sdk --no-ui --all --filter platform-tools | grep 'package installed'
-RUN echo y | android update sdk --no-ui --all --filter build-tools-25.0.2 | grep 'package installed'
+RUN echo y | android update sdk --no-ui --all --filter build-tools-25.0.3 | grep 'package installed'
 RUN echo y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'
 RUN echo y | android update sdk --no-ui --all --filter android-25 | grep 'package installed'
 
diff --git a/README.md b/README.md
index 37ee3b95d1..fcd8d6c7f3 100644
--- a/README.md
+++ b/README.md
@@ -60,7 +60,7 @@ In case you don't want to use the precompiled version, you can build Realm yours
 ### Prerequisites
 
  * Download the [**JDK 7**](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html) or [**JDK 8**](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) from Oracle and install it.
- * Download & install the Android SDK **Build-Tools 25.0.2**, **Android N (API 25)** (for example through Android Studio’s **Android SDK Manager**).
+ * Download & install the Android SDK **Build-Tools 25.0.3**, **Android N (API 25)** (for example through Android Studio’s **Android SDK Manager**).
  * Install CMake from SDK manager in Android Studio ("SDK Tools" -> "CMake").
 
  * Realm currently requires version r10e of the NDK.  Download the one appropriate for your development platform, from the NDK [archive](https://developer.android.com/ndk/downloads/older_releases.html).
diff --git a/examples/build.gradle b/examples/build.gradle
index df34fdd8a0..8fd93d0f63 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -1,5 +1,5 @@
 project.ext.sdkVersion = 25
-project.ext.buildTools = '25.0.2'
+project.ext.buildTools = '25.0.3'
 
 // Don't cache SNAPSHOT (changing) dependencies.
 configurations.all {
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 8322220938..8d8616a30d 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -37,7 +37,7 @@ ext.lcachePath = project.findProperty('lcachePath') ?: System.getenv('NDK_LCACHE
 
 android {
     compileSdkVersion 25
-    buildToolsVersion '25.0.2'
+    buildToolsVersion '25.0.3'
 
     defaultConfig {
         minSdkVersion 9
diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
index 1bec5cfa80..5d5b6ed371 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
@@ -356,7 +356,7 @@ public void findFirstAsync() {
                 .between(AllTypes.FIELD_LONG, 4, 9)
                 .findFirstAsync();
         assertFalse(allTypes.isLoaded());
-        looperThread.keepStrongReference.add(allTypes);
+        looperThread.keepStrongReference(allTypes);
         allTypes.addChangeListener(new RealmChangeListener<DynamicRealmObject>() {
             @Override
             public void onChange(DynamicRealmObject object) {
@@ -389,7 +389,7 @@ public void onChange(RealmResults<DynamicRealmObject> object) {
                 looperThread.testComplete();
             }
         });
-        looperThread.keepStrongReference.add(allTypes);
+        looperThread.keepStrongReference(allTypes);
     }
 
     @Test
@@ -414,15 +414,15 @@ public void onChange(RealmResults<DynamicRealmObject> object) {
                 looperThread.testComplete();
             }
         });
-        looperThread.keepStrongReference.add(allTypes);
+        looperThread.keepStrongReference(allTypes);
     }
 
     // Initializes a Dynamic Realm used by the *Async tests and keeps it ref in the looperThread.
     private DynamicRealm initializeDynamicRealm() {
-        RealmConfiguration defaultConfig = looperThread.realmConfiguration;
+        RealmConfiguration defaultConfig = looperThread.getConfiguration();
         final DynamicRealm dynamicRealm = DynamicRealm.getInstance(defaultConfig);
         populateTestRealm(dynamicRealm, 10);
-        looperThread.keepStrongReference.add(dynamicRealm);
+        looperThread.keepStrongReference(dynamicRealm);
         return dynamicRealm;
     }
 
@@ -531,8 +531,8 @@ public void onChange(RealmResults<DynamicRealmObject> object) {
                 signalCallbackDone.run();
             }
         });
-        looperThread.keepStrongReference.add(realmResults1);
-        looperThread.keepStrongReference.add(realmResults2);
+        looperThread.keepStrongReference(realmResults1);
+        looperThread.keepStrongReference(realmResults2);
     }
 
     @Test
diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
index 7174a91870..b729034259 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
@@ -172,7 +172,7 @@ public void issue4487_checkIfTableIsCorrect() {
     @Test
     @RunTestInLooperThread
     public void notification_notSentAfterUnregisterListenerModelObject() {
-        final Realm looperThreadRealm = looperThread.realm;
+        final Realm looperThreadRealm = looperThread.getRealm();
 
         looperThreadRealm.beginTransaction();
         AllJavaTypes child = looperThreadRealm.createObject(AllJavaTypes.class, 10);
@@ -207,7 +207,7 @@ public void run(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void notification_onCommitRealmResults() {
-        final Realm looperThreadRealm = looperThread.realm;
+        final Realm looperThreadRealm = looperThread.getRealm();
 
         looperThreadRealm.beginTransaction();
         AllJavaTypes child = looperThreadRealm.createObject(AllJavaTypes.class, 10);
@@ -243,7 +243,7 @@ public void run(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void notification_notSentAfterUnregisterListenerRealmResults() {
-        final Realm looperThreadRealm = looperThread.realm;
+        final Realm looperThreadRealm = looperThread.getRealm();
 
         looperThreadRealm.beginTransaction();
         AllJavaTypes child = looperThreadRealm.createObject(AllJavaTypes.class, 10);
@@ -279,7 +279,7 @@ public void run(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void notification_onDeleteRealmResults() {
-        final Realm looperThreadRealm = looperThread.realm;
+        final Realm looperThreadRealm = looperThread.getRealm();
 
         looperThreadRealm.beginTransaction();
         AllJavaTypes child = looperThreadRealm.createObject(AllJavaTypes.class, 10);
@@ -316,7 +316,7 @@ public void run(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void notification_notSentOnUnrelatedChangeRealmResults() {
-        final Realm looperThreadRealm = looperThread.realm;
+        final Realm looperThreadRealm = looperThread.getRealm();
 
         looperThreadRealm.beginTransaction();
         AllJavaTypes child = looperThreadRealm.createObject(AllJavaTypes.class, 10);
@@ -405,7 +405,7 @@ public void json_updateList() {
     @Test
     @RunTestInLooperThread
     public void linkingObjects_IllegalStateException_ifNotYetLoaded() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.executeTransaction(new Realm.Transaction() {
             @Override
@@ -433,7 +433,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void linkingObjects_IllegalStateException_ifDeleted() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.executeTransaction(new Realm.Transaction() {
             @Override
@@ -468,7 +468,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void linkingObjects_IllegalStateException_ifDeletedIndirectly() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.executeTransaction(new Realm.Transaction() {
             @Override
@@ -794,7 +794,9 @@ private void verifyPostConditions(final Realm realm, final PostConditions test,
         realm.commitTransaction();
 
         // Runnable is guaranteed to be enqueued on the Looper queue, after the notifications
-        looperThread.keepStrongReference.addAll(Arrays.asList(refs));
+        for (Object ref : refs) {
+            looperThread.keepStrongReference(ref);
+        }
         looperThread.postRunnable(
             new Runnable() {
                 @Override
diff --git a/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java b/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java
index 6bd270bab7..580eda8f48 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/NotificationsTest.java
@@ -162,7 +162,7 @@ public void onChange(Realm object) {
             }
         };
 
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.addChangeListener(listener);
         realm.addChangeListener(listener);
         realm.addChangeListener(new RealmChangeListener<Realm>() {
@@ -317,7 +317,7 @@ public void run() {
     @RunTestInLooperThread
     public void globalListener_looperThread_triggeredByLocalCommit() {
         final AtomicInteger success = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -335,7 +335,7 @@ public void onChange(Realm object) {
     @RunTestInLooperThread
     public void globalListener_looperThread_triggeredByRemoteCommit() {
         final AtomicInteger success = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -361,7 +361,7 @@ public void onChange(Realm object) {
                 looperThread.testComplete();
             }
         };
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.addChangeListener(listener);
         realm.beginTransaction();
         realm.commitTransaction();
@@ -370,7 +370,7 @@ public void onChange(Realm object) {
     @Test
     @RunTestInLooperThread
     public void addRemoveListenerConcurrency() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final AtomicInteger counter1 = new AtomicInteger(0);
         final AtomicInteger counter2 = new AtomicInteger(0);
         final AtomicInteger counter3 = new AtomicInteger(0);
@@ -447,7 +447,7 @@ public void realmNotificationOrder() {
         // Test both ways to check accidental ordering from unordered collections.
         final AtomicInteger listenerACalled = new AtomicInteger(0);
         final AtomicInteger listenerBCalled = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         final RealmChangeListener<Realm> listenerA = new RealmChangeListener<Realm>() {
 
@@ -690,12 +690,12 @@ public void onChange(Realm object) {
     @Test
     @RunTestInLooperThread
     public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
         final AtomicBoolean resultsListenerDone = new AtomicBoolean(false);
         final AtomicBoolean realmListenerDone = new AtomicBoolean(false);
 
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         assertTrue(dogs.load());
         assertEquals(0, dogs.size());
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
@@ -750,7 +750,7 @@ public void execute(Realm realm) {
     public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification() {
         final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger(0);
         final CountDownLatch signalClosedRealm = new CountDownLatch(1);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(final Realm realm) {
@@ -816,7 +816,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void realmListener_realmResultShouldBeSynced() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
         assertEquals(1, results.size());
 
@@ -844,13 +844,13 @@ public void onChange(Realm element) {
     @Test
     @RunTestInLooperThread
     public void accessingSyncRealmResultInsideAsyncResultListener() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final AtomicInteger asyncResultCallback = new AtomicInteger(0);
 
         final RealmResults<AllTypes> syncResults = realm.where(AllTypes.class).findAll();
 
         RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> results) {
@@ -884,11 +884,11 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void accessingSyncRealmResultsInsideAnotherResultListener() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmResults<AllTypes> syncResults1 = realm.where(AllTypes.class).findAll();
         final RealmResults<AllTypes> syncResults2 = realm.where(AllTypes.class).findAll();
 
-        looperThread.keepStrongReference.add(syncResults1);
+        looperThread.keepStrongReference(syncResults1);
         syncResults1.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> element) {
@@ -906,7 +906,7 @@ public void onChange(RealmResults<AllTypes> element) {
     @Test
     @RunTestInLooperThread(threadName = "IntentService[1]")
     public void listenersNotAllowedOnIntentServiceThreads() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         AllTypes obj = realm.createObject(AllTypes.class);
         realm.commitTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/ObjectChangeSetTests.java b/realm/realm-library/src/androidTest/java/io/realm/ObjectChangeSetTests.java
index 2069ec6eee..2755132a69 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/ObjectChangeSetTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/ObjectChangeSetTests.java
@@ -76,7 +76,7 @@ public void onChange(AllTypes object, ObjectChangeSet changeSet) {
                 looperThread.testComplete();
             }
         });
-        looperThread.keepStrongReference.add(allTypes);
+        looperThread.keepStrongReference(allTypes);
     }
 
     private void checkChangedField(AllTypes allTypes, final String... fieldNames) {
@@ -96,7 +96,7 @@ public void onChange(RealmModel object, ObjectChangeSet changeSet) {
                 looperThread.testComplete();
             }
         });
-        looperThread.keepStrongReference.add(allTypes);
+        looperThread.keepStrongReference(allTypes);
     }
 
     private void listenerShouldNotBeCalled(AllTypes allTypes) {
@@ -117,7 +117,7 @@ public void run() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void objectDeleted() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkDeleted(allTypes);
         realm.beginTransaction();
@@ -128,7 +128,7 @@ public void objectDeleted() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLongField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_LONG);
         realm.beginTransaction();
@@ -139,7 +139,7 @@ public void changeLongField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeStringField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_STRING);
         realm.beginTransaction();
@@ -150,7 +150,7 @@ public void changeStringField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeFloatField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_FLOAT);
         realm.beginTransaction();
@@ -161,7 +161,7 @@ public void changeFloatField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeDoubleField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_DOUBLE);
         realm.beginTransaction();
@@ -172,7 +172,7 @@ public void changeDoubleField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeBooleanField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_BOOLEAN);
         realm.beginTransaction();
@@ -183,7 +183,7 @@ public void changeBooleanField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeDateField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_DATE);
         realm.beginTransaction();
@@ -194,7 +194,7 @@ public void changeDateField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeBinaryField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_BINARY);
         realm.beginTransaction();
@@ -205,7 +205,7 @@ public void changeBinaryField() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLinkFieldSetNewObject() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_REALMOBJECT);
         realm.beginTransaction();
@@ -216,7 +216,7 @@ public void changeLinkFieldSetNewObject() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLinkFieldSetNull() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_REALMOBJECT);
         realm.beginTransaction();
@@ -227,7 +227,7 @@ public void changeLinkFieldSetNull() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLinkFieldRemoveObject() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_REALMOBJECT);
         realm.beginTransaction();
@@ -238,7 +238,7 @@ public void changeLinkFieldRemoveObject() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLinkFieldOriginalObjectChanged_notTrigger() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         listenerShouldNotBeCalled(allTypes);
         realm.beginTransaction();
@@ -249,7 +249,7 @@ public void changeLinkFieldOriginalObjectChanged_notTrigger() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLinkListAddObject() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_REALMLIST);
         realm.beginTransaction();
@@ -260,7 +260,7 @@ public void changeLinkListAddObject() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeLinkListClear() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_REALMLIST);
         realm.beginTransaction();
@@ -271,7 +271,7 @@ public void changeLinkListClear() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeAllFields() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         checkChangedField(allTypes, AllTypes.FIELD_LONG, AllTypes.FIELD_REALMLIST, AllTypes.FIELD_REALMOBJECT,
                 AllTypes.FIELD_DOUBLE, AllTypes.FIELD_FLOAT, AllTypes.FIELD_STRING, AllTypes.FIELD_BOOLEAN,
@@ -295,7 +295,7 @@ public void changeAllFields() {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void changeDifferentFieldOneAfterAnother() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirst();
         final AtomicBoolean stringChanged = new AtomicBoolean(false);
         final AtomicBoolean longChanged = new AtomicBoolean(false);
@@ -339,7 +339,7 @@ public void onChange(RealmModel object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void findFirstAsync_changeSetIsNullWhenQueryReturns() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         AllTypes allTypes = realm.where(AllTypes.class).findFirstAsync();
         allTypes.addChangeListener(new RealmObjectChangeListener<AllTypes>() {
             @Override
@@ -357,7 +357,7 @@ public void onChange(AllTypes object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread(before = PopulateOneAllTypes.class)
     public void findFirstAsync_queryExecutedByLocalCommit() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final AtomicInteger listenerCounter = new AtomicInteger(0);
         final AllTypes allTypes = realm.where(AllTypes.class).findFirstAsync();
         allTypes.addChangeListener(new RealmObjectChangeListener<AllTypes>() {
@@ -423,7 +423,7 @@ public void onChange(DynamicRealmObject object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void allParentObjectShouldBeInChangeSet() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         Owner owner = realm.createObject(Owner.class);
@@ -443,7 +443,7 @@ public void allParentObjectShouldBeInChangeSet() {
         realm.commitTransaction();
 
         RealmResults<Dog> dogs = realm.where(Dog.class).equalTo(Dog.FIELD_HAS_TAIL, true).findAll();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet changeSet) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
index 30f6521816..fa0036e267 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/OrderedCollectionChangeSetTests.java
@@ -16,6 +16,8 @@
 
 package io.realm;
 
+import android.util.Log;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -157,7 +159,7 @@ private void registerCheckListener(Realm realm, final ChangesCheck changesCheck)
         switch (type) {
             case REALM_RESULTS:
                 RealmResults<Dog> results = realm.where(Dog.class).findAllSorted(Dog.FIELD_AGE);
-                looperThread.keepStrongReference.add(results);
+                looperThread.keepStrongReference(results);
                 results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
                     @Override
                     public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet changeSet) {
@@ -167,7 +169,7 @@ public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet ch
                 break;
             case REALM_LIST:
                 RealmList<Dog> list = realm.where(Owner.class).findFirst().getDogs();
-                looperThread.keepStrongReference.add(list);
+                looperThread.keepStrongReference(list);
                 list.addChangeListener(new OrderedRealmCollectionChangeListener<RealmList<Dog>>() {
                     @Override
                     public void onChange(RealmList<Dog> collection, OrderedCollectionChangeSet changeSet) {
@@ -181,7 +183,7 @@ public void onChange(RealmList<Dog> collection, OrderedCollectionChangeSet chang
     @Test
     @RunTestInLooperThread
     public void deletion() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
 
         final ChangesCheck changesCheck = new ChangesCheck() {
@@ -213,7 +215,7 @@ public void check(OrderedCollectionChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void insertion() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 0); // We need to create the owner.
         realm.beginTransaction();
         createObjects(realm, 0, 2, 5, 6, 7, 9);
@@ -247,7 +249,7 @@ public void check(OrderedCollectionChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void changes() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         ChangesCheck changesCheck = new ChangesCheck() {
             @Override
@@ -278,7 +280,7 @@ public void check(OrderedCollectionChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void moves() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         ChangesCheck changesCheck = new ChangesCheck() {
             @Override
@@ -307,7 +309,7 @@ public void check(OrderedCollectionChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void mixed_changes() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         ChangesCheck changesCheck = new ChangesCheck() {
             @Override
@@ -347,7 +349,7 @@ public void check(OrderedCollectionChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void changes_then_delete() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         ChangesCheck changesCheck = new ChangesCheck() {
             @Override
@@ -377,7 +379,7 @@ public void check(OrderedCollectionChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void insert_then_delete() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         ChangesCheck changesCheck = new ChangesCheck() {
             @Override
@@ -409,7 +411,10 @@ public void emptyChangeSet_findAllAsync(){
             looperThread.testComplete();
             return;
         }
-        Realm realm = looperThread.realm;
+
+        Log.d("####", "test running on thread: " + Thread.currentThread());
+
+        Realm realm = looperThread.getRealm();
         populateData(realm, 10);
         final RealmResults<Dog> results = realm.where(Dog.class).findAllSortedAsync(Dog.FIELD_AGE);
         results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
@@ -429,7 +434,8 @@ public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet ch
         new Thread(new Runnable() {
             @Override
             public void run() {
-                Realm realm = Realm.getInstance(looperThread.realmConfiguration)      ;
+                Log.d("####", "runnable running on thread: " + Thread.currentThread());
+                Realm realm = Realm.getInstance(looperThread.getConfiguration())      ;
                 realm.beginTransaction();
                 realm.where(Dog.class).equalTo(Dog.FIELD_AGE, 0).findFirst().deleteFromRealm();
                 realm.commitTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java
index 4d4c051258..546c1eb423 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java
@@ -71,7 +71,7 @@
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         assertEquals(0, realm.where(Owner.class).count());
 
         realm.executeTransactionAsync(new Realm.Transaction() {
@@ -99,7 +99,7 @@ public void onError(Throwable error) {
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync_onSuccess() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         assertEquals(0, realm.where(Owner.class).count());
 
         realm.executeTransactionAsync(new Realm.Transaction() {
@@ -121,7 +121,7 @@ public void onSuccess() {
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync_onSuccessCallerRealmClosed() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         assertEquals(0, realm.where(Owner.class).count());
 
         realm.executeTransactionAsync(new Realm.Transaction() {
@@ -134,7 +134,7 @@ public void execute(Realm realm) {
             @Override
             public void onSuccess() {
                 assertTrue(realm.isClosed());
-                Realm newRealm = Realm.getInstance(looperThread.realmConfiguration);
+                Realm newRealm = Realm.getInstance(looperThread.getConfiguration());
                 assertEquals(1, newRealm.where(Owner.class).count());
                 assertEquals("Owner", newRealm.where(Owner.class).findFirst().getName());
                 newRealm.close();
@@ -147,7 +147,7 @@ public void onSuccess() {
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync_onError() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RuntimeException runtimeException = new RuntimeException("Oh! What a Terrible Failure");
         assertEquals(0, realm.where(Owner.class).count());
 
@@ -170,7 +170,7 @@ public void onError(Throwable error) {
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync_onErrorCallerRealmClosed() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RuntimeException runtimeException = new RuntimeException("Oh! What a Terrible Failure");
         assertEquals(0, realm.where(Owner.class).count());
 
@@ -183,7 +183,7 @@ public void execute(Realm realm) {
             @Override
             public void onError(Throwable error) {
                 assertTrue(realm.isClosed());
-                Realm newRealm = Realm.getInstance(looperThread.realmConfiguration);
+                Realm newRealm = Realm.getInstance(looperThread.getConfiguration());
                 assertEquals(0, newRealm.where(Owner.class).count());
                 assertNull(newRealm.where(Owner.class).findFirst());
                 assertEquals(runtimeException, error);
@@ -197,7 +197,7 @@ public void onError(Throwable error) {
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync_NoCallbacks() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         assertEquals(0, realm.where(Owner.class).count());
 
         realm.executeTransactionAsync(new Realm.Transaction() {
@@ -223,7 +223,7 @@ public void executeTransactionAsync_cancelTransactionInside() throws Throwable {
         final TestHelper.TestLogger testLogger = new TestHelper.TestLogger(LogLevel.DEBUG);
         RealmLog.add(testLogger);
 
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         assertEquals(0, realm.where(Owner.class).count());
 
@@ -257,7 +257,7 @@ public void onError(Throwable error) {
     @RunTestInLooperThread
     public void executeTransactionAsync_realmClosedOnSuccess() {
         final AtomicInteger counter = new AtomicInteger(100);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmCache.Callback cacheCallback = new RealmCache.Callback() {
             @Override
             public void onResult(int count) {
@@ -296,7 +296,7 @@ public void execute(Realm realm) {
     @RunTestInLooperThread
     public void executeTransaction_async_realmClosedOnError() {
         final AtomicInteger counter = new AtomicInteger(100);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmCache.Callback cacheCallback = new RealmCache.Callback() {
             @Override
             public void onResult(int count) {
@@ -337,7 +337,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void executeTransactionAsync_asyncQuery() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
         assertEquals(0, results.size());
 
@@ -414,7 +414,7 @@ public void onError(Throwable error) {
     @Test
     @RunTestInLooperThread
     public void findAllAsync() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
         final RealmResults<AllTypes> results = realm.where(AllTypes.class)
                 .between("columnLong", 0, 4)
@@ -423,7 +423,7 @@ public void findAllAsync() throws Throwable {
         assertFalse(results.isLoaded());
         assertEquals(0, results.size());
 
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> object) {
@@ -438,7 +438,7 @@ public void onChange(RealmResults<AllTypes> object) {
     @Test
     @RunTestInLooperThread
     public void accessingRealmListOnUnloadedRealmObjectShouldThrow() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
         final AllTypes results = realm.where(AllTypes.class)
                 .equalTo("columnLong", 0)
@@ -481,7 +481,7 @@ public void findAllAsync_throwsOnNonLooperThread() throws Throwable {
     @Test
     @RunTestInLooperThread
     public void findAllAsync_withNotification() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
         final RealmResults<AllTypes> results = realm.where(AllTypes.class)
                 .between("columnLong", 0, 4)
@@ -496,7 +496,7 @@ public void onChange(RealmResults<AllTypes> object) {
                 looperThread.testComplete();
             }
         });
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
 
         assertFalse(results.isLoaded());
         assertEquals(0, results.size());
@@ -507,13 +507,13 @@ public void onChange(RealmResults<AllTypes> object) {
     @Test
     @RunTestInLooperThread
     public void findAllAsync_forceLoad() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
         final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
                 .between("columnLong", 0, 4)
                 .findAllAsync();
 
-        looperThread.keepStrongReference.add(realmResults);
+        looperThread.keepStrongReference(realmResults);
         // Notification should be called as well.
         realmResults.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
@@ -543,13 +543,13 @@ public void onChange(RealmResults<AllTypes> object) {
     @Test
     @RunTestInLooperThread
     public void findFirstAsync() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
 
         final AllTypes asyncObj = realm.where(AllTypes.class).findFirstAsync();
         assertFalse(asyncObj.isValid());
         assertFalse(asyncObj.isLoaded());
-        looperThread.keepStrongReference.add(asyncObj);
+        looperThread.keepStrongReference(asyncObj);
         asyncObj.addChangeListener(new RealmChangeListener<AllTypes>() {
             @Override
             public void onChange(AllTypes object) {
@@ -564,9 +564,9 @@ public void onChange(AllTypes object) {
     @Test
     @RunTestInLooperThread
     public void findFirstAsync_initialEmptyRow() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final AllTypes firstAsync = realm.where(AllTypes.class).findFirstAsync();
-        looperThread.keepStrongReference.add(firstAsync);
+        looperThread.keepStrongReference(firstAsync);
         firstAsync.addChangeListener(new RealmChangeListener<AllTypes>() {
             @Override
             public void onChange(AllTypes object) {
@@ -580,19 +580,19 @@ public void onChange(AllTypes object) {
     @Test
     @RunTestInLooperThread
     public void findFirstAsync_updatedIfSyncRealmObjectIsUpdated() throws Throwable {
-        populateTestRealm(looperThread.realm, 1);
-        AllTypes firstSync = looperThread.realm.where(AllTypes.class).findFirst();
+        populateTestRealm(looperThread.getRealm(), 1);
+        AllTypes firstSync = looperThread.getRealm().where(AllTypes.class).findFirst();
         assertEquals(0, firstSync.getColumnLong());
         assertEquals("test data 0", firstSync.getColumnString());
 
-        final AllTypes firstAsync = looperThread.realm.where(AllTypes.class).findFirstAsync();
+        final AllTypes firstAsync = looperThread.getRealm().where(AllTypes.class).findFirstAsync();
         assertTrue(firstAsync.load());
         assertTrue(firstAsync.isLoaded());
         assertTrue(firstAsync.isValid());
         assertEquals(0, firstAsync.getColumnLong());
         assertEquals("test data 0", firstAsync.getColumnString());
 
-        looperThread.keepStrongReference.add(firstAsync);
+        looperThread.keepStrongReference(firstAsync);
         firstAsync.addChangeListener(new RealmChangeListener<AllTypes>() {
             @Override
             public void onChange(AllTypes object) {
@@ -601,9 +601,9 @@ public void onChange(AllTypes object) {
             }
         });
 
-        looperThread.realm.beginTransaction();
+        looperThread.getRealm().beginTransaction();
         firstSync.setColumnString("Galacticon");
-        looperThread.realm.commitTransaction();
+        looperThread.getRealm().commitTransaction();
     }
 
     // Finds elements [0-4] asynchronously then waits for the promise to be loaded
@@ -611,13 +611,13 @@ public void onChange(AllTypes object) {
     @Test
     @RunTestInLooperThread
     public void findFirstAsync_withNotification() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
         final AllTypes realmResults = realm.where(AllTypes.class)
                 .between("columnLong", 4, 9)
                 .findFirstAsync();
 
-        looperThread.keepStrongReference.add(realmResults);
+        looperThread.keepStrongReference(realmResults);
         realmResults.addChangeListener(new RealmChangeListener<AllTypes>() {
             @Override
             public void onChange(AllTypes object) {
@@ -642,7 +642,7 @@ public void onChange(AllTypes object) {
     @RunTestInLooperThread
     public void findFirstAsync_forceLoad() throws Throwable {
         final AtomicBoolean listenerCalled = new AtomicBoolean(false);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
         final AllTypes realmResults = realm.where(AllTypes.class)
                 .between("columnLong", 4, 9)
@@ -671,7 +671,7 @@ public void onChange(RealmModel object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void findFirstAsync_twoListenersOnSameInvalidObjectsCauseNPE() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final AllTypes allTypes = realm.where(AllTypes.class).findFirstAsync();
         final AtomicBoolean firstListenerCalled = new AtomicBoolean(false);
 
@@ -707,7 +707,7 @@ public void onChange(AllTypes element) {
     @Test
     @RunTestInLooperThread
     public void findAllSortedAsync() throws Throwable {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
 
         final RealmResults<AllTypes> results = realm.where(AllTypes.class)
@@ -717,7 +717,7 @@ public void findAllSortedAsync() throws Throwable {
         assertFalse(results.isLoaded());
         assertEquals(0, results.size());
 
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> object) {
@@ -735,9 +735,9 @@ public void onChange(RealmResults<AllTypes> object) {
     @Test
     @RunTestInLooperThread
     public void combiningAsyncAndSync() {
-        populateTestRealm(looperThread.realm, 10);
+        populateTestRealm(looperThread.getRealm(), 10);
 
-        final RealmResults<AllTypes> allTypesAsync = looperThread.realm.where(AllTypes.class).greaterThan("columnLong", 5).findAllAsync();
+        final RealmResults<AllTypes> allTypesAsync = looperThread.getRealm().where(AllTypes.class).greaterThan("columnLong", 5).findAllAsync();
         final RealmResults<AllTypes> allTypesSync = allTypesAsync.where().greaterThan("columnLong", 3).findAll();
 
         // Call where() on an async results will load query. But to maintain the pre version 2.4.0 behaviour of
@@ -752,7 +752,7 @@ public void onChange(RealmResults<AllTypes> object) {
                 looperThread.testComplete();
             }
         });
-        looperThread.keepStrongReference.add(allTypesAsync);
+        looperThread.keepStrongReference(allTypesAsync);
     }
 
     // Keeps advancing the Realm by sending 1 commit for each frame (16ms).
@@ -770,7 +770,7 @@ public void stressTestBackgroundCommits() throws Throwable {
             @Override
             public void run() {
                 Random random = new Random(System.currentTimeMillis());
-                Realm backgroundThreadRealm = Realm.getInstance(looperThread.realm.getConfiguration());
+                Realm backgroundThreadRealm = Realm.getInstance(looperThread.getRealm().getConfiguration());
                 for (int i = 0; i < NUMBER_OF_COMMITS; i++) {
                     backgroundThreadRealm.beginTransaction();
                     AllTypes object = backgroundThreadRealm.createObject(AllTypes.class);
@@ -788,13 +788,13 @@ public void run() {
             }
         };
 
-        final RealmResults<AllTypes> allAsync = looperThread.realm.where(AllTypes.class).findAllAsync();
+        final RealmResults<AllTypes> allAsync = looperThread.getRealm().where(AllTypes.class).findAllAsync();
         allAsync.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> object) {
                 assertTrue(allAsync.isLoaded());
                 if (allAsync.size() == NUMBER_OF_COMMITS) {
-                    AllTypes lastInserted = looperThread.realm.where(AllTypes.class)
+                    AllTypes lastInserted = looperThread.getRealm().where(AllTypes.class)
                             .equalTo("columnLong", latestLongValue[0])
                             .equalTo("columnFloat", latestFloatValue[0])
                             .findFirst();
@@ -804,7 +804,7 @@ public void onChange(RealmResults<AllTypes> object) {
                 }
             }
         });
-        looperThread.keepStrongReference.add(allAsync);
+        looperThread.keepStrongReference(allAsync);
 
         looperThread.postRunnableDelayed(new Runnable() {
             @Override
@@ -817,7 +817,7 @@ public void run() {
     @Test
     @RunTestInLooperThread
     public void distinctAsync() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
@@ -853,10 +853,10 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctBool);
-        looperThread.keepStrongReference.add(distinctLong);
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctBool);
+        looperThread.keepStrongReference(distinctLong);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
         distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
             public void onChange(RealmResults<AnnotationIndexTypes> object) {
@@ -893,7 +893,7 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     @Test
     @RunTestInLooperThread()
     public void distinctAsync_rememberQueryParams() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         final int TEST_SIZE = 10;
         for (int i = 0; i < TEST_SIZE; i++) {
@@ -918,7 +918,7 @@ public void onChange(RealmResults<AllJavaTypes> results) {
     @Test
     @RunTestInLooperThread
     public void distinctAsync_notIndexedFields() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
@@ -958,10 +958,10 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctBool);
-        looperThread.keepStrongReference.add(distinctLong);
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctBool);
+        looperThread.keepStrongReference(distinctLong);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
         distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
             public void onChange(RealmResults<AnnotationIndexTypes> object) {
@@ -998,7 +998,7 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     @Test
     @RunTestInLooperThread
     public void distinctAsync_noneExistingField() throws Throwable {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
@@ -1014,7 +1014,7 @@ public void distinctAsync_noneExistingField() throws Throwable {
     @Test
     @RunTestInLooperThread
     public void batchUpdateDifferentTypeOfQueries() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         for (int i = 0; i < 5; ) {
             AllTypes allTypes = realm.createObject(AllTypes.class);
@@ -1036,10 +1036,10 @@ public void batchUpdateDifferentTypeOfQueries() {
                 new Sort[]{Sort.ASCENDING, Sort.DESCENDING});
         RealmResults<AnnotationIndexTypes> findDistinct = realm.where(AnnotationIndexTypes.class).distinctAsync("indexString");
 
-        looperThread.keepStrongReference.add(findAllAsync);
-        looperThread.keepStrongReference.add(findAllSorted);
-        looperThread.keepStrongReference.add(findAllSortedMulti);
-        looperThread.keepStrongReference.add(findDistinct);
+        looperThread.keepStrongReference(findAllAsync);
+        looperThread.keepStrongReference(findAllSorted);
+        looperThread.keepStrongReference(findAllSortedMulti);
+        looperThread.keepStrongReference(findDistinct);
 
         final CountDownLatch queriesCompleted = new CountDownLatch(4);
         final CountDownLatch bgRealmClosedLatch = new CountDownLatch(1);
@@ -1149,10 +1149,10 @@ public void run() {
     @RunTestInLooperThread
     public void queryingLinkHandover() throws Throwable {
         final AtomicInteger numberOfInvocations = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         final RealmResults<Dog> allAsync = realm.where(Dog.class).equalTo("owner.name", "kiba").findAllAsync();
-        looperThread.keepStrongReference.add(allAsync);
+        looperThread.keepStrongReference(allAsync);
         allAsync.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> object) {
@@ -1202,11 +1202,11 @@ public void doInBackground(Realm realm) {
     @RunTestInLooperThread
     public void badVersion_syncTransaction() throws NoSuchFieldException, IllegalAccessException {
         final AtomicInteger listenerCount = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
 
         // 1. Makes sure that async query is not started.
         final RealmResults<AllTypes> result = realm.where(AllTypes.class).findAllSortedAsync(AllTypes.FIELD_STRING);
-        looperThread.keepStrongReference.add(result);
+        looperThread.keepStrongReference(result);
         result.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> object) {
@@ -1250,7 +1250,7 @@ public void onChange(RealmResults<AllTypes> object) {
     @Test
     @RunTestInLooperThread
     public void batchUpdate_localRefIsDeletedInLoopOfNativeBatchUpdateQueries() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         // For Android, the size of local ref map is 512. Uses 1024 for more pressure.
         final int TEST_COUNT = 1024;
         final AtomicBoolean updatesTriggered = new AtomicBoolean(false);
@@ -1284,7 +1284,7 @@ public void execute(Realm realm) {
                         // Step 2: Creates 2nd - TEST_COUNT queries.
                         RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
                         results.addChangeListener(this);
-                        looperThread.keepStrongReference.add(results);
+                        looperThread.keepStrongReference(results);
                     }
                 }
             }
@@ -1292,7 +1292,7 @@ public void execute(Realm realm) {
         // Step 1. Creates first async to kick the test start.
         RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
         results.addChangeListener(listener);
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
     }
 
     // *** Helper methods ***
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
index b058f3357a..b44bcc868f 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmChangeListenerTests.java
@@ -63,7 +63,7 @@ public void tearDown() {
     @Test
     @RunTestInLooperThread
     public void returnedRealmIsNotNull() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm realm) {
@@ -79,7 +79,7 @@ public void onChange(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void returnedDynamicRealmIsNotNull() {
-        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
         dynamicRealm.addChangeListener(new RealmChangeListener<DynamicRealm>() {
             @Override
             public void onChange(DynamicRealm dynRealm) {
@@ -96,9 +96,9 @@ public void onChange(DynamicRealm dynRealm) {
     @Test
     @RunTestInLooperThread
     public void returnedRealmResultsIsNotNull() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         RealmResults<Cat> cats = realm.where(Cat.class).findAll();
-        looperThread.keepStrongReference.add(cats);
+        looperThread.keepStrongReference(cats);
         cats.addChangeListener(new RealmChangeListener<RealmResults<Cat>>() {
             @Override
             public void onChange(RealmResults<Cat> result) {
@@ -115,9 +115,9 @@ public void onChange(RealmResults<Cat> result) {
     @Test
     @RunTestInLooperThread
     public void returnedRealmResultsOfModelIsNotNull() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         RealmResults<AllTypesRealmModel> alltypes = realm.where(AllTypesRealmModel.class).findAll();
-        looperThread.keepStrongReference.add(alltypes);
+        looperThread.keepStrongReference(alltypes);
         alltypes.addChangeListener(new RealmChangeListener<RealmResults<AllTypesRealmModel>>() {
             @Override
             public void onChange(RealmResults<AllTypesRealmModel> result) {
@@ -136,12 +136,12 @@ public void onChange(RealmResults<AllTypesRealmModel> result) {
     @Test
     @RunTestInLooperThread
     public void returnedRealmObjectIsNotNull() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
-        Cat cat = looperThread.realm.createObject(Cat.class);
+        Cat cat = realm.createObject(Cat.class);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(cat);
+        looperThread.keepStrongReference(cat);
         cat.addChangeListener(new RealmChangeListener<Cat>() {
             @Override
             public void onChange(Cat object) {
@@ -158,12 +158,12 @@ public void onChange(Cat object) {
     @Test
     @RunTestInLooperThread
     public void returnedRealmModelIsNotNull() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         AllTypesRealmModel model = realm.createObject(AllTypesRealmModel.class, 0);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(model);
+        looperThread.keepStrongReference(model);
         RealmObject.addChangeListener(model, new RealmChangeListener<AllTypesRealmModel>() {
             @Override
             public void onChange(AllTypesRealmModel object) {
@@ -180,15 +180,15 @@ public void onChange(AllTypesRealmModel object) {
     @Test
     @RunTestInLooperThread
     public void returnedDynamicRealmObjectIsNotNull() {
-        Realm realm = Realm.getInstance(looperThread.realmConfiguration);
+        Realm realm = Realm.getInstance(looperThread.getConfiguration());
         realm.close();
 
-        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
         dynamicRealm.beginTransaction();
         DynamicRealmObject allTypes = dynamicRealm.createObject(AllTypes.CLASS_NAME);
         dynamicRealm.commitTransaction();
 
-        looperThread.keepStrongReference.add(allTypes);
+        looperThread.keepStrongReference(allTypes);
         allTypes.addChangeListener(new RealmChangeListener<DynamicRealmObject>() {
             @Override
             public void onChange(DynamicRealmObject object) {
@@ -205,12 +205,12 @@ public void onChange(DynamicRealmObject object) {
     @Test
     @RunTestInLooperThread
     public void returnedDynamicRealmResultsIsNotNull() {
-        Realm realm = Realm.getInstance(looperThread.realmConfiguration);
+        Realm realm = Realm.getInstance(looperThread.getConfiguration());
         realm.close();
 
-        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
         RealmResults<DynamicRealmObject> all = dynamicRealm.where(AllTypes.CLASS_NAME).findAll();
-        looperThread.keepStrongReference.add(all);
+        looperThread.keepStrongReference(all);
         all.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>() {
             @Override
             public void onChange(RealmResults<DynamicRealmObject> result) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
index 0e195f1343..c6b2ea957f 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
@@ -993,7 +993,7 @@ public void add_set_dynamicObjectCreatedFromTypedRealm() {
     }
 
     private RealmList<Dog> prepareRealmListInLooperThread() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         Owner owner = realm.createObject(Owner.class);
         owner.setName("Owner");
@@ -1010,7 +1010,7 @@ public void add_set_dynamicObjectCreatedFromTypedRealm() {
     @RunTestInLooperThread
     public void addChangeListener() {
         collection = prepareRealmListInLooperThread();
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final AtomicInteger listenerCalledCount = new AtomicInteger(0);
         collection.addChangeListener(new RealmChangeListener<RealmList<Dog>>() {
             @Override
@@ -1039,7 +1039,7 @@ public void onChange(RealmList<Dog> collection, OrderedCollectionChangeSet chang
     @RunTestInLooperThread
     public void removeAllChangeListeners() {
         collection = prepareRealmListInLooperThread();
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final AtomicInteger listenerCalledCount = new AtomicInteger(0);
         collection.addChangeListener(new RealmChangeListener<RealmList<Dog>>() {
             @Override
@@ -1077,7 +1077,7 @@ public void onChange(RealmList<Dog> element) {
     @RunTestInLooperThread
     public void removeChangeListener() {
         collection = prepareRealmListInLooperThread();
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final AtomicInteger listenerCalledCount = new AtomicInteger(0);
         RealmChangeListener<RealmList<Dog>> listener1 = new RealmChangeListener<RealmList<Dog>>() {
             @Override
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java
index 6d20ffcec0..1bf59fdf2a 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmModelTests.java
@@ -195,11 +195,11 @@ public void query() {
     @Test
     @RunTestInLooperThread
     public void async_query() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, TEST_DATA_SIZE);
 
         final RealmResults<AllTypesRealmModel> allTypesRealmModels = realm.where(AllTypesRealmModel.class).distinctAsync(AllTypesRealmModel.FIELD_STRING);
-        looperThread.keepStrongReference.add(allTypesRealmModels);
+        looperThread.keepStrongReference(allTypesRealmModels);
         allTypesRealmModels.addChangeListener(new RealmChangeListener<RealmResults<AllTypesRealmModel>>() {
             @Override
             public void onChange(RealmResults<AllTypesRealmModel> object) {
@@ -231,8 +231,8 @@ public void dynamicObject() {
     @Test
     @RunTestInLooperThread
     public void dynamicRealm() {
-        populateTestRealm(looperThread.realm, TEST_DATA_SIZE);
-        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        populateTestRealm(looperThread.getRealm(), TEST_DATA_SIZE);
+        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
 
         dynamicRealm.beginTransaction();
         DynamicRealmObject dog = dynamicRealm.createObject(AllTypesRealmModel.CLASS_NAME, 42);
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
index d92e76a252..c3b2944f1b 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
@@ -1576,7 +1576,7 @@ public void setter_changePrimaryKeyThrows() {
     @Test
     @RunTestInLooperThread
     public void addChangeListener_throwOnAddingNullListenerFromLooperThread() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         Dog dog = createManagedDogObjectFromRealmInstance(realm);
 
         try {
@@ -1614,7 +1614,7 @@ public void addChangeListener_throwOnAddingNullListenerFromNonLooperThread() thr
     @Test
     @RunTestInLooperThread
     public void changeListener_triggeredWhenObjectIsDeleted() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         AllTypes obj = realm.createObject(AllTypes.class);
         realm.commitTransaction();
@@ -1664,7 +1664,7 @@ public void onChange(Dog object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void addChangeListener_throwInsiderTransaction() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         Dog dog = realm.createObject(Dog.class);
@@ -1695,7 +1695,7 @@ public void onChange(Dog object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void removeChangeListener_throwOnRemovingNullListenerFromLooperThread() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         Dog dog = createManagedDogObjectFromRealmInstance(realm);
 
         try {
@@ -1733,7 +1733,7 @@ public void removeChangeListener_throwOnRemovingNullListenerFromNonLooperThread(
     @Test
     @RunTestInLooperThread
     public void removeChangeListener_insideTransaction() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final Dog dog = createManagedDogObjectFromRealmInstance(realm);
         RealmChangeListener<Dog> realmChangeListener = new RealmChangeListener<Dog>() {
             @Override
@@ -1762,7 +1762,7 @@ public void onChange(Dog object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void removeAllChangeListeners() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         Dog dog = realm.createObject(Dog.class);
         dog.setAge(13);
@@ -1793,7 +1793,7 @@ public void onChange(Dog object, ObjectChangeSet changeSet) {
     @Test
     @RunTestInLooperThread
     public void removeAllChangeListeners_thenAdd() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         Dog dog = realm.createObject(Dog.class);
         dog.setAge(13);
@@ -1866,7 +1866,7 @@ public void removeAllChangeListeners_throwOnUnmanagedObject() {
     @Test
     @RunTestInLooperThread
     public void addChangeListener_returnedObjectOfCopyToRealmOrUpdate() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         realm.createObject(AllTypesPrimaryKey.class, 1);
 
@@ -1876,7 +1876,7 @@ public void addChangeListener_returnedObjectOfCopyToRealmOrUpdate() {
         allTypesPrimaryKey = realm.copyToRealmOrUpdate(allTypesPrimaryKey);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(allTypesPrimaryKey);
+        looperThread.keepStrongReference(allTypesPrimaryKey);
         allTypesPrimaryKey.addChangeListener(new RealmChangeListener<AllTypesPrimaryKey>() {
             @Override
             public void onChange(AllTypesPrimaryKey element) {
@@ -1898,14 +1898,14 @@ public void onChange(AllTypesPrimaryKey element) {
     @RunTestInLooperThread
     public void addChangeListener_listenerShouldBeCalledIfObjectChangesAfterAsyncReturn() {
         final AtomicInteger listenerCounter = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         realm.createObject(AllTypesPrimaryKey.class, 1);
         realm.commitTransaction();
 
         // Step 1
         final AllTypesPrimaryKey allTypesPrimaryKey = realm.where(AllTypesPrimaryKey.class).findFirstAsync();
-        looperThread.keepStrongReference.add(allTypesPrimaryKey);
+        looperThread.keepStrongReference(allTypesPrimaryKey);
         allTypesPrimaryKey.addChangeListener(new RealmChangeListener<AllTypesPrimaryKey>() {
             @Override
             public void onChange(AllTypesPrimaryKey element) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
index 107836df2c..e11ad67955 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
@@ -2994,11 +2994,11 @@ public void findAllSorted_onSubObjectField() {
     @Test
     @RunTestInLooperThread
     public void findAllSortedAsync_onSubObjectField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         populateTestRealm(realm, TEST_DATA_SIZE);
         RealmResults<AllTypes> results = realm.where(AllTypes.class)
                 .findAllSortedAsync(AllTypes.FIELD_REALMOBJECT + "." + Dog.FIELD_AGE);
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> results) {
@@ -3029,7 +3029,7 @@ public void findAllSorted_listOnSubObjectField() {
     @Test
     @RunTestInLooperThread
     public void findAllSortedAsync_listOnSubObjectField() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         String[] fieldNames = new String[2];
         fieldNames[0] = AllTypes.FIELD_REALMOBJECT + "." + Dog.FIELD_AGE;
         fieldNames[1] = AllTypes.FIELD_REALMOBJECT + "." + Dog.FIELD_AGE;
@@ -3041,7 +3041,7 @@ public void findAllSortedAsync_listOnSubObjectField() {
         populateTestRealm(realm, TEST_DATA_SIZE);
         RealmResults<AllTypes> results = realm.where(AllTypes.class)
                 .findAllSortedAsync(fieldNames, sorts);
-        looperThread.keepStrongReference.add(results);
+        looperThread.keepStrongReference(results);
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> results) {
@@ -3193,7 +3193,7 @@ public void distinct_invalidTypesLinkedFields() {
     @RunTestInLooperThread
     public void distinctAsync() throws Throwable {
         final AtomicInteger changeListenerCalled = new AtomicInteger(4);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
@@ -3228,10 +3228,10 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctBool);
-        looperThread.keepStrongReference.add(distinctLong);
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctBool);
+        looperThread.keepStrongReference(distinctLong);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
         distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
             public void onChange(RealmResults<AnnotationIndexTypes> object) {
@@ -3269,7 +3269,7 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     @RunTestInLooperThread
     public void distinctAsync_withNullValues() throws Throwable {
         final AtomicInteger changeListenerCalled = new AtomicInteger(2);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
@@ -3288,8 +3288,8 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
 
         distinctDate.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
index 6eefd9023f..b4ead0c1bf 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
@@ -348,7 +348,7 @@ public void distinct_invalidTypesLinkedFields() {
     @Test
     @RunTestInLooperThread
     public void changeListener_syncIfNeeded_updatedFromOtherThread() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         populateTestRealm(realm, 10);
 
         final RealmResults<AllTypes> results = realm.where(AllTypes.class).lessThan(AllTypes.FIELD_LONG, 10).findAll();
@@ -421,7 +421,7 @@ private void populateTestRealm(Realm testRealm, int objects) {
     @RunTestInLooperThread
     public void distinctAsync() throws Throwable {
         final AtomicInteger changeListenerCalled = new AtomicInteger(4);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
@@ -456,10 +456,10 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctBool);
-        looperThread.keepStrongReference.add(distinctLong);
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctBool);
+        looperThread.keepStrongReference(distinctLong);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
         distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
             public void onChange(RealmResults<AnnotationIndexTypes> object) {
@@ -497,7 +497,7 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     @RunTestInLooperThread
     public void distinctAsync_withNullValues() throws Throwable {
         final AtomicInteger changeListenerCalled = new AtomicInteger(2);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
@@ -522,8 +522,8 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
         distinctDate.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
             public void onChange(RealmResults<AnnotationIndexTypes> object) {
@@ -545,7 +545,7 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     @RunTestInLooperThread
     public void distinctAsync_notIndexedFields() {
         final AtomicInteger changeListenerCalled = new AtomicInteger(4);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         final long numberOfBlocks = 25;
         final long numberOfObjects = 10;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
@@ -584,10 +584,10 @@ public void run() {
             }
         };
 
-        looperThread.keepStrongReference.add(distinctBool);
-        looperThread.keepStrongReference.add(distinctLong);
-        looperThread.keepStrongReference.add(distinctDate);
-        looperThread.keepStrongReference.add(distinctString);
+        looperThread.keepStrongReference(distinctBool);
+        looperThread.keepStrongReference(distinctLong);
+        looperThread.keepStrongReference(distinctDate);
+        looperThread.keepStrongReference(distinctString);
         distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
             @Override
             public void onChange(RealmResults<AnnotationIndexTypes> object) {
@@ -869,10 +869,10 @@ public void distinctMultiArgs_invalidTypesLinkedFields() {
     @Test
     @RunTestInLooperThread
     public void accessors_resultsBuiltOnDeletedLinkView_deletionAsALocalCommit() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         // Step 1
         RealmResults<Dog> dogs = populateRealmResultsOnLinkView(realm);
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> dogs) {
@@ -930,9 +930,9 @@ public void execute(Realm realm) {
     @RunTestInLooperThread
     public void accessors_resultsBuiltOnDeletedLinkView_deletionAsARemoteCommit() {
         // Step 1
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         RealmResults<Dog> dogs = populateRealmResultsOnLinkView(realm);
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> dogs) {
@@ -983,10 +983,10 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void addChangeListener() {
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
 
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> object) {
@@ -1003,7 +1003,7 @@ public void onChange(RealmResults<AllTypes> object) {
     @RunTestInLooperThread
     public void addChangeListener_twice() {
         final AtomicInteger listenersTriggered = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
 
         RealmChangeListener<RealmResults<AllTypes>> listener = new RealmChangeListener<RealmResults<AllTypes>>() {
@@ -1031,7 +1031,7 @@ public void run() {
         });
 
         // Adding it twice will be ignored, so removing it will not cause the listener to be triggered.
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addChangeListener(listener);
         collection.addChangeListener(listener);
         collection.removeChangeListener(listener);
@@ -1055,7 +1055,7 @@ public void addChangeListener_null() {
     @RunTestInLooperThread
     public void removeChangeListener() {
         final AtomicInteger listenersTriggered = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
 
         RealmChangeListener<RealmResults<AllTypes>> listener = new RealmChangeListener<RealmResults<AllTypes>>() {
@@ -1065,7 +1065,7 @@ public void onChange(RealmResults<AllTypes> object) {
             }
         };
 
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addChangeListener(listener);
         collection.removeChangeListener(listener);
 
@@ -1100,7 +1100,7 @@ public void removeChangeListener_null() {
     @RunTestInLooperThread
     public void removeAllChangeListeners() {
         final AtomicInteger listenersTriggered = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
 
         RealmChangeListener<RealmResults<AllTypes>> listenerA = new RealmChangeListener<RealmResults<AllTypes>>() {
@@ -1116,7 +1116,7 @@ public void onChange(RealmResults<AllTypes> object) {
             }
         };
 
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addChangeListener(listenerA);
         collection.addChangeListener(listenerB);
         collection.removeAllChangeListeners();
@@ -1141,7 +1141,7 @@ public void run() {
     @Test
     @RunTestInLooperThread
     public void removeAllChangeListeners_thenAdd() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> collection = realm.where(AllTypes.class).findAll();
 
         collection.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index 22ad7a1231..3bbe104e97 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -38,12 +38,17 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
@@ -117,6 +122,9 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
 
 @RunWith(AndroidJUnit4.class)
 public class RealmTests {
@@ -129,6 +137,8 @@
     @Rule
     public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();
     @Rule
+    public final TemporaryFolder tmpFolder = new TemporaryFolder();
+    @Rule
     public final ExpectedException thrown = ExpectedException.none();
 
     private Context context;
@@ -3075,7 +3085,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void closeRealmInChangeListenerWhenThereIsListenerOnEmptyObject() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmChangeListener<AllTypes> dummyListener = new RealmChangeListener<AllTypes>() {
             @Override
             public void onChange(AllTypes object) {
@@ -3116,7 +3126,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void closeRealmInChangeListenerWhenThereIsListenerOnObject() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmChangeListener<AllTypes> dummyListener = new RealmChangeListener<AllTypes>() {
             @Override
             public void onChange(AllTypes object) {
@@ -3161,7 +3171,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void closeRealmInChangeListenerWhenThereIsListenerOnResults() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         final RealmChangeListener<RealmResults<AllTypes>> dummyListener = new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> object) {
@@ -3200,7 +3210,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void addChangeListener_throwOnAddingNullListenerFromLooperThread() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         try {
             realm.addChangeListener(null);
@@ -3233,7 +3243,7 @@ public void run() throws Exception {
     @Test
     @RunTestInLooperThread
     public void removeChangeListener_throwOnRemovingNullListenerFromLooperThread() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         try {
             realm.removeChangeListener(null);
@@ -3831,12 +3841,45 @@ public boolean accept(File dir, String name) {
         realmOnExternalStorage.close();
     }
 
+    // Verify that the logic for waiting for the users file dir to be come available isn't totally broken
+    // This is pretty hard to test, so forced to break encapsulation in this case.
+    @Test
+    public void init_waitForFilesDir() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException {
+        java.lang.reflect.Method m = Realm.class.getDeclaredMethod("checkFilesDirAvailable", Context.class);
+        m.setAccessible(true);
+
+        // A) Check it fails if getFilesDir is never created
+        Context mockContext = mock(Context.class);
+        when(mockContext.getFilesDir()).thenReturn(null);
+
+        try {
+            m.invoke(null, mockContext);
+            fail();
+        } catch (InvocationTargetException e) {
+            assertEquals(IllegalStateException.class, e.getCause().getClass());
+        }
+
+        // B) Check we return if the filesDir becomes available after a while
+        mockContext = mock(Context.class);
+        when(mockContext.getFilesDir()).then(new Answer<File>() {
+            int calls = 0;
+            File userFolder = tmpFolder.newFolder();
+            @Override
+            public File answer(InvocationOnMock invocationOnMock) throws Throwable {
+                calls++;
+                return (calls > 5) ? userFolder : null; // Start returning the correct folder after 5 attempts
+            }
+        });
+
+        assertNull(m.invoke(null, mockContext));
+    }
+
     @Test
     @RunTestInLooperThread
     public void refresh_triggerNotifications() {
         final CountDownLatch bgThreadDone = new CountDownLatch(1);
         final AtomicBoolean listenerCalled = new AtomicBoolean(false);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
         assertEquals(0, results.size());
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
@@ -3852,7 +3895,7 @@ public void onChange(RealmResults<AllTypes> results) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                Realm realm = Realm.getInstance(looperThread.realmConfiguration);
+                Realm realm = Realm.getInstance(looperThread.getConfiguration());
                 realm.beginTransaction();
                 realm.createObject(AllTypes.class);
                 realm.commitTransaction();
@@ -3895,7 +3938,7 @@ public void run() {
     public void refresh_forceSynchronousNotifications() {
         final CountDownLatch bgThreadDone = new CountDownLatch(1);
         final AtomicBoolean listenerCalled = new AtomicBoolean(false);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
         results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
@@ -3909,7 +3952,7 @@ public void onChange(RealmResults<AllTypes> results) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                Realm realm = Realm.getInstance(looperThread.realmConfiguration);
+                Realm realm = Realm.getInstance(looperThread.getConfiguration());
                 realm.beginTransaction();
                 realm.createObject(AllTypes.class);
                 realm.commitTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RxJavaTests.java b/realm/realm-library/src/androidTest/java/io/realm/RxJavaTests.java
index e306343516..eafe61d82d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RxJavaTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RxJavaTests.java
@@ -105,7 +105,7 @@ public void call(AllTypes rxObject) {
     @RunTestInLooperThread
     public void realmObject_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         final AllTypes obj = realm.createObject(AllTypes.class);
         realm.commitTransaction();
@@ -167,7 +167,7 @@ public void call(AllTypes rxObject) {
     @RunTestInLooperThread
     public void findFirstAsync_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         AllTypes obj = realm.createObject(AllTypes.class);
         realm.commitTransaction();
@@ -189,7 +189,7 @@ public void call(AllTypes rxObject) {
     @RunTestInLooperThread
     public void findFirstAsync_emittedOnDelete() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         final AllTypes obj = realm.createObject(AllTypes.class);
         realm.commitTransaction();
@@ -282,7 +282,7 @@ public void call(RealmResults<DynamicRealmObject> rxResults) {
     @RunTestInLooperThread
     public void realmResults_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
         realm.commitTransaction();
@@ -305,7 +305,7 @@ public void call(RealmResults<AllTypes> allTypes) {
     @RunTestInLooperThread
     public void realmList_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         final RealmList<Dog> list = realm.createObject(AllTypes.class).getColumnRealmList();
         realm.commitTransaction();
@@ -329,7 +329,7 @@ public void call(RealmList<Dog> dogs) {
     @RunTestInLooperThread
     public void dynamicRealmResults_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
         dynamicRealm.beginTransaction();
         RealmResults<DynamicRealmObject> results = dynamicRealm.where(AllTypes.CLASS_NAME).findAll();
         dynamicRealm.commitTransaction();
@@ -370,7 +370,7 @@ public void call(RealmResults<AllTypes> rxResults) {
     @RunTestInLooperThread
     public void findAllAsync_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         subscription = realm.where(AllTypes.class).findAllAsync().asObservable().subscribe(new Action1<RealmResults<AllTypes>>() {
             @Override
             public void call(RealmResults<AllTypes> rxResults) {
@@ -404,7 +404,7 @@ public void call(Realm rxRealm) {
     @RunTestInLooperThread
     public void realm_emittedOnUpdate() {
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
-        Realm realm = looperThread.realm;
+        Realm realm = looperThread.getRealm();
         subscription = realm.asObservable().subscribe(new Action1<Realm>() {
             @Override
             public void call(Realm rxRealm) {
@@ -445,7 +445,7 @@ public void call(Throwable throwable) {
     @Test
     @RunTestInLooperThread
     public void dynamicRealm_emittedOnUpdate() {
-        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
         final AtomicInteger subscriberCalled = new AtomicInteger(0);
         subscription = dynamicRealm.asObservable().subscribe(new Action1<DynamicRealm>() {
             @Override
@@ -700,7 +700,7 @@ public void call(DynamicRealmObject obj) {
     public void realmResults_gcStressTest() {
         final int TEST_SIZE = 50;
         final AtomicLong innerCounter = new AtomicLong();
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         for (int i = 0; i < TEST_SIZE; i++) {
@@ -743,7 +743,7 @@ public void call(Throwable throwable) {
     public void dynamicRealmResults_gcStressTest() {
         final int TEST_SIZE = 50;
         final AtomicLong innerCounter = new AtomicLong();
-        final DynamicRealm realm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm realm = DynamicRealm.getInstance(looperThread.getConfiguration());
 
         realm.beginTransaction();
         for (int i = 0; i < TEST_SIZE; i++) {
@@ -787,7 +787,7 @@ public void call(Throwable throwable) {
     public void realmObject_gcStressTest() {
         final int TEST_SIZE = 50;
         final AtomicLong innerCounter = new AtomicLong();
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         for (int i = 0; i < TEST_SIZE; i++) {
@@ -830,7 +830,7 @@ public void call(Throwable throwable) {
     public void dynamicRealmObject_gcStressTest() {
         final int TEST_SIZE = 50;
         final AtomicLong innerCounter = new AtomicLong();
-        final DynamicRealm realm = DynamicRealm.getInstance(looperThread.realmConfiguration);
+        final DynamicRealm realm = DynamicRealm.getInstance(looperThread.getConfiguration());
 
         realm.beginTransaction();
         for (int i = 0; i < TEST_SIZE; i++) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/SortTest.java b/realm/realm-library/src/androidTest/java/io/realm/SortTest.java
index e20ec38079..396969108f 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/SortTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/SortTest.java
@@ -347,7 +347,7 @@ public void realmSortMultiFailures() {
     public void resorting() throws InterruptedException {
         final AtomicInteger changeListenerCalled = new AtomicInteger(4);
 
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.setAutoRefresh(true);
 
         final Runnable endTest = new Runnable() {
@@ -368,7 +368,7 @@ public void run() {
 
         // rr0: [0, 1, 2, 3]
         final RealmResults<AllTypes> rr0 = realm.where(AllTypes.class).findAll();
-        looperThread.keepStrongReference.add(rr0);
+        looperThread.keepStrongReference(rr0);
         rr0.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> element) {
@@ -380,7 +380,7 @@ public void onChange(RealmResults<AllTypes> element) {
 
         // rr1: [1, 2, 0, 3]
         final RealmResults<AllTypes> rr1 = realm.where(AllTypes.class).findAll().sort(FIELD_LONG, Sort.ASCENDING);
-        looperThread.keepStrongReference.add(rr1);
+        looperThread.keepStrongReference(rr1);
         rr1.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> element) {
@@ -396,7 +396,7 @@ public void onChange(RealmResults<AllTypes> element) {
 
         // rr2: [0, 3, 1, 2]
         final RealmResults<AllTypes> rr2 = realm.where(AllTypes.class).findAll().sort(FIELD_LONG, Sort.DESCENDING);
-        looperThread.keepStrongReference.add(rr2);
+        looperThread.keepStrongReference(rr2);
         rr2.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> element) {
@@ -485,7 +485,7 @@ public void run() {
 
         RealmResults<AllTypes> objectsAscending = realm.where(AllTypes.class).findAllSorted(AllTypes.FIELD_DATE, Sort.ASCENDING);
         assertEquals(TEST_SIZE, objectsAscending.size());
-        looperThread.keepStrongReference.add(objectsAscending);
+        looperThread.keepStrongReference(objectsAscending);
         objectsAscending.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> element) {
@@ -501,7 +501,7 @@ public void onChange(RealmResults<AllTypes> element) {
 
         RealmResults<AllTypes> objectsDescending = realm.where(AllTypes.class).findAllSorted(AllTypes.FIELD_DATE, Sort.DESCENDING);
         assertEquals(TEST_SIZE, objectsDescending.size());
-        looperThread.keepStrongReference.add(objectsDescending);
+        looperThread.keepStrongReference(objectsDescending);
         objectsDescending.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
             @Override
             public void onChange(RealmResults<AllTypes> element) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
index 731c21d3a1..090f048cb8 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TestHelper.java
@@ -779,7 +779,7 @@ public static void populateForDistinctFieldsOrder(Realm realm, long numberOfBloc
     }
 
     public static void awaitOrFail(CountDownLatch latch) {
-        awaitOrFail(latch, 60);
+        awaitOrFail(latch, 300);
     }
 
     public static void awaitOrFail(CountDownLatch latch, int numberOfSeconds) {
@@ -796,36 +796,40 @@ public static void awaitOrFail(CountDownLatch latch, int numberOfSeconds) {
         }
     }
 
+    public interface LooperTest {
+        CountDownLatch getRealmClosedSignal();
+        Looper getLooper();
+        Throwable getAssertionError();
+    }
+
     // Cleans resource, shutdowns the executor service and throws any background exception.
     @SuppressWarnings("Finally")
-    public static void exitOrThrow(final ExecutorService executorService,
-                                   final CountDownLatch signalTestFinished,
-                                   final CountDownLatch signalClosedRealm,
-                                   final Looper[] looper,
-                                   final Throwable[] throwable) throws Throwable {
+    public static void exitOrThrow(ExecutorService executorService, CountDownLatch testFinishedSignal, LooperTest test) throws Throwable {
 
         // Waits for the signal indicating the test's use case is done.
         try {
             // Even if this fails we want to try as hard as possible to cleanup. If we fail to close all resources
             // properly, the `after()` method will most likely throw as well because it tries do delete any Realms
             // used. Any exception in the `after()` code will mask the original error.
-            TestHelper.awaitOrFail(signalTestFinished);
+            TestHelper.awaitOrFail(testFinishedSignal);
         } finally {
-            if (looper[0] != null) {
+            Looper looper = test.getLooper();
+            if (looper != null) {
                 // Failing to quit the looper will not execute the finally block responsible
                 // of closing the Realm.
-                looper[0].quit();
+                looper.quit();
             }
 
             // Waits for the finally block to execute and closes the Realm.
-            TestHelper.awaitOrFail(signalClosedRealm);
+            TestHelper.awaitOrFail(test.getRealmClosedSignal());
             // Closes the executor.
             // This needs to be called after waiting since it might interrupt waitRealmThreadExecutorFinish().
             executorService.shutdownNow();
 
-            if (throwable[0] != null) {
+            Throwable fault = test.getAssertionError();
+            if (fault != null) {
                 // Throws any assertion errors happened in the background thread.
-                throw throwable[0];
+                throw fault;
             }
         }
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
index 73bf9731c5..aa4c01fc54 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
@@ -82,7 +82,7 @@ public void setUp() {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_createObject() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -102,7 +102,7 @@ public void run() {
         final Dog dog = realm.createObject(Dog.class);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<Dog>() {
             @Override
             public void onChange(Dog object) {
@@ -119,8 +119,8 @@ public void onChange(Dog object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_createObject_dynamic_realm() {
-        final DynamicRealm realm = DynamicRealm.getInstance(looperThread.realmConfiguration);
-        looperThread.keepStrongReference.add(realm);
+        final DynamicRealm realm = DynamicRealm.getInstance(looperThread.getConfiguration());
+        looperThread.keepStrongReference(realm);
         realm.addChangeListener(new RealmChangeListener<DynamicRealm>() {
             @Override
             public void onChange(DynamicRealm object) {
@@ -141,7 +141,7 @@ public void run() {
         final DynamicRealmObject dog = realm.createObject("Dog");
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<DynamicRealmObject>() {
             @Override
             public void onChange(DynamicRealmObject object) {
@@ -159,7 +159,7 @@ public void onChange(DynamicRealmObject object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_copyToRealm() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -181,7 +181,7 @@ public void run() {
         final Dog dog = realm.copyToRealm(akamaru);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<Dog>() {
             @Override
             public void onChange(Dog object) {
@@ -199,7 +199,7 @@ public void onChange(Dog object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_copyToRealmOrUpdate() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -223,7 +223,7 @@ public void run() {
         final PrimaryKeyAsLong primaryKeyAsLong = realm.copyToRealmOrUpdate(obj);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(primaryKeyAsLong);
+        looperThread.keepStrongReference(primaryKeyAsLong);
         primaryKeyAsLong.addChangeListener(new RealmChangeListener<PrimaryKeyAsLong>() {
             @Override
             public void onChange(PrimaryKeyAsLong object) {
@@ -250,7 +250,7 @@ public void onChange(PrimaryKeyAsLong object) {
     public void callback_should_trigger_for_createObjectFromJson() {
         assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
 
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         try {
             InputStream in = TestHelper.loadJsonFromAssets(InstrumentationRegistry.getTargetContext(), "all_simple_types.json");
             realm.beginTransaction();
@@ -258,7 +258,7 @@ public void callback_should_trigger_for_createObjectFromJson() {
             realm.commitTransaction();
             in.close();
 
-            looperThread.keepStrongReference.add(objectFromJson);
+            looperThread.keepStrongReference(objectFromJson);
             objectFromJson.addChangeListener(new RealmChangeListener<AllTypes>() {
                 @Override
                 public void onChange(AllTypes object) {
@@ -285,7 +285,7 @@ public void onChange(AllTypes object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_createObjectFromJson_from_JSONObject() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         try {
             JSONObject json = new JSONObject();
@@ -300,7 +300,7 @@ public void callback_should_trigger_for_createObjectFromJson_from_JSONObject() {
             final AllTypes objectFromJson = realm.createObjectFromJson(AllTypes.class, json);
             realm.commitTransaction();
 
-            looperThread.keepStrongReference.add(objectFromJson);
+            looperThread.keepStrongReference(objectFromJson);
             objectFromJson.addChangeListener(new RealmChangeListener<AllTypes>() {
                 @Override
                 public void onChange(AllTypes object) {
@@ -329,7 +329,7 @@ public void onChange(AllTypes object) {
     public void callback_should_trigger_for_createOrUpdateObjectFromJson() {
         assumeThat(Build.VERSION.SDK_INT, greaterThanOrEqualTo(Build.VERSION_CODES.HONEYCOMB));
 
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -366,7 +366,7 @@ public void run() {
             realm.commitTransaction();
             in.close();
 
-            looperThread.keepStrongReference.add(objectFromJson);
+            looperThread.keepStrongReference(objectFromJson);
             objectFromJson.addChangeListener(new RealmChangeListener<AllTypesPrimaryKey>() {
                 @Override
                 public void onChange(AllTypesPrimaryKey object) {
@@ -395,7 +395,7 @@ public void onChange(AllTypesPrimaryKey object) {
     @Test
     @RunTestInLooperThread
     public void callback_should_trigger_for_createOrUpdateObjectFromJson_from_JSONObject() throws JSONException {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -426,7 +426,7 @@ public void run() {
         final AllTypesPrimaryKey newObj = realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, json);
         realm.commitTransaction();
 
-        looperThread.keepStrongReference.add(newObj);
+        looperThread.keepStrongReference(newObj);
         newObj.addChangeListener(new RealmChangeListener<AllTypesPrimaryKey>() {
             @Override
             public void onChange(AllTypesPrimaryKey object) {
@@ -451,7 +451,7 @@ public void onChange(AllTypesPrimaryKey object) {
     @Test
     @RunTestInLooperThread
     public void callback_with_relevant_commit_realmobject_sync() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         // Step 1: Creates object
         realm.beginTransaction();
@@ -460,7 +460,7 @@ public void callback_with_relevant_commit_realmobject_sync() {
         realm.commitTransaction();
 
         final Dog dog = realm.where(Dog.class).findFirst();
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<Dog>() {
             @Override
             public void onChange(Dog object) {
@@ -491,7 +491,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void callback_with_relevant_commit_realmobject_async() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         // Step 1: Creates object.
         realm.beginTransaction();
@@ -501,7 +501,7 @@ public void callback_with_relevant_commit_realmobject_async() {
 
         final Dog dog = realm.where(Dog.class).findFirstAsync();
 
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<Dog>() {
             @Override
             public void onChange(Dog object) {
@@ -543,7 +543,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void callback_with_relevant_commit_realmresults_sync() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         // Step 1: Creates object.
         realm.beginTransaction();
@@ -552,7 +552,7 @@ public void callback_with_relevant_commit_realmresults_sync() {
         realm.commitTransaction();
 
         final RealmResults<Dog> dogs = realm.where(Dog.class).findAll();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> object) {
@@ -585,7 +585,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void callback_with_relevant_commit_realmresults_async() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         // Step 1: Creates object.
         realm.beginTransaction();
@@ -594,7 +594,7 @@ public void callback_with_relevant_commit_realmresults_async() {
         realm.commitTransaction();
 
         final RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> object) {
@@ -641,7 +641,7 @@ public void execute(Realm realm) {
     @RunTestInLooperThread
     public void multiple_callbacks_should_be_invoked_realmobject_sync() {
         final int NUMBER_OF_LISTENERS = 7;
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -660,7 +660,7 @@ public void run() {
         realm.commitTransaction();
 
         Dog dog = realm.where(Dog.class).findFirst();
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         for (int i = 0; i < NUMBER_OF_LISTENERS; i++) {
             dog.addChangeListener(new RealmChangeListener<Dog>() {
                 @Override
@@ -680,7 +680,7 @@ public void onChange(Dog object) {
     @RunTestInLooperThread
     public void multiple_callbacks_should_be_invoked_realmobject_async() {
         final int NUMBER_OF_LISTENERS = 7;
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         Dog akamaru = realm.createObject(Dog.class);
@@ -688,7 +688,7 @@ public void multiple_callbacks_should_be_invoked_realmobject_async() {
 
         Dog dog = realm.where(Dog.class).findFirstAsync();
         assertTrue(dog.load());
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         for (int i = 0; i < NUMBER_OF_LISTENERS; i++) {
             dog.addChangeListener(new RealmChangeListener<Dog>() {
                 @Override
@@ -719,14 +719,14 @@ public void run() {
     @RunTestInLooperThread
     public void multiple_callbacks_should_be_invoked_realmresults_sync() {
         final int NUMBER_OF_LISTENERS = 7;
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         Dog akamaru = realm.createObject(Dog.class);
         realm.commitTransaction();
 
         RealmResults<Dog> dogs = realm.where(Dog.class).findAll();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         for (int i = 0; i < NUMBER_OF_LISTENERS; i++) {
             dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
                 @Override
@@ -750,7 +750,7 @@ public void onChange(RealmResults<Dog> results) {
     @RunTestInLooperThread
     public void multiple_callbacks_should_be_invoked_realmresults_async() {
         final int NUMBER_OF_LISTENERS = 7;
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         Dog akamaru = realm.createObject(Dog.class);
@@ -772,7 +772,7 @@ public void run() {
         RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
         assertTrue(dogs.load());
 
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         for (int i = 0; i < NUMBER_OF_LISTENERS; i++) {
             dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
                 @Override
@@ -799,14 +799,14 @@ public void onChange(RealmResults<Dog> object) {
     @Test
     @RunTestInLooperThread
     public void non_looper_thread_commit_realmobject_sync() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         realm.createObject(Dog.class);
         realm.commitTransaction();
 
         Dog dog = realm.where(Dog.class).findFirst();
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<Dog>() {
             @Override
             public void onChange(Dog object) {
@@ -830,14 +830,14 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void non_looper_thread_commit_realmobject_async() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
 
         realm.beginTransaction();
         realm.createObject(Dog.class).setAge(1);
         realm.commitTransaction();
 
         Dog dog = realm.where(Dog.class).findFirstAsync();
-        looperThread.keepStrongReference.add(dog);
+        looperThread.keepStrongReference(dog);
         dog.addChangeListener(new RealmChangeListener<Dog>() {
             @Override
             public void onChange(Dog object) {
@@ -869,7 +869,7 @@ public void execute(Realm realm) {
     @Test
     @RunTestInLooperThread
     public void non_looper_thread_commit_realmresults_sync() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -890,7 +890,7 @@ public void run() {
         realm.commitTransaction();
 
         final RealmResults<Dog> dogs = realm.where(Dog.class).findAll();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> object) {
@@ -924,7 +924,7 @@ public void run() {
     @Test
     @RunTestInLooperThread
     public void non_looper_thread_commit_realmresults_async() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.addChangeListener(new RealmChangeListener<Realm>() {
             @Override
             public void onChange(Realm object) {
@@ -956,7 +956,7 @@ public void run() {
         };
 
         final RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> object) {
@@ -1080,7 +1080,7 @@ public void onChange(RealmResults<Dog> object) {
     @Test
     @RunTestInLooperThread
     public void changeListener_onResultsBuiltOnDeletedLinkView() {
-        final Realm realm = looperThread.realm;
+        final Realm realm = looperThread.getRealm();
         realm.beginTransaction();
         AllTypes allTypes = realm.createObject(AllTypes.class);
         for (int i = 0; i < 10; i++) {
@@ -1092,7 +1092,7 @@ public void changeListener_onResultsBuiltOnDeletedLinkView() {
 
         final RealmResults<Dog> dogs =
                 allTypes.getColumnRealmList().where().equalTo(Dog.FIELD_NAME, "name_0").findAll();
-        looperThread.keepStrongReference.add(dogs);
+        looperThread.keepStrongReference(dogs);
         dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
             @Override
             public void onChange(RealmResults<Dog> object) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
index 2592c5f664..83ca6db974 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
@@ -253,7 +253,7 @@ public void addListener_shouldBeCalledToReturnTheQueryResults() {
         Table table = sharedRealm.getTable("test_table");
 
         final Collection collection = new Collection(sharedRealm, table.where());
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addListener(collection, new RealmChangeListener<Collection>() {
             @Override
             public void onChange(Collection collection1) {
@@ -342,7 +342,7 @@ public void addListener_queryNotReturned() {
         Table table = sharedRealm.getTable("test_table");
 
         final Collection collection = new Collection(sharedRealm, table.where());
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addListener(collection, new RealmChangeListener<Collection>() {
             @Override
             public void onChange(Collection collection1) {
@@ -363,7 +363,7 @@ public void addListener_queryReturned() {
         Table table = sharedRealm.getTable("test_table");
 
         final Collection collection = new Collection(sharedRealm, table.where());
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         assertEquals(collection.size(), 4); // Trigger the query to run.
         collection.addListener(collection, new RealmChangeListener<Collection>() {
             @Override
@@ -388,7 +388,7 @@ public void addListener_triggeredByLocalCommit() {
         final AtomicInteger listenerCounter = new AtomicInteger(0);
 
         final Collection collection = new Collection(sharedRealm, table.where());
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         collection.addListener(collection, new RealmChangeListener<Collection>() {
             @Override
             public void onChange(Collection collection1) {
@@ -468,7 +468,7 @@ public void collectionIterator_invalid_looperThread_byRemoteTransaction() {
         Table table = sharedRealm.getTable("test_table");
         final Collection collection = new Collection(sharedRealm, table.where());
         final TestIterator iterator = new TestIterator(collection);
-        looperThread.keepStrongReference.add(collection);
+        looperThread.keepStrongReference(collection);
         assertFalse(iterator.isDetached(sharedRealm));
         collection.addListener(collection, new RealmChangeListener<Collection>() {
             @Override
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
index bbe3cbfa19..e387e92c1f 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java
@@ -75,13 +75,13 @@ public void rowOperationsOnZeroRow(){
 
         Table t = new Table();
         // Removes rows without columns.
-        try { t.remove(0);  fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
-        try { t.remove(10); fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
+        try { t.moveLastOver(0);  fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
+        try { t.moveLastOver(10); fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
 
         // Column added, remove rows again.
         t.addColumn(RealmFieldType.STRING, "");
-        try { t.remove(0);  fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
-        try { t.remove(10); fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
+        try { t.moveLastOver(0);  fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
+        try { t.moveLastOver(10); fail("No rows in table"); } catch (ArrayIndexOutOfBoundsException ignored) {}
 
     }
 
@@ -315,34 +315,6 @@ public void tableNumbers() {
         assertEquals(3000.0f, t.getFloat(2, 5));
     }
 
-    @Test
-    public void maximumDate() {
-
-        Table table = new Table();
-        table.addColumn(RealmFieldType.DATE, "date");
-
-        table.add(new Date(0));
-        table.add(new Date(10000));
-        table.add(new Date(1000));
-
-        assertEquals(new Date(10000), table.maximumDate(0));
-
-    }
-
-    @Test
-    public void minimumDate() {
-
-        Table table = new Table();
-        table.addColumn(RealmFieldType.DATE, "date");
-
-        table.add(new Date(10000));
-        table.add(new Date(0));
-        table.add(new Date(1000));
-
-        assertEquals(new Date(0), table.minimumDate(0));
-
-    }
-
     // Tests the migration of a string column to be nullable.
     @Test
     public void convertToNullable() {
@@ -387,7 +359,7 @@ public void convertToNullable() {
                         }
                     } catch (IllegalArgumentException ignored) {
                     }
-                    table.removeLast();
+                    table.moveLastOver(table.size() - 1);
                     assertEquals(1, table.size());
 
                     table.convertColumnToNullable(colIndex);
@@ -485,7 +457,7 @@ else if (columnType == RealmFieldType.STRING)
                         }
                     } catch (IllegalArgumentException ignored) {
                     }
-                    table.removeLast();
+                    table.moveLastOver(table.size() -1);
                     assertEquals(2, table.size());
 
                     if (columnType == RealmFieldType.BINARY) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java
index 0276a8a432..0516f0e115 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/RealmNotifierTests.java
@@ -85,7 +85,7 @@ public void run() {
     @RunTestInLooperThread
     public void addChangeListener_byLocalChanges() {
         final AtomicBoolean commitReturns = new AtomicBoolean(false);
-        SharedRealm sharedRealm = getSharedRealm(looperThread.realmConfiguration);
+        SharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
         sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<SharedRealm>() {
             @Override
             public void onChange(SharedRealm sharedRealm) {
@@ -121,10 +121,10 @@ public void addChangeListener_byRemoteChanges() {
         final AtomicInteger commitCounter = new AtomicInteger(0);
         final AtomicInteger listenerCounter = new AtomicInteger(0);
 
-        looperThread.realm.close();
+        looperThread.getRealm().close();
 
-        SharedRealm sharedRealm = getSharedRealm(looperThread.realmConfiguration);
-        looperThread.keepStrongReference.add(sharedRealm);
+        SharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
+        looperThread.keepStrongReference(sharedRealm);
         sharedRealm.realmNotifier.addChangeListener(sharedRealm, new RealmChangeListener<SharedRealm>() {
             @Override
             public void onChange(SharedRealm sharedRealm) {
@@ -135,22 +135,22 @@ public void onChange(SharedRealm sharedRealm) {
                     sharedRealm.close();
                     looperThread.testComplete();
                 } else {
-                    makeRemoteChanges(looperThread.realmConfiguration);
+                    makeRemoteChanges(looperThread.getConfiguration());
                     commitCounter.getAndIncrement();
                 }
             }
         });
-        makeRemoteChanges(looperThread.realmConfiguration);
+        makeRemoteChanges(looperThread.getConfiguration());
         commitCounter.getAndIncrement();
     }
 
     @Test
     @RunTestInLooperThread
     public void removeChangeListeners() {
-        SharedRealm sharedRealm = getSharedRealm(looperThread.realmConfiguration);
+        SharedRealm sharedRealm = getSharedRealm(looperThread.getConfiguration());
         Integer dummyObserver = 1;
-        looperThread.keepStrongReference.add(dummyObserver);
-        looperThread.keepStrongReference.add(sharedRealm);
+        looperThread.keepStrongReference(dummyObserver);
+        looperThread.keepStrongReference(sharedRealm);
         sharedRealm.realmNotifier.addChangeListener(dummyObserver, new RealmChangeListener<Integer>() {
             @Override
             public void onChange(Integer dummy) {
@@ -168,6 +168,6 @@ public void onChange(SharedRealm sharedRealm) {
         // This should only remove the listeners related with dummyObserver
         sharedRealm.realmNotifier.removeChangeListeners(dummyObserver);
 
-        makeRemoteChanges(looperThread.realmConfiguration);
+        makeRemoteChanges(looperThread.getConfiguration());
     }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java b/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
index 186040bdec..49d1ececa6 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java
@@ -20,11 +20,12 @@
 import android.os.Looper;
 
 import org.junit.runner.Description;
+import org.junit.runners.model.MultipleFailureException;
 import org.junit.runners.model.Statement;
 
-import java.io.PrintWriter;
-import java.io.StringWriter;
+import java.io.PrintStream;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.UUID;
@@ -38,188 +39,222 @@
 import io.realm.RealmConfiguration;
 import io.realm.TestHelper;
 
-import static org.junit.Assert.fail;
 
 /**
  * Rule that runs the test inside a worker looper thread. This rule is responsible
- * of creating a temp directory containing a Realm instance then delete it, once the test finishes.
- *
+ * of creating a temp directory containing a Realm instance then deleting it, once the test finishes.
+ * <p>
  * All Realms used in a method method annotated with {@code @RunTestInLooperThread } should use
- * {@link RunInLooperThread#createConfiguration()} and friends to create their configurations. Failing to do so can
- * result in the test failing because the Realm could not be deleted (Reason is that {@link TestRealmConfigurationFactory}
- * and this class does not agree in which order to delete all open Realms.
+ * {@link RunInLooperThread#createConfiguration()} and friends to create their configurations.
+ * Failing to do so can result in the test failing because the Realm could not be deleted
+ * (this class and {@link TestRealmConfigurationFactory} do not agree in which order to delete
+ * the open Realms).
  */
 public class RunInLooperThread extends TestRealmConfigurationFactory {
+    private static final long WAIT_TIMEOUT_MS = 60 * 1000;
+
+    // lock protecting objects shared with the test thread
+    private final Object lock = new Object();
+
+    // Thread safe
+    private final CountDownLatch signalTestCompleted = new CountDownLatch(1);
+
+    // Access guarded by 'lock'
+    private RealmConfiguration realmConfiguration;
 
     // Default Realm created by this Rule. It is guaranteed to be closed when the test finishes.
-    public Realm realm;
-    // Custom Realm used by the test. Saving the reference here will guarantee the instance is closed when exiting the test.
-    public List<Realm> testRealms = new ArrayList<Realm>();
-    public RealmConfiguration realmConfiguration;
-    private CountDownLatch signalTestCompleted;
+    // Access guarded by 'lock'
+    private Realm realm;
+
+    // Access guarded by 'lock'
     private Handler backgroundHandler;
 
     // the variables created inside the test are local and eligible for GC.
     // but sometimes we need the variables to survive across different Looper
     // events (Callbacks happening in the future), so we add a strong reference
     // to them for the duration of the test.
-    public LinkedList<Object> keepStrongReference;
+    // Access guarded by 'lock'
+    private LinkedList<Object> keepStrongReference;
 
-    @Override
-    protected void before() throws Throwable {
-        super.before();
-        realmConfiguration = createConfiguration(UUID.randomUUID().toString());
-        signalTestCompleted = new CountDownLatch(1);
-        keepStrongReference = new LinkedList<Object>();
-    }
+    // Custom Realm used by the test. Saving the reference here will guarantee
+    // that the instance is closed when exiting the test.
+    // Access guarded by 'lock'
+    private List<Realm> testRealms;
 
-    @Override
-    protected void after() {
-        super.after();
-        realmConfiguration = null;
-        realm = null;
-        testRealms.clear();
-        keepStrongReference = null;
+    /**
+     * Get the configuration for the test realm.
+     * <p>
+     * Set on main thread, accessed from test thread.
+     * Valid after {@code before}.
+     *
+     * @return the test realm configuration.
+     */
+    public RealmConfiguration getConfiguration() {
+        synchronized (lock) {
+            return realmConfiguration;
+        }
     }
 
-    @Override
-    public Statement apply(final Statement base, Description description) {
-        final RunTestInLooperThread annotation = description.getAnnotation(RunTestInLooperThread.class);
-        if (annotation == null) {
-            return base;
-        }
-        return new Statement() {
-            private Throwable testException;
-
-            @Override
-            @SuppressWarnings({"ClassNewInstance", "Finally"})
-            public void evaluate() throws Throwable {
-                before();
-                final String threadName = annotation.threadName();
-                Class<? extends RunnableBefore> runnableBefore = annotation.before();
-                if (!runnableBefore.isInterface()) {
-                    runnableBefore.newInstance().run(realmConfiguration);
-                }
+    /**
+     * Get the test realm.
+     * <p>
+     * Set on test thread, accessed from main thread.
+     * Valid only after the test thread has started.
+     *
+     * @return the test realm.
+     */
+    public Realm getRealm() {
+        synchronized (lock) {
+            while (backgroundHandler == null) {
                 try {
-                    final CountDownLatch signalClosedRealm = new CountDownLatch(1);
-                    final Throwable[] threadAssertionError = new Throwable[1];
-                    final Looper[] backgroundLooper = new Looper[1];
-                    final ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactory() {
-                        @Override
-                        public Thread newThread(Runnable runnable) {
-                            return new Thread(runnable, threadName);
-                        }
-                    });
-                    //noinspection unused
-                    final Future<?> submit = executorService.submit(new Runnable() {
-                        @Override
-                        public void run() {
-                            Looper.prepare();
-                            backgroundLooper[0] = Looper.myLooper();
-                            backgroundHandler = new Handler(backgroundLooper[0]);
-                            try {
-                                realm = Realm.getInstance(realmConfiguration);
-                                base.evaluate();
-                                Looper.loop();
-                            } catch (Throwable e) {
-                                threadAssertionError[0] = e;
-                                unitTestFailed = true;
-                            } finally {
-                                try {
-                                    looperTearDown();
-                                } catch (Throwable t) {
-                                    if (threadAssertionError[0] == null) {
-                                        threadAssertionError[0] = t;
-                                    }
-                                    unitTestFailed = true;
-                                }
-                                signalTestCompleted.countDown();
-                                if (realm != null) {
-                                    realm.close();
-                                }
-                                if (!testRealms.isEmpty()) {
-                                    for (Realm testRealm : testRealms) {
-                                        testRealm.close();
-                                    }
-                                }
-                                signalClosedRealm.countDown();
-                            }
-                        }
-                    });
-                    TestHelper.exitOrThrow(executorService, signalTestCompleted, signalClosedRealm, backgroundLooper, threadAssertionError);
-                } catch (Throwable error) {
-                    // These exceptions should only come from TestHelper.awaitOrFail()
-                    testException = error;
-                } finally {
-                    // Tries as hard as possible to close down gracefully, while still keeping all exceptions intact.
-                    try {
-                        after();
-                    } catch (Throwable e) {
-                        if (testException != null) {
-                            // Both TestHelper.awaitOrFail() and after() threw an exception. Make sure we are aware of
-                            // that fact by printing both exceptions.
-                            StringWriter testStackTrace = new StringWriter();
-                            testException.printStackTrace(new PrintWriter(testStackTrace));
-
-                            StringWriter afterStackTrace = new StringWriter();
-                            e.printStackTrace(new PrintWriter(afterStackTrace));
-
-                            StringBuilder errorMessage = new StringBuilder()
-                                    .append("after() threw an error that shadows a test case error")
-                                    .append('\n')
-                                    .append("== Test case exception ==\n")
-                                    .append(testStackTrace.toString())
-                                    .append('\n')
-                                    .append("== after() exception ==\n")
-                                    .append(afterStackTrace.toString());
-                            fail(errorMessage.toString());
-                        } else {
-                            // Only after() threw an exception
-                            throw e;
-                        }
-                    }
-
-                    // Only TestHelper.awaitOrFail() threw an exception
-                    if (testException != null) {
-                        //noinspection ThrowFromFinallyBlock
-                        throw testException;
-                    }
+                    lock.wait(WAIT_TIMEOUT_MS);
+                } catch (InterruptedException ignore) {
+                    break;
                 }
             }
-        };
+            return realm;
+        }
     }
 
     /**
-     * Signal that the test has completed.
+     * Hold a reference to an object, to prevent it from being GCed,
+     * until after the test completes.
+     * <p>
+     * Accessed only from the main thread, here, but synchronized in case it is called from within a test.
+     * Valid after {@code before}.
      */
-    public void testComplete() {
-        signalTestCompleted.countDown();
+    public void keepStrongReference(Object obj) {
+        synchronized (lock) {
+            keepStrongReference.add(obj);
+        }
     }
 
     /**
-     * Signal that the test has completed.
-     *
-     * @param latches additional latches to wait before set the test completed flag.
+     * Add a Realm to be closed when test is complete.
+     * <p>
+     * Accessed from both test and main threads.
+     * Valid after {@code before}.
      */
-    public void testComplete(CountDownLatch... latches) {
-        for (CountDownLatch latch : latches) {
-            TestHelper.awaitOrFail(latch);
+    public void addTestRealm(Realm realm) {
+        synchronized (lock) {
+            testRealms.add(realm);
         }
-        signalTestCompleted.countDown();
     }
 
     /**
-     * Posts a runnable to this worker threads looper.
+     * Explicitly close all held realms.
+     * <p>
+     * 'testRealms' is accessed from both test and main threads.
+     * 'testRealms' is valid after {@code before}.
+     */
+    public void closeTestRealms() {
+        List<Realm> realms = new ArrayList<>();
+        synchronized (lock) {
+            List<Realm> tmp = testRealms;
+            testRealms = realms;
+            realms = tmp;
+        }
+
+        for (Realm testRealm : realms) {
+            testRealm.close();
+        }
+    }
+
+    /**
+     * Posts a runnable to the currently running looper.
      */
     public void postRunnable(Runnable runnable) {
-        backgroundHandler.post(runnable);
+        getBackgroundHandler().post(runnable);
     }
 
     /**
      * Posts a runnable to this worker threads looper with a delay in milli second.
      */
     public void postRunnableDelayed(Runnable runnable, long delayMillis) {
-        backgroundHandler.postDelayed(runnable, delayMillis);
+        getBackgroundHandler().postDelayed(runnable, delayMillis);
+    }
+
+    /**
+     * Signal that the test has completed.
+     * <p>
+     * Used on both the main and test threads.
+     * Valid after {@code before}.
+     */
+    public void testComplete() {
+        signalTestCompleted.countDown();
+    }
+
+    /**
+     * Signal that the test has completed, after waiting for any additional latches.
+     *
+     * @param latches additional latches to wait on, before setting the test completed flag.
+     */
+    public void testComplete(CountDownLatch... latches) {
+        for (CountDownLatch latch : latches) {
+            TestHelper.awaitOrFail(latch);
+        }
+        testComplete();
+    }
+
+    // Accessed from both test and main threads
+    // Valid after the test thread has started.
+    private Handler getBackgroundHandler() {
+        synchronized (lock) {
+            while (backgroundHandler == null) {
+                try {
+                    lock.wait(WAIT_TIMEOUT_MS);
+                } catch (InterruptedException ignore) {
+                    break;
+                }
+            }
+            return this.backgroundHandler;
+        }
+    }
+
+    // Accessed from both test and main threads
+    // Storing the handler is the gate that indicates that the test thread has started.
+    void setBackgroundHandler(Handler backgroundHandler) {
+        synchronized (lock) {
+            this.backgroundHandler = backgroundHandler;
+            lock.notifyAll();
+        }
+    }
+
+    @Override
+    protected void before() throws Throwable {
+        super.before();
+
+        RealmConfiguration config = createConfiguration(UUID.randomUUID().toString());
+        LinkedList<Object> refs = new LinkedList<>();
+        List<Realm> realms = new LinkedList<>();
+
+        synchronized (lock) {
+            realmConfiguration = config;
+            realm = null;
+            backgroundHandler = null;
+            keepStrongReference = refs;
+            testRealms = realms;
+        }
+    }
+
+    @Override
+    protected void after() {
+        super.after();
+
+        // probably belt *and* suspenders...
+        synchronized (lock) {
+            backgroundHandler = null;
+            keepStrongReference = null;
+        }
+    }
+
+    @Override
+    public Statement apply(Statement base, Description description) {
+        final RunTestInLooperThread annotation = description.getAnnotation(RunTestInLooperThread.class);
+        if (annotation == null) {
+            return base;
+        }
+        return new RunInLooperThreadStatement(annotation, base);
     }
 
     /**
@@ -229,6 +264,28 @@ public void postRunnableDelayed(Runnable runnable, long delayMillis) {
     public void looperTearDown() {
     }
 
+    private void initRealm() {
+        synchronized (lock) {
+            realm = Realm.getInstance(realmConfiguration);
+        }
+    }
+
+    private void closeRealms() {
+        closeTestRealms();
+
+        Realm oldRealm;
+        synchronized (lock) {
+            oldRealm = realm;
+
+            realm = null;
+            realmConfiguration = null;
+        }
+
+        if (oldRealm != null) {
+            oldRealm.close();
+        }
+    }
+
     /**
      * If an implementation of this is supplied with the annotation, the {@link RunnableBefore#run(RealmConfiguration)}
      * will be executed before the looper thread starts. It is normally for populating the Realm before the test.
@@ -236,4 +293,144 @@ public void looperTearDown() {
     public interface RunnableBefore {
         void run(RealmConfiguration realmConfig);
     }
+
+    private class RunInLooperThreadStatement extends Statement {
+        private final RunTestInLooperThread annotation;
+        private final Statement base;
+
+        RunInLooperThreadStatement(RunTestInLooperThread annotation, Statement base) {
+            this.annotation = annotation;
+            this.base = base;
+        }
+
+        @Override
+        @SuppressWarnings("ClassNewInstance")
+        public void evaluate() throws Throwable {
+            before();
+
+            Class<? extends RunnableBefore> runnableBefore = annotation.before();
+            if (!runnableBefore.isInterface()) {
+                // this is dangerous: newInstance can throw checked exceptions.
+                // this is dangerous: config is mutable.
+                runnableBefore.newInstance().run(getConfiguration());
+            }
+
+            runTest(annotation.threadName());
+        }
+
+        private void runTest(final String threadName) throws Throwable {
+            Throwable failure = null;
+
+            try {
+                ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactory() {
+                    @Override
+                    public Thread newThread(Runnable runnable) { return new Thread(runnable, threadName); }
+                });
+
+                TestThread test = new TestThread(base);
+
+                @SuppressWarnings({"UnusedAssignment", "unused"})
+                Future<?> ignored = executorService.submit(test);
+
+                TestHelper.exitOrThrow(executorService, signalTestCompleted, test);
+            } catch (Throwable testfailure) {
+                // These exceptions should only come from TestHelper.awaitOrFail()
+                failure = testfailure;
+            } finally {
+                // Tries as hard as possible to close down gracefully, while still keeping all exceptions intact.
+                failure = cleanUp(failure);
+            }
+            if (failure != null) {
+                throw failure;
+            }
+        }
+
+        private Throwable cleanUp(Throwable testfailure) {
+            try {
+                after();
+                return testfailure;
+            } catch (Throwable afterFailure) {
+                if (testfailure == null) {
+                    // Only after() threw an exception
+                    return afterFailure;
+                }
+
+                // Both TestHelper.awaitOrFail() and after() threw exceptions
+                return new MultipleFailureException(Arrays.asList(testfailure, afterFailure)) {
+                    @Override
+                    public void printStackTrace(PrintStream out) {
+                        int i = 0;
+                        for (Throwable t : getFailures()) {
+                            out.println("Error " + i + ": " + t.getMessage());
+                            t.printStackTrace(out);
+                            out.println();
+                            i++;
+                        }
+                    }
+                };
+            }
+        }
+    }
+
+    private class TestThread implements Runnable, TestHelper.LooperTest {
+        private final CountDownLatch signalClosedRealm = new CountDownLatch(1);
+        private final Statement base;
+        private Looper looper;
+        private Throwable threadAssertionError;
+
+        TestThread(Statement base) {
+            this.base = base;
+        }
+
+        @Override
+        public CountDownLatch getRealmClosedSignal() {
+            return signalClosedRealm;
+        }
+
+        @Override
+        public synchronized Looper getLooper() {
+            return looper;
+        }
+
+        private synchronized void setLooper(Looper looper) {
+            this.looper = looper;
+            setBackgroundHandler(new Handler(looper));
+        }
+
+        @Override
+        public synchronized Throwable getAssertionError() {
+            return threadAssertionError;
+        }
+
+        // Only record the first error
+        private synchronized void setAssertionError(Throwable threadAssertionError) {
+            if (this.threadAssertionError == null) {
+                this.threadAssertionError = threadAssertionError;
+            }
+        }
+
+        @Override
+        public void run() {
+            Looper.prepare();
+            try {
+                initRealm();
+                setLooper(Looper.myLooper());
+                base.evaluate();
+                Looper.loop();
+            } catch (Throwable t) {
+                setAssertionError(t);
+                setUnitTestFailed();
+            } finally {
+                try {
+                    looperTearDown();
+                } catch (Throwable t) {
+                    setAssertionError(t);
+                    setUnitTestFailed();
+                }
+                testComplete();
+                closeRealms();
+                signalClosedRealm.countDown();
+            }
+        }
+    }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java b/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
index 979717e96a..04bc9a4f6d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java
@@ -51,7 +51,8 @@
 public class TestRealmConfigurationFactory extends TemporaryFolder {
     private final Map<RealmConfiguration, Boolean> map = new ConcurrentHashMap<RealmConfiguration, Boolean>();
     private final Set<RealmConfiguration> configurations = Collections.newSetFromMap(map);
-    protected boolean unitTestFailed = false;
+
+    private boolean unitTestFailed = false;
 
     @Override
     public Statement apply(final Statement base, Description description) {
@@ -62,7 +63,7 @@ public void evaluate() throws Throwable {
                 try {
                     base.evaluate();
                 } catch (Throwable throwable) {
-                    unitTestFailed = true;
+                    setUnitTestFailed();
                     throw throwable;
                 } finally {
                     after();
@@ -89,7 +90,7 @@ protected void after() {
             }
         } catch (IllegalStateException e) {
             // Only throws the exception caused by deleting the opened Realm if the test case itself doesn't throw.
-            if (!unitTestFailed) {
+            if (!isUnitTestFailed()) {
                 throw e;
             }
         } finally {
@@ -98,6 +99,14 @@ protected void after() {
         }
     }
 
+    public synchronized void setUnitTestFailed() {
+        this.unitTestFailed = true;
+    }
+
+    private synchronized boolean isUnitTestFailed() {
+        return this.unitTestFailed;
+    }
+
     // This builder creates a configuration that is *NOT* managed.
     // You have to delete it yourself.
     public RealmConfiguration.Builder createConfigurationBuilder() {
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
index a360d94fed..d5c949a1bf 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
@@ -88,7 +88,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                 .build();
 
         Realm realm = Realm.getInstance(config);
-        looperThread.testRealms.add(realm);
+        looperThread.addTestRealm(realm);
 
         // Trigger error
         SyncManager.simulateClientReset(SyncManager.getSession(config));
@@ -117,7 +117,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                         }
 
                         // Execute Client Reset
-                        looperThread.testRealms.get(0).close();
+                        looperThread.closeTestRealms();
                         handler.executeClientReset();
 
                         // Validate that files have been moved
@@ -129,10 +129,9 @@ public void onError(SyncSession session, ObjectServerError error) {
                 .build();
 
         Realm realm = Realm.getInstance(config);
-        looperThread.testRealms.add(realm);
+        looperThread.addTestRealm(realm);
 
         // Trigger error
         SyncManager.simulateClientReset(SyncManager.getSession(config));
     }
-
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
index 42bd1567e8..2a2c339ebc 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
@@ -497,29 +497,6 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeAddEmptyRow(JNIEnv* e
     return 0;
 }
 
-JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeRemove(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                 jlong rowIndex)
-{
-    if (!TBL_AND_ROW_INDEX_VALID(env, TBL(nativeTablePtr), rowIndex)) {
-        return;
-    }
-    try {
-        TBL(nativeTablePtr)->remove(S(rowIndex));
-    }
-    CATCH_STD()
-}
-
-JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeRemoveLast(JNIEnv* env, jobject, jlong nativeTablePtr)
-{
-    if (!TABLE_VALID(env, TBL(nativeTablePtr))) {
-        return;
-    }
-    try {
-        TBL(nativeTablePtr)->remove_last();
-    }
-    CATCH_STD()
-}
-
 JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeMoveLastOver(JNIEnv* env, jobject, jlong nativeTablePtr,
                                                                        jlong rowIndex)
 {
@@ -956,198 +933,6 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeNullifyLink(JNIEnv* en
     CATCH_STD()
 }
 
-//---------------------- Aggregate methods for integers
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeSumInt(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                  jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Int)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->sum_int(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMaximumInt(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                      jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Int)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->maximum_int(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMinimumInt(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                      jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Int)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->minimum_int(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeAverageInt(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                        jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Int)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->average_int(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-//--------------------- Aggregate methods for float
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeSumFloat(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                      jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Float)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->sum_float(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jfloat JNICALL Java_io_realm_internal_Table_nativeMaximumFloat(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                         jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Float)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->maximum_float(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jfloat JNICALL Java_io_realm_internal_Table_nativeMinimumFloat(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                         jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Float)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->minimum_float(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeAverageFloat(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                          jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Float)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->average_float(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-
-//--------------------- Aggregate methods for double
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeSumDouble(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                       jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Double)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->sum_double(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeMaximumDouble(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                           jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Double)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->maximum_double(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeMinimumDouble(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                           jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Double)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->minimum_double(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jdouble JNICALL Java_io_realm_internal_Table_nativeAverageDouble(JNIEnv* env, jobject, jlong nativeTablePtr,
-                                                                           jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Double)) {
-        return 0;
-    }
-    try {
-        return TBL(nativeTablePtr)->average_double(S(columnIndex));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-
-//--------------------- Aggregate methods for date
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMaximumTimestamp(JNIEnv* env, jobject,
-                                                                            jlong nativeTablePtr, jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Timestamp)) {
-        return 0;
-    }
-    try {
-        return to_milliseconds(TBL(nativeTablePtr)->maximum_timestamp(S(columnIndex)));
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeMinimumTimestamp(JNIEnv* env, jobject,
-                                                                            jlong nativeTablePtr, jlong columnIndex)
-{
-    if (!TBL_AND_COL_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, type_Timestamp)) {
-        return 0;
-    }
-    try {
-        return to_milliseconds(TBL(nativeTablePtr)->minimum_timestamp(S(columnIndex)));
-    }
-    CATCH_STD()
-    return 0;
-}
-
 //---------------------- Count
 
 JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeCountLong(JNIEnv* env, jobject, jlong nativeTablePtr,
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index b985fb9031..c57121d600 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -20,6 +20,7 @@
 import android.app.IntentService;
 import android.content.Context;
 import android.os.Build;
+import android.os.SystemClock;
 import android.util.JsonReader;
 
 import org.json.JSONArray;
@@ -179,6 +180,7 @@
      *
      * @param context the Application Context.
      * @throws IllegalArgumentException if a {@code null} context is provided.
+     * @throws IllegalStateException if {@link Context#getFilesDir()} could not be found.
      * @see #getDefaultInstance()
      */
     public static synchronized void init(Context context) {
@@ -186,6 +188,7 @@ public static synchronized void init(Context context) {
             if (context == null) {
                 throw new IllegalArgumentException("Non-null context required.");
             }
+            checkFilesDirAvailable(context);
             RealmCore.loadLibrary(context);
             defaultConfiguration = new RealmConfiguration.Builder(context).build();
             ObjectServerFacade.getSyncFacadeIfPossible().init(context);
@@ -194,6 +197,58 @@ public static synchronized void init(Context context) {
         }
     }
 
+    /**
+     * In some cases, Context.getFilesDir() is not available when the app launches the first time.
+     * This should never happen according to the official Android documentation, but the race condition wasn't fixed
+     * until Android 4.4.
+     * <p>
+     * This method attempts to fix that situation. If this doesn't work an {@link IllegalStateException} will be
+     * thrown.
+     * <p>
+     * See these links for further details:
+     * https://issuetracker.google.com/issues/36918154
+     * https://github.com/realm/realm-java/issues/4493#issuecomment-295349044
+     */
+    private static void checkFilesDirAvailable(Context context) {
+        File filesDir = context.getFilesDir();
+        if (filesDir != null) {
+            if (filesDir.exists()) {
+                return; // Everything is fine. Escape as soon as possible
+            } else {
+                try {
+                    // This was reported as working on some devices, which I really hope is just the race condition
+                    // kicking in, otherwise something is seriously wrong with the permission system on those devices.
+                    // We will try it anyway, since starting a loop will be slower by many magnitudes.
+                    filesDir.mkdirs();
+                } catch (SecurityException ignored) {
+                }
+            }
+        }
+        if (filesDir == null || !filesDir.exists()) {
+            // Wait a "reasonable" amount of time before quitting.
+            // In this case we define reasonable as 200 ms (~12 dropped frames) before giving up (which most likely
+            // will result in the app crashing). This lag would only be seen in worst case scenarios, and then, only
+            // when the app is started the first time.
+            long[] timeoutsMs = new long[]{1, 2, 5, 10, 16}; // Exponential waits, capped at 16 ms;
+            long maxTotalWaitMs = 200;
+            long currentTotalWaitMs = 0;
+            int waitIndex = -1;
+            while (context.getFilesDir() == null || !context.getFilesDir().exists()) {
+                long waitMs = timeoutsMs[Math.min(++waitIndex, timeoutsMs.length - 1)];
+                SystemClock.sleep(waitMs);
+                currentTotalWaitMs += waitMs;
+                if (currentTotalWaitMs > maxTotalWaitMs) {
+                    break;
+                }
+            }
+        }
+
+        // One final check before giving up
+        if (context.getFilesDir() == null || !context.getFilesDir().exists()) {
+            throw new IllegalStateException("Context.getFilesDir() returns " + context.getFilesDir() + " which is not an existing directory. See https://issuetracker.google.com/issues/36918154");
+        }
+    }
+
     /**
      * Realm static constructor that returns the Realm instance defined by the {@link io.realm.RealmConfiguration} set
      * by {@link #setDefaultConfiguration(RealmConfiguration)}
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 8afbdcaea6..e9fbfdd5cb 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -185,7 +185,7 @@ public boolean isValid() {
         if (linkView != null) {
             return linkView.isAttached();
         }
-        return table != null && table.getTable().isValid();
+        return table != null && table.isValid();
     }
 
     /**
@@ -1577,7 +1577,7 @@ public boolean isValid() {
 
         fieldNames[0] = firstFieldName;
         System.arraycopy(remainingFieldNames, 0, fieldNames, 1, remainingFieldNames.length);
-        SortDescriptor distinctDescriptor = SortDescriptor.getInstanceForDistinct(table.getTable(), fieldNames);
+        SortDescriptor distinctDescriptor = SortDescriptor.getInstanceForDistinct(table, fieldNames);
         return createRealmResults(query, null, distinctDescriptor, true);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index 707272d4cd..20430bf48b 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -102,10 +102,6 @@ public long getNativeFinalizerPtr() {
         return nativeFinalizerPtr;
     }
 
-    public Table getTable() {
-        return this;
-    }
-
     public long getNativeTablePointer() {
         return nativePtr;
     }
@@ -343,27 +339,12 @@ public RealmFieldType getColumnType(long columnIndex) {
         return RealmFieldType.fromNativeValue(nativeGetColumnType(nativePtr, columnIndex));
     }
 
-
     /**
-     * Removes a row from the specific index. As of now the entry is simply removed from the table.
+     * Removes a row from the specific index. If it is not the last row in the table, it then moves the last row into
+     * the vacated slot.
      *
      * @param rowIndex the row index (starting with 0)
      */
-    public void remove(long rowIndex) {
-        checkImmutable();
-        nativeRemove(nativePtr, rowIndex);
-    }
-
-    public void removeFirst() {
-        checkImmutable();
-        remove(0);
-    }
-
-    public void removeLast() {
-        checkImmutable();
-        nativeRemoveLast(nativePtr);
-    }
-
     public void moveLastOver(long rowIndex) {
         checkImmutable();
         nativeMoveLastOver(nativePtr, rowIndex);
@@ -714,8 +695,7 @@ public long getLink(long columnIndex, long rowIndex) {
     public Table getLinkTarget(long columnIndex) {
         long nativeTablePointer = nativeGetLinkTarget(nativePtr, columnIndex);
         // Copies context reference from parent.
-        Table table = new Table(this.sharedRealm, nativeTablePointer);
-        return table;
+        return new Table(this.sharedRealm, nativeTablePointer);
     }
 
     public boolean isNull(long columnIndex, long rowIndex) {
@@ -931,71 +911,6 @@ private void checkHasPrimaryKey() {
         }
     }
 
-    //
-    // Aggregate functions
-    //
-
-    // Integers
-    public long sumLong(long columnIndex) {
-        return nativeSumInt(nativePtr, columnIndex);
-    }
-
-    public Long maximumLong(long columnIndex) {
-        return nativeMaximumInt(nativePtr, columnIndex);
-    }
-
-    public Long minimumLong(long columnIndex) {
-        return nativeMinimumInt(nativePtr, columnIndex);
-    }
-
-    public double averageLong(long columnIndex) {
-        return nativeAverageInt(nativePtr, columnIndex);
-    }
-
-    // Floats
-    public double sumFloat(long columnIndex) {
-        return nativeSumFloat(nativePtr, columnIndex);
-    }
-
-    public Float maximumFloat(long columnIndex) {
-        return nativeMaximumFloat(nativePtr, columnIndex);
-    }
-
-    public Float minimumFloat(long columnIndex) {
-        return nativeMinimumFloat(nativePtr, columnIndex);
-    }
-
-    public double averageFloat(long columnIndex) {
-        return nativeAverageFloat(nativePtr, columnIndex);
-    }
-
-    // Doubles
-    public double sumDouble(long columnIndex) {
-        return nativeSumDouble(nativePtr, columnIndex);
-    }
-
-    public Double maximumDouble(long columnIndex) {
-        return nativeMaximumDouble(nativePtr, columnIndex);
-    }
-
-    public Double minimumDouble(long columnIndex) {
-        return nativeMinimumDouble(nativePtr, columnIndex);
-    }
-
-    public double averageDouble(long columnIndex) {
-        return nativeAverageDouble(nativePtr, columnIndex);
-    }
-
-    // Date aggregates
-
-    public Date maximumDate(long columnIndex) {
-        return new Date(nativeMaximumTimestamp(nativePtr, columnIndex));
-    }
-
-    public Date minimumDate(long columnIndex) {
-        return new Date(nativeMinimumTimestamp(nativePtr, columnIndex));
-    }
-
     //
     // Count
     //
@@ -1206,10 +1121,6 @@ public static String tableNameToClassName(String tableName) {
 
     private native int nativeGetColumnType(long nativeTablePtr, long columnIndex);
 
-    private native void nativeRemove(long nativeTablePtr, long rowIndex);
-
-    private native void nativeRemoveLast(long nativeTablePtr);
-
     private native void nativeMoveLastOver(long nativeTablePtr, long rowIndex);
 
     public static native long nativeAddEmptyRow(long nativeTablePtr, long rows);
@@ -1281,34 +1192,6 @@ public static String tableNameToClassName(String tableName) {
 
     public static native void nativeNullifyLink(long nativePtr, long columnIndex, long rowIndex);
 
-    private native long nativeSumInt(long nativePtr, long columnIndex);
-
-    private native long nativeMaximumInt(long nativePtr, long columnIndex);
-
-    private native long nativeMinimumInt(long nativePtr, long columnIndex);
-
-    private native double nativeAverageInt(long nativePtr, long columnIndex);
-
-    private native double nativeSumFloat(long nativePtr, long columnIndex);
-
-    private native float nativeMaximumFloat(long nativePtr, long columnIndex);
-
-    private native float nativeMinimumFloat(long nativePtr, long columnIndex);
-
-    private native double nativeAverageFloat(long nativePtr, long columnIndex);
-
-    private native double nativeSumDouble(long nativePtr, long columnIndex);
-
-    private native double nativeMaximumDouble(long nativePtr, long columnIndex);
-
-    private native double nativeMinimumDouble(long nativePtr, long columnIndex);
-
-    private native double nativeAverageDouble(long nativePtr, long columnIndex);
-
-    private native long nativeMaximumTimestamp(long nativePtr, long columnIndex);
-
-    private native long nativeMinimumTimestamp(long nativePtr, long columnIndex);
-
     private native long nativeCountLong(long nativePtr, long columnIndex, long value);
 
     private native long nativeCountFloat(long nativePtr, long columnIndex, float value);
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index 9590f702f2..e2eb671721 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -60,7 +60,6 @@
  *
  * <ul>
  *     <li>{@code deleteRealmIfMigrationNeeded()}</li>
- *     <li>{@code schemaVersion(long version)}</li>
  *     <li>{@code migration(Migration)}</li>
  * </ul>
  *
@@ -464,8 +463,25 @@ public Builder encryptionKey(byte[] key) {
         }
 
         /**
-         * Sets the schema version of the Realm. This must be equal to or higher than the schema version of the existing
-         * Realm file, if any. If the schema version is higher than the already existing Realm, a migration is needed.
+         * Sets the schema version of the Realm.
+         * <p>
+         * While synced Realms only support additive schema changes which can be applied without requiring a manual
+         * migration, the schema version must still be incremented as an indication to Realm that the change was
+         * intentional.
+         * <p>
+         * Failing to increment the schema version will cause Realm to throw a {@link io.realm.exceptions.RealmMigrationNeededException}
+         * when the Realm is opened and the changed schema will not be applied.
+         * <p>
+         * <b>WARNING:</b> There is no guarantee that the value inserted here is the same returned by {@link Realm#getVersion()}.
+         * Due to the nature of synced Realms, the value can both be higher and lower.
+         * <ul>
+         *     <li>It will be lower if another client with a lesser {@code schemaVersion} connected to the server for
+         *         the first time after this schemaVersion was used.
+     *         </li>
+         *     <li>It will be higher if another client with a higher {@code schemaVersion} connected to the server after
+         *         this Realm was created.
+     *         </li>
+         * </ul>
          *
          * @param schemaVersion the schema version.
          * @throws IllegalArgumentException if schema version is invalid.
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
index 6ebb8efed5..354e365a09 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/AuthTests.java
@@ -106,7 +106,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                         .build();
 
                 final Realm realm = Realm.getInstance(config);
-                looperThread.testRealms.add(realm);
+                looperThread.addTestRealm(realm);
 
                 // FIXME: Right now we have no Java API for detecting when a session is established
                 // So we optimistically assume it has been connected after 1 second.
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java
index f78c34acfe..0ad9688104 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ManagementRealmTests.java
@@ -69,7 +69,7 @@ public void onError(SyncSession session, ObjectServerError error) {
                 })
                 .build();
         final Realm realm1 = Realm.getInstance(config1);
-        looperThread.testRealms.add(realm1);
+        looperThread.addTestRealm(realm1);
         realm1.executeTransactionAsync(new Realm.Transaction() {
             @Override
             public void execute(Realm realm) {
@@ -83,7 +83,7 @@ public void execute(Realm realm) {
         // 3. Create PermissionOffer
         final AtomicReference<String> offerId = new AtomicReference<String>(null);
         final Realm user1ManagementRealm = user1.getManagementRealm();
-        looperThread.testRealms.add(user1ManagementRealm);
+        looperThread.addTestRealm(user1ManagementRealm);
         user1ManagementRealm.executeTransactionAsync(new Realm.Transaction() {
             @Override
             public void execute(Realm realm) {
@@ -103,7 +103,7 @@ public void onSuccess() {
                 RealmResults<PermissionOffer> offers = user1ManagementRealm.where(PermissionOffer.class)
                         .equalTo("id", offerId.get())
                         .findAllAsync();
-                looperThread.keepStrongReference.add(offers);
+                looperThread.keepStrongReference(offers);
                 offers.addChangeListener(new RealmChangeListener<RealmResults<PermissionOffer>>() {
                     @Override
                     public void onChange(RealmResults<PermissionOffer> offers) {
@@ -113,7 +113,7 @@ public void onChange(RealmResults<PermissionOffer> offers) {
                             final String offerToken = offer.getToken();
                             final AtomicReference<String> offerResponseId = new AtomicReference<String>();
                             final Realm user2ManagementRealm = user2.getManagementRealm();
-                            looperThread.testRealms.add(user2ManagementRealm);
+                            looperThread.addTestRealm(user2ManagementRealm);
                             user2ManagementRealm.executeTransactionAsync(new Realm.Transaction() {
                                 @Override
                                 public void execute(Realm realm) {
@@ -128,7 +128,7 @@ public void onSuccess() {
                                     RealmResults<PermissionOfferResponse> responses = user2ManagementRealm.where(PermissionOfferResponse.class)
                                             .equalTo("id", offerResponseId.get())
                                             .findAllAsync();
-                                    looperThread.keepStrongReference.add(responses);
+                                    looperThread.keepStrongReference(responses);
                                     responses.addChangeListener(new RealmChangeListener<RealmResults<PermissionOfferResponse>>() {
                                         @Override
                                         public void onChange(RealmResults<PermissionOfferResponse> responses) {
@@ -136,9 +136,9 @@ public void onChange(RealmResults<PermissionOfferResponse> responses) {
                                             if (response != null && response.isSuccessful() && response.getToken().equals(offerToken)) {
                                                 // 7. Response accepted. It should now be possible for user2 to access user1's Realm
                                                 Realm realm = Realm.getInstance(config2);
-                                                looperThread.testRealms.add(realm);
+                                                looperThread.addTestRealm(realm);
                                                 RealmResults<Dog> dogs = realm.where(Dog.class).findAll();
-                                                looperThread.keepStrongReference.add(dogs);
+                                                looperThread.keepStrongReference(dogs);
                                                 dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
                                                     @Override
                                                     public void onChange(RealmResults<Dog> element) {
