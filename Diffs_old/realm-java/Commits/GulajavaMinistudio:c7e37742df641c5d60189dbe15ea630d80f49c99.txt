diff --git a/CHANGELOG.md b/CHANGELOG.md
index fa43c077b6..ed8f924c24 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,9 @@
+## 3.3.0
+
+### Enhancements
+
+* [ObjectServer] Added two options to `SyncConfiguration` to provide a trusted root CA `trustedRootCA` and to disable SSL validation `disableSSLVerification` (#4371).
+
 ## 3.2.1 (2017-05-19)
 
 ### Deprecated
@@ -8,8 +14,8 @@
 
 ### Bug Fixes
 
-* [ObjectServer] `schemaVersion` was mistakenly required in order to trigger migrations (#4658). 
-* [ObjectServer] Fields removed from model classes will now correctly be hidden instead of throwing an exception when opening the Realm (#4658). 
+* [ObjectServer] `schemaVersion` was mistakenly required in order to trigger migrations (#4658).
+* [ObjectServer] Fields removed from model classes will now correctly be hidden instead of throwing an exception when opening the Realm (#4658).
 * Fixed random crashes which were caused by a race condition in encrypted Realm (#4343).
 
 ### Internal
diff --git a/Jenkinsfile b/Jenkinsfile
index f8d9f2dccd..67632e3e81 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -136,7 +136,7 @@ try {
 }
 
 def forwardAdbPorts() {
-  sh ''' adb reverse tcp:9080 tcp:9080 &&
+  sh ''' adb reverse tcp:9080 tcp:9080 && adb reverse tcp:9443 tcp:9443 &&
       adb reverse tcp:8888 tcp:8888
   '''
 }
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index e27f97fb91..a948d97b99 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -84,6 +84,7 @@ android {
         }
         androidTestObjectServer {
             java.srcDirs += 'src/syncIntegrationTest/java'
+            assets.srcDirs += ['src/syncIntegrationTest/assets/']
         }
     }
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
index 2d50dacb12..c4ebe934fd 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java
@@ -20,7 +20,6 @@
 import android.os.Build;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
-import android.text.TextUtils;
 import android.util.Base64;
 
 import com.google.gson.internal.bind.util.ISO8601Utils;
@@ -54,6 +53,7 @@
 import io.realm.entities.OwnerPrimaryKey;
 import io.realm.entities.RandomPrimaryKey;
 import io.realm.exceptions.RealmException;
+import io.realm.internal.Util;
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static io.realm.internal.test.ExtraTests.assertArrayEquals;
@@ -391,7 +391,7 @@ public void createFromJson_respectDefaultValues() throws JSONException {
         assertEquals(DefaultValueOfField.FIELD_IGNORED_DEFAULT_VALUE,
                 managedObj.getFieldIgnored());
         assertEquals(DefaultValueOfField.FIELD_STRING_DEFAULT_VALUE, managedObj.getFieldString());
-        assertFalse(TextUtils.isEmpty(managedObj.getFieldRandomString()));
+        assertFalse(Util.isEmptyString(managedObj.getFieldRandomString()));
         assertEquals(DefaultValueOfField.FIELD_SHORT_DEFAULT_VALUE, managedObj.getFieldShort());
         assertEquals(DefaultValueOfField.FIELD_INT_DEFAULT_VALUE, managedObj.getFieldInt());
         assertEquals(fieldLongPrimaryKeyValue, managedObj.getFieldLongPrimaryKey());
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
index 09af1fe85e..9cd68e3eb6 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
@@ -71,7 +71,9 @@ class JniConfigWrapper {
     // Sync constructor
     JniConfigWrapper(REALM_UNUSED JNIEnv* env, REALM_UNUSED Realm::Config& config,
                      REALM_UNUSED jstring sync_realm_url, REALM_UNUSED jstring sync_realm_auth_url,
-                     REALM_UNUSED jstring sync_user_identity, REALM_UNUSED jstring sync_refresh_token)
+                     REALM_UNUSED jstring sync_user_identity, REALM_UNUSED jstring sync_refresh_token,
+                     REALM_UNUSED jboolean sync_client_validate_ssl,
+                     REALM_UNUSED jstring sync_ssl_trust_certificate_path)
         : m_config(std::move(config))
     {
 #if REALM_ENABLE_SYNC
@@ -130,8 +132,17 @@ class JniConfigWrapper {
             user = SyncManager::shared().get_user(user_identity, refresh_token,
                                                   realm::util::Optional<std::string>(realm_auth_url));
         }
+
+        util::Optional<std::string> ssl_trust_certificate_path = util::none;
+        if (sync_ssl_trust_certificate_path) {
+            ssl_trust_certificate_path =
+                realm::util::Optional<std::string>(JStringAccessor(env, sync_ssl_trust_certificate_path));
+        }
         m_config.sync_config = std::make_shared<SyncConfig>(SyncConfig{
-            user, realm_url, SyncSessionStopPolicy::Immediately, std::move(bind_handler), std::move(error_handler)});
+            user, realm_url, SyncSessionStopPolicy::Immediately, std::move(bind_handler), std::move(error_handler),
+            nullptr, util::none, sync_client_validate_ssl, ssl_trust_certificate_path});
+
+
 #else
         REALM_UNREACHABLE();
 #endif
@@ -166,7 +177,8 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateConfig(
     JNIEnv* env, jclass, jstring realm_path, jbyteArray key, jbyte schema_mode, jboolean in_memory, jboolean cache,
     jlong /* schema_version */, jboolean enable_format_upgrade, jboolean auto_change_notification,
     REALM_UNUSED jstring sync_server_url, REALM_UNUSED jstring sync_server_auth_url,
-    REALM_UNUSED jstring sync_user_identity, REALM_UNUSED jstring sync_refresh_token)
+    REALM_UNUSED jstring sync_user_identity, REALM_UNUSED jstring sync_refresh_token,
+    REALM_UNUSED jboolean sync_client_validate_ssl, REALM_UNUSED jstring sync_ssl_trust_certificate_path)
 {
     TR_ENTER()
 
@@ -183,8 +195,9 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_SharedRealm_nativeCreateConfig(
         config.disable_format_upgrade = !enable_format_upgrade;
         config.automatic_change_notifications = auto_change_notification;
         if (sync_server_url) {
-            return reinterpret_cast<jlong>(new JniConfigWrapper(env, config, sync_server_url, sync_server_auth_url,
-                                                                sync_user_identity, sync_refresh_token));
+            return reinterpret_cast<jlong>(
+                new JniConfigWrapper(env, config, sync_server_url, sync_server_auth_url, sync_user_identity,
+                                     sync_refresh_token, sync_client_validate_ssl, sync_ssl_trust_certificate_path));
         }
         else {
             return reinterpret_cast<jlong>(new JniConfigWrapper(env, config));
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index 4330f13eed..e042929128 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit 4330f13eedfad4f34bcecdca25f71fb949fbc4b2
+Subproject commit e0429291287eb7202a9edb93a80a5a1cd7e5d20f
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCache.java b/realm/realm-library/src/main/java/io/realm/RealmCache.java
index fcd0145c9b..0b06a24e31 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCache.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCache.java
@@ -39,6 +39,7 @@
 import io.realm.internal.RealmNotifier;
 import io.realm.internal.SharedRealm;
 import io.realm.internal.Table;
+import io.realm.internal.Util;
 import io.realm.internal.android.AndroidCapabilities;
 import io.realm.internal.android.AndroidRealmNotifier;
 import io.realm.internal.async.RealmAsyncTaskImpl;
@@ -527,55 +528,69 @@ synchronized void invokeWithLock(Callback0 callback) {
      * @throws RealmFileException if copying the file fails.
      */
     private static void copyAssetFileIfNeeded(RealmConfiguration configuration) {
-        IOException exceptionWhenClose = null;
         if (configuration.hasAssetFile()) {
             File realmFile = new File(configuration.getRealmDirectory(), configuration.getRealmFileName());
-            if (realmFile.exists()) {
-                return;
-            }
 
-            InputStream inputStream = null;
-            FileOutputStream outputStream = null;
-            try {
-                inputStream = configuration.getAssetFile();
-                if (inputStream == null) {
-                    throw new RealmFileException(RealmFileException.Kind.ACCESS_ERROR,
-                            "Invalid input stream to asset file.");
-                }
+            copyFileIfNeeded(configuration.getAssetFilePath(), realmFile);
+        }
 
-                outputStream = new FileOutputStream(realmFile);
-                byte[] buf = new byte[4096];
-                int bytesRead;
-                while ((bytesRead = inputStream.read(buf)) > -1) {
-                    outputStream.write(buf, 0, bytesRead);
-                }
-            } catch (IOException e) {
+        // Copy Sync Server certificate path if available
+        String syncServerCertificateAssetName = ObjectServerFacade.getFacade(configuration.isSyncConfiguration()).getSyncServerCertificateAssetName(configuration);
+        if (!Util.isEmptyString(syncServerCertificateAssetName)) {
+            String syncServerCertificateFilePath = ObjectServerFacade.getFacade(configuration.isSyncConfiguration()).getSyncServerCertificateFilePath(configuration);
+
+            File certificateFile = new File(syncServerCertificateFilePath);
+            copyFileIfNeeded(syncServerCertificateAssetName, certificateFile);
+        }
+    }
+
+    private static void copyFileIfNeeded(String assetFileName, File file) {
+        if (file.exists()) {
+            return;
+        }
+
+        IOException exceptionWhenClose = null;
+        InputStream inputStream = null;
+        FileOutputStream outputStream = null;
+        try {
+            inputStream = BaseRealm.applicationContext.getAssets().open(assetFileName);
+            if (inputStream == null) {
                 throw new RealmFileException(RealmFileException.Kind.ACCESS_ERROR,
-                        "Could not resolve the path to the Realm asset file.", e);
-            } finally {
-                if (inputStream != null) {
-                    try {
-                        inputStream.close();
-                    } catch (IOException e) {
-                        exceptionWhenClose = e;
-                    }
+                        "Invalid input stream to the asset file: " + assetFileName);
+            }
+
+            outputStream = new FileOutputStream(file);
+            byte[] buf = new byte[4096];
+            int bytesRead;
+            while ((bytesRead = inputStream.read(buf)) > -1) {
+                outputStream.write(buf, 0, bytesRead);
+            }
+        } catch (IOException e) {
+            throw new RealmFileException(RealmFileException.Kind.ACCESS_ERROR,
+                    "Could not resolve the path to the asset file: " + assetFileName, e);
+        } finally {
+            if (inputStream != null) {
+                try {
+                    inputStream.close();
+                } catch (IOException e) {
+                    exceptionWhenClose = e;
                 }
-                if (outputStream != null) {
-                    try {
-                        outputStream.close();
-                    } catch (IOException e) {
-                        // Ignores this one if there was an exception when close inputStream.
-                        if (exceptionWhenClose == null) {
-                            exceptionWhenClose = e;
-                        }
+            }
+            if (outputStream != null) {
+                try {
+                    outputStream.close();
+                } catch (IOException e) {
+                    // Ignores this one if there was an exception when close inputStream.
+                    if (exceptionWhenClose == null) {
+                        exceptionWhenClose = e;
                     }
                 }
             }
+        }
 
-            // No other exception has been thrown, only the exception when close. So, throw it.
-            if (exceptionWhenClose != null) {
-                throw new RealmFileException(RealmFileException.Kind.ACCESS_ERROR, exceptionWhenClose);
-            }
+        // No other exception has been thrown, only the exception when close. So, throw it.
+        if (exceptionWhenClose != null) {
+            throw new RealmFileException(RealmFileException.Kind.ACCESS_ERROR, exceptionWhenClose);
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
index c12980872f..55a3f7c47e 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmConfiguration.java
@@ -17,11 +17,9 @@
 package io.realm;
 
 import android.content.Context;
-import android.text.TextUtils;
 
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStream;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
@@ -35,6 +33,7 @@
 import io.realm.internal.RealmCore;
 import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.SharedRealm;
+import io.realm.internal.Util;
 import io.realm.internal.modules.CompositeMediator;
 import io.realm.internal.modules.FilterableMediator;
 import io.realm.rx.RealmObservableFactory;
@@ -181,17 +180,16 @@ RealmProxyMediator getSchemaMediator() {
      * @return {@code true} if there is asset file, {@code false} otherwise.
      */
     boolean hasAssetFile() {
-        return !TextUtils.isEmpty(assetFilePath);
+        return !Util.isEmptyString(assetFilePath);
     }
 
     /**
-     * Returns input stream object to the Realm asset file.
+     * Returns the path to the Realm asset file.
      *
-     * @return input stream to the asset file.
-     * @throws IOException if copying the file fails.
+     * @return path to the asset file relative to the asset directory.
      */
-    InputStream getAssetFile() throws IOException {
-        return BaseRealm.applicationContext.getAssets().open(assetFilePath);
+    String getAssetFilePath() {
+        return assetFilePath;
     }
 
     /**
@@ -569,7 +567,7 @@ public Builder deleteRealmIfMigrationNeeded() {
          * reference to the in-memory Realm object with the specific name as long as you want the data to last.
          */
         public Builder inMemory() {
-            if (!TextUtils.isEmpty(assetFilePath)) {
+            if (!Util.isEmptyString(assetFilePath)) {
                 throw new RealmException("Realm can not use in-memory configuration if asset file is present.");
             }
 
@@ -643,7 +641,7 @@ public Builder initialData(Realm.Transaction transaction) {
          * @throws IllegalStateException if this is configured to clear its schema by calling {@link #deleteRealmIfMigrationNeeded()}.
          */
         public Builder assetFile(String assetFile) {
-            if (TextUtils.isEmpty(assetFile)) {
+            if (Util.isEmptyString(assetFile)) {
                 throw new IllegalArgumentException("A non-empty asset file path must be provided");
             }
             if (durability == SharedRealm.Durability.MEM_ONLY) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
index 253694a12b..fe61c5349c 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
@@ -66,8 +66,8 @@ public void init(Context context) {
     public void realmClosed(RealmConfiguration configuration) {
     }
 
-    public String[] getUserAndServerUrl(RealmConfiguration config) {
-        return new String[4];
+    public Object[] getUserAndServerUrl(RealmConfiguration config) {
+        return new Object[6];
     }
 
     public static ObjectServerFacade getFacade(boolean needSyncFacade) {
@@ -89,6 +89,14 @@ public static ObjectServerFacade getSyncFacadeIfPossible() {
     public void wrapObjectStoreSessionIfRequired(RealmConfiguration config) {
     }
 
+    public String getSyncServerCertificateAssetName(RealmConfiguration config) {
+        return null;
+    }
+
+    public String getSyncServerCertificateFilePath(RealmConfiguration config) {
+        return null;
+    }
+
     /**
      * Block until all latest changes have been downloaded from the server.
      *
diff --git a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java b/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
index a1e058a79a..303d20dc9f 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
@@ -211,11 +211,13 @@ public static SharedRealm getInstance(RealmConfiguration config) {
 
     public static SharedRealm getInstance(RealmConfiguration config, SchemaVersionListener schemaVersionListener,
             boolean autoChangeNotifications) {
-        String[] syncUserConf = ObjectServerFacade.getSyncFacadeIfPossible().getUserAndServerUrl(config);
-        String syncUserIdentifier = syncUserConf[0];
-        String syncRealmUrl = syncUserConf[1];
-        String syncRealmAuthUrl = syncUserConf[2];
-        String syncRefreshToken = syncUserConf[3];
+        Object[] syncUserConf = ObjectServerFacade.getSyncFacadeIfPossible().getUserAndServerUrl(config);
+        String syncUserIdentifier = (String) syncUserConf[0];
+        String syncRealmUrl = (String) syncUserConf[1];
+        String syncRealmAuthUrl = (String) syncUserConf[2];
+        String syncRefreshToken = (String) syncUserConf[3];
+        boolean syncClientValidateSsl = (Boolean.TRUE.equals(syncUserConf[4]));
+        String syncSslTrustCertificatePath = (String) syncUserConf[5];
 
         final boolean enableCaching = false; // Handled in Java currently
         final boolean enableFormatUpgrade = true;
@@ -232,7 +234,9 @@ public static SharedRealm getInstance(RealmConfiguration config, SchemaVersionLi
                 syncRealmUrl,
                 syncRealmAuthUrl,
                 syncUserIdentifier,
-                syncRefreshToken);
+                syncRefreshToken,
+                syncClientValidateSsl,
+                syncSslTrustCertificatePath);
 
         try {
             ObjectServerFacade.getSyncFacadeIfPossible().wrapObjectStoreSessionIfRequired(config);
@@ -497,7 +501,9 @@ private static native long nativeCreateConfig(String realmPath, byte[] key, byte
             String syncServerURL,
             String syncServerAuthURL,
             String syncUserIdentity,
-            String syncRefreshToken);
+            String syncRefreshToken,
+            boolean syncClientValidateSsl,
+            String syncSslTrustCertificatePath);
 
     private static native void nativeCloseConfig(long nativeConfigPtr);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Util.java b/realm/realm-library/src/main/java/io/realm/internal/Util.java
index 2fc7778786..b9d781b79b 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Util.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Util.java
@@ -90,6 +90,15 @@ public static boolean isEmulator() {
                 || "google_sdk".equals(Build.PRODUCT);
     }
 
+    public static boolean isEmptyString(String str) {
+        if (str == null || str.length() == 0) {
+            return true;
+
+        } else {
+            return false;
+        }
+    }
+
     public static boolean deleteRealm(String canonicalPath, File realmFolder, String realmFileName) {
         boolean realmDeleted = true;
         final String management = ".management";
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index 124bc62b1f..b1d1336a8c 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -34,6 +34,8 @@
 import io.realm.exceptions.RealmException;
 import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.SharedRealm;
+import io.realm.internal.Util;
+import io.realm.log.RealmLog;
 import io.realm.rx.RealmObservableFactory;
 import io.realm.rx.RxObservableFactory;
 
@@ -78,6 +80,9 @@
     private final SyncUser user;
     private final SyncSession.ErrorHandler errorHandler;
     private final boolean deleteRealmOnLogout;
+    private final boolean syncClientValidateSsl;
+    private final String serverCertificateAssetName;
+    private final String serverCertificateFilePath;
     private final boolean waitForInitialData;
 
     private SyncConfiguration(File directory,
@@ -97,8 +102,10 @@ private SyncConfiguration(File directory,
                                 URI serverUrl,
                                 SyncSession.ErrorHandler errorHandler,
                                 boolean deleteRealmOnLogout,
+                                boolean syncClientValidateSsl,
+                                String serverCertificateAssetName,
+                                String serverCertificateFilePath,
                                 boolean waitForInitialData
-
     ) {
         super(directory,
                 filename,
@@ -119,6 +126,9 @@ private SyncConfiguration(File directory,
         this.serverUrl = serverUrl;
         this.errorHandler = errorHandler;
         this.deleteRealmOnLogout = deleteRealmOnLogout;
+        this.syncClientValidateSsl = syncClientValidateSsl;
+        this.serverCertificateAssetName = serverCertificateAssetName;
+        this.serverCertificateFilePath = serverCertificateFilePath;
         this.waitForInitialData = waitForInitialData;
     }
 
@@ -152,9 +162,12 @@ public boolean equals(Object o) {
         SyncConfiguration that = (SyncConfiguration) o;
 
         if (deleteRealmOnLogout != that.deleteRealmOnLogout) return false;
+        if (syncClientValidateSsl != that.syncClientValidateSsl) return false;
         if (!serverUrl.equals(that.serverUrl)) return false;
         if (!user.equals(that.user)) return false;
         if (!errorHandler.equals(that.errorHandler)) return false;
+        if (serverCertificateAssetName != null ? !serverCertificateAssetName.equals(that.serverCertificateAssetName) : that.serverCertificateAssetName != null) return false;
+        if (serverCertificateFilePath != null ? !serverCertificateFilePath.equals(that.serverCertificateFilePath) : that.serverCertificateFilePath != null) return false;
         if (waitForInitialData != that.waitForInitialData) return false;
         return true;
     }
@@ -164,8 +177,11 @@ public int hashCode() {
         int result = super.hashCode();
         result = 31 * result + serverUrl.hashCode();
         result = 31 * result + user.hashCode();
-        result = 31 * result + (deleteRealmOnLogout ? 1 : 0);
         result = 31 * result + errorHandler.hashCode();
+        result = 31 * result + (deleteRealmOnLogout ? 1 : 0);
+        result = 31 * result + (syncClientValidateSsl ? 1 : 0);
+        result = 31 * result + (serverCertificateAssetName != null ? serverCertificateAssetName.hashCode() : 0);
+        result = 31 * result + (serverCertificateFilePath != null ? serverCertificateFilePath.hashCode() : 0);
         result = 31 * result + (waitForInitialData ? 1 : 0);
         return result;
     }
@@ -219,6 +235,37 @@ public boolean shouldDeleteRealmOnLogout() {
         return deleteRealmOnLogout;
     }
 
+    /**
+     * Returns the name of certificate stored under the {@code assets}, to be used to validate
+     * the TLS connection to the Realm Object Server.
+     *
+     * @return name of the certificate to be copied from the {@code assets}.
+     * @see #getServerCertificateFilePath()
+     */
+    public String getServerCertificateAssetName() {
+        return serverCertificateAssetName;
+    }
+
+    /**
+     * Returns the name of the certificate copied from {@code assets} into internal storage, so it
+     * can be used to validate the TLS connection to the Realm Object Server.
+     *
+     * @return absolute path to the certificate.
+     * @see #getServerCertificateAssetName()
+     */
+    public String getServerCertificateFilePath() {
+        return serverCertificateFilePath;
+    }
+
+    /**
+     * Whether the Realm Object Server certificate should be validated in order
+     * to establish a valid TLS connection.
+     *
+     * @return {@code true} to validate the remote certificate, or {@code false} to bypass certificate validation.
+     */
+    public boolean syncClientValidateSsl() {
+        return syncClientValidateSsl;
+    }
 
     /**
      * Returns {@code true} if the Realm will download all known changes from the remote server before being opened the
@@ -251,16 +298,20 @@ boolean isSyncConfiguration() {
         private HashSet<Class<? extends RealmModel>> debugSchema = new HashSet<Class<? extends RealmModel>>();
         private RxObservableFactory rxFactory;
         private Realm.Transaction initialDataTransaction;
-        private URI serverUrl;
-        private SyncUser user = null;
-        private SyncSession.ErrorHandler errorHandler = SyncManager.defaultSessionErrorHandler;
         private File defaultFolder;
         private String defaultLocalFileName;
         private SharedRealm.Durability durability = SharedRealm.Durability.FULL;
-        private boolean deleteRealmOnLogout = false;
         private final Pattern pattern = Pattern.compile("^[A-Za-z0-9_\\-\\.]+$"); // for checking serverUrl
         private boolean readOnly = false;
         private boolean waitForServerChanges = false;
+        // sync specific
+        private boolean deleteRealmOnLogout = false;
+        private URI serverUrl;
+        private SyncUser user = null;
+        private SyncSession.ErrorHandler errorHandler = SyncManager.defaultSessionErrorHandler;
+        private boolean syncClientValidateSsl = true;
+        private String serverCertificateAssetName;
+        private String serverCertificateFilePath;
 
         /**
          * Creates an instance of the Builder for the SyncConfiguration.
@@ -596,6 +647,42 @@ public Builder errorHandler(SyncSession.ErrorHandler errorHandler) {
         }
 
         /**
+         * Provides the trusted root certificate(s) authority (CA) in {@code PEM} format, that should be used to
+         * validate the TLS connections to the Realm Object Server.
+         * <p>
+         * The file should be stored under {@code assets}, it will be copied at runtime into the internal storage.
+         * <p>
+         * Note: This is similar to passing the parameter {@code CAfile} to {@code SSL_CTX_load_verify_locations},
+         *       Therefore it is recommended to include only the root CA you trust, and not the entire list of root CA
+         *       as this file will be loaded at runtime.
+         *
+         *       It is your responsibility to download and verify the correct {@code PEM} for the root CA you trust.
+         *       An existing list by Mozilla exist that could be used https://mozillacaprogram.secure.force.com/CA/IncludedCACertificateReportPEMCSV
+         *
+         * @param filename the path under {@code assets} to the root CA.
+         * @see <a href="https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_load_verify_locations.html">SSL_CTX_load_verify_locations</a>
+         */
+        public Builder trustedRootCA(String filename) {
+            if (filename == null || filename.isEmpty()) {
+                throw new IllegalArgumentException("A non-empty filename must be provided");
+            }
+            this.serverCertificateAssetName = filename;
+            return this;
+        }
+
+        /**
+         * This will disable TLS certificate verification for the remote Realm Object Server.
+         * It is not recommended to use this in production.
+         * <p>
+         * This might be useful in non-production environments where you use a self-signed certificate
+         * for testing.
+         */
+        public Builder disableSSLVerification() {
+            this.syncClientValidateSsl = false;
+            return this;
+        }
+
+        /*
          * Setting this will cause the Realm to download all known changes from the server the first time a Realm is
          * opened. The Realm will not open until all the data has been downloaded. This means that if a device is
          * offline the Realm will not open.
@@ -733,6 +820,18 @@ public SyncConfiguration build() {
                 throw new IllegalStateException("Could not create directory for saving the Realm: " + realmFileDirectory);
             }
 
+            if (!Util.isEmptyString(serverCertificateAssetName)) {
+                if (syncClientValidateSsl) {
+                    // Create the path where the serverCertificateAssetName will be copied
+                    // so we can supply it to the Sync client.
+                    // using getRealmDirectory avoid file collision between same filename from different users (Realms)
+                    String fileName = serverCertificateAssetName.substring(serverCertificateAssetName.lastIndexOf(File.separatorChar) + 1);
+                    serverCertificateFilePath = new File(realmFileDirectory, fileName).getAbsolutePath();
+                } else {
+                    RealmLog.warn("SSL Verification is disable, server certificate provided will not be used");
+                }
+            }
+
             return new SyncConfiguration(
                     // Realm Configuration options
                     realmFileDirectory,
@@ -754,6 +853,9 @@ public SyncConfiguration build() {
                     resolvedServerUrl,
                     errorHandler,
                     deleteRealmOnLogout,
+                    syncClientValidateSsl,
+                    serverCertificateAssetName,
+                    serverCertificateFilePath,
                     waitForServerChanges
             );
         }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
index 4bc4eff614..60151daf6d 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
@@ -83,16 +83,16 @@ public void realmClosed(RealmConfiguration configuration) {
     }
 
     @Override
-    public String[] getUserAndServerUrl(RealmConfiguration config) {
+    public Object[] getUserAndServerUrl(RealmConfiguration config) {
         if (config instanceof SyncConfiguration) {
             SyncConfiguration syncConfig = (SyncConfiguration) config;
             String rosServerUrl = syncConfig.getServerUrl().toString();
             String rosUserIdentity = syncConfig.getUser().getIdentity();
             String syncRealmAuthUrl = syncConfig.getUser().getAuthenticationUrl().toString();
             String rosRefreshToken = syncConfig.getUser().getAccessToken().value();
-            return new String[]{rosUserIdentity, rosServerUrl, syncRealmAuthUrl, rosRefreshToken};
+            return new Object[]{rosUserIdentity, rosServerUrl, syncRealmAuthUrl, rosRefreshToken, syncConfig.syncClientValidateSsl(), syncConfig.getServerCertificateFilePath()};
         } else {
-            return new String[4];
+            return new Object[6];
         }
     }
 
@@ -107,6 +107,26 @@ public void wrapObjectStoreSessionIfRequired(RealmConfiguration config) {
         }
     }
 
+    @Override
+    public String getSyncServerCertificateAssetName(RealmConfiguration configuration) {
+        if (configuration instanceof SyncConfiguration) {
+            SyncConfiguration syncConfig = (SyncConfiguration) configuration;
+            return syncConfig.getServerCertificateAssetName();
+        } else {
+            throw new IllegalArgumentException(WRONG_TYPE_OF_CONFIGURATION);
+        }
+    }
+
+    @Override
+    public String getSyncServerCertificateFilePath(RealmConfiguration configuration) {
+        if (configuration instanceof SyncConfiguration) {
+            SyncConfiguration syncConfig = (SyncConfiguration) configuration;
+            return syncConfig.getServerCertificateFilePath();
+        } else {
+            throw new IllegalArgumentException(WRONG_TYPE_OF_CONFIGURATION);
+        }
+    }
+
     //FIXME remove this reflection call once we redesign the SyncManager to separate interface
     //      from implementation to avoid issue like exposing internal method like SyncManager#removeSession
     //      or SyncSession#close. This happens because SyncObjectServerFacade is internal, whereas
diff --git a/realm/realm-library/src/syncIntegrationTest/assets/trusted_ca.pem b/realm/realm-library/src/syncIntegrationTest/assets/trusted_ca.pem
new file mode 100644
index 0000000000..080849fe6c
--- /dev/null
+++ b/realm/realm-library/src/syncIntegrationTest/assets/trusted_ca.pem
@@ -0,0 +1,123 @@
+Certificate:
+    Data:
+        Version: 3 (0x2)
+        Serial Number: 1 (0x1)
+    Signature Algorithm: sha1WithRSAEncryption
+        Issuer: DC=io, DC=realm, O=Realm, OU=Realm Test Root CA, CN=Realm Test Root CA
+        Validity
+            Not Before: Sep  7 09:42:23 2016 GMT
+            Not After : Sep  7 09:42:23 2026 GMT
+        Subject: DC=io, DC=realm, O=Realm, OU=Realm Test Root CA, CN=Realm Test Root CA
+        Subject Public Key Info:
+            Public Key Algorithm: rsaEncryption
+                Public-Key: (4096 bit)
+                Modulus:
+                    00:dc:43:b2:92:b1:be:ff:da:43:f3:b8:d5:4b:42:
+                    9e:05:7f:4e:bf:09:2f:02:33:1a:24:44:ff:12:7e:
+                    35:9c:cd:b3:61:78:0a:b0:83:80:82:ec:a2:5c:66:
+                    f0:7d:d4:df:f9:9c:be:b5:4e:e6:6b:60:59:e7:ed:
+                    0f:85:47:2e:83:5a:55:c1:1a:32:a9:c8:b8:d4:5a:
+                    96:94:ef:4f:f1:aa:64:59:c8:8c:89:1a:e6:1a:f4:
+                    94:5c:e8:be:59:0f:6b:cc:9d:58:e5:e4:29:22:ba:
+                    54:96:dd:8a:f6:28:d6:d6:c8:ca:df:b2:c2:f7:1e:
+                    19:58:75:ab:a2:ab:04:e4:1f:ed:fe:04:ec:f2:f1:
+                    da:62:d2:bd:9b:4b:84:ba:d0:5e:dc:63:40:03:cc:
+                    c6:88:1c:15:5c:96:41:b0:58:3d:af:08:bd:64:34:
+                    b8:3b:00:03:28:21:37:bf:5c:bc:1c:e7:2d:08:a5:
+                    02:ad:c0:49:ba:34:56:8e:63:66:ba:60:8c:5c:89:
+                    ba:0f:76:47:9c:bc:31:6a:5d:8e:4d:a9:4d:74:c7:
+                    18:29:b1:9f:08:98:0b:ff:13:5b:58:52:0b:85:f1:
+                    b0:fe:be:3f:ba:ea:5e:50:2f:ea:1d:85:1f:c2:87:
+                    2a:70:14:05:3d:70:6c:e3:c7:a7:81:6b:3e:11:67:
+                    bf:b4:9e:26:a4:57:df:16:0a:f3:83:7c:fb:64:e3:
+                    33:9f:08:55:25:de:1e:93:e6:13:0a:38:94:33:0c:
+                    40:87:f7:c7:69:1c:1d:5b:aa:0e:8e:e7:8f:ae:36:
+                    07:5b:1b:7d:c3:5c:13:20:c6:01:7b:9b:f2:f6:c7:
+                    ec:82:5d:33:75:cb:5b:b1:6b:be:96:36:f6:c4:1d:
+                    83:eb:88:dd:9a:ae:92:ea:ee:0f:20:8a:d6:c1:04:
+                    24:c8:4b:6a:89:0e:c5:46:4c:f9:79:2a:7a:60:7a:
+                    4a:72:9a:82:03:d2:75:c6:10:fb:d3:00:3b:6b:13:
+                    bc:f5:fe:83:94:40:18:a1:97:46:8c:5e:5b:ae:4a:
+                    c5:93:74:a5:9f:1e:d2:64:13:b0:d6:83:60:4e:69:
+                    f7:16:05:0b:e9:45:ec:b9:52:78:12:53:60:d7:88:
+                    f5:58:75:20:e4:ab:4a:e3:cb:b1:5d:82:57:4c:3f:
+                    47:44:70:90:06:a7:70:14:3c:6b:83:f9:28:07:12:
+                    81:f6:70:02:24:2d:52:70:01:96:1c:77:29:67:6c:
+                    5e:80:d8:51:fd:e5:43:5d:60:ad:2c:5f:95:aa:74:
+                    2d:f2:8e:43:30:e9:67:eb:c7:65:0a:4b:3b:b0:3f:
+                    ae:85:da:30:26:2a:b8:20:11:b3:92:9a:8a:d0:13:
+                    e6:d7:23
+                Exponent: 65537 (0x10001)
+        X509v3 extensions:
+            X509v3 Key Usage: critical
+                Certificate Sign, CRL Sign
+            X509v3 Basic Constraints: critical
+                CA:TRUE
+            X509v3 Subject Key Identifier: 
+                84:70:71:2C:04:3B:D0:92:83:B5:FB:7C:7F:B0:61:0C:62:16:71:74
+            X509v3 Authority Key Identifier: 
+                keyid:84:70:71:2C:04:3B:D0:92:83:B5:FB:7C:7F:B0:61:0C:62:16:71:74
+
+    Signature Algorithm: sha1WithRSAEncryption
+         6c:35:e0:07:db:3a:15:30:00:7f:38:fd:6d:b7:7a:85:84:87:
+         1b:72:78:33:ee:00:81:c0:51:33:6f:f3:a8:e8:3b:30:fd:ef:
+         19:c5:d2:95:83:b7:80:8f:1b:79:ff:ac:e6:f2:f5:f6:a0:71:
+         16:57:72:58:1a:75:e4:4c:3d:b3:4b:b5:3d:8c:d9:66:1a:5f:
+         7c:c0:2c:1f:2c:0a:3e:fb:84:20:ce:c8:7d:8e:9b:e6:fe:4b:
+         06:af:10:4f:db:97:3c:cd:04:df:3c:2f:c2:c6:29:c0:70:19:
+         b3:5a:9e:fe:0f:7d:83:95:83:a5:db:01:d8:c4:91:6f:ee:25:
+         6b:cd:8e:2e:b2:69:88:1f:e9:57:ef:4c:c4:18:cd:d2:42:4e:
+         c1:19:bd:8d:c9:4e:e7:b3:05:fa:6e:c5:32:0a:c3:f0:bd:ec:
+         d3:44:d4:80:08:26:2d:12:cb:1b:a4:9d:09:ca:0b:02:eb:5a:
+         b6:54:51:ac:90:63:77:76:6f:33:35:fe:87:db:d2:c0:bc:ea:
+         5b:c5:9b:e9:4c:c2:82:28:a7:4f:62:df:18:4f:1c:8b:93:7a:
+         f3:32:89:0a:3e:c1:bd:8a:45:29:f8:7f:18:4c:a1:77:e1:e2:
+         b4:eb:50:31:6b:77:d5:78:12:95:c9:02:d7:61:03:13:6e:be:
+         fe:dd:83:35:2b:4c:dc:45:81:6f:16:7f:29:b8:6f:bb:6d:f6:
+         15:6d:3b:d2:14:f9:94:24:86:df:4e:b7:9e:93:2e:94:25:e6:
+         b1:b5:c0:96:c9:a3:56:cf:95:15:7f:43:41:f0:3e:c2:ed:8d:
+         16:c1:7b:db:ff:38:48:08:b4:39:43:81:65:31:ba:78:d1:77:
+         e9:1a:f0:5a:18:05:db:db:91:ca:e8:f9:8c:2e:6e:a9:8c:ba:
+         69:96:01:2e:fa:6a:f5:de:bf:1c:53:ca:14:2a:91:0b:2a:f2:
+         fa:b9:07:eb:6d:9d:59:ae:08:6b:fa:61:95:75:9c:76:4b:22:
+         a7:0c:c4:66:e7:aa:9e:da:84:76:fc:8e:50:59:c2:55:b8:e1:
+         01:e5:54:85:7f:32:4f:63:e0:74:77:96:ae:6b:35:db:0a:0c:
+         da:27:3b:c7:c8:3b:ba:d4:41:3a:aa:5c:ed:71:0b:10:88:05:
+         9e:21:c5:99:c3:3a:e2:a2:de:f9:f5:c6:ce:9a:16:be:18:41:
+         24:14:ee:47:76:f2:db:b1:98:f2:0e:fd:18:ae:a7:f0:f1:55:
+         56:7a:9a:f2:84:50:77:f2:08:c7:f4:3f:f5:1b:03:97:49:41:
+         e3:a1:2b:c3:ee:f5:bc:bc:9d:2b:38:39:10:74:5b:18:92:2a:
+         fa:c0:4b:46:c0:ff:46:56
+-----BEGIN CERTIFICATE-----
+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
+-----END CERTIFICATE-----
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
new file mode 100644
index 0000000000..b64c5c69cd
--- /dev/null
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SSLConfigurationTests.java
@@ -0,0 +1,204 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm;
+
+import android.os.SystemClock;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.Timeout;
+import org.junit.runner.RunWith;
+
+import java.util.UUID;
+import java.util.concurrent.TimeUnit;
+
+import io.realm.entities.StringOnly;
+import io.realm.exceptions.RealmFileException;
+import io.realm.log.LogLevel;
+import io.realm.log.RealmLog;
+import io.realm.objectserver.BaseIntegrationTest;
+import io.realm.objectserver.utils.Constants;
+import io.realm.rule.TestSyncConfigurationFactory;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+@RunWith(AndroidJUnit4.class)
+public class SSLConfigurationTests extends BaseIntegrationTest {
+
+    @Rule
+    public Timeout globalTimeout = Timeout.seconds(10);
+
+    @Rule
+    public final TestSyncConfigurationFactory configurationFactory = new TestSyncConfigurationFactory();
+
+    @Test
+    public void trustedRootCA() throws InterruptedException {
+        String username = UUID.randomUUID().toString();
+        String password = "password";
+        SyncUser user = SyncUser.login(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
+
+        // 1. Copy a valid Realm to the server
+        final SyncConfiguration configOld = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .schema(StringOnly.class)
+                .build();
+        Realm realm = Realm.getInstance(configOld);
+
+        realm.beginTransaction();
+        realm.createObject(StringOnly.class).setChars("Foo");
+        realm.commitTransaction();
+
+        // make sure the changes gets to the server
+        SystemClock.sleep(TimeUnit.SECONDS.toMillis(2));  // FIXME: Replace with Sync Progress Notifications once available.
+        realm.close();
+        user.logout();
+        Realm.deleteRealm(configOld);
+
+        // 2. Local state should now be completely reset. Open the Realm again with a new configuration which should
+        // download the uploaded changes.
+        user = SyncUser.login(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
+        SyncConfiguration config = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .schema(StringOnly.class)
+                .waitForInitialRemoteData()
+                .trustedRootCA("trusted_ca.pem")
+                .build();
+        realm = Realm.getInstance(config);
+
+        RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
+        try {
+            assertEquals(1, all.size());
+            assertEquals("Foo", all.get(0).getChars());
+        } finally {
+            realm.close();
+        }
+    }
+
+    @Test
+    public void withoutSSLVerification() throws InterruptedException {
+        String username = UUID.randomUUID().toString();
+        String password = "password";
+        SyncUser user = SyncUser.login(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
+
+        // 1. Copy a valid Realm to the server
+        final SyncConfiguration configOld = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .schema(StringOnly.class)
+                .build();
+        Realm realm = Realm.getInstance(configOld);
+
+        realm.beginTransaction();
+        realm.createObject(StringOnly.class).setChars("Foo");
+        realm.commitTransaction();
+
+        // make sure the changes gets to the server
+        SystemClock.sleep(TimeUnit.SECONDS.toMillis(2));  // FIXME: Replace with Sync Progress Notifications once available.
+        realm.close();
+        user.logout();
+        Realm.deleteRealm(configOld);
+
+        // 2. Local state should now be completely reset. Open the Realm again with a new configuration which should
+        // download the uploaded changes.
+        user = SyncUser.login(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
+        SyncConfiguration config = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .schema(StringOnly.class)
+                .waitForInitialRemoteData()
+                .disableSSLVerification()
+                .build();
+        realm = Realm.getInstance(config);
+
+        RealmResults<StringOnly> all = realm.where(StringOnly.class).findAll();
+        try {
+            assertEquals(1, all.size());
+            assertEquals("Foo", all.get(0).getChars());
+        } finally {
+            realm.close();
+        }
+    }
+
+    @Test
+    public void trustedRootCA_syncShouldFailWithoutTrustedCA() throws InterruptedException {
+        String username = UUID.randomUUID().toString();
+        String password = "password";
+        SyncUser user = SyncUser.login(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
+
+        // 1. Copy a valid Realm to the server
+        final SyncConfiguration configOld = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .schema(StringOnly.class)
+                .build();
+        Realm realm = Realm.getInstance(configOld);
+
+        realm.beginTransaction();
+        realm.createObject(StringOnly.class).setChars("Foo");
+        realm.commitTransaction();
+
+        // make sure the changes gets to the server
+        SystemClock.sleep(TimeUnit.SECONDS.toMillis(2));  // FIXME: Replace with Sync Progress Notifications once available.
+        realm.close();
+        user.logout();
+        Realm.deleteRealm(configOld);
+
+        // 2. Local state should now be completely reset. Open the Realm again with a new configuration which should
+        // download the uploaded changes.
+        user = SyncUser.login(SyncCredentials.usernamePassword(username, password), Constants.AUTH_URL);
+        SyncConfiguration config = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .schema(StringOnly.class)
+                .build();
+        realm = Realm.getInstance(config);
+        try {
+            assertTrue(realm.isEmpty());
+        } finally {
+            realm.close();
+        }
+    }
+
+    @Test
+    public void combining_trustedRootCA_and_withoutSSLVerification_willThrow() {
+        String username = UUID.randomUUID().toString();
+        String password = "password";
+        SyncUser user = SyncUser.login(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
+
+        TestHelper.TestLogger testLogger = new TestHelper.TestLogger();
+        RealmLog.add(testLogger);
+        RealmLog.setLevel(LogLevel.WARN);
+
+        configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .schema(StringOnly.class)
+                .trustedRootCA("trusted_ca.pem")
+                .disableSSLVerification()
+                .build();
+
+        assertEquals("SSL Verification is disable, server certificate provided will not be used", testLogger.message);
+    }
+
+    @Test
+    public void trustedRootCA_notExisting_certificate_willThrow() {
+        String username = UUID.randomUUID().toString();
+        String password = "password";
+        SyncUser user = SyncUser.login(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);
+        SyncConfiguration config = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM_SECURE)
+                .schema(StringOnly.class)
+                .trustedRootCA("not_existing_file.pem")
+                .build();
+
+        try {
+            Realm.getInstance(config);
+            fail();
+        } catch (RealmFileException ignored) {
+        }
+    }
+}
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java
index c8d7b1513e..c4b3c28d6d 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncedRealmTests.java
@@ -20,9 +20,11 @@
 import android.support.annotation.NonNull;
 import android.support.test.annotation.UiThreadTest;
 import android.support.test.rule.UiThreadTestRule;
+import android.support.test.runner.AndroidJUnit4;
 
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.io.File;
 import java.util.Random;
@@ -42,13 +44,13 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 
 /**
  * Catch all class for tests that not naturally fit anywhere else.
  */
+@RunWith(AndroidJUnit4.class)
 public class SyncedRealmTests extends BaseIntegrationTest {
 
     @Rule
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/SyncedRealmTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/SyncedRealmTests.java
deleted file mode 100644
index cb82896b72..0000000000
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/SyncedRealmTests.java
+++ /dev/null
@@ -1,184 +0,0 @@
-/*
- * Copyright 2017 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.objectserver;
-
-import android.os.SystemClock;
-import android.support.annotation.NonNull;
-import android.support.test.annotation.UiThreadTest;
-import android.support.test.rule.UiThreadTestRule;
-
-import org.junit.Rule;
-import org.junit.Test;
-
-import java.io.File;
-import java.util.Random;
-import java.util.UUID;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicReference;
-
-import io.realm.Realm;
-import io.realm.RealmAsyncTask;
-import io.realm.SyncConfiguration;
-import io.realm.SyncCredentials;
-import io.realm.SyncUser;
-import io.realm.TestHelper;
-import io.realm.exceptions.DownloadingRealmInterruptedException;
-import io.realm.objectserver.utils.Constants;
-import io.realm.rule.RunInLooperThread;
-import io.realm.rule.RunTestInLooperThread;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-
-/**
- * Catch all class for tests that not naturally fit anywhere else.
- */
-public class SyncedRealmTests extends BaseIntegrationTest {
-
-    @Rule
-    public RunInLooperThread looperThread = new RunInLooperThread();
-
-    @Rule
-    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();
-
-    @Test
-    @UiThreadTest
-    public void waitForInitialRemoteData_mainThreadThrows() {
-        final SyncUser user = loginUser();
-
-        SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
-                .waitForInitialRemoteData()
-                .build();
-
-        Realm realm = null;
-        try {
-            realm = Realm.getInstance(config);
-            fail();
-        } catch (IllegalStateException ignored) {
-        } finally {
-            if (realm != null) {
-                realm.close();
-            }
-        }
-    }
-
-    // Login user on a worker thread, so this method can be used from both UI and non-ui threads.
-    @NonNull
-    private SyncUser loginUser() {
-        final CountDownLatch userReady = new CountDownLatch(1);
-        final AtomicReference<SyncUser> user = new AtomicReference<>();
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), "password", true);
-                user.set(SyncUser.login(credentials, Constants.AUTH_URL));
-                userReady.countDown();
-            }
-        }).start();
-        TestHelper.awaitOrFail(userReady);
-        return user.get();
-    }
-
-    @Test
-    public void waitForInitialRemoteData() {
-        // TODO We can improve this test once we got Sync Progress Notifications. Right now we cannot detect
-        // when a Realm has been uploaded.
-        SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), "password", true);
-        SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);
-        SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
-                .waitForInitialRemoteData()
-                .build();
-
-        Realm realm = null;
-        try {
-            realm = Realm.getInstance(config);
-            assertTrue(realm.isEmpty());
-        } finally {
-            if (realm != null) {
-                realm.close();
-            }
-        }
-    }
-
-    // This tests will start and cancel getting a Realm 10 times. The Realm should be resilient towards that
-    // We cannot do much better since we cannot control the order of events internally in Realm which would be
-    // needed to correctly test all error paths.
-    @Test
-    public void waitForInitialData_resilientInCaseOfRetries() throws InterruptedException {
-        SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), "password", true);
-        SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);
-        final SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
-                .waitForInitialRemoteData()
-                .build();
-
-        for (int i = 0; i < 10; i++) {
-            Thread t = new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    Realm realm = null;
-                    try {
-                        // This will cause the download latch called later to immediately throw an InterruptedException.
-                        Thread.currentThread().interrupt();
-                        realm = Realm.getInstance(config);
-                    } catch (DownloadingRealmInterruptedException ignored) {
-                        assertFalse(new File(config.getPath()).exists());
-                    } finally {
-                        if (realm != null) {
-                            realm.close();
-                            Realm.deleteRealm(config);
-                        }
-                    }
-                }
-            });
-            t.start();
-            t.join();
-        }
-    }
-
-    // This tests will start and cancel getting a Realm 10 times. The Realm should be resilient towards that
-    // We cannot do much better since we cannot control the order of events internally in Realm which would be
-    // needed to correctly test all error paths.
-    @Test
-    @RunTestInLooperThread
-    public void waitForInitialData_resilientInCaseOfRetriesAsync() {
-        SyncCredentials credentials = SyncCredentials.usernamePassword(UUID.randomUUID().toString(), "password", true);
-        SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);
-        final SyncConfiguration config = new SyncConfiguration.Builder(user, Constants.USER_REALM)
-                .waitForInitialRemoteData()
-                .build();
-        Random randomizer = new Random();
-
-        for (int i = 0; i < 10; i++) {
-            RealmAsyncTask task = Realm.getInstanceAsync(config, new Realm.Callback() {
-                @Override
-                public void onSuccess(Realm realm) {
-                    fail();
-                }
-
-                @Override
-                public void onError(Throwable exception) {
-                    fail(exception.toString());
-                }
-            });
-            SystemClock.sleep(randomizer.nextInt(5));
-            task.cancel();
-        }
-        looperThread.testComplete();
-    }
-}
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
index 71f273f865..8d26d58fe4 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
@@ -19,6 +19,7 @@
 public class Constants {
 
     public static final String USER_REALM = "realm://127.0.0.1:9080/~/tests";
+    public static final String USER_REALM_SECURE = "realms://127.0.0.1:9443/~/tests";
     public static final String SYNC_SERVER_URL = "realm://127.0.0.1/tests";
     public static final String SYNC_SERVER_URL_2 = "realm://127.0.0.1/tests2";
 
diff --git a/tools/sync_test_server/Dockerfile b/tools/sync_test_server/Dockerfile
index cddec14681..6404a0e086 100644
--- a/tools/sync_test_server/Dockerfile
+++ b/tools/sync_test_server/Dockerfile
@@ -12,7 +12,7 @@ RUN apt-get update -qq \
 RUN npm init -y
 RUN npm install winston temp httpdispatcher@1.0.0
 
-COPY keys/private.pem keys/public.pem configuration.yml /
+COPY keys/public.pem keys/private.pem keys/127_0_0_1-server.key.pem keys/127_0_0_1-chain.crt.pem configuration.yml /
 COPY ros-testing-server.js /usr/bin/
 
 # Install realm object server
diff --git a/tools/sync_test_server/configuration.yml b/tools/sync_test_server/configuration.yml
index 702e4c336a..d9a350fc00 100644
--- a/tools/sync_test_server/configuration.yml
+++ b/tools/sync_test_server/configuration.yml
@@ -164,21 +164,21 @@ proxy:
     ## by forwarding incoming requests on a single port to all services.
     ## Note that even if it enabled, the HTTPS proxy will only start if supplied
     ## with a valid pair of certificates through certificate_path and private_key_path below.
-    # enable: false
+    enable: true
 
     ## The path to the certificate and private keys (in PEM format) that will be used
     ## to set up the HTTPS server accepting connections.
     ## These configuration options are MANDATORY to start the HTTPS proxy module.
-    # certificate_path: 'keys/https-proxy.crt'
-    # private_key_path: 'keys/https-proxy.key'
+    certificate_path: '/127_0_0_1-chain.crt.pem'
+    private_key_path: '/127_0_0_1-server.key.pem'
 
     ## The address/interface on which the HTTPS proxy module should listen. This defaults
     ## to 127.0.0.1. If you wish to listen on all available interfaces,
     ## uncomment the following line.
-    # listen_address: '::'
+    listen_address: '::'
 
     ## The port that the HTTPS proxy module should bind to.
-    # listen_port: 9443
+    listen_port: 9443
 
 ## ----------------------------------------------------------------------------
 
diff --git a/tools/sync_test_server/keys/127_0_0_1-chain.crt.pem b/tools/sync_test_server/keys/127_0_0_1-chain.crt.pem
new file mode 100644
index 0000000000..7c55402c55
--- /dev/null
+++ b/tools/sync_test_server/keys/127_0_0_1-chain.crt.pem
@@ -0,0 +1,229 @@
+Certificate:
+    Data:
+        Version: 3 (0x2)
+        Serial Number: 7 (0x7)
+        Signature Algorithm: sha1WithRSAEncryption
+        Issuer: DC=io, DC=realm, O=Realm, OU=Realm Test Signing CA, CN=Realm Test Signing CA
+        Validity
+            Not Before: May 17 23:28:48 2017 GMT
+            Not After : May 17 23:28:48 2019 GMT
+        Subject: DC=127.0.0.1, O=Realm, OU=Realm, CN=127.0.0.1
+        Subject Public Key Info:
+            Public Key Algorithm: rsaEncryption
+            RSA Public Key: (2048 bit)
+                Modulus (2048 bit):
+                    00:b7:8c:99:7b:6b:5b:29:80:9c:99:b7:fe:b8:1e:
+                    06:6c:4d:58:bd:38:b6:cc:13:6a:ff:fd:f6:26:a0:
+                    71:d2:8a:94:ea:06:be:e1:b8:5b:03:5e:96:8e:61:
+                    19:0f:80:5f:b8:51:43:97:00:38:67:47:0e:09:b8:
+                    ab:80:d1:9c:81:b8:81:db:0b:b4:c5:de:7a:3c:f5:
+                    9c:cb:bf:2b:12:fe:b1:9d:4e:a0:4a:ab:ae:c4:11:
+                    19:54:c5:17:ed:58:c3:72:f0:e5:46:dc:21:41:4c:
+                    63:1d:31:85:f3:ba:f6:ad:69:3e:d8:86:9d:c4:56:
+                    3b:52:47:5d:24:dd:40:af:f9:fa:03:4c:4e:2d:5b:
+                    d2:34:dc:f0:a4:19:13:14:f6:6c:7c:1c:47:bd:7d:
+                    79:a2:09:61:ad:3f:8d:4e:59:c5:ae:a7:2b:39:00:
+                    e9:34:68:6c:6f:d8:60:a2:a9:24:33:1c:9f:80:b4:
+                    c6:8e:ba:37:98:71:3d:dd:82:66:d8:e0:c2:81:cc:
+                    4b:d1:5d:58:26:cf:85:0a:ac:fd:08:a5:40:50:ff:
+                    f9:73:e8:27:18:7b:70:75:73:2a:23:c7:d7:15:be:
+                    ca:ce:57:c9:ee:bb:6d:b4:d8:fd:c7:22:47:28:9b:
+                    00:5e:4b:af:82:63:c3:d7:6a:74:4e:60:17:94:6a:
+                    fb:83
+                Exponent: 65537 (0x10001)
+        X509v3 extensions:
+            X509v3 Key Usage: critical
+                Digital Signature, Key Encipherment
+            X509v3 Basic Constraints: 
+                CA:FALSE
+            X509v3 Extended Key Usage: 
+                TLS Web Server Authentication, TLS Web Client Authentication
+            X509v3 Subject Key Identifier: 
+                C6:BD:F4:49:F5:2E:76:52:44:F1:E2:CE:2E:6C:F9:59:B1:56:14:AD
+            X509v3 Authority Key Identifier: 
+                keyid:27:79:E1:DA:F1:15:D0:E9:E5:86:30:87:E7:1F:5F:CF:27:3A:70:B4
+
+            X509v3 Subject Alternative Name: 
+                IP Address:127.0.0.1
+    Signature Algorithm: sha1WithRSAEncryption
+        9b:3f:74:f4:69:72:6b:5b:75:88:b7:10:5f:e0:73:b2:82:be:
+        dc:71:1b:a3:d6:a4:6e:ae:a6:5f:51:78:5c:80:64:20:21:20:
+        13:16:08:d0:ae:15:f6:52:24:d9:23:5c:24:ed:62:3b:0e:e6:
+        5f:00:4b:bf:a1:94:34:2a:fb:2a:46:5f:54:e6:3b:7f:be:81:
+        5b:df:e8:78:a6:1e:ce:e2:87:b9:8b:e4:d8:04:1f:18:c4:29:
+        80:7a:21:a9:56:c5:29:ee:4e:28:33:fa:8d:92:46:a2:31:31:
+        c5:f9:31:19:ed:1d:f6:c7:75:82:65:b6:1a:ad:bc:34:4a:f3:
+        18:05:a0:a3:d4:9a:50:f2:ef:bb:c4:2f:89:10:95:68:17:6a:
+        85:76:ce:88:8c:19:cf:d7:aa:70:c3:d0:59:9b:9a:c0:d0:a8:
+        d0:d3:cd:f5:f0:8e:5e:19:ab:a1:ae:54:dc:07:ac:6d:6e:d8:
+        f0:ee:65:47:de:29:1e:76:1b:1d:0e:62:f5:dd:1d:f6:6e:ad:
+        27:2e:8d:be:c4:a8:41:0b:b1:44:22:3d:29:b3:57:74:3e:3b:
+        41:28:19:8d:48:ed:65:05:5b:8e:17:a7:ab:45:24:d9:95:00:
+        e4:04:e7:6c:d8:6b:6b:2a:89:5e:1f:fb:b4:f2:1c:20:55:ea:
+        f5:40:99:58:a2:de:c3:83:e5:01:70:f8:53:e9:8d:95:ba:0b:
+        20:d0:99:e6:b4:31:05:55:00:9c:f7:f3:96:7c:74:5b:7d:c7:
+        6a:ae:ec:90:f8:0f:f2:f0:58:ec:80:0c:79:04:b0:f3:69:cd:
+        e5:41:f2:f5:fc:44:ba:d9:4f:3f:32:fe:69:f3:6e:1f:32:94:
+        62:78:17:76:dc:d5:0c:19:a6:8b:97:70:e9:19:39:a8:fa:b1:
+        00:a6:18:6f:4b:2d:38:2f:1d:96:0b:87:98:86:c1:2c:75:44:
+        3c:0e:e1:eb:f4:c4:4e:02:c7:9f:f7:cc:30:8a:72:23:bf:44:
+        7c:7c:3f:f7:7c:b1:b1:d7:aa:4b:e4:1e:dd:ca:fd:5a:8d:2e:
+        aa:ff:49:af:a5:63:6f:88:31:26:7d:b3:a4:e3:4d:4d:45:d6:
+        44:7b:12:a8:6e:06:bb:81:c0:80:a4:5f:95:3b:d4:a5:4a:01:
+        1d:00:0e:7b:5d:20:29:97:d0:d6:88:73:f1:89:c1:01:54:85:
+        9b:9c:ef:41:6d:f9:b6:83:cc:65:ac:34:ca:bf:88:fc:34:4f:
+        7f:62:30:e2:d9:02:eb:c7:58:86:90:6f:e4:7e:5f:20:45:f2:
+        c4:a0:7e:ad:92:5a:85:8f:08:90:3d:e8:65:be:54:79:e2:62:
+        3c:5d:8e:57:36:2a:17:bb
+-----BEGIN CERTIFICATE-----
+MIIE1DCCArygAwIBAgIBBzANBgkqhkiG9w0BAQUFADB7MRIwEAYKCZImiZPyLGQB
+GRYCaW8xFTATBgoJkiaJk/IsZAEZFgVyZWFsbTEOMAwGA1UECgwFUmVhbG0xHjAc
+BgNVBAsMFVJlYWxtIFRlc3QgU2lnbmluZyBDQTEeMBwGA1UEAwwVUmVhbG0gVGVz
+dCBTaWduaW5nIENBMB4XDTE3MDUxNzIzMjg0OFoXDTE5MDUxNzIzMjg0OFowTzEZ
+MBcGCgmSJomT8ixkARkWCTEyNy4wLjAuMTEOMAwGA1UECgwFUmVhbG0xDjAMBgNV
+BAsMBVJlYWxtMRIwEAYDVQQDDAkxMjcuMC4wLjEwggEiMA0GCSqGSIb3DQEBAQUA
+A4IBDwAwggEKAoIBAQC3jJl7a1spgJyZt/64HgZsTVi9OLbME2r//fYmoHHSipTq
+Br7huFsDXpaOYRkPgF+4UUOXADhnRw4JuKuA0ZyBuIHbC7TF3no89ZzLvysS/rGd
+TqBKq67EERlUxRftWMNy8OVG3CFBTGMdMYXzuvataT7Yhp3EVjtSR10k3UCv+foD
+TE4tW9I03PCkGRMU9mx8HEe9fXmiCWGtP41OWcWupys5AOk0aGxv2GCiqSQzHJ+A
+tMaOujeYcT3dgmbY4MKBzEvRXVgmz4UKrP0IpUBQ//lz6CcYe3B1cyojx9cVvsrO
+V8nuu2202P3HIkcomwBeS6+CY8PXanROYBeUavuDAgMBAAGjgY4wgYswDgYDVR0P
+AQH/BAQDAgWgMAkGA1UdEwQCMAAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUF
+BwMCMB0GA1UdDgQWBBTGvfRJ9S52UkTx4s4ubPlZsVYUrTAfBgNVHSMEGDAWgBQn
+eeHa8RXQ6eWGMIfnH1/PJzpwtDAPBgNVHREECDAGhwR/AAABMA0GCSqGSIb3DQEB
+BQUAA4ICAQCbP3T0aXJrW3WItxBf4HOygr7ccRuj1qRurqZfUXhcgGQgISATFgjQ
+rhX2UiTZI1wk7WI7DuZfAEu/oZQ0KvsqRl9U5jt/voFb3+h4ph7O4oe5i+TYBB8Y
+xCmAeiGpVsUp7k4oM/qNkkaiMTHF+TEZ7R32x3WCZbYarbw0SvMYBaCj1JpQ8u+7
+xC+JEJVoF2qFds6IjBnP16pww9BZm5rA0KjQ08318I5eGauhrlTcB6xtbtjw7mVH
+3ikedhsdDmL13R32bq0nLo2+xKhBC7FEIj0ps1d0PjtBKBmNSO1lBVuOF6erRSTZ
+lQDkBOds2GtrKoleH/u08hwgVer1QJlYot7Dg+UBcPhT6Y2Vugsg0JnmtDEFVQCc
+9/OWfHRbfcdqruyQ+A/y8FjsgAx5BLDzac3lQfL1/ES62U8/Mv5p824fMpRieBd2
+3NUMGaaLl3DpGTmo+rEAphhvSy04Lx2WC4eYhsEsdUQ8DuHr9MROAsef98wwinIj
+v0R8fD/3fLGx16pL5B7dyv1ajS6q/0mvpWNviDEmfbOk401NRdZEexKobga7gcCA
+pF+VO9SlSgEdAA57XSApl9DWiHPxicEBVIWbnO9Bbfm2g8xlrDTKv4j8NE9/YjDi
+2QLrx1iGkG/kfl8gRfLEoH6tklqFjwiQPehlvlR54mI8XY5XNioXuw==
+-----END CERTIFICATE-----
+Certificate:
+    Data:
+        Version: 3 (0x2)
+        Serial Number: 2 (0x2)
+    Signature Algorithm: sha1WithRSAEncryption
+        Issuer: DC=io, DC=realm, O=Realm, OU=Realm Test Root CA, CN=Realm Test Root CA
+        Validity
+            Not Before: Sep  7 10:17:28 2016 GMT
+            Not After : Sep  7 10:17:28 2026 GMT
+        Subject: DC=io, DC=realm, O=Realm, OU=Realm Test Signing CA, CN=Realm Test Signing CA
+        Subject Public Key Info:
+            Public Key Algorithm: rsaEncryption
+                Public-Key: (4096 bit)
+                Modulus:
+                    00:bf:5b:5a:92:de:53:af:73:80:e1:3f:22:55:75:
+                    38:7d:9e:3b:65:49:aa:d3:a7:ac:04:be:4d:a5:c2:
+                    7d:03:30:c9:d8:41:d2:00:0a:cd:df:a3:68:a5:13:
+                    92:0a:71:22:c5:09:d4:75:97:73:a6:fa:37:64:a7:
+                    61:55:84:88:c1:be:eb:92:e0:a6:1b:00:04:c4:31:
+                    fd:4a:e9:14:56:c8:ad:0b:5c:73:c8:55:1c:e6:60:
+                    b1:3a:e3:c2:1d:41:1a:6d:57:12:df:da:c2:fe:40:
+                    e7:d1:a5:71:29:71:cb:0d:12:d5:c6:be:e8:ab:62:
+                    9c:11:70:b5:de:f1:20:b6:bc:05:af:7a:3f:e4:df:
+                    74:33:d6:bb:a3:33:59:f3:3a:a0:af:2d:ea:e7:16:
+                    c8:8f:25:f1:fb:27:73:80:46:e3:44:5b:b8:f5:4c:
+                    ba:8e:61:6d:5f:2c:c0:8f:e8:d2:bd:3a:e8:0d:fa:
+                    16:de:32:19:84:c8:6c:ad:11:14:5c:ce:44:be:46:
+                    be:f0:7b:83:27:21:f1:49:f5:ba:e5:bc:59:07:b0:
+                    c2:fb:4f:7e:56:76:eb:cb:14:f1:50:d6:b3:83:10:
+                    2b:b1:d3:80:68:98:45:67:70:9e:1b:ef:ff:28:d0:
+                    ef:1a:38:28:64:16:84:5a:d1:9f:05:7f:15:50:6a:
+                    ce:ac:08:25:e4:3f:d6:df:09:d9:59:b2:05:d9:b7:
+                    e3:94:ae:f6:c6:04:69:2e:d5:47:79:54:92:fb:72:
+                    f2:4c:09:2b:64:3a:3e:d1:30:76:0c:33:65:0a:08:
+                    55:34:44:83:05:e9:1e:51:c2:58:70:44:30:6c:ef:
+                    0a:e0:b0:e2:10:2b:e1:55:29:24:03:68:61:bb:44:
+                    58:ea:ad:03:b3:a9:0f:13:44:ff:ea:24:d3:7b:bd:
+                    25:78:57:79:7b:e4:4b:9e:bc:32:33:63:d5:f7:25:
+                    39:f7:c5:31:8d:9f:f2:76:a3:6b:bb:5b:a4:dd:cc:
+                    96:44:b4:44:9d:50:ef:2e:64:29:02:a3:c7:52:f7:
+                    36:92:c5:fa:fb:75:dd:25:67:3e:46:37:e3:9d:dc:
+                    de:f6:e5:6a:0a:95:7e:e9:90:3e:c9:b1:f8:74:07:
+                    b9:ff:f2:24:c9:84:f0:9f:3c:a7:ce:ca:64:be:77:
+                    1e:7c:93:29:6f:c8:8e:8d:74:d3:a8:1d:e1:db:9b:
+                    8b:c3:27:d8:0d:03:fc:7e:3e:25:19:6a:b8:a5:97:
+                    d0:7a:c3:13:33:bc:3a:8c:c7:25:e9:f9:cf:4a:c5:
+                    c3:26:63:42:ef:58:d7:42:06:30:8a:20:c8:cd:6a:
+                    40:8b:fa:88:e0:54:ed:60:09:69:26:12:43:b5:f2:
+                    93:6c:5b
+                Exponent: 65537 (0x10001)
+        X509v3 extensions:
+            X509v3 Key Usage: critical
+                Certificate Sign, CRL Sign
+            X509v3 Basic Constraints: critical
+                CA:TRUE, pathlen:0
+            X509v3 Subject Key Identifier: 
+                27:79:E1:DA:F1:15:D0:E9:E5:86:30:87:E7:1F:5F:CF:27:3A:70:B4
+            X509v3 Authority Key Identifier: 
+                keyid:84:70:71:2C:04:3B:D0:92:83:B5:FB:7C:7F:B0:61:0C:62:16:71:74
+
+    Signature Algorithm: sha1WithRSAEncryption
+         36:05:84:8c:88:21:08:a7:e2:bd:41:a8:27:7f:b7:c2:9a:86:
+         d7:21:fe:ed:4c:51:d1:29:df:35:4a:0e:ea:a0:b5:6c:cc:28:
+         2f:5e:bd:9f:97:68:be:aa:2a:ff:54:91:9e:ef:04:5d:0d:ec:
+         e7:98:35:10:78:50:b6:1f:17:96:a9:5e:9a:60:fb:68:e9:06:
+         7d:53:8c:58:b7:9a:47:e0:9f:c8:d1:43:1a:74:41:3f:ab:03:
+         21:35:88:8e:34:3a:25:b7:98:67:24:8b:d4:14:88:57:1c:99:
+         df:08:0c:bd:57:9f:53:db:3a:47:a4:e5:4c:29:38:e2:82:39:
+         45:ea:62:ca:1b:d8:95:cb:0a:e3:65:10:97:c7:10:d7:8b:2d:
+         db:fa:16:c6:c4:0c:81:26:e6:6f:f1:da:fb:79:c0:12:27:58:
+         9a:2b:95:a0:bd:73:88:ad:f5:ad:9b:cd:49:3d:ad:2c:02:84:
+         f8:88:be:3c:bf:d7:a2:28:e8:09:1e:7c:0d:b0:56:ad:e6:e3:
+         a7:11:56:58:66:83:dd:80:31:56:a6:15:45:e1:e3:52:49:f2:
+         f8:4c:3c:60:fd:d6:1b:45:61:ec:52:c1:d9:b9:da:b0:5d:5c:
+         3b:7f:ef:34:dd:48:26:19:5a:66:ad:b5:a7:87:6b:73:e8:ea:
+         d3:5d:cd:d1:3f:ac:77:e4:59:8d:4d:95:38:2f:e8:17:ff:8f:
+         67:c8:f8:5d:8e:86:b7:78:50:25:62:35:b9:07:15:f6:eb:65:
+         98:80:96:0b:d2:14:cb:54:1a:75:0c:ab:d9:c2:99:1b:20:da:
+         e3:a4:77:68:ef:75:cc:44:7f:66:f4:47:8c:7a:03:21:b6:6c:
+         c7:00:b2:50:15:84:5c:87:2a:fb:03:3a:d7:2d:df:52:96:80:
+         b6:c0:3d:a0:4b:65:67:5e:f3:bd:41:fe:f4:62:3a:de:0f:30:
+         8d:47:bf:8a:0b:f8:0e:d8:7b:84:93:60:e6:73:a9:60:11:f3:
+         5a:16:2c:2a:58:c0:dc:78:8f:66:c8:10:90:d5:da:03:35:e9:
+         a7:22:8a:04:14:cf:e1:fb:c9:46:5f:cc:29:ef:c7:22:bd:65:
+         a4:8a:47:e0:d5:10:0d:12:4c:a3:72:11:e6:5f:9e:5b:87:38:
+         eb:48:74:dd:86:26:ab:45:61:63:45:52:21:a9:35:65:84:30:
+         49:85:68:90:b6:23:0c:f0:10:7e:de:e1:e8:3d:94:6d:ff:44:
+         a0:2e:86:1c:4c:bb:ec:72:85:3b:d0:6d:49:69:47:a9:61:1f:
+         c5:39:cb:d6:7a:06:e9:41:52:df:00:00:c0:08:3f:21:bd:44:
+         52:c4:78:a5:fe:e5:33:fe
+-----BEGIN CERTIFICATE-----
+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
+pf7lM/4=
+-----END CERTIFICATE-----
diff --git a/tools/sync_test_server/keys/127_0_0_1-server.key.pem b/tools/sync_test_server/keys/127_0_0_1-server.key.pem
new file mode 100644
index 0000000000..8f46018e95
--- /dev/null
+++ b/tools/sync_test_server/keys/127_0_0_1-server.key.pem
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEowIBAAKCAQEAt4yZe2tbKYCcmbf+uB4GbE1YvTi2zBNq//32JqBx0oqU6ga+
+4bhbA16WjmEZD4BfuFFDlwA4Z0cOCbirgNGcgbiB2wu0xd56PPWcy78rEv6xnU6g
+SquuxBEZVMUX7VjDcvDlRtwhQUxjHTGF87r2rWk+2IadxFY7UkddJN1Ar/n6A0xO
+LVvSNNzwpBkTFPZsfBxHvX15oglhrT+NTlnFrqcrOQDpNGhsb9hgoqkkMxyfgLTG
+jro3mHE93YJm2ODCgcxL0V1YJs+FCqz9CKVAUP/5c+gnGHtwdXMqI8fXFb7KzlfJ
+7rtttNj9xyJHKJsAXkuvgmPD12p0TmAXlGr7gwIDAQABAoIBADZl3gr86zymmELa
+jAxHIcIxPi5+Q3bB/oE15CDYhkNOvQmKzEGbYKXj/5zc3A+DDVtUAkMbVpwNK/Tn
+nTSFauvrIdkoZAAMio/MfxbHZl2vzDYB2nGm5hnHs4kzDH9UQkCrclgI33Y5zFoX
+lkqAy6DjQzPq2ZEZuWUOL2XAiO5eF313OwfTfPGfswN3OWyUshdE7pxkD1JAwkU6
+f5oeOistu964OwJdCDdf2xF3q3Ix2Ll3JA2sccgvuh9If1Rqn9qOZ6yfElr/IClU
+Y73RBALvjc931cKtba1Syo7Brp/UysfH77DxSifsLp+MleYMVK2+EqYP1VaDnmjs
+5I2r/0kCgYEA78JKabi68+gTSk/4FlUw+nCQ4EV9p6JiZJZoSUAbfXYxy8dXGYk8
+rNsRFaoM8Fl3br3xpRSV2OyJyX3H9Y33jOWwXUU0E6Ao+K26FvHXNmmGZCDjWTF6
+LleMisYaFvU5L6E5PKgibiTf/Z8oT7fk0dqTJbWT+klxX9DHknSMv9UCgYEAw/uQ
+eEV2blUOcTXFh+9j0t4gBrixOvLn67siwFm3NQZV1PQAYfYqfRTZm4mpisaVMNKU
+juAp8GWvq/R1kVJfISoztLmzytuyRtFtuX9hUSuiv6HyYBPoVGoM2Mj52SZKE3pf
+XbkYQJdIgoaKvubem++eHrIQBcijio1Xmdl90fcCgYBiBcM6mgYFNjq8xRkeuFG/
+8kmpB4AqCx/DFCMq34TdtHcDY0pe7FbcLOw9OTr1AP7tTcb/wPzKpVpoAH7CC/rL
+phSG7YYvB+n4Ub6lJtbgLiB9y1xn2OylCbIyAnAkNrncmUO3Yt5Avd696FYo0XxB
+t+U1I5mOWHx7ufX+EJyCyQKBgQCYO6G1+ucKvyEvyT/93nMhCg/AiNiKXMLP9pYA
+6e+IzboAZ+SgM5I/hOGfkuhSdvzOZtSkwvVw2dwCayqjzmM8pMZzPMiu68bogaeE
+rrCOV6Hcz1QxU2VlpNcD0eFZzwc9aBIKAEwZaCoX0aCWt0j1wcSGPXR6uaZnanFA
+fZPhcwKBgD3HayHdVtdCxdeFF01pDf1wQFRNgGrOPFPB3PIYC8Dpc+VpHYZNrkQ0
+AJqs4elBq1KeW8Et23KuVjYkMLA7NeefnOZA1XkAS9SISOwDB083j9BbsM/Uc+ug
+qFl9DVG+S56WuyjfNDiVm95jcalD8UctQgqIxSj2u8QfO3LOyjLC
+-----END RSA PRIVATE KEY-----
diff --git a/tools/sync_test_server/start_server.sh b/tools/sync_test_server/start_server.sh
index cf49b3247f..37828b38d7 100755
--- a/tools/sync_test_server/start_server.sh
+++ b/tools/sync_test_server/start_server.sh
@@ -7,10 +7,11 @@ ROS_DE_VERSION=$(grep REALM_OBJECT_SERVER_DE_VERSION $DOCKERFILE_DIR/../../depen
 
 TMP_DIR=$(mktemp -d /tmp/sync-test.XXXX) || { echo "Failed to mktemp $TEST_TEMP_DIR" ; exit 1 ; }
 
+adb reverse tcp:9443 tcp:9443 && \
 adb reverse tcp:9080 tcp:9080 && \
 adb reverse tcp:8888 tcp:8888 || { echo "Failed to reverse adb port." ; exit 1 ; }
 
 docker build $DOCKERFILE_DIR --build-arg ROS_DE_VERSION=$ROS_DE_VERSION -t sync-test-server || { echo "Failed to build Docker image." ; exit 1 ; }
 
 echo "See log files in $TMP_DIR"
-docker run -p 9080:9080 -p 8888:8888 -v$TMP_DIR:/tmp --name sync-test-server sync-test-server
+docker run -p 9080:9080 -p 9443:9443 -p 8888:8888 -v$TMP_DIR:/tmp --name sync-test-server sync-test-server
