diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0249ad15df..a61380393b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,21 @@
+## 5.15.0(YYYY-MM-DD)
+
+### Enhancements
+* [ObjectServer] Added support for Client Resync which automatically will recover the local Realm in case the server is rolled back. This largely replaces the Client Reset mechanism. Can be configured using `SyncConfiguration.Builder.clientResyncMode()`. (Issue [#6487](https://github.com/realm/realm-java/issues/6487))
+
+### Fixed
+* None.
+
+### Compatibility
+* Realm Object Server: 3.21.0 or later.
+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)
+* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
+
+### Internal
+* Updated to Object Store commit: 2786752758a63c8d9c77b8caee0a97d9eddb11ca.
+* Implemented direct access to sync workers on Cloud, bypassing the Sync Proxy: the binding will override the sync session's url prefix if the token refresh response for a realm contains a sync worker path field.
+
+
 ## 5.14.1(YYYY-MM-DD)
 
 ### Enhancements
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
index 5331cb1cd2..8eaf910d65 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
@@ -72,7 +72,11 @@ class Realm implements Plugin<Project> {
 
         project.android.registerTransform(new RealmTransformer(project))
 
-        project.repositories.add(project.getRepositories().jcenter())
+        if (project.repositories.isEmpty()) {
+            // If no repository was defined, we add jCenter
+            project.repositories.add(project.getRepositories().jcenter())
+        }
+
         project.dependencies.add(dependencyConfigurationName, "io.realm:realm-annotations:${Version.VERSION}")
         if (usesAptPlugin) {
             project.dependencies.add("apt", "io.realm:realm-annotations-processor:${Version.VERSION}")
diff --git a/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy b/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy
index 374d1e4f35..64e7208c02 100644
--- a/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy
+++ b/gradle-plugin/src/test/groovy/io/realm/gradle/PluginTest.groovy
@@ -108,6 +108,71 @@ class PluginTest {
         }
     }
 
+    @Test
+    void pluginAddsRightRepositories_noRepositorySet() {
+        project.buildscript {
+            dependencies {
+                classpath "com.android.tools.build:gradle:${projectDependencies.get("GRADLE_BUILD_TOOLS")}"
+                classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
+            }
+        }
+
+        def manifest = project.file("src/main/AndroidManifest.xml")
+        manifest.parentFile.mkdirs()
+        manifest.text = '<manifest xmlns:android="http://schemas.android.com/apk/res/android"  package="com.realm.test"></manifest>'
+
+        project.apply plugin: 'com.android.application'
+        project.apply plugin: 'realm-android'
+
+        project.android {
+            compileSdkVersion 27
+
+            defaultConfig {
+                minSdkVersion 16
+                targetSdkVersion 27
+            }
+        }
+
+        project.evaluate()
+
+        assertTrue(project.repositories.size() == 1)
+        assertTrue(project.repositories.contains(project.getRepositories().jcenter()))
+    }
+
+    @Test
+    void pluginAddsRightRepositories_withRepositoriesSet() {
+        project.buildscript {
+            repositories {
+                google()
+            }
+            dependencies {
+                classpath "com.android.tools.build:gradle:${projectDependencies.get("GRADLE_BUILD_TOOLS")}"
+                classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
+            }
+        }
+
+        def manifest = project.file("src/main/AndroidManifest.xml")
+        manifest.parentFile.mkdirs()
+        manifest.text = '<manifest xmlns:android="http://schemas.android.com/apk/res/android"  package="com.realm.test"></manifest>'
+
+        project.apply plugin: 'com.android.application'
+        project.apply plugin: 'realm-android'
+
+        project.android {
+            compileSdkVersion 27
+
+            defaultConfig {
+                minSdkVersion 16
+                targetSdkVersion 27
+            }
+        }
+
+        project.evaluate()
+
+        assertTrue(project.getRepositories().size() == 1)
+        assertTrue(project.repositories.contains(project.getRepositories().google()))
+    }
+
     private static boolean containsUrl(RepositoryHandler repositories, String url) {
         for (repo in repositories) {
             if (repo.properties.get('url').toString() == url) {
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
index a5c0c12c32..0a3977ebd0 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
@@ -125,6 +125,7 @@ public void errorHandler_clientResetReported() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, url)
+                .clientResyncMode(ClientResyncMode.MANUAL)
                 .errorHandler((session, error) -> {
                     if (error.getErrorCode() != ErrorCode.CLIENT_RESET) {
                         fail("Wrong error " + error.toString());
@@ -156,6 +157,7 @@ public void errorHandler_manualExecuteClientReset() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, url)
+                .clientResyncMode(ClientResyncMode.MANUAL)
                 .errorHandler((session, error) -> {
                     if (error.getErrorCode() != ErrorCode.CLIENT_RESET) {
                         fail("Wrong error " + error.toString());
@@ -194,6 +196,7 @@ public void errorHandler_useBackupSyncConfigurationForClientReset() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, url)
+                .clientResyncMode(ClientResyncMode.MANUAL)
                 .schema(StringOnly.class)
                 .errorHandler((session, error) -> {
                     if (error.getErrorCode() != ErrorCode.CLIENT_RESET) {
@@ -253,6 +256,7 @@ public void errorHandler_useBackupSyncConfigurationAfterClientReset() {
         SyncUser user = createTestUser();
         String url = "realm://objectserver.realm.io/default";
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, url)
+                .clientResyncMode(ClientResyncMode.MANUAL)
                 .errorHandler((session, error) -> {
                     if (error.getErrorCode() != ErrorCode.CLIENT_RESET) {
                         fail("Wrong error " + error.toString());
@@ -335,6 +339,7 @@ public void errorHandler_useClientResetEncrypted() {
         String url = "realm://objectserver.realm.io/default";
         final byte[] randomKey = TestHelper.getRandomKey();
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, url)
+                .clientResyncMode(ClientResyncMode.MANUAL)
                 .encryptionKey(randomKey)
                 .modules(new StringOnlyModule())
                 .errorHandler((session, error) -> {
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
index 8b3438af3c..a1205d6a06 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
@@ -519,4 +519,53 @@ public void automatic_convertsAuthUrl() {
             user.logOut();
         }
     }
+
+    @Test
+    public void clientResyncMode() {
+        SyncUser user = createTestUser();
+        String url = "realm://objectserver.realm.io/default";
+
+        // Default mode for full Realms
+        SyncConfiguration config = user.createConfiguration(url)
+                .fullSynchronization()
+                .build();
+        assertEquals(ClientResyncMode.RECOVER_LOCAL_REALM, config.getClientResyncMode());
+        
+        // Default mode for query-based Realms
+        config = user.createConfiguration(url).build();
+        assertEquals(ClientResyncMode.MANUAL, config.getClientResyncMode());
+
+        // Manually set the mode
+        config = user.createConfiguration(url)
+                .clientResyncMode(ClientResyncMode.MANUAL)
+                .build();
+        assertEquals(ClientResyncMode.MANUAL, config.getClientResyncMode());
+    }
+
+    @Test
+    public void clientResyncMode_throwsOnNull() {
+        SyncUser user = createTestUser();
+        String url = "realm://objectserver.realm.io/default";
+        SyncConfiguration.Builder config = user.createConfiguration(url);
+        try {
+            //noinspection ConstantConditions
+            config.clientResyncMode(null);
+            fail();
+        } catch (IllegalArgumentException ignore) {
+        }
+    }
+
+    @Test
+    public void clientResyncMode_throwsIfNotManualForQueryBasedRealms() {
+        SyncUser user = createTestUser();
+        String url = "realm://objectserver.realm.io/default";
+        SyncConfiguration.Builder config = user.createConfiguration(url)
+                .clientResyncMode(ClientResyncMode.RECOVER_LOCAL_REALM);
+        try {
+            //noinspection ConstantConditions
+            config.build();
+            fail();
+        } catch (IllegalStateException ignore) {
+        }
+    }
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_SyncSession.cpp b/realm/realm-library/src/main/cpp/io_realm_SyncSession.cpp
index 89849efc4f..35ef67a028 100644
--- a/realm/realm-library/src/main/cpp/io_realm_SyncSession.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_SyncSession.cpp
@@ -160,22 +160,19 @@ JNIEXPORT jboolean JNICALL Java_io_realm_SyncSession_nativeWaitForDownloadComple
             static JavaMethod java_notify_result_method(env, java_sync_session_class, "notifyAllChangesSent",
                                                         "(ILjava/lang/Long;Ljava/lang/String;)V");
             JavaGlobalRef java_session_object_ref(env, session_object);
-
-            bool listener_registered =
-                session->wait_for_download_completion([java_session_object_ref, callback_id](std::error_code error) {
-                    JNIEnv* env = JniUtils::get_env(true);
-                    JavaLocalRef<jobject> java_error_code;
-                    JavaLocalRef<jstring> java_error_message;
-                    if (error != std::error_code{}) {
-                        java_error_code =
-                            JavaLocalRef<jobject>(env, JavaClassGlobalDef::new_long(env, error.value()));
-                        java_error_message = JavaLocalRef<jstring>(env, env->NewStringUTF(error.message().c_str()));
-                    }
-                    env->CallVoidMethod(java_session_object_ref.get(), java_notify_result_method,
-                                        callback_id, java_error_code.get(), java_error_message.get());
-                });
-
-            return to_jbool(listener_registered);
+            session->wait_for_download_completion([java_session_object_ref, callback_id](std::error_code error) {
+                JNIEnv* env = JniUtils::get_env(true);
+                JavaLocalRef<jobject> java_error_code;
+                JavaLocalRef<jstring> java_error_message;
+                if (error != std::error_code{}) {
+                    java_error_code =
+                        JavaLocalRef<jobject>(env, JavaClassGlobalDef::new_long(env, error.value()));
+                    java_error_message = JavaLocalRef<jstring>(env, env->NewStringUTF(error.message().c_str()));
+                }
+                env->CallVoidMethod(java_session_object_ref.get(), java_notify_result_method,
+                                    callback_id, java_error_code.get(), java_error_message.get());
+            });
+            return to_jbool(JNI_TRUE);
         }
     }
     CATCH_STD()
@@ -198,20 +195,18 @@ JNIEXPORT jboolean JNICALL Java_io_realm_SyncSession_nativeWaitForUploadCompleti
                                                         "(ILjava/lang/Long;Ljava/lang/String;)V");
             JavaGlobalRef java_session_object_ref(env, session_object);
 
-            bool listener_registered =
-                session->wait_for_upload_completion([java_session_object_ref, callback_id](std::error_code error) {
-                    JNIEnv* env = JniUtils::get_env(true);
-                    JavaLocalRef<jobject> java_error_code;
-                    JavaLocalRef<jstring> java_error_message;
-                    if (error != std::error_code{}) {
-                        java_error_code = JavaLocalRef<jobject>(env, JavaClassGlobalDef::new_long(env, error.value()));
-                        java_error_message = JavaLocalRef<jstring>(env, env->NewStringUTF(error.message().c_str()));
-                    }
-                    env->CallVoidMethod(java_session_object_ref.get(), java_notify_result_method,
-                                        callback_id, java_error_code.get(), java_error_message.get());
-                });
-
-            return to_jbool(listener_registered);
+            session->wait_for_upload_completion([java_session_object_ref, callback_id](std::error_code error) {
+                JNIEnv* env = JniUtils::get_env(true);
+                JavaLocalRef<jobject> java_error_code;
+                JavaLocalRef<jstring> java_error_message;
+                if (error != std::error_code{}) {
+                    java_error_code = JavaLocalRef<jobject>(env, JavaClassGlobalDef::new_long(env, error.value()));
+                    java_error_message = JavaLocalRef<jstring>(env, env->NewStringUTF(error.message().c_str()));
+                }
+                env->CallVoidMethod(java_session_object_ref.get(), java_notify_result_method,
+                                    callback_id, java_error_code.get(), java_error_message.get());
+            });
+            return JNI_TRUE;
         }
     }
     CATCH_STD()
@@ -361,3 +356,17 @@ JNIEXPORT void JNICALL Java_io_realm_SyncSession_nativeStop(JNIEnv* env, jclass,
     }
     CATCH_STD()
 }
+
+JNIEXPORT void JNICALL Java_io_realm_SyncSession_nativeSetUrlPrefix(JNIEnv* env, jclass, jstring j_local_realm_path, jstring j_url_prefix)
+{
+    TR_ENTER()
+    try {
+        JStringAccessor local_realm_path(env, j_local_realm_path);
+        auto session = SyncManager::shared().get_existing_session(local_realm_path);
+        if (session) {
+            JStringAccessor url_prefix(env, j_url_prefix);
+            session->set_url_prefix(url_prefix);
+        }
+    }
+    CATCH_STD()
+}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index f49b8a57ba..dac48e2756 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -256,7 +256,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeEnableChangeNo
 JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSetSyncConfig(
     JNIEnv* env, jclass, jlong native_ptr, jstring j_sync_realm_url, jstring j_auth_url, jstring j_user_id,
     jstring j_refresh_token, jboolean j_is_partial, jbyte j_session_stop_policy, jstring j_url_prefix,
-    jstring j_custom_auth_header_name, jobjectArray j_custom_headers_array)
+    jstring j_custom_auth_header_name, jobjectArray j_custom_headers_array, jbyte j_client_reset_mode)
 {
     TR_ENTER_PTR(native_ptr)
     auto& config = *reinterpret_cast<Realm::Config*>(native_ptr);
@@ -370,6 +370,12 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
         config.sync_config->bind_session_handler = std::move(bind_handler);
         config.sync_config->error_handler = std::move(error_handler);
         config.sync_config->is_partial = (j_is_partial == JNI_TRUE);
+        switch (j_client_reset_mode) {
+            case io_realm_internal_OsRealmConfig_CLIENT_RESYNC_MODE_RECOVER: config.sync_config->client_resync_mode = realm::ClientResyncMode::Recover; break;
+            case io_realm_internal_OsRealmConfig_CLIENT_RESYNC_MODE_DISCARD: config.sync_config->client_resync_mode = realm::ClientResyncMode::DiscardLocal; break;
+            case io_realm_internal_OsRealmConfig_CLIENT_RESYNC_MODE_MANUAL: config.sync_config->client_resync_mode = realm::ClientResyncMode::Manual; break;
+            default: throw std::logic_error(util::format("Unsupported value for ClientResyncMode: %1", j_client_reset_mode));
+        }
 
         if (j_url_prefix) {
             JStringAccessor url_prefix(env, j_url_prefix);
@@ -475,5 +481,4 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsRealmConfig_nativeSetSyncConfigP
     }
     CATCH_STD()
 }
-
 #endif
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index bcc6a7524e..2786752758 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit bcc6a7524e52071bfcd35cf740f506e0cc6a595e
+Subproject commit 2786752758a63c8d9c77b8caee0a97d9eddb11ca
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
index 4d1914053b..5cc12b9ca5 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java
@@ -66,7 +66,7 @@ public void realmClosed(RealmConfiguration configuration) {
     }
 
     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {
-        return new Object[11];
+        return new Object[12];
     }
 
     public static ObjectServerFacade getFacade(boolean needSyncFacade) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
index 95643c1ce4..7891f469d3 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java
@@ -169,6 +169,11 @@ public Builder fifoFallbackDir(File dir) {
     private static final byte SYNCSESSION_STOP_POLICY_VALUE_AFTER_CHANGES_UPLOADED = 2;
     private static final byte PROXYCONFIG_TYPE_VALUE_HTTP = 0;
 
+    // Public to be usable from the io.realm package
+    public static final byte CLIENT_RESYNC_MODE_RECOVER = 0;
+    public static final byte CLIENT_RESYNC_MODE_DISCARD = 1;
+    public static final byte CLIENT_RESYNC_MODE_MANUAL = 2;
+
     private final static long nativeFinalizerPtr = nativeGetFinalizerPtr();
 
     private final RealmConfiguration realmConfiguration;
@@ -212,6 +217,7 @@ private OsRealmConfig(final RealmConfiguration config,
         boolean isPartial = (Boolean.TRUE.equals(syncConfigurationOptions[7]));
         String urlPrefix = (String)(syncConfigurationOptions[8]);
         String customAuthorizationHeaderName = (String)(syncConfigurationOptions[9]);
+        Byte clientResyncMode = (Byte) syncConfigurationOptions[11];
 
         // Convert the headers into a String array to make it easier to send through JNI
         // [key1, value1, key2, value2, ...]
@@ -280,7 +286,8 @@ private OsRealmConfig(final RealmConfiguration config,
                     sessionStopPolicy,
                     urlPrefix,
                     customAuthorizationHeaderName,
-                    customHeaders);
+                    customHeaders,
+                    clientResyncMode);
             try {
                 resolvedRealmURI = new URI(resolvedSyncRealmUrl);
             } catch (URISyntaxException e) {
@@ -376,7 +383,7 @@ private static native String nativeCreateAndSetSyncConfig(long nativePtr, String
                                                               String userId, String refreshToken, boolean isPartial,
                                                               byte sessionStopPolicy, String urlPrefix,
                                                               String customAuthorizationHeaderName,
-                                                              String[] customHeaders);
+                                                              String[] customHeaders, byte clientResetMode);
 
     private static native void nativeSetSyncConfigSslSettings(long nativePtr,
                                                               boolean validateSsl, String trustCertificatePath);
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ClientResyncMode.java b/realm/realm-library/src/objectServer/java/io/realm/ClientResyncMode.java
new file mode 100644
index 0000000000..d94f7c40f2
--- /dev/null
+++ b/realm/realm-library/src/objectServer/java/io/realm/ClientResyncMode.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2019 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm;
+
+import io.realm.internal.OsRealmConfig;
+
+/**
+ * Enum describing what should happen in case of a Client Resync.
+ * <p>
+ * A Client Resync is triggered if the device and server cannot agree on a common shared history
+ * for the Realm file, thus making it impossible for the device to upload or receive any changes.
+ * This can happen if the server is rolled back or restored from backup.
+ * <p>
+ * <b>IMPORTANT:</b> Just having the device offline will not trigger a Client Resync.
+ */
+public enum ClientResyncMode {
+
+    /**
+     * Realm will compare the local Realm with the Realm on the server and automatically transfer
+     * any changes from the local Realm that makes sense to the Realm provided by the server.
+     * <p>
+     * This is the default mode for fully synchronized Realms. It is not yet supported by
+     * Query-based Realms.
+     */
+    RECOVER_LOCAL_REALM(OsRealmConfig.CLIENT_RESYNC_MODE_RECOVER),
+
+    /**
+     * The local Realm will be discarded and replaced with the server side Realm.
+     * All local changes will be lost.
+     * <p>
+     * This mode is not yet supported by Query-based Realms.
+     */
+    DISCARD_LOCAL_REALM(OsRealmConfig.CLIENT_RESYNC_MODE_DISCARD),
+
+    /**
+     * A manual Client Resync is also known as a Client Reset.
+     * <p>
+     * A {@link io.realm.ClientResetRequiredError} will be sent to
+     * {@link io.realm.SyncSession.ErrorHandler#onError(SyncSession, ObjectServerError)}, triggering
+     * a Client Reset. Doing this provides a handle to both the old and new Realm file, enabling
+     * full control of which changes to move, if any.
+     * <p>
+     * This is the only supported mode for Query-based Realms.
+     *
+     * @see io.realm.SyncSession.ErrorHandler#onError(SyncSession, ObjectServerError) for more
+     * information about when and why Client Reset occurs and how to deal with it.
+     */
+    MANUAL(OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL);
+
+    final byte value;
+
+    ClientResyncMode(byte value) {
+        this.value = value;
+    }
+
+    public byte getNativeValue() {
+        return value;
+    }
+
+    }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index ed437ef308..832fc5ec06 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -114,6 +114,7 @@
     private final OsRealmConfig.SyncSessionStopPolicy sessionStopPolicy;
     private final boolean isPartial;
     @Nullable private final String syncUrlPrefix;
+    private final ClientResyncMode clientResyncMode;
 
     private SyncConfiguration(File directory,
                               String filename,
@@ -140,7 +141,8 @@ private SyncConfiguration(File directory,
                               OsRealmConfig.SyncSessionStopPolicy sessionStopPolicy,
                               boolean isPartial,
                               CompactOnLaunchCallback compactOnLaunch,
-                              @Nullable String syncUrlPrefix) {
+                              @Nullable String syncUrlPrefix,
+                              ClientResyncMode clientResyncMode) {
         super(directory,
                 filename,
                 canonicalPath,
@@ -170,6 +172,7 @@ private SyncConfiguration(File directory,
         this.sessionStopPolicy = sessionStopPolicy;
         this.isPartial = isPartial;
         this.syncUrlPrefix = syncUrlPrefix;
+        this.clientResyncMode = clientResyncMode;
     }
 
     /**
@@ -293,13 +296,20 @@ public boolean equals(Object o) {
 
         if (deleteRealmOnLogout != that.deleteRealmOnLogout) return false;
         if (syncClientValidateSsl != that.syncClientValidateSsl) return false;
+        if (waitForInitialData != that.waitForInitialData) return false;
+        if (initialDataTimeoutMillis != that.initialDataTimeoutMillis) return false;
+        if (isPartial != that.isPartial) return false;
         if (!serverUrl.equals(that.serverUrl)) return false;
         if (!user.equals(that.user)) return false;
         if (!errorHandler.equals(that.errorHandler)) return false;
-        if (serverCertificateAssetName != null ? !serverCertificateAssetName.equals(that.serverCertificateAssetName) : that.serverCertificateAssetName != null) return false;
-        if (serverCertificateFilePath != null ? !serverCertificateFilePath.equals(that.serverCertificateFilePath) : that.serverCertificateFilePath != null) return false;
-        if (waitForInitialData != that.waitForInitialData) return false;
-        return true;
+        if (serverCertificateAssetName != null ? !serverCertificateAssetName.equals(that.serverCertificateAssetName) : that.serverCertificateAssetName != null)
+            return false;
+        if (serverCertificateFilePath != null ? !serverCertificateFilePath.equals(that.serverCertificateFilePath) : that.serverCertificateFilePath != null)
+            return false;
+        if (sessionStopPolicy != that.sessionStopPolicy) return false;
+        if (syncUrlPrefix != null ? !syncUrlPrefix.equals(that.syncUrlPrefix) : that.syncUrlPrefix != null)
+            return false;
+        return clientResyncMode == that.clientResyncMode;
     }
 
     @Override
@@ -313,23 +323,44 @@ public int hashCode() {
         result = 31 * result + (serverCertificateAssetName != null ? serverCertificateAssetName.hashCode() : 0);
         result = 31 * result + (serverCertificateFilePath != null ? serverCertificateFilePath.hashCode() : 0);
         result = 31 * result + (waitForInitialData ? 1 : 0);
+        result = 31 * result + (int) (initialDataTimeoutMillis ^ (initialDataTimeoutMillis >>> 32));
+        result = 31 * result + sessionStopPolicy.hashCode();
+        result = 31 * result + (isPartial ? 1 : 0);
+        result = 31 * result + (syncUrlPrefix != null ? syncUrlPrefix.hashCode() : 0);
+        result = 31 * result + clientResyncMode.hashCode();
         return result;
     }
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder(super.toString());
-        stringBuilder.append("\n");
-        stringBuilder.append("serverUrl: " + serverUrl);
-        stringBuilder.append("\n");
-        stringBuilder.append("user: " + user);
-        stringBuilder.append("\n");
-        stringBuilder.append("errorHandler: " + errorHandler);
-        stringBuilder.append("\n");
-        stringBuilder.append("deleteRealmOnLogout: " + deleteRealmOnLogout);
-        stringBuilder.append("\n");
-        stringBuilder.append("waitForInitialRemoteData: " + waitForInitialData);
-        return stringBuilder.toString();
+        StringBuilder sb = new StringBuilder(super.toString());
+        sb.append("\n");
+        sb.append("serverUrl: ").append(serverUrl);
+        sb.append("\n");
+        sb.append("user: ").append(user);
+        sb.append("\n");
+        sb.append("errorHandler: ").append(errorHandler);
+        sb.append("\n");
+        sb.append("deleteRealmOnLogout: ").append(deleteRealmOnLogout);
+        sb.append("\n");
+        sb.append("syncClientValidateSsl: ").append(syncClientValidateSsl);
+        sb.append("\n");
+        sb.append("serverCertificateAssetName: ").append(serverCertificateAssetName);
+        sb.append("\n");
+        sb.append("serverCertificateFilePath: ").append(serverCertificateFilePath);
+        sb.append("\n");
+        sb.append("waitForInitialData: ").append(waitForInitialData);
+        sb.append("\n");
+        sb.append("initialDataTimeoutMillis: ").append(initialDataTimeoutMillis);
+        sb.append("\n");
+        sb.append("sessionStopPolicy: ").append(sessionStopPolicy);
+        sb.append("\n");
+        sb.append("isPartial: ").append(isPartial);
+        sb.append("\n");
+        sb.append("syncUrlPrefix: ").append(syncUrlPrefix);
+        sb.append("\n");
+        sb.append("clientResyncMode: ").append(clientResyncMode);
+        return sb.toString();
     }
 
     /**
@@ -469,6 +500,13 @@ public String getUrlPrefix() {
         return syncUrlPrefix;
     }
 
+    /**
+     * Returns what happens in case of a Client Resync.
+     */
+    public ClientResyncMode getClientResyncMode() {
+        return clientResyncMode;
+    }
+
     /**
      * Builder used to construct instances of a SyncConfiguration in a fluent manner.
      */
@@ -508,6 +546,8 @@ public String getUrlPrefix() {
         private boolean isPartial = true; // Partial Synchronization is enabled by default
         private CompactOnLaunchCallback compactOnLaunch;
         private String syncUrlPrefix = null;
+        @Nullable // null means the user hasn't explicitly set one. An appropriate default is chosen when calling build()
+        private ClientResyncMode clientResyncMode = null;
 
         /**
          * Creates an instance of the Builder for the SyncConfiguration. This SyncConfiguration
@@ -1101,6 +1141,23 @@ public Builder deleteRealmOnLogout() {
         }
         */
 
+        /**
+         * Configure the behavior in case of a Client Resync.
+         * <p>
+         * The default mode is {@link ClientResyncMode#RECOVER_LOCAL_REALM}.
+         *
+         * @param mode what should happen when a Client Resync happens
+         * @see ClientResyncMode for more information about what a Client Resync is.
+         */
+        public Builder clientResyncMode(ClientResyncMode mode) {
+            //noinspection ConstantConditions
+            if (mode == null) {
+                throw new IllegalArgumentException("Non-null 'mode' required.");
+            }
+            clientResyncMode = mode;
+            return this;
+        }
+
         /**
          * Creates the RealmConfiguration based on the builder parameters.
          *
@@ -1132,6 +1189,15 @@ public SyncConfiguration build() {
                         " access token. Use a path without /~/.");
             }
 
+            // Set the default Client Resync Mode based on the current type of Realm.
+            // Eventually RECOVER_LOCAL_REALM should be the default for all types.
+            if (clientResyncMode == null) {
+                clientResyncMode = (isPartial) ? ClientResyncMode.MANUAL : ClientResyncMode.RECOVER_LOCAL_REALM;
+            }
+            if (isPartial && clientResyncMode != ClientResyncMode.MANUAL) {
+                throw new IllegalStateException("Query-based sync only supports manual Client Resync. It was: " + clientResyncMode);
+            }
+
             if (rxFactory == null && isRxJavaAvailable()) {
                 rxFactory = new RealmObservableFactory();
             }
@@ -1225,7 +1291,8 @@ public SyncConfiguration build() {
                     sessionStopPolicy,
                     isPartial,
                     compactOnLaunch,
-                    syncUrlPrefix
+                    syncUrlPrefix,
+                    clientResyncMode
             );
         }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index 431499422b..d8686a8ae4 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -49,6 +49,7 @@
 import io.realm.internal.network.ExponentialBackoffTask;
 import io.realm.internal.network.NetworkStateReceiver;
 import io.realm.internal.objectserver.Token;
+import io.realm.internal.objectserver.SyncWorker;
 import io.realm.internal.util.Pair;
 import io.realm.log.RealmLog;
 
@@ -879,6 +880,12 @@ protected void onSuccess(AuthenticateResponse response) {
                 synchronized (SyncSession.this) {
                     if (!isClosed && !Thread.currentThread().isInterrupted() && !refreshTokenNetworkRequest.isCancelled()) {
                         RealmLog.debug("Access Token refreshed successfully, Sync URL: " + configuration.getServerUrl());
+
+                        SyncWorker syncWorker = response.getSyncWorker();
+                        if (syncWorker != null) {
+                            nativeSetUrlPrefix(configuration.getPath(), syncWorker.path());
+                        }
+
                         URI realmUrl = configuration.getServerUrl();
                         if (nativeRefreshAccessToken(configuration.getPath(), response.getAccessToken().value(), realmUrl.toString())) {
                             // replace the user old access_token
@@ -971,4 +978,5 @@ public void throwExceptionIfNeeded() {
     private static native byte nativeGetConnectionState(String localRealmPath);
     private static native void nativeStart(String localRealmPath);
     private static native void nativeStop(String localRealmPath);
+    private static native void nativeSetUrlPrefix(String localRealmPath, String urlPrefix);
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
index a5949843ab..3ad43b189a 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java
@@ -116,10 +116,11 @@ public void realmClosed(RealmConfiguration configuration) {
                     !syncConfig.isFullySynchronizedRealm(),
                     urlPrefix,
                     customAuthorizationHeaderName,
-                    customHeaders
+                    customHeaders,
+                    syncConfig.getClientResyncMode().getNativeValue()
             };
         } else {
-            return new Object[11];
+            return new Object[12];
         }
     }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
index fc968d6b12..14b205cc06 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
@@ -25,6 +25,7 @@
 import io.realm.ErrorCode;
 import io.realm.ObjectServerError;
 import io.realm.internal.objectserver.Token;
+import io.realm.internal.objectserver.SyncWorker;
 import io.realm.log.RealmLog;
 import okhttp3.Response;
 
@@ -35,9 +36,11 @@
 
     private static final String JSON_FIELD_ACCESS_TOKEN = "access_token";
     private static final String JSON_FIELD_REFRESH_TOKEN = "refresh_token";
+    private static final String JSON_FIELD_SYNC_WORKER = "sync_worker";
 
     private final Token accessToken;
     private final Token refreshToken;
+    private final SyncWorker syncWorker;
 
     /**
      * Helper method for creating the proper Authenticate response. This method will set the appropriate error
@@ -109,6 +112,7 @@ private AuthenticateResponse(ObjectServerError error) {
         setError(error);
         this.accessToken = null;
         this.refreshToken = null;
+        this.syncWorker = null;
     }
 
     /**
@@ -121,11 +125,13 @@ private AuthenticateResponse(String serverResponse) {
         ObjectServerError error;
         Token accessToken;
         Token refreshToken;
+        SyncWorker syncWorker;
         String debugMessage;
         try {
             JSONObject obj = new JSONObject(serverResponse);
             accessToken = obj.has(JSON_FIELD_ACCESS_TOKEN) ? Token.from(obj.getJSONObject(JSON_FIELD_ACCESS_TOKEN)) : null;
             refreshToken = obj.has(JSON_FIELD_REFRESH_TOKEN) ? Token.from(obj.getJSONObject(JSON_FIELD_REFRESH_TOKEN)) : null;
+            syncWorker = obj.has(JSON_FIELD_SYNC_WORKER) ? SyncWorker.from(obj.getJSONObject(JSON_FIELD_SYNC_WORKER)) : null;
             error = null;
             if (accessToken == null) {
                 debugMessage = "accessToken = null";
@@ -135,6 +141,7 @@ private AuthenticateResponse(String serverResponse) {
         } catch (JSONException ex) {
             accessToken = null;
             refreshToken = null;
+            syncWorker = null;
             String exceptionMessage = String.format(Locale.US, "Server response could not be parsed as JSON:%n%s", serverResponse);
             //noinspection ThrowableInstanceNeverThrown
             error = new ObjectServerError(ErrorCode.JSON_EXCEPTION, exceptionMessage, ex);
@@ -144,6 +151,7 @@ private AuthenticateResponse(String serverResponse) {
         setError(error);
         this.accessToken = accessToken;
         this.refreshToken = refreshToken;
+        this.syncWorker = syncWorker;
     }
 
     public Token getAccessToken() {
@@ -154,4 +162,7 @@ public Token getRefreshToken() {
         return refreshToken;
     }
 
+    public SyncWorker getSyncWorker() {
+        return syncWorker;
+    }
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/objectserver/SyncWorker.java b/realm/realm-library/src/objectServer/java/io/realm/internal/objectserver/SyncWorker.java
new file mode 100644
index 0000000000..3fca1710d5
--- /dev/null
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/objectserver/SyncWorker.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2019 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.internal.objectserver;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * This class represents a value describing a sync worker on the Realm Cloud.
+ */
+public class SyncWorker {
+
+    private static final String KEY_PATH = "path";
+
+    private final String path;
+
+    public static SyncWorker from(JSONObject syncWorker) throws JSONException {
+        String path = syncWorker.getString(KEY_PATH);
+
+        return new SyncWorker(path);
+    }
+
+    public SyncWorker(String path) {
+        this.path = path;
+    }
+
+    public String path() {
+        return path;
+    }
+}
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
index 4582e819c1..6ead0af6ea 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/PermissionManagerTests.java
@@ -227,59 +227,13 @@ public void onSuccess(RealmResults<Permission> permissions) {
                 pm.getPermissions(new PermissionManager.PermissionsCallback() {
                     @Override
                     public void onSuccess(RealmResults<Permission> permissions) {
-                        fail();
-                    }
-
-                    @Override
-                    public void onError(ObjectServerError error) {
-                        assertEquals(ErrorCode.CLIENT_RESET, error.getErrorCode());
+                        assertEquals(3, permissions.size());
                         looperThread.testComplete();
                     }
-                });
-            }
-
-            @Override
-            public void onError(ObjectServerError error) {
-                fail(error.toString());
-            }
-        });
-    }
-
-    @Test
-    @RunTestInLooperThread(emulateMainThread = true)
-    public void getPermissions_addTaskAfterClientReset() {
-        final PermissionManager pm = user.getPermissionManager();
-        looperThread.closeAfterTest(pm);
-        pm.getPermissions(new PermissionManager.PermissionsCallback() {
-            @Override
-            public void onSuccess(RealmResults<Permission> permissions) {
-                // Simulate reset after first request succeeded to make sure that session is
-                // alive.
-                SyncManager.simulateClientReset(SyncManager.getSession(pm.permissionRealmConfig));
-
-                // 1. Run task that fail
-                pm.getPermissions(new PermissionManager.PermissionsCallback() {
-                    @Override
-                    public void onSuccess(RealmResults<Permission> permissions) {
-                        fail();
-                    }
 
                     @Override
                     public void onError(ObjectServerError error) {
-                        assertEquals(ErrorCode.CLIENT_RESET, error.getErrorCode());
-                        // 2. Then try to add another
-                        pm.getDefaultPermissions(new PermissionManager.PermissionsCallback() {
-                            @Override
-                            public void onSuccess(RealmResults<Permission> permissions) {
-                                fail();
-                            }
-
-                            @Override
-                            public void onError(ObjectServerError error) {
-                                assertEquals(ErrorCode.CLIENT_RESET, error.getErrorCode());
-                                looperThread.testComplete();
-                            }
-                        });
+                        fail(error.toString());
                     }
                 });
             }
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
index a4bbc0edfb..9d69886f25 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
@@ -520,6 +520,7 @@ public void clientReset_manualTriggerAllowSessionToRestart() {
 
         final AtomicReference<SyncConfiguration> configRef = new AtomicReference<>(null);
         final SyncConfiguration config = configFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
+                .clientResyncMode(ClientResyncMode.MANUAL)
                 .directory(looperThread.getRoot())
                 .fullSynchronization()
                 .errorHandler(new SyncSession.ErrorHandler() {
diff --git a/version.txt b/version.txt
index a4a35bfee5..7d9938c921 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.14.1-SNAPSHOT
\ No newline at end of file
+5.15.0-SNAPSHOT
\ No newline at end of file
