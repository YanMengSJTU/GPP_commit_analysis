diff --git a/CHANGELOG.md b/CHANGELOG.md
index c4021da167..3a31b73df9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,6 +4,8 @@
 
 ### Enhancements
 
+* Added support for using non-encrypted Realms in multiple processes. Some caveats apply. Read [doc](https://realm.io/docs/java/latest/#multiprocess) for more info (#1091).
+
 ### Bug Fixes
 
 ### Interal
diff --git a/examples/multiprocessExample/.gitignore b/examples/multiprocessExample/.gitignore
new file mode 100644
index 0000000000..796b96d1c4
--- /dev/null
+++ b/examples/multiprocessExample/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/examples/multiprocessExample/build.gradle b/examples/multiprocessExample/build.gradle
new file mode 100644
index 0000000000..1823f58ecf
--- /dev/null
+++ b/examples/multiprocessExample/build.gradle
@@ -0,0 +1,30 @@
+apply plugin: 'com.android.application'
+apply plugin: 'realm-android'
+
+android {
+    compileSdkVersion rootProject.sdkVersion
+    buildToolsVersion rootProject.buildTools
+
+    defaultConfig {
+        applicationId "io.realm.examples.realmmultiprocessexample"
+        targetSdkVersion rootProject.sdkVersion
+        minSdkVersion 15
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled true
+            signingConfig signingConfigs.debug
+        }
+        debug {
+            minifyEnabled true
+        }
+    }
+}
+
+dependencies {
+    implementation 'com.android.support:appcompat-v7:26.0.1'
+}
+
diff --git a/examples/multiprocessExample/proguard-rules.pro b/examples/multiprocessExample/proguard-rules.pro
new file mode 100644
index 0000000000..8456b3daec
--- /dev/null
+++ b/examples/multiprocessExample/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /home/cc/.android-sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/examples/multiprocessExample/src/main/AndroidManifest.xml b/examples/multiprocessExample/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..91862ee505
--- /dev/null
+++ b/examples/multiprocessExample/src/main/AndroidManifest.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest package="io.realm.examples.realmmultiprocessexample"
+          xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme"
+        android:name="io.realm.examples.realmmultiprocessexample.MyApplication">
+        <activity android:name="io.realm.examples.realmmultiprocessexample.MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+
+        <service
+            android:name="io.realm.examples.realmmultiprocessexample.AnotherProcessService"
+            android:enabled="true"
+            android:exported="false"
+            android:process=":remote">
+        </service>
+    </application>
+</manifest>
diff --git a/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/AnotherProcessService.java b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/AnotherProcessService.java
new file mode 100644
index 0000000000..72c56433d5
--- /dev/null
+++ b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/AnotherProcessService.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.realmmultiprocessexample;
+
+import android.app.Service;
+import android.content.Intent;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Looper;
+
+import io.realm.Realm;
+
+public class AnotherProcessService extends Service {
+
+    Handler handler;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        handler = new Handler(Looper.myLooper());
+        final Runnable runnable = new Runnable() {
+            @Override
+            public void run() {
+                Realm realm = Realm.getDefaultInstance();
+                realm.beginTransaction();
+                realm.copyToRealmOrUpdate(Utils.createStandaloneProcessInfo(AnotherProcessService.this));
+                realm.commitTransaction();
+                realm.close();
+                handler.postDelayed(this, 1000);
+            }
+        };
+        handler.postDelayed(runnable, 1000);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+}
diff --git a/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/MainActivity.java b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/MainActivity.java
new file mode 100644
index 0000000000..6c279d4a99
--- /dev/null
+++ b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/MainActivity.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.examples.realmmultiprocessexample;
+
+import android.content.Intent;
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.TextView;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Locale;
+
+import io.realm.Realm;
+import io.realm.RealmChangeListener;
+import io.realm.RealmResults;
+import io.realm.examples.realmmultiprocessexample.models.ProcessInfo;
+
+public class MainActivity extends AppCompatActivity {
+
+    private TextView textView;
+    private Realm realm;
+    private RealmResults<ProcessInfo> processInfoResults;
+    private DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss", Locale.ENGLISH);
+
+    private RealmChangeListener<RealmResults<ProcessInfo>> listener =
+            new RealmChangeListener<RealmResults<ProcessInfo>>() {
+        @Override
+        public void onChange(RealmResults<ProcessInfo> results) {
+            StringBuilder stringBuilder = new StringBuilder();
+
+            for (ProcessInfo processInfo : results) {
+                stringBuilder.append(processInfo.getName());
+                stringBuilder.append("\npid: ");
+                stringBuilder.append(processInfo.getPid());
+                stringBuilder.append("\nlast response time: ");
+                stringBuilder.append(dateFormat.format(processInfo.getLastResponseDate()));
+                stringBuilder.append("\n------\n");
+            }
+            textView.setText(stringBuilder.toString());
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        textView = (TextView) findViewById(R.id.textView);
+
+        if (realm == null) {
+            realm = Realm.getDefaultInstance();
+            processInfoResults = realm.where(ProcessInfo.class).findAllAsync();
+            processInfoResults.addChangeListener(listener);
+        }
+
+        realm.beginTransaction();
+        realm.copyToRealmOrUpdate(Utils.createStandaloneProcessInfo(this));
+        realm.commitTransaction();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (realm != null) {
+            realm.close();
+            realm = null;
+            processInfoResults = null;
+        }
+    }
+
+    public void onStartButton(View button) {
+        Intent intent = new Intent(MainActivity.this, AnotherProcessService.class);
+        startService(intent);
+        button.setEnabled(false);
+    }
+}
diff --git a/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/MyApplication.java b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/MyApplication.java
new file mode 100644
index 0000000000..d078915489
--- /dev/null
+++ b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/MyApplication.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.realmmultiprocessexample;
+
+import android.app.Application;
+
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
+
+public class MyApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        Realm.init(this);
+        RealmConfiguration configuration = new RealmConfiguration.Builder().deleteRealmIfMigrationNeeded().build();
+        Realm.setDefaultConfiguration(configuration);
+    }
+}
diff --git a/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/Utils.java b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/Utils.java
new file mode 100644
index 0000000000..68baaee8f5
--- /dev/null
+++ b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/Utils.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.realmmultiprocessexample;
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.RunningAppProcessInfo;
+import android.content.Context;
+import android.os.Process;
+
+import java.util.Date;
+import java.util.List;
+
+import io.realm.examples.realmmultiprocessexample.models.ProcessInfo;
+
+public class Utils {
+
+    public static String getMyProcessName(Context context) {
+        String processName = "";
+        ActivityManager am = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
+        List<RunningAppProcessInfo> infoList = am.getRunningAppProcesses();
+        if (infoList == null) {
+            throw new RuntimeException("getRunningAppProcesses() returns 'null'.");
+        }
+        for (RunningAppProcessInfo info : infoList) {
+            try {
+                if (info.pid == Process.myPid()) {
+                    processName = info.processName;
+                    break;
+                }
+            } catch (Exception ignored) {
+            }
+        }
+        return processName;
+    }
+
+    public static ProcessInfo createStandaloneProcessInfo(Context context) {
+        ProcessInfo processInfo = new ProcessInfo();
+        processInfo.setName(getMyProcessName(context));
+        processInfo.setPid(android.os.Process.myPid());
+        processInfo.setLastResponseDate(new Date());
+
+        return processInfo;
+    }
+}
diff --git a/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/models/ProcessInfo.java b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/models/ProcessInfo.java
new file mode 100644
index 0000000000..7df0bdff41
--- /dev/null
+++ b/examples/multiprocessExample/src/main/java/io/realm/examples/realmmultiprocessexample/models/ProcessInfo.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.examples.realmmultiprocessexample.models;
+
+import java.util.Date;
+
+import io.realm.RealmObject;
+import io.realm.annotations.PrimaryKey;
+import io.realm.annotations.Required;
+
+public class ProcessInfo extends RealmObject {
+    @PrimaryKey
+    private String name;
+    private int pid;
+    @Required
+    private Date lastResponseDate;
+
+    public int getPid() {
+        return pid;
+    }
+
+    public void setPid(int pid) {
+        this.pid = pid;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Date getLastResponseDate() {
+        return lastResponseDate;
+    }
+
+    public void setLastResponseDate(Date lastResponseDate) {
+        this.lastResponseDate = lastResponseDate;
+    }
+}
diff --git a/examples/multiprocessExample/src/main/res/layout/activity_main.xml b/examples/multiprocessExample/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000000..79f8daf590
--- /dev/null
+++ b/examples/multiprocessExample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin" >
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/start_remote_service"
+        android:id="@+id/button"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true"
+        android:onClick="onStartButton"/>
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/textView"
+        android:layout_centerHorizontal="true"
+        android:layout_below="@+id/button"/>
+</RelativeLayout>
diff --git a/examples/multiprocessExample/src/main/res/mipmap-hdpi/ic_launcher.png b/examples/multiprocessExample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000000..58303aff5b
Binary files /dev/null and b/examples/multiprocessExample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/examples/multiprocessExample/src/main/res/mipmap-mdpi/ic_launcher.png b/examples/multiprocessExample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000000..9b29caed3d
Binary files /dev/null and b/examples/multiprocessExample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/examples/multiprocessExample/src/main/res/mipmap-xhdpi/ic_launcher.png b/examples/multiprocessExample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000000..15527b160e
Binary files /dev/null and b/examples/multiprocessExample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/examples/multiprocessExample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/examples/multiprocessExample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..eb9ece04b2
Binary files /dev/null and b/examples/multiprocessExample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/examples/multiprocessExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/examples/multiprocessExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..91826a7567
Binary files /dev/null and b/examples/multiprocessExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/examples/multiprocessExample/src/main/res/values-w820dp/dimens.xml b/examples/multiprocessExample/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 0000000000..63fc816444
--- /dev/null
+++ b/examples/multiprocessExample/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/examples/multiprocessExample/src/main/res/values/colors.xml b/examples/multiprocessExample/src/main/res/values/colors.xml
new file mode 100644
index 0000000000..3ab3e9cbce
--- /dev/null
+++ b/examples/multiprocessExample/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/examples/multiprocessExample/src/main/res/values/dimens.xml b/examples/multiprocessExample/src/main/res/values/dimens.xml
new file mode 100644
index 0000000000..47c8224673
--- /dev/null
+++ b/examples/multiprocessExample/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/examples/multiprocessExample/src/main/res/values/strings.xml b/examples/multiprocessExample/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..2b2a3c2acf
--- /dev/null
+++ b/examples/multiprocessExample/src/main/res/values/strings.xml
@@ -0,0 +1,4 @@
+<resources>
+    <string name="app_name">Realm Multi Process example</string>
+    <string name="start_remote_service">Start remote service</string>
+</resources>
diff --git a/examples/multiprocessExample/src/main/res/values/styles.xml b/examples/multiprocessExample/src/main/res/values/styles.xml
new file mode 100644
index 0000000000..5885930df6
--- /dev/null
+++ b/examples/multiprocessExample/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/examples/settings.gradle b/examples/settings.gradle
index 5dbeeef366..9edd7eb54f 100644
--- a/examples/settings.gradle
+++ b/examples/settings.gradle
@@ -12,5 +12,6 @@ include 'unitTestExample'
 include 'newsreaderExample'
 include 'rxJavaExample'
 include 'objectServerExample'
+include 'multiprocessExample'
 
 rootProject.name = 'realm-examples'
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index b54172f289..fd7d3fdc9e 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -320,19 +320,20 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
             user = SyncManager::shared().get_user(sync_user_identifier, refresh_token);
         }
 
-        util::Optional<std::array<char, 64>> sync_encryption_key(util::none);
-        if (!config.encryption_key.empty()) {
-            sync_encryption_key = std::array<char, 64>();
-            std::copy_n(config.encryption_key.begin(), 64, sync_encryption_key->begin());
-        }
+
 
         SyncSessionStopPolicy session_stop_policy = static_cast<SyncSessionStopPolicy>(j_session_stop_policy);
 
         JStringAccessor realm_url(env, j_sync_realm_url);
-        config.sync_config = std::make_shared<SyncConfig>(SyncConfig{
-            user, realm_url, session_stop_policy, std::move(bind_handler), std::move(error_handler),
-            nullptr, sync_encryption_key});
+        config.sync_config = std::make_shared<SyncConfig>(SyncConfig{user, realm_url});
+        config.sync_config->stop_policy = session_stop_policy;
+        config.sync_config->bind_session_handler = std::move(bind_handler);
+        config.sync_config->error_handler = std::move(error_handler);
         config.sync_config->is_partial = (j_is_partial == JNI_TRUE);
+        if (!config.encryption_key.empty()) {
+            config.sync_config->realm_encryption_key = std::array<char, 64>();
+            std::copy_n(config.encryption_key.begin(), 64, config.sync_config->realm_encryption_key->begin());
+        }
 
         return to_jstring(env, config.sync_config->realm_url().c_str());
 
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index 136b3a32a2..1cb3a165dc 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit 136b3a32a218f50275f1183ed078b31945a9e29f
+Subproject commit 1cb3a165dc703a706cd107318b38c2f49fa3f31f
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 769e460c32..57940dd4bb 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -1670,7 +1670,7 @@ public static void migrateRealm(RealmConfiguration configuration, @Nullable Real
      * @param configuration a {@link RealmConfiguration}.
      * @return {@code false} if the Realm file could not be deleted. Temporary files deletion failure won't impact
      * the return value. All of the failing file deletions will be logged.
-     * @throws IllegalStateException if not all realm instances are closed.
+     * @throws IllegalStateException if there are Realm instances opened on other threads or other processes.
      */
     public static boolean deleteRealm(RealmConfiguration configuration) {
         return BaseRealm.deleteRealm(configuration);
@@ -1769,8 +1769,8 @@ public static Object getDefaultModule() {
     }
 
     /**
-     * Returns the current number of open Realm instances across all threads that are using this configuration.
-     * This includes both dynamic and normal Realms.
+     * Returns the current number of open Realm instances across all threads in current process that are using this
+     * configuration. This includes both dynamic and normal Realms.
      *
      * @param configuration the {@link io.realm.RealmConfiguration} for the Realm.
      * @return number of open Realm instances across all threads.
