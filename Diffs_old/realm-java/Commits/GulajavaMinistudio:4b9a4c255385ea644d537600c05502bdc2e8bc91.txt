diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8983a736d0..de2b580084 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,10 +1,13 @@
-## X.Y.Z (YYYY-MM-DD)
+## 5.9.0(2019-01-15)
 
 ### Enhancements
-* None
+* [ObjectServer] Added `ObjectServerError.getErrorType()` and `ObjectServerError.getErrorType()` which returns the underlying native error information. This is especially relevant if `ObjectServerError.getErrorCode()` returns `UNKNOWN`. [#6364](https://github.com/realm/realm-java/issues/6364)
+* Added better checks for detecting corrupted files, both before and after the file is written to disk.
 
 ### Fixed
-* ?? (Issue [#??](https://github.com/realm/realm-java/issues/??), since ??).
+* [ObjectServer] Native errors sometimes mapped to the wrong Java ErrorCode. (Issue [#6364](https://github.com/realm/realm-java/issues/6364), since 2.0.0)
+* [ObjectServer] Query-based Sync queries involving LIMIT, limited the result before permissions were evaluated. This could sometimes result in the wrong number of elements being returned.
+* Removed Java 8 bytecode. Resulted in errors like `D8: Invoke-customs are only supported starting with Android O (--min-api 26)` if not compiled with Java 8. (Issue [#6300](https://github.com/realm/realm-java/issues/6300), since 5.8.0).
 
 ### Compatibility
 * Realm Object Server: 3.11.0 or later.
@@ -12,7 +15,9 @@
 * APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
 
 ### Internal
-* None
+* Updated to Object Store commit: f964c2640f635e76839559cb703732e9e906ba4c
+* Updated Realm Sync to 3.14.13
+* Updated Realm Core to 5.12.7
 
 
 ## 5.8.0 (2018-11-06)
diff --git a/dependencies.list b/dependencies.list
index fe31846029..e7be39bb39 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,11 +1,11 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=3.13.1
-REALM_SYNC_SHA256=4d21d7eb3cff254261da835dd88ab8dd8c2c376d7e81e111206f27225a55cf07
+REALM_SYNC_VERSION=3.14.13
+REALM_SYNC_SHA256=7e8934a471fa714bf672a9575cd3112470c3294d55e7a13688d04569e707b8cd
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
-REALM_OBJECT_SERVER_VERSION=3.12.4
+REALM_OBJECT_SERVER_VERSION=3.16.6
 
 # Common Android settings across projects
 GRADLE_BUILD_TOOLS=3.1.4
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
index e86333d6cf..914b2e76c4 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java
@@ -525,11 +525,11 @@ public void unrecognizedErrorCode_errorHandler() {
         TestHelper.TestLogger testLogger = new TestHelper.TestLogger();
         RealmLog.add(testLogger);
 
-        session.notifySessionError(3, "Unknown Error");
+        session.notifySessionError("unknown", 3, "Unknown Error");
         RealmLog.remove(testLogger);
 
         assertTrue(errorHandlerCalled.get());
-        assertEquals("Unknown error code: 3", testLogger.message);
+        assertEquals("Unknown error code: 'unknown:3'", testLogger.message);
 
         realm.close();
     }
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index 78c3e4d2dc..e2b1c7d7bd 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -24,6 +24,9 @@
 
 #endif
 
+#include <linux/errno.h>
+#include <realm/util/misc_ext_errors.hpp>
+
 #include "java_accessor.hpp"
 #include "util.hpp"
 #include "jni_util/java_method.hpp"
@@ -263,16 +266,19 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
         // Doing the methods lookup from the thread that loaded the lib, to avoid
         // https://developer.android.com/training/articles/perf-jni.html#faq_FindClass
         static JavaMethod java_error_callback_method(env, sync_manager_class, "notifyErrorHandler",
-                                                     "(ILjava/lang/String;Ljava/lang/String;)V", true);
+                                                     "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", true);
         static JavaMethod java_bind_session_method(env, sync_manager_class, "bindSessionWithConfig",
                                                    "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", true);
 
         // error handler will be called form the sync client thread
         auto error_handler = [](std::shared_ptr<SyncSession> session, SyncError error) {
-            realm::jni_util::Log::d("error_handler lambda invoked");
-
+            auto error_category = error.error_code.category().name();
             auto error_message = error.message;
             auto error_code = error.error_code.value();
+
+            // All client reset errors will be in the protocol category. Re-assign the error code
+            // to a value not used by https://github.com/realm/realm-sync/blob/develop/src/realm/sync/protocol.hpp#L232
+            // This way we only have one error in Java representing Client Reset.
             if (error.is_client_reset_requested()) {
                 // Hack the error message to send information about the location of the backup.
                 // If more uses of the user_info map surfaces. Refactor this to send the full
@@ -281,10 +287,39 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
                 error_code = 7; // See ErrorCode.java
             }
 
+            // System/Connection errors are defined by constants in
+            // https://android.googlesource.com/kernel/lk/+/upstream-master/include/errno.h
+            // However the integer values are not guaranteed to be stable according to POSIX.
+            //
+            // For this reason we manually map the constants to the error integer values defined in Java.
+            // For simplicity Java re-use the values currently defined in errno.h.
+            if (std::strcmp(error_category, "realm.basic_system") == 0) {
+                switch(error_code) {
+                    case ECONNRESET: error_code = 104; break;
+                    case ESHUTDOWN: error_code = 110; break;
+                    case ECONNREFUSED: error_code = 111; break;
+                    case EADDRINUSE: error_code = 112; break;
+                    case ECONNABORTED: error_code = 113; break;
+                    default:
+                        /* Do nothing */
+                        error_code = error_code;
+                }
+            } else if (std::strcmp(error_category, "realm.util.misc_ext") == 0) {
+                switch (util::MiscExtErrors(error_code)) {
+                    case util::MiscExtErrors::end_of_input: error_code = 1; break;
+                    case util::MiscExtErrors::premature_end_of_input: error_code = 2; break;
+                    case util::MiscExtErrors::delim_not_found: error_code = 3; break;
+                    default:
+                        /* Do nothing */
+                        error_code = error_code;
+                }
+            }
+
             JNIEnv* env = realm::jni_util::JniUtils::get_env(true);
+            jstring jerror_category = to_jstring(env, error_category);
             jstring jerror_message = to_jstring(env, error_message);
             jstring jsession_path = to_jstring(env, session.get()->path());
-            env->CallStaticVoidMethod(sync_manager_class, java_error_callback_method, error_code, jerror_message,
+            env->CallStaticVoidMethod(sync_manager_class, java_error_callback_method, jerror_category, error_code, jerror_message,
                                       jsession_path);
             env->DeleteLocalRef(jerror_message);
             env->DeleteLocalRef(jsession_path);
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index f0dfe6c03b..f964c2640f 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit f0dfe6c03be49194bc40777901059eaf55e7bff6
+Subproject commit f964c2640f635e76839559cb703732e9e906ba4c
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index 3f80013741..eac557b1d7 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -475,7 +475,7 @@ private Row checkRealmObjectConstraints(String fieldName, @Nullable RealmModel v
             case LIST:
                 checkTypeOfListElements(list, RealmModel.class);
                 checkRealmObjectConstraints(fieldName, (RealmModel) list.first(null));
-                osResults.setModelList(fieldName, (RealmList<? extends RealmModel>) list);
+                osResults.setModelList(fieldName, (RealmList<RealmModel>) list);
                 break;
             case INTEGER_LIST:
                 // Integers are a bit annoying as they are all stored as the same type in Core
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
index 590f65dba6..47925d1cba 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
@@ -473,68 +473,101 @@ public void setObject(String fieldName, @Nullable Row row) {
     }
 
     public void setStringList(String fieldName, RealmList<String> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addStringList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<String>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<String> list) {
+                builder.addStringList(0, list);
+            }
         });
     }
 
     public void setByteList(String fieldName, RealmList<Byte> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addByteList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Byte>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Byte> list) {
+                builder.addByteList(0, list);
+            }
         });
     }
 
     public void setShortList(String fieldName, RealmList<Short> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addShortList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Short>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Short> list) {
+                builder.addShortList(0, list);
+            }
         });
     }
 
     public void setIntegerList(String fieldName, RealmList<Integer> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addIntegerList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Integer>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Integer> list) {
+                builder.addIntegerList(0, list);
+            }
         });
     }
 
     public void setLongList(String fieldName, RealmList<Long> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addLongList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Long>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Long> list) {
+                builder.addLongList(0, list);
+            }
         });
     }
 
     public void setBooleanList(String fieldName, RealmList<Boolean> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addBooleanList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Boolean>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Boolean> list) {
+                builder.addBooleanList(0, list);
+            }
         });
     }
 
     public void setByteArrayList(String fieldName, RealmList<byte[]> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addByteArrayList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<byte[]>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<byte[]> list) {
+                builder.addByteArrayList(0, list);
+            }
         });
     }
 
     public void setDateList(String fieldName, RealmList<Date> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addDateList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Date>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Date> list) {
+                builder.addDateList(0, list);
+            }
         });
     }
 
     public void setFloatList(String fieldName, RealmList<Float> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addFloatList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Float>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Float> list) {
+                builder.addFloatList(0, list);
+            }
         });
     }
 
     public void setDoubleList(String fieldName, RealmList<Double> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addDoubleList(0, lst);
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<Double>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<Double> list) {
+                builder.addDoubleList(0, list);
+            }
         });
     }
 
-    public void setModelList(String fieldName, RealmList<? extends RealmModel> list) {
-        addTypeSpecificList(fieldName, list, (builder, lst) -> {
-            builder.addObjectList(0, lst);
+    public void setModelList(String fieldName, RealmList<RealmModel> list) {
+        addTypeSpecificList(fieldName, list, new AddListTypeDelegate<RealmModel>() {
+            @Override
+            public void addList(OsObjectBuilder builder, RealmList<RealmModel> list) {
+                builder.addObjectList(0, list);
+            }
         });
     }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index 8b47653bec..ae521ca8d5 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -18,6 +18,7 @@
 
 
 import java.io.IOException;
+import java.util.Locale;
 
 import io.realm.log.RealmLog;
 
@@ -30,138 +31,184 @@
     // See https://github.com/realm/realm-object-server/blob/master/object-server/doc/problems.md
     // See https://github.com/realm/realm-sync/blob/develop/src/realm/sync/protocol.hpp
 
-    // Realm Java errors (0-49)
-    UNKNOWN(-1),                                // Catch-all
-    IO_EXCEPTION(0, Category.RECOVERABLE),      // Some IO error while either contacting the server or reading the response
-    JSON_EXCEPTION(1),                          // JSON input could not be parsed correctly
-    CLIENT_RESET(7),                            // Client Reset required. Don't change this value without modifying io_realm_internal_OsSharedRealm.cpp
-
-    // Realm Object Server errors (100 - 199)
-    // Connection level and protocol errors.
-    CONNECTION_CLOSED(100),          // Connection closed (no error)
-    OTHER_ERROR(101),                // Other connection level error
-    UNKNOWN_MESSAGE(102),            // Unknown type of input message
-    BAD_SYNTAX(103),                 // Bad syntax in input message head
-    LIMITS_EXCEEDED(104),            // Limits exceeded in input message
-    WRONG_PROTOCOL_VERSION(105),     // Wrong protocol version (CLIENT)
-    BAD_SESSION_IDENT(106),          // Bad session identifier in input message
-    REUSE_OF_SESSION_IDENT(107),     // Overlapping reuse of session identifier (BIND)
-    BOUND_IN_OTHER_SESSION(108),     // Client file bound in other session (IDENT)
-    BAD_MESSAGE_ORDER(109),          // Bad input message order
-    BAD_ORIGIN_FILE_IDENT(110),      // Bad origin file identifier in changeset header (DOWNLOAD)
-    BAD_SERVER_VERSION_DOWNLOAD(111),// Bad server version in changeset header (DOWNLOAD)
-    BAD_CHANGESET_DOWNLOAD(112),     // Bad changeset (DOWNLOAD)
-    BAD_REQUEST_IDENT(113),          // Bad request identifier (MARK)
-    BAD_ERROR_CODE(114),             // Bad error code (ERROR)
-    BAD_COMPRESSION(115),            // Bad compression (DOWNLOAD)
-    BAD_CLIENT_VERSION_DOWNLOAD(116),// Bad last integrated client version in changeset header (DOWNLOAD)
-    SSL_SERVER_CERT_REJECTED(117),   // SSL server certificate rejected
-    PONG_TIMEOUT(118),               // Timeout on reception of PONG response messsage
-
-    // Session level errors (200 - 299)
-    SESSION_CLOSED(200, Category.RECOVERABLE),      // Session closed (no error)
-    OTHER_SESSION_ERROR(201, Category.RECOVERABLE), // Other session level error
-    TOKEN_EXPIRED(202, Category.RECOVERABLE),       // Access token expired
+    // Catch-all
+    // The underlying type and error code should be part of the error message
+    UNKNOWN(Type.UNKNOWN, -1),
+
+    // Realm Java errors
+    IO_EXCEPTION(Type.JAVA, 0, Category.RECOVERABLE), // Some IO error while either contacting the server or reading the response
+    JSON_EXCEPTION(Type.AUTH, 1),                     // JSON input could not be parsed correctly
+    CLIENT_RESET(Type.PROTOCOL, 7),                   // Client Reset required. Don't change this value without modifying io_realm_internal_OsSharedRealm.cpp
+
+    // Connection level and protocol errors from the native Sync Client
+    CONNECTION_CLOSED(Type.PROTOCOL, 100, Category.RECOVERABLE),    // Connection closed (no error)
+    OTHER_ERROR(Type.PROTOCOL, 101),                                // Other connection level error
+    UNKNOWN_MESSAGE(Type.PROTOCOL, 102),                            // Unknown type of input message
+    BAD_SYNTAX(Type.PROTOCOL, 103),                                 // Bad syntax in input message head
+    LIMITS_EXCEEDED(Type.PROTOCOL, 104),                            // Limits exceeded in input message
+    WRONG_PROTOCOL_VERSION(Type.PROTOCOL, 105),                     // Wrong protocol version (CLIENT)
+    BAD_SESSION_IDENT(Type.PROTOCOL, 106),                          // Bad session identifier in input message
+    REUSE_OF_SESSION_IDENT(Type.PROTOCOL, 107),                     // Overlapping reuse of session identifier (BIND)
+    BOUND_IN_OTHER_SESSION(Type.PROTOCOL, 108),                     // Client file bound in other session (IDENT)
+    BAD_MESSAGE_ORDER(Type.PROTOCOL, 109),                          // Bad input message order
+    BAD_DECOMPRESSION(Type.PROTOCOL, 110),                          // Error in decompression (UPLOAD)
+    BAD_CHANGESET_HEADER_SYNTAX(Type.PROTOCOL, 111),                // Bad server version in changeset header (DOWNLOAD)
+    BAD_CHANGESET_SIZE(Type.PROTOCOL, 112),                         // Bad size specified in changeset header (UPLOAD)
+    BAD_CHANGESETS(Type.PROTOCOL, 113),                             // Bad changesets (UPLOAD)
+
+    // Session level errors from the native Sync Client
+    SESSION_CLOSED(Type.PROTOCOL, 200, Category.RECOVERABLE),      // Session closed (no error)
+    OTHER_SESSION_ERROR(Type.PROTOCOL, 201, Category.RECOVERABLE), // Other session level error
+    TOKEN_EXPIRED(Type.PROTOCOL, 202, Category.RECOVERABLE),       // Access token expired
 
     // Session fatal: Auth wrong. Cannot be fixed without a new User/SyncConfiguration.
-    BAD_AUTHENTICATION(203),                        // Bad user authentication (BIND, REFRESH)
-    ILLEGAL_REALM_PATH(204),                        // Illegal Realm path (BIND)
-    NO_SUCH_PATH(205),                              // No such Realm (BIND)
-    PERMISSION_DENIED(206),                         // Permission denied (BIND, REFRESH)
+    BAD_AUTHENTICATION(Type.PROTOCOL, 203),                        // Bad user authentication (BIND, REFRESH)
+    ILLEGAL_REALM_PATH(Type.PROTOCOL, 204),                        // Illegal Realm path (BIND)
+    NO_SUCH_PATH(Type.PROTOCOL, 205),                              // No such Realm (BIND)
+    PERMISSION_DENIED(Type.PROTOCOL, 206),                         // Permission denied (BIND, REFRESH)
 
     // Fatal: Wrong server/client versions. Trying to sync incompatible files or the file was corrupted.
-    BAD_SERVER_FILE_IDENT(207),                     // Bad server file identifier (IDENT)
-    BAD_CLIENT_FILE_IDENT(208),                     // Bad client file identifier (IDENT)
-    BAD_SERVER_VERSION(209),                        // Bad server version (IDENT, UPLOAD)
-    BAD_CLIENT_VERSION(210),                        // Bad client version (IDENT, UPLOAD)
-    DIVERGING_HISTORIES(211),                       // Diverging histories (IDENT)
-    BAD_CHANGESET(212),                             // Bad changeset (UPLOAD)
-    DISABLED_SESSION(213),                          // Disabled session
-    PARTIAL_SYNC_DISABLED(214),                     // Partial sync disabled (BIND)
+    BAD_SERVER_FILE_IDENT(Type.PROTOCOL, 207),                     // Bad server file identifier (IDENT)
+    BAD_CLIENT_FILE_IDENT(Type.PROTOCOL, 208),                     // Bad client file identifier (IDENT)
+    BAD_SERVER_VERSION(Type.PROTOCOL, 209),                        // Bad server version (IDENT, UPLOAD)
+    BAD_CLIENT_VERSION(Type.PROTOCOL, 210),                        // Bad client version (IDENT, UPLOAD)
+    DIVERGING_HISTORIES(Type.PROTOCOL, 211),                       // Diverging histories (IDENT)
+    BAD_CHANGESET(Type.PROTOCOL, 212),                             // Bad changeset (UPLOAD)
+    DISABLED_SESSION(Type.PROTOCOL, 213),                          // Disabled session
+    PARTIAL_SYNC_DISABLED(Type.PROTOCOL, 214),                     // Partial sync disabled (BIND)
+    UNSUPPORTED_SESSION_FEATURE(Type.PROTOCOL, 215),               // Unsupported session-level feature
+    BAD_ORIGIN_FILE_IDENT(Type.PROTOCOL, 216),                     // Bad origin file identifier (UPLOAD)
+
+    // Sync Network Client errors.
+    // TODO: All enums in here should be prefixed with `CLIENT_`, but in order to avoid
+    // breaking changes, this is not the case for all of them. This should be fixed in the
+    // next major release.
+    // See https://github.com/realm/realm-java/issues/6387
+    CLIENT_CONNECTION_CLOSED(Type.SESSION, 100),            // Connection closed (no error)
+    CLIENT_UNKNOWN_MESSAGE(Type.SESSION, 101),              // Unknown type of input message
+    CLIENT_LIMITS_EXCEEDED(Type.SESSION, 103),              // Limits exceeded in input message
+    CLIENT_BAD_SESSION_IDENT(Type.SESSION, 104),            // Bad session identifier in input message
+    CLIENT_BAD_MESSAGE_ORDER(Type.SESSION, 105),            // Bad input message order
+    CLIENT_BAD_CLIENT_FILE_IDENT(Type.SESSION, 106),        // Bad client file identifier (IDENT)
+    CLIENT_BAD_PROGRESS(Type.SESSION, 107),                 // Bad progress information (DOWNLOAD)
+    CLIENT_BAD_CHANGESET_HEADER_SYNTAX(Type.SESSION, 108),  // Bad syntax in changeset header (DOWNLOAD)
+    CLIENT_BAD_CHANGESET_SIZE(Type.SESSION, 109),           // Bad changeset size in changeset header (DOWNLOAD)
+    CLIENT_BAD_ORIGIN_FILE_IDENT(Type.SESSION, 110),        // Bad origin file identifier in changeset header (DOWNLOAD)
+    CLIENT_BAD_SERVER_VERSION(Type.SESSION, 111),           // Bad server version in changeset header (DOWNLOAD)
+    CLIENT_BAD_CHANGESET(Type.SESSION, 112),                // Bad changeset (DOWNLOAD)
+    BAD_REQUEST_IDENT(Type.SESSION, 113),                   // Bad request identifier (MARK)
+    BAD_ERROR_CODE(Type.SESSION, 114),                      // Bad error code (ERROR)
+    BAD_COMPRESSION(Type.SESSION, 115),                     // Bad compression (DOWNLOAD)
+    BAD_CLIENT_VERSION_DOWNLOAD(Type.SESSION, 116),         // Bad last integrated client version in changeset header (DOWNLOAD)
+    SSL_SERVER_CERT_REJECTED(Type.SESSION, 117),            // SSL server certificate rejected
+    PONG_TIMEOUT(Type.SESSION, 118),                        // Timeout on reception of PONG respone message
+    CLIENT_BAD_CLIENT_FILE_IDENT_SALT(Type.SESSION, 119),   // Bad client file identifier salt (IDENT)
+    CLIENT_FILE_IDENT(Type.SESSION, 120),                   // Bad file identifier (ALLOC)
+    CLIENT_CONNECT_TIMEOUT(Type.SESSION, 121),              // Sync connection was not fully established in time
+    CLIENT_BAD_TIMESTAMP(Type.SESSION, 122),                // Bad timestamp (PONG)
 
     // 300 - 599 Reserved for Standard HTTP error codes
-    MULTIPLE_CHOICES(300),
-    MOVED_PERMANENTLY(301),
-    FOUND(302),
-    SEE_OTHER(303),
-    NOT_MODIFIED(304),
-    USE_PROXY(305),
-    TEMPORARY_REDIRECT(307),
-    PERMANENT_REDIRECT(308),
-    BAD_REQUEST(400),
-    UNAUTHORIZED(401),
-    PAYMENT_REQUIRED(402),
-    FORBIDDEN(403),
-    NOT_FOUND(404),
-    METHOD_NOT_ALLOWED(405),
-    NOT_ACCEPTABLE(406),
-    PROXY_AUTHENTICATION_REQUIRED(407),
-    REQUEST_TIMEOUT(408),
-    CONFLICT(409),
-    GONE(410),
-    LENGTH_REQUIRED(411),
-    PRECONDITION_FAILED(412),
-    PAYLOAD_TOO_LARGE(413),
-    URI_TOO_LONG(414),
-    UNSUPPORTED_MEDIA_TYPE(415),
-    RANGE_NOT_SATISFIABLE(416),
-    EXPECTATION_FAILED(417),
-    MISDIRECTED_REQUEST(421),
-    UNPROCESSABLE_ENTITY(422),
-    LOCKED(423),
-    FAILED_DEPENDENCY(424),
-    UPGRADE_REQUIRED(426),
-    PRECONDITION_REQUIRED(428),
-    TOO_MANY_REQUESTS(429),
-    REQUEST_HEADER_FIELDS_TOO_LARGE(431),
-    UNAVAILABLE_FOR_LEGAL_REASONS(451),
-    INTERNAL_SERVER_ERROR(500),
-    NOT_IMPLEMENTED(501),
-    BAD_GATEWAY(502),
-    SERVICE_UNAVAILABLE(503),
-    GATEWAY_TIMEOUT(504),
-    HTTP_VERSION_NOT_SUPPORTED(505),
-    VARIANT_ALSO_NEGOTIATES(506),
-    INSUFFICIENT_STORAGE(507),
-    LOOP_DETECTED(508),
-    NOT_EXTENDED(510),
-    NETWORK_AUTHENTICATION_REQUIRED(511),
+    MULTIPLE_CHOICES(Type.HTTP, 300),
+    MOVED_PERMANENTLY(Type.HTTP, 301),
+    FOUND(Type.HTTP, 302),
+    SEE_OTHER(Type.HTTP, 303),
+    NOT_MODIFIED(Type.HTTP, 304),
+    USE_PROXY(Type.HTTP, 305),
+    TEMPORARY_REDIRECT(Type.HTTP, 307),
+    PERMANENT_REDIRECT(Type.HTTP, 308),
+    BAD_REQUEST(Type.HTTP, 400),
+    UNAUTHORIZED(Type.HTTP, 401),
+    PAYMENT_REQUIRED(Type.HTTP, 402),
+    FORBIDDEN(Type.HTTP, 403),
+    NOT_FOUND(Type.HTTP, 404),
+    METHOD_NOT_ALLOWED(Type.HTTP, 405),
+    NOT_ACCEPTABLE(Type.HTTP, 406),
+    PROXY_AUTHENTICATION_REQUIRED(Type.HTTP, 407),
+    REQUEST_TIMEOUT(Type.HTTP, 408),
+    CONFLICT(Type.HTTP, 409),
+    GONE(Type.HTTP, 410),
+    LENGTH_REQUIRED(Type.HTTP, 411),
+    PRECONDITION_FAILED(Type.HTTP, 412),
+    PAYLOAD_TOO_LARGE(Type.HTTP, 413),
+    URI_TOO_LONG(Type.HTTP, 414),
+    UNSUPPORTED_MEDIA_TYPE(Type.HTTP, 415),
+    RANGE_NOT_SATISFIABLE(Type.HTTP, 416),
+    EXPECTATION_FAILED(Type.HTTP, 417),
+    MISDIRECTED_REQUEST(Type.HTTP, 421),
+    UNPROCESSABLE_ENTITY(Type.HTTP, 422),
+    LOCKED(Type.HTTP, 423),
+    FAILED_DEPENDENCY(Type.HTTP, 424),
+    UPGRADE_REQUIRED(Type.HTTP, 426),
+    PRECONDITION_REQUIRED(Type.HTTP, 428),
+    TOO_MANY_REQUESTS(Type.HTTP, 429),
+    REQUEST_HEADER_FIELDS_TOO_LARGE(Type.HTTP, 431),
+    UNAVAILABLE_FOR_LEGAL_REASONS(Type.HTTP, 451),
+    INTERNAL_SERVER_ERROR(Type.HTTP, 500),
+    NOT_IMPLEMENTED(Type.HTTP, 501),
+    BAD_GATEWAY(Type.HTTP, 502),
+    SERVICE_UNAVAILABLE(Type.HTTP, 503),
+    GATEWAY_TIMEOUT(Type.HTTP, 504),
+    HTTP_VERSION_NOT_SUPPORTED(Type.HTTP, 505),
+    VARIANT_ALSO_NEGOTIATES(Type.HTTP, 506),
+    INSUFFICIENT_STORAGE(Type.HTTP, 507),
+    LOOP_DETECTED(Type.HTTP, 508),
+    NOT_EXTENDED(Type.HTTP, 510),
+    NETWORK_AUTHENTICATION_REQUIRED(Type.HTTP, 511),
 
     // Realm Authentication Server response errors (600 - 699)
-    INVALID_PARAMETERS(601),
-    MISSING_PARAMETERS(602),
-    INVALID_CREDENTIALS(611),
-    UNKNOWN_ACCOUNT(612),
-    EXISTING_ACCOUNT(613),
-    ACCESS_DENIED(614),
-    EXPIRED_REFRESH_TOKEN(615),
-    INVALID_HOST(616),
+    INVALID_PARAMETERS(Type.AUTH, 601),
+    MISSING_PARAMETERS(Type.AUTH, 602),
+    INVALID_CREDENTIALS(Type.AUTH, 611),
+    UNKNOWN_ACCOUNT(Type.AUTH, 612),
+    EXISTING_ACCOUNT(Type.AUTH, 613),
+    ACCESS_DENIED(Type.AUTH, 614),
+    EXPIRED_REFRESH_TOKEN(Type.AUTH, 615),
+    INVALID_HOST(Type.AUTH, 616),
+    REALM_NOT_FOUND(Type.AUTH, 617),
+    UNKNOWN_USER(Type.AUTH, 618),
+    WRONG_REALM_TYPE(Type.AUTH, 619), // The Realm found on the server is of different type than the one requested.
 
     // Other Realm Object Server response errors
-    EXPIRED_PERMISSION_OFFER(701),
-    AMBIGUOUS_PERMISSION_OFFER_TOKEN(702),
-    FILE_MAY_NOT_BE_SHARED(703),
-    SERVER_MISCONFIGURATION(801);
+    EXPIRED_PERMISSION_OFFER(Type.AUTH, 701),
+    AMBIGUOUS_PERMISSION_OFFER_TOKEN(Type.AUTH, 702),
+    FILE_MAY_NOT_BE_SHARED(Type.AUTH, 703),
+    SERVER_MISCONFIGURATION(Type.AUTH, 801),
 
+    // Generic system errors we want to enumerate specifically
+    CONNECTION_RESET_BY_PEER(Type.CONNECTION, 104, Category.RECOVERABLE), // ECONNRESET: Connection reset by peer
+    CONNECTION_SOCKET_SHUTDOWN(Type.CONNECTION, 110, Category.RECOVERABLE), // ESHUTDOWN: Can't send after socket shutdown
+    CONNECTION_REFUSED(Type.CONNECTION, 111, Category.RECOVERABLE), // ECONNREFUSED: Connection refused
+    CONNECTION_ADDRESS_IN_USE(Type.CONNECTION, 112, Category.RECOVERABLE), // EADDRINUSE: Address already i use
+    CONNECTION_CONNECTION_ABORTED(Type.CONNECTION, 113, Category.RECOVERABLE), // ECONNABORTED: Connection aborted
+
+    MISC_END_OF_INPUT(Type.MISC, 1), // End of input
+    MISC_PREMATURE_END_OF_INPUT(Type.MISC, 2), // Premature end of input. That is, end of input at an unexpected, or illegal place in an input stream.
+    MISC_DELIMITER_NOT_FOUND(Type.MISC, 3); // Delimiter not found
+
+    private final String type;
     private final int code;
     private final Category category;
 
-    ErrorCode(int errorCode) {
-        this(errorCode, Category.FATAL);
+    ErrorCode(String type, int errorCode) {
+        this(type, errorCode, Category.FATAL);
     }
 
-    ErrorCode(int errorCode, Category category) {
+    ErrorCode(String type, int errorCode, Category category) {
+        this.type = type;
         this.code = errorCode;
         this.category = category;
     }
 
     @Override
-    public String toString() {
-        return super.toString() + "(" + code + ")";
+    public String
+
+    toString() {
+        return super.toString() + "(" + type + ":" + code + ")";
     }
 
     /**
-     * Returns the numerical value for this error code.
+     * Returns the numerical value for this error code. Note that an error is only uniquely
+     * identified by the {@code (type:value)} pair.
      *
      * @return the error code as an unique {@code int} value.
      */
@@ -186,6 +233,38 @@ public Category getCategory() {
         return category;
     }
 
+    /**
+     * Returns the type of error.  Note that an error is only uniquely identified by the
+     * {@code (type:value)} pair.
+     *
+     * @return the type of error.
+     */
+    public String getType() {
+        return type;
+    }
+
+    /**
+     * Converts a native error to the appropriate Java equivalent
+     *
+     * @param type type of error. This is normally the C++ category.
+     * @param errorCode specific code within the type
+     *
+     * @return the Java error representing the native error. This method will never throw, so in case
+     * a Java error does not exists. {@link #UNKNOWN} will be returned.
+     */
+    public static ErrorCode fromNativeError(String type, int errorCode) {
+        ErrorCode[] errorCodes = values();
+        for (int i = 0; i < errorCodes.length; i++) {
+            ErrorCode error = errorCodes[i];
+            if (error.intValue() == errorCode && error.type.equals(type)) {
+                return error;
+            }
+        }
+        RealmLog.warn(String.format(Locale.US, "Unknown error code: '%s:%d'", type, errorCode));
+        return UNKNOWN;
+    }
+
+    @Deprecated
     public static ErrorCode fromInt(int errorCode) {
         ErrorCode[] errorCodes = values();
         for (int i = 0; i < errorCodes.length; i++) {
@@ -212,8 +291,22 @@ public static ErrorCode fromException(Exception exception) {
         }
     }
 
+    public static class Type {
+        public static final String AUTH = "auth"; // Errors from the Realm Object Server
+        public static final String CONNECTION = "realm.basic_system"; // Connection/System errors from the native Sync Client
+        public static final String DEPRECATED = "deprecated"; // Deprecated errors
+        public static final String HTTP = "http"; // Errors from the HTTP layer
+        public static final String JAVA = "java"; // Errors from the Java layer
+        public static final String MISC = "realm.util.misc_ext"; // Misc errors from the native Sync Client
+        public static final String PROTOCOL = "realm::sync::ProtocolError"; // Protocol level errors from the native Sync Client
+        public static final String SESSION = "realm::sync::Client::Error"; // Session level errors from the native Sync Client
+        public static final String UNKNOWN = "unknown"; // Catch-all category
+    }
+
+
     public enum Category {
         FATAL,          // Abort session as soon as possible
         RECOVERABLE,    // Still possible to recover the session by either rebinding or providing the required information.
     }
+
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ObjectServerError.java b/realm/realm-library/src/objectServer/java/io/realm/ObjectServerError.java
index b79eff13b1..4cb2fa961b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ObjectServerError.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ObjectServerError.java
@@ -32,7 +32,14 @@
  */
 public class ObjectServerError extends RuntimeException {
 
+    // The Java representation of the error.
     private final ErrorCode error;
+
+    // The native error representation. Mostly relevant for ErrorCode.UNKNOWN
+    // where it can provide more details into the exact error.
+    private final String nativeErrorType;
+    private final int nativeErrorIntValue;
+
     private final String errorMessage;
     private final Throwable exception;
 
@@ -43,7 +50,21 @@
      * @param errorMessage detailed error message.
      */
     public ObjectServerError(ErrorCode errorCode, String errorMessage) {
-        this(errorCode, errorMessage, (Throwable) null);
+        this(errorCode, errorCode.getType(), errorCode.intValue(), errorMessage, (Throwable) null);
+    }
+
+    /**
+     * Creates an unknown error that could not be mapped to any known error case.
+     * <p>
+     * This means that {@link #getErrorCode()} will return {@link ErrorCode#UNKNOWN}, but
+     * {@link #getErrorType()} and {@link #getErrorIntValue()} will return the underlying values
+     * which can help identify the real error.
+     *
+     * @param errorCode error code for this type of error.
+     * @param errorMessage detailed error message.
+     */
+    public ObjectServerError(String errorType, int errorCode, String errorMessage) {
+        this(ErrorCode.UNKNOWN, errorType, errorCode, errorMessage, null);
     }
 
     /**
@@ -56,6 +77,17 @@ public ObjectServerError(ErrorCode errorCode, Throwable exception) {
         this(errorCode, null, exception);
     }
 
+    /**
+     * Errors happening while trying to authenticate a user.
+     *
+     * @param errorCode error code for this type of error.
+     * @param title title for this type of error.
+     * @param hint a hint for resolving the error.
+     */
+    public ObjectServerError(ErrorCode errorCode, String title, @Nullable String hint) {
+        this(errorCode, (hint != null) ? title + " : " + hint : title, (Throwable) null);
+    }
+
     /**
      * Generic error happening that could happen anywhere.
      *
@@ -64,30 +96,49 @@ public ObjectServerError(ErrorCode errorCode, Throwable exception) {
      * @param exception underlying exception if the error was caused by this.
      */
     public ObjectServerError(ErrorCode errorCode, @Nullable String errorMessage, @Nullable Throwable exception) {
+        this(errorCode, errorCode.getType(), errorCode.intValue(), errorMessage, exception);
+    }
+
+    public ObjectServerError(ErrorCode errorCode, String nativeErrorType, int nativeErrorCode,
+                             @Nullable String errorMessage, @Nullable Throwable exception) {
         this.error = errorCode;
+        this.nativeErrorType = nativeErrorType;
+        this.nativeErrorIntValue = nativeErrorCode;
         this.errorMessage = errorMessage;
         this.exception = exception;
     }
 
     /**
-     * Errors happening while trying to authenticate a user.
+     * Returns the {@link ErrorCode} identifying the type of error.
+     * <p>
+     * If {@link ErrorCode#UNKNOWN} is returned, it means that the error could not be mapped to any
+     * known errors. In that case {@link #getErrorType()} and {@link #getErrorIntValue()} will
+     * return the underlying error information which can better identify the type of error.
      *
-     * @param errorCode error code for this type of error.
-     * @param title Title for this type of error.
-     * @param hint a hint for resolving the error.
+     * @return the error code identifying the type of error.
+     * @see ErrorCode
      */
-    public ObjectServerError(ErrorCode errorCode, String title, @Nullable String hint) {
-        this(errorCode, (hint != null) ? title + " : " + hint : title, (Throwable) null);
+    public ErrorCode getErrorCode() {
+        return error;
     }
 
     /**
-     * Returns the error code uniquely identifying this type of error.
+     * Returns a string describing the type of error it is.
      *
-     * @return the error code identifying the type of error.
-     * @see ErrorCode
+     * @return
      */
-    public ErrorCode getErrorCode() {
-        return error;
+    public String getErrorType() {
+        return nativeErrorType;
+    }
+
+    /**
+     * Returns an integer representing this specific type of error. This value is only unique within
+     * the value provided by {@link #getErrorType()}.
+     *
+     * @return the integer value representing this type of error.
+     */
+    public int getErrorIntValue() {
+        return nativeErrorIntValue;
     }
 
     /**
@@ -95,6 +146,7 @@ public ErrorCode getErrorCode() {
      *
      * @return a detailed error message or {@code null} if one was not available.
      */
+    @Nullable
     public String getErrorMessage() {
         return errorMessage;
     }
@@ -104,6 +156,7 @@ public String getErrorMessage() {
      *
      * @return the underlying exception causing this error, or {@code null} if not caused by an exception.
      */
+    @Nullable
     public Throwable getException() {
         return exception;
     }
@@ -122,9 +175,16 @@ public Throwable getException() {
 
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(getErrorCode().toString());
+        StringBuilder sb = new StringBuilder();
+
+        sb.append(getErrorCode().name());
+        sb.append("(");
+        sb.append(getErrorType());
+        sb.append(":");
+        sb.append(getErrorIntValue());
+        sb.append(')');
         if (errorMessage != null) {
-            sb.append('\n');
+            sb.append(": ");
             sb.append(errorMessage);
         }
         if (exception != null) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java b/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
index e8f088abd1..f668c6385d 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/PermissionManager.java
@@ -1089,7 +1089,7 @@ protected void handleServerStatusChanges(BasePermissionApi obj, Runnable onSucce
             if (statusCode != null) {
                 RealmObject.removeAllChangeListeners(obj);
                 if (statusCode > 0) {
-                    ErrorCode errorCode = ErrorCode.fromInt(statusCode);
+                    ErrorCode errorCode = ErrorCode.fromNativeError(ErrorCode.Type.AUTH, statusCode);
                     String errorMsg = obj.getStatusMessage();
                     ObjectServerError error = new ObjectServerError(errorCode, errorMsg);
                     notifyCallbackWithError(error);
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 15a7adaa7e..ceb1907170 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -502,12 +502,12 @@ static void notifyUserLoggedOut(SyncUser user) {
      * session to contact. If {@code path == null} all sessions are effected.
      */
     @SuppressWarnings("unused")
-    private static synchronized void notifyErrorHandler(int errorCode, String errorMessage, @Nullable String path) {
+    private static synchronized void notifyErrorHandler(String nativeErrorCategory, int nativeErrorCode, String errorMessage, @Nullable String path) {
         if (Util.isEmptyString(path)) {
             // notify all sessions
             for (SyncSession syncSession : sessions.values()) {
                     try {
-                        syncSession.notifySessionError(errorCode, errorMessage);
+                        syncSession.notifySessionError(nativeErrorCategory, nativeErrorCode, errorMessage);
                     } catch (Exception exception) {
                         RealmLog.error(exception);
                     }
@@ -516,7 +516,7 @@ private static synchronized void notifyErrorHandler(int errorCode, String errorM
             SyncSession syncSession = sessions.get(path);
             if (syncSession != null) {
                 try {
-                    syncSession.notifySessionError(errorCode, errorMessage);
+                    syncSession.notifySessionError(nativeErrorCategory, nativeErrorCode, errorMessage);
                 } catch (Exception exception) {
                     RealmLog.error(exception);
                 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index d98d49df83..431499422b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -227,11 +227,11 @@ public URI getServerUrl() {
     }
 
     // This callback will happen on the thread running the Sync Client.
-    void notifySessionError(int errorCode, String errorMessage) {
+    void notifySessionError(String nativeErrorCategory, int nativeErrorCode, String errorMessage) {
         if (errorHandler == null) {
             return;
         }
-        ErrorCode errCode = ErrorCode.fromInt(errorCode);
+        ErrorCode errCode = ErrorCode.fromNativeError(nativeErrorCategory, nativeErrorCode);
         if (errCode == ErrorCode.CLIENT_RESET) {
             // errorMessage contains the path to the backed up file
             RealmConfiguration backupRealmConfiguration = SyncConfiguration.forRecovery(errorMessage, configuration.getEncryptionKey(), configuration.getSchemaMediator());
@@ -239,7 +239,13 @@ void notifySessionError(int errorCode, String errorMessage) {
                     "Read more here: https://realm.io/docs/realm-object-server/#client-recovery-from-a-backup.",
                     configuration, backupRealmConfiguration));
         } else {
-            errorHandler.onError(this, new ObjectServerError(errCode, errorMessage));
+            ObjectServerError wrappedError;
+            if (errCode == ErrorCode.UNKNOWN) {
+                wrappedError = new ObjectServerError(nativeErrorCategory, nativeErrorCode, errorMessage);
+            } else {
+                wrappedError = new ObjectServerError(errCode, errorMessage);
+            }
+            errorHandler.onError(this, wrappedError);
         }
     }
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthServerResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthServerResponse.java
index 4285b565a6..1f2786c241 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthServerResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthServerResponse.java
@@ -65,9 +65,9 @@ public static ObjectServerError createError(String response, int httpErrorCode)
             String hint = obj.optString("hint", null);
             ErrorCode errorCode;
             if (obj.has("code")) {
-                errorCode = ErrorCode.fromInt(obj.getInt("code"));
+                errorCode = ErrorCode.fromNativeError(ErrorCode.Type.AUTH, obj.getInt("code"));
             } else if (obj.has("status")) {
-                errorCode = ErrorCode.fromInt(obj.getInt("status"));
+                errorCode = ErrorCode.fromNativeError(ErrorCode.Type.AUTH, obj.getInt("status"));
             } else {
                 errorCode = ErrorCode.UNKNOWN;
             }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
index cf9c8d85fe..5c0374649b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
@@ -122,27 +122,26 @@ private AuthenticateResponse(String serverResponse) {
         ObjectServerError error;
         Token accessToken;
         Token refreshToken;
-        String message;
+        String debugMessage;
         try {
             JSONObject obj = new JSONObject(serverResponse);
-            accessToken = obj.has(JSON_FIELD_ACCESS_TOKEN) ?
-                    Token.from(obj.getJSONObject(JSON_FIELD_ACCESS_TOKEN)) : null;
-            refreshToken = obj.has(JSON_FIELD_REFRESH_TOKEN) ?
-                    Token.from(obj.getJSONObject(JSON_FIELD_REFRESH_TOKEN)) : null;
+            accessToken = obj.has(JSON_FIELD_ACCESS_TOKEN) ? Token.from(obj.getJSONObject(JSON_FIELD_ACCESS_TOKEN)) : null;
+            refreshToken = obj.has(JSON_FIELD_REFRESH_TOKEN) ? Token.from(obj.getJSONObject(JSON_FIELD_REFRESH_TOKEN)) : null;
             error = null;
             if (accessToken == null) {
-                message = "accessToken = null";
+                debugMessage = "accessToken = null";
             } else {
-                message = String.format(Locale.US, "Identity %s; Path %s", accessToken.identity(), accessToken.path());
+                debugMessage = String.format(Locale.US, "Identity %s; Path %s", accessToken.identity(), accessToken.path());
             }
         } catch (JSONException ex) {
             accessToken = null;
             refreshToken = null;
+            String exceptionMessage = String.format(Locale.US, "Server response could not be parsed as JSON:%n%s", serverResponse);
             //noinspection ThrowableInstanceNeverThrown
-            error = new ObjectServerError(ErrorCode.JSON_EXCEPTION, ex);
-            message = String.format(Locale.US, "Error %s", error.getErrorMessage());
+            error = new ObjectServerError(ErrorCode.JSON_EXCEPTION, exceptionMessage, ex);
+            debugMessage = String.format(Locale.US, "Error %s", error.getErrorMessage());
         }
-        RealmLog.debug("AuthenticateResponse. " + message);
+        RealmLog.debug("AuthenticateResponse. " + debugMessage);
         setError(error);
         this.accessToken = accessToken;
         this.refreshToken = refreshToken;
diff --git a/version.txt b/version.txt
index f678e79be4..7ca1081f54 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-5.8.1-SNAPSHOT
\ No newline at end of file
+5.10.0-SNAPSHOT
\ No newline at end of file
