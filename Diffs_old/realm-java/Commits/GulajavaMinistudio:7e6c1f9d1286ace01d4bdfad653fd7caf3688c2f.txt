diff --git a/CHANGELOG.md b/CHANGELOG.md
index aa0065b4f5..6f1a46d781 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,20 @@
+## 5.13.0(YYYY-MM-DD)
+
+### Enhancements
+* [ObjectServer] Improved session lifecycle debug output. (Issue [#6552](https://github.com/realm/realm-java/pull/6552)).
+
+### Fixed
+* None.
+
+### Compatibility
+* Realm Object Server: 3.21.0 or later.
+* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)
+* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.
+
+### Internal
+* None.
+
+
 ## 5.12.0(2019-06-20)
 
 ### Enhancements
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
index 6e83b62c1d..8e0f4f6511 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsRealmConfig.cpp
@@ -334,7 +334,7 @@ JNIEXPORT jstring JNICALL Java_io_realm_internal_OsRealmConfig_nativeCreateAndSe
         // the session which should be bound.
         auto bind_handler = [](const std::string& path, const SyncConfig& syncConfig,
                                std::shared_ptr<SyncSession> session) {
-            realm::jni_util::Log::d("Callback to Java requesting token for path");
+            realm::jni_util::Log::d("Callback to Java requesting token for path: %1", path.c_str());
 
             JNIEnv* env = realm::jni_util::JniUtils::get_env(true);
 
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 5d948929d3..8031816a87 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -266,6 +266,7 @@ public static synchronized SyncSession getOrCreateSession(SyncConfiguration sync
 
         SyncSession session = sessions.get(syncConfiguration.getPath());
         if (session == null) {
+            RealmLog.debug("Creating session for: %s", syncConfiguration.getPath());
             session = new SyncSession(syncConfiguration);
             sessions.put(syncConfiguration.getPath(), session);
             if (sessions.size() == 1) {
@@ -437,12 +438,13 @@ private static synchronized void removeSession(SyncConfiguration syncConfigurati
         if (syncConfiguration == null) {
             throw new IllegalArgumentException("A non-empty 'syncConfiguration' is required.");
         }
+        RealmLog.debug("Removing session for: %s", syncConfiguration.getPath());
         SyncSession syncSession = sessions.remove(syncConfiguration.getPath());
         if (syncSession != null) {
             syncSession.close();
         }
         if (sessions.isEmpty()) {
-            RealmLog.debug("last session dropped, remove network listener");
+            RealmLog.debug("Last session dropped. Remove network listener.");
             NetworkStateReceiver.removeListener(networkListener);
         }
     }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
index 5c0374649b..fc968d6b12 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/AuthenticateResponse.java
@@ -106,7 +106,6 @@ public static AuthenticateResponse createValidResponseWithUser(String identifier
      * @param error the network or I/O error.
      */
     private AuthenticateResponse(ObjectServerError error) {
-        RealmLog.debug("AuthenticateResponse - Error: " + error);
         setError(error);
         this.accessToken = null;
         this.refreshToken = null;
