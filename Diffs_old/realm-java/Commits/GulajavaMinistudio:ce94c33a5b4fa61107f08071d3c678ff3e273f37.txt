diff --git a/CHANGELOG.md b/CHANGELOG.md
index 261a1bfd36..404f9ffc0c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,16 @@
-## 3.2.0 (YYYY-MM-DD)
+## 3.2.1 (YYYY-MM-DD)
+
+### Deprecated
+
+### Enhancements
+
+* Not in transaction illegal state exception message changed to "Cannot modify managed objects outside of a write transaction.".
+
+### Bug Fixes
+
+### Internal
+
+## 3.2.0 (2017-05-16)
 
 ### Deprecated
 
@@ -13,25 +25,16 @@
 * Added `DynamicRealmObject#linkingObjects(String,String)` to support linking objects on `DynamicRealm` (#4492).
 * Added support for read only Realms using `RealmConfiguration.Builder.readOnly()` and `SyncConfiguration.Builder.readOnly()`(#1147).
 * Change listeners will now auto-expand variable names to be more descriptive when using Android Studio.
+* The `toString()` methods for the standard and dynamic proxies now print "proxy", or "dynamic" before the left bracket enclosing the data.
 
 ### Bug Fixes
 
+* `@LinkingObjects` annotation now also works with Kotlin (#4611).
+
 ### Internal
 
 * Use separated locks for different `RealmCache`s ($4551).
 
-
-# 3.1.5 (YYYY-MM-DD)
-
-## Enhancements
-
-* The `toString()` methods for the standard and dynamic proxies now print "proxy", or "dynamic" before the left bracket enclosing the data.
-
-## Bug fixes
-
-* `@LinkingObjects` annotation now also works with Kotlin (#4611).
-
-
 ## 3.1.4 (2017-05-04)
 
 ## Bug fixes
diff --git a/examples/build.gradle b/examples/build.gradle
index 8fd93d0f63..6d5c61e9f7 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -22,7 +22,7 @@ allprojects {
             maven { url 'https://jitpack.io' }
         }
         dependencies {
-            classpath 'com.android.tools.build:gradle:2.3.1'
+            classpath 'com.android.tools.build:gradle:2.3.2'
             classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
             classpath 'com.github.JakeWharton:sdk-manager-plugin:0ce4cdf08009d79223850a59959d9d6e774d0f77'
             classpath 'com.novoda:gradle-android-command-plugin:1.5.0'
diff --git a/examples/gradle/wrapper/gradle-wrapper.jar b/examples/gradle/wrapper/gradle-wrapper.jar
index 1149f4ca38..ccad502cf0 100644
Binary files a/examples/gradle/wrapper/gradle-wrapper.jar and b/examples/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/examples/gradle/wrapper/gradle-wrapper.properties b/examples/gradle/wrapper/gradle-wrapper.properties
index cbb9ce3c56..3e88d1e5c4 100644
--- a/examples/gradle/wrapper/gradle-wrapper.properties
+++ b/examples/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Mar 22 16:44:51 JST 2017
+#Tue May 16 03:12:59 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar
index 1deb4fd325..c77b099c97 100644
Binary files a/gradle-plugin/gradle/wrapper/gradle-wrapper.jar and b/gradle-plugin/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
index 7dd58c667b..ac21505e86 100644
--- a/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle-plugin/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Mar 22 16:44:52 JST 2017
+#Tue May 16 03:13:01 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 34c574f227..967a4da89f 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a5f34943f0..44bbebba2a 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Mar 22 16:45:06 JST 2017
+#Tue May 16 03:13:02 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.jar b/realm-annotations/gradle/wrapper/gradle-wrapper.jar
index 1149be9d86..bba0767ab1 100644
Binary files a/realm-annotations/gradle/wrapper/gradle-wrapper.jar and b/realm-annotations/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-annotations/gradle/wrapper/gradle-wrapper.properties b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
index a5e2a078c3..d5c18857dd 100644
--- a/realm-annotations/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-annotations/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Mar 22 16:45:01 JST 2017
+#Tue May 16 03:13:05 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/realm-annotations/src/main/java/io/realm/annotations/RealmModule.java b/realm-annotations/src/main/java/io/realm/annotations/RealmModule.java
index f28f9eb835..c8690de362 100644
--- a/realm-annotations/src/main/java/io/realm/annotations/RealmModule.java
+++ b/realm-annotations/src/main/java/io/realm/annotations/RealmModule.java
@@ -23,8 +23,8 @@
 import java.lang.annotation.Target;
 
 /**
- * By default a Realm can stores all classes extending RealmObject in a project. However, if you want to restrict a
- * Realm to only contain a subset of classes or want to share them between a library project and an app project you must
+ * By default a Realm can store all classes extending RealmObject in a project. However, if you want to restrict a
+ * Realm to only contain a subset of classes or want to share them between a library project and an app project, you must
  * use a RealmModule.
  * <p>
  * A RealmModule is a collection of classes extending RealmObject that can be combined with other RealmModules to create
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.jar b/realm-transformer/gradle/wrapper/gradle-wrapper.jar
index 28afc97bba..b0522cfc8a 100644
Binary files a/realm-transformer/gradle/wrapper/gradle-wrapper.jar and b/realm-transformer/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm-transformer/gradle/wrapper/gradle-wrapper.properties b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
index d24868644c..64338485ea 100644
--- a/realm-transformer/gradle/wrapper/gradle-wrapper.properties
+++ b/realm-transformer/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Mar 22 16:45:02 JST 2017
+#Tue May 16 03:13:06 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/realm.properties b/realm.properties
index aa5f3da99d..b4231e304d 100644
--- a/realm.properties
+++ b/realm.properties
@@ -1,2 +1,2 @@
-gradleVersion=3.4.1
+gradleVersion=3.5
 ndkVersion=r10e
diff --git a/realm/build.gradle b/realm/build.gradle
index b7c98a3e74..e35f2580cb 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -7,7 +7,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.1'
+        classpath 'com.android.tools.build:gradle:2.3.2'
         classpath 'de.undercouch:gradle-download-task:3.1.1'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
         classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
@@ -16,7 +16,7 @@ buildscript {
         classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
         classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
         classpath "io.realm:realm-transformer:${file('../version.txt').text.trim()}"
-        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.9'
+        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
     }
 }
 
diff --git a/realm/gradle/wrapper/gradle-wrapper.jar b/realm/gradle/wrapper/gradle-wrapper.jar
index 3123a9e708..bba0767ab1 100644
Binary files a/realm/gradle/wrapper/gradle-wrapper.jar and b/realm/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/realm/gradle/wrapper/gradle-wrapper.properties b/realm/gradle/wrapper/gradle-wrapper.properties
index 783df36eb6..ad3d9f3a11 100644
--- a/realm/gradle/wrapper/gradle-wrapper.properties
+++ b/realm/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Mar 22 16:44:59 JST 2017
+#Tue May 16 03:13:04 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index 6347a049ed..b22fc4f493 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -77,6 +77,7 @@ public void generate() throws IOException, UnsupportedOperationException {
         imports.add("io.realm.internal.RealmObjectProxy");
         imports.add("io.realm.internal.Row");
         imports.add("io.realm.internal.Table");
+        imports.add("io.realm.internal.OsObject");
         imports.add("io.realm.internal.SharedRealm");
         if (!metadata.getBacklinkFields().isEmpty()) {
             imports.add("io.realm.internal.UncheckedRow");
@@ -1487,9 +1488,11 @@ private void addPrimaryKeyCheckIfNeeded(ClassMetaData metadata, boolean throwIfP
 
             writer.beginControlFlow("if (rowIndex == Table.NO_MATCH)");
             if (Utils.isString(metadata.getPrimaryKey())) {
-                writer.emitStatement("rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false)");
+                writer.emitStatement(
+                        "rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue)");
             } else {
-                writer.emitStatement("rowIndex = table.addEmptyRowWithPrimaryKey(((%s) object).%s(), false)",
+                writer.emitStatement(
+                        "rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, ((%s) object).%s())",
                         interfaceName, primaryKeyGetter);
             }
 
@@ -1501,7 +1504,7 @@ private void addPrimaryKeyCheckIfNeeded(ClassMetaData metadata, boolean throwIfP
             writer.endControlFlow();
             writer.emitStatement("cache.put(object, rowIndex)");
         } else {
-            writer.emitStatement("long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1)");
+            writer.emitStatement("long rowIndex = OsObject.createRow(realm.sharedRealm, table)");
             writer.emitStatement("cache.put(object, rowIndex)");
         }
     }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index ee0ab58e19..5b6b6d8d23 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -10,6 +10,7 @@
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.LinkView;
+import io.realm.internal.OsObject;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.SharedRealm;
@@ -891,7 +892,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
         }
         if (rowIndex == Table.NO_MATCH) {
-            rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
+            rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
         } else {
             Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
         }
@@ -954,7 +955,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                     rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
                 }
                 if (rowIndex == Table.NO_MATCH) {
-                    rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
+                    rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
                 } else {
                     Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
                 }
@@ -1013,7 +1014,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
             rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
         }
         if (rowIndex == Table.NO_MATCH) {
-            rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
+            rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
         }
         cache.put(object, rowIndex);
         Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface)object).realmGet$columnLong(), false);
@@ -1081,7 +1082,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     rowIndex = Table.nativeFindFirstString(tableNativePtr, pkColumnIndex, primaryKeyValue);
                 }
                 if (rowIndex == Table.NO_MATCH) {
-                    rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue, false);
+                    rowIndex = OsObject.createRowWithPrimaryKey(realm.sharedRealm, table, primaryKeyValue);
                 }
                 cache.put(object, rowIndex);
                 Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface)object).realmGet$columnLong(), false);
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index 04774d6b8e..c39c1c2632 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -10,6 +10,7 @@
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.LinkView;
+import io.realm.internal.OsObject;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.SharedRealm;
@@ -392,7 +393,7 @@ public static long insert(Realm realm, some.test.Booleans object, Map<RealmModel
         Table table = realm.getTable(some.test.Booleans.class);
         long tableNativePtr = table.getNativePtr();
         BooleansColumnInfo columnInfo = (BooleansColumnInfo) realm.schema.getColumnInfo(some.test.Booleans.class);
-        long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
         cache.put(object, rowIndex);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$done(), false);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$isReady(), false);
@@ -413,7 +414,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                     cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                     continue;
                 }
-                long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+                long rowIndex = OsObject.createRow(realm.sharedRealm, table);
                 cache.put(object, rowIndex);
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$done(), false);
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$isReady(), false);
@@ -430,7 +431,7 @@ public static long insertOrUpdate(Realm realm, some.test.Booleans object, Map<Re
         Table table = realm.getTable(some.test.Booleans.class);
         long tableNativePtr = table.getNativePtr();
         BooleansColumnInfo columnInfo = (BooleansColumnInfo) realm.schema.getColumnInfo(some.test.Booleans.class);
-        long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
         cache.put(object, rowIndex);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$done(), false);
         Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$isReady(), false);
@@ -451,7 +452,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                     continue;
                 }
-                long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+                long rowIndex = OsObject.createRow(realm.sharedRealm, table);
                 cache.put(object, rowIndex);
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$done(), false);
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface)object).realmGet$isReady(), false);
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 7970e35530..2b215a4fe8 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -10,6 +10,7 @@
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.LinkView;
+import io.realm.internal.OsObject;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.SharedRealm;
@@ -1495,7 +1496,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
         Table table = realm.getTable(some.test.NullTypes.class);
         long tableNativePtr = table.getNativePtr();
         NullTypesColumnInfo columnInfo = (NullTypesColumnInfo) realm.schema.getColumnInfo(some.test.NullTypes.class);
-        long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
         cache.put(object, rowIndex);
         String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface)object).realmGet$fieldStringNotNull();
         if (realmGet$fieldStringNotNull != null) {
@@ -1601,7 +1602,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                     cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                     continue;
                 }
-                long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+                long rowIndex = OsObject.createRow(realm.sharedRealm, table);
                 cache.put(object, rowIndex);
                 String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface)object).realmGet$fieldStringNotNull();
                 if (realmGet$fieldStringNotNull != null) {
@@ -1703,7 +1704,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
         Table table = realm.getTable(some.test.NullTypes.class);
         long tableNativePtr = table.getNativePtr();
         NullTypesColumnInfo columnInfo = (NullTypesColumnInfo) realm.schema.getColumnInfo(some.test.NullTypes.class);
-        long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
         cache.put(object, rowIndex);
         String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface)object).realmGet$fieldStringNotNull();
         if (realmGet$fieldStringNotNull != null) {
@@ -1851,7 +1852,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                     continue;
                 }
-                long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+                long rowIndex = OsObject.createRow(realm.sharedRealm, table);
                 cache.put(object, rowIndex);
                 String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface)object).realmGet$fieldStringNotNull();
                 if (realmGet$fieldStringNotNull != null) {
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index b5bb229267..af7a9d3b4d 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -10,6 +10,7 @@
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.LinkView;
+import io.realm.internal.OsObject;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.SharedRealm;
@@ -298,7 +299,7 @@ public static long insert(Realm realm, some.test.Simple object, Map<RealmModel,L
         Table table = realm.getTable(some.test.Simple.class);
         long tableNativePtr = table.getNativePtr();
         SimpleColumnInfo columnInfo = (SimpleColumnInfo) realm.schema.getColumnInfo(some.test.Simple.class);
-        long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
         cache.put(object, rowIndex);
         String realmGet$name = ((SimpleRealmProxyInterface)object).realmGet$name();
         if (realmGet$name != null) {
@@ -320,7 +321,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                     cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                     continue;
                 }
-                long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+                long rowIndex = OsObject.createRow(realm.sharedRealm, table);
                 cache.put(object, rowIndex);
                 String realmGet$name = ((SimpleRealmProxyInterface)object).realmGet$name();
                 if (realmGet$name != null) {
@@ -338,7 +339,7 @@ public static long insertOrUpdate(Realm realm, some.test.Simple object, Map<Real
         Table table = realm.getTable(some.test.Simple.class);
         long tableNativePtr = table.getNativePtr();
         SimpleColumnInfo columnInfo = (SimpleColumnInfo) realm.schema.getColumnInfo(some.test.Simple.class);
-        long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+        long rowIndex = OsObject.createRow(realm.sharedRealm, table);
         cache.put(object, rowIndex);
         String realmGet$name = ((SimpleRealmProxyInterface)object).realmGet$name();
         if (realmGet$name != null) {
@@ -362,7 +363,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     cache.put(object, ((RealmObjectProxy)object).realmGet$proxyState().getRow$realm().getIndex());
                     continue;
                 }
-                long rowIndex = Table.nativeAddEmptyRow(tableNativePtr, 1);
+                long rowIndex = OsObject.createRow(realm.sharedRealm, table);
                 cache.put(object, rowIndex);
                 String realmGet$name = ((SimpleRealmProxyInterface)object).realmGet$name();
                 if (realmGet$name != null) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
index 8651633893..3a04a45e27 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
@@ -937,27 +937,27 @@ public void untypedGetterSetter() {
                         break;
                     case SHORT:
                         dObj.set(AllJavaTypes.FIELD_SHORT, (short) 42);
-                        assertEquals(Long.parseLong("42"), dObj.get(AllJavaTypes.FIELD_SHORT));
+                        assertEquals(Long.parseLong("42"), dObj.<Long> get(AllJavaTypes.FIELD_SHORT).longValue());
                         break;
                     case INT:
                         dObj.set(AllJavaTypes.FIELD_INT, 42);
-                        assertEquals(Long.parseLong("42"), dObj.get(AllJavaTypes.FIELD_INT));
+                        assertEquals(Long.parseLong("42"), dObj.<Long> get(AllJavaTypes.FIELD_INT).longValue());
                         break;
                     case LONG:
                         dObj.set(AllJavaTypes.FIELD_LONG, 42L);
-                        assertEquals(Long.parseLong("42"), dObj.get(AllJavaTypes.FIELD_LONG));
+                        assertEquals(Long.parseLong("42"), dObj.<Long> get(AllJavaTypes.FIELD_LONG).longValue());
                         break;
                     case BYTE:
                         dObj.set(AllJavaTypes.FIELD_BYTE, (byte) 4);
-                        assertEquals(Long.parseLong("4"), dObj.get(AllJavaTypes.FIELD_BYTE));
+                        assertEquals(Long.parseLong("4"), dObj.<Long> get(AllJavaTypes.FIELD_BYTE).longValue());
                         break;
                     case FLOAT:
                         dObj.set(AllJavaTypes.FIELD_FLOAT, 1.23f);
-                        assertEquals(Float.parseFloat("1.23"), dObj.get(AllJavaTypes.FIELD_FLOAT));
+                        assertEquals(Float.parseFloat("1.23"), dObj.<Float> get(AllJavaTypes.FIELD_FLOAT), Float.MIN_NORMAL);
                         break;
                     case DOUBLE:
                         dObj.set(AllJavaTypes.FIELD_DOUBLE, 1.234d);
-                        assertEquals(Double.parseDouble("1.234"), dObj.get(AllJavaTypes.FIELD_DOUBLE));
+                        assertEquals(Double.parseDouble("1.234"), dObj.<Double>get(AllJavaTypes.FIELD_DOUBLE), Double.MIN_NORMAL);
                         break;
                     case STRING:
                         dObj.set(AllJavaTypes.FIELD_STRING, "str");
diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
index 400f618dc9..b98b5edbfa 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
@@ -476,27 +476,27 @@ public void run() {
             @Override
             public void onChange(RealmResults<DynamicRealmObject> object) {
                 assertEquals("data 0", realmResults1.get(0).get(AllTypes.FIELD_STRING));
-                assertEquals(3L, realmResults1.get(0).get(AllTypes.FIELD_LONG));
+                assertEquals(3L, realmResults1.get(0).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 0", realmResults1.get(1).get(AllTypes.FIELD_STRING));
-                assertEquals(2L, realmResults1.get(1).get(AllTypes.FIELD_LONG));
+                assertEquals(2L, realmResults1.get(1).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 0", realmResults1.get(2).get(AllTypes.FIELD_STRING));
-                assertEquals(0L, realmResults1.get(2).get(AllTypes.FIELD_LONG));
+                assertEquals(0L, realmResults1.get(2).<Long> get(AllTypes.FIELD_LONG).longValue());
 
                 assertEquals("data 1", realmResults1.get(3).get(AllTypes.FIELD_STRING));
-                assertEquals(4L, realmResults1.get(3).get(AllTypes.FIELD_LONG));
+                assertEquals(4L, realmResults1.get(3).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 1", realmResults1.get(4).get(AllTypes.FIELD_STRING));
-                assertEquals(3L, realmResults1.get(4).get(AllTypes.FIELD_LONG));
+                assertEquals(3L, realmResults1.get(4).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 1", realmResults1.get(5).get(AllTypes.FIELD_STRING));
-                assertEquals(1L, realmResults1.get(5).get(AllTypes.FIELD_LONG));
+                assertEquals(1L, realmResults1.get(5).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 1", realmResults1.get(6).get(AllTypes.FIELD_STRING));
-                assertEquals(0L, realmResults1.get(6).get(AllTypes.FIELD_LONG));
+                assertEquals(0L, realmResults1.get(6).<Long> get(AllTypes.FIELD_LONG).longValue());
 
                 assertEquals("data 2", realmResults1.get(7).get(AllTypes.FIELD_STRING));
-                assertEquals(4L, realmResults1.get(7).get(AllTypes.FIELD_LONG));
+                assertEquals(4L, realmResults1.get(7).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 2", realmResults1.get(8).get(AllTypes.FIELD_STRING));
-                assertEquals(2L, realmResults1.get(8).get(AllTypes.FIELD_LONG));
+                assertEquals(2L, realmResults1.get(8).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 2", realmResults1.get(9).get(AllTypes.FIELD_STRING));
-                assertEquals(1L, realmResults1.get(9).get(AllTypes.FIELD_LONG));
+                assertEquals(1L, realmResults1.get(9).<Long> get(AllTypes.FIELD_LONG).longValue());
 
                 signalCallbackDone.run();
             }
@@ -506,27 +506,27 @@ public void onChange(RealmResults<DynamicRealmObject> object) {
             @Override
             public void onChange(RealmResults<DynamicRealmObject> object) {
                 assertEquals("data 2", realmResults2.get(0).get(AllTypes.FIELD_STRING));
-                assertEquals(1L, realmResults2.get(0).get(AllTypes.FIELD_LONG));
+                assertEquals(1L, realmResults2.get(0).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 2", realmResults2.get(1).get(AllTypes.FIELD_STRING));
-                assertEquals(2L, realmResults2.get(1).get(AllTypes.FIELD_LONG));
+                assertEquals(2L, realmResults2.get(1).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 2", realmResults2.get(2).get(AllTypes.FIELD_STRING));
-                assertEquals(4L, realmResults2.get(2).get(AllTypes.FIELD_LONG));
+                assertEquals(4L, realmResults2.get(2).<Long> get(AllTypes.FIELD_LONG).longValue());
 
                 assertEquals("data 1", realmResults2.get(3).get(AllTypes.FIELD_STRING));
-                assertEquals(0L, realmResults2.get(3).get(AllTypes.FIELD_LONG));
+                assertEquals(0L, realmResults2.get(3).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 1", realmResults2.get(4).get(AllTypes.FIELD_STRING));
-                assertEquals(1L, realmResults2.get(4).get(AllTypes.FIELD_LONG));
+                assertEquals(1L, realmResults2.get(4).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 1", realmResults2.get(5).get(AllTypes.FIELD_STRING));
-                assertEquals(3L, realmResults2.get(5).get(AllTypes.FIELD_LONG));
+                assertEquals(3L, realmResults2.get(5).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 1", realmResults2.get(6).get(AllTypes.FIELD_STRING));
-                assertEquals(4L, realmResults2.get(6).get(AllTypes.FIELD_LONG));
+                assertEquals(4L, realmResults2.get(6).<Long> get(AllTypes.FIELD_LONG).longValue());
 
                 assertEquals("data 0", realmResults2.get(7).get(AllTypes.FIELD_STRING));
-                assertEquals(0L, realmResults2.get(7).get(AllTypes.FIELD_LONG));
+                assertEquals(0L, realmResults2.get(7).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 0", realmResults2.get(8).get(AllTypes.FIELD_STRING));
-                assertEquals(2L, realmResults2.get(8).get(AllTypes.FIELD_LONG));
+                assertEquals(2L, realmResults2.get(8).<Long> get(AllTypes.FIELD_LONG).longValue());
                 assertEquals("data 0", realmResults2.get(9).get(AllTypes.FIELD_STRING));
-                assertEquals(3L, realmResults2.get(9).get(AllTypes.FIELD_LONG));
+                assertEquals(3L, realmResults2.get(9).<Long> get(AllTypes.FIELD_LONG).longValue());
 
                 signalCallbackDone.run();
             }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java
index dc37e6c8ad..74e6df85f3 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmNullPrimaryKeyTests.java
@@ -202,7 +202,7 @@ public void createObject_duplicatedNullPrimaryKeyThrows() throws NoSuchMethodExc
             realm.createObject(testClazz, null);
             fail("Null value as primary key already exists.");
         } catch (RealmPrimaryKeyConstraintException expected) {
-            assertEquals("Value already exists: null", expected.getMessage());
+            assertEquals("Primary key value already exists: 'null' .", expected.getMessage());
         } finally {
             realm.cancelTransaction();
         }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index abf5b79c5d..df3d0ad061 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -1308,7 +1308,7 @@ public void copyToRealm_duplicatedNullPrimaryKeyThrows() {
                 }
                 fail("Null value as primary key already exists.");
             } catch (RealmPrimaryKeyConstraintException expected) {
-                assertEquals("Value already exists: null", expected.getMessage());
+                assertEquals("Primary key value already exists: 'null' .", expected.getMessage());
             } finally {
                 realm.cancelTransaction();
             }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
index 6d1e8570f0..33e47f88a9 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIQueryTest.java
@@ -71,7 +71,7 @@ public void testShouldQuery() {
         assertEquals(14+16, cnt);
 
         double avg = query.averageInt(0);
-        assertEquals(15.0, avg);
+        assertEquals(15.0, avg, Double.MIN_NORMAL);
 
         // TODO: Add tests with all parameters
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
index 8b9c613d0b..3d8902ea90 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
@@ -48,8 +48,8 @@ public void testRow() {
 
         assertEquals("abc", row.getString(0));
         assertEquals(3, row.getLong(1));
-        assertEquals((float) 1.2, row.getFloat(2), 0.0001);
-        assertEquals(1.3, row.getDouble(3));
+        assertEquals(1.2F, row.getFloat(2), Float.MIN_NORMAL);
+        assertEquals(1.3, row.getDouble(3), Double.MIN_NORMAL);
         assertEquals(true, row.getBoolean(4));
         assertEquals(new Date(0), row.getDate(5));
         MoreAsserts.assertEquals(data, row.getBinaryByteArray(6));
@@ -67,8 +67,8 @@ public void testRow() {
 
         assertEquals("a", row.getString(0));
         assertEquals(1, row.getLong(1));
-        assertEquals((float) 8.8, row.getFloat(2), 0.0001);
-        assertEquals(9.9, row.getDouble(3));
+        assertEquals(8.8F, row.getFloat(2), Float.MIN_NORMAL);
+        assertEquals(9.9, row.getDouble(3), Double.MIN_NORMAL);
         assertEquals(false, row.getBoolean(4));
         assertEquals(new Date(10000), row.getDate(5));
         MoreAsserts.assertEquals(newData, row.getBinaryByteArray(6));
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
index e04e8b4d4f..e13b17bfca 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
@@ -31,7 +31,6 @@
 
 import io.realm.RealmConfiguration;
 import io.realm.RealmFieldType;
-import io.realm.exceptions.RealmError;
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmPrimaryKeyConstraintException;
 import io.realm.rule.TestRealmConfigurationFactory;
@@ -120,7 +119,7 @@ public void removingPrimaryKeyRemovesConstraint_typeSetters() {
     public void addEmptyRowWithPrimaryKeyWrongTypeStringThrows() {
         Table t = getTableWithStringPrimaryKey();
         try {
-            t.addEmptyRowWithPrimaryKey(42);
+            OsObject.createWithPrimaryKey(sharedRealm, t, 42);
             fail();
         } catch (IllegalArgumentException ignored) {
         }
@@ -130,7 +129,7 @@ public void addEmptyRowWithPrimaryKeyWrongTypeStringThrows() {
     @Test
     public void addEmptyRowWithPrimaryKeyNullString() {
         Table t = getTableWithStringPrimaryKey();
-        t.addEmptyRowWithPrimaryKey(null);
+        OsObject.createWithPrimaryKey(sharedRealm, t, null);
         assertEquals(1, t.size());
         sharedRealm.cancelTransaction();
     }
@@ -139,7 +138,7 @@ public void addEmptyRowWithPrimaryKeyNullString() {
     public void addEmptyRowWithPrimaryKeyWrongTypeIntegerThrows() {
         Table t = getTableWithIntegerPrimaryKey();
         try {
-            t.addEmptyRowWithPrimaryKey("Foo");
+            OsObject.createWithPrimaryKey(sharedRealm, t, "Foo");
             fail();
         } catch (IllegalArgumentException ignored) {
         }
@@ -149,18 +148,18 @@ public void addEmptyRowWithPrimaryKeyWrongTypeIntegerThrows() {
     @Test
     public void addEmptyRowWithPrimaryKeyString() {
         Table t = getTableWithStringPrimaryKey();
-        long rowIndex = t.addEmptyRowWithPrimaryKey("Foo");
+        UncheckedRow row = OsObject.createWithPrimaryKey(sharedRealm, t, "Foo");
         assertEquals(1, t.size());
-        assertEquals("Foo", t.getUncheckedRow(rowIndex).getString(0));
+        assertEquals("Foo", row.getString(0));
         sharedRealm.cancelTransaction();
     }
 
     @Test
     public void addEmptyRowWithPrimaryKeyLong() {
         Table t = getTableWithIntegerPrimaryKey();
-        long rowIndex = t.addEmptyRowWithPrimaryKey(42);
+        UncheckedRow row = OsObject.createWithPrimaryKey(sharedRealm, t, 42);
         assertEquals(1, t.size());
-        assertEquals(42L, t.getUncheckedRow(rowIndex).getLong(0));
+        assertEquals(42L, row.getLong(0));
         sharedRealm.cancelTransaction();
     }
 
diff --git a/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmInsertBenchmark.java b/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmInsertBenchmark.java
new file mode 100644
index 0000000000..8814a1b280
--- /dev/null
+++ b/realm/realm-library/src/benchmarks/java/io/realm/benchmarks/RealmInsertBenchmark.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.benchmarks;
+
+import android.support.test.InstrumentationRegistry;
+
+import org.junit.runner.RunWith;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import dk.ilios.spanner.AfterExperiment;
+import dk.ilios.spanner.BeforeExperiment;
+import dk.ilios.spanner.Benchmark;
+import dk.ilios.spanner.BenchmarkConfiguration;
+import dk.ilios.spanner.SpannerConfig;
+import dk.ilios.spanner.junit.SpannerRunner;
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
+import io.realm.benchmarks.config.BenchmarkConfig;
+import io.realm.entities.AllTypes;
+import io.realm.entities.AllTypesPrimaryKey;
+
+@RunWith(SpannerRunner.class)
+public class RealmInsertBenchmark {
+
+    @BenchmarkConfiguration
+    public SpannerConfig configuration = BenchmarkConfig.getConfiguration(this.getClass().getCanonicalName());
+
+    private Realm realm;
+    private static final int COLLECTION_SIZE = 100;
+    private List<AllTypes> noPkObjects = new ArrayList<AllTypes>(COLLECTION_SIZE);
+    private List<AllTypesPrimaryKey> pkObjects = new ArrayList<AllTypesPrimaryKey>(COLLECTION_SIZE);
+
+    @BeforeExperiment
+    public void before() {
+        Realm.init(InstrumentationRegistry.getTargetContext());
+        RealmConfiguration config = new RealmConfiguration.Builder().build();
+        Realm.deleteRealm(config);
+        realm = Realm.getInstance(config);
+
+        for (int i = 0; i < COLLECTION_SIZE; i++) {
+            noPkObjects.add(new AllTypes());
+        }
+
+        for (int i = 0; i < COLLECTION_SIZE; i++) {
+            AllTypesPrimaryKey allTypesPrimaryKey = new AllTypesPrimaryKey();
+            allTypesPrimaryKey.setColumnLong(i);
+            pkObjects.add(allTypesPrimaryKey);
+        }
+
+        realm.beginTransaction();
+    }
+
+    @AfterExperiment
+    public void after() {
+        realm.cancelTransaction();
+        realm.close();
+    }
+
+    @Benchmark
+    public void insertNoPrimaryKey(long reps) {
+        AllTypes allTypes = new AllTypes();
+        for (long i = 0; i < reps; i++) {
+            realm.insert(allTypes);
+        }
+    }
+
+    @Benchmark
+    public void insertNoPrimaryKeyList(long reps) {
+        for (long i = 0; i < reps; i++) {
+            realm.insert(noPkObjects);
+        }
+    }
+
+    @Benchmark
+    public void insertWithPrimaryKey(long reps) {
+        AllTypesPrimaryKey allTypesPrimaryKey = new AllTypesPrimaryKey();
+        for (long i = 0; i < reps; i++) {
+            allTypesPrimaryKey.setColumnLong(i);
+            realm.insertOrUpdate(allTypesPrimaryKey);
+        }
+    }
+
+    @Benchmark
+    public void insertOrUpdateWithPrimaryKeyList(long reps) {
+        for (long i = 0; i < reps; i++) {
+            realm.insertOrUpdate(pkObjects);
+        }
+    }
+}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
index 62887708c9..f6b040603f 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp
@@ -19,14 +19,17 @@
 #include <realm/row.hpp>
 #include <object_schema.hpp>
 #include <object.hpp>
+#include <util/format.hpp>
 
 #include "util.hpp"
 
 #include "jni_util/java_global_weak_ref.hpp"
 #include "jni_util/java_method.hpp"
+#include "jni_util/java_class.hpp"
 
 using namespace realm;
 using namespace realm::jni_util;
+using namespace realm::_impl;
 
 // We need to control the life cycle of Object, weak ref of Java OsObject and the NotificationToken.
 // Wrap all three together, so when the Java object gets GCed, all three of them will be invalidated.
@@ -152,6 +155,90 @@ static void finalize_object(jlong ptr)
     delete reinterpret_cast<ObjectWrapper*>(ptr);
 }
 
+static inline size_t do_create_row(jlong shared_realm_ptr, jlong table_ptr)
+{
+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
+    auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+    shared_realm->verify_in_write();
+    return table.add_empty_row();
+}
+
+template <class T>
+static void throw_duplicated_primary_key_exception(JNIEnv* env, T value)
+{
+    static JavaClass dup_pk_exception(env, "io/realm/exceptions/RealmPrimaryKeyConstraintException");
+    env->ThrowNew(dup_pk_exception, format("Primary key value already exists: %1 .", value).c_str());
+}
+
+static inline size_t do_create_row_with_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ptr,
+                                                    jlong pk_column_ndx, jlong pk_value, jboolean is_pk_null)
+{
+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
+    auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+    shared_realm->verify_in_write(); // throws
+    if (is_pk_null && !TBL_AND_COL_NULLABLE(env, &table, pk_column_ndx)) {
+        return realm::npos;
+    }
+
+    if (is_pk_null) {
+        if (table.find_first_null(pk_column_ndx) != realm::npos) {
+            throw_duplicated_primary_key_exception(env, "'null'");
+            return realm::npos;
+        }
+    }
+    else {
+        if (table.find_first_int(pk_column_ndx, pk_value) != realm::npos) {
+            throw_duplicated_primary_key_exception(env, reinterpret_cast<long long>(pk_value));
+            return realm::npos;
+        }
+    }
+
+    size_t row_ndx = table.add_empty_row();
+
+    if (is_pk_null) {
+        table.set_null_unique(pk_column_ndx, row_ndx);
+    }
+    else {
+        table.set_int_unique(pk_column_ndx, row_ndx, pk_value);
+    }
+    return row_ndx;
+}
+
+static inline size_t do_create_row_with_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ptr,
+                                                    jlong pk_column_ndx, jstring pk_value)
+{
+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
+    auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+    JStringAccessor str_accessor(env, pk_value); // throws
+    shared_realm->verify_in_write();             // throws
+    if (!pk_value && !TBL_AND_COL_NULLABLE(env, &table, pk_column_ndx)) {
+        return realm::npos;
+    }
+
+    if (pk_value) {
+        if (table.find_first_string(pk_column_ndx, str_accessor) != realm::npos) {
+            throw_duplicated_primary_key_exception(env, str_accessor.operator std::string());
+            return realm::npos;
+        }
+    }
+    else {
+        if (table.find_first_null(pk_column_ndx) != realm::npos) {
+            throw_duplicated_primary_key_exception(env, "'null'");
+            return realm::npos;
+        }
+    }
+
+    size_t row_ndx = table.add_empty_row();
+    if (pk_value) {
+        table.set_string_unique(pk_column_ndx, row_ndx, str_accessor);
+    }
+    else {
+        table.set_string_unique(pk_column_ndx, row_ndx, null{});
+    }
+
+    return row_ndx;
+}
+
 JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeGetFinalizerPtr(JNIEnv*, jclass)
 {
     TR_ENTER()
@@ -159,7 +246,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeGetFinalizerPtr(JN
 }
 
 JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreate(JNIEnv*, jclass, jlong shared_realm_ptr,
-                                                                      jlong row_ptr)
+                                                                     jlong row_ptr)
 {
     TR_ENTER_PTR(row_ptr)
 
@@ -176,7 +263,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreate(JNIEnv*, jc
 }
 
 JNIEXPORT void JNICALL Java_io_realm_internal_OsObject_nativeStartListening(JNIEnv* env, jobject instance,
-                                                                             jlong native_ptr)
+                                                                            jlong native_ptr)
 {
     TR_ENTER_PTR(native_ptr)
 
@@ -204,3 +291,78 @@ JNIEXPORT void JNICALL Java_io_realm_internal_OsObject_nativeStopListening(JNIEn
     }
     CATCH_STD()
 }
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateRow(JNIEnv* env, jclass, jlong shared_realm_ptr,
+                                                                        jlong table_ptr)
+{
+    try {
+        return do_create_row(shared_realm_ptr, table_ptr);
+    }
+    CATCH_STD()
+    return -1;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateNewObject(JNIEnv* env, jclass,
+                                                                              jlong shared_realm_ptr, jlong table_ptr)
+{
+    try {
+        size_t row_ndx = do_create_row(shared_realm_ptr, table_ptr);
+        auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+        return reinterpret_cast<jlong>(new Row(table[row_ndx]));
+    }
+    CATCH_STD()
+    return 0;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateNewObjectWithLongPrimaryKey(
+    JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ptr, jlong pk_column_ndx, jlong pk_value,
+    jboolean is_pk_null)
+{
+    try {
+        auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+        size_t row_ndx =
+            do_create_row_with_primary_key(env, shared_realm_ptr, table_ptr, pk_column_ndx, pk_value, is_pk_null);
+        if (row_ndx != realm::npos) {
+            return reinterpret_cast<jlong>(new Row(table[row_ndx]));
+        }
+    }
+    CATCH_STD()
+    return 0;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateRowWithLongPrimaryKey(
+    JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ptr, jlong pk_column_ndx, jlong pk_value,
+    jboolean is_pk_null)
+{
+    try {
+        return do_create_row_with_primary_key(env, shared_realm_ptr, table_ptr, pk_column_ndx, pk_value, is_pk_null);
+    }
+    CATCH_STD()
+    return realm::npos;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateNewObjectWithStringPrimaryKey(
+    JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ptr, jlong pk_column_ndx, jstring pk_value)
+{
+    try {
+        auto& table = *(reinterpret_cast<realm::Table*>(table_ptr));
+        size_t row_ndx = do_create_row_with_primary_key(env, shared_realm_ptr, table_ptr, pk_column_ndx, pk_value);
+        if (row_ndx != realm::npos) {
+            return reinterpret_cast<jlong>(new Row(table[row_ndx]));
+        }
+    }
+    CATCH_STD()
+
+    return 0;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateRowWithStringPrimaryKey(
+    JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ptr, jlong pk_column_ndx, jstring pk_value)
+{
+    try {
+        return do_create_row_with_primary_key(env, shared_realm_ptr, table_ptr, pk_column_ndx, pk_value);
+    }
+    CATCH_STD()
+
+    return realm::npos;
+}
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
index 718b7044c7..f9b3451d58 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealm.java
@@ -18,6 +18,8 @@
 
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmFileException;
+import io.realm.internal.CheckedRow;
+import io.realm.internal.OsObject;
 import io.realm.internal.Table;
 import io.realm.log.RealmLog;
 import rx.Observable;
@@ -106,8 +108,8 @@ public DynamicRealmObject createObject(String className) {
             throw new RealmException(String.format("'%s' has a primary key, use" +
                     " 'createObject(String, Object)' instead.", className));
         }
-        long rowIndex = table.addEmptyRow();
-        return get(DynamicRealmObject.class, className, rowIndex);
+
+        return new DynamicRealmObject(this, CheckedRow.getFromRow(OsObject.create(sharedRealm, table)));
     }
 
     /**
@@ -123,8 +125,8 @@ public DynamicRealmObject createObject(String className) {
      */
     public DynamicRealmObject createObject(String className, Object primaryKeyValue) {
         Table table = schema.getTable(className);
-        long index = table.addEmptyRowWithPrimaryKey(primaryKeyValue);
-        return new DynamicRealmObject(this, table.getCheckedRow(index));
+        return new DynamicRealmObject(this,
+                CheckedRow.getFromRow(OsObject.createWithPrimaryKey(sharedRealm, table, primaryKeyValue)));
     }
 
     /**
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 51a2707b1a..c3af8bfb8b 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -52,6 +52,7 @@
 import io.realm.internal.ColumnIndices;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.ObjectServerFacade;
+import io.realm.internal.OsObject;
 import io.realm.internal.RealmCore;
 import io.realm.internal.RealmNotifier;
 import io.realm.internal.RealmObjectProxy;
@@ -986,8 +987,10 @@ private Scanner getFullStringScanner(InputStream in) {
             throw new RealmException(String.format("'%s' has a primary key, use" +
                     " 'createObject(Class<E>, Object)' instead.", table.getClassName()));
         }
-        long rowIndex = table.addEmptyRow();
-        return get(clazz, rowIndex, acceptDefaultValue, excludeFields);
+        return configuration.getSchemaMediator().newInstance(clazz, this,
+                OsObject.create(sharedRealm, table),
+                schema.getColumnInfo(clazz),
+                acceptDefaultValue, excludeFields);
     }
 
     /**
@@ -1030,8 +1033,11 @@ private Scanner getFullStringScanner(InputStream in) {
             boolean acceptDefaultValue,
             List<String> excludeFields) {
         Table table = schema.getTable(clazz);
-        long rowIndex = table.addEmptyRowWithPrimaryKey(primaryKeyValue);
-        return get(clazz, rowIndex, acceptDefaultValue, excludeFields);
+
+        return configuration.getSchemaMediator().newInstance(clazz, this,
+                OsObject.createWithPrimaryKey(sharedRealm, table, primaryKeyValue),
+                schema.getColumnInfo(clazz),
+                acceptDefaultValue, excludeFields);
     }
 
     /**
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
index 33e1807b04..bcfcaaa48f 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObject.java
@@ -17,12 +17,14 @@
 package io.realm.internal;
 
 import io.realm.ObjectChangeSet;
+import io.realm.RealmFieldType;
 import io.realm.RealmModel;
 import io.realm.RealmObjectChangeListener;
+import io.realm.exceptions.RealmException;
 
 
 /**
- * Java wrapper for Object Store's {@code Object} class. Currently it is only used for object notifications.
+ * Java wrapper for Object Store's {@code Object} class.
  */
 @KeepMember
 public class OsObject implements NativeObject {
@@ -142,6 +144,91 @@ public void setObserverPairs(ObserverPairList<ObjectObserverPair> pairs) {
         }
     }
 
+    // TODO: consider to return a OsObject instead when integrating with Object Store's object accessor.
+    /**
+     * Create an object in the given table which doesn't have a primary key column defined.
+     *
+     * @return a newly created {@code UncheckedRow}.
+     */
+    public static UncheckedRow create(SharedRealm sharedRealm, Table table) {
+        return new UncheckedRow(sharedRealm.context, table,
+                nativeCreateNewObject(sharedRealm.getNativePtr(), table.getNativePtr()));
+    }
+
+    /**
+     * Create a row in the given table which doesn't have a primary key column defined.
+     * This is used for the fast bulk insertion.
+     *
+     * @return a newly created row's index.
+     */
+    public static long createRow(SharedRealm sharedRealm, Table table) {
+        return nativeCreateRow(sharedRealm.getNativePtr(), table.getNativePtr());
+    }
+
+    private static long getAndVerifyPrimaryKeyColumnIndex(Table table) {
+        long primaryKeyColumnIndex = table.getPrimaryKey();
+        if (primaryKeyColumnIndex == Table.NO_PRIMARY_KEY) {
+            throw new IllegalStateException(table.getName() + " has no primary key defined.");
+        }
+        return primaryKeyColumnIndex;
+    }
+
+    // TODO: consider to return a OsObject instead when integrating with Object Store's object accessor.
+    /**
+     * Create an object in the given table which has a primary key column defined, and set the primary key with given
+     * value.
+     *
+     * @return a newly created {@code UncheckedRow}.
+     */
+    public static UncheckedRow createWithPrimaryKey(SharedRealm sharedRealm, Table table, Object primaryKeyValue) {
+        long primaryKeyColumnIndex = getAndVerifyPrimaryKeyColumnIndex(table);
+        RealmFieldType type = table.getColumnType(primaryKeyColumnIndex);
+
+        if (type == RealmFieldType.STRING) {
+            if (primaryKeyValue != null && !(primaryKeyValue instanceof String)) {
+                throw new IllegalArgumentException("Primary key value is not a String: " + primaryKeyValue);
+            }
+            return new UncheckedRow(sharedRealm.context, table,
+                    nativeCreateNewObjectWithStringPrimaryKey(sharedRealm.getNativePtr(), table.getNativePtr(),
+                            primaryKeyColumnIndex, (String) primaryKeyValue));
+
+        } else if (type == RealmFieldType.INTEGER) {
+            long value = primaryKeyValue == null ? 0 : Long.parseLong(primaryKeyValue.toString());
+            return new UncheckedRow(sharedRealm.context, table,
+                    nativeCreateNewObjectWithLongPrimaryKey(sharedRealm.getNativePtr(), table.getNativePtr(),
+                            primaryKeyColumnIndex, value, primaryKeyValue == null));
+        } else {
+            throw new RealmException("Cannot check for duplicate rows for unsupported primary key type: " + type);
+        }
+    }
+
+    /**
+     * Create an object in the given table which has a primary key column defined, and set the primary key with given
+     * value.
+     * This is used for the fast bulk insertion.
+     *
+     * @return a newly created {@code UncheckedRow}.
+     */
+    public static long createRowWithPrimaryKey(SharedRealm sharedRealm, Table table, Object primaryKeyValue) {
+        long primaryKeyColumnIndex = getAndVerifyPrimaryKeyColumnIndex(table);
+        RealmFieldType type = table.getColumnType(primaryKeyColumnIndex);
+
+        if (type == RealmFieldType.STRING) {
+            if (primaryKeyValue != null && !(primaryKeyValue instanceof String)) {
+                throw new IllegalArgumentException("Primary key value is not a String: " + primaryKeyValue);
+            }
+            return nativeCreateRowWithStringPrimaryKey(sharedRealm.getNativePtr(), table.getNativePtr(),
+                    primaryKeyColumnIndex, (String) primaryKeyValue);
+
+        } else if (type == RealmFieldType.INTEGER) {
+            long value = primaryKeyValue == null ? 0 : Long.parseLong(primaryKeyValue.toString());
+            return nativeCreateRowWithLongPrimaryKey(sharedRealm.getNativePtr(), table.getNativePtr(),
+                    primaryKeyColumnIndex, value, primaryKeyValue == null);
+        } else {
+            throw new RealmException("Cannot check for duplicate rows for unsupported primary key type: " + type);
+        }
+    }
+
     // Called by JNI
     @SuppressWarnings("unused")
     @KeepMember
@@ -156,4 +243,29 @@ private void notifyChangeListeners(String[] changedFields) {
     private native void nativeStartListening(long nativePtr);
 
     private native void nativeStopListening(long nativePtr);
+
+    private static native long nativeCreateNewObject(long sharedRealmPtr, long tablePtr);
+
+    private static native long nativeCreateRow(long sharedRealmPtr, long tablePtr);
+
+
+    // Return a pointer to newly created Row. We may need to return a OsObject pointer in the future.
+    private static native long nativeCreateNewObjectWithLongPrimaryKey(long sharedRealmPtr,
+                                                                       long tablePtr, long pk_column_index,
+                                                                       long primaryKeyValue, boolean isNullValue);
+
+    // Return a index of newly created Row.
+    private static native long nativeCreateRowWithLongPrimaryKey(long sharedRealmPtr,
+                                                                 long tablePtr, long pk_column_index,
+                                                                 long primaryKeyValue, boolean isNullValue);
+
+    // Return a pointer to newly created Row. We may need to return a OsObject pointer in the future.
+    private static native long nativeCreateNewObjectWithStringPrimaryKey(long sharedRealmPtr,
+                                                                         long tablePtr, long pk_column_index,
+                                                                         String primaryKeyValue);
+
+    // Return a index of newly created Row.
+    private static native long nativeCreateRowWithStringPrimaryKey(long sharedRealmPtr,
+                                                                   long tablePtr, long pk_column_index,
+                                                                   String primaryKeyValue);
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index 53bde14879..97b937a99e 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -56,7 +56,7 @@
     private static final long PRIMARY_KEY_CLASS_COLUMN_INDEX = 0;
     private static final String PRIMARY_KEY_FIELD_COLUMN_NAME = "pk_property";
     private static final long PRIMARY_KEY_FIELD_COLUMN_INDEX = 1;
-    private static final long NO_PRIMARY_KEY = -2;
+    public static final long NO_PRIMARY_KEY = -2;
 
     private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
 
@@ -364,89 +364,6 @@ public long addEmptyRow() {
         return nativeAddEmptyRow(nativePtr, 1);
     }
 
-    /**
-     * Adds an empty row to the table and set the primary key with the given value. Equivalent to call
-     * {@link #addEmptyRowWithPrimaryKey(Object, boolean)} with {@code validation = true}.
-     *
-     * @param primaryKeyValue the primary key value
-     * @return the row index.
-     */
-    public long addEmptyRowWithPrimaryKey(Object primaryKeyValue) {
-        return addEmptyRowWithPrimaryKey(primaryKeyValue, true);
-    }
-
-    /**
-     * Adds an empty row to the table and set the primary key with the given value.
-     *
-     * @param primaryKeyValue the primary key value.
-     * @param validation set to {@code false} to skip all validations. This is currently used by bulk insert which
-     * has its own validations.
-     * @return the row index.
-     */
-    public long addEmptyRowWithPrimaryKey(Object primaryKeyValue, boolean validation) {
-        if (validation) {
-            checkImmutable();
-            checkHasPrimaryKey();
-        }
-
-        long primaryKeyColumnIndex = getPrimaryKey();
-        RealmFieldType type = getColumnType(primaryKeyColumnIndex);
-        long rowIndex;
-
-        // Adds with primary key initially set.
-        if (primaryKeyValue == null) {
-            switch (type) {
-                case STRING:
-                case INTEGER:
-                    if (validation && findFirstNull(primaryKeyColumnIndex) != NO_MATCH) {
-                        throwDuplicatePrimaryKeyException("null");
-                    }
-                    rowIndex = nativeAddEmptyRow(nativePtr, 1);
-                    if (type == RealmFieldType.STRING) {
-                        nativeSetStringUnique(nativePtr, primaryKeyColumnIndex, rowIndex, null);
-                    } else {
-                        nativeSetNullUnique(nativePtr, primaryKeyColumnIndex, rowIndex);
-                    }
-                    break;
-
-                default:
-                    throw new RealmException("Cannot check for duplicate rows for unsupported primary key type: " + type);
-            }
-
-        } else {
-            switch (type) {
-                case STRING:
-                    if (!(primaryKeyValue instanceof String)) {
-                        throw new IllegalArgumentException("Primary key value is not a String: " + primaryKeyValue);
-                    }
-                    if (validation && findFirstString(primaryKeyColumnIndex, (String) primaryKeyValue) != NO_MATCH) {
-                        throwDuplicatePrimaryKeyException(primaryKeyValue);
-                    }
-                    rowIndex = nativeAddEmptyRow(nativePtr, 1);
-                    nativeSetStringUnique(nativePtr, primaryKeyColumnIndex, rowIndex, (String) primaryKeyValue);
-                    break;
-
-                case INTEGER:
-                    long pkValue;
-                    try {
-                        pkValue = Long.parseLong(primaryKeyValue.toString());
-                    } catch (RuntimeException e) {
-                        throw new IllegalArgumentException("Primary key value is not a long: " + primaryKeyValue);
-                    }
-                    if (validation && findFirstLong(primaryKeyColumnIndex, pkValue) != NO_MATCH) {
-                        throwDuplicatePrimaryKeyException(pkValue);
-                    }
-                    rowIndex = nativeAddEmptyRow(nativePtr, 1);
-                    nativeSetLongUnique(nativePtr, primaryKeyColumnIndex, rowIndex, pkValue);
-                    break;
-
-                default:
-                    throw new RealmException("Cannot check for duplicate rows for unsupported primary key type: " + type);
-            }
-        }
-        return rowIndex;
-    }
-
     @SuppressWarnings("WeakerAccess")
     public long addEmptyRows(long rows) {
         checkImmutable();
@@ -905,12 +822,6 @@ void checkImmutable() {
         }
     }
 
-    private void checkHasPrimaryKey() {
-        if (!hasPrimaryKey()) {
-            throw new IllegalStateException(getName() + " has no primary key defined");
-        }
-    }
-
     //
     // Count
     //
@@ -1059,7 +970,7 @@ public String toString() {
     }
 
     private static void throwImmutable() {
-        throw new IllegalStateException("Changing Realm data can only be done from inside a transaction.");
+        throw new IllegalStateException("Cannot modify managed objects outside of a write transaction.");
     }
 
     /**
diff --git a/tools/update_gradle_wrapper.sh b/tools/update_gradle_wrapper.sh
new file mode 100755
index 0000000000..ad3a95b7a2
--- /dev/null
+++ b/tools/update_gradle_wrapper.sh
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+# This script updates Gradle Wrappers in this repository. You need to update the version number in realm.properties first, then execute ./update_gradle_wrapper.sh .
+
+cd "$(dirname $0)/.."
+
+for i in $(find $(pwd) -type f -name gradlew); do
+    cd $(dirname $i)
+    pwd
+    ./gradlew wrapper
+    sed -E -i '' s/-bin\\.zip\$/-all.zip/ gradle/wrapper/gradle-wrapper.properties
+done
diff --git a/version.txt b/version.txt
index e1f3bbde86..14900cee60 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-3.2.0-SNAPSHOT
+3.2.1-SNAPSHOT
\ No newline at end of file
