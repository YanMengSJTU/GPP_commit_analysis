diff --git a/CHANGELOG.md b/CHANGELOG.md
index c44194c2a1..244b15dbad 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 ## 4.0.0-BETA3 (YYYY-MM-DD)
 
+### Breaking Changes
+
+* `RealmResults.distinct()`/`RealmResults.distinctAsync()` have been removed. Use `RealmQuery.distinct()`/`RealmQuery.distinctAsync()` instead.
+
 ### Internal
 
 * Upgraded to Realm Sync 2.0.0-rc16.
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 7ffe3588bb..5115e05f78 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -37,7 +37,7 @@ ext.coreDir = file(project.coreSourcePath ?
 ext.ccachePath = project.findProperty('ccachePath') ?: System.getenv('NDK_CCACHE')
 ext.lcachePath = project.findProperty('lcachePath') ?: System.getenv('NDK_LCACHE')
 // Set to true to enable linking with debug core.
-ext.enableDebugCore = project.hasProperty('enableDebugCore') ? project.getProperty('enableDebugCore') : false
+ext.enableDebugCore = project.hasProperty('enableDebugCore') ? project.getProperty('enableDebugCore') : true
 
 android {
     compileSdkVersion 26
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
index 353d58886e..0c6f6523ae 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
@@ -3034,8 +3034,8 @@ private void populateForDistinctInvalidTypesLinked(Realm realm) {
 
     @Test
     public void distinct() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class).distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL);
@@ -3048,8 +3048,8 @@ public void distinct() {
 
     @Test
     public void distinct_withNullValues() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         for (String field : new String[]{AnnotationIndexTypes.FIELD_INDEX_DATE, AnnotationIndexTypes.FIELD_INDEX_STRING}) {
@@ -3060,8 +3060,8 @@ public void distinct_withNullValues() {
 
     @Test
     public void distinct_notIndexedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class)
@@ -3076,8 +3076,8 @@ public void distinct_notIndexedFields() {
 
     @Test
     public void distinct_doesNotExist() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         try {
@@ -3101,8 +3101,8 @@ public void distinct_invalidTypes() {
 
     @Test
     public void distinct_indexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         for (String field : AnnotationIndexTypes.INDEX_FIELDS) {
@@ -3116,8 +3116,8 @@ public void distinct_indexedLinkedFields() {
 
     @Test
     public void distinct_notIndexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         for (String field : AnnotationIndexTypes.NOT_INDEX_FIELDS) {
@@ -3144,8 +3144,8 @@ public void distinct_invalidTypesLinkedFields() {
     public void distinctAsync() throws Throwable {
         final AtomicInteger changeListenerCalled = new AtomicInteger(4);
         final Realm realm = looperThread.getRealm();
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         final RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class).distinctAsync(AnnotationIndexTypes.FIELD_INDEX_BOOL);
@@ -3220,8 +3220,8 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     public void distinctAsync_withNullValues() throws Throwable {
         final AtomicInteger changeListenerCalled = new AtomicInteger(2);
         final Realm realm = looperThread.getRealm();
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // must be greater than 1
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3; // must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         final RealmResults<AnnotationIndexTypes> distinctDate = realm.where(AnnotationIndexTypes.class)
@@ -3261,8 +3261,8 @@ public void onChange(RealmResults<AnnotationIndexTypes> object) {
     @Test
     @RunTestInLooperThread
     public void distinctAsync_doesNotExist() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         try {
@@ -3289,8 +3289,8 @@ public void distinctAsync_invalidTypes() {
     @Test
     @RunTestInLooperThread
     public void distinctAsync_indexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         for (String field : AnnotationIndexTypes.INDEX_FIELDS) {
@@ -3317,8 +3317,8 @@ public void distinctAsync_notIndexedLinkedFields() {
 
     @Test
     public void distinctMultiArgs() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3; // Must be greater than 1
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
@@ -3328,7 +3328,7 @@ public void distinctMultiArgs() {
 
     @Test
     public void distinctMultiArgs_switchedFieldsOrder() {
-        final long numberOfBlocks = 25;
+        final long numberOfBlocks = 3;
         TestHelper.populateForDistinctFieldsOrder(realm, numberOfBlocks);
 
         // Regardless of the block size defined above, the output size is expected to be the same, 4 in this case, due to receiving unique combinations of tuples.
@@ -3342,8 +3342,8 @@ public void distinctMultiArgs_switchedFieldsOrder() {
 
     @Test
     public void distinctMultiArgs_emptyField() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
@@ -3396,8 +3396,8 @@ public void distinctMultiArgs_emptyField() {
 
     @Test
     public void distinctMultiArgs_withNullValues() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
@@ -3407,8 +3407,8 @@ public void distinctMultiArgs_withNullValues() {
 
     @Test
     public void distinctMultiArgs_notIndexedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
@@ -3420,8 +3420,8 @@ public void distinctMultiArgs_notIndexedFields() {
 
     @Test
     public void distinctMultiArgs_doesNotExistField() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
@@ -3444,8 +3444,8 @@ public void distinctMultiArgs_invalidTypesFields() {
 
     @Test
     public void distinctMultiArgs_indexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
@@ -3457,8 +3457,8 @@ public void distinctMultiArgs_indexedLinkedFields() {
 
     @Test
     public void distinctMultiArgs_notIndexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
+        final long numberOfBlocks = 3;
+        final long numberOfObjects = 3;
         populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
 
         RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
index b4ead0c1bf..d087c59f40 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java
@@ -34,9 +34,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import io.realm.entities.AllJavaTypes;
 import io.realm.entities.AllTypes;
-import io.realm.entities.AnnotationIndexTypes;
 import io.realm.entities.DefaultValueOfField;
 import io.realm.entities.Dog;
 import io.realm.entities.NonLatinFieldNames;
@@ -49,7 +47,6 @@
 import io.realm.rule.TestRealmConfigurationFactory;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -185,166 +182,6 @@ public void verifyArmComparisons() {
         assertEquals(10, realm.where(AllTypes.class).lessThan(AllTypes.FIELD_LONG, 0).findAll().size());
     }
 
-    // RealmResults.distinct(): requires indexing, and type = boolean, integer, date, string.
-    private void populateForDistinct(Realm realm, long numberOfBlocks, long numberOfObjects, boolean withNull) {
-        realm.beginTransaction();
-        for (int i = 0; i < numberOfObjects * numberOfBlocks; i++) {
-            for (int j = 0; j < numberOfBlocks; j++) {
-                AnnotationIndexTypes obj = realm.createObject(AnnotationIndexTypes.class);
-                obj.setIndexBoolean(j % 2 == 0);
-                obj.setIndexLong(j);
-                obj.setIndexDate(withNull ? null : new Date(1000 * (long) j));
-                obj.setIndexString(withNull ? null : "Test " + j);
-                obj.setNotIndexBoolean(j % 2 == 0);
-                obj.setNotIndexLong(j);
-                obj.setNotIndexDate(withNull ? null : new Date(1000 * (long) j));
-                obj.setNotIndexString(withNull ? null : "Test " + j);
-            }
-        }
-        realm.commitTransaction();
-    }
-
-    private void populateForDistinctInvalidTypesLinked(Realm realm) {
-        realm.beginTransaction();
-        AllJavaTypes notEmpty = new AllJavaTypes();
-        notEmpty.setFieldBinary(new byte[]{1, 2, 3});
-        notEmpty.setFieldObject(notEmpty);
-        notEmpty.setFieldList(new RealmList<AllJavaTypes>(notEmpty));
-        realm.copyToRealm(notEmpty);
-        realm.commitTransaction();
-    }
-
-    @Test
-    public void distinct() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class).findAll().distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL);
-        assertEquals(2, distinctBool.size());
-        for (String field : new String[]{AnnotationIndexTypes.FIELD_INDEX_LONG, AnnotationIndexTypes.FIELD_INDEX_DATE, AnnotationIndexTypes.FIELD_INDEX_STRING}) {
-            RealmResults<AnnotationIndexTypes> distinct = realm.where(AnnotationIndexTypes.class).findAll().distinct(field);
-            assertEquals(field, numberOfBlocks, distinct.size());
-        }
-    }
-
-    @Test
-    @SuppressWarnings("ReferenceEquality")
-    public void distinct_restrictedByPreviousDistinct() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        // All objects
-        RealmResults<AnnotationIndexTypes> allResults = realm.where(AnnotationIndexTypes.class).findAll();
-        assertEquals("All Objects Count", numberOfBlocks * numberOfBlocks * numberOfObjects, allResults.size());
-        // Distinctive dates
-        RealmResults<AnnotationIndexTypes> distinctDates = allResults.distinct(AnnotationIndexTypes.FIELD_INDEX_DATE);
-        assertEquals("Distinctive Dates", numberOfBlocks, distinctDates.size());
-        // Distinctive Booleans
-        RealmResults<AnnotationIndexTypes> distinctBooleans = distinctDates.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL);
-        assertEquals("Distinctive Booleans", 2, distinctBooleans.size());
-        // distinct results are not the same object
-        assertTrue(allResults != distinctDates);
-        assertTrue(allResults != distinctBooleans);
-    }
-
-    @Test
-    public void distinct_withNullValues() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        for (String field : new String[]{AnnotationIndexTypes.FIELD_INDEX_DATE, AnnotationIndexTypes.FIELD_INDEX_STRING}) {
-            RealmResults<AnnotationIndexTypes> distinct = realm.where(AnnotationIndexTypes.class).findAll().distinct(field);
-            assertEquals(field, 1, distinct.size());
-        }
-    }
-
-    @Test
-    public void distinct_notIndexedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class)
-                .findAll().distinct(AnnotationIndexTypes.FIELD_NOT_INDEX_BOOL);
-        assertEquals(2, distinctBool.size());
-        for (String field : new String[]{AnnotationIndexTypes.FIELD_NOT_INDEX_LONG,
-                AnnotationIndexTypes.FIELD_NOT_INDEX_DATE, AnnotationIndexTypes.FIELD_NOT_INDEX_STRING}) {
-            RealmResults<AnnotationIndexTypes> distinct = realm.where(AnnotationIndexTypes.class).findAll()
-                    .distinct(field);
-            assertEquals(field, numberOfBlocks, distinct.size());
-        }
-    }
-
-    @Test
-    public void distinct_noneExistingField() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        try {
-            realm.where(AnnotationIndexTypes.class).findAll().distinct("doesNotExist");
-            fail();
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinct_invalidTypes() {
-        populateTestRealm();
-
-        for (String field : new String[]{AllTypes.FIELD_REALMOBJECT, AllTypes.FIELD_REALMLIST, AllTypes.FIELD_DOUBLE, AllTypes.FIELD_FLOAT}) {
-            try {
-                realm.where(AllTypes.class).findAll().distinct(field);
-                fail(field);
-            } catch (IllegalArgumentException ignored) {
-            }
-        }
-    }
-
-    @Test
-    public void distinct_indexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        for (String field : AnnotationIndexTypes.INDEX_FIELDS) {
-            try {
-                realm.where(AnnotationIndexTypes.class).findAll().distinct(AnnotationIndexTypes.FIELD_OBJECT + "." + field);
-                fail("Unsupported Index" + field + " linked field");
-            } catch (IllegalArgumentException ignored) {
-            }
-        }
-    }
-
-    @Test
-    public void distinct_notIndexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        for (String field : AnnotationIndexTypes.NOT_INDEX_FIELDS) {
-            try {
-                realm.where(AnnotationIndexTypes.class).findAll().distinct(AnnotationIndexTypes.FIELD_OBJECT + "." + field);
-                fail("Unsupported notIndex" + field + " linked field");
-            } catch (IllegalArgumentException ignored) {
-            }
-        }
-    }
-
-    @Test
-    public void distinct_invalidTypesLinkedFields() {
-        populateForDistinctInvalidTypesLinked(realm);
-
-        try {
-            realm.where(AllJavaTypes.class).findAll().distinct(AllJavaTypes.FIELD_OBJECT + "." + AllJavaTypes.FIELD_BINARY);
-            fail("Unsupported columnBinary linked field");
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
     @Test
     @RunTestInLooperThread
     public void changeListener_syncIfNeeded_updatedFromOtherThread() {
@@ -417,430 +254,6 @@ private void populateTestRealm(Realm testRealm, int objects) {
         testRealm.commitTransaction();
     }
 
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync() throws Throwable {
-        final AtomicInteger changeListenerCalled = new AtomicInteger(4);
-        final Realm realm = looperThread.getRealm();
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        final RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_INDEX_BOOL);
-        final RealmResults<AnnotationIndexTypes> distinctLong = realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_INDEX_LONG);
-        final RealmResults<AnnotationIndexTypes> distinctDate = realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_INDEX_DATE);
-        final RealmResults<AnnotationIndexTypes> distinctString = realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_INDEX_STRING);
-
-        assertFalse(distinctBool.isLoaded());
-        assertTrue(distinctBool.isValid());
-        assertTrue(distinctBool.isEmpty());
-
-        assertFalse(distinctLong.isLoaded());
-        assertTrue(distinctLong.isValid());
-        assertTrue(distinctLong.isEmpty());
-
-        assertFalse(distinctDate.isLoaded());
-        assertTrue(distinctDate.isValid());
-        assertTrue(distinctDate.isEmpty());
-
-        assertFalse(distinctString.isLoaded());
-        assertTrue(distinctString.isValid());
-        assertTrue(distinctString.isEmpty());
-
-        final Runnable endTest = new Runnable() {
-            @Override
-            public void run() {
-                if (changeListenerCalled.decrementAndGet() == 0) {
-                    looperThread.testComplete();
-                }
-            }
-        };
-
-        looperThread.keepStrongReference(distinctBool);
-        looperThread.keepStrongReference(distinctLong);
-        looperThread.keepStrongReference(distinctDate);
-        looperThread.keepStrongReference(distinctString);
-        distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(2, distinctBool.size());
-                endTest.run();
-            }
-        });
-
-        distinctLong.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(numberOfBlocks, distinctLong.size());
-                endTest.run();
-            }
-        });
-
-        distinctDate.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(numberOfBlocks, distinctDate.size());
-                endTest.run();
-            }
-        });
-
-        distinctString.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(numberOfBlocks, distinctString.size());
-                endTest.run();
-            }
-        });
-    }
-
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync_withNullValues() throws Throwable {
-        final AtomicInteger changeListenerCalled = new AtomicInteger(2);
-        final Realm realm = looperThread.getRealm();
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        final RealmResults<AnnotationIndexTypes> distinctDate = realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_INDEX_DATE);
-        final RealmResults<AnnotationIndexTypes> distinctString = realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_INDEX_STRING);
-
-        assertFalse(distinctDate.isLoaded());
-        assertTrue(distinctDate.isValid());
-        assertTrue(distinctDate.isEmpty());
-
-        assertFalse(distinctString.isLoaded());
-        assertTrue(distinctString.isValid());
-        assertTrue(distinctString.isEmpty());
-
-        final Runnable endTest = new Runnable() {
-            @Override
-            public void run() {
-                if (changeListenerCalled.decrementAndGet() == 0) {
-                    looperThread.testComplete();
-                }
-            }
-        };
-
-        looperThread.keepStrongReference(distinctDate);
-        looperThread.keepStrongReference(distinctString);
-        distinctDate.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals("distinctDate", 1, distinctDate.size());
-                endTest.run();
-            }
-        });
-
-        distinctString.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals("distinctString", 1, distinctString.size());
-                endTest.run();
-            }
-        });
-    }
-
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync_notIndexedFields() {
-        final AtomicInteger changeListenerCalled = new AtomicInteger(4);
-        Realm realm = looperThread.getRealm();
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        final RealmResults<AnnotationIndexTypes> distinctBool = realm.where(AnnotationIndexTypes.class).findAll()
-                .distinctAsync(AnnotationIndexTypes.FIELD_INDEX_BOOL);
-        final RealmResults<AnnotationIndexTypes> distinctLong = realm.where(AnnotationIndexTypes.class).findAll()
-                .distinctAsync(AnnotationIndexTypes.FIELD_NOT_INDEX_LONG);
-        final RealmResults<AnnotationIndexTypes> distinctDate = realm.where(AnnotationIndexTypes.class).findAll()
-                .distinctAsync(AnnotationIndexTypes.FIELD_NOT_INDEX_DATE);
-        final RealmResults<AnnotationIndexTypes> distinctString = realm.where(AnnotationIndexTypes.class).findAll()
-                .distinctAsync(AnnotationIndexTypes.FIELD_NOT_INDEX_STRING);
-
-        assertFalse(distinctBool.isLoaded());
-        assertTrue(distinctBool.isValid());
-        assertTrue(distinctBool.isEmpty());
-
-        assertFalse(distinctLong.isLoaded());
-        assertTrue(distinctLong.isValid());
-        assertTrue(distinctLong.isEmpty());
-
-        assertFalse(distinctDate.isLoaded());
-        assertTrue(distinctDate.isValid());
-        assertTrue(distinctDate.isEmpty());
-
-        assertFalse(distinctString.isLoaded());
-        assertTrue(distinctString.isValid());
-        assertTrue(distinctString.isEmpty());
-
-        final Runnable endTest = new Runnable() {
-            @Override
-            public void run() {
-                if (changeListenerCalled.decrementAndGet() == 0) {
-                    looperThread.testComplete();
-                }
-            }
-        };
-
-        looperThread.keepStrongReference(distinctBool);
-        looperThread.keepStrongReference(distinctLong);
-        looperThread.keepStrongReference(distinctDate);
-        looperThread.keepStrongReference(distinctString);
-        distinctBool.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(2, distinctBool.size());
-                endTest.run();
-            }
-        });
-
-        distinctLong.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(numberOfBlocks, distinctLong.size());
-                endTest.run();
-            }
-        });
-
-        distinctDate.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(numberOfBlocks, distinctDate.size());
-                endTest.run();
-            }
-        });
-
-        distinctString.addChangeListener(new RealmChangeListener<RealmResults<AnnotationIndexTypes>>() {
-            @Override
-            public void onChange(RealmResults<AnnotationIndexTypes> object) {
-                assertEquals(numberOfBlocks, distinctString.size());
-                endTest.run();
-            }
-        });
-    }
-
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync_doesNotExist() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        try {
-            realm.where(AnnotationIndexTypes.class).findAll().distinctAsync("doesNotExist");
-        } catch (IllegalArgumentException ignored) {
-        }
-        looperThread.testComplete();
-    }
-
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync_invalidTypes() {
-        populateTestRealm(realm, TEST_DATA_SIZE);
-
-        for (String field : new String[]{AllTypes.FIELD_REALMOBJECT, AllTypes.FIELD_REALMLIST, AllTypes.FIELD_DOUBLE, AllTypes.FIELD_FLOAT}) {
-            try {
-                realm.where(AllTypes.class).findAll().distinctAsync(field);
-            } catch (IllegalArgumentException ignored) {
-            }
-        }
-        looperThread.testComplete();
-    }
-
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync_indexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        for (String field : AnnotationIndexTypes.INDEX_FIELDS) {
-            try {
-                realm.where(AnnotationIndexTypes.class).findAll().distinctAsync(AnnotationIndexTypes.FIELD_OBJECT + "." + field);
-                fail("Unsupported " + field + " linked field");
-            } catch (IllegalArgumentException ignored) {
-            }
-        }
-        looperThread.testComplete();
-    }
-
-    @Test
-    @RunTestInLooperThread
-    public void distinctAsync_notIndexedLinkedFields() {
-        populateForDistinctInvalidTypesLinked(realm);
-
-        try {
-            realm.where(AllJavaTypes.class).findAll().distinctAsync(AllJavaTypes.FIELD_OBJECT + "." + AllJavaTypes.FIELD_BINARY);
-        } catch (IllegalArgumentException ignored) {
-        }
-        looperThread.testComplete();
-    }
-
-    @Test
-    public void distinctMultiArgs() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10; // Must be greater than 1
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        RealmResults<AnnotationIndexTypes> distinctMulti = results.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, AnnotationIndexTypes.INDEX_FIELDS);
-        assertEquals(numberOfBlocks, distinctMulti.size());
-    }
-
-    @Test
-    public void distinctMultiArgs_switchedFieldsOrder() {
-        final long numberOfBlocks = 25;
-        TestHelper.populateForDistinctFieldsOrder(realm, numberOfBlocks);
-
-        // Regardless of the block size defined above, the output size is expected to be the same, 4 in this case, due to receiving unique combinations of tuples.
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        RealmResults<AnnotationIndexTypes> distinctStringLong = results.distinct(AnnotationIndexTypes.FIELD_INDEX_STRING, AnnotationIndexTypes.FIELD_INDEX_LONG);
-        RealmResults<AnnotationIndexTypes> distinctLongString = results.distinct(AnnotationIndexTypes.FIELD_INDEX_LONG, AnnotationIndexTypes.FIELD_INDEX_STRING);
-        assertEquals(4, distinctStringLong.size());
-        assertEquals(4, distinctLongString.size());
-        assertEquals(distinctStringLong.size(), distinctLongString.size());
-    }
-
-    @Test
-    public void distinctMultiArgs_emptyField() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        // An empty string field in the middle.
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, "", AnnotationIndexTypes.FIELD_INDEX_INT);
-        } catch (IllegalArgumentException ignored) {
-        }
-        // An empty string field at the end.
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, AnnotationIndexTypes.FIELD_INDEX_INT, "");
-        } catch (IllegalArgumentException ignored) {
-        }
-        // A null string field in the middle.
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, null, AnnotationIndexTypes.FIELD_INDEX_INT);
-        } catch (IllegalArgumentException ignored) {
-        }
-        // A null string field at the end.
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, AnnotationIndexTypes.FIELD_INDEX_INT, null);
-        } catch (IllegalArgumentException ignored) {
-        }
-        // (String) Null makes varargs a null array.
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, (String)null);
-        } catch (IllegalArgumentException ignored) {
-        }
-        // Two (String) null for first and varargs fields.
-        try {
-            results.distinct(null, (String) null);
-        } catch (IllegalArgumentException ignored) {
-        }
-        // "" & (String)null combination.
-        try {
-            results.distinct("", (String) null);
-        } catch (IllegalArgumentException ignored) {
-        }
-        // "" & (String)null combination.
-        try {
-            results.distinct(null, "");
-        } catch (IllegalArgumentException ignored) {
-        }
-        // Two empty fields tests.
-        try {
-            results.distinct("", "");
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinctMultiArgs_withNullValues() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        RealmResults<AnnotationIndexTypes> distinctMulti = results.distinct(AnnotationIndexTypes.FIELD_INDEX_DATE, AnnotationIndexTypes.FIELD_INDEX_STRING);
-        assertEquals(1, distinctMulti.size());
-    }
-
-    @Test
-    public void distinctMultiArgs_notIndexedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_NOT_INDEX_STRING, AnnotationIndexTypes.NOT_INDEX_FIELDS);
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinctMultiArgs_doesNotExistField() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        try {
-            results.distinct(AnnotationIndexTypes.FIELD_INDEX_INT, AnnotationIndexTypes.NONEXISTANT_MIX_FIELDS);
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinctMultiArgs_invalidTypesFields() {
-        populateTestRealm();
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        try {
-            results.distinct(AllTypes.FIELD_REALMOBJECT, AllTypes.INVALID_TYPES_FIELDS_FOR_DISTINCT);
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinctMultiArgs_indexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        try {
-            results.distinct(AnnotationIndexTypes.INDEX_LINKED_FIELD_STRING, AnnotationIndexTypes.INDEX_LINKED_FIELDS);
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinctMultiArgs_notIndexedLinkedFields() {
-        final long numberOfBlocks = 25;
-        final long numberOfObjects = 10;
-        populateForDistinct(realm, numberOfBlocks, numberOfObjects, true);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        try {
-            results.distinct(AnnotationIndexTypes.NOT_INDEX_LINKED_FILED_STRING, AnnotationIndexTypes.NOT_INDEX_LINKED_FIELDS);
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
-
-    @Test
-    public void distinctMultiArgs_invalidTypesLinkedFields() {
-        populateForDistinctInvalidTypesLinked(realm);
-
-        RealmResults<AnnotationIndexTypes> results = realm.where(AnnotationIndexTypes.class).findAll();
-        try {
-            results.distinct(AllJavaTypes.INVALID_LINKED_BINARY_FIELD_FOR_DISTINCT, AllJavaTypes.INVALID_LINKED_TYPES_FIELDS_FOR_DISTINCT);
-        } catch (IllegalArgumentException ignored) {
-        }
-    }
 
     private RealmResults<Dog> populateRealmResultsOnLinkView(Realm realm) {
         realm.beginTransaction();
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index b1d272dcc7..4b61f799bb 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -338,33 +338,4 @@ public void removeChangeListener(OrderedRealmCollectionChangeListener<RealmResul
             throw new UnsupportedOperationException(realm.getClass() + " does not support RxJava2.");
         }
     }
-
-    /**
-     * @deprecated use {@link RealmQuery#distinct(String)} on the return value of {@link #where()} instead. This will
-     * be removed in coming 3.x.x minor releases.
-     */
-    @Deprecated
-    public RealmResults<E> distinct(String fieldName) {
-        SortDescriptor distinctDescriptor = SortDescriptor.getInstanceForDistinct(new SchemaConnector(realm.getSchema()), collection.getTable(), fieldName);
-        Collection distinctCollection = collection.distinct(distinctDescriptor);
-        return createLoadedResults(distinctCollection);
-    }
-
-    /**
-     * @deprecated use {@link RealmQuery#distinctAsync(String)} on the return value of {@link #where()} instead. This
-     * will be removed in coming 3.x.x minor releases.
-     */
-    @Deprecated
-    public RealmResults<E> distinctAsync(String fieldName) {
-        return where().distinctAsync(fieldName);
-    }
-
-    /**
-     * @deprecated use {@link RealmQuery#distinct(String, String...)} on the return value of {@link #where()} instead.
-     * This will be removed in coming 3.x.x minor releases.
-     */
-    @Deprecated
-    public RealmResults<E> distinct(String firstFieldName, String... remainingFieldNames) {
-        return where().distinct(firstFieldName, remainingFieldNames);
-    }
 }
