diff --git a/examples/architectureComponentsExample/build.gradle b/examples/architectureComponentsExample/build.gradle
index d44c3d0292..940004f0b8 100644
--- a/examples/architectureComponentsExample/build.gradle
+++ b/examples/architectureComponentsExample/build.gradle
@@ -38,7 +38,7 @@ android {
 }
 
 dependencies {
-    implementation "android.arch.lifecycle:runtime:1.1.0"
+    implementation "android.arch.lifecycle:runtime:1.1.1"
     implementation "android.arch.lifecycle:extensions:1.1.0"
     annotationProcessor "android.arch.lifecycle:compiler:1.1.0"
     implementation 'com.android.support:appcompat-v7:27.0.2'
diff --git a/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/MigrationExampleActivity.java b/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/MigrationExampleActivity.java
index 5d86249c17..8f6de5d727 100644
--- a/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/MigrationExampleActivity.java
+++ b/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/MigrationExampleActivity.java
@@ -33,23 +33,21 @@
 import io.realm.examples.realmmigrationexample.model.Migration;
 import io.realm.examples.realmmigrationexample.model.Person;
 
-/*
-** This example demonstrates how you can migrate your data through different updates
-** of your models.
-*/
+/**
+ * 这个示例演示了如何通过模型的不同更新来迁移数据。
+ */
 public class MigrationExampleActivity extends Activity {
 
     public static final String TAG = MigrationExampleActivity.class.getName();
 
     private LinearLayout rootLayout = null;
-    private Realm realm;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_realm_migration_example);
 
-        rootLayout = ((LinearLayout) findViewById(R.id.container));
+        rootLayout = (findViewById(R.id.container));
         rootLayout.removeAllViews();
 
         // 3 versions of the databases for testing. Normally you would only have one.
@@ -70,7 +68,7 @@ protected void onCreate(Bundle savedInstanceState) {
         } catch (FileNotFoundException ignored) {
             // If the Realm file doesn't exist, just ignore.
         }
-        realm = Realm.getInstance(config0);
+        Realm realm = Realm.getInstance(config0);
         showStatus("Default0");
         showStatus(realm);
         realm.close();
diff --git a/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/model/Migration.java b/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/model/Migration.java
index e589375afa..7add8a8d83 100644
--- a/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/model/Migration.java
+++ b/examples/migrationExample/src/main/java/io/realm/examples/realmmigrationexample/model/Migration.java
@@ -39,20 +39,17 @@ public void migrate(final DynamicRealm realm, long oldVersion, long newVersion)
         RealmSchema schema = realm.getSchema();
 
         /************************************************
-            // Version 0
-            class Person
-                @Required
-                String firstName;
-                @Required
-                String lastName;
-                int    age;
-
-            // Version 1
-            class Person
-                @Required
-                String fullName;            // combine firstName and lastName into single field.
-                int age;
-        ************************************************/
+         // Version 0
+         class Person
+         @Required String firstName;
+         @Required String lastName;
+         int    age;
+
+         // Version 1
+         class Person
+         @Required String fullName;            // combine firstName and lastName into single field.
+         int age;
+         ************************************************/
         // Migrate from version 0 to version 1
         if (oldVersion == 0) {
             RealmObjectSchema personSchema = schema.get("Person");
@@ -72,18 +69,15 @@ public void apply(DynamicRealmObject obj) {
         }
 
         /************************************************
-            // Version 2
-                class Pet                   // add a new model class
-                    @Required
-                    String name;
-                    @Required
-                    String type;
-
-                class Person
-                    @Required
-                    String fullName;
-                    int age;
-                    RealmList<Pet> pets;    // add an array property
+         // Version 2
+         class Pet                   // add a new model class
+         @Required String name;
+         @Required String type;
+
+         class Person
+         @Required String fullName;
+         int age;
+         RealmList<Pet> pets;    // add an array property
 
          ************************************************/
         // Migrate from version 1 to version 2
@@ -96,32 +90,31 @@ public void apply(DynamicRealmObject obj) {
 
             // Add a new field to an old class and populate it with initial data
             schema.get("Person")
-                .addRealmListField("pets", petSchema)
-                .transform(new RealmObjectSchema.Function() {
-                    @Override
-                    public void apply(DynamicRealmObject obj) {
-                        if (obj.getString("fullName").equals("JP McDonald")) {
-                            DynamicRealmObject pet = realm.createObject("Pet");
-                            pet.setString("name", "Jimbo");
-                            pet.setString("type", "dog");
-                            obj.getList("pets").add(pet);
+                    .addRealmListField("pets", petSchema)
+                    .transform(new RealmObjectSchema.Function() {
+                        @Override
+                        public void apply(DynamicRealmObject obj) {
+                            if (obj.getString("fullName").equals("JP McDonald")) {
+                                DynamicRealmObject pet = realm.createObject("Pet");
+                                pet.setString("name", "Jimbo");
+                                pet.setString("type", "dog");
+                                obj.getList("pets").add(pet);
+                            }
                         }
-                    }
-                });
+                    });
             oldVersion++;
         }
 
         /************************************************
-            // Version 3
-                class Pet
-                    @Required
-                    String name;
-                    int type;               // type becomes int
-
-                class Person
-                    String fullName;        // fullName is nullable now
-                    RealmList<Pet> pets;    // age and pets re-ordered (no action needed)
-                    int age;
+         // Version 3
+         class Pet
+         @Required String name;
+         int type;               // type becomes int
+
+         class Person
+         String fullName;        // fullName is nullable now
+         RealmList<Pet> pets;    // age and pets re-ordered (no action needed)
+         int age;
          ************************************************/
         // Migrate from version 2 to version 3
         if (oldVersion == 2) {
@@ -130,22 +123,22 @@ public void apply(DynamicRealmObject obj) {
 
             // Change type from String to int
             schema.get("Pet")
-                .addField("type_tmp", int.class)
-                .transform(new RealmObjectSchema.Function() {
-                    @Override
-                    public void apply(DynamicRealmObject obj) {
-                        String oldType = obj.getString("type");
-                        if (oldType.equals("dog")) {
-                            obj.setLong("type_tmp", 1);
-                        } else if (oldType.equals("cat")) {
-                            obj.setInt("type_tmp", 2);
-                        } else if (oldType.equals("hamster")) {
-                            obj.setInt("type_tmp", 3);
+                    .addField("type_tmp", int.class)
+                    .transform(new RealmObjectSchema.Function() {
+                        @Override
+                        public void apply(DynamicRealmObject obj) {
+                            String oldType = obj.getString("type");
+                            if (oldType.equals("dog")) {
+                                obj.setLong("type_tmp", 1);
+                            } else if (oldType.equals("cat")) {
+                                obj.setInt("type_tmp", 2);
+                            } else if (oldType.equals("hamster")) {
+                                obj.setInt("type_tmp", 3);
+                            }
                         }
-                    }
-                })
-                .removeField("type")
-                .renameField("type_tmp", "type");
+                    })
+                    .removeField("type")
+                    .renameField("type_tmp", "type");
             oldVersion++;
         }
     }
diff --git a/examples/moduleExample/app/src/main/java/io/realm/examples/appmodules/ModulesExampleActivity.java b/examples/moduleExample/app/src/main/java/io/realm/examples/appmodules/ModulesExampleActivity.java
index d08f35687a..b51686e585 100644
--- a/examples/moduleExample/app/src/main/java/io/realm/examples/appmodules/ModulesExampleActivity.java
+++ b/examples/moduleExample/app/src/main/java/io/realm/examples/appmodules/ModulesExampleActivity.java
@@ -40,9 +40,9 @@
 import io.realm.exceptions.RealmException;
 
 /**
-* This example demonstrates how you can use modules to control which classes belong to which Realms and how you can
+ * This example demonstrates how you can use modules to control which classes belong to which Realms and how you can
  * work with multiple Realms at the same time.
-*/
+ */
 public class ModulesExampleActivity extends Activity {
 
     public static final String TAG = ModulesExampleActivity.class.getName();
@@ -119,7 +119,7 @@ public void execute(Realm realm) {
         // You can copy objects between Realms
         showStatus("Copy objects between Realms");
         showStatus("Number of pigs on the farm : " + farmRealm.where(Pig.class).count());
-        showStatus("Copy pig from defaultRealm to farmRealm");
+        showStatus("Copy one pig from defaultRealm to farmRealm");
         final Pig defaultPig = defaultRealm.where(Pig.class).findFirst();
         farmRealm.executeTransaction(new Realm.Transaction() {
             @Override
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java
index dfd5532375..50d1b9f819 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MainActivity.java
@@ -34,12 +34,14 @@
 public class MainActivity extends AppCompatActivity {
 
     private ViewGroup container;
-    private final TreeMap<String, Class<? extends Activity>> buttons = new TreeMap<String, Class<? extends Activity>>() {{
-        put("Animation", AnimationActivity.class);
-        put("Throttle search", ThrottleSearchActivity.class);
-        put("Network", RetrofitExample.class);
-        put("Working with Realm", GotchasActivity.class);
-    }};
+    private final TreeMap<String, Class<? extends Activity>> buttons = new TreeMap<String, Class<? extends Activity>>() {
+        {
+            put("Animation", AnimationActivity.class);
+            put("Throttle search", ThrottleSearchActivity.class);
+            put("Network", RetrofitExample.class);
+            put("Working with Realm", GotchasActivity.class);
+        }
+    };
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java
index 52ed89fdb1..ea3e7d24e7 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/MyApplication.java
@@ -29,6 +29,7 @@
 public class MyApplication extends Application {
 
     private static final TreeMap<String, String> testPersons = new TreeMap<>();
+
     static {
         testPersons.put("Chris", null);
         testPersons.put("Christian", "cmelchior");
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java
index 291c5b5fba..fbc36762e3 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/animation/AnimationActivity.java
@@ -52,7 +52,7 @@ protected void onResume() {
         // All RealmObject access has to be done on the same thread `findAllAsync` was called on.
         // Warning: This example doesn't handle back pressure well.
         disposable = realm.where(Person.class).findAllAsync().asFlowable()
-                .flatMap(persons -> Flowable.fromIterable(persons))
+                .flatMap(Flowable::fromIterable)
                 .zipWith(Flowable.interval(1, TimeUnit.SECONDS), (person, tick) -> person)
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe(person -> {
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java
index 6013d6ebee..77d5cfb5d0 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/gotchas/GotchasActivity.java
@@ -135,7 +135,7 @@ private void testDistinct() {
         compositeDisposable.add(distinctDisposable);
 
         Disposable distinctKeySelectorDisposable = personFlowable
-                .distinct(person -> person.getAge())
+                .distinct(Person::getAge)
                 .subscribe(person -> showStatus("distinct(keySelector): " + person.getName() + ":" + person.getAge()));
         compositeDisposable.add(distinctKeySelectorDisposable);
     }
diff --git a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java
index ffab76936e..5b26a1876d 100644
--- a/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java
+++ b/examples/rxJavaExample/src/main/java/io/realm/examples/rxjava/throttle/ThrottleSearchActivity.java
@@ -30,6 +30,7 @@
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.Disposable;
 import io.realm.Realm;
+import io.realm.RealmResults;
 import io.realm.examples.rxjava.R;
 import io.realm.examples.rxjava.model.Person;
 
@@ -69,7 +70,7 @@ protected void onResume() {
                 })
                 // Only continue once data is actually loaded
                 // RealmObservables will emit the unloaded (empty) list as its first item
-                .filter(people -> people.isLoaded())
+                .filter(RealmResults::isLoaded)
                 .subscribe(people -> {
                     searchResultsView.removeAllViews();
                     for (Person person : people) {
@@ -77,7 +78,7 @@ protected void onResume() {
                         view.setText(person.getName());
                         searchResultsView.addView(view);
                     }
-                }, throwable -> throwable.printStackTrace());
+                }, Throwable::printStackTrace);
     }
 
     @Override
diff --git a/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java b/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java
index 4b0f94e752..56d81d40e1 100644
--- a/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java
+++ b/examples/unitTestExample/src/main/java/io/realm/examples/unittesting/ExampleActivity.java
@@ -16,6 +16,7 @@
 
 package io.realm.examples.unittesting;
 
+import android.annotation.SuppressLint;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.support.v7.app.AppCompatActivity;
@@ -52,7 +53,7 @@ protected void onCreate(Bundle savedInstanceState) {
         basicCRUD(realm);
 
         // More complex operations can be executed on another thread.
-        AsyncTask<Void, Void, String> foo = new AsyncTask<Void, Void, String>() {
+        @SuppressLint("StaticFieldLeak") AsyncTask<Void, Void, String> foo = new AsyncTask<Void, Void, String>() {
             @Override
             protected String doInBackground(Void... voids) {
                 String info = "";
