diff --git a/CHANGELOG.md b/CHANGELOG.md
index 908acec1e8..315d41dc9a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -11,6 +11,18 @@
 ### Internal
 
 
+## 3.7.1 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* Fixed potential memory leaks of `LinkView` when calling bulk insertions APIs.
+
+### Internal
+
+* Replaced LinkView with Object Store's List.
+* Renaming `io.realm.internal.CollectionChangeSet` to `io.realm.internal.OsCollectionChangeSet`.
+
+
 ## 3.7.0 (2017-09-01)
 
 ### Deprecated
diff --git a/examples/objectServerExample/README.md b/examples/objectServerExample/README.md
index f9ec43ab2d..d3c8558940 100644
--- a/examples/objectServerExample/README.md
+++ b/examples/objectServerExample/README.md
@@ -1,14 +1,20 @@
 # Using this example
 
-This example shows a minimal example on how to connect to and use the
+This example is a minimal demonstration of how to connect to and use the
 Realm Object Server to synchronize changes between devices.
 
-The example will assume that the Object Server is running on the machine
-building the example and the IP address will automatically be injected
-into the build configuration.
+The example assumes that the Object Server is running on the machine
+that built the application: The build machine IP address is automatically
+injected into the build configuration.
 
-If this for some reasons does not work, please insert the IP Address into
-the `build.gradle` accordingly.
+To use a different ObjectServer, simply put the server IP Address into
+the `build.gradle`, as indicated in the comments, on the lines like this:
+
+    buildConfigField "String", "OBJECT_SERVER_IP", "\"${host}\""
+
+For instance:
+
+    buildConfigField "String", "OBJECT_SERVER_IP", "192.168.0.1"
 
 To read more about the Realm Object Server and how to deploy it, see
 https://realm.io/news/introducing-realm-mobile-platform/
diff --git a/examples/objectServerExample/build.gradle b/examples/objectServerExample/build.gradle
index 8f6646b601..7dc1ce05f3 100644
--- a/examples/objectServerExample/build.gradle
+++ b/examples/objectServerExample/build.gradle
@@ -29,7 +29,7 @@ android {
     defaultConfig {
         applicationId 'io.realm.examples.objectserver'
         targetSdkVersion rootProject.sdkVersion
-        minSdkVersion 15
+        minSdkVersion 16
         versionCode 1
         versionName "1.0"
     }
diff --git a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/CounterActivity.java b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/CounterActivity.java
index 536b24ef90..8fa975cab6 100644
--- a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/CounterActivity.java
+++ b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/CounterActivity.java
@@ -29,6 +29,8 @@
 import java.util.Locale;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import javax.annotation.Nonnull;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
@@ -45,36 +47,35 @@
 import me.zhanghai.android.materialprogressbar.MaterialProgressBar;
 
 public class CounterActivity extends AppCompatActivity {
-
     private static final String REALM_URL = "realm://" + BuildConfig.OBJECT_SERVER_IP + ":9080/~/default";
 
-    private Realm realm;
-    private SyncSession session;
-    private CRDTCounter counter;
-    private SyncUser user;
-    private AtomicBoolean downloadingChanges = new AtomicBoolean(false);
-    private AtomicBoolean uploadingChanges = new AtomicBoolean(false);
-    private ProgressListener downloadListener = new ProgressListener() {
+    private final ProgressListener downloadListener = new ProgressListener() {
         @Override
-        public void onChange(Progress progress) {
+        public void onChange(@Nonnull Progress progress) {
             downloadingChanges.set(!progress.isTransferComplete());
             runOnUiThread(updateProgressBar);
         }
     };
-    private ProgressListener uploadListener = new ProgressListener() {
+    private final ProgressListener uploadListener = new ProgressListener() {
         @Override
-        public void onChange(Progress progress) {
+        public void onChange(@Nonnull Progress progress) {
             uploadingChanges.set(!progress.isTransferComplete());
             runOnUiThread(updateProgressBar);
         }
     };
-    private Runnable updateProgressBar = new Runnable() {
+    private final Runnable updateProgressBar = new Runnable() {
         @Override
         public void run() {
             updateProgressBar(downloadingChanges.get(), uploadingChanges.get());
         }
     };
 
+    private final AtomicBoolean downloadingChanges = new AtomicBoolean(false);
+    private final AtomicBoolean uploadingChanges = new AtomicBoolean(false);
+
+    private Realm realm;
+    private SyncSession session;
+    private SyncUser user;
 
     @BindView(R.id.text_counter) TextView counterView;
     @BindView(R.id.progressbar) MaterialProgressBar progressBar;
@@ -84,49 +85,40 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_counter);
         ButterKnife.bind(this);
-
-        // Check if we have a valid user, otherwise redirect to login
-        if (SyncUser.currentUser() == null) {
-            gotoLoginActivity();
-        }
     }
 
     @Override
     protected void onStart() {
         super.onStart();
-        user = SyncUser.currentUser();
-        if (user != null) {
-            // Create a RealmConfiguration for our user
-            SyncConfiguration config = new SyncConfiguration.Builder(user, REALM_URL)
-                    .initialData(new Realm.Transaction() {
-                        @Override
-                        public void execute(Realm realm) {
-                            realm.createObject(CRDTCounter.class, 1);
-                        }
-                    })
-                    .build();
-
-            // This will automatically sync all changes in the background for as long as the Realm is open
-            realm = Realm.getInstance(config);
-
-            counter = realm.where(CRDTCounter.class).findFirstAsync();
-            counter.addChangeListener(new RealmChangeListener<CRDTCounter>() {
-                @Override
-                public void onChange(CRDTCounter counter) {
-                    if (counter.isValid()) {
-                        counterView.setText(String.format(Locale.US, "%d", counter.getCount()));
-                    } else {
-                        counterView.setText("-");
+        user = getLoggedInUser();
+        if (user == null) { return; }
+
+        // Create a RealmConfiguration for our user
+        SyncConfiguration config = new SyncConfiguration.Builder(user, REALM_URL)
+                .initialData(new Realm.Transaction() {
+                    @Override
+                    public void execute(@Nonnull Realm realm) {
+                        realm.createObject(CRDTCounter.class, user.getIdentity());
                     }
-                }
-            });
-            counterView.setText("0");
+                })
+                .build();
 
-            // Setup progress listeners for indeterminate progress bars
-            session = SyncManager.getSession(config);
-            session.addDownloadProgressListener(ProgressMode.INDEFINITELY, downloadListener);
-            session.addUploadProgressListener(ProgressMode.INDEFINITELY, uploadListener);
-        }
+        // This will automatically sync all changes in the background for as long as the Realm is open
+        realm = Realm.getInstance(config);
+
+        counterView.setText("-");
+        CRDTCounter counter = realm.where(CRDTCounter.class).equalTo("name", user.getIdentity()).findFirstAsync();
+        counter.addChangeListener(new RealmChangeListener<CRDTCounter>() {
+            @Override
+            public void onChange(@Nonnull CRDTCounter counter) {
+                counterView.setText((!counter.isValid()) ? "-" : String.format(Locale.US, "%d", counter.getCount()));
+            }
+        });
+
+        // Setup progress listeners for indeterminate progress bars
+        session = SyncManager.getSession(config);
+        session.addDownloadProgressListener(ProgressMode.INDEFINITELY, downloadListener);
+        session.addUploadProgressListener(ProgressMode.INDEFINITELY, uploadListener);
     }
 
     @Override
@@ -135,17 +127,12 @@ protected void onStop() {
         if (session != null) {
             session.removeProgressListener(downloadListener);
             session.removeProgressListener(uploadListener);
+            session = null;
         }
         closeRealm();
         user = null;
     }
 
-    private void closeRealm() {
-        if (realm != null && !realm.isClosed()) {
-            realm.close();
-        }
-    }
-
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.menu_counter, menu);
@@ -158,7 +145,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
             case R.id.action_logout:
                 closeRealm();
                 user.logout();
-                gotoLoginActivity();
+                user = getLoggedInUser();
                 return true;
 
             default:
@@ -194,18 +181,34 @@ private void updateProgressBar(boolean downloading, boolean uploading) {
 
     private void adjustCounter(final int adjustment) {
         // A synchronized Realm can get written to at any point in time, so doing synchronous writes on the UI
-        // thread is HIGHLY discouraged as it might block longer than intended. Only use async transactions.
+        // thread is HIGHLY discouraged as it might block longer than intended. Use only async transactions.
         realm.executeTransactionAsync(new Realm.Transaction() {
             @Override
-            public void execute(Realm realm) {
+            public void execute(@Nonnull Realm realm) {
                 CRDTCounter counter = realm.where(CRDTCounter.class).findFirst();
-                counter.add(adjustment);
+                if (counter != null) {
+                    counter.incrementCounter(adjustment);
+                }
             }
         });
     }
 
-    private void gotoLoginActivity() {
-        Intent intent = new Intent(this, LoginActivity.class);
-        startActivity(intent);
+    private SyncUser getLoggedInUser() {
+        SyncUser user = null;
+
+        try { user = SyncUser.currentUser(); }
+        catch (IllegalStateException ignore) { }
+
+        if (user == null) {
+            startActivity(new Intent(this, LoginActivity.class));
+        }
+
+        return user;
+    }
+
+    private void closeRealm() {
+        if (realm != null && !realm.isClosed()) {
+            realm.close();
+        }
     }
 }
diff --git a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/LoginActivity.java b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/LoginActivity.java
index 5ce56afb27..73793b1edf 100644
--- a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/LoginActivity.java
+++ b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/LoginActivity.java
@@ -24,16 +24,17 @@
 import android.widget.EditText;
 import android.widget.Toast;
 
+import javax.annotation.Nonnull;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import io.realm.SyncCredentials;
 import io.realm.ObjectServerError;
 import io.realm.SyncUser;
-import io.realm.UserStore;
 
-import static io.realm.ErrorCode.UNKNOWN_ACCOUNT;
 
 public class LoginActivity extends AppCompatActivity {
+    private static final String REALM_AUTH_URL = "http://" + BuildConfig.OBJECT_SERVER_IP + ":9080/auth";
 
     @BindView(R.id.input_username) EditText username;
     @BindView(R.id.input_password) EditText password;
@@ -77,16 +78,15 @@ public void login(boolean createUser) {
         String password = this.password.getText().toString();
 
         SyncCredentials creds = SyncCredentials.usernamePassword(username, password, createUser);
-        String authUrl = "http://" + BuildConfig.OBJECT_SERVER_IP + ":9080/auth";
         SyncUser.Callback callback = new SyncUser.Callback() {
             @Override
-            public void onSuccess(SyncUser user) {
+            public void onSuccess(@Nonnull SyncUser user) {
                 progressDialog.dismiss();
                 onLoginSuccess();
             }
 
             @Override
-            public void onError(ObjectServerError error) {
+            public void onError(@Nonnull ObjectServerError error) {
                 progressDialog.dismiss();
                 String errorMsg;
                 switch (error.getErrorCode()) {
@@ -103,7 +103,7 @@ public void onError(ObjectServerError error) {
             }
         };
 
-        SyncUser.loginAsync(creds, authUrl, callback);
+        SyncUser.loginAsync(creds, REALM_AUTH_URL, callback);
     }
 
     @Override
diff --git a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CRDTCounter.java b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CRDTCounter.java
index 93096e3ac6..0bca8fd53c 100644
--- a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CRDTCounter.java
+++ b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CRDTCounter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Realm Inc.
+ * Copyright 2017 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,38 +13,30 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package io.realm.examples.objectserver.model;
 
-import io.realm.RealmList;
+import io.realm.MutableRealmInteger;
 import io.realm.RealmObject;
 import io.realm.annotations.PrimaryKey;
+import io.realm.annotations.Required;
 
 /**
- * Counter class that is eventually consistent. Two devices can simultaneous increment this and eventually reach
- * the same value.
- *
- * @see <href ref="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">Conflict Free Replicated Data Structures</href>
+ * A named, conflict-free replicated data-type.
  */
 public class CRDTCounter extends RealmObject {
-
     @PrimaryKey
-    private long id;
-    private RealmList<CounterOperation> operations;
+    private String name;
+
+    @Required
+    public final MutableRealmInteger counter = MutableRealmInteger.valueOf(0L);
 
-    public CRDTCounter() {
-        // Required by Realm
-    }
+    // Required for Realm
+    public CRDTCounter() {}
 
-    public CRDTCounter(long id) {
-        this.id = id;
-    }
+    public CRDTCounter(String name) { this.name = name; }
 
-    public long getCount() {
-        return operations.where().sum("adjustment").longValue();
-    }
+    public String getName() { return name; }
 
-    public void add(long val) {
-        operations.add(new CounterOperation(val));
-    }
+    public long getCount() { return counter.get().longValue(); }
+    public void incrementCounter(long delta) { counter.increment(delta); }
 }
diff --git a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CounterOperation.java b/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CounterOperation.java
deleted file mode 100644
index 53342f648d..0000000000
--- a/examples/objectServerExample/src/main/java/io/realm/examples/objectserver/model/CounterOperation.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright 2016 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.examples.objectserver.model;
-
-import io.realm.RealmObject;
-
-public class CounterOperation extends RealmObject {
-    public long adjustment;
-    public CounterOperation() {};
-    public CounterOperation(long adjustment) {
-        this.adjustment = adjustment;
-    }
-}
diff --git a/examples/objectServerExample/src/main/res/layout/activity_counter.xml b/examples/objectServerExample/src/main/res/layout/activity_counter.xml
index df73031aa7..a1300b2123 100644
--- a/examples/objectServerExample/src/main/res/layout/activity_counter.xml
+++ b/examples/objectServerExample/src/main/res/layout/activity_counter.xml
@@ -1,21 +1,20 @@
 <RelativeLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    xmlns:app="http://schemas.android.com/apk/res-auto">
-
+    >
 
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:orientation="vertical"
-        android:weightSum="1.0">
+        android:orientation="vertical">
 
         <View
             android:id="@+id/upper"
             android:layout_width="match_parent"
             android:layout_height="0dp"
-            android:layout_weight="0.5"
+            android:layout_weight="1"
             android:background="@drawable/button_counter">
         </View>
 
@@ -23,7 +22,7 @@
             android:id="@+id/lower"
             android:layout_width="match_parent"
             android:layout_height="0dp"
-            android:layout_weight="0.5"
+            android:layout_weight="1"
             android:background="@drawable/button_counter">
         </View>
     </LinearLayout>
diff --git a/examples/objectServerExample/src/main/res/layout/activity_login.xml b/examples/objectServerExample/src/main/res/layout/activity_login.xml
index 142ad539e1..375cdbca98 100644
--- a/examples/objectServerExample/src/main/res/layout/activity_login.xml
+++ b/examples/objectServerExample/src/main/res/layout/activity_login.xml
@@ -17,6 +17,7 @@
             android:layout_height="72dp"
             android:layout_gravity="center_horizontal"
             android:layout_marginBottom="24dp"
+            android:contentDescription="@string/realm_logo"
             android:src="@drawable/logo"/>
 
         <android.support.design.widget.TextInputLayout
@@ -29,7 +30,7 @@
                 android:id="@+id/input_username"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:hint="Username"
+                android:hint="@string/username"
                 android:inputType="text"/>
         </android.support.design.widget.TextInputLayout>
 
@@ -43,7 +44,7 @@
                 android:id="@+id/input_password"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:hint="Password"
+                android:hint="@string/password"
                 android:inputType="textPassword"/>
         </android.support.design.widget.TextInputLayout>
 
@@ -54,7 +55,7 @@
             android:layout_marginBottom="12dp"
             android:layout_marginTop="24dp"
             android:padding="12dp"
-            android:text="Login" />
+            android:text="@string/login" />
 
         <android.support.v7.widget.AppCompatButton
             android:id="@+id/button_create"
@@ -62,6 +63,6 @@
             android:layout_height="wrap_content"
             android:layout_marginBottom="24dp"
             android:padding="12dp"
-            android:text="Create account and login" />
+            android:text="@string/create_account" />
     </LinearLayout>
-</ScrollView>
\ No newline at end of file
+</ScrollView>
diff --git a/examples/objectServerExample/src/main/res/menu/menu_counter.xml b/examples/objectServerExample/src/main/res/menu/menu_counter.xml
index 858fd2e7e8..d0e93f2e8b 100644
--- a/examples/objectServerExample/src/main/res/menu/menu_counter.xml
+++ b/examples/objectServerExample/src/main/res/menu/menu_counter.xml
@@ -5,7 +5,7 @@
     <item
         android:id="@+id/action_logout"
         android:orderInCategory="100"
-        android:title="Logout"
+        android:title="@string/logout"
         android:icon="@drawable/ic_exit_to_app_white_24dp"
         app:showAsAction="always"/>
 </menu>
diff --git a/examples/objectServerExample/src/main/res/values/strings.xml b/examples/objectServerExample/src/main/res/values/strings.xml
index 10e43bd0a9..b4f90b3676 100644
--- a/examples/objectServerExample/src/main/res/values/strings.xml
+++ b/examples/objectServerExample/src/main/res/values/strings.xml
@@ -1,4 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string name="app_name">Object Server Example</string>
+    <string name="realm_logo">Realm Logo</string>
+    <string name="username">Username</string>
+    <string name="password">Password</string>
+    <string name="create_account">Create account and login</string>
+    <string name="login">Login</string>
+    <string name="logout">Logout</string>
 </resources>
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index 6fcb0e32ec..0cce92e5e9 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -49,7 +49,7 @@
             "android.util.JsonToken",
             "io.realm.exceptions.RealmMigrationNeededException",
             "io.realm.internal.ColumnInfo",
-            "io.realm.internal.LinkView",
+            "io.realm.internal.OsList",
             "io.realm.internal.OsObject",
             "io.realm.internal.OsSchemaInfo",
             "io.realm.internal.OsObjectSchemaInfo",
@@ -519,8 +519,8 @@ private void emitRealmList(
                 .beginControlFlow("if (" + fieldName + "RealmList != null)")
                 .emitStatement("return " + fieldName + "RealmList")
                 .nextControlFlow("else")
-                .emitStatement("LinkView linkView = proxyState.getRow$realm().getLinkList(%s)", fieldIndexVariableReference(field))
-                .emitStatement(fieldName + "RealmList = new RealmList<%s>(%s.class, linkView, proxyState.getRealm$realm())",
+                .emitStatement("OsList osList = proxyState.getRow$realm().getLinkList(%s)", fieldIndexVariableReference(field))
+                .emitStatement(fieldName + "RealmList = new RealmList<%s>(%s.class, osList, proxyState.getRealm$realm())",
                         genericType, genericType)
                 .emitStatement("return " + fieldName + "RealmList")
                 .endControlFlow()
@@ -556,8 +556,8 @@ public void emit(JavaWriter writer) throws IOException {
             }
         });
         writer.emitStatement("proxyState.getRealm$realm().checkIfValid()")
-                .emitStatement("LinkView links = proxyState.getRow$realm().getLinkList(%s)", fieldIndexVariableReference(field))
-                .emitStatement("links.clear()")
+                .emitStatement("OsList osList = proxyState.getRow$realm().getLinkList(%s)", fieldIndexVariableReference(field))
+                .emitStatement("osList.removeAll()")
                 .beginControlFlow("if (value == null)")
                 .emitStatement("return")
                 .endControlFlow()
@@ -568,7 +568,7 @@ public void emit(JavaWriter writer) throws IOException {
                 .beginControlFlow("if (((RealmObjectProxy) linkedObject).realmGet$proxyState().getRealm$realm() != proxyState.getRealm$realm())")
                 .emitStatement("throw new IllegalArgumentException(\"Each element of 'value' must belong to the same Realm.\")")
                 .endControlFlow()
-                .emitStatement("links.add(((RealmObjectProxy) linkedObject).realmGet$proxyState().getRow$realm().getIndex())")
+                .emitStatement("osList.addRow(((RealmObjectProxy) linkedObject).realmGet$proxyState().getRow$realm().getIndex())")
                 .endControlFlow()
                 .endMethod();
     }
@@ -1010,13 +1010,13 @@ private void emitInsertMethod(JavaWriter writer) throws IOException {
                         .emitStatement("RealmList<%s> %sList = ((%s) object).%s()",
                                 genericType, fieldName, interfaceName, getter)
                         .beginControlFlow("if (%sList != null)", fieldName)
-                        .emitStatement("long %1$sNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.%1$sIndex, rowIndex)", fieldName)
+                        .emitStatement("OsList %1$sOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.%1$sIndex)", fieldName)
                         .beginControlFlow("for (%1$s %2$sItem : %2$sList)", genericType, fieldName)
                         .emitStatement("Long cacheItemIndex%1$s = cache.get(%1$sItem)", fieldName)
                         .beginControlFlow("if (cacheItemIndex%s == null)", fieldName)
                         .emitStatement("cacheItemIndex%1$s = %2$s.insert(realm, %1$sItem, cache)", fieldName, Utils.getProxyClassSimpleName(field))
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
+                        .emitStatement("%1$sOsList.addRow(cacheItemIndex%1$s)", fieldName)
                         .endControlFlow()
                         .endControlFlow();
 
@@ -1090,13 +1090,13 @@ private void emitInsertListMethod(JavaWriter writer) throws IOException {
                         .emitStatement("RealmList<%s> %sList = ((%s) object).%s()",
                                 genericType, fieldName, interfaceName, getter)
                         .beginControlFlow("if (%sList != null)", fieldName)
-                        .emitStatement("long %1$sNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.%1$sIndex, rowIndex)", fieldName)
+                        .emitStatement("OsList %1$sOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.%1$sIndex)", fieldName)
                         .beginControlFlow("for (%1$s %2$sItem : %2$sList)", genericType, fieldName)
                         .emitStatement("Long cacheItemIndex%1$s = cache.get(%1$sItem)", fieldName)
                         .beginControlFlow("if (cacheItemIndex%s == null)", fieldName)
                         .emitStatement("cacheItemIndex%1$s = %2$s.insert(realm, %1$sItem, cache)", fieldName, Utils.getProxyClassSimpleName(field))
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
+                        .emitStatement("%1$sOsList.addRow(cacheItemIndex%1$s)", fieldName)
                         .endControlFlow()
                         .endControlFlow();
 
@@ -1163,8 +1163,8 @@ private void emitInsertOrUpdateMethod(JavaWriter writer) throws IOException {
                 final String genericType = Utils.getGenericTypeQualifiedName(field);
                 writer
                         .emitEmptyLine()
-                        .emitStatement("long %1$sNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.%1$sIndex, rowIndex)", fieldName)
-                        .emitStatement("LinkView.nativeClear(%sNativeLinkViewPtr)", fieldName)
+                        .emitStatement("OsList %1$sOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.%1$sIndex)", fieldName)
+                        .emitStatement("%1$sOsList.removeAll()", fieldName)
                         .emitStatement("RealmList<%s> %sList = ((%s) object).%s()",
                                 genericType, fieldName, interfaceName, getter)
                         .beginControlFlow("if (%sList != null)", fieldName)
@@ -1173,7 +1173,7 @@ private void emitInsertOrUpdateMethod(JavaWriter writer) throws IOException {
                         .beginControlFlow("if (cacheItemIndex%s == null)", fieldName)
                         .emitStatement("cacheItemIndex%1$s = %2$s.insertOrUpdate(realm, %1$sItem, cache)", fieldName, Utils.getProxyClassSimpleName(field))
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
+                        .emitStatement("%1$sOsList.addRow(cacheItemIndex%1$s)", fieldName)
                         .endControlFlow()
                         .endControlFlow()
                         .emitEmptyLine();
@@ -1247,8 +1247,8 @@ private void emitInsertOrUpdateListMethod(JavaWriter writer) throws IOException
                 final String genericType = Utils.getGenericTypeQualifiedName(field);
                 writer
                         .emitEmptyLine()
-                        .emitStatement("long %1$sNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.%1$sIndex, rowIndex)", fieldName)
-                        .emitStatement("LinkView.nativeClear(%sNativeLinkViewPtr)", fieldName)
+                        .emitStatement("OsList %1$sOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.%1$sIndex)", fieldName)
+                        .emitStatement("%1$sOsList.removeAll()", fieldName)
                         .emitStatement("RealmList<%s> %sList = ((%s) object).%s()",
                                 genericType, fieldName, interfaceName, getter)
                         .beginControlFlow("if (%sList != null)", fieldName)
@@ -1257,7 +1257,7 @@ private void emitInsertOrUpdateListMethod(JavaWriter writer) throws IOException
                         .beginControlFlow("if (cacheItemIndex%s == null)", fieldName)
                         .emitStatement("cacheItemIndex%1$s = %2$s.insertOrUpdate(realm, %1$sItem, cache)", fieldName, Utils.getProxyClassSimpleName(field))
                         .endControlFlow()
-                        .emitStatement("LinkView.nativeAdd(%1$sNativeLinkViewPtr, cacheItemIndex%1$s)", fieldName)
+                        .emitStatement("%1$sOsList.addRow(cacheItemIndex%1$s)", fieldName)
                         .endControlFlow()
                         .endControlFlow()
                         .emitEmptyLine();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index a855774e9d..8893573be5 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -7,7 +7,7 @@
 import android.util.JsonToken;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.OsObject;
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
@@ -361,8 +361,8 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
         if (columnRealmListRealmList != null) {
             return columnRealmListRealmList;
         } else {
-            LinkView linkView = proxyState.getRow$realm().getLinkList(columnInfo.columnRealmListIndex);
-            columnRealmListRealmList = new RealmList<some.test.AllTypes>(some.test.AllTypes.class, linkView, proxyState.getRealm$realm());
+            OsList osList = proxyState.getRow$realm().getLinkList(columnInfo.columnRealmListIndex);
+            columnRealmListRealmList = new RealmList<some.test.AllTypes>(some.test.AllTypes.class, osList, proxyState.getRealm$realm());
             return columnRealmListRealmList;
         }
     }
@@ -391,8 +391,8 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
         }
 
         proxyState.getRealm$realm().checkIfValid();
-        LinkView links = proxyState.getRow$realm().getLinkList(columnInfo.columnRealmListIndex);
-        links.clear();
+        OsList osList = proxyState.getRow$realm().getLinkList(columnInfo.columnRealmListIndex);
+        osList.removeAll();
         if (value == null) {
             return;
         }
@@ -403,7 +403,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
             if (((RealmObjectProxy) linkedObject).realmGet$proxyState().getRealm$realm() != proxyState.getRealm$realm()) {
                 throw new IllegalArgumentException("Each element of 'value' must belong to the same Realm.");
             }
-            links.add(((RealmObjectProxy) linkedObject).realmGet$proxyState().getRow$realm().getIndex());
+            osList.addRow(((RealmObjectProxy) linkedObject).realmGet$proxyState().getRow$realm().getIndex());
         }
     }
 
@@ -817,13 +817,13 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
 
         RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
         if (columnRealmListList != null) {
-            long columnRealmListNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.columnRealmListIndex, rowIndex);
+            OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
             for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
                 Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                 if (cacheItemIndexcolumnRealmList == null) {
                     cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insert(realm, columnRealmListItem, cache);
                 }
-                LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
+                columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
             }
         }
         return rowIndex;
@@ -885,13 +885,13 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
 
             RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
             if (columnRealmListList != null) {
-                long columnRealmListNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.columnRealmListIndex, rowIndex);
+                OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
                 for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
                     Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                     if (cacheItemIndexcolumnRealmList == null) {
                         cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insert(realm, columnRealmListItem, cache);
                     }
-                    LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
+                    columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
                 }
             }
         }
@@ -950,8 +950,8 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
             Table.nativeNullifyLink(tableNativePtr, columnInfo.columnObjectIndex, rowIndex);
         }
 
-        long columnRealmListNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.columnRealmListIndex, rowIndex);
-        LinkView.nativeClear(columnRealmListNativeLinkViewPtr);
+        OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
+        columnRealmListOsList.removeAll();
         RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
         if (columnRealmListList != null) {
             for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
@@ -959,7 +959,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
                 if (cacheItemIndexcolumnRealmList == null) {
                     cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
                 }
-                LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
+                columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
             }
         }
 
@@ -1026,8 +1026,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 Table.nativeNullifyLink(tableNativePtr, columnInfo.columnObjectIndex, rowIndex);
             }
 
-            long columnRealmListNativeLinkViewPtr = Table.nativeGetLinkView(tableNativePtr, columnInfo.columnRealmListIndex, rowIndex);
-            LinkView.nativeClear(columnRealmListNativeLinkViewPtr);
+            OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
+            columnRealmListOsList.removeAll();
             RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
             if (columnRealmListList != null) {
                 for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
@@ -1035,7 +1035,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     if (cacheItemIndexcolumnRealmList == null) {
                         cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
                     }
-                    LinkView.nativeAdd(columnRealmListNativeLinkViewPtr, cacheItemIndexcolumnRealmList);
+                    columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
                 }
             }
 
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index 5e503752d6..ccf71948d8 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -7,7 +7,7 @@
 import android.util.JsonToken;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.OsObject;
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 194605c183..ccacda2a95 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -7,7 +7,7 @@
 import android.util.JsonToken;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.OsObject;
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index 9fc39f84e6..46f59410df 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -7,7 +7,7 @@
 import android.util.JsonToken;
 import io.realm.exceptions.RealmMigrationNeededException;
 import io.realm.internal.ColumnInfo;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.OsObject;
 import io.realm.internal.OsObjectSchemaInfo;
 import io.realm.internal.OsSchemaInfo;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
index 038ccc905d..057bc0d958 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
@@ -18,6 +18,7 @@
 
 import android.support.test.runner.AndroidJUnit4;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -46,6 +47,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -781,7 +783,7 @@ public void removeAllFromRealm_outsideTransaction() {
             dogs.deleteAllFromRealm();
             fail("removeAllFromRealm should be called in a transaction.");
         } catch (IllegalStateException e) {
-            assertEquals("Changing Realm data can only be done from inside a write transaction.", e.getMessage());
+            assertThat(e.getMessage(), CoreMatchers.containsString("Must be in a write transaction "));
         }
     }
 
@@ -1117,7 +1119,7 @@ public void createSnapshot_shouldUseTargetTable() {
         realm.commitTransaction();
         assertEquals(sizeBefore - 1, collection.size());
 
-        assertNotNull(collection.view);
-        assertEquals(collection.view.getTargetTable().getName(), snapshot.getTable().getName());
+        assertNotNull(collection.osList);
+        assertEquals(collection.osList.getTargetTable().getName(), snapshot.getTable().getName());
     }
 }
diff --git a/realm/realm-library/src/main/cpp/CMakeLists.txt b/realm/realm-library/src/main/cpp/CMakeLists.txt
index 97ce1d8b06..d7308a6dfd 100644
--- a/realm/realm-library/src/main/cpp/CMakeLists.txt
+++ b/realm/realm-library/src/main/cpp/CMakeLists.txt
@@ -38,12 +38,12 @@ string(TOLOWER ${CMAKE_BUILD_TYPE} build_type_FOLDER)
 set(classes_PATH ${CMAKE_SOURCE_DIR}/../../../build/intermediates/classes/${REALM_FLAVOR}/${build_type_FOLDER}/)
 set(classes_LIST
     io.realm.internal.Table io.realm.internal.CheckedRow
-    io.realm.internal.LinkView io.realm.internal.Util io.realm.internal.UncheckedRow
+    io.realm.internal.Util io.realm.internal.UncheckedRow
     io.realm.internal.TableQuery io.realm.internal.SharedRealm io.realm.internal.TestUtil
     io.realm.log.LogLevel io.realm.log.RealmLog io.realm.internal.Property io.realm.internal.OsSchemaInfo
     io.realm.internal.OsObjectSchemaInfo io.realm.internal.Collection
-    io.realm.internal.NativeObjectReference io.realm.internal.CollectionChangeSet
-    io.realm.internal.OsObject io.realm.internal.OsRealmConfig
+    io.realm.internal.NativeObjectReference io.realm.internal.OsCollectionChangeSet
+    io.realm.internal.OsObject io.realm.internal.OsRealmConfig io.realm.internal.OsList
 )
 # /./ is the workaround for the problem that AS cannot find the jni headers.
 # See https://github.com/googlesamples/android-ndk/issues/319
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp
index b584438ada..988e938528 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp
@@ -159,16 +159,6 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_CheckedRow_nativeIsNullLink(JN
     return Java_io_realm_internal_UncheckedRow_nativeIsNullLink(env, obj, nativeRowPtr, columnIndex);
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_CheckedRow_nativeGetLinkView(JNIEnv* env, jobject obj,
-                                                                            jlong nativeRowPtr, jlong columnIndex)
-{
-    if (!ROW_AND_COL_INDEX_AND_TYPE_VALID(env, ROW(nativeRowPtr), columnIndex, type_LinkList)) {
-        return 0;
-    }
-
-    return Java_io_realm_internal_UncheckedRow_nativeGetLinkView(env, obj, nativeRowPtr, columnIndex);
-}
-
 JNIEXPORT void JNICALL Java_io_realm_internal_CheckedRow_nativeSetLong(JNIEnv* env, jobject obj, jlong nativeRowPtr,
                                                                        jlong columnIndex, jlong value)
 {
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
index 1e209a2143..5ee2ae69d5 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Collection.cpp
@@ -19,6 +19,7 @@
 
 #include <shared_realm.hpp>
 #include <results.hpp>
+#include <list.hpp>
 
 #include "java_sort_descriptor.hpp"
 #include "util.hpp"
@@ -95,17 +96,18 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Collection_nativeCreateResults(JN
     return reinterpret_cast<jlong>(nullptr);
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Collection_nativeCreateResultsFromLinkView(JNIEnv* env, jclass,
+JNIEXPORT jlong JNICALL Java_io_realm_internal_Collection_nativeCreateResultsFromList(JNIEnv* env, jclass,
                                                                                           jlong shared_realm_ptr,
-                                                                                          jlong link_view_ptr,
+                                                                                          jlong list_ptr,
                                                                                           jobject j_sort_desc)
 {
     TR_ENTER()
     try {
-        auto link_view_ref = reinterpret_cast<LinkViewRef*>(link_view_ptr);
+        auto& list = *reinterpret_cast<List*>(list_ptr);
         auto shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
-        Results results(shared_realm, *link_view_ref, util::none,
-                        JavaSortDescriptor(env, j_sort_desc).sort_descriptor());
+        Results results = j_sort_desc ?
+            list.sort(JavaSortDescriptor(env, j_sort_desc).sort_descriptor()) :
+            list.as_results();
         auto wrapper = new ResultsWrapper(results);
 
         return reinterpret_cast<jlong>(wrapper);
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp
deleted file mode 100644
index 4ad4066411..0000000000
--- a/realm/realm-library/src/main/cpp/io_realm_internal_LinkView.cpp
+++ /dev/null
@@ -1,270 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "io_realm_internal_LinkView.h"
-#include "util.hpp"
-
-using namespace realm;
-
-static void finalize_link_view(jlong ptr);
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetRow(JNIEnv* env, jobject, jlong nativeLinkViewPtr,
-                                                                     jlong pos)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    if (!ROW_INDEX_VALID(env, *lv, pos)) {
-        return -1;
-    }
-    try {
-        LinkViewRef lvr = *lv;
-        Row* row = new Row((*lvr)[S(pos)]);
-        return reinterpret_cast<jlong>(row);
-    }
-    CATCH_STD()
-    return 0;
-}
-
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetTargetRowIndex(JNIEnv* env, jobject,
-                                                                                jlong nativeLinkViewPtr,
-                                                                                jlong linkViewIndex)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    if (!ROW_INDEX_VALID(env, *lv, linkViewIndex)) {
-        return -1;
-    }
-    try {
-        LinkViewRef lvr = *lv;
-        return lvr->get(S(linkViewIndex)).get_index();
-    }
-    CATCH_STD()
-    return 0;
-}
-
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeAdd(JNIEnv* env, jclass, jlong nativeLinkViewPtr,
-                                                                 jlong rowIndex)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    try {
-        LinkViewRef lvr = *lv;
-        lvr->add(S(rowIndex));
-    }
-    CATCH_STD()
-}
-
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeInsert(JNIEnv* env, jobject, jlong nativeLinkViewPtr,
-                                                                    jlong pos, jlong rowIndex)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    try {
-        LinkViewRef lvr = *lv;
-        lvr->insert(S(pos), S(rowIndex));
-    }
-    CATCH_STD()
-}
-
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeSet(JNIEnv* env, jobject, jlong nativeLinkViewPtr,
-                                                                 jlong pos, jlong rowIndex)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    if (!ROW_INDEX_VALID(env, *lv, pos)) {
-        return;
-    }
-    try {
-        LinkViewRef lvr = *lv;
-        lvr->set(S(pos), S(rowIndex));
-    }
-    CATCH_STD()
-}
-
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeMove(JNIEnv* env, jobject, jlong nativeLinkViewPtr,
-                                                                  jlong old_pos, jlong new_pos)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        size_t size = lvr->size();
-        if (old_pos < 0 || new_pos < 0 || size_t(old_pos) >= size || size_t(new_pos) >= size) {
-            ThrowException(env, IndexOutOfBounds, "Indices must be within range [0, " + num_to_string(size) + "[. " +
-                                                      "Yours were (" + num_to_string(old_pos) + "," +
-                                                      num_to_string(new_pos) + ")");
-            return;
-        }
-        lvr->move(S(old_pos), S(new_pos));
-    }
-    CATCH_STD()
-}
-
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeRemove(JNIEnv* env, jobject, jlong nativeLinkViewPtr,
-                                                                    jlong pos)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    if (!ROW_INDEX_VALID(env, *lv, pos)) {
-        return;
-    }
-    try {
-        LinkViewRef lvr = *lv;
-        return lvr->remove(S(pos));
-    }
-    CATCH_STD()
-}
-
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeClear(JNIEnv* env, jclass, jlong nativeLinkViewPtr)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        return lvr->clear();
-    }
-    CATCH_STD()
-}
-
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeSize(JNIEnv* env, jobject, jlong nativeLinkViewPtr)
-{
-
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        return static_cast<jlong>(lvr->size());
-    }
-    CATCH_STD()
-    return 0;
-}
-
-
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_LinkView_nativeIsEmpty(JNIEnv* env, jobject,
-                                                                         jlong nativeLinkViewPtr)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        return to_jbool(lvr->is_empty());
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeWhere(JNIEnv* env, jobject, jlong nativeLinkViewPtr)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        Query* queryPtr = new Query(lvr->get_target_table().where(LinkViewRef(lvr)));
-        return reinterpret_cast<jlong>(queryPtr);
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jboolean JNICALL Java_io_realm_internal_LinkView_nativeIsAttached(JNIEnv* env, jobject,
-                                                                            jlong nativeLinkViewPtr)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        return to_jbool(lvr->is_attached());
-    }
-    CATCH_STD()
-    return 0;
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeFind(JNIEnv* env, jobject, jlong nativeLinkViewPtr,
-                                                                   jlong targetRowIndex)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        if (!ROW_INDEX_VALID(env, &lvr->get_target_table(), targetRowIndex)) {
-            return -1;
-        }
-        size_t ndx = lvr->find(static_cast<size_t>(targetRowIndex));
-        return to_jlong_or_not_found(ndx);
-    }
-    CATCH_STD()
-    return -1;
-}
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeRemoveAllTargetRows(JNIEnv* env, jobject,
-                                                                                 jlong nativeLinkViewPtr)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    try {
-        LinkViewRef* lv = LV(nativeLinkViewPtr);
-        LinkViewRef lvr = *lv;
-        lvr->remove_all_target_rows();
-    }
-    CATCH_STD()
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetTargetTable(JNIEnv*, jobject,
-                                                                             jlong nativeLinkViewPtr)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    LinkViewRef lvr = *lv;
-    Table* pTable = &(lvr->get_target_table());
-    LangBindHelper::bind_table_ptr(pTable);
-
-    return reinterpret_cast<jlong>(pTable);
-}
-
-JNIEXPORT void JNICALL Java_io_realm_internal_LinkView_nativeRemoveTargetRow(JNIEnv* env, jobject,
-                                                                             jlong nativeLinkViewPtr, jlong pos)
-{
-    TR_ENTER_PTR(nativeLinkViewPtr)
-    LinkViewRef* lv = LV(nativeLinkViewPtr);
-    if (!ROW_INDEX_VALID(env, *lv, pos)) {
-        return;
-    }
-    try {
-        LinkViewRef lvr = *lv;
-        return lvr->remove_target_row(S(pos));
-    }
-    CATCH_STD()
-}
-
-static void finalize_link_view(jlong ptr)
-{
-    TR_ENTER_PTR(ptr)
-    LangBindHelper::unbind_linklist_ptr(*LV(ptr));
-}
-
-JNIEXPORT jlong JNICALL Java_io_realm_internal_LinkView_nativeGetFinalizerPtr(JNIEnv*, jclass)
-{
-    TR_ENTER()
-    return reinterpret_cast<jlong>(&finalize_link_view);
-}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_CollectionChangeSet.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsCollectionChangeSet.cpp
similarity index 78%
rename from realm/realm-library/src/main/cpp/io_realm_internal_CollectionChangeSet.cpp
rename to realm/realm-library/src/main/cpp/io_realm_internal_OsCollectionChangeSet.cpp
index f85fb853af..807ce9afa2 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_CollectionChangeSet.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsCollectionChangeSet.cpp
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-#include "io_realm_internal_CollectionChangeSet.h"
+#include "io_realm_internal_OsCollectionChangeSet.h"
 
 #include <collection_notifications.hpp>
 
@@ -44,11 +44,11 @@ static jintArray index_set_to_jint_array(JNIEnv* env, const IndexSet& index_set)
         ranges_vector.push_back(changes.second - changes.first);
     }
 
-    if (ranges_vector.size() > io_realm_internal_CollectionChangeSet_MAX_ARRAY_LENGTH) {
+    if (ranges_vector.size() > io_realm_internal_OsCollectionChangeSet_MAX_ARRAY_LENGTH) {
         std::ostringstream error_msg;
         error_msg << "There are too many ranges changed in this change set. They cannot fit into an array."
                   << " ranges_vector's size: " << ranges_vector.size()
-                  << " Java array's max size: " << io_realm_internal_CollectionChangeSet_MAX_ARRAY_LENGTH << ".";
+                  << " Java array's max size: " << io_realm_internal_OsCollectionChangeSet_MAX_ARRAY_LENGTH << ".";
         ThrowException(env, IllegalState, error_msg.str());
         return nullptr;
     }
@@ -67,11 +67,11 @@ static jintArray index_set_to_indices_array(JNIEnv* env, const IndexSet& index_s
     for (auto index : index_set.as_indexes()) {
         indices_vector.push_back(index);
     }
-    if (indices_vector.size() > io_realm_internal_CollectionChangeSet_MAX_ARRAY_LENGTH) {
+    if (indices_vector.size() > io_realm_internal_OsCollectionChangeSet_MAX_ARRAY_LENGTH) {
         std::ostringstream error_msg;
         error_msg << "There are too many indices in this change set. They cannot fit into an array."
                   << " indices_vector's size: " << indices_vector.size()
-                  << " Java array's max size: " << io_realm_internal_CollectionChangeSet_MAX_ARRAY_LENGTH << ".";
+                  << " Java array's max size: " << io_realm_internal_OsCollectionChangeSet_MAX_ARRAY_LENGTH << ".";
         ThrowException(env, IllegalState, error_msg.str());
         return nullptr;
     }
@@ -80,42 +80,42 @@ static jintArray index_set_to_indices_array(JNIEnv* env, const IndexSet& index_s
     return jint_array;
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_CollectionChangeSet_nativeGetFinalizerPtr(JNIEnv*, jclass)
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsCollectionChangeSet_nativeGetFinalizerPtr(JNIEnv*, jclass)
 {
     TR_ENTER()
     return reinterpret_cast<jlong>(&finalize_changeset);
 }
 
-JNIEXPORT jintArray JNICALL Java_io_realm_internal_CollectionChangeSet_nativeGetRanges(JNIEnv* env, jclass,
+JNIEXPORT jintArray JNICALL Java_io_realm_internal_OsCollectionChangeSet_nativeGetRanges(JNIEnv* env, jclass,
                                                                                        jlong native_ptr, jint type)
 {
     TR_ENTER_PTR(native_ptr)
     // no throws
     auto& change_set = *reinterpret_cast<CollectionChangeSet*>(native_ptr);
     switch (type) {
-        case io_realm_internal_CollectionChangeSet_TYPE_DELETION:
+        case io_realm_internal_OsCollectionChangeSet_TYPE_DELETION:
             return index_set_to_jint_array(env, change_set.deletions);
-        case io_realm_internal_CollectionChangeSet_TYPE_INSERTION:
+        case io_realm_internal_OsCollectionChangeSet_TYPE_INSERTION:
             return index_set_to_jint_array(env, change_set.insertions);
-        case io_realm_internal_CollectionChangeSet_TYPE_MODIFICATION:
+        case io_realm_internal_OsCollectionChangeSet_TYPE_MODIFICATION:
             return index_set_to_jint_array(env, change_set.modifications_new);
         default:
             REALM_UNREACHABLE();
     }
 }
 
-JNIEXPORT jintArray JNICALL Java_io_realm_internal_CollectionChangeSet_nativeGetIndices(JNIEnv* env, jclass,
+JNIEXPORT jintArray JNICALL Java_io_realm_internal_OsCollectionChangeSet_nativeGetIndices(JNIEnv* env, jclass,
                                                                                         jlong native_ptr, jint type)
 {
     TR_ENTER_PTR(native_ptr)
     // no throws
     auto& change_set = *reinterpret_cast<CollectionChangeSet*>(native_ptr);
     switch (type) {
-        case io_realm_internal_CollectionChangeSet_TYPE_DELETION:
+        case io_realm_internal_OsCollectionChangeSet_TYPE_DELETION:
             return index_set_to_indices_array(env, change_set.deletions);
-        case io_realm_internal_CollectionChangeSet_TYPE_INSERTION:
+        case io_realm_internal_OsCollectionChangeSet_TYPE_INSERTION:
             return index_set_to_indices_array(env, change_set.insertions);
-        case io_realm_internal_CollectionChangeSet_TYPE_MODIFICATION:
+        case io_realm_internal_OsCollectionChangeSet_TYPE_MODIFICATION:
             return index_set_to_indices_array(env, change_set.modifications_new);
         default:
             REALM_UNREACHABLE();
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsList.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsList.cpp
new file mode 100644
index 0000000000..fe15002409
--- /dev/null
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsList.cpp
@@ -0,0 +1,204 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "io_realm_internal_OsList.h"
+
+#include <list.hpp>
+#include <results.hpp>
+#include <shared_realm.hpp>
+
+#include "util.hpp"
+
+using namespace realm;
+
+static void finalize_list(jlong ptr)
+{
+    TR_ENTER_PTR(ptr)
+    delete reinterpret_cast<List*>(ptr);
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsList_nativeGetFinalizerPtr(JNIEnv*, jclass)
+{
+    TR_ENTER()
+    return reinterpret_cast<jlong>(&finalize_list);
+}
+
+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_OsList_nativeCreate(JNIEnv* env, jclass, jlong shared_realm_ptr, jlong row_ptr,
+                                                                        jlong column_index)
+{
+    TR_ENTER_PTR(row_ptr)
+
+    try {
+        auto& row = *reinterpret_cast<realm::Row*>(row_ptr);
+
+        if (!ROW_AND_COL_INDEX_AND_TYPE_VALID(env, &row, column_index, type_LinkList)) {
+            return 0;
+        }
+
+        auto& shared_realm = *reinterpret_cast<SharedRealm*>(shared_realm_ptr);
+        LinkViewRef link_view_ref(row.get_linklist(column_index));
+        auto list_ptr = new List(shared_realm, link_view_ref);
+
+        Table* target_table_ptr = &(link_view_ref)->get_target_table();
+        LangBindHelper::bind_table_ptr(target_table_ptr);
+
+        jlong ret[2];
+        ret[0] = reinterpret_cast<jlong>(list_ptr);
+        ret[1] = reinterpret_cast<jlong>(target_table_ptr);
+
+        jlongArray ret_array = env->NewLongArray(2);
+        if (!ret_array) {
+            ThrowException(env, OutOfMemory, "Could not allocate memory to create OsList.");
+            return nullptr;
+        }
+        env->SetLongArrayRegion(ret_array, 0, 2, ret);
+        return ret_array;
+    }
+    CATCH_STD()
+    return nullptr;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsList_nativeGetRow(JNIEnv* env, jclass, jlong list_ptr,
+                                                                   jlong column_index)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        auto row = list.get(column_index);
+        return reinterpret_cast<jlong>(new Row(std::move(row)));
+    }
+    CATCH_STD()
+    return reinterpret_cast<jlong>(nullptr);
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeAddRow(JNIEnv* env, jclass, jlong list_ptr,
+                                                                  jlong target_row_index)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.add(static_cast<size_t>(target_row_index));
+    }
+    CATCH_STD()
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeInsertRow(JNIEnv* env, jclass, jlong list_ptr, jlong pos,
+                                                                     jlong target_row_index)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.insert(static_cast<size_t>(pos), static_cast<size_t>(target_row_index));
+    }
+    CATCH_STD()
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeSetRow(JNIEnv* env, jclass, jlong list_ptr, jlong pos,
+                                                                  jlong target_row_index)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.set(static_cast<size_t>(pos), static_cast<size_t>(target_row_index));
+    }
+    CATCH_STD()
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeMove(JNIEnv* env, jclass, jlong list_ptr,
+                                                                jlong source_index, jlong target_index)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.move(source_index, target_index);
+    }
+    CATCH_STD()
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeRemove(JNIEnv* env, jclass, jlong list_ptr, jlong index)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.remove(index);
+    }
+    CATCH_STD()
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeRemoveAll(JNIEnv* env, jclass, jlong list_ptr)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.remove_all();
+    }
+    CATCH_STD()
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsList_nativeSize(JNIEnv* env, jclass, jlong list_ptr)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        return list.size();
+    }
+    CATCH_STD()
+    return 0;
+}
+
+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsList_nativeGetQuery(JNIEnv* env, jclass, jlong list_ptr)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        auto query = list.get_query();
+        return reinterpret_cast<jlong>(new Query(std::move(query)));
+    }
+    CATCH_STD()
+    return reinterpret_cast<jlong>(nullptr);
+}
+
+JNIEXPORT jboolean JNICALL Java_io_realm_internal_OsList_nativeIsValid(JNIEnv* env, jclass, jlong list_ptr)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        return list.is_valid();
+    }
+    CATCH_STD()
+    return JNI_FALSE;
+}
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsList_nativeDeleteAll(JNIEnv* env, jclass, jlong list_ptr)
+{
+    TR_ENTER_PTR(list_ptr)
+
+    try {
+        auto& list = *reinterpret_cast<List*>(list_ptr);
+        list.delete_all();
+    }
+    CATCH_STD()
+}
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
index 07e6e2d335..a61b776b4f 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp
@@ -622,20 +622,6 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeGetLink(JNIEnv* env,
     return static_cast<jlong>(TBL(nativeTablePtr)->get_link(S(columnIndex), S(rowIndex))); // noexcept
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeGetLinkView(JNIEnv* env, jclass, jlong nativeTablePtr,
-                                                                       jlong columnIndex, jlong rowIndex)
-{
-    if (!TBL_AND_INDEX_AND_TYPE_VALID(env, TBL(nativeTablePtr), columnIndex, rowIndex, type_LinkList)) {
-        return 0;
-    }
-    try {
-        LinkViewRef* link_view_ptr = new LinkViewRef(TBL(nativeTablePtr)->get_linklist(S(columnIndex), S(rowIndex)));
-        return reinterpret_cast<jlong>(link_view_ptr);
-    }
-    CATCH_STD()
-    return 0;
-}
-
 JNIEXPORT jlong JNICALL Java_io_realm_internal_Table_nativeGetLinkTarget(JNIEnv* env, jobject, jlong nativeTablePtr,
                                                                          jlong columnIndex)
 {
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
index 8b491db0b4..7be68bc5fe 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp
@@ -205,19 +205,6 @@ JNIEXPORT jboolean JNICALL Java_io_realm_internal_UncheckedRow_nativeIsNullLink(
     return to_jbool(ROW(nativeRowPtr)->is_null_link(S(columnIndex)));
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_UncheckedRow_nativeGetLinkView(JNIEnv* env, jobject,
-                                                                              jlong nativeRowPtr, jlong columnIndex)
-{
-    TR_ENTER_PTR(nativeRowPtr)
-    if (!ROW_VALID(env, ROW(nativeRowPtr))) {
-        return 0;
-    }
-
-    LinkViewRef* link_view_ptr =
-        const_cast<LinkViewRef*>(&(LangBindHelper::get_linklist_ptr(*ROW(nativeRowPtr), S(columnIndex))));
-    return reinterpret_cast<jlong>(link_view_ptr);
-}
-
 JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeSetLong(JNIEnv* env, jobject, jlong nativeRowPtr,
                                                                          jlong columnIndex, jlong value)
 {
diff --git a/realm/realm-library/src/main/cpp/jni_util/java_class.cpp b/realm/realm-library/src/main/cpp/jni_util/java_class.cpp
index e023e499d9..357a504703 100644
--- a/realm/realm-library/src/main/cpp/jni_util/java_class.cpp
+++ b/realm/realm-library/src/main/cpp/jni_util/java_class.cpp
@@ -47,7 +47,7 @@ JavaClass::JavaClass(JavaClass&& rhs)
 JavaGlobalRef JavaClass::get_jclass(JNIEnv* env, const char* class_name)
 {
     jclass cls = env->FindClass(class_name);
-    REALM_ASSERT_RELEASE(cls);
+    REALM_ASSERT_RELEASE_EX(cls, class_name);
 
     JavaGlobalRef cls_ref(env, cls, true);
     return cls_ref;
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index 0ddeaaf2b1..bfd93b6347 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -27,6 +27,7 @@
 #include "io_realm_internal_SharedRealm.h"
 #include "shared_realm.hpp"
 #include "results.hpp"
+#include "list.hpp"
 #include "java_exception_def.hpp"
 
 #include "jni_util/java_exception_thrower.hpp"
@@ -109,6 +110,11 @@ void ConvertException(JNIEnv* env, const char* file, int line)
         ss << e.what() << " in " << file << " line " << line;
         ThrowException(env, IllegalState, ss.str());
     }
+    catch (List::OutOfBoundsIndexException& e) {
+        ss << "Out of range  in " << file << " line " << line << "(requested: " << e.requested
+           << " valid: " << e.valid_count << ")";
+        ThrowException(env, IndexOutOfBounds, ss.str());
+    }
     catch (IncorrectThreadException& e) {
         ss << e.what() << " in " << file << " line " << line;
         ThrowException(env, IllegalState, ss.str());
diff --git a/realm/realm-library/src/main/cpp/util.hpp b/realm/realm-library/src/main/cpp/util.hpp
index 2a155f8915..389fd418cc 100644
--- a/realm/realm-library/src/main/cpp/util.hpp
+++ b/realm/realm-library/src/main/cpp/util.hpp
@@ -78,11 +78,8 @@ std::string num_to_string(T pNumber)
 #define B(x) static_cast<bool>(x)
 #define S64(x) static_cast<int64_t>(x)
 #define TBL(x) reinterpret_cast<realm::Table*>(x)
-#define TV(x) reinterpret_cast<realm::TableView*>(x)
-#define LV(x) reinterpret_cast<realm::LinkViewRef*>(x)
 #define Q(x) reinterpret_cast<realm::Query*>(x)
 #define ROW(x) reinterpret_cast<realm::Row*>(x)
-#define HO(T, ptr) reinterpret_cast<realm::SharedGroup::Handover<T>*>(ptr)
 
 // Exception handling
 enum ExceptionKind {
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
index 9203b295f1..0aa0e5a862 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
@@ -24,7 +24,7 @@
 
 import io.realm.exceptions.RealmException;
 import io.realm.internal.CheckedRow;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
 import io.realm.internal.Table;
@@ -348,11 +348,11 @@ public DynamicRealmObject getObject(String fieldName) {
 
         long columnIndex = proxyState.getRow$realm().getColumnIndex(fieldName);
         try {
-            LinkView linkView = proxyState.getRow$realm().getLinkList(columnIndex);
+            OsList osList = proxyState.getRow$realm().getLinkList(columnIndex);
             //noinspection ConstantConditions
             @Nonnull
-            String className = linkView.getTargetTable().getClassName();
-            return new RealmList<>(className, linkView, proxyState.getRealm$realm());
+            String className = osList.getTargetTable().getClassName();
+            return new RealmList<>(className, osList, proxyState.getRealm$realm());
         } catch (IllegalArgumentException e) {
             checkFieldType(fieldName, columnIndex, RealmFieldType.LIST);
             throw e;
@@ -713,8 +713,8 @@ public void setList(String fieldName, RealmList<DynamicRealmObject> list) {
         }
 
         long columnIndex = proxyState.getRow$realm().getColumnIndex(fieldName);
-        LinkView links = proxyState.getRow$realm().getLinkList(columnIndex);
-        Table linkTargetTable = links.getTargetTable();
+        OsList osList = proxyState.getRow$realm().getLinkList(columnIndex);
+        Table linkTargetTable = osList.getTargetTable();
         //noinspection ConstantConditions
         @Nonnull
         final String linkTargetTableName = linkTargetTable.getClassName();
@@ -754,9 +754,9 @@ public void setList(String fieldName, RealmList<DynamicRealmObject> list) {
             indices[i] = obj.realmGet$proxyState().getRow$realm().getIndex();
         }
 
-        links.clear();
+        osList.removeAll();
         for (int i = 0; i < listLength; i++) {
-            links.add(indices[i]);
+            osList.addRow(indices[i]);
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index 00fdeb5e93..86575af28e 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -32,7 +32,7 @@
 import javax.annotation.Nullable;
 
 import io.realm.internal.InvalidRow;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.RealmObjectProxy;
 import rx.Observable;
 
@@ -66,8 +66,8 @@
     protected Class<E> clazz;
     @Nullable
     protected String className;
-    final LinkView view;
-    protected BaseRealm realm;
+    final OsList osList;
+    final protected BaseRealm realm;
     private List<E> unmanagedList;
 
     /**
@@ -79,7 +79,8 @@
      */
     public RealmList() {
         collection = null;
-        view = null;
+        osList = null;
+        realm = null;
         unmanagedList = new ArrayList<>();
     }
 
@@ -98,28 +99,29 @@ public RealmList(E... objects) {
             throw new IllegalArgumentException("The objects argument cannot be null");
         }
         collection = null;
-        view = null;
+        osList = null;
+        realm = null;
         unmanagedList = new ArrayList<>(objects.length);
         Collections.addAll(unmanagedList, objects);
     }
 
     /**
-     * Creates a RealmList from a LinkView, so its elements are managed by Realm.
+     * Creates a RealmList from a OsList, so its elements are managed by Realm.
      *
      * @param clazz type of elements in the Array.
-     * @param linkView backing LinkView.
+     * @param osList backing {@link OsList}.
      * @param realm reference to Realm containing the data.
      */
-    RealmList(Class<E> clazz, LinkView linkView, BaseRealm realm) {
-        this.collection = new io.realm.internal.Collection(realm.sharedRealm, linkView, null);
+    RealmList(Class<E> clazz, OsList osList, BaseRealm realm) {
+        this.collection = new io.realm.internal.Collection(realm.sharedRealm, osList, null);
         this.clazz = clazz;
-        this.view = linkView;
+        this.osList = osList;
         this.realm = realm;
     }
 
-    RealmList(String className, LinkView linkView, BaseRealm realm) {
-        this.collection = new io.realm.internal.Collection(realm.sharedRealm, linkView, null);
-        this.view = linkView;
+    RealmList(String className, OsList osList, BaseRealm realm) {
+        this.collection = new io.realm.internal.Collection(realm.sharedRealm, osList, null);
+        this.osList = osList;
         this.realm = realm;
         this.className = className;
     }
@@ -148,7 +150,7 @@ public boolean isManaged() {
     }
 
     private boolean isAttached() {
-        return view != null && view.isAttached();
+        return osList != null && osList.isValid();
     }
 
     /**
@@ -173,12 +175,12 @@ private boolean isAttached() {
     public void add(int location, E object) {
         checkValidObject(object);
         if (isManaged()) {
-            checkValidView();
+            checkValidRealm();
             if (location < 0 || location > size()) {
                 throw new IndexOutOfBoundsException("Invalid index " + location + ", size is " + size());
             }
             RealmObjectProxy proxy = (RealmObjectProxy) copyToRealmIfNeeded(object);
-            view.insert(location, proxy.realmGet$proxyState().getRow$realm().getIndex());
+            osList.insertRow(location, proxy.realmGet$proxyState().getRow$realm().getIndex());
         } else {
             unmanagedList.add(location, object);
         }
@@ -204,9 +206,9 @@ public void add(int location, E object) {
     public boolean add(E object) {
         checkValidObject(object);
         if (isManaged()) {
-            checkValidView();
+            checkValidRealm();
             RealmObjectProxy proxy = (RealmObjectProxy) copyToRealmIfNeeded(object);
-            view.add(proxy.realmGet$proxyState().getRow$realm().getIndex());
+            osList.addRow(proxy.realmGet$proxyState().getRow$realm().getIndex());
         } else {
             unmanagedList.add(object);
         }
@@ -236,10 +238,10 @@ public E set(int location, E object) {
         checkValidObject(object);
         E oldObject;
         if (isManaged()) {
-            checkValidView();
+            checkValidRealm();
             RealmObjectProxy proxy = (RealmObjectProxy) copyToRealmIfNeeded(object);
             oldObject = get(location);
-            view.set(location, proxy.realmGet$proxyState().getRow$realm().getIndex());
+            osList.setRow(location, proxy.realmGet$proxyState().getRow$realm().getIndex());
             return oldObject;
         } else {
             oldObject = unmanagedList.set(location, object);
@@ -255,7 +257,7 @@ private E copyToRealmIfNeeded(E object) {
             if (proxy instanceof DynamicRealmObject) {
                 //noinspection ConstantConditions
                 @Nonnull
-                String listClassName = view.getTargetTable().getClassName();
+                String listClassName = className;
                 if (proxy.realmGet$proxyState().getRealm$realm() == realm) {
                     String objectClassName = ((DynamicRealmObject) object).getType();
                     if (listClassName.equals(objectClassName)) {
@@ -307,8 +309,8 @@ private E copyToRealmIfNeeded(E object) {
      */
     public void move(int oldPos, int newPos) {
         if (isManaged()) {
-            checkValidView();
-            view.move(oldPos, newPos);
+            checkValidRealm();
+            osList.move(oldPos, newPos);
         } else {
             checkIndex(oldPos);
             checkIndex(newPos);
@@ -332,8 +334,8 @@ public void move(int oldPos, int newPos) {
     @Override
     public void clear() {
         if (isManaged()) {
-            checkValidView();
-            view.clear();
+            checkValidRealm();
+            osList.removeAll();
         } else {
             unmanagedList.clear();
         }
@@ -352,9 +354,9 @@ public void clear() {
     public E remove(int location) {
         E removedItem;
         if (isManaged()) {
-            checkValidView();
+            checkValidRealm();
             removedItem = get(location);
-            view.remove(location);
+            osList.remove(location);
         } else {
             removedItem = unmanagedList.remove(location);
         }
@@ -458,9 +460,8 @@ public boolean deleteLastFromRealm() {
     @Override
     public E get(int location) {
         if (isManaged()) {
-            checkValidView();
-            long rowIndex = view.getTargetRowIndex(location);
-            return realm.get(clazz, className, rowIndex);
+            checkValidRealm();
+            return realm.get(clazz, className, osList.getUncheckedRow(location));
         } else {
             return unmanagedList.get(location);
         }
@@ -486,8 +487,8 @@ public E first(@Nullable E defaultValue) {
     @Nullable
     private E firstImpl(boolean shouldThrow, @Nullable E defaultValue) {
         if (isManaged()) {
-            checkValidView();
-            if (!view.isEmpty()) {
+            checkValidRealm();
+            if (!osList.isEmpty()) {
                 return get(0);
             }
         } else if (unmanagedList != null && !unmanagedList.isEmpty()) {
@@ -521,9 +522,9 @@ public E last(@Nullable E defaultValue) {
     @Nullable
     private E lastImpl(boolean shouldThrow, @Nullable E defaultValue) {
         if (isManaged()) {
-            checkValidView();
-            if (!view.isEmpty()) {
-                return get((int) view.size() - 1);
+            checkValidRealm();
+            if (!osList.isEmpty()) {
+                return get((int) osList.size() - 1);
             }
         } else if (unmanagedList != null && !unmanagedList.isEmpty()) {
             return unmanagedList.get(unmanagedList.size() - 1);
@@ -582,8 +583,8 @@ private E lastImpl(boolean shouldThrow, @Nullable E defaultValue) {
     @Override
     public void deleteFromRealm(int location) {
         if (isManaged()) {
-            checkValidView();
-            view.removeTargetRow(location);
+            checkValidRealm();
+            osList.remove(location);
             modCount++;
         } else {
             throw new UnsupportedOperationException(ONLY_IN_MANAGED_MODE_MESSAGE);
@@ -599,8 +600,8 @@ public void deleteFromRealm(int location) {
     @Override
     public int size() {
         if (isManaged()) {
-            checkValidView();
-            long size = view.size();
+            checkValidRealm();
+            long size = osList.size();
             return size < Integer.MAX_VALUE ? (int) size : Integer.MAX_VALUE;
         } else {
             return unmanagedList.size();
@@ -617,7 +618,7 @@ public int size() {
     @Override
     public RealmQuery<E> where() {
         if (isManaged()) {
-            checkValidView();
+            checkValidRealm();
             return RealmQuery.createQueryFromList(this);
         } else {
             throw new UnsupportedOperationException(ONLY_IN_MANAGED_MODE_MESSAGE);
@@ -706,9 +707,9 @@ public Date minDate(String fieldName) {
     @Override
     public boolean deleteAllFromRealm() {
         if (isManaged()) {
-            checkValidView();
+            checkValidRealm();
             if (size() > 0) {
-                view.removeAllTargetRows();
+                osList.deleteAll();
                 modCount++;
                 return true;
             } else {
@@ -818,11 +819,8 @@ private void checkIndex(int location) {
         }
     }
 
-    private void checkValidView() {
+    private void checkValidRealm() {
         realm.checkIfValid();
-        if (view == null || !view.isAttached()) {
-            throw new IllegalStateException("Realm instance has been closed or this object or its parent has been deleted.");
-        }
     }
 
     /**
@@ -833,18 +831,18 @@ private void checkValidView() {
         if (!isManaged()) {
             throw new UnsupportedOperationException(ONLY_IN_MANAGED_MODE_MESSAGE);
         }
-        checkValidView();
+        checkValidRealm();
         if (className != null) {
             return new OrderedRealmCollectionSnapshot<>(
                     realm,
-                    new io.realm.internal.Collection(realm.sharedRealm, view, null),
+                    new io.realm.internal.Collection(realm.sharedRealm, osList, null),
                     className);
         } else {
             // 'clazz' is non-null when 'dynamicClassName' is null.
             //noinspection ConstantConditions
             return new OrderedRealmCollectionSnapshot<>(
                     realm,
-                    new io.realm.internal.Collection(realm.sharedRealm, view, null),
+                    new io.realm.internal.Collection(realm.sharedRealm, osList, null),
                     clazz);
         }
     }
@@ -1065,7 +1063,7 @@ public void removeAllChangeListeners() {
          */
         @Override
         public boolean hasNext() {
-            realm.checkIfValid();
+            checkValidRealm();
             checkConcurrentModification();
             return cursor != size();
         }
@@ -1075,7 +1073,7 @@ public boolean hasNext() {
          */
         @Override
         public E next() {
-            realm.checkIfValid();
+            checkValidRealm();
             checkConcurrentModification();
             int i = cursor;
             try {
@@ -1094,7 +1092,7 @@ public E next() {
          */
         @Override
         public void remove() {
-            realm.checkIfValid();
+            checkValidRealm();
             if (lastRet < 0) {
                 throw new IllegalStateException("Cannot call remove() twice. Must call next() in between.");
             }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 0f6595b146..a87ff88b7d 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -25,7 +25,7 @@
 
 import io.realm.annotations.Required;
 import io.realm.internal.Collection;
-import io.realm.internal.LinkView;
+import io.realm.internal.OsList;
 import io.realm.internal.PendingRow;
 import io.realm.internal.RealmObjectProxy;
 import io.realm.internal.Row;
@@ -61,7 +61,7 @@
     private final RealmObjectSchema schema;
     private Class<E> clazz;
     private String className;
-    private LinkView linkView;
+    private final OsList osList;
     private static final String TYPE_MISMATCH = "Field '%s': type mismatch - %s expected.";
     private static final String EMPTY_VALUES = "Non-empty 'values' must be provided.";
     private static final String ASYNC_QUERY_WRONG_THREAD_MESSAGE = "Async query cannot be created on current thread.";
@@ -116,8 +116,8 @@
     public static <E extends RealmModel> RealmQuery<E> createQueryFromList(RealmList<E> list) {
         //noinspection ConstantConditions
         return (list.clazz == null)
-                ? new RealmQuery(list.realm, list.view, list.className)
-                : new RealmQuery(list.realm, list.view, list.clazz);
+                ? new RealmQuery(list.realm, list.osList, list.className)
+                : new RealmQuery(list.realm, list.osList, list.clazz);
     }
 
     private RealmQuery(Realm realm, Class<E> clazz) {
@@ -125,7 +125,7 @@ private RealmQuery(Realm realm, Class<E> clazz) {
         this.clazz = clazz;
         this.schema = realm.getSchema().getSchemaForClass(clazz);
         this.table = schema.getTable();
-        this.linkView = null;
+        this.osList = null;
         this.query = table.where();
     }
 
@@ -134,17 +134,17 @@ private RealmQuery(RealmResults<E> queryResults, Class<E> clazz) {
         this.clazz = clazz;
         this.schema = realm.getSchema().getSchemaForClass(clazz);
         this.table = queryResults.getTable();
-        this.linkView = null;
+        this.osList = null;
         this.query = queryResults.getCollection().where();
     }
 
-    private RealmQuery(BaseRealm realm, LinkView linkView, Class<E> clazz) {
+    private RealmQuery(BaseRealm realm, OsList osList, Class<E> clazz) {
         this.realm = realm;
         this.clazz = clazz;
         this.schema = realm.getSchema().getSchemaForClass(clazz);
         this.table = schema.getTable();
-        this.linkView = linkView;
-        this.query = linkView.where();
+        this.osList = osList;
+        this.query = osList.getQuery();
     }
 
     private RealmQuery(BaseRealm realm, String className) {
@@ -153,6 +153,7 @@ private RealmQuery(BaseRealm realm, String className) {
         this.schema = realm.getSchema().getSchemaForClass(className);
         this.table = schema.getTable();
         this.query = table.where();
+        this.osList = null;
     }
 
     private RealmQuery(RealmResults<DynamicRealmObject> queryResults, String className) {
@@ -161,15 +162,16 @@ private RealmQuery(RealmResults<DynamicRealmObject> queryResults, String classNa
         this.schema = realm.getSchema().getSchemaForClass(className);
         this.table = schema.getTable();
         this.query = queryResults.getCollection().where();
+        this.osList = null;
     }
 
-    private RealmQuery(BaseRealm realm, LinkView linkView, String className) {
+    private RealmQuery(BaseRealm realm, OsList osList, String className) {
         this.realm = realm;
         this.className = className;
         this.schema = realm.getSchema().getSchemaForClass(className);
         this.table = schema.getTable();
-        this.linkView = linkView;
-        this.query = linkView.where();
+        this.query = osList.getQuery();
+        this.osList = osList;
     }
 
     /**
@@ -183,8 +185,8 @@ public boolean isValid() {
             return false;
         }
 
-        if (linkView != null) {
-            return linkView.isAttached();
+        if (osList != null) {
+            return osList.isValid();
         }
         return table != null && table.isValid();
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java b/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java
index a3d474beaf..f3a5426cdd 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/CheckedRow.java
@@ -55,19 +55,6 @@ public static CheckedRow get(NativeContext context, Table table, long index) {
         return new CheckedRow(context, table, nativeRowPointer);
     }
 
-    /**
-     * Gets the row object associated to an index in a {@link LinkView}.
-     *
-     * @param context the Realm context.
-     * @param linkView the {@link LinkView} holding the row.
-     * @param index the index of the row.
-     * @return a checked instance of {@link Row} for the {@link LinkView} and index specified.
-     */
-    public static CheckedRow get(NativeContext context, LinkView linkView, long index) {
-        long nativeRowPointer = linkView.nativeGetRow(linkView.getNativePtr(), index);
-        return new CheckedRow(context, linkView.getTargetTable(), nativeRowPointer);
-    }
-
     /**
      * Converts a {@link UncheckedRow} to a {@link CheckedRow}.
      *
@@ -144,9 +131,6 @@ public void setNull(long columnIndex) {
     @Override
     protected native byte[] nativeGetByteArray(long nativePtr, long columnIndex);
 
-    @Override
-    protected native long nativeGetLinkView(long nativePtr, long columnIndex);
-
     @Override
     protected native void nativeSetLong(long nativeRowPtr, long columnIndex, long value);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Collection.java b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
index d424302ef5..ec81feb7e9 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Collection.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
@@ -29,7 +29,7 @@
 
 /**
  * Java wrapper of Object Store Results class.
- * It is the backend of binding's query results, link lists and back links.
+ * It is the backend of binding's query results and back links.
  */
 @Keep
 public class Collection implements NativeObject {
@@ -363,16 +363,15 @@ public Collection(SharedRealm sharedRealm, TableQuery query) {
         this(sharedRealm, query, null, null);
     }
 
-    public Collection(SharedRealm sharedRealm, LinkView linkView, @Nullable SortDescriptor sortDescriptor) {
-        this.nativePtr = nativeCreateResultsFromLinkView(sharedRealm.getNativePtr(), linkView.getNativePtr(),
-                sortDescriptor);
+    public Collection(SharedRealm sharedRealm, OsList osList, @Nullable SortDescriptor sortDescriptor) {
+        this.nativePtr = nativeCreateResultsFromList(sharedRealm.getNativePtr(), osList.getNativePtr(), sortDescriptor);
 
         this.sharedRealm = sharedRealm;
         this.context = sharedRealm.context;
-        this.table = linkView.getTargetTable();
+        this.table = osList.getTargetTable();
         this.context.addReference(this);
-        // Collection created from LinkView is loaded by default. So that the listener will be triggered first time
-        // with empty change set.
+        // Collection created from OsList is loaded by default. So that the listener won't be triggered with empty
+        // change set.
         this.loaded = true;
     }
 
@@ -380,7 +379,7 @@ private Collection(SharedRealm sharedRealm, Table table, long nativePtr) {
         this(sharedRealm, table, nativePtr, false);
     }
 
-    private Collection(SharedRealm sharedRealm, Table table, long nativePtr, boolean loaded) {
+    Collection(SharedRealm sharedRealm, Table table, long nativePtr, boolean loaded) {
         this.sharedRealm = sharedRealm;
         this.context = sharedRealm.context;
         this.table = table;
@@ -526,7 +525,7 @@ private void notifyChangeListeners(long nativeChangeSetPtr) {
         // So it is possible it deliver a non-empty change set for the first async query returns. In this case, we
         // return an empty change set to user since it is considered as the first time async query returns.
         observerPairs.foreach(new Callback(nativeChangeSetPtr == 0 || !wasLoaded ?
-                null : new CollectionChangeSet(nativeChangeSetPtr)));
+                null : new OsCollectionChangeSet(nativeChangeSetPtr)));
     }
 
     public Mode getMode() {
@@ -543,7 +542,6 @@ public Mode getMode() {
     //    change set since it is considered as query first returned.
     // 3. If the listener triggered with empty change set after load() called for async queries, it is treated as the
     //    same case as 1).
-    // TODO: Results built from a LinkView has not been considered yet. Maybe it should bet set as loaded when create.
     public boolean isLoaded() {
         return loaded;
     }
@@ -560,8 +558,8 @@ public void load() {
     private static native long nativeCreateResults(long sharedRealmNativePtr, long queryNativePtr,
             @Nullable SortDescriptor sortDesc, @Nullable SortDescriptor distinctDesc);
 
-    private static native long nativeCreateResultsFromLinkView(long sharedRealmNativePtr, long linkViewPtr,
-            @Nullable SortDescriptor sortDesc);
+    private static native long nativeCreateResultsFromList(long sharedRealmPtr, long listPtr,
+                                                           @Nullable SortDescriptor sortDesc);
 
     private static native long nativeCreateSnapshot(long nativePtr);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java b/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java
index a6819bdba4..fba9493fb2 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java
@@ -105,7 +105,7 @@ public boolean isNullLink(long columnIndex) {
     }
 
     @Override
-    public LinkView getLinkList(long columnIndex) {
+    public OsList getLinkList(long columnIndex) {
         throw getStubException();
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/LinkView.java b/realm/realm-library/src/main/java/io/realm/internal/LinkView.java
deleted file mode 100644
index 2562bf88dc..0000000000
--- a/realm/realm-library/src/main/java/io/realm/internal/LinkView.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * Copyright 2014 Realm Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.realm.internal;
-
-import io.realm.RealmFieldType;
-
-
-/**
- * The LinkView class represents a core {@link RealmFieldType#LIST}.
- */
-public class LinkView implements NativeObject {
-
-    private final NativeContext context;
-    final Table parent;
-    final long columnIndexInParent;
-    private final long nativePtr;
-    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
-
-    public LinkView(NativeContext context, Table parent, long columnIndexInParent, long nativeLinkViewPtr) {
-        this.context = context;
-        this.parent = parent;
-        this.columnIndexInParent = columnIndexInParent;
-        this.nativePtr = nativeLinkViewPtr;
-
-        context.addReference(this);
-    }
-
-
-    @Override
-    public long getNativePtr() {
-        return nativePtr;
-    }
-
-    @Override
-    public long getNativeFinalizerPtr() {
-        return nativeFinalizerPtr;
-    }
-
-    /**
-     * Returns a non-checking {@link Row}. Incorrect use of this Row will cause a hard Realm Core crash (SIGSEGV).
-     * Only use this method if you are sure that input parameters are valid, otherwise use {@link #getCheckedRow(long)}
-     * which will throw appropriate exceptions if used incorrectly.
-     *
-     * @param index the index of row to fetch.
-     * @return the unsafe row wrapper object.
-     */
-    public UncheckedRow getUncheckedRow(long index) {
-        return UncheckedRow.getByRowIndex(context, this, index);
-    }
-
-    /**
-     * Returns a wrapper for {@link Row} access. All access will be error checked at the JNI layer and will throw an
-     * appropriate {@link RuntimeException} if used incorrectly.
-     * <p>
-     * If error checking is done elsewhere, consider using {@link #getUncheckedRow(long)} for better performance.
-     *
-     * @param index the index of row to fetch.
-     * @return the safe row wrapper object.
-     */
-    public CheckedRow getCheckedRow(long index) {
-        return CheckedRow.get(context, this, index);
-    }
-
-    /**
-     * Returns the row index in the underlying table.
-     */
-    public long getTargetRowIndex(long linkViewIndex) {
-        return nativeGetTargetRowIndex(nativePtr, linkViewIndex);
-    }
-
-    public void add(long rowIndex) {
-        checkImmutable();
-        nativeAdd(nativePtr, rowIndex);
-    }
-
-    public void insert(long pos, long rowIndex) {
-        checkImmutable();
-        nativeInsert(nativePtr, pos, rowIndex);
-    }
-
-    public void set(long pos, long rowIndex) {
-        checkImmutable();
-        nativeSet(nativePtr, pos, rowIndex);
-    }
-
-    public void move(long oldPos, long newPos) {
-        checkImmutable();
-        nativeMove(nativePtr, oldPos, newPos);
-    }
-
-    public void remove(long pos) {
-        checkImmutable();
-        nativeRemove(nativePtr, pos);
-    }
-
-    public void clear() {
-        checkImmutable();
-        nativeClear(nativePtr);
-    }
-
-    public boolean contains(long tableRowIndex) {
-        long index = nativeFind(nativePtr, tableRowIndex);
-        return (index != Table.NO_MATCH);
-    }
-
-    public long size() {
-        return nativeSize(nativePtr);
-    }
-
-    public boolean isEmpty() {
-        return nativeIsEmpty(nativePtr);
-    }
-
-    public TableQuery where() {
-        long nativeQueryPtr = nativeWhere(nativePtr);
-        return new TableQuery(this.context, this.getTargetTable(), nativeQueryPtr);
-    }
-
-    public boolean isAttached() {
-        return nativeIsAttached(nativePtr);
-    }
-
-    /**
-     * Removes all target rows pointed to by links in this link view, and clear this link view.
-     */
-    public void removeAllTargetRows() {
-        checkImmutable();
-        nativeRemoveAllTargetRows(nativePtr);
-    }
-
-    /**
-     * Removes target row from both the Realm and the LinkView.
-     */
-    public void removeTargetRow(int index) {
-        checkImmutable();
-        nativeRemoveTargetRow(nativePtr, index);
-    }
-
-    public Table getTargetTable() {
-        long nativeTablePointer = nativeGetTargetTable(nativePtr);
-        return new Table(this.parent, nativeTablePointer);
-    }
-
-    private void checkImmutable() {
-        if (parent.isImmutable()) {
-            throw new IllegalStateException("Changing Realm data can only be done from inside a write transaction.");
-        }
-    }
-
-    native long nativeGetRow(long nativeLinkViewPtr, long pos);
-
-    private native long nativeGetTargetRowIndex(long nativeLinkViewPtr, long linkViewIndex);
-
-    public static native void nativeAdd(long nativeLinkViewPtr, long rowIndex);
-
-    private native void nativeInsert(long nativeLinkViewPtr, long pos, long rowIndex);
-
-    private native void nativeSet(long nativeLinkViewPtr, long pos, long rowIndex);
-
-    private native void nativeMove(long nativeLinkViewPtr, long oldPos, long newPos);
-
-    private native void nativeRemove(long nativeLinkViewPtr, long pos);
-
-    public static native void nativeClear(long nativeLinkViewPtr);
-
-    private native long nativeSize(long nativeLinkViewPtr);
-
-    private native boolean nativeIsEmpty(long nativeLinkViewPtr);
-
-    protected native long nativeWhere(long nativeLinkViewPtr);
-
-    private native boolean nativeIsAttached(long nativeLinkViewPtr);
-
-    private native long nativeFind(long nativeLinkViewPtr, long targetRowIndex);
-
-    private native void nativeRemoveTargetRow(long nativeLinkViewPtr, long rowIndex);
-
-    private native void nativeRemoveAllTargetRows(long nativeLinkViewPtr);
-
-    private native long nativeGetTargetTable(long nativeLinkViewPtr);
-
-    private static native long nativeGetFinalizerPtr();
-}
diff --git a/realm/realm-library/src/main/java/io/realm/internal/CollectionChangeSet.java b/realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java
similarity index 93%
rename from realm/realm-library/src/main/java/io/realm/internal/CollectionChangeSet.java
rename to realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java
index 4470db3e4a..986c18ba6d 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/CollectionChangeSet.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsCollectionChangeSet.java
@@ -23,11 +23,11 @@
 
 /**
  * Implementation of {@link OrderedCollectionChangeSet}. This class holds a pointer to the Object Store's
- * CollectionChangeSet and read from it only when needed. Creating an Java object from JNI when the collection
+ * OsCollectionChangeSet and read from it only when needed. Creating an Java object from JNI when the collection
  * notification arrives, is avoided since we also support the collection listeners without a change set parameter,
  * parsing the change set may not be necessary all the time.
  */
-public class CollectionChangeSet implements OrderedCollectionChangeSet, NativeObject {
+public class OsCollectionChangeSet implements OrderedCollectionChangeSet, NativeObject {
 
     // Used in JNI.
     @SuppressWarnings("WeakerAccess")
@@ -44,7 +44,7 @@
     private static long finalizerPtr = nativeGetFinalizerPtr();
     private final long nativePtr;
 
-    public CollectionChangeSet(long nativePtr) {
+    public OsCollectionChangeSet(long nativePtr) {
         this.nativePtr = nativePtr;
         NativeContext.dummyContext.addReference(this);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsList.java b/realm/realm-library/src/main/java/io/realm/internal/OsList.java
new file mode 100644
index 0000000000..6346d1c141
--- /dev/null
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsList.java
@@ -0,0 +1,117 @@
+package io.realm.internal;
+
+/**
+ * Java wrapper of Object Store List class. This backs managed versions of RealmList.
+ */
+public class OsList implements NativeObject {
+
+    private final long nativePtr;
+    private final NativeContext context;
+    private final Table targetTable;
+    private static final long nativeFinalizerPtr = nativeGetFinalizerPtr();
+
+    public OsList(UncheckedRow row, long columnIndex) {
+        SharedRealm sharedRealm = row.getTable().getSharedRealm();
+        long[] ptrs = nativeCreate(sharedRealm.getNativePtr(), row.getNativePtr(), columnIndex);
+
+        this.nativePtr = ptrs[0];
+        this.context = sharedRealm.context;
+        context.addReference(this);
+
+        targetTable = new Table(sharedRealm, ptrs[1]);
+    }
+
+    @Override
+    public long getNativePtr() {
+        return nativePtr;
+    }
+
+    @Override
+    public long getNativeFinalizerPtr() {
+        return nativeFinalizerPtr;
+    }
+
+    public UncheckedRow getUncheckedRow(long index) {
+        return targetTable.getUncheckedRowByPointer(nativeGetRow(nativePtr, index));
+    }
+
+    public void addRow(long targetRowIndex) {
+        nativeAddRow(nativePtr, targetRowIndex);
+    }
+
+    public void insertRow(long pos, long targetRowIndex) {
+        nativeInsertRow(nativePtr, pos, targetRowIndex);
+    }
+
+    public void setRow(long pos, long targetRowIndex) {
+        nativeSetRow(nativePtr, pos, targetRowIndex);
+    }
+
+    public void move(long sourceIndex, long targetIndex) {
+        nativeMove(nativePtr, sourceIndex, targetIndex);
+    }
+
+    public void remove(long index) {
+        nativeRemove(nativePtr, index);
+    }
+
+    public void removeAll() {
+        nativeRemoveAll(nativePtr);
+    }
+
+    public long size() {
+        return nativeSize(nativePtr);
+    }
+
+    public boolean isEmpty() {
+        return nativeSize(nativePtr) <= 0;
+    }
+
+    /**
+     * @return a {@link TableQuery} based on this list.
+     */
+    public TableQuery getQuery() {
+        return new TableQuery(context, targetTable, nativeGetQuery(nativePtr));
+    }
+
+    public boolean isValid() {
+        return nativeIsValid(nativePtr);
+    }
+
+    public void deleteAll() {
+        nativeDeleteAll(nativePtr);
+    }
+
+    public Table getTargetTable() {
+        return targetTable;
+    }
+
+    private static native long nativeGetFinalizerPtr();
+
+    // TODO: nativeTablePtr is not necessary. It is used to create FieldDescriptor which should be generated from
+    // OsSchemaInfo.
+    // Returns {nativeListPtr, nativeTablePtr}
+    private static native long[] nativeCreate(long nativeSharedRealmPtr, long nativeRowPtr, long columnIndex);
+
+    private static native long nativeGetRow(long nativePtr, long index);
+
+    private static native void nativeAddRow(long nativePtr, long targetRowIndex);
+
+    private static native void nativeInsertRow(long nativePtr, long pos, long targetRowIndex);
+
+    private static native void nativeSetRow(long nativePtr, long pos, long targetRowIndex);
+
+    private static native void nativeMove(long nativePtr, long sourceIndex, long targetIndex);
+
+    private static native void nativeRemove(long nativePtr, long index);
+
+    private static native void nativeRemoveAll(long nativePtr);
+
+    private static native long nativeSize(long nativePtr);
+
+    private static native long nativeGetQuery(long nativePtr);
+
+    private static native boolean nativeIsValid(long nativePtr);
+
+    private static native void nativeDeleteAll(long nativePtr);
+}
diff --git a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
index 06300535b8..67c16c24b9 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
@@ -134,7 +134,7 @@ public boolean isNullLink(long columnIndex) {
     }
 
     @Override
-    public LinkView getLinkList(long columnIndex) {
+    public OsList getLinkList(long columnIndex) {
         throw new IllegalStateException(QUERY_NOT_RETURNED_MESSAGE);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Row.java b/realm/realm-library/src/main/java/io/realm/internal/Row.java
index 57f5aec868..655ef6d224 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Row.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Row.java
@@ -81,7 +81,7 @@
 
     boolean isNullLink(long columnIndex);
 
-    LinkView getLinkList(long columnIndex);
+    OsList getLinkList(long columnIndex);
 
     void setLong(long columnIndex, long value);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index cfdcd2cfa2..1ef0740dc6 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -940,8 +940,6 @@ public static String getTableNameForClass(String name) {
 
     private native long nativeGetLink(long nativePtr, long columnIndex, long rowIndex);
 
-    public static native long nativeGetLinkView(long nativePtr, long columnIndex, long rowIndex);
-
     private native long nativeGetLinkTarget(long nativePtr, long columnIndex);
 
     private native boolean nativeIsNull(long nativePtr, long columnIndex, long rowIndex);
diff --git a/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java b/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java
index 05244d0e9b..4cdf1e9712 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/UncheckedRow.java
@@ -27,8 +27,8 @@
  * Wrapper around a Row in Realm Core.
  * <p>
  * IMPORTANT: All access to methods using this class are non-checking. Safety guarantees are given by the
- * annotation processor and {@link RealmProxyMediator#validateTable(Class, SharedRealm, boolean)}
- * which is called before the typed API can be used.
+ * annotation processor and Object Store's typed Realm schema validation which is called before the typed API can be
+ * used.
  * <p>
  * For low-level access to Row data where error checking is required, use {@link CheckedRow}.
  */
@@ -90,19 +90,6 @@ static UncheckedRow getByRowPointer(NativeContext context, Table table, long nat
         return new UncheckedRow(context, table, nativeRowPointer);
     }
 
-    /**
-     * Gets the row object associated to an index in a LinkView.
-     *
-     * @param context the Realm context.
-     * @param linkView the LinkView holding the row.
-     * @param index the index of the row.
-     * @return an instance of Row for the LinkView and index specified.
-     */
-    static UncheckedRow getByRowIndex(NativeContext context, LinkView linkView, long index) {
-        long nativeRowPointer = linkView.nativeGetRow(linkView.getNativePtr(), index);
-        return new UncheckedRow(context, linkView.getTargetTable(), nativeRowPointer);
-    }
-
     @Override
     public long getColumnCount() {
         return nativeGetColumnCount(nativePtr);
@@ -186,9 +173,8 @@ public boolean isNullLink(long columnIndex) {
     }
 
     @Override
-    public LinkView getLinkList(long columnIndex) {
-        long nativeLinkViewPtr = nativeGetLinkView(nativePtr, columnIndex);
-        return new LinkView(context, parent, columnIndex, nativeLinkViewPtr);
+    public OsList getLinkList(long columnIndex) {
+        return new OsList(this, columnIndex);
     }
 
     // Setters
@@ -334,8 +320,6 @@ public boolean hasColumn(String fieldName) {
 
     protected native byte[] nativeGetByteArray(long nativePtr, long columnIndex);
 
-    protected native long nativeGetLinkView(long nativePtr, long columnIndex);
-
     protected native void nativeSetLong(long nativeRowPtr, long columnIndex, long value);
 
     protected native void nativeSetBoolean(long nativeRowPtr, long columnIndex, boolean value);
