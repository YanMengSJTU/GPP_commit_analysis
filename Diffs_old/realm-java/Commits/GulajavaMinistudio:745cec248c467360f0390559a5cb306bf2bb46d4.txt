diff --git a/CHANGELOG.md b/CHANGELOG.md
index 873b3d9c6f..7f01af61e2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,11 @@
+## 5.4.1 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* Compile time crash if no `targetSdk` was defined in Gradle. This was introduced in 5.4.0 (#6082).
+* Fix Realm Gradle Plugin adding dependencies in a way incompatible with Kotlin Android Extensions. This was introduced in Realm Java 5.4.0 (#6080).
+
+
 ## 5.4.0 (2018-07-22)
 
 ### Enhancements
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
index b566c100bc..5331cb1cd2 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/Realm.groovy
@@ -19,6 +19,7 @@ package io.realm.gradle
 import com.android.build.gradle.AppPlugin
 import com.android.build.gradle.LibraryPlugin
 import com.neenbedankt.gradle.androidapt.AndroidAptPlugin
+import io.realm.gradle.RealmPluginExtension
 import io.realm.transformer.RealmTransformer
 import org.gradle.api.GradleException
 import org.gradle.api.Plugin
@@ -47,8 +48,20 @@ class Realm implements Plugin<Project> {
         def hasAnnotationProcessorConfiguration = project.getConfigurations().findByName('annotationProcessor') != null
         // TODO add a parameter in 'realm' block if this should be specified by users
         def preferAptOnKotlinProject = false
-
+        def dependencyConfigurationName = getDependencyConfigurationName(project)
         def extension = project.extensions.create('realm', RealmPluginExtension)
+        extension.addPropertyListener(RealmPluginExtension.KEY_KOTLIN_EXTENSIONS_ENABLED, new RealmPluginExtension.PropertyChangedListener<Boolean>() {
+            @Override
+            void onChange(Boolean checked) {
+                setDependencies(project, dependencyConfigurationName, extension.syncEnabled, extension.kotlinExtensionsEnabled)
+            }
+        })
+        extension.addPropertyListener(RealmPluginExtension.KEY_SYNC_ENABLED, new RealmPluginExtension.PropertyChangedListener<Boolean>() {
+            @Override
+            void onChange(Boolean checked) {
+                setDependencies(project, dependencyConfigurationName, extension.syncEnabled, extension.kotlinExtensionsEnabled)
+            }
+        })
         extension.kotlinExtensionsEnabled = useKotlinExtensionsDefault
 
         if (shouldApplyAndroidAptPlugin(usesAptPlugin, isKotlinProject,
@@ -58,7 +71,6 @@ class Realm implements Plugin<Project> {
         }
 
         project.android.registerTransform(new RealmTransformer(project))
-        def dependencyConfigurationName = getDependencyConfigurationName(project)
 
         project.repositories.add(project.getRepositories().jcenter())
         project.dependencies.add(dependencyConfigurationName, "io.realm:realm-annotations:${Version.VERSION}")
@@ -73,10 +85,6 @@ class Realm implements Plugin<Project> {
             project.dependencies.add("annotationProcessor", "io.realm:realm-annotations-processor:${Version.VERSION}")
             project.dependencies.add("androidTestAnnotationProcessor", "io.realm:realm-annotations-processor:${Version.VERSION}")
         }
-
-        project.afterEvaluate {
-            setDependencies(project, dependencyConfigurationName, extension.syncEnabled, extension.kotlinExtensionsEnabled)
-        }
     }
 
     private static boolean isTransformAvailable() {
@@ -119,9 +127,11 @@ class Realm implements Plugin<Project> {
         return !hasAnnotationProcessorConfiguration
     }
 
+    // This will setup the required dependencies.
+    // Due to how Gradle works, we have no choice but to run this code every time any of the parameters
+    // in the Realm extension is changed.
     private static void setDependencies(Project project, String dependencyConfigurationName, boolean syncEnabled, boolean kotlinExtensionsEnabled) {
         // remove libraries first
-        
         def iterator = project.getConfigurations().getByName(dependencyConfigurationName).getDependencies().iterator()
         while (iterator.hasNext()) {
             def item = iterator.next()
diff --git a/latest b/latest
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/realm-transformer/src/main/java/io/realm/gradle/RealmPluginExtension.java b/realm-transformer/src/main/java/io/realm/gradle/RealmPluginExtension.java
index 3ec0d8ee73..a83fed35f0 100644
--- a/realm-transformer/src/main/java/io/realm/gradle/RealmPluginExtension.java
+++ b/realm-transformer/src/main/java/io/realm/gradle/RealmPluginExtension.java
@@ -18,8 +18,54 @@
 
 import org.gradle.api.tasks.Input;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 public class RealmPluginExtension {
 
-    @Input public boolean syncEnabled = false;
-    @Input public boolean kotlinExtensionsEnabled = false;
+    public static final String KEY_SYNC_ENABLED = "syncEnabled";
+    public static final String KEY_KOTLIN_EXTENSIONS_ENABLED = "kotlinExtensionsEnabled";
+
+    private boolean syncEnabled;
+    private boolean kotlinExtensionsEnabled;
+    private Map<String, PropertyChangedListener> listeners = new LinkedHashMap<>();
+
+    @Input
+    public boolean isSyncEnabled() {
+        return syncEnabled;
+    }
+
+    public void setSyncEnabled(boolean syncEnabled) {
+        this.syncEnabled = syncEnabled;
+        notifyChange(KEY_SYNC_ENABLED, syncEnabled);
+    }
+
+    @Input
+    public boolean isKotlinExtensionsEnabled() {
+        return kotlinExtensionsEnabled;
+    }
+
+    public void setKotlinExtensionsEnabled(boolean kotlinExtensionsEnabled) {
+        this.kotlinExtensionsEnabled = kotlinExtensionsEnabled;
+        notifyChange(KEY_KOTLIN_EXTENSIONS_ENABLED, kotlinExtensionsEnabled);
+    }
+
+    public void addPropertyListener(String property, PropertyChangedListener listener) {
+        listeners.put(property, listener);
+    }
+
+    private void notifyChange(String key, Object value) {
+        PropertyChangedListener listener = listeners.get(key);
+        if (listener != null) {
+            // Up to users of the API to use the correct generic type, otherwise it will crash
+            // at runtime.
+            //noinspection unchecked
+            listener.onChange(value);
+        }
+    }
+
+    // Callback triggered when the extension property is changed
+    public interface PropertyChangedListener<T> {
+        void onChange(T value);
+    }
 }
diff --git a/realm-transformer/src/main/java/io/realm/transformer/Utils.java b/realm-transformer/src/main/java/io/realm/transformer/Utils.java
index 1357940076..042fe7c6eb 100644
--- a/realm-transformer/src/main/java/io/realm/transformer/Utils.java
+++ b/realm-transformer/src/main/java/io/realm/transformer/Utils.java
@@ -63,24 +63,9 @@ public static String hexStringify(byte[] data) {
         return stringBuilder.toString();
     }
 
-    public static String getTargetSdk(Project project) {
-        return getAndroidExtension(project).getDefaultConfig().getTargetSdkVersion().getApiString();
-    }
-
-    public static String getMinSdk(Project project) {
-        return getAndroidExtension(project).getDefaultConfig().getMinSdkVersion().getApiString();
-    }
-
     public static boolean isSyncEnabled(Project project) {
         RealmPluginExtension realmExtension = (RealmPluginExtension) project.getExtensions().findByName("realm");
-        return realmExtension != null && realmExtension.syncEnabled;
+        return realmExtension != null && realmExtension.isSyncEnabled();
     }
 
-    public static List<File> getBootClasspath(Project project) {
-        return getAndroidExtension(project).getBootClasspath();
-    }
-
-    private static BaseExtension getAndroidExtension(Project project) {
-        return (BaseExtension) project.getExtensions().getByName("android");
-    }
 }
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt
index 3ee6c117dd..74efc31a08 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/RealmTransformer.kt
@@ -20,6 +20,8 @@ import com.android.build.api.transform.*
 import io.realm.transformer.build.FullBuild
 import io.realm.transformer.build.IncrementalBuild
 import io.realm.transformer.build.BuildTemplate
+import io.realm.transformer.ext.getMinSdk
+import io.realm.transformer.ext.getTargetSdk
 import javassist.CtClass
 import org.gradle.api.Project
 import org.slf4j.Logger
@@ -123,41 +125,46 @@ class RealmTransformer(val project: Project) : Transform() {
      * @param inputModelClasses a list of ctClasses describing the Realm models
      */
     private fun sendAnalytics(inputs: Collection<TransformInput>, outputModelClasses: Set<CtClass>) {
-        val disableAnalytics: Boolean = "true".equals(System.getenv()["REALM_DISABLE_ANALYTICS"])
-        if (inputs.isEmpty() || disableAnalytics) {
-            // Don't send analytics for incremental builds or if they have ben explicitly disabled.
-            return
-        }
+        try {
+            val disableAnalytics: Boolean = "true".equals(System.getenv()["REALM_DISABLE_ANALYTICS"], ignoreCase = true)
+            if (inputs.isEmpty() || disableAnalytics) {
+                // Don't send analytics for incremental builds or if they have been explicitly disabled.
+                return
+            }
 
-        var containsKotlin = false
-
-        outer@
-        for(input: TransformInput in inputs) {
-            for (di: DirectoryInput in input.directoryInputs) {
-                val path: String = di.file.absolutePath
-                val index: Int = path.indexOf("build${File.separator}intermediates${File.separator}classes")
-                if (index != -1) {
-                    val projectPath: String = path.substring(0, index)
-                    val buildFile = File(projectPath + "build.gradle")
-                    if (buildFile.exists() && buildFile.readText().contains("kotlin")) {
-                        containsKotlin = true
-                        break@outer
+            var containsKotlin = false
+
+            outer@
+            for(input: TransformInput in inputs) {
+                for (di: DirectoryInput in input.directoryInputs) {
+                    val path: String = di.file.absolutePath
+                    val index: Int = path.indexOf("build${File.separator}intermediates${File.separator}classes")
+                    if (index != -1) {
+                        val projectPath: String = path.substring(0, index)
+                        val buildFile = File(projectPath + "build.gradle")
+                        if (buildFile.exists() && buildFile.readText().contains("kotlin")) {
+                            containsKotlin = true
+                            break@outer
+                        }
                     }
                 }
             }
-        }
 
-        val packages: Set<String> = outputModelClasses.map {
-            it.packageName
-        }.toSet()
+            val packages: Set<String> = outputModelClasses.map {
+                it.packageName
+            }.toSet()
 
-        val targetSdk: String? = Utils.getTargetSdk(project)
-        val minSdk: String?  = Utils.getMinSdk(project)
+            val targetSdk: String? = project.getTargetSdk()
+            val minSdk: String?  = project.getMinSdk()
 
-        if (!disableAnalytics) {
-            val sync: Boolean = Utils.isSyncEnabled(project)
-            val analytics = RealmAnalytics(packages, containsKotlin, sync, targetSdk, minSdk)
-            analytics.execute()
+            if (!disableAnalytics) {
+                val sync: Boolean = Utils.isSyncEnabled(project)
+                val analytics = RealmAnalytics(packages, containsKotlin, sync, targetSdk, minSdk)
+                analytics.execute()
+            }
+        } catch (e: Exception) {
+            // Analytics failing for any reason should not crash the build
+            logger.debug("Could not send analytics: $e")
         }
     }
 
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt
index 3e7c1e9d09..0a73198128 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/build/BuildTemplate.kt
@@ -25,6 +25,7 @@ import io.realm.transformer.BytecodeModifier
 import io.realm.transformer.ManagedClassPool
 import io.realm.transformer.logger
 import io.realm.transformer.Utils
+import io.realm.transformer.ext.getBootClasspath
 import javassist.ClassPool
 import javassist.CtClass
 import org.gradle.api.Project
@@ -147,7 +148,7 @@ abstract class BuildTemplate(val project: Project, val outputProvider: Transform
      */
     private fun addBootClassesToClassPool(classPool: ClassPool) {
         try {
-            Utils.getBootClasspath(project).forEach {
+            project.getBootClasspath().forEach {
                 val path: String = it.absolutePath
                 logger.debug("Add boot class $path to class pool.")
                 classPool.appendClassPath(path)
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/ext/CtClassExt.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/ext/CtClassExt.kt
index 24a8511672..6a0a106674 100644
--- a/realm-transformer/src/main/kotlin/io/realm/transformer/ext/CtClassExt.kt
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/ext/CtClassExt.kt
@@ -1,3 +1,18 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package io.realm.transformer.ext
 
 import javassist.CtClass
diff --git a/realm-transformer/src/main/kotlin/io/realm/transformer/ext/ProjectExt.kt b/realm-transformer/src/main/kotlin/io/realm/transformer/ext/ProjectExt.kt
new file mode 100644
index 0000000000..d33fc33e98
--- /dev/null
+++ b/realm-transformer/src/main/kotlin/io/realm/transformer/ext/ProjectExt.kt
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.transformer.ext
+
+import com.android.build.gradle.BaseExtension
+import org.gradle.api.Project
+import java.io.File
+
+/**
+ * Returns the `targetSdk` property for this project if it is available.
+ */
+fun Project.getTargetSdk(): String? {
+    return getAndroidExtension(this).defaultConfig?.targetSdkVersion?.apiString
+}
+
+/**
+ * Returns the `minSdk` property for this project if it is available.
+ */
+fun Project.getMinSdk(): String? {
+    return getAndroidExtension(this).defaultConfig?.minSdkVersion?.apiString
+}
+
+/**
+ * Returns the `bootClasspath` for this project
+ */
+fun Project.getBootClasspath(): List<File> {
+    return getAndroidExtension(this).bootClasspath ?: listOf()
+}
+
+private fun getAndroidExtension(project: Project): BaseExtension {
+    // This will always be present, otherwise the android build would not be able to
+    // trigger the transformer code in the first place.
+    return project.extensions.getByName("android") as BaseExtension
+}
