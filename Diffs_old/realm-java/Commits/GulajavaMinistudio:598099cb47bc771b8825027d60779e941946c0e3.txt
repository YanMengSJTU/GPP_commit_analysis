diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8a1d5f036f..7e83ab4b78 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -11,6 +11,23 @@
 ### Credits
 
 
+## 4.1.1 (YYYY-MM-DD)
+
+### Breaking Changes
+
+### Enhancements
+
+### Bug Fixes
+
+* Fixed the compile warnings of using deprecated method `RealmProxyMediator.getTableName()` in generated mediator classes (#5455).
+
+### Interal
+
+* Updated Realm Sync to 2.1.0
+
+### Credits
+
+
 ## 4.1.0 (2017-10-20)
 
 ### Enhancements
diff --git a/dependencies.list b/dependencies.list
index 198c90ffc8..49ad30bacb 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,9 +1,9 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=2.0.2
-REALM_SYNC_SHA256=33c9dace6dc280712101110895d38509bbca74fdb31ba31b61dc0ad383472b03
+REALM_SYNC_VERSION=2.1.0
+REALM_SYNC_SHA256=cd52b2ee53ef80b4b9ec80eede7ca5fa28a96353ad7e4d26cf516dbb12586966
 
 # Object Server Release used by Integration tests. Installed using NPM.
 # Use `npm view realm-object-server versions` to get a list of available versions.
-REALM_OBJECT_SERVER_DE_VERSION=2.0.4
+REALM_OBJECT_SERVER_DE_VERSION=2.0.6
 
diff --git a/examples/build.gradle b/examples/build.gradle
index f2c813c27f..17d9a57116 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -23,7 +23,7 @@ allprojects {
             maven { url 'https://jitpack.io' }
         }
         dependencies {
-            classpath 'com.android.tools.build:gradle:3.0.0-beta7'
+            classpath 'com.android.tools.build:gradle:3.0.0-rc2'
             classpath 'com.novoda:gradle-android-command-plugin:1.7.1'
             classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
             classpath "io.realm:realm-gradle-plugin:${currentVersion}"
diff --git a/examples/gradle.properties b/examples/gradle.properties
index 3cae06226c..69f84662c3 100644
--- a/examples/gradle.properties
+++ b/examples/gradle.properties
@@ -3,3 +3,11 @@ org.gradle.caching=true
 
 # disable AAPT2 to work around an issue of Robolectric in unitTestExample https://github.com/robolectric/robolectric/issues/3169
 android.enableAapt2=false
+
+# Gradle sync failed: Due to a limitation of Gradleâ€™s new variant-aware dependency management, loading the Android Gradle plugin in different class loaders leads to a build error.
+# This can occur when the buildscript classpaths that contain the Android Gradle plugin in sub-projects, or included projects in the case of composite builds, are set differently.
+# To resolve this issue, add the Android Gradle plugin to only the buildscript classpath of the top-level build.gradle file.
+# In the case of composite builds, also make sure the build script classpaths that contain the Android Gradle plugin are identical across the main and included projects.
+# If you are using a version of Gradle that has fixed the issue, you can disable this check by setting android.enableBuildScriptClasspathCheck=false in the gradle.properties file.
+# To learn more about this issue, go to https://d.android.com/r/tools/buildscript-classpath-check.html.
+android.enableBuildScriptClasspathCheck=false
\ No newline at end of file
diff --git a/library-benchmarks/build.gradle b/library-benchmarks/build.gradle
index 8b58216363..6d48a2410e 100644
--- a/library-benchmarks/build.gradle
+++ b/library-benchmarks/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.0-beta7'
+        classpath 'com.android.tools.build:gradle:3.0.0-rc2'
         classpath "io.realm:realm-gradle-plugin:${file("${rootDir}/../version.txt").text.trim()}"
     }
 }
diff --git a/realm/build.gradle b/realm/build.gradle
index 3c49834f42..87890bb6a3 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -9,7 +9,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.0-beta7'
+        classpath 'com.android.tools.build:gradle:3.0.0-rc2'
         classpath 'de.undercouch:gradle-download-task:3.2.0'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
         classpath 'com.novoda:gradle-android-command-plugin:1.7.1'
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Constants.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Constants.java
index fbce99063d..0c6d09306c 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Constants.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Constants.java
@@ -26,7 +26,6 @@
     public static final String PROXY_SUFFIX = "RealmProxy";
     public static final String INTERFACE_SUFFIX = "RealmProxyInterface";
     public static final String INDENT = "    ";
-    public static final String TABLE_PREFIX = "class_";
     public static final String DEFAULT_MODULE_CLASS_NAME = "DefaultRealmModule";
     static final String STATEMENT_EXCEPTION_ILLEGAL_NULL_VALUE =
             "throw new IllegalArgumentException(\"Trying to set non-nullable field '%s' to null.\")";
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index 71bb69b86e..fcb035547e 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -144,7 +144,7 @@ public void generate() throws IOException, UnsupportedOperationException {
         emitCreateExpectedObjectSchemaInfo(writer);
         emitGetExpectedObjectSchemaInfo(writer);
         emitCreateColumnInfoMethod(writer);
-        emitGetTableNameMethod(writer);
+        emitGetSimpleClassNameMethod(writer);
         emitGetFieldNamesMethod(writer);
         emitCreateOrUpdateUsingJsonObject(writer);
         emitCreateUsingJsonStream(writer);
@@ -833,9 +833,9 @@ private void emitCreateColumnInfoMethod(JavaWriter writer) throws IOException {
     }
 
     //@formatter:off
-    private void emitGetTableNameMethod(JavaWriter writer) throws IOException {
-        writer.beginMethod("String", "getTableName", EnumSet.of(Modifier.PUBLIC, Modifier.STATIC))
-                .emitStatement("return \"%s%s\"", Constants.TABLE_PREFIX, simpleClassName)
+    private void emitGetSimpleClassNameMethod(JavaWriter writer) throws IOException {
+        writer.beginMethod("String", "getSimpleClassName", EnumSet.of(Modifier.PUBLIC, Modifier.STATIC))
+                .emitStatement("return \"%s\"", simpleClassName)
                 .endMethod()
                 .emitEmptyLine();
     }
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
index bd4476fc9f..4e1a89aba5 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
@@ -80,7 +80,6 @@ public void generate() throws IOException {
                 "io.realm.internal.RealmObjectProxy",
                 "io.realm.internal.RealmProxyMediator",
                 "io.realm.internal.Row",
-                "io.realm.internal.Table",
                 "io.realm.internal.OsSchemaInfo",
                 "io.realm.internal.OsObjectSchemaInfo",
                 "org.json.JSONException",
@@ -101,7 +100,7 @@ public void generate() throws IOException {
         emitGetExpectedObjectSchemaInfoMap(writer);
         emitCreateColumnInfoMethod(writer);
         emitGetFieldNamesMethod(writer);
-        emitGetTableNameMethod(writer);
+        emitGetSimpleClassNameMethod(writer);
         emitNewInstanceMethod(writer);
         emitGetClassModelList(writer);
         emitCopyToRealmMethod(writer);
@@ -187,18 +186,18 @@ public void emitStatement(int i, JavaWriter writer) throws IOException {
         writer.emitEmptyLine();
     }
 
-    private void emitGetTableNameMethod(JavaWriter writer) throws IOException {
+    private void emitGetSimpleClassNameMethod(JavaWriter writer) throws IOException {
         writer.emitAnnotation("Override");
         writer.beginMethod(
                 "String",
-                "getTableName",
+                "getSimpleClassNameImpl",
                 EnumSet.of(Modifier.PUBLIC),
                 "Class<? extends RealmModel>", "clazz"
         );
         emitMediatorShortCircuitSwitch(new ProxySwitchStatement() {
             @Override
             public void emitStatement(int i, JavaWriter writer) throws IOException {
-                writer.emitStatement("return %s.getTableName()", qualifiedProxyClasses.get(i));
+                writer.emitStatement("return %s.getSimpleClassName()", qualifiedProxyClasses.get(i));
             }
         }, writer);
         writer.endMethod();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
index 0a20dd36a9..0c429a8dec 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
@@ -890,8 +890,8 @@ public static AllTypesColumnInfo createColumnInfo(OsSchemaInfo schemaInfo) {
         return new AllTypesColumnInfo(schemaInfo);
     }
 
-    public static String getTableName() {
-        return "class_AllTypes";
+    public static String getSimpleClassName() {
+        return "AllTypes";
     }
 
     public static List<String> getFieldNames() {
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
index fa4b8282c7..28beeb3ebb 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
@@ -208,8 +208,8 @@ public static BooleansColumnInfo createColumnInfo(OsSchemaInfo schemaInfo) {
         return new BooleansColumnInfo(schemaInfo);
     }
 
-    public static String getTableName() {
-        return "class_Booleans";
+    public static String getSimpleClassName() {
+        return "Booleans";
     }
 
     public static List<String> getFieldNames() {
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
index 020e091216..65562e6d8e 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
@@ -1750,8 +1750,8 @@ public static NullTypesColumnInfo createColumnInfo(OsSchemaInfo schemaInfo) {
         return new NullTypesColumnInfo(schemaInfo);
     }
 
-    public static String getTableName() {
-        return "class_NullTypes";
+    public static String getSimpleClassName() {
+        return "NullTypes";
     }
 
     public static List<String> getFieldNames() {
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
index 72344ed633..c8f0dc1849 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
@@ -9,7 +9,6 @@
 import io.realm.internal.RealmProxyMediator;
 import io.realm.internal.Row;
 import io.realm.internal.SharedRealm;
-import io.realm.internal.Table;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
@@ -61,11 +60,11 @@ public ColumnInfo createColumnInfo(Class<? extends RealmModel> clazz, OsSchemaIn
     }
 
     @Override
-    public String getTableName(Class<? extends RealmModel> clazz) {
+    public String getSimpleClassNameImpl(Class<? extends RealmModel> clazz) {
         checkClass(clazz);
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            return io.realm.AllTypesRealmProxy.getTableName();
+            return io.realm.AllTypesRealmProxy.getSimpleClassName();
         }
         throw getMissingProxyClassException(clazz);
     }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
index 9266f2c253..150ca08c9c 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
@@ -162,8 +162,8 @@ public static SimpleColumnInfo createColumnInfo(OsSchemaInfo schemaInfo) {
         return new SimpleColumnInfo(schemaInfo);
     }
 
-    public static String getTableName() {
-        return "class_Simple";
+    public static String getSimpleClassName() {
+        return "Simple";
     }
 
     public static List<String> getFieldNames() {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
index 08fda9f32b..84b0cfc9b5 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/PrimaryKeyTests.java
@@ -85,7 +85,7 @@ private Table getTableWithIntegerPrimaryKey() {
         sharedRealm = SharedRealm.getInstance(config);
         sharedRealm.beginTransaction();
         OsObjectStore.setSchemaVersion(sharedRealm,0); // Create meta table
-        Table t = sharedRealm.createTable(Table.getTableNameForClass("class_TestTable"));
+        Table t = sharedRealm.createTable(Table.getTableNameForClass("TestTable"));
         long column = t.addColumn(RealmFieldType.INTEGER, "colName");
         t.addSearchIndex(column);
         OsObjectStore.setPrimaryKeyForObject(sharedRealm, "TestTable", "colName");
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index b416d9ac98..136b3a32a2 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit b416d9ac9893aa1b36f0a4c0c2d6533e78fe5060
+Subproject commit 136b3a32a218f50275f1183ed078b31945a9e29f
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index c4da704041..90415531b0 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -161,7 +161,7 @@ private Realm(RealmCache cache) {
             RealmProxyMediator mediator = configuration.getSchemaMediator();
             Set<Class<? extends RealmModel>> classes = mediator.getModelClasses();
             for (Class<? extends RealmModel> clazz  : classes) {
-                String tableName = mediator.getTableName(clazz);
+                String tableName = Table.getTableNameForClass(mediator.getSimpleClassName(clazz));
                 if (!sharedRealm.hasTable(tableName)) {
                     sharedRealm.close();
                     throw new RealmMigrationNeededException(configuration.getPath(),
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index 9830514072..bd789c569f 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -182,7 +182,9 @@ Table getTable(Class<? extends RealmModel> clazz) {
             table = classToTable.get(originalClass);
         }
         if (table == null) {
-            table = realm.getSharedRealm().getTable(realm.getConfiguration().getSchemaMediator().getTableName(originalClass));
+            String tableName = Table.getTableNameForClass(
+                    realm.getConfiguration().getSchemaMediator().getSimpleClassName(originalClass));
+            table = realm.getSharedRealm().getTable(tableName);
             classToTable.put(originalClass, table);
         }
         if (isProxyClass(originalClass, clazz)) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java b/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
index b0f2bd15f4..98f47c2485 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
@@ -100,7 +100,7 @@ public ColumnInfo getColumnInfo(String simpleClassName) {
         if (columnInfo == null) {
             Set<Class<? extends RealmModel>> modelClasses = mediator.getModelClasses();
             for (Class<? extends RealmModel> modelClass : modelClasses) {
-                if (Table.getClassNameForTable(mediator.getTableName(modelClass)).equals(simpleClassName)) {
+                if (mediator.getSimpleClassName(modelClass).equals(simpleClassName)) {
                     columnInfo = getColumnInfo(modelClass);
                     simpleClassNameToColumnInfoMap.put(simpleClassName, columnInfo);
                     break;
diff --git a/realm/realm-library/src/main/java/io/realm/internal/RealmProxyMediator.java b/realm/realm-library/src/main/java/io/realm/internal/RealmProxyMediator.java
index 7bc1a37072..188a6f96b2 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/RealmProxyMediator.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/RealmProxyMediator.java
@@ -69,28 +69,24 @@
     public abstract List<String> getFieldNames(Class<? extends RealmModel> clazz);
 
     /**
-     * Returns the name that Realm should use for all its internal tables. This is the un-obfuscated name of the
-     * class with the Realm table prefix.
+     * Returns the name that Realm should use for all its internal tables. This is the un-obfuscated simple name of the
+     * class.
      *
-     * @param clazz the {@link RealmObject} class reference.
-     * @return the simple name of an RealmObject class (before it has been obfuscated) with Realm table prefix.
-     * @throws java.lang.NullPointerException if null is given as argument.
-     * @deprecated use {{@link #getSimpleClassName(Class)}} instead.
+     * @param clazz the {@link RealmModel} or the Realm object proxy class reference.
+     * @return the simple name of an RealmObject class (before it has been obfuscated).
      */
-    @Deprecated
-    public abstract String getTableName(Class<? extends RealmModel> clazz);
+    public final String getSimpleClassName(Class<? extends RealmModel> clazz) {
+        return getSimpleClassNameImpl(Util.getOriginalModelClass(clazz));
+    }
 
     /**
      * Returns the name that Realm should use for all its internal tables. This is the un-obfuscated simple name of the
      * class.
      *
-     * @param clazz the {@link RealmObject} class reference.
+     * @param clazz the {@link RealmModel} class reference.
      * @return the simple name of an RealmObject class (before it has been obfuscated).
      */
-    public String getSimpleClassName(Class<? extends RealmModel> clazz) {
-        Class<? extends RealmModel> originalClass = Util.getOriginalModelClass(clazz);
-        return Table.getClassNameForTable(getTableName(originalClass));
-    }
+    protected abstract String getSimpleClassNameImpl(Class<? extends RealmModel> clazz);
 
     /**
      * Creates a new instance of an {@link RealmObjectProxy} for the given RealmObject class.
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index b68bab8ab0..0135e69f60 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -699,9 +699,6 @@ public static String getClassNameForTable(@Nullable String name) {
     public static String getTableNameForClass(String name) {
         //noinspection ConstantConditions
         if (name == null) { return null; }
-        if (name.startsWith(TABLE_PREFIX)) {
-            return name;
-        }
         return TABLE_PREFIX + name;
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/modules/CompositeMediator.java b/realm/realm-library/src/main/java/io/realm/internal/modules/CompositeMediator.java
index 390ad0104a..08df441f79 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/modules/CompositeMediator.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/modules/CompositeMediator.java
@@ -83,9 +83,9 @@ public ColumnInfo createColumnInfo(Class<? extends RealmModel> clazz, OsSchemaIn
     }
 
     @Override
-    public String getTableName(Class<? extends RealmModel> clazz) {
+    protected String getSimpleClassNameImpl(Class<? extends RealmModel> clazz) {
         RealmProxyMediator mediator = getMediator(clazz);
-        return mediator.getTableName(clazz);
+        return mediator.getSimpleClassName(clazz);
     }
 
     @Override
diff --git a/realm/realm-library/src/main/java/io/realm/internal/modules/FilterableMediator.java b/realm/realm-library/src/main/java/io/realm/internal/modules/FilterableMediator.java
index e2d3c99e22..ef9fb5654c 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/modules/FilterableMediator.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/modules/FilterableMediator.java
@@ -98,9 +98,9 @@ public ColumnInfo createColumnInfo(Class<? extends RealmModel> clazz, OsSchemaIn
     }
 
     @Override
-    public String getTableName(Class<? extends RealmModel> clazz) {
+    protected String getSimpleClassNameImpl(Class<? extends RealmModel> clazz) {
         checkSchemaHasClass(clazz);
-        return originalMediator.getTableName(clazz);
+        return originalMediator.getSimpleClassName(clazz);
     }
 
     @Override
diff --git a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
index 446a32b57b..9aab07578b 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/ErrorCode.java
@@ -25,6 +25,7 @@
 
     // See Client::Error in https://github.com/realm/realm-sync/blob/master/src/realm/sync/client.hpp
     // See https://github.com/realm/realm-object-server/blob/master/object-server/doc/problems.md
+    // See https://github.com/realm/realm-sync/blob/develop/src/realm/sync/protocol.hpp
 
     // Realm Java errors (0-49)
     UNKNOWN(-1),                                // Catch-all
@@ -73,6 +74,7 @@
     DIVERGING_HISTORIES(211),                       // Diverging histories (IDENT)
     BAD_CHANGESET(212),                             // Bad changeset (UPLOAD)
     DISABLED_SESSION(213),                          // Disabled session
+    PARTIAL_SYNC_DISABLED(214),                     // Partial sync disabled (BIND)
 
     // 300 - 599 Reserved for Standard HTTP error codes
     MULTIPLE_CHOICES(300),
diff --git a/tools/sync_test_server/Dockerfile b/tools/sync_test_server/Dockerfile
index 4a79c0f023..c4f792b11c 100644
--- a/tools/sync_test_server/Dockerfile
+++ b/tools/sync_test_server/Dockerfile
@@ -1,4 +1,4 @@
-FROM node:6.11.2 
+FROM node:6.11.4
 
 ARG ROS_DE_VERSION
 
