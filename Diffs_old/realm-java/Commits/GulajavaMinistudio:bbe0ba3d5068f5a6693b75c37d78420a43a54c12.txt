diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8f9d91f8e2..5aee64320e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -10,6 +10,15 @@
 
 ### Internal
 
+## 3.1.3 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* `equals()` and `hashCode()` of managed `RealmObject`s that come from linking objects don't work correctly (#4487).
+
+### Internal
+
+* Upgraded to Realm Sync 1.5.2.
 
 ## 3.1.2 (2017-04-12)
 
diff --git a/dependencies.list b/dependencies.list
index 408853f4de..9d4d44080f 100644
--- a/dependencies.list
+++ b/dependencies.list
@@ -1,7 +1,7 @@
 # Realm Sync Core release used by Realm Java
 # https://github.com/realm/realm-sync/releases
-REALM_SYNC_VERSION=1.5.0
-REALM_SYNC_SHA256=2da0de557182e7d717d74808bf6d3f1e5f18d5c082744d29b96dca80555733a7
+REALM_SYNC_VERSION=1.5.2
+REALM_SYNC_SHA256=e7a0134b5b69c5a571e3f49901bb8d8ca634b166873c5a422909e7d2016a00e7
 
 # Object Server Release used by Integration tests
 # `realm` is stable releases, `realm-testing` is developer builds.
diff --git a/examples/secureTokenAndroidKeyStore/build.gradle b/examples/secureTokenAndroidKeyStore/build.gradle
index b523a941c8..a15da443ce 100644
--- a/examples/secureTokenAndroidKeyStore/build.gradle
+++ b/examples/secureTokenAndroidKeyStore/build.gradle
@@ -30,7 +30,7 @@ dependencies {
     })
     compile 'com.android.support:appcompat-v7:25.2.0'
     testCompile 'junit:junit:4.12'
-    compile 'io.realm:android-secure-userstore:1.0.0'
+    compile 'io.realm:secure-userstore:1.0.1'
 }
 
 realm {
diff --git a/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java b/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java
index c4b618b704..67d71fee30 100644
--- a/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java
+++ b/examples/secureTokenAndroidKeyStore/src/main/java/io/realm/examples/securetokenandroidkeystore/MainActivity.java
@@ -30,24 +30,24 @@
 import java.security.KeyStoreException;
 import java.util.UUID;
 
-import io.realm.android.CipherClient;
-import io.realm.android.SecureUserStore;
+import io.realm.Realm;
+import io.realm.SyncConfiguration;
+import io.realm.SyncManager;
 import io.realm.SyncUser;
 import io.realm.android.SecureUserStore;
-import io.realm.SyncManager;
-import io.realm.SyncConfiguration;
-import io.realm.Realm;
-import io.realm.internal.objectserver.Token;
 import io.realm.internal.objectserver.ObjectServerUser;
+import io.realm.internal.objectserver.Token;
 
 /**
  * Activity responsible of unlocking the KeyStore
- * before using the {@link realm.io.android.SecureUserStore} to encrypt
+ * before using the {@link io.realm.android.SecureUserStore} to encrypt
  * the Token we get from the session
  */
 public class MainActivity extends AppCompatActivity {
-    private CipherClient cryptoClient;
     private TextView txtKeystoreState;
+
+    private SecureUserStore secureUserStore;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -55,12 +55,14 @@ protected void onCreate(Bundle savedInstanceState) {
         txtKeystoreState = (TextView) findViewById(R.id.txtLabelKeyStore);
 
         try {
-            cryptoClient = new CipherClient(this);
-            if (cryptoClient.isKeystoreUnlocked()) {
+            secureUserStore = new SecureUserStore(this);
+            SyncManager.setUserStore(secureUserStore);
+
+            if (secureUserStore.isKeystoreUnlocked()) {
                 buildSyncConf();
                 keystoreUnlockedMessage();
             } else {
-                cryptoClient.unlockKeystore();
+                secureUserStore.unlockKeystore();
             }
         } catch (KeyStoreException e) {
             e.printStackTrace();
@@ -72,11 +74,11 @@ protected void onResume() {
         super.onResume();
         try {
             // We return to the app after the KeyStore is unlocked or not.
-            if (cryptoClient.isKeystoreUnlocked()) {
+            if (secureUserStore.isKeystoreUnlocked()) {
                 buildSyncConf();
-                keystoreUnlockedMessage ();
+                keystoreUnlockedMessage();
             } else {
-                keystoreLockedMessage ();
+                keystoreLockedMessage();
             }
         } catch (KeyStoreException e) {
             e.printStackTrace();
@@ -84,27 +86,22 @@ protected void onResume() {
     }
 
     // build SyncConfiguration with a user store to store encrypted Token.
-    private void buildSyncConf () {
-        try {
-            SyncManager.setUserStore(new SecureUserStore(MainActivity.this));
-            // the rest of Sync logic ...
-            SyncUser user = createTestUser(0);
-            String url = "realm://objectserver.realm.io/default";
-            SyncConfiguration secureConfig = new SyncConfiguration.Builder(user, url).build();
-            Realm realm = Realm.getInstance(secureConfig);
-            // ... 
-
-        } catch (KeyStoreException e) {
-            e.printStackTrace();
-        }
+    private void buildSyncConf() {
+        // the rest of Sync logic ...
+        SyncUser user = createTestUser(Long.MAX_VALUE);
+        String url = "realm://objectserver.realm.io/default";
+        SyncConfiguration secureConfig = new SyncConfiguration.Builder(user, url).build();
+        Realm realm = Realm.getInstance(secureConfig);
+        // ...
     }
+
     // Helpers
     private final static String USER_TOKEN = UUID.randomUUID().toString();
     private final static String REALM_TOKEN = UUID.randomUUID().toString();
 
     private static SyncUser createTestUser(long expires) {
         Token userToken = new Token(USER_TOKEN, "JohnDoe", null, expires, null);
-        Token accessToken = new Token(REALM_TOKEN, "JohnDoe", "/foo", expires, new Token.Permission[] {Token.Permission.DOWNLOAD });
+        Token accessToken = new Token(REALM_TOKEN, "JohnDoe", "/foo", expires, new Token.Permission[]{Token.Permission.DOWNLOAD});
         ObjectServerUser.AccessDescription desc = new ObjectServerUser.AccessDescription(accessToken, "/data/data/myapp/files/default", false);
 
         JSONObject obj = new JSONObject();
@@ -124,12 +121,12 @@ private static SyncUser createTestUser(long expires) {
         }
     }
 
-    private void keystoreLockedMessage () {
+    private void keystoreLockedMessage() {
         txtKeystoreState.setBackgroundColor(ContextCompat.getColor(this, R.color.colorLocked));
         txtKeystoreState.setText(R.string.locked_text);
     }
 
-    private void keystoreUnlockedMessage () {
+    private void keystoreUnlockedMessage() {
         txtKeystoreState.setBackgroundColor(ContextCompat.getColor(this, R.color.colorActivated));
         txtKeystoreState.setText(R.string.unlocked_text);
     }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
index 9c75ee8629..b06320925c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsManagedTests.java
@@ -151,6 +151,22 @@ public void basic_multipleReferencesFromParentList() {
         assertEquals(parent, child.getListParents().last());
     }
 
+    // This test reproduces https://github.com/realm/realm-java/issues/4487
+    @Test
+    public void issue4487_checkIfTableIsCorrect() {
+        realm.beginTransaction();
+        final BacklinksTarget target = realm.createObject(BacklinksTarget.class);
+        target.setId(1);
+        final BacklinksSource source = realm.createObject(BacklinksSource.class);
+        source.setChild(target);
+        realm.commitTransaction();
+
+        final RealmResults<BacklinksSource> parents = target.getParents();
+        final BacklinksSource sourceFromBacklinks = parents.first();
+
+        assertEquals(source, sourceFromBacklinks);
+    }
+
     // A listener registered on the backlinked object should not be called after the listener is removed
     @Test
     @RunTestInLooperThread
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
index ca9baad7ef..bfa10d391f 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
@@ -17,7 +17,7 @@
 #include "io_realm_internal_TableQuery.h"
 
 #include <realm.hpp>
-#include <realm/group_shared.hpp>
+#include <realm/query_expression.hpp>
 
 #include <shared_realm.hpp>
 #include <object_store.hpp>
diff --git a/realm/realm-library/src/main/cpp/util.hpp b/realm/realm-library/src/main/cpp/util.hpp
index c0ec632f62..11d6a91cc4 100644
--- a/realm/realm-library/src/main/cpp/util.hpp
+++ b/realm/realm-library/src/main/cpp/util.hpp
@@ -29,7 +29,6 @@
 #include <realm.hpp>
 #include <realm/lang_bind_helper.hpp>
 #include <realm/timestamp.hpp>
-#include <realm/util/meta.hpp>
 #include <realm/util/safe_int_ops.hpp>
 
 #include <util/format.hpp>
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Collection.java b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
index d8d7830bcd..bfe8ccaeeb 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Collection.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
@@ -335,7 +335,7 @@ public static Collection createBacklinksCollection(SharedRealm realm, UncheckedR
                 row.getNativePtr(),
                 srcTable.getNativePtr(),
                 srcTable.getColumnIndex(srcFieldName));
-        return new Collection(realm, row.getTable(), backlinksPtr, true);
+        return new Collection(realm, srcTable, backlinksPtr, true);
     }
 
     public Collection(SharedRealm sharedRealm, TableQuery query,
