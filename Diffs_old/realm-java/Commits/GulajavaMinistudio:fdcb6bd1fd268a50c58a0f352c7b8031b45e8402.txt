diff --git a/CHANGELOG.md b/CHANGELOG.md
index 246247198a..46411e8f0d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -13,6 +13,7 @@
   * Migration for linking objects is not yet supported.
   * Backlink verification is incomplete.  Evil code can cause native crashes.
 * [ObjectServer] In case of a Client Reset, information about the location of the backed up Realm file is now reported through the `ErrorHandler` interface (#4080).
+* [ObjectServer] Authentication URLs now automatically append `/auth` if no other path segment is set (#4370).
 
 ### Bug Fixes
 
@@ -37,6 +38,7 @@
 * Fixed a potential cause for Realm file corruptions (never reported).
 * Add `@Override` annotation to proxy class accessors and stop using raw type in proxy classes in order to remove warnings from javac (#4329).
 * `findFirstAsync()` now returns an invalid object if there is no object matches the query condition instead of running the query repeatedly until it can find one (#4352).
+* [ObjectServer] Changing the log level after starting a session now works correctly (#4337).
 
 ### Deprecated
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmLogTests.java b/realm/realm-library/src/androidTest/java/io/realm/log/RealmLogTests.java
similarity index 74%
rename from realm/realm-library/src/androidTest/java/io/realm/RealmLogTests.java
rename to realm/realm-library/src/androidTest/java/io/realm/log/RealmLogTests.java
index c10ebbbb5b..8584214176 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmLogTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/log/RealmLogTests.java
@@ -1,4 +1,4 @@
-package io.realm;
+package io.realm.log;
 
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
@@ -7,10 +7,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import io.realm.log.LogLevel;
-import io.realm.log.RealmLog;
+import io.realm.Realm;
+import io.realm.TestHelper;
 
 import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNull;
 import static junit.framework.Assert.assertTrue;
 
@@ -27,10 +28,8 @@ public void add_remove() {
         TestHelper.TestLogger testLogger = new TestHelper.TestLogger();
         RealmLog.add(testLogger);
         RealmLog.fatal("TEST");
-        assertEquals("TEST", testLogger.message);
         RealmLog.remove(testLogger);
         RealmLog.fatal("TEST_AGAIN");
-        assertEquals("TEST", testLogger.message);
     }
 
     @Test
@@ -91,4 +90,23 @@ public void throwable_passedToTheJavaLogger() {
         assertTrue(testLogger.message.contains("RealmLogTests.java"));
         RealmLog.remove(testLogger);
     }
+
+    @Test
+    public void coreLoggerBridge() {
+        TestHelper.TestLogger testLogger = new TestHelper.TestLogger();
+        RealmLog.setLevel(LogLevel.INFO);
+        RealmLog.add(testLogger);
+
+        long ptr = RealmLog.nativeCreateCoreLoggerBridge("TEST");
+        RealmLog.nativeLogToCoreLoggerBridge(ptr, LogLevel.INFO, "42");
+        assertTrue(testLogger.message.equals("42"));
+
+        RealmLog.setLevel(LogLevel.FATAL);
+        RealmLog.nativeLogToCoreLoggerBridge(ptr, LogLevel.INFO, "44");
+        assertTrue(testLogger.message.equals("42"));
+        assertFalse(testLogger.message.equals("44"));
+        RealmLog.nativeLogToCoreLoggerBridge(ptr, LogLevel.FATAL, "45");
+        assertTrue(testLogger.message.equals("45"));
+        RealmLog.nativeCloseCoreLoggerBridge(ptr);
+    }
 }
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
index 3e2c69544c..0f4fa8b0b9 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java
@@ -36,6 +36,7 @@
 
 import io.realm.internal.network.AuthenticateResponse;
 import io.realm.internal.network.AuthenticationServer;
+import io.realm.log.RealmLog;
 import io.realm.rule.RunInLooperThread;
 import io.realm.util.SyncTestUtils;
 
@@ -213,4 +214,35 @@ public void login_withAccessToken() {
             SyncManager.setAuthServerImpl(originalServer);
         }
     }
+
+    // Checks that `/auth` is correctly added to any URL without a path
+    @Test
+    public void login_appendAuthSegment() {
+        AuthenticationServer authServer = Mockito.mock(AuthenticationServer.class);
+        AuthenticationServer originalServer = SyncManager.getAuthServer();
+        SyncManager.setAuthServerImpl(authServer);
+        String[][] urls = {
+                {"http://ros.realm.io", "http://ros.realm.io/auth"},
+                {"http://ros.realm.io:8080", "http://ros.realm.io:8080/auth"},
+                {"http://ros.realm.io/", "http://ros.realm.io/"},
+                {"http://ros.realm.io/?foo=bar", "http://ros.realm.io/?foo=bar"},
+                {"http://ros.realm.io/auth", "http://ros.realm.io/auth"},
+                {"http://ros.realm.io/auth/", "http://ros.realm.io/auth/"},
+                {"http://ros.realm.io/custom-path/", "http://ros.realm.io/custom-path/"}
+        };
+
+        try {
+            for (String[] url : urls) {
+                RealmLog.error(url[0]);
+                String input = url[0];
+                String normalizedInput = url[1];
+                SyncCredentials credentials = SyncCredentials.accessToken("token", UUID.randomUUID().toString());
+                SyncUser user = SyncUser.login(credentials, input);
+                assertEquals(normalizedInput, user.getAuthenticationUrl().toString());
+                user.logout();
+            }
+        } finally {
+            SyncManager.setAuthServerImpl(originalServer);
+        }
+    }
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp b/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp
index bb9d1dab0d..2e80fe147e 100644
--- a/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_SyncManager.cpp
@@ -47,10 +47,10 @@ struct AndroidClientListener : public realm::BindingCallbackThreadObserver {
 } s_client_thread_listener;
 
 struct AndroidSyncLoggerFactory : public realm::SyncLoggerFactory {
-    std::unique_ptr<util::Logger> make_logger(Logger::Level level) override
+    // The level param is ignored. Use the global RealmLog.setLevel() to control all log levels.
+    std::unique_ptr<util::Logger> make_logger(Logger::Level) override
     {
         auto logger = std::make_unique<CoreLoggerBridge>(std::string("REALM_SYNC"));
-        logger->set_level_threshold(level);
         // Cast to std::unique_ptr<util::Logger>
         return std::move(logger);
     }
diff --git a/realm/realm-library/src/main/cpp/io_realm_log_RealmLog.cpp b/realm/realm-library/src/main/cpp/io_realm_log_RealmLog.cpp
index d18455b97b..4c6a16a095 100644
--- a/realm/realm-library/src/main/cpp/io_realm_log_RealmLog.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_log_RealmLog.cpp
@@ -82,3 +82,22 @@ JNIEXPORT jint JNICALL Java_io_realm_log_RealmLog_nativeGetLogLevel(JNIEnv* env,
 
     return static_cast<jint>(Log::Level::all);
 }
+
+// Methods for testing only.
+JNIEXPORT jlong JNICALL Java_io_realm_log_RealmLog_nativeCreateCoreLoggerBridge(JNIEnv* env, jclass, jstring tag)
+{
+    return reinterpret_cast<jlong>(new CoreLoggerBridge(JStringAccessor(env, tag)));
+}
+
+JNIEXPORT void JNICALL Java_io_realm_log_RealmLog_nativeCloseCoreLoggerBridge(JNIEnv*, jclass, jlong native_ptr)
+{
+    delete reinterpret_cast<CoreLoggerBridge*>(native_ptr);
+}
+
+JNIEXPORT void JNICALL Java_io_realm_log_RealmLog_nativeLogToCoreLoggerBridge(JNIEnv* env, jclass, jlong native_ptr,
+                                                                              jint level, jstring msg)
+{
+    CoreLoggerBridge* bridge = reinterpret_cast<CoreLoggerBridge*>(native_ptr);
+    std::string message = JStringAccessor(env, msg);
+    bridge->log(Log::convert_to_core_log_level(static_cast<Log::Level>(level)), message.c_str());
+}
diff --git a/realm/realm-library/src/main/cpp/jni_util/log.cpp b/realm/realm-library/src/main/cpp/jni_util/log.cpp
index d8b804549d..c90a4d5e25 100644
--- a/realm/realm-library/src/main/cpp/jni_util/log.cpp
+++ b/realm/realm-library/src/main/cpp/jni_util/log.cpp
@@ -16,6 +16,8 @@
 
 #include <algorithm>
 
+#include <realm/util/assert.hpp>
+
 #include "jni_util/log.hpp"
 
 using namespace realm;
@@ -24,6 +26,8 @@ using namespace realm::util;
 
 const char* Log::REALM_JNI_TAG = "REALM_JNI";
 Log::Level Log::s_level = Log::Level::warn;
+std::vector<CoreLoggerBridge*> CoreLoggerBridge::s_bridges;
+std::mutex CoreLoggerBridge::s_mutex;
 
 // Native wrapper for Java RealmLogger class
 class JavaLogger : public JniLogger {
@@ -157,6 +161,7 @@ void Log::clear_loggers()
 void Log::set_level(Level level)
 {
     s_level = level;
+    CoreLoggerBridge::set_levels(level);
 }
 
 void Log::log(Level level, const char* tag, jthrowable throwable, const char* message)
@@ -169,6 +174,53 @@ void Log::log(Level level, const char* tag, jthrowable throwable, const char* me
     }
 }
 
+realm::util::RootLogger::Level Log::convert_to_core_log_level(Level level)
+{
+        switch (level) {
+            case Log::trace:
+                return RootLogger::Level::trace;
+            case Log::debug:
+                return RootLogger::Level::debug;
+            case Log::info:
+                return RootLogger::Level::info;
+            case Log::warn:
+                return RootLogger::Level::warn;
+            case Log::error:
+                return RootLogger::Level::error;
+            case Log::fatal:
+                return RootLogger::Level::fatal;
+            case Log::all:
+                return RootLogger::Level::all;
+            case Log::off:
+                return RootLogger::Level::off;
+            default:
+                break;
+        }
+        REALM_UNREACHABLE();
+}
+
+CoreLoggerBridge::CoreLoggerBridge(std::string tag)
+    : m_tag(std::move(tag))
+{
+    std::lock_guard<std::mutex> lock(s_mutex);
+    s_bridges.push_back(this);
+    set_level_threshold(Log::convert_to_core_log_level(Log::shared().get_level()));
+}
+
+CoreLoggerBridge::~CoreLoggerBridge()
+{
+    std::lock_guard<std::mutex> lock(s_mutex);
+    s_bridges.erase(std::remove(s_bridges.begin(), s_bridges.end(), this), s_bridges.end());
+}
+
+void CoreLoggerBridge::set_levels(Log::Level level)
+{
+    std::lock_guard<std::mutex> lock(s_mutex);
+    for (auto bridge : s_bridges) {
+        bridge->set_level_threshold(Log::convert_to_core_log_level(level));
+    }
+}
+
 void CoreLoggerBridge::do_log(realm::util::Logger::Level level, std::string msg)
 {
     // Ignore the level threshold from the root logger.
diff --git a/realm/realm-library/src/main/cpp/jni_util/log.hpp b/realm/realm-library/src/main/cpp/jni_util/log.hpp
index d138f287d2..98cc58d1c9 100644
--- a/realm/realm-library/src/main/cpp/jni_util/log.hpp
+++ b/realm/realm-library/src/main/cpp/jni_util/log.hpp
@@ -142,6 +142,8 @@ class Log {
         shared().log(fatal, REALM_JNI_TAG, nullptr, _impl::format(fmt, {_impl::Printable(args)...}).c_str());
     }
 
+    static realm::util::RootLogger::Level convert_to_core_log_level(Level level);
+
     // Get the shared Log instance.
     static Log& shared();
 
@@ -178,13 +180,26 @@ class JniLogger {
 // Implement this function to return the default logger which will be registered during initialization.
 extern std::shared_ptr<JniLogger> get_default_logger();
 
+// Do NOT call set_level_threshold on the bridge to set the log level. Instead, call the Log::set_level which will
+// set all logger levels.
 class CoreLoggerBridge : public realm::util::RootLogger {
 public:
-    CoreLoggerBridge(std::string tag) : m_tag(std::move(tag)) {}
+    CoreLoggerBridge(std::string tag);
+    ~CoreLoggerBridge();
+    CoreLoggerBridge(CoreLoggerBridge&&) = delete;
+    CoreLoggerBridge(CoreLoggerBridge&) = delete;
+    CoreLoggerBridge operator=(CoreLoggerBridge&&) = delete;
+    CoreLoggerBridge operator=(CoreLoggerBridge&) = delete;
     void do_log(Logger::Level, std::string msg) override;
 
 private:
+    // Set log level for all logger bridges.
+    static void set_levels(Log::Level level);
+    friend class Log;
+
     const std::string m_tag;
+    static std::vector<CoreLoggerBridge*> s_bridges;
+    static std::mutex s_mutex;
 };
 
 } // namespace jni_util
diff --git a/realm/realm-library/src/main/cpp/util.cpp b/realm/realm-library/src/main/cpp/util.cpp
index a2f4516ede..75e2598b12 100644
--- a/realm/realm-library/src/main/cpp/util.cpp
+++ b/realm/realm-library/src/main/cpp/util.cpp
@@ -43,9 +43,6 @@ jclass java_lang_string;
 jmethodID java_lang_double_init;
 jclass java_util_date;
 jmethodID java_util_date_init;
-#if REALM_ENABLE_SYNC
-jclass java_syncmanager;
-#endif
 
 void ThrowRealmFileException(JNIEnv* env, const std::string& message, realm::RealmFileException::Kind kind);
 
diff --git a/realm/realm-library/src/main/cpp/util.hpp b/realm/realm-library/src/main/cpp/util.hpp
index 76378a8e42..c0ec632f62 100644
--- a/realm/realm-library/src/main/cpp/util.hpp
+++ b/realm/realm-library/src/main/cpp/util.hpp
@@ -703,9 +703,6 @@ extern jclass java_lang_string;
 extern jmethodID java_lang_double_init;
 extern jclass java_util_date;
 extern jmethodID java_util_date_init;
-#if REALM_ENABLE_SYNC
-extern jclass java_syncmanager;
-#endif
 
 inline jobject NewLong(JNIEnv* env, int64_t value)
 {
diff --git a/realm/realm-library/src/main/java/io/realm/log/RealmLog.java b/realm/realm-library/src/main/java/io/realm/log/RealmLog.java
index 984a06f2c0..e24211efca 100644
--- a/realm/realm-library/src/main/java/io/realm/log/RealmLog.java
+++ b/realm/realm-library/src/main/java/io/realm/log/RealmLog.java
@@ -298,4 +298,11 @@ private static void log(int level, Throwable throwable, String message, Object..
     private static native void nativeSetLogLevel(int level);
 
     private static native int nativeGetLogLevel();
+
+    // Methods below are used for testing core logger bridge only.
+    static native long nativeCreateCoreLoggerBridge(String tag);
+
+    static native void nativeCloseCoreLoggerBridge(long nativePtr);
+
+    static native void nativeLogToCoreLoggerBridge(long nativePtr, int level, String message);
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
index 899411cd70..734ad92d99 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncUser.java
@@ -172,9 +172,13 @@ public static SyncUser fromJson(String user) {
      * @throws IllegalArgumentException if the URL is malformed.
      */
     public static SyncUser login(final SyncCredentials credentials, final String authenticationUrl) throws ObjectServerError {
-        final URL authUrl;
+        URL authUrl;
         try {
             authUrl = new URL(authenticationUrl);
+            // If no path segment is provided append `/auth` which is the standard location.
+            if (authUrl.getPath().equals("")) {
+                authUrl = new URL(authUrl.toString() + "/auth");
+            }
         } catch (MalformedURLException e) {
             throw new IllegalArgumentException("Invalid URL " + authenticationUrl + ".", e);
         }
