diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7b5246a1e0..3798d92c4d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,7 @@
 ### Enhancements
 
 * [ObjectServer] Added `SyncSession.uploadAllLocalChanges()`.
+* Added `Nullable` annotation to methods that may return `null` in order to improve Kotlin usability. This also introduced a dependency to `com.google.code.findbugs:jsr305`.
 
 ### Bug Fixes
 
diff --git a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
index d54d096e1f..2250531f34 100644
--- a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
+++ b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
@@ -97,7 +97,7 @@ class KotlinExampleActivity : Activity() {
         }
 
         // Find the first person (no query conditions) and read a field
-        val person = realm.where(Person::class.java).findFirst()
+        val person = realm.where(Person::class.java).findFirst()!!
         showStatus(person.name + ": " + person.age)
 
         // Update person in a transaction
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 42d6918d5c..8d25175534 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -170,6 +170,7 @@ dependencies {
     compileOnly 'com.google.code.findbugs:findbugs-annotations:3.0.1'
 
     api "io.realm:realm-annotations:${version}"
+    implementation 'com.google.code.findbugs:jsr305:3.0.2'
     implementation 'com.getkeepsafe.relinker:relinker:1.2.2'
 
     kaptObjectServer project(':realm-annotations-processor')
@@ -178,7 +179,6 @@ dependencies {
     kaptAndroidTest project(':realm-annotations-processor')
     androidTestImplementation fileTree(dir: 'testLibs', include: ['*.jar'])
     androidTestImplementation 'io.reactivex:rxjava:1.1.0'
-    androidTestImplementation 'com.android.support:support-annotations:25.3.1'
     androidTestImplementation 'com.android.support.test:runner:0.5'
     androidTestImplementation 'com.android.support.test:rules:0.5'
     androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
diff --git a/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt b/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt
index b851ab45dc..7948a10918 100644
--- a/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt
+++ b/realm/realm-library/src/androidTest/kotlin/io/realm/KotlinSchemaTests.kt
@@ -50,7 +50,7 @@ class KotlinSchemaTests {
 
     @Test
     fun kotlinTypeNonNull() {
-        val objSchema = realm.getSchema().get(AllKotlinTypes::class.simpleName)
+        val objSchema = realm.getSchema().get(AllKotlinTypes::class.simpleName)!!
 
         // Document current nullability. Ideally all should be non-nullable. This is currently
         // not the case.
diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
index edc6f6abf0..4fc0411ea0 100644
--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java
@@ -19,6 +19,8 @@
 import java.util.Date;
 import java.util.Locale;
 
+import javax.annotation.Nullable;
+
 import io.realm.exceptions.RealmException;
 import io.realm.internal.CheckedRow;
 import io.realm.internal.LinkView;
@@ -317,6 +319,7 @@ public Date getDate(String fieldName) {
      * @return the {@link DynamicRealmObject} representation of the linked object or {@code null} if no object is linked.
      * @throws IllegalArgumentException if field name doesn't exist or it doesn't contain links to other objects.
      */
+    @Nullable
     public DynamicRealmObject getObject(String fieldName) {
         proxyState.getRealm$realm().checkIfValid();
 
diff --git a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
index b8725ec8e8..9311c9c88b 100644
--- a/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
+++ b/realm/realm-library/src/main/java/io/realm/OrderedRealmCollectionImpl.java
@@ -7,6 +7,8 @@
 import java.util.ListIterator;
 import java.util.Locale;
 
+import javax.annotation.Nullable;
+
 import io.realm.internal.Collection;
 import io.realm.internal.InvalidRow;
 import io.realm.internal.RealmObjectProxy;
@@ -353,6 +355,7 @@ public Number max(String fieldName) {
      * @throws IllegalArgumentException if fieldName is not a Date field.
      */
     @Override
+    @Nullable
     public Date maxDate(String fieldName) {
         realm.checkIfValid();
         long columnIndex = getColumnIndexForSort(fieldName);
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index f8357eb3c7..42e4b05e9c 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -46,6 +46,8 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import javax.annotation.Nullable;
+
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmFileException;
 import io.realm.exceptions.RealmMigrationNeededException;
@@ -343,6 +345,7 @@ public static void setDefaultConfiguration(RealmConfiguration configuration) {
      *
      * @return default configuration object or {@code null} if no default configuration is specified.
      */
+    @Nullable
     public static RealmConfiguration getDefaultConfiguration() {
         synchronized (defaultConfigurationLock) {
             return defaultConfiguration;
@@ -706,6 +709,7 @@ private static void initializeRealm(Realm realm) {
      * {@link RealmObjectSchema} has a {@link io.realm.annotations.PrimaryKey} defined.
      * @see #createOrUpdateObjectFromJson(Class, org.json.JSONObject)
      */
+    @Nullable
     public <E extends RealmModel> E createObjectFromJson(Class<E> clazz, JSONObject json) {
         if (clazz == null || json == null) {
             return null;
@@ -759,6 +763,7 @@ private static void initializeRealm(Realm realm) {
      * @throws IllegalArgumentException if the JSON object doesn't have a primary key property but the corresponding
      * {@link RealmObjectSchema} has a {@link io.realm.annotations.PrimaryKey} defined.
      */
+    @Nullable
     public <E extends RealmModel> E createObjectFromJson(Class<E> clazz, String json) {
         if (clazz == null || json == null || json.length() == 0) {
             return null;
@@ -822,6 +827,7 @@ private static void initializeRealm(Realm realm) {
      * {@link RealmObjectSchema} has a {@link io.realm.annotations.PrimaryKey} defined.
      * @throws IOException if something went wrong with the input stream.
      */
+    @Nullable
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public <E extends RealmModel> E createObjectFromJson(Class<E> clazz, InputStream inputStream) throws IOException {
         if (clazz == null || inputStream == null) {
@@ -1723,6 +1729,7 @@ Table getTable(Class<? extends RealmModel> clazz) {
      * @return newly created indices information for current schema version. Or {@code null} if {@code globalCacheArray}
      * already contains the entry for current schema version.
      */
+    @Nullable
     ColumnIndices updateSchemaCache(ColumnIndices[] globalCacheArray) {
         final long currentSchemaVersion = sharedRealm.getSchemaVersion();
         final long cacheSchemaVersion = schema.getSchemaVersion();
@@ -1769,6 +1776,7 @@ ColumnIndices updateSchemaCache(ColumnIndices[] globalCacheArray) {
      * @throws RealmException if unable to create an instance of the module.
      * @see io.realm.RealmConfiguration.Builder#modules(Object, Object...)
      */
+    @Nullable
     public static Object getDefaultModule() {
         String moduleName = "io.realm.DefaultRealmModule";
         Class<?> clazz;
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCache.java b/realm/realm-library/src/main/java/io/realm/RealmCache.java
index 0b06a24e31..90e4a9e8f2 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCache.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCache.java
@@ -32,6 +32,8 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import javax.annotation.Nullable;
+
 import io.realm.exceptions.RealmFileException;
 import io.realm.internal.Capabilities;
 import io.realm.internal.ColumnIndices;
@@ -616,6 +618,7 @@ static int getLocalThreadCount(RealmConfiguration configuration) {
      * @param schemaVersion requested version of the schema.
      * @return {@link ColumnIndices} instance for specified schema version. {@code null} if not found.
      */
+    @Nullable
     static ColumnIndices findColumnIndices(ColumnIndices[] array, long schemaVersion) {
         for (int i = array.length - 1; 0 <= i; i--) {
             final ColumnIndices candidate = array[i];
diff --git a/realm/realm-library/src/main/java/io/realm/RealmCollection.java b/realm/realm-library/src/main/java/io/realm/RealmCollection.java
index 30dbd66c0d..c36b73c25a 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmCollection.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmCollection.java
@@ -20,6 +20,8 @@
 import java.util.Collections;
 import java.util.Date;
 
+import javax.annotation.Nullable;
+
 import io.realm.internal.ManagableObject;
 
 
@@ -54,6 +56,7 @@
      * @throws java.lang.IllegalArgumentException if the field is not a number type.
      * @throws java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.
      */
+    @Nullable
     Number min(String fieldName);
 
     /**
@@ -66,6 +69,7 @@
      * @throws java.lang.IllegalArgumentException if the field is not a number type.
      * @throws java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.
      */
+    @Nullable
     Number max(String fieldName);
 
     /**
@@ -102,6 +106,7 @@
      * @throws java.lang.IllegalArgumentException if fieldName is not a Date field.
      * @throws java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.
      */
+    @Nullable
     Date maxDate(String fieldName);
 
     /**
@@ -115,6 +120,7 @@
      * @throws java.lang.IllegalArgumentException if fieldName is not a Date field.
      * @throws java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.
      */
+    @Nullable
     Date minDate(String fieldName);
 
     /**
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 49b4e77fa4..5a42c5ed61 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -21,6 +21,8 @@
 import java.util.Date;
 import java.util.Locale;
 
+import javax.annotation.Nullable;
+
 import io.realm.annotations.Required;
 import io.realm.internal.Collection;
 import io.realm.internal.LinkView;
@@ -1642,6 +1644,7 @@ public double average(String fieldName) {
      * values are ignored.
      * @throws java.lang.IllegalArgumentException if the field is not a number type.
      */
+    @Nullable
     public Number min(String fieldName) {
         realm.checkIfValid();
 
@@ -1668,6 +1671,7 @@ public Number min(String fieldName) {
      * {@code null} values are ignored.
      * @throws java.lang.UnsupportedOperationException if the query is not valid ("syntax error").
      */
+    @Nullable
     public Date minimumDate(String fieldName) {
         realm.checkIfValid();
 
@@ -1684,6 +1688,7 @@ public Date minimumDate(String fieldName) {
      * values are ignored.
      * @throws java.lang.IllegalArgumentException if the field is not a number type.
      */
+    @Nullable
     public Number max(String fieldName) {
         realm.checkIfValid();
 
@@ -1710,6 +1715,7 @@ public Number max(String fieldName) {
      * {@code null} values are ignored.
      * @throws java.lang.UnsupportedOperationException if the query is not valid ("syntax error").
      */
+    @Nullable
     public Date maximumDate(String fieldName) {
         realm.checkIfValid();
 
@@ -1909,6 +1915,7 @@ private boolean isDynamicQuery() {
      * @return the object found or {@code null} if no object matches the query conditions.
      * @see io.realm.RealmObject
      */
+    @Nullable
     public E findFirst() {
         realm.checkIfValid();
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmSchema.java b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
index d7096b3fbf..bfeb031e88 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmSchema.java
@@ -21,6 +21,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import javax.annotation.Nullable;
+
 import io.realm.internal.ColumnIndices;
 import io.realm.internal.ColumnInfo;
 import io.realm.internal.Table;
@@ -72,6 +74,7 @@ public void close() {
      * @param className name of the class
      * @return schema object for that class or {@code null} if the class doesn't exists.
      */
+    @Nullable
     public RealmObjectSchema get(String className) {
         checkEmpty(className, EMPTY_STRING_MSG);
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java b/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
index fffc7a65e8..70b2696bd6 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ColumnIndices.java
@@ -19,6 +19,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import javax.annotation.Nullable;
+
 import io.realm.RealmModel;
 import io.realm.internal.util.Pair;
 
@@ -109,6 +111,7 @@ public long getSchemaVersion() {
      * @param clazz the class for which to get the ColumnInfo.
      * @return the corresponding {@link ColumnInfo} object, or {@code null} if not found.
      */
+    @Nullable
     public ColumnInfo getColumnInfo(Class<? extends RealmModel> clazz) {
         return classes.get(clazz);
     }
@@ -119,6 +122,7 @@ public ColumnInfo getColumnInfo(Class<? extends RealmModel> clazz) {
      * @param className the simple name of the class for which to get the ColumnInfo.
      * @return the corresponding {@link ColumnInfo} object, or {@code null} if not found.
      */
+    @Nullable
     public ColumnInfo getColumnInfo(String className) {
         return classesByName.get(className);
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java b/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java
index 29ac82eb1c..41be8169eb 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/ColumnInfo.java
@@ -19,6 +19,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import javax.annotation.Nullable;
+
 import io.realm.RealmFieldType;
 
 
@@ -145,8 +147,9 @@ public RealmFieldType getColumnType(String columnName) {
     /**
      * Returns the table linked in the described table, to the named column.
      *
-     * @return the class name of the linked table, or null if the column is a primitive type.
+     * @return the class name of the linked table, or {@code null} if the column is a primitive type.
      */
+    @Nullable
     public String getLinkedTable(String columnName) {
         ColumnDetails details = indicesMap.get(columnName);
         return (details == null) ? null : details.linkTable;
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Table.java b/realm/realm-library/src/main/java/io/realm/internal/Table.java
index c50f674eba..1b2c92e1b0 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Table.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Table.java
@@ -18,6 +18,8 @@
 
 import java.util.Date;
 
+import javax.annotation.Nullable;
+
 import io.realm.RealmFieldType;
 import io.realm.exceptions.RealmException;
 import io.realm.exceptions.RealmPrimaryKeyConstraintException;
@@ -766,8 +768,9 @@ public long upperBoundLong(long columnIndex, long value) {
     /**
      * Returns the table name as it is in the associated group.
      *
-     * @return Name of the the table or null if it not part of a group.
+     * @return Name of the the table or {@code null} if it not part of a group.
      */
+    @Nullable
     public String getName() {
         return nativeGetName(nativePtr);
     }
@@ -775,8 +778,9 @@ public String getName() {
     /**
      * Returns the class name for the table.
      *
-     * @return Name of the the table or null if it not part of a group.
+     * @return Name of the the table or {@code null} if it not part of a group.
      */
+    @Nullable
     public String getClassName() {
         return getClassNameForTable(getName());
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/android/JsonUtils.java b/realm/realm-library/src/main/java/io/realm/internal/android/JsonUtils.java
index 0e46e4c077..455bb9cfaa 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/android/JsonUtils.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/android/JsonUtils.java
@@ -24,6 +24,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import javax.annotation.Nullable;
+
 import io.realm.exceptions.RealmException;
 
 
@@ -39,9 +41,10 @@
      * - "/Date(<long>[+-Zone])/"
      *
      * @param date the String input of date of the the supported types.
-     * @return the Date object or null if invalid input.
+     * @return the Date object or {@code null} if invalid input.
      * @throws NumberFormatException if date is not a proper long or has an illegal format.
      */
+    @Nullable
     public static Date stringToDate(String date) {
         if (date == null || date.length() == 0) { return null; }
 
