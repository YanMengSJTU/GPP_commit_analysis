diff --git a/CHANGELOG.md b/CHANGELOG.md
index ab23a1a016..8f9d91f8e2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -11,35 +11,23 @@
 ### Internal
 
 
-## 3.1.2 (YYYY-MM-DD)
-
-### Deprecated
-
-### Enhancements
+## 3.1.2 (2017-04-12)
 
 ### Bug Fixes
 
 * Crash caused by JNI couldn't find `OsObject.notifyChangeListeners` when ProGuard is enabled (#4461).
 * Incompatible return type of `RealmSchema.getAll()` and `BaseRealm.getSchema()` (#4443).
-
-### Internal
-
+* Memory leaked when synced Realm was initialized (#4465).
+* An `IllegalStateException` will be thrown when starting iterating `OrderedRealmCollection` if the Realm is closed (#4471).
 
 ## 3.1.1 (2017-04-07)
 
-### Deprecated
-
-### Enhancements
-
 ### Bug Fixes
 
 * Crash caused by Listeners on `RealmObject` getting triggered the 2nd time with different changed field (#4437).
 * Unintentionally exposing `StandardRealmSchema` (#4443).
 * Workaround for crashes on specific Samsung devices which are caused by a buggy `memmove` call (#3651).
 
-### Internal
-
-
 ## 3.1.0 (2017-04-05)
 
 ### Breaking Changes
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
index e9c7a2d0f1..2592c5f664 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
@@ -486,6 +486,14 @@ public void onChange(Collection element) {
         addRowAsync();
     }
 
+    @Test
+    public void collectionIterator_newInstance_throwsWhenSharedRealmIsClosed() {
+        final Collection collection = new Collection(sharedRealm, table.where());
+        sharedRealm.close();
+        thrown.expect(IllegalStateException.class);
+        new TestIterator(collection);
+    }
+
     @Test
     public void getMode() {
         Collection collection = new Collection(sharedRealm, table.where());
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java
index fde073a78c..c735e2dcf1 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/SharedRealmTests.java
@@ -53,7 +53,9 @@ public void setUp() {
 
     @After
     public void tearDown() {
-        sharedRealm.close();
+        if (sharedRealm != null) {
+            sharedRealm.close();
+        }
     }
 
     @Test
@@ -100,6 +102,13 @@ public void isInTransaction() {
         assertFalse(sharedRealm.isInTransaction());
     }
 
+    @Test
+    public void isInTransaction_returnFalseWhenRealmClosed() {
+        sharedRealm.close();
+        assertFalse(sharedRealm.isInTransaction());
+        sharedRealm = null;
+    }
+
     @Test
     public void removeTable() {
         sharedRealm.beginTransaction();
@@ -231,4 +240,19 @@ public void onSchemaVersionChanged(long currentVersion) {
         assertTrue(listenerCalled.get());
         assertEquals(before + 1, schemaVersionFromListener.get());
     }
+
+    @Test
+    public void isClosed() {
+        sharedRealm.close();
+        assertTrue(sharedRealm.isClosed());
+        sharedRealm = null;
+    }
+
+    @Test
+    public void close_twice() {
+        sharedRealm.close();
+        sharedRealm.close();
+        assertTrue(sharedRealm.isClosed());
+        sharedRealm = null;
+    }
 }
diff --git a/realm/realm-library/src/main/cpp/io_realm_OsRealmObjectSchema.cpp b/realm/realm-library/src/main/cpp/io_realm_OsRealmObjectSchema.cpp
index bbbcbe2879..c3a954c8f1 100644
--- a/realm/realm-library/src/main/cpp/io_realm_OsRealmObjectSchema.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_OsRealmObjectSchema.cpp
@@ -75,28 +75,3 @@ JNIEXPORT jstring JNICALL Java_io_realm_OsRealmObjectSchema_nativeGetClassName(J
 
     return nullptr;
 }
-
-JNIEXPORT jlongArray JNICALL Java_io_realm_OsRealmObjectSchema_nativeGetProperties(JNIEnv* env, jclass, jlong nativePtr)
-{
-    TR_ENTER_PTR(nativePtr)
-    try {
-        ObjectSchema* object_schema = reinterpret_cast<ObjectSchema*>(nativePtr);
-        size_t size = object_schema->persisted_properties.size();
-        jlongArray native_ptr_array = env->NewLongArray(static_cast<jsize>(size));
-        jlong* tmp = new jlong[size];
-        auto it = object_schema->persisted_properties.begin();
-        size_t index = 0;
-        while (it != object_schema->persisted_properties.end()) {
-            Property property = *it;
-            tmp[index] = reinterpret_cast<jlong>(new Property(std::move(property)));
-            ++index;
-            ++it;
-        }
-        env->SetLongArrayRegion(native_ptr_array, 0, static_cast<jsize>(size), tmp);
-        delete tmp;
-        return native_ptr_array;
-    }
-    CATCH_STD()
-
-    return nullptr;
-}
diff --git a/realm/realm-library/src/main/cpp/io_realm_OsRealmSchema.cpp b/realm/realm-library/src/main/cpp/io_realm_OsRealmSchema.cpp
index 5d78cae226..20a4852a05 100644
--- a/realm/realm-library/src/main/cpp/io_realm_OsRealmSchema.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_OsRealmSchema.cpp
@@ -33,8 +33,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_OsRealmSchema_nativeCreateFromList(JNIEnv*
         std::vector<ObjectSchema> object_schemas;
         JniLongArray array(env, objectSchemaPtrs_);
         for (jsize i = 0; i < array.len(); ++i) {
-            ObjectSchema object_schema = *reinterpret_cast<ObjectSchema*>(array[i]);
-            object_schemas.push_back(std::move(object_schema));
+            object_schemas.push_back(*reinterpret_cast<ObjectSchema*>(array[i]));
         }
         auto* schema = new Schema(object_schemas);
         return reinterpret_cast<jlong>(schema);
@@ -49,27 +48,3 @@ JNIEXPORT void JNICALL Java_io_realm_OsRealmSchema_nativeClose(JNIEnv*, jclass,
     Schema* schema = reinterpret_cast<Schema*>(nativePtr);
     delete schema;
 }
-
-JNIEXPORT jlongArray JNICALL Java_io_realm_OsRealmSchema_nativeGetAll(JNIEnv* env, jclass, jlong nativePtr)
-{
-    TR_ENTER_PTR(nativePtr)
-    try {
-        Schema* schema = reinterpret_cast<Schema*>(nativePtr);
-        size_t size = schema->size();
-        jlongArray native_ptr_array = env->NewLongArray(static_cast<jsize>(size));
-        jlong* tmp = new jlong[size];
-        auto it = schema->begin();
-        size_t index = 0;
-        while (it != schema->end()) {
-            auto object_schema = *it;
-            tmp[index] = reinterpret_cast<jlong>(new ObjectSchema(std::move(object_schema)));
-            ++index;
-            ++it;
-        }
-        env->SetLongArrayRegion(native_ptr_array, 0, static_cast<jsize>(size), tmp);
-        delete tmp;
-        return native_ptr_array;
-    }
-    CATCH_STD()
-    return nullptr;
-}
diff --git a/realm/realm-library/src/main/cpp/io_realm_Property.cpp b/realm/realm-library/src/main/cpp/io_realm_Property.cpp
index 3aaedada73..38e9dff137 100644
--- a/realm/realm-library/src/main/cpp/io_realm_Property.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_Property.cpp
@@ -57,8 +57,7 @@ JNIEXPORT jlong JNICALL Java_io_realm_Property_nativeCreateProperty__Ljava_lang_
         JStringAccessor link_name(env, linkedToName_);
         PropertyType p_type = static_cast<PropertyType>(static_cast<int>(type));
         bool is_nullable = (p_type == PropertyType::Object);
-        std::unique_ptr<Property> property(new Property(name, p_type, link_name, "", false, false, is_nullable));
-        return reinterpret_cast<jlong>(property.release());
+        return reinterpret_cast<jlong>(new Property(name, p_type, link_name, "", false, false, is_nullable));
     }
     CATCH_STD()
     return 0;
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
index c93c12d569..f542b345b0 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp
@@ -225,7 +225,9 @@ JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeCloseSharedRealm
 
     auto shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
     // Close the SharedRealm only. Let the finalizer daemon thread free the SharedRealm
-    shared_realm->close();
+    if (!shared_realm->is_closed()) {
+        shared_realm->close();
+    }
 }
 
 JNIEXPORT void JNICALL Java_io_realm_internal_SharedRealm_nativeBeginTransaction(JNIEnv* env, jclass,
diff --git a/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java b/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java
index ff432579b9..6078699ec8 100644
--- a/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/OsRealmObjectSchema.java
@@ -22,7 +22,7 @@
 
 
 class OsRealmObjectSchema extends RealmObjectSchema {
-    private final long nativePtr;
+    private long nativePtr;
 
     /**
      * Creates a schema object using object store. This constructor is intended to be used by
@@ -41,11 +41,10 @@
 
     @Override
     public void close() {
-        Set<Property> properties = getProperties();
-        for (Property property : properties) {
-            property.close();
+        if (nativePtr != 0L) {
+            nativeClose(nativePtr);
+            nativePtr = 0L;
         }
-        nativeClose(nativePtr);
     }
 
     @Override
@@ -170,13 +169,23 @@ public RealmFieldType getFieldType(String fieldName) {
 
     @Override
     OsRealmObjectSchema add(String name, RealmFieldType type, boolean primary, boolean indexed, boolean required) {
-        nativeAddProperty(nativePtr, new Property(name, type, primary, indexed, required).getNativePtr());
+        final Property property = new Property(name, type, primary, indexed, required);
+        try {
+            nativeAddProperty(nativePtr, property.getNativePtr());
+        } finally {
+            property.close();
+        }
         return this;
     }
 
     @Override
     OsRealmObjectSchema add(String name, RealmFieldType type, RealmObjectSchema linkedTo) {
-        nativeAddProperty(nativePtr, new Property(name, type, linkedTo).getNativePtr());
+        final Property property = new Property(name, type, linkedTo);
+        try {
+            nativeAddProperty(nativePtr, property.getNativePtr());
+        } finally {
+            property.close();
+        }
         return this;
     }
 
@@ -194,21 +203,10 @@ long getAndCheckFieldIndex(String fieldName) {
         throw new UnsupportedOperationException();
     }
 
-    private Set<Property> getProperties() {
-        long[] ptrs = nativeGetProperties(nativePtr);
-        Set<Property> properties = new LinkedHashSet<>(ptrs.length);
-        for (int i = 0; i < ptrs.length; i++) {
-            properties.add(new Property(ptrs[i]));
-        }
-        return properties;
-    }
-
     static native long nativeCreateRealmObjectSchema(String className);
 
     static native void nativeAddProperty(long nativePtr, long nativePropertyPtr);
 
-    static native long[] nativeGetProperties(long nativePtr);
-
     static native void nativeClose(long nativePtr);
 
     static native String nativeGetClassName(long nativePtr);
diff --git a/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java b/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
index 6f3fbb0b16..7d96117d9d 100644
--- a/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
+++ b/realm/realm-library/src/main/java/io/realm/OsRealmSchema.java
@@ -37,7 +37,12 @@
         private final Map<String, RealmObjectSchema> schema = new HashMap<>();
 
         @Override
-        public void close() { }
+        public void close() {
+            for (Map.Entry<String, RealmObjectSchema> entry : schema.entrySet()) {
+                entry.getValue().close();
+            }
+            schema.clear();
+        }
 
         @Override
         public RealmObjectSchema get(String className) {
@@ -96,7 +101,7 @@ public RealmObjectSchema rename(String oldClassName, String newClassName) {
 
     private final Map<String, RealmObjectSchema> dynamicClassToSchema = new HashMap<>();
 
-    private final long nativePtr;
+    private long nativePtr;
 
     OsRealmSchema(Creator creator) {
         Set<RealmObjectSchema> realmObjectSchemas = creator.getAll();
@@ -115,11 +120,10 @@ public long getNativePtr() {
     // See BaseRealm uses a StandardRealmSchema, not a OsRealmSchema.
     @Override
     public void close() {
-        Set<RealmObjectSchema> schemas = getAll();
-        for (RealmObjectSchema schema : schemas) {
-            schema.close();
+        if (nativePtr != 0L) {
+            nativeClose(nativePtr);
+            nativePtr = 0L;
         }
-        nativeClose(nativePtr);
     }
 
     /**
@@ -141,12 +145,7 @@ public RealmObjectSchema get(String className) {
      */
     @Override
     public Set<RealmObjectSchema> getAll() {
-        long[] ptrs = nativeGetAll(nativePtr);
-        Set<RealmObjectSchema> schemas = new LinkedHashSet<>(ptrs.length);
-        for (int i = 0; i < ptrs.length; i++) {
-            schemas.add(new OsRealmObjectSchema(ptrs[i]));
-        }
-        return schemas;
+        throw new UnsupportedOperationException();
     }
 
     /**
@@ -214,6 +213,4 @@ static void checkEmpty(String str) {
     static native long nativeCreateFromList(long[] objectSchemaPtrs);
 
     static native void nativeClose(long nativePtr);
-
-    static native long[] nativeGetAll(long nativePtr);
 }
diff --git a/realm/realm-library/src/main/java/io/realm/Property.java b/realm/realm-library/src/main/java/io/realm/Property.java
index c96fbfe6c7..4285be3db5 100644
--- a/realm/realm-library/src/main/java/io/realm/Property.java
+++ b/realm/realm-library/src/main/java/io/realm/Property.java
@@ -26,7 +26,7 @@
     public static final boolean REQUIRED = true;
     public static final boolean INDEXED = true;
 
-    private final long nativePtr;
+    private long nativePtr;
 
     Property(String name, RealmFieldType type, boolean isPrimary, boolean isIndexed, boolean isRequired) {
         this.nativePtr = nativeCreateProperty(name, type.getNativeValue(), isPrimary, isIndexed, !isRequired);
@@ -47,6 +47,7 @@ protected long getNativePtr() {
     public void close() {
         if (nativePtr != 0) {
             nativeClose(nativePtr);
+            nativePtr = 0L;
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/Realm.java b/realm/realm-library/src/main/java/io/realm/Realm.java
index 6e747797eb..b985fb9031 100644
--- a/realm/realm-library/src/main/java/io/realm/Realm.java
+++ b/realm/realm-library/src/main/java/io/realm/Realm.java
@@ -386,6 +386,7 @@ private static void initializeRealm(Realm realm) {
     private static void initializeSyncedRealm(Realm realm) {
         boolean commitChanges = false;
         OsRealmSchema schema = null;
+        OsRealmSchema.Creator schemaCreator = null;
         try {
             realm.beginTransaction();
             long currentVersion = realm.getVersion();
@@ -396,13 +397,16 @@ private static void initializeSyncedRealm(Realm realm) {
             final RealmProxyMediator mediator = configuration.getSchemaMediator();
             final Set<Class<? extends RealmModel>> modelClasses = mediator.getModelClasses();
 
-            final OsRealmSchema.Creator schemaCreator = new OsRealmSchema.Creator();
+            schemaCreator = new OsRealmSchema.Creator();
             for (Class<? extends RealmModel> modelClass : modelClasses) {
                 mediator.createRealmObjectSchema(modelClass, schemaCreator);
             }
 
             // Assumption: When SyncConfiguration then additive schema update mode.
             schema = new OsRealmSchema(schemaCreator);
+            schemaCreator.close();
+            schemaCreator = null;
+
             long newVersion = configuration.getSchemaVersion();
             // !!! FIXME: This appalling kludge is necessitated by current package structure/visiblity constraints.
             // It absolutely breaks encapsulation and needs to be fixed!
@@ -436,10 +440,14 @@ private static void initializeSyncedRealm(Realm realm) {
                     transaction.execute(realm);
                 }
             }
-        } catch (Exception e) {
+        } catch (RuntimeException e) {
             commitChanges = false;
             throw e;
         } finally {
+            if (schemaCreator != null) {
+                schemaCreator.close();
+            }
+
             if (schema != null) {
                 schema.close();
             }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Collection.java b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
index aeb8231262..d8d7830bcd 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Collection.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Collection.java
@@ -32,6 +32,9 @@
 @Keep
 public class Collection implements NativeObject {
 
+    private static final String CLOSED_REALM_MESSAGE =
+            "This Realm instance has already been closed, making it unusable.";
+
     private static class CollectionObserverPair<T> extends ObserverPairList.ObserverPair<T, Object> {
         public CollectionObserverPair(T observer, Object listener) {
             super(observer, listener);
@@ -94,6 +97,10 @@ public void onCalled(CollectionObserverPair pair, Object observer) {
         protected int pos = -1;
 
         public Iterator(Collection collection) {
+            if (collection.sharedRealm.isClosed()) {
+                throw new IllegalStateException(CLOSED_REALM_MESSAGE);
+            }
+
             this.iteratorCollection = collection;
 
             if (collection.isSnapshot) {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java b/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
index 0abfa51f0f..c5e78eb1d8 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java
@@ -176,7 +176,7 @@ public int hashCode() {
 
     private final RealmConfiguration configuration;
 
-    private long nativePtr;
+    final private long nativePtr;
     final Context context;
     private long lastSchemaVersion;
     private final SchemaVersionListener schemaChangeListener;
@@ -319,7 +319,7 @@ public long getLastSnapshotVersion() {
     }
 
     public boolean isClosed() {
-        return nativePtr == 0 || nativeIsClosed(nativePtr);
+        return nativeIsClosed(nativePtr);
     }
 
     public void writeCopy(File file, byte[] key) {
@@ -368,12 +368,9 @@ public void close() {
             realmNotifier.close();
         }
         synchronized (context) {
-            if (nativePtr != 0) {
-                nativeCloseSharedRealm(nativePtr);
-                // It is OK to clear the nativePtr. It has been saved to the NativeObjectReference when adding to the
-                // context.
-                nativePtr = 0;
-            }
+            nativeCloseSharedRealm(nativePtr);
+            // Don't reset the nativePtr since we still rely on Object Store to check if the given SharedRealm ptr
+            // is closed or not.
         }
     }
 
