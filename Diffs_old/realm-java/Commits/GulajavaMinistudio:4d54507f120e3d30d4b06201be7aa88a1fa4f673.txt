diff --git a/CHANGELOG.md b/CHANGELOG.md
index d24e74b28c..46d46cebd1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,6 +9,13 @@
 * Thanks to @kageiit for removing Groovy from the Realm Transformer (#3971).
 
 
+## 5.3.2 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* [ObjectServer] Using Android Network Security Configuration is necessary to install the custom root CA for tests (API >= 24) (#5970).
+
+
 ## 5.3.1 (2018-06-19)
 
 ### Bug Fixes
diff --git a/realm/realm-library/src/androidTest/AndroidManifest.xml b/realm/realm-library/src/androidTest/AndroidManifest.xml
index f706bfdeae..e9bb60d73a 100644
--- a/realm/realm-library/src/androidTest/AndroidManifest.xml
+++ b/realm/realm-library/src/androidTest/AndroidManifest.xml
@@ -15,7 +15,8 @@
 
     <application
         android:debuggable="true"
-        android:largeHeap="true">
+        android:largeHeap="true"
+        android:networkSecurityConfig="@xml/network_security_config">
         <uses-library android:name="android.test.runner"/>
         <service
             android:name=".services.RemoteProcessService"
diff --git a/realm/realm-library/src/androidTest/res/raw/android_test_certificate b/realm/realm-library/src/androidTest/res/raw/android_test_certificate
new file mode 100644
index 0000000000..53a5f087ef
Binary files /dev/null and b/realm/realm-library/src/androidTest/res/raw/android_test_certificate differ
diff --git a/realm/realm-library/src/androidTest/res/xml/network_security_config.xml b/realm/realm-library/src/androidTest/res/xml/network_security_config.xml
new file mode 100644
index 0000000000..40f1d9a749
--- /dev/null
+++ b/realm/realm-library/src/androidTest/res/xml/network_security_config.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<network-security-config>
+    <base-config>
+        <trust-anchors>
+            <certificates src="@raw/android_test_certificate" />
+            <certificates src="system" />
+        </trust-anchors>
+    </base-config>
+</network-security-config>
\ No newline at end of file
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java
index 81964c00fd..521b5443fa 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/TrustManagerCertificateValidationTests.java
@@ -4,7 +4,6 @@
 import android.support.test.runner.AndroidJUnit4;
 
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -27,7 +26,6 @@ public static void setUp() {
     //            adb push <realm-java>/tools/sync_test_server/keys/android_test_certificate.crt /sdcard/
     //            then import the certificate from the device (Settings/Security/Install from storage)
     @Test
-    @Ignore("Root certificate have expired. Replace with newer one. https://github.com/realm/realm-java/issues/5970")
     public void sslVerifyCallback_certificateChainWithRootCAInstalledShouldValidate() {
         // simulating the following certificate chain
         // ---
@@ -111,9 +109,8 @@ public void sslVerifyCallback_certificateChainWithRootCAInstalledShouldValidate(
     }
 
     @Test
-    @Ignore("Root certificate have expired. Replace with newer one. https://github.com/realm/realm-java/issues/5970")
-    public void sslVerifyCallback_shouldVerifyHostname() {
-        // simulating the following certificate chain
+    public void sslVerifyCallback_shouldFailOnExpiredCert() {
+        // simulating the following certificate chain (one of the
         // ---
         // Certificate chain
         // 0 s:/CN=*.ie1.realmlab.net
@@ -126,7 +123,7 @@ public void sslVerifyCallback_shouldVerifyHostname() {
         // i:/C=US/O=Starfield Technologies, Inc./OU=Starfield Class 2 Certification Authority
         // ---
 
-        // ie1.realmlab.net
+        // ie1.realmlab.net (!!!! EXPIRED on May 3, 2018)
         String pem_depth0 = "-----BEGIN CERTIFICATE-----\n" +
                 "MIIEWDCCA0CgAwIBAgIQBE6+74j1z/Z88OEsSc3VIzANBgkqhkiG9w0BAQsFADBG\n" +
                 "MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRUwEwYDVQQLEwxTZXJ2ZXIg\n" +
@@ -239,6 +236,135 @@ public void sslVerifyCallback_shouldVerifyHostname() {
 
         String serverAddress = "nabil-test.ie1.realmlab.net";
 
+        assertTrue(SyncManager.sslVerifyCallback(serverAddress, pem_depth3, 3));
+        assertTrue(SyncManager.sslVerifyCallback(serverAddress, pem_depth2, 2));
+        assertTrue(SyncManager.sslVerifyCallback(serverAddress, pem_depth1, 1));
+        assertFalse(SyncManager.sslVerifyCallback(serverAddress, pem_depth0, 0));
+    }
+
+    @Test
+    public void sslVerifyCallback_shouldVerifyHostname() {
+        // simulating the following certificate chain
+
+        // 0 s:/CN=us1a.cloud.realm.io
+        //   i:/C=US/O=Amazon/OU=Server CA 1B/CN=Amazon
+        String pem_depth0 = "-----BEGIN CERTIFICATE-----\n" +
+                "MIIEfjCCA2agAwIBAgIQAuZyKHDOzYP160MtNtRBEjANBgkqhkiG9w0BAQsFADBG\n" +
+                "MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRUwEwYDVQQLEwxTZXJ2ZXIg\n" +
+                "Q0EgMUIxDzANBgNVBAMTBkFtYXpvbjAeFw0xODAyMTkwMDAwMDBaFw0xOTAzMTkx\n" +
+                "MjAwMDBaMB4xHDAaBgNVBAMTE3VzMWEuY2xvdWQucmVhbG0uaW8wggEiMA0GCSqG\n" +
+                "SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6XER+3bFiK4TCc5lQv/O3xTc9oC/bcPVr\n" +
+                "zs52mzcGW/wNH6dxW3i3T3gz3Pit8TDkDf0tzoZNdfr7PYs+BPtinM3ZbKSSnF6G\n" +
+                "5F8HNpe/1p1blko22wJDa9OyZD4tZ3f6hBlUU+8tHFC2B7BGEzuVKf3Aacap0wdh\n" +
+                "KsAAaF/mbtLQaelRFtHcIOz2B28e7Fub/iwJGCW79Keq+lDRLG+xayEsBqO3+FJ3\n" +
+                "h4FxbhsKW/O5tb/5B4dZfgJopWZfcmTUZ89ZX2IYaukfwkrV+/09ZAr87jMi9E7+\n" +
+                "zU37qHtrWVWQV48BxdWiMmmvJb0ytYM0rxal2YuXi6NOBTP0sbxVAgMBAAGjggGO\n" +
+                "MIIBijAfBgNVHSMEGDAWgBRZpGYGUqB7lZI8o5QHJ5Z0W/k90DAdBgNVHQ4EFgQU\n" +
+                "ZNEE3UPcZg2ZOJd4eMZryxUTvKswNQYDVR0RBC4wLIITdXMxYS5jbG91ZC5yZWFs\n" +
+                "bS5pb4IVKi51czFhLmNsb3VkLnJlYWxtLmlvMA4GA1UdDwEB/wQEAwIFoDAdBgNV\n" +
+                "HSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwOwYDVR0fBDQwMjAwoC6gLIYqaHR0\n" +
+                "cDovL2NybC5zY2ExYi5hbWF6b250cnVzdC5jb20vc2NhMWIuY3JsMCAGA1UdIAQZ\n" +
+                "MBcwCwYJYIZIAYb9bAECMAgGBmeBDAECATB1BggrBgEFBQcBAQRpMGcwLQYIKwYB\n" +
+                "BQUHMAGGIWh0dHA6Ly9vY3NwLnNjYTFiLmFtYXpvbnRydXN0LmNvbTA2BggrBgEF\n" +
+                "BQcwAoYqaHR0cDovL2NydC5zY2ExYi5hbWF6b250cnVzdC5jb20vc2NhMWIuY3J0\n" +
+                "MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAAserhwXWohdFjImCcCh\n" +
+                "0XGW7s47vygasV4kE7vg59dz5RQrVuu+U0HFKTuPw6d4xSaQrUq1wo76RJtZalpG\n" +
+                "ek9vOvS0GWxjSsts2D0oWZXq772bhlXRfj21NsgwzfWMXIrUaV32l5qDhin1wx7x\n" +
+                "oZL7mNQ75qFB56jv5zzsX2woFv1GN0a03nFgy9Jk6aWCM5Q3oujrxJJWsgXIMloj\n" +
+                "uqg+I4MfhTEC1ZnGOEoO4Rq3i1rSLa59mv4lhcO/+yrEENKESgx8/8DnIjQoEuRp\n" +
+                "QtbxCVxPYfnjBuRuvyTfSo1GMK6SuhvkqVbDhBbRDDCh2T8Nmea3BcFi1kcpImOr\n" +
+                "MI4=\n" +
+                "-----END CERTIFICATE-----";
+
+        //  1 s:/C=US/O=Amazon/OU=Server CA 1B/CN=Amazon
+        //  i:/C=US/O=Amazon/CN=Amazon Root CA 1
+        String pem_depth1 = "-----BEGIN CERTIFICATE-----\n" +
+                "MIIESTCCAzGgAwIBAgITBn+UV4WH6Kx33rJTMlu8mYtWDTANBgkqhkiG9w0BAQsF\n" +
+                "ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\n" +
+                "b24gUm9vdCBDQSAxMB4XDTE1MTAyMjAwMDAwMFoXDTI1MTAxOTAwMDAwMFowRjEL\n" +
+                "MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEVMBMGA1UECxMMU2VydmVyIENB\n" +
+                "IDFCMQ8wDQYDVQQDEwZBbWF6b24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n" +
+                "AoIBAQDCThZn3c68asg3Wuw6MLAd5tES6BIoSMzoKcG5blPVo+sDORrMd4f2AbnZ\n" +
+                "cMzPa43j4wNxhplty6aUKk4T1qe9BOwKFjwK6zmxxLVYo7bHViXsPlJ6qOMpFge5\n" +
+                "blDP+18x+B26A0piiQOuPkfyDyeR4xQghfj66Yo19V+emU3nazfvpFA+ROz6WoVm\n" +
+                "B5x+F2pV8xeKNR7u6azDdU5YVX1TawprmxRC1+WsAYmz6qP+z8ArDITC2FMVy2fw\n" +
+                "0IjKOtEXc/VfmtTFch5+AfGYMGMqqvJ6LcXiAhqG5TI+Dr0RtM88k+8XUBCeQ8IG\n" +
+                "KuANaL7TiItKZYxK1MMuTJtV9IblAgMBAAGjggE7MIIBNzASBgNVHRMBAf8ECDAG\n" +
+                "AQH/AgEAMA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUWaRmBlKge5WSPKOUByeW\n" +
+                "dFv5PdAwHwYDVR0jBBgwFoAUhBjMhTTsvAyUlC4IWZzHshBOCggwewYIKwYBBQUH\n" +
+                "AQEEbzBtMC8GCCsGAQUFBzABhiNodHRwOi8vb2NzcC5yb290Y2ExLmFtYXpvbnRy\n" +
+                "dXN0LmNvbTA6BggrBgEFBQcwAoYuaHR0cDovL2NydC5yb290Y2ExLmFtYXpvbnRy\n" +
+                "dXN0LmNvbS9yb290Y2ExLmNlcjA/BgNVHR8EODA2MDSgMqAwhi5odHRwOi8vY3Js\n" +
+                "LnJvb3RjYTEuYW1hem9udHJ1c3QuY29tL3Jvb3RjYTEuY3JsMBMGA1UdIAQMMAow\n" +
+                "CAYGZ4EMAQIBMA0GCSqGSIb3DQEBCwUAA4IBAQCFkr41u3nPo4FCHOTjY3NTOVI1\n" +
+                "59Gt/a6ZiqyJEi+752+a1U5y6iAwYfmXss2lJwJFqMp2PphKg5625kXg8kP2CN5t\n" +
+                "6G7bMQcT8C8xDZNtYTd7WPD8UZiRKAJPBXa30/AbwuZe0GaFEQ8ugcYQgSn+IGBI\n" +
+                "8/LwhBNTZTUVEWuCUUBVV18YtbAiPq3yXqMB48Oz+ctBWuZSkbvkNodPLamkB2g1\n" +
+                "upRyzQ7qDn1X8nn8N8V7YJ6y68AtkHcNSRAnpTitxBKjtKPISLMVCx7i4hncxHZS\n" +
+                "yLyKQXhw2W2Xs0qLeC1etA+jTGDK4UfLeC0SF7FSi8o5LL21L8IzApar2pR/\n" +
+                "-----END CERTIFICATE-----";
+
+        //  2 s:/C=US/O=Amazon/CN=Amazon Root CA 1
+        //   i:/C=US/ST=Arizona/L=Scottsdale/O=Starfield Technologies, Inc./CN=Starfield Services Root Certificate Authority - G2
+        String pem_depth2 = "-----BEGIN CERTIFICATE-----\n" +
+                "MIIEkjCCA3qgAwIBAgITBn+USionzfP6wq4rAfkI7rnExjANBgkqhkiG9w0BAQsF\n" +
+                "ADCBmDELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNj\n" +
+                "b3R0c2RhbGUxJTAjBgNVBAoTHFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4x\n" +
+                "OzA5BgNVBAMTMlN0YXJmaWVsZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1\n" +
+                "dGhvcml0eSAtIEcyMB4XDTE1MDUyNTEyMDAwMFoXDTM3MTIzMTAxMDAwMFowOTEL\n" +
+                "MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv\n" +
+                "b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj\n" +
+                "ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM\n" +
+                "9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw\n" +
+                "IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6\n" +
+                "VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L\n" +
+                "93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm\n" +
+                "jgSubJrIqg0CAwEAAaOCATEwggEtMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/\n" +
+                "BAQDAgGGMB0GA1UdDgQWBBSEGMyFNOy8DJSULghZnMeyEE4KCDAfBgNVHSMEGDAW\n" +
+                "gBScXwDfqgHXMCs4iKK4bUqc8hGRgzB4BggrBgEFBQcBAQRsMGowLgYIKwYBBQUH\n" +
+                "MAGGImh0dHA6Ly9vY3NwLnJvb3RnMi5hbWF6b250cnVzdC5jb20wOAYIKwYBBQUH\n" +
+                "MAKGLGh0dHA6Ly9jcnQucm9vdGcyLmFtYXpvbnRydXN0LmNvbS9yb290ZzIuY2Vy\n" +
+                "MD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9jcmwucm9vdGcyLmFtYXpvbnRydXN0\n" +
+                "LmNvbS9yb290ZzIuY3JsMBEGA1UdIAQKMAgwBgYEVR0gADANBgkqhkiG9w0BAQsF\n" +
+                "AAOCAQEAYjdCXLwQtT6LLOkMm2xF4gcAevnFWAu5CIw+7bMlPLVvUOTNNWqnkzSW\n" +
+                "MiGpSESrnO09tKpzbeR/FoCJbM8oAxiDR3mjEH4wW6w7sGDgd9QIpuEdfF7Au/ma\n" +
+                "eyKdpwAJfqxGF4PcnCZXmTA5YpaP7dreqsXMGz7KQ2hsVxa81Q4gLv7/wmpdLqBK\n" +
+                "bRRYh5TmOTFffHPLkIhqhBGWJ6bt2YFGpn6jcgAKUj6DiAdjd4lpFw85hdKrCEVN\n" +
+                "0FE6/V1dN2RMfjCyVSRCnTawXZwXgWHxyvkQAiSr6w10kY17RSlQOYiypok1JR4U\n" +
+                "akcjMS9cmvqtmg5iUaQqqcT5NJ0hGA==\n" +
+                "-----END CERTIFICATE-----";
+
+        //  3 s:/C=US/ST=Arizona/L=Scottsdale/O=Starfield Technologies, Inc./CN=Starfield Services Root Certificate Authority - G2
+        //   i:/C=US/O=Starfield Technologies, Inc./OU=Starfield Class 2 Certification Authority
+        String pem_depth3 = "-----BEGIN CERTIFICATE-----\n" +
+                "MIIEdTCCA12gAwIBAgIJAKcOSkw0grd/MA0GCSqGSIb3DQEBCwUAMGgxCzAJBgNV\n" +
+                "BAYTAlVTMSUwIwYDVQQKExxTdGFyZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTIw\n" +
+                "MAYDVQQLEylTdGFyZmllbGQgQ2xhc3MgMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\n" +
+                "eTAeFw0wOTA5MDIwMDAwMDBaFw0zNDA2MjgxNzM5MTZaMIGYMQswCQYDVQQGEwJV\n" +
+                "UzEQMA4GA1UECBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTElMCMGA1UE\n" +
+                "ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjE7MDkGA1UEAxMyU3RhcmZp\n" +
+                "ZWxkIFNlcnZpY2VzIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIwggEi\n" +
+                "MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDVDDrEKvlO4vW+GZdfjohTsR8/\n" +
+                "y8+fIBNtKTrID30892t2OGPZNmCom15cAICyL1l/9of5JUOG52kbUpqQ4XHj2C0N\n" +
+                "Tm/2yEnZtvMaVq4rtnQU68/7JuMauh2WLmo7WJSJR1b/JaCTcFOD2oR0FMNnngRo\n" +
+                "Ot+OQFodSk7PQ5E751bWAHDLUu57fa4657wx+UX2wmDPE1kCK4DMNEffud6QZW0C\n" +
+                "zyyRpqbn3oUYSXxmTqM6bam17jQuug0DuDPfR+uxa40l2ZvOgdFFRjKWcIfeAg5J\n" +
+                "Q4W2bHO7ZOphQazJ1FTfhy/HIrImzJ9ZVGif/L4qL8RVHHVAYBeFAlU5i38FAgMB\n" +
+                "AAGjgfAwge0wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0O\n" +
+                "BBYEFJxfAN+qAdcwKziIorhtSpzyEZGDMB8GA1UdIwQYMBaAFL9ft9HO3R+G9FtV\n" +
+                "rNzXEMIOqYjnME8GCCsGAQUFBwEBBEMwQTAcBggrBgEFBQcwAYYQaHR0cDovL28u\n" +
+                "c3MyLnVzLzAhBggrBgEFBQcwAoYVaHR0cDovL3guc3MyLnVzL3guY2VyMCYGA1Ud\n" +
+                "HwQfMB0wG6AZoBeGFWh0dHA6Ly9zLnNzMi51cy9yLmNybDARBgNVHSAECjAIMAYG\n" +
+                "BFUdIAAwDQYJKoZIhvcNAQELBQADggEBACMd44pXyn3pF3lM8R5V/cxTbj5HD9/G\n" +
+                "VfKyBDbtgB9TxF00KGu+x1X8Z+rLP3+QsjPNG1gQggL4+C/1E2DUBc7xgQjB3ad1\n" +
+                "l08YuW3e95ORCLp+QCztweq7dp4zBncdDQh/U90bZKuCJ/Fp1U1ervShw3WnWEQt\n" +
+                "8jxwmKy6abaVd38PMV4s/KCHOkdp8Hlf9BRUpJVeEXgSYCfOn8J3/yNTd126/+pZ\n" +
+                "59vPr5KW7ySaNRB6nJHGDn2Z9j8Z3/VyVOEVqQdZe4O/Ui5GjLIAZHYcSNPYeehu\n" +
+                "VsyuLAOQ1xk4meTKCRlb/weWsKh/NEnfVqn3sF/tM+2MR7cwA130A4w=\n" +
+                "-----END CERTIFICATE-----";
+
+        String serverAddress = "foo.us1a.cloud.realm.io";
+
         assertTrue(SyncManager.sslVerifyCallback(serverAddress, pem_depth3, 3));
         assertTrue(SyncManager.sslVerifyCallback(serverAddress, pem_depth2, 2));
         assertTrue(SyncManager.sslVerifyCallback(serverAddress, pem_depth1, 1));
@@ -247,12 +373,11 @@ public void sslVerifyCallback_shouldVerifyHostname() {
         // reaching depth0 will validate (or not) the entire chain, then removing the PEMs from memory
         // make sure the hostname verify works
 
-        String wrongServerAddress = "hax0r-test.realmlab.net";
+        String wrongServerAddress = "hax0r-us1a.cloud2.realm.io";
         assertTrue(SyncManager.sslVerifyCallback(wrongServerAddress, pem_depth3, 3));
         assertTrue(SyncManager.sslVerifyCallback(wrongServerAddress, pem_depth2, 2));
         assertTrue(SyncManager.sslVerifyCallback(wrongServerAddress, pem_depth1, 1));
-        // Note hax0r-test.ie1.realmlab.net is valid since the certificate allow *.ie1.realmlab.net
-        // but the method fails because of the hostname verification
+        // the method fails because of the hostname verification
         assertFalse(SyncManager.sslVerifyCallback(wrongServerAddress, pem_depth0, 0));
     }
 }
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
index 775b89954d..390e44782e 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncManager.java
@@ -481,7 +481,7 @@ synchronized static boolean sslVerifyCallback(String serverAddress, String pemDa
 
                 // verify the entire chain
                 try {
-                    TRUST_MANAGER.checkServerTrusted(chain, "RSA");
+                    TRUST_MANAGER.checkClientTrusted(chain, "RSA");
                     // verify the hostname
                     boolean isValid = OkHostnameVerifier.INSTANCE.verify(serverAddress, chain[0]);
                     if (isValid) {
@@ -521,7 +521,7 @@ private static X509TrustManager systemDefaultTrustManager() {
             }
             return (X509TrustManager) trustManagers[0];
         } catch (GeneralSecurityException e) {
-            throw new AssertionError(); // The system has no TLS. Just give up.
+            throw new IllegalStateException("No System TLS", e); // The system has no TLS. Just give up.
         }
     }
 
