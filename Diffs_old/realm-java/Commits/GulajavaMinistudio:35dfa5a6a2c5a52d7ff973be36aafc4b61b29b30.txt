diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2e10c710f6..b9db98ed37 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,16 @@
+## 4.3.0 (YYYY-MM-DD)
+
+### Deprecated
+
+* Support for mips devices are deprecated.
+
+### Enhancements
+
+### Bug Fixes
+
+### Internal
+
+
 ## 4.2.1 (YYYY-MM-DD)
 
 ### Enhancements
@@ -5,6 +18,7 @@
 ### Bug Fixes
 
 * Added missing `toString()` for the implementation of `OrderedCollectionChangeSet`.
+* Sync queries are evaluated immediately to solve the performance issue when the query results are huge, `RealmResults.size()` takes too long time (#5387).
 
 ### Internal
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/OrderedRealmCollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/OrderedRealmCollectionTests.java
index 5a9ef34cb2..2b6191da8c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/OrderedRealmCollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/OrderedRealmCollectionTests.java
@@ -428,7 +428,12 @@ public void createSnapshot() {
                 break;
             case MANAGED_REALMLIST:
             case REALMRESULTS:
-                assertEquals(collection.size(), snapshot.size());
+                int sizeBeforeChange = collection.size();
+                realm.beginTransaction();
+                collection.deleteLastFromRealm();
+                realm.commitTransaction();
+                assertEquals(sizeBeforeChange - 1, collection.size());
+                assertEquals(sizeBeforeChange, snapshot.size());
                 break;
             default:
                 break;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java
index 48590baf9e..de67a7e5df 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/OsResultsTests.java
@@ -152,7 +152,7 @@ private void addRow(OsSharedRealm sharedRealm) {
     @Test
     public void constructor_withDistinct() {
         SortDescriptor distinctDescriptor = SortDescriptor.getInstanceForDistinct(null, table, "firstName");
-        OsResults osResults = new OsResults(sharedRealm, table.where(), null, distinctDescriptor);
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where(), null, distinctDescriptor);
 
         assertEquals(3, osResults.size());
         assertEquals("John", osResults.getUncheckedRow(0).getString(0));
@@ -164,7 +164,7 @@ public void constructor_withDistinct() {
     @Test(expected = UnsupportedOperationException.class)
     public void constructor_queryIsValidated() {
         // OsResults's constructor should call TableQuery.validateQuery()
-        new OsResults(sharedRealm, table.where().or());
+        OsResults.createFromQuery(sharedRealm, table.where().or());
     }
 
     @Test
@@ -175,20 +175,20 @@ public void constructor_queryOnDeletedTable() {
         sharedRealm.commitTransaction();
         // Query should be checked before creating OS Results.
         thrown.expect(IllegalStateException.class);
-        new OsResults(sharedRealm, query);
+        OsResults.createFromQuery(sharedRealm, query);
     }
 
     @Test
     public void size() {
-        OsResults osResults = new OsResults(sharedRealm, table.where());
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         assertEquals(4, osResults.size());
     }
 
     @Test
     public void where() {
-        OsResults osResults = new OsResults(sharedRealm, table.where());
-        OsResults osResults2 = new OsResults(sharedRealm, osResults.where().equalTo(new long[] {0}, oneNullTable, "John"));
-        OsResults osResults3 = new OsResults(sharedRealm, osResults2.where().equalTo(new long[] {1}, oneNullTable, "Anderson"));
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
+        OsResults osResults2 = OsResults.createFromQuery(sharedRealm, osResults.where().equalTo(new long[] {0}, oneNullTable, "John"));
+        OsResults osResults3 = OsResults.createFromQuery(sharedRealm, osResults2.where().equalTo(new long[] {1}, oneNullTable, "Anderson"));
 
         // A new native Results should be created.
         assertTrue(osResults.getNativePtr() != osResults2.getNativePtr());
@@ -201,7 +201,7 @@ public void where() {
 
     @Test
     public void sort() {
-        OsResults osResults = new OsResults(sharedRealm, table.where().greaterThan(new long[] {2}, oneNullTable, 1));
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where().greaterThan(new long[] {2}, oneNullTable, 1));
         SortDescriptor sortDescriptor = SortDescriptor.getTestInstance(table, new long[] {2});
 
         OsResults osResults2 = osResults.sort(sortDescriptor);
@@ -218,7 +218,7 @@ public void sort() {
     @Test
     public void clear() {
         assertEquals(4, table.size());
-        OsResults osResults = new OsResults(sharedRealm, table.where());
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         sharedRealm.beginTransaction();
         osResults.clear();
         sharedRealm.commitTransaction();
@@ -227,7 +227,7 @@ public void clear() {
 
     @Test
     public void contains() {
-        OsResults osResults = new OsResults(sharedRealm, table.where());
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         UncheckedRow row = table.getUncheckedRow(0);
         assertTrue(osResults.contains(row));
     }
@@ -236,14 +236,14 @@ public void contains() {
     public void indexOf() {
         SortDescriptor sortDescriptor = SortDescriptor.getTestInstance(table, new long[] {2});
 
-        OsResults osResults = new OsResults(sharedRealm, table.where(), sortDescriptor);
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where(), sortDescriptor, null);
         UncheckedRow row = table.getUncheckedRow(0);
         assertEquals(3, osResults.indexOf(row));
     }
 
     @Test
     public void distinct() {
-        OsResults osResults = new OsResults(sharedRealm, table.where().lessThan(new long[] {2}, oneNullTable, 4));
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where().lessThan(new long[] {2}, oneNullTable, 4));
 
         SortDescriptor distinctDescriptor = SortDescriptor.getTestInstance(table, new long[] {2});
         OsResults osResults2 = osResults.distinct(distinctDescriptor);
@@ -266,7 +266,7 @@ public void addListener_shouldBeCalledToReturnTheQueryResults() {
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
 
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         looperThread.keepStrongReference(osResults);
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
@@ -287,7 +287,7 @@ public void addListener_shouldBeCalledWhenRefreshToReturnTheQueryResults() {
         final OsSharedRealm sharedRealm = getSharedRealm();
         Table table = getTable(sharedRealm);
 
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
             public void onChange(OsResults osResults1) {
@@ -304,7 +304,7 @@ public void onChange(OsResults osResults1) {
     @Test
     public void addListener_shouldBeCalledWhenRefreshAfterLocalCommit() {
         final CountDownLatch latch = new CountDownLatch(2);
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         assertEquals(4, osResults.size()); // See `populateData()`
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
@@ -332,7 +332,7 @@ public void onChange(OsResults element) {
     @Test
     public void addListener_triggeredByRefresh() {
         final CountDownLatch latch = new CountDownLatch(1);
-        OsResults osResults = new OsResults(sharedRealm, table.where());
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         osResults.size();
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
@@ -356,7 +356,7 @@ public void addListener_queryNotReturned() {
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
 
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         looperThread.keepStrongReference(osResults);
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
@@ -378,7 +378,7 @@ public void addListener_queryReturned() {
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
 
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         looperThread.keepStrongReference(osResults);
         assertEquals(4, osResults.size()); // Trigger the query to run.
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
@@ -404,7 +404,7 @@ public void addListener_triggeredByLocalCommit() {
         Table table = getTable(sharedRealm);
         final AtomicInteger listenerCounter = new AtomicInteger(0);
 
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         looperThread.keepStrongReference(osResults);
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
@@ -451,7 +451,7 @@ boolean isDetached(OsSharedRealm sharedRealm) {
 
     @Test
     public void collectionIterator_detach_byBeginTransaction() {
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         TestIterator iterator = new TestIterator(osResults);
         assertFalse(iterator.isDetached(sharedRealm));
         sharedRealm.beginTransaction();
@@ -463,14 +463,14 @@ public void collectionIterator_detach_byBeginTransaction() {
     @Test
     public void collectionIterator_detach_createdInTransaction() {
         sharedRealm.beginTransaction();
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         TestIterator iterator = new TestIterator(osResults);
         assertTrue(iterator.isDetached(sharedRealm));
     }
 
     @Test
     public void collectionIterator_invalid_nonLooperThread_byRefresh() {
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         TestIterator iterator = new TestIterator(osResults);
         assertFalse(iterator.isDetached(sharedRealm));
         sharedRealm.refresh();
@@ -484,7 +484,7 @@ public void collectionIterator_invalid_looperThread_byRemoteTransaction() {
         final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         populateData(sharedRealm);
         Table table = getTable(sharedRealm);
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         final TestIterator iterator = new TestIterator(osResults);
         looperThread.keepStrongReference(osResults);
         assertFalse(iterator.isDetached(sharedRealm));
@@ -506,7 +506,7 @@ public void onChange(OsResults element) {
 
     @Test
     public void collectionIterator_newInstance_throwsWhenSharedRealmIsClosed() {
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         sharedRealm.close();
         thrown.expect(IllegalStateException.class);
         new TestIterator(osResults);
@@ -514,7 +514,7 @@ public void collectionIterator_newInstance_throwsWhenSharedRealmIsClosed() {
 
     @Test
     public void getMode() {
-        OsResults osResults = new OsResults(sharedRealm, table.where());
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         assertTrue(OsResults.Mode.QUERY == osResults.getMode());
         osResults.firstUncheckedRow(); // Run the query
         assertTrue(OsResults.Mode.TABLEVIEW == osResults.getMode());
@@ -522,7 +522,7 @@ public void getMode() {
 
     @Test
     public void createSnapshot() {
-        OsResults osResults = new OsResults(sharedRealm, table.where());
+        OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         OsResults snapshot = osResults.createSnapshot();
         assertTrue(OsResults.Mode.TABLEVIEW == snapshot.getMode());
         thrown.expect(IllegalStateException.class);
@@ -539,7 +539,7 @@ public void load() {
         final OsSharedRealm sharedRealm = getSharedRealmForLooper();
         looperThread.closeAfterTest(sharedRealm);
         populateData(sharedRealm);
-        final OsResults osResults = new OsResults(sharedRealm, table.where());
+        final OsResults osResults = OsResults.createFromQuery(sharedRealm, table.where());
         osResults.addListener(osResults, new RealmChangeListener<OsResults>() {
             @Override
             public void onChange(OsResults element) {
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
index 26f53313cc..500ed0a8a5 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_OsResults.cpp
@@ -70,27 +70,6 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsResults_nativeCreateResults(JNI
     return reinterpret_cast<jlong>(nullptr);
 }
 
-JNIEXPORT jlong JNICALL Java_io_realm_internal_OsResults_nativeCreateResultsFromList(JNIEnv* env, jclass,
-                                                                                          jlong shared_realm_ptr,
-                                                                                          jlong list_ptr,
-                                                                                          jobject j_sort_desc)
-{
-    TR_ENTER()
-    try {
-        auto& list_wrapper = *reinterpret_cast<ObservableCollectionWrapper<List>*>(list_ptr);
-        auto& list = list_wrapper.collection();
-        auto shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));
-        Results results = j_sort_desc ?
-            list.sort(JavaSortDescriptor(env, j_sort_desc).sort_descriptor()) :
-            list.as_results();
-        auto wrapper = new ResultsWrapper(results);
-
-        return reinterpret_cast<jlong>(wrapper);
-    }
-    CATCH_STD()
-    return reinterpret_cast<jlong>(nullptr);
-}
-
 JNIEXPORT jlong JNICALL Java_io_realm_internal_OsResults_nativeCreateSnapshot(JNIEnv* env, jclass, jlong native_ptr)
 {
     TR_ENTER_PTR(native_ptr);
@@ -421,3 +400,15 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsResults_nativeCreateResultsFrom
     CATCH_STD()
     return reinterpret_cast<jlong>(nullptr);
 }
+
+JNIEXPORT void JNICALL Java_io_realm_internal_OsResults_nativeEvaluateQueryIfNeeded(JNIEnv* env, jclass,
+                                                                                    jlong native_ptr,
+                                                                                    jboolean wants_notifications)
+{
+    TR_ENTER_PTR(native_ptr)
+    try {
+        auto wrapper = reinterpret_cast<ResultsWrapper*>(native_ptr);
+        wrapper->collection().evaluate_query_if_needed(wants_notifications);
+    }
+    CATCH_STD()
+}
diff --git a/realm/realm-library/src/main/cpp/object-store b/realm/realm-library/src/main/cpp/object-store
index e446a4c73c..3eb19c014f 160000
--- a/realm/realm-library/src/main/cpp/object-store
+++ b/realm/realm-library/src/main/cpp/object-store
@@ -1 +1 @@
-Subproject commit e446a4c73c52c70ac3d4eb801e0e0a286e21acbc
+Subproject commit 3eb19c014fdfa0f02a03d4acf71d046d29a6dfa6
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index c0b9ac8fec..a0838b7abe 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -758,14 +758,14 @@ private void checkValidRealm() {
         if (className != null) {
             return new OrderedRealmCollectionSnapshot<>(
                     realm,
-                    new OsResults(realm.sharedRealm, osListOperator.getOsList(), null),
+                    OsResults.createFromQuery(realm.sharedRealm, osListOperator.getOsList().getQuery()),
                     className);
         } else {
             // 'clazz' is non-null when 'dynamicClassName' is null.
             //noinspection ConstantConditions
             return new OrderedRealmCollectionSnapshot<>(
                     realm,
-                    new OsResults(realm.sharedRealm, osListOperator.getOsList(), null),
+                    OsResults.createFromQuery(realm.sharedRealm, osListOperator.getOsList().getQuery()),
                     clazz);
         }
     }
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index 353da2a112..656cd32737 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -2014,7 +2014,7 @@ public E findFirstAsync() {
         if (realm.isInTransaction()) {
             // It is not possible to create async query inside a transaction. So immediately query the first object.
             // See OS Results::prepare_async()
-            row = new OsResults(realm.sharedRealm, query).firstUncheckedRow();
+            row = OsResults.createFromQuery(realm.sharedRealm, query).firstUncheckedRow();
         } else {
             // prepares an empty reference of the RealmObject which is backed by a pending query,
             // then update it once the query complete in the background.
@@ -2050,7 +2050,7 @@ public E findFirstAsync() {
             @Nullable SortDescriptor distinctDescriptor,
             boolean loadResults) {
         RealmResults<E> results;
-        OsResults osResults = new OsResults(realm.sharedRealm, query, sortDescriptor, distinctDescriptor);
+        OsResults osResults = OsResults.createFromQuery(realm.sharedRealm, query, sortDescriptor, distinctDescriptor);
         if (isDynamicQuery()) {
             results = new RealmResults<>(realm, osResults, className);
         } else {
diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java
index 9a553a092f..de4a3c388f 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java
@@ -68,7 +68,7 @@
         Table srcTable = realm.getSchema().getTable(srcTableType);
         return new RealmResults<>(
                 realm,
-                OsResults.createBacklinksCollection(realm.sharedRealm, uncheckedRow, srcTable, srcFieldName),
+                OsResults.createForBacklinks(realm.sharedRealm, uncheckedRow, srcTable, srcFieldName),
                 srcTableType);
     }
 
@@ -78,7 +78,7 @@
         //noinspection ConstantConditions
         return new RealmResults<>(
                 realm,
-                OsResults.createBacklinksCollection(realm.sharedRealm, row, srcTable, srcFieldName),
+                OsResults.createForBacklinks(realm.sharedRealm, row, srcTable, srcFieldName),
                 srcClassName);
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
index 045472ca98..c810eb9b9b 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsResults.java
@@ -85,8 +85,6 @@ public T next() {
 
         /**
          * Not supported by Realm collection iterators.
-         *
-         * @throws UnsupportedOperationException
          */
         @Override
         @Deprecated
@@ -138,8 +136,6 @@ public ListIterator(OsResults osResults, int start) {
 
         /**
          * Unsupported by Realm collection iterators.
-         *
-         * @throws UnsupportedOperationException
          */
         @Override
         @Deprecated
@@ -193,8 +189,6 @@ public int previousIndex() {
 
         /**
          * Unsupported by RealmResults iterators.
-         *
-         * @throws UnsupportedOperationException
          */
         @Override
         @Deprecated
@@ -276,61 +270,37 @@ static Mode getByValue(byte value) {
         }
     }
 
-    public static OsResults createBacklinksCollection(OsSharedRealm realm, UncheckedRow row, Table srcTable, String srcFieldName) {
+    public static OsResults createForBacklinks(OsSharedRealm realm, UncheckedRow row, Table srcTable,
+                                               String srcFieldName) {
         long backlinksPtr = nativeCreateResultsFromBacklinks(
                 realm.getNativePtr(),
                 row.getNativePtr(),
                 srcTable.getNativePtr(),
                 srcTable.getColumnIndex(srcFieldName));
-        return new OsResults(realm, srcTable, backlinksPtr, true);
+        return new OsResults(realm, srcTable, backlinksPtr);
     }
 
-    public OsResults(OsSharedRealm sharedRealm, TableQuery query,
-                     @Nullable SortDescriptor sortDescriptor, @Nullable SortDescriptor distinctDescriptor) {
+    public static OsResults createFromQuery(OsSharedRealm sharedRealm, TableQuery query,
+                                            @Nullable SortDescriptor sortDescriptor,
+                                            @Nullable SortDescriptor distinctDescriptor) {
         query.validateQuery();
-
-        this.nativePtr = nativeCreateResults(sharedRealm.getNativePtr(), query.getNativePtr(),
+        long ptr = nativeCreateResults(sharedRealm.getNativePtr(), query.getNativePtr(),
                 sortDescriptor,
                 distinctDescriptor);
-
-        this.sharedRealm = sharedRealm;
-        this.context = sharedRealm.context;
-        this.table = query.getTable();
-        this.context.addReference(this);
-        this.loaded = false;
+        return new OsResults(sharedRealm, query.getTable(), ptr);
     }
 
-    public OsResults(OsSharedRealm sharedRealm, TableQuery query, @Nullable SortDescriptor sortDescriptor) {
-        this(sharedRealm, query, sortDescriptor, null);
+    public static OsResults createFromQuery(OsSharedRealm sharedRealm, TableQuery query) {
+        return createFromQuery(sharedRealm, query, null, null);
     }
 
-    public OsResults(OsSharedRealm sharedRealm, TableQuery query) {
-        this(sharedRealm, query, null, null);
-    }
-
-    public OsResults(OsSharedRealm sharedRealm, OsList osList, @Nullable SortDescriptor sortDescriptor) {
-        this.nativePtr = nativeCreateResultsFromList(sharedRealm.getNativePtr(), osList.getNativePtr(), sortDescriptor);
-
-        this.sharedRealm = sharedRealm;
-        this.context = sharedRealm.context;
-        this.table = osList.getTargetTable();
-        this.context.addReference(this);
-        // OsResults created from OsList is loaded by default. So that the listener won't be triggered with empty
-        // change set.
-        this.loaded = true;
-    }
-
-    private OsResults(OsSharedRealm sharedRealm, Table table, long nativePtr) {
-        this(sharedRealm, table, nativePtr, false);
-    }
-
-    OsResults(OsSharedRealm sharedRealm, Table table, long nativePtr, boolean loaded) {
+    OsResults(OsSharedRealm sharedRealm, Table table, long nativePtr) {
         this.sharedRealm = sharedRealm;
         this.context = sharedRealm.context;
         this.table = table;
         this.nativePtr = nativePtr;
         this.context.addReference(this);
-        this.loaded = loaded;
+        this.loaded = getMode() != Mode.QUERY;
     }
 
     public OsResults createSnapshot() {
@@ -477,16 +447,17 @@ public Mode getMode() {
         return Mode.getByValue(nativeGetMode(nativePtr));
     }
 
-    // The Results of Object Store will be queried asynchronously in nature. But we do have to support "sync" query by
-    // Java like RealmQuery.findAll().
+    // The Results with mode QUERY will be evaluated asynchronously in Object Store. But we do have to support "sync"
+    // query by Java like RealmQuery.findAll().
     // The flag is used for following cases:
-    // 1. For sync query, loaded will be set to true when collection is created. So we will bypass the first trigger of
-    //    listener if it comes with empty change set from Object Store since we assume user already got the query
-    //    result.
-    // 2. For async query, when load() gets called with loaded not set, the listener should be triggered with empty
+    // 1. When Results is created, loaded will be set to false if the mode is QUERY. For other modes, loaded will be set
+    //    to true.
+    // 2. For sync query (RealmQuery.findAll()), load() should be called after the Results creation. Then query will be
+    //    evaluated immediately and then loaded will be set to true (And the mode will be changed to TABLEVIEW in OS).
+    // 3. For async query, when load() gets called with loaded not set, the listener should be triggered with empty
     //    change set since it is considered as query first returned.
-    // 3. If the listener triggered with empty change set after load() called for async queries, it is treated as the
-    //    same case as 1).
+    // 4. If the listener triggered with empty change set after load() called for async queries, it is treated as the
+    //    same case as 2).
     public boolean isLoaded() {
         return loaded;
     }
@@ -495,6 +466,7 @@ public void load() {
         if (loaded) {
             return;
         }
+        nativeEvaluateQueryIfNeeded(nativePtr, false);
         notifyChangeListeners(0);
     }
 
@@ -503,9 +475,6 @@ public void load() {
     private static native long nativeCreateResults(long sharedRealmNativePtr, long queryNativePtr,
             @Nullable SortDescriptor sortDesc, @Nullable SortDescriptor distinctDesc);
 
-    private static native long nativeCreateResultsFromList(long sharedRealmPtr, long listPtr,
-                                                           @Nullable SortDescriptor sortDesc);
-
     private static native long nativeCreateSnapshot(long nativePtr);
 
     private static native long nativeGetRow(long nativePtr, int index);
@@ -546,4 +515,6 @@ private static native long nativeCreateResultsFromList(long sharedRealmPtr, long
     private static native byte nativeGetMode(long nativePtr);
 
     private static native long nativeCreateResultsFromBacklinks(long sharedRealmNativePtr, long rowNativePtr, long srcTableNativePtr, long srColIndex);
+
+    private static native void nativeEvaluateQueryIfNeeded(long nativePtr, boolean wantsNotifications);
 }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java b/realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java
index 7bb3a075af..027e0e71b8 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsSharedRealm.java
@@ -511,7 +511,7 @@ private void runPartialSyncRegistrationCallback(@Nullable String error, long nat
         } else {
             @SuppressWarnings("ConstantConditions")
             Table table = getTable(Table.getTableNameForClass(callback.className));
-            OsResults results = new OsResults(this, table, nativeResultsPtr, true);
+            OsResults results = new OsResults(this, table, nativeResultsPtr);
             callback.onSuccess(results);
         }
     }
diff --git a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
index 3b4b9802be..bfa733cd33 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java
@@ -40,7 +40,7 @@
     public PendingRow(OsSharedRealm sharedRealm, TableQuery query, @Nullable SortDescriptor sortDescriptor,
                       final boolean returnCheckedRow) {
         this.sharedRealm = sharedRealm;
-        pendingOsResults = new OsResults(sharedRealm, query, sortDescriptor, null);
+        pendingOsResults = OsResults.createFromQuery(sharedRealm, query, sortDescriptor, null);
 
         listener = new RealmChangeListener<PendingRow>() {
             @Override
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
index 55aab7e5f5..494938d9e1 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/SyncSessionTests.java
@@ -12,7 +12,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 import java.util.UUID;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
@@ -309,6 +311,7 @@ public void onChange(RealmResults<StringOnly> stringOnlies) {
     // this test validate the behaviour of SyncSessionStopPolicy::AfterChangesUploaded
     @Test
     public void uploadChangesWhenRealmOutOfScope() throws InterruptedException {
+        final List<Object> strongRefs = new ArrayList<>();
         final String uniqueName = UUID.randomUUID().toString();
         SyncCredentials credentials = SyncCredentials.usernamePassword(uniqueName, "password", true);
         SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);
@@ -351,6 +354,7 @@ public void run() {
                         .build();
                 final Realm adminRealm = Realm.getInstance(adminConfig);
                 RealmResults<StringOnly> all = adminRealm.where(StringOnly.class).findAll();
+                strongRefs.add(all);
                 RealmChangeListener<RealmResults<StringOnly>> realmChangeListener = new RealmChangeListener<RealmResults<StringOnly>>() {
                     @Override
                     public void onChange(RealmResults<StringOnly> stringOnlies) {
@@ -369,9 +373,9 @@ public void onChange(RealmResults<StringOnly> stringOnlies) {
         });
 
         TestHelper.awaitOrFail(testCompleted, 60);
+        handlerThread.join();
 
         user.logout();
-        realm.close();
     }
 
     // A Realm that was opened before a user logged out should be able to resume downloading if the user logs back in.
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
index 3f2e74c5ad..70b9cf492b 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/Constants.java
@@ -23,7 +23,7 @@
     public static final String USER_REALM_2 = "realm://" + HOST + ":9080/~/tests2";
     public static final String USER_REALM_SECURE = "realms://" + HOST + ":9443/~/tests";
     public static final String SYNC_SERVER_URL = "realm://" + HOST + ":9080/~/tests";
-    public static final String SYNC_SERVER_URL_2 = "realm://" + HOST + "/~/tests2";
+    public static final String SYNC_SERVER_URL_2 = "realm://" + HOST + ":9080/~/tests2";
 
     public static final String AUTH_SERVER_URL = "http://" + HOST + ":9080/";
     public static final String AUTH_URL = AUTH_SERVER_URL + "auth";
diff --git a/version.txt b/version.txt
index d168f1d8bd..9aadf8cf65 100644
--- a/version.txt
+++ b/version.txt
@@ -1 +1 @@
-4.2.1-SNAPSHOT
\ No newline at end of file
+4.3.0-SNAPSHOT
