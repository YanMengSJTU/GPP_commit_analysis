diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3a31b73df9..de72b9094d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -13,6 +13,17 @@
 ### Credits
 
 
+## 4.1.2 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* Leaked file handler in the Realm Transformer (#5521)
+
+### Internal
+
+* Updated JavaAssist to 3.22.0-GA
+
+
 ## 4.1.1 (2017-10-27)
 
 ### Bug Fixes
@@ -25,8 +36,6 @@
 
 * Updated Realm Sync to 2.1.0
 
-### Credits
-
 
 ## 4.1.0 (2017-10-20)
 
diff --git a/realm-transformer/build.gradle b/realm-transformer/build.gradle
index 9553214093..a5f4d48de7 100644
--- a/realm-transformer/build.gradle
+++ b/realm-transformer/build.gradle
@@ -59,7 +59,7 @@ dependencies {
     compile gradleApi()
     compile "io.realm:realm-annotations:${version}"
     provided 'com.android.tools.build:gradle:2.1.0'
-    compile 'org.javassist:javassist:3.20.0-GA'
+    compile 'org.javassist:javassist:3.22.0-GA'
 
     testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
         exclude module: 'groovy-all'
diff --git a/realm-transformer/src/main/groovy/io/realm/transformer/ManagedClassPool.groovy b/realm-transformer/src/main/groovy/io/realm/transformer/ManagedClassPool.groovy
new file mode 100644
index 0000000000..c3a0389d26
--- /dev/null
+++ b/realm-transformer/src/main/groovy/io/realm/transformer/ManagedClassPool.groovy
@@ -0,0 +1,82 @@
+/*
+ * Copyright 2017 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.transformer
+
+import com.android.build.api.transform.TransformInput
+import javassist.ClassPath
+import javassist.ClassPool
+
+/**
+ * This class is a wrapper around JavaAssists {@code ClassPool} class that allows for correct cleanup
+ * of the resources used.
+ */
+@SuppressWarnings("GroovyUnusedDeclaration")
+class ManagedClassPool extends ClassPool implements Closeable {
+
+    def List<ClassPath> pathElements = new ArrayList<ClassPath>()
+
+    /**
+     * Constructor for creating and populating the JavAssist class pool.
+     * Remember to call {@link #close()} when done with it to avoid leaking file resources
+     *
+     * @param inputs the inputs provided by the Transform API
+     * @param referencedInputs the referencedInputs provided by the Transform API
+     * @return the populated ClassPool instance
+     */
+    ManagedClassPool(Collection<TransformInput> inputs, Collection<TransformInput> referencedInputs) {
+        // Don't use ClassPool.getDefault(). Doing consecutive builds in the same run (e.g. debug+release)
+        // will use a cached object and all the classes will be frozen.
+        super(null)
+        appendSystemPath()
+
+        inputs.each {
+            it.directoryInputs.each {
+                pathElements.add(appendClassPath(it.file.absolutePath))
+            }
+
+            it.jarInputs.each {
+                pathElements.add(appendClassPath(it.file.absolutePath))
+            }
+        }
+
+        referencedInputs.each {
+            it.directoryInputs.each {
+                pathElements.add(appendClassPath(it.file.absolutePath))
+            }
+
+            it.jarInputs.each {
+                pathElements.add(appendClassPath(it.file.absolutePath))
+            }
+        }
+    }
+
+    /**
+     * Detach all ClassPath elements, effectively closing the class pool.
+     */
+    @Override
+    void close() throws IOException {
+        // Cleanup class pool. Internally it keeps a list of JarFile references that are only
+        // cleaned up if the the ClassPath element wrapping it is manually removed.
+        // See https://github.com/jboss-javassist/javassist/issues/165
+        def iter = pathElements.iterator()
+        while (iter.hasNext()) {
+            def cp = iter.next()
+            removeClassPath(cp)
+            iter.remove()
+        }
+    }
+}
diff --git a/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy b/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
index bd99fb271d..957581a6cf 100644
--- a/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
+++ b/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
@@ -22,7 +22,6 @@ import com.google.common.collect.ImmutableSet
 import com.google.common.collect.Sets
 import com.google.common.io.Files
 import groovy.io.FileType
-import io.realm.annotations.Ignore
 import io.realm.annotations.RealmClass
 import javassist.ClassPool
 import javassist.CtClass
@@ -30,7 +29,6 @@ import org.gradle.api.Project
 import org.slf4j.Logger
 import org.slf4j.LoggerFactory
 
-import java.lang.reflect.Modifier
 import java.util.jar.JarFile
 import java.util.regex.Pattern
 
@@ -89,7 +87,7 @@ class RealmTransformer extends Transform {
         def allClassNames = merge(inputClassNames, referencedClassNames);
 
         // Create and populate the Javassist class pool
-        ClassPool classPool = createClassPool(inputs, referencedInputs)
+        ClassPool classPool = new ManagedClassPool(inputs, referencedInputs)
         // Append android.jar to class pool. We don't need the class names of them but only the class in the pool for
         // javassist. See https://github.com/realm/realm-java/issues/2703.
         addBootClassesToClassPool(classPool)
@@ -148,6 +146,7 @@ class RealmTransformer extends Transform {
         logger.debug "Realm Transform time: ${toc-tic} milliseconds"
 
         this.sendAnalytics(inputs, inputModelClasses)
+        classPool.close()
     }
 
     /**
@@ -187,42 +186,6 @@ class RealmTransformer extends Transform {
         }
     }
 
-    /**
-     * Creates and populates the Javassist class pool.
-     *
-     * @param inputs the inputs provided by the Transform API
-     * @param referencedInputs the referencedInputs provided by the Transform API
-     * @return the populated ClassPool instance
-     */
-    private ClassPool createClassPool(Collection<TransformInput> inputs, Collection<TransformInput> referencedInputs) {
-        // Don't use ClassPool.getDefault(). Doing consecutive builds in the same run (e.g. debug+release)
-        // will use a cached object and all the classes will be frozen.
-        ClassPool classPool = new ClassPool(null)
-        classPool.appendSystemPath()
-
-        inputs.each {
-            it.directoryInputs.each {
-                classPool.appendClassPath(it.file.absolutePath)
-            }
-
-            it.jarInputs.each {
-                classPool.appendClassPath(it.file.absolutePath)
-            }
-        }
-
-        referencedInputs.each {
-            it.directoryInputs.each {
-                classPool.appendClassPath(it.file.absolutePath)
-            }
-
-            it.jarInputs.each {
-                classPool.appendClassPath(it.file.absolutePath)
-            }
-        }
-
-        return classPool
-    }
-
     private static Set<String> getClassNames(Collection<TransformInput> inputs) {
         Set<String> classNames = new HashSet<String>()
 
@@ -255,6 +218,7 @@ class RealmTransformer extends Transform {
                             .replace('\\' as char , '.' as char)
                     classNames.add(className)
                 }
+                jarFile.close() // Crash transformer if this fails
             }
         }
         return classNames
