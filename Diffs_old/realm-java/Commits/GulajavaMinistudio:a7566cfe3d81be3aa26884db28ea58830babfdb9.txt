diff --git a/CHANGELOG.md b/CHANGELOG.md
index cc489e5518..40fbf8cf98 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -10,7 +10,7 @@
 ## Bug Fixes
 
 * Added missing `RealmQuery.oneOf()` for Kotlin that accepts non-nullable types (#5717).
-
+* [ObjectServer] Fixed an issue preventing sync to resume when the network is back (#5677).
 
 ## 4.3.3 (2018-01-19)
 
diff --git a/realm-transformer/src/main/groovy/io/realm/transformer/BytecodeModifier.groovy b/realm-transformer/src/main/groovy/io/realm/transformer/BytecodeModifier.groovy
index 2ad7183dd2..c00055369d 100644
--- a/realm-transformer/src/main/groovy/io/realm/transformer/BytecodeModifier.groovy
+++ b/realm-transformer/src/main/groovy/io/realm/transformer/BytecodeModifier.groovy
@@ -85,7 +85,7 @@ class BytecodeModifier {
      * @param classPool the Javassist class pool
      */
     public static void addRealmProxyInterface(CtClass clazz, ClassPool classPool) {
-        def proxyInterface = classPool.get("io.realm.${clazz.getSimpleName()}RealmProxyInterface")
+        def proxyInterface = classPool.get("io.realm.${clazz.getName().replace(".", "_")}RealmProxyInterface")
         clazz.addInterface(proxyInterface)
     }
 
diff --git a/realm/config/findbugs/findbugs-filter.xml b/realm/config/findbugs/findbugs-filter.xml
index 25485943d5..279dd332d8 100644
--- a/realm/config/findbugs/findbugs-filter.xml
+++ b/realm/config/findbugs/findbugs-filter.xml
@@ -13,16 +13,16 @@
 
     <!-- Generated code -->
     <Match>
-        <Class name="io.realm.PermissionChangeRealmProxy"/>
+        <Class name="io.realm.io_realm_internal_permissions_PermissionChangeRealmProxy"/>
     </Match>
     <Match>
-        <Class name="io.realm.PermissionOfferRealmProxy"/>
+        <Class name="io.realm.io_realm_permissions_PermissionOfferRealmProxy"/>
     </Match>
     <Match>
-        <Class name="io.realm.PermissionOfferResponseRealmProxy"/>
+        <Class name="io.realm.io_realm_internal_permissions_PermissionOfferResponseRealmProxy"/>
     </Match>
     <Match>
-        <Class name="io.realm.PermissionRealmProxy"/>
+        <Class name="io.realm.io_realm_permissions_PermissionRealmProxy"/>
     </Match>
 
 </FindBugsFilter>
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Backlink.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Backlink.java
index e658f157a8..e158871457 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Backlink.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Backlink.java
@@ -32,7 +32,7 @@
  * Backlinks are automatically created and destroyed when the forward references to which they correspond are
  * created and destroyed.  This can dramatically reduce the complexity of client code.
  * <p>
- * To expose backinks for use, create a declaration as follows:
+ * To expose backlinks for use, create a declaration as follows:
  * <code>
  * class TargetClass {
  * // ...
@@ -58,11 +58,11 @@
  * the field is initialized (typically null).
  */
 final class Backlink {
-    private final VariableElement backlink;
+    private final VariableElement backlinkField;
 
     /**
      * The fully-qualified name of the class containing the <code>targetField</code>,
-     * the field annotated with the {@literal @}LinkingObjects annotation.
+     * which is the field annotated with the {@literal @}LinkingObjects annotation.
      */
     private final String targetClass;
 
@@ -74,12 +74,12 @@
 
     /**
      * The fully-qualified name of the class to which the backlinks, from <code>targetField</code>,
-     * point: The generic argument to the type of the <code>targetField</code>.
+     * point.
      */
     private final String sourceClass;
 
     /**
-     * The name of the field, in <code>SourceClass</code> that creates the backlink.
+     * The name of the field, in <code>SourceClass</code> that has a normal link to <code>targetClass</code>.
      * Making this field, in an instance I of <code>SourceClass</code>,
      * a reference to an instance J of <code>TargetClass</code>
      * will cause the <code>targetField</code> of J to contain a backlink to I.
@@ -87,16 +87,16 @@
     private final String sourceField;
 
 
-    public Backlink(ClassMetaData clazz, VariableElement backlink) {
-        if ((null == clazz) || (null == backlink)) {
-            throw new NullPointerException(String.format(Locale.US, "null parameter: %s, %s", clazz, backlink));
+    public Backlink(ClassMetaData clazz, VariableElement backlinkField) {
+        if ((null == clazz) || (null == backlinkField)) {
+            throw new NullPointerException(String.format(Locale.US, "null parameter: %s, %s", clazz, backlinkField));
         }
 
-        this.backlink = backlink;
+        this.backlinkField = backlinkField;
         this.targetClass = clazz.getFullyQualifiedClassName();
-        this.targetField = backlink.getSimpleName().toString();
-        this.sourceClass = Utils.getRealmResultsType(backlink);
-        this.sourceField = backlink.getAnnotation(LinkingObjects.class).value();
+        this.targetField = backlinkField.getSimpleName().toString();
+        this.sourceClass = Utils.getRealmResultsType(backlinkField);
+        this.sourceField = backlinkField.getAnnotation(LinkingObjects.class).value();
     }
 
     public String getTargetClass() {
@@ -116,11 +116,7 @@ public String getSourceField() {
     }
 
     public String getTargetFieldType() {
-        return backlink.asType().toString();
-    }
-
-    public String getSimpleSourceClass() {
-        return Utils.getFieldTypeSimpleName(Utils.getGenericTypeForContainer(backlink));
+        return backlinkField.asType().toString();
     }
 
     /**
@@ -130,7 +126,7 @@ public String getSimpleSourceClass() {
      */
     public boolean validateSource() {
         // A @LinkingObjects cannot be @Required
-        if (backlink.getAnnotation(Required.class) != null) {
+        if (backlinkField.getAnnotation(Required.class) != null) {
             Utils.error(String.format(
                     Locale.US,
                     "The @LinkingObjects field \"%s.%s\" cannot be @Required.",
@@ -160,13 +156,13 @@ public boolean validateSource() {
         }
 
         // The annotated element must be a RealmResult
-        if (!Utils.isRealmResults(backlink)) {
+        if (!Utils.isRealmResults(backlinkField)) {
             Utils.error(String.format(
                     Locale.US,
                     "The field \"%s.%s\" is a \"%s\". Fields annotated with @LinkingObjects must be RealmResults.",
                     targetClass,
                     targetField,
-                    backlink.asType()));
+                    backlinkField.asType()));
             return false;
         }
 
@@ -180,7 +176,7 @@ public boolean validateSource() {
         }
 
         // A @LinkingObjects field must be final
-        if (!backlink.getModifiers().contains(Modifier.FINAL)) {
+        if (!backlinkField.getModifiers().contains(Modifier.FINAL)) {
             Utils.error(String.format(
                     Locale.US,
                     "A @LinkingObjects field \"%s.%s\" must be final.",
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassCollection.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassCollection.java
index c500785d67..095314f1b9 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassCollection.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassCollection.java
@@ -30,13 +30,11 @@
 public class ClassCollection {
 
     // These three collections should always stay in sync
-    private Map<String, ClassMetaData> simpleNameClassMap = new LinkedHashMap<>();
     private Map<String, ClassMetaData> qualifiedNameClassMap = new LinkedHashMap<>();
     private Set<ClassMetaData> classSet = new LinkedHashSet<>();
 
     public void addClass(ClassMetaData metadata) {
         classSet.add(metadata);
-        simpleNameClassMap.put(metadata.getSimpleJavaClassName(), metadata);
         qualifiedNameClassMap.put(metadata.getFullyQualifiedClassName(), metadata);
     }
 
@@ -44,18 +42,10 @@ public void addClass(ClassMetaData metadata) {
         return Collections.unmodifiableSet(classSet);
     }
 
-    public ClassMetaData getClassFromSimpleName(String simpleJavaClassName) {
-        ClassMetaData data = simpleNameClassMap.get(simpleJavaClassName);
-        if (data == null) {
-            throw new NullPointerException("Class " + simpleJavaClassName + " was not found");
-        }
-        return data;
-    }
-
     public ClassMetaData getClassFromQualifiedName(String qualifiedJavaClassName) {
         ClassMetaData data = qualifiedNameClassMap.get(qualifiedJavaClassName);
         if (data == null) {
-            throw new NullPointerException("Class " + qualifiedJavaClassName + " was not found");
+            throw new IllegalArgumentException("Class " + qualifiedJavaClassName + " was not found");
         }
         return data;
     }
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java
index 8fc5378619..8292873163 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java
@@ -143,6 +143,18 @@ public String getInternalClassName() {
         return internalClassName;
     }
 
+    /**
+     * Returns the internal field name that matches the one in the Java model class.
+     */
+    public String getInternalFieldName(String javaFieldName) {
+        for (RealmFieldElement field : fields) {
+            if (field.getJavaName().equals(javaFieldName)) {
+                return field.getInternalFieldName();
+            }
+        }
+        throw new IllegalArgumentException("Could not find fieldname: " + javaFieldName);
+    }
+
     public String getPackageName() {
         return packageName;
     }
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
index 1a002e258d..7f154623c4 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java
@@ -94,9 +94,9 @@ public RealmProxyClassGenerator(ProcessingEnvironment processingEnvironment, Typ
         this.simpleJavaClassName = metadata.getSimpleJavaClassName();
         this.qualifiedJavaClassName = metadata.getFullyQualifiedClassName();
         this.internalClassName = metadata.getInternalClassName();
-        this.interfaceName = Utils.getProxyInterfaceName(simpleJavaClassName);
+        this.interfaceName = Utils.getProxyInterfaceName(qualifiedJavaClassName);
         this.qualifiedGeneratedClassName = String.format(Locale.US, "%s.%s",
-                Constants.REALM_PACKAGE_NAME, Utils.getProxyClassName(simpleJavaClassName));
+                Constants.REALM_PACKAGE_NAME, Utils.getProxyClassName(qualifiedJavaClassName));
 
         // See the configuration for the debug build type,
         //  in the realm-library project, for an example of how to set this flag.
@@ -744,15 +744,15 @@ private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOExce
                     break;
                 }
                 case OBJECT: {
-                    String fieldTypeSimpleName = Utils.getFieldTypeSimpleName(field);
-                    String internalClassName = classCollection.getClassFromSimpleName(fieldTypeSimpleName).getInternalClassName();
+                    String fieldTypeQualifiedName = Utils.getFieldTypeQualifiedName(field);
+                    String internalClassName = classCollection.getClassFromQualifiedName(fieldTypeQualifiedName).getInternalClassName();
                     writer.emitStatement("builder.addPersistedLinkProperty(\"%s\", RealmFieldType.OBJECT, \"%s\")",
                             fieldName, internalClassName);
                     break;
                 }
                 case LIST: {
-                    String genericTypeSimpleName = Utils.getGenericTypeSimpleName(field);
-                    String internalClassName = classCollection.getClassFromSimpleName(genericTypeSimpleName).getInternalClassName(); // FIXME support for raw data
+                    String genericTypeQualifiedName = Utils.getGenericTypeQualifiedName(field);
+                    String internalClassName = classCollection.getClassFromQualifiedName(genericTypeQualifiedName).getInternalClassName(); // FIXME support for raw data
                     writer.emitStatement("builder.addPersistedLinkProperty(\"%s\", RealmFieldType.LIST, \"%s\")",
                             fieldName, internalClassName);
                     break;
@@ -795,8 +795,11 @@ private void emitCreateExpectedObjectSchemaInfo(JavaWriter writer) throws IOExce
             }
         }
         for (Backlink backlink: metadata.getBacklinkFields()) {
+            ClassMetaData sourceClass = classCollection.getClassFromQualifiedName(backlink.getSourceClass());
+            String targetField = backlink.getTargetField(); // Only in the model, so no internal name exists
+            String internalSourceField = sourceClass.getInternalFieldName(backlink.getSourceField());
             writer.emitStatement("builder.addComputedLinkProperty(\"%s\", \"%s\", \"%s\")",
-                    backlink.getTargetField(), classCollection.getClassFromSimpleName(backlink.getSimpleSourceClass()).getInternalClassName(), backlink.getSourceField());
+                    targetField, sourceClass.getInternalClassName(), internalSourceField);
         }
         writer.emitStatement("return builder.build()");
         writer.endMethod()
@@ -1801,14 +1804,14 @@ private void emitToStringMethod(JavaWriter writer) throws IOException {
 
             writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
             if (Utils.isRealmModel(field)) {
-                String fieldTypeSimpleName = Utils.getFieldTypeSimpleName(field);
+                String fieldTypeSimpleName = Utils.stripPackage(Utils.getFieldTypeQualifiedName(field));
                 writer.emitStatement(
                         "stringBuilder.append(%s() != null ? \"%s\" : \"null\")",
                         metadata.getInternalGetter(fieldName),
                         fieldTypeSimpleName
                 );
             } else if (Utils.isRealmList(field)) {
-                String genericTypeSimpleName = Utils.getGenericTypeSimpleName(field);
+                String genericTypeSimpleName = Utils.stripPackage(Utils.getGenericTypeQualifiedName(field));
                 writer.emitStatement("stringBuilder.append(\"RealmList<%s>[\").append(%s().size()).append(\"]\")",
                         genericTypeSimpleName,
                         metadata.getInternalGetter(fieldName));
@@ -1868,7 +1871,7 @@ private void emitEqualsMethod(JavaWriter writer) throws IOException {
         if (metadata.containsEquals()) {
             return;
         }
-        String proxyClassName = Utils.getProxyClassName(simpleJavaClassName);
+        String proxyClassName = Utils.getProxyClassName(qualifiedJavaClassName);
         String otherObjectVarName = "a" + simpleJavaClassName;
         writer.emitAnnotation("Override")
                 .beginMethod("boolean", "equals", EnumSet.of(Modifier.PUBLIC), "Object", "o")
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyInterfaceGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyInterfaceGenerator.java
index 25cbe13a41..94e3727902 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyInterfaceGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyInterfaceGenerator.java
@@ -38,7 +38,7 @@
     public RealmProxyInterfaceGenerator(ProcessingEnvironment processingEnvironment, ClassMetaData metaData) {
         this.processingEnvironment = processingEnvironment;
         this.metaData = metaData;
-        this.className = metaData.getSimpleJavaClassName();
+        this.className = metaData.getFullyQualifiedClassName();
     }
 
     public void generate() throws IOException {
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
index 5081c513bf..d058617c1e 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyMediatorGenerator.java
@@ -51,9 +51,8 @@ public RealmProxyMediatorGenerator(ProcessingEnvironment processingEnvironment,
         this.className = className;
 
         for (ClassMetaData metadata : classesToValidate) {
-            String simpleName = metadata.getSimpleJavaClassName();
             qualifiedModelClasses.add(metadata.getFullyQualifiedClassName());
-            qualifiedProxyClasses.add(REALM_PACKAGE_NAME + "." + getProxyClassName(simpleName));
+            qualifiedProxyClasses.add(REALM_PACKAGE_NAME + "." + Utils.getProxyClassName(metadata.getFullyQualifiedClassName()));
             internalClassNames.add(metadata.getInternalClassName());
         }
     }
@@ -475,10 +474,6 @@ private void emitMediatorShortCircuitSwitch(ProxySwitchStatement statement, Java
     }
 
 
-    private String getProxyClassName(String clazz) {
-        return clazz + Constants.PROXY_SUFFIX;
-    }
-
     private interface ProxySwitchStatement {
         void emitStatement(int i, JavaWriter writer) throws IOException;
     }
diff --git a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java
index 5884c70818..9b0e4309e0 100644
--- a/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java
+++ b/realm/realm-annotations-processor/src/main/java/io/realm/processor/Utils.java
@@ -63,17 +63,17 @@ public static boolean isDefaultConstructor(Element constructor) {
 
     public static String getProxyClassSimpleName(VariableElement field) {
         if (typeUtils.isAssignable(field.asType(), realmList)) {
-            return getProxyClassName(getGenericTypeSimpleName(field));
+            return getProxyClassName(getGenericTypeQualifiedName(field));
         } else {
-            return getProxyClassName(getFieldTypeSimpleName(field));
+            return getProxyClassName(getFieldTypeQualifiedName(field));
         }
     }
 
     /**
      * @return the proxy class name for a given clazz
      */
-    public static String getProxyClassName(String clazz) {
-        return clazz + Constants.PROXY_SUFFIX;
+    public static String getProxyClassName(String qualifiedClassName) {
+        return qualifiedClassName.replace(".", "_") + Constants.PROXY_SUFFIX;
     }
 
     /**
@@ -84,7 +84,7 @@ public static boolean isString(VariableElement field) {
         if (field == null) {
             throw new IllegalArgumentException("Argument 'field' cannot be null.");
         }
-        return getFieldTypeSimpleName(field).equals("String");
+        return getFieldTypeQualifiedName(field).equals("java.lang.String");
     }
 
     /**
@@ -133,7 +133,7 @@ public static boolean isByteArray(VariableElement field) {
         if (field == null) {
             throw new IllegalArgumentException("Argument 'field' cannot be null.");
         }
-        return getFieldTypeSimpleName(field).equals("byte[]");
+        return getFieldTypeQualifiedName(field).equals("byte[]");
     }
 
     /**
@@ -279,30 +279,6 @@ public static String getFieldTypeQualifiedName(VariableElement field) {
         return field.asType().toString();
     }
 
-    /**
-     * @return the simple type name for a field.
-     */
-    public static String getFieldTypeSimpleName(VariableElement field) {
-        return (null == field) ? null : getFieldTypeSimpleName(getFieldTypeQualifiedName(field));
-    }
-
-    /**
-     * @return the simple type name for a field.
-     */
-    public static String getFieldTypeSimpleName(ReferenceType type) {
-        return (null == type) ? null : getFieldTypeSimpleName(type.toString());
-    }
-
-    /**
-     * @return the simple type name for a field.
-     */
-    public static String getFieldTypeSimpleName(String fieldTypeQualifiedName) {
-        if ((null != fieldTypeQualifiedName) && (fieldTypeQualifiedName.contains("."))) {
-            fieldTypeQualifiedName = fieldTypeQualifiedName.substring(fieldTypeQualifiedName.lastIndexOf('.') + 1);
-        }
-        return fieldTypeQualifiedName;
-    }
-
     /**
      * @return the generic type for Lists of the form {@code List<type>}
      */
@@ -315,20 +291,6 @@ public static String getGenericTypeQualifiedName(VariableElement field) {
         return typeArguments.get(0).toString();
     }
 
-    /**
-     * @return the generic type for Lists of the form {@code List<type>}
-     */
-    public static String getGenericTypeSimpleName(VariableElement field) {
-        final String genericTypeName = getGenericTypeQualifiedName(field);
-        if (genericTypeName == null) {
-            return null;
-        }
-        if (!genericTypeName.contains(".")) {
-            return genericTypeName;
-        }
-        return genericTypeName.substring(genericTypeName.lastIndexOf('.') + 1);
-    }
-
     /**
      * Strips the package name from a fully qualified class name.
      */
@@ -371,8 +333,11 @@ public static Element getSuperClass(TypeElement classType) {
         return typeUtils.asElement(classType.getSuperclass());
     }
 
-    public static String getProxyInterfaceName(String className) {
-        return className + Constants.INTERFACE_SUFFIX;
+    /**
+     * Returns the interface name for proxy class interfaces
+     */
+    public static String getProxyInterfaceName(String qualifiedClassName) {
+        return qualifiedClassName.replace(".", "_") + Constants.INTERFACE_SUFFIX;
     }
 
     public static NameConverter getNameFormatter(RealmNamingPolicy policy) {
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java
index 46448a3a0c..38929fba51 100644
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmBacklinkProcessorTest.java
@@ -31,36 +31,34 @@
 
 
 public class RealmBacklinkProcessorTest {
-    private final JavaFileObject backlinks = JavaFileObjects.forResource("some/test/Backlinks.java");
-    private final JavaFileObject backlinksTarget = JavaFileObjects.forResource("some/test/BacklinkTarget.java");
+    private final JavaFileObject sourceClass = JavaFileObjects.forResource("some/test/BacklinkSource.java");
+    private final JavaFileObject targetClass = JavaFileObjects.forResource("some/test/BacklinkTarget.java");
     private final JavaFileObject invalidResultsValueType = JavaFileObjects.forResource("some/test/InvalidResultsElementType.java");
 
     @Test
     public void compileBacklinks() {
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinks, backlinksTarget))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError();
     }
 
     @Test
     public void compileSyntheticBacklinks() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
-                .builder().build();
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass().builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError();
     }
 
     @Test
     public void failOnLinkingObjectsWithInvalidFieldType() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
-                // Backlinks must be RealmResults
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 .type("BacklinkTarget")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("Fields annotated with @LinkingObjects must be RealmResults");
@@ -68,12 +66,12 @@ public void failOnLinkingObjectsWithInvalidFieldType() throws IOException {
 
     @Test
     public void failOnLinkingObjectsWithNonFinalField() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // A field with a @LinkingObjects annotation must be final
                 .modifiers(Modifier.PUBLIC)
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("must be final");
@@ -81,14 +79,14 @@ public void failOnLinkingObjectsWithNonFinalField() throws IOException {
 
     @Test
     public void failsOnLinkingObjectsWithLinkedFields() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // Defining a backlink more than one levels back is not supported.
                 // It can be queried though: `equalTo("selectedFieldParents.selectedFieldParents")
                 .clearAnnotations()
                 .annotation("LinkingObjects(\"child.id\")")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("The use of '.' to specify fields in referenced classes is not supported");
@@ -96,13 +94,13 @@ public void failsOnLinkingObjectsWithLinkedFields() throws IOException {
 
     @Test
     public void failsOnLinkingObjectsMissingFieldName() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // No backlinked field specified
                 .clearAnnotations()
                 .annotation("LinkingObjects")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("must have a parameter identifying the link target");
@@ -110,12 +108,12 @@ public void failsOnLinkingObjectsMissingFieldName() throws IOException {
 
     @Test
     public void failsOnLinkingObjectsMissingGeneric() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // No backlink generic param specified
                 .type("RealmResults")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("must specify a generic type");
@@ -123,12 +121,12 @@ public void failsOnLinkingObjectsMissingGeneric() throws IOException {
 
     @Test
     public void failsOnLinkingObjectsWithRequiredFields() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // A backlinked field may not be @Required
                 .annotation("Required")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("The @LinkingObjects field ");
@@ -136,12 +134,12 @@ public void failsOnLinkingObjectsWithRequiredFields() throws IOException {
 
     @Test
     public void failsOnLinkingObjectsWithIgnoreFields() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // An  @Ignored, backlinked field is completely ignored
                 .annotation("Ignore")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError();
     }
@@ -149,27 +147,27 @@ public void failsOnLinkingObjectsWithIgnoreFields() throws IOException {
     // TODO: This seems like a "gottcha".  We should warn.
     @Test
     public void ignoreStaticLinkingObjects() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 .modifiers(Modifier.PUBLIC, Modifier.STATIC)
                 .type("RealmResults")
                 .clearAnnotations()
                 .annotation("LinkingObjects(\"xxx\")")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError();
     }
 
     @Test
     public void failsOnLinkingObjectsFieldNotFound() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
-                // The argument to the @LinkingObjects annotation must name a field in the target class
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
+                // The argument to the @LinkingObjects annotation must name a field in the source class
                 .clearAnnotations()
                 .annotation("LinkingObjects(\"xxx\")")
                 .builder().build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("does not exist in class");
@@ -177,13 +175,13 @@ public void failsOnLinkingObjectsFieldNotFound() throws IOException {
 
     @Test
     public void failsOnLinkingObjectsWithFieldWrongType() throws IOException {
-        RealmSyntheticTestClass javaFileObject = createBacklinkTestClass()
+        RealmSyntheticTestClass targetClass = createBacklinkTestClass()
                 // The type of the field named in the @LinkingObjects annotation must match
-                // the generic type of the annotated field.  BacklinkTarget.child is a Backlink,
+                // the generic type of the annotated field.  BacklinkSource.child is a Backlink,
                 // not a Backlinks_WrongType.
-                .builder().name("Backlinks_WrongType").build();
+                .builder().name("BacklinkTarget_WrongType").build();
         ASSERT.about(javaSources())
-                .that(Arrays.asList(backlinksTarget, javaFileObject))
+                .that(Arrays.asList(sourceClass, targetClass))
                 .processedWith(new RealmProcessor())
                 .failsToCompile()
                 .withErrorContaining("instead of");
@@ -193,11 +191,11 @@ public void failsOnLinkingObjectsWithFieldWrongType() throws IOException {
     // It returns the ref to the backlinked Field.  Tests can modify the
     // field in perverse ways, to verify failure modes.
     private RealmSyntheticTestClass.Field createBacklinkTestClass() {
-        return new RealmSyntheticTestClass.Builder().name("Backlinks")
+        return new RealmSyntheticTestClass.Builder().name("BacklinkTarget")
                 .field().name("id").type("int").builder()
                 .field()
                     .name("parents")
-                    .type("RealmResults<BacklinkTarget>")
+                    .type("RealmResults<BacklinkSource>")
                     .modifiers(Modifier.PUBLIC, Modifier.FINAL)
                     .annotation("LinkingObjects(\"child\")")
                     .initializer("null")
@@ -212,4 +210,15 @@ public void failToCompileInvalidResultsElementType() {
                 .processedWith(new RealmProcessor())
                 .failsToCompile();
     }
+
+    @Test
+    public void compileBacklinkClassesWithSimpleNameConflicts() {
+        ASSERT.about(javaSources())
+                .that(Arrays.asList(
+                        JavaFileObjects.forResource("some/test/BacklinkSelfReference.java"),
+                        JavaFileObjects.forResource("some/test/conflict/BacklinkSelfReference.java")
+                ))
+                .processedWith(new RealmProcessor())
+                .compilesWithoutError();
+    }
 }
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmNameTest.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmNameTest.java
index 033cae1101..b8f7aa3677 100644
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmNameTest.java
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmNameTest.java
@@ -53,7 +53,7 @@ public void compareProcessedNamingPolicyClassFile() {
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError()
                 .and()
-                .generatesSources(JavaFileObjects.forResource("io/realm/NamePolicyMixedClassSettingsRealmProxy.java"));
+                .generatesSources(JavaFileObjects.forResource("io/realm/some_test_NamePolicyMixedClassSettingsRealmProxy.java"));
     }
 
     // Check the effect of module default on a class with no settings itself
@@ -67,7 +67,7 @@ public void compareProcessedDefaultClassFile() {
                 .processedWith(new RealmProcessor())
                 .compilesWithoutError()
                 .and()
-                .generatesSources(JavaFileObjects.forResource("io/realm/NamePolicyModuleDefaultsRealmProxy.java"));
+                .generatesSources(JavaFileObjects.forResource("io/realm/some_test_NamePolicyModuleDefaultsRealmProxy.java"));
     }
 
     // Check that trying to compile two modules with different policies using `allClasses = true` will fail.
diff --git a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
index ec043729e6..511adf03e1 100644
--- a/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
+++ b/realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java
@@ -33,13 +33,13 @@
 
 public class RealmProcessorTest {
     private final JavaFileObject simpleModel = JavaFileObjects.forResource("some/test/Simple.java");
-    private final JavaFileObject simpleProxy = JavaFileObjects.forResource("io/realm/SimpleRealmProxy.java");
+    private final JavaFileObject simpleProxy = JavaFileObjects.forResource("io/realm/some_test_SimpleRealmProxy.java");
     private final JavaFileObject allTypesModel = JavaFileObjects.forResource("some/test/AllTypes.java");
-    private final JavaFileObject allTypesProxy = JavaFileObjects.forResource("io/realm/AllTypesRealmProxy.java");
+    private final JavaFileObject allTypesProxy = JavaFileObjects.forResource("io/realm/some_test_AllTypesRealmProxy.java");
     private final JavaFileObject allTypesDefaultModule = JavaFileObjects.forResource("io/realm/RealmDefaultModule.java");
     private final JavaFileObject allTypesDefaultMediator = JavaFileObjects.forResource("io/realm/RealmDefaultModuleMediator.java");
     private final JavaFileObject booleansModel = JavaFileObjects.forResource("some/test/Booleans.java");
-    private final JavaFileObject booleansProxy = JavaFileObjects.forResource("io/realm/BooleansRealmProxy.java");
+    private final JavaFileObject booleansProxy = JavaFileObjects.forResource("io/realm/some_test_BooleansRealmProxy.java");
     private final JavaFileObject emptyModel = JavaFileObjects.forResource("some/test/Empty.java");
     private final JavaFileObject finalModel = JavaFileObjects.forResource("some/test/Final.java");
     private final JavaFileObject transientModel = JavaFileObjects.forResource("some/test/Transient.java");
@@ -47,7 +47,7 @@
     private final JavaFileObject fieldNamesModel = JavaFileObjects.forResource("some/test/FieldNames.java");
     private final JavaFileObject customAccessorModel = JavaFileObjects.forResource("some/test/CustomAccessor.java");
     private final JavaFileObject nullTypesModel = JavaFileObjects.forResource("some/test/NullTypes.java");
-    private final JavaFileObject nullTypesProxy = JavaFileObjects.forResource("io/realm/NullTypesRealmProxy.java");
+    private final JavaFileObject nullTypesProxy = JavaFileObjects.forResource("io/realm/some_test_NullTypesRealmProxy.java");
     private final JavaFileObject missingGenericTypeModel = JavaFileObjects.forResource("some/test/MissingGenericType.java");
     private final JavaFileObject conflictingFieldNameModel = JavaFileObjects.forResource("some/test/ConflictingFieldName.java");
     private final JavaFileObject invalidRealmModelModel_1 = JavaFileObjects.forResource("some/test/InvalidModelRealmModel_1.java");
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
index efb8bd8dab..0983dd6b14 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java
@@ -33,7 +33,7 @@
     @Override
     public Map<Class<? extends RealmModel>, OsObjectSchemaInfo> getExpectedObjectSchemaInfoMap() {
         Map<Class<? extends RealmModel>, OsObjectSchemaInfo> infoMap = new HashMap<Class<? extends RealmModel>, OsObjectSchemaInfo>(1);
-        infoMap.put(some.test.AllTypes.class, io.realm.AllTypesRealmProxy.getExpectedObjectSchemaInfo());
+        infoMap.put(some.test.AllTypes.class, io.realm.some_test_AllTypesRealmProxy.getExpectedObjectSchemaInfo());
         return infoMap;
     }
 
@@ -42,7 +42,7 @@ public ColumnInfo createColumnInfo(Class<? extends RealmModel> clazz, OsSchemaIn
         checkClass(clazz);
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            return io.realm.AllTypesRealmProxy.createColumnInfo(schemaInfo);
+            return io.realm.some_test_AllTypesRealmProxy.createColumnInfo(schemaInfo);
         }
         throw getMissingProxyClassException(clazz);
     }
@@ -65,7 +65,7 @@ public String getSimpleClassNameImpl(Class<? extends RealmModel> clazz) {
             checkClass(clazz);
 
             if (clazz.equals(some.test.AllTypes.class)) {
-                return clazz.cast(new io.realm.AllTypesRealmProxy());
+                return clazz.cast(new io.realm.some_test_AllTypesRealmProxy());
             }
             throw getMissingProxyClassException(clazz);
         } finally {
@@ -85,7 +85,7 @@ public String getSimpleClassNameImpl(Class<? extends RealmModel> clazz) {
         @SuppressWarnings("unchecked") Class<E> clazz = (Class<E>) ((obj instanceof RealmObjectProxy) ? obj.getClass().getSuperclass() : obj.getClass());
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            return clazz.cast(io.realm.AllTypesRealmProxy.copyOrUpdate(realm, (some.test.AllTypes) obj, update, cache));
+            return clazz.cast(io.realm.some_test_AllTypesRealmProxy.copyOrUpdate(realm, (some.test.AllTypes) obj, update, cache));
         }
         throw getMissingProxyClassException(clazz);
     }
@@ -97,7 +97,7 @@ public void insert(Realm realm, RealmModel object, Map<RealmModel, Long> cache)
         @SuppressWarnings("unchecked") Class<RealmModel> clazz = (Class<RealmModel>) ((object instanceof RealmObjectProxy) ? object.getClass().getSuperclass() : object.getClass());
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            io.realm.AllTypesRealmProxy.insert(realm, (some.test.AllTypes) object, cache);
+            io.realm.some_test_AllTypesRealmProxy.insert(realm, (some.test.AllTypes) object, cache);
         } else {
             throw getMissingProxyClassException(clazz);
         }
@@ -116,13 +116,13 @@ public void insert(Realm realm, Collection<? extends RealmModel> objects) {
             @SuppressWarnings("unchecked") Class<RealmModel> clazz = (Class<RealmModel>) ((object instanceof RealmObjectProxy) ? object.getClass().getSuperclass() : object.getClass());
 
             if (clazz.equals(some.test.AllTypes.class)) {
-                io.realm.AllTypesRealmProxy.insert(realm, (some.test.AllTypes) object, cache);
+                io.realm.some_test_AllTypesRealmProxy.insert(realm, (some.test.AllTypes) object, cache);
             } else {
                 throw getMissingProxyClassException(clazz);
             }
             if (iterator.hasNext()) {
                 if (clazz.equals(some.test.AllTypes.class)) {
-                    io.realm.AllTypesRealmProxy.insert(realm, iterator, cache);
+                    io.realm.some_test_AllTypesRealmProxy.insert(realm, iterator, cache);
                 } else {
                     throw getMissingProxyClassException(clazz);
                 }
@@ -137,7 +137,7 @@ public void insertOrUpdate(Realm realm, RealmModel obj, Map<RealmModel, Long> ca
         @SuppressWarnings("unchecked") Class<RealmModel> clazz = (Class<RealmModel>) ((obj instanceof RealmObjectProxy) ? obj.getClass().getSuperclass() : obj.getClass());
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            io.realm.AllTypesRealmProxy.insertOrUpdate(realm, (some.test.AllTypes) obj, cache);
+            io.realm.some_test_AllTypesRealmProxy.insertOrUpdate(realm, (some.test.AllTypes) obj, cache);
         } else {
             throw getMissingProxyClassException(clazz);
         }
@@ -156,13 +156,13 @@ public void insertOrUpdate(Realm realm, Collection<? extends RealmModel> objects
             @SuppressWarnings("unchecked") Class<RealmModel> clazz = (Class<RealmModel>) ((object instanceof RealmObjectProxy) ? object.getClass().getSuperclass() : object.getClass());
 
             if (clazz.equals(some.test.AllTypes.class)) {
-                io.realm.AllTypesRealmProxy.insertOrUpdate(realm, (some.test.AllTypes) object, cache);
+                io.realm.some_test_AllTypesRealmProxy.insertOrUpdate(realm, (some.test.AllTypes) object, cache);
             } else {
                 throw getMissingProxyClassException(clazz);
             }
             if (iterator.hasNext()) {
                 if (clazz.equals(some.test.AllTypes.class)) {
-                    io.realm.AllTypesRealmProxy.insertOrUpdate(realm, iterator, cache);
+                    io.realm.some_test_AllTypesRealmProxy.insertOrUpdate(realm, iterator, cache);
                 } else {
                     throw getMissingProxyClassException(clazz);
                 }
@@ -176,7 +176,7 @@ public void insertOrUpdate(Realm realm, Collection<? extends RealmModel> objects
         checkClass(clazz);
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            return clazz.cast(io.realm.AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json, update));
+            return clazz.cast(io.realm.some_test_AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json, update));
         }
         throw getMissingProxyClassException(clazz);
     }
@@ -187,7 +187,7 @@ public void insertOrUpdate(Realm realm, Collection<? extends RealmModel> objects
         checkClass(clazz);
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            return clazz.cast(io.realm.AllTypesRealmProxy.createUsingJsonStream(realm, reader));
+            return clazz.cast(io.realm.some_test_AllTypesRealmProxy.createUsingJsonStream(realm, reader));
         }
         throw getMissingProxyClassException(clazz);
     }
@@ -199,7 +199,7 @@ public void insertOrUpdate(Realm realm, Collection<? extends RealmModel> objects
         @SuppressWarnings("unchecked") Class<E> clazz = (Class<E>) realmObject.getClass().getSuperclass();
 
         if (clazz.equals(some.test.AllTypes.class)) {
-            return clazz.cast(io.realm.AllTypesRealmProxy.createDetachedCopy((some.test.AllTypes) realmObject, 0, maxDepth, cache));
+            return clazz.cast(io.realm.some_test_AllTypesRealmProxy.createDetachedCopy((some.test.AllTypes) realmObject, 0, maxDepth, cache));
         }
         throw getMissingProxyClassException(clazz);
     }
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java
similarity index 88%
rename from realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
rename to realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java
index 4351c458c9..5dcdcd1f45 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java
@@ -32,8 +32,8 @@
 import org.json.JSONObject;
 
 @SuppressWarnings("all")
-public class AllTypesRealmProxy extends some.test.AllTypes
-        implements RealmObjectProxy, AllTypesRealmProxyInterface {
+public class some_test_AllTypesRealmProxy extends some.test.AllTypes
+        implements RealmObjectProxy, some_test_AllTypesRealmProxyInterface {
 
     static final class AllTypesColumnInfo extends ColumnInfo {
         long columnStringIndex;
@@ -141,7 +141,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
     private RealmList<Date> columnDateListRealmList;
     private RealmResults<some.test.AllTypes> parentObjectsBacklinks;
 
-    AllTypesRealmProxy() {
+    some_test_AllTypesRealmProxy() {
         proxyState.setConstructionFinished();
     }
 
@@ -887,7 +887,7 @@ public static String getSimpleClassName() {
                 final BaseRealm.RealmObjectContext objectContext = BaseRealm.objectContext.get();
                 try {
                     objectContext.set(realm, table.getUncheckedRow(rowIndex), realm.getSchema().getColumnInfo(some.test.AllTypes.class), false, Collections.<String> emptyList());
-                    obj = new io.realm.AllTypesRealmProxy();
+                    obj = new io.realm.some_test_AllTypesRealmProxy();
                 } finally {
                     objectContext.clear();
                 }
@@ -932,16 +932,16 @@ public static String getSimpleClassName() {
             }
             if (json.has("columnString")) {
                 if (json.isNull("columnString")) {
-                    obj = (io.realm.AllTypesRealmProxy) realm.createObjectInternal(some.test.AllTypes.class, null, true, excludeFields);
+                    obj = (io.realm.some_test_AllTypesRealmProxy) realm.createObjectInternal(some.test.AllTypes.class, null, true, excludeFields);
                 } else {
-                    obj = (io.realm.AllTypesRealmProxy) realm.createObjectInternal(some.test.AllTypes.class, json.getString("columnString"), true, excludeFields);
+                    obj = (io.realm.some_test_AllTypesRealmProxy) realm.createObjectInternal(some.test.AllTypes.class, json.getString("columnString"), true, excludeFields);
                 }
             } else {
                 throw new IllegalArgumentException("JSON object doesn't have the primary key field 'columnString'.");
             }
         }
 
-        final AllTypesRealmProxyInterface objProxy = (AllTypesRealmProxyInterface) obj;
+        final some_test_AllTypesRealmProxyInterface objProxy = (some_test_AllTypesRealmProxyInterface) obj;
         if (json.has("columnLong")) {
             if (json.isNull("columnLong")) {
                 throw new IllegalArgumentException("Trying to set non-nullable field 'columnLong' to null.");
@@ -996,7 +996,7 @@ public static String getSimpleClassName() {
             if (json.isNull("columnObject")) {
                 objProxy.realmSet$columnObject(null);
             } else {
-                some.test.AllTypes columnObjectObj = AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("columnObject"), update);
+                some.test.AllTypes columnObjectObj = some_test_AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("columnObject"), update);
                 objProxy.realmSet$columnObject(columnObjectObj);
             }
         }
@@ -1007,7 +1007,7 @@ public static String getSimpleClassName() {
                 objProxy.realmGet$columnRealmList().clear();
                 JSONArray array = json.getJSONArray("columnRealmList");
                 for (int i = 0; i < array.length(); i++) {
-                    some.test.AllTypes item = AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
+                    some.test.AllTypes item = some_test_AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
                     objProxy.realmGet$columnRealmList().add(item);
                 }
             }
@@ -1031,7 +1031,7 @@ public static String getSimpleClassName() {
             throws IOException {
         boolean jsonHasPrimaryKey = false;
         final some.test.AllTypes obj = new some.test.AllTypes();
-        final AllTypesRealmProxyInterface objProxy = (AllTypesRealmProxyInterface) obj;
+        final some_test_AllTypesRealmProxyInterface objProxy = (some_test_AllTypesRealmProxyInterface) obj;
         reader.beginObject();
         while (reader.hasNext()) {
             String name = reader.nextName();
@@ -1104,7 +1104,7 @@ public static String getSimpleClassName() {
                     reader.skipValue();
                     objProxy.realmSet$columnObject(null);
                 } else {
-                    some.test.AllTypes columnObjectObj = AllTypesRealmProxy.createUsingJsonStream(realm, reader);
+                    some.test.AllTypes columnObjectObj = some_test_AllTypesRealmProxy.createUsingJsonStream(realm, reader);
                     objProxy.realmSet$columnObject(columnObjectObj);
                 }
             } else if (name.equals("columnRealmList")) {
@@ -1115,7 +1115,7 @@ public static String getSimpleClassName() {
                     objProxy.realmSet$columnRealmList(new RealmList<some.test.AllTypes>());
                     reader.beginArray();
                     while (reader.hasNext()) {
-                        some.test.AllTypes item = AllTypesRealmProxy.createUsingJsonStream(realm, reader);
+                        some.test.AllTypes item = some_test_AllTypesRealmProxy.createUsingJsonStream(realm, reader);
                         objProxy.realmGet$columnRealmList().add(item);
                     }
                     reader.endArray();
@@ -1173,7 +1173,7 @@ public static String getSimpleClassName() {
             Table table = realm.getTable(some.test.AllTypes.class);
             AllTypesColumnInfo columnInfo = (AllTypesColumnInfo) realm.getSchema().getColumnInfo(some.test.AllTypes.class);
             long pkColumnIndex = columnInfo.columnStringIndex;
-            String value = ((AllTypesRealmProxyInterface) object).realmGet$columnString();
+            String value = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnString();
             long rowIndex = Table.NO_MATCH;
             if (value == null) {
                 rowIndex = table.findFirstNull(pkColumnIndex);
@@ -1185,7 +1185,7 @@ public static String getSimpleClassName() {
             } else {
                 try {
                     objectContext.set(realm, table.getUncheckedRow(rowIndex), realm.getSchema().getColumnInfo(some.test.AllTypes.class), false, Collections.<String> emptyList());
-                    realmObject = new io.realm.AllTypesRealmProxy();
+                    realmObject = new io.realm.some_test_AllTypesRealmProxy();
                     cache.put(object, (RealmObjectProxy) realmObject);
                 } finally {
                     objectContext.clear();
@@ -1203,11 +1203,11 @@ public static String getSimpleClassName() {
         }
 
         // rejecting default values to avoid creating unexpected objects from RealmModel/RealmList fields.
-        some.test.AllTypes realmObject = realm.createObjectInternal(some.test.AllTypes.class, ((AllTypesRealmProxyInterface) newObject).realmGet$columnString(), false, Collections.<String>emptyList());
+        some.test.AllTypes realmObject = realm.createObjectInternal(some.test.AllTypes.class, ((some_test_AllTypesRealmProxyInterface) newObject).realmGet$columnString(), false, Collections.<String>emptyList());
         cache.put(newObject, (RealmObjectProxy) realmObject);
 
-        AllTypesRealmProxyInterface realmObjectSource = (AllTypesRealmProxyInterface) newObject;
-        AllTypesRealmProxyInterface realmObjectCopy = (AllTypesRealmProxyInterface) realmObject;
+        some_test_AllTypesRealmProxyInterface realmObjectSource = (some_test_AllTypesRealmProxyInterface) newObject;
+        some_test_AllTypesRealmProxyInterface realmObjectCopy = (some_test_AllTypesRealmProxyInterface) realmObject;
 
         realmObjectCopy.realmSet$columnLong(realmObjectSource.realmGet$columnLong());
         realmObjectCopy.realmSet$columnFloat(realmObjectSource.realmGet$columnFloat());
@@ -1226,7 +1226,7 @@ public static String getSimpleClassName() {
             if (cachecolumnObject != null) {
                 realmObjectCopy.realmSet$columnObject(cachecolumnObject);
             } else {
-                realmObjectCopy.realmSet$columnObject(AllTypesRealmProxy.copyOrUpdate(realm, columnObjectObj, update, cache));
+                realmObjectCopy.realmSet$columnObject(some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnObjectObj, update, cache));
             }
         }
 
@@ -1240,7 +1240,7 @@ public static String getSimpleClassName() {
                 if (cachecolumnRealmList != null) {
                     columnRealmListRealmList.add(cachecolumnRealmList);
                 } else {
-                    columnRealmListRealmList.add(AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, update, cache));
+                    columnRealmListRealmList.add(some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, update, cache));
                 }
             }
         }
@@ -1266,7 +1266,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
         long tableNativePtr = table.getNativePtr();
         AllTypesColumnInfo columnInfo = (AllTypesColumnInfo) realm.getSchema().getColumnInfo(some.test.AllTypes.class);
         long pkColumnIndex = columnInfo.columnStringIndex;
-        String primaryKeyValue = ((AllTypesRealmProxyInterface) object).realmGet$columnString();
+        String primaryKeyValue = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnString();
         long rowIndex = Table.NO_MATCH;
         if (primaryKeyValue == null) {
             rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
@@ -1279,45 +1279,45 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
         }
         cache.put(object, rowIndex);
-        Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
-        Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
-        Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
-        java.util.Date realmGet$columnDate = ((AllTypesRealmProxyInterface) object).realmGet$columnDate();
+        Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
+        Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
+        Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
+        java.util.Date realmGet$columnDate = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDate();
         if (realmGet$columnDate != null) {
             Table.nativeSetTimestamp(tableNativePtr, columnInfo.columnDateIndex, rowIndex, realmGet$columnDate.getTime(), false);
         }
-        byte[] realmGet$columnBinary = ((AllTypesRealmProxyInterface) object).realmGet$columnBinary();
+        byte[] realmGet$columnBinary = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinary();
         if (realmGet$columnBinary != null) {
             Table.nativeSetByteArray(tableNativePtr, columnInfo.columnBinaryIndex, rowIndex, realmGet$columnBinary, false);
         }
-        Long realmGet$columnMutableRealmInteger = ((AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
+        Long realmGet$columnMutableRealmInteger = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
         if (realmGet$columnMutableRealmInteger != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.columnMutableRealmIntegerIndex, rowIndex, realmGet$columnMutableRealmInteger.longValue(), false);
         }
 
-        some.test.AllTypes columnObjectObj = ((AllTypesRealmProxyInterface) object).realmGet$columnObject();
+        some.test.AllTypes columnObjectObj = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnObject();
         if (columnObjectObj != null) {
             Long cachecolumnObject = cache.get(columnObjectObj);
             if (cachecolumnObject == null) {
-                cachecolumnObject = AllTypesRealmProxy.insert(realm, columnObjectObj, cache);
+                cachecolumnObject = some_test_AllTypesRealmProxy.insert(realm, columnObjectObj, cache);
             }
             Table.nativeSetLink(tableNativePtr, columnInfo.columnObjectIndex, rowIndex, cachecolumnObject, false);
         }
 
-        RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
+        RealmList<some.test.AllTypes> columnRealmListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
         if (columnRealmListList != null) {
             OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
             for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
                 Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                 if (cacheItemIndexcolumnRealmList == null) {
-                    cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insert(realm, columnRealmListItem, cache);
+                    cacheItemIndexcolumnRealmList = some_test_AllTypesRealmProxy.insert(realm, columnRealmListItem, cache);
                 }
                 columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
             }
         }
 
-        RealmList<java.lang.String> columnStringListList = ((AllTypesRealmProxyInterface) object).realmGet$columnStringList();
+        RealmList<java.lang.String> columnStringListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnStringList();
         if (columnStringListList != null) {
             OsList columnStringListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnStringListIndex);
             for (java.lang.String columnStringListItem : columnStringListList) {
@@ -1329,7 +1329,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<byte[]> columnBinaryListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
+        RealmList<byte[]> columnBinaryListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
         if (columnBinaryListList != null) {
             OsList columnBinaryListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBinaryListIndex);
             for (byte[] columnBinaryListItem : columnBinaryListList) {
@@ -1341,7 +1341,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Boolean> columnBooleanListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
+        RealmList<java.lang.Boolean> columnBooleanListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
         if (columnBooleanListList != null) {
             OsList columnBooleanListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBooleanListIndex);
             for (java.lang.Boolean columnBooleanListItem : columnBooleanListList) {
@@ -1353,7 +1353,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Long> columnLongListList = ((AllTypesRealmProxyInterface) object).realmGet$columnLongList();
+        RealmList<java.lang.Long> columnLongListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLongList();
         if (columnLongListList != null) {
             OsList columnLongListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnLongListIndex);
             for (java.lang.Long columnLongListItem : columnLongListList) {
@@ -1365,7 +1365,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Integer> columnIntegerListList = ((AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
+        RealmList<java.lang.Integer> columnIntegerListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
         if (columnIntegerListList != null) {
             OsList columnIntegerListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnIntegerListIndex);
             for (java.lang.Integer columnIntegerListItem : columnIntegerListList) {
@@ -1377,7 +1377,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Short> columnShortListList = ((AllTypesRealmProxyInterface) object).realmGet$columnShortList();
+        RealmList<java.lang.Short> columnShortListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnShortList();
         if (columnShortListList != null) {
             OsList columnShortListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnShortListIndex);
             for (java.lang.Short columnShortListItem : columnShortListList) {
@@ -1389,7 +1389,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Byte> columnByteListList = ((AllTypesRealmProxyInterface) object).realmGet$columnByteList();
+        RealmList<java.lang.Byte> columnByteListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnByteList();
         if (columnByteListList != null) {
             OsList columnByteListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnByteListIndex);
             for (java.lang.Byte columnByteListItem : columnByteListList) {
@@ -1401,7 +1401,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Double> columnDoubleListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
+        RealmList<java.lang.Double> columnDoubleListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
         if (columnDoubleListList != null) {
             OsList columnDoubleListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDoubleListIndex);
             for (java.lang.Double columnDoubleListItem : columnDoubleListList) {
@@ -1413,7 +1413,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.lang.Float> columnFloatListList = ((AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
+        RealmList<java.lang.Float> columnFloatListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
         if (columnFloatListList != null) {
             OsList columnFloatListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnFloatListIndex);
             for (java.lang.Float columnFloatListItem : columnFloatListList) {
@@ -1425,7 +1425,7 @@ public static long insert(Realm realm, some.test.AllTypes object, Map<RealmModel
             }
         }
 
-        RealmList<java.util.Date> columnDateListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDateList();
+        RealmList<java.util.Date> columnDateListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDateList();
         if (columnDateListList != null) {
             OsList columnDateListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDateListIndex);
             for (java.util.Date columnDateListItem : columnDateListList) {
@@ -1454,7 +1454,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            String primaryKeyValue = ((AllTypesRealmProxyInterface) object).realmGet$columnString();
+            String primaryKeyValue = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnString();
             long rowIndex = Table.NO_MATCH;
             if (primaryKeyValue == null) {
                 rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
@@ -1467,45 +1467,45 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 Table.throwDuplicatePrimaryKeyException(primaryKeyValue);
             }
             cache.put(object, rowIndex);
-            Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
-            Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
-            Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
-            java.util.Date realmGet$columnDate = ((AllTypesRealmProxyInterface) object).realmGet$columnDate();
+            Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
+            Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
+            Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
+            java.util.Date realmGet$columnDate = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDate();
             if (realmGet$columnDate != null) {
                 Table.nativeSetTimestamp(tableNativePtr, columnInfo.columnDateIndex, rowIndex, realmGet$columnDate.getTime(), false);
             }
-            byte[] realmGet$columnBinary = ((AllTypesRealmProxyInterface) object).realmGet$columnBinary();
+            byte[] realmGet$columnBinary = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinary();
             if (realmGet$columnBinary != null) {
                 Table.nativeSetByteArray(tableNativePtr, columnInfo.columnBinaryIndex, rowIndex, realmGet$columnBinary, false);
             }
-            Long realmGet$columnMutableRealmInteger = ((AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
+            Long realmGet$columnMutableRealmInteger = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
             if (realmGet$columnMutableRealmInteger != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.columnMutableRealmIntegerIndex, rowIndex, realmGet$columnMutableRealmInteger.longValue(), false);
             }
 
-            some.test.AllTypes columnObjectObj = ((AllTypesRealmProxyInterface) object).realmGet$columnObject();
+            some.test.AllTypes columnObjectObj = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnObject();
             if (columnObjectObj != null) {
                 Long cachecolumnObject = cache.get(columnObjectObj);
                 if (cachecolumnObject == null) {
-                    cachecolumnObject = AllTypesRealmProxy.insert(realm, columnObjectObj, cache);
+                    cachecolumnObject = some_test_AllTypesRealmProxy.insert(realm, columnObjectObj, cache);
                 }
                 table.setLink(columnInfo.columnObjectIndex, rowIndex, cachecolumnObject, false);
             }
 
-            RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
+            RealmList<some.test.AllTypes> columnRealmListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
             if (columnRealmListList != null) {
                 OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
                 for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
                     Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                     if (cacheItemIndexcolumnRealmList == null) {
-                        cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insert(realm, columnRealmListItem, cache);
+                        cacheItemIndexcolumnRealmList = some_test_AllTypesRealmProxy.insert(realm, columnRealmListItem, cache);
                     }
                     columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
                 }
             }
 
-            RealmList<java.lang.String> columnStringListList = ((AllTypesRealmProxyInterface) object).realmGet$columnStringList();
+            RealmList<java.lang.String> columnStringListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnStringList();
             if (columnStringListList != null) {
                 OsList columnStringListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnStringListIndex);
                 for (java.lang.String columnStringListItem : columnStringListList) {
@@ -1517,7 +1517,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<byte[]> columnBinaryListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
+            RealmList<byte[]> columnBinaryListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
             if (columnBinaryListList != null) {
                 OsList columnBinaryListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBinaryListIndex);
                 for (byte[] columnBinaryListItem : columnBinaryListList) {
@@ -1529,7 +1529,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Boolean> columnBooleanListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
+            RealmList<java.lang.Boolean> columnBooleanListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
             if (columnBooleanListList != null) {
                 OsList columnBooleanListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBooleanListIndex);
                 for (java.lang.Boolean columnBooleanListItem : columnBooleanListList) {
@@ -1541,7 +1541,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Long> columnLongListList = ((AllTypesRealmProxyInterface) object).realmGet$columnLongList();
+            RealmList<java.lang.Long> columnLongListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLongList();
             if (columnLongListList != null) {
                 OsList columnLongListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnLongListIndex);
                 for (java.lang.Long columnLongListItem : columnLongListList) {
@@ -1553,7 +1553,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Integer> columnIntegerListList = ((AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
+            RealmList<java.lang.Integer> columnIntegerListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
             if (columnIntegerListList != null) {
                 OsList columnIntegerListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnIntegerListIndex);
                 for (java.lang.Integer columnIntegerListItem : columnIntegerListList) {
@@ -1565,7 +1565,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Short> columnShortListList = ((AllTypesRealmProxyInterface) object).realmGet$columnShortList();
+            RealmList<java.lang.Short> columnShortListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnShortList();
             if (columnShortListList != null) {
                 OsList columnShortListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnShortListIndex);
                 for (java.lang.Short columnShortListItem : columnShortListList) {
@@ -1577,7 +1577,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Byte> columnByteListList = ((AllTypesRealmProxyInterface) object).realmGet$columnByteList();
+            RealmList<java.lang.Byte> columnByteListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnByteList();
             if (columnByteListList != null) {
                 OsList columnByteListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnByteListIndex);
                 for (java.lang.Byte columnByteListItem : columnByteListList) {
@@ -1589,7 +1589,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Double> columnDoubleListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
+            RealmList<java.lang.Double> columnDoubleListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
             if (columnDoubleListList != null) {
                 OsList columnDoubleListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDoubleListIndex);
                 for (java.lang.Double columnDoubleListItem : columnDoubleListList) {
@@ -1601,7 +1601,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Float> columnFloatListList = ((AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
+            RealmList<java.lang.Float> columnFloatListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
             if (columnFloatListList != null) {
                 OsList columnFloatListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnFloatListIndex);
                 for (java.lang.Float columnFloatListItem : columnFloatListList) {
@@ -1613,7 +1613,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.util.Date> columnDateListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDateList();
+            RealmList<java.util.Date> columnDateListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDateList();
             if (columnDateListList != null) {
                 OsList columnDateListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDateListIndex);
                 for (java.util.Date columnDateListItem : columnDateListList) {
@@ -1635,7 +1635,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
         long tableNativePtr = table.getNativePtr();
         AllTypesColumnInfo columnInfo = (AllTypesColumnInfo) realm.getSchema().getColumnInfo(some.test.AllTypes.class);
         long pkColumnIndex = columnInfo.columnStringIndex;
-        String primaryKeyValue = ((AllTypesRealmProxyInterface) object).realmGet$columnString();
+        String primaryKeyValue = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnString();
         long rowIndex = Table.NO_MATCH;
         if (primaryKeyValue == null) {
             rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
@@ -1646,34 +1646,34 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
             rowIndex = OsObject.createRowWithPrimaryKey(table, pkColumnIndex, primaryKeyValue);
         }
         cache.put(object, rowIndex);
-        Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
-        Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
-        Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
-        java.util.Date realmGet$columnDate = ((AllTypesRealmProxyInterface) object).realmGet$columnDate();
+        Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
+        Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
+        Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
+        java.util.Date realmGet$columnDate = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDate();
         if (realmGet$columnDate != null) {
             Table.nativeSetTimestamp(tableNativePtr, columnInfo.columnDateIndex, rowIndex, realmGet$columnDate.getTime(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.columnDateIndex, rowIndex, false);
         }
-        byte[] realmGet$columnBinary = ((AllTypesRealmProxyInterface) object).realmGet$columnBinary();
+        byte[] realmGet$columnBinary = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinary();
         if (realmGet$columnBinary != null) {
             Table.nativeSetByteArray(tableNativePtr, columnInfo.columnBinaryIndex, rowIndex, realmGet$columnBinary, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.columnBinaryIndex, rowIndex, false);
         }
-        Long realmGet$columnMutableRealmInteger = ((AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
+        Long realmGet$columnMutableRealmInteger = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
         if (realmGet$columnMutableRealmInteger != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.columnMutableRealmIntegerIndex, rowIndex, realmGet$columnMutableRealmInteger.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.columnMutableRealmIntegerIndex, rowIndex, false);
         }
 
-        some.test.AllTypes columnObjectObj = ((AllTypesRealmProxyInterface) object).realmGet$columnObject();
+        some.test.AllTypes columnObjectObj = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnObject();
         if (columnObjectObj != null) {
             Long cachecolumnObject = cache.get(columnObjectObj);
             if (cachecolumnObject == null) {
-                cachecolumnObject = AllTypesRealmProxy.insertOrUpdate(realm, columnObjectObj, cache);
+                cachecolumnObject = some_test_AllTypesRealmProxy.insertOrUpdate(realm, columnObjectObj, cache);
             }
             Table.nativeSetLink(tableNativePtr, columnInfo.columnObjectIndex, rowIndex, cachecolumnObject, false);
         } else {
@@ -1681,7 +1681,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
         }
 
         OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
-        RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
+        RealmList<some.test.AllTypes> columnRealmListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
         if (columnRealmListList != null && columnRealmListList.size() == columnRealmListOsList.size()) {
             // For lists of equal lengths, we need to set each element directly as clearing the receiver list can be wrong if the input and target list are the same.
             int objects = columnRealmListList.size();
@@ -1689,7 +1689,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
                 some.test.AllTypes columnRealmListItem = columnRealmListList.get(i);
                 Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                 if (cacheItemIndexcolumnRealmList == null) {
-                    cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
+                    cacheItemIndexcolumnRealmList = some_test_AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
                 }
                 columnRealmListOsList.setRow(i, cacheItemIndexcolumnRealmList);
             }
@@ -1699,7 +1699,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
                 for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
                     Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                     if (cacheItemIndexcolumnRealmList == null) {
-                        cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
+                        cacheItemIndexcolumnRealmList = some_test_AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
                     }
                     columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
                 }
@@ -1709,7 +1709,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnStringListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnStringListIndex);
         columnStringListOsList.removeAll();
-        RealmList<java.lang.String> columnStringListList = ((AllTypesRealmProxyInterface) object).realmGet$columnStringList();
+        RealmList<java.lang.String> columnStringListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnStringList();
         if (columnStringListList != null) {
             for (java.lang.String columnStringListItem : columnStringListList) {
                 if (columnStringListItem == null) {
@@ -1723,7 +1723,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnBinaryListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBinaryListIndex);
         columnBinaryListOsList.removeAll();
-        RealmList<byte[]> columnBinaryListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
+        RealmList<byte[]> columnBinaryListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
         if (columnBinaryListList != null) {
             for (byte[] columnBinaryListItem : columnBinaryListList) {
                 if (columnBinaryListItem == null) {
@@ -1737,7 +1737,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnBooleanListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBooleanListIndex);
         columnBooleanListOsList.removeAll();
-        RealmList<java.lang.Boolean> columnBooleanListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
+        RealmList<java.lang.Boolean> columnBooleanListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
         if (columnBooleanListList != null) {
             for (java.lang.Boolean columnBooleanListItem : columnBooleanListList) {
                 if (columnBooleanListItem == null) {
@@ -1751,7 +1751,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnLongListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnLongListIndex);
         columnLongListOsList.removeAll();
-        RealmList<java.lang.Long> columnLongListList = ((AllTypesRealmProxyInterface) object).realmGet$columnLongList();
+        RealmList<java.lang.Long> columnLongListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLongList();
         if (columnLongListList != null) {
             for (java.lang.Long columnLongListItem : columnLongListList) {
                 if (columnLongListItem == null) {
@@ -1765,7 +1765,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnIntegerListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnIntegerListIndex);
         columnIntegerListOsList.removeAll();
-        RealmList<java.lang.Integer> columnIntegerListList = ((AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
+        RealmList<java.lang.Integer> columnIntegerListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
         if (columnIntegerListList != null) {
             for (java.lang.Integer columnIntegerListItem : columnIntegerListList) {
                 if (columnIntegerListItem == null) {
@@ -1779,7 +1779,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnShortListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnShortListIndex);
         columnShortListOsList.removeAll();
-        RealmList<java.lang.Short> columnShortListList = ((AllTypesRealmProxyInterface) object).realmGet$columnShortList();
+        RealmList<java.lang.Short> columnShortListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnShortList();
         if (columnShortListList != null) {
             for (java.lang.Short columnShortListItem : columnShortListList) {
                 if (columnShortListItem == null) {
@@ -1793,7 +1793,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnByteListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnByteListIndex);
         columnByteListOsList.removeAll();
-        RealmList<java.lang.Byte> columnByteListList = ((AllTypesRealmProxyInterface) object).realmGet$columnByteList();
+        RealmList<java.lang.Byte> columnByteListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnByteList();
         if (columnByteListList != null) {
             for (java.lang.Byte columnByteListItem : columnByteListList) {
                 if (columnByteListItem == null) {
@@ -1807,7 +1807,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnDoubleListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDoubleListIndex);
         columnDoubleListOsList.removeAll();
-        RealmList<java.lang.Double> columnDoubleListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
+        RealmList<java.lang.Double> columnDoubleListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
         if (columnDoubleListList != null) {
             for (java.lang.Double columnDoubleListItem : columnDoubleListList) {
                 if (columnDoubleListItem == null) {
@@ -1821,7 +1821,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnFloatListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnFloatListIndex);
         columnFloatListOsList.removeAll();
-        RealmList<java.lang.Float> columnFloatListList = ((AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
+        RealmList<java.lang.Float> columnFloatListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
         if (columnFloatListList != null) {
             for (java.lang.Float columnFloatListItem : columnFloatListList) {
                 if (columnFloatListItem == null) {
@@ -1835,7 +1835,7 @@ public static long insertOrUpdate(Realm realm, some.test.AllTypes object, Map<Re
 
         OsList columnDateListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDateListIndex);
         columnDateListOsList.removeAll();
-        RealmList<java.util.Date> columnDateListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDateList();
+        RealmList<java.util.Date> columnDateListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDateList();
         if (columnDateListList != null) {
             for (java.util.Date columnDateListItem : columnDateListList) {
                 if (columnDateListItem == null) {
@@ -1864,7 +1864,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                 continue;
             }
-            String primaryKeyValue = ((AllTypesRealmProxyInterface) object).realmGet$columnString();
+            String primaryKeyValue = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnString();
             long rowIndex = Table.NO_MATCH;
             if (primaryKeyValue == null) {
                 rowIndex = Table.nativeFindFirstNull(tableNativePtr, pkColumnIndex);
@@ -1875,34 +1875,34 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 rowIndex = OsObject.createRowWithPrimaryKey(table, pkColumnIndex, primaryKeyValue);
             }
             cache.put(object, rowIndex);
-            Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
-            Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
-            Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
-            java.util.Date realmGet$columnDate = ((AllTypesRealmProxyInterface) object).realmGet$columnDate();
+            Table.nativeSetLong(tableNativePtr, columnInfo.columnLongIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLong(), false);
+            Table.nativeSetFloat(tableNativePtr, columnInfo.columnFloatIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloat(), false);
+            Table.nativeSetDouble(tableNativePtr, columnInfo.columnDoubleIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDouble(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.columnBooleanIndex, rowIndex, ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBoolean(), false);
+            java.util.Date realmGet$columnDate = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDate();
             if (realmGet$columnDate != null) {
                 Table.nativeSetTimestamp(tableNativePtr, columnInfo.columnDateIndex, rowIndex, realmGet$columnDate.getTime(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.columnDateIndex, rowIndex, false);
             }
-            byte[] realmGet$columnBinary = ((AllTypesRealmProxyInterface) object).realmGet$columnBinary();
+            byte[] realmGet$columnBinary = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinary();
             if (realmGet$columnBinary != null) {
                 Table.nativeSetByteArray(tableNativePtr, columnInfo.columnBinaryIndex, rowIndex, realmGet$columnBinary, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.columnBinaryIndex, rowIndex, false);
             }
-            Long realmGet$columnMutableRealmInteger = ((AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
+            Long realmGet$columnMutableRealmInteger = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnMutableRealmInteger().get();
             if (realmGet$columnMutableRealmInteger != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.columnMutableRealmIntegerIndex, rowIndex, realmGet$columnMutableRealmInteger.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.columnMutableRealmIntegerIndex, rowIndex, false);
             }
 
-            some.test.AllTypes columnObjectObj = ((AllTypesRealmProxyInterface) object).realmGet$columnObject();
+            some.test.AllTypes columnObjectObj = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnObject();
             if (columnObjectObj != null) {
                 Long cachecolumnObject = cache.get(columnObjectObj);
                 if (cachecolumnObject == null) {
-                    cachecolumnObject = AllTypesRealmProxy.insertOrUpdate(realm, columnObjectObj, cache);
+                    cachecolumnObject = some_test_AllTypesRealmProxy.insertOrUpdate(realm, columnObjectObj, cache);
                 }
                 Table.nativeSetLink(tableNativePtr, columnInfo.columnObjectIndex, rowIndex, cachecolumnObject, false);
             } else {
@@ -1910,7 +1910,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             }
 
             OsList columnRealmListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnRealmListIndex);
-            RealmList<some.test.AllTypes> columnRealmListList = ((AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
+            RealmList<some.test.AllTypes> columnRealmListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnRealmList();
             if (columnRealmListList != null && columnRealmListList.size() == columnRealmListOsList.size()) {
                 // For lists of equal lengths, we need to set each element directly as clearing the receiver list can be wrong if the input and target list are the same.
                 int objectCount = columnRealmListList.size();
@@ -1918,7 +1918,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     some.test.AllTypes columnRealmListItem = columnRealmListList.get(i);
                     Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                     if (cacheItemIndexcolumnRealmList == null) {
-                        cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
+                        cacheItemIndexcolumnRealmList = some_test_AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
                     }
                     columnRealmListOsList.setRow(i, cacheItemIndexcolumnRealmList);
                 }
@@ -1928,7 +1928,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     for (some.test.AllTypes columnRealmListItem : columnRealmListList) {
                         Long cacheItemIndexcolumnRealmList = cache.get(columnRealmListItem);
                         if (cacheItemIndexcolumnRealmList == null) {
-                            cacheItemIndexcolumnRealmList = AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
+                            cacheItemIndexcolumnRealmList = some_test_AllTypesRealmProxy.insertOrUpdate(realm, columnRealmListItem, cache);
                         }
                         columnRealmListOsList.addRow(cacheItemIndexcolumnRealmList);
                     }
@@ -1938,7 +1938,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnStringListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnStringListIndex);
             columnStringListOsList.removeAll();
-            RealmList<java.lang.String> columnStringListList = ((AllTypesRealmProxyInterface) object).realmGet$columnStringList();
+            RealmList<java.lang.String> columnStringListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnStringList();
             if (columnStringListList != null) {
                 for (java.lang.String columnStringListItem : columnStringListList) {
                     if (columnStringListItem == null) {
@@ -1952,7 +1952,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnBinaryListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBinaryListIndex);
             columnBinaryListOsList.removeAll();
-            RealmList<byte[]> columnBinaryListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
+            RealmList<byte[]> columnBinaryListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBinaryList();
             if (columnBinaryListList != null) {
                 for (byte[] columnBinaryListItem : columnBinaryListList) {
                     if (columnBinaryListItem == null) {
@@ -1966,7 +1966,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnBooleanListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnBooleanListIndex);
             columnBooleanListOsList.removeAll();
-            RealmList<java.lang.Boolean> columnBooleanListList = ((AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
+            RealmList<java.lang.Boolean> columnBooleanListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnBooleanList();
             if (columnBooleanListList != null) {
                 for (java.lang.Boolean columnBooleanListItem : columnBooleanListList) {
                     if (columnBooleanListItem == null) {
@@ -1980,7 +1980,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnLongListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnLongListIndex);
             columnLongListOsList.removeAll();
-            RealmList<java.lang.Long> columnLongListList = ((AllTypesRealmProxyInterface) object).realmGet$columnLongList();
+            RealmList<java.lang.Long> columnLongListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnLongList();
             if (columnLongListList != null) {
                 for (java.lang.Long columnLongListItem : columnLongListList) {
                     if (columnLongListItem == null) {
@@ -1994,7 +1994,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnIntegerListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnIntegerListIndex);
             columnIntegerListOsList.removeAll();
-            RealmList<java.lang.Integer> columnIntegerListList = ((AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
+            RealmList<java.lang.Integer> columnIntegerListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnIntegerList();
             if (columnIntegerListList != null) {
                 for (java.lang.Integer columnIntegerListItem : columnIntegerListList) {
                     if (columnIntegerListItem == null) {
@@ -2008,7 +2008,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnShortListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnShortListIndex);
             columnShortListOsList.removeAll();
-            RealmList<java.lang.Short> columnShortListList = ((AllTypesRealmProxyInterface) object).realmGet$columnShortList();
+            RealmList<java.lang.Short> columnShortListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnShortList();
             if (columnShortListList != null) {
                 for (java.lang.Short columnShortListItem : columnShortListList) {
                     if (columnShortListItem == null) {
@@ -2022,7 +2022,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnByteListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnByteListIndex);
             columnByteListOsList.removeAll();
-            RealmList<java.lang.Byte> columnByteListList = ((AllTypesRealmProxyInterface) object).realmGet$columnByteList();
+            RealmList<java.lang.Byte> columnByteListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnByteList();
             if (columnByteListList != null) {
                 for (java.lang.Byte columnByteListItem : columnByteListList) {
                     if (columnByteListItem == null) {
@@ -2036,7 +2036,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnDoubleListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDoubleListIndex);
             columnDoubleListOsList.removeAll();
-            RealmList<java.lang.Double> columnDoubleListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
+            RealmList<java.lang.Double> columnDoubleListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDoubleList();
             if (columnDoubleListList != null) {
                 for (java.lang.Double columnDoubleListItem : columnDoubleListList) {
                     if (columnDoubleListItem == null) {
@@ -2050,7 +2050,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnFloatListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnFloatListIndex);
             columnFloatListOsList.removeAll();
-            RealmList<java.lang.Float> columnFloatListList = ((AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
+            RealmList<java.lang.Float> columnFloatListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnFloatList();
             if (columnFloatListList != null) {
                 for (java.lang.Float columnFloatListItem : columnFloatListList) {
                     if (columnFloatListItem == null) {
@@ -2064,7 +2064,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList columnDateListOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.columnDateListIndex);
             columnDateListOsList.removeAll();
-            RealmList<java.util.Date> columnDateListList = ((AllTypesRealmProxyInterface) object).realmGet$columnDateList();
+            RealmList<java.util.Date> columnDateListList = ((some_test_AllTypesRealmProxyInterface) object).realmGet$columnDateList();
             if (columnDateListList != null) {
                 for (java.util.Date columnDateListItem : columnDateListList) {
                     if (columnDateListItem == null) {
@@ -2095,8 +2095,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             unmanagedObject = (some.test.AllTypes) cachedObject.object;
             cachedObject.minDepth = currentDepth;
         }
-        AllTypesRealmProxyInterface unmanagedCopy = (AllTypesRealmProxyInterface) unmanagedObject;
-        AllTypesRealmProxyInterface realmSource = (AllTypesRealmProxyInterface) realmObject;
+        some_test_AllTypesRealmProxyInterface unmanagedCopy = (some_test_AllTypesRealmProxyInterface) unmanagedObject;
+        some_test_AllTypesRealmProxyInterface realmSource = (some_test_AllTypesRealmProxyInterface) realmObject;
         unmanagedCopy.realmSet$columnString(realmSource.realmGet$columnString());
         unmanagedCopy.realmSet$columnLong(realmSource.realmGet$columnLong());
         unmanagedCopy.realmSet$columnFloat(realmSource.realmGet$columnFloat());
@@ -2107,7 +2107,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
         unmanagedCopy.realmGet$columnMutableRealmInteger().set(realmSource.realmGet$columnMutableRealmInteger().get());
 
         // Deep copy of columnObject
-        unmanagedCopy.realmSet$columnObject(AllTypesRealmProxy.createDetachedCopy(realmSource.realmGet$columnObject(), currentDepth + 1, maxDepth, cache));
+        unmanagedCopy.realmSet$columnObject(some_test_AllTypesRealmProxy.createDetachedCopy(realmSource.realmGet$columnObject(), currentDepth + 1, maxDepth, cache));
 
         // Deep copy of columnRealmList
         if (currentDepth == maxDepth) {
@@ -2119,7 +2119,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             int nextDepth = currentDepth + 1;
             int size = managedcolumnRealmListList.size();
             for (int i = 0; i < size; i++) {
-                some.test.AllTypes item = AllTypesRealmProxy.createDetachedCopy(managedcolumnRealmListList.get(i), nextDepth, maxDepth, cache);
+                some.test.AllTypes item = some_test_AllTypesRealmProxy.createDetachedCopy(managedcolumnRealmListList.get(i), nextDepth, maxDepth, cache);
                 unmanagedcolumnRealmListList.add(item);
             }
         }
@@ -2158,8 +2158,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
     }
 
     static some.test.AllTypes update(Realm realm, some.test.AllTypes realmObject, some.test.AllTypes newObject, Map<RealmModel, RealmObjectProxy> cache) {
-        AllTypesRealmProxyInterface realmObjectTarget = (AllTypesRealmProxyInterface) realmObject;
-        AllTypesRealmProxyInterface realmObjectSource = (AllTypesRealmProxyInterface) newObject;
+        some_test_AllTypesRealmProxyInterface realmObjectTarget = (some_test_AllTypesRealmProxyInterface) realmObject;
+        some_test_AllTypesRealmProxyInterface realmObjectSource = (some_test_AllTypesRealmProxyInterface) newObject;
         realmObjectTarget.realmSet$columnLong(realmObjectSource.realmGet$columnLong());
         realmObjectTarget.realmSet$columnFloat(realmObjectSource.realmGet$columnFloat());
         realmObjectTarget.realmSet$columnDouble(realmObjectSource.realmGet$columnDouble());
@@ -2175,7 +2175,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             if (cachecolumnObject != null) {
                 realmObjectTarget.realmSet$columnObject(cachecolumnObject);
             } else {
-                realmObjectTarget.realmSet$columnObject(AllTypesRealmProxy.copyOrUpdate(realm, columnObjectObj, true, cache));
+                realmObjectTarget.realmSet$columnObject(some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnObjectObj, true, cache));
             }
         }
         RealmList<some.test.AllTypes> columnRealmListList = realmObjectSource.realmGet$columnRealmList();
@@ -2189,7 +2189,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                 if (cachecolumnRealmList != null) {
                     columnRealmListRealmList.set(i, cachecolumnRealmList);
                 } else {
-                    columnRealmListRealmList.set(i, AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, true, cache));
+                    columnRealmListRealmList.set(i, some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, true, cache));
                 }
             }
         } else {
@@ -2201,7 +2201,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
                     if (cachecolumnRealmList != null) {
                         columnRealmListRealmList.add(cachecolumnRealmList);
                     } else {
-                        columnRealmListRealmList.add(AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, true, cache));
+                        columnRealmListRealmList.add(some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, true, cache));
                     }
                 }
             }
@@ -2331,7 +2331,7 @@ public int hashCode() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        AllTypesRealmProxy aAllTypes = (AllTypesRealmProxy)o;
+        some_test_AllTypesRealmProxy aAllTypes = (some_test_AllTypesRealmProxy)o;
 
         String path = proxyState.getRealm$realm().getPath();
         String otherPath = aAllTypes.proxyState.getRealm$realm().getPath();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java
similarity index 89%
rename from realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
rename to realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java
index f0a55dba46..d2c9f22cff 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java
@@ -31,8 +31,8 @@
 import org.json.JSONObject;
 
 @SuppressWarnings("all")
-public class BooleansRealmProxy extends some.test.Booleans
-        implements RealmObjectProxy, BooleansRealmProxyInterface {
+public class some_test_BooleansRealmProxy extends some.test.Booleans
+        implements RealmObjectProxy, some_test_BooleansRealmProxyInterface {
 
     static final class BooleansColumnInfo extends ColumnInfo {
         long doneIndex;
@@ -75,7 +75,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
     private BooleansColumnInfo columnInfo;
     private ProxyState<some.test.Booleans> proxyState;
 
-    BooleansRealmProxy() {
+    some_test_BooleansRealmProxy() {
         proxyState.setConstructionFinished();
     }
 
@@ -208,7 +208,7 @@ public static String getSimpleClassName() {
         final List<String> excludeFields = Collections.<String> emptyList();
         some.test.Booleans obj = realm.createObjectInternal(some.test.Booleans.class, true, excludeFields);
 
-        final BooleansRealmProxyInterface objProxy = (BooleansRealmProxyInterface) obj;
+        final some_test_BooleansRealmProxyInterface objProxy = (some_test_BooleansRealmProxyInterface) obj;
         if (json.has("done")) {
             if (json.isNull("done")) {
                 throw new IllegalArgumentException("Trying to set non-nullable field 'done' to null.");
@@ -245,7 +245,7 @@ public static String getSimpleClassName() {
     public static some.test.Booleans createUsingJsonStream(Realm realm, JsonReader reader)
             throws IOException {
         final some.test.Booleans obj = new some.test.Booleans();
-        final BooleansRealmProxyInterface objProxy = (BooleansRealmProxyInterface) obj;
+        final some_test_BooleansRealmProxyInterface objProxy = (some_test_BooleansRealmProxyInterface) obj;
         reader.beginObject();
         while (reader.hasNext()) {
             String name = reader.nextName();
@@ -315,8 +315,8 @@ public static String getSimpleClassName() {
         some.test.Booleans realmObject = realm.createObjectInternal(some.test.Booleans.class, false, Collections.<String>emptyList());
         cache.put(newObject, (RealmObjectProxy) realmObject);
 
-        BooleansRealmProxyInterface realmObjectSource = (BooleansRealmProxyInterface) newObject;
-        BooleansRealmProxyInterface realmObjectCopy = (BooleansRealmProxyInterface) realmObject;
+        some_test_BooleansRealmProxyInterface realmObjectSource = (some_test_BooleansRealmProxyInterface) newObject;
+        some_test_BooleansRealmProxyInterface realmObjectCopy = (some_test_BooleansRealmProxyInterface) realmObject;
 
         realmObjectCopy.realmSet$done(realmObjectSource.realmGet$done());
         realmObjectCopy.realmSet$isReady(realmObjectSource.realmGet$isReady());
@@ -334,10 +334,10 @@ public static long insert(Realm realm, some.test.Booleans object, Map<RealmModel
         BooleansColumnInfo columnInfo = (BooleansColumnInfo) realm.getSchema().getColumnInfo(some.test.Booleans.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$done(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$isReady(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
         return rowIndex;
     }
 
@@ -357,10 +357,10 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$done(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$isReady(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
         }
     }
 
@@ -373,10 +373,10 @@ public static long insertOrUpdate(Realm realm, some.test.Booleans object, Map<Re
         BooleansColumnInfo columnInfo = (BooleansColumnInfo) realm.getSchema().getColumnInfo(some.test.Booleans.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
-        Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$done(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$isReady(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
+        Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
         return rowIndex;
     }
 
@@ -396,10 +396,10 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$done(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$isReady(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
-            Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.doneIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$done(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.isReadyIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$isReady(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.mCompletedIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$mCompleted(), false);
+            Table.nativeSetBoolean(tableNativePtr, columnInfo.anotherBooleanIndex, rowIndex, ((some_test_BooleansRealmProxyInterface) object).realmGet$anotherBoolean(), false);
         }
     }
 
@@ -420,8 +420,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             unmanagedObject = (some.test.Booleans) cachedObject.object;
             cachedObject.minDepth = currentDepth;
         }
-        BooleansRealmProxyInterface unmanagedCopy = (BooleansRealmProxyInterface) unmanagedObject;
-        BooleansRealmProxyInterface realmSource = (BooleansRealmProxyInterface) realmObject;
+        some_test_BooleansRealmProxyInterface unmanagedCopy = (some_test_BooleansRealmProxyInterface) unmanagedObject;
+        some_test_BooleansRealmProxyInterface realmSource = (some_test_BooleansRealmProxyInterface) realmObject;
         unmanagedCopy.realmSet$done(realmSource.realmGet$done());
         unmanagedCopy.realmSet$isReady(realmSource.realmGet$isReady());
         unmanagedCopy.realmSet$mCompleted(realmSource.realmGet$mCompleted());
@@ -478,7 +478,7 @@ public int hashCode() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        BooleansRealmProxy aBooleans = (BooleansRealmProxy)o;
+        some_test_BooleansRealmProxy aBooleans = (some_test_BooleansRealmProxy)o;
 
         String path = proxyState.getRealm$realm().getPath();
         String otherPath = aBooleans.proxyState.getRealm$realm().getPath();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NamePolicyMixedClassSettingsRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NamePolicyMixedClassSettingsRealmProxy.java
similarity index 89%
rename from realm/realm-annotations-processor/src/test/resources/io/realm/NamePolicyMixedClassSettingsRealmProxy.java
rename to realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NamePolicyMixedClassSettingsRealmProxy.java
index 5b37b1c93c..eb71397828 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NamePolicyMixedClassSettingsRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NamePolicyMixedClassSettingsRealmProxy.java
@@ -31,8 +31,8 @@
 import org.json.JSONObject;
 
 @SuppressWarnings("all")
-public class NamePolicyMixedClassSettingsRealmProxy extends some.test.NamePolicyMixedClassSettings
-        implements RealmObjectProxy, NamePolicyMixedClassSettingsRealmProxyInterface {
+public class some_test_NamePolicyMixedClassSettingsRealmProxy extends some.test.NamePolicyMixedClassSettings
+        implements RealmObjectProxy, some_test_NamePolicyMixedClassSettingsRealmProxyInterface {
 
     static final class NamePolicyMixedClassSettingsColumnInfo extends ColumnInfo {
         long firstNameIndex;
@@ -69,7 +69,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
     private NamePolicyMixedClassSettingsColumnInfo columnInfo;
     private ProxyState<some.test.NamePolicyMixedClassSettings> proxyState;
 
-    NamePolicyMixedClassSettingsRealmProxy() {
+    some_test_NamePolicyMixedClassSettingsRealmProxy() {
         proxyState.setConstructionFinished();
     }
 
@@ -172,7 +172,7 @@ public static String getSimpleClassName() {
         final List<String> excludeFields = Collections.<String> emptyList();
         some.test.NamePolicyMixedClassSettings obj = realm.createObjectInternal(some.test.NamePolicyMixedClassSettings.class, true, excludeFields);
 
-        final NamePolicyMixedClassSettingsRealmProxyInterface objProxy = (NamePolicyMixedClassSettingsRealmProxyInterface) obj;
+        final some_test_NamePolicyMixedClassSettingsRealmProxyInterface objProxy = (some_test_NamePolicyMixedClassSettingsRealmProxyInterface) obj;
         if (json.has("firstName")) {
             if (json.isNull("firstName")) {
                 objProxy.realmSet$firstName(null);
@@ -195,7 +195,7 @@ public static String getSimpleClassName() {
     public static some.test.NamePolicyMixedClassSettings createUsingJsonStream(Realm realm, JsonReader reader)
             throws IOException {
         final some.test.NamePolicyMixedClassSettings obj = new some.test.NamePolicyMixedClassSettings();
-        final NamePolicyMixedClassSettingsRealmProxyInterface objProxy = (NamePolicyMixedClassSettingsRealmProxyInterface) obj;
+        final some_test_NamePolicyMixedClassSettingsRealmProxyInterface objProxy = (some_test_NamePolicyMixedClassSettingsRealmProxyInterface) obj;
         reader.beginObject();
         while (reader.hasNext()) {
             String name = reader.nextName();
@@ -251,8 +251,8 @@ public static String getSimpleClassName() {
         some.test.NamePolicyMixedClassSettings realmObject = realm.createObjectInternal(some.test.NamePolicyMixedClassSettings.class, false, Collections.<String>emptyList());
         cache.put(newObject, (RealmObjectProxy) realmObject);
 
-        NamePolicyMixedClassSettingsRealmProxyInterface realmObjectSource = (NamePolicyMixedClassSettingsRealmProxyInterface) newObject;
-        NamePolicyMixedClassSettingsRealmProxyInterface realmObjectCopy = (NamePolicyMixedClassSettingsRealmProxyInterface) realmObject;
+        some_test_NamePolicyMixedClassSettingsRealmProxyInterface realmObjectSource = (some_test_NamePolicyMixedClassSettingsRealmProxyInterface) newObject;
+        some_test_NamePolicyMixedClassSettingsRealmProxyInterface realmObjectCopy = (some_test_NamePolicyMixedClassSettingsRealmProxyInterface) realmObject;
 
         realmObjectCopy.realmSet$firstName(realmObjectSource.realmGet$firstName());
         realmObjectCopy.realmSet$lastName(realmObjectSource.realmGet$lastName());
@@ -268,11 +268,11 @@ public static long insert(Realm realm, some.test.NamePolicyMixedClassSettings ob
         NamePolicyMixedClassSettingsColumnInfo columnInfo = (NamePolicyMixedClassSettingsColumnInfo) realm.getSchema().getColumnInfo(some.test.NamePolicyMixedClassSettings.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$firstName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
+        String realmGet$firstName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
         if (realmGet$firstName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
         }
-        String realmGet$lastName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
+        String realmGet$lastName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
         if (realmGet$lastName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
         }
@@ -295,11 +295,11 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$firstName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
+            String realmGet$firstName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
             if (realmGet$firstName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
             }
-            String realmGet$lastName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
+            String realmGet$lastName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
             if (realmGet$lastName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
             }
@@ -315,13 +315,13 @@ public static long insertOrUpdate(Realm realm, some.test.NamePolicyMixedClassSet
         NamePolicyMixedClassSettingsColumnInfo columnInfo = (NamePolicyMixedClassSettingsColumnInfo) realm.getSchema().getColumnInfo(some.test.NamePolicyMixedClassSettings.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$firstName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
+        String realmGet$firstName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
         if (realmGet$firstName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.firstNameIndex, rowIndex, false);
         }
-        String realmGet$lastName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
+        String realmGet$lastName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
         if (realmGet$lastName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
         } else {
@@ -346,13 +346,13 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$firstName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
+            String realmGet$firstName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$firstName();
             if (realmGet$firstName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.firstNameIndex, rowIndex, false);
             }
-            String realmGet$lastName = ((NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
+            String realmGet$lastName = ((some_test_NamePolicyMixedClassSettingsRealmProxyInterface) object).realmGet$lastName();
             if (realmGet$lastName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
             } else {
@@ -378,8 +378,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             unmanagedObject = (some.test.NamePolicyMixedClassSettings) cachedObject.object;
             cachedObject.minDepth = currentDepth;
         }
-        NamePolicyMixedClassSettingsRealmProxyInterface unmanagedCopy = (NamePolicyMixedClassSettingsRealmProxyInterface) unmanagedObject;
-        NamePolicyMixedClassSettingsRealmProxyInterface realmSource = (NamePolicyMixedClassSettingsRealmProxyInterface) realmObject;
+        some_test_NamePolicyMixedClassSettingsRealmProxyInterface unmanagedCopy = (some_test_NamePolicyMixedClassSettingsRealmProxyInterface) unmanagedObject;
+        some_test_NamePolicyMixedClassSettingsRealmProxyInterface realmSource = (some_test_NamePolicyMixedClassSettingsRealmProxyInterface) realmObject;
         unmanagedCopy.realmSet$firstName(realmSource.realmGet$firstName());
         unmanagedCopy.realmSet$lastName(realmSource.realmGet$lastName());
 
@@ -426,7 +426,7 @@ public int hashCode() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        NamePolicyMixedClassSettingsRealmProxy aNamePolicyMixedClassSettings = (NamePolicyMixedClassSettingsRealmProxy)o;
+        some_test_NamePolicyMixedClassSettingsRealmProxy aNamePolicyMixedClassSettings = (some_test_NamePolicyMixedClassSettingsRealmProxy)o;
 
         String path = proxyState.getRealm$realm().getPath();
         String otherPath = aNamePolicyMixedClassSettings.proxyState.getRealm$realm().getPath();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NamePolicyModuleDefaultsRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NamePolicyModuleDefaultsRealmProxy.java
similarity index 89%
rename from realm/realm-annotations-processor/src/test/resources/io/realm/NamePolicyModuleDefaultsRealmProxy.java
rename to realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NamePolicyModuleDefaultsRealmProxy.java
index b1aaceae87..221ca41710 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NamePolicyModuleDefaultsRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NamePolicyModuleDefaultsRealmProxy.java
@@ -31,8 +31,8 @@
 import org.json.JSONObject;
 
 @SuppressWarnings("all")
-public class NamePolicyModuleDefaultsRealmProxy extends some.test.NamePolicyModuleDefaults
-        implements RealmObjectProxy, NamePolicyModuleDefaultsRealmProxyInterface {
+public class some_test_NamePolicyModuleDefaultsRealmProxy extends some.test.NamePolicyModuleDefaults
+        implements RealmObjectProxy, some_test_NamePolicyModuleDefaultsRealmProxyInterface {
 
     static final class NamePolicyModuleDefaultsColumnInfo extends ColumnInfo {
         long firstNameIndex;
@@ -69,7 +69,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
     private NamePolicyModuleDefaultsColumnInfo columnInfo;
     private ProxyState<some.test.NamePolicyModuleDefaults> proxyState;
 
-    NamePolicyModuleDefaultsRealmProxy() {
+    some_test_NamePolicyModuleDefaultsRealmProxy() {
         proxyState.setConstructionFinished();
     }
 
@@ -172,7 +172,7 @@ public static String getSimpleClassName() {
         final List<String> excludeFields = Collections.<String> emptyList();
         some.test.NamePolicyModuleDefaults obj = realm.createObjectInternal(some.test.NamePolicyModuleDefaults.class, true, excludeFields);
 
-        final NamePolicyModuleDefaultsRealmProxyInterface objProxy = (NamePolicyModuleDefaultsRealmProxyInterface) obj;
+        final some_test_NamePolicyModuleDefaultsRealmProxyInterface objProxy = (some_test_NamePolicyModuleDefaultsRealmProxyInterface) obj;
         if (json.has("firstName")) {
             if (json.isNull("firstName")) {
                 objProxy.realmSet$firstName(null);
@@ -195,7 +195,7 @@ public static String getSimpleClassName() {
     public static some.test.NamePolicyModuleDefaults createUsingJsonStream(Realm realm, JsonReader reader)
             throws IOException {
         final some.test.NamePolicyModuleDefaults obj = new some.test.NamePolicyModuleDefaults();
-        final NamePolicyModuleDefaultsRealmProxyInterface objProxy = (NamePolicyModuleDefaultsRealmProxyInterface) obj;
+        final some_test_NamePolicyModuleDefaultsRealmProxyInterface objProxy = (some_test_NamePolicyModuleDefaultsRealmProxyInterface) obj;
         reader.beginObject();
         while (reader.hasNext()) {
             String name = reader.nextName();
@@ -251,8 +251,8 @@ public static String getSimpleClassName() {
         some.test.NamePolicyModuleDefaults realmObject = realm.createObjectInternal(some.test.NamePolicyModuleDefaults.class, false, Collections.<String>emptyList());
         cache.put(newObject, (RealmObjectProxy) realmObject);
 
-        NamePolicyModuleDefaultsRealmProxyInterface realmObjectSource = (NamePolicyModuleDefaultsRealmProxyInterface) newObject;
-        NamePolicyModuleDefaultsRealmProxyInterface realmObjectCopy = (NamePolicyModuleDefaultsRealmProxyInterface) realmObject;
+        some_test_NamePolicyModuleDefaultsRealmProxyInterface realmObjectSource = (some_test_NamePolicyModuleDefaultsRealmProxyInterface) newObject;
+        some_test_NamePolicyModuleDefaultsRealmProxyInterface realmObjectCopy = (some_test_NamePolicyModuleDefaultsRealmProxyInterface) realmObject;
 
         realmObjectCopy.realmSet$firstName(realmObjectSource.realmGet$firstName());
         realmObjectCopy.realmSet$lastName(realmObjectSource.realmGet$lastName());
@@ -268,11 +268,11 @@ public static long insert(Realm realm, some.test.NamePolicyModuleDefaults object
         NamePolicyModuleDefaultsColumnInfo columnInfo = (NamePolicyModuleDefaultsColumnInfo) realm.getSchema().getColumnInfo(some.test.NamePolicyModuleDefaults.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$firstName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
+        String realmGet$firstName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
         if (realmGet$firstName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
         }
-        String realmGet$lastName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
+        String realmGet$lastName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
         if (realmGet$lastName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
         }
@@ -295,11 +295,11 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$firstName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
+            String realmGet$firstName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
             if (realmGet$firstName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
             }
-            String realmGet$lastName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
+            String realmGet$lastName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
             if (realmGet$lastName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
             }
@@ -315,13 +315,13 @@ public static long insertOrUpdate(Realm realm, some.test.NamePolicyModuleDefault
         NamePolicyModuleDefaultsColumnInfo columnInfo = (NamePolicyModuleDefaultsColumnInfo) realm.getSchema().getColumnInfo(some.test.NamePolicyModuleDefaults.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$firstName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
+        String realmGet$firstName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
         if (realmGet$firstName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.firstNameIndex, rowIndex, false);
         }
-        String realmGet$lastName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
+        String realmGet$lastName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
         if (realmGet$lastName != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
         } else {
@@ -346,13 +346,13 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$firstName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
+            String realmGet$firstName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$firstName();
             if (realmGet$firstName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.firstNameIndex, rowIndex, realmGet$firstName, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.firstNameIndex, rowIndex, false);
             }
-            String realmGet$lastName = ((NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
+            String realmGet$lastName = ((some_test_NamePolicyModuleDefaultsRealmProxyInterface) object).realmGet$lastName();
             if (realmGet$lastName != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.lastNameIndex, rowIndex, realmGet$lastName, false);
             } else {
@@ -378,8 +378,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             unmanagedObject = (some.test.NamePolicyModuleDefaults) cachedObject.object;
             cachedObject.minDepth = currentDepth;
         }
-        NamePolicyModuleDefaultsRealmProxyInterface unmanagedCopy = (NamePolicyModuleDefaultsRealmProxyInterface) unmanagedObject;
-        NamePolicyModuleDefaultsRealmProxyInterface realmSource = (NamePolicyModuleDefaultsRealmProxyInterface) realmObject;
+        some_test_NamePolicyModuleDefaultsRealmProxyInterface unmanagedCopy = (some_test_NamePolicyModuleDefaultsRealmProxyInterface) unmanagedObject;
+        some_test_NamePolicyModuleDefaultsRealmProxyInterface realmSource = (some_test_NamePolicyModuleDefaultsRealmProxyInterface) realmObject;
         unmanagedCopy.realmSet$firstName(realmSource.realmGet$firstName());
         unmanagedCopy.realmSet$lastName(realmSource.realmGet$lastName());
 
@@ -426,7 +426,7 @@ public int hashCode() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        NamePolicyModuleDefaultsRealmProxy aNamePolicyModuleDefaults = (NamePolicyModuleDefaultsRealmProxy)o;
+        some_test_NamePolicyModuleDefaultsRealmProxy aNamePolicyModuleDefaults = (some_test_NamePolicyModuleDefaultsRealmProxy)o;
 
         String path = proxyState.getRealm$realm().getPath();
         String otherPath = aNamePolicyModuleDefaults.proxyState.getRealm$realm().getPath();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NullTypesRealmProxy.java
similarity index 90%
rename from realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
rename to realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NullTypesRealmProxy.java
index e7af4b8897..c4c3669172 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_NullTypesRealmProxy.java
@@ -31,8 +31,8 @@
 import org.json.JSONObject;
 
 @SuppressWarnings("all")
-public class NullTypesRealmProxy extends some.test.NullTypes
-        implements RealmObjectProxy, NullTypesRealmProxyInterface {
+public class some_test_NullTypesRealmProxy extends some.test.NullTypes
+        implements RealmObjectProxy, some_test_NullTypesRealmProxyInterface {
 
     static final class NullTypesColumnInfo extends ColumnInfo {
         long fieldStringNotNullIndex;
@@ -206,7 +206,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
     private RealmList<Date> fieldDateListNotNullRealmList;
     private RealmList<Date> fieldDateListNullRealmList;
 
-    NullTypesRealmProxy() {
+    some_test_NullTypesRealmProxy() {
         proxyState.setConstructionFinished();
     }
 
@@ -1776,7 +1776,7 @@ public static String getSimpleClassName() {
         }
         some.test.NullTypes obj = realm.createObjectInternal(some.test.NullTypes.class, true, excludeFields);
 
-        final NullTypesRealmProxyInterface objProxy = (NullTypesRealmProxyInterface) obj;
+        final some_test_NullTypesRealmProxyInterface objProxy = (some_test_NullTypesRealmProxyInterface) obj;
         if (json.has("fieldStringNotNull")) {
             if (json.isNull("fieldStringNotNull")) {
                 objProxy.realmSet$fieldStringNotNull(null);
@@ -1931,7 +1931,7 @@ public static String getSimpleClassName() {
             if (json.isNull("fieldObjectNull")) {
                 objProxy.realmSet$fieldObjectNull(null);
             } else {
-                some.test.NullTypes fieldObjectNullObj = NullTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("fieldObjectNull"), update);
+                some.test.NullTypes fieldObjectNullObj = some_test_NullTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("fieldObjectNull"), update);
                 objProxy.realmSet$fieldObjectNull(fieldObjectNullObj);
             }
         }
@@ -1963,7 +1963,7 @@ public static String getSimpleClassName() {
     public static some.test.NullTypes createUsingJsonStream(Realm realm, JsonReader reader)
             throws IOException {
         final some.test.NullTypes obj = new some.test.NullTypes();
-        final NullTypesRealmProxyInterface objProxy = (NullTypesRealmProxyInterface) obj;
+        final some_test_NullTypesRealmProxyInterface objProxy = (some_test_NullTypesRealmProxyInterface) obj;
         reader.beginObject();
         while (reader.hasNext()) {
             String name = reader.nextName();
@@ -2123,7 +2123,7 @@ public static String getSimpleClassName() {
                     reader.skipValue();
                     objProxy.realmSet$fieldObjectNull(null);
                 } else {
-                    some.test.NullTypes fieldObjectNullObj = NullTypesRealmProxy.createUsingJsonStream(realm, reader);
+                    some.test.NullTypes fieldObjectNullObj = some_test_NullTypesRealmProxy.createUsingJsonStream(realm, reader);
                     objProxy.realmSet$fieldObjectNull(fieldObjectNullObj);
                 }
             } else if (name.equals("fieldStringListNotNull")) {
@@ -2203,8 +2203,8 @@ public static String getSimpleClassName() {
         some.test.NullTypes realmObject = realm.createObjectInternal(some.test.NullTypes.class, false, Collections.<String>emptyList());
         cache.put(newObject, (RealmObjectProxy) realmObject);
 
-        NullTypesRealmProxyInterface realmObjectSource = (NullTypesRealmProxyInterface) newObject;
-        NullTypesRealmProxyInterface realmObjectCopy = (NullTypesRealmProxyInterface) realmObject;
+        some_test_NullTypesRealmProxyInterface realmObjectSource = (some_test_NullTypesRealmProxyInterface) newObject;
+        some_test_NullTypesRealmProxyInterface realmObjectCopy = (some_test_NullTypesRealmProxyInterface) realmObject;
 
         realmObjectCopy.realmSet$fieldStringNotNull(realmObjectSource.realmGet$fieldStringNotNull());
         realmObjectCopy.realmSet$fieldStringNull(realmObjectSource.realmGet$fieldStringNull());
@@ -2235,7 +2235,7 @@ public static String getSimpleClassName() {
             if (cachefieldObjectNull != null) {
                 realmObjectCopy.realmSet$fieldObjectNull(cachefieldObjectNull);
             } else {
-                realmObjectCopy.realmSet$fieldObjectNull(NullTypesRealmProxy.copyOrUpdate(realm, fieldObjectNullObj, update, cache));
+                realmObjectCopy.realmSet$fieldObjectNull(some_test_NullTypesRealmProxy.copyOrUpdate(realm, fieldObjectNullObj, update, cache));
             }
         }
         realmObjectCopy.realmSet$fieldStringListNotNull(realmObjectSource.realmGet$fieldStringListNotNull());
@@ -2270,97 +2270,97 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
         NullTypesColumnInfo columnInfo = (NullTypesColumnInfo) realm.getSchema().getColumnInfo(some.test.NullTypes.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
+        String realmGet$fieldStringNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
         if (realmGet$fieldStringNotNull != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNotNullIndex, rowIndex, realmGet$fieldStringNotNull, false);
         }
-        String realmGet$fieldStringNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
+        String realmGet$fieldStringNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
         if (realmGet$fieldStringNull != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNullIndex, rowIndex, realmGet$fieldStringNull, false);
         }
-        Boolean realmGet$fieldBooleanNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
+        Boolean realmGet$fieldBooleanNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
         if (realmGet$fieldBooleanNotNull != null) {
             Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNotNullIndex, rowIndex, realmGet$fieldBooleanNotNull, false);
         }
-        Boolean realmGet$fieldBooleanNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
+        Boolean realmGet$fieldBooleanNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
         if (realmGet$fieldBooleanNull != null) {
             Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNullIndex, rowIndex, realmGet$fieldBooleanNull, false);
         }
-        byte[] realmGet$fieldBytesNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
+        byte[] realmGet$fieldBytesNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
         if (realmGet$fieldBytesNotNull != null) {
             Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNotNullIndex, rowIndex, realmGet$fieldBytesNotNull, false);
         }
-        byte[] realmGet$fieldBytesNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
+        byte[] realmGet$fieldBytesNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
         if (realmGet$fieldBytesNull != null) {
             Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNullIndex, rowIndex, realmGet$fieldBytesNull, false);
         }
-        Number realmGet$fieldByteNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
+        Number realmGet$fieldByteNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
         if (realmGet$fieldByteNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNotNullIndex, rowIndex, realmGet$fieldByteNotNull.longValue(), false);
         }
-        Number realmGet$fieldByteNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
+        Number realmGet$fieldByteNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
         if (realmGet$fieldByteNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNullIndex, rowIndex, realmGet$fieldByteNull.longValue(), false);
         }
-        Number realmGet$fieldShortNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
+        Number realmGet$fieldShortNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
         if (realmGet$fieldShortNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNotNullIndex, rowIndex, realmGet$fieldShortNotNull.longValue(), false);
         }
-        Number realmGet$fieldShortNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
+        Number realmGet$fieldShortNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
         if (realmGet$fieldShortNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNullIndex, rowIndex, realmGet$fieldShortNull.longValue(), false);
         }
-        Number realmGet$fieldIntegerNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
+        Number realmGet$fieldIntegerNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
         if (realmGet$fieldIntegerNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNotNullIndex, rowIndex, realmGet$fieldIntegerNotNull.longValue(), false);
         }
-        Number realmGet$fieldIntegerNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
+        Number realmGet$fieldIntegerNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
         if (realmGet$fieldIntegerNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNullIndex, rowIndex, realmGet$fieldIntegerNull.longValue(), false);
         }
-        Number realmGet$fieldLongNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
+        Number realmGet$fieldLongNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
         if (realmGet$fieldLongNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNotNullIndex, rowIndex, realmGet$fieldLongNotNull.longValue(), false);
         }
-        Number realmGet$fieldLongNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
+        Number realmGet$fieldLongNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
         if (realmGet$fieldLongNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNullIndex, rowIndex, realmGet$fieldLongNull.longValue(), false);
         }
-        Float realmGet$fieldFloatNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
+        Float realmGet$fieldFloatNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
         if (realmGet$fieldFloatNotNull != null) {
             Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNotNullIndex, rowIndex, realmGet$fieldFloatNotNull, false);
         }
-        Float realmGet$fieldFloatNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
+        Float realmGet$fieldFloatNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
         if (realmGet$fieldFloatNull != null) {
             Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNullIndex, rowIndex, realmGet$fieldFloatNull, false);
         }
-        Double realmGet$fieldDoubleNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
+        Double realmGet$fieldDoubleNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
         if (realmGet$fieldDoubleNotNull != null) {
             Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNotNullIndex, rowIndex, realmGet$fieldDoubleNotNull, false);
         }
-        Double realmGet$fieldDoubleNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
+        Double realmGet$fieldDoubleNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
         if (realmGet$fieldDoubleNull != null) {
             Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNullIndex, rowIndex, realmGet$fieldDoubleNull, false);
         }
-        java.util.Date realmGet$fieldDateNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
+        java.util.Date realmGet$fieldDateNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
         if (realmGet$fieldDateNotNull != null) {
             Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNotNullIndex, rowIndex, realmGet$fieldDateNotNull.getTime(), false);
         }
-        java.util.Date realmGet$fieldDateNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
+        java.util.Date realmGet$fieldDateNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
         if (realmGet$fieldDateNull != null) {
             Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNullIndex, rowIndex, realmGet$fieldDateNull.getTime(), false);
         }
 
-        some.test.NullTypes fieldObjectNullObj = ((NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
+        some.test.NullTypes fieldObjectNullObj = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
         if (fieldObjectNullObj != null) {
             Long cachefieldObjectNull = cache.get(fieldObjectNullObj);
             if (cachefieldObjectNull == null) {
-                cachefieldObjectNull = NullTypesRealmProxy.insert(realm, fieldObjectNullObj, cache);
+                cachefieldObjectNull = some_test_NullTypesRealmProxy.insert(realm, fieldObjectNullObj, cache);
             }
             Table.nativeSetLink(tableNativePtr, columnInfo.fieldObjectNullIndex, rowIndex, cachefieldObjectNull, false);
         }
 
-        RealmList<java.lang.String> fieldStringListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
+        RealmList<java.lang.String> fieldStringListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
         if (fieldStringListNotNullList != null) {
             OsList fieldStringListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNotNullIndex);
             for (java.lang.String fieldStringListNotNullItem : fieldStringListNotNullList) {
@@ -2372,7 +2372,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.String> fieldStringListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
+        RealmList<java.lang.String> fieldStringListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
         if (fieldStringListNullList != null) {
             OsList fieldStringListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNullIndex);
             for (java.lang.String fieldStringListNullItem : fieldStringListNullList) {
@@ -2384,7 +2384,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<byte[]> fieldBinaryListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
+        RealmList<byte[]> fieldBinaryListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
         if (fieldBinaryListNotNullList != null) {
             OsList fieldBinaryListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNotNullIndex);
             for (byte[] fieldBinaryListNotNullItem : fieldBinaryListNotNullList) {
@@ -2396,7 +2396,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<byte[]> fieldBinaryListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
+        RealmList<byte[]> fieldBinaryListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
         if (fieldBinaryListNullList != null) {
             OsList fieldBinaryListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNullIndex);
             for (byte[] fieldBinaryListNullItem : fieldBinaryListNullList) {
@@ -2408,7 +2408,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
+        RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
         if (fieldBooleanListNotNullList != null) {
             OsList fieldBooleanListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNotNullIndex);
             for (java.lang.Boolean fieldBooleanListNotNullItem : fieldBooleanListNotNullList) {
@@ -2420,7 +2420,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Boolean> fieldBooleanListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
+        RealmList<java.lang.Boolean> fieldBooleanListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
         if (fieldBooleanListNullList != null) {
             OsList fieldBooleanListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNullIndex);
             for (java.lang.Boolean fieldBooleanListNullItem : fieldBooleanListNullList) {
@@ -2432,7 +2432,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Long> fieldLongListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
+        RealmList<java.lang.Long> fieldLongListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
         if (fieldLongListNotNullList != null) {
             OsList fieldLongListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNotNullIndex);
             for (java.lang.Long fieldLongListNotNullItem : fieldLongListNotNullList) {
@@ -2444,7 +2444,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Long> fieldLongListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
+        RealmList<java.lang.Long> fieldLongListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
         if (fieldLongListNullList != null) {
             OsList fieldLongListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNullIndex);
             for (java.lang.Long fieldLongListNullItem : fieldLongListNullList) {
@@ -2456,7 +2456,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
+        RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
         if (fieldIntegerListNotNullList != null) {
             OsList fieldIntegerListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNotNullIndex);
             for (java.lang.Integer fieldIntegerListNotNullItem : fieldIntegerListNotNullList) {
@@ -2468,7 +2468,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Integer> fieldIntegerListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
+        RealmList<java.lang.Integer> fieldIntegerListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
         if (fieldIntegerListNullList != null) {
             OsList fieldIntegerListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNullIndex);
             for (java.lang.Integer fieldIntegerListNullItem : fieldIntegerListNullList) {
@@ -2480,7 +2480,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Short> fieldShortListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
+        RealmList<java.lang.Short> fieldShortListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
         if (fieldShortListNotNullList != null) {
             OsList fieldShortListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNotNullIndex);
             for (java.lang.Short fieldShortListNotNullItem : fieldShortListNotNullList) {
@@ -2492,7 +2492,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Short> fieldShortListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
+        RealmList<java.lang.Short> fieldShortListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
         if (fieldShortListNullList != null) {
             OsList fieldShortListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNullIndex);
             for (java.lang.Short fieldShortListNullItem : fieldShortListNullList) {
@@ -2504,7 +2504,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Byte> fieldByteListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
+        RealmList<java.lang.Byte> fieldByteListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
         if (fieldByteListNotNullList != null) {
             OsList fieldByteListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNotNullIndex);
             for (java.lang.Byte fieldByteListNotNullItem : fieldByteListNotNullList) {
@@ -2516,7 +2516,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Byte> fieldByteListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
+        RealmList<java.lang.Byte> fieldByteListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
         if (fieldByteListNullList != null) {
             OsList fieldByteListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNullIndex);
             for (java.lang.Byte fieldByteListNullItem : fieldByteListNullList) {
@@ -2528,7 +2528,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Double> fieldDoubleListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
+        RealmList<java.lang.Double> fieldDoubleListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
         if (fieldDoubleListNotNullList != null) {
             OsList fieldDoubleListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNotNullIndex);
             for (java.lang.Double fieldDoubleListNotNullItem : fieldDoubleListNotNullList) {
@@ -2540,7 +2540,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Double> fieldDoubleListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
+        RealmList<java.lang.Double> fieldDoubleListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
         if (fieldDoubleListNullList != null) {
             OsList fieldDoubleListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNullIndex);
             for (java.lang.Double fieldDoubleListNullItem : fieldDoubleListNullList) {
@@ -2552,7 +2552,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Float> fieldFloatListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
+        RealmList<java.lang.Float> fieldFloatListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
         if (fieldFloatListNotNullList != null) {
             OsList fieldFloatListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNotNullIndex);
             for (java.lang.Float fieldFloatListNotNullItem : fieldFloatListNotNullList) {
@@ -2564,7 +2564,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.lang.Float> fieldFloatListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
+        RealmList<java.lang.Float> fieldFloatListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
         if (fieldFloatListNullList != null) {
             OsList fieldFloatListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNullIndex);
             for (java.lang.Float fieldFloatListNullItem : fieldFloatListNullList) {
@@ -2576,7 +2576,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.util.Date> fieldDateListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
+        RealmList<java.util.Date> fieldDateListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
         if (fieldDateListNotNullList != null) {
             OsList fieldDateListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNotNullIndex);
             for (java.util.Date fieldDateListNotNullItem : fieldDateListNotNullList) {
@@ -2588,7 +2588,7 @@ public static long insert(Realm realm, some.test.NullTypes object, Map<RealmMode
             }
         }
 
-        RealmList<java.util.Date> fieldDateListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
+        RealmList<java.util.Date> fieldDateListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
         if (fieldDateListNullList != null) {
             OsList fieldDateListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNullIndex);
             for (java.util.Date fieldDateListNullItem : fieldDateListNullList) {
@@ -2618,97 +2618,97 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
+            String realmGet$fieldStringNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
             if (realmGet$fieldStringNotNull != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNotNullIndex, rowIndex, realmGet$fieldStringNotNull, false);
             }
-            String realmGet$fieldStringNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
+            String realmGet$fieldStringNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
             if (realmGet$fieldStringNull != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNullIndex, rowIndex, realmGet$fieldStringNull, false);
             }
-            Boolean realmGet$fieldBooleanNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
+            Boolean realmGet$fieldBooleanNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
             if (realmGet$fieldBooleanNotNull != null) {
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNotNullIndex, rowIndex, realmGet$fieldBooleanNotNull, false);
             }
-            Boolean realmGet$fieldBooleanNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
+            Boolean realmGet$fieldBooleanNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
             if (realmGet$fieldBooleanNull != null) {
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNullIndex, rowIndex, realmGet$fieldBooleanNull, false);
             }
-            byte[] realmGet$fieldBytesNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
+            byte[] realmGet$fieldBytesNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
             if (realmGet$fieldBytesNotNull != null) {
                 Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNotNullIndex, rowIndex, realmGet$fieldBytesNotNull, false);
             }
-            byte[] realmGet$fieldBytesNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
+            byte[] realmGet$fieldBytesNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
             if (realmGet$fieldBytesNull != null) {
                 Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNullIndex, rowIndex, realmGet$fieldBytesNull, false);
             }
-            Number realmGet$fieldByteNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
+            Number realmGet$fieldByteNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
             if (realmGet$fieldByteNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNotNullIndex, rowIndex, realmGet$fieldByteNotNull.longValue(), false);
             }
-            Number realmGet$fieldByteNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
+            Number realmGet$fieldByteNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
             if (realmGet$fieldByteNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNullIndex, rowIndex, realmGet$fieldByteNull.longValue(), false);
             }
-            Number realmGet$fieldShortNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
+            Number realmGet$fieldShortNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
             if (realmGet$fieldShortNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNotNullIndex, rowIndex, realmGet$fieldShortNotNull.longValue(), false);
             }
-            Number realmGet$fieldShortNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
+            Number realmGet$fieldShortNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
             if (realmGet$fieldShortNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNullIndex, rowIndex, realmGet$fieldShortNull.longValue(), false);
             }
-            Number realmGet$fieldIntegerNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
+            Number realmGet$fieldIntegerNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
             if (realmGet$fieldIntegerNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNotNullIndex, rowIndex, realmGet$fieldIntegerNotNull.longValue(), false);
             }
-            Number realmGet$fieldIntegerNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
+            Number realmGet$fieldIntegerNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
             if (realmGet$fieldIntegerNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNullIndex, rowIndex, realmGet$fieldIntegerNull.longValue(), false);
             }
-            Number realmGet$fieldLongNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
+            Number realmGet$fieldLongNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
             if (realmGet$fieldLongNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNotNullIndex, rowIndex, realmGet$fieldLongNotNull.longValue(), false);
             }
-            Number realmGet$fieldLongNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
+            Number realmGet$fieldLongNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
             if (realmGet$fieldLongNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNullIndex, rowIndex, realmGet$fieldLongNull.longValue(), false);
             }
-            Float realmGet$fieldFloatNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
+            Float realmGet$fieldFloatNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
             if (realmGet$fieldFloatNotNull != null) {
                 Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNotNullIndex, rowIndex, realmGet$fieldFloatNotNull, false);
             }
-            Float realmGet$fieldFloatNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
+            Float realmGet$fieldFloatNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
             if (realmGet$fieldFloatNull != null) {
                 Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNullIndex, rowIndex, realmGet$fieldFloatNull, false);
             }
-            Double realmGet$fieldDoubleNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
+            Double realmGet$fieldDoubleNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
             if (realmGet$fieldDoubleNotNull != null) {
                 Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNotNullIndex, rowIndex, realmGet$fieldDoubleNotNull, false);
             }
-            Double realmGet$fieldDoubleNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
+            Double realmGet$fieldDoubleNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
             if (realmGet$fieldDoubleNull != null) {
                 Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNullIndex, rowIndex, realmGet$fieldDoubleNull, false);
             }
-            java.util.Date realmGet$fieldDateNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
+            java.util.Date realmGet$fieldDateNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
             if (realmGet$fieldDateNotNull != null) {
                 Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNotNullIndex, rowIndex, realmGet$fieldDateNotNull.getTime(), false);
             }
-            java.util.Date realmGet$fieldDateNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
+            java.util.Date realmGet$fieldDateNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
             if (realmGet$fieldDateNull != null) {
                 Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNullIndex, rowIndex, realmGet$fieldDateNull.getTime(), false);
             }
 
-            some.test.NullTypes fieldObjectNullObj = ((NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
+            some.test.NullTypes fieldObjectNullObj = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
             if (fieldObjectNullObj != null) {
                 Long cachefieldObjectNull = cache.get(fieldObjectNullObj);
                 if (cachefieldObjectNull == null) {
-                    cachefieldObjectNull = NullTypesRealmProxy.insert(realm, fieldObjectNullObj, cache);
+                    cachefieldObjectNull = some_test_NullTypesRealmProxy.insert(realm, fieldObjectNullObj, cache);
                 }
                 table.setLink(columnInfo.fieldObjectNullIndex, rowIndex, cachefieldObjectNull, false);
             }
 
-            RealmList<java.lang.String> fieldStringListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
+            RealmList<java.lang.String> fieldStringListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
             if (fieldStringListNotNullList != null) {
                 OsList fieldStringListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNotNullIndex);
                 for (java.lang.String fieldStringListNotNullItem : fieldStringListNotNullList) {
@@ -2720,7 +2720,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.String> fieldStringListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
+            RealmList<java.lang.String> fieldStringListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
             if (fieldStringListNullList != null) {
                 OsList fieldStringListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNullIndex);
                 for (java.lang.String fieldStringListNullItem : fieldStringListNullList) {
@@ -2732,7 +2732,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<byte[]> fieldBinaryListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
+            RealmList<byte[]> fieldBinaryListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
             if (fieldBinaryListNotNullList != null) {
                 OsList fieldBinaryListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNotNullIndex);
                 for (byte[] fieldBinaryListNotNullItem : fieldBinaryListNotNullList) {
@@ -2744,7 +2744,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<byte[]> fieldBinaryListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
+            RealmList<byte[]> fieldBinaryListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
             if (fieldBinaryListNullList != null) {
                 OsList fieldBinaryListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNullIndex);
                 for (byte[] fieldBinaryListNullItem : fieldBinaryListNullList) {
@@ -2756,7 +2756,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
+            RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
             if (fieldBooleanListNotNullList != null) {
                 OsList fieldBooleanListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNotNullIndex);
                 for (java.lang.Boolean fieldBooleanListNotNullItem : fieldBooleanListNotNullList) {
@@ -2768,7 +2768,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Boolean> fieldBooleanListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
+            RealmList<java.lang.Boolean> fieldBooleanListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
             if (fieldBooleanListNullList != null) {
                 OsList fieldBooleanListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNullIndex);
                 for (java.lang.Boolean fieldBooleanListNullItem : fieldBooleanListNullList) {
@@ -2780,7 +2780,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Long> fieldLongListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
+            RealmList<java.lang.Long> fieldLongListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
             if (fieldLongListNotNullList != null) {
                 OsList fieldLongListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNotNullIndex);
                 for (java.lang.Long fieldLongListNotNullItem : fieldLongListNotNullList) {
@@ -2792,7 +2792,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Long> fieldLongListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
+            RealmList<java.lang.Long> fieldLongListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
             if (fieldLongListNullList != null) {
                 OsList fieldLongListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNullIndex);
                 for (java.lang.Long fieldLongListNullItem : fieldLongListNullList) {
@@ -2804,7 +2804,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
+            RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
             if (fieldIntegerListNotNullList != null) {
                 OsList fieldIntegerListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNotNullIndex);
                 for (java.lang.Integer fieldIntegerListNotNullItem : fieldIntegerListNotNullList) {
@@ -2816,7 +2816,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Integer> fieldIntegerListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
+            RealmList<java.lang.Integer> fieldIntegerListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
             if (fieldIntegerListNullList != null) {
                 OsList fieldIntegerListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNullIndex);
                 for (java.lang.Integer fieldIntegerListNullItem : fieldIntegerListNullList) {
@@ -2828,7 +2828,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Short> fieldShortListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
+            RealmList<java.lang.Short> fieldShortListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
             if (fieldShortListNotNullList != null) {
                 OsList fieldShortListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNotNullIndex);
                 for (java.lang.Short fieldShortListNotNullItem : fieldShortListNotNullList) {
@@ -2840,7 +2840,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Short> fieldShortListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
+            RealmList<java.lang.Short> fieldShortListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
             if (fieldShortListNullList != null) {
                 OsList fieldShortListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNullIndex);
                 for (java.lang.Short fieldShortListNullItem : fieldShortListNullList) {
@@ -2852,7 +2852,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Byte> fieldByteListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
+            RealmList<java.lang.Byte> fieldByteListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
             if (fieldByteListNotNullList != null) {
                 OsList fieldByteListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNotNullIndex);
                 for (java.lang.Byte fieldByteListNotNullItem : fieldByteListNotNullList) {
@@ -2864,7 +2864,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Byte> fieldByteListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
+            RealmList<java.lang.Byte> fieldByteListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
             if (fieldByteListNullList != null) {
                 OsList fieldByteListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNullIndex);
                 for (java.lang.Byte fieldByteListNullItem : fieldByteListNullList) {
@@ -2876,7 +2876,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Double> fieldDoubleListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
+            RealmList<java.lang.Double> fieldDoubleListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
             if (fieldDoubleListNotNullList != null) {
                 OsList fieldDoubleListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNotNullIndex);
                 for (java.lang.Double fieldDoubleListNotNullItem : fieldDoubleListNotNullList) {
@@ -2888,7 +2888,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Double> fieldDoubleListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
+            RealmList<java.lang.Double> fieldDoubleListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
             if (fieldDoubleListNullList != null) {
                 OsList fieldDoubleListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNullIndex);
                 for (java.lang.Double fieldDoubleListNullItem : fieldDoubleListNullList) {
@@ -2900,7 +2900,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Float> fieldFloatListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
+            RealmList<java.lang.Float> fieldFloatListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
             if (fieldFloatListNotNullList != null) {
                 OsList fieldFloatListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNotNullIndex);
                 for (java.lang.Float fieldFloatListNotNullItem : fieldFloatListNotNullList) {
@@ -2912,7 +2912,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.lang.Float> fieldFloatListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
+            RealmList<java.lang.Float> fieldFloatListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
             if (fieldFloatListNullList != null) {
                 OsList fieldFloatListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNullIndex);
                 for (java.lang.Float fieldFloatListNullItem : fieldFloatListNullList) {
@@ -2924,7 +2924,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.util.Date> fieldDateListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
+            RealmList<java.util.Date> fieldDateListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
             if (fieldDateListNotNullList != null) {
                 OsList fieldDateListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNotNullIndex);
                 for (java.util.Date fieldDateListNotNullItem : fieldDateListNotNullList) {
@@ -2936,7 +2936,7 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
                 }
             }
 
-            RealmList<java.util.Date> fieldDateListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
+            RealmList<java.util.Date> fieldDateListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
             if (fieldDateListNullList != null) {
                 OsList fieldDateListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNullIndex);
                 for (java.util.Date fieldDateListNullItem : fieldDateListNullList) {
@@ -2959,132 +2959,132 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
         NullTypesColumnInfo columnInfo = (NullTypesColumnInfo) realm.getSchema().getColumnInfo(some.test.NullTypes.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
+        String realmGet$fieldStringNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
         if (realmGet$fieldStringNotNull != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNotNullIndex, rowIndex, realmGet$fieldStringNotNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldStringNotNullIndex, rowIndex, false);
         }
-        String realmGet$fieldStringNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
+        String realmGet$fieldStringNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
         if (realmGet$fieldStringNull != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNullIndex, rowIndex, realmGet$fieldStringNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldStringNullIndex, rowIndex, false);
         }
-        Boolean realmGet$fieldBooleanNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
+        Boolean realmGet$fieldBooleanNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
         if (realmGet$fieldBooleanNotNull != null) {
             Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNotNullIndex, rowIndex, realmGet$fieldBooleanNotNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldBooleanNotNullIndex, rowIndex, false);
         }
-        Boolean realmGet$fieldBooleanNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
+        Boolean realmGet$fieldBooleanNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
         if (realmGet$fieldBooleanNull != null) {
             Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNullIndex, rowIndex, realmGet$fieldBooleanNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldBooleanNullIndex, rowIndex, false);
         }
-        byte[] realmGet$fieldBytesNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
+        byte[] realmGet$fieldBytesNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
         if (realmGet$fieldBytesNotNull != null) {
             Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNotNullIndex, rowIndex, realmGet$fieldBytesNotNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldBytesNotNullIndex, rowIndex, false);
         }
-        byte[] realmGet$fieldBytesNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
+        byte[] realmGet$fieldBytesNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
         if (realmGet$fieldBytesNull != null) {
             Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNullIndex, rowIndex, realmGet$fieldBytesNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldBytesNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldByteNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
+        Number realmGet$fieldByteNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
         if (realmGet$fieldByteNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNotNullIndex, rowIndex, realmGet$fieldByteNotNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldByteNotNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldByteNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
+        Number realmGet$fieldByteNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
         if (realmGet$fieldByteNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNullIndex, rowIndex, realmGet$fieldByteNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldByteNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldShortNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
+        Number realmGet$fieldShortNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
         if (realmGet$fieldShortNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNotNullIndex, rowIndex, realmGet$fieldShortNotNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldShortNotNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldShortNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
+        Number realmGet$fieldShortNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
         if (realmGet$fieldShortNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNullIndex, rowIndex, realmGet$fieldShortNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldShortNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldIntegerNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
+        Number realmGet$fieldIntegerNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
         if (realmGet$fieldIntegerNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNotNullIndex, rowIndex, realmGet$fieldIntegerNotNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldIntegerNotNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldIntegerNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
+        Number realmGet$fieldIntegerNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
         if (realmGet$fieldIntegerNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNullIndex, rowIndex, realmGet$fieldIntegerNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldIntegerNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldLongNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
+        Number realmGet$fieldLongNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
         if (realmGet$fieldLongNotNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNotNullIndex, rowIndex, realmGet$fieldLongNotNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldLongNotNullIndex, rowIndex, false);
         }
-        Number realmGet$fieldLongNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
+        Number realmGet$fieldLongNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
         if (realmGet$fieldLongNull != null) {
             Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNullIndex, rowIndex, realmGet$fieldLongNull.longValue(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldLongNullIndex, rowIndex, false);
         }
-        Float realmGet$fieldFloatNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
+        Float realmGet$fieldFloatNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
         if (realmGet$fieldFloatNotNull != null) {
             Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNotNullIndex, rowIndex, realmGet$fieldFloatNotNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldFloatNotNullIndex, rowIndex, false);
         }
-        Float realmGet$fieldFloatNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
+        Float realmGet$fieldFloatNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
         if (realmGet$fieldFloatNull != null) {
             Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNullIndex, rowIndex, realmGet$fieldFloatNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldFloatNullIndex, rowIndex, false);
         }
-        Double realmGet$fieldDoubleNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
+        Double realmGet$fieldDoubleNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
         if (realmGet$fieldDoubleNotNull != null) {
             Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNotNullIndex, rowIndex, realmGet$fieldDoubleNotNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldDoubleNotNullIndex, rowIndex, false);
         }
-        Double realmGet$fieldDoubleNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
+        Double realmGet$fieldDoubleNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
         if (realmGet$fieldDoubleNull != null) {
             Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNullIndex, rowIndex, realmGet$fieldDoubleNull, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldDoubleNullIndex, rowIndex, false);
         }
-        java.util.Date realmGet$fieldDateNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
+        java.util.Date realmGet$fieldDateNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
         if (realmGet$fieldDateNotNull != null) {
             Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNotNullIndex, rowIndex, realmGet$fieldDateNotNull.getTime(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldDateNotNullIndex, rowIndex, false);
         }
-        java.util.Date realmGet$fieldDateNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
+        java.util.Date realmGet$fieldDateNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
         if (realmGet$fieldDateNull != null) {
             Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNullIndex, rowIndex, realmGet$fieldDateNull.getTime(), false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.fieldDateNullIndex, rowIndex, false);
         }
 
-        some.test.NullTypes fieldObjectNullObj = ((NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
+        some.test.NullTypes fieldObjectNullObj = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
         if (fieldObjectNullObj != null) {
             Long cachefieldObjectNull = cache.get(fieldObjectNullObj);
             if (cachefieldObjectNull == null) {
-                cachefieldObjectNull = NullTypesRealmProxy.insertOrUpdate(realm, fieldObjectNullObj, cache);
+                cachefieldObjectNull = some_test_NullTypesRealmProxy.insertOrUpdate(realm, fieldObjectNullObj, cache);
             }
             Table.nativeSetLink(tableNativePtr, columnInfo.fieldObjectNullIndex, rowIndex, cachefieldObjectNull, false);
         } else {
@@ -3093,7 +3093,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldStringListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNotNullIndex);
         fieldStringListNotNullOsList.removeAll();
-        RealmList<java.lang.String> fieldStringListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
+        RealmList<java.lang.String> fieldStringListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
         if (fieldStringListNotNullList != null) {
             for (java.lang.String fieldStringListNotNullItem : fieldStringListNotNullList) {
                 if (fieldStringListNotNullItem == null) {
@@ -3107,7 +3107,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldStringListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNullIndex);
         fieldStringListNullOsList.removeAll();
-        RealmList<java.lang.String> fieldStringListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
+        RealmList<java.lang.String> fieldStringListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
         if (fieldStringListNullList != null) {
             for (java.lang.String fieldStringListNullItem : fieldStringListNullList) {
                 if (fieldStringListNullItem == null) {
@@ -3121,7 +3121,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldBinaryListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNotNullIndex);
         fieldBinaryListNotNullOsList.removeAll();
-        RealmList<byte[]> fieldBinaryListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
+        RealmList<byte[]> fieldBinaryListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
         if (fieldBinaryListNotNullList != null) {
             for (byte[] fieldBinaryListNotNullItem : fieldBinaryListNotNullList) {
                 if (fieldBinaryListNotNullItem == null) {
@@ -3135,7 +3135,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldBinaryListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNullIndex);
         fieldBinaryListNullOsList.removeAll();
-        RealmList<byte[]> fieldBinaryListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
+        RealmList<byte[]> fieldBinaryListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
         if (fieldBinaryListNullList != null) {
             for (byte[] fieldBinaryListNullItem : fieldBinaryListNullList) {
                 if (fieldBinaryListNullItem == null) {
@@ -3149,7 +3149,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldBooleanListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNotNullIndex);
         fieldBooleanListNotNullOsList.removeAll();
-        RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
+        RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
         if (fieldBooleanListNotNullList != null) {
             for (java.lang.Boolean fieldBooleanListNotNullItem : fieldBooleanListNotNullList) {
                 if (fieldBooleanListNotNullItem == null) {
@@ -3163,7 +3163,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldBooleanListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNullIndex);
         fieldBooleanListNullOsList.removeAll();
-        RealmList<java.lang.Boolean> fieldBooleanListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
+        RealmList<java.lang.Boolean> fieldBooleanListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
         if (fieldBooleanListNullList != null) {
             for (java.lang.Boolean fieldBooleanListNullItem : fieldBooleanListNullList) {
                 if (fieldBooleanListNullItem == null) {
@@ -3177,7 +3177,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldLongListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNotNullIndex);
         fieldLongListNotNullOsList.removeAll();
-        RealmList<java.lang.Long> fieldLongListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
+        RealmList<java.lang.Long> fieldLongListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
         if (fieldLongListNotNullList != null) {
             for (java.lang.Long fieldLongListNotNullItem : fieldLongListNotNullList) {
                 if (fieldLongListNotNullItem == null) {
@@ -3191,7 +3191,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldLongListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNullIndex);
         fieldLongListNullOsList.removeAll();
-        RealmList<java.lang.Long> fieldLongListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
+        RealmList<java.lang.Long> fieldLongListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
         if (fieldLongListNullList != null) {
             for (java.lang.Long fieldLongListNullItem : fieldLongListNullList) {
                 if (fieldLongListNullItem == null) {
@@ -3205,7 +3205,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldIntegerListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNotNullIndex);
         fieldIntegerListNotNullOsList.removeAll();
-        RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
+        RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
         if (fieldIntegerListNotNullList != null) {
             for (java.lang.Integer fieldIntegerListNotNullItem : fieldIntegerListNotNullList) {
                 if (fieldIntegerListNotNullItem == null) {
@@ -3219,7 +3219,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldIntegerListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNullIndex);
         fieldIntegerListNullOsList.removeAll();
-        RealmList<java.lang.Integer> fieldIntegerListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
+        RealmList<java.lang.Integer> fieldIntegerListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
         if (fieldIntegerListNullList != null) {
             for (java.lang.Integer fieldIntegerListNullItem : fieldIntegerListNullList) {
                 if (fieldIntegerListNullItem == null) {
@@ -3233,7 +3233,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldShortListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNotNullIndex);
         fieldShortListNotNullOsList.removeAll();
-        RealmList<java.lang.Short> fieldShortListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
+        RealmList<java.lang.Short> fieldShortListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
         if (fieldShortListNotNullList != null) {
             for (java.lang.Short fieldShortListNotNullItem : fieldShortListNotNullList) {
                 if (fieldShortListNotNullItem == null) {
@@ -3247,7 +3247,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldShortListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNullIndex);
         fieldShortListNullOsList.removeAll();
-        RealmList<java.lang.Short> fieldShortListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
+        RealmList<java.lang.Short> fieldShortListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
         if (fieldShortListNullList != null) {
             for (java.lang.Short fieldShortListNullItem : fieldShortListNullList) {
                 if (fieldShortListNullItem == null) {
@@ -3261,7 +3261,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldByteListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNotNullIndex);
         fieldByteListNotNullOsList.removeAll();
-        RealmList<java.lang.Byte> fieldByteListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
+        RealmList<java.lang.Byte> fieldByteListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
         if (fieldByteListNotNullList != null) {
             for (java.lang.Byte fieldByteListNotNullItem : fieldByteListNotNullList) {
                 if (fieldByteListNotNullItem == null) {
@@ -3275,7 +3275,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldByteListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNullIndex);
         fieldByteListNullOsList.removeAll();
-        RealmList<java.lang.Byte> fieldByteListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
+        RealmList<java.lang.Byte> fieldByteListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
         if (fieldByteListNullList != null) {
             for (java.lang.Byte fieldByteListNullItem : fieldByteListNullList) {
                 if (fieldByteListNullItem == null) {
@@ -3289,7 +3289,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldDoubleListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNotNullIndex);
         fieldDoubleListNotNullOsList.removeAll();
-        RealmList<java.lang.Double> fieldDoubleListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
+        RealmList<java.lang.Double> fieldDoubleListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
         if (fieldDoubleListNotNullList != null) {
             for (java.lang.Double fieldDoubleListNotNullItem : fieldDoubleListNotNullList) {
                 if (fieldDoubleListNotNullItem == null) {
@@ -3303,7 +3303,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldDoubleListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNullIndex);
         fieldDoubleListNullOsList.removeAll();
-        RealmList<java.lang.Double> fieldDoubleListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
+        RealmList<java.lang.Double> fieldDoubleListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
         if (fieldDoubleListNullList != null) {
             for (java.lang.Double fieldDoubleListNullItem : fieldDoubleListNullList) {
                 if (fieldDoubleListNullItem == null) {
@@ -3317,7 +3317,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldFloatListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNotNullIndex);
         fieldFloatListNotNullOsList.removeAll();
-        RealmList<java.lang.Float> fieldFloatListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
+        RealmList<java.lang.Float> fieldFloatListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
         if (fieldFloatListNotNullList != null) {
             for (java.lang.Float fieldFloatListNotNullItem : fieldFloatListNotNullList) {
                 if (fieldFloatListNotNullItem == null) {
@@ -3331,7 +3331,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldFloatListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNullIndex);
         fieldFloatListNullOsList.removeAll();
-        RealmList<java.lang.Float> fieldFloatListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
+        RealmList<java.lang.Float> fieldFloatListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
         if (fieldFloatListNullList != null) {
             for (java.lang.Float fieldFloatListNullItem : fieldFloatListNullList) {
                 if (fieldFloatListNullItem == null) {
@@ -3345,7 +3345,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldDateListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNotNullIndex);
         fieldDateListNotNullOsList.removeAll();
-        RealmList<java.util.Date> fieldDateListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
+        RealmList<java.util.Date> fieldDateListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
         if (fieldDateListNotNullList != null) {
             for (java.util.Date fieldDateListNotNullItem : fieldDateListNotNullList) {
                 if (fieldDateListNotNullItem == null) {
@@ -3359,7 +3359,7 @@ public static long insertOrUpdate(Realm realm, some.test.NullTypes object, Map<R
 
         OsList fieldDateListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNullIndex);
         fieldDateListNullOsList.removeAll();
-        RealmList<java.util.Date> fieldDateListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
+        RealmList<java.util.Date> fieldDateListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
         if (fieldDateListNullList != null) {
             for (java.util.Date fieldDateListNullItem : fieldDateListNullList) {
                 if (fieldDateListNullItem == null) {
@@ -3389,132 +3389,132 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$fieldStringNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
+            String realmGet$fieldStringNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNotNull();
             if (realmGet$fieldStringNotNull != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNotNullIndex, rowIndex, realmGet$fieldStringNotNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldStringNotNullIndex, rowIndex, false);
             }
-            String realmGet$fieldStringNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
+            String realmGet$fieldStringNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringNull();
             if (realmGet$fieldStringNull != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.fieldStringNullIndex, rowIndex, realmGet$fieldStringNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldStringNullIndex, rowIndex, false);
             }
-            Boolean realmGet$fieldBooleanNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
+            Boolean realmGet$fieldBooleanNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNotNull();
             if (realmGet$fieldBooleanNotNull != null) {
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNotNullIndex, rowIndex, realmGet$fieldBooleanNotNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldBooleanNotNullIndex, rowIndex, false);
             }
-            Boolean realmGet$fieldBooleanNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
+            Boolean realmGet$fieldBooleanNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanNull();
             if (realmGet$fieldBooleanNull != null) {
                 Table.nativeSetBoolean(tableNativePtr, columnInfo.fieldBooleanNullIndex, rowIndex, realmGet$fieldBooleanNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldBooleanNullIndex, rowIndex, false);
             }
-            byte[] realmGet$fieldBytesNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
+            byte[] realmGet$fieldBytesNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNotNull();
             if (realmGet$fieldBytesNotNull != null) {
                 Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNotNullIndex, rowIndex, realmGet$fieldBytesNotNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldBytesNotNullIndex, rowIndex, false);
             }
-            byte[] realmGet$fieldBytesNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
+            byte[] realmGet$fieldBytesNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBytesNull();
             if (realmGet$fieldBytesNull != null) {
                 Table.nativeSetByteArray(tableNativePtr, columnInfo.fieldBytesNullIndex, rowIndex, realmGet$fieldBytesNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldBytesNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldByteNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
+            Number realmGet$fieldByteNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNotNull();
             if (realmGet$fieldByteNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNotNullIndex, rowIndex, realmGet$fieldByteNotNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldByteNotNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldByteNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
+            Number realmGet$fieldByteNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteNull();
             if (realmGet$fieldByteNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldByteNullIndex, rowIndex, realmGet$fieldByteNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldByteNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldShortNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
+            Number realmGet$fieldShortNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNotNull();
             if (realmGet$fieldShortNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNotNullIndex, rowIndex, realmGet$fieldShortNotNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldShortNotNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldShortNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
+            Number realmGet$fieldShortNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortNull();
             if (realmGet$fieldShortNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldShortNullIndex, rowIndex, realmGet$fieldShortNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldShortNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldIntegerNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
+            Number realmGet$fieldIntegerNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNotNull();
             if (realmGet$fieldIntegerNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNotNullIndex, rowIndex, realmGet$fieldIntegerNotNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldIntegerNotNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldIntegerNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
+            Number realmGet$fieldIntegerNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerNull();
             if (realmGet$fieldIntegerNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldIntegerNullIndex, rowIndex, realmGet$fieldIntegerNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldIntegerNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldLongNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
+            Number realmGet$fieldLongNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNotNull();
             if (realmGet$fieldLongNotNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNotNullIndex, rowIndex, realmGet$fieldLongNotNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldLongNotNullIndex, rowIndex, false);
             }
-            Number realmGet$fieldLongNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
+            Number realmGet$fieldLongNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongNull();
             if (realmGet$fieldLongNull != null) {
                 Table.nativeSetLong(tableNativePtr, columnInfo.fieldLongNullIndex, rowIndex, realmGet$fieldLongNull.longValue(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldLongNullIndex, rowIndex, false);
             }
-            Float realmGet$fieldFloatNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
+            Float realmGet$fieldFloatNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNotNull();
             if (realmGet$fieldFloatNotNull != null) {
                 Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNotNullIndex, rowIndex, realmGet$fieldFloatNotNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldFloatNotNullIndex, rowIndex, false);
             }
-            Float realmGet$fieldFloatNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
+            Float realmGet$fieldFloatNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatNull();
             if (realmGet$fieldFloatNull != null) {
                 Table.nativeSetFloat(tableNativePtr, columnInfo.fieldFloatNullIndex, rowIndex, realmGet$fieldFloatNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldFloatNullIndex, rowIndex, false);
             }
-            Double realmGet$fieldDoubleNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
+            Double realmGet$fieldDoubleNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNotNull();
             if (realmGet$fieldDoubleNotNull != null) {
                 Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNotNullIndex, rowIndex, realmGet$fieldDoubleNotNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldDoubleNotNullIndex, rowIndex, false);
             }
-            Double realmGet$fieldDoubleNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
+            Double realmGet$fieldDoubleNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleNull();
             if (realmGet$fieldDoubleNull != null) {
                 Table.nativeSetDouble(tableNativePtr, columnInfo.fieldDoubleNullIndex, rowIndex, realmGet$fieldDoubleNull, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldDoubleNullIndex, rowIndex, false);
             }
-            java.util.Date realmGet$fieldDateNotNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
+            java.util.Date realmGet$fieldDateNotNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNotNull();
             if (realmGet$fieldDateNotNull != null) {
                 Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNotNullIndex, rowIndex, realmGet$fieldDateNotNull.getTime(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldDateNotNullIndex, rowIndex, false);
             }
-            java.util.Date realmGet$fieldDateNull = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
+            java.util.Date realmGet$fieldDateNull = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateNull();
             if (realmGet$fieldDateNull != null) {
                 Table.nativeSetTimestamp(tableNativePtr, columnInfo.fieldDateNullIndex, rowIndex, realmGet$fieldDateNull.getTime(), false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.fieldDateNullIndex, rowIndex, false);
             }
 
-            some.test.NullTypes fieldObjectNullObj = ((NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
+            some.test.NullTypes fieldObjectNullObj = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldObjectNull();
             if (fieldObjectNullObj != null) {
                 Long cachefieldObjectNull = cache.get(fieldObjectNullObj);
                 if (cachefieldObjectNull == null) {
-                    cachefieldObjectNull = NullTypesRealmProxy.insertOrUpdate(realm, fieldObjectNullObj, cache);
+                    cachefieldObjectNull = some_test_NullTypesRealmProxy.insertOrUpdate(realm, fieldObjectNullObj, cache);
                 }
                 Table.nativeSetLink(tableNativePtr, columnInfo.fieldObjectNullIndex, rowIndex, cachefieldObjectNull, false);
             } else {
@@ -3523,7 +3523,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldStringListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNotNullIndex);
             fieldStringListNotNullOsList.removeAll();
-            RealmList<java.lang.String> fieldStringListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
+            RealmList<java.lang.String> fieldStringListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNotNull();
             if (fieldStringListNotNullList != null) {
                 for (java.lang.String fieldStringListNotNullItem : fieldStringListNotNullList) {
                     if (fieldStringListNotNullItem == null) {
@@ -3537,7 +3537,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldStringListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldStringListNullIndex);
             fieldStringListNullOsList.removeAll();
-            RealmList<java.lang.String> fieldStringListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
+            RealmList<java.lang.String> fieldStringListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldStringListNull();
             if (fieldStringListNullList != null) {
                 for (java.lang.String fieldStringListNullItem : fieldStringListNullList) {
                     if (fieldStringListNullItem == null) {
@@ -3551,7 +3551,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldBinaryListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNotNullIndex);
             fieldBinaryListNotNullOsList.removeAll();
-            RealmList<byte[]> fieldBinaryListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
+            RealmList<byte[]> fieldBinaryListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNotNull();
             if (fieldBinaryListNotNullList != null) {
                 for (byte[] fieldBinaryListNotNullItem : fieldBinaryListNotNullList) {
                     if (fieldBinaryListNotNullItem == null) {
@@ -3565,7 +3565,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldBinaryListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBinaryListNullIndex);
             fieldBinaryListNullOsList.removeAll();
-            RealmList<byte[]> fieldBinaryListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
+            RealmList<byte[]> fieldBinaryListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBinaryListNull();
             if (fieldBinaryListNullList != null) {
                 for (byte[] fieldBinaryListNullItem : fieldBinaryListNullList) {
                     if (fieldBinaryListNullItem == null) {
@@ -3579,7 +3579,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldBooleanListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNotNullIndex);
             fieldBooleanListNotNullOsList.removeAll();
-            RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
+            RealmList<java.lang.Boolean> fieldBooleanListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNotNull();
             if (fieldBooleanListNotNullList != null) {
                 for (java.lang.Boolean fieldBooleanListNotNullItem : fieldBooleanListNotNullList) {
                     if (fieldBooleanListNotNullItem == null) {
@@ -3593,7 +3593,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldBooleanListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldBooleanListNullIndex);
             fieldBooleanListNullOsList.removeAll();
-            RealmList<java.lang.Boolean> fieldBooleanListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
+            RealmList<java.lang.Boolean> fieldBooleanListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldBooleanListNull();
             if (fieldBooleanListNullList != null) {
                 for (java.lang.Boolean fieldBooleanListNullItem : fieldBooleanListNullList) {
                     if (fieldBooleanListNullItem == null) {
@@ -3607,7 +3607,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldLongListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNotNullIndex);
             fieldLongListNotNullOsList.removeAll();
-            RealmList<java.lang.Long> fieldLongListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
+            RealmList<java.lang.Long> fieldLongListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNotNull();
             if (fieldLongListNotNullList != null) {
                 for (java.lang.Long fieldLongListNotNullItem : fieldLongListNotNullList) {
                     if (fieldLongListNotNullItem == null) {
@@ -3621,7 +3621,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldLongListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldLongListNullIndex);
             fieldLongListNullOsList.removeAll();
-            RealmList<java.lang.Long> fieldLongListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
+            RealmList<java.lang.Long> fieldLongListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldLongListNull();
             if (fieldLongListNullList != null) {
                 for (java.lang.Long fieldLongListNullItem : fieldLongListNullList) {
                     if (fieldLongListNullItem == null) {
@@ -3635,7 +3635,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldIntegerListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNotNullIndex);
             fieldIntegerListNotNullOsList.removeAll();
-            RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
+            RealmList<java.lang.Integer> fieldIntegerListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNotNull();
             if (fieldIntegerListNotNullList != null) {
                 for (java.lang.Integer fieldIntegerListNotNullItem : fieldIntegerListNotNullList) {
                     if (fieldIntegerListNotNullItem == null) {
@@ -3649,7 +3649,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldIntegerListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldIntegerListNullIndex);
             fieldIntegerListNullOsList.removeAll();
-            RealmList<java.lang.Integer> fieldIntegerListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
+            RealmList<java.lang.Integer> fieldIntegerListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldIntegerListNull();
             if (fieldIntegerListNullList != null) {
                 for (java.lang.Integer fieldIntegerListNullItem : fieldIntegerListNullList) {
                     if (fieldIntegerListNullItem == null) {
@@ -3663,7 +3663,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldShortListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNotNullIndex);
             fieldShortListNotNullOsList.removeAll();
-            RealmList<java.lang.Short> fieldShortListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
+            RealmList<java.lang.Short> fieldShortListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNotNull();
             if (fieldShortListNotNullList != null) {
                 for (java.lang.Short fieldShortListNotNullItem : fieldShortListNotNullList) {
                     if (fieldShortListNotNullItem == null) {
@@ -3677,7 +3677,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldShortListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldShortListNullIndex);
             fieldShortListNullOsList.removeAll();
-            RealmList<java.lang.Short> fieldShortListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
+            RealmList<java.lang.Short> fieldShortListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldShortListNull();
             if (fieldShortListNullList != null) {
                 for (java.lang.Short fieldShortListNullItem : fieldShortListNullList) {
                     if (fieldShortListNullItem == null) {
@@ -3691,7 +3691,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldByteListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNotNullIndex);
             fieldByteListNotNullOsList.removeAll();
-            RealmList<java.lang.Byte> fieldByteListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
+            RealmList<java.lang.Byte> fieldByteListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNotNull();
             if (fieldByteListNotNullList != null) {
                 for (java.lang.Byte fieldByteListNotNullItem : fieldByteListNotNullList) {
                     if (fieldByteListNotNullItem == null) {
@@ -3705,7 +3705,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldByteListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldByteListNullIndex);
             fieldByteListNullOsList.removeAll();
-            RealmList<java.lang.Byte> fieldByteListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
+            RealmList<java.lang.Byte> fieldByteListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldByteListNull();
             if (fieldByteListNullList != null) {
                 for (java.lang.Byte fieldByteListNullItem : fieldByteListNullList) {
                     if (fieldByteListNullItem == null) {
@@ -3719,7 +3719,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldDoubleListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNotNullIndex);
             fieldDoubleListNotNullOsList.removeAll();
-            RealmList<java.lang.Double> fieldDoubleListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
+            RealmList<java.lang.Double> fieldDoubleListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNotNull();
             if (fieldDoubleListNotNullList != null) {
                 for (java.lang.Double fieldDoubleListNotNullItem : fieldDoubleListNotNullList) {
                     if (fieldDoubleListNotNullItem == null) {
@@ -3733,7 +3733,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldDoubleListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDoubleListNullIndex);
             fieldDoubleListNullOsList.removeAll();
-            RealmList<java.lang.Double> fieldDoubleListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
+            RealmList<java.lang.Double> fieldDoubleListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDoubleListNull();
             if (fieldDoubleListNullList != null) {
                 for (java.lang.Double fieldDoubleListNullItem : fieldDoubleListNullList) {
                     if (fieldDoubleListNullItem == null) {
@@ -3747,7 +3747,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldFloatListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNotNullIndex);
             fieldFloatListNotNullOsList.removeAll();
-            RealmList<java.lang.Float> fieldFloatListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
+            RealmList<java.lang.Float> fieldFloatListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNotNull();
             if (fieldFloatListNotNullList != null) {
                 for (java.lang.Float fieldFloatListNotNullItem : fieldFloatListNotNullList) {
                     if (fieldFloatListNotNullItem == null) {
@@ -3761,7 +3761,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldFloatListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldFloatListNullIndex);
             fieldFloatListNullOsList.removeAll();
-            RealmList<java.lang.Float> fieldFloatListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
+            RealmList<java.lang.Float> fieldFloatListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldFloatListNull();
             if (fieldFloatListNullList != null) {
                 for (java.lang.Float fieldFloatListNullItem : fieldFloatListNullList) {
                     if (fieldFloatListNullItem == null) {
@@ -3775,7 +3775,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldDateListNotNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNotNullIndex);
             fieldDateListNotNullOsList.removeAll();
-            RealmList<java.util.Date> fieldDateListNotNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
+            RealmList<java.util.Date> fieldDateListNotNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNotNull();
             if (fieldDateListNotNullList != null) {
                 for (java.util.Date fieldDateListNotNullItem : fieldDateListNotNullList) {
                     if (fieldDateListNotNullItem == null) {
@@ -3789,7 +3789,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
 
             OsList fieldDateListNullOsList = new OsList(table.getUncheckedRow(rowIndex), columnInfo.fieldDateListNullIndex);
             fieldDateListNullOsList.removeAll();
-            RealmList<java.util.Date> fieldDateListNullList = ((NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
+            RealmList<java.util.Date> fieldDateListNullList = ((some_test_NullTypesRealmProxyInterface) object).realmGet$fieldDateListNull();
             if (fieldDateListNullList != null) {
                 for (java.util.Date fieldDateListNullItem : fieldDateListNullList) {
                     if (fieldDateListNullItem == null) {
@@ -3820,8 +3820,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             unmanagedObject = (some.test.NullTypes) cachedObject.object;
             cachedObject.minDepth = currentDepth;
         }
-        NullTypesRealmProxyInterface unmanagedCopy = (NullTypesRealmProxyInterface) unmanagedObject;
-        NullTypesRealmProxyInterface realmSource = (NullTypesRealmProxyInterface) realmObject;
+        some_test_NullTypesRealmProxyInterface unmanagedCopy = (some_test_NullTypesRealmProxyInterface) unmanagedObject;
+        some_test_NullTypesRealmProxyInterface realmSource = (some_test_NullTypesRealmProxyInterface) realmObject;
         unmanagedCopy.realmSet$fieldStringNotNull(realmSource.realmGet$fieldStringNotNull());
         unmanagedCopy.realmSet$fieldStringNull(realmSource.realmGet$fieldStringNull());
         unmanagedCopy.realmSet$fieldBooleanNotNull(realmSource.realmGet$fieldBooleanNotNull());
@@ -3844,7 +3844,7 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
         unmanagedCopy.realmSet$fieldDateNull(realmSource.realmGet$fieldDateNull());
 
         // Deep copy of fieldObjectNull
-        unmanagedCopy.realmSet$fieldObjectNull(NullTypesRealmProxy.createDetachedCopy(realmSource.realmGet$fieldObjectNull(), currentDepth + 1, maxDepth, cache));
+        unmanagedCopy.realmSet$fieldObjectNull(some_test_NullTypesRealmProxy.createDetachedCopy(realmSource.realmGet$fieldObjectNull(), currentDepth + 1, maxDepth, cache));
 
         unmanagedCopy.realmSet$fieldStringListNotNull(new RealmList<java.lang.String>());
         unmanagedCopy.realmGet$fieldStringListNotNull().addAll(realmSource.realmGet$fieldStringListNotNull());
@@ -4105,7 +4105,7 @@ public int hashCode() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        NullTypesRealmProxy aNullTypes = (NullTypesRealmProxy)o;
+        some_test_NullTypesRealmProxy aNullTypes = (some_test_NullTypesRealmProxy)o;
 
         String path = proxyState.getRealm$realm().getPath();
         String otherPath = aNullTypes.proxyState.getRealm$realm().getPath();
diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_SimpleRealmProxy.java
similarity index 90%
rename from realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
rename to realm/realm-annotations-processor/src/test/resources/io/realm/some_test_SimpleRealmProxy.java
index 1039391788..fd591f4bc5 100644
--- a/realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java
+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_SimpleRealmProxy.java
@@ -31,8 +31,8 @@
 import org.json.JSONObject;
 
 @SuppressWarnings("all")
-public class SimpleRealmProxy extends some.test.Simple
-        implements RealmObjectProxy, SimpleRealmProxyInterface {
+public class some_test_SimpleRealmProxy extends some.test.Simple
+        implements RealmObjectProxy, some_test_SimpleRealmProxyInterface {
 
     static final class SimpleColumnInfo extends ColumnInfo {
         long nameIndex;
@@ -69,7 +69,7 @@ protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
     private SimpleColumnInfo columnInfo;
     private ProxyState<some.test.Simple> proxyState;
 
-    SimpleRealmProxy() {
+    some_test_SimpleRealmProxy() {
         proxyState.setConstructionFinished();
     }
 
@@ -164,7 +164,7 @@ public static String getSimpleClassName() {
         final List<String> excludeFields = Collections.<String> emptyList();
         some.test.Simple obj = realm.createObjectInternal(some.test.Simple.class, true, excludeFields);
 
-        final SimpleRealmProxyInterface objProxy = (SimpleRealmProxyInterface) obj;
+        final some_test_SimpleRealmProxyInterface objProxy = (some_test_SimpleRealmProxyInterface) obj;
         if (json.has("name")) {
             if (json.isNull("name")) {
                 objProxy.realmSet$name(null);
@@ -187,7 +187,7 @@ public static String getSimpleClassName() {
     public static some.test.Simple createUsingJsonStream(Realm realm, JsonReader reader)
             throws IOException {
         final some.test.Simple obj = new some.test.Simple();
-        final SimpleRealmProxyInterface objProxy = (SimpleRealmProxyInterface) obj;
+        final some_test_SimpleRealmProxyInterface objProxy = (some_test_SimpleRealmProxyInterface) obj;
         reader.beginObject();
         while (reader.hasNext()) {
             String name = reader.nextName();
@@ -243,8 +243,8 @@ public static String getSimpleClassName() {
         some.test.Simple realmObject = realm.createObjectInternal(some.test.Simple.class, false, Collections.<String>emptyList());
         cache.put(newObject, (RealmObjectProxy) realmObject);
 
-        SimpleRealmProxyInterface realmObjectSource = (SimpleRealmProxyInterface) newObject;
-        SimpleRealmProxyInterface realmObjectCopy = (SimpleRealmProxyInterface) realmObject;
+        some_test_SimpleRealmProxyInterface realmObjectSource = (some_test_SimpleRealmProxyInterface) newObject;
+        some_test_SimpleRealmProxyInterface realmObjectCopy = (some_test_SimpleRealmProxyInterface) realmObject;
 
         realmObjectCopy.realmSet$name(realmObjectSource.realmGet$name());
         realmObjectCopy.realmSet$age(realmObjectSource.realmGet$age());
@@ -260,11 +260,11 @@ public static long insert(Realm realm, some.test.Simple object, Map<RealmModel,L
         SimpleColumnInfo columnInfo = (SimpleColumnInfo) realm.getSchema().getColumnInfo(some.test.Simple.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
+        String realmGet$name = ((some_test_SimpleRealmProxyInterface) object).realmGet$name();
         if (realmGet$name != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.nameIndex, rowIndex, realmGet$name, false);
         }
-        Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((SimpleRealmProxyInterface) object).realmGet$age(), false);
+        Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((some_test_SimpleRealmProxyInterface) object).realmGet$age(), false);
         return rowIndex;
     }
 
@@ -284,11 +284,11 @@ public static void insert(Realm realm, Iterator<? extends RealmModel> objects, M
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
+            String realmGet$name = ((some_test_SimpleRealmProxyInterface) object).realmGet$name();
             if (realmGet$name != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.nameIndex, rowIndex, realmGet$name, false);
             }
-            Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((SimpleRealmProxyInterface) object).realmGet$age(), false);
+            Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((some_test_SimpleRealmProxyInterface) object).realmGet$age(), false);
         }
     }
 
@@ -301,13 +301,13 @@ public static long insertOrUpdate(Realm realm, some.test.Simple object, Map<Real
         SimpleColumnInfo columnInfo = (SimpleColumnInfo) realm.getSchema().getColumnInfo(some.test.Simple.class);
         long rowIndex = OsObject.createRow(table);
         cache.put(object, rowIndex);
-        String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
+        String realmGet$name = ((some_test_SimpleRealmProxyInterface) object).realmGet$name();
         if (realmGet$name != null) {
             Table.nativeSetString(tableNativePtr, columnInfo.nameIndex, rowIndex, realmGet$name, false);
         } else {
             Table.nativeSetNull(tableNativePtr, columnInfo.nameIndex, rowIndex, false);
         }
-        Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((SimpleRealmProxyInterface) object).realmGet$age(), false);
+        Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((some_test_SimpleRealmProxyInterface) object).realmGet$age(), false);
         return rowIndex;
     }
 
@@ -327,13 +327,13 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             }
             long rowIndex = OsObject.createRow(table);
             cache.put(object, rowIndex);
-            String realmGet$name = ((SimpleRealmProxyInterface) object).realmGet$name();
+            String realmGet$name = ((some_test_SimpleRealmProxyInterface) object).realmGet$name();
             if (realmGet$name != null) {
                 Table.nativeSetString(tableNativePtr, columnInfo.nameIndex, rowIndex, realmGet$name, false);
             } else {
                 Table.nativeSetNull(tableNativePtr, columnInfo.nameIndex, rowIndex, false);
             }
-            Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((SimpleRealmProxyInterface) object).realmGet$age(), false);
+            Table.nativeSetLong(tableNativePtr, columnInfo.ageIndex, rowIndex, ((some_test_SimpleRealmProxyInterface) object).realmGet$age(), false);
         }
     }
 
@@ -354,8 +354,8 @@ public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> ob
             unmanagedObject = (some.test.Simple) cachedObject.object;
             cachedObject.minDepth = currentDepth;
         }
-        SimpleRealmProxyInterface unmanagedCopy = (SimpleRealmProxyInterface) unmanagedObject;
-        SimpleRealmProxyInterface realmSource = (SimpleRealmProxyInterface) realmObject;
+        some_test_SimpleRealmProxyInterface unmanagedCopy = (some_test_SimpleRealmProxyInterface) unmanagedObject;
+        some_test_SimpleRealmProxyInterface realmSource = (some_test_SimpleRealmProxyInterface) realmObject;
         unmanagedCopy.realmSet$name(realmSource.realmGet$name());
         unmanagedCopy.realmSet$age(realmSource.realmGet$age());
 
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkSelfReference.java b/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkSelfReference.java
new file mode 100644
index 0000000000..600db68589
--- /dev/null
+++ b/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkSelfReference.java
@@ -0,0 +1,15 @@
+package some.test;
+
+import io.realm.RealmList;
+import io.realm.RealmObject;
+import io.realm.RealmResults;
+import io.realm.annotations.LinkingObjects;
+
+public class BacklinkSelfReference extends RealmObject {
+
+    public String id;
+    public BacklinkSelfReference self;
+
+    @LinkingObjects("self")
+    final RealmResults<BacklinkSelfReference> parents = null;
+}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkSource.java b/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkSource.java
new file mode 100644
index 0000000000..c86d3daaff
--- /dev/null
+++ b/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkSource.java
@@ -0,0 +1,10 @@
+package some.test;
+
+import io.realm.RealmList;
+import io.realm.RealmObject;
+
+public class BacklinkSource extends RealmObject {
+    private String id;
+    private BacklinkTarget child;
+    private RealmList<BacklinkTarget> children;
+}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkTarget.java b/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkTarget.java
index 40632c1a7d..715f57d2cd 100644
--- a/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkTarget.java
+++ b/realm/realm-annotations-processor/src/test/resources/some/test/BacklinkTarget.java
@@ -1,12 +1,15 @@
 package some.test;
 
-import io.realm.RealmList;
 import io.realm.RealmObject;
 import io.realm.RealmResults;
 import io.realm.annotations.LinkingObjects;
 
 public class BacklinkTarget extends RealmObject {
-    private String id;
-    private Backlinks child;
-    private RealmList<Backlinks> children;
+    private int id;
+
+    @LinkingObjects("child")
+    private final RealmResults<BacklinkSource> simpleParents = null;
+
+    @LinkingObjects("children")
+    private final RealmResults<BacklinkSource> listParents = null;
 }
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks.java b/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks.java
deleted file mode 100644
index 8ad6f6e435..0000000000
--- a/realm/realm-annotations-processor/src/test/resources/some/test/Backlinks.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package some.test;
-
-import io.realm.RealmList;
-import io.realm.RealmObject;
-import io.realm.RealmResults;
-import io.realm.annotations.LinkingObjects;
-
-public class Backlinks extends RealmObject {
-    private int id;
-
-    @LinkingObjects("child")
-    private final RealmResults<BacklinkTarget> simpleParents = null;
-
-    @LinkingObjects("children")
-    private final RealmResults<BacklinkTarget> listParents = null;
-}
diff --git a/realm/realm-annotations-processor/src/test/resources/some/test/conflict/BacklinkSelfReference.java b/realm/realm-annotations-processor/src/test/resources/some/test/conflict/BacklinkSelfReference.java
new file mode 100644
index 0000000000..99a9fa2113
--- /dev/null
+++ b/realm/realm-annotations-processor/src/test/resources/some/test/conflict/BacklinkSelfReference.java
@@ -0,0 +1,12 @@
+package some.test.conflict;
+
+import io.realm.RealmList;
+import io.realm.RealmObject;
+import io.realm.annotations.LinkingObjects;
+import io.realm.annotations.RealmClass;
+
+// Test Backlink resolution when there is simple class name conflicts, but not internal name conflicts.
+@RealmClass(name = "!BacklinkSelfReference")
+public class BacklinkSelfReference extends RealmObject {
+    public String name;
+}
diff --git a/realm/realm-library/src/androidTest/java/io/realm/ColumnInfoTests.java b/realm/realm-library/src/androidTest/java/io/realm/ColumnInfoTests.java
index 01b6920726..02ef67f017 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/ColumnInfoTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/ColumnInfoTests.java
@@ -59,10 +59,10 @@ public void tearDown() {
 
     @Test
     public void copyColumnInfoFrom_checkIndex() {
-        CatRealmProxy.CatColumnInfo sourceColumnInfo
-                = (CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
-        CatRealmProxy.CatColumnInfo targetColumnInfo
-                = (CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
+        io_realm_entities_CatRealmProxy.CatColumnInfo sourceColumnInfo
+                = (io_realm_entities_CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
+        io_realm_entities_CatRealmProxy.CatColumnInfo targetColumnInfo
+                = (io_realm_entities_CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
 
         // Checks precondition.
         assertNotSame(sourceColumnInfo, targetColumnInfo);
@@ -100,8 +100,8 @@ public void copyColumnInfoFrom_checkIndex() {
 
     @Test
     public void copy_differentInstanceSameValues() {
-        final CatRealmProxy.CatColumnInfo columnInfo
-                = (CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
+        final io_realm_entities_CatRealmProxy.CatColumnInfo columnInfo
+                = (io_realm_entities_CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
 
         columnInfo.nameIndex = 1;
         columnInfo.ageIndex = 2;
@@ -112,7 +112,7 @@ public void copy_differentInstanceSameValues() {
         columnInfo.ownerIndex = 7;
         columnInfo.scaredOfDogIndex = 8;
 
-        CatRealmProxy.CatColumnInfo copy = (CatRealmProxy.CatColumnInfo) columnInfo.copy(true);
+        io_realm_entities_CatRealmProxy.CatColumnInfo copy = (io_realm_entities_CatRealmProxy.CatColumnInfo) columnInfo.copy(true);
 
         // verify that the copy is identical
         assertNotSame(columnInfo, copy);
@@ -149,10 +149,10 @@ public void copy_differentInstanceSameValues() {
 
     @Test
     public void copy_immutableThrows() {
-        final CatRealmProxy.CatColumnInfo original
-                = (CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
+        final io_realm_entities_CatRealmProxy.CatColumnInfo original
+                = (io_realm_entities_CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
 
-        CatRealmProxy.CatColumnInfo copy = (CatRealmProxy.CatColumnInfo) original.copy(false);
+        io_realm_entities_CatRealmProxy.CatColumnInfo copy = (io_realm_entities_CatRealmProxy.CatColumnInfo) original.copy(false);
         try {
             copy.copyFrom(original);
             fail("Attempt to copy to an immutable ColumnInfo should throwS");
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmProxyMediatorTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmProxyMediatorTests.java
index 7646e91645..8158986c35 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmProxyMediatorTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmProxyMediatorTests.java
@@ -60,7 +60,7 @@ public void tearDown() {
     @Test
     public void createColumnInfo_noDuplicateIndexInIndexFields() {
         RealmProxyMediator mediator = realm.getConfiguration().getSchemaMediator();
-        CatRealmProxy.CatColumnInfo columnInfo = (CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
+        io_realm_entities_CatRealmProxy.CatColumnInfo columnInfo = (io_realm_entities_CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
 
         final Set<Long> indexSet = new HashSet<Long>();
         int indexCount = 0;
@@ -88,8 +88,8 @@ public void createColumnInfo_noDuplicateIndexInIndexFields() {
     @Test
     public void createColumnInfo_noDuplicateIndexInIndicesMap() {
         RealmProxyMediator mediator = realm.getConfiguration().getSchemaMediator();
-        CatRealmProxy.CatColumnInfo columnInfo;
-        columnInfo = (CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
+        io_realm_entities_CatRealmProxy.CatColumnInfo columnInfo;
+        columnInfo = (io_realm_entities_CatRealmProxy.CatColumnInfo) mediator.createColumnInfo(Cat.class, realm.sharedRealm.getSchemaInfo());
 
         final Set<Long> indexSet = new HashSet<Long>();
         int indexCount = 0;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index f1490c163c..4f2442b72e 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -4128,8 +4128,8 @@ public void nonAdditiveSchemaChangesWhenTypedRealmExists() throws InterruptedExc
                 .name("schemaChangeTest")
                 .build();
         Realm realm = Realm.getInstance(realmConfig);
-        StringOnlyRealmProxy.StringOnlyColumnInfo columnInfo
-                = (StringOnlyRealmProxy.StringOnlyColumnInfo) realm.getSchema().getColumnInfo(StringOnly.class);
+        io_realm_entities_StringOnlyRealmProxy.StringOnlyColumnInfo columnInfo
+                = (io_realm_entities_StringOnlyRealmProxy.StringOnlyColumnInfo) realm.getSchema().getColumnInfo(StringOnly.class);
         assertEquals(0, columnInfo.charsIndex);
 
         realm.beginTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/AllJavaTypes.java b/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/AllJavaTypes.java
new file mode 100644
index 0000000000..ef31fc30c5
--- /dev/null
+++ b/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/AllJavaTypes.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.entities.conflict;
+
+import io.realm.RealmObject;
+import io.realm.annotations.RealmClass;
+
+// Potential conflict with `io.realm.entities.AllJavaTypes` but proxy classes should be generated
+// using the internal name (Which do not conflict)
+@RealmClass(name = "!AllJavaTypes")
+public class AllJavaTypes extends RealmObject {
+    public String name;
+}
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsObjectSchemaInfo.java b/realm/realm-library/src/main/java/io/realm/internal/OsObjectSchemaInfo.java
index dc23ee4f0f..cac92e21df 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OsObjectSchemaInfo.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OsObjectSchemaInfo.java
@@ -103,13 +103,13 @@ public Builder addPersistedLinkProperty(String name, RealmFieldType type, String
          * information in the Realm file's schema. This property type will always be
          * {@link RealmFieldType#LINKING_OBJECTS}.
          *
-         * @param name the name of the link property.
-         * @param targetClassname The class name of the property links to.
-         * @param targetFieldName The field name of the property links to.
+         * @param name the name of the property .
+         * @param sourceClass The class name of the the class linking to this class, ie. the source class.
+         * @param sourceClassName The field name in the source class that links to this class.
          * @return this {@code OsObjectSchemaInfo.Builder}.
          */
-        public Builder addComputedLinkProperty(String name, String targetClassname, String targetFieldName) {
-            long propertyPtr = Property.nativeCreateComputedLinkProperty(name, targetClassname, targetFieldName);
+        public Builder addComputedLinkProperty(String name, String sourceClass, String sourceClassName) {
+            long propertyPtr = Property.nativeCreateComputedLinkProperty(name, sourceClass, sourceClassName);
             computedPropertyPtrArray[computedPropertyPtrCurPos] = propertyPtr;
             computedPropertyPtrCurPos++;
             return this;
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
index 5ed82d663f..30ff8c8ad2 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncSession.java
@@ -70,7 +70,6 @@
     private final SyncConfiguration configuration;
     private final ErrorHandler errorHandler;
     private RealmAsyncTask networkRequest;
-    private NetworkStateReceiver.ConnectionListener networkListener;
     private RealmAsyncTask refreshTokenTask;
     private RealmAsyncTask refreshTokenNetworkRequest;
     private AtomicBoolean onGoingAccessTokenQuery = new AtomicBoolean(false);
@@ -516,30 +515,11 @@ String getAccessToken(final AuthenticationServer authServer, String refreshToken
                         getUser().setRefreshToken(newRefreshToken);
                     }
                 } catch (JSONException e) {
-                    RealmLog.error(e,"Session[%s]: Can not parse the refresh_token into a valid JSONObject: ", configuration.getPath());
+                    RealmLog.error(e, "Session[%s]: Can not parse the refresh_token into a valid JSONObject: ", configuration.getPath());
                 }
             }
-            if (!onGoingAccessTokenQuery.getAndSet(true)) {
-                if (NetworkStateReceiver.isOnline(SyncObjectServerFacade.getApplicationContext())) {
-                    authenticateRealm(authServer);
-
-                } else {
-                    // Wait for connection to become available, before trying again.
-                    // The Session might potentially stay in this state for the lifetime of the application.
-                    // This is acceptable.
-                    networkListener = new NetworkStateReceiver.ConnectionListener() {
-                        @Override
-                        public void onChange(boolean connectionAvailable) {
-                            if (connectionAvailable) {
-                                if (!onGoingAccessTokenQuery.getAndSet(true)) {
-                                    authenticateRealm(authServer);
-                                }
-                                NetworkStateReceiver.removeListener(this);
-                            }
-                        }
-                    };
-                    NetworkStateReceiver.addListener(networkListener);
-                }
+            if (!onGoingAccessTokenQuery.get() && NetworkStateReceiver.isOnline(SyncObjectServerFacade.getApplicationContext())) {
+                authenticateRealm(authServer);
             }
         }
         return null;
@@ -552,6 +532,7 @@ private void authenticateRealm(final AuthenticationServer authServer) {
         }
         clearScheduledAccessTokenRefresh();
 
+        onGoingAccessTokenQuery.set(true);
         // Authenticate in a background thread. This allows incremental backoff and retries in a safe manner.
         Future<?> task = SyncManager.NETWORK_POOL_EXECUTOR.submit(new ExponentialBackoffTask<AuthenticateResponse>() {
             @Override
@@ -601,6 +582,7 @@ protected void onError(AuthenticateResponse response) {
     }
 
     private void scheduleRefreshAccessToken(final AuthenticationServer authServer, long expireDateInMs) {
+        onGoingAccessTokenQuery.set(true);
         // calculate the delay time before which we should refresh the access_token,
         // we adjust to 10 second to proactively refresh the access_token before the session
         // hit the expire date on the token
