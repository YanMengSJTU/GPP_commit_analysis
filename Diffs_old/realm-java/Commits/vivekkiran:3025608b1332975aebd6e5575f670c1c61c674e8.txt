diff --git a/build.gradle b/build.gradle
index 3ffcf0360b..12370c0abf 100644
--- a/build.gradle
+++ b/build.gradle
@@ -9,7 +9,7 @@ buildscript {
 
 apply plugin: 'ch.netzwerg.release'
 
-def currentVersion = file("${projectDir}/version.txt").text.trim();
+def currentVersion = file("${projectDir}/version.txt").text.trim()
 
 def props = new Properties()
 props.load(new FileInputStream("${rootDir}/realm.properties"))
diff --git a/examples/build.gradle b/examples/build.gradle
index e4d048ff95..a801b01386 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -10,7 +10,7 @@ configurations.all {
 static String getAppId (path) {
     String build = new File(path).text
     def matcher = build =~ 'applicationId.*'
-    def appId = matcher.size() > 0 ? matcher[0].trim() - 'applicationId' - ~/\s/ : '';
+    def appId = matcher.size() > 0 ? matcher[0].trim() - 'applicationId' - ~/\s/ : ''
     String myappId = appId.replaceAll('"', '')
     myappId = myappId.replaceAll('\'', '')
     return myappId
diff --git a/examples/objectServerExample/build.gradle b/examples/objectServerExample/build.gradle
index 5044b5d4eb..9f7afb9744 100644
--- a/examples/objectServerExample/build.gradle
+++ b/examples/objectServerExample/build.gradle
@@ -3,22 +3,22 @@ apply plugin: 'realm-android'
 
 // Credit: http://jeremie-martinez.com/2015/05/05/inject-host-gradle/
 def getIP() {
-    InetAddress result = null;
-    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
+    InetAddress result = null
+    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()
     while (interfaces.hasMoreElements()) {
-        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
+        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses()
         while (addresses.hasMoreElements()) {
-            InetAddress address = addresses.nextElement();
+            InetAddress address = addresses.nextElement()
             if (!address.isLoopbackAddress()) {
                 if (address.isSiteLocalAddress()) {
-                    return address.getHostAddress();
+                    return address.getHostAddress()
                 } else if (result == null) {
-                    result = address;
+                    result = address
                 }
             }
         }
     }
-    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
+    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress()
 }
 
 android {
diff --git a/gradle-plugin/build.gradle b/gradle-plugin/build.gradle
index 6524932ee5..cac9adc22b 100644
--- a/gradle-plugin/build.gradle
+++ b/gradle-plugin/build.gradle
@@ -30,7 +30,7 @@ sourceCompatibility = 1.8
 targetCompatibility = 1.8
 
 group = 'io.realm'
-version = file("${projectDir}/../version.txt").text.trim();
+version = file("${projectDir}/../version.txt").text.trim()
 
 configurations {
     provided
diff --git a/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy b/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
index 12b51751ad..fc343412dd 100644
--- a/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
+++ b/gradle-plugin/src/main/groovy/io/realm/gradle/RealmPluginExtension.groovy
@@ -32,7 +32,7 @@ class RealmPluginExtension {
     }
 
     void setSyncEnabled(value) {
-        this.syncEnabled = value;
+        this.syncEnabled = value
         setDependencies(syncEnabled, kotlinExtensionsEnabled)
     }
 
@@ -43,7 +43,7 @@ class RealmPluginExtension {
 
     void setDependencies(boolean syncEnabled, boolean kotlinExtensionsEnabled) {
         // remove libraries first
-        def iterator = project.getConfigurations().getByName(dependencyConfigurationName).getDependencies().iterator();
+        def iterator = project.getConfigurations().getByName(dependencyConfigurationName).getDependencies().iterator()
         while (iterator.hasNext()) {
             def item = iterator.next()
             if (item.group == 'io.realm') {
diff --git a/realm-annotations/build.gradle b/realm-annotations/build.gradle
index 7e4ab2eb5c..43628a8f8a 100644
--- a/realm-annotations/build.gradle
+++ b/realm-annotations/build.gradle
@@ -26,7 +26,7 @@ sourceCompatibility = '1.8'
 targetCompatibility = '1.8'
 
 group = 'io.realm'
-version = file("${projectDir}/../version.txt").text.trim();
+version = file("${projectDir}/../version.txt").text.trim()
 
 def commonPom = {
     licenses {
diff --git a/realm-transformer/build.gradle b/realm-transformer/build.gradle
index c2a125116c..8bc83e5e24 100644
--- a/realm-transformer/build.gradle
+++ b/realm-transformer/build.gradle
@@ -25,7 +25,7 @@ apply plugin: 'com.jfrog.artifactory'
 apply plugin: 'com.jfrog.bintray'
 
 group = 'io.realm'
-version = file("${projectDir}/../version.txt").text.trim();
+version = file("${projectDir}/../version.txt").text.trim()
 
 def properties = new Properties()
 properties.load(new FileInputStream("${projectDir}/../dependencies.list"))
diff --git a/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy b/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
index 957581a6cf..53d9889db0 100644
--- a/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
+++ b/realm-transformer/src/main/groovy/io/realm/transformer/RealmTransformer.groovy
@@ -84,7 +84,7 @@ class RealmTransformer extends Transform {
         // Find all the class names
         def inputClassNames = getClassNames(inputs)
         def referencedClassNames = getClassNames(referencedInputs)
-        def allClassNames = merge(inputClassNames, referencedClassNames);
+        def allClassNames = merge(inputClassNames, referencedClassNames)
 
         // Create and populate the Javassist class pool
         ClassPool classPool = new ManagedClassPool(inputs, referencedInputs)
@@ -103,7 +103,7 @@ class RealmTransformer extends Transform {
                 .findAll { it.superclass?.equals(baseProxyMediator) }
         logger.debug "Proxy Mediator Classes: ${proxyMediatorClasses*.name}"
         proxyMediatorClasses.each {
-            BytecodeModifier.overrideTransformedMarker(it);
+            BytecodeModifier.overrideTransformedMarker(it)
         }
 
         // Find the model classes
@@ -174,8 +174,8 @@ class RealmTransformer extends Transform {
             it.getPackageName()
         }
 
-        def targetSdk = project?.android?.defaultConfig?.targetSdkVersion?.mApiLevel as String;
-        def minSdk = project?.android?.defaultConfig?.minSdkVersion?.mApiLevel as String;
+        def targetSdk = project?.android?.defaultConfig?.targetSdkVersion?.mApiLevel as String
+        def minSdk = project?.android?.defaultConfig?.minSdkVersion?.mApiLevel as String
 
         def env = System.getenv()
         def disableAnalytics = env["REALM_DISABLE_ANALYTICS"]
@@ -252,7 +252,7 @@ class RealmTransformer extends Transform {
         Set<String> merged = new HashSet<String>()
         merged.addAll(set1)
         merged.addAll(set2)
-        return merged;
+        return merged
     }
 
     // There is no official way to get the path to android.jar for transform.
diff --git a/realm-transformer/src/test/groovy/io/realm/transformer/BytecodeModifierTest.groovy b/realm-transformer/src/test/groovy/io/realm/transformer/BytecodeModifierTest.groovy
index 495289af6d..2e2e6cd279 100644
--- a/realm-transformer/src/test/groovy/io/realm/transformer/BytecodeModifierTest.groovy
+++ b/realm-transformer/src/test/groovy/io/realm/transformer/BytecodeModifierTest.groovy
@@ -198,8 +198,8 @@ class BytecodeModifierTest extends Specification {
         def codeAttribute = methodInfo.getCodeAttribute()
 
         for (CodeIterator ci = codeAttribute.iterator(); ci.hasNext();) {
-            int index = ci.next();
-            int op = ci.byteAt(index);
+            int index = ci.next()
+            int op = ci.byteAt(index)
             if (op == Opcode.GETFIELD) {
                 return true
             }
@@ -212,8 +212,8 @@ class BytecodeModifierTest extends Specification {
         def codeAttribute = methodInfo.getCodeAttribute()
 
         for (CodeIterator ci = codeAttribute.iterator(); ci.hasNext();) {
-            int index = ci.next();
-            int op = ci.byteAt(index);
+            int index = ci.next()
+            int op = ci.byteAt(index)
             if (op == Opcode.INVOKEVIRTUAL) {
                 return true
             }
diff --git a/realm/build.gradle b/realm/build.gradle
index 2372eac74a..290fe8258e 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -37,7 +37,7 @@ allprojects {
     }
 
     group = 'io.realm'
-    version = file("${rootDir}/../version.txt").text.trim();
+    version = file("${rootDir}/../version.txt").text.trim()
     repositories {
         mavenLocal()
         google()
diff --git a/realm/realm-library/build.gradle b/realm/realm-library/build.gradle
index 8cc99f6036..86f675551b 100644
--- a/realm/realm-library/build.gradle
+++ b/realm/realm-library/build.gradle
@@ -465,7 +465,7 @@ task downloadCore() {
             return true
         }
         if (project.forceDownloadCore) {
-            return true;
+            return true
         }
         if (!isHashCheckingEnabled()) {
             println "Skipping hash check(empty \'coreSha256Hash\')."
@@ -497,7 +497,7 @@ task downloadCore() {
                     throw new GradleException("Invalid checksum for file '" +
                             "${project.coreArchiveFile.getName()}'. Expected " +
                             "${project.coreSha256Hash.toLowerCase()} but got " +
-                            "${calculatedHash.toLowerCase()}.");
+                            "${calculatedHash.toLowerCase()}.")
                 }
             } else {
                 println 'Skipping hash check (empty \'coreSha256Hash\').'
