diff --git a/CHANGELOG.md b/CHANGELOG.md
index f0820934bd..a35b2a1c72 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,6 +4,11 @@
 
 * [ObjectServer] `SyncConfiguration.automatic()` will make use of the host port to work out the default Realm URL. 
 
+### Bug Fixes
+
+* `RealmQuery.findFirst()` and `RealmQuery.findFirstAsync()` not working correctly with sorting (#5714).
+
+
 ## 5.0.0 (2018-03-15)
 
 This release is compatible with the Realm Object Server 3.0.0-beta.3 or later.
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java
index 34b356ae5c..09a982160e 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java
@@ -761,6 +761,25 @@ public void onChange(AllTypes element) {
         });
     }
 
+    @Test
+    @RunTestInLooperThread
+    public void findFirstAsync_withSorting() {
+        Realm realm = looperThread.getRealm();
+        realm.beginTransaction();
+        realm.insert(new Dog("Milo"));
+        realm.insert(new Dog("Fido"));
+        realm.insert(new Dog("Bella"));
+        realm.commitTransaction();
+
+        Dog dog = realm.where(Dog.class).sort("name").findFirstAsync();
+        dog.addChangeListener((Dog d) -> {
+            assertTrue(d.isValid());
+            assertEquals("Bella", d.getName());
+            looperThread.testComplete();
+        });
+        looperThread.keepStrongReference(dog);
+    }
+
     // **************************************
     // *** 'findAllSorted' async queries  ***
     // **************************************
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
index 68a4bc5f95..cfd7dd48f6 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java
@@ -1366,6 +1366,47 @@ public void findFirst() {
         assertEquals(dog4, dog);
     }
 
+    @Test
+    public void findFirst_withSorting() {
+        realm.beginTransaction();
+        realm.insert(new Dog("Milo"));
+        realm.insert(new Dog("Fido"));
+        realm.insert(new Dog("Bella"));
+        realm.commitTransaction();
+
+        Dog dog = realm.where(Dog.class).sort("name").findFirst();
+        assertEquals("Bella", dog.getName());
+    }
+
+    @Test
+    public void findFirst_withSortedConstrictingView() {
+        realm.beginTransaction();
+        realm.insert(new Dog("Milo"));
+        realm.insert(new Dog("Fido"));
+        realm.insert(new Dog("Bella"));
+        realm.commitTransaction();
+
+        RealmResults<Dog> dogs = realm.where(Dog.class)
+                .in("name", new String[] { "Fido", "Bella" })
+                .sort("name", Sort.ASCENDING)
+                .findAll();
+        Dog dog = dogs.where().findFirst();
+        assertEquals("Bella", dog.getName());
+    }
+
+    @Test
+    public void findFirst_subQuery_withSorting() {
+        realm.beginTransaction();
+        realm.insert(new Dog("Milo"));
+        realm.insert(new Dog("Fido"));
+        realm.insert(new Dog("Bella"));
+        realm.commitTransaction();
+
+        RealmResults<Dog> dogs = realm.where(Dog.class).in("name", new String[] { "Fido", "Bella" }).findAll();
+        Dog dog = dogs.where().sort("name", Sort.ASCENDING).findFirst();
+        assertEquals("Bella", dog.getName());
+    }
+
     @Test
     public void georgian() {
         String words[] = {"მონაცემთა ბაზა", "მიწისქვეშა გადასასვლელი", "რუსთაველის გამზირი",
diff --git a/realm/realm-library/src/main/java/io/realm/RealmQuery.java b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
index d2597933f0..7fec99ead8 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmQuery.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmQuery.java
@@ -1752,7 +1752,6 @@ public long count() {
     @SuppressWarnings("unchecked")
     public RealmResults<E> findAll() {
         realm.checkIfValid();
-
         return createRealmResults(query, sortDescriptor, distinctDescriptor, true, SubscriptionAction.NO_SUBSCRIPTION);
     }
 
@@ -1980,7 +1979,7 @@ public E findFirstAsync() {
             // TODO: The performance by the pending query will be a little bit worse than directly calling core's
             // Query.find(). The overhead comes with core needs to add all the row indices to the vector. However this
             // can be optimized by adding support of limit in OS's Results which is supported by core already.
-            row = new PendingRow(realm.sharedRealm, query, null, isDynamicQuery());
+            row = new PendingRow(realm.sharedRealm, query, sortDescriptor, isDynamicQuery());
         }
         final E result;
         if (isDynamicQuery()) {
@@ -2030,7 +2029,16 @@ public E findFirstAsync() {
     }
 
     private long getSourceRowIndexForFirstObject() {
-        return this.query.find();
+        if (sortDescriptor != null || distinctDescriptor != null) {
+            RealmObjectProxy obj = (RealmObjectProxy) findAll().first(null);
+            if (obj != null) {
+                return obj.realmGet$proxyState().getRow$realm().getIndex();
+            } else {
+                return -1;
+            }
+        } else {
+            return this.query.find();
+        }
     }
 
     private SchemaConnector getSchemaConnector() {
diff --git a/realm/realm-library/src/main/java/io/realm/internal/Row.java b/realm/realm-library/src/main/java/io/realm/internal/Row.java
index 681d818999..1256c37f8f 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/Row.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/Row.java
@@ -61,6 +61,9 @@
 
     Table getTable();
 
+    /**
+     * Returns the index in the original source table, not the tableview.
+     */
     long getIndex();
 
     long getLong(long columnIndex);
