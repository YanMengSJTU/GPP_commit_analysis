diff --git a/CHANGELOG.md b/CHANGELOG.md
index 54a845bf37..f0820934bd 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,9 @@
+## 5.0.1 (YYYY-MM-DD)
+
+### Enhancements
+
+* [ObjectServer] `SyncConfiguration.automatic()` will make use of the host port to work out the default Realm URL. 
+
 ## 5.0.0 (2018-03-15)
 
 This release is compatible with the Realm Object Server 3.0.0-beta.3 or later.
diff --git a/examples/architectureComponentsExample/build.gradle b/examples/architectureComponentsExample/build.gradle
new file mode 100644
index 0000000000..2bf5eedf9f
--- /dev/null
+++ b/examples/architectureComponentsExample/build.gradle
@@ -0,0 +1,43 @@
+apply plugin: 'com.android.application'
+apply plugin: 'realm-android'
+
+repositories {
+    maven {
+        url 'https://maven.google.com'
+    }
+    google()
+}
+
+android {
+    compileSdkVersion rootProject.sdkVersion
+    buildToolsVersion rootProject.buildTools
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+    defaultConfig {
+        applicationId 'io.realm.examples.arch'
+        targetSdkVersion rootProject.sdkVersion
+        minSdkVersion 15
+        versionCode 1
+        versionName "1.0"
+
+        vectorDrawables.useSupportLibrary = true
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+        }
+    }
+}
+
+dependencies {
+    implementation "android.arch.lifecycle:runtime:1.1.0"
+    implementation "android.arch.lifecycle:extensions:1.1.0"
+    annotationProcessor "android.arch.lifecycle:compiler:1.1.0"
+    implementation 'com.android.support:appcompat-v7:27.0.2'
+    implementation 'com.android.support:recyclerview-v7:27.0.2'
+    implementation 'com.android.support:design:27.0.2'
+}
diff --git a/examples/architectureComponentsExample/lint.xml b/examples/architectureComponentsExample/lint.xml
new file mode 100644
index 0000000000..6a9810cdcb
--- /dev/null
+++ b/examples/architectureComponentsExample/lint.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Disable the given check in this project -->
+    <issue id="AllowBackup" severity="ignore" />
+    <issue id="IconLauncherShape" severity="ignore" />
+    <issue id="IconMissingDensityFolder" severity="ignore" />
+    <issue id="GoogleAppIndexingWarning" severity="ignore" />
+    <issue id="LogNotTimber" severity="ignore" />
+    <issue id="InvalidPackage" severity="ignore" />
+</lint>
diff --git a/examples/architectureComponentsExample/src/main/AndroidManifest.xml b/examples/architectureComponentsExample/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..6303608067
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="io.realm.examples.arch" >
+
+    <application
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:name=".CustomApplication"
+        android:theme="@style/AppTheme" >
+        <activity
+            android:name=".ArchExampleActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/ArchExampleActivity.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/ArchExampleActivity.java
new file mode 100644
index 0000000000..740ecb7f69
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/ArchExampleActivity.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch;
+
+import android.os.Bundle;
+import android.support.annotation.MainThread;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v7.app.AppCompatActivity;
+
+public class ArchExampleActivity extends AppCompatActivity {
+    private FloatingActionButton backgroundJobStartStop;
+
+    private BackgroundTask backgroundTask;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.activity_arch_example);
+        setupViews();
+
+        backgroundTask = (BackgroundTask) getLastCustomNonConfigurationInstance();
+        if (backgroundTask == null) { // this could also live inside a ViewModel, a singleton job queue, etc.
+            backgroundTask = new BackgroundTask();
+            backgroundTask.start(); // this task will update items in Realm on a background thread.
+        }
+        updateJobButton();
+
+        if (savedInstanceState == null) {
+            getSupportFragmentManager().beginTransaction()
+                    .add(R.id.container, PersonListFragment.create())
+                    .addToBackStack(null)
+                    .commit();
+        }
+    }
+
+    @Override
+    public Object onRetainCustomNonConfigurationInstance() {
+        return backgroundTask; // retain background task through config changes without ViewModel.
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (isFinishing()) {
+            if(backgroundTask.isStarted()) {
+                backgroundTask.stop(); // make sure job is stopped when exiting the app
+            }
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (getSupportFragmentManager().getBackStackEntryCount() <= 1) {
+            finish();
+        } else {
+            super.onBackPressed();
+        }
+    }
+
+    @MainThread
+    private void setupViews() {
+        backgroundJobStartStop = findViewById(R.id.backgroundJobStartStop);
+        backgroundJobStartStop.setOnClickListener(v -> {
+            if (!backgroundTask.isStarted()) {
+                backgroundTask.start();
+            } else {
+                backgroundTask.stop();
+            }
+            updateJobButton();
+        });
+    }
+
+    private void updateJobButton() {
+        if (backgroundTask.isStarted()) {
+            backgroundJobStartStop.setImageResource(R.drawable.ic_stop_black_24dp);
+        } else {
+            backgroundJobStartStop.setImageResource(R.drawable.ic_play_arrow_black_24dp);
+        }
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/BackgroundTask.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/BackgroundTask.java
new file mode 100644
index 0000000000..b99389a69b
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/BackgroundTask.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch;
+
+import android.annotation.SuppressLint;
+import android.os.SystemClock;
+import android.support.annotation.MainThread;
+import android.util.Log;
+
+import io.realm.Realm;
+import io.realm.RealmResults;
+import io.realm.examples.arch.model.Person;
+
+
+public class BackgroundTask {
+    private static final Object lock = new Object();
+
+    private static final String TAG = "BackgroundTask";
+
+    private boolean isStarted;
+
+    private volatile Thread thread;
+
+    @MainThread
+    public boolean isStarted() {
+        return isStarted;
+    }
+
+    @MainThread
+    public void start() {
+        synchronized (lock) {
+            if (isStarted) {
+                return;
+            }
+            thread = new IncrementThread();
+            thread.start();
+            isStarted = true;
+            Log.i(TAG, "Background job started.");
+        }
+    }
+
+    @MainThread
+    public void stop() {
+        synchronized (lock) {
+            if (thread != null) {
+                thread.interrupt();
+                thread = null;
+            }
+            isStarted = false;
+        }
+    }
+
+    private static final class IncrementThread extends Thread {
+        IncrementThread() {
+            super("Aging thread");
+        }
+
+        @Override
+        @SuppressLint("NewApi")
+        public void run() {
+            try (Realm realm = Realm.getDefaultInstance()) {
+                final RealmResults<Person> persons = realm.where(Person.class).findAll();
+                Realm.Transaction transaction = (Realm r) -> {
+                    for (Person person : persons) {
+                        person.setAge(person.getAge() + 1); // updates the Persons in the Realm.
+                    }
+                };
+
+                while (!isInterrupted()) {
+                    realm.executeTransaction(transaction);
+                    SystemClock.sleep(1000L);
+                }
+            }
+            Log.i(TAG, "Background job stopped.");
+        }
+    }
+}
+
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/CustomApplication.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/CustomApplication.java
new file mode 100644
index 0000000000..b3c8333f70
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/CustomApplication.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch;
+
+import android.app.Application;
+import android.support.annotation.NonNull;
+
+import io.realm.Realm;
+import io.realm.RealmConfiguration;
+import io.realm.examples.arch.model.Person;
+
+
+public class CustomApplication extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        Realm.init(this);
+        Realm.setDefaultConfiguration(new RealmConfiguration.Builder()
+                .deleteRealmIfMigrationNeeded()
+                .initialData(new Realm.Transaction() {
+                    @Override
+                    public void execute(@NonNull Realm realm) {
+                        Person person = realm.createObject(Person.class);
+                        person.setName("Makoto Yamazaki");
+                        person.setAge(32);
+
+                        person = realm.createObject(Person.class);
+                        person.setName("Christian Melchior");
+                        person.setAge(34);
+
+                        person = realm.createObject(Person.class);
+                        person.setName("Chen Mulong");
+                        person.setAge(29);
+
+                        person = realm.createObject(Person.class);
+                        person.setName("Nabil Hachicha");
+                        person.setAge(31);
+                    }
+                })
+                .build());
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonFragment.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonFragment.java
new file mode 100644
index 0000000000..194553cae3
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonFragment.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.examples.arch;
+
+import android.arch.lifecycle.ViewModel;
+import android.arch.lifecycle.ViewModelProvider;
+import android.arch.lifecycle.ViewModelProviders;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+public class PersonFragment extends Fragment {
+    private static final String ARG_PERSON_NAME = "personName";
+
+    public static PersonFragment create(String personName) {
+        PersonFragment personFragment = new PersonFragment();
+        Bundle bundle = new Bundle();
+        bundle.putString(ARG_PERSON_NAME, personName);
+        personFragment.setArguments(bundle);
+        return personFragment;
+    }
+
+    private PersonViewModel personViewModel;
+
+    private TextView name;
+    private TextView age;
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        @SuppressWarnings("ConstantConditions") final String personName = getArguments().getString(ARG_PERSON_NAME);
+        personViewModel = ViewModelProviders.of(this, new ViewModelProvider.Factory() {
+            @NonNull
+            @Override
+            public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
+                if (modelClass == PersonViewModel.class) {
+                    PersonViewModel personViewModel = new PersonViewModel();
+                    personViewModel.setup(personName); // we use a Factory to ensure `setup` is called before use.
+                    //noinspection unchecked
+                    return (T) personViewModel;
+                }
+                //noinspection ConstantConditions
+                return null;
+            }
+        }).get(PersonViewModel.class);
+
+        personViewModel.getPerson().observe(this, person -> {
+            if (person != null) { // null would mean the object was deleted.
+                name.setText(person.getName());
+                age.setText(String.valueOf(person.getAge()));
+            }
+        });
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.fragment_person, container, false);
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        name = view.findViewById(R.id.personName);
+        age = view.findViewById(R.id.personAge);
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonListFragment.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonListFragment.java
new file mode 100644
index 0000000000..b879caced3
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonListFragment.java
@@ -0,0 +1,140 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.examples.arch;
+
+import android.arch.lifecycle.ViewModelProviders;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import java.util.Collections;
+import java.util.List;
+
+import io.realm.examples.arch.model.Person;
+import io.realm.examples.arch.utils.ContextUtils;
+
+public class PersonListFragment extends Fragment {
+    public static PersonListFragment create() {
+        return new PersonListFragment();
+    }
+
+    private RecyclerView recyclerView;
+    private Adapter adapter;
+
+    private PersonListViewModel personListViewModel;
+    private List<Person> personList = Collections.emptyList();
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        // Fragments should start listening in `onCreate()`
+        // to ensure single observer instance, even if detached (for example in FragmentPagerAdapter).
+        personListViewModel = ViewModelProviders.of(this).get(PersonListViewModel.class);
+        personListViewModel.getPersons().observe(this, people -> {
+            personList = people;
+            if (adapter != null) {
+                adapter.updateItems(people);
+            }
+        });
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.fragment_person_list, container, false);
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        recyclerView = view.findViewById(R.id.recyclerView);
+        recyclerView.setHasFixedSize(true);
+        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false));
+        adapter = new Adapter(personList);
+        recyclerView.setAdapter(adapter);
+    }
+
+    static class Adapter extends RecyclerView.Adapter<Adapter.ViewHolder> {
+        private List<Person> persons;
+
+        public Adapter(List<Person> persons) {
+            this.persons = persons;
+        }
+
+        @Override
+        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_person, parent, false));
+        }
+
+        @Override
+        public void onBindViewHolder(ViewHolder holder, int position) {
+            holder.bind(persons.get(position));
+        }
+
+        @Override
+        public int getItemCount() {
+            return persons == null ? 0 : persons.size();
+        }
+
+        public void updateItems(List<Person> persons) {
+            this.persons = persons;
+            notifyDataSetChanged();
+        }
+
+        static class ViewHolder extends RecyclerView.ViewHolder {
+            TextView name;
+            TextView age;
+
+            Person person;
+
+            private final View.OnClickListener onClick = (view) -> {
+                if (person == null) {
+                    return;
+                }
+                AppCompatActivity activity = ContextUtils.findActivity(view.getContext());
+                PersonFragment personFragment = PersonFragment.create(person.getName());
+                activity.getSupportFragmentManager()
+                        .beginTransaction()
+                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE)
+                        .replace(R.id.container, personFragment)
+                        .addToBackStack(null)
+                        .commit();
+            };
+
+            public ViewHolder(View itemView) {
+                super(itemView);
+                name = itemView.findViewById(R.id.personName);
+                age = itemView.findViewById(R.id.personAge);
+                itemView.setOnClickListener(onClick);
+            }
+
+            public void bind(Person person) {
+                this.person = person;
+                name.setText(person.getName());
+                age.setText(String.valueOf(person.getAge()));
+            }
+        }
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonListViewModel.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonListViewModel.java
new file mode 100644
index 0000000000..e45edc4bd5
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonListViewModel.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.examples.arch;
+
+import android.arch.lifecycle.LiveData;
+import android.arch.lifecycle.ViewModel;
+
+import java.util.List;
+
+import io.realm.Realm;
+import io.realm.examples.arch.livemodel.LiveRealmResults;
+import io.realm.examples.arch.model.Person;
+
+public class PersonListViewModel extends ViewModel {
+    private final Realm realm;
+    private final LiveData<List<Person>> persons;
+
+    public PersonListViewModel() {
+        realm = Realm.getDefaultInstance(); // Realm is bound to the lifecycle of the ViewModel, and stays alive as long as it is needed.
+        persons = new LiveRealmResults<>(realm.where(Person.class).sort("age").findAllAsync());
+    }
+
+    public LiveData<List<Person>> getPersons() {
+        return persons;
+    }
+
+    @Override
+    protected void onCleared() {
+        realm.close(); // Realm is bound to the lifecycle of the ViewModel, and is destroyed when no longer needed.
+        super.onCleared();
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonViewModel.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonViewModel.java
new file mode 100644
index 0000000000..666a938742
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/PersonViewModel.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch;
+
+import android.arch.lifecycle.LiveData;
+import android.arch.lifecycle.ViewModel;
+
+import io.realm.Realm;
+import io.realm.examples.arch.livemodel.LiveRealmObject;
+import io.realm.examples.arch.model.Person;
+
+
+public class PersonViewModel extends ViewModel {
+    private final Realm realm;
+
+    private LiveData<Person> livePerson;
+
+    public PersonViewModel() {
+        realm = Realm.getDefaultInstance(); // Realm is bound to the lifecycle of the ViewModel, and stays alive as long as it is needed.
+    }
+
+    public LiveData<Person> getPerson() {
+        return livePerson;
+    }
+
+    @Override
+    protected void onCleared() {
+        realm.close(); // Realm is bound to the lifecycle of the ViewModel, and is destroyed when no longer needed.
+        super.onCleared();
+    }
+
+    public void setup(String personName) {
+        Person person = realm.where(Person.class).equalTo("name", personName).findFirst();
+        if (person == null) {
+            throw new IllegalStateException("The person was not found, it shouldn't be deleted!");
+        }
+        livePerson = new LiveRealmObject<>(person);
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/livemodel/LiveRealmObject.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/livemodel/LiveRealmObject.java
new file mode 100644
index 0000000000..97690d596f
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/livemodel/LiveRealmObject.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch.livemodel;
+
+import android.arch.lifecycle.LiveData;
+import android.support.annotation.MainThread;
+import android.support.annotation.NonNull;
+
+import io.realm.ObjectChangeSet;
+import io.realm.RealmModel;
+import io.realm.RealmObject;
+import io.realm.RealmObjectChangeListener;
+
+/**
+ * This class represents a RealmObject wrapped inside a LiveData.
+ *
+ * It is expected that the provided RealmObject is a managed object, and exists in the Realm on creation.
+ *
+ * This allows observing the RealmObject in such a way, that the listener that will be automatically unsubscribed when the enclosing LifecycleOwner is killed.
+ *
+ * Realm will keep the managed RealmObject up-to-date whenever a change occurs on any thread,
+ * and when that happens, the observer will be notified.
+ *
+ * The object will be observed until it is invalidated - deleted, or all local Realm instances are closed.
+ *
+ * @param <T> the type of the RealmModel
+ */
+public class LiveRealmObject<T extends RealmModel> extends LiveData<T> {
+    // The listener will listen until the object is deleted.
+    // An invalidated object shouldn't be set in LiveData, null is set instead.
+    private RealmObjectChangeListener<T> listener = new RealmObjectChangeListener<T>() {
+        @Override
+        public void onChange(@NonNull T object, ObjectChangeSet objectChangeSet) {
+            if (!objectChangeSet.isDeleted()) {
+                setValue(object);
+            } else {
+                setValue(null);
+            }
+        }
+    };
+
+    /**
+     * Wraps the provided managed RealmObject as a LiveData.
+     *
+     * The provided object should not be null, should be managed, and should be valid.
+     *
+     * @param object the managed RealmModel to wrap as LiveData
+     */
+    @MainThread
+    public LiveRealmObject(@NonNull T object) {
+        //noinspection ConstantConditions
+        if (object == null) {
+            throw new IllegalArgumentException("The object cannot be null!");
+        }
+        if (!RealmObject.isManaged(object)) {
+            throw new IllegalArgumentException("LiveRealmObject only supports managed RealmModel instances!");
+        }
+        if (!RealmObject.isValid(object)) {
+            throw new IllegalArgumentException("The provided RealmObject is no longer valid, and therefore cannot be observed for changes.");
+        }
+        setValue(object);
+    }
+
+    // We should start observing and stop observing, depending on whether we have observers.
+    // Deleted objects can no longer be observed.
+    // We can also no longer observe the object if all local Realm instances on this thread (the UI thread) are closed.
+
+    /**
+     * Starts observing the RealmObject, if it is still valid.
+     */
+    @Override
+    protected void onActive() {
+        super.onActive();
+        T object = getValue();
+        if (object != null && RealmObject.isValid(object)) {
+            RealmObject.addChangeListener(object, listener);
+        }
+    }
+
+    /**
+     * Stops observing the RealmObject.
+     */
+    @Override
+    protected void onInactive() {
+        super.onInactive();
+        T object = getValue();
+        if (object != null && RealmObject.isValid(object)) {
+            RealmObject.removeChangeListener(object, listener);
+        }
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/livemodel/LiveRealmResults.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/livemodel/LiveRealmResults.java
new file mode 100644
index 0000000000..8b54563cec
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/livemodel/LiveRealmResults.java
@@ -0,0 +1,94 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch.livemodel;
+
+import android.arch.lifecycle.LiveData;
+import android.support.annotation.MainThread;
+import android.support.annotation.NonNull;
+
+import java.util.List;
+
+import javax.annotation.Nullable;
+
+import io.realm.OrderedCollectionChangeSet;
+import io.realm.OrderedRealmCollectionChangeListener;
+import io.realm.RealmModel;
+import io.realm.RealmResults;
+
+/**
+ * This class represents a RealmResults wrapped inside a LiveData.
+ *
+ * Realm will always keep the RealmResults up-to-date whenever a change occurs on any thread,
+ * and when that happens, the observer will be notified.
+ *
+ * The RealmResults will be observed until it is invalidated - meaning all local Realm instances on this thread are closed.
+ *
+ * @param <T> the type of the RealmModel
+ */
+public class LiveRealmResults<T extends RealmModel> extends LiveData<List<T>> {
+    private final RealmResults<T> results;
+
+    // The listener will notify the observers whenever a change occurs.
+    // The results are modified in change. This could be expanded to also return the change set in a pair.
+    private OrderedRealmCollectionChangeListener<RealmResults<T>> listener = new OrderedRealmCollectionChangeListener<RealmResults<T>>() {
+        @Override
+        public void onChange(@NonNull RealmResults<T> results, @Nullable OrderedCollectionChangeSet changeSet) {
+            LiveRealmResults.this.setValue(results);
+        }
+    };
+
+    @MainThread
+    public LiveRealmResults(@NonNull RealmResults<T> results) {
+        //noinspection ConstantConditions
+        if (results == null) {
+            throw new IllegalArgumentException("Results cannot be null!");
+        }
+        if (!results.isValid()) {
+            throw new IllegalArgumentException("The provided RealmResults is no longer valid, the Realm instance it belongs to is closed. It can no longer be observed for changes.");
+        }
+        this.results = results;
+        if (results.isLoaded()) {
+            // we should not notify observers when results aren't ready yet (async query).
+            // however, synchronous query should be set explicitly.
+            setValue(results);
+        }
+    }
+
+    // We should start observing and stop observing, depending on whether we have observers.
+
+    /**
+     * Starts observing the RealmResults, if it is still valid.
+     */
+    @Override
+    protected void onActive() {
+        super.onActive();
+        if (results.isValid()) { // invalidated results can no longer be observed.
+            results.addChangeListener(listener);
+        }
+    }
+
+    /**
+     * Stops observing the RealmResults.
+     */
+    @Override
+    protected void onInactive() {
+        super.onInactive();
+        if (results.isValid()) {
+            results.removeChangeListener(listener);
+        }
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/model/Person.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/model/Person.java
new file mode 100644
index 0000000000..fac53a7398
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/model/Person.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.realm.examples.arch.model;
+
+import io.realm.RealmObject;
+import io.realm.annotations.Index;
+
+public class Person extends RealmObject {
+    @Index
+    private String name;
+
+    private int age;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/utils/ContextUtils.java b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/utils/ContextUtils.java
new file mode 100644
index 0000000000..1a4cf1cc26
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/java/io/realm/examples/arch/utils/ContextUtils.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2018 Realm Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.realm.examples.arch.utils;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+
+/**
+ * This is a helper class to look up an Activity inside a View's context chain in a reliable/safe manner.
+ */
+public class ContextUtils {
+    private ContextUtils() {
+    }
+
+    /**
+     * Finds the Activity inside the hierarchy of the provided Context.
+     *
+     * @param context the context
+     * @param <T> the expected type of the Activity
+     * @return the activity
+     *
+     * @throws IllegalArgumentException if the context has no Activity in its base context hierarchy
+     */
+    public static <T extends Activity> T findActivity(Context context) {
+        if (context instanceof Activity) {
+            //noinspection unchecked
+            return (T) context;
+        }
+        while (context != null && context instanceof ContextWrapper) {
+            context = ((ContextWrapper) context).getBaseContext();
+            if (context instanceof Activity) {
+                //noinspection unchecked
+                return (T) context;
+            }
+        }
+        throw new IllegalArgumentException("No activity found in context hierarchy.");
+    }
+}
diff --git a/examples/architectureComponentsExample/src/main/res/drawable/ic_play_arrow_black_24dp.xml b/examples/architectureComponentsExample/src/main/res/drawable/ic_play_arrow_black_24dp.xml
new file mode 100644
index 0000000000..bf9b895aca
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/drawable/ic_play_arrow_black_24dp.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M8,5v14l11,-7z"/>
+</vector>
diff --git a/examples/architectureComponentsExample/src/main/res/drawable/ic_stop_black_24dp.xml b/examples/architectureComponentsExample/src/main/res/drawable/ic_stop_black_24dp.xml
new file mode 100644
index 0000000000..c428d728dd
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/drawable/ic_stop_black_24dp.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M6,6h12v12H6z"/>
+</vector>
diff --git a/examples/architectureComponentsExample/src/main/res/layout/activity_arch_example.xml b/examples/architectureComponentsExample/src/main/res/layout/activity_arch_example.xml
new file mode 100644
index 0000000000..45bbf88ac8
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/layout/activity_arch_example.xml
@@ -0,0 +1,25 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <FrameLayout
+        android:id="@+id/container"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+    <android.support.design.widget.FloatingActionButton
+        android:id="@+id/backgroundJobStartStop"
+        android:layout_width="40dp"
+        android:layout_height="40dp"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_marginBottom="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginRight="16dp"
+        android:scaleType="center"
+        app:fabSize="normal"
+        app:srcCompat="@drawable/ic_stop_black_24dp" />
+</RelativeLayout>
diff --git a/examples/architectureComponentsExample/src/main/res/layout/fragment_person.xml b/examples/architectureComponentsExample/src/main/res/layout/fragment_person.xml
new file mode 100644
index 0000000000..48d7965ee9
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/layout/fragment_person.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:orientation="vertical"
+    android:gravity="center">
+
+    <TextView
+        android:id="@+id/personName"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center_horizontal"
+        android:textSize="24sp"
+        android:textColor="@android:color/black"
+        android:textStyle="bold"
+        android:paddingTop="8dp"
+        android:paddingBottom="8dp"
+        tools:text="Makoto" />
+
+    <TextView
+        android:id="@+id/personAge"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center_horizontal"
+        android:textColor="#232323"
+        android:textSize="20sp"
+        tools:text="16" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/examples/architectureComponentsExample/src/main/res/layout/fragment_person_list.xml b/examples/architectureComponentsExample/src/main/res/layout/fragment_person_list.xml
new file mode 100644
index 0000000000..a4eb4e4289
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/layout/fragment_person_list.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/recyclerView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+</LinearLayout>
\ No newline at end of file
diff --git a/examples/architectureComponentsExample/src/main/res/layout/item_person.xml b/examples/architectureComponentsExample/src/main/res/layout/item_person.xml
new file mode 100644
index 0000000000..4b1de1a9b2
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/layout/item_person.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:orientation="vertical">
+    <TextView
+        android:id="@+id/personName"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingTop="8dp"
+        android:paddingBottom="8dp"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:textSize="24sp"
+        android:textStyle="bold"
+        android:textColor="@android:color/black"
+        tools:text="Makoto"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+        <TextView
+            android:id="@+id/personAgeLabel"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:paddingTop="8dp"
+            android:paddingBottom="8dp"
+            android:paddingLeft="8dp"
+            android:paddingRight="4dp"
+            android:paddingStart="8dp"
+            android:paddingEnd="4dp"
+            android:textSize="20sp"
+            android:textColor="#212121"
+            android:text="Age: "/>
+
+        <TextView
+            android:id="@+id/personAge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:paddingTop="8dp"
+            android:paddingBottom="8dp"
+            android:paddingLeft="8dp"
+            android:paddingRight="8dp"
+            android:textSize="20sp"
+            android:textColor="#212121"
+            tools:text="16"/>
+    </LinearLayout>
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="#EFEFEF"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/examples/architectureComponentsExample/src/main/res/mipmap-hdpi/ic_launcher.png b/examples/architectureComponentsExample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100755
index 0000000000..58303aff5b
Binary files /dev/null and b/examples/architectureComponentsExample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/examples/architectureComponentsExample/src/main/res/mipmap-mdpi/ic_launcher.png b/examples/architectureComponentsExample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100755
index 0000000000..9b29caed3d
Binary files /dev/null and b/examples/architectureComponentsExample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/examples/architectureComponentsExample/src/main/res/mipmap-xhdpi/ic_launcher.png b/examples/architectureComponentsExample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100755
index 0000000000..15527b160e
Binary files /dev/null and b/examples/architectureComponentsExample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/examples/architectureComponentsExample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/examples/architectureComponentsExample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100755
index 0000000000..eb9ece04b2
Binary files /dev/null and b/examples/architectureComponentsExample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/examples/architectureComponentsExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/examples/architectureComponentsExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100755
index 0000000000..91826a7567
Binary files /dev/null and b/examples/architectureComponentsExample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/examples/gridViewExample/src/main/res/values-w820dp/dimens.xml b/examples/architectureComponentsExample/src/main/res/values-w820dp/dimens.xml
similarity index 100%
rename from examples/gridViewExample/src/main/res/values-w820dp/dimens.xml
rename to examples/architectureComponentsExample/src/main/res/values-w820dp/dimens.xml
diff --git a/examples/gridViewExample/src/main/res/values/dimens.xml b/examples/architectureComponentsExample/src/main/res/values/dimens.xml
similarity index 100%
rename from examples/gridViewExample/src/main/res/values/dimens.xml
rename to examples/architectureComponentsExample/src/main/res/values/dimens.xml
diff --git a/examples/architectureComponentsExample/src/main/res/values/strings.xml b/examples/architectureComponentsExample/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..fcfdd7f1bb
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/values/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">Lifecycle example</string>
+
+</resources>
diff --git a/examples/architectureComponentsExample/src/main/res/values/styles.xml b/examples/architectureComponentsExample/src/main/res/values/styles.xml
new file mode 100644
index 0000000000..54b991006c
--- /dev/null
+++ b/examples/architectureComponentsExample/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.Design.Light">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/examples/gridViewExample/build.gradle b/examples/gridViewExample/build.gradle
index f10dad85fa..59945d719b 100644
--- a/examples/gridViewExample/build.gradle
+++ b/examples/gridViewExample/build.gradle
@@ -5,6 +5,10 @@ android {
     compileSdkVersion rootProject.sdkVersion
     buildToolsVersion rootProject.buildTools
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
     defaultConfig {
         applicationId 'io.realm.examples.realmgridview'
         targetSdkVersion rootProject.sdkVersion
diff --git a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/City.java b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/City.java
index 020f0c422b..151d8de0d5 100644
--- a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/City.java
+++ b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/City.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,12 @@
 package io.realm.examples.realmgridview;
 
 import io.realm.RealmObject;
+import io.realm.annotations.PrimaryKey;
 
 public class City extends RealmObject {
     // If you are using GSON, field names should not be obfuscated.
     // Add either the proguard rule in proguard-rules.pro or the @SerializedName annotation.
+    @PrimaryKey
     private String name;
     private long votes;
 
diff --git a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/CityAdapter.java b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/CityAdapter.java
index 147b8ac328..d2a21396f9 100644
--- a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/CityAdapter.java
+++ b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/CityAdapter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,13 +16,13 @@
 
 package io.realm.examples.realmgridview;
 
-import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 
+import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 
@@ -33,32 +33,26 @@
 // a developer could update the getView() to pull items from the Realm.
 
 public class CityAdapter extends BaseAdapter {
+    private List<City> cities = Collections.emptyList();
 
-    private LayoutInflater inflater;
-
-    private List<City> cities = null;
-
-    public CityAdapter(Context context) {
-        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+    public CityAdapter() {
     }
 
     public void setData(List<City> details) {
+        if (details == null) {
+            details = Collections.emptyList();
+        }
         this.cities = details;
+        notifyDataSetChanged();
     }
 
     @Override
     public int getCount() {
-        if (cities == null) {
-            return 0;
-        }
         return cities.size();
     }
 
     @Override
-    public Object getItem(int position) {
-        if (cities == null || cities.get(position) == null) {
-            return null;
-        }
+    public City getItem(int position) {
         return cities.get(position);
     }
 
@@ -67,18 +61,36 @@ public long getItemId(int i) {
         return i;
     }
 
+    // ViewHolder caches view resources so that `findViewById` is not called for each row
+    private static class ViewHolder {
+        private TextView name;
+        private TextView vote;
+
+        public ViewHolder(View view) {
+            name = view.findViewById(R.id.name);
+            vote = view.findViewById(R.id.votes);
+        }
+
+        public void bind(City city) {
+            name.setText(city.getName());
+            vote.setText(String.format(Locale.US, "%d", city.getVotes()));
+        }
+    }
+
     @Override
     public View getView(int position, View currentView, ViewGroup parent) {
+        // GridView requires ViewHolder pattern to ensure optimal performance
+        ViewHolder viewHolder;
         if (currentView == null) {
-            currentView = inflater.inflate(R.layout.city_listitem, parent, false);
+            currentView = LayoutInflater.from(parent.getContext()).inflate(R.layout.city_listitem, parent, false);
+            viewHolder = new ViewHolder(currentView);
+            currentView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder)currentView.getTag();
         }
 
         City city = cities.get(position);
-
-        if (city != null) {
-            ((TextView) currentView.findViewById(R.id.name)).setText(city.getName());
-            ((TextView) currentView.findViewById(R.id.votes)).setText(String.format(Locale.US, "%d",city.getVotes()));
-        }
+        viewHolder.bind(city);
 
         return currentView;
     }
diff --git a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/GridViewExampleActivity.java b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/GridViewExampleActivity.java
index c37961ae44..beb0c25772 100644
--- a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/GridViewExampleActivity.java
+++ b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/GridViewExampleActivity.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,123 +22,73 @@
 import android.widget.AdapterView;
 import android.widget.GridView;
 
-import com.google.gson.ExclusionStrategy;
-import com.google.gson.FieldAttributes;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.reflect.TypeToken;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
 import io.realm.Realm;
-import io.realm.RealmConfiguration;
-import io.realm.RealmObject;
+import io.realm.RealmChangeListener;
 import io.realm.RealmResults;
 
 public class GridViewExampleActivity extends Activity implements AdapterView.OnItemClickListener {
 
-    private GridView mGridView;
-    private CityAdapter mAdapter;
+    private GridView gridView;
+    private CityAdapter adapter;
 
     private Realm realm;
+    private RealmResults<City> cities;
+    private RealmChangeListener<RealmResults<City>> realmChangeListener = cities -> {
+        // Set the cities to the adapter only when async query is loaded.
+        // It will also be called for any future writes made to the Realm.
+        adapter.setData(cities);
+    };
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_realm_example);
 
-        RealmConfiguration realmConfiguration = new RealmConfiguration.Builder().build();
+        // This is the GridView adapter
+        adapter = new CityAdapter();
+
+        //This is the GridView which will display the list of cities
+        gridView = findViewById(R.id.cities_list);
+        gridView.setAdapter(adapter);
+        gridView.setOnItemClickListener(GridViewExampleActivity.this);
 
         // Clear the realm from last time
-        Realm.deleteRealm(realmConfiguration);
+        //noinspection ConstantConditions
+        Realm.deleteRealm(Realm.getDefaultConfiguration());
 
         // Create a new empty instance of Realm
-        realm = Realm.getInstance(realmConfiguration);
-    }
+        realm = Realm.getDefaultInstance();
 
-    @Override
-    public void onResume() {
-        super.onResume();
-
-        // Load from file "cities.json" first time
-        if(mAdapter == null) {
-            List<City> cities = loadCities();
-
-            //This is the GridView adapter
-            mAdapter = new CityAdapter(this);
-            mAdapter.setData(cities);
-
-            //This is the GridView which will display the list of cities
-            mGridView = (GridView) findViewById(R.id.cities_list);
-            mGridView.setAdapter(mAdapter);
-            mGridView.setOnItemClickListener(GridViewExampleActivity.this);
-            mAdapter.notifyDataSetChanged();
-            mGridView.invalidate();
-        }
+        // Obtain the cities in the Realm with asynchronous query.
+        cities = realm.where(City.class).findAllAsync();
+
+        // The RealmChangeListener will be called when the results are asynchronously loaded, and available for use.
+        cities.addChangeListener(realmChangeListener);
     }
 
     @Override
     protected void onDestroy() {
         super.onDestroy();
+        cities.removeAllChangeListeners(); // Remove change listeners to prevent updating views not yet GCed.
         realm.close(); // Remember to close Realm when done.
     }
 
-    private List<City> loadCities() {
-        // In this case we're loading from local assets.
-        // NOTE: could alternatively easily load from network
-        InputStream stream;
-        try {
-            stream = getAssets().open("cities.json");
-        } catch (IOException e) {
-            return null;
-        }
-
-        Gson gson = new GsonBuilder().create();
-
-        JsonElement json = new JsonParser().parse(new InputStreamReader(stream));
-        List<City> cities = gson.fromJson(json, new TypeToken<List<City>>() {}.getType());
-
-        // Open a transaction to store items into the realm
-        // Use copyToRealm() to convert the objects into proper RealmObjects managed by Realm.
-        realm.beginTransaction();
-        Collection<City> realmCities = realm.copyToRealm(cities);
-        realm.commitTransaction();
-
-        return new ArrayList<City>(realmCities);
-    }
-
-    public void updateCities() {
-        // Pull all the cities from the realm
-        RealmResults<City> cities = realm.where(City.class).findAll();
-
-        // Put these items in the Adapter
-        mAdapter.setData(cities);
-        mAdapter.notifyDataSetChanged();
-        mGridView.invalidate();
-    }
-
     @Override
     public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        City modifiedCity = (City)mAdapter.getItem(position);
-
-        // Acquire the RealmObject matching the name of the clicked City.
-        final City city = realm.where(City.class).equalTo("name", modifiedCity.getName()).findFirst();
-
-        // Create a transaction to increment the vote count for the selected City in the realm
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
+        City modifiedCity = adapter.getItem(position);
+
+        // Acquire the name of the clicked City, in order to be able to query for it.
+        final String name = modifiedCity.getName();
+
+        // Create an asynchronous transaction to increment the vote count for the selected City in the Realm.
+        // The write will happen on a background thread, and the RealmChangeListener will update the GridView automatically.
+        realm.executeTransactionAsync(bgRealm -> {
+            // We need to find the City we want to modify from the background thread's Realm
+            City city = bgRealm.where(City.class).equalTo("name", name).findFirst();
+            if (city != null) {
+                // Let's increase the votes of the selected city!
                 city.setVotes(city.getVotes() + 1);
             }
         });
-
-        updateCities();
     }
 }
diff --git a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/MyApplication.java b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/MyApplication.java
index 2cef075c10..ab1c127bd4 100644
--- a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/MyApplication.java
+++ b/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/MyApplication.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,13 +18,55 @@
 
 import android.app.Application;
 
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import com.google.gson.reflect.TypeToken;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.List;
+
 import io.realm.Realm;
+import io.realm.RealmConfiguration;
 
 public class MyApplication extends Application {
-
     @Override
     public void onCreate() {
         super.onCreate();
         Realm.init(this);
+        Realm.setDefaultConfiguration(new RealmConfiguration.Builder()
+                .initialData(realm -> {
+                    // Load from file "cities.json" first time
+                    List<City> cities = loadCities();
+                    if (cities != null) {
+                        // Use insertOrUpdate() to convert the objects into proper RealmObjects managed by Realm.
+                        realm.insertOrUpdate(cities);
+                    }
+                })
+                .deleteRealmIfMigrationNeeded()
+                .build()
+        );
+    }
+
+    private List<City> loadCities() {
+        // In this case we're loading from local assets.
+        // NOTE: could alternatively easily load from network.
+        // However, that would need to happen on a background thread.
+        InputStream stream;
+        try {
+            stream = getAssets().open("cities.json");
+        } catch (IOException e) {
+            return null;
+        }
+
+        Gson gson = new GsonBuilder().create();
+
+        JsonElement json = new JsonParser().parse(new InputStreamReader(stream));
+
+        return gson.fromJson(json, new TypeToken<List<City>>() {
+        }.getType());
     }
 }
diff --git a/examples/gridViewExample/src/main/res/layout/activity_realm_example.xml b/examples/gridViewExample/src/main/res/layout/activity_realm_example.xml
index a76c48167f..d23e384d99 100644
--- a/examples/gridViewExample/src/main/res/layout/activity_realm_example.xml
+++ b/examples/gridViewExample/src/main/res/layout/activity_realm_example.xml
@@ -3,25 +3,24 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical"
-    android:paddingBottom="@dimen/activity_vertical_margin"
-    android:paddingLeft="@dimen/activity_horizontal_margin"
-    android:paddingRight="@dimen/activity_horizontal_margin"
-    android:paddingTop="@dimen/activity_vertical_margin"
-    tools:context=".RealmGridLayoutActivity">
+    tools:context=".GridViewExampleActivity">
 
     <TextView
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_marginTop="24dp"
         android:gravity="center_horizontal"
-        android:text="@string/my_favortie_city"
-        android:textSize="18sp" />
+        android:text="@string/my_favorite_city"
+        android:textSize="22sp" />
 
     <TextView
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_marginBottom="15dp"
+        android:layout_marginBottom="24dp"
         android:gravity="center_horizontal"
+        android:padding="4dp"
         android:text="@string/add_vote"
+        android:textSize="16sp"
         android:textStyle="bold" />
 
     <GridView
diff --git a/examples/gridViewExample/src/main/res/layout/city_listitem.xml b/examples/gridViewExample/src/main/res/layout/city_listitem.xml
index 84a41ed2dc..49e1bd6d2a 100755
--- a/examples/gridViewExample/src/main/res/layout/city_listitem.xml
+++ b/examples/gridViewExample/src/main/res/layout/city_listitem.xml
@@ -2,20 +2,26 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
+    xmlns:tools="http://schemas.android.com/tools"
     android:gravity="center"
-    android:orientation="horizontal">
+    android:orientation="horizontal"
+    android:padding="4dp">
 
     <TextView
         android:id="@+id/name"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_margin="5dp"
-        android:textColor="@android:color/black" />
+        android:layout_margin="12dp"
+        android:textColor="#121212"
+        android:textSize="20sp"
+        tools:text="Barcelona"/>
 
     <TextView
         android:id="@+id/votes"
         android:layout_width="wrap_content"
-         android:layout_height="wrap_content"
-        android:layout_margin="5dp"
-        android:textColor="@android:color/black" />
+        android:layout_height="wrap_content"
+        android:layout_margin="12dp"
+        android:textSize="18sp"
+        android:textColor="#3A3A3A"
+        tools:text="19"/>
 </LinearLayout>
diff --git a/examples/gridViewExample/src/main/res/values/strings.xml b/examples/gridViewExample/src/main/res/values/strings.xml
index 9f14c47ace..b7469afddc 100644
--- a/examples/gridViewExample/src/main/res/values/strings.xml
+++ b/examples/gridViewExample/src/main/res/values/strings.xml
@@ -1,8 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-
-    <string name="app_name">Gridview example</string>
-    <string name="my_favortie_city">My Favorite City</string>
+    <string name="app_name">GridView example</string>
+    <string name="my_favorite_city">My Favorite City</string>
     <string name="add_vote">Click to Add A Vote</string>
-
 </resources>
diff --git a/examples/introExample/build.gradle b/examples/introExample/build.gradle
index dc13980d3b..84188bec37 100644
--- a/examples/introExample/build.gradle
+++ b/examples/introExample/build.gradle
@@ -5,6 +5,10 @@ android {
     compileSdkVersion rootProject.sdkVersion
     buildToolsVersion rootProject.buildTools
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
     defaultConfig {
         applicationId 'io.realm.examples.intro'
         targetSdkVersion rootProject.sdkVersion
diff --git a/examples/introExample/src/main/java/io/realm/examples/intro/IntroExampleActivity.java b/examples/introExample/src/main/java/io/realm/examples/intro/IntroExampleActivity.java
index 669cd75af7..4660587de3 100644
--- a/examples/introExample/src/main/java/io/realm/examples/intro/IntroExampleActivity.java
+++ b/examples/introExample/src/main/java/io/realm/examples/intro/IntroExampleActivity.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,10 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import java.lang.ref.WeakReference;
+import java.util.Arrays;
+
+import io.realm.OrderedRealmCollectionChangeListener;
 import io.realm.Realm;
 import io.realm.RealmResults;
 import io.realm.Sort;
@@ -31,73 +35,86 @@
 import io.realm.examples.intro.model.Person;
 
 public class IntroExampleActivity extends Activity {
+    public static final String TAG = "IntroExampleActivity";
 
-    public static final String TAG = IntroExampleActivity.class.getName();
-    private LinearLayout rootLayout = null;
+    private LinearLayout rootLayout;
 
     private Realm realm;
 
+    // Results obtained from a Realm are live, and can be observed on looper threads (like the UI thread).
+    // Note that if you want to observe the RealmResults for a long time, then it should be a field reference.
+    // Otherwise, the RealmResults can no longer be notified if the GC has cleared the reference to it.
+    private RealmResults<Person> persons;
+
+    // OrderedRealmCollectionChangeListener receives fine-grained changes - insertions, deletions, and changes.
+    // If the change set isn't needed, then RealmChangeListener can also be used.
+    private final OrderedRealmCollectionChangeListener<RealmResults<Person>> realmChangeListener = (people, changeSet) -> {
+        String insertions = changeSet.getInsertions().length == 0 ? "" : "\n - Insertions: " + Arrays.toString(changeSet.getInsertions());
+        String deletions = changeSet.getDeletions().length == 0 ? "" : "\n - Deletions: " + Arrays.toString(changeSet.getDeletions());
+        String changes = changeSet.getChanges().length == 0 ? "" : "\n - Changes: " + Arrays.toString(changeSet.getChanges());
+        showStatus("Person was loaded, or written to. " + insertions + deletions + changes);
+    };
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_realm_basic_example);
-        rootLayout = ((LinearLayout) findViewById(R.id.container));
+        rootLayout = findViewById(R.id.container);
         rootLayout.removeAllViews();
 
-        // These operations are small enough that
-        // we can generally safely run them on the UI thread.
+        // Clear the Realm if the example was previously run.
+        Realm.deleteRealm(Realm.getDefaultConfiguration());
 
         // Create the Realm instance
         realm = Realm.getDefaultInstance();
 
+        // Asynchronous queries are evaluated on a background thread,
+        // and passed to the registered change listener when it's done.
+        // The change listener is also called on any future writes that change the result set.
+        persons = realm.where(Person.class).findAllAsync();
+
+        // The change listener will be notified when the data is loaded,
+        // or the Realm is written to from any threads (and the result set is modified).
+        persons.addChangeListener(realmChangeListener);
+
+        // These operations are small enough that
+        // we can generally safely run them on the UI thread.
         basicCRUD(realm);
         basicQuery(realm);
         basicLinkQuery(realm);
 
         // More complex operations can be executed on another thread.
-        new AsyncTask<Void, Void, String>() {
-            @Override
-            protected String doInBackground(Void... voids) {
-                String info;
-                info = complexReadWrite();
-                info += complexQuery();
-                return info;
-            }
-
-            @Override
-            protected void onPostExecute(String result) {
-                showStatus(result);
-            }
-        }.execute();
+        new ComplexBackgroundOperations(this).execute();
     }
 
     @Override
     protected void onDestroy() {
         super.onDestroy();
+        persons.removeAllChangeListeners(); // Remove the change listener when no longer needed.
         realm.close(); // Remember to close Realm when done.
     }
 
-    private void showStatus(String txt) {
-        Log.i(TAG, txt);
-        TextView tv = new TextView(this);
-        tv.setText(txt);
-        rootLayout.addView(tv);
+    private void showStatus(String text) {
+        Log.i(TAG, text);
+        TextView textView = new TextView(this);
+        textView.setText(text);
+        rootLayout.addView(textView);
     }
 
     private void basicCRUD(Realm realm) {
         showStatus("Perform basic Create/Read/Update/Delete (CRUD) operations...");
 
         // All writes must be wrapped in a transaction to facilitate safe multi threading
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                // Add a person
-                Person person = realm.createObject(Person.class);
-                person.setId(1);
-                person.setName("Young Person");
-                person.setAge(14);
-
-            }
+        realm.executeTransaction(r -> {
+            // Add a person. 
+            // RealmObjects with primary keys created with `createObject()` must specify the primary key value as an argument.
+            Person person = r.createObject(Person.class, 1);
+            person.setName("Young Person");
+            person.setAge(14);
+
+            // Even young people have at least one phone in this day and age.
+            // Please note that this is a RealmList that contains primitive values.
+            person.getPhoneNumbers().add("+1 123 4567");
         });
 
         // Find the first person (no query conditions) and read a field
@@ -105,26 +122,30 @@ public void execute(Realm realm) {
         showStatus(person.getName() + ":" + person.getAge());
 
         // Update person in a transaction
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                person.setName("Senior Person");
-                person.setAge(99);
-                showStatus(person.getName() + " got older: " + person.getAge());
-            }
+        realm.executeTransaction(r -> {
+            // Managed objects can be modified inside transactions.
+            person.setName("Senior Person");
+            person.setAge(99);
+            showStatus(person.getName() + " got older: " + person.getAge());
         });
 
         // Delete all persons
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                realm.delete(Person.class);
-            }
-        });
+        showStatus("Deleting all persons");
+        realm.executeTransaction(r -> r.delete(Person.class));
     }
 
     private void basicQuery(Realm realm) {
         showStatus("\nPerforming basic Query operation...");
+
+        // Let's add a person so that the query returns something.
+        realm.executeTransaction(r -> {
+            Person oldPerson = new Person();
+            oldPerson.setId(99);
+            oldPerson.setAge(99);
+            oldPerson.setName("George");
+            realm.insertOrUpdate(oldPerson);
+        });
+
         showStatus("Number of persons: " + realm.where(Person.class).count());
 
         RealmResults<Person> results = realm.where(Person.class).equalTo("age", 99).findAll();
@@ -134,6 +155,18 @@ private void basicQuery(Realm realm) {
 
     private void basicLinkQuery(Realm realm) {
         showStatus("\nPerforming basic Link Query operation...");
+
+        // Let's add a person with a cat so that the query returns something.
+        realm.executeTransaction(r -> {
+            Person catLady = realm.createObject(Person.class, 24);
+            catLady.setAge(52);
+            catLady.setName("Mary");
+
+            Cat tiger = realm.createObject(Cat.class);
+            tiger.name = "Tiger";
+            catLady.getCats().add(tiger);
+        });
+
         showStatus("Number of persons: " + realm.where(Person.class).count());
 
         RealmResults<Person> results = realm.where(Person.class).equalTo("cats.name", "Tiger").findAll();
@@ -141,37 +174,76 @@ private void basicLinkQuery(Realm realm) {
         showStatus("Size of result set: " + results.size());
     }
 
-    private String complexReadWrite() {
-        String status = "\nPerforming complex Read/Write operation...";
+    // This AsyncTask shows how to use Realm in background thread operations.
+    //
+    // AsyncTasks should be static inner classes to avoid memory leaks.
+    // In this example, WeakReference is used for the sake of simplicity.
+    private static class ComplexBackgroundOperations extends AsyncTask<Void, Void, String> {
+        private WeakReference<IntroExampleActivity> weakReference;
+
+        public ComplexBackgroundOperations(IntroExampleActivity introExampleActivity) {
+            this.weakReference = new WeakReference<>(introExampleActivity);
+        }
+
+        @Override
+        protected void onPreExecute() {
+            IntroExampleActivity activity = weakReference.get();
+            if (activity == null) {
+                return;
+            }
+            activity.showStatus("\n\nBeginning complex operations on background thread.");
+        }
+
+        @Override
+        protected String doInBackground(Void... voids) {
+            IntroExampleActivity activity = weakReference.get();
+            if (activity == null) {
+                return "";
+            }
+            // Open the default realm. Uses `try-with-resources` to automatically close Realm when done.
+            // All threads must use their own reference to the realm.
+            // Realm instances, RealmResults, and managed RealmObjects can not be transferred across threads.
+            try (Realm realm = Realm.getDefaultInstance()) {
+                String info;
+                info = activity.complexReadWrite(realm);
+                info += activity.complexQuery(realm);
+                return info;
+            }
+        }
 
-        // Open the default realm. All threads must use its own reference to the realm.
-        // Those can not be transferred across threads.
-        Realm realm = Realm.getDefaultInstance();
+        @Override
+        protected void onPostExecute(String result) {
+            IntroExampleActivity activity = weakReference.get();
+            if (activity == null) {
+                return;
+            }
+            activity.showStatus(result);
+        }
+    }
+
+    private String complexReadWrite(Realm realm) {
+        String status = "\nPerforming complex Read/Write operation...";
 
         // Add ten persons in one transaction
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                Dog fido = realm.createObject(Dog.class);
-                fido.name = "fido";
-                for (int i = 0; i < 10; i++) {
-                    Person person = realm.createObject(Person.class);
-                    person.setId(i);
-                    person.setName("Person no. " + i);
-                    person.setAge(i);
-                    person.setDog(fido);
-
-                    // The field tempReference is annotated with @Ignore.
-                    // This means setTempReference sets the Person tempReference
-                    // field directly. The tempReference is NOT saved as part of
-                    // the RealmObject:
-                    person.setTempReference(42);
-
-                    for (int j = 0; j < i; j++) {
-                        Cat cat = realm.createObject(Cat.class);
-                        cat.name = "Cat_" + j;
-                        person.getCats().add(cat);
-                    }
+        realm.executeTransaction(r -> {
+            Dog fido = r.createObject(Dog.class);
+            fido.name = "fido";
+            for (int i = 0; i < 10; i++) {
+                Person person = r.createObject(Person.class, i);
+                person.setName("Person no. " + i);
+                person.setAge(i);
+                person.setDog(fido);
+
+                // The field tempReference is annotated with @Ignore.
+                // This means setTempReference sets the Person tempReference
+                // field directly. The tempReference is NOT saved as part of
+                // the RealmObject:
+                person.setTempReference(42);
+
+                for (int j = 0; j < i; j++) {
+                    Cat cat = r.createObject(Cat.class);
+                    cat.name = "Cat_" + j;
+                    person.getCats().add(cat);
                 }
             }
         });
@@ -179,15 +251,15 @@ public void execute(Realm realm) {
         // Implicit read transactions allow you to access your objects
         status += "\nNumber of persons: " + realm.where(Person.class).count();
 
-        // Iterate over all objects
-        for (Person pers : realm.where(Person.class).findAll()) {
+        // Iterate over all objects, with an iterator
+        for (Person person : realm.where(Person.class).findAll()) {
             String dogName;
-            if (pers.getDog() == null) {
+            if (person.getDog() == null) {
                 dogName = "None";
             } else {
-                dogName = pers.getDog().name;
+                dogName = person.getDog().name;
             }
-            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();
+            status += "\n" + person.getName() + ":" + person.getAge() + " : " + dogName + " : " + person.getCats().size();
         }
 
         // Sorting
@@ -195,23 +267,20 @@ public void execute(Realm realm) {
         status += "\nSorting " + sortedPersons.last().getName() + " == " + realm.where(Person.class).findFirst()
                 .getName();
 
-        realm.close();
         return status;
     }
 
-    private String complexQuery() {
+    private String complexQuery(Realm realm) {
         String status = "\n\nPerforming complex Query operation...";
-
-        Realm realm = Realm.getDefaultInstance();
         status += "\nNumber of persons: " + realm.where(Person.class).count();
 
         // Find all persons where age between 7 and 9 and name begins with "Person".
         RealmResults<Person> results = realm.where(Person.class)
                 .between("age", 7, 9)       // Notice implicit "and" operation
                 .beginsWith("name", "Person").findAll();
+
         status += "\nSize of result set: " + results.size();
 
-        realm.close();
         return status;
     }
 }
diff --git a/examples/introExample/src/main/java/io/realm/examples/intro/MyApplication.java b/examples/introExample/src/main/java/io/realm/examples/intro/MyApplication.java
index 45e40f3748..79d00c24ec 100644
--- a/examples/introExample/src/main/java/io/realm/examples/intro/MyApplication.java
+++ b/examples/introExample/src/main/java/io/realm/examples/intro/MyApplication.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,5 +27,8 @@ public void onCreate() {
         super.onCreate();
         // Initialize Realm. Should only be done once when the application starts.
         Realm.init(this);
+
+        // In this example, no default configuration is set,
+        // so by default, `RealmConfiguration.Builder().build()` is used.
     }
 }
diff --git a/examples/introExample/src/main/java/io/realm/examples/intro/model/Cat.java b/examples/introExample/src/main/java/io/realm/examples/intro/model/Cat.java
index c06ae48237..586787b6d3 100644
--- a/examples/introExample/src/main/java/io/realm/examples/intro/model/Cat.java
+++ b/examples/introExample/src/main/java/io/realm/examples/intro/model/Cat.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,14 @@
 package io.realm.examples.intro.model;
 
 import io.realm.RealmObject;
+import io.realm.RealmResults;
+import io.realm.annotations.LinkingObjects;
 
 public class Cat extends RealmObject {
-    public  String name;
+    // It is possible to also use public fields, instead of getters/setters.
+    public String name;
+
+    // You can define inverse relationships.
+    @LinkingObjects("cats")
+    public final RealmResults<Person> owners = null;
 }
diff --git a/examples/introExample/src/main/java/io/realm/examples/intro/model/Dog.java b/examples/introExample/src/main/java/io/realm/examples/intro/model/Dog.java
index d6339bf300..a76284440d 100644
--- a/examples/introExample/src/main/java/io/realm/examples/intro/model/Dog.java
+++ b/examples/introExample/src/main/java/io/realm/examples/intro/model/Dog.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,8 +16,18 @@
 
 package io.realm.examples.intro.model;
 
-import io.realm.RealmObject;
+import io.realm.RealmModel;
+import io.realm.RealmResults;
+import io.realm.annotations.LinkingObjects;
+import io.realm.annotations.RealmClass;
 
-public class Dog extends RealmObject {
+// It is possible to use @RealmClass and implement RealmModel, instead of extending RealmObject.
+@RealmClass
+public class Dog implements RealmModel {
+    // It is possible to also use public fields, instead of getters/setters.
     public String name;
+
+    // You can define inverse relationships.
+    @LinkingObjects("dog")
+    public final RealmResults<Person> owners = null;
 }
diff --git a/examples/introExample/src/main/java/io/realm/examples/intro/model/Person.java b/examples/introExample/src/main/java/io/realm/examples/intro/model/Person.java
index cf9975d269..815eff324b 100644
--- a/examples/introExample/src/main/java/io/realm/examples/intro/model/Person.java
+++ b/examples/introExample/src/main/java/io/realm/examples/intro/model/Person.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,27 +19,39 @@
 import io.realm.RealmList;
 import io.realm.RealmObject;
 import io.realm.annotations.Ignore;
+import io.realm.annotations.Index;
+import io.realm.annotations.PrimaryKey;
 
 // Your model just have to extend RealmObject.
 // This will inherit an annotation which produces proxy getters and setters for all fields.
+// It is also possible to use @RealmClass annotation, and implement RealmModel interface.
 public class Person extends RealmObject {
 
     // All fields are by default persisted.
-    private String name;
     private int age;
 
-    // Other objects in a one-to-one relation must also subclass RealmObject
+    // Adding an index makes queries execute faster on that field.
+    @Index
+    private String name;
+
+    // Primary keys are optional, but it allows identifying a specific object
+    // when Realm writes are instructed to update if the object already exists in the Realm
+    @PrimaryKey
+    private long id;
+
+    // Other objects in a one-to-one relation must also implement RealmModel, or extend RealmObject
     private Dog dog;
 
-    // One-to-many relations is simply a RealmList of the objects which also subclass RealmObject
+    // One-to-many relations is simply a RealmList of the objects which also implements RealmModel
     private RealmList<Cat> cats;
 
+    // It is also possible to have list of primitive types (long, String, Date, byte[], etc.)
+    private RealmList<String> phoneNumbers;
+
     // You can instruct Realm to ignore a field and not persist it.
     @Ignore
     private int tempReference;
 
-    private long id;
-
     // Let your IDE generate getters and setters for you!
     // Or if you like you can even have public fields and no accessors! See Dog.java and Cat.java
     public String getName() {
@@ -58,6 +70,14 @@ public void setAge(int age) {
         this.age = age;
     }
 
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
     public Dog getDog() {
         return dog;
     }
@@ -82,11 +102,11 @@ public void setTempReference(int tempReference) {
         this.tempReference = tempReference;
     }
 
-    public long getId() {
-        return id;
+    public RealmList<String> getPhoneNumbers() {
+        return phoneNumbers;
     }
 
-    public void setId(long id) {
-        this.id = id;
+    public void setPhoneNumbers(RealmList<String> phoneNumbers) {
+        this.phoneNumbers = phoneNumbers;
     }
 }
diff --git a/examples/jsonExample/build.gradle b/examples/jsonExample/build.gradle
index 8f9242eef1..f8c3917a5b 100644
--- a/examples/jsonExample/build.gradle
+++ b/examples/jsonExample/build.gradle
@@ -5,6 +5,10 @@ android {
     compileSdkVersion rootProject.sdkVersion
     buildToolsVersion rootProject.buildTools
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
     defaultConfig {
         applicationId 'io.realm.examples.json'
         targetSdkVersion rootProject.sdkVersion
@@ -27,6 +31,7 @@ android {
 }
 
 dependencies {
-    compileOnly 'org.projectlombok:lombok:1.16.6'
-    annotationProcessor 'org.projectlombok:lombok:1.16.6'
+    compileOnly 'org.projectlombok:lombok:1.16.18'
+    compileOnly 'javax.annotation:javax.annotation-api:1.3.1'
+    annotationProcessor 'org.projectlombok:lombok:1.16.18'
 }
diff --git a/examples/jsonExample/src/main/java/io/realm/examples/json/CityAdapter.java b/examples/jsonExample/src/main/java/io/realm/examples/json/CityAdapter.java
index 73dbc279b7..891d8613ed 100644
--- a/examples/jsonExample/src/main/java/io/realm/examples/json/CityAdapter.java
+++ b/examples/jsonExample/src/main/java/io/realm/examples/json/CityAdapter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,50 +16,37 @@
 
 package io.realm.examples.json;
 
-import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 
+import java.util.Collections;
 import java.util.List;
 
 // This adapter is strictly to interface with the GridView and doesn't
 // particular show much interesting Realm functionality.
-
-// Alternatively from this example,
-// a developer could update the getView() to pull items from the Realm.
-
 public class CityAdapter extends BaseAdapter {
+    public static final String TAG = "CityAdapter";
 
-    public static final String TAG = JsonExampleActivity.class.getName();
-
-    private LayoutInflater inflater;
-
-    private List<City> cities = null;
+    private List<City> cities = Collections.emptyList();
 
-    public CityAdapter(Context context) {
-        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+    public CityAdapter() {
     }
 
     public void setData(List<City> details) {
         this.cities = details;
+        notifyDataSetChanged();
     }
 
     @Override
     public int getCount() {
-        if (cities == null) {
-            return 0;
-        }
-        return cities.size();
+        return cities == null ? 0 : cities.size();
     }
 
     @Override
-    public Object getItem(int position) {
-        if (cities == null || cities.get(position) == null) {
-            return null;
-        }
+    public City getItem(int position) {
         return cities.get(position);
     }
 
@@ -68,18 +55,36 @@ public long getItemId(int i) {
         return i;
     }
 
+    private static class ViewHolder {
+        private TextView name;
+        private TextView votes;
+
+        public ViewHolder(View view) {
+            this.name = view.findViewById(R.id.name);
+            this.votes = view.findViewById(R.id.votes);
+        }
+
+        public void bind(City city) {
+            name.setText(city.getName());
+            votes.setText(String.valueOf(city.getVotes()));
+        }
+    }
+
     @Override
     public View getView(int position, View currentView, ViewGroup parent) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        ViewHolder viewHolder;
+
         if (currentView == null) {
             currentView = inflater.inflate(R.layout.city_listitem, parent, false);
+            viewHolder = new ViewHolder(currentView);
+            currentView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder)currentView.getTag();
         }
 
         City city = cities.get(position);
-
-        if (city != null) {
-            ((TextView) currentView.findViewById(R.id.name)).setText(city.getName());
-            ((TextView) currentView.findViewById(R.id.votes)).setText(String.valueOf(city.getVotes()));
-        }
+        viewHolder.bind(city);
 
         return currentView;
     }
diff --git a/examples/jsonExample/src/main/java/io/realm/examples/json/JsonExampleActivity.java b/examples/jsonExample/src/main/java/io/realm/examples/json/JsonExampleActivity.java
index 1e00b55e85..2910fd7034 100644
--- a/examples/jsonExample/src/main/java/io/realm/examples/json/JsonExampleActivity.java
+++ b/examples/jsonExample/src/main/java/io/realm/examples/json/JsonExampleActivity.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Realm Inc.
+ * Copyright 2018 Realm Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,11 +25,11 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 import io.realm.Realm;
-import io.realm.RealmConfiguration;
+import io.realm.RealmChangeListener;
+import io.realm.RealmResults;
 
 /**
  * This example demonstrates how to import RealmObjects as JSON. Realm supports JSON represented
@@ -37,76 +37,69 @@
  */
 public class JsonExampleActivity extends Activity {
 
-    private GridView mGridView;
-    private CityAdapter mAdapter;
+    private GridView gridView;
+    private CityAdapter adapter;
+
     private Realm realm;
+    private RealmResults<City> cities;
+    private RealmChangeListener<RealmResults<City>> realmChangeListener = (cities) -> {
+        adapter.setData(cities);
+    };
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_realm_example);
 
-        RealmConfiguration realmConfiguration = new RealmConfiguration.Builder().build();
-        Realm.deleteRealm(realmConfiguration);
-        realm = Realm.getInstance(realmConfiguration);
-    }
+        Realm.deleteRealm(Realm.getDefaultConfiguration());
 
-    @Override
-    public void onResume() {
-        super.onResume();
+        realm = Realm.getDefaultInstance();
 
-        // Load from file "cities.json" first time
-        if(mAdapter == null) {
-            List<City> cities = null;
-            try {
-                cities = loadCities();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
+        gridView = findViewById(R.id.cities_list);
 
-            //This is the GridView adapter
-            mAdapter = new CityAdapter(this);
-            mAdapter.setData(cities);
+        cities = realm.where(City.class).findAllAsync();
+        cities.addChangeListener(realmChangeListener);
 
-            //This is the GridView which will display the list of cities
-            mGridView = (GridView) findViewById(R.id.cities_list);
-            mGridView.setAdapter(mAdapter);
-            mAdapter.notifyDataSetChanged();
-            mGridView.invalidate();
-        }
+        adapter = new CityAdapter();
+        gridView.setAdapter(adapter);
+
+        // Load from file "cities.json" first time
+        loadCities();
     }
 
+
     @Override
     protected void onDestroy() {
         super.onDestroy();
+        cities.removeAllChangeListeners();
         realm.close();
     }
 
-    public List<City> loadCities() throws IOException {
-
-        loadJsonFromStream();
-        loadJsonFromJsonObject();
-        loadJsonFromString();
-
-        return realm.where(City.class).findAll();
+    public void loadCities() {
+        try {
+            loadJsonFromStream();
+            loadJsonFromJsonObject();
+            loadJsonFromString();
+        } catch(IOException e) {
+            throw new RuntimeException(e);
+        }
     }
 
     private void loadJsonFromStream() throws IOException {
         // Use streams if you are worried about the size of the JSON whether it was persisted on disk
         // or received from the network.
-        InputStream stream = getAssets().open("cities.json");
-
-        // Open a transaction to store items into the realm
-        realm.beginTransaction();
-        try {
-            realm.createAllFromJson(City.class, stream);
-            realm.commitTransaction();
-        } catch (IOException e) {
-            // Remember to cancel the transaction if anything goes wrong.
-            realm.cancelTransaction();
-        } finally {
-            if (stream != null) {
-                stream.close();
+        try(InputStream stream = getAssets().open("cities.json")) {
+            try {
+                // Open a transaction to store items into the realm
+                realm.beginTransaction();
+                realm.createAllFromJson(City.class, stream);
+                realm.commitTransaction();
+            } catch (IOException e) {
+                // Remember to cancel the transaction if anything goes wrong.
+                if(realm.isInTransaction()) {
+                    realm.cancelTransaction();
+                }
+                throw new RuntimeException(e);
             }
         }
     }
@@ -117,22 +110,12 @@ private void loadJsonFromJsonObject() {
         city.put("votes", "9");
         final JSONObject json = new JSONObject(city);
 
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                realm.createObjectFromJson(City.class, json);
-            }
-        });
+        realm.executeTransaction(realm -> realm.createObjectFromJson(City.class, json));
     }
 
     private void loadJsonFromString() {
         final String json = "{ name: \"Aarhus\", votes: 99 }";
 
-        realm.executeTransaction(new Realm.Transaction() {
-            @Override
-            public void execute(Realm realm) {
-                realm.createObjectFromJson(City.class, json);
-            }
-        });
+        realm.executeTransaction(realm -> realm.createObjectFromJson(City.class, json));
     }
 }
diff --git a/examples/jsonExample/src/main/res/layout/activity_realm_example.xml b/examples/jsonExample/src/main/res/layout/activity_realm_example.xml
index c0934adf72..598cebccdb 100644
--- a/examples/jsonExample/src/main/res/layout/activity_realm_example.xml
+++ b/examples/jsonExample/src/main/res/layout/activity_realm_example.xml
@@ -3,23 +3,23 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical"
-    android:paddingBottom="@dimen/activity_vertical_margin"
     android:paddingLeft="@dimen/activity_horizontal_margin"
     android:paddingRight="@dimen/activity_horizontal_margin"
-    android:paddingTop="@dimen/activity_vertical_margin"
     tools:context=".JsonExampleActivity">
 
     <TextView
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:gravity="center_horizontal"
+        android:paddingBottom="@dimen/activity_vertical_margin"
+        android:paddingTop="@dimen/activity_vertical_margin"
         android:text="@string/label"
         android:textSize="18sp" />
 
     <GridView
         android:id="@+id/cities_list"
-        android:listSelector="@android:color/transparent"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:listSelector="@android:color/transparent"
         android:numColumns="2" />
 </LinearLayout>
diff --git a/examples/kotlinExample/build.gradle b/examples/kotlinExample/build.gradle
index 9b887acf98..aa27cdec51 100644
--- a/examples/kotlinExample/build.gradle
+++ b/examples/kotlinExample/build.gradle
@@ -60,5 +60,5 @@ tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
 
 dependencies {
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
-    implementation 'org.jetbrains.anko:anko-sdk15:0.9.1'
+    implementation "org.jetbrains.anko:anko-commons:0.10.4"
 }
diff --git a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
index 25a6622827..3d7af8c2dc 100644
--- a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
+++ b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/KotlinExampleActivity.kt
@@ -30,36 +30,34 @@ import io.realm.kotlin.createObject
 import io.realm.kotlin.where
 import org.jetbrains.anko.doAsync
 import org.jetbrains.anko.uiThread
-import kotlin.properties.Delegates
 
 class KotlinExampleActivity : Activity() {
-
     companion object {
-        val TAG: String = KotlinExampleActivity::class.java.simpleName
+        const val TAG: String = "KotlinExampleActivity"
     }
 
-    private var rootLayout: LinearLayout by Delegates.notNull()
-    private var realm: Realm by Delegates.notNull()
+    private lateinit var rootLayout: LinearLayout
+    private lateinit var realm: Realm
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_realm_basic_example)
+
         rootLayout = findViewById(R.id.container)
         rootLayout.removeAllViews()
 
-        // These operations are small enough that
-        // we can generally safely run them on the UI thread.
-
         // Open the realm for the UI thread.
         realm = Realm.getDefaultInstance()
 
         // Delete all persons
         // Using executeTransaction with a lambda reduces code size and makes it impossible
         // to forget to commit the transaction.
-        realm.executeTransaction {
+        realm.executeTransaction { realm ->
             realm.deleteAll()
         }
 
+        // These operations are small enough that
+        // we can generally safely run them on the UI thread.
         basicCRUD(realm)
         basicQuery(realm)
         basicLinkQuery(realm)
@@ -67,8 +65,17 @@ class KotlinExampleActivity : Activity() {
         // More complex operations can be executed on another thread, for example using
         // Anko's doAsync extension method.
         doAsync {
-            var info = complexReadWrite()
-            info += complexQuery()
+            var info = ""
+
+            // Open the default realm. All threads must use its own reference to the realm.
+            // Those can not be transferred across threads.
+
+            // Realm implements the Closable interface, therefore
+            // we can make use of Kotlin's built-in extension method 'use' (pun intended).
+            Realm.getDefaultInstance().use { realm ->
+                info += complexReadWrite(realm)
+                info += complexQuery(realm)
+            }
             uiThread {
                 showStatus(info)
             }
@@ -80,18 +87,19 @@ class KotlinExampleActivity : Activity() {
         realm.close() // Remember to close Realm when done.
     }
 
-    private fun showStatus(txt: String) {
-        Log.i(TAG, txt)
-        val tv = TextView(this)
-        tv.text = txt
-        rootLayout.addView(tv)
+    private fun showStatus(text: String) {
+        Log.i(TAG, text)
+        val textView = TextView(this)
+        textView.text = text
+        rootLayout.addView(textView)
     }
 
+    @Suppress("NAME_SHADOWING")
     private fun basicCRUD(realm: Realm) {
         showStatus("Perform basic Create/Read/Update/Delete (CRUD) operations...")
 
         // All writes must be wrapped in a transaction to facilitate safe multi threading
-        realm.executeTransaction {
+        realm.executeTransaction { realm ->
             // Add a person
             val person = realm.createObject<Person>(0)
             person.name = "Young Person"
@@ -103,7 +111,7 @@ class KotlinExampleActivity : Activity() {
         showStatus(person.name + ": " + person.age)
 
         // Update person in a transaction
-        realm.executeTransaction {
+        realm.executeTransaction { _ ->
             person.name = "Senior Person"
             person.age = 99
             showStatus(person.name + " got older: " + person.age)
@@ -129,84 +137,68 @@ class KotlinExampleActivity : Activity() {
         showStatus("Size of result set: ${results.size}")
     }
 
-    private fun complexReadWrite(): String {
+    private fun complexReadWrite(realm: Realm): String {
         var status = "\nPerforming complex Read/Write operation..."
 
-        // Open the default realm. All threads must use its own reference to the realm.
-        // Those can not be transferred across threads.
-        val realm = Realm.getDefaultInstance()
-        try {
-            // Add ten persons in one transaction
-            realm.executeTransaction {
-                val fido = realm.createObject<Dog>()
-                fido.name = "fido"
-                for (i in 1..9) {
-                    val person = realm.createObject<Person>(i.toLong())
-                    person.name = "Person no. $i"
-                    person.age = i
-                    person.dog = fido
-
-                    // The field tempReference is annotated with @Ignore.
-                    // This means setTempReference sets the Person tempReference
-                    // field directly. The tempReference is NOT saved as part of
-                    // the RealmObject:
-                    person.tempReference = 42
-
-                    for (j in 0..i - 1) {
-                        val cat = realm.createObject<Cat>()
-                        cat.name = "Cat_$j"
-                        person.cats.add(cat)
-                    }
+        // Add ten persons in one transaction
+        realm.executeTransaction {
+            val fido = realm.createObject<Dog>()
+            fido.name = "fido"
+            for (i in 1..9) {
+                val person = realm.createObject<Person>(i.toLong())
+                person.name = "Person no. $i"
+                person.age = i
+                person.dog = fido
+
+                // The field tempReference is annotated with @Ignore.
+                // This means setTempReference sets the Person tempReference
+                // field directly. The tempReference is NOT saved as part of
+                // the RealmObject:
+                person.tempReference = 42
+
+                for (j in 0..i - 1) {
+                    val cat = realm.createObject<Cat>()
+                    cat.name = "Cat_$j"
+                    person.cats.add(cat)
                 }
             }
+        }
 
-            // Implicit read transactions allow you to access your objects
-            status += "\nNumber of persons: ${realm.where<Person>().count()}"
+        // Implicit read transactions allow you to access your objects
+        status += "\nNumber of persons: ${realm.where<Person>().count()}"
 
-            // Iterate over all objects
-            for (person in realm.where<Person>().findAll()) {
-                val dogName: String = person?.dog?.name ?: "None"
+        // Iterate over all objects
+        for (person in realm.where<Person>().findAll()) {
+            val dogName: String = person?.dog?.name ?: "None"
 
-                status += "\n${person.name}: ${person.age} : $dogName : ${person.cats.size}"
+            status += "\n${person.name}: ${person.age} : $dogName : ${person.cats.size}"
 
-                // The field tempReference is annotated with @Ignore
-                // Though we initially set its value to 42, it has
-                // not been saved as part of the Person RealmObject:
-                check(person.tempReference == 0)
-            }
+            // The field tempReference is annotated with @Ignore
+            // Though we initially set its value to 42, it has
+            // not been saved as part of the Person RealmObject:
+            check(person.tempReference == 0)
+        }
 
-            // Sorting
-            val sortedPersons = realm.where<Person>().sort(Person::age.name, Sort.DESCENDING).findAll()
-            status += "\nSorting ${sortedPersons.last()?.name} == ${realm.where<Person>().findAll().first()?.name}"
+        // Sorting
+        val sortedPersons = realm.where<Person>().sort(Person::age.name, Sort.DESCENDING).findAll()
+        status += "\nSorting ${sortedPersons.last()?.name} == ${realm.where<Person>().findAll().first()?.name}"
 
-        } finally {
-            realm.close()
-        }
         return status
     }
 
-    private fun complexQuery(): String {
+    private fun complexQuery(realm: Realm): String {
         var status = "\n\nPerforming complex Query operation..."
 
-        // Realm implements the Closable interface, therefore we can make use of Kotlin's built-in
-        // extension method 'use' (pun intended).
-        Realm.getDefaultInstance().use {
-            // 'it' is the implicit lambda parameter of type Realm
-            status += "\nNumber of persons: ${it.where<Person>().count()}"
-
-            // Find all persons where age between 7 and 9 and name begins with "Person".
-            val results = it
-                    .where<Person>()
-                    .between("age", 7, 9)       // Notice implicit "and" operation
-                    .beginsWith("name", "Person")
-                    .findAll()
+        status += "\nNumber of persons: ${realm.where<Person>().count()}"
 
-            status += "\nSize of result set: ${results.size}"
+        // Find all persons where age between 7 and 9 and name begins with "Person".
+        val results = realm.where<Person>()
+            .between("age", 7, 9)       // Notice implicit "and" operation
+            .beginsWith("name", "Person")
+            .findAll()
 
-        }
+        status += "\nSize of result set: ${results.size}"
 
         return status
     }
-
-
 }
diff --git a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Cat.kt b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Cat.kt
index 60e21b81b5..b1d4a37e1a 100644
--- a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Cat.kt
+++ b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Cat.kt
@@ -17,7 +17,12 @@
 package io.realm.examples.kotlin.model
 
 import io.realm.RealmObject
+import io.realm.RealmResults
+import io.realm.annotations.LinkingObjects
 
 open class Cat : RealmObject() {
     var name: String? = null
+
+    @LinkingObjects("cats")
+    val owners: RealmResults<Person>? = null
 }
diff --git a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Dog.kt b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Dog.kt
index 17d8b5fd75..e1237ed648 100644
--- a/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Dog.kt
+++ b/examples/kotlinExample/src/main/kotlin/io/realm/examples/kotlin/model/Dog.kt
@@ -22,6 +22,7 @@ import io.realm.annotations.LinkingObjects
 
 open class Dog : RealmObject() {
     var name: String? = null
+
     @LinkingObjects("dog")
     val owners: RealmResults<Person>? = null
 }
diff --git a/examples/settings.gradle b/examples/settings.gradle
index 42ff9775fe..4a5ac90600 100644
--- a/examples/settings.gradle
+++ b/examples/settings.gradle
@@ -1,5 +1,5 @@
 rootProject.name = 'realm-examples'
-include 'secureTokenAndroidKeyStore'
+include 'architectureComponentsExample'
 include 'encryptionExample'
 include 'gridViewExample'
 include 'introExample'
@@ -8,9 +8,11 @@ include 'kotlinExample'
 include 'migrationExample'
 include 'moduleExample:app'
 include 'moduleExample:library'
-include 'threadExample'
-include 'unitTestExample'
 include 'newsreaderExample'
 include 'rxJavaExample'
+include 'secureTokenAndroidKeyStore'
+include 'threadExample'
+include 'unitTestExample'
 include 'objectServerExample'
 include 'multiprocessExample'
+
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
index fe5195774f..bf05c006ab 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java
@@ -528,14 +528,18 @@ public void automatic_convertsAuthUrl() {
         Object[][] input = {
                 // AuthUrl -> Expected Realm URL
                 { "http://ros.realm.io/auth", "realm://ros.realm.io/default" },
-                { "http://ros.realm.io:7777", "realm://ros.realm.io/default" },
+                { "http://ros.realm.io:7777", "realm://ros.realm.io:7777/default" },
                 { "http://127.0.0.1/auth", "realm://127.0.0.1/default" },
                 { "HTTP://ros.realm.io" , "realm://ros.realm.io/default" },
 
                 { "https://ros.realm.io/auth", "realms://ros.realm.io/default" },
-                { "https://ros.realm.io:7777", "realms://ros.realm.io/default" },
+                { "https://ros.realm.io:7777", "realms://ros.realm.io:7777/default" },
                 { "https://127.0.0.1/auth", "realms://127.0.0.1/default" },
                 { "HTTPS://ros.realm.io" , "realms://ros.realm.io/default" },
+                // with port
+                { "http://192.168.1.65:9080" , "realm://192.168.1.65:9080/default" },
+                { "http://192.168.1.65:9080/auth" , "realm://192.168.1.65:9080/default" },
+                { "https://192.168.1.65:9080/auth" , "realms://192.168.1.65:9080/default" },
         };
 
         for (Object[] test : input) {
diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
index 362c9022b1..7cbf711b85 100644
--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java
@@ -233,6 +233,10 @@ private static String createUrl(SyncUser user) {
         URL url = user.getAuthenticationUrl();
         String protocol = url.getProtocol();
         String host = url.getHost();
+        int port = url.getPort();
+        if (port != -1) { // port set
+            host += ":" + port;
+        }
 
         if (protocol.equalsIgnoreCase("https")) {
             protocol = "realms";
