diff --git a/CHANGELOG.md b/CHANGELOG.md
index a35b2a1c72..31f208cafe 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,8 +1,17 @@
+## 5.0.2 (YYYY-MM-DD)
+
+### Bug Fixes
+
+* `RealmList.move()` did not move items correctly for unmanaged lists (#5860).
+* `RealmObject.isValid()` not correctly returns `false` if `null` is provided as an argument (#5865).
+
+
 ## 5.0.1 (YYYY-MM-DD)
 
 ### Enhancements
 
-* [ObjectServer] `SyncConfiguration.automatic()` will make use of the host port to work out the default Realm URL. 
+* [ObjectServer] `SyncConfiguration.automatic()` will make use of the host port to work out the default Realm URL.
+* [ObjectServer] A role is now automatically created for each user with that user as its only member. This simplifies the common use case of restricting access to specific objects to a single user. This role can be accessed at `PermissionUser.getRole()`.
 
 ### Bug Fixes
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
index 6547300fed..3bcb03b5eb 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmListTests.java
@@ -281,26 +281,29 @@ public void remove_unmanagedMode() {
     public void move_down() {
         Owner owner = realm.where(Owner.class).findFirst();
         Dog dog1 = owner.getDogs().get(1);
+        Dog dog2 = owner.getDogs().get(0);
         realm.beginTransaction();
         owner.getDogs().move(1, 0);
         realm.commitTransaction();
 
+        assertEquals(TEST_SIZE, owner.getDogs().size());
         assertEquals(0, owner.getDogs().indexOf(dog1));
+        assertEquals(1, owner.getDogs().indexOf(dog2));
     }
 
     // Tests move where oldPosition < newPosition.
     @Test
     public void move_up() {
         Owner owner = realm.where(Owner.class).findFirst();
-        int oldIndex = TEST_SIZE / 2;
-        int newIndex = oldIndex + 1;
-        Dog dog = owner.getDogs().get(oldIndex);
+        Dog dog1 = owner.getDogs().get(0);
+        Dog dog2 = owner.getDogs().get(1);
         realm.beginTransaction();
-        owner.getDogs().move(oldIndex, newIndex); // This doesn't do anything as oldIndex is now empty so the index's above gets shifted to the left.
+        owner.getDogs().move(0, 1);
         realm.commitTransaction();
 
         assertEquals(TEST_SIZE, owner.getDogs().size());
-        assertEquals(newIndex, owner.getDogs().indexOf(dog));
+        assertEquals(1, owner.getDogs().indexOf(dog1));
+        assertEquals(0, owner.getDogs().indexOf(dog2));
     }
 
     // Tests move where oldPosition > newPosition.
@@ -308,22 +311,27 @@ public void move_up() {
     public void move_downInUnmanagedMode() {
         RealmList<Dog> dogs = createUnmanagedDogList();
         Dog dog1 = dogs.get(1);
+        Dog dog2 = dogs.get(0);
+
         dogs.move(1, 0);
 
+        assertEquals(TEST_SIZE, dogs.size());
         assertEquals(0, dogs.indexOf(dog1));
+        assertEquals(1, dogs.indexOf(dog2));
     }
 
     // Tests move where oldPosition < newPosition.
     @Test
     public void move_upInUnmanagedMode() {
         RealmList<Dog> dogs = createUnmanagedDogList();
-        int oldIndex = TEST_SIZE / 2;
-        int newIndex = oldIndex + 1;
-        Dog dog = dogs.get(oldIndex);
-        dogs.move(oldIndex, newIndex); // This doesn't do anything as oldIndex is now empty so the index's above gets shifted to the left.
+        Dog dog1 = dogs.get(0);
+        Dog dog2 = dogs.get(1);
+
+        dogs.move(0, 1);
 
         assertEquals(TEST_SIZE, dogs.size());
-        assertEquals(oldIndex, dogs.indexOf(dog));
+        assertEquals(1, dogs.indexOf(dog1));
+        assertEquals(0, dogs.indexOf(dog2));
     }
 
     /*********************************************************
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
index 8d99101714..a6b3d4792c 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java
@@ -986,6 +986,12 @@ public void isValid_managedObject() {
         assertTrue(allTypes.isValid());
     }
 
+    @Test
+    public void isValid_null() {
+        //noinspection ConstantConditions
+        assertFalse(RealmObject.isValid(null));
+    }
+
     // Stores and retrieves null values for nullable fields.
     @Test
     public void set_get_nullOnNullableFields() {
diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
index 111733af79..045f290af4 100644
--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/ObjectLevelPermissionsTest.java
@@ -32,6 +32,7 @@
 import io.realm.sync.permissions.ClassPrivileges;
 import io.realm.sync.permissions.ObjectPrivileges;
 import io.realm.sync.permissions.Permission;
+import io.realm.sync.permissions.PermissionUser;
 import io.realm.sync.permissions.RealmPermissions;
 import io.realm.sync.permissions.RealmPrivileges;
 import io.realm.sync.permissions.Role;
@@ -39,6 +40,8 @@
 import static io.realm.util.SyncTestUtils.createTestUser;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -430,6 +433,33 @@ public void getClassPermissions_closedRealmThrows() {
 //        }
     }
 
+    @Test
+    public void userPrivateRole() {
+        RealmResults<PermissionUser> permissionUsers = realm.where(PermissionUser.class).findAll();
+        assertEquals(1, permissionUsers.size());
+
+        PermissionUser permissionUser = permissionUsers.get(0);
+        assertNotNull(permissionUser);
+        Role role = permissionUser.getPrivateRole();
+        assertNotNull(role);
+
+        assertEquals("__User:" + user.getIdentity(), role.getName());
+        assertTrue(role.hasMember(user.getIdentity()));
+    }
+
+    @Test
+    public void userPrivateRoleNotAvailableBeforeSyncClientCreated() {
+        realm.beginTransaction();
+        PermissionUser permissionUser = realm.createObject(PermissionUser.class, "id123");
+        realm.commitTransaction();
+
+        Role builtInRole = permissionUser.getPrivateRole();
+        assertNull(builtInRole);
+        permissionUser = realm.where(PermissionUser.class).equalTo("id", "id123").findFirst();
+        assertNull(permissionUser.getPrivateRole());
+        assertTrue(permissionUser.getRoles().isEmpty());
+    }
+
     @Test
     public void getRoles() {
         RealmResults<Role> roles = realm.getRoles();
diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java
index af87170e3c..a1cb1dae20 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmList.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java
@@ -267,11 +267,7 @@ public void move(int oldPos, int newPos) {
                 throw new IndexOutOfBoundsException("Invalid index " + newPos + ", size is " + listSize);
             }
             E object = unmanagedList.remove(oldPos);
-            if (newPos > oldPos) {
-                unmanagedList.add(newPos - 1, object);
-            } else {
-                unmanagedList.add(newPos, object);
-            }
+            unmanagedList.add(newPos, object);
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/RealmObject.java b/realm/realm-library/src/main/java/io/realm/RealmObject.java
index 2b6162e6aa..de4a42443f 100644
--- a/realm/realm-library/src/main/java/io/realm/RealmObject.java
+++ b/realm/realm-library/src/main/java/io/realm/RealmObject.java
@@ -151,7 +151,8 @@ public final boolean isValid() {
             Row row = proxy.realmGet$proxyState().getRow$realm();
             return row != null && row.isAttached();
         } else {
-            return true;
+            //noinspection ConstantConditions
+            return object != null;
         }
     }
 
diff --git a/realm/realm-library/src/main/java/io/realm/sync/permissions/PermissionUser.java b/realm/realm-library/src/main/java/io/realm/sync/permissions/PermissionUser.java
index 7be7f168ba..1146f947a5 100644
--- a/realm/realm-library/src/main/java/io/realm/sync/permissions/PermissionUser.java
+++ b/realm/realm-library/src/main/java/io/realm/sync/permissions/PermissionUser.java
@@ -39,6 +39,8 @@
     @Required
     private String id;
 
+    private Role role;
+
     @LinkingObjects("members")
     final RealmResults<Role> roles = null;
 
@@ -72,4 +74,14 @@ public String getId() {
     public @Nullable  RealmResults<Role> getRoles() {
         return roles;
     }
+
+    /**
+     * The user's private role. This will be initialized to a role named for the user's
+     * identity that contains this user as its only member.
+     *
+     * @return User private {@link Role}.
+     */
+    public Role getPrivateRole() {
+        return role;
+    }
 }
