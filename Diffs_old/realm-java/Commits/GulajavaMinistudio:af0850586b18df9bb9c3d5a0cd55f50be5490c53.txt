diff --git a/CHANGELOG.md b/CHANGELOG.md
index 812334a0eb..1e3f8e1102 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -30,7 +30,8 @@
 ### Bug Fixes
 
 * Fixed a bug in `isNull()`, `isNotNull()`, `isEmpty()`, and `isNotEmpty()` when queries involve nullable fields in link queries (#4856).
-* Rare crash in `RealmLog` when log level was set to `LogLevel.DEBUG`.   
+* Fixed a bug in how to resolve field names when querying `@LinkingObjects` as the last field (#4864).
+* Rare crash in `RealmLog` when log level was set to `LogLevel.DEBUG`.
 * [ObjectServer] Fixed a bug related to the behaviour of `SyncUser#logout` and the use of invalid `SyncUser` with `SyncConfiguration` (#4822).
 
 ### Internal
diff --git a/examples/kotlinExample/build.gradle b/examples/kotlinExample/build.gradle
index d4a434d370..f7ddd7c06a 100644
--- a/examples/kotlinExample/build.gradle
+++ b/examples/kotlinExample/build.gradle
@@ -1,5 +1,5 @@
 buildscript {
-    ext.kotlin_version = '1.1.2-5'
+    ext.kotlin_version = '1.1.3'
     repositories {
         jcenter()
         mavenCentral()
diff --git a/realm/build.gradle b/realm/build.gradle
index 37a4993710..9c3bf25cc6 100644
--- a/realm/build.gradle
+++ b/realm/build.gradle
@@ -1,5 +1,5 @@
 buildscript {
-    ext.kotlin_version = '1.1.2-5'
+    ext.kotlin_version = '1.1.3'
     repositories {
         mavenLocal()
         google()
diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
index 3a04a45e27..568e3b29e2 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java
@@ -750,7 +750,7 @@ public void run() {
                             .setObject(AllJavaTypes.FIELD_OBJECT, dObjDynamic);
                     fail();
                 } catch (IllegalArgumentException expected) {
-                    assertEquals(expected.getMessage(), "Cannot add an object from another Realm instance.");
+                    assertEquals("Cannot add an object from another Realm instance.", expected.getMessage());
                 }
 
                 dynamicRealm.cancelTransaction();
@@ -861,8 +861,7 @@ public void run() {
                     dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setList(AllJavaTypes.FIELD_LIST, list);
                     fail();
                 } catch (IllegalArgumentException expected) {
-                    assertEquals(expected.getMessage(),
-                            "Each element in 'list' must belong to the same Realm instance.");
+                    assertEquals("Each element in 'list' must belong to the same Realm instance.", expected.getMessage());
                 }
 
                 dynamicRealm.cancelTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
index b98b5edbfa..7e8d36dd75 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmTests.java
@@ -332,7 +332,7 @@ public void execute(DynamicRealm realm) {
             });
         } catch (RuntimeException ignored) {
             // Ensures that we pass a valuable error message to the logger for developers.
-            assertEquals(testLogger.message, "Could not cancel transaction, not currently in a transaction.");
+            assertEquals("Could not cancel transaction, not currently in a transaction.", testLogger.message);
         } finally {
             RealmLog.remove(testLogger);
         }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsQueryTests.java
index 91155ee79a..4b2d657c55 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsQueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsQueryTests.java
@@ -23,6 +23,7 @@
 import java.util.Date;
 
 import io.realm.entities.AllJavaTypes;
+import io.realm.entities.BacklinksTarget;
 import io.realm.entities.NullTypes;
 
 import static org.junit.Assert.assertEquals;
@@ -345,7 +346,7 @@ public void isNotNull_unsupportedLinkedTypes() {
     }
 
     @Test
-    public void isEmpty() {
+    public void isEmpty_linkingObjects() {
         createIsEmptyDataSet(realm);
         for (RealmFieldType type : SUPPORTED_IS_EMPTY_TYPES) {
             switch (type) {
@@ -363,6 +364,18 @@ public void isEmpty() {
         }
     }
 
+    @Test
+    public void isEmpty_multipleModelClasses() {
+        createLinkedDataSet(realm);
+        assertEquals(1, realm.where(BacklinksTarget.class).isEmpty(BacklinksTarget.FIELD_PARENTS).count());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void equalTo_linkingObjectLast() {
+        createLinkedDataSet(realm);
+        realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_PARENTS, "parents");
+    }
+
     @Test
     public void isEmpty_acrossLink() {
         createIsEmptyDataSet(realm);
diff --git a/realm/realm-library/src/androidTest/java/io/realm/QueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/QueryTests.java
index 976e31c3ea..9811beed32 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/QueryTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/QueryTests.java
@@ -27,6 +27,8 @@
 import java.util.concurrent.TimeUnit;
 
 import io.realm.entities.AllJavaTypes;
+import io.realm.entities.BacklinksSource;
+import io.realm.entities.BacklinksTarget;
 import io.realm.rule.RunInLooperThread;
 import io.realm.rule.TestRealmConfigurationFactory;
 
@@ -112,6 +114,40 @@ protected final void createIsEmptyDataSet(Realm realm) {
         realm.commitTransaction();
     }
 
+    protected final void createLinkedDataSet(Realm realm) {
+        realm.beginTransaction();
+
+        realm.delete(BacklinksSource.class);
+        realm.delete(BacklinksTarget.class);
+
+        BacklinksTarget target1 = realm.createObject(BacklinksTarget.class);
+        target1.setId(1);
+
+        BacklinksTarget target2 = realm.createObject(BacklinksTarget.class);
+        target2.setId(2);
+
+        BacklinksTarget target3 = realm.createObject(BacklinksTarget.class);
+        target3.setId(3);
+
+
+        BacklinksSource source1 = realm.createObject(BacklinksSource.class);
+        source1.setName("1");
+        source1.setChild(target1);
+
+        BacklinksSource source2 = realm.createObject(BacklinksSource.class);
+        source2.setName("2");
+        source2.setChild(target2);
+
+        BacklinksSource source3 = realm.createObject(BacklinksSource.class);
+        source3.setName("3");
+
+        BacklinksSource source4 = realm.createObject(BacklinksSource.class);
+        source4.setName("4");
+        source4.setChild(target1);
+
+        realm.commitTransaction();
+    }
+
     protected final void createIsNotEmptyDataSet(Realm realm) {
         realm.beginTransaction();
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmCacheTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmCacheTests.java
index 410ce9656f..252dc083a6 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmCacheTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmCacheTests.java
@@ -115,7 +115,7 @@ public void getInstanceClearsCacheWhenFailed() {
             Realm.getInstance(configB); // Tries to open with key 2.
             fail();
         } catch (RealmFileException expected) {
-            assertEquals(expected.getKind(), RealmFileException.Kind.ACCESS_ERROR);
+            assertEquals(RealmFileException.Kind.ACCESS_ERROR, expected.getKind());
             // Deletes Realm so key 2 works. This should work as a Realm shouldn't be cached
             // if initialization failed.
             assertTrue(Realm.deleteRealm(configA));
@@ -164,7 +164,7 @@ public void dontCacheWrongConfigurations() throws IOException {
             Realm.getInstance(wrongConfig);
             fail();
         } catch (RealmFileException expected) {
-            assertEquals(expected.getKind(), RealmFileException.Kind.ACCESS_ERROR);
+            assertEquals(RealmFileException.Kind.ACCESS_ERROR, expected.getKind());
         }
 
         // Tries again with proper key.
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmConfigurationTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmConfigurationTests.java
index 5166f24a4a..6935c2dd53 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmConfigurationTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmConfigurationTests.java
@@ -902,7 +902,7 @@ public void assetFileFakeFile() {
             Realm.getInstance(configuration);
             fail();
         } catch (RealmFileException expected) {
-            assertEquals(expected.getKind(), RealmFileException.Kind.ACCESS_ERROR);
+            assertEquals(RealmFileException.Kind.ACCESS_ERROR, expected.getKind());
         }
     }
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmInMemoryTest.java b/realm/realm-library/src/androidTest/java/io/realm/RealmInMemoryTest.java
index 1b41af1114..9f7f26123d 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmInMemoryTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmInMemoryTest.java
@@ -81,14 +81,14 @@ public void inMemoryRealm() {
         dog.setName("DinoDog");
         testRealm.commitTransaction();
 
-        assertEquals(testRealm.where(Dog.class).count(), 1);
-        assertEquals(testRealm.where(Dog.class).findFirst().getName(), "DinoDog");
+        assertEquals(1, testRealm.where(Dog.class).count());
+        assertEquals("DinoDog", testRealm.where(Dog.class).findFirst().getName());
 
         testRealm.close();
         // After all references to the in-mem-realm closed,
         // in-mem-realm with same identifier should create a fresh new instance.
         testRealm = Realm.getInstance(inMemConf);
-        assertEquals(testRealm.where(Dog.class).count(), 0);
+        assertEquals(0, testRealm.where(Dog.class).count());
     }
 
     // Two in-memory Realms with different names should not affect each other.
@@ -110,12 +110,12 @@ public void inMemoryRealmWithDifferentNames() {
         dog2.setName("UFODog");
         testRealm2.commitTransaction();
 
-        assertEquals(testRealm.where(Dog.class).count(), 1);
+        assertEquals(1, testRealm.where(Dog.class).count());
         //noinspection ConstantConditions
-        assertEquals(testRealm.where(Dog.class).findFirst().getName(), "DinoDog");
-        assertEquals(testRealm2.where(Dog.class).count(), 1);
+        assertEquals("DinoDog", testRealm.where(Dog.class).findFirst().getName());
+        assertEquals(1, testRealm2.where(Dog.class).count());
         //noinspection ConstantConditions
-        assertEquals(testRealm2.where(Dog.class).findFirst().getName(), "UFODog");
+        assertEquals("UFODog", testRealm2.where(Dog.class).findFirst().getName());
 
         testRealm2.close();
     }
@@ -161,13 +161,13 @@ public void writeCopyTo() {
         // Tests a normal Realm file.
         testRealm.writeCopyTo(new File(configFactory.getRoot(), fileName));
         Realm onDiskRealm = Realm.getInstance(conf);
-        assertEquals(onDiskRealm.where(Dog.class).count(), 1);
+        assertEquals(1, onDiskRealm.where(Dog.class).count());
         onDiskRealm.close();
 
         // Tests a encrypted Realm file.
         testRealm.writeEncryptedCopyTo(new File(configFactory.getRoot(), encFileName), key);
         onDiskRealm = Realm.getInstance(encConf);
-        assertEquals(onDiskRealm.where(Dog.class).count(), 1);
+        assertEquals(1, onDiskRealm.where(Dog.class).count());
         onDiskRealm.close();
         // Tests with a wrong key to see if it fails as expected.
         try {
@@ -178,7 +178,7 @@ public void writeCopyTo() {
             Realm.getInstance(wrongKeyConf);
             fail("Realm.getInstance should fail with RealmFileException");
         } catch (RealmFileException expected) {
-            assertEquals(expected.getKind(), RealmFileException.Kind.ACCESS_ERROR);
+            assertEquals(RealmFileException.Kind.ACCESS_ERROR, expected.getKind());
         }
     }
 
@@ -207,7 +207,7 @@ public void run() {
                 realm.commitTransaction();
 
                 try {
-                    assertEquals(realm.where(Dog.class).count(), 1);
+                    assertEquals(1, realm.where(Dog.class).count());
                 } catch (AssertionFailedError afe) {
                     threadError[0] = afe;
                     realm.close();
@@ -237,7 +237,7 @@ public void run() {
 
         // Refreshes will be ran in the next loop, manually refreshes it here.
         testRealm.waitForChange();
-        assertEquals(testRealm.where(Dog.class).count(), 1);
+        assertEquals(1, testRealm.where(Dog.class).count());
 
         // Step 3.
         // Releases the main thread Realm reference, and the worker thread holds the reference still.
@@ -246,7 +246,7 @@ public void run() {
         // Step 4.
         // Creates a new Realm reference in main thread and checks the data.
         testRealm = Realm.getInstance(inMemConf);
-        assertEquals(testRealm.where(Dog.class).count(), 1);
+        assertEquals(1, testRealm.where(Dog.class).count());
         testRealm.close();
 
         // Let the worker thread continue.
@@ -258,6 +258,6 @@ public void run() {
 
         // Since all previous Realm instances has been closed before, below will create a fresh new in-mem-realm instance.
         testRealm = Realm.getInstance(inMemConf);
-        assertEquals(testRealm.where(Dog.class).count(), 0);
+        assertEquals(0, testRealm.where(Dog.class).count());
     }
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmInterprocessTest.java b/realm/realm-library/src/androidTest/java/io/realm/RealmInterprocessTest.java
index 76c5c4c377..56649a1cf1 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmInterprocessTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmInterprocessTest.java
@@ -282,7 +282,7 @@ public void testCreateInitialRealm() throws InterruptedException {
             public void run() {
                 // Step 1
                 testRealm = Realm.getInstance(new RealmConfiguration.Builder(getContext()).build());
-                assertEquals(testRealm.where(AllTypes.class).count(), 0);
+                assertEquals(0, testRealm.where(AllTypes.class).count());
                 testRealm.beginTransaction();
                 testRealm.createObject(AllTypes.class);
                 testRealm.commitTransaction();
diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
index d6ca5add85..ae80d7b7d4 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java
@@ -213,7 +213,7 @@ public void getInstance_writeProtectedFile() throws IOException {
                     .build());
             fail();
         } catch (RealmFileException expected) {
-            assertEquals(expected.getKind(), RealmFileException.Kind.PERMISSION_DENIED);
+            assertEquals(RealmFileException.Kind.PERMISSION_DENIED, expected.getKind());
         }
     }
 
@@ -230,7 +230,7 @@ public void getInstance_writeProtectedFileWithContext() throws IOException {
             Realm.getInstance(new RealmConfiguration.Builder(context).directory(folder).name(REALM_FILE).build());
             fail();
         } catch (RealmFileException expected) {
-            assertEquals(expected.getKind(), RealmFileException.Kind.PERMISSION_DENIED);
+            assertEquals(RealmFileException.Kind.PERMISSION_DENIED, expected.getKind());
         }
     }
 
@@ -708,7 +708,7 @@ public void execute(Realm realm) {
             });
         } catch (RuntimeException ignored) {
             // Ensures that we pass a valuable error message to the logger for developers.
-            assertEquals(testLogger.message, "Could not cancel transaction, not currently in a transaction.");
+            assertEquals("Could not cancel transaction, not currently in a transaction.", testLogger.message);
         } finally {
             RealmLog.remove(testLogger);
         }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
index aa4c01fc54..86067e4bb5 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/TypeBasedNotificationsTests.java
@@ -877,7 +877,7 @@ public void onChange(Realm object) {
                     looperThread.postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            assertEquals(typebasedCommitInvocations.get(), 1);
+                            assertEquals(1, typebasedCommitInvocations.get());
                             looperThread.testComplete();
                         }
                     });
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/Thread.java b/realm/realm-library/src/androidTest/java/io/realm/entities/Thread.java
index 8bad4e5472..5509f2f8bb 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/entities/Thread.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/entities/Thread.java
@@ -18,6 +18,7 @@
 
 import io.realm.RealmObject;
 
+@SuppressWarnings("JavaLangClash")
 public class Thread extends RealmObject {
     private String name;
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/String.java b/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/String.java
index 7b57935d58..e6d10a2709 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/String.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/entities/conflict/String.java
@@ -19,6 +19,7 @@
 import io.realm.RealmList;
 import io.realm.RealmObject;
 
+@SuppressWarnings("JavaLangClash")
 public class String extends RealmObject {
     public String str;
     public RealmList<String> strList;
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
index 673bff18d0..0457739f03 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/CollectionTests.java
@@ -135,10 +135,10 @@ public void constructor_withDistinct() {
         SortDescriptor distinctDescriptor = SortDescriptor.getInstanceForDistinct(null, table, "firstName");
         Collection collection = new Collection(sharedRealm, table.where(), null, distinctDescriptor);
 
-        assertEquals(collection.size(), 3);
-        assertEquals(collection.getUncheckedRow(0).getString(0), "John");
-        assertEquals(collection.getUncheckedRow(1).getString(0), "Erik");
-        assertEquals(collection.getUncheckedRow(2).getString(0), "Henry");
+        assertEquals(3, collection.size());
+        assertEquals("John", collection.getUncheckedRow(0).getString(0));
+        assertEquals("Erik", collection.getUncheckedRow(1).getString(0));
+        assertEquals("Henry", collection.getUncheckedRow(2).getString(0));
     }
 
 
@@ -192,8 +192,8 @@ public void sort() {
         assertEquals(2, collection.size());
         assertEquals(2, collection2.size());
 
-        assertEquals(collection2.getUncheckedRow(0).getLong(2), 3);
-        assertEquals(collection2.getUncheckedRow(1).getLong(2), 4);
+        assertEquals(3, collection2.getUncheckedRow(0).getLong(2));
+        assertEquals(4, collection2.getUncheckedRow(1).getLong(2));
     }
 
     @Test
@@ -366,7 +366,7 @@ public void addListener_queryReturned() {
 
         final Collection collection = new Collection(sharedRealm, table.where());
         looperThread.keepStrongReference(collection);
-        assertEquals(collection.size(), 4); // Trigger the query to run.
+        assertEquals(4, collection.size()); // Trigger the query to run.
         collection.addListener(collection, new RealmChangeListener<Collection>() {
             @Override
             public void onChange(Collection collection1) {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
index 93bf8332ce..371f8f2176 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/JNIRowTest.java
@@ -134,7 +134,7 @@ public void nullValues() {
         UncheckedRow row = table.getUncheckedRow(rowIndex);
 
         row.setString(colStringIndex, "test");
-        assertEquals(row.getString(colStringIndex), "test");
+        assertEquals("test", row.getString(colStringIndex));
         row.setNull(colStringIndex);
         assertNull(row.getString(colStringIndex));
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/ObserverPairListTests.java b/realm/realm-library/src/androidTest/java/io/realm/internal/ObserverPairListTests.java
index a36ec5b8df..fb77df3b1e 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/ObserverPairListTests.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/ObserverPairListTests.java
@@ -39,8 +39,8 @@
 @RunWith(AndroidJUnit4.class)
 public class ObserverPairListTests {
 
-    private static class TestListener<Integer> {
-        void onChange(Integer integer) {
+    private static class TestListener<T> {
+        void onChange(T integer) {
         }
     }
 
diff --git a/realm/realm-library/src/androidTest/java/io/realm/internal/android/JsonUtilsTest.java b/realm/realm-library/src/androidTest/java/io/realm/internal/android/JsonUtilsTest.java
index 42958d93fc..9d8a431a99 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/internal/android/JsonUtilsTest.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/internal/android/JsonUtilsTest.java
@@ -48,7 +48,7 @@ public void testParseJsonDateToDate() {
         String jsonDate = "/Date(1198908717056)/"; // 2007-12-27T23:11:57.056
         Date output = JsonUtils.stringToDate(jsonDate);
 
-        assertEquals(output.getTime(), 1198908717056L);
+        assertEquals(1198908717056L, output.getTime());
     }
 
     public void testNegativeLongDate() {
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunTestWithRemoteService.java b/realm/realm-library/src/androidTest/java/io/realm/rule/RunTestWithRemoteService.java
index 8abdea9c40..1286630c0e 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/rule/RunTestWithRemoteService.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/rule/RunTestWithRemoteService.java
@@ -30,5 +30,6 @@
 @Target(METHOD)
 @Retention(RUNTIME)
 public @interface RunTestWithRemoteService {
-    Class<? extends RemoteTestService> value();
+    Class<? extends RemoteTestService> remoteService();
+    boolean onLooperThread();
 }
diff --git a/realm/realm-library/src/androidTest/java/io/realm/rule/RunWithRemoteService.java b/realm/realm-library/src/androidTest/java/io/realm/rule/RunWithRemoteService.java
index d2b84bba3e..8aff527678 100644
--- a/realm/realm-library/src/androidTest/java/io/realm/rule/RunWithRemoteService.java
+++ b/realm/realm-library/src/androidTest/java/io/realm/rule/RunWithRemoteService.java
@@ -51,7 +51,12 @@
  * 2. Add a base message id in {@link RemoteTestService}.
  * 3. Add the service into the AndroidManifest.xml. And the android:process property must be ":remote".
  * 4. Annotate your test case by {@link RunTestWithRemoteService} with your remote service class.
- * 5. You also need a looper in your test thread. Normally you can just use {@link RunTestInLooperThread}.
+ * 5. To run the tests on the looper thread:
+ *    a) Add {@link RunTestInLooperThread} to the tests.
+ *    b) Add {@code @RunTestWithRemoteService(remoteService = SimpleCommitRemoteService.class, onLooperThread = true)}
+ *       Please notice that {@code onLooperThread} needs to be set to true to avoid the remote service getting killed
+ *       before looper thread finished
+ *    c) Call {@code looperThread.runAfterTest(remoteService.afterRunnable)} to kill the remote service after test.
  * 6. When your looper thread starts, register the service messenger by calling
  * {@link RunWithRemoteService#createHandler(Looper)}.
  * 7. Trigger your first step in the remote service process by calling
@@ -86,6 +91,12 @@ public void handleMessage(Message msg) {
     private Messenger remoteMessenger;
     private Messenger localMessenger;
     private CountDownLatch serviceStartLatch;
+    public Runnable afterRunnable = new Runnable() {
+        @Override
+        public void run() {
+            after();
+        }
+    };
 
     private final ServiceConnection serviceConnection = new ServiceConnection() {
         @Override
@@ -112,7 +123,7 @@ private void before(Class<?> serviceClass) throws Throwable {
         TestHelper.awaitOrFail(serviceStartLatch);
     }
 
-    public void after() {
+    private void after() {
         getContext().unbindService(serviceConnection);
 
         // Kill the remote process.
@@ -143,11 +154,13 @@ public Statement apply(final Statement base, Description description) {
         return new Statement() {
             @Override
             public void evaluate() throws Throwable {
-                before(annotation.value());
+                before(annotation.remoteService());
                 try {
                     base.evaluate();
                 } finally {
-                    after();
+                    if (!annotation.onLooperThread()) {
+                        after();
+                    }
                 }
             }
         };
diff --git a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
index f8cc250cd5..996ca3ad82 100644
--- a/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
+++ b/realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp
@@ -1668,7 +1668,7 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsEmpty(JNIEnv* e
         auto column_idx = static_cast<size_t>(index_arr[arr_len - 1]);
 
         // Support a backlink as the last column in a field descriptor
-        Table* last = TBL(table_arr[arr_len-1]);
+        auto last = reinterpret_cast<Table*>(table_arr[arr_len-1]);
         if (last != nullptr) {
             pQuery->and_query(src_table_ref->column<BackLink>(*last, column_idx).count() == 0);
             return;
@@ -1739,7 +1739,7 @@ Java_io_realm_internal_TableQuery_nativeIsNotEmpty(JNIEnv *env, jobject, jlong n
         auto column_idx = static_cast<size_t>(index_arr[arr_len - 1]);
 
         // Support a backlink as the last column in a field descriptor
-        auto last = reinterpret_cast<Table *>(table_arr[arr_len-1]);
+        auto last = reinterpret_cast<Table*>(table_arr[arr_len-1]);
         if (last != nullptr) {
             pQuery->and_query(src_table_ref->column<BackLink>(*last, column_idx).count() != 0);
             return;
diff --git a/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java b/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java
index 88b664f797..f74c99e86f 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/OutOfMemoryError.java
@@ -21,7 +21,7 @@
  * Can be thrown when Realm runs out of memory.
  * A JVM that catches this will be able to cleanup, e.g. release other resources to avoid also running out of memory.
  */
-@SuppressWarnings("serial")
+@SuppressWarnings({"serial", "JavaLangClash"})
 @Keep
 public class OutOfMemoryError extends Error {
 
diff --git a/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java b/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java
index d919d1e8d0..9fde831fd2 100644
--- a/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java
+++ b/realm/realm-library/src/main/java/io/realm/internal/fields/CachedFieldDescriptor.java
@@ -80,10 +80,11 @@ protected void compileFieldDescription(List<String> fields) {
             }
 
             columnType = tableInfo.getColumnType(columnName);
+            // we don't check the type of the last field in the chain since it is done in the C++ code
             if (i < nFields - 1) {
                 verifyInternalColumnType(currentTable, columnName, columnType);
-                currentTable = tableInfo.getLinkedTable(columnName);
             }
+            currentTable = tableInfo.getLinkedTable(columnName);
             columnIndices[i] = columnIndex;
             tableNativePointers[i] = (columnType != RealmFieldType.LINKING_OBJECTS)
                     ? NativeObject.NULLPTR
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
index 9f86b3200e..8faa03f76b 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/BaseIntegrationTest.java
@@ -55,7 +55,7 @@
     public final ExpectedException thrown = ExpectedException.none();
 
     @BeforeClass
-    public static void setUp () throws Exception {
+    public static void setupTestClass() throws Exception {
         SyncManager.Debug.skipOnlineChecking = true;
         try {
             HttpUtils.startSyncServer();
@@ -67,7 +67,7 @@ public static void setUp () throws Exception {
     }
 
     @AfterClass
-    public static void tearDown () throws Exception {
+    public static void tearDownTestClass() throws Exception {
         try {
             HttpUtils.stopSyncServer();
         } catch (Exception e) {
@@ -77,8 +77,6 @@ public static void tearDown () throws Exception {
 
     @Before
     public void setupTest() throws IOException {
-        // TODO We should implement a more consistent reset method for all of Sync that reset
-        // everything completely including deleting all files.
         deleteRosFiles();
         if (BaseRealm.applicationContext != null) {
             // Realm was already initialized. Reset all internal state
@@ -98,21 +96,28 @@ public void setupTest() throws IOException {
     }
 
     @After
-    public void tearDownTest() throws IOException {
+    public void teardownTest() {
         if (looperThread.isTestComplete()) {
             // Non-looper tests can reset here
-            RealmLog.setLevel(originalLogLevel);
+            resetTestEnvironment();
         } else {
             // Otherwise we need to wait for the test to complete
             looperThread.runAfterTest(new Runnable() {
                 @Override
                 public void run() {
-                    RealmLog.setLevel(originalLogLevel);
+                    resetTestEnvironment();
                 }
             });
         }
     }
 
+    private void resetTestEnvironment() {
+        for (SyncUser syncUser : SyncUser.all().values()) {
+            syncUser.logout();
+        }
+        RealmLog.setLevel(originalLogLevel);
+    }
+
     // Cleanup filesystem to make sure nothing lives for the next test.
     // Failing to do so might lead to DIVERGENT_HISTORY errors being thrown if Realms from
     // previous tests are being accessed.
diff --git a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
index 1a086c3079..cca7e44aec 100644
--- a/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
+++ b/realm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/ProcessCommitTests.java
@@ -51,8 +51,6 @@
 @RunWith(AndroidJUnit4.class)
 public class ProcessCommitTests extends BaseIntegrationTest {
 
-    @Rule
-    public RunInLooperThread looperThread = new RunInLooperThread();
     @Rule
     public RunWithRemoteService remoteService = new RunWithRemoteService();
 
@@ -105,9 +103,10 @@ protected void run() {
     // A. Open the same sync Realm and add one object.
     // 2. Get the notification, check if the change in A is received.
     @Test
-    @RunTestWithRemoteService(SimpleCommitRemoteService.class)
     @RunTestInLooperThread
+    @RunTestWithRemoteService(remoteService = SimpleCommitRemoteService.class, onLooperThread = true)
     public void expectSimpleCommit() {
+        looperThread.runAfterTest(remoteService.afterRunnable);
         remoteService.createHandler(Looper.myLooper());
 
         final SyncUser user = UserFactory.getInstance().createDefaultUser(Constants.AUTH_URL);
@@ -180,9 +179,10 @@ protected void run() {
     // 2. Check if the 100 objects are received.
     // #. Repeat B/2 10 times.
     @Test
-    @RunTestWithRemoteService(ALotCommitsRemoteService.class)
+    @RunTestWithRemoteService(remoteService = ALotCommitsRemoteService.class, onLooperThread = true)
     @RunTestInLooperThread
     public void expectALot() throws Throwable {
+        looperThread.runAfterTest(remoteService.afterRunnable);
         remoteService.createHandler(Looper.myLooper());
 
         final SyncUser user = UserFactory.getInstance().createDefaultUser(Constants.AUTH_URL);
diff --git a/tools/sync_test_server/ros-testing-server.js b/tools/sync_test_server/ros-testing-server.js
index 9cfdda3a85..18d2139081 100755
--- a/tools/sync_test_server/ros-testing-server.js
+++ b/tools/sync_test_server/ros-testing-server.js
@@ -40,50 +40,52 @@ function startRealmObjectServer(done) {
     // https://github.com/realm/realm-object-server/issues/1297
     var logFindingCounter = 2
 
-    stopRealmObjectServer();
-    temp.mkdir('ros', function(err, path) {
-        if (!err) {
-            winston.info("Starting sync server in ", path);
-            var env = Object.create( process.env );
-            winston.info(env.NODE_ENV);
-            env.NODE_ENV = 'development';
-            syncServerChildProcess = spawn('realm-object-server',
-                    ['--root', path,
-                    '--configuration', '/configuration.yml'],
-                    { env: env});
-            // local config:
-            syncServerChildProcess.stdout.on('data', (data) => {
-                if (logFindingCounter != 0 && /client: Closing Realm file: .*__auth.realm/.test(data)) {
-                    if (logFindingCounter == 1) {
-                        done()
+    stopRealmObjectServer(function(err) {
+        if(err) {
+          return;
+        }
+        temp.mkdir('ros', function(err, path) {
+            if (!err) {
+                winston.info("Starting sync server in ", path);
+                var env = Object.create( process.env );
+                winston.info(env.NODE_ENV);
+                env.NODE_ENV = 'development';
+                syncServerChildProcess = spawn('realm-object-server',
+                        ['--root', path,
+                        '--configuration', '/configuration.yml'],
+                        { env: env, cwd: path});
+                // local config:
+                syncServerChildProcess.stdout.on('data', (data) => {
+                    if (logFindingCounter != 0 && /client: Closing Realm file: .*__auth.realm/.test(data)) {
+                        if (logFindingCounter == 1) {
+                            done()
+                        }
+                        logFindingCounter--
                     }
-                    logFindingCounter--
-                }
-                winston.info(`stdout: ${data}`);
-            });
+                    winston.info(`stdout: ${data}`);
+                });
 
-            syncServerChildProcess.stderr.on('data', (data) => {
-                winston.info(`stderr: ${data}`);
-            });
+                syncServerChildProcess.stderr.on('data', (data) => {
+                    winston.info(`stderr: ${data}`);
+                });
 
-            syncServerChildProcess.on('close', (code) => {
-                winston.info(`child process exited with code ${code}`);
-            });
-        }
+                syncServerChildProcess.on('close', (code) => {
+                    winston.info(`child process exited with code ${code}`);
+                });
+            }
+        });
     });
 }
 
-function stopRealmObjectServer() {
+function stopRealmObjectServer(callback) {
     if (syncServerChildProcess) {
-        syncServerChildProcess.kill();
-        syncServerChildProcess = null;
-        exec('rm -r ' + 'realm-object-server', function (err, stdout, stderr) {
-            if (err) {
-                winston.error(err);
-            } else {
-                winston.info("realm-object-server directory deleted");
-            }
+        syncServerChildProcess.on('exit', function() {
+            syncServerChildProcess = null;
+            callback();
         });
+        syncServerChildProcess.kill();
+    } else {
+        callback();
     }
 }
 
@@ -98,10 +100,11 @@ dispatcher.onGet("/start", function(req, res) {
 
 // stop a previously started sync server
 dispatcher.onGet("/stop", function(req, res) {
-    stopRealmObjectServer();
-    winston.info("Sync server stopped");
-    res.writeHead(200, {'Content-Type': 'text/plain'});
-    res.end('Stopping the server');
+    stopRealmObjectServer(function() {
+      winston.info("Sync server stopped");
+      res.writeHead(200, {'Content-Type': 'text/plain'});
+      res.end('Stopping the server');
+    });
 });
 
 //Create and start the Http server
