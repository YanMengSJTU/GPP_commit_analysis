diff --git a/java/doubleclick/CustomRenderingExample/app/src/main/java/com/google/example/gms/customrenderingexample/MainActivity.java b/java/doubleclick/CustomRenderingExample/app/src/main/java/com/google/example/gms/customrenderingexample/MainActivity.java
index 22d3e38..93d1d07 100644
--- a/java/doubleclick/CustomRenderingExample/app/src/main/java/com/google/example/gms/customrenderingexample/MainActivity.java
+++ b/java/doubleclick/CustomRenderingExample/app/src/main/java/com/google/example/gms/customrenderingexample/MainActivity.java
@@ -55,10 +55,6 @@
     private static final String SIMPLE_TEMPLATE_ID = "10104090";
 
     private Button refresh;
-    private CheckBox requestNativeAds;
-    private CheckBox requestCustomTemplateAds;
-    private CheckBox startVideoAdsMuted;
-    private TextView videoStatus;
 
     private final Handler handler = new Handler();
 
@@ -68,20 +64,15 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_main);
 
         refresh = findViewById(R.id.btn_refresh);
-        requestNativeAds = findViewById(R.id.cb_nativeads);
-        requestCustomTemplateAds = findViewById(R.id.cb_customtemplate);
-        startVideoAdsMuted = findViewById(R.id.cb_start_muted);
-        videoStatus = findViewById(R.id.tv_video_status);
 
         refresh.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                refreshAd(requestNativeAds.isChecked(),
-                        requestCustomTemplateAds.isChecked());
+                refreshAd();
             }
         });
 
-        refreshAd(true, true);
+        refreshAd();
 
         handler.postDelayed(new Runnable() {
             @Override
@@ -92,119 +83,6 @@ public void run() {
         }, 2000);
     }
 
-    /**
-     * Populates a {@link UnifiedNativeAdView} object with data from a given
-     * {@link UnifiedNativeAd}.
-     *
-     * @param nativeAd the object containing the ad's assets
-     * @param adView          the view to be populated
-     */
-    private void populateUnifiedNativeAdView(UnifiedNativeAd nativeAd, UnifiedNativeAdView adView) {
-        // Set the media view. Media content will be automatically populated in the media view once
-        // adView.setNativeAd() is called.
-        MediaView mediaView = adView.findViewById(R.id.ad_media);
-        adView.setMediaView(mediaView);
-
-        // Set other ad assets.
-        adView.setHeadlineView(adView.findViewById(R.id.ad_headline));
-        adView.setBodyView(adView.findViewById(R.id.ad_body));
-        adView.setCallToActionView(adView.findViewById(R.id.ad_call_to_action));
-        adView.setIconView(adView.findViewById(R.id.ad_app_icon));
-        adView.setPriceView(adView.findViewById(R.id.ad_price));
-        adView.setStarRatingView(adView.findViewById(R.id.ad_stars));
-        adView.setStoreView(adView.findViewById(R.id.ad_store));
-        adView.setAdvertiserView(adView.findViewById(R.id.ad_advertiser));
-
-        // The headline is guaranteed to be in every UnifiedNativeAd.
-        ((TextView) adView.getHeadlineView()).setText(nativeAd.getHeadline());
-
-        // These assets aren't guaranteed to be in every UnifiedNativeAd, so it's important to
-        // check before trying to display them.
-        if (nativeAd.getBody() == null) {
-          adView.getBodyView().setVisibility(View.INVISIBLE);
-        } else {
-          adView.getBodyView().setVisibility(View.VISIBLE);
-          ((TextView) adView.getBodyView()).setText(nativeAd.getBody());
-        }
-
-        if (nativeAd.getCallToAction() == null) {
-          adView.getCallToActionView().setVisibility(View.INVISIBLE);
-        } else {
-          adView.getCallToActionView().setVisibility(View.VISIBLE);
-          ((Button) adView.getCallToActionView()).setText(nativeAd.getCallToAction());
-        }
-
-        if (nativeAd.getIcon() == null) {
-            adView.getIconView().setVisibility(View.GONE);
-        } else {
-            ((ImageView) adView.getIconView()).setImageDrawable(
-                    nativeAd.getIcon().getDrawable());
-            adView.getIconView().setVisibility(View.VISIBLE);
-        }
-
-        if (nativeAd.getPrice() == null) {
-            adView.getPriceView().setVisibility(View.INVISIBLE);
-        } else {
-            adView.getPriceView().setVisibility(View.VISIBLE);
-            ((TextView) adView.getPriceView()).setText(nativeAd.getPrice());
-        }
-
-        if (nativeAd.getStore() == null) {
-            adView.getStoreView().setVisibility(View.INVISIBLE);
-        } else {
-            adView.getStoreView().setVisibility(View.VISIBLE);
-            ((TextView) adView.getStoreView()).setText(nativeAd.getStore());
-        }
-
-        if (nativeAd.getStarRating() == null) {
-            adView.getStarRatingView().setVisibility(View.INVISIBLE);
-        } else {
-            ((RatingBar) adView.getStarRatingView())
-                    .setRating(nativeAd.getStarRating().floatValue());
-            adView.getStarRatingView().setVisibility(View.VISIBLE);
-        }
-
-        if (nativeAd.getAdvertiser() == null) {
-            adView.getAdvertiserView().setVisibility(View.INVISIBLE);
-        } else {
-            ((TextView) adView.getAdvertiserView()).setText(nativeAd.getAdvertiser());
-            adView.getAdvertiserView().setVisibility(View.VISIBLE);
-        }
-
-        // This method tells the Google Mobile Ads SDK that you have finished populating your
-        // native ad view with this native ad. The SDK will populate the adView's MediaView
-        // with the media content from this native ad.
-        adView.setNativeAd(nativeAd);
-
-        // Get the video controller for the ad. One will always be provided, even if the ad doesn't
-        // have a video asset.
-        VideoController vc = nativeAd.getVideoController();
-
-        // Updates the UI to say whether or not this ad has a video asset.
-        if (vc.hasVideoContent()) {
-            videoStatus.setText(String.format(Locale.getDefault(),
-                    "Video status: Ad contains a %.2f:1 video asset.",
-                    vc.getAspectRatio()));
-
-            // Create a new VideoLifecycleCallbacks object and pass it to the VideoController. The
-            // VideoController will call methods on this object when events occur in the video
-            // lifecycle.
-            vc.setVideoLifecycleCallbacks(new VideoController.VideoLifecycleCallbacks() {
-                @Override
-                public void onVideoEnd() {
-                    // Publishers should allow native ads to complete video playback before
-                    // refreshing or replacing them with another ad in the same UI location.
-                    refresh.setEnabled(true);
-                    videoStatus.setText("Video status: Video playback has ended.");
-                    super.onVideoEnd();
-                }
-            });
-        } else {
-            videoStatus.setText("Video status: Ad does not contain a video asset.");
-            refresh.setEnabled(true);
-        }
-    }
-
     /**
      * Populates a {@link View} object with data from a {@link NativeCustomTemplateAd}. This method
      * handles a particular "simple" custom native ad format.
@@ -222,116 +100,54 @@ private void populateSimpleTemplateAdView(final NativeCustomTemplateAd nativeCus
 
         FrameLayout mediaPlaceholder = adView.findViewById(R.id.simplecustom_media_placeholder);
 
-        // Get the video controller for the ad. One will always be provided, even if the ad doesn't
-        // have a video asset.
-        VideoController vc = nativeCustomTemplateAd.getVideoController();
-
-        // Apps can check the VideoController's hasVideoContent property to determine if the
-        // NativeCustomTemplateAd has a video asset.
-        if (vc.hasVideoContent()) {
-            mediaPlaceholder.addView(nativeCustomTemplateAd.getVideoMediaView());
-            videoStatus.setText(String.format(Locale.getDefault(),
-                    "Video status: Ad contains a %.2f:1 video asset.",
-                    vc.getAspectRatio()));
-
-            // Create a new VideoLifecycleCallbacks object and pass it to the VideoController. The
-            // VideoController will call methods on this object when events occur in the video
-            // lifecycle.
-            vc.setVideoLifecycleCallbacks(new VideoController.VideoLifecycleCallbacks() {
-                public void onVideoEnd() {
-                    // Publishers should allow native ads to complete video playback before
-                    // refreshing or replacing them with another ad in the same UI location.
-                    refresh.setEnabled(true);
-                    videoStatus.setText("Video status: Video playback has ended.");
-                    super.onVideoEnd();
-                }
-            });
-        } else {
-            ImageView mainImage = new ImageView(this);
-            mainImage.setAdjustViewBounds(true);
-            mainImage.setImageDrawable(nativeCustomTemplateAd.getImage("MainImage").getDrawable());
+        ImageView mainImage = new ImageView(this);
+        mainImage.setAdjustViewBounds(true);
+        mainImage.setImageDrawable(nativeCustomTemplateAd.getImage("MainImage").getDrawable());
 
-            mainImage.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    nativeCustomTemplateAd.performClick("MainImage");
-                }
-            });
-            mediaPlaceholder.addView(mainImage);
-            refresh.setEnabled(true);
-            videoStatus.setText("Video status: Ad does not contain a video asset.");
-        }
+        mainImage.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                nativeCustomTemplateAd.performClick("MainImage");
+            }
+        });
+        mediaPlaceholder.addView(mainImage);
+        refresh.setEnabled(true);
     }
 
     /**
      * Creates a request for a new native ad based on the boolean parameters and calls the
      * corresponding "populate" method when one is successfully returned.
-     *
-     * @param requestUnifiedNativeAds  indicates whether unified native ads should be requested
-     * @param requestCustomTemplateAds indicates whether custom template ads should be requested
      */
-    private void refreshAd(boolean requestUnifiedNativeAds,
-                           boolean requestCustomTemplateAds) {
+    private void refreshAd() {
         debugDumpThreads();
 
-        if (!requestUnifiedNativeAds && !requestCustomTemplateAds) {
-            Toast.makeText(this, "At least one ad format must be checked to request an ad.",
-                    Toast.LENGTH_SHORT).show();
-            return;
-        }
-
         refresh.setEnabled(false);
 
         AdLoader.Builder builder = new AdLoader.Builder(this, DFP_AD_UNIT_ID);
 
-        if (requestUnifiedNativeAds) {
-            builder.forUnifiedNativeAd(new UnifiedNativeAd.OnUnifiedNativeAdLoadedListener() {
+        builder.forCustomTemplateAd(SIMPLE_TEMPLATE_ID,
+            new NativeCustomTemplateAd.OnCustomTemplateAdLoadedListener() {
                 @Override
-                public void onUnifiedNativeAdLoaded(UnifiedNativeAd unifiedNativeAd) {
-                    FrameLayout frameLayout =
-                            findViewById(R.id.fl_adplaceholder);
-                    UnifiedNativeAdView adView = (UnifiedNativeAdView) getLayoutInflater()
-                            .inflate(R.layout.ad_unified, null);
-                    populateUnifiedNativeAdView(unifiedNativeAd, adView);
+                public void onCustomTemplateAdLoaded(NativeCustomTemplateAd ad) {
+                    FrameLayout frameLayout = findViewById(R.id.fl_adplaceholder);
+                    View adView = getLayoutInflater()
+                        .inflate(R.layout.ad_simple_custom_template, null);
+                    populateSimpleTemplateAdView(ad, adView);
                     frameLayout.removeAllViews();
                     frameLayout.addView(adView);
                 }
-
+            },
+            new NativeCustomTemplateAd.OnCustomClickListener() {
+                @Override
+                public void onCustomClick(NativeCustomTemplateAd ad, String s) {
+                    Toast.makeText(MainActivity.this,
+                        "A custom click has occurred in the simple template",
+                        Toast.LENGTH_SHORT).show();
+                }
             });
-        }
-
-        if (requestCustomTemplateAds) {
-            builder.forCustomTemplateAd(SIMPLE_TEMPLATE_ID,
-                    new NativeCustomTemplateAd.OnCustomTemplateAdLoadedListener() {
-                        @Override
-                        public void onCustomTemplateAdLoaded(NativeCustomTemplateAd ad) {
-                            FrameLayout frameLayout = findViewById(R.id.fl_adplaceholder);
-                            View adView = getLayoutInflater()
-                                    .inflate(R.layout.ad_simple_custom_template, null);
-                            populateSimpleTemplateAdView(ad, adView);
-                            frameLayout.removeAllViews();
-                            frameLayout.addView(adView);
-                        }
-                    },
-                    new NativeCustomTemplateAd.OnCustomClickListener() {
-                        @Override
-                        public void onCustomClick(NativeCustomTemplateAd ad, String s) {
-                            Toast.makeText(MainActivity.this,
-                                    "A custom click has occurred in the simple template",
-                                    Toast.LENGTH_SHORT).show();
-                        }
-                    });
-        }
-
-        VideoOptions videoOptions = new VideoOptions.Builder()
-                .setStartMuted(startVideoAdsMuted.isChecked())
-                .build();
-
-        NativeAdOptions adOptions = new NativeAdOptions.Builder()
-                .setVideoOptions(videoOptions)
-                .build();
 
-        builder.withNativeAdOptions(adOptions);
+        builder.withNativeAdOptions(new NativeAdOptions.Builder()
+            .build());
 
         AdLoader adLoader = builder.withAdListener(new AdListener() {
             @Override
@@ -344,7 +160,6 @@ public void onAdFailedToLoad(int errorCode) {
 
         adLoader.loadAd(new PublisherAdRequest.Builder().build());
 
-        videoStatus.setText("");
     }
 
     private void debugDumpThreads() {
diff --git a/java/doubleclick/CustomRenderingExample/app/src/main/res/layout/activity_main.xml b/java/doubleclick/CustomRenderingExample/app/src/main/res/layout/activity_main.xml
index 2c9d967..2cc5f5f 100644
--- a/java/doubleclick/CustomRenderingExample/app/src/main/res/layout/activity_main.xml
+++ b/java/doubleclick/CustomRenderingExample/app/src/main/res/layout/activity_main.xml
@@ -15,28 +15,6 @@
             android:layout_height="wrap_content"
             android:layout_marginTop="16dp" />
 
-        <CheckBox
-            android:id="@+id/cb_nativeads"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="16dp"
-            android:checked="true"
-            android:text="Request Unified Native Ads" />
-
-        <CheckBox
-            android:id="@+id/cb_customtemplate"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:checked="true"
-            android:text="Request Custom Template Ads" />
-
-        <CheckBox
-            android:id="@+id/cb_start_muted"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:checked="true"
-            android:text="Start video ads muted" />
-
         <Button
             android:id="@+id/btn_refresh"
             android:layout_width="wrap_content"
@@ -46,14 +24,5 @@
             android:layout_marginTop="16dp"
             android:text="Refresh Ad" />
 
-        <TextView
-            android:id="@+id/tv_video_status"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="@dimen/activity_horizontal_margin"
-            android:layout_marginRight="@dimen/activity_horizontal_margin"
-            android:text="Video status: "
-            android:textAppearance="@style/TextAppearance.AppCompat.Medium" />
-
     </LinearLayout>
 </ScrollView>
