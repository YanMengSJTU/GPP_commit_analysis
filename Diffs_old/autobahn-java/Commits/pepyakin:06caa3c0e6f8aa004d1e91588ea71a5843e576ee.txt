diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 763b1a3..5a9a5bb 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -28,6 +28,15 @@
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+
+
+import android.bluetooth.BluetoothClass.Device;
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -64,13 +73,44 @@
     * Asynch socket connector.
     */
    private class WebSocketConnector extends AsyncTask<Void, Void, String> {
+      
+      protected SSLSocketFactory getSSLSocketFactory() {
+         SSLSocketFactory fctry = null;
+         if (!mOptions.getVerifyCertificateAuthority()) {
+            try {
+               // Create a trust manager that does not validate certificate chains
+               TrustManager tm = new X509TrustManager()  {
+                  public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                  }
+   
+                  public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                  }
+   
+                  public X509Certificate[] getAcceptedIssuers() {
+                      return null;
+                  }
+              };
+              SSLContext ctxt = SSLContext.getInstance("TLS");
+              ctxt.init(null, new TrustManager[] {tm}, null);
+              fctry = (SSLSocketFactory) ctxt.getSocketFactory();
+              
+              Log.d(TAG, "trusting all certificates");
+           } catch (Exception ex) {
+              Log.wtf(TAG, ex);
+           }
+         } else {
+            fctry = (SSLSocketFactory) SSLSocketFactory.getDefault();
+         }
+         
+         return fctry;
+      }
 
       protected Socket createSocket() throws IOException {
          Socket soc;
 
          if (mWsScheme.equals("wss")) {
 
-            SSLSocketFactory fctry = (SSLSocketFactory)SSLSocketFactory.getDefault();
+            SSLSocketFactory fctry = getSSLSocketFactory();
 
             SSLSocket secSoc = (SSLSocket)fctry.createSocket(mWsHost, mWsPort);
             secSoc.setUseClientMode(true);
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java b/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
index 313e106..938f4e2 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
@@ -18,6 +18,8 @@
 
 package de.tavendo.autobahn;
 
+import android.os.Build;
+
 
 
 /**
@@ -35,6 +37,7 @@
    private int mSocketConnectTimeout;
    private boolean mValidateIncomingUtf8;
    private boolean mMaskClientFrames;
+   private boolean mVerifyCertificateAuthority;
 
 
    /**
@@ -50,6 +53,13 @@ public WebSocketOptions() {
       mSocketConnectTimeout = 6000;
       mValidateIncomingUtf8 = true;
       mMaskClientFrames = true;
+      //trusting everything run from a emulator
+      
+      if (Build.PRODUCT.contains("sdk")) {
+         mVerifyCertificateAuthority = false;
+      } else {
+         mVerifyCertificateAuthority = true;
+      }
    }
 
    /**
@@ -67,6 +77,7 @@ public WebSocketOptions(WebSocketOptions other) {
       mSocketConnectTimeout = other.mSocketConnectTimeout;
       mValidateIncomingUtf8 = other.mValidateIncomingUtf8;
       mMaskClientFrames = other.mMaskClientFrames;
+      mVerifyCertificateAuthority = other.mVerifyCertificateAuthority;
    }
 
    /**
@@ -254,4 +265,21 @@ public void setMaskClientFrames(boolean enabled) {
    public boolean getMaskClientFrames() {
       return mMaskClientFrames;
    }
+   /**
+    * Get Verify CA option
+    * @return        True, iff CA has to be verified.
+    */
+   public boolean getVerifyCertificateAuthority() {
+      return mVerifyCertificateAuthority;
+   }
+   /**
+    * Controls whether trust SSL certificates issued by anyone or to verify and then proceed.
+    * For using self signed certificate set this to False.
+    * Default: true (in a device), false (in a emulator) 
+    * @param verify  Set False to allow use of self signed certificate;
+    */
+   public void setVerifyCertificateAuthority(boolean verify) {
+      mVerifyCertificateAuthority = verify;
+   }
+   
 }
diff --git a/Demo/TestSuiteClient/res/layout/main.xml b/Demo/TestSuiteClient/res/layout/main.xml
index 609e40d..7b5a205 100644
--- a/Demo/TestSuiteClient/res/layout/main.xml
+++ b/Demo/TestSuiteClient/res/layout/main.xml
@@ -14,6 +14,16 @@
     </LinearLayout>
     <TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:textAppearance="?android:attr/textAppearanceSmall" android:id="@+id/textView3" android:text="User Agent Identifier" android:textColor="@color/lightgrey"></TextView>
     <EditText android:layout_width="match_parent" android:layout_height="wrap_content" android:textColor="@color/darkgrey" android:id="@+id/agent" android:text="AutobahnAndroid/feb12-trunk"></EditText>
+        <CheckBox
+        android:id="@+id/tls"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:checked="false"
+        android:text="use TLS" 
+        android:textColor="@color/lightgrey"
+        android:textAppearance="?android:attr/textAppearanceSmall" 
+        />
+    
     <Button android:layout_width="120dip" android:text="Start Tests" android:layout_gravity="center" android:layout_height="80dip" android:layout_margin="16dip" android:id="@+id/start"></Button>
 <TextView  
     android:layout_width="fill_parent" 
diff --git a/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java b/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
index b1ec161..8586849 100644
--- a/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
+++ b/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
@@ -23,6 +23,7 @@
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
+import android.widget.CheckBox;
 import android.widget.EditText;
 import android.widget.TextView;
 import de.tavendo.autobahn.WebSocket;
@@ -40,18 +41,28 @@
    static EditText mAgent;
    static TextView mStatusline;
    static Button mStart;
+   static CheckBox mTLS;
 
    int currCase = 0;
    int lastCase = 0;
 
    private WebSocket sess = new WebSocketConnection();
+   
+   private String getBaseUrl() {
+	   String scheme = "ws";
+	   if (mTLS.isChecked()) {
+		   scheme = "wss";
+	   }
+		   
+	   return scheme + "://" + mHostname.getText() + ":" + mPort.getText();
+   }
 
    private void next() {
 
       try {
          if (currCase == 0) {
 
-            sess.connect("ws://" + mHostname.getText() + ":" + mPort.getText() + "/getCaseCount",
+            sess.connect(getBaseUrl() + "/getCaseCount",
                   new WebSocketConnectionHandler() {
 
                      @Override
@@ -77,8 +88,9 @@ public void onClose(int code, String reason) {
                  //options.setMaxMessagePayloadSize(1*1024*1024);
                  //options.setMaxFramePayloadSize(1*1024*1024);
                  //options.setTcpNoDelay(false);
+                 
 
-                 sess.connect("ws://" + mHostname.getText() + ":" + mPort.getText() + "/runCase?case=" + currCase + "&agent=" + mAgent.getText(),
+                 sess.connect(getBaseUrl() + "/runCase?case=" + currCase + "&agent=" + mAgent.getText(),
                        new WebSocketConnectionHandler() {
 
                           @Override
@@ -104,7 +116,7 @@ public void onClose(int code, String reason) {
                           }
                  }, options);
             } else {
-                  sess.connect("ws://" + mHostname.getText() + ":" + mPort.getText() + "/updateReports?agent=" + mAgent.getText(),
+                  sess.connect(getBaseUrl() + "/updateReports?agent=" + mAgent.getText(),
                         new WebSocketConnectionHandler() {
 
                            @Override
@@ -139,6 +151,9 @@ public void onCreate(Bundle savedInstanceState) {
       mStatusline = (TextView) findViewById(R.id.statusline);
 
       mStart = (Button) findViewById(R.id.start);
+      
+      mTLS = (CheckBox) findViewById(R.id.tls);
+      
       mStart.setOnClickListener(new Button.OnClickListener() {
 
          public void onClick(View v) {
