diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 88648b3..aa8db15 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -20,6 +20,7 @@
 
 import java.io.BufferedOutputStream;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.net.Socket;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -55,7 +56,7 @@
    protected HandlerThread mWriterThread;
 
    protected Socket mTransportChannel;
-   protected BufferedOutputStream mOut;
+   protected OutputStream mOut;
 
    private URI mWsUri;
    private String mWsScheme;
@@ -115,7 +116,7 @@ protected Socket createSocket() throws IOException {
 
             SSLSocketFactory fctry = getSSLSocketFactory();
 
-            SSLSocket secSoc = (SSLSocket)fctry.createSocket(mWsHost, mWsPort);
+            SSLSocket secSoc = (SSLSocket) fctry.createSocket(mWsHost, mWsPort);
             secSoc.setUseClientMode(true);
             secSoc.addHandshakeCompletedListener(new HandshakeCompletedListener() {
                public void handshakeCompleted(HandshakeCompletedEvent event) {
@@ -131,6 +132,13 @@ public void handshakeCompleted(HandshakeCompletedEvent event) {
             //
             soc = new Socket(mWsHost, mWsPort);
          }
+
+         // before doing any data transfer on the socket, set socket options
+         soc.setSoTimeout(mOptions.getSocketReceiveTimeout());
+         soc.setTcpNoDelay(mOptions.getTcpNoDelay());
+         //soc.setReceiveBufferSize(16 * 1024);
+         //soc.setSendBufferSize(16 * 1024);
+         
          return soc;
       }
 
@@ -141,8 +149,8 @@ protected String doInBackground(Void... params) {
 
          try {
             mTransportChannel = createSocket();
-            //mOut = mTransportChannel.getOutputStream();
-            mOut = new BufferedOutputStream(mTransportChannel.getOutputStream(), 1024*1024*1 + 14);        
+            mOut = mTransportChannel.getOutputStream();
+            //mOut = new BufferedOutputStream(mTransportChannel.getOutputStream(), 8*1024);        
 
             return null;
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
index de01fed..7a4e7eb 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
@@ -18,6 +18,7 @@
 
 package de.tavendo.autobahn;
 
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.Socket;
 import java.net.SocketException;
@@ -687,10 +688,12 @@ public void run() {
       try {
          
          mBufferLen = 0;
+         
+         InputStream mIn = mSocket.getInputStream();
 
          do {
             // blocking read on socket
-            int len = mSocket.getInputStream().read(mBuffer, mBufferLen, mBuffer.length - mBufferLen);
+            int len = mIn.read(mBuffer, mBufferLen, mBuffer.length - mBufferLen);
             
             if (len > 0) {
                mBufferLen += len;
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index 8c6b2bb..3f80d4b 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -56,6 +56,8 @@
 
    /// WebSocket options.
    private final WebSocketOptions mOptions;
+   
+   private final NoCopyByteArrayOutputStream mFrameHeaderBuffer;
 
 
    /**
@@ -75,6 +77,8 @@ public WebSocketWriter(Looper looper, Handler master, OutputStream out, WebSocke
       mMaster = master;
       mOut = out;
       mOptions = options;
+      
+      mFrameHeaderBuffer = new NoCopyByteArrayOutputStream(mOptions.getMaxMessagePayloadSize() + 14);
 
       if (DEBUG) Log.d(TAG, "created");
    }
@@ -139,6 +143,8 @@ private String newHandshakeKey() {
     * Send WebSocket client handshake.
     */
    private void sendClientHandshake(WebSocketMessage.ClientHandshake message) throws IOException {
+      
+      mFrameHeaderBuffer.reset();
 
       // write HTTP header with handshake
       String path;
@@ -147,49 +153,51 @@ private void sendClientHandshake(WebSocketMessage.ClientHandshake message) throw
       } else {
          path = message.mPath;
       }
-      mOut.write(("GET " + path + " HTTP/1.1").getBytes("UTF-8"));
-      mOut.write(0x0D);
-      mOut.write(0x0A);
+      mFrameHeaderBuffer.write(("GET " + path + " HTTP/1.1").getBytes("UTF-8"));
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
 
-      mOut.write(("Host: " + message.mHost).getBytes("UTF-8"));
-      mOut.write(0x0D);
-      mOut.write(0x0A);
+      mFrameHeaderBuffer.write(("Host: " + message.mHost).getBytes("UTF-8"));
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
 
-      mOut.write(("Upgrade: WebSocket").getBytes("UTF-8"));
-      mOut.write(0x0D);
-      mOut.write(0x0A);
+      mFrameHeaderBuffer.write(("Upgrade: WebSocket").getBytes("UTF-8"));
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
 
-      mOut.write(("Connection: Upgrade").getBytes("UTF-8"));
-      mOut.write(0x0D);
-      mOut.write(0x0A);
+      mFrameHeaderBuffer.write(("Connection: Upgrade").getBytes("UTF-8"));
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
 
-      mOut.write(("Sec-WebSocket-Key: " + newHandshakeKey()).getBytes("UTF-8"));
-      mOut.write(0x0D);
-      mOut.write(0x0A);
+      mFrameHeaderBuffer.write(("Sec-WebSocket-Key: " + newHandshakeKey()).getBytes("UTF-8"));
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
 
       if (message.mOrigin != null && !message.mOrigin.equals("")) {
-         mOut.write(("Origin: " + message.mOrigin).getBytes("UTF-8"));
-         mOut.write(0x0D);
-         mOut.write(0x0A);
+         mFrameHeaderBuffer.write(("Origin: " + message.mOrigin).getBytes("UTF-8"));
+         mFrameHeaderBuffer.write(0x0D);
+         mFrameHeaderBuffer.write(0x0A);
       }
 
       if (message.mSubprotocols != null && message.mSubprotocols.length > 0) {
-         mOut.write(("Sec-WebSocket-Protocol: ").getBytes("UTF-8"));
+         mFrameHeaderBuffer.write(("Sec-WebSocket-Protocol: ").getBytes("UTF-8"));
          for (int i = 0; i < message.mSubprotocols.length; ++i) {
-            mOut.write((message.mSubprotocols[i]).getBytes("UTF-8"));
-            mOut.write((", ").getBytes("UTF-8"));
+            mFrameHeaderBuffer.write((message.mSubprotocols[i]).getBytes("UTF-8"));
+            mFrameHeaderBuffer.write((", ").getBytes("UTF-8"));
          }
-         mOut.write(0x0D);
-         mOut.write(0x0A);
+         mFrameHeaderBuffer.write(0x0D);
+         mFrameHeaderBuffer.write(0x0A);
       }
 
-      mOut.write(("Sec-WebSocket-Version: 13").getBytes("UTF-8"));
-      mOut.write(0x0D);
-      mOut.write(0x0A);
+      mFrameHeaderBuffer.write(("Sec-WebSocket-Version: 13").getBytes("UTF-8"));
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
 
-      mOut.write(0x0D);
-      mOut.write(0x0A);
-      mOut.flush();
+      mFrameHeaderBuffer.write(0x0D);
+      mFrameHeaderBuffer.write(0x0A);
+      
+      mOut.write(mFrameHeaderBuffer.getByteArray(), 0, mFrameHeaderBuffer.size());
+      //mOut.flush();
       
       if (DEBUG) Log.d(TAG, "WS opening handshake sent");
    }
@@ -315,6 +323,8 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload) throws IOExcep
     * @param length     Length of the chunk within payload to send.
     */
    protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, int length) throws IOException {
+      
+      mFrameHeaderBuffer.reset();
 
       // first octet
       byte b0 = 0;
@@ -322,7 +332,7 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
          b0 |= (byte) (1 << 7);
       }
       b0 |= (byte) opcode;
-      mOut.write(b0);
+      mFrameHeaderBuffer.write(b0);
 
       // second octet
       byte b1 = 0;
@@ -335,16 +345,16 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
       // extended payload length
       if (len <= 125) {
          b1 |= (byte) len;
-         mOut.write(b1);
+         mFrameHeaderBuffer.write(b1);
       } else if (len <= 0xffff) {
          b1 |= (byte) (126 & 0xff);
-         mOut.write(b1);
-         mOut.write(new byte[] {(byte)((len >> 8) & 0xff),
-                                (byte)( len       & 0xff)});
+         mFrameHeaderBuffer.write(b1);
+         mFrameHeaderBuffer.write(new byte[] {(byte)((len >> 8) & 0xff),
+                                              (byte)( len       & 0xff)});
       } else {
          b1 |= (byte) (127 & 0xff);
-         mOut.write(b1);
-         mOut.write(new byte[] {(byte)((len >> 56) & 0xff),
+         mFrameHeaderBuffer.write(b1);
+         mFrameHeaderBuffer.write(new byte[] {(byte)((len >> 56) & 0xff),
                                 (byte)((len >> 48) & 0xff),
                                 (byte)((len >> 40) & 0xff),
                                 (byte)((len >> 32) & 0xff),
@@ -358,12 +368,12 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
       if (mOptions.getMaskClientFrames()) {
          // a mask is always needed, even without payload
          mask = newFrameMask();
-         mOut.write(mask[0]);
-         mOut.write(mask[1]);
-         mOut.write(mask[2]);
-         mOut.write(mask[3]);
+         mFrameHeaderBuffer.write(mask[0]);
+         mFrameHeaderBuffer.write(mask[1]);
+         mFrameHeaderBuffer.write(mask[2]);
+         mFrameHeaderBuffer.write(mask[3]);
       }
-
+      
       if (len > 0) {
          if (mOptions.getMaskClientFrames()) {
             /// \todo optimize masking
@@ -371,10 +381,13 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
                payload[i + offset] ^= mask[i % 4];
             }
          }
-         mOut.write(payload, offset, length);
+         //mOut.write(payload, offset, length);
+         mFrameHeaderBuffer.write(payload, offset, length);
       }
       
-      mOut.flush();
+      mOut.write(mFrameHeaderBuffer.getByteArray(), 0, mFrameHeaderBuffer.size());
+
+      //mOut.flush();
    }
 
 
diff --git a/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java b/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
index 91b3147..6380d1a 100644
--- a/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
+++ b/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
@@ -103,8 +103,8 @@ public void onClose(int code, String reason) {
                testOptions.setReceiveTextMessagesRaw(true);
                //testOptions.setValidateIncomingUtf8(false);
                //testOptions.setMaskClientFrames(false);
-               testOptions.setMaxMessagePayloadSize(1*1024*1024);
-               testOptions.setMaxFramePayloadSize(1*1024*1024);
+               testOptions.setMaxMessagePayloadSize(4*1024*1024);
+               testOptions.setMaxFramePayloadSize(4*1024*1024);
                //testOptions.setTcpNoDelay(false);
 
                sess.connect(mWsUri.getText() + "/runCase?case=" + currCase + "&agent=" + mAgent.getText(),
