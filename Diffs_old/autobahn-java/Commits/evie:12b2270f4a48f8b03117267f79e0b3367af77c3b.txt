diff --git a/Autobahn/build.xml b/Autobahn/build.xml
new file mode 100644
index 0000000..512a7c1
--- /dev/null
+++ b/Autobahn/build.xml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="Autobahn" default="help">
+
+    <!-- The local.properties file is created and updated by the 'android' tool.
+         It contains the path to the SDK. It should *NOT* be checked into
+         Version Control Systems. -->
+    <property file="local.properties" />
+
+    <!-- The ant.properties file can be created by you. It is only edited by the
+         'android' tool to add properties to it.
+         This is the place to change some Ant specific build properties.
+         Here are some properties you may want to change/update:
+
+         source.dir
+             The name of the source directory. Default is 'src'.
+         out.dir
+             The name of the output directory. Default is 'bin'.
+
+         For other overridable properties, look at the beginning of the rules
+         files in the SDK, at tools/ant/build.xml
+
+         Properties related to the SDK location or the project target should
+         be updated using the 'android' tool with the 'update' action.
+
+         This file is an integral part of the build system for your
+         application and should be checked into Version Control Systems.
+
+         -->
+    <property file="ant.properties" />
+
+    <!-- if sdk.dir was not set from one of the property file, then
+         get it from the ANDROID_HOME env var.
+         This must be done before we load project.properties since
+         the proguard config can use sdk.dir -->
+    <property environment="env" />
+    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
+        <isset property="env.ANDROID_HOME" />
+    </condition>
+
+    <!-- The project.properties file is created and updated by the 'android'
+         tool, as well as ADT.
+
+         This contains project specific properties such as project target, and library
+         dependencies. Lower level build properties are stored in ant.properties
+         (or in .classpath for Eclipse projects).
+
+         This file is an integral part of the build system for your
+         application and should be checked into Version Control Systems. -->
+    <loadproperties srcFile="project.properties" />
+
+    <!-- quick check on sdk.dir -->
+    <fail
+            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
+            unless="sdk.dir"
+    />
+
+    <!--
+        Import per project custom build rules if present at the root of the project.
+        This is the place to put custom intermediary targets such as:
+            -pre-build
+            -pre-compile
+            -post-compile (This is typically used for code obfuscation.
+                           Compiled code location: ${out.classes.absolute.dir}
+                           If this is not done in place, override ${out.dex.input.absolute.dir})
+            -post-package
+            -post-build
+            -pre-clean
+    -->
+    <import file="custom_rules.xml" optional="true" />
+
+    <!-- Import the actual build file.
+
+         To customize existing targets, there are two options:
+         - Customize only one target:
+             - copy/paste the target into this file, *before* the
+               <import> task.
+             - customize it to your needs.
+         - Customize the whole content of build.xml
+             - copy/paste the content of the rules files (minus the top node)
+               into this file, replacing the <import> task.
+             - customize to your needs.
+
+         ***********************
+         ****** IMPORTANT ******
+         ***********************
+         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
+         in order to avoid having your file be overridden by tools such as "android update project"
+    -->
+    <!-- version-tag: 1 -->
+    <import file="${sdk.dir}/tools/ant/build.xml" />
+
+</project>
diff --git a/Autobahn/project.properties b/Autobahn/project.properties
index 32c914c..0434d04 100644
--- a/Autobahn/project.properties
+++ b/Autobahn/project.properties
@@ -8,7 +8,7 @@
 # project structure.
 #
 # To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}\tools\proguard\proguard-android.txt:proguard-project.txt
+proguard.config=${sdk.dir}\tools\proguard\proguard-android.txt:proguard-project.txt
 
 android.library=true
 # Project target.
diff --git a/Autobahn/src/de/tavendo/autobahn/Wamp.java b/Autobahn/src/de/tavendo/autobahn/Wamp.java
deleted file mode 100644
index 55a65e1..0000000
--- a/Autobahn/src/de/tavendo/autobahn/Wamp.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-
-import java.util.List;
-import org.apache.http.message.BasicNameValuePair;
-import org.codehaus.jackson.type.TypeReference;
-
-/**
- * WAMP interface.
- */
-public interface Wamp {
-
-    public static final String URI_WAMP_BASE = "http://api.wamp.ws/";
-
-    public static final String URI_WAMP_ERROR = URI_WAMP_BASE + "error#";
-
-    public static final String URI_WAMP_PROCEDURE = URI_WAMP_BASE + "procedure#";
-
-    public static final String URI_WAMP_TOPIC = URI_WAMP_BASE + "topic#";
-
-    public static final String URI_WAMP_ERROR_GENERIC = URI_WAMP_ERROR + "generic";
-
-    public static final String DESC_WAMP_ERROR_GENERIC = "generic error";
-
-    public static final String URI_WAMP_ERROR_INTERNAL = URI_WAMP_ERROR + "internal";
-
-   /**
-    * Session handler for WAMP sessions.
-    */
-   public interface ConnectionHandler {
-
-      /**
-       * Fired upon successful establishment of connection to WAMP server.
-       */
-      public void onOpen();
-
-      /**
-       * Firex upon unsuccessful connection attempt or when connection
-       * was closed normally, or abnormally.
-       *
-       * @param code       The close code, which provides information about why the connection was closed.
-       * @param reason     A humand readable description of the reason of connection close.
-       */
-      public void onClose(int code, String reason);
-   }
-
-   /**
-    * Connect to WAMP server.
-    *
-    * @param wsUri            The WebSockets URI of the server.
-    * @param sessionHandler   The handler for the session.
-    */
-   public void connect(String wsUri, ConnectionHandler sessionHandler);
-   
-   /**
-    * 
-    * @param wsUri            The WebSockets URI of the server.
-    * @param sessionHandler   The handler for the session.
-    * @param headers		  The headers with the connection
-    */
-   public void connect(String wsUri, ConnectionHandler sessionHandler, List<BasicNameValuePair> headers);
-
-
-   /**
-    * Connect to WAMP server.
-    *
-    * @param wsUri            The WebSockets URI of the server.
-    * @param sessionHandler   The handler for the session.
-    * @param options          WebSockets and Autobahn option.s
-    * @param headers		  Headers for connection
-    */
-   public void connect(String wsUri, ConnectionHandler sessionHandler, WampOptions options, List<BasicNameValuePair> headers);
-
-   /**
-    * Connect to WAMP server.
-    *
-    * @param wsUri            The WebSockets URI of the server.
-    * @param sessionHandler   The handler for the session.
-    * @param options          WebSockets and Autobahn option.s
-    */
-   public void connect(String wsUri, ConnectionHandler sessionHandler, WampOptions options);
-
-   /**
-    * Disconnect from WAMP server.
-    */
-   public void disconnect();
-
-   /**
-    * Check if currently connected to server.
-    *
-    * @return     True, iff connected.
-    */
-   public boolean isConnected();
-
-
-   /**
-    * Establish a prefix to be used in CURIEs to shorten URIs.
-    *
-    * @param prefix           The prefix to be used in CURIEs.
-    * @param uri              The full URI this prefix shall resolve to.
-    */
-   public void prefix(String prefix, String uri);
-
-   /**
-    * Call handler.
-    */
-   public interface CallHandler {
-
-      /**
-       * Fired on successful completion of call.
-       *
-       * @param result     The RPC result transformed into the type that was specified in call.
-       */
-      public void onResult(Object result);
-
-      /**
-       * Fired on call failure.
-       *
-       * @param errorUri   The URI or CURIE of the error that occurred.
-       * @param errorDesc  A human readable description of the error.
-       */
-      public void onError(String errorUri, String errorDesc);
-   }
-
-   /**
-    * Call a remote procedure (RPC).
-    *
-    * @param procUri       The URI or CURIE of the remote procedure to call.
-    * @param resultType    The type the call result gets transformed into.
-    * @param callHandler   The handler to be invoked upon call completion.
-    * @param arguments     Zero, one or more arguments for the call.
-    */
-   public void call(String procUri, Class<?> resultType, CallHandler callHandler, Object... arguments);
-
-   /**
-    * Call a remote procedure (RPC).
-    *
-    * @param procUri       The URI or CURIE of the remote procedure to call.
-    * @param resultType    The type the call result gets transformed into.
-    * @param callHandler   The handler to be invoked upon call completion.
-    * @param arguments     Zero, one or more arguments for the call.
-    */
-   public void call(String procUri, TypeReference<?> resultType, CallHandler callHandler, Object... arguments);
-
-   /**
-    * Handler for PubSub events.
-    */
-   public interface EventHandler {
-
-      /**
-       * Fired when an event for the PubSub subscription is received.
-       *
-       * @param topicUri   The URI or CURIE of the topic the event was published to.
-       * @param event      The event, transformed into the type that was specified when subscribing.
-       */
-      public void onEvent(String topicUri, Object event);
-   }
-
-   /**
-    * Subscribe to a topic. When already subscribed, overwrite the event handler.
-    *
-    * @param topicUri      The URI or CURIE of the topic to subscribe to.
-    * @param eventType     The type that event get transformed into.
-    * @param eventHandler  The event handler.
-    */
-   public void subscribe(String topicUri, Class<?> eventType, EventHandler eventHandler);
-
-   /**
-    * Subscribe to a topic. When already subscribed, overwrite the event handler.
-    *
-    * @param topicUri      The URI or CURIE of the topic to subscribe to.
-    * @param eventType     The type that event get transformed into.
-    * @param eventHandler  The event handler.
-    */
-   public void subscribe(String topicUri, TypeReference<?> eventType, EventHandler eventHandler);
-
-   /**
-    * Unsubscribe from given topic.
-    *
-    * @param topicUri      The URI or CURIE of the topic to unsubscribe from.
-    */
-   public void unsubscribe(String topicUri);
-
-   /**
-    * Unsubscribe from any topics subscribed.
-    */
-   public void unsubscribe();
-
-   /**
-    * Publish an event to the specified topic.
-    *
-    * @param topicUri      The URI or CURIE of the topic the event is to be published for.
-    * @param event         The event to be published.
-    */
-   public void publish(String topicUri, Object event);
-
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampConnection.java b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
deleted file mode 100644
index 487006c..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampConnection.java
+++ /dev/null
@@ -1,452 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.ConcurrentHashMap;
-
-import org.apache.http.message.BasicNameValuePair;
-import org.codehaus.jackson.type.TypeReference;
-
-import android.os.HandlerThread;
-import android.util.Log;
-
-public class WampConnection extends WebSocketConnection implements Wamp {
-
-   private static final boolean DEBUG = true;
-   private static final String TAG = WampConnection.class.getName();
-
-
-   /// The message handler of the background writer.
-   protected WampWriter mWriterHandler;
-
-   /// Prefix map for outgoing messages.
-   private final PrefixMap mOutgoingPrefixes = new PrefixMap();
-
-   /// RNG for IDs.
-   private final Random mRng = new Random();
-
-   /// Set of chars to be used for IDs.
-   private static final char[] mBase64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
-         .toCharArray();
-
-   /**
-    * RPC metadata.
-    */
-   public static class CallMeta {
-
-      CallMeta(CallHandler handler, Class<?> resultClass) {
-         this.mResultHandler = handler;
-         this.mResultClass = resultClass;
-         this.mResultTypeRef = null;
-      }
-
-      CallMeta(CallHandler handler, TypeReference<?> resultTypeReference) {
-         this.mResultHandler = handler;
-         this.mResultClass = null;
-         this.mResultTypeRef = resultTypeReference;
-      }
-
-      /// Call handler to be fired on.
-      public CallHandler mResultHandler;
-
-      /// Desired call result type or null.
-      public Class<?> mResultClass;
-
-      /// Desired call result type or null.
-      public TypeReference<?> mResultTypeRef;
-   }
-
-   /// Metadata about issued, but not yet returned RPCs.
-   private final ConcurrentHashMap<String, CallMeta> mCalls = new ConcurrentHashMap<String, CallMeta>();
-
-   /**
-    * Event subscription metadata.
-    */
-   public static class SubMeta {
-
-      SubMeta(EventHandler handler, Class<?> resultClass) {
-         this.mEventHandler = handler;
-         this.mEventClass = resultClass;
-         this.mEventTypeRef = null;
-      }
-
-      SubMeta(EventHandler handler, TypeReference<?> resultTypeReference) {
-         this.mEventHandler = handler;
-         this.mEventClass = null;
-         this.mEventTypeRef = resultTypeReference;
-      }
-
-      /// Event handler to be fired on.
-      public EventHandler mEventHandler;
-
-      /// Desired event type or null.
-      public Class<?> mEventClass;
-
-      /// Desired event type or null.
-      public TypeReference<?> mEventTypeRef;
-   }
-
-   /// Metadata about active event subscriptions.
-   private final ConcurrentHashMap<String, SubMeta> mSubs = new ConcurrentHashMap<String, SubMeta>();
-
-   /// The session handler provided to connect().
-   private Wamp.ConnectionHandler mSessionHandler;
-
-
-   /**
-    * Create the connection transmitting leg writer.
-    */
-   protected void createWriter() {
-
-      mWriterThread = new HandlerThread("AutobahnWriter");
-      mWriterThread.start();
-      mWriter = new WampWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mOptions);
-
-      if (DEBUG) Log.d(TAG, "writer created and started");
-   }
-
-
-   /**
-    * Create the connection receiving leg reader.
-    */
-   protected void createReader() {
-      mReader = new WampReader(mCalls, mSubs, mMasterHandler, mTransportChannel, mOptions, "AutobahnReader");
-      mReader.start();
-
-      if (DEBUG) Log.d(TAG, "reader created and started");
-   }
-
-
-   /**
-    * Create new random ID. This is used, i.e. for use in RPC calls to correlate
-    * call message with result message.
-    *
-    * @param len    Length of ID.
-    * @return       New random ID of given length.
-    */
-   private String newId(int len) {
-      char[] buffer = new char[len];
-      for (int i = 0; i < len; i++) {
-         buffer[i] = mBase64Chars[mRng.nextInt(mBase64Chars.length)];
-      }
-      return new String(buffer);
-   }
-
-
-   /**
-    * Create new random ID of default length.
-    *
-    * @return    New random ID of default length.
-    */
-   private String newId() {
-      return newId(8);
-   }
-
-
-   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler) {
-
-      WampOptions options = new WampOptions();
-      options.setReceiveTextMessagesRaw(true);
-      options.setMaxMessagePayloadSize(64*1024);
-      options.setMaxFramePayloadSize(64*1024);
-      options.setTcpNoDelay(true);
-
-      connect(wsUri, sessionHandler, options, null);
-   }
-
-
-   /**
-    * Connect to server.
-    *
-    * @param wsUri            WebSockets server URI.
-    * @param sessionHandler   The session handler to fire callbacks on.
-    * @param headers		   The headers for connection
-    */
-   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler, WampOptions options, List<BasicNameValuePair> headers) {
-
-      mSessionHandler = sessionHandler;
-
-      mCalls.clear();
-      mSubs.clear();
-      mOutgoingPrefixes.clear();
-
-      try {
-         connect(wsUri, new String[] {"wamp"}, new WebSocketConnectionHandler() {
-
-            @Override
-            public void onOpen() {
-               if (mSessionHandler != null) {
-                  mSessionHandler.onOpen();
-               } else {
-                  if (DEBUG) Log.d(TAG, "could not call onOpen() .. handler already NULL");
-               }
-            }
-
-            @Override
-            public void onClose(int code, String reason) {
-               if (mSessionHandler != null) {
-                  mSessionHandler.onClose(code, reason);
-               } else {
-                  if (DEBUG) Log.d(TAG, "could not call onClose() .. handler already NULL");
-               }
-            }
-
-         }, options, headers);
-
-      } catch (WebSocketException e) {
-
-         if (mSessionHandler != null) {
-            mSessionHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, "cannot connect (" + e.toString() + ")");
-         } else {
-            if (DEBUG) Log.d(TAG, "could not call onClose() .. handler already NULL");
-         }
-      }
-
-   }
-	
-   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler, List<BasicNameValuePair> headers) {
-
-	   WampOptions options = new WampOptions();
-	   options.setReceiveTextMessagesRaw(true);
-	   options.setMaxMessagePayloadSize(64*1024);
-	   options.setMaxFramePayloadSize(64*1024);
-	   options.setTcpNoDelay(true);
-
-	   connect(wsUri, sessionHandler, options, headers);
-   }
-
-   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler, WampOptions options) {	
-
-	   connect(wsUri, sessionHandler, options, null);
-   }
-
-
-   /**
-    * Process WAMP messages coming from the background reader.
-    */
-   protected void processAppMessage(Object message) {
-
-      if (message instanceof WampMessage.CallResult) {
-
-         WampMessage.CallResult callresult = (WampMessage.CallResult) message;
-
-         if (mCalls.containsKey(callresult.mCallId)) {
-            CallMeta meta = mCalls.get(callresult.mCallId);
-            if (meta.mResultHandler != null) {
-               meta.mResultHandler.onResult(callresult.mResult);
-            }
-            mCalls.remove(callresult.mCallId);
-         }
-
-      } else if (message instanceof WampMessage.CallError) {
-
-         WampMessage.CallError callerror = (WampMessage.CallError) message;
-
-         if (mCalls.containsKey(callerror.mCallId)) {
-            CallMeta meta = mCalls.get(callerror.mCallId);
-            if (meta.mResultHandler != null) {
-               meta.mResultHandler.onError(callerror.mErrorUri, callerror.mErrorDesc);
-            }
-            mCalls.remove(callerror.mCallId);
-         }
-      } else if (message instanceof WampMessage.Event) {
-
-         WampMessage.Event event = (WampMessage.Event) message;
-
-         if (mSubs.containsKey(event.mTopicUri)) {
-            SubMeta meta = mSubs.get(event.mTopicUri);
-            if (meta != null && meta.mEventHandler != null) {
-               meta.mEventHandler.onEvent(event.mTopicUri, event.mEvent);
-            }
-         }
-      } else if (message instanceof WampMessage.Welcome) {
-
-         WampMessage.Welcome welcome = (WampMessage.Welcome) message;
-
-         // FIXME: safe session ID / fire session opened hook
-         if (DEBUG) Log.d(TAG, "WAMP session " + welcome.mSessionId + " established (protocol version " + welcome.mProtocolVersion + ", server " + welcome.mServerIdent + ")");
-
-      } else {
-
-         if (DEBUG) Log.d(TAG, "unknown WAMP message in AutobahnConnection.processAppMessage");
-      }
-   }
-
-
-   /**
-    * Issue a remote procedure call (RPC).
-    *
-    * @param procUri       URI or CURIE of procedure to call.
-    * @param resultMeta    Call result metadata.
-    * @param arguments     Call arguments.
-    */
-   private void call(String procUri, CallMeta resultMeta, Object... arguments) {
-
-      WampMessage.Call call = new WampMessage.Call(newId(), procUri, arguments.length);
-      for (int i = 0; i < arguments.length; ++i) {
-         call.mArgs[i] = arguments[i];
-      }
-      mCalls.put(call.mCallId, resultMeta);
-      mWriter.forward(call);
-   }
-
-
-   /**
-    * Issue a remote procedure call (RPC). This version should be used with
-    * primitive Java types and simple composite (class) types.
-    *
-    * @param procUri          URI or CURIE of procedure to call.
-    * @param resultType       Type we want the call result to be converted to.
-    * @param resultHandler    Call handler to process call result or error.
-    * @param arguments        Call arguments.
-    */
-   public void call(String procUri, Class<?> resultType, CallHandler resultHandler, Object... arguments) {
-
-      call(procUri, new CallMeta(resultHandler, resultType), arguments);
-   }
-
-
-   /**
-    * Issue a remote procedure call (RPC). This version should be used with
-    * result types which are containers, i.e. List<> or Map<>.
-    *
-    * @param procUri          URI or CURIE of procedure to call.
-    * @param resultType       Type we want the call result to be converted to.
-    * @param resultHandler    Call handler to process call result or error.
-    * @param arguments        Call arguments.
-    */
-   public void call(String procUri, TypeReference<?> resultType, CallHandler resultHandler, Object... arguments) {
-
-      call(procUri, new CallMeta(resultHandler, resultType), arguments);
-   }
-
-
-   /**
-    * Subscribe to topic to receive events for.
-    *
-    * @param topicUri         URI or CURIE of topic to subscribe to.
-    * @param meta             Subscription metadata.
-    */
-   private void subscribe(String topicUri, SubMeta meta) {
-
-      String uri = mOutgoingPrefixes.resolveOrPass(topicUri);
-
-      if (!mSubs.containsKey(uri)) {
-
-         mSubs.put(uri, meta);
-
-         WampMessage.Subscribe msg = new WampMessage.Subscribe(mOutgoingPrefixes.shrink(topicUri));
-         mWriter.forward(msg);
-      }
-   }
-
-
-   /**
-    * Subscribe to topic to receive events for. This version should be used with
-    * result types which are containers, i.e. List<> or Map<>.
-    *
-    * @param topicUri         URI or CURIE of topic to subscribe to.
-    * @param eventType        The type we want events to be converted to.
-    * @param eventHandler     The event handler to process received events.
-    */
-   public void subscribe(String topicUri, Class<?> eventType, EventHandler eventHandler) {
-
-      subscribe(topicUri, new SubMeta(eventHandler, eventType));
-   }
-
-
-   /**
-    * Subscribe to topic to receive events for.  This version should be used with
-    * primitive Java types and simple composite (class) types.
-    *
-    * @param topicUri         URI or CURIE of topic to subscribe to.
-    * @param eventType        The type we want events to be converted to.
-    * @param eventHandler     The event handler to process received events.
-    */
-   public void subscribe(String topicUri, TypeReference<?> eventType, EventHandler eventHandler) {
-
-      subscribe(topicUri, new SubMeta(eventHandler, eventType));
-   }
-
-
-   /**
-    * Unsubscribe from topic.
-    *
-    * @param topicUri      URI or CURIE of topic to unsubscribe from.
-    */
-   public void unsubscribe(String topicUri) {
-
-      if (mSubs.containsKey(topicUri)) {
-
-         WampMessage.Unsubscribe msg = new WampMessage.Unsubscribe(topicUri);
-         mWriter.forward(msg);
-         
-         mSubs.remove(topicUri);
-      }
-   }
-
-
-   /**
-    * Unsubscribe from any subscribed topic.
-    */
-   public void unsubscribe() {
-
-      for (String topicUri : mSubs.keySet()) {
-
-         WampMessage.Unsubscribe msg = new WampMessage.Unsubscribe(topicUri);
-         mWriter.forward(msg);
-      }
-      mSubs.clear();
-   }
-
-
-   /**
-    * Establish a prefix to be used in CURIEs.
-    *
-    * @param prefix     The prefix to be used in CURIEs.
-    * @param uri        The full URI this prefix shall resolve to.
-    */
-   public void prefix(String prefix, String uri) {
-
-      String currUri = mOutgoingPrefixes.get(prefix);
-
-      if (currUri == null || !currUri.equals(uri)) {
-
-         mOutgoingPrefixes.set(prefix, uri);
-
-         WampMessage.Prefix msg = new WampMessage.Prefix(prefix, uri);
-         mWriter.forward(msg);
-      }
-   }
-
-
-   /**
-    * Publish an event to a topic.
-    *
-    * @param topicUri   URI or CURIE of topic to publish event on.
-    * @param event      Event to be published.
-    */
-   public void publish(String topicUri, Object event) {
-
-      WampMessage.Publish msg = new WampMessage.Publish(mOutgoingPrefixes.shrink(topicUri), event);
-      mWriter.forward(msg);
-   }
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampConnectionHandler.java b/Autobahn/src/de/tavendo/autobahn/WampConnectionHandler.java
deleted file mode 100644
index de1e1fc..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampConnectionHandler.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package de.tavendo.autobahn;
-
-public class WampConnectionHandler implements Wamp.ConnectionHandler {
-
-	public void onOpen() {
-		// TODO Auto-generated method stub
-		
-	}
-
-	public void onClose(int code, String reason) {
-		// TODO Auto-generated method stub
-		
-	}
-
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampCra.java b/Autobahn/src/de/tavendo/autobahn/WampCra.java
deleted file mode 100644
index 32e0253..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampCra.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2012 Alejandro Hernandez
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-public interface WampCra extends Wamp {
-    
-    /**
-     * Auth handler.
-     */
-    public interface AuthHandler {
-
-       /**
-        * Fired on successful completion of authentication.
-        *
-        * @param permissions    The permissions obtained on successful authentication.
-        */
-       public void onAuthSuccess(Object permissions);
-
-       /**
-        * Fired on authentication failure.
-        *
-        * @param errorUri   The URI or CURIE of the error that occurred.
-        * @param errorDesc  A human readable description of the error.
-        */
-       public void onAuthError(String errorUri, String errorDesc);
-    }
-    
-    
-    /**
-     * Authenticate the WAMP Session.
-     *
-     * @param authHandler   The handler to be invoked upon authentication completion.
-     * @param authKey       The user Key for authentication.
-     * @param authSecret    The user Secret for authentication.
-     */
-    public void authenticate(AuthHandler authHandler, String authKey, String authSecret);
-    
-    /**
-     * Authenticate the WAMP Session.
-     *
-     * @param authHandler   The handler to be invoked upon authentication completion.
-     * @param authKey       The user Key for authentication.
-     * @param authSecret    The user Secret for authentication.
-     * @param authExtra     Zero, one or more extra arguments for the authentication.
-     */
-    public void authenticate(AuthHandler authHandler, String authKey, String authSecret, Object authExtra);
-    
-    
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampCraConnection.java b/Autobahn/src/de/tavendo/autobahn/WampCraConnection.java
deleted file mode 100644
index 3a999c9..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampCraConnection.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2012 Alejandro Hernandez
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-import java.security.InvalidKeyException;
-import java.security.Key;
-import java.security.NoSuchAlgorithmException;
-import java.security.SignatureException;
-
-import javax.crypto.Mac;
-import javax.crypto.spec.SecretKeySpec;
-
-import android.util.Base64;
-import android.util.Log;
-
-public class WampCraConnection extends WampConnection implements WampCra {
-
-    public void authenticate(final AuthHandler authHandler, final String authKey, final String authSecret){
-        authenticate(authHandler, authKey, authSecret, null);
-    }
-    
-    public void authenticate(final AuthHandler authHandler, final String authKey, final String authSecret, Object authExtra) {
-        CallHandler callHandler = new CallHandler(){
-
-            public void onResult(Object challenge) {
-                
-                String sig = null;
-                try {
-                    sig = authSignature((String)challenge, authSecret);
-                } catch (SignatureException e) {
-                    Log.e("WampCraConnection:authenicate",e.toString());
-                }
-                
-                call(Wamp.URI_WAMP_PROCEDURE + "auth", WampCraPermissions.class, new CallHandler(){
-
-                    public void onResult(Object result) {
-                        authHandler.onAuthSuccess(result);
-                    }
-
-                    public void onError(String errorUri, String errorDesc) {
-                        authHandler.onAuthError(errorUri,errorDesc);                
-                    }
-                    
-                }, sig);
-                
-                
-            }
-
-            public void onError(String errorUri, String errorDesc) {
-                authHandler.onAuthError(errorUri,errorDesc);                
-            }
-            
-        };
-        if (authExtra != null)
-            call(Wamp.URI_WAMP_PROCEDURE + "authreq", String.class, callHandler, authKey, authExtra);
-        else
-            call(Wamp.URI_WAMP_PROCEDURE + "authreq", String.class, callHandler, authKey);
-    }
-
-    public String authSignature(String authChallenge, String authSecret) throws SignatureException{
-        try {
-            Key sk = new SecretKeySpec(authSecret.getBytes(), HASH_ALGORITHM);
-            Mac mac = Mac.getInstance(sk.getAlgorithm());
-            mac.init(sk);
-            final byte[] hmac = mac.doFinal(authChallenge.getBytes());
-            return Base64.encodeToString(hmac,Base64.NO_WRAP);
-        } catch (NoSuchAlgorithmException e1) {
-            throw new SignatureException("error building signature, no such algorithm in device " + HASH_ALGORITHM);
-        } catch (InvalidKeyException e) {
-            throw new SignatureException("error building signature, invalid key " + HASH_ALGORITHM);
-        }
-    }
-
-    private static final String HASH_ALGORITHM = "HmacSHA256";
-    
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampCraPermissions.java b/Autobahn/src/de/tavendo/autobahn/WampCraPermissions.java
deleted file mode 100644
index 9ae93e1..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampCraPermissions.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2012 Alejandro Hernandez
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-public class WampCraPermissions {
-    
-    public WampCraRpcPermission[] rpc;
-    public WampCraPubSubPermission[] pubsub;
-    
-    public WampCraPermissions() {
-    }
-
-    public WampCraPermissions(WampCraRpcPermission[] rpc, WampCraPubSubPermission[] pubsub) {
-        this.rpc = rpc;
-        this.pubsub = pubsub;
-    }
-
-    public WampCraRpcPermission[] getRpc() {
-        return rpc;
-    }
-
-    public void setRpc(WampCraRpcPermission[] rpc) {
-        this.rpc = rpc;
-    }
-
-    public WampCraPubSubPermission[] getPubsub() {
-        return pubsub;
-    }
-
-    public void setPubsub(WampCraPubSubPermission[] pubsub) {
-        this.pubsub = pubsub;
-    }
-    
-    
-    
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampCraPubSubPermission.java b/Autobahn/src/de/tavendo/autobahn/WampCraPubSubPermission.java
deleted file mode 100644
index c545cd2..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampCraPubSubPermission.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2012 Alejandro Hernandez
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-public class WampCraPubSubPermission{
-    
-    boolean prefix;
-    String uri;
-    boolean pub;
-    boolean sub;
-    
-    public WampCraPubSubPermission() {
-    }
-       
-    public WampCraPubSubPermission(boolean prefix, String uri, boolean pub, boolean sub) {
-        this.prefix = prefix;
-        this.uri = uri;
-        this.pub = pub;
-        this.sub = sub;
-    }
-    
-    public boolean isPrefix() {
-        return prefix;
-    }
-    public void setPrefix(boolean prefix) {
-        this.prefix = prefix;
-    }
-    public String getUri() {
-        return uri;
-    }
-    public void setUri(String uri) {
-        this.uri = uri;
-    }
-    public boolean isPub() {
-        return pub;
-    }
-    public void setPub(boolean pub) {
-        this.pub = pub;
-    }
-    public boolean isSub() {
-        return sub;
-    }
-    public void setSub(boolean sub) {
-        this.sub = sub;
-    }
-    
-    
-}   
diff --git a/Autobahn/src/de/tavendo/autobahn/WampCraRpcPermission.java b/Autobahn/src/de/tavendo/autobahn/WampCraRpcPermission.java
deleted file mode 100644
index f569d7b..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampCraRpcPermission.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2012 Alejandro Hernandez
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-public class WampCraRpcPermission{
-    
-    boolean call;
-    String uri;
-    
-    public WampCraRpcPermission() {
-    }
-    
-    public WampCraRpcPermission(boolean call, String uri) {
-        this.call = call;
-        this.uri = uri;
-    }
-    public boolean isCall() {
-        return call;
-    }
-    public void setCall(boolean call) {
-        this.call = call;
-    }
-    public String getUri() {
-        return uri;
-    }
-    public void setUri(String uri) {
-        this.uri = uri;
-    }
-    
-    
-    
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampMessage.java b/Autobahn/src/de/tavendo/autobahn/WampMessage.java
deleted file mode 100644
index b2d7f3a..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampMessage.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-
-/**
- * The master thread and the background reader/writer threads communicate
- * using these messages for Autobahn WAMP connections.
- */
-public class WampMessage {
-
-   public static final int MESSAGE_TYPE_WELCOME = 0;
-   public static final int MESSAGE_TYPE_PREFIX = 1;
-   public static final int MESSAGE_TYPE_CALL = 2;
-   public static final int MESSAGE_TYPE_CALL_RESULT = 3;
-   public static final int MESSAGE_TYPE_CALL_ERROR = 4;
-   public static final int MESSAGE_TYPE_SUBSCRIBE = 5;
-   public static final int MESSAGE_TYPE_UNSUBSCRIBE = 6;
-   public static final int MESSAGE_TYPE_PUBLISH = 7;
-   public static final int MESSAGE_TYPE_EVENT = 8;
-
-
-   /// Base message class.
-   public static class Message extends WebSocketMessage.Message {
-
-   }
-
-   /**
-    * RPC request message.
-    * Client-to-server message.
-    */
-   public static class Call extends Message {
-      public String mCallId;
-      public String mProcUri;
-      public Object[] mArgs;
-
-      public Call(String callId, String procUri, int argCount) {
-         mCallId = callId;
-         mProcUri = procUri;
-         mArgs = new Object[argCount];
-      }
-   }
-
-   /**
-    * RPC success response message.
-    * Server-to-client message.
-    */
-   public static class CallResult extends Message {
-      public String mCallId;
-      public Object mResult;
-
-      public CallResult(String callId, Object result) {
-         mCallId = callId;
-         mResult = result;
-      }
-   }
-
-   /**
-    * RPC failure response message.
-    * Server-to-client message.
-    */
-   public static class CallError extends Message {
-      public String mCallId;
-      public String mErrorUri;
-      public String mErrorDesc;
-
-      public CallError(String callId, String errorUri, String errorDesc) {
-         mCallId = callId;
-         mErrorUri = errorUri;
-         mErrorDesc = errorDesc;
-      }
-   }
-
-   /**
-    * Define Welcome message.
-    * Server-to-client message.
-    */
-   public static class Welcome extends Message {
-      public String mSessionId;
-      public int mProtocolVersion;
-      public String mServerIdent;
-
-      public Welcome(String sessionId, int protocolVersion, String serverIdent) {
-         mSessionId = sessionId;
-         mProtocolVersion = protocolVersion;
-         mServerIdent = serverIdent;
-      }
-   }
-
-   /**
-    * Define CURIE message.
-    * Server-to-client and client-to-server message.
-    */
-   public static class Prefix extends Message {
-      public String mPrefix;
-      public String mUri;
-
-      public Prefix(String prefix, String uri) {
-         mPrefix = prefix;
-         mUri = uri;
-      }
-   }
-
-   /**
-    * Publish to topic URI request message.
-    * Client-to-server message.
-    */
-   public static class Publish extends Message {
-      public String mTopicUri;
-      public Object mEvent;
-
-      public Publish(String topicUri, Object event) {
-         mTopicUri = topicUri;
-         mEvent = event;
-      }
-   }
-
-   /**
-    * Subscribe to topic URI request message.
-    * Client-to-server message.
-    */
-   public static class Subscribe extends Message {
-      public String mTopicUri;
-
-      public Subscribe(String topicUri) {
-         mTopicUri = topicUri;
-      }
-   }
-
-   /**
-    * Unsubscribe from topic URI request message.
-    * Client-to-server message.
-    */
-   public static class Unsubscribe extends Message {
-      public String mTopicUri;
-
-      public Unsubscribe(String topicUri) {
-         mTopicUri = topicUri;
-      }
-   }
-
-   /**
-    * Event on topic URI message.
-    * Server-to-client message.
-    */
-   public static class Event extends Message {
-      public String mTopicUri;
-      public Object mEvent;
-
-      public Event(String topicUri, Object event) {
-         mTopicUri = topicUri;
-         mEvent = event;
-      }
-   }
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampOptions.java b/Autobahn/src/de/tavendo/autobahn/WampOptions.java
deleted file mode 100644
index e7e7497..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampOptions.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-public class WampOptions extends WebSocketOptions {
-
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampReader.java b/Autobahn/src/de/tavendo/autobahn/WampReader.java
deleted file mode 100644
index 0f3f656..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampReader.java
+++ /dev/null
@@ -1,257 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-import java.io.IOException;
-import java.nio.channels.SocketChannel;
-import java.util.concurrent.ConcurrentHashMap;
-
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonParseException;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-
-import android.os.Handler;
-import android.util.Log;
-import de.tavendo.autobahn.WampConnection.CallMeta;
-import de.tavendo.autobahn.WampConnection.SubMeta;
-
-/**
- * Autobahn WAMP reader, the receiving leg of a WAMP connection.
- */
-public class WampReader extends WebSocketReader {
-
-   private static final boolean DEBUG = true;
-   private static final String TAG = WampReader.class.getName();
-
-   /// Jackson JSON-to-object mapper.
-   private final ObjectMapper mJsonMapper;
-
-   /// Jackson JSON factory from which we create JSON parsers.
-   private final JsonFactory mJsonFactory;
-
-   /// Holds reference to call map created on master.
-   private final ConcurrentHashMap<String, CallMeta> mCalls;
-
-   /// Holds reference to event subscription map created on master.
-   private final ConcurrentHashMap<String, SubMeta> mSubs;
-
-   /**
-    * A reader object is created in AutobahnConnection.
-    *
-    * @param calls         The call map created on master.
-    * @param subs          The event subscription map created on master.
-    * @param master        Message handler of master (used by us to notify the master).
-    * @param socket        The TCP socket.
-    * @param options       WebSockets connection options.
-    * @param threadName    The thread name we announce.
-    */
-   public WampReader(ConcurrentHashMap<String, CallMeta> calls,
-                         ConcurrentHashMap<String, SubMeta> subs,
-                         Handler master,
-                         SocketChannel socket,
-                         WebSocketOptions options,
-                         String threadName) {
-
-      super(master, socket, options, threadName);
-
-      mCalls = calls;
-      mSubs = subs;
-
-      mJsonMapper = new ObjectMapper();
-      mJsonMapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-      mJsonFactory = mJsonMapper.getJsonFactory();
-
-      if (DEBUG) Log.d(TAG, "created");
-   }
-
-   protected void onTextMessage(String payload) {
-
-      /// \todo make error propagation consistent
-      notify(new WebSocketMessage.Error(new WebSocketException("non-raw receive of text message")));
-   }
-
-   protected void onBinaryMessage(byte[] payload) {
-
-      /// \todo make error propagation consistent
-      notify(new WebSocketMessage.Error(new WebSocketException("received binary message")));
-   }
-
-   /**
-    * Unwraps a WAMP message which is a WebSockets text message with JSON
-    * payload conforming to WAMP.
-    */
-   protected void onRawTextMessage(byte[] payload) {
-
-      try {
-
-         // create parser on top of raw UTF-8 payload
-         JsonParser parser = mJsonFactory.createJsonParser(payload);
-
-         // all Autobahn messages are JSON arrays
-         if (parser.nextToken() == JsonToken.START_ARRAY) {
-
-            // message type
-            if (parser.nextToken() == JsonToken.VALUE_NUMBER_INT) {
-
-               int msgType = parser.getIntValue();
-
-               if (msgType == WampMessage.MESSAGE_TYPE_CALL_RESULT) {
-
-                  // call ID
-                  parser.nextToken();
-                  String callId = parser.getText();
-
-                  // result
-                  parser.nextToken();
-                  Object result = null;
-
-                  if (mCalls.containsKey(callId)) {
-
-                     CallMeta meta = mCalls.get(callId);
-                     if (meta.mResultClass != null) {
-                        result = parser.readValueAs(meta.mResultClass);
-                     } else if (meta.mResultTypeRef != null) {
-                        result = parser.readValueAs(meta.mResultTypeRef);
-                     } else {
-                     }
-                     notify(new WampMessage.CallResult(callId, result));
-
-                  } else {
-
-                     if (DEBUG) Log.d(TAG, "WAMP RPC success return for unknown call ID received");
-                  }
-
-               } else if (msgType == WampMessage.MESSAGE_TYPE_CALL_ERROR) {
-
-                  // call ID
-                  parser.nextToken();
-                  String callId = parser.getText();
-
-                  // error URI
-                  parser.nextToken();
-                  String errorUri = parser.getText();
-
-                  // error description
-                  parser.nextToken();
-                  String errorDesc = parser.getText();
-
-                  if (mCalls.containsKey(callId)) {
-
-                     notify(new WampMessage.CallError(callId, errorUri, errorDesc));
-
-                  } else {
-
-                     if (DEBUG) Log.d(TAG, "WAMP RPC error return for unknown call ID received");
-                  }
-
-               } else if (msgType == WampMessage.MESSAGE_TYPE_EVENT) {
-
-                  // topic URI
-                  parser.nextToken();
-                  String topicUri = parser.getText();
-
-                  // event
-                  parser.nextToken();
-                  Object event = null;
-
-                  if (mSubs.containsKey(topicUri)) {
-
-                     SubMeta meta = mSubs.get(topicUri);
-                     if (meta.mEventClass != null) {
-                        event = parser.readValueAs(meta.mEventClass);
-                     } else if (meta.mEventTypeRef != null) {
-                        event = parser.readValueAs(meta.mEventTypeRef);
-                     } else {
-                     }
-                     notify(new WampMessage.Event(topicUri, event));
-
-                  } else {
-
-                     if (DEBUG) Log.d(TAG, "WAMP event for not-subscribed topic received");
-                  }
-
-               } else if (msgType == WampMessage.MESSAGE_TYPE_PREFIX) {
-
-                  // prefix
-                  parser.nextToken();
-                  String prefix = parser.getText();
-
-                  // URI
-                  parser.nextToken();
-                  String uri = parser.getText();
-
-                  notify(new WampMessage.Prefix(prefix, uri));
-
-               } else if (msgType == WampMessage.MESSAGE_TYPE_WELCOME) {
-
-                  // session ID
-                  parser.nextToken();
-                  String sessionId = parser.getText();
-
-                  // protocol version
-                  parser.nextToken();
-                  int protocolVersion = parser.getIntValue();
-
-                  // server ident
-                  parser.nextToken();
-                  String serverIdent = parser.getText();
-
-                  notify(new WampMessage.Welcome(sessionId, protocolVersion, serverIdent));
-
-               } else {
-
-                  // FIXME: invalid WAMP message
-                  if (DEBUG) Log.d(TAG, "invalid WAMP message: unrecognized message type");
-
-               }
-            } else {
-
-               if (DEBUG) Log.d(TAG, "invalid WAMP message: missing message type or message type not an integer");
-            }
-
-            if (parser.nextToken() == JsonToken.END_ARRAY) {
-
-               // nothing to do here
-
-            } else {
-
-               if (DEBUG) Log.d(TAG, "invalid WAMP message: missing array close or invalid additional args");
-            }
-
-         } else {
-
-            if (DEBUG) Log.d(TAG, "invalid WAMP message: not an array");
-         }
-         parser.close();
-
-
-      } catch (JsonParseException e) {
-
-         if (DEBUG) e.printStackTrace();
-
-      } catch (IOException e) {
-
-         if (DEBUG) e.printStackTrace();
-
-      }
-   }
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/WampWriter.java b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
deleted file mode 100644
index 29f5da4..0000000
--- a/Autobahn/src/de/tavendo/autobahn/WampWriter.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-import java.io.IOException;
-import java.nio.channels.SocketChannel;
-
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonGenerationException;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonMappingException;
-import org.codehaus.jackson.map.MappingJsonFactory;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.util.Log;
-
-/**
- * Autobahn WAMP writer, the transmitting leg of a WAMP connection.
- * This writer serializes WAMP messages forwarded from the foreground thread
- * (the master) to this object running on the writer thread. WAMP messages are
- * serialized to JSON, and then sent via WebSockets.
- */
-public class WampWriter extends WebSocketWriter {
-
-   private static final boolean DEBUG = true;
-   private static final String TAG = WampWriter.class.getName();
-
-   /**
-    * This is the Jackson JSON factory we use to create JSON generators.
-    */
-   private final JsonFactory mJsonFactory;
-
-   /**
-    * This is where we buffer the JSON serialization of WAMP messages.
-    */
-   private final NoCopyByteArrayOutputStream mPayload;
-
-   /**
-    * A writer object is created in AutobahnConnection.
-    *
-    * @param looper     The message looper associated with the thread running this object.
-    * @param master     The message handler associated with the master thread (running AutobahnConnection).
-    * @param socket     The TCP socket (channel) the WebSocket connection runs over.
-    * @param options    WebSockets options for the underlying WebSockets connection.
-    */
-   public WampWriter(Looper looper, Handler master, SocketChannel socket,
-         WebSocketOptions options) {
-
-      super(looper, master, socket, options);
-
-      mJsonFactory = new MappingJsonFactory();
-      mPayload = new NoCopyByteArrayOutputStream();
-
-      if (DEBUG) Log.d(TAG, "created");
-   }
-
-   /**
-    * Called from WebSocketWriter when it receives a message in it's
-    * message loop it does not recognize.
-    */
-   protected void processAppMessage(Object msg) throws WebSocketException, IOException {
-
-      mPayload.reset();
-
-      // creating a JSON generator is supposed to be a light-weight operation
-      JsonGenerator generator = mJsonFactory.createJsonGenerator(mPayload);
-
-      try {
-
-         // serialize WAMP messages to JSON: the code here needs to understand
-         // any client-to-server WAMP messages forward from the foreground thread
-
-         if (msg instanceof WampMessage.Call) {
-
-            WampMessage.Call call = (WampMessage.Call) msg;
-
-            generator.writeStartArray();
-            generator.writeNumber(WampMessage.MESSAGE_TYPE_CALL);
-            generator.writeString(call.mCallId);
-            generator.writeString(call.mProcUri);
-            for (Object arg : call.mArgs) {
-               generator.writeObject(arg);
-            }
-            generator.writeEndArray();
-
-         } else if (msg instanceof WampMessage.Prefix) {
-
-            WampMessage.Prefix prefix = (WampMessage.Prefix) msg;
-
-            generator.writeStartArray();
-            generator.writeNumber(WampMessage.MESSAGE_TYPE_PREFIX);
-            generator.writeString(prefix.mPrefix);
-            generator.writeString(prefix.mUri);
-            generator.writeEndArray();
-
-         } else if (msg instanceof WampMessage.Subscribe) {
-
-            WampMessage.Subscribe subscribe = (WampMessage.Subscribe) msg;
-
-            generator.writeStartArray();
-            generator.writeNumber(WampMessage.MESSAGE_TYPE_SUBSCRIBE);
-            generator.writeString(subscribe.mTopicUri);
-            generator.writeEndArray();
-
-         } else if (msg instanceof WampMessage.Unsubscribe) {
-
-            WampMessage.Unsubscribe unsubscribe = (WampMessage.Unsubscribe) msg;
-
-            generator.writeStartArray();
-            generator.writeNumber(WampMessage.MESSAGE_TYPE_UNSUBSCRIBE);
-            generator.writeString(unsubscribe.mTopicUri);
-            generator.writeEndArray();
-
-         } else if (msg instanceof WampMessage.Publish) {
-
-            WampMessage.Publish publish = (WampMessage.Publish) msg;
-
-            generator.writeStartArray();
-            generator.writeNumber(WampMessage.MESSAGE_TYPE_PUBLISH);
-            generator.writeString(publish.mTopicUri);
-            generator.writeObject(publish.mEvent);
-            generator.writeEndArray();
-
-         } else {
-
-            // this should not happen, but to be sure
-            throw new WebSocketException("invalid message received by AutobahnWriter");
-         }
-      } catch (JsonGenerationException e) {
-
-         // this may happen, and we need to wrap the error
-         throw new WebSocketException("JSON serialization error (" + e.toString() + ")");
-
-      } catch (JsonMappingException e) {
-
-         // this may happen, and we need to wrap the error
-         throw new WebSocketException("JSON serialization error (" + e.toString() + ")");
-      }
-
-      // make sure the JSON generator has spit out everything
-      generator.flush();
-
-      // Jackson's JSON generator produces UTF-8 directly, so we send
-      // a text message frame using the raw sendFrame() method
-      sendFrame(1, true, mPayload.getByteArray(), 0, mPayload.size());
-
-      // cleanup generators resources
-      generator.close();
-   }
-}
