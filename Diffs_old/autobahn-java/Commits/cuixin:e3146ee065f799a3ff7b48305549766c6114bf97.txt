diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocket.java b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
index 44dade8..5c75010 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocket.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
@@ -80,6 +80,20 @@
 	    * @param payload    Binar message payload or null (empty payload).
 	    */
 	   public void onBinaryMessage(byte[] payload);
+
+	   /**
+	    * A Ping Message has been received.
+	    *
+	    * @param payload    Binar message payload or null (empty payload).
+	    */
+	   public void onPingMessage(byte[] payload);
+
+	   /**
+	    * A Pong Message has been received.
+	    *
+	    * @param payload    Binar message payload or null (empty payload).
+	    */
+	   public void onPongMessage(byte[] payload);
    }
 
    public void connect(String wsUri, ConnectionHandler wsHandler) throws WebSocketException;
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 876d388..9beb049 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -412,18 +412,25 @@ public void handleMessage(Message msg) {
                WebSocketMessage.Ping ping = (WebSocketMessage.Ping) msg.obj;
                if (DEBUG) Log.d(TAG, "WebSockets Ping received");
 
-               // reply with Pong
-               WebSocketMessage.Pong pong = new WebSocketMessage.Pong();
-               pong.mPayload = ping.mPayload;
-               mWriter.forward(pong);
-
+               // // reply with Pong
+               // WebSocketMessage.Pong pong = new WebSocketMessage.Pong();
+               // pong.mPayload = ping.mPayload;
+               // mWriter.forward(pong);
+               if (mWsHandler != null) {
+                  mWsHandler.onPingMessage(ping.mPayload);
+               } else {
+                  if (DEBUG) Log.d(TAG, "could not call onPingMessage() .. handler already NULL");
+               }
             } else if (msg.obj instanceof WebSocketMessage.Pong) {
 
-               @SuppressWarnings("unused")
+               // @SuppressWarnings("unused")
                WebSocketMessage.Pong pong = (WebSocketMessage.Pong) msg.obj;
-
                if (DEBUG) Log.d(TAG, "WebSockets Pong received");
-
+               if (mWsHandler != null) {
+                  mWsHandler.onPongMessage(pong.mPayload);
+               } else {
+                  if (DEBUG) Log.d(TAG, "could not call onPongMessage() .. handler already NULL");
+               }
             } else if (msg.obj instanceof WebSocketMessage.Close) {
 
                WebSocketMessage.Close close = (WebSocketMessage.Close) msg.obj;
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java
index bfe343d..8277b25 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java
@@ -67,4 +67,20 @@ public void onRawTextMessage(byte[] payload) {
    public void onBinaryMessage(byte[] payload) {
    }
 
+   /**
+    * A Ping Message has been received.
+    *
+    * @param payload    Binar message payload or null (empty payload).
+    */
+   public void onPingMessage(byte[] payload) {
+   }
+
+   /**
+    * A Pong Message has been received.
+    *
+    * @param payload    Binar message payload or null (empty payload).
+    */
+   public void onPongMessage(byte[] payload) {
+   }
+
 }
