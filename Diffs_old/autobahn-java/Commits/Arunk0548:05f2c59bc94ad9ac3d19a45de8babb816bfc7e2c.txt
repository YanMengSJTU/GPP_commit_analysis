diff --git a/Autobahn/src/de/tavendo/autobahn/WampConnection.java b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
index 1e4ce1f..db0bba6 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
@@ -353,13 +353,16 @@ protected void processAppMessage(Object message) {
 
 			WampMessage.CallError callerror = (WampMessage.CallError) message;
 
-			if (mCalls.containsKey(callerror.mCallId)) {
-				CallMeta meta = mCalls.get(callerror.mCallId);
+			if (mCalls.containsKey(callerror.mRequestId)) {
+				CallMeta meta = mCalls.get(callerror.mRequestId);
 				if (meta.mResultHandler != null) {
+					String errorDescription = "";
+					if(callerror.mArguments != null)
+					 errorDescription = callerror.mArguments.toString();
 					meta.mResultHandler.onError(callerror.mErrorUri,
-							callerror.mErrorDesc);
+							errorDescription);
 				}
-				mCalls.remove(callerror.mCallId);
+				mCalls.remove(callerror.mRequestId);
 			}
 		} else if (message instanceof WampMessage.Event) {
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WampMessage.java b/Autobahn/src/de/tavendo/autobahn/WampMessage.java
index b7ca29a..eb2aa19 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampMessage.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampMessage.java
@@ -176,13 +176,17 @@ public Subscriber()
 	 */
 	public static class Call extends Message {
 		public String mCallId;
+		public HashMap<String, Object> mOptions;
 		public String mProcUri;
 		public Object[] mArgs;
+		public HashMap<String, Object> mArgumentsKw;
 
 		public Call(String callId, String procUri, int argCount) {
 			mCallId = callId;
+			mOptions = new HashMap<String, Object>();
 			mProcUri = procUri;
 			mArgs = new Object[argCount];
+			mArgumentsKw = new HashMap<String, Object>();
 		}
 	}
 
@@ -191,27 +195,50 @@ public Call(String callId, String procUri, int argCount) {
 	 */
 	public static class CallResult extends Message {
 		public String mCallId;
+		public HashMap<String, Object> mOptions;
 		public Object mResult;
+		public HashMap<String, Object> mArgumentsKw;
 
-		public CallResult(String callId, Object result) {
+		public CallResult(String callId, HashMap<String, Object> options, Object result, HashMap<String, Object> argumentsKw) {
 			mCallId = callId;
+			mOptions = options;
 			mResult = result;
+			mArgumentsKw= argumentsKw;
 		}
 	}
 
+	public static class Error extends Message {
+		public int mRequestType;
+		public String mRequestId;
+		public Object mDetails;
+		public String mErrorUri;
+		public Object mArguments;
+		public Object mArgumentsKw;
+
+		
+		public Error(int requestType, String requestID, Object details, String errorUri, Object argument, Object argumentsKw)
+		{
+			mRequestType = requestType;
+			mRequestId = requestID;
+			mDetails = details;
+			mErrorUri = errorUri;
+			mArguments = argument;
+			mArgumentsKw = argumentsKw;
+		}
+		
+	}
 	/**
 	 * RPC failure response message. Server-to-client message.
 	 */
-	public static class CallError extends Message {
-		public String mCallId;
-		public String mErrorUri;
-		public String mErrorDesc;
+	public static class CallError extends Error {
 
-		public CallError(String callId, String errorUri, String errorDesc) {
-			mCallId = callId;
-			mErrorUri = errorUri;
-			mErrorDesc = errorDesc;
+		public CallError(int requestType, String requestID, Object details,
+				String errorUri,  Object argument, Object argumentsKw) {
+			super(requestType, requestID, details, errorUri, argument, argumentsKw);
+			
 		}
+				
+
 	}
 
 	/**
@@ -320,6 +347,24 @@ public Published(String requestId,String publicationId) {
 			
 		}
 	}
+	
+	/**
+	 * When the request for publication cannot be fulfilled by the Broker,
+	 *  the Broker sends back an ERROR message to the publisher
+	 *  
+	 *  Broker - to - client
+	 * @author arun.k
+	 *
+	 */
+	public static class PublishError extends Error{
+
+		public PublishError(int requestType, String requestID, Object details,
+				String errorUri, Object argument, Object argumentsKw) {
+			super(requestType, requestID, details, errorUri, argument, argumentsKw);
+			
+		}
+		
+	}
 
 	/**
 	 * Subscribe to topic URI request message. Client-to-server message.
@@ -352,6 +397,25 @@ public Subscribed(String requestId,String subscriptionId) {
 			
 		}
 	}
+	
+	/**
+	 * When the request for subscription cannot be fulfilled by the Broker, 
+	 * the Broker sends back an ERROR message to the Subscriber
+	 * 
+	 * Server to Client
+	 * @author arun.k
+	 *
+	 */
+	public static class SubscribeError extends Error
+	{
+
+		public SubscribeError(int requestType, String requestID,
+				Object details, String errorUri,  Object argument, Object argumentsKw) {
+			super(requestType, requestID, details, errorUri, argument, argumentsKw);
+			
+		}
+		
+	}
 
 	/**
 	 * Unsubscribe from topic URI request message. Client-to-server message.
@@ -377,6 +441,25 @@ public Unsubscribed(String unsubscribedRequestId) {
 			mUnsubscribedRequestId = unsubscribedRequestId;
 		}
 	}
+	
+	/**
+	 * When the request for unsubscribe cannot be fulfilled by the Broker,
+	 *  the Broker sends back an ERROR message to the unsubscriber.
+	 *  
+	 *  Server to Client.
+	 * @author arun.k
+	 *
+	 */
+	public static class UnsubscribeError extends Error
+	{
+
+		public UnsubscribeError(int requestType, String requestID,
+				Object details, String errorUri,  Object argument, Object argumentsKw) {
+			super(requestType, requestID, details, errorUri, argument, argumentsKw);
+		
+		}
+		
+	}
 
 	/**
 	 * Event on topic URI message. Server-to-client message.
diff --git a/Autobahn/src/de/tavendo/autobahn/WampReader.java b/Autobahn/src/de/tavendo/autobahn/WampReader.java
index 0eeb188..cbf07eb 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampReader.java
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.nio.channels.SocketChannel;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -36,6 +37,7 @@
 import de.tavendo.autobahn.WampConnection.CallMeta;
 import de.tavendo.autobahn.WampConnection.PubMeta;
 import de.tavendo.autobahn.WampConnection.SubMeta;
+import de.tavendo.autobahn.WampMessage.PublishError;
 
 /**
  * Autobahn WAMP reader, the receiving leg of a WAMP connection.
@@ -177,21 +179,41 @@ protected void onRawTextMessage(byte[] payload) {
 						token = parser.nextToken();
 						String callId = parser.getText();
 
+						// options , dict
+						token = parser.nextToken();
+						HashMap<String, Object> options = parser
+								.readValueAs(new TypeReference<HashMap<String, Object>>() {
+								});
+
 						// result
 						token = parser.nextToken();
 						Object result = null;
 
 						if (mCalls.containsKey(callId)) {
 
-							CallMeta meta = mCalls.get(callId);
-							if (meta.mResultClass != null) {
-								result = parser.readValueAs(meta.mResultClass);
-							} else if (meta.mResultTypeRef != null) {
-								result = parser
-										.readValueAs(meta.mResultTypeRef);
-							} else {
+							if (token != null && token != JsonToken.END_ARRAY) {
+								CallMeta meta = mCalls.get(callId);
+								if (meta.mResultClass != null) {
+									result = parser
+											.readValueAs(meta.mResultClass);
+								} else if (meta.mResultTypeRef != null) {
+									result = parser
+											.readValueAs(meta.mResultTypeRef);
+								} else {
+								}
+								token = parser.nextToken();
 							}
-							notify(new WampMessage.CallResult(callId, result));
+
+							// Argument list Kw
+							HashMap<String, Object> argumentListKw = null;
+							if (token != null && token != JsonToken.END_ARRAY) {
+								argumentListKw = parser
+										.readValueAs(new TypeReference<HashMap<String, Object>>() {
+										});
+								token = parser.nextToken();
+							}
+
+							notify(new WampMessage.CallResult(callId, options,result,argumentListKw));
 
 						} else {
 
@@ -200,8 +222,6 @@ protected void onRawTextMessage(byte[] payload) {
 										"WAMP RPC success return for unknown call ID received");
 						}
 
-						token = parser.nextToken();
-
 					} else if (msgType == WampMessage.MESSAGE_TYPE_SUBSCRIBED) {
 						// subscribe request id
 						token = parser.nextToken();
@@ -269,32 +289,80 @@ protected void onRawTextMessage(byte[] payload) {
 						token = parser.nextToken();
 					} else if (msgType == WampMessage.MESSAGE_TYPE_ERROR) {
 
-						// call ID
+						if (DEBUG)
+							Log.d(TAG, "Error Received");
+						// Request Type
 						token = parser.nextToken();
-						String callId = parser.getText();
+						int type = parser.getIntValue();
 
-						// error URI
+						// Request Id
 						token = parser.nextToken();
-						String errorUri = parser.getText();
+						long requestId = parser.getLongValue();
 
-						// error description
+						// details / options
 						token = parser.nextToken();
-						String errorDesc = parser.getText();
+						Object options = parser
+								.readValueAs(new TypeReference<HashMap<String, Object>>() {
+								});
 
-						if (mCalls.containsKey(callId)) {
+						// Error uri
+						token = parser.nextToken();
+						String errorUri = parser.getText();
 
-							notify(new WampMessage.CallError(callId, errorUri,
-									errorDesc));
+						// argument list
+						Object argumentList = null;
+						token = parser.nextToken();
+						if (token != null && token != JsonToken.END_ARRAY) {
+							argumentList = parser
+									.readValueAs(new TypeReference<ArrayList<String>>() {
+									});
 
-						} else {
+							token = parser.nextToken();
+						}
 
+						// argument kw list
+						Object argumentKwDict = null;
+						if (token != null && token != JsonToken.END_ARRAY) {
+							argumentKwDict = parser
+									.readValueAs(new TypeReference<HashMap<String, Object>>() {
+									});
+							token = parser.nextToken();
+						}
+
+						switch (type) {
+						case WampMessage.MESSAGE_TYPE_SUBSCRIBE:
+							notify(new PublishError(type,
+									String.valueOf(requestId), options,
+									errorUri, argumentList, argumentKwDict));
+							break;
+						case WampMessage.MESSAGE_TYPE_UNSUBSCRIBE:
+							notify(new WampMessage.UnsubscribeError(type,
+									String.valueOf(requestId), options,
+									errorUri, argumentList, argumentKwDict));
+							break;
+						case WampMessage.MESSAGE_TYPE_PUBLISH:
+							notify(new WampMessage.PublishError(type,
+									String.valueOf(requestId), options,
+									errorUri, argumentList, argumentKwDict));
+							break;
+						case WampMessage.MESSAGE_TYPE_REGISTER:
+							break;
+						case WampMessage.MESSAGE_TYPE_UNREGISTER:
+							break;
+						case WampMessage.MESSAGE_TYPE_INVOCATION:
+							break;
+						case WampMessage.MESSAGE_TYPE_CALL:
+							notify(new WampMessage.CallError(type,
+									String.valueOf(requestId), options,
+									errorUri, argumentList, argumentKwDict));
+							break;
+						default:
 							if (DEBUG)
 								Log.d(TAG,
-										"WAMP RPC error return for unknown call ID received");
+										"WAMP RPC error return for unknown request  ID received");
+							break;
 						}
 
-						token = parser.nextToken();
-
 					} else if (msgType == WampMessage.MESSAGE_TYPE_EVENT) {
 
 						// SUBSCRIBED.Subscription id
diff --git a/Autobahn/src/de/tavendo/autobahn/WampWriter.java b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
index 2436bfc..e64642c 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
@@ -94,11 +94,15 @@ protected void processAppMessage(Object msg) throws WebSocketException, IOExcept
 
             generator.writeStartArray();
             generator.writeNumber(WampMessage.MESSAGE_TYPE_CALL);
-            generator.writeString(call.mCallId);
+            generator.writeNumber(Long.valueOf(call.mCallId));
+            generator.writeObject(call.mOptions);
             generator.writeString(call.mProcUri);
-            for (Object arg : call.mArgs) {
-               generator.writeObject(arg);
+           if( call.mArgs != null) {
+               generator.writeObject(call.mArgs);
             }
+           if(call.mArgumentsKw != null)
+        	   generator.writeObject(call.mArgumentsKw);
+           
             generator.writeEndArray();
 
          } else if (msg instanceof WampMessage.Prefix) {
