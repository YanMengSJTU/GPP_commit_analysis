diff --git a/Autobahn/src/de/tavendo/autobahn/Doxygen.java b/Autobahn/src/de/tavendo/autobahn/Doxygen.java
deleted file mode 100644
index 910bac8..0000000
--- a/Autobahn/src/de/tavendo/autobahn/Doxygen.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package de.tavendo.autobahn;
-
-/*!
-\mainpage
-\section intro_sec AutobahnAndroid API Reference
-
-<a href="http://autobahn.ws">AutobahnAndroid</a> provides a Java client library implementing
-<a href="http://tools.ietf.org/html/rfc6455">The WebSocket Protocol</a> and
-<a href="http://wamp.ws">The WebSocket Application Messaging Protocol</a> for use
-in native Android apps.
-
-
-\section websocket_features WebSocket Support
-
-<a href="http://autobahn.ws">AutobahnAndroid</a> implements the WebSocket protocol
-with a couple of distinct features:
-
-\li full RFC6455 and Draft Hybi-10 to -17 support
-\li very good <a href="http://autobahn.ws/testsuite/reports/mobileclients/">standards conformance</a>
-\li performant
-\li easy to use API
-\li designed to work with Android UI applications
-\li Open-Source, licensed under the Apache 2.0 license
-
-The implementation passes all (nearly 300) tests from the
-<a href="http://autobahn.ws/testsuite">AutobahnTestSuite</a>.
-
-The basic API is modeled after the WebSocket JavaScript API for
-ease of use and familarity.
-
-The API enables the use of common Android idioms for event handling (using
-anonymous inner classes) and integrates with Android UI applications (by
-communicating via messages and message loops between the UI thread and back-
-ground reader/writer threads and by avoiding _any_ network activity on the
-UI thread).
-
-The implementation uses Java NIO to reduce network processing overhead and
-is on-par or faster performance-wise compared to Firefox 8 Mobile, a C++
-implementation of WebSockets.
-
-\section rpc_pubsub WAMP (RPC/PubSub) Support
-
-<a href="http://autobahn.ws">AutobahnAndroid</a> also
-includes an implementation of <a href="http://wamp.ws">The WebSocket Application Messaging Protocol (WAMP)</a>
-which can be used to build applications around <b>Remote Procedure Call</b> and
-<b>Publish & Subscribe</b> messaging patterns.
-
-It features:
-
-\li RPC and PubSub, fully asynchronous design
-\li built on JSON and WebSockets
-\li simple, efficient and open protocol
-\li automatic mapping to user-defined POJOs
-\li seamless integration in Android UI apps
-\li Open-Source, licensed under the Apache 2.0 license
-
-Call results and events which travel the wire as JSON payload are automatically
-converted and mapped to Java primitive types or user-defined POJOs (Plain-old Java Objects).
-
-The latter is a very convenient and powerful feature made possible by the use of
-<a href="http://jackson.codehaus.org/">Jackson</a>, a high-performance JSON processor.
-This works even for container types, such as lists or maps over POJOs.
-
-For example, it is possible to issue a RPC and get a List<Person> as a result, where Person is
-a user-defined class.
-
-\section usage Usage
-
-The only dependency of
-<a href="http://autobahn.ws">AutobahnAndroid</a>
-is <a href="http://jackson.codehaus.org/">Jackson</a>.
-To use, all one needs to do is to include the built JARs into an Android
-project.
-
-\section more More Information
-
-For more information, please visit the <a href="http://autobahn.ws/android">project page</a>,
-the <a href="http://groups.google.com/group/autobahnws">forum</a> or the
-<a href="https://github.com/tavendo/AutobahnAndroid">code repository</a>.
-*/
-
-/// Empty class file to hold Doxygen documentation.
-abstract class Doxygen {
-
-}
diff --git a/Autobahn/src/de/tavendo/autobahn/PrefixMap.java b/Autobahn/src/de/tavendo/autobahn/PrefixMap.java
deleted file mode 100644
index 1fb5df6..0000000
--- a/Autobahn/src/de/tavendo/autobahn/PrefixMap.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/******************************************************************************
- *
- *  Copyright 2011-2012 Tavendo GmbH
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- ******************************************************************************/
-
-package de.tavendo.autobahn;
-
-import java.util.HashMap;
-
-/**
- * Mapping between CURIEs and URIs.
- * Provides a two-way mapping between CURIEs (Compact URI Expressions) and
- * full URIs.
- *
- * \see http://www.w3.org/TR/curie/
- *
- * \todo Prefixes MUST be NCNames (http://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-NCName)
- *
- * \todo Work in the details of http://www.w3.org/TR/curie/ (default prefixes, ..)
- */
-public class PrefixMap {
-
-   private final HashMap<String, String> mPrefixes = new HashMap<String, String>();
-   private final HashMap<String, String> mUris = new HashMap<String, String>();
-
-   /**
-    * Set mapping of prefix to URI.
-    *
-    * @param prefix     Prefix to be mapped.
-    * @param uri        URI the prefix is to be mapped to.
-    */
-   public void set(String prefix, String uri) {
-      mPrefixes.put(prefix, uri);
-      mUris.put(uri, prefix);
-   }
-
-   /**
-    * Returns the URI for the prefix or None if prefix has no mapped URI.
-    *
-    * @param prefix     Prefix to look up.
-    * @return           Mapped URI for prefix or None.
-    */
-   public String get(String prefix) {
-      return mPrefixes.get(prefix);
-   }
-
-   /**
-    * Remove mapping of prefix to URI.
-    *
-    * @param prefix     Prefix for which mapping should be removed.
-    * @return           The URI the prefix was mapped to (when removed),
-    *                   or null when prefix is unmapped (so there wasn't
-    *                   anything to remove).
-    */
-   public String remove(String prefix) {
-      if (mPrefixes.containsKey(prefix)) {
-         String uri = mPrefixes.get(prefix);
-         mPrefixes.remove(prefix);
-         mUris.remove(uri);
-         return uri;
-      } else {
-         return null;
-      }
-   }
-
-   /**
-    * Remove all prefix mappings.
-    */
-   public void clear() {
-      mPrefixes.clear();
-      mUris.clear();
-   }
-
-   /**
-    * Resolve given CURIE to full URI.
-    *
-    * @param curie         CURIE (i.e. "rdf:label").
-    * @return              Full URI for CURIE or None.
-    */
-   public String resolve(String curie) {
-      int i = curie.indexOf(':');
-      if (i > 0) {
-         String prefix = curie.substring(0, i);
-         if (mPrefixes.containsKey(prefix)) {
-            return mPrefixes.get(prefix) + curie.substring(i + 1);
-         }
-      }
-      return null;
-   }
-
-   /**
-    * Resolve given CURIE/URI and return string verbatim if cannot be resolved.
-    *
-    * @param curieOrUri    CURIE or URI.
-    * @return              Full URI for CURIE or original string.
-    */
-   public String resolveOrPass(String curieOrUri) {
-
-      String u = resolve(curieOrUri);
-      if (u != null) {
-         return u;
-      } else {
-         return curieOrUri;
-      }
-   }
-
-   /**
-    * Shrink given URI to CURIE. If no appropriate prefix mapping is available,
-    * return original URI.
-    *
-    * @param uri     URI to shrink.
-    * @return        CURIE or original URI.
-    */
-   public String shrink(String uri) {
-
-      for (int i = uri.length(); i > 0; --i) {
-         String u = uri.substring(0, i);
-         String p = mUris.get(u);
-         if (p != null) {
-            return p + ':' + uri.substring(i);
-         }
-      }
-      return uri;
-   }
-
-}
