diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocket.java b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
index c3dc58e..46d3c2c 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocket.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
@@ -1,5 +1,8 @@
 package de.tavendo.autobahn;
 
+import java.io.FileInputStream;
+import java.io.IOException;
+
 public interface WebSocket {
 
     /**
@@ -98,6 +101,8 @@
 
     public void sendBinaryMessage(byte[] payload);
 
+    public void sendStream(String header, FileInputStream fis) throws IOException;
+
     public void sendRawTextMessage(byte[] payload);
 
     public void sendTextMessage(String payload);
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 2f81d8c..2d86a48 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -21,14 +21,17 @@
 import android.os.Looper;
 import android.os.Message;
 import android.support.v4.util.Pair;
+import android.util.Base64;
 import android.util.Log;
 
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.nio.channels.SocketChannel;
 import java.util.List;
+import java.util.Random;
 
 public class WebSocketConnection implements WebSocket {
 
@@ -61,6 +64,8 @@
 
     private WebSocketSSLContext mWebSocketSSLContext;
 
+    private String mHandShakeKey;
+
     /**
      * Asynchronous socket connector.
      */
@@ -71,6 +76,8 @@ public void run() {
 
             boolean isSSL = false;
 
+            mHandShakeKey = newHandshakeKey();
+
 			/*
              * connect TCP socket
 			 */
@@ -177,6 +184,10 @@ public void sendBinaryMessage(byte[] payload) {
         mWriter.forward(new WebSocketMessage.BinaryMessage(payload));
     }
 
+    @Override
+    public void sendStream(String header, FileInputStream fis) throws IOException {
+        mWriter.forward(new WebSocketMessage.BinaryStreamMessage(header, fis));
+    }
 
     public boolean isConnected() {
         return mTransportChannel != null && mTransportChannel.isConnected();
@@ -552,7 +563,7 @@ protected void createWriter() {
 
         mWriterThread = new HandlerThread("WebSocketWriter");
         mWriterThread.start();
-        mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mWebSocketSSLContext.getSSLEngine(), mOptions);
+        mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mWebSocketSSLContext.getSSLEngine(), mHandShakeKey, mOptions);
 
         if (DEBUG) Log.d(TAG, "WS writer created and started");
     }
@@ -563,9 +574,23 @@ protected void createWriter() {
      */
     protected void createReader() {
 
-        mReader = new WebSocketReader(mMasterHandler, mTransportChannel, mWebSocketSSLContext.getSSLEngine(),mWriter.getHandShakeKey(),  mOptions, "WebSocketReader");
+        mReader = new WebSocketReader(mMasterHandler, mTransportChannel, mWebSocketSSLContext.getSSLEngine(), mHandShakeKey, mOptions, "WebSocketReader");
         mReader.start();
 
         if (DEBUG) Log.d(TAG, "WS reader created and started");
     }
+
+    /**
+     * Create new key for WebSockets handshake.
+     *
+     * @return WebSockets handshake key (Base64 encoded).
+     */
+    private String newHandshakeKey() {
+        final Random mRng = new Random();
+
+        final byte[] ba = new byte[16];
+        mRng.nextBytes(ba);
+        return Base64.encodeToString(ba, Base64.NO_WRAP);
+    }
+
 }
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java b/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java
index bcad83f..651aac9 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java
@@ -16,8 +16,11 @@
 
 package de.tavendo.autobahn;
 
+import android.os.ParcelFileDescriptor;
 import android.support.v4.util.Pair;
 
+import java.io.FileInputStream;
+import java.io.IOException;
 import java.util.List;
 
 /**
@@ -150,6 +153,18 @@ public Error(Exception e) {
         }
     }
 
+    // stream of binary message
+    public static class BinaryStreamMessage extends Message {
+        public ParcelFileDescriptor mPfd;
+        public String mHeader;
+
+        public BinaryStreamMessage(String header, FileInputStream fis) throws IOException {
+            mPfd = ParcelFileDescriptor.dup(fis.getFD());
+            fis.close();
+            mHeader = header;
+        }
+    }
+
     /// WebSockets close to send or received.
     public static class Close extends Message {
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index 4196105..6e8ea36 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -1,12 +1,12 @@
 /******************************************************************************
  * Copyright 2011-2012 Tavendo GmbH
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -20,10 +20,11 @@
 import android.os.Looper;
 import android.os.Message;
 import android.support.v4.util.Pair;
-import android.util.Base64;
 import android.util.Log;
 
+import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.SocketException;
 import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
@@ -70,14 +71,15 @@
     /**
      * Create new WebSockets background writer.
      *
-     * @param looper     The message looper of the background thread on which
-     *                   this object is running.
-     * @param master     The message handler of master (foreground thread).
-     * @param socket     The socket channel created on foreground thread.
-     * @param sslEngine   Optional {@link SSLContext}
-     * @param options    WebSockets connection options.
+     * @param looper       The message looper of the background thread on which
+     *                     this object is running.
+     * @param master       The message handler of master (foreground thread).
+     * @param socket       The socket channel created on foreground thread.
+     * @param sslEngine    Optional {@link SSLContext}
+     * @param handShakeKey Handshake key
+     * @param options      WebSockets connection options.
      */
-    public WebSocketWriter(Looper looper, Handler master, SocketChannel socket, SSLEngine sslEngine, WebSocketOptions options) {
+    public WebSocketWriter(Looper looper, Handler master, SocketChannel socket, SSLEngine sslEngine, String handShakeKey, WebSocketOptions options) {
 
         super(looper);
 
@@ -85,6 +87,7 @@ public WebSocketWriter(Looper looper, Handler master, SocketChannel socket, SSLE
         mMaster = master;
         mSocket = socket;
         mSSLEngine = sslEngine;
+        mHandShakeKey = handShakeKey;
         mOptions = options;
         mBuffer = new ByteBufferOutputStream(options.getMaxFramePayloadSize() + 14, 4 * 64 * 1024);
 
@@ -122,7 +125,6 @@ public void forward(Object message) {
         sendMessage(msg);
     }
 
-
     /**
      * Notify the master (foreground thread).
      *
@@ -135,19 +137,6 @@ private void notify(Object message) {
         mMaster.sendMessage(msg);
     }
 
-
-    /**
-     * Create new key for WebSockets handshake.
-     *
-     * @return WebSockets handshake key (Base64 encoded).
-     */
-    private String newHandshakeKey() {
-        final byte[] ba = new byte[16];
-        mRng.nextBytes(ba);
-        return Base64.encodeToString(ba, Base64.NO_WRAP);
-    }
-
-
     /**
      * Create new (random) frame mask.
      *
@@ -181,7 +170,6 @@ private void sendClientHandshake(WebSocketMessage.ClientHandshake message) throw
         mBuffer.write("Connection: Upgrade");
         mBuffer.crlf();
 
-        mHandShakeKey = newHandshakeKey();
         mBuffer.write("Sec-WebSocket-Key: " + mHandShakeKey);
         mBuffer.crlf();
 
@@ -283,6 +271,30 @@ private void sendBinaryMessage(WebSocketMessage.BinaryMessage message) throws IO
         sendFrame(2, true, message.mPayload);
     }
 
+    /**
+     * Send WebSockets streaming binary message
+     *
+     * @param message
+     * @throws IOException
+     */
+    private void sendStream(WebSocketMessage.BinaryStreamMessage message) throws IOException {
+        InputStream is = new FileInputStream(message.mPfd.getFileDescriptor());
+        int offset = 0, bytesRead = 0;
+        byte[] buffer = new byte[4096];
+        boolean fin = false;
+
+        // send header
+        byte[] payload = message.mHeader.getBytes("UTF-8");
+        sendFrame(2, false, payload);
+
+        // stream rest of the bytes
+        while (offset < buffer.length && (bytesRead = is.read(buffer, offset, buffer.length - offset)) >= 0) {
+            if (bytesRead != buffer.length)
+                fin = true;
+
+            sendFrame(2, fin, buffer);
+        }
+    }
 
     /**
      * Send WebSockets text message.
@@ -464,6 +476,10 @@ protected void processMessage(Object msg) throws IOException, WebSocketException
 
             sendBinaryMessage((WebSocketMessage.BinaryMessage) msg);
 
+        } else if (msg instanceof WebSocketMessage.BinaryStreamMessage) {
+
+            sendStream((WebSocketMessage.BinaryStreamMessage) msg);
+
         } else if (msg instanceof WebSocketMessage.Ping) {
 
             sendPing((WebSocketMessage.Ping) msg);
