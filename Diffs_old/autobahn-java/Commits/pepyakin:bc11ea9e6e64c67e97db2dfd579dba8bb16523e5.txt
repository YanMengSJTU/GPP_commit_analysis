diff --git a/Autobahn/src/de/tavendo/autobahn/WampReader.java b/Autobahn/src/de/tavendo/autobahn/WampReader.java
index 0f3f656..9babd2d 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampReader.java
@@ -19,6 +19,7 @@
 package de.tavendo.autobahn;
 
 import java.io.IOException;
+import java.net.Socket;
 import java.nio.channels.SocketChannel;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -67,7 +68,7 @@
    public WampReader(ConcurrentHashMap<String, CallMeta> calls,
                          ConcurrentHashMap<String, SubMeta> subs,
                          Handler master,
-                         SocketChannel socket,
+                         Socket socket,
                          WebSocketOptions options,
                          String threadName) {
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WampWriter.java b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
index 29f5da4..5bb6b8b 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
@@ -19,6 +19,7 @@
 package de.tavendo.autobahn;
 
 import java.io.IOException;
+import java.net.Socket;
 import java.nio.channels.SocketChannel;
 
 import org.codehaus.jackson.JsonFactory;
@@ -60,7 +61,7 @@
     * @param socket     The TCP socket (channel) the WebSocket connection runs over.
     * @param options    WebSockets options for the underlying WebSockets connection.
     */
-   public WampWriter(Looper looper, Handler master, SocketChannel socket,
+   public WampWriter(Looper looper, Handler master, Socket socket,
          WebSocketOptions options) {
 
       super(looper, master, socket, options);
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index a82136a..7013a29 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -19,10 +19,14 @@
 package de.tavendo.autobahn;
 
 import java.io.IOException;
-import java.net.InetSocketAddress;
+import java.net.Socket;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.nio.channels.SocketChannel;
+
+import javax.net.ssl.HandshakeCompletedEvent;
+import javax.net.ssl.HandshakeCompletedListener;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLSocketFactory;
 
 import android.os.AsyncTask;
 import android.os.Handler;
@@ -32,399 +36,415 @@
 
 public class WebSocketConnection implements WebSocket {
 
-   private static final boolean DEBUG = true;
-   private static final String TAG = WebSocketConnection.class.getName();
+	private static final boolean DEBUG = true;
+	private static final String TAG = WebSocketConnection.class.getName();
+
+	protected Handler mMasterHandler;
+
+	protected WebSocketReader mReader;
+	protected WebSocketWriter mWriter;
+	protected HandlerThread mWriterThread;
+
+	protected Socket mTransportChannel;
+
+	private URI mWsUri;
+	private String mWsScheme;
+	private String mWsHost;
+	private int mWsPort;
+	private String mWsPath;
+	private String mWsQuery;
+	private String[] mWsSubprotocols;
 
-   protected Handler mMasterHandler;
+	private WebSocket.ConnectionHandler mWsHandler;
 
-   protected WebSocketReader mReader;
-   protected WebSocketWriter mWriter;
-   protected HandlerThread mWriterThread;
+	protected WebSocketOptions mOptions;
 
-   protected SocketChannel mTransportChannel;
 
-   private URI mWsUri;
-   private String mWsScheme;
-   private String mWsHost;
-   private int mWsPort;
-   private String mWsPath;
-   private String mWsQuery;
-   private String[] mWsSubprotocols;
+	/**
+	 * Asynch socket connector.
+	 */
+	private class WebSocketConnector extends AsyncTask<Void, Void, String> {
 
-   private WebSocket.ConnectionHandler mWsHandler;
+		protected Socket createSocket() throws IOException {
+			Socket soc;
 
-   protected WebSocketOptions mOptions;
+			if (mWsScheme.equals("wss")) {
 
+				SSLSocketFactory fctry = (SSLSocketFactory)SSLSocketFactory.getDefault();
 
-   /**
-    * Asynch socket connector.
-    */
-   private class WebSocketConnector extends AsyncTask<Void, Void, String> {
+				SSLSocket secSoc = (SSLSocket)fctry.createSocket(mWsHost, mWsPort);
+				secSoc.setUseClientMode(true);
+				secSoc.addHandshakeCompletedListener(new HandshakeCompletedListener() {
+					public void handshakeCompleted(HandshakeCompletedEvent event) {
+						Log.d(TAG, "ssl handshake completed");
+					}
+				});
 
-      @Override
-      protected String doInBackground(Void... params) {
+				soc = secSoc;
 
-         Thread.currentThread().setName("WebSocketConnector");
+			} else {
+				// connect TCP socket
+				// http://developer.android.com/reference/java/net/Socket.html
+				//
+				soc = new Socket(mWsHost, mWsPort);
+			}
+			return soc;
+		}
 
-         // connect TCP socket
-         // http://developer.android.com/reference/java/nio/channels/SocketChannel.html
-         //
-         try {
-            mTransportChannel = SocketChannel.open();
+		@Override
+		protected String doInBackground(Void... params) {
 
-            // the following will block until connection was established or an error occurred!
-            mTransportChannel.socket().connect(new InetSocketAddress(mWsHost, mWsPort), mOptions.getSocketConnectTimeout());
+			Thread.currentThread().setName("WebSocketConnector");
 
-            // before doing any data transfer on the socket, set socket options
-            mTransportChannel.socket().setSoTimeout(mOptions.getSocketReceiveTimeout());
-            mTransportChannel.socket().setTcpNoDelay(mOptions.getTcpNoDelay());
+			try {
+				mTransportChannel = createSocket();
 
-            return null;
+				Log.d(TAG, "is conneced? " + mTransportChannel.isConnected());
 
-         } catch (IOException e) {
+				return null;
 
-            return e.getMessage();
-         }
-      }
+			} catch (IOException e) {
 
-      @Override
-      protected void onPostExecute(String reason) {
+				return e.getMessage();
+			}
+		}
 
-         if (reason != null) {
+		@Override
+		protected void onPostExecute(String reason) {
 
-            mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, reason);
+			if (reason != null) {
 
-         } else if (mTransportChannel.isConnected()) {
+				mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, reason);
 
-            try {
+			} else if (mTransportChannel.isConnected()) {
 
-               // create WebSocket master handler
-               createHandler();
+				try {
 
-               // create & start WebSocket reader
-               createReader();
+					// create WebSocket master handler
+					createHandler();
+					Log.d(TAG, "creating handler");
 
-               // create & start WebSocket writer
-               createWriter();
+					// create & start WebSocket reader
+					createReader();
 
-               // start WebSockets handshake
-               WebSocketMessage.ClientHandshake hs = new WebSocketMessage.ClientHandshake(mWsHost + ":" + mWsPort);
-               hs.mPath = mWsPath;
-               hs.mQuery = mWsQuery;
-               hs.mSubprotocols = mWsSubprotocols;
-               mWriter.forward(hs);
+					// create & start WebSocket writer
+					createWriter();
 
-            } catch (Exception e) {
+					// start WebSockets handshake
+					WebSocketMessage.ClientHandshake hs = new WebSocketMessage.ClientHandshake(mWsHost + ":" + mWsPort);
+					hs.mPath = mWsPath;
+					hs.mQuery = mWsQuery;
+					hs.mSubprotocols = mWsSubprotocols;
+					mWriter.forward(hs);
 
-               mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, e.getMessage());
+				} catch (Exception e) {
 
-            }
+					mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, e.getMessage());
 
-         } else {
+				}
 
-            mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, "could not connect to WebSockets server");
-         }
-      }
+			} else {
 
-   }
+				mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, "could not connect to WebSockets server");
+			}
+		}
 
+	}
 
-   public WebSocketConnection() {
-      if (DEBUG) Log.d(TAG, "created");
-   }
 
+	public WebSocketConnection() {
+		if (DEBUG) Log.d(TAG, "created");
+	}
 
-   public void sendTextMessage(String payload) {
-      mWriter.forward(new WebSocketMessage.TextMessage(payload));
-   }
 
+	public void sendTextMessage(String payload) {
+		mWriter.forward(new WebSocketMessage.TextMessage(payload));
+	}
 
-   public void sendRawTextMessage(byte[] payload) {
-      mWriter.forward(new WebSocketMessage.RawTextMessage(payload));
-   }
 
+	public void sendRawTextMessage(byte[] payload) {
+		mWriter.forward(new WebSocketMessage.RawTextMessage(payload));
+	}
 
-   public void sendBinaryMessage(byte[] payload) {
-      mWriter.forward(new WebSocketMessage.BinaryMessage(payload));
-   }
 
+	public void sendBinaryMessage(byte[] payload) {
+		mWriter.forward(new WebSocketMessage.BinaryMessage(payload));
+	}
 
-   public boolean isConnected() {
-      return mTransportChannel != null && mTransportChannel.isConnected();
-   }
 
+	public boolean isConnected() {
+		return mTransportChannel != null && mTransportChannel.isConnected();
+	}
 
-   private void failConnection(int code, String reason) {
 
-      if (DEBUG) Log.d(TAG, "fail connection [code = " + code + ", reason = " + reason);
+	private void failConnection(int code, String reason) {
 
-      if (mReader != null) {
-         mReader.quit();
-         try {
-            mReader.join();
-         } catch (InterruptedException e) {
-            if (DEBUG) e.printStackTrace();
-         }
-         //mReader = null;
-      } else {
-         if (DEBUG) Log.d(TAG, "mReader already NULL");
-      }
+		if (DEBUG) Log.d(TAG, "fail connection [code = " + code + ", reason = " + reason);
 
-      if (mWriter != null) {
-         //mWriterThread.getLooper().quit();
-         mWriter.forward(new WebSocketMessage.Quit());
-         try {
-            mWriterThread.join();
-         } catch (InterruptedException e) {
-            if (DEBUG) e.printStackTrace();
-         }
-         //mWriterThread = null;
-      } else {
-         if (DEBUG) Log.d(TAG, "mWriter already NULL");
-      }
+		if (mReader != null) {
+			mReader.quit();
+			try {
+				mReader.join();
+			} catch (InterruptedException e) {
+				if (DEBUG) e.printStackTrace();
+			}
+			//mReader = null;
+		} else {
+			if (DEBUG) Log.d(TAG, "mReader already NULL");
+		}
 
-      if (mTransportChannel != null) {
-         try {
-            mTransportChannel.close();
-         } catch (IOException e) {
-            if (DEBUG) e.printStackTrace();
-         }
-         //mTransportChannel = null;
-      } else {
-         if (DEBUG) Log.d(TAG, "mTransportChannel already NULL");
-      }
+		if (mWriter != null) {
+			//mWriterThread.getLooper().quit();
+			mWriter.forward(new WebSocketMessage.Quit());
+			try {
+				mWriterThread.join();
+			} catch (InterruptedException e) {
+				if (DEBUG) e.printStackTrace();
+			}
+			//mWriterThread = null;
+		} else {
+			if (DEBUG) Log.d(TAG, "mWriter already NULL");
+		}
 
-      if (mWsHandler != null) {
-         try {
-            mWsHandler.onClose(code, reason);
-         } catch (Exception e) {
-            if (DEBUG) e.printStackTrace();
-         }
-         //mWsHandler = null;
-      } else {
-         if (DEBUG) Log.d(TAG, "mWsHandler already NULL");
-      }
+		if (mTransportChannel != null) {
+			try {
+				if (DEBUG) Log.d(TAG, "Closing the transport");
+				mTransportChannel.close();
+			} catch (IOException e) {
+				if (DEBUG) e.printStackTrace();
+			}
+			//mTransportChannel = null;
+		} else {
+			if (DEBUG) Log.d(TAG, "mTransportChannel already NULL");
+		}
 
-      if (DEBUG) Log.d(TAG, "worker threads stopped");
-   }
+		if (mWsHandler != null) {
+			try {
+				mWsHandler.onClose(code, reason);
+			} catch (Exception e) {
+				if (DEBUG) e.printStackTrace();
+			}
+			//mWsHandler = null;
+		} else {
+			if (DEBUG) Log.d(TAG, "mWsHandler already NULL");
+		}
 
+		if (DEBUG) Log.d(TAG, "worker threads stopped");
+	}
 
-   public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
-      connect(wsUri, null, wsHandler, new WebSocketOptions());
-   }
 
+	public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
+		connect(wsUri, null, wsHandler, new WebSocketOptions());
+	}
 
-   public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
-      connect(wsUri, null, wsHandler, options);
-   }
 
+	public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
+		connect(wsUri, null, wsHandler, options);
+	}
 
-   public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
 
-      // don't connect if already connected .. user needs to disconnect first
-      //
-      if (mTransportChannel != null && mTransportChannel.isConnected()) {
-         throw new WebSocketException("already connected");
-      }
+	public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
 
-      // parse WebSockets URI
-      //
-      try {
-         mWsUri = new URI(wsUri);
+		// don't connect if already connected .. user needs to disconnect first
+		//
+		if (mTransportChannel != null && mTransportChannel.isConnected()) {
+			throw new WebSocketException("already connected");
+		}
 
-         if (!mWsUri.getScheme().equals("ws") && !mWsUri.getScheme().equals("wss")) {
-            throw new WebSocketException("unsupported scheme for WebSockets URI");
-         }
+		// parse WebSockets URI
+		//
+		try {
+			mWsUri = new URI(wsUri);
 
-         if (mWsUri.getScheme().equals("wss")) {
-            throw new WebSocketException("secure WebSockets not implemented");
-         }
+			if (!mWsUri.getScheme().equals("ws") && !mWsUri.getScheme().equals("wss")) {
+				throw new WebSocketException("unsupported scheme for WebSockets URI");
+			}
 
-         mWsScheme = mWsUri.getScheme();
+			mWsScheme = mWsUri.getScheme();
 
-         if (mWsUri.getPort() == -1) {
-            if (mWsScheme.equals("ws")) {
-               mWsPort = 80;
-            } else {
-               mWsPort = 443;
-            }
-         } else {
-            mWsPort = mWsUri.getPort();
-         }
+			if (mWsUri.getPort() == -1) {
+				if (mWsScheme.equals("ws")) {
+					mWsPort = 80;
+				} else {
+					mWsPort = 443;
+				}
+			} else {
+				mWsPort = mWsUri.getPort();
+			}
 
-         if (mWsUri.getHost() == null) {
-            throw new WebSocketException("no host specified in WebSockets URI");
-         } else {
-            mWsHost = mWsUri.getHost();
-         }
+			if (mWsUri.getHost() == null) {
+				throw new WebSocketException("no host specified in WebSockets URI");
+			} else {
+				mWsHost = mWsUri.getHost();
+			}
 
-         if (mWsUri.getPath() == null || mWsUri.getPath().equals("")) {
-            mWsPath = "/";
-         } else {
-            mWsPath = mWsUri.getPath();
-         }
+			if (mWsUri.getPath() == null || mWsUri.getPath().equals("")) {
+				mWsPath = "/";
+			} else {
+				mWsPath = mWsUri.getPath();
+			}
 
-         if (mWsUri.getQuery() == null || mWsUri.getQuery().equals("")) {
-            mWsQuery = null;
-         } else {
-            mWsQuery = mWsUri.getQuery();
-         }
+			if (mWsUri.getQuery() == null || mWsUri.getQuery().equals("")) {
+				mWsQuery = null;
+			} else {
+				mWsQuery = mWsUri.getQuery();
+			}
 
-      } catch (URISyntaxException e) {
+		} catch (URISyntaxException e) {
 
-         throw new WebSocketException("invalid WebSockets URI");
-      }
+			throw new WebSocketException("invalid WebSockets URI");
+		}
 
-      mWsSubprotocols = wsSubprotocols;
+		mWsSubprotocols = wsSubprotocols;
 
-      mWsHandler = wsHandler;
+		mWsHandler = wsHandler;
 
-      // make copy of options!
-      mOptions = new WebSocketOptions(options);
+		// make copy of options!
+		mOptions = new WebSocketOptions(options);
 
-      // use asynch connector on short-lived background thread
-      new WebSocketConnector().execute();
-   }
+		// use asynch connector on short-lived background thread
+		new WebSocketConnector().execute();
+	}
 
 
-   public void disconnect() {
-      if (mWriter != null) {
-         mWriter.forward(new WebSocketMessage.Close(1000));
-      } else {
-         if (DEBUG) Log.d(TAG, "could not send Close .. writer already NULL");
-      }
-   }
+	public void disconnect() {
+		if (mWriter != null) {
+			mWriter.forward(new WebSocketMessage.Close(1000));
+		} else {
+			if (DEBUG) Log.d(TAG, "could not send Close .. writer already NULL");
+		}
+	}
 
 
-   /**
-    * Create master message handler.
-    */
-   protected void createHandler() {
+	/**
+	 * Create master message handler.
+	 */
+	protected void createHandler() {
 
-      mMasterHandler = new Handler() {
+		mMasterHandler = new Handler() {
 
-         public void handleMessage(Message msg) {
+			public void handleMessage(Message msg) {
 
-            if (msg.obj instanceof WebSocketMessage.TextMessage) {
+				if (msg.obj instanceof WebSocketMessage.TextMessage) {
 
-               WebSocketMessage.TextMessage textMessage = (WebSocketMessage.TextMessage) msg.obj;
+					WebSocketMessage.TextMessage textMessage = (WebSocketMessage.TextMessage) msg.obj;
 
-               if (mWsHandler != null) {
-                  mWsHandler.onTextMessage(textMessage.mPayload);
-               } else {
-                  if (DEBUG) Log.d(TAG, "could not call onTextMessage() .. handler already NULL");
-               }
+					if (mWsHandler != null) {
+						mWsHandler.onTextMessage(textMessage.mPayload);
+					} else {
+						if (DEBUG) Log.d(TAG, "could not call onTextMessage() .. handler already NULL");
+					}
 
-            } else if (msg.obj instanceof WebSocketMessage.RawTextMessage) {
+				} else if (msg.obj instanceof WebSocketMessage.RawTextMessage) {
 
-               WebSocketMessage.RawTextMessage rawTextMessage = (WebSocketMessage.RawTextMessage) msg.obj;
+					WebSocketMessage.RawTextMessage rawTextMessage = (WebSocketMessage.RawTextMessage) msg.obj;
 
-               if (mWsHandler != null) {
-                  mWsHandler.onRawTextMessage(rawTextMessage.mPayload);
-               } else {
-                  if (DEBUG) Log.d(TAG, "could not call onRawTextMessage() .. handler already NULL");
-               }
+					if (mWsHandler != null) {
+						mWsHandler.onRawTextMessage(rawTextMessage.mPayload);
+					} else {
+						if (DEBUG) Log.d(TAG, "could not call onRawTextMessage() .. handler already NULL");
+					}
 
-            } else if (msg.obj instanceof WebSocketMessage.BinaryMessage) {
+				} else if (msg.obj instanceof WebSocketMessage.BinaryMessage) {
 
-               WebSocketMessage.BinaryMessage binaryMessage = (WebSocketMessage.BinaryMessage) msg.obj;
+					WebSocketMessage.BinaryMessage binaryMessage = (WebSocketMessage.BinaryMessage) msg.obj;
 
-               if (mWsHandler != null) {
-                  mWsHandler.onBinaryMessage(binaryMessage.mPayload);
-               } else {
-                  if (DEBUG) Log.d(TAG, "could not call onBinaryMessage() .. handler already NULL");
-               }
+					if (mWsHandler != null) {
+						mWsHandler.onBinaryMessage(binaryMessage.mPayload);
+					} else {
+						if (DEBUG) Log.d(TAG, "could not call onBinaryMessage() .. handler already NULL");
+					}
 
-            } else if (msg.obj instanceof WebSocketMessage.Ping) {
+				} else if (msg.obj instanceof WebSocketMessage.Ping) {
 
-               WebSocketMessage.Ping ping = (WebSocketMessage.Ping) msg.obj;
-               if (DEBUG) Log.d(TAG, "WebSockets Ping received");
+					WebSocketMessage.Ping ping = (WebSocketMessage.Ping) msg.obj;
+					if (DEBUG) Log.d(TAG, "WebSockets Ping received");
 
-               // reply with Pong
-               WebSocketMessage.Pong pong = new WebSocketMessage.Pong();
-               pong.mPayload = ping.mPayload;
-               mWriter.forward(pong);
+					// reply with Pong
+					WebSocketMessage.Pong pong = new WebSocketMessage.Pong();
+					pong.mPayload = ping.mPayload;
+					mWriter.forward(pong);
 
-            } else if (msg.obj instanceof WebSocketMessage.Pong) {
+				} else if (msg.obj instanceof WebSocketMessage.Pong) {
 
-               @SuppressWarnings("unused")
-               WebSocketMessage.Pong pong = (WebSocketMessage.Pong) msg.obj;
+					@SuppressWarnings("unused")
+					WebSocketMessage.Pong pong = (WebSocketMessage.Pong) msg.obj;
 
-               if (DEBUG) Log.d(TAG, "WebSockets Pong received");
+					if (DEBUG) Log.d(TAG, "WebSockets Pong received");
 
-            } else if (msg.obj instanceof WebSocketMessage.Close) {
+				} else if (msg.obj instanceof WebSocketMessage.Close) {
 
-               WebSocketMessage.Close close = (WebSocketMessage.Close) msg.obj;
+					WebSocketMessage.Close close = (WebSocketMessage.Close) msg.obj;
 
-               if (DEBUG) Log.d(TAG, "WebSockets Close received (" + close.mCode + " - " + close.mReason + ")");
+					if (DEBUG) Log.d(TAG, "WebSockets Close received (" + close.mCode + " - " + close.mReason + ")");
 
-               mWriter.forward(new WebSocketMessage.Close(1000));
+					mWriter.forward(new WebSocketMessage.Close(1000));
 
-            } else if (msg.obj instanceof WebSocketMessage.ServerHandshake) {
+				} else if (msg.obj instanceof WebSocketMessage.ServerHandshake) {
 
-               @SuppressWarnings("unused")
-               WebSocketMessage.ServerHandshake serverHandshake = (WebSocketMessage.ServerHandshake) msg.obj;
+					@SuppressWarnings("unused")
+					WebSocketMessage.ServerHandshake serverHandshake = (WebSocketMessage.ServerHandshake) msg.obj;
 
-               if (DEBUG) Log.d(TAG, "opening handshake received");
+					if (DEBUG) Log.d(TAG, "opening handshake received");
 
-               if (mWsHandler != null) {
-                  mWsHandler.onOpen();
-               } else {
-                  if (DEBUG) Log.d(TAG, "could not call onOpen() .. handler already NULL");
-               }
+					if (mWsHandler != null) {
+						mWsHandler.onOpen();
+					} else {
+						if (DEBUG) Log.d(TAG, "could not call onOpen() .. handler already NULL");
+					}
 
-            } else if (msg.obj instanceof WebSocketMessage.ConnectionLost) {
+				} else if (msg.obj instanceof WebSocketMessage.ConnectionLost) {
 
-               @SuppressWarnings("unused")
-               WebSocketMessage.ConnectionLost connnectionLost = (WebSocketMessage.ConnectionLost) msg.obj;
-               failConnection(WebSocketConnectionHandler.CLOSE_CONNECTION_LOST, "WebSockets connection lost");
+					@SuppressWarnings("unused")
+					WebSocketMessage.ConnectionLost connnectionLost = (WebSocketMessage.ConnectionLost) msg.obj;
+					failConnection(WebSocketConnectionHandler.CLOSE_CONNECTION_LOST, "WebSockets connection lost");
 
-            } else if (msg.obj instanceof WebSocketMessage.ProtocolViolation) {
+				} else if (msg.obj instanceof WebSocketMessage.ProtocolViolation) {
 
-               @SuppressWarnings("unused")
-               WebSocketMessage.ProtocolViolation protocolViolation = (WebSocketMessage.ProtocolViolation) msg.obj;
-               failConnection(WebSocketConnectionHandler.CLOSE_PROTOCOL_ERROR, "WebSockets protocol violation");
+					@SuppressWarnings("unused")
+					WebSocketMessage.ProtocolViolation protocolViolation = (WebSocketMessage.ProtocolViolation) msg.obj;
+					failConnection(WebSocketConnectionHandler.CLOSE_PROTOCOL_ERROR, "WebSockets protocol violation");
 
-            } else if (msg.obj instanceof WebSocketMessage.Error) {
+				} else if (msg.obj instanceof WebSocketMessage.Error) {
 
-               WebSocketMessage.Error error = (WebSocketMessage.Error) msg.obj;
-               failConnection(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, "WebSockets internal error (" + error.mException.toString() + ")");
+					WebSocketMessage.Error error = (WebSocketMessage.Error) msg.obj;
+					failConnection(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, "WebSockets internal error (" + error.mException.toString() + ")");
 
-            } else {
+				} else {
 
-               processAppMessage(msg.obj);
+					processAppMessage(msg.obj);
 
-            }
-         }
-      };
-   }
+				}
+			}
+		};
+	}
 
 
-   protected void processAppMessage(Object message) {
-   }
+	protected void processAppMessage(Object message) {
+	}
 
 
-   /**
-    * Create WebSockets background writer.
-    */
-   protected void createWriter() {
+	/**
+	 * Create WebSockets background writer.
+	 */
+	protected void createWriter() {
 
-      mWriterThread = new HandlerThread("WebSocketWriter");
-      mWriterThread.start();
-      mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mOptions);
+		mWriterThread = new HandlerThread("WebSocketWriter");
+		mWriterThread.start();
+		mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mOptions);
 
-      if (DEBUG) Log.d(TAG, "WS writer created and started");
-   }
+		if (DEBUG) Log.d(TAG, "WS writer created and started");
+	}
 
 
-   /**
-    * Create WebSockets background reader.
-    */
-   protected void createReader() {
+	/**
+	 * Create WebSockets background reader.
+	 */
+	protected void createReader() {
 
-      mReader = new WebSocketReader(mMasterHandler, mTransportChannel, mOptions, "WebSocketReader");
-      mReader.start();
+		mReader = new WebSocketReader(mMasterHandler, mTransportChannel, mOptions, "WebSocketReader");
+		mReader.start();
 
-      if (DEBUG) Log.d(TAG, "WS reader created and started");
-   }
+		if (DEBUG) Log.d(TAG, "WS reader created and started");
+	}
 }
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
index be73874..51dcf46 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
@@ -19,6 +19,7 @@
 package de.tavendo.autobahn;
 
 import java.io.UnsupportedEncodingException;
+import java.net.Socket;
 import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 
@@ -39,7 +40,7 @@
    private static final String TAG = WebSocketReader.class.getName();
 
    private final Handler mMaster;
-   private final SocketChannel mSocket;
+   private final Socket mSocket;
    private final WebSocketOptions mOptions;
 
    private final ByteBuffer mFrameBuffer;
@@ -81,14 +82,14 @@
     * Create new WebSockets background reader.
     *
     * @param master    The message handler of master (foreground thread).
-    * @param socket    The socket channel created on foreground thread.
+    * @param mTransportChannel    The socket channel created on foreground thread.
     */
-   public WebSocketReader(Handler master, SocketChannel socket, WebSocketOptions options, String threadName) {
+   public WebSocketReader(Handler master, Socket mTransportChannel, WebSocketOptions options, String threadName) {
 
       super(threadName);
 
       mMaster = master;
-      mSocket = socket;
+      mSocket = mTransportChannel;
       mOptions = options;
 
       mFrameBuffer = ByteBuffer.allocateDirect(options.getMaxFramePayloadSize() + 14);
@@ -564,22 +565,25 @@ private boolean consumeData() throws Exception {
    @Override
    public void run() {
 
-      if (DEBUG) Log.d(TAG, "running");
+      if (DEBUG) Log.d(TAG, "running - connection: " + mSocket.isConnected());
 
       try {
 
          mFrameBuffer.clear();
+         byte readbuff[] = new byte[mFrameBuffer.capacity()];
+         
          do {
-            // blocking read on socket
-            int len = mSocket.read(mFrameBuffer);
+        	// blocking read on socket
+            int len = mSocket.getInputStream().read(readbuff, 0, readbuff.length);
             if (len > 0) {
+               mFrameBuffer.put(readbuff, 0, len);
                // process buffered data
                while (consumeData()) {
                }
             } else if (len < 0) {
 
-               if (DEBUG) Log.d(TAG, "run() : ConnectionLost");
-
+               if (DEBUG) Log.d(TAG, "run() : ConnectionLost - " + mSocket.isConnected());
+               
                notify(new WebSocketMessage.ConnectionLost());
                mStopped = true;
             }
@@ -587,14 +591,14 @@ public void run() {
 
       } catch (WebSocketException e) {
 
-         if (DEBUG) Log.d(TAG, "run() : WebSocketException (" + e.toString() + ")");
+         if (DEBUG) Log.d(TAG, "run() : WebSocketException (" + e.toString() + ")", e);
 
          // wrap the exception and notify master
          notify(new WebSocketMessage.ProtocolViolation(e));
 
       } catch (Exception e) {
 
-         if (DEBUG) Log.d(TAG, "run() : Exception (" + e.toString() + ")");
+         if (DEBUG) Log.d(TAG, "run() : Exception (" + e.toString() + ")", e);
 
          // wrap the exception and notify master
          notify(new WebSocketMessage.Error(e));
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index 713b4f2..0fdb978 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -19,6 +19,7 @@
 package de.tavendo.autobahn;
 
 import java.io.IOException;
+import java.net.Socket;
 import java.nio.channels.SocketChannel;
 import java.util.Random;
 
@@ -51,7 +52,7 @@
    private final Looper mLooper;
 
    /// The NIO socket channel created on foreground thread.
-   private final SocketChannel mSocket;
+   private final Socket mSocket;
 
    /// WebSockets options.
    private final WebSocketOptions mOptions;
@@ -66,16 +67,16 @@
     * @param looper    The message looper of the background thread on which
     *                  this object is running.
     * @param master    The message handler of master (foreground thread).
-    * @param socket    The socket channel created on foreground thread.
+    * @param mTransportChannel    The socket channel created on foreground thread.
     * @param options   WebSockets connection options.
     */
-   public WebSocketWriter(Looper looper, Handler master, SocketChannel socket, WebSocketOptions options) {
+   public WebSocketWriter(Looper looper, Handler master, Socket mTransportChannel, WebSocketOptions options) {
 
       super(looper);
 
       mLooper = looper;
       mMaster = master;
-      mSocket = socket;
+      mSocket = mTransportChannel;
       mOptions = options;
       mBuffer = new ByteBufferOutputStream(options.getMaxFramePayloadSize() + 14, 4*64*1024);
 
@@ -375,6 +376,8 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
    public void handleMessage(Message msg) {
 
       try {
+    	 
+    	 
 
          // clear send buffer
          mBuffer.clear();
@@ -384,10 +387,11 @@ public void handleMessage(Message msg) {
 
          // send out buffered data
          mBuffer.flip();
-         while (mBuffer.remaining() > 0) {
-            // this can block on socket write
-            @SuppressWarnings("unused")
-            int written = mSocket.write(mBuffer.getBuffer());
+         if (mBuffer.remaining() > 0) {
+        	byte arr[] = new byte[mBuffer.remaining()];
+        	mBuffer.getBuffer().get(arr);
+        	// this can block on socket write
+            mSocket.getOutputStream().write(arr);
          }
 
       } catch (Exception e) {
