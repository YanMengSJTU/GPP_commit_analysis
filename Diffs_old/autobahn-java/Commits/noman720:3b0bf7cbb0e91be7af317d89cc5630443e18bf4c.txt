diff --git a/autobahn/src/main/java/io/crossbar/autobahn/websocket/WebSocketConnection.java b/autobahn/src/main/java/io/crossbar/autobahn/websocket/WebSocketConnection.java
index e7d5a7d..7f9cff6 100644
--- a/autobahn/src/main/java/io/crossbar/autobahn/websocket/WebSocketConnection.java
+++ b/autobahn/src/main/java/io/crossbar/autobahn/websocket/WebSocketConnection.java
@@ -125,8 +125,8 @@ public void run() {
                     mSocket = SocketFactory.getDefault().createSocket();
                 }
 
-                if (mOptions.getEnableTls()){
-                    enableTLSOnSocket(mSocket);
+                if (mOptions.getTLSEnabledProtocols() != null){
+                    setEnabledProtocolsOnSSLSocket(mSocket, mOptions.getTLSEnabledProtocols());
                 }
 
                 // the following will block until connection was established or
@@ -681,12 +681,13 @@ private void createReader() throws IOException {
     }
 
     /**
-     * Enable TLS manually on socket. It's basically need for android api level < 20.
+     * Enable protocols on SSLSocket.
      * @param socket
+     * @param protocols
      */
-    private void enableTLSOnSocket(Socket socket) {
+    private void setEnabledProtocolsOnSSLSocket(Socket socket, String[] protocols) {
         if(socket != null && (socket instanceof SSLSocket)) {
-            ((SSLSocket)socket).setEnabledProtocols(new String[] {"TLSv1.1", "TLSv1.2"});
+            ((SSLSocket)socket).setEnabledProtocols(protocols);
         }
     }
 }
diff --git a/autobahn/src/main/java/io/crossbar/autobahn/websocket/types/WebSocketOptions.java b/autobahn/src/main/java/io/crossbar/autobahn/websocket/types/WebSocketOptions.java
index 58a4bbc..fdf5caa 100644
--- a/autobahn/src/main/java/io/crossbar/autobahn/websocket/types/WebSocketOptions.java
+++ b/autobahn/src/main/java/io/crossbar/autobahn/websocket/types/WebSocketOptions.java
@@ -28,7 +28,7 @@
     private boolean mValidateIncomingUtf8;
     private boolean mMaskClientFrames;
     private int mReconnectInterval;
-    private boolean mEnableTls;
+    private String[] mTlsProtocols;
 
 
     /**
@@ -45,7 +45,7 @@ public WebSocketOptions() {
         mValidateIncomingUtf8 = true;
         mMaskClientFrames = true;
         mReconnectInterval = 0;  // no reconnection by default
-        mEnableTls = false;
+        mTlsProtocols = null;
     }
 
     /**
@@ -64,7 +64,7 @@ public WebSocketOptions(WebSocketOptions other) {
         mValidateIncomingUtf8 = other.mValidateIncomingUtf8;
         mMaskClientFrames = other.mMaskClientFrames;
         mReconnectInterval = other.mReconnectInterval;
-        mEnableTls = other.mEnableTls;
+        mTlsProtocols = other.mTlsProtocols;
     }
 
     /**
@@ -266,11 +266,19 @@ public int getReconnectInterval() {
         return mReconnectInterval;
     }
 
-    public boolean getEnableTls() {
-        return mEnableTls;
+    /**
+     * Get TLS enabled protocols.
+     * @return
+     */
+    public String[] getTLSEnabledProtocols() {
+        return mTlsProtocols;
     }
 
-    public void setEnableTls(boolean enable) {
-        this.mEnableTls = enable;
+    /**
+     * Set TLS enabled protocols. Eg. protocols = new String[]{"TLSv1.1", "TLSv1.2"}
+     * @param protocols
+     */
+    public void setTLSEnabledProtocols(String[] protocols) {
+        this.mTlsProtocols = protocols;
     }
 }
