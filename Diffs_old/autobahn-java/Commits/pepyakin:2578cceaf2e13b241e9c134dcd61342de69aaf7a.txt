diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 7c8d0e9..aa8c611 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -58,6 +58,8 @@
    private boolean mActive;
    private boolean mPrevConnected;
 
+   private Runnable mActivityCheck;
+
    /**
     * Asynch socket connector.
     */
@@ -115,6 +117,8 @@ protected void onPostExecute(String reason) {
                
                mPrevConnected = true;
 
+               resetActivityCheck();
+
             } catch (Exception e) {
 
                onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, e.getMessage());
@@ -202,6 +206,11 @@ private void failConnection(int code, String reason) {
          if (DEBUG) Log.d(TAG, "mTransportChannel already NULL");
       }
 
+      // stop activity check
+      if (mActivityCheck != null) {
+         mMasterHandler.removeCallbacks(mActivityCheck);
+      }
+
       onClose(code, reason);
 
       if (DEBUG) Log.d(TAG, "worker threads stopped");
@@ -297,6 +306,11 @@ public void disconnect() {
       }
       mActive = false;
       mPrevConnected = false;
+
+      if (mActivityCheck != null) {
+         mMasterHandler.removeCallbacks(mActivityCheck);
+         mActivityCheck = null;
+      }
    }
    
    /**
@@ -379,6 +393,8 @@ protected void createHandler() {
 
          public void handleMessage(Message msg) {
 
+            resetActivityCheck();
+
             if (msg.obj instanceof WebSocketMessage.TextMessage) {
 
                WebSocketMessage.TextMessage textMessage = (WebSocketMessage.TextMessage) msg.obj;
@@ -507,4 +523,30 @@ protected void createReader() {
 
       if (DEBUG) Log.d(TAG, "WS reader created and started");
    }
+
+   protected void resetActivityCheck() {
+	   if (mActivityCheck != null) {
+		   mMasterHandler.removeCallbacks(mActivityCheck);
+	   }
+	   mActivityCheck = new Runnable() {
+
+		   public void run() {
+			   if (DEBUG) Log.w(TAG, "Send ping");
+
+			   mWriter.forward(new WebSocketMessage.Ping());
+
+			   mActivityCheck = new Runnable() {
+
+				   public void run() {
+					   if (DEBUG) Log.w(TAG, "No activity - connection lost");
+
+					   failConnection(WebSocketConnectionHandler.CLOSE_CONNECTION_LOST, "No activity");
+					   mActivityCheck = null;
+				   }
+			   };
+			   mMasterHandler.postDelayed(mActivityCheck, mOptions.getPongTimeout());
+		   }
+	   };
+	   mMasterHandler.postDelayed(mActivityCheck, mOptions.getActivityTimeout());
+   }
 }
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java b/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
index 9b4df3e..90c7d64 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
@@ -36,6 +36,8 @@
    private boolean mValidateIncomingUtf8;
    private boolean mMaskClientFrames;
    private int mReconnectInterval;
+   private int mActivityTimeout;
+   private int mPongTimeout;
 
 
    /**
@@ -52,6 +54,8 @@ public WebSocketOptions() {
       mValidateIncomingUtf8 = true;
       mMaskClientFrames = true;
       mReconnectInterval = 0;  // no reconnection by default
+      mActivityTimeout = 120000;
+      mPongTimeout = 30000;
    }
 
    /**
@@ -70,6 +74,8 @@ public WebSocketOptions(WebSocketOptions other) {
       mValidateIncomingUtf8 = other.mValidateIncomingUtf8;
       mMaskClientFrames = other.mMaskClientFrames;
       mReconnectInterval = other.mReconnectInterval;
+      mActivityTimeout = other.mActivityTimeout;
+      mPongTimeout = other.mPongTimeout;
    }
 
    /**
@@ -267,7 +273,52 @@ public void setReconnectInterval(int reconnectInterval) {
 	   mReconnectInterval = reconnectInterval;
    }
    
+   /**
+    * Get reconnect interval
+    *
+    * @return reconnect interval in ms
+    */
    public int getReconnectInterval() {
 	   return mReconnectInterval;
    }
+
+   /**
+    * Set activity timeout
+    *
+    * DEFAULT: 120000
+    *
+    * @param activityTimeout activity timeout in ms
+    */
+   public void setActivityTimeout(int activityTimeout) {
+	   mActivityTimeout = activityTimeout;
+   }
+
+   /**
+    * Get activity timeout
+    *
+    * @return activity timeout in ms
+    */
+   public int getActivityTimeout() {
+	   return mActivityTimeout;
+   }
+
+   /**
+    * Set pong timeout
+    *
+    * DEFAULT: 30000
+    *
+    * @param pongTimeout pong timeout in ms
+    */
+   public void setPongTimeout(int pongTimeout) {
+	   mPongTimeout = pongTimeout;
+   }
+
+   /**
+    * Get pong timeout
+    *
+    * @return pong timeout in ms
+    */
+   public int getPongTimeout() {
+	   return mPongTimeout;
+   }
 }
