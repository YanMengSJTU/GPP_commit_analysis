diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 2f30ae4..4876242 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -48,6 +48,9 @@
     private static final boolean DEBUG = true;
     private static final String TAG = WebSocketConnection.class.getName();
 
+    public static final int MSG_NOTIFY = 1;
+    private static final int MSG_RECONNECT = 2;
+
     protected Handler mMasterHandler;
 
     protected WebSocketReader mReader;
@@ -286,11 +289,8 @@ private void failConnection(int code, String reason) {
             if (DEBUG) Log.d(TAG, "mWriter already NULL");
         }
 
-
-        // stop activity check
-        if (mActivityCheck != null) {
-            mMasterHandler.removeCallbacks(mActivityCheck);
-        }
+        unscheduleActivityCheck();
+        unscheduleReconnect();
 
         onClose(code, reason);
 
@@ -298,6 +298,7 @@ private void failConnection(int code, String reason) {
     }
 
 
+
     public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
         connect(wsUri, null, wsHandler, new WebSocketOptions());
     }
@@ -384,15 +385,19 @@ public void disconnect() {
         mActive = false;
         mPrevConnected = false;
 
+        unscheduleActivityCheck();
+        unscheduleReconnect();
+    }
+
+    private void unscheduleActivityCheck() {
         if (mActivityCheck != null) {
             mMasterHandler.removeCallbacks(mActivityCheck);
             mActivityCheck = null;
         }
+    }
 
-        if (mReconnectionCallback != null) {
-            mMasterHandler.removeCallbacks(mReconnectionCallback);
-            mReconnectionCallback = null;
-        }
+    private void unscheduleReconnect() {
+        mMasterHandler.removeMessages(MSG_RECONNECT);
     }
 
     /**
@@ -402,10 +407,13 @@ public void disconnect() {
      */
     public boolean reconnect() {
         if (!isConnected() && (mWsUri != null)) {
+            if (DEBUG) Log.d(TAG, "performing reconnect");
             new WebSocketConnector().execute();
             return true;
+        } else {
+            if (DEBUG) Log.d(TAG, "not performing reconnect, isConnected: " + isConnected());
+            return false;
         }
-        return false;
     }
 
     /**
@@ -423,15 +431,10 @@ protected boolean scheduleReconnect() {
         int interval = mOptions.getReconnectInterval();
         boolean need = mActive && mPrevConnected && (interval > 0);
         if (need) {
-            if (DEBUG) Log.d(TAG, "Reconnection scheduled");
-            mReconnectionCallback = new Runnable() {
+            unscheduleReconnect();
 
-                public void run() {
-                    if (DEBUG) Log.d(TAG, "Reconnecting...");
-                    reconnect();
-                }
-            };
-            mMasterHandler.postDelayed(mReconnectionCallback, interval);
+            if (DEBUG) Log.d(TAG, "Reconnection scheduled");
+            mMasterHandler.sendEmptyMessageDelayed(MSG_RECONNECT, interval);
         }
         return need;
     }
@@ -478,6 +481,21 @@ protected void createHandler() {
 
             public void handleMessage(Message msg) {
 
+                switch (msg.what) {
+                    case MSG_RECONNECT:
+                        if (DEBUG) Log.d(TAG, "Reconnecting...");
+                        reconnect();
+                        unscheduleReconnect();
+                        break;
+
+                    case MSG_NOTIFY:
+                    default:
+                        handleNotify(msg);
+                        break;
+                }
+            }
+
+            private void handleNotify(Message msg) {
                 resetActivityCheck();
 
                 if (msg.obj instanceof WebSocketMessage.TextMessage) {
@@ -612,9 +630,8 @@ protected void createReader() {
     }
 
     protected void resetActivityCheck() {
-        if (mActivityCheck != null) {
-            mMasterHandler.removeCallbacks(mActivityCheck);
-        }
+        unscheduleActivityCheck();
+
         mActivityCheck = new Runnable() {
 
             public void run() {
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
index ecfbcc5..a9819cc 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
@@ -128,6 +128,7 @@ protected void notify(Object message) {
 
       Message msg = mMaster.obtainMessage();
       msg.obj = message;
+      msg.what = WebSocketConnection.MSG_NOTIFY;
       mMaster.sendMessage(msg);
    }
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index 3f80d4b..fc4a542 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -111,6 +111,7 @@ private void notify(Object message) {
 
       Message msg = mMaster.obtainMessage();
       msg.obj = message;
+      msg.what = WebSocketConnection.MSG_NOTIFY;
       mMaster.sendMessage(msg);
    }
 
