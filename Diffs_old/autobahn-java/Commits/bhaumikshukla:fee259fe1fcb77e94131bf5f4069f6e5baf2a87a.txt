diff --git a/Autobahn/src/de/tavendo/autobahn/Wamp.java b/Autobahn/src/de/tavendo/autobahn/Wamp.java
index a563239..205e0eb 100644
--- a/Autobahn/src/de/tavendo/autobahn/Wamp.java
+++ b/Autobahn/src/de/tavendo/autobahn/Wamp.java
@@ -19,6 +19,9 @@
 package de.tavendo.autobahn;
 
 
+import java.util.List;
+
+import org.apache.http.message.BasicNameValuePair;
 import org.codehaus.jackson.type.TypeReference;
 
 /**
@@ -66,7 +69,7 @@
     * @param wsUri            The WebSockets URI of the server.
     * @param sessionHandler   The handler for the session.
     */
-   public void connect(String wsUri, ConnectionHandler sessionHandler);
+   public void connect(String wsUri, ConnectionHandler sessionHandler, List<BasicNameValuePair> headers);
 
 
    /**
@@ -76,7 +79,7 @@
     * @param sessionHandler   The handler for the session.
     * @param options          WebSockets and Autobahn option.s
     */
-   public void connect(String wsUri, ConnectionHandler sessionHandler, WampOptions options);
+   public void connect(String wsUri, ConnectionHandler sessionHandler, WampOptions options, List<BasicNameValuePair> headers);
 
 
    /**
diff --git a/Autobahn/src/de/tavendo/autobahn/WampConnection.java b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
index 6e85d65..428dd8a 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
@@ -18,9 +18,11 @@
 
 package de.tavendo.autobahn;
 
+import java.util.List;
 import java.util.Random;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.http.message.BasicNameValuePair;
 import org.codehaus.jackson.type.TypeReference;
 
 import android.os.HandlerThread;
@@ -159,7 +161,7 @@ private String newId() {
    }
 
 
-   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler) {
+   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler, List<BasicNameValuePair> headers) {
 
       WampOptions options = new WampOptions();
       options.setReceiveTextMessagesRaw(true);
@@ -167,7 +169,7 @@ public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler) {
       options.setMaxFramePayloadSize(64*1024);
       options.setTcpNoDelay(true);
 
-      connect(wsUri, sessionHandler, options);
+      connect(wsUri, sessionHandler, options, headers);
    }
 
 
@@ -177,7 +179,7 @@ public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler) {
     * @param wsUri            WebSockets server URI.
     * @param sessionHandler   The session handler to fire callbacks on.
     */
-   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler, WampOptions options) {
+   public void connect(String wsUri, Wamp.ConnectionHandler sessionHandler, WampOptions options, List<BasicNameValuePair> headers) {
 
       mSessionHandler = sessionHandler;
 
@@ -206,7 +208,7 @@ public void onClose(int code, String reason) {
                }
             }
 
-         }, options);
+         }, options , headers);
 
       } catch (WebSocketException e) {
 
@@ -285,8 +287,8 @@ private void call(String procUri, CallMeta resultMeta, Object... arguments) {
       for (int i = 0; i < arguments.length; ++i) {
          call.mArgs[i] = arguments[i];
       }
-      mCalls.put(call.mCallId, resultMeta);
       mWriter.forward(call);
+      mCalls.put(call.mCallId, resultMeta);
    }
 
 
@@ -332,11 +334,12 @@ private void subscribe(String topicUri, SubMeta meta) {
 
       if (!mSubs.containsKey(uri)) {
 
-         mSubs.put(uri, meta);
-
          WampMessage.Subscribe msg = new WampMessage.Subscribe(mOutgoingPrefixes.shrink(topicUri));
          mWriter.forward(msg);
       }
+      
+      System.out.println("mSubs.put >> " + uri);
+      mSubs.put(uri, meta);
    }
 
 
@@ -379,8 +382,6 @@ public void unsubscribe(String topicUri) {
 
          WampMessage.Unsubscribe msg = new WampMessage.Unsubscribe(topicUri);
          mWriter.forward(msg);
-         
-         mSubs.remove(topicUri);
       }
    }
 
@@ -394,8 +395,7 @@ public void unsubscribe() {
 
          WampMessage.Unsubscribe msg = new WampMessage.Unsubscribe(topicUri);
          mWriter.forward(msg);
-      }
-      mSubs.clear();
+     }
    }
 
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WampReader.java b/Autobahn/src/de/tavendo/autobahn/WampReader.java
index 0f3f656..caac491 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampReader.java
@@ -19,15 +19,18 @@
 package de.tavendo.autobahn;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.http.util.ByteArrayBuffer;
 import org.codehaus.jackson.JsonFactory;
 import org.codehaus.jackson.JsonParseException;
 import org.codehaus.jackson.JsonParser;
 import org.codehaus.jackson.JsonToken;
 import org.codehaus.jackson.map.DeserializationConfig;
 import org.codehaus.jackson.map.ObjectMapper;
+import org.json.JSONArray;
 
 import android.os.Handler;
 import android.util.Log;
@@ -104,7 +107,21 @@ protected void onRawTextMessage(byte[] payload) {
       try {
 
          // create parser on top of raw UTF-8 payload
+    	/* JSONArray jArray =  new JSONArray();
+    	 jArray.put(8);
+    	 jArray.put("http://example.com/simple");
+    	 jArray.put(new String(payload));
+    	 
+    	 System.out.println(jArray.toString());
+    	 
+    	 JsonParser parser = mJsonFactory.createJsonParser(jArray.toString().getBytes());*/
+    	  
          JsonParser parser = mJsonFactory.createJsonParser(payload);
+/*         
+         String str= new String(payload);
+         
+         System.out.println("Parser info: " + str);
+         System.out.println("Parser next token: " + parser.nextToken().toString());*/
 
          // all Autobahn messages are JSON arrays
          if (parser.nextToken() == JsonToken.START_ARRAY) {
@@ -168,6 +185,7 @@ protected void onRawTextMessage(byte[] payload) {
                   // topic URI
                   parser.nextToken();
                   String topicUri = parser.getText();
+                  System.out.println("TOPIC URI>>>>" +  topicUri);   
 
                   // event
                   parser.nextToken();
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 5a9ed02..bbf13de 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -23,7 +23,11 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.nio.channels.SocketChannel;
+import java.util.List;
 
+import org.apache.http.message.BasicNameValuePair;
+
+import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Message;
@@ -49,6 +53,7 @@
    private String mWsPath;
    private String mWsQuery;
    private String[] mWsSubprotocols;
+   private List<BasicNameValuePair> mWsHeaders;
 
    private WebSocket.ConnectionHandler mWsHandler;
 
@@ -57,72 +62,78 @@
    private boolean mActive;
    private boolean mPrevConnected;
 
-	/**
-	 * Asynchronous socket connector.
-	 */
-	private class WebSocketConnector extends Thread {
-
-		public void run() {
-			Thread.currentThread().setName("WebSocketConnector");
-
-			/*
-			 * connect TCP socket
-			 */
-			try {
-				mTransportChannel = SocketChannel.open();
-
-				// the following will block until connection was established or
-				// an error occurred!
-				mTransportChannel.socket().connect(
-						new InetSocketAddress(mWsHost, mWsPort),
-						mOptions.getSocketConnectTimeout());
-
-				// before doing any data transfer on the socket, set socket
-				// options
-				mTransportChannel.socket().setSoTimeout(
-						mOptions.getSocketReceiveTimeout());
-				mTransportChannel.socket().setTcpNoDelay(
-						mOptions.getTcpNoDelay());
-
-			} catch (IOException e) {
-				onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT,
-						e.getMessage());
-				return;
-			}
+   /**
+    * Asynch socket connector.
+    */
+   private class WebSocketConnector extends AsyncTask<Void, Void, String> {
 
-			if (mTransportChannel.isConnected()) {
+      @Override
+      protected String doInBackground(Void... params) {
 
-				try {
+         Thread.currentThread().setName("WebSocketConnector");
 
-					// create & start WebSocket reader
-					createReader();
+         // connect TCP socket
+         // http://developer.android.com/reference/java/nio/channels/SocketChannel.html
+         //
+         try {
+            mTransportChannel = SocketChannel.open();
 
-					// create & start WebSocket writer
-					createWriter();
+            // the following will block until connection was established or an error occurred!
+            mTransportChannel.socket().connect(new InetSocketAddress(mWsHost, mWsPort), mOptions.getSocketConnectTimeout());
 
-					// start WebSockets handshake
-					WebSocketMessage.ClientHandshake hs = new WebSocketMessage.ClientHandshake(
-							mWsHost + ":" + mWsPort);
-					hs.mPath = mWsPath;
-					hs.mQuery = mWsQuery;
-					hs.mSubprotocols = mWsSubprotocols;
-					mWriter.forward(hs);
+            // before doing any data transfer on the socket, set socket options
+            mTransportChannel.socket().setSoTimeout(mOptions.getSocketReceiveTimeout());
+            mTransportChannel.socket().setTcpNoDelay(mOptions.getTcpNoDelay());
 
-					mPrevConnected = true;
+            return null;
 
-				} catch (Exception e) {
-					onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR,
-							e.getMessage());
-					return;
-				}
-			} else {
-				onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT,
-						"Could not connect to WebSocket server");
-				return;
-			}
-		}
+         } catch (IOException e) {
+
+            return e.getMessage();
+         }
+      }
+
+      @Override
+      protected void onPostExecute(String reason) {
+
+         if (reason != null) {
+
+            onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, reason);
+
+         } else if (mTransportChannel.isConnected()) {
+
+            try {
+
+               // create & start WebSocket reader
+               createReader();
+
+               // create & start WebSocket writer
+               createWriter();
+
+               // start WebSockets handshake
+               WebSocketMessage.ClientHandshake hs = new WebSocketMessage.ClientHandshake(mWsHost + ":" + mWsPort);
+               hs.mPath = mWsPath;
+               hs.mQuery = mWsQuery;
+               hs.mSubprotocols = mWsSubprotocols;
+               hs.mHeaderList = mWsHeaders;
+               mWriter.forward(hs);
+               
+               mPrevConnected = true;
+
+            } catch (Exception e) {
+
+               onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, e.getMessage());
+
+            }
+
+         } else {
+
+            onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, "could not connect to WebSockets server");
+         }
+      }
+
+   }
 
-	}
 
    public WebSocketConnection() {
       if (DEBUG) Log.d(TAG, "created");
@@ -203,16 +214,16 @@ private void failConnection(int code, String reason) {
 
 
    public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
-      connect(wsUri, null, wsHandler, new WebSocketOptions());
+      connect(wsUri, null, wsHandler, new WebSocketOptions(), null);
    }
 
 
    public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
-      connect(wsUri, null, wsHandler, options);
+      connect(wsUri, null, wsHandler, options, null);
    }
 
 
-   public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
+   public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options, List<BasicNameValuePair> headers) throws WebSocketException {
 
       // don't connect if already connected .. user needs to disconnect first
       //
@@ -269,7 +280,7 @@ public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionH
       }
 
       mWsSubprotocols = wsSubprotocols;
-
+      mWsHeaders = headers;
       mWsHandler = wsHandler;
 
       // make copy of options!
@@ -279,7 +290,7 @@ public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionH
       mActive = true;
 
       // use asynch connector on short-lived background thread
-      new WebSocketConnector().start();
+      new WebSocketConnector().execute();
    }
 
 
@@ -299,7 +310,7 @@ public void disconnect() {
     */
    public boolean reconnect() {
 	   if (!isConnected() && (mWsUri != null)) {
-		   new WebSocketConnector().start();
+		   new WebSocketConnector().execute();
 		   return true;
 	   }
 	   return false;
@@ -372,7 +383,7 @@ protected void createHandler() {
       mMasterHandler = new Handler() {
 
          public void handleMessage(Message msg) {
-
+        	 
             if (msg.obj instanceof WebSocketMessage.TextMessage) {
 
                WebSocketMessage.TextMessage textMessage = (WebSocketMessage.TextMessage) msg.obj;
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java b/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java
index 6825f5b..a34d35a 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketMessage.java
@@ -18,6 +18,10 @@
 
 package de.tavendo.autobahn;
 
+import java.util.List;
+
+import org.apache.http.message.BasicNameValuePair;
+
 /**
  * WebSockets message classes.
  * The master thread and the background reader/writer threads communicate using these messages
@@ -41,12 +45,14 @@
       public String mQuery;
       public String mOrigin;
       public String[] mSubprotocols;
+      public List<BasicNameValuePair> mHeaderList;
 
       ClientHandshake(String host) {
          mHost = host;
          mPath = "/";
          mOrigin = null;
          mSubprotocols = null;
+         mHeaderList = null;
       }
 
       ClientHandshake(String host, String path, String origin) {
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index af18635..8836c79 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -23,6 +23,8 @@
 import java.nio.channels.SocketChannel;
 import java.util.Random;
 
+import org.apache.http.NameValuePair;
+
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
@@ -180,6 +182,15 @@ private void sendClientHandshake(WebSocketMessage.ClientHandshake message) throw
       mBuffer.write("Sec-WebSocket-Version: 13");
       mBuffer.crlf();
 
+      // Header injection
+      
+      if (message.mHeaderList != null) {
+          for (NameValuePair pair : message.mHeaderList) {
+        	  mBuffer.write( pair.getName() + ":" + pair.getValue() );
+        	  mBuffer.crlf();
+          }
+      }     
+      
       mBuffer.crlf();
    }
 
diff --git a/Demo/SimplePubSub/src/de/tavendo/autobahn/simplepubsub/SimplePubSubActivity.java b/Demo/SimplePubSub/src/de/tavendo/autobahn/simplepubsub/SimplePubSubActivity.java
index 899b509..d820d5a 100644
--- a/Demo/SimplePubSub/src/de/tavendo/autobahn/simplepubsub/SimplePubSubActivity.java
+++ b/Demo/SimplePubSub/src/de/tavendo/autobahn/simplepubsub/SimplePubSubActivity.java
@@ -18,7 +18,11 @@
 
 package de.tavendo.autobahn.simplepubsub;
 
+import java.util.Arrays;
 import java.util.Date;
+import java.util.List;
+
+import org.apache.http.message.BasicNameValuePair;
 
 import android.app.Activity;
 import android.content.SharedPreferences;
@@ -33,142 +37,148 @@
 
 public class SimplePubSubActivity extends Activity {
 
-   @SuppressWarnings("unused")
-   private static final String TAG = "de.tavendo.autobahn.simplepubsub";
+	@SuppressWarnings("unused")
+	private static final String TAG = "de.tavendo.autobahn.simplepubsub";
+
+	private static final String PREFS_NAME = "AutobahnAndroidSimplePubSub";
+
+	private SharedPreferences mSettings;
+
+	private static EditText mHostname;
+	private static EditText mPort;
+	private static TextView mStatusline;
+	private static Button mStart;
 
-   private static final String PREFS_NAME = "AutobahnAndroidSimplePubSub";
+	private List<BasicNameValuePair> headers = null;
 
-   private SharedPreferences mSettings;
+	private final Wamp mConnection = new WampConnection();
 
-   private static EditText mHostname;
-   private static EditText mPort;
-   private static TextView mStatusline;
-   private static Button mStart;
+	private void alert(String message) {
+		Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();
+	}
 
-   private final Wamp mConnection = new WampConnection();
+	private void loadPrefs() {
 
-   private void alert(String message) {
-      Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();
-   }
+		mHostname.setText(mSettings.getString("hostname", ""));
+		mPort.setText(mSettings.getString("port", "9000"));
+	}
 
-   private void loadPrefs() {
-
-      mHostname.setText(mSettings.getString("hostname", ""));
-      mPort.setText(mSettings.getString("port", "9000"));
-   }
-
-   private void savePrefs() {
+	private void savePrefs() {
 
-      SharedPreferences.Editor editor = mSettings.edit();
-      editor.putString("hostname", mHostname.getText().toString());
-      editor.putString("port", mPort.getText().toString());
-      editor.commit();
-   }
-
-   private void setButtonConnect() {
-      mStart.setText("Connect");
-      mStart.setOnClickListener(new Button.OnClickListener() {
-         public void onClick(View v) {
-            test();
-         }
-      });
-   }
+		SharedPreferences.Editor editor = mSettings.edit();
+		editor.putString("hostname", mHostname.getText().toString());
+		editor.putString("port", mPort.getText().toString());
+		editor.commit();
+	}
 
-   private void setButtonDisconnect() {
-      mStart.setText("Disconnect");
-      mStart.setOnClickListener(new Button.OnClickListener() {
-         public void onClick(View v) {
-            mConnection.disconnect();
-         }
-      });
-   }
+	private void setButtonConnect() {
+		mStart.setText("Connect");
+		mStart.setOnClickListener(new Button.OnClickListener() {
+			public void onClick(View v) {
+				test();
+			}
+		});
+	}
 
-   /**
-    * We want PubSub events delivered to us in JSON payload to be automatically
-    * converted to this domain POJO. We specify this class later when we subscribe.
-    */
-   private static class MyEvent1 {
+	private void setButtonDisconnect() {
+		mStart.setText("Disconnect");
+		mStart.setOnClickListener(new Button.OnClickListener() {
+			public void onClick(View v) {
+				mConnection.disconnect();
+			}
+		});
+	}
 
-      public int num;
-      public String name;
-      public boolean flag;
-      public Date created;
-      public double rand;
+	/**
+	 * We want PubSub events delivered to us in JSON payload to be automatically
+	 * converted to this domain POJO. We specify this class later when we subscribe.
+	 */
+	private static class MyEvent1 {
 
-      @Override
-      public String toString() {
-         return "{name: " + name +
-                ", created: " + created +
-                ", num: " + num +
-                ", rand: " + rand +
-                ", flag:" + flag + "}";
-      }
-   }
+		public int num;
+		public String name;
+		public boolean flag;
+		public Date created;
+		public double rand;
 
-   private void test() {
+		@Override
+		public String toString() {
+			return "{name: " + name +
+					", created: " + created +
+					", num: " + num +
+					", rand: " + rand +
+					", flag:" + flag + "}";
+		}
+	}
 
-      final String wsuri = "ws://" + mHostname.getText() + ":" + mPort.getText();
+	private void test() {
 
-      mStatusline.setText("Connecting to\n" + wsuri + " ..");
+		final String wsuri = "ws://" + mHostname.getText();// + ":" + mPort.getText();
 
-      setButtonDisconnect();
+		mStatusline.setText("Connecting to\n" + wsuri + " ..");
 
-      // we establish a connection by giving the WebSockets URL of the server
-      // and the handler for open/close events
-      mConnection.connect(wsuri, new Wamp.ConnectionHandler() {
+		setButtonDisconnect();
 
-         @Override
-         public void onOpen() {
+		// we establish a connection by giving the WebSockets URL of the server
+		// and the handler for open/close events
+		mConnection.connect(wsuri, new Wamp.ConnectionHandler() {
 
-            // The connection was successfully established. we set the status
-            // and save the host/port as Android application preference for next time.
-            mStatusline.setText("Connected to\n" + wsuri);
-            savePrefs();
+			@Override
+			public void onOpen() {
 
-            // We establish a prefix to use for writing URIs using shorthand CURIE notation.
-            mConnection.prefix("event", "http://example.com/event#");
+				// The connection was successfully established. we set the status
+				// and save the host/port as Android application preference for next time.
+				mStatusline.setText("Connected to\n" + wsuri);
+				savePrefs();
 
-            // We subscribe to a topic by giving the topic URI, the type we want events
-            // to be converted to, and the event handler we want to have fired.
-            mConnection.subscribe("event:myevent1", MyEvent1.class, new Wamp.EventHandler() {
+				// We establish a prefix to use for writing URIs using shorthand CURIE notation.
+				mConnection.prefix("event", "http://example.com/event#");
 
-               @Override
-               public void onEvent(String topicUri, Object event) {
-
-                  // when we get an event, we safely can cast to the type we specified previously
-                  MyEvent1 evt = (MyEvent1) event;
-
-                  alert("Event received : " + evt.toString());
-               }
-            });
-         }
-
-         @Override
-         public void onClose(int code, String reason) {
-
-            // The connection was closed. Set the status line, show a message box,
-            // and set the button to allow to connect again.
-            mStatusline.setText("Connection closed.");
-            alert(reason);
-            setButtonConnect();
-         }
-      });
-   }
-
-   @Override
-   public void onCreate(Bundle savedInstanceState) {
-
-      super.onCreate(savedInstanceState);
-      setContentView(R.layout.main);
-
-      mHostname = (EditText) findViewById(R.id.hostname);
-      mPort = (EditText) findViewById(R.id.port);
-      mStatusline = (TextView) findViewById(R.id.statusline);
-      mStart = (Button) findViewById(R.id.start);
-
-      mSettings = getSharedPreferences(PREFS_NAME, 0);
-      loadPrefs();
-
-      setButtonConnect();
-   }
+				// We subscribe to a topic by giving the topic URI, the type we want events
+				// to be converted to, and the event handler we want to have fired.
+				mConnection.subscribe("event:myevent1", MyEvent1.class, new Wamp.EventHandler() {
+
+					@Override
+					public void onEvent(String topicUri, Object event) {
+
+						// when we get an event, we safely can cast to the type we specified previously
+						MyEvent1 evt = (MyEvent1) event;
+
+						alert("Event received : " + evt.toString());
+					}
+				});
+			}
+
+			@Override
+			public void onClose(int code, String reason) {
+
+				// The connection was closed. Set the status line, show a message box,
+				// and set the button to allow to connect again.
+				mStatusline.setText("Connection closed.");
+				alert(reason);
+				setButtonConnect();
+			}
+		}, headers);
+	}
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.main);
+
+		mHostname = (EditText) findViewById(R.id.hostname);
+		mPort = (EditText) findViewById(R.id.port);
+		mStatusline = (TextView) findViewById(R.id.statusline);
+		mStart = (Button) findViewById(R.id.start);
+
+		headers = Arrays.asList(
+				new BasicNameValuePair("X-sessionid", "1f45debd-2ced-62b7-07d0-c4b50a1237fe")
+				);
+
+		mSettings = getSharedPreferences(PREFS_NAME, 0);
+		loadPrefs();
+
+		setButtonConnect();
+	}
 }
\ No newline at end of file
