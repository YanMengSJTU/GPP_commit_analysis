diff --git a/Autobahn/src/de/tavendo/autobahn/WampConnection.java b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
index e28757c..374e379 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
@@ -391,7 +391,7 @@ public void unsubscribe() {
 
          WampMessage.Unsubscribe msg = new WampMessage.Unsubscribe(topicUri);
          mWriter.forward(msg);
-     }
+      }
    }
 
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WampReader.java b/Autobahn/src/de/tavendo/autobahn/WampReader.java
index 9babd2d..84d2026 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampReader.java
@@ -20,7 +20,6 @@
 
 import java.io.IOException;
 import java.net.Socket;
-import java.nio.channels.SocketChannel;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.codehaus.jackson.JsonFactory;
diff --git a/Autobahn/src/de/tavendo/autobahn/WampWriter.java b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
index 5bb6b8b..8cf79d7 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
@@ -20,8 +20,6 @@
 
 import java.io.IOException;
 import java.net.Socket;
-import java.nio.channels.SocketChannel;
-
 import org.codehaus.jackson.JsonFactory;
 import org.codehaus.jackson.JsonGenerationException;
 import org.codehaus.jackson.JsonGenerator;
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocket.java b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
index 6b2b958..d6ceec4 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocket.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
@@ -1,75 +1,75 @@
 package de.tavendo.autobahn;
 
 public interface WebSocket {
-   
-	/**
+
+   /**
     * Session handler for WebSocket sessions.
     */
    public interface ConnectionHandler {
 
-	   /**
-	    * Connection was closed normally.
-	    */
-	   public static final int CLOSE_NORMAL = 1;
+      /**
+       * Connection was closed normally.
+       */
+      public static final int CLOSE_NORMAL = 1;
 
-	   /**
-	    * Connection could not be established in the first place.
-	    */
-	   public static final int CLOSE_CANNOT_CONNECT = 2;
+      /**
+       * Connection could not be established in the first place.
+       */
+      public static final int CLOSE_CANNOT_CONNECT = 2;
 
-	   /**
-	    * A previously established connection was lost unexpected.
-	    */
-	   public static final int CLOSE_CONNECTION_LOST = 3;
+      /**
+       * A previously established connection was lost unexpected.
+       */
+      public static final int CLOSE_CONNECTION_LOST = 3;
 
-	   /**
-	    * The connection was closed because a protocol violation
-	    * occurred.
-	    */
-	   public static final int CLOSE_PROTOCOL_ERROR = 4;
+      /**
+       * The connection was closed because a protocol violation
+       * occurred.
+       */
+      public static final int CLOSE_PROTOCOL_ERROR = 4;
 
-	   /**
-	    * Internal error.
-	    */
-	   public static final int CLOSE_INTERNAL_ERROR = 5;
+      /**
+       * Internal error.
+       */
+      public static final int CLOSE_INTERNAL_ERROR = 5;
 
-	   /**
-	    * Fired when the WebSockets connection has been established.
-	    * After this happened, messages may be sent.
-	    */
-	   public void onOpen();
+      /**
+       * Fired when the WebSockets connection has been established.
+       * After this happened, messages may be sent.
+       */
+      public void onOpen();
 
-	   /**
-	    * Fired when the WebSockets connection has deceased (or could
-	    * not established in the first place).
-	    *
-	    * @param code       Close code.
-	    * @param reason     Close reason (human-readable).
-	    */
-	   public void onClose(int code, String reason);
+      /**
+       * Fired when the WebSockets connection has deceased (or could
+       * not established in the first place).
+       *
+       * @param code       Close code.
+       * @param reason     Close reason (human-readable).
+       */
+      public void onClose(int code, String reason);
 
-	   /**
-	    * Fired when a text message has been received (and text
-	    * messages are not set to be received raw).
-	    *
-	    * @param payload    Text message payload or null (empty payload).
-	    */
-	   public void onTextMessage(String payload);
+      /**
+       * Fired when a text message has been received (and text
+       * messages are not set to be received raw).
+       *
+       * @param payload    Text message payload or null (empty payload).
+       */
+      public void onTextMessage(String payload);
 
-	   /**
-	    * Fired when a text message has been received (and text
-	    * messages are set to be received raw).
-	    *
-	    * @param payload    Text message payload as raw UTF-8 or null (empty payload).
-	    */
-	   public void onRawTextMessage(byte[] payload);
+      /**
+       * Fired when a text message has been received (and text
+       * messages are set to be received raw).
+       *
+       * @param payload    Text message payload as raw UTF-8 or null (empty payload).
+       */
+      public void onRawTextMessage(byte[] payload);
 
-	   /**
-	    * Fired when a binary message has been received.
-	    *
-	    * @param payload    Binar message payload or null (empty payload).
-	    */
-	   public void onBinaryMessage(byte[] payload);
+      /**
+       * Fired when a binary message has been received.
+       *
+       * @param payload    Binar message payload or null (empty payload).
+       */
+      public void onBinaryMessage(byte[] payload);
    }
 
    public void connect(String wsUri, ConnectionHandler wsHandler) throws WebSocketException;
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 7013a29..763b1a3 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -36,415 +36,419 @@
 
 public class WebSocketConnection implements WebSocket {
 
-	private static final boolean DEBUG = true;
-	private static final String TAG = WebSocketConnection.class.getName();
+   private static final boolean DEBUG = true;
+   private static final String TAG = WebSocketConnection.class.getName();
 
-	protected Handler mMasterHandler;
+   protected Handler mMasterHandler;
 
-	protected WebSocketReader mReader;
-	protected WebSocketWriter mWriter;
-	protected HandlerThread mWriterThread;
+   protected WebSocketReader mReader;
+   protected WebSocketWriter mWriter;
+   protected HandlerThread mWriterThread;
 
-	protected Socket mTransportChannel;
+   protected Socket mTransportChannel;
 
-	private URI mWsUri;
-	private String mWsScheme;
-	private String mWsHost;
-	private int mWsPort;
-	private String mWsPath;
-	private String mWsQuery;
-	private String[] mWsSubprotocols;
+   private URI mWsUri;
+   private String mWsScheme;
+   private String mWsHost;
+   private int mWsPort;
+   private String mWsPath;
+   private String mWsQuery;
+   private String[] mWsSubprotocols;
 
-	private WebSocket.ConnectionHandler mWsHandler;
+   private WebSocket.ConnectionHandler mWsHandler;
 
-	protected WebSocketOptions mOptions;
+   protected WebSocketOptions mOptions;
 
 
-	/**
-	 * Asynch socket connector.
-	 */
-	private class WebSocketConnector extends AsyncTask<Void, Void, String> {
+   /**
+    * Asynch socket connector.
+    */
+   private class WebSocketConnector extends AsyncTask<Void, Void, String> {
 
-		protected Socket createSocket() throws IOException {
-			Socket soc;
+      protected Socket createSocket() throws IOException {
+         Socket soc;
 
-			if (mWsScheme.equals("wss")) {
+         if (mWsScheme.equals("wss")) {
 
-				SSLSocketFactory fctry = (SSLSocketFactory)SSLSocketFactory.getDefault();
+            SSLSocketFactory fctry = (SSLSocketFactory)SSLSocketFactory.getDefault();
 
-				SSLSocket secSoc = (SSLSocket)fctry.createSocket(mWsHost, mWsPort);
-				secSoc.setUseClientMode(true);
-				secSoc.addHandshakeCompletedListener(new HandshakeCompletedListener() {
-					public void handshakeCompleted(HandshakeCompletedEvent event) {
-						Log.d(TAG, "ssl handshake completed");
-					}
-				});
+            SSLSocket secSoc = (SSLSocket)fctry.createSocket(mWsHost, mWsPort);
+            secSoc.setUseClientMode(true);
+            secSoc.addHandshakeCompletedListener(new HandshakeCompletedListener() {
+               public void handshakeCompleted(HandshakeCompletedEvent event) {
+                  Log.d(TAG, "ssl handshake completed");
+               }
+            });
 
-				soc = secSoc;
+            soc = secSoc;
 
-			} else {
-				// connect TCP socket
-				// http://developer.android.com/reference/java/net/Socket.html
-				//
-				soc = new Socket(mWsHost, mWsPort);
-			}
-			return soc;
-		}
+         } else {
+            // connect TCP socket
+            // http://developer.android.com/reference/java/net/Socket.html
+            //
+            soc = new Socket(mWsHost, mWsPort);
+         }
+         return soc;
+      }
 
-		@Override
-		protected String doInBackground(Void... params) {
+      @Override
+      protected String doInBackground(Void... params) {
 
-			Thread.currentThread().setName("WebSocketConnector");
+         Thread.currentThread().setName("WebSocketConnector");
 
-			try {
-				mTransportChannel = createSocket();
+         try {
+            mTransportChannel = createSocket();
 
-				Log.d(TAG, "is conneced? " + mTransportChannel.isConnected());
+            return null;
 
-				return null;
+         } catch (IOException e) {
 
-			} catch (IOException e) {
+            return e.getMessage();
+         }
+      }
 
-				return e.getMessage();
-			}
-		}
+      @Override
+      protected void onPostExecute(String reason) {
 
-		@Override
-		protected void onPostExecute(String reason) {
+         if (reason != null) {
 
-			if (reason != null) {
+            mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, reason);
 
-				mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, reason);
+         } else if (isConnected()) {
 
-			} else if (mTransportChannel.isConnected()) {
+            try {
 
-				try {
+               // create WebSocket master handler
+               createHandler();
 
-					// create WebSocket master handler
-					createHandler();
-					Log.d(TAG, "creating handler");
+               // create & start WebSocket reader
+               createReader();
 
-					// create & start WebSocket reader
-					createReader();
+               // create & start WebSocket writer
+               createWriter();
 
-					// create & start WebSocket writer
-					createWriter();
+               // start WebSockets handshake
+               WebSocketMessage.ClientHandshake hs = new WebSocketMessage.ClientHandshake(mWsHost + ":" + mWsPort);
+               hs.mPath = mWsPath;
+               hs.mQuery = mWsQuery;
+               hs.mSubprotocols = mWsSubprotocols;
+               mWriter.forward(hs);
 
-					// start WebSockets handshake
-					WebSocketMessage.ClientHandshake hs = new WebSocketMessage.ClientHandshake(mWsHost + ":" + mWsPort);
-					hs.mPath = mWsPath;
-					hs.mQuery = mWsQuery;
-					hs.mSubprotocols = mWsSubprotocols;
-					mWriter.forward(hs);
+            } catch (Exception e) {
 
-				} catch (Exception e) {
+               mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, e.getMessage());
 
-					mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, e.getMessage());
+            }
 
-				}
+         } else {
 
-			} else {
+            mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, "could not connect to WebSockets server");
+         }
+      }
 
-				mWsHandler.onClose(WebSocketConnectionHandler.CLOSE_CANNOT_CONNECT, "could not connect to WebSockets server");
-			}
-		}
+   }
 
-	}
 
+   public WebSocketConnection() {
+      if (DEBUG) Log.d(TAG, "created");
+   }
 
-	public WebSocketConnection() {
-		if (DEBUG) Log.d(TAG, "created");
-	}
 
+   public void sendTextMessage(String payload) {
+      mWriter.forward(new WebSocketMessage.TextMessage(payload));
+   }
 
-	public void sendTextMessage(String payload) {
-		mWriter.forward(new WebSocketMessage.TextMessage(payload));
-	}
 
+   public void sendRawTextMessage(byte[] payload) {
+      mWriter.forward(new WebSocketMessage.RawTextMessage(payload));
+   }
 
-	public void sendRawTextMessage(byte[] payload) {
-		mWriter.forward(new WebSocketMessage.RawTextMessage(payload));
-	}
 
+   public void sendBinaryMessage(byte[] payload) {
+      mWriter.forward(new WebSocketMessage.BinaryMessage(payload));
+   }
 
-	public void sendBinaryMessage(byte[] payload) {
-		mWriter.forward(new WebSocketMessage.BinaryMessage(payload));
-	}
+   /**
+    * Java's old socket API({@link java.net.Socket#isConnected()}) always returns true after its connected to a server, regardless of current connection
+    * status. This isn't a problem with SocketChannel.
+    */
+   public boolean isConnected() {
+      return mTransportChannel != null && mTransportChannel.isConnected() && !mTransportChannel.isClosed();
+   }
 
 
-	public boolean isConnected() {
-		return mTransportChannel != null && mTransportChannel.isConnected();
-	}
+   private void failConnection(int code, String reason) {
 
+      if (DEBUG) Log.d(TAG, "fail connection [code = " + code + ", reason = " + reason);
 
-	private void failConnection(int code, String reason) {
+      if (mReader != null) {
+         mReader.quit();
+         try {
+            if (DEBUG) Log.d(TAG, "waiting for reader to finish");
+            mReader.join();
+            if (DEBUG) Log.d(TAG, "readr thread done");
+         } catch (InterruptedException e) {
+            if (DEBUG) Log.wtf(TAG, e);
+         }
+         //mReader = null;
+      } else {
+         if (DEBUG) Log.d(TAG, "mReader already NULL");
+      }
 
-		if (DEBUG) Log.d(TAG, "fail connection [code = " + code + ", reason = " + reason);
+      if (mWriter != null) {
+         //mWriterThread.getLooper().quit();
+         if (DEBUG) Log.d(TAG, "sending close message over socket");
+         mWriter.forward(new WebSocketMessage.Quit());
+         try {
+            if (DEBUG) Log.d(TAG, "waiting for writer to finish");
+            mWriterThread.join();
+            if (DEBUG) Log.d(TAG, "writer thread done");
+         } catch (InterruptedException e) {
+            if (DEBUG) Log.wtf(TAG, e);
+         }
+         //mWriterThread = null;
+      } else {
+         if (DEBUG) Log.d(TAG, "mWriter already NULL");
+      }
 
-		if (mReader != null) {
-			mReader.quit();
-			try {
-				mReader.join();
-			} catch (InterruptedException e) {
-				if (DEBUG) e.printStackTrace();
-			}
-			//mReader = null;
-		} else {
-			if (DEBUG) Log.d(TAG, "mReader already NULL");
-		}
+      if (mTransportChannel != null) {
+         try {
+            mTransportChannel.close();
+         } catch (IOException e) {
+            if (DEBUG) Log.wtf(TAG, e);
+         }
+         //mTransportChannel = null;
+      } else {
+         if (DEBUG) Log.d(TAG, "mTransportChannel already NULL");
+      }
+
+      if (mWsHandler != null) {
+         try {
+            mWsHandler.onClose(code, reason);
+         } catch (Exception e) {
+            if (DEBUG) Log.wtf(TAG, e);
+         }
+         //mWsHandler = null;
+      } else {
+         if (DEBUG) Log.d(TAG, "mWsHandler already NULL");
+      }
 
-		if (mWriter != null) {
-			//mWriterThread.getLooper().quit();
-			mWriter.forward(new WebSocketMessage.Quit());
-			try {
-				mWriterThread.join();
-			} catch (InterruptedException e) {
-				if (DEBUG) e.printStackTrace();
-			}
-			//mWriterThread = null;
-		} else {
-			if (DEBUG) Log.d(TAG, "mWriter already NULL");
-		}
+      if (DEBUG) Log.d(TAG, "worker threads stopped");
+   }
 
-		if (mTransportChannel != null) {
-			try {
-				if (DEBUG) Log.d(TAG, "Closing the transport");
-				mTransportChannel.close();
-			} catch (IOException e) {
-				if (DEBUG) e.printStackTrace();
-			}
-			//mTransportChannel = null;
-		} else {
-			if (DEBUG) Log.d(TAG, "mTransportChannel already NULL");
-		}
 
-		if (mWsHandler != null) {
-			try {
-				mWsHandler.onClose(code, reason);
-			} catch (Exception e) {
-				if (DEBUG) e.printStackTrace();
-			}
-			//mWsHandler = null;
-		} else {
-			if (DEBUG) Log.d(TAG, "mWsHandler already NULL");
-		}
+   public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
+      connect(wsUri, null, wsHandler, new WebSocketOptions());
+   }
 
-		if (DEBUG) Log.d(TAG, "worker threads stopped");
-	}
 
+   public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
+      connect(wsUri, null, wsHandler, options);
+   }
 
-	public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
-		connect(wsUri, null, wsHandler, new WebSocketOptions());
-	}
 
+   public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
+
+      // don't connect if already connected .. user needs to disconnect first
+      //
+      if (isConnected()) {
+         throw new WebSocketException("already connected");
+      }
+
+      // parse WebSockets URI
+      //
+      try {
+         mWsUri = new URI(wsUri);
+
+         if (!mWsUri.getScheme().equals("ws") && !mWsUri.getScheme().equals("wss")) {
+            throw new WebSocketException("unsupported scheme for WebSockets URI");
+         }
+
+         mWsScheme = mWsUri.getScheme();
+
+         if (mWsUri.getPort() == -1) {
+            if (mWsScheme.equals("ws")) {
+               mWsPort = 80;
+            } else {
+               mWsPort = 443;
+            }
+         } else {
+            mWsPort = mWsUri.getPort();
+         }
+
+         if (mWsUri.getHost() == null) {
+            throw new WebSocketException("no host specified in WebSockets URI");
+         } else {
+            mWsHost = mWsUri.getHost();
+         }
+
+         if (mWsUri.getPath() == null || mWsUri.getPath().equals("")) {
+            mWsPath = "/";
+         } else {
+            mWsPath = mWsUri.getPath();
+         }
 
-	public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
-		connect(wsUri, null, wsHandler, options);
-	}
+         if (mWsUri.getQuery() == null || mWsUri.getQuery().equals("")) {
+            mWsQuery = null;
+         } else {
+            mWsQuery = mWsUri.getQuery();
+         }
 
+      } catch (URISyntaxException e) {
 
-	public void connect(String wsUri, String[] wsSubprotocols, WebSocket.ConnectionHandler wsHandler, WebSocketOptions options) throws WebSocketException {
+         throw new WebSocketException("invalid WebSockets URI");
+      }
 
-		// don't connect if already connected .. user needs to disconnect first
-		//
-		if (mTransportChannel != null && mTransportChannel.isConnected()) {
-			throw new WebSocketException("already connected");
-		}
+      mWsSubprotocols = wsSubprotocols;
 
-		// parse WebSockets URI
-		//
-		try {
-			mWsUri = new URI(wsUri);
+      mWsHandler = wsHandler;
 
-			if (!mWsUri.getScheme().equals("ws") && !mWsUri.getScheme().equals("wss")) {
-				throw new WebSocketException("unsupported scheme for WebSockets URI");
-			}
+      // make copy of options!
+      mOptions = new WebSocketOptions(options);
 
-			mWsScheme = mWsUri.getScheme();
+      // use asynch connector on short-lived background thread
+      new WebSocketConnector().execute();
+   }
 
-			if (mWsUri.getPort() == -1) {
-				if (mWsScheme.equals("ws")) {
-					mWsPort = 80;
-				} else {
-					mWsPort = 443;
-				}
-			} else {
-				mWsPort = mWsUri.getPort();
-			}
 
-			if (mWsUri.getHost() == null) {
-				throw new WebSocketException("no host specified in WebSockets URI");
-			} else {
-				mWsHost = mWsUri.getHost();
-			}
+   public void disconnect() {
+      if (mWriter != null) {
+         mWriter.forward(new WebSocketMessage.Close(1000));
+      } else {
+         if (DEBUG) Log.d(TAG, "could not send Close .. writer already NULL");
+      }
+   }
 
-			if (mWsUri.getPath() == null || mWsUri.getPath().equals("")) {
-				mWsPath = "/";
-			} else {
-				mWsPath = mWsUri.getPath();
-			}
 
-			if (mWsUri.getQuery() == null || mWsUri.getQuery().equals("")) {
-				mWsQuery = null;
-			} else {
-				mWsQuery = mWsUri.getQuery();
-			}
+   /**
+    * Create master message handler.
+    */
+   protected void createHandler() {
 
-		} catch (URISyntaxException e) {
+      mMasterHandler = new Handler() {
 
-			throw new WebSocketException("invalid WebSockets URI");
-		}
+         public void handleMessage(Message msg) {
 
-		mWsSubprotocols = wsSubprotocols;
+            if (msg.obj instanceof WebSocketMessage.TextMessage) {
 
-		mWsHandler = wsHandler;
+               WebSocketMessage.TextMessage textMessage = (WebSocketMessage.TextMessage) msg.obj;
 
-		// make copy of options!
-		mOptions = new WebSocketOptions(options);
+               if (mWsHandler != null) {
+                  mWsHandler.onTextMessage(textMessage.mPayload);
+               } else {
+                  if (DEBUG) Log.d(TAG, "could not call onTextMessage() .. handler already NULL");
+               }
 
-		// use asynch connector on short-lived background thread
-		new WebSocketConnector().execute();
-	}
+            } else if (msg.obj instanceof WebSocketMessage.RawTextMessage) {
 
+               WebSocketMessage.RawTextMessage rawTextMessage = (WebSocketMessage.RawTextMessage) msg.obj;
 
-	public void disconnect() {
-		if (mWriter != null) {
-			mWriter.forward(new WebSocketMessage.Close(1000));
-		} else {
-			if (DEBUG) Log.d(TAG, "could not send Close .. writer already NULL");
-		}
-	}
+               if (mWsHandler != null) {
+                  mWsHandler.onRawTextMessage(rawTextMessage.mPayload);
+               } else {
+                  if (DEBUG) Log.d(TAG, "could not call onRawTextMessage() .. handler already NULL");
+               }
 
+            } else if (msg.obj instanceof WebSocketMessage.BinaryMessage) {
 
-	/**
-	 * Create master message handler.
-	 */
-	protected void createHandler() {
+               WebSocketMessage.BinaryMessage binaryMessage = (WebSocketMessage.BinaryMessage) msg.obj;
 
-		mMasterHandler = new Handler() {
+               if (mWsHandler != null) {
+                  mWsHandler.onBinaryMessage(binaryMessage.mPayload);
+               } else {
+                  if (DEBUG) Log.d(TAG, "could not call onBinaryMessage() .. handler already NULL");
+               }
 
-			public void handleMessage(Message msg) {
+            } else if (msg.obj instanceof WebSocketMessage.Ping) {
 
-				if (msg.obj instanceof WebSocketMessage.TextMessage) {
+               WebSocketMessage.Ping ping = (WebSocketMessage.Ping) msg.obj;
+               if (DEBUG) Log.d(TAG, "WebSockets Ping received");
 
-					WebSocketMessage.TextMessage textMessage = (WebSocketMessage.TextMessage) msg.obj;
+               // reply with Pong
+               WebSocketMessage.Pong pong = new WebSocketMessage.Pong();
+               pong.mPayload = ping.mPayload;
+               mWriter.forward(pong);
 
-					if (mWsHandler != null) {
-						mWsHandler.onTextMessage(textMessage.mPayload);
-					} else {
-						if (DEBUG) Log.d(TAG, "could not call onTextMessage() .. handler already NULL");
-					}
+            } else if (msg.obj instanceof WebSocketMessage.Pong) {
 
-				} else if (msg.obj instanceof WebSocketMessage.RawTextMessage) {
+               @SuppressWarnings("unused")
+               WebSocketMessage.Pong pong = (WebSocketMessage.Pong) msg.obj;
 
-					WebSocketMessage.RawTextMessage rawTextMessage = (WebSocketMessage.RawTextMessage) msg.obj;
+               if (DEBUG) Log.d(TAG, "WebSockets Pong received");
 
-					if (mWsHandler != null) {
-						mWsHandler.onRawTextMessage(rawTextMessage.mPayload);
-					} else {
-						if (DEBUG) Log.d(TAG, "could not call onRawTextMessage() .. handler already NULL");
-					}
+            } else if (msg.obj instanceof WebSocketMessage.Close) {
 
-				} else if (msg.obj instanceof WebSocketMessage.BinaryMessage) {
+               WebSocketMessage.Close close = (WebSocketMessage.Close) msg.obj;
 
-					WebSocketMessage.BinaryMessage binaryMessage = (WebSocketMessage.BinaryMessage) msg.obj;
+               if (DEBUG) Log.d(TAG, "WebSockets Close received (" + close.mCode + " - " + close.mReason + ")");
 
-					if (mWsHandler != null) {
-						mWsHandler.onBinaryMessage(binaryMessage.mPayload);
-					} else {
-						if (DEBUG) Log.d(TAG, "could not call onBinaryMessage() .. handler already NULL");
-					}
+               mWriter.forward(new WebSocketMessage.Close(1000));
 
-				} else if (msg.obj instanceof WebSocketMessage.Ping) {
+            } else if (msg.obj instanceof WebSocketMessage.ServerHandshake) {
 
-					WebSocketMessage.Ping ping = (WebSocketMessage.Ping) msg.obj;
-					if (DEBUG) Log.d(TAG, "WebSockets Ping received");
+               @SuppressWarnings("unused")
+               WebSocketMessage.ServerHandshake serverHandshake = (WebSocketMessage.ServerHandshake) msg.obj;
 
-					// reply with Pong
-					WebSocketMessage.Pong pong = new WebSocketMessage.Pong();
-					pong.mPayload = ping.mPayload;
-					mWriter.forward(pong);
+               if (DEBUG) Log.d(TAG, "opening handshake received");
 
-				} else if (msg.obj instanceof WebSocketMessage.Pong) {
+               if (mWsHandler != null) {
+                  mWsHandler.onOpen();
+               } else {
+                  if (DEBUG) Log.d(TAG, "could not call onOpen() .. handler already NULL");
+               }
 
-					@SuppressWarnings("unused")
-					WebSocketMessage.Pong pong = (WebSocketMessage.Pong) msg.obj;
+            } else if (msg.obj instanceof WebSocketMessage.ConnectionLost) {
 
-					if (DEBUG) Log.d(TAG, "WebSockets Pong received");
+               @SuppressWarnings("unused")
+               WebSocketMessage.ConnectionLost connnectionLost = (WebSocketMessage.ConnectionLost) msg.obj;
+               failConnection(WebSocketConnectionHandler.CLOSE_CONNECTION_LOST, "WebSockets connection lost");
 
-				} else if (msg.obj instanceof WebSocketMessage.Close) {
+            } else if (msg.obj instanceof WebSocketMessage.ProtocolViolation) {
 
-					WebSocketMessage.Close close = (WebSocketMessage.Close) msg.obj;
+               @SuppressWarnings("unused")
+               WebSocketMessage.ProtocolViolation protocolViolation = (WebSocketMessage.ProtocolViolation) msg.obj;
+               failConnection(WebSocketConnectionHandler.CLOSE_PROTOCOL_ERROR, "WebSockets protocol violation");
 
-					if (DEBUG) Log.d(TAG, "WebSockets Close received (" + close.mCode + " - " + close.mReason + ")");
+            } else if (msg.obj instanceof WebSocketMessage.Error) {
 
-					mWriter.forward(new WebSocketMessage.Close(1000));
+               WebSocketMessage.Error error = (WebSocketMessage.Error) msg.obj;
+               failConnection(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, "WebSockets internal error (" + error.mException.toString() + ")");
 
-				} else if (msg.obj instanceof WebSocketMessage.ServerHandshake) {
+            } else {
 
-					@SuppressWarnings("unused")
-					WebSocketMessage.ServerHandshake serverHandshake = (WebSocketMessage.ServerHandshake) msg.obj;
+               processAppMessage(msg.obj);
 
-					if (DEBUG) Log.d(TAG, "opening handshake received");
+            }
+         }
+      };
+   }
 
-					if (mWsHandler != null) {
-						mWsHandler.onOpen();
-					} else {
-						if (DEBUG) Log.d(TAG, "could not call onOpen() .. handler already NULL");
-					}
 
-				} else if (msg.obj instanceof WebSocketMessage.ConnectionLost) {
+   protected void processAppMessage(Object message) {
+   }
 
-					@SuppressWarnings("unused")
-					WebSocketMessage.ConnectionLost connnectionLost = (WebSocketMessage.ConnectionLost) msg.obj;
-					failConnection(WebSocketConnectionHandler.CLOSE_CONNECTION_LOST, "WebSockets connection lost");
 
-				} else if (msg.obj instanceof WebSocketMessage.ProtocolViolation) {
+   /**
+    * Create WebSockets background writer.
+    */
+   protected void createWriter() {
 
-					@SuppressWarnings("unused")
-					WebSocketMessage.ProtocolViolation protocolViolation = (WebSocketMessage.ProtocolViolation) msg.obj;
-					failConnection(WebSocketConnectionHandler.CLOSE_PROTOCOL_ERROR, "WebSockets protocol violation");
+      mWriterThread = new HandlerThread("WebSocketWriter");
+      mWriterThread.start();
+      mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mOptions);
 
-				} else if (msg.obj instanceof WebSocketMessage.Error) {
+      if (DEBUG) Log.d(TAG, "WS writer created and started");
+   }
 
-					WebSocketMessage.Error error = (WebSocketMessage.Error) msg.obj;
-					failConnection(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, "WebSockets internal error (" + error.mException.toString() + ")");
 
-				} else {
+   /**
+    * Create WebSockets background reader.
+    */
+   protected void createReader() {
 
-					processAppMessage(msg.obj);
+      mReader = new WebSocketReader(mMasterHandler, mTransportChannel, mOptions, "WebSocketReader");
+      mReader.start();
 
-				}
-			}
-		};
-	}
-
-
-	protected void processAppMessage(Object message) {
-	}
-
-
-	/**
-	 * Create WebSockets background writer.
-	 */
-	protected void createWriter() {
-
-		mWriterThread = new HandlerThread("WebSocketWriter");
-		mWriterThread.start();
-		mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mOptions);
-
-		if (DEBUG) Log.d(TAG, "WS writer created and started");
-	}
-
-
-	/**
-	 * Create WebSockets background reader.
-	 */
-	protected void createReader() {
-
-		mReader = new WebSocketReader(mMasterHandler, mTransportChannel, mOptions, "WebSocketReader");
-		mReader.start();
-
-		if (DEBUG) Log.d(TAG, "WS reader created and started");
-	}
+      if (DEBUG) Log.d(TAG, "WS reader created and started");
+   }
 }
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
index 51dcf46..893f199 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketReader.java
@@ -21,8 +21,6 @@
 import java.io.UnsupportedEncodingException;
 import java.net.Socket;
 import java.nio.ByteBuffer;
-import java.nio.channels.SocketChannel;
-
 import android.os.Handler;
 import android.os.Message;
 import android.util.Log;
@@ -82,14 +80,14 @@
     * Create new WebSockets background reader.
     *
     * @param master    The message handler of master (foreground thread).
-    * @param mTransportChannel    The socket channel created on foreground thread.
+    * @param socket    The socket created on foreground thread.
     */
-   public WebSocketReader(Handler master, Socket mTransportChannel, WebSocketOptions options, String threadName) {
+   public WebSocketReader(Handler master, Socket socket, WebSocketOptions options, String threadName) {
 
       super(threadName);
 
       mMaster = master;
-      mSocket = mTransportChannel;
+      mSocket = socket;
       mOptions = options;
 
       mFrameBuffer = ByteBuffer.allocateDirect(options.getMaxFramePayloadSize() + 14);
@@ -565,15 +563,15 @@ private boolean consumeData() throws Exception {
    @Override
    public void run() {
 
-      if (DEBUG) Log.d(TAG, "running - connection: " + mSocket.isConnected());
+      if (DEBUG) Log.d(TAG, "running");
 
       try {
 
          mFrameBuffer.clear();
          byte readbuff[] = new byte[mFrameBuffer.capacity()];
-         
+
          do {
-        	// blocking read on socket
+            // blocking read on socket
             int len = mSocket.getInputStream().read(readbuff, 0, readbuff.length);
             if (len > 0) {
                mFrameBuffer.put(readbuff, 0, len);
@@ -582,8 +580,8 @@ public void run() {
                }
             } else if (len < 0) {
 
-               if (DEBUG) Log.d(TAG, "run() : ConnectionLost - " + mSocket.isConnected());
-               
+               if (DEBUG) Log.d(TAG, "run() : ConnectionLost");
+
                notify(new WebSocketMessage.ConnectionLost());
                mStopped = true;
             }
@@ -591,14 +589,14 @@ public void run() {
 
       } catch (WebSocketException e) {
 
-         if (DEBUG) Log.d(TAG, "run() : WebSocketException (" + e.toString() + ")", e);
+         if (DEBUG) Log.wtf(TAG, "run() : WebSocketException (" + e.toString() + ")", e);
 
          // wrap the exception and notify master
          notify(new WebSocketMessage.ProtocolViolation(e));
 
       } catch (Exception e) {
 
-         if (DEBUG) Log.d(TAG, "run() : Exception (" + e.toString() + ")", e);
+         if (DEBUG) Log.wtf(TAG, "run() : Exception (" + e.toString() + ")", e);
 
          // wrap the exception and notify master
          notify(new WebSocketMessage.Error(e));
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index 0fdb978..b5d1c1c 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -20,7 +20,6 @@
 
 import java.io.IOException;
 import java.net.Socket;
-import java.nio.channels.SocketChannel;
 import java.util.Random;
 
 import android.os.Handler;
@@ -329,18 +328,18 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
          b1 |= (byte) (126 & 0xff);
          mBuffer.write(b1);
          mBuffer.write(new byte[] {(byte)((len >> 8) & 0xff),
-                                   (byte)(len & 0xff)});
+               (byte)(len & 0xff)});
       } else {
          b1 |= (byte) (127 & 0xff);
          mBuffer.write(b1);
          mBuffer.write(new byte[] {(byte)((len >> 56) & 0xff),
-                                   (byte)((len >> 48) & 0xff),
-                                   (byte)((len >> 40) & 0xff),
-                                   (byte)((len >> 32) & 0xff),
-                                   (byte)((len >> 24) & 0xff),
-                                   (byte)((len >> 16) & 0xff),
-                                   (byte)((len >> 8)  & 0xff),
-                                   (byte)(len         & 0xff)});
+               (byte)((len >> 48) & 0xff),
+               (byte)((len >> 40) & 0xff),
+               (byte)((len >> 32) & 0xff),
+               (byte)((len >> 24) & 0xff),
+               (byte)((len >> 16) & 0xff),
+               (byte)((len >> 8)  & 0xff),
+               (byte)(len         & 0xff)});
       }
 
       byte mask[] = null;
@@ -376,8 +375,8 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, in
    public void handleMessage(Message msg) {
 
       try {
-    	 
-    	 
+
+
 
          // clear send buffer
          mBuffer.clear();
@@ -388,9 +387,9 @@ public void handleMessage(Message msg) {
          // send out buffered data
          mBuffer.flip();
          if (mBuffer.remaining() > 0) {
-        	byte arr[] = new byte[mBuffer.remaining()];
-        	mBuffer.getBuffer().get(arr);
-        	// this can block on socket write
+            byte arr[] = new byte[mBuffer.remaining()];
+            mBuffer.getBuffer().get(arr);
+            // this can block on socket write
             mSocket.getOutputStream().write(arr);
          }
 
diff --git a/README.md b/README.md
index 8e5915a..ba02edc 100644
--- a/README.md
+++ b/README.md
@@ -18,12 +18,6 @@ You can use AutobahnAndroid to create native Android apps talking to WebSocket s
 Using WAMP you can build applications around **asynchronous RPC and PubSub** messaging patterns.
 
 
-TODO
-----
-
-Conform unit tests & test it with fuzzy server.
-
-
 Where to go
 -----------
 
