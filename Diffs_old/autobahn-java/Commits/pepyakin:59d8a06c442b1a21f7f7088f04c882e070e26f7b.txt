diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocket.java b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
index a8b43bc..9b09ac8 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocket.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocket.java
@@ -1,5 +1,7 @@
 package de.tavendo.autobahn;
 
+import android.os.Bundle;
+
 public interface WebSocket {
 
    /**
@@ -54,9 +56,9 @@
        * not established in the first place).
        *
        * @param code       Close code.
-       * @param reason     Close reason (human-readable).
+       * @param data       Additional data
        */
-      public void onClose(int code, String reason);
+      public void onClose(int code, Bundle data);
 
       /**
        * Fired when a text message has been received (and text
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index b0a8257..97eb4c7 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -37,10 +37,7 @@
 import java.security.cert.X509Certificate;
 
 
-import android.os.AsyncTask;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.Message;
+import android.os.*;
 import android.util.Log;
 
 public class WebSocketConnection implements WebSocket {
@@ -48,6 +45,10 @@
     private static final boolean DEBUG = true;
     private static final String TAG = WebSocketConnection.class.getName();
 
+    public static final String EXTRA_REASON = "de.tavendo.autobahn.extra.REASON";
+    public static final String EXTRA_STATUS_CODE = "de.tavendo.autobahn.extra.STATUS_CODE";
+    public static final String EXTRA_STATUS_MESSAGE = "de.tavendo.autobahn.extra.STATUS_MSG";
+
     public static final int MSG_NOTIFY = 1;
     private static final int MSG_RECONNECT = 2;
 
@@ -242,10 +243,8 @@ public boolean isConnected() {
         return mTransportChannel != null && mTransportChannel.isConnected() && !mTransportChannel.isClosed();
     }
 
-
-    private void failConnection(int code, String reason) {
-
-        if (DEBUG) Log.d(TAG, "fail connection [code = " + code + ", reason = " + reason);
+    private void failConnection(int code, Bundle data) {
+        if (DEBUG) Log.d(TAG, "fail connection [code = " + code + ", reason = " + data);
 
         if (mTransportChannel != null) {
             new Thread() {
@@ -297,11 +296,21 @@ public void run() {
         unscheduleActivityCheck();
         unscheduleReconnect();
 
-        onClose(code, reason);
+        onClose(code, data);
 
         if (DEBUG) Log.d(TAG, "worker threads stopped");
     }
 
+    private void failConnection(int code, String reason) {
+        Bundle bundle = getBundleWithReason(reason);
+        failConnection(code, bundle);
+    }
+
+    private static Bundle getBundleWithReason(String reason) {
+        Bundle bundle = new Bundle();
+        bundle.putString(EXTRA_REASON, reason);
+        return bundle;
+    }
 
 
     public void connect(String wsUri, WebSocket.ConnectionHandler wsHandler) throws WebSocketException {
@@ -444,28 +453,21 @@ protected boolean scheduleReconnect() {
         return need;
     }
 
-    /**
-     * Common close handler
-     *
-     * @param code   Close code.
-     * @param reason Close reason (human-readable).
-     */
-    private void onClose(int code, String reason) {
+    private void onClose(int code, Bundle data) {
         boolean reconnecting = false;
 
         if ((code == WebSocket.ConnectionHandler.CLOSE_CANNOT_CONNECT) ||
-                (code == WebSocket.ConnectionHandler.CLOSE_CONNECTION_LOST)
-                || (code == ConnectionHandler.CLOSE_INTERNAL_ERROR)) {
+            (code == WebSocket.ConnectionHandler.CLOSE_CONNECTION_LOST)
+            || (code == ConnectionHandler.CLOSE_INTERNAL_ERROR)) {
             reconnecting = scheduleReconnect();
         }
 
-
         if (mWsHandler != null) {
             try {
                 if (reconnecting) {
-                    mWsHandler.onClose(WebSocket.ConnectionHandler.CLOSE_RECONNECT, reason);
+                    mWsHandler.onClose(WebSocket.ConnectionHandler.CLOSE_RECONNECT, data);
                 } else {
-                    mWsHandler.onClose(code, reason);
+                    mWsHandler.onClose(code, data);
                 }
             } catch (Exception e) {
                 if (DEBUG) e.printStackTrace();
@@ -476,6 +478,16 @@ private void onClose(int code, String reason) {
         }
     }
 
+    /**
+     * Common close handler
+     *
+     * @param code   Close code.
+     * @param reason Close reason (human-readable).
+     */
+    private void onClose(int code, String reason) {
+        Bundle bundle = getBundleWithReason(reason);
+        onClose(code, bundle);
+    }
 
     /**
      * Create master message handler.
@@ -590,9 +602,12 @@ private void handleNotify(Message msg) {
                     failConnection(WebSocketConnectionHandler.CLOSE_INTERNAL_ERROR, "WebSockets internal error (" + error.mException.toString() + ")");
 
                 } else if (msg.obj instanceof WebSocketMessage.ServerError) {
-
                     WebSocketMessage.ServerError error = (WebSocketMessage.ServerError) msg.obj;
-                    failConnection(WebSocketConnectionHandler.CLOSE_SERVER_ERROR, "Server error " + error.mStatusCode + " (" + error.mStatusMessage + ")");
+
+                    Bundle bundle = new Bundle();
+                    bundle.putInt(EXTRA_STATUS_CODE, error.mStatusCode);
+                    bundle.putString(EXTRA_STATUS_MESSAGE, error.mStatusMessage);
+                    failConnection(WebSocketConnectionHandler.CLOSE_SERVER_ERROR, bundle);
 
                 } else {
 
@@ -617,6 +632,7 @@ protected void createWriter() throws IOException {
 
         mWriterThread = new HandlerThread("WebSocketWriter");
         mWriterThread.start();
+
         mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mOut, mOptions);
 
         if (DEBUG) Log.d(TAG, "WS writer created and started");
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java
index bfe343d..321c434 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnectionHandler.java
@@ -18,6 +18,8 @@
 
 package de.tavendo.autobahn;
 
+import android.os.Bundle;
+
 /**
  * WebSockets event handler. Users will usually provide an instance of a class
  * derived from this to handle WebSockets received messages and open/close events
@@ -36,9 +38,9 @@ public void onOpen() {
     * not established in the first place).
     *
     * @param code       Close code.
-    * @param reason     Close reason (human-readable).
+    * @param data       Close reason (human-readable).
     */
-   public void onClose(int code, String reason) {
+   public void onClose(int code, Bundle data) {
    }
 
    /**
