diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
index 763b1a3..9ebe749 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketConnection.java
@@ -28,6 +28,14 @@
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+
+
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -64,13 +72,44 @@
     * Asynch socket connector.
     */
    private class WebSocketConnector extends AsyncTask<Void, Void, String> {
+      
+      protected SSLSocketFactory getSSLSocketFactory() {
+         SSLSocketFactory fctry = null;
+         if (!mOptions.getVerifyCertificateAuthority()) {
+            try {
+               // Create a trust manager that does not validate certificate chains
+               TrustManager tm = new X509TrustManager()  {
+                  public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                  }
+   
+                  public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                  }
+   
+                  public X509Certificate[] getAcceptedIssuers() {
+                      return null;
+                  }
+              };
+              SSLContext ctxt = SSLContext.getInstance("TLS");
+              ctxt.init(null, new TrustManager[] {tm}, null);
+              fctry = (SSLSocketFactory) ctxt.getSocketFactory();
+              
+              Log.d(TAG, "trusting all certificates");
+           } catch (Exception ex) {
+              Log.wtf(TAG, ex);
+           }
+         } else {
+            fctry = (SSLSocketFactory) SSLSocketFactory.getDefault();
+         }
+         
+         return fctry;
+      }
 
       protected Socket createSocket() throws IOException {
          Socket soc;
 
          if (mWsScheme.equals("wss")) {
 
-            SSLSocketFactory fctry = (SSLSocketFactory)SSLSocketFactory.getDefault();
+            SSLSocketFactory fctry = getSSLSocketFactory();
 
             SSLSocket secSoc = (SSLSocket)fctry.createSocket(mWsHost, mWsPort);
             secSoc.setUseClientMode(true);
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java b/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
index 313e106..9226a5e 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketOptions.java
@@ -18,6 +18,8 @@
 
 package de.tavendo.autobahn;
 
+import android.os.Build;
+
 
 
 /**
@@ -35,6 +37,7 @@
    private int mSocketConnectTimeout;
    private boolean mValidateIncomingUtf8;
    private boolean mMaskClientFrames;
+   private boolean mVerifyCertificateAuthority;
 
 
    /**
@@ -50,6 +53,13 @@ public WebSocketOptions() {
       mSocketConnectTimeout = 6000;
       mValidateIncomingUtf8 = true;
       mMaskClientFrames = true;
+      
+      // trusting everything run from a emulator      
+      if (Build.PRODUCT.contains("sdk")) {
+         mVerifyCertificateAuthority = false;
+      } else {
+         mVerifyCertificateAuthority = true;
+      }
    }
 
    /**
@@ -67,6 +77,7 @@ public WebSocketOptions(WebSocketOptions other) {
       mSocketConnectTimeout = other.mSocketConnectTimeout;
       mValidateIncomingUtf8 = other.mValidateIncomingUtf8;
       mMaskClientFrames = other.mMaskClientFrames;
+      mVerifyCertificateAuthority = other.mVerifyCertificateAuthority;
    }
 
    /**
@@ -254,4 +265,22 @@ public void setMaskClientFrames(boolean enabled) {
    public boolean getMaskClientFrames() {
       return mMaskClientFrames;
    }
+   
+   /**
+    * Get Verify CA option
+    * @return        True, iff CA has to be verified.
+    */
+   public boolean getVerifyCertificateAuthority() {
+      return mVerifyCertificateAuthority;
+   }
+   
+   /**
+    * Controls whether trust SSL certificates issued by anyone or to verify and then proceed.
+    * For using self signed certificate set this to False.
+    * Default: true (in a device), false (in a emulator) 
+    * @param verify  Set False to allow use of self signed certificate;
+    */
+   public void setVerifyCertificateAuthority(boolean verify) {
+      mVerifyCertificateAuthority = verify;
+   }
 }
diff --git a/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java b/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
index 48106c5..c6f8586 100644
--- a/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
+++ b/Demo/TestSuiteClient/src/de/tavendo/autobahn/testsuiteclient/MainActivity.java
@@ -62,9 +62,12 @@ private void savePrefs() {
    int lastCase = 0;
 
    private WebSocket sess = new WebSocketConnection();
-
+   
    private void next() {
 
+      WebSocketOptions options = new WebSocketOptions();
+      options.setVerifyCertificateAuthority(false);
+      
       try {
          if (currCase == 0) {
 
@@ -87,20 +90,21 @@ public void onClose(int code, String reason) {
                         currCase += 1;
                         next();
                      }
-            });
+            }, options);
 
          } else {
             if (currCase <= lastCase) {
+               
+               WebSocketOptions testOptions = new WebSocketOptions(options);
 
-                 WebSocketOptions options = new WebSocketOptions();
-                 options.setReceiveTextMessagesRaw(true);
-                 //options.setValidateIncomingUtf8(false);
-                 //options.setMaskClientFrames(false);
-                 options.setMaxMessagePayloadSize(4*1024*1024);
-                 options.setMaxFramePayloadSize(4*1024*1024);
-                 //options.setTcpNoDelay(false);
+               testOptions.setReceiveTextMessagesRaw(true);
+               //testOptions.setValidateIncomingUtf8(false);
+               //testOptions.setMaskClientFrames(false);
+               testOptions.setMaxMessagePayloadSize(4*1024*1024);
+               testOptions.setMaxFramePayloadSize(4*1024*1024);
+               //testOptions.setTcpNoDelay(false);
 
-                 sess.connect(mWsUri.getText() + "/runCase?case=" + currCase + "&agent=" + mAgent.getText(),
+               sess.connect(mWsUri.getText() + "/runCase?case=" + currCase + "&agent=" + mAgent.getText(),
                        new WebSocketConnectionHandler() {
 
                           @Override
@@ -124,7 +128,7 @@ public void onClose(int code, String reason) {
                              currCase += 1;
                              next();
                           }
-                 }, options);
+                 }, testOptions);
             } else {
                   sess.connect(mWsUri.getText() + "/updateReports?agent=" + mAgent.getText(),
                         new WebSocketConnectionHandler() {
@@ -139,7 +143,7 @@ public void onClose(int code, String reason) {
                               mStatusline.setText("Test reports updated. Finished.");
                               mStart.setEnabled(true);
                            }
-                  });
+                  }, options);
             }
          }
       } catch (WebSocketException e) {
@@ -175,6 +179,5 @@ public void onClick(View v) {
          }
 
       });
-  }
-
+   }
 }
