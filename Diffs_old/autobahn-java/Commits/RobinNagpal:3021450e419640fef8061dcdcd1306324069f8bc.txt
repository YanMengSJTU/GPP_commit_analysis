diff --git a/autobahn/src/main/java/io/crossbar/autobahn/wamp/Session.java b/autobahn/src/main/java/io/crossbar/autobahn/wamp/Session.java
index c1420bf..4a77758 100644
--- a/autobahn/src/main/java/io/crossbar/autobahn/wamp/Session.java
+++ b/autobahn/src/main/java/io/crossbar/autobahn/wamp/Session.java
@@ -886,12 +886,7 @@ private CompletableFuture combineFutures(List<CompletableFuture<?>> futures) {
         CompletableFuture<Publication> future = new CompletableFuture<>();
         long requestID = mIDGenerator.next();
         mPublishRequests.put(requestID, new PublishRequest(requestID, future));
-        if (options != null) {
-            send(new Publish(requestID, topic, args, kwargs, options.acknowledge, options.excludeMe,
-                    options.retain));
-        } else {
-            send(new Publish(requestID, topic, args, kwargs, true, true, false));
-        }
+        send(new Publish(requestID, topic, args, kwargs, options));
         return future;
     }
 
diff --git a/autobahn/src/main/java/io/crossbar/autobahn/wamp/messages/Publish.java b/autobahn/src/main/java/io/crossbar/autobahn/wamp/messages/Publish.java
index 771144d..a78086e 100644
--- a/autobahn/src/main/java/io/crossbar/autobahn/wamp/messages/Publish.java
+++ b/autobahn/src/main/java/io/crossbar/autobahn/wamp/messages/Publish.java
@@ -19,6 +19,7 @@
 
 import io.crossbar.autobahn.wamp.exceptions.ProtocolError;
 import io.crossbar.autobahn.wamp.interfaces.IMessage;
+import io.crossbar.autobahn.wamp.types.PublishOptions;
 import io.crossbar.autobahn.wamp.utils.MessageUtil;
 
 import static io.crossbar.autobahn.wamp.utils.Shortcuts.getOrDefault;
@@ -31,20 +32,19 @@
     public final String topic;
     public final List<Object> args;
     public final Map<String, Object> kwargs;
-    public final boolean acknowledge;
-    public final boolean excludeMe;
-    public final boolean retain;
+    public final PublishOptions publishOptions;
 
     public Publish(long request, String topic, List<Object> args, Map<String, Object> kwargs,
-                   boolean acknowledge, boolean excludeMe, boolean retain) {
+                   PublishOptions publishOptions) {
 
         this.request = request;
         this.topic = topic;
         this.args = args;
         this.kwargs = kwargs;
-        this.acknowledge = acknowledge;
-        this.excludeMe = excludeMe;
-        this.retain = retain;
+        if(publishOptions == null){
+            publishOptions = new PublishOptions(true, true, false, null);
+        }
+        this.publishOptions = publishOptions;
     }
 
     public static Publish parse(List<Object> wmsg) {
@@ -70,8 +70,9 @@ public static Publish parse(List<Object> wmsg) {
         boolean acknowledge = getOrDefault(options, "acknowledge", false);
         boolean excludeMe = getOrDefault(options, "exclude_me", true);
         boolean retain = getOrDefault(options, "retain", false);
-
-        return new Publish(request, topic, args, kwargs, acknowledge, excludeMe, retain);
+        List<String> eligibleAuthIds = getOrDefault(options, "retain", null);
+        PublishOptions publishOptions = new PublishOptions(acknowledge, excludeMe, retain, eligibleAuthIds);
+        return new Publish(request, topic, args, kwargs, publishOptions);
     }
 
     @Override
@@ -80,14 +81,17 @@ public static Publish parse(List<Object> wmsg) {
         marshaled.add(MESSAGE_TYPE);
         marshaled.add(request);
         Map<String, Object> options = new HashMap<>();
-        if (acknowledge) {
-            options.put("acknowledge", acknowledge);
+        if (publishOptions.acknowledge) {
+            options.put("acknowledge", publishOptions.acknowledge);
+        }
+        if (!publishOptions.excludeMe) {
+            options.put("exclude_me", publishOptions.excludeMe);
         }
-        if (!excludeMe) {
-            options.put("exclude_me", excludeMe);
+        if (publishOptions.retain) {
+            options.put("retain", publishOptions.retain);
         }
-        if (retain) {
-            options.put("retain", retain);
+        if (publishOptions.eligibleAuthIds != null && publishOptions.eligibleAuthIds.size() > 0) {
+            options.put("eligible_authid", publishOptions.eligibleAuthIds);
         }
         marshaled.add(options);
         marshaled.add(topic);
diff --git a/autobahn/src/main/java/io/crossbar/autobahn/wamp/types/PublishOptions.java b/autobahn/src/main/java/io/crossbar/autobahn/wamp/types/PublishOptions.java
index 84d01fb..d1180f6 100644
--- a/autobahn/src/main/java/io/crossbar/autobahn/wamp/types/PublishOptions.java
+++ b/autobahn/src/main/java/io/crossbar/autobahn/wamp/types/PublishOptions.java
@@ -11,16 +11,23 @@
 
 package io.crossbar.autobahn.wamp.types;
 
+import java.util.List;
+
 public class PublishOptions {
     public final boolean acknowledge;
     public final boolean excludeMe;
     public final boolean retain;
+    public List<String> eligibleAuthIds;
 
     public PublishOptions(boolean acknowledge, boolean excludeMe) {
     	this(acknowledge, excludeMe, false);
     }
     
     public PublishOptions(boolean acknowledge, boolean excludeMe, boolean retain) {
+        this(acknowledge, excludeMe, retain, null);
+    }
+
+    public PublishOptions(boolean acknowledge, boolean excludeMe, boolean retain, List<String> eligibleAuthIds){
         this.acknowledge = acknowledge;
         this.excludeMe = excludeMe;
         this.retain = retain;
