diff --git a/Autobahn/libs/jackson-annotations-2.2.3.jar b/Autobahn/libs/jackson-annotations-2.2.3.jar
new file mode 100644
index 0000000..b62c87d
Binary files /dev/null and b/Autobahn/libs/jackson-annotations-2.2.3.jar differ
diff --git a/Autobahn/libs/jackson-core-2.2.3.jar b/Autobahn/libs/jackson-core-2.2.3.jar
new file mode 100644
index 0000000..24318a4
Binary files /dev/null and b/Autobahn/libs/jackson-core-2.2.3.jar differ
diff --git a/Autobahn/libs/jackson-core-asl-1.9.7.jar b/Autobahn/libs/jackson-core-asl-1.9.7.jar
deleted file mode 100644
index ea5f586..0000000
Binary files a/Autobahn/libs/jackson-core-asl-1.9.7.jar and /dev/null differ
diff --git a/Autobahn/libs/jackson-databind-2.2.3.jar b/Autobahn/libs/jackson-databind-2.2.3.jar
new file mode 100644
index 0000000..8545084
Binary files /dev/null and b/Autobahn/libs/jackson-databind-2.2.3.jar differ
diff --git a/Autobahn/libs/jackson-mapper-asl-1.9.7.jar b/Autobahn/libs/jackson-mapper-asl-1.9.7.jar
deleted file mode 100644
index 21559fb..0000000
Binary files a/Autobahn/libs/jackson-mapper-asl-1.9.7.jar and /dev/null differ
diff --git a/Autobahn/src/de/tavendo/autobahn/Wamp.java b/Autobahn/src/de/tavendo/autobahn/Wamp.java
index 53711f9..925a884 100644
--- a/Autobahn/src/de/tavendo/autobahn/Wamp.java
+++ b/Autobahn/src/de/tavendo/autobahn/Wamp.java
@@ -21,8 +21,10 @@
 
 import java.util.HashMap;
 import java.util.List;
+
 import org.apache.http.message.BasicNameValuePair;
-import org.codehaus.jackson.type.TypeReference;
+
+import com.fasterxml.jackson.core.type.TypeReference;
 
 /**
  * WAMP interface.
diff --git a/Autobahn/src/de/tavendo/autobahn/WampConnection.java b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
index db0bba6..29dbde1 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampConnection.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampConnection.java
@@ -24,10 +24,12 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.http.message.BasicNameValuePair;
-import org.codehaus.jackson.type.TypeReference;
 
 import android.os.HandlerThread;
 import android.util.Log;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+
 import de.tavendo.autobahn.WampMessage.GoodBye;
 
 public class WampConnection extends WebSocketConnection implements Wamp {
@@ -328,8 +330,8 @@ public void shutdown()
 		isShutdown = true;
 		
 		WampMessage.GoodBye goodbye = new GoodBye(new HashMap<String, Object>(), "wamp.error.goodbye_and_out");
-		
-		mWriter.forward(goodbye);
+		if(mWriter != null)
+			mWriter.forward(goodbye);
 	}
 
 	/**
diff --git a/Autobahn/src/de/tavendo/autobahn/WampReader.java b/Autobahn/src/de/tavendo/autobahn/WampReader.java
index cbf07eb..f1afc50 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampReader.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampReader.java
@@ -24,16 +24,17 @@
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonParseException;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
-
 import android.os.Handler;
 import android.util.Log;
+
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonParseException;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
 import de.tavendo.autobahn.WampConnection.CallMeta;
 import de.tavendo.autobahn.WampConnection.PubMeta;
 import de.tavendo.autobahn.WampConnection.SubMeta;
@@ -99,11 +100,8 @@ public WampReader(ConcurrentHashMap<String, CallMeta> calls,
 		mRequestTopicMap = reqtopicmap;
 
 		mJsonMapper = new ObjectMapper();
-		mJsonMapper
-				.configure(
-						DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,
-						false);
-		mJsonFactory = mJsonMapper.getJsonFactory();
+		mJsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+	      mJsonFactory = mJsonMapper.getFactory(); //mJsonMapper.getJsonFactory(); 
 
 		if (DEBUG)
 			Log.d(TAG, "created");
@@ -132,7 +130,7 @@ protected void onRawTextMessage(byte[] payload) {
 		try {
 
 			// create parser on top of raw UTF-8 payload
-			JsonParser parser = mJsonFactory.createJsonParser(payload);
+			JsonParser parser =  mJsonFactory.createParser(payload); //mJsonFactory.createJsonParser(payload);
 			JsonToken token = null;
 
 			// all Autobahn messages are JSON arrays
diff --git a/Autobahn/src/de/tavendo/autobahn/WampWriter.java b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
index e64642c..50514de 100644
--- a/Autobahn/src/de/tavendo/autobahn/WampWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WampWriter.java
@@ -21,16 +21,16 @@
 import java.io.IOException;
 import java.nio.channels.SocketChannel;
 
-import org.codehaus.jackson.JsonFactory;
-import org.codehaus.jackson.JsonGenerationException;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonMappingException;
-import org.codehaus.jackson.map.MappingJsonFactory;
-
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
 
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonMappingException;
+import com.fasterxml.jackson.databind.MappingJsonFactory;
+
 /**
  * Autobahn WAMP writer, the transmitting leg of a WAMP connection.
  * This writer serializes WAMP messages forwarded from the foreground thread
@@ -81,7 +81,7 @@ protected void processAppMessage(Object msg) throws WebSocketException, IOExcept
       mPayload.reset();
 
       // creating a JSON generator is supposed to be a light-weight operation
-      JsonGenerator generator = mJsonFactory.createJsonGenerator(mPayload);
+      JsonGenerator generator = mJsonFactory.createGenerator(mPayload); //mJsonFactory.createJsonGenerator(mPayload);
 
       try {
 
diff --git a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
index fb5efed..82c7318 100644
--- a/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
+++ b/Autobahn/src/de/tavendo/autobahn/WebSocketWriter.java
@@ -317,11 +317,11 @@ protected void sendFrame(int opcode, boolean fin, byte[] payload) throws IOExcep
     */
    protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, int length) throws IOException {
 
-	   byte[] temp = new byte[length];
+	  /* byte[] temp = new byte[length];
 	   
 	   System.arraycopy(payload, 0, temp, 0, length);
 	   
-	   Log.i(TAG," Writing.. : " + new String(temp));
+	   Log.i(TAG," Writing.. : " + new String(temp));*/
 	   
       // first octet
       byte b0 = 0;
