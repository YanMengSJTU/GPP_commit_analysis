diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
index ed079b3da..14423cf5e 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
@@ -60,25 +60,6 @@
   // -------------------------------------------------------------------------------
   // Firebase Android Components logic.
 
-  /**
-   * Returns a singleton instance of Firebase Remote Config.
-   *
-   * <p>{@link FirebaseRemoteConfig} uses the default {@link FirebaseApp}, so if no {@link
-   * FirebaseApp} has been initialized yet, this method throws an {@link IllegalStateException}.
-   *
-   * <p>To identify the current app instance, the fetch request creates a Firebase Instance ID
-   * token, which periodically sends data to the Firebase backend. To stop the periodic sync, call
-   * {@link com.google.firebase.iid.FirebaseInstanceId#deleteInstanceId}. To create a new token and
-   * resume the periodic sync, call {@code fetchConfig} again.
-   *
-   * @return A singleton instance of {@link FirebaseRemoteConfig} for the default {@link
-   *     FirebaseApp}.
-   */
-  @NonNull
-  public static FirebaseRemoteConfig getInstance(@Nullable Proxy proxy) {
-    return getInstance(FirebaseApp.getInstance(), proxy);
-  }
-
   /**
    * Returns a singleton instance of Firebase Remote Config.
    *
@@ -95,13 +76,13 @@ public static FirebaseRemoteConfig getInstance(@Nullable Proxy proxy) {
    */
   @NonNull
   public static FirebaseRemoteConfig getInstance() {
-    return getInstance(FirebaseApp.getInstance(), null);
+    return getInstance(FirebaseApp.getInstance());
   }
 
   /** Returns an instance of Firebase Remote Config for the given {@link FirebaseApp}. */
   @NonNull
-  public static FirebaseRemoteConfig getInstance(@NonNull FirebaseApp app, @Nullable Proxy proxy) {
-    return app.get(RemoteConfigComponent.class).getDefault(proxy);
+  public static FirebaseRemoteConfig getInstance(@NonNull FirebaseApp app) {
+    return app.get(RemoteConfigComponent.class).getDefault();
   }
 
   // -------------------------------------------------------------------------------
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigSettings.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigSettings.java
index e1b32dfc9..aac5b00cb 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigSettings.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigSettings.java
@@ -18,6 +18,9 @@
 import static com.google.firebase.remoteconfig.internal.ConfigFetchHandler.DEFAULT_MINIMUM_FETCH_INTERVAL_IN_SECONDS;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import java.net.Proxy;
 
 /**
  * Wraps the settings for {@link FirebaseRemoteConfig} operations.
@@ -28,11 +31,17 @@
   private final boolean enableDeveloperMode;
   private final long fetchTimeoutInSeconds;
   private final long minimumFetchInterval;
+  private final Proxy.Type proxyType;
+  private final String proxyHost;
+  private final int proxyPort;
 
   private FirebaseRemoteConfigSettings(Builder builder) {
     enableDeveloperMode = builder.enableDeveloperMode;
     fetchTimeoutInSeconds = builder.fetchTimeoutInSeconds;
     minimumFetchInterval = builder.minimumFetchInterval;
+    proxyType = builder.proxyType;
+    proxyHost = builder.proxyHost;
+    proxyPort = builder.proxyPort;
   }
 
   /**
@@ -61,6 +70,20 @@ public long getMinimumFetchIntervalInSeconds() {
     return minimumFetchInterval;
   }
 
+  @NonNull
+  public Proxy.Type getProxyType() {
+    return proxyType;
+  }
+
+  @Nullable
+  public String getProxyHost() {
+    return proxyHost;
+  }
+
+  public int getProxyPort() {
+    return proxyPort;
+  }
+
   /** Constructs a builder initialized with the current FirebaseRemoteConfigSettings. */
   @NonNull
   public FirebaseRemoteConfigSettings.Builder toBuilder() {
@@ -77,6 +100,9 @@ public long getMinimumFetchIntervalInSeconds() {
     // TODO(issues/257): Move constants to Constants file.
     private long fetchTimeoutInSeconds = NETWORK_CONNECTION_TIMEOUT_IN_SECONDS;
     private long minimumFetchInterval = DEFAULT_MINIMUM_FETCH_INTERVAL_IN_SECONDS;
+    @NonNull public Proxy.Type proxyType = Proxy.Type.DIRECT;
+    @Nullable public String proxyHost;
+    public int proxyPort;
 
     /**
      * Turns the developer mode setting on or off.
@@ -134,6 +160,18 @@ public Builder setMinimumFetchIntervalInSeconds(long duration) {
       return this;
     }
 
+    /**
+     * Sets the proxy server for client calls.
+     *
+     */
+    @NonNull
+    public Builder setProxyServer(@NonNull Proxy.Type type, @NonNull String host, int port) {
+      this.proxyType = type;
+      this.proxyHost = host;
+      this.proxyPort = port;
+      return this;
+    }
+
     /**
      * Returns a {@link FirebaseRemoteConfigSettings} with the settings provided to this builder.
      */
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java
index 20e5c0d52..a6235c8d7 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java
@@ -93,8 +93,7 @@
       FirebaseApp firebaseApp,
       FirebaseInstanceId firebaseInstanceId,
       FirebaseABTesting firebaseAbt,
-      @Nullable AnalyticsConnector analyticsConnector,
-      @Nullable Proxy proxy) {
+      @Nullable AnalyticsConnector analyticsConnector) {
     this(
         context,
         Executors.newCachedThreadPool(),
@@ -103,8 +102,7 @@
         firebaseAbt,
         analyticsConnector,
         new LegacyConfigsHandler(context, firebaseApp.getOptions().getApplicationId()),
-        /* loadGetDefault= */ true,
-        proxy);
+        /* loadGetDefault= */ true);
   }
 
   /** Firebase Remote Config Component constructor for testing component logic. */
@@ -117,8 +115,7 @@ protected RemoteConfigComponent(
       FirebaseABTesting firebaseAbt,
       @Nullable AnalyticsConnector analyticsConnector,
       LegacyConfigsHandler legacyConfigsHandler,
-      boolean loadGetDefault,
-      @Nullable Proxy proxy) {
+      boolean loadGetDefault) {
     this.context = context;
     this.executorService = executorService;
     this.firebaseApp = firebaseApp;
@@ -133,7 +130,7 @@ protected RemoteConfigComponent(
     // while another test has already cleared the component but hasn't gotten a new one yet.
     if (loadGetDefault) {
       // Loads the default namespace's configs from disk on App startup.
-      Tasks.call(executorService, () -> getDefault(proxy));
+      Tasks.call(executorService, this::getDefault);
       Tasks.call(executorService, legacyConfigsHandler::saveLegacyConfigsIfNecessary);
     }
   }
@@ -141,8 +138,8 @@ protected RemoteConfigComponent(
   /**
    * Returns the default Firebase Remote Config instance for this component's {@link FirebaseApp}.
    */
-  FirebaseRemoteConfig getDefault(@Nullable Proxy proxy) {
-    return get(DEFAULT_NAMESPACE, proxy);
+  FirebaseRemoteConfig getDefault() {
+    return get(DEFAULT_NAMESPACE);
   }
 
   /**
@@ -153,7 +150,7 @@ FirebaseRemoteConfig getDefault(@Nullable Proxy proxy) {
    */
   @VisibleForTesting
   @KeepForSdk
-  public synchronized FirebaseRemoteConfig get(String namespace, @Nullable Proxy proxy) {
+  public synchronized FirebaseRemoteConfig get(String namespace) {
     ConfigCacheClient fetchedCacheClient = getCacheClient(namespace, FETCH_FILE_NAME);
     ConfigCacheClient activatedCacheClient = getCacheClient(namespace, ACTIVATE_FILE_NAME);
     ConfigCacheClient defaultsCacheClient = getCacheClient(namespace, DEFAULTS_FILE_NAME);
@@ -166,7 +163,7 @@ public synchronized FirebaseRemoteConfig get(String namespace, @Nullable Proxy p
         fetchedCacheClient,
         activatedCacheClient,
         defaultsCacheClient,
-        getFetchHandler(namespace, fetchedCacheClient, metadataClient, proxy),
+        getFetchHandler(namespace, fetchedCacheClient, metadataClient),
         getGetHandler(activatedCacheClient, defaultsCacheClient),
         metadataClient);
   }
@@ -227,7 +224,7 @@ public static ConfigCacheClient getCacheClient(
 
   @VisibleForTesting
   ConfigFetchHttpClient getFrcBackendApiClient(
-          String apiKey, String namespace, ConfigMetadataClient metadataClient, Proxy proxy) {
+          String apiKey, String namespace, ConfigMetadataClient metadataClient) {
     String appId = firebaseApp.getOptions().getApplicationId();
     return new ConfigFetchHttpClient(
         context,
@@ -236,12 +233,12 @@ ConfigFetchHttpClient getFrcBackendApiClient(
         namespace,
         metadataClient.getFetchTimeoutInSeconds(),
         NETWORK_CONNECTION_TIMEOUT_IN_SECONDS,
-        proxy);
+        metadataClient.getProxyServer());
   }
 
   @VisibleForTesting
   synchronized ConfigFetchHandler getFetchHandler(
-      String namespace, ConfigCacheClient fetchedCacheClient, ConfigMetadataClient metadataClient, Proxy proxy) {
+      String namespace, ConfigCacheClient fetchedCacheClient, ConfigMetadataClient metadataClient) {
     return new ConfigFetchHandler(
         firebaseInstanceId,
         isPrimaryApp(firebaseApp) ? analyticsConnector : null,
@@ -249,7 +246,7 @@ synchronized ConfigFetchHandler getFetchHandler(
         DEFAULT_CLOCK,
         DEFAULT_RANDOM,
         fetchedCacheClient,
-        getFrcBackendApiClient(firebaseApp.getOptions().getApiKey(), namespace, metadataClient, proxy),
+        getFrcBackendApiClient(firebaseApp.getOptions().getApiKey(), namespace, metadataClient),
         metadataClient,
         this.customHeaders);
   }
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java
index 1979d166e..62bf8087f 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java
@@ -25,8 +25,6 @@
 import com.google.firebase.components.Dependency;
 import com.google.firebase.iid.FirebaseInstanceId;
 import com.google.firebase.platforminfo.LibraryVersionComponent;
-
-import java.net.Proxy;
 import java.util.Arrays;
 import java.util.List;
 
@@ -48,7 +46,6 @@
             .add(Dependency.required(FirebaseInstanceId.class))
             .add(Dependency.required(AbtComponent.class))
             .add(Dependency.optional(AnalyticsConnector.class))
-            .add(Dependency.optional(Proxy.class))
             .factory(
                 container ->
                     new RemoteConfigComponent(
@@ -56,8 +53,7 @@
                         container.get(FirebaseApp.class),
                         container.get(FirebaseInstanceId.class),
                         container.get(AbtComponent.class).get(OriginService.REMOTE_CONFIG),
-                        container.get(AnalyticsConnector.class),
-                        container.get(Proxy.class)))
+                        container.get(AnalyticsConnector.class)))
             .alwaysEager()
             .build(),
         LibraryVersionComponent.create("fire-rc", BuildConfig.VERSION_NAME));
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigMetadataClient.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigMetadataClient.java
index 50c91b41a..9dc5f6933 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigMetadataClient.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigMetadataClient.java
@@ -30,6 +30,8 @@
 import com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo;
 import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;
 import java.lang.annotation.Retention;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.util.Date;
 
 /**
@@ -68,6 +70,10 @@
   private static final String BACKOFF_END_TIME_IN_MILLIS_KEY = "backoff_end_time_in_millis";
   private static final String NUM_FAILED_FETCHES_KEY = "num_failed_fetches";
 
+  private static final String PROXY_TYPE_KEY = "proxy_type_ordinal";
+  private static final String PROXY_HOST_KEY = "proxy_host";
+  private static final String PROXY_PORT_KEY = "proxy_port";
+
   private final SharedPreferences frcMetadata;
 
   private final Object frcInfoLock;
@@ -92,6 +98,20 @@ public long getMinimumFetchIntervalInSeconds() {
         MINIMUM_FETCH_INTERVAL_IN_SECONDS_KEY, DEFAULT_MINIMUM_FETCH_INTERVAL_IN_SECONDS);
   }
 
+  @Nullable
+  public Proxy getProxyServer() {
+    int proxyType = frcMetadata.getInt(PROXY_TYPE_KEY, Proxy.Type.DIRECT.ordinal());
+    if (proxyType == Proxy.Type.DIRECT.ordinal()) {
+      return null;
+    }
+
+    InetSocketAddress sa = new InetSocketAddress(
+            frcMetadata.getString(PROXY_HOST_KEY, ""),
+            frcMetadata.getInt(PROXY_PORT_KEY, 0));
+
+    return new Proxy(Proxy.Type.values()[proxyType], sa);
+  }
+
   @LastFetchStatus
   int getLastFetchStatus() {
     return frcMetadata.getInt(LAST_FETCH_STATUS_KEY, LAST_FETCH_STATUS_NO_FETCH_YET);
@@ -119,17 +139,23 @@ public FirebaseRemoteConfigInfo getInfo() {
       int lastFetchStatus =
           frcMetadata.getInt(LAST_FETCH_STATUS_KEY, LAST_FETCH_STATUS_NO_FETCH_YET);
 
-      FirebaseRemoteConfigSettings settings =
-          new FirebaseRemoteConfigSettings.Builder()
+      FirebaseRemoteConfigSettings.Builder builder = new FirebaseRemoteConfigSettings.Builder()
               .setDeveloperModeEnabled(frcMetadata.getBoolean(DEVELOPER_MODE_KEY, false))
-              .setFetchTimeoutInSeconds(
-                  frcMetadata.getLong(
-                      FETCH_TIMEOUT_IN_SECONDS_KEY, NETWORK_CONNECTION_TIMEOUT_IN_SECONDS))
-              .setMinimumFetchIntervalInSeconds(
-                  frcMetadata.getLong(
-                      MINIMUM_FETCH_INTERVAL_IN_SECONDS_KEY,
-                      DEFAULT_MINIMUM_FETCH_INTERVAL_IN_SECONDS))
-              .build();
+              .setFetchTimeoutInSeconds(frcMetadata.getLong(
+                              FETCH_TIMEOUT_IN_SECONDS_KEY, NETWORK_CONNECTION_TIMEOUT_IN_SECONDS))
+              .setMinimumFetchIntervalInSeconds(frcMetadata.getLong(
+                              MINIMUM_FETCH_INTERVAL_IN_SECONDS_KEY,
+                              DEFAULT_MINIMUM_FETCH_INTERVAL_IN_SECONDS));
+
+      int proxyType = frcMetadata.getInt(PROXY_TYPE_KEY, Proxy.Type.DIRECT.ordinal());
+      if (proxyType != Proxy.Type.DIRECT.ordinal()) {
+        builder.setProxyServer(
+                Proxy.Type.values()[proxyType],
+                frcMetadata.getString(PROXY_HOST_KEY,""),
+                frcMetadata.getInt(PROXY_PORT_KEY, 0));
+      }
+
+      FirebaseRemoteConfigSettings settings = builder.build();
 
       return FirebaseRemoteConfigInfoImpl.newBuilder()
           .withLastFetchStatus(lastFetchStatus)
@@ -160,13 +186,7 @@ public void clear() {
   @WorkerThread
   public void setConfigSettings(FirebaseRemoteConfigSettings settings) {
     synchronized (frcInfoLock) {
-      frcMetadata
-          .edit()
-          .putBoolean(DEVELOPER_MODE_KEY, settings.isDeveloperModeEnabled())
-          .putLong(FETCH_TIMEOUT_IN_SECONDS_KEY, settings.getFetchTimeoutInSeconds())
-          .putLong(
-              MINIMUM_FETCH_INTERVAL_IN_SECONDS_KEY, settings.getMinimumFetchIntervalInSeconds())
-          .commit();
+      setConfigSettingsEdit(settings).commit();
     }
   }
 
@@ -178,14 +198,23 @@ public void setConfigSettings(FirebaseRemoteConfigSettings settings) {
    */
   public void setConfigSettingsWithoutWaitingOnDiskWrite(FirebaseRemoteConfigSettings settings) {
     synchronized (frcInfoLock) {
-      frcMetadata
-          .edit()
-          .putBoolean(DEVELOPER_MODE_KEY, settings.isDeveloperModeEnabled())
-          .putLong(FETCH_TIMEOUT_IN_SECONDS_KEY, settings.getFetchTimeoutInSeconds())
-          .putLong(
-              MINIMUM_FETCH_INTERVAL_IN_SECONDS_KEY, settings.getMinimumFetchIntervalInSeconds())
-          .apply();
+      setConfigSettingsEdit(settings).apply();
+    }
+  }
+
+  private SharedPreferences.Editor setConfigSettingsEdit(FirebaseRemoteConfigSettings settings) {
+    SharedPreferences.Editor edit = frcMetadata.edit();
+    edit.putBoolean(DEVELOPER_MODE_KEY, settings.isDeveloperModeEnabled())
+            .putLong(FETCH_TIMEOUT_IN_SECONDS_KEY, settings.getFetchTimeoutInSeconds())
+            .putLong(
+                    MINIMUM_FETCH_INTERVAL_IN_SECONDS_KEY, settings.getMinimumFetchIntervalInSeconds());
+
+    if (settings.getProxyType() != Proxy.Type.DIRECT) {
+      edit.putInt(PROXY_TYPE_KEY, settings.getProxyType().ordinal())
+              .putString(PROXY_HOST_KEY, settings.getProxyHost())
+              .putInt(PROXY_PORT_KEY, settings.getProxyPort());
     }
+    return edit;
   }
 
   void updateLastFetchAsSuccessfulAt(Date fetchTime) {
