diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java
index 1d40b79df..0043c07ff 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java
@@ -23,8 +23,13 @@
 
   @Override
   public Task<String> getToken() {
-    TaskCompletionSource<String> source = new TaskCompletionSource<>();
+      System.out.println("getToken: EmptyCredentialsProvider");
+
+      TaskCompletionSource<String> source = new TaskCompletionSource<>();
     source.setResult(null);
+
+    System.out.println("AccessToken: "+ null);
+
     return source.getTask();
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java
index 52daf58ae..10b92461d 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java
@@ -78,6 +78,8 @@ public FirebaseAuthCredentialsProvider(InternalAuthProvider authProvider) {
 
   @Override
   public synchronized Task<String> getToken() {
+    System.out.println("getToken: FirebaseAuthCredentialsProvider");
+
     boolean doForceRefresh = forceRefresh;
     forceRefresh = false;
     Task<GetTokenResult> res = authProvider.getAccessToken(doForceRefresh);
@@ -97,7 +99,10 @@ public FirebaseAuthCredentialsProvider(InternalAuthProvider authProvider) {
             if (!task.isSuccessful()) {
               throw task.getException();
             } else {
-              return task.getResult().getToken();
+
+              String token = task.getResult().getToken();
+              System.out.println("AccessToken: "+ token);
+              return token;
             }
           }
         });
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
index 0f68cebde..93b13bd86 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
@@ -18,6 +18,7 @@
 
 import android.content.Context;
 import android.support.annotation.Nullable;
+
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.TaskCompletionSource;
 import com.google.android.gms.tasks.Tasks;
@@ -47,7 +48,9 @@
 import com.google.firebase.firestore.remote.RemoteStore;
 import com.google.firebase.firestore.util.AsyncQueue;
 import com.google.firebase.firestore.util.Logger;
+
 import io.grpc.Status;
+
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
@@ -59,199 +62,209 @@
  */
 public final class FirestoreClient implements RemoteStore.RemoteStoreCallback {
 
-  private static final String LOG_TAG = "FirestoreClient";
-
-  private final DatabaseInfo databaseInfo;
-  private final CredentialsProvider credentialsProvider;
-  private final AsyncQueue asyncQueue;
-
-  private Persistence persistence;
-  private LocalStore localStore;
-  private RemoteStore remoteStore;
-  private SyncEngine syncEngine;
-  private EventManager eventManager;
-
-  public FirestoreClient(
-      final Context context,
-      DatabaseInfo databaseInfo,
-      final boolean usePersistence,
-      CredentialsProvider credentialsProvider,
-      final AsyncQueue asyncQueue) {
-    this.databaseInfo = databaseInfo;
-    this.credentialsProvider = credentialsProvider;
-    this.asyncQueue = asyncQueue;
-
-    TaskCompletionSource<User> firstUser = new TaskCompletionSource<>();
-    final AtomicBoolean initialized = new AtomicBoolean(false);
-    credentialsProvider.setChangeListener(
-        (User user) -> {
-          if (initialized.compareAndSet(false, true)) {
-            hardAssert(!firstUser.getTask().isComplete(), "Already fulfilled first user task");
-            firstUser.setResult(user);
-          } else {
-            asyncQueue.enqueueAndForget(
+    private static final String LOG_TAG = "FirestoreClient";
+
+    private final DatabaseInfo databaseInfo;
+    private final CredentialsProvider credentialsProvider;
+    private final AsyncQueue asyncQueue;
+
+    private Persistence persistence;
+    private LocalStore localStore;
+    private RemoteStore remoteStore;
+    private SyncEngine syncEngine;
+    private EventManager eventManager;
+
+    public FirestoreClient(
+            final Context context,
+            DatabaseInfo databaseInfo,
+            final boolean usePersistence,
+            CredentialsProvider credentialsProvider,
+            final AsyncQueue asyncQueue) {
+        this.databaseInfo = databaseInfo;
+        this.credentialsProvider = credentialsProvider;
+        this.asyncQueue = asyncQueue;
+
+        TaskCompletionSource<User> firstUser = new TaskCompletionSource<>();
+        final AtomicBoolean initialized = new AtomicBoolean(false);
+        credentialsProvider.setChangeListener(
+                (User user) -> {
+                    if (initialized.compareAndSet(false, true)) {
+                        hardAssert(!firstUser.getTask().isComplete(), "Already fulfilled first user task");
+                        firstUser.setResult(user);
+                    } else {
+                        asyncQueue.enqueueAndForget(
+                                () -> {
+                                    Logger.debug(LOG_TAG, "Credential changed. Current user: %s", user.getUid());
+                                    syncEngine.handleCredentialChange(user);
+                                });
+                    }
+                });
+
+        // Defer initialization until we get the current user from the changeListener. This is
+        // guaranteed to be synchronously dispatched onto our worker queue, so we will be initialized
+        // before any subsequently queued work runs.
+        asyncQueue.enqueueAndForget(
+                () -> {
+                    try {
+                        // Block on initial user being available
+                        User initialUser = Tasks.await(firstUser.getTask());
+                        initialize(context, initialUser, usePersistence);
+                    } catch (InterruptedException | ExecutionException e) {
+                        throw new RuntimeException(e);
+                    }
+                });
+    }
+
+    public Task<Void> disableNetwork() {
+        return asyncQueue.enqueue(() -> remoteStore.disableNetwork());
+    }
+
+    public Task<Void> enableNetwork() {
+        return asyncQueue.enqueue(() -> remoteStore.enableNetwork());
+    }
+
+    /**
+     * Shuts down this client, cancels all writes / listeners, and releases all resources.
+     */
+    public Task<Void> shutdown() {
+        credentialsProvider.removeChangeListener();
+        return asyncQueue.enqueue(
+                () -> {
+                    remoteStore.shutdown();
+                    persistence.shutdown();
+                });
+    }
+
+    /**
+     * Starts listening to a query.
+     */
+    public QueryListener listen(
+            Query query, ListenOptions options, EventListener<ViewSnapshot> listener) {
+        QueryListener queryListener = new QueryListener(query, options, listener);
+        asyncQueue.enqueueAndForget(() -> eventManager.addQueryListener(queryListener));
+        return queryListener;
+    }
+
+    /**
+     * Stops listening to a query previously listened to.
+     */
+    public void stopListening(QueryListener listener) {
+        asyncQueue.enqueueAndForget(() -> eventManager.removeQueryListener(listener));
+    }
+
+    public Task<Document> getDocumentFromLocalCache(DocumentKey docKey) {
+        return asyncQueue
+                .enqueue(() -> localStore.readDocument(docKey))
+                .continueWith(
+                        (result) -> {
+                            @Nullable MaybeDocument maybeDoc = result.getResult();
+
+                            if (maybeDoc instanceof Document) {
+                                return (Document) maybeDoc;
+                            } else if (maybeDoc instanceof NoDocument) {
+                                return null;
+                            } else {
+                                throw new FirebaseFirestoreException(
+                                        "Failed to get document from cache. (However, this document may exist on the "
+                                                + "server. Run again without setting source to CACHE to attempt "
+                                                + "to retrieve the document from the server.)",
+                                        Code.UNAVAILABLE);
+                            }
+                        });
+    }
+
+    public Task<ViewSnapshot> getDocumentsFromLocalCache(Query query) {
+        return asyncQueue.enqueue(
                 () -> {
-                  Logger.debug(LOG_TAG, "Credential changed. Current user: %s", user.getUid());
-                  syncEngine.handleCredentialChange(user);
+                    ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
+
+                    View view =
+                            new View(
+                                    query,
+                                    new ImmutableSortedSet<DocumentKey>(
+                                            Collections.emptyList(), DocumentKey::compareTo));
+                    View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
+                    return view.applyChanges(viewDocChanges).getSnapshot();
                 });
-          }
-        });
-
-    // Defer initialization until we get the current user from the changeListener. This is
-    // guaranteed to be synchronously dispatched onto our worker queue, so we will be initialized
-    // before any subsequently queued work runs.
-    asyncQueue.enqueueAndForget(
-        () -> {
-          try {
-            // Block on initial user being available
-            User initialUser = Tasks.await(firstUser.getTask());
-            initialize(context, initialUser, usePersistence);
-          } catch (InterruptedException | ExecutionException e) {
-            throw new RuntimeException(e);
-          }
-        });
-  }
-
-  public Task<Void> disableNetwork() {
-    return asyncQueue.enqueue(() -> remoteStore.disableNetwork());
-  }
-
-  public Task<Void> enableNetwork() {
-    return asyncQueue.enqueue(() -> remoteStore.enableNetwork());
-  }
-
-  /** Shuts down this client, cancels all writes / listeners, and releases all resources. */
-  public Task<Void> shutdown() {
-    credentialsProvider.removeChangeListener();
-    return asyncQueue.enqueue(
-        () -> {
-          remoteStore.shutdown();
-          persistence.shutdown();
-        });
-  }
-
-  /** Starts listening to a query. */
-  public QueryListener listen(
-      Query query, ListenOptions options, EventListener<ViewSnapshot> listener) {
-    QueryListener queryListener = new QueryListener(query, options, listener);
-    asyncQueue.enqueueAndForget(() -> eventManager.addQueryListener(queryListener));
-    return queryListener;
-  }
-
-  /** Stops listening to a query previously listened to. */
-  public void stopListening(QueryListener listener) {
-    asyncQueue.enqueueAndForget(() -> eventManager.removeQueryListener(listener));
-  }
-
-  public Task<Document> getDocumentFromLocalCache(DocumentKey docKey) {
-    return asyncQueue
-        .enqueue(() -> localStore.readDocument(docKey))
-        .continueWith(
-            (result) -> {
-              @Nullable MaybeDocument maybeDoc = result.getResult();
-
-              if (maybeDoc instanceof Document) {
-                return (Document) maybeDoc;
-              } else if (maybeDoc instanceof NoDocument) {
-                return null;
-              } else {
-                throw new FirebaseFirestoreException(
-                    "Failed to get document from cache. (However, this document may exist on the "
-                        + "server. Run again without setting source to CACHE to attempt "
-                        + "to retrieve the document from the server.)",
-                    Code.UNAVAILABLE);
-              }
-            });
-  }
-
-  public Task<ViewSnapshot> getDocumentsFromLocalCache(Query query) {
-    return asyncQueue.enqueue(
-        () -> {
-          ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
-
-          View view =
-              new View(
-                  query,
-                  new ImmutableSortedSet<DocumentKey>(
-                      Collections.emptyList(), DocumentKey::compareTo));
-          View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
-          return view.applyChanges(viewDocChanges).getSnapshot();
-        });
-  }
-
-  /** Writes mutations. The returned task will be notified when it's written to the backend. */
-  public Task<Void> write(final List<Mutation> mutations) {
-    final TaskCompletionSource<Void> source = new TaskCompletionSource<>();
-    asyncQueue.enqueueAndForget(() -> syncEngine.writeMutations(mutations, source));
-    return source.getTask();
-  }
-
-  /** Tries to execute the transaction in updateFunction up to retries times. */
-  public <TResult> Task<TResult> transaction(
-      Function<Transaction, Task<TResult>> updateFunction, int retries) {
-    return AsyncQueue.callTask(
-        asyncQueue.getExecutor(),
-        () -> syncEngine.transaction(asyncQueue, updateFunction, retries));
-  }
-
-  private void initialize(Context context, User user, boolean usePersistence) {
-    // Note: The initialization work must all be synchronous (we can't dispatch more work) since
-    // external write/listen operations could get queued to run before that subsequent work
-    // completes.
-    Logger.debug(LOG_TAG, "Initializing. user=%s", user.getUid());
-
-    if (usePersistence) {
-      LocalSerializer serializer =
-          new LocalSerializer(new RemoteSerializer(databaseInfo.getDatabaseId()));
-      persistence =
-          new SQLitePersistence(
-              context, databaseInfo.getPersistenceKey(), databaseInfo.getDatabaseId(), serializer);
-    } else {
-      persistence = MemoryPersistence.createEagerGcMemoryPersistence();
     }
 
-    persistence.start();
-    localStore = new LocalStore(persistence, user);
-
-    Datastore datastore = new Datastore(databaseInfo, asyncQueue, credentialsProvider);
-    remoteStore = new RemoteStore(this, localStore, datastore, asyncQueue);
-
-    syncEngine = new SyncEngine(localStore, remoteStore, user);
-    eventManager = new EventManager(syncEngine);
-
-    // NOTE: RemoteStore depends on LocalStore (for persisting stream tokens, refilling mutation
-    // queue, etc.) so must be started after LocalStore.
-    localStore.start();
-    remoteStore.start();
-  }
-
-  @Override
-  public void handleRemoteEvent(RemoteEvent remoteEvent) {
-    syncEngine.handleRemoteEvent(remoteEvent);
-  }
-
-  @Override
-  public void handleRejectedListen(int targetId, Status error) {
-    syncEngine.handleRejectedListen(targetId, error);
-  }
-
-  @Override
-  public void handleSuccessfulWrite(MutationBatchResult mutationBatchResult) {
-    syncEngine.handleSuccessfulWrite(mutationBatchResult);
-  }
-
-  @Override
-  public void handleRejectedWrite(int batchId, Status error) {
-    syncEngine.handleRejectedWrite(batchId, error);
-  }
-
-  @Override
-  public void handleOnlineStateChange(OnlineState onlineState) {
-    syncEngine.handleOnlineStateChange(onlineState);
-  }
-
-  @Override
-  public ImmutableSortedSet<DocumentKey> getRemoteKeysForTarget(int targetId) {
-    return syncEngine.getRemoteKeysForTarget(targetId);
-  }
+    /**
+     * Writes mutations. The returned task will be notified when it's written to the backend.
+     */
+    public Task<Void> write(final List<Mutation> mutations) {
+        final TaskCompletionSource<Void> source = new TaskCompletionSource<>();
+        asyncQueue.enqueueAndForget(() -> syncEngine.writeMutations(mutations, source));
+        return source.getTask();
+    }
+
+    /**
+     * Tries to execute the transaction in updateFunction up to retries times.
+     */
+    public <TResult> Task<TResult> transaction(
+            Function<Transaction, Task<TResult>> updateFunction, int retries) {
+        return AsyncQueue.callTask(
+                asyncQueue.getExecutor(),
+                () -> syncEngine.transaction(asyncQueue, updateFunction, retries));
+    }
+
+    private void initialize(Context context, User user, boolean usePersistence) {
+        // Note: The initialization work must all be synchronous (we can't dispatch more work) since
+        // external write/listen operations could get queued to run before that subsequent work
+        // completes.
+        Logger.debug(LOG_TAG, "Initializing. user=%s", user.getUid());
+
+        if (usePersistence) {
+            LocalSerializer serializer =
+                    new LocalSerializer(new RemoteSerializer(databaseInfo.getDatabaseId()));
+            persistence =
+                    new SQLitePersistence(
+                            context, databaseInfo.getPersistenceKey(), databaseInfo.getDatabaseId(), serializer);
+        } else {
+            persistence = MemoryPersistence.createEagerGcMemoryPersistence();
+        }
+
+        persistence.start();
+        localStore = new LocalStore(persistence, user);
+
+        Datastore datastore = new Datastore(databaseInfo, asyncQueue, credentialsProvider);
+        remoteStore = new RemoteStore(this, localStore, datastore, asyncQueue);
+
+        syncEngine = new SyncEngine(localStore, remoteStore, user);
+        eventManager = new EventManager(syncEngine);
+
+        // NOTE: RemoteStore depends on LocalStore (for persisting stream tokens, refilling mutation
+        // queue, etc.) so must be started after LocalStore.
+        localStore.start();
+        remoteStore.start();
+    }
+
+    @Override
+    public void handleRemoteEvent(RemoteEvent remoteEvent) {
+        syncEngine.handleRemoteEvent(remoteEvent);
+    }
+
+    @Override
+    public void handleRejectedListen(int targetId, Status error) {
+        syncEngine.handleRejectedListen(targetId, error);
+    }
+
+    @Override
+    public void handleSuccessfulWrite(MutationBatchResult mutationBatchResult) {
+        syncEngine.handleSuccessfulWrite(mutationBatchResult);
+    }
+
+    @Override
+    public void handleRejectedWrite(int batchId, Status error) {
+        syncEngine.handleRejectedWrite(batchId, error);
+    }
+
+    @Override
+    public void handleOnlineStateChange(OnlineState onlineState) {
+        syncEngine.handleOnlineStateChange(onlineState);
+    }
+
+    @Override
+    public ImmutableSortedSet<DocumentKey> getRemoteKeysForTarget(int targetId) {
+        return syncEngine.getRemoteKeysForTarget(targetId);
+    }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java
index f779b7394..8aa3849e5 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java
@@ -54,7 +54,7 @@ public void applyRequestMetadata(
         .addOnSuccessListener(
             executor,
             token -> {
-              Logger.debug(LOG_TAG, "Successfully fetched token.");
+              Logger.debug(LOG_TAG, "Successfully fetched token:"+ "Bearer " + token);
               Metadata metadata = new Metadata();
               if (token != null) {
                 metadata.put(AUTHORIZATION_HEADER, "Bearer " + token);
diff --git a/root-project.gradle b/root-project.gradle
index 602812066..45b552d74 100644
--- a/root-project.gradle
+++ b/root-project.gradle
@@ -18,6 +18,7 @@ import groovy.io.FileType
 buildscript {
 
     repositories {
+        mavenLocal()
         google()
         jcenter()
         mavenCentral()
@@ -49,9 +50,9 @@ apply plugin: com.google.firebase.gradle.plugins.publish.PublishingPlugin
 
 configure(subprojects) {
     repositories {
+        mavenLocal()
         google()
         jcenter()
-        mavenLocal()
         maven {
             url "https://oss.sonatype.org/content/repositories/snapshots"
         }
@@ -126,7 +127,7 @@ configure(subprojects) {
         boolean skipPreguard = sub.getProperties().getOrDefault('firebaseSkipPreguard', 'true').toBoolean()
         def defaultPreguard = rootProject.getProperties().getOrDefault('firebaseDefaultPreguardFile', 'default-preguard.txt')
 
-        if(!skipPreguard) {
+        if (!skipPreguard) {
 
             sub.android {
                 buildTypes {
@@ -186,7 +187,7 @@ task copyrightCheck {
 
         if (nonConformingFiles) {
             throw new GradleException(
-                "Add copyright and license header to the following files:\n${nonConformingFiles.join('\n')}.")
+                    "Add copyright and license header to the following files:\n${nonConformingFiles.join('\n')}.")
         }
     }
 }
diff --git a/settings.gradle b/settings.gradle
index 0b87cb1f5..c76ef3547 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -25,3 +25,5 @@ discoverSubprojects(file('subprojects.cfg')).each {
 renameBuildScripts(rootProject)
 
 apply from: new File(settingsDir, 'gradle/buildCache.gradle')
+include ':firestore-test-app'
+project(':firestore-test-app').projectDir = new File('test-apps/firestore-test-app')
\ No newline at end of file
diff --git a/test-apps/build.gradle b/test-apps/build.gradle
index 1b098c619..bf5926566 100644
--- a/test-apps/build.gradle
+++ b/test-apps/build.gradle
@@ -22,7 +22,7 @@ buildscript {
     }
     dependencies {
         classpath 'com.android.tools.build:gradle:3.2.1'
-        classpath 'com.google.gms:google-services:4.1.0'
+        classpath 'com.google.gms:google-services:4.2.0'
         classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1'
     }
 }
diff --git a/test-apps/database-test-app/build.gradle b/test-apps/database-test-app/build.gradle
index b2a06dbcc..37864e4b1 100644
--- a/test-apps/database-test-app/build.gradle
+++ b/test-apps/database-test-app/build.gradle
@@ -50,7 +50,7 @@ configurations.all {
 dependencies {
     // We intentionally use an open ended version to pick up any SNAPSHOT
     // versions published to the root project' s build/ directory.
-    implementation 'com.google.firebase:firebase-database:+'
+    implementation 'com.google.firebase:firebase-database:16+'
     implementation 'com.google.firebase:firebase-core:16+'
     implementation 'com.google.firebase:firebase-auth:16+'
 
diff --git a/test-apps/firestore-test-app/build.gradle b/test-apps/firestore-test-app/build.gradle
index 7a8d6f4ab..83b3185af 100644
--- a/test-apps/firestore-test-app/build.gradle
+++ b/test-apps/firestore-test-app/build.gradle
@@ -17,7 +17,7 @@
 apply plugin: 'com.android.application'
 
 android {
-    testBuildType = project.testBuildType
+    testBuildType = project.getProperties().get("testBuildType", "debug")
     compileSdkVersion 28
 
     defaultConfig {
@@ -44,13 +44,16 @@ android {
 }
 
 configurations.all {
-  resolutionStrategy.force 'com.android.support:support-annotations:27.1.1'
+    resolutionStrategy.force 'com.android.support:support-annotations:27.1.1'
 }
 
 dependencies {
     // We intentionally use an open ended version to pick up any SNAPSHOT
     // versions published to the root project' s build/ directory.
-    implementation 'com.google.firebase:firebase-firestore:17+'
+
+    implementation 'com.google.firebase:firebase-firestore:17.1.2-SNAPSHOT'
+//    implementation project(':firebase-firestore')
+
     implementation 'com.google.firebase:firebase-core:16+'
     implementation 'com.google.firebase:firebase-auth:16+'
     implementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.2'
@@ -58,7 +61,6 @@ dependencies {
     implementation 'com.android.support:appcompat-v7:28.0.0'
     implementation 'com.android.support:support-v4:28.0.0'
 
-
     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
diff --git a/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java b/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest2.java
similarity index 92%
rename from test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java
rename to test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest2.java
index 60590606d..855b6eed8 100644
--- a/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java
+++ b/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest2.java
@@ -33,10 +33,10 @@
 
 @LargeTest
 @RunWith(AndroidJUnit4.class)
-public class TestActivityTest {
+public class TestActivityTest2 {
   @Rule
-  public ActivityTestRule<TestActivity> mActivityTestRule =
-      new ActivityTestRule<>(TestActivity.class);
+  public ActivityTestRule<TestActivity2> mActivityTestRule =
+      new ActivityTestRule<>(TestActivity2.class);
 
   private IdlingResource mIdlingResource;
 
diff --git a/test-apps/firestore-test-app/src/main/AndroidManifest.xml b/test-apps/firestore-test-app/src/main/AndroidManifest.xml
index 950c0459a..4df8d818b 100644
--- a/test-apps/firestore-test-app/src/main/AndroidManifest.xml
+++ b/test-apps/firestore-test-app/src/main/AndroidManifest.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
+<?xml version="1.0" encoding="utf-8"?><!--
   ~ Copyright 2018 Google LLC
   ~
   ~ Licensed under the Apache License, Version 2.0 (the "License");
@@ -16,7 +15,12 @@
   -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
     package="com.google.firebase.testapps.firestore">
+
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
     <application
         android:name="android.support.multidex.MultiDexApplication"
         android:allowBackup="true"
@@ -24,12 +28,42 @@
         android:label="@string/app_name"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-        <activity
-            android:name=".TestActivity">
+        <activity android:name=".TestActivity">
             <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
+            <action android:name="android.intent.action.MAIN" />
+            <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
+
+        <activity android:name=".CustomAuthActivity">
+            <!--<intent-filter>-->
+            <!--<action android:name="android.intent.action.MAIN" />-->
+            <!--<category android:name="android.intent.category.LAUNCHER" />-->
+            <!--</intent-filter>-->
+        </activity>
+
+        <activity android:name=".FacebookLoginActivity">
+            <!--<intent-filter>-->
+                <!--<action android:name="android.intent.action.MAIN" />-->
+                <!--<category android:name="android.intent.category.LAUNCHER" />-->
+            <!--</intent-filter>-->
+        </activity>
+
+        <activity
+            android:name=".SignInActivity"
+            android:launchMode="singleTask"
+            android:noHistory="true"
+            android:theme="@android:style/Theme.Translucent.NoTitleBar">
+            <!--<intent-filter>-->
+                <!--<action android:name="android.intent.action.VIEW" />-->
+
+                <!--<category android:name="android.intent.category.DEFAULT" />-->
+                <!--<category android:name="android.intent.category.BROWSABLE" />-->
+
+                <!--<data-->
+                    <!--android:host="example.com"-->
+                    <!--android:scheme="lifeos" />-->
+            <!--</intent-filter>-->
+        </activity>
     </application>
 </manifest>
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/AuthenticationActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/AuthenticationActivity.java
new file mode 100644
index 000000000..6c5d00640
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/AuthenticationActivity.java
@@ -0,0 +1,149 @@
+package com.google.firebase.testapps.firestore;
+
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
+import android.util.Log;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class AuthenticationActivity extends Activity {
+
+    private static final String TAG = AuthenticationActivity.class.getSimpleName();
+
+    static final String EXTRA_USE_BROWSER = "com.auth0.android.EXTRA_USE_BROWSER";
+    static final String EXTRA_USE_FULL_SCREEN = "com.auth0.android.EXTRA_USE_FULL_SCREEN";
+    static final String EXTRA_CONNECTION_NAME = "com.auth0.android.EXTRA_CONNECTION_NAME";
+    static final String EXTRA_AUTHORIZE_URI = "com.auth0.android.EXTRA_AUTHORIZE_URI";
+    static final String EXTRA_INTENT_LAUNCHED = "com.auth0.android.EXTRA_INTENT_LAUNCHED";
+    static final String EXTRA_CT_OPTIONS = "com.auth0.android.EXTRA_CT_OPTIONS";
+
+    private boolean intentLaunched;
+
+    static void authenticateUsingBrowser(@NonNull Context context, @NonNull Uri authorizeUri) {
+        Intent intent = new Intent(context, AuthenticationActivity.class);
+        intent.putExtra(AuthenticationActivity.EXTRA_AUTHORIZE_URI, authorizeUri);
+        intent.putExtra(AuthenticationActivity.EXTRA_USE_BROWSER, true);
+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+        context.startActivity(intent);
+    }
+
+    static void authenticateUsingWebView(@NonNull Activity activity, @NonNull Uri authorizeUri, int requestCode, String connection, boolean useFullScreen) {
+        Intent intent = new Intent(activity, AuthenticationActivity.class);
+        intent.putExtra(AuthenticationActivity.EXTRA_AUTHORIZE_URI, authorizeUri);
+        intent.putExtra(AuthenticationActivity.EXTRA_USE_BROWSER, false);
+        intent.putExtra(AuthenticationActivity.EXTRA_USE_FULL_SCREEN, useFullScreen);
+        intent.putExtra(AuthenticationActivity.EXTRA_CONNECTION_NAME, connection);
+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+        activity.startActivityForResult(intent, requestCode);
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        setIntent(intent);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == RESULT_OK) {
+            deliverSuccessfulAuthenticationResult(data);
+        }
+        finish();
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putBoolean(EXTRA_INTENT_LAUNCHED, intentLaunched);
+    }
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (savedInstanceState != null) {
+            intentLaunched = savedInstanceState.getBoolean(EXTRA_INTENT_LAUNCHED, false);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (!intentLaunched && getIntent().getExtras() == null) {
+            //Activity was launched in an unexpected way
+            finish();
+            return;
+        } else if (!intentLaunched) {
+            intentLaunched = true;
+            launchAuthenticationIntent();
+            return;
+        }
+
+        if (getIntent().getData() != null) {
+            deliverSuccessfulAuthenticationResult(getIntent());
+        }
+        setResult(RESULT_CANCELED);
+        finish();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
+    private void launchAuthenticationIntent() {
+        Bundle extras = getIntent().getExtras();
+        Uri authorizeUri = extras.getParcelable(EXTRA_AUTHORIZE_URI);
+
+        //TOOD for webview i think
+        if (!extras.getBoolean(EXTRA_USE_BROWSER, true)) {
+            Log.w(TAG, "Should'nt be here");
+        }
+//            Intent intent = new Intent(this, WebAuthActivity.class);
+//            intent.setData(authorizeUri);
+//            intent.putExtra(WebAuthActivity.CONNECTION_NAME_EXTRA, extras.getString(EXTRA_CONNECTION_NAME));
+//            intent.putExtra(WebAuthActivity.FULLSCREEN_EXTRA, extras.getBoolean(EXTRA_USE_FULL_SCREEN));
+//            //The request code value can be ignored
+//            startActivityForResult(intent, 33);
+//            return;
+//        }
+    }
+
+    @VisibleForTesting
+    void deliverSuccessfulAuthenticationResult(Intent result) {
+        final Map<String, String> values = getValuesFromUri(result.getData());
+        if (values.isEmpty()) {
+            Log.w(TAG, "The response didn't contain any of these values: code, state, id_token, access_token, token_type, refresh_token");
+        }
+        Log.w(TAG, "The parsed CallbackURI contains the following values: " + values);
+    }
+
+
+    public static Map<String, String> getValuesFromUri(@NonNull Uri uri) {
+        return asMap(uri.getQuery() != null ? uri.getQuery() : uri.getFragment());
+    }
+
+    private static Map<String, String> asMap(@Nullable String valueString) {
+        if (valueString == null) {
+            return new HashMap<>();
+        }
+        final String[] entries = valueString.length() > 0 ? valueString.split("&") : new String[]{};
+        Map<String, String> values = new HashMap<>(entries.length);
+        for (String entry : entries) {
+            final String[] value = entry.split("=");
+            if (value.length == 2) {
+                values.put(value[0], value[1]);
+            }
+        }
+        return values;
+    }
+
+}
+
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
index 09e8921ae..4d2db7800 100644
--- a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
@@ -16,6 +16,7 @@
 
 package com.google.firebase.testapps.firestore;
 
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.text.TextUtils;
@@ -25,8 +26,12 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.google.android.gms.tasks.Continuation;
 import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
 import com.google.android.gms.tasks.Task;
+import com.google.android.gms.tasks.TaskCompletionSource;
 import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.auth.FirebaseUser;
@@ -63,7 +68,6 @@ public void onCreate(Bundle savedInstanceState) {
         mAuth = FirebaseAuth.getInstance();
     }
 
-    // [START on_start_check_user]
     @Override
     public void onStart() {
         super.onStart();
@@ -71,7 +75,6 @@ public void onStart() {
         FirebaseUser currentUser = mAuth.getCurrentUser();
         updateUI(currentUser);
     }
-    // [END on_start_check_user]
 
     private void createAccount(String email, String password) {
         Log.d(TAG, "createAccount:" + email);
@@ -81,67 +84,106 @@ private void createAccount(String email, String password) {
 
         showProgressDialog();
 
-        // [START create_user_with_email]
-        mAuth.createUserWithEmailAndPassword(email, password)
-                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
-                    @Override
-                    public void onComplete(@NonNull Task<AuthResult> task) {
-                        if (task.isSuccessful()) {
-                            // Sign in success, update UI with the signed-in user's information
-                            Log.d(TAG, "createUserWithEmail:success");
-                            FirebaseUser user = mAuth.getCurrentUser();
-                            updateUI(user);
-                        } else {
-                            // If sign in fails, display a message to the user.
-                            Log.w(TAG, "createUserWithEmail:failure", task.getException());
-                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
-                                    Toast.LENGTH_SHORT).show();
-                            updateUI(null);
-                        }
 
-                        // [START_EXCLUDE]
-                        hideProgressDialog();
-                        // [END_EXCLUDE]
-                    }
-                });
-        // [END create_user_with_email]
+        Task<String> combinedTask =
+                // STEP 1: Create user in lifeos username and password
+                Util.createUser(email, password)
+                        .continueWithTask(new Continuation<String, Task<String>>() {
+                            @Override
+                            public Task<String> then(@NonNull Task<String> task) throws Exception {
+
+                                final TaskCompletionSource<String> source = new TaskCompletionSource<>();
+
+                                // STEP 2: Use Firebase Custom Auth token to login Firebase
+                                String errors = task.getResult();
+                                System.out.println("errors: " + errors);
+
+                                if (task.isSuccessful() && errors == null) {
+                                    // Sign in success, update UI with the signed-in user's information
+                                    Log.d(TAG, "createUserWithEmail:success");
+                                    Toast.makeText(CustomAuthActivity.this, "createUserWithEmail:success.",
+                                            Toast.LENGTH_SHORT).show();
+
+//                                    FirebaseUser user = mAuth.getCurrentUser();
+//                                    updateUI(user);
+                                } else if (task.isSuccessful() && errors != null) {
+                                    // If sign in fails, display a message to the user.
+                                    Log.w(TAG, "createUserWithEmail:failure: " + errors);
+                                    Toast.makeText(CustomAuthActivity.this, errors,
+                                            Toast.LENGTH_SHORT).show();
+//                                    updateUI(null);
+                                } else {
+                                    // If sign in fails, display a message to the user.
+                                    Log.w(TAG, "createUserWithEmail:failure", task.getException());
+                                    Toast.makeText(CustomAuthActivity.this, "createUserWithEmail:failure.",
+                                            Toast.LENGTH_SHORT).show();
+//                                    updateUI(null);
+                                }
+
+                                hideProgressDialog();
+
+                                return source.getTask();
+                            }
+                        });
     }
 
-    private void signIn(String email, String password) {
-        Log.d(TAG, "signIn:" + email);
+    private void signIn(String username, String password) {
+        Log.d(TAG, "signIn:" + username);
         if (!validateForm()) {
             return;
         }
 
         showProgressDialog();
 
-        // [START sign_in_with_email]
-        mAuth.signInWithEmailAndPassword(email, password)
-                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
-                    @Override
-                    public void onComplete(@NonNull Task<AuthResult> task) {
-                        if (task.isSuccessful()) {
-                            // Sign in success, update UI with the signed-in user's information
-                            Log.d(TAG, "signInWithEmail:success");
-                            FirebaseUser user = mAuth.getCurrentUser();
-                            updateUI(user);
-                        } else {
-                            // If sign in fails, display a message to the user.
-                            Log.w(TAG, "signInWithEmail:failure", task.getException());
-                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
-                                    Toast.LENGTH_SHORT).show();
-                            updateUI(null);
-                        }
-
-                        // [START_EXCLUDE]
-                        if (!task.isSuccessful()) {
-                            mStatusTextView.setText(R.string.auth_failed);
-                        }
-                        hideProgressDialog();
-                        // [END_EXCLUDE]
-                    }
-                });
-        // [END sign_in_with_email]
+        Task<AuthResult> combinedTask =
+                // STEP 1: User logins with life os username and password
+                Util.getCustomTokenWithUsernameAndPassword(username, password)
+                        .continueWithTask(new Continuation<String, Task<AuthResult>>() {
+                            @Override
+                            public Task<AuthResult> then(@NonNull Task<String> task) throws Exception {
+                                // STEP 2: Use Firebase Custom Auth token to login Firebase
+                                String customToken = task.getResult();
+                                System.out.println("token: " + customToken);
+
+                                if (task.isSuccessful() && customToken != null) {
+                                    return mAuth.signInWithCustomToken(customToken)
+                                            .addOnSuccessListener(
+                                                    new OnSuccessListener<AuthResult>() {
+                                                        @Override
+                                                        public void onSuccess(AuthResult authResult) {
+                                                            Toast.makeText(CustomAuthActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+
+                                                            // Sign in success, update UI with the signed-in user's information
+                                                            Log.d(TAG, "signInWithToken:success");
+                                                            FirebaseUser user = mAuth.getCurrentUser();
+                                                            updateUI(user);
+
+                                                            hideProgressDialog();
+                                                        }
+                                                    })
+                                            .addOnFailureListener(
+                                                    new OnFailureListener() {
+                                                        @Override
+                                                        public void onFailure(@NonNull Exception e) {
+                                                            Toast.makeText(CustomAuthActivity.this, e.toString(), Toast.LENGTH_LONG).show();
+
+                                                            // If sign in fails, display a message to the user.
+                                                            Log.w(TAG, "signInWithEmail:failure", e);
+                                                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
+                                                                    Toast.LENGTH_SHORT).show();
+                                                            updateUI(null);
+                                                            mStatusTextView.setText(R.string.auth_failed);
+
+                                                            hideProgressDialog();
+                                                        }
+                                                    });
+                                } else if (task.isSuccessful() && customToken == null) {
+                                    hideProgressDialog();
+                                }
+
+                                return null;
+                            }
+                        });
     }
 
     private void signOut() {
@@ -205,8 +247,8 @@ private boolean validateForm() {
     private void updateUI(FirebaseUser user) {
         hideProgressDialog();
         if (user != null) {
-            mStatusTextView.setText(getString(R.string.emailpassword_status_fmt,
-                    user.getEmail(), user.isEmailVerified()));
+//            mStatusTextView.setText(getString(R.string.emailpassword_status_fmt,
+//                    user.getUid()));
             mDetailTextView.setText(getString(R.string.firebase_status_fmt, user.getUid()));
 
             findViewById(R.id.emailPasswordButtons).setVisibility(View.GONE);
@@ -229,6 +271,11 @@ public void onClick(View v) {
         int i = v.getId();
         if (i == R.id.emailCreateAccountButton) {
             createAccount(mEmailField.getText().toString(), mPasswordField.getText().toString());
+
+//            Uri facebookUri = Uri.parse("https://opar.auth0.com/authorize?audience=https://opar.auth0.com/userinfo&auth0Client=eyJuYW1lIjoiMDAtbG9naW4iLCJ2ZXJzaW9uIjoiMC4wLjEtU05BUFNIT1QifQ==&scope=openid&response_type=code&code_challenge_method=S256&redirect_uri=demo://opar.auth0.com/android/com.auth0.samples/callback&state=Sid6yvBzUYc75xBFcuPwJ6Mfp3Rzdj6-p4te7YBH9J0&code_challenge=7iWKXl5HDWHc9HvfN30ccKe9STnYvT69Hd34MKpnqPI&client_id=F10xC2ggXFT1cPuVKlyOQ7xbHjWdcSJu");
+//
+//            AuthenticationActivity.authenticateUsingBrowser(CustomAuthActivity.this, facebookUri);
+
         } else if (i == R.id.emailSignInButton) {
             signIn(mEmailField.getText().toString(), mPasswordField.getText().toString());
         } else if (i == R.id.signOutButton) {
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/FacebookLoginActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/FacebookLoginActivity.java
new file mode 100644
index 000000000..ee4faf8d0
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/FacebookLoginActivity.java
@@ -0,0 +1,159 @@
+/**
+ * Copyright 2016 Google Inc. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.testapps.firestore;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.auth.AuthCredential;
+import com.google.firebase.auth.AuthResult;
+import com.google.firebase.auth.FacebookAuthProvider;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+
+/**
+ * Demonstrate Firebase Authentication using a Facebook access token.
+ */
+public class FacebookLoginActivity extends BaseActivity implements
+        View.OnClickListener {
+
+    private static final String TAG = "FacebookLogin";
+
+    private static final int OAUTH_REQUEST_CODE = 131;
+
+    private TextView mStatusTextView;
+    private TextView mDetailTextView;
+
+    private FirebaseAuth mAuth;
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_facebook);
+
+        // Views
+        mStatusTextView = findViewById(R.id.status);
+        mDetailTextView = findViewById(R.id.detail);
+        findViewById(R.id.buttonFacebookSignout).setOnClickListener(this);
+
+        mAuth = FirebaseAuth.getInstance();
+
+        Button loginButton = findViewById(R.id.buttonFacebookLogin);
+        loginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+//                startActivityForResult(new Intent(FacebookLoginActivity.this, SignInActivity.class), OAUTH_REQUEST_CODE);
+                SignInActivity.authenticateUsingBrowser(FacebookLoginActivity.this, new SignInActivity.AuthCallback() {
+                    @Override
+                    public void onFailure(Exception exception) {
+
+                    }
+
+                    @Override
+                    public void onSuccess(String token) {
+                        System.out.println("token: " + token);
+
+                        mAuth.signInWithCustomToken(token)
+                                .addOnSuccessListener(
+                                        new OnSuccessListener<AuthResult>() {
+                                            @Override
+                                            public void onSuccess(AuthResult authResult) {
+                                                Toast.makeText(FacebookLoginActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+
+                                                // Sign in success, update UI with the signed-in user's information
+                                                Log.d(TAG, "signInWithToken:success");
+                                                FirebaseUser user = mAuth.getCurrentUser();
+                                                updateUI(user);
+
+                                                hideProgressDialog();
+                                            }
+                                        })
+                                .addOnFailureListener(
+                                        new OnFailureListener() {
+                                            @Override
+                                            public void onFailure(@NonNull Exception e) {
+                                                Toast.makeText(FacebookLoginActivity.this, e.toString(), Toast.LENGTH_LONG).show();
+
+                                                // If sign in fails, display a message to the user.
+                                                Log.w(TAG, "signInWithEmail:failure", e);
+                                                Toast.makeText(FacebookLoginActivity.this, "Authentication failed.",
+                                                        Toast.LENGTH_SHORT).show();
+                                                updateUI(null);
+                                                mStatusTextView.setText(R.string.auth_failed);
+
+                                                hideProgressDialog();
+                                            }
+                                        });
+
+                    }
+                });
+            }
+        });
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        // Check if user is signed in (non-null) and update UI accordingly.
+        FirebaseUser currentUser = mAuth.getCurrentUser();
+        updateUI(currentUser);
+    }
+
+    public void signOut() {
+        mAuth.signOut();
+
+        //TODO logout user from backend
+
+        updateUI(null);
+    }
+
+    private void updateUI(FirebaseUser user) {
+        hideProgressDialog();
+        if (user != null) {
+//            mStatusTextView.setText(getString(R.string.facebook_status_fmt, user.getDisplayName()));
+            mDetailTextView.setText(getString(R.string.firebase_status_fmt, user.getUid()));
+
+            findViewById(R.id.buttonFacebookLogin).setVisibility(View.GONE);
+            findViewById(R.id.buttonFacebookSignout).setVisibility(View.VISIBLE);
+        } else {
+            mStatusTextView.setText(R.string.signed_out);
+            mDetailTextView.setText(null);
+
+            findViewById(R.id.buttonFacebookLogin).setVisibility(View.VISIBLE);
+            findViewById(R.id.buttonFacebookSignout).setVisibility(View.GONE);
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        int i = v.getId();
+        if (i == R.id.buttonFacebookSignout) {
+            signOut();
+        }
+    }
+}
\ No newline at end of file
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/SignInActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/SignInActivity.java
new file mode 100644
index 000000000..17df6c78e
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/SignInActivity.java
@@ -0,0 +1,97 @@
+package com.google.firebase.testapps.firestore;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+public class SignInActivity extends Activity {
+
+    private boolean intentLaunched;
+
+    static final String EXTRA_INTENT_LAUNCHED = "EXTRA_INTENT_LAUNCHED";
+    static final String EXTRA_USE_BROWSER = "EXTRA_USE_BROWSER";
+
+    static AuthCallback authCallback;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (savedInstanceState != null) {
+            intentLaunched = savedInstanceState.getBoolean(EXTRA_INTENT_LAUNCHED, false);
+        }
+
+//        setContentView(R.layout.login);
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putBoolean(EXTRA_INTENT_LAUNCHED, intentLaunched);
+    }
+
+    static void authenticateUsingBrowser(@NonNull Context context, AuthCallback callback) {
+        authCallback = callback;
+
+        Intent intent = new Intent(context, SignInActivity.class);
+        intent.putExtra(SignInActivity.EXTRA_USE_BROWSER, true);
+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+
+        context.startActivity(intent);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (!intentLaunched && getIntent().getExtras() == null) {
+            //Activity was launched in an unexpected way
+            finish();
+            return;
+        } else if (!intentLaunched && getIntent().getData() == null) {
+            intentLaunched = true;
+            launchAuthenticationIntent();
+            return;
+        }
+
+        if (getIntent().getData() != null) {
+            deliverSuccessfulAuthenticationResult(getIntent());
+        }
+        setResult(RESULT_CANCELED);
+        finish();
+    }
+
+    private void launchAuthenticationIntent() {
+//            Intent browserIntent = new Intent(Intent.ACTION_VIEW).setData(Uri.parse("http://example.com?token=1234&uid=mark.biria@gmail.com")).
+        Intent browserIntent = new Intent(Intent.ACTION_VIEW).setData(Uri.parse(Util.facebookUrl)).
+                setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_FROM_BACKGROUND);
+        startActivity(browserIntent);
+        finish();
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        setIntent(intent);
+    }
+
+    void deliverSuccessfulAuthenticationResult(Intent result) {
+//            FacebookLoginActivity.setResult(intent);
+        String customToken = result.getData().getQueryParameter("token");
+        String pid = result.getData().getQueryParameter("pid");
+
+        System.out.println("token: " + customToken + " pid: " + pid);
+
+        authCallback.onSuccess(customToken);
+        finish();
+    }
+
+    public interface AuthCallback {
+        void onFailure(Exception exception);
+
+        void onSuccess(String token);
+    }
+}
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java
index 287e2d788..caba5e43a 100644
--- a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java
@@ -26,21 +26,16 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.google.android.gms.tasks.Continuation;
-import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;
-import com.google.android.gms.tasks.Task;
 import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseAuth;
-import com.google.firebase.auth.GetTokenResult;
 import com.google.firebase.firestore.DocumentSnapshot;
 import com.google.firebase.firestore.EventListener;
 import com.google.firebase.firestore.FirebaseFirestore;
 import com.google.firebase.firestore.FirebaseFirestoreException;
 import com.google.firebase.firestore.FirebaseFirestoreSettings;
 
-import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -63,36 +58,16 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.test_activity);
 
-        init();
-
-        auth.signOut();
-
-        if (auth.getCurrentUser() != null) {
-            // already signed in
-            setDocument();
-        } else {
-            // not signed in
-            // TODO show sign-in login page intent and after successful login return token
-            String username = "mark.biria@gmail.com";
-            String password = "12345";
-
-            startTaskLogin(username, password);
-        }
-
-        // Signout of any existing sessions and sign in with email and password
-//    auth.signOut();
-    }
-
-    private void init() {
         db = FirebaseFirestore.getInstance();
         auth = FirebaseAuth.getInstance();
-
         restaurantTextView = this.findViewById(R.id.restaurant);
         idlingResource.increment();
 
         // Since offline persistence is enabled by default, the event listener is invoked even without
         db.setFirestoreSettings(
-                new FirebaseFirestoreSettings.Builder().setPersistenceEnabled(false).build());
+                new FirebaseFirestoreSettings.Builder().setTimestampsInSnapshotsEnabled(true).setPersistenceEnabled(false).build());
+
+        db.setLoggingEnabled(true);
 
         // Listen for a change to the collection
         db.collection("restaurants")
@@ -109,54 +84,26 @@ public void onEvent(
                                 }
                             }
                         });
-    }
 
-    private void setDocument() {
-        db.collection("restaurants").document("Baadal").set(restaurant);
-    }
-
-    public Task<AuthResult> startTaskLogin(String username, String password) {
-        /**
-         * Use Tasks API to chain 3 login steps together
-         * Refer to this blog post for more details about Tasks API:
-         *   https://firebase.googleblog.com/2016/09/become-a-firebase-taskmaster-part-1.html
-         **/
-
-        Task<AuthResult> combinedTask =
-                // STEP 1: User logins with life os username and password
-                Util.getCustomTokenWithUsernameAndPassword(username, password)
-                        .continueWithTask(new Continuation<String, Task<AuthResult>>() {
+        // Signout of any existing sessions and sign in with email and password
+        auth.signOut();
+        auth.signInWithEmailAndPassword("mark.biria@gmail.com", "password")
+                .addOnSuccessListener(
+                        new OnSuccessListener<AuthResult>() {
                             @Override
-                            public Task<AuthResult> then(@NonNull Task<String> task) throws Exception {
-                                // STEP 2: Use Firebase Custom Auth token to login Firebase
-                                String customToken = task.getResult();
-                                System.out.println("token: " + customToken);
-
-                                return auth.signInWithCustomToken(customToken)
-                                        .addOnSuccessListener(
-                                                new OnSuccessListener<AuthResult>() {
-                                                    @Override
-                                                    public void onSuccess(AuthResult authResult) {
-                                                        System.out.println("Signed in: "+ auth.getCurrentUser().getDisplayName()+" "+auth.getCurrentUser().getEmail()+" "+auth.getCurrentUser().getUid());
-                                                        Toast.makeText(TestActivity.this, "Signed in", Toast.LENGTH_LONG).show();
-
-                                                        setDocument();
-                                                    }
-                                                })
-                                        .addOnFailureListener(
-                                                new OnFailureListener() {
-                                                    @Override
-                                                    public void onFailure(@NonNull Exception e) {
-                                                        System.out.println("Failed to sign in");
-                                                        Log.d(TAG, e.toString());
-
-                                                        Toast.makeText(TestActivity.this, e.toString(), Toast.LENGTH_LONG).show();
-                                                    }
-                                                });
+                            public void onSuccess(AuthResult authResult) {
+                                Toast.makeText(TestActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+                                db.collection("restaurants").document("Baadal").set(restaurant);
+                            }
+                        })
+                .addOnFailureListener(
+                        new OnFailureListener() {
+                            @Override
+                            public void onFailure(@NonNull Exception e) {
+                                Log.d(TAG, "Failed to sign in");
+                                Toast.makeText(TestActivity.this, e.toString(), Toast.LENGTH_LONG).show();
                             }
                         });
-
-        return combinedTask;
     }
 
     @VisibleForTesting
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity2.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity2.java
new file mode 100644
index 000000000..678cf5515
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity2.java
@@ -0,0 +1,194 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.testapps.firestore;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
+import android.support.test.espresso.IdlingResource;
+import android.support.test.espresso.idling.CountingIdlingResource;
+import android.util.Log;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.google.android.gms.tasks.Continuation;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.auth.AuthResult;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.firestore.DocumentSnapshot;
+import com.google.firebase.firestore.EventListener;
+import com.google.firebase.firestore.FirebaseFirestore;
+import com.google.firebase.firestore.FirebaseFirestoreException;
+import com.google.firebase.firestore.FirebaseFirestoreSettings;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class TestActivity2 extends Activity {
+    private static final int OAUTH_REQUEST_CODE = 0;
+
+    private static final Map<String, Object> restaurant = new HashMap<>();
+    private static final String TAG = TestActivity2.class.toString();
+
+    static {
+        restaurant.put("location", "Google MTV");
+    }
+
+    private FirebaseFirestore db;
+    private FirebaseAuth auth;
+    private TextView restaurantTextView;
+    private final CountingIdlingResource idlingResource =
+            new CountingIdlingResource("Firebase firestore listener");
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.test_activity);
+
+        startActivityForResult(new Intent(this, SignInActivity.class), OAUTH_REQUEST_CODE);
+
+//
+//        init();
+//
+//        auth.signOut();
+//
+//        if (auth.getCurrentUser() != null) {
+//            // already signed in
+//            setDocument();
+//        } else {
+//            // not signed in
+//            // TODO show sign-in login page intent and after successful login return token
+//            String username = "mark.biria@gmail.com";
+//            String password = "12345";
+//
+//            startTaskLogin(username, password);
+//        }
+
+        // Signout of any existing sessions and sign in with email and password
+//    auth.signOut();
+    }
+
+    private void init() {
+        db = FirebaseFirestore.getInstance();
+        auth = FirebaseAuth.getInstance();
+
+        restaurantTextView = this.findViewById(R.id.restaurant);
+        idlingResource.increment();
+
+        // Since offline persistence is enabled by default, the event listener is invoked even without
+        db.setFirestoreSettings(
+                new FirebaseFirestoreSettings.Builder().setPersistenceEnabled(false).build());
+
+        db.setLoggingEnabled(true);
+
+        // Listen for a change to the collection
+        db.collection("restaurants")
+                .document("Baadal")
+                .addSnapshotListener(
+                        new EventListener<DocumentSnapshot>() {
+                            @Override
+                            public void onEvent(
+                                    @javax.annotation.Nullable DocumentSnapshot snapshot,
+                                    @javax.annotation.Nullable FirebaseFirestoreException e) {
+                                if (snapshot != null && snapshot.exists()) {
+                                    restaurantTextView.setText(snapshot.getData().toString());
+                                    idlingResource.decrement();
+                                }
+                            }
+                        });
+    }
+
+    private void setDocument() {
+        db.collection("restaurants").document("Baadal").set(restaurant);
+    }
+
+    public Task<AuthResult> startTaskLogin(String username, String password) {
+        /**
+         * Use Tasks API to chain 3 login steps together
+         * Refer to this blog post for more details about Tasks API:
+         *   https://firebase.googleblog.com/2016/09/become-a-firebase-taskmaster-part-1.html
+         **/
+
+        Task<AuthResult> combinedTask =
+                // STEP 1: User logins with life os username and password
+                Util.getCustomTokenWithUsernameAndPassword(username, password)
+                        .continueWithTask(new Continuation<String, Task<AuthResult>>() {
+                            @Override
+                            public Task<AuthResult> then(@NonNull Task<String> task) throws Exception {
+                                // STEP 2: Use Firebase Custom Auth token to login Firebase
+                                String customToken = task.getResult();
+                                System.out.println("token: " + customToken);
+
+                                return auth.signInWithCustomToken(customToken)
+                                        .addOnSuccessListener(
+                                                new OnSuccessListener<AuthResult>() {
+                                                    @Override
+                                                    public void onSuccess(AuthResult authResult) {
+                                                        System.out.println("Signed in: " + auth.getCurrentUser().getDisplayName() + " " + auth.getCurrentUser().getEmail() + " " + auth.getCurrentUser().getUid());
+                                                        Toast.makeText(TestActivity2.this, "Signed in", Toast.LENGTH_LONG).show();
+
+                                                        setDocument();
+                                                    }
+                                                })
+                                        .addOnFailureListener(
+                                                new OnFailureListener() {
+                                                    @Override
+                                                    public void onFailure(@NonNull Exception e) {
+                                                        System.out.println("Failed to sign in");
+                                                        Log.d(TAG, e.toString());
+
+                                                        Toast.makeText(TestActivity2.this, e.toString(), Toast.LENGTH_LONG).show();
+                                                    }
+                                                });
+                            }
+                        });
+
+        return combinedTask;
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent resultIntent) {
+        super.onActivityResult(requestCode, resultCode, resultIntent);
+
+        // Check which request we're responding to
+        if (requestCode == OAUTH_REQUEST_CODE) {
+            System.out.println("???" + resultCode);
+
+            // Make sure the request was successful
+            if (resultCode == RESULT_OK) {
+                // The user logged in successfully
+                // The Intent's data Uri identifies user token and uid
+                String token = resultIntent.getData().getQueryParameter("token");
+                String uid = resultIntent.getData().getQueryParameter("uid");
+
+                System.out.println("token: " + token + " uid: " + uid);
+
+            }
+        }
+    }
+
+    @VisibleForTesting
+    @NonNull
+    @Keep
+    public IdlingResource getIdlingResource() {
+        return idlingResource;
+    }
+}
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
index 769104631..b6f5ec0bd 100644
--- a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
@@ -17,7 +17,11 @@
 import okhttp3.Response;
 
 public class Util {
-    private final static String customAuthAddress = "http://192.168.1.114:3000/auth/login";
+    private final static String customAuthAddress = "http://192.168.1.116:3000/auth/login";
+    private final static String registerAddress = "http://192.168.1.116:3000/auth/register";
+
+    public final static String facebookUrl = "https://192.168.1.116:3000/auth/oauth2/facebook";
+
 
     public static final MediaType JSON
             = MediaType.parse("application/json; charset=utf-8");
@@ -27,12 +31,17 @@
     public static Task<String> getCustomTokenWithUsernameAndPassword(String username, String password) {
         final TaskCompletionSource<String> source = new TaskCompletionSource<>();
 
-        RequestBody body = RequestBody.create(JSON, "{\"password\": \"12345\",\"email\": \"m3night@gmail.com\"}");
+        String jsonString = "{\"password\": \"" + password + "\",\"email\": \"" + username + "\"}";
+
+        System.out.println("json body: " + jsonString);
+
+        RequestBody body = RequestBody.create(JSON, jsonString);
         Request request = new Request.Builder()
                 .url(customAuthAddress)
                 .post(body)
                 .build();
 
+
         client.newCall(request).enqueue(new Callback() {
             @Override
             public void onFailure(Call call, IOException e) {
@@ -45,12 +54,72 @@ public void onResponse(Call call, Response response) throws IOException {
                 String jsonData = response.body().string();
                 try {
                     JSONObject obj = new JSONObject(jsonData);
-                    String token = obj.getString("token");
+
+                    boolean hasToken = obj.has("token");
+
+                    String token = "";
+
+                    if (hasToken) {
+                        token = obj.getString("token");
+                    } else {
+                        token = null;
+                    }
 
                     source.setResult(token);
 
                 } catch (JSONException e) {
                     source.setException(e);
+                    e.printStackTrace();
+                }
+            }
+        });
+
+
+        return source.getTask();
+    }
+
+    public static Task<String> createUser(String username, String password) {
+        final TaskCompletionSource<String> source = new TaskCompletionSource<>();
+
+        String jsonString = "{\"password\": \"" + password + "\",\"confirm_password\": \"" + password + "\",\"name\": \"" + username + "\",\"email\": \"" + username + "\"}";
+
+        System.out.println("json body: " + jsonString);
+
+        RequestBody body = RequestBody.create(JSON, jsonString);
+        Request request = new Request.Builder()
+                .url(registerAddress)
+                .post(body)
+                .build();
+
+
+        client.newCall(request).enqueue(new Callback() {
+            @Override
+            public void onFailure(Call call, IOException e) {
+                source.setException(e);
+                e.printStackTrace();
+            }
+
+            @Override
+            public void onResponse(Call call, Response response) throws IOException {
+                String jsonData = response.body().string();
+
+                try {
+                    JSONObject obj = new JSONObject(jsonData);
+                    boolean hasError = obj.has("errors");
+
+                    String errors = "";
+
+                    if (hasError) {
+                        errors = obj.getString("errors");
+                    } else {
+                        errors = null;
+                    }
+
+                    source.setResult(errors);
+
+                } catch (JSONException e) {
+                    e.printStackTrace();
+                    source.setException(e);
                 }
 
             }
diff --git a/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml b/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml
index 682e48423..e6055731c 100644
--- a/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml
+++ b/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml
@@ -130,6 +130,7 @@
                 android:layout_height="wrap_content"
                 android:layout_weight="1.0"
                 android:text="@string/verify_email"
+                android:visibility="gone"
                 android:theme="@style/ThemeOverlay.MyDarkButton" />
 
         </LinearLayout>
diff --git a/test-apps/firestore-test-app/src/main/res/layout/activity_facebook.xml b/test-apps/firestore-test-app/src/main/res/layout/activity_facebook.xml
new file mode 100644
index 000000000..831550cbc
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/layout/activity_facebook.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/grey_100"
+    android:orientation="vertical"
+    android:weightSum="4">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="3"
+        android:gravity="center_horizontal"
+        android:orientation="vertical">
+
+        <ImageView
+            android:id="@+id/icon"
+            style="@style/ThemeOverlay.FirebaseIcon"
+            android:contentDescription="@string/desc_firebase_lockup"
+            android:src="@drawable/firebase_lockup_400"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+        <TextView
+            android:id="@+id/titleText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="@dimen/title_bottom_margin"
+            android:text="@string/facebook_title_text"
+            android:theme="@style/ThemeOverlay.MyTitleText" />
+
+        <TextView
+            android:id="@+id/status"
+            style="@style/ThemeOverlay.MyTextDetail"
+            android:text="@string/signed_out" />
+
+        <TextView
+            android:id="@+id/detail"
+            style="@style/ThemeOverlay.MyTextDetail"
+            tools:text="Firebase User ID: 123456789abc" />
+
+    </LinearLayout>
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:background="@color/grey_300">
+
+        <Button
+            android:id="@+id/buttonFacebookLogin"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Continue with Facebook"
+            android:layout_centerInParent="true" />
+
+        <Button
+            android:id="@+id/buttonFacebookSignout"
+            style="@style/Widget.AppCompat.Button.Colored"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:text="@string/sign_out"
+            android:theme="@style/ThemeOverlay.MyDarkButton"
+            android:visibility="gone"/>
+
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/test-apps/firestore-test-app/src/main/res/layout/login.xml b/test-apps/firestore-test-app/src/main/res/layout/login.xml
new file mode 100644
index 000000000..ddd59c6aa
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/layout/login.xml
@@ -0,0 +1,24 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+
+    <ProgressBar
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_centerVertical="true"
+        android:layout_centerHorizontal="true"
+        />
+
+    <Button
+        android:id="@+id/button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentBottom="true"
+        android:layout_marginStart="67dp"
+        android:layout_marginLeft="67dp"
+        android:layout_marginBottom="91dp"
+        android:text="Button" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/test-apps/firestore-test-app/src/main/res/values/strings.xml b/test-apps/firestore-test-app/src/main/res/values/strings.xml
index dd69aa510..e25d111ca 100644
--- a/test-apps/firestore-test-app/src/main/res/values/strings.xml
+++ b/test-apps/firestore-test-app/src/main/res/values/strings.xml
@@ -4,7 +4,7 @@
 
     <string name="loading">Loading…</string>
     <string name="desc_firebase_lockup">Firebase logo and name</string>
-    <string name="emailpassword_title_text">Email and Password</string>
+    <string name="emailpassword_title_text">Enter Your Email and Password</string>
     <string name="signed_out">Signed Out</string>
     <string name="hint_email">Email</string>
     <string name="hint_password">Password</string>
@@ -12,5 +12,9 @@
     <string name="create_account">Create Account</string>
     <string name="sign_out">Sign Out</string>
     <string name="verify_email">Verify Email</string>
+    <string name="auth_failed">Authentication failed</string>
+    <string name="firebase_status_fmt">Firebase User: %s</string>
+    <string name="emailpassword_status_fmt">Email User: %1$s</string>
 
+    <string name="facebook_title_text">Facebook Login</string>
 </resources>
\ No newline at end of file
