diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
index ff86a3cd8..bb3ce3c0f 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
@@ -156,17 +156,13 @@ public static Object convertToPlainJavaTypes(Object object) {
     } else if (o.getClass().isArray()) {
       throw serializeError(path, "Serializing Arrays is not supported, please use Lists instead");
     } else if (o instanceof Enum) {
-      String enumField = ((Enum<?>) o).name();
+      String enumName = ((Enum<?>) o).name();
       try {
-        if (o.getClass().getField(enumField).isAnnotationPresent(PropertyName.class)) {
-          PropertyName annotation =
-              o.getClass().getField(enumField).getAnnotation(PropertyName.class);
-          return annotation.value();
-        }
-      } catch (Exception ex) {
-        return enumField;
+        Field enumField = o.getClass().getField(enumName);
+        return BeanMapper.propertyName(enumField);
+      } catch (NoSuchFieldException ex) {
+        return enumName;
       }
-      return enumField;
     } else if (o instanceof Date
         || o instanceof Timestamp
         || o instanceof GeoPoint
@@ -338,9 +334,9 @@ public static Object convertToPlainJavaTypes(Object object) {
       // try to use PropertyName if exist
       Field[] enumFields = clazz.getFields();
       for (Field field : enumFields) {
-        if (field.isAnnotationPresent(PropertyName.class)) {
-          PropertyName propertyName = field.getAnnotation(PropertyName.class);
-          if (value.equals(propertyName.value())) {
+        if (field.isEnumConstant()) {
+          String propertyName = BeanMapper.propertyName(field);
+          if (value.equals(propertyName)) {
             value = field.getName();
             break;
           }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
index b098d4be0..9ceb8e47f 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
@@ -711,7 +711,7 @@ public static void setValue1(String value1) {
     One("one"),
     Two("two"),
 
-    @PropertyName("three")
+    @PropertyName("Three")
     THREE("three");
 
     private final String value;
@@ -725,6 +725,14 @@ public String getValue() {
     }
   }
 
+  private enum PathologicalEnum {
+    @PropertyName("Two")
+    One,
+
+    @PropertyName("One")
+    Two
+  }
+
   private static class EnumBean {
     public SimpleEnum enumField;
 
@@ -734,6 +742,8 @@ public String getValue() {
 
     public ComplexEnum enumUsingPropertyName;
 
+    public PathologicalEnum pathologicalEnum;
+
     public SimpleEnum getEnumValue() {
       return enumValue;
     }
@@ -1980,21 +1990,23 @@ public void enumsAreSerialized() {
     bean.enumField = SimpleEnum.Bar;
     bean.complexEnum = ComplexEnum.One;
     bean.enumUsingPropertyName = ComplexEnum.THREE;
+    bean.pathologicalEnum = PathologicalEnum.One;
     bean.setEnumValue(SimpleEnum.Foo);
     assertJson(
-        "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}",
+        "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'Three', 'pathologicalEnum': 'Two'}",
         serialize(bean));
   }
 
   @Test
   public void enumsAreParsed() {
     String json =
-        "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}";
+        "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'Three', 'pathologicalEnum': 'Two'}";
     EnumBean bean = deserialize(json, EnumBean.class);
     assertEquals(bean.enumField, SimpleEnum.Bar);
     assertEquals(bean.enumValue, SimpleEnum.Foo);
     assertEquals(bean.complexEnum, ComplexEnum.One);
     assertEquals(bean.enumUsingPropertyName, ComplexEnum.THREE);
+    assertEquals(bean.pathologicalEnum, PathologicalEnum.One);
   }
 
   @Test
