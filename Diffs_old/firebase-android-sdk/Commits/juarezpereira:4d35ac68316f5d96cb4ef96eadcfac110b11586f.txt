diff --git a/firebase-database-collection/firebase-database-collection.gradle b/firebase-database-collection/firebase-database-collection.gradle
index e87098fb9..b9aef9bb7 100644
--- a/firebase-database-collection/firebase-database-collection.gradle
+++ b/firebase-database-collection/firebase-database-collection.gradle
@@ -19,6 +19,10 @@ android {
     defaultConfig {
         minSdkVersion 9
     }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java
index a2405cbbd..189cf92ea 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java
@@ -20,6 +20,7 @@
 import com.google.firebase.inappmessaging.display.internal.injection.components.InAppMessageComponent;
 import com.google.firebase.inappmessaging.display.internal.injection.modules.InflaterModule;
 import com.google.firebase.inappmessaging.model.InAppMessage;
+
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
@@ -35,10 +36,9 @@
   }
 
   public BindingWrapper createImageBindingWrapper(
-      InAppMessageLayoutConfig config,
-      InAppMessage inAppMessage
-  ) {
-    InAppMessageComponent inAppMessageComponent = DaggerInAppMessageComponent.builder()
+      InAppMessageLayoutConfig config, InAppMessage inAppMessage) {
+    InAppMessageComponent inAppMessageComponent =
+        DaggerInAppMessageComponent.builder()
             .inflaterModule(new InflaterModule(inAppMessage, config, application))
             .build();
 
@@ -46,10 +46,9 @@ public BindingWrapper createImageBindingWrapper(
   }
 
   public BindingWrapper createModalBindingWrapper(
-      InAppMessageLayoutConfig config,
-      InAppMessage inAppMessage
-  ) {
-    InAppMessageComponent inAppMessageComponent = DaggerInAppMessageComponent.builder()
+      InAppMessageLayoutConfig config, InAppMessage inAppMessage) {
+    InAppMessageComponent inAppMessageComponent =
+        DaggerInAppMessageComponent.builder()
             .inflaterModule(new InflaterModule(inAppMessage, config, application))
             .build();
 
@@ -57,14 +56,12 @@ public BindingWrapper createModalBindingWrapper(
   }
 
   public BindingWrapper createBannerBindingWrapper(
-      InAppMessageLayoutConfig config,
-      InAppMessage inAppMessage
-  ) {
-    InAppMessageComponent inAppMessageComponent = DaggerInAppMessageComponent.builder()
+      InAppMessageLayoutConfig config, InAppMessage inAppMessage) {
+    InAppMessageComponent inAppMessageComponent =
+        DaggerInAppMessageComponent.builder()
             .inflaterModule(new InflaterModule(inAppMessage, config, application))
             .build();
 
     return inAppMessageComponent.bannerBindingWrapper();
   }
-
-}
\ No newline at end of file
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/CircleTransform.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/CircleTransform.java
index 90a260daf..bdfdbe19a 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/CircleTransform.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/CircleTransform.java
@@ -8,37 +8,36 @@
 import com.squareup.picasso.Transformation;
 
 public class CircleTransform implements Transformation {
-    @Override
-    public Bitmap transform(Bitmap source) {
-        int size = Math.min(source.getWidth(), source.getHeight());
+  @Override
+  public Bitmap transform(Bitmap source) {
+    int size = Math.min(source.getWidth(), source.getHeight());
 
-        int x = (source.getWidth() - size) / 2;
-        int y = (source.getHeight() - size) / 2;
+    int x = (source.getWidth() - size) / 2;
+    int y = (source.getHeight() - size) / 2;
 
-        Bitmap squaredBitmap = Bitmap.createBitmap(source, x, y, size, size);
-        if (squaredBitmap != source) {
-            source.recycle();
-        }
-
-        Bitmap bitmap = Bitmap.createBitmap(size, size, source.getConfig());
+    Bitmap squaredBitmap = Bitmap.createBitmap(source, x, y, size, size);
+    if (squaredBitmap != source) {
+      source.recycle();
+    }
 
-        Canvas canvas = new Canvas(bitmap);
-        Paint paint = new Paint();
-        BitmapShader shader = new BitmapShader(squaredBitmap,
-                BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP);
-        paint.setShader(shader);
-        paint.setAntiAlias(true);
+    Bitmap bitmap = Bitmap.createBitmap(size, size, source.getConfig());
 
-        float r = size / 2f;
-        canvas.drawCircle(r, r, r, paint);
+    Canvas canvas = new Canvas(bitmap);
+    Paint paint = new Paint();
+    BitmapShader shader =
+        new BitmapShader(squaredBitmap, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP);
+    paint.setShader(shader);
+    paint.setAntiAlias(true);
 
-        squaredBitmap.recycle();
-        return bitmap;
-    }
+    float r = size / 2f;
+    canvas.drawCircle(r, r, r, paint);
 
-    @Override
-    public String key() {
-        return "circle";
-    }
+    squaredBitmap.recycle();
+    return bitmap;
+  }
 
-}
\ No newline at end of file
+  @Override
+  public String key() {
+    return "circle";
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java
index d4bc0cbfc..b04cf0e91 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java
@@ -30,42 +30,41 @@
 @FirebaseAppScope
 public class FiamImageLoader {
 
-    private final Picasso picasso;
+  private final Picasso picasso;
 
-    @Inject
-    FiamImageLoader(Picasso picasso) {
-        this.picasso = picasso;
-    }
-
-    public FiamImageRequestCreator load(@Nullable String imageUrl) {
-        final RequestCreator creator = picasso.load(imageUrl).transform(new CircleTransform());
-        return new FiamImageRequestCreator(creator);
-    }
+  @Inject
+  FiamImageLoader(Picasso picasso) {
+    this.picasso = picasso;
+  }
 
-    public void cancelTag(Class c) {
-        picasso.cancelTag(c);
-    }
+  public FiamImageRequestCreator load(@Nullable String imageUrl) {
+    final RequestCreator creator = picasso.load(imageUrl).transform(new CircleTransform());
+    return new FiamImageRequestCreator(creator);
+  }
 
-    public static class FiamImageRequestCreator {
-        private final RequestCreator mRequestCreator;
+  public void cancelTag(Class c) {
+    picasso.cancelTag(c);
+  }
 
-        public FiamImageRequestCreator(RequestCreator requestCreator) {
-            mRequestCreator = requestCreator;
-        }
+  public static class FiamImageRequestCreator {
+    private final RequestCreator mRequestCreator;
 
-        public FiamImageRequestCreator placeholder(int placeholderResId) {
-            mRequestCreator.placeholder(placeholderResId);
-            return this;
-        }
+    public FiamImageRequestCreator(RequestCreator requestCreator) {
+      mRequestCreator = requestCreator;
+    }
 
-        public FiamImageRequestCreator tag(Class c) {
-            mRequestCreator.tag(c);
-            return this;
-        }
+    public FiamImageRequestCreator placeholder(int placeholderResId) {
+      mRequestCreator.placeholder(placeholderResId);
+      return this;
+    }
 
-        public void into(ImageView imageView, Callback callback) {
-            mRequestCreator.into(imageView, callback);
-        }
+    public FiamImageRequestCreator tag(Class c) {
+      mRequestCreator.tag(c);
+      return this;
     }
 
-}
\ No newline at end of file
+    public void into(ImageView imageView, Callback callback) {
+      mRequestCreator.into(imageView, callback);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/CustomModalBindingWrapper.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/CustomModalBindingWrapper.java
index 74cb66f29..c0ceb0911 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/CustomModalBindingWrapper.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/CustomModalBindingWrapper.java
@@ -33,226 +33,225 @@
 @InAppMessageScope
 public class CustomModalBindingWrapper extends BindingWrapper {
 
-    private FiamConstraintLayout layoutModalRoot;
-    private ConstraintLayout layoutModal;
-
-    private ScrollView modalScrollMessage;
-
-    private TextView modalTitle;
-    private TextView modalMessage;
-
-    private Button modalAction;
-    private Button modalCollapse;
-
-    private ImageView modalImage;
-
-    private ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ScrollViewAdjustableListener();
-
-    @Inject
-    @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
-    public CustomModalBindingWrapper(InAppMessageLayoutConfig config, LayoutInflater inflater, InAppMessage message) {
-        super(config, inflater, message);
+  private FiamConstraintLayout layoutModalRoot;
+  private ConstraintLayout layoutModal;
+
+  private ScrollView modalScrollMessage;
+
+  private TextView modalTitle;
+  private TextView modalMessage;
+
+  private Button modalAction;
+  private Button modalCollapse;
+
+  private ImageView modalImage;
+
+  private ViewTreeObserver.OnGlobalLayoutListener layoutListener =
+      new ScrollViewAdjustableListener();
+
+  @Inject
+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
+  public CustomModalBindingWrapper(
+      InAppMessageLayoutConfig config, LayoutInflater inflater, InAppMessage message) {
+    super(config, inflater, message);
+  }
+
+  @NonNull
+  @Override
+  public ViewTreeObserver.OnGlobalLayoutListener inflate(
+      View.OnClickListener actionListener, View.OnClickListener dismissOnClickListener) {
+    @SuppressLint("InflateParams")
+    View root = inflater.inflate(R.layout.layout_modal, null);
+
+    layoutModalRoot = root.findViewById(R.id.layoutModalRoot);
+    layoutModal = root.findViewById(R.id.layoutModal);
+    modalScrollMessage = root.findViewById(R.id.modalScrollMessage);
+    modalTitle = root.findViewById(R.id.modalTitle);
+    modalMessage = root.findViewById(R.id.modalMessage);
+    modalAction = root.findViewById(R.id.modalAction);
+    modalCollapse = root.findViewById(R.id.modalCollapse);
+    modalImage = root.findViewById(R.id.modalImage);
+
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+      layoutModal.setElevation(dpToPixels(3));
+      modalImage.setElevation(dpToPixels(3));
     }
 
-    @NonNull
-    @Override
-    public ViewTreeObserver.OnGlobalLayoutListener inflate(
-            View.OnClickListener actionListener,
-            View.OnClickListener dismissOnClickListener
-    ) {
-        @SuppressLint("InflateParams")
-        View root = inflater.inflate(R.layout.layout_modal, null);
-
-        layoutModalRoot = root.findViewById(R.id.layoutModalRoot);
-        layoutModal = root.findViewById(R.id.layoutModal);
-        modalScrollMessage = root.findViewById(R.id.modalScrollMessage);
-        modalTitle = root.findViewById(R.id.modalTitle);
-        modalMessage = root.findViewById(R.id.modalMessage);
-        modalAction = root.findViewById(R.id.modalAction);
-        modalCollapse = root.findViewById(R.id.modalCollapse);
-        modalImage = root.findViewById(R.id.modalImage);
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            layoutModal.setElevation(dpToPixels(3));
-            modalImage.setElevation(dpToPixels(3));
-        }
-
-        setMessage(message);
-        setLayoutConfig(config);
-        setDismissListener(dismissOnClickListener);
-        setActionListener(actionListener);
-
-        setModalColorOverrides();
-        setButtonColorOverrides();
-
-        return layoutListener;
+    setMessage(message);
+    setLayoutConfig(config);
+    setDismissListener(dismissOnClickListener);
+    setActionListener(actionListener);
+
+    setModalColorOverrides();
+    setButtonColorOverrides();
+
+    return layoutListener;
+  }
+
+  @NonNull
+  @Override
+  public ImageView getImageView() {
+    return modalImage;
+  }
+
+  @NonNull
+  @Override
+  public ViewGroup getRootView() {
+    return layoutModalRoot;
+  }
+
+  @NonNull
+  @Override
+  public View getDialogView() {
+    return layoutModal;
+  }
+
+  @NonNull
+  @Override
+  public InAppMessageLayoutConfig getConfig() {
+    return config;
+  }
+
+  @NonNull
+  public Button getActionButton() {
+    return modalAction;
+  }
+
+  @NonNull
+  public View getCollapseButton() {
+    return modalCollapse;
+  }
+
+  private void setMessage(InAppMessage message) {
+    if (TextUtils.isEmpty(message.getImageUrl())) {
+      modalImage.setVisibility(View.GONE);
+    } else {
+      modalImage.setVisibility(View.VISIBLE);
     }
 
-    @NonNull
-    @Override
-    public ImageView getImageView() {
-        return modalImage;
+    if (message.getTitle() != null) {
+      if (!TextUtils.isEmpty(message.getTitle().getText())) {
+        modalTitle.setVisibility(View.VISIBLE);
+        modalTitle.setText(message.getTitle().getText());
+      } else {
+        modalTitle.setVisibility(View.GONE);
+      }
+
+      if (!TextUtils.isEmpty(message.getTitle().getHexColor())) {
+        modalTitle.setTextColor(Color.parseColor(message.getTitle().getHexColor()));
+      }
     }
 
-    @NonNull
-    @Override
-    public ViewGroup getRootView() {
-        return layoutModalRoot;
-    }
-
-    @NonNull
-    @Override
-    public View getDialogView() {
-        return layoutModal;
+    if (message.getBody() != null && !TextUtils.isEmpty(message.getBody().getText())) {
+      modalScrollMessage.setVisibility(View.VISIBLE);
+    } else {
+      modalScrollMessage.setVisibility(View.GONE);
     }
 
-    @NonNull
-    @Override
-    public InAppMessageLayoutConfig getConfig() {
-        return config;
+    if (message.getBody() != null) {
+      if (!TextUtils.isEmpty(message.getBody().getText())) {
+        modalMessage.setVisibility(View.VISIBLE);
+        modalMessage.setText(message.getBody().getText());
+      } else {
+        modalMessage.setVisibility(View.GONE);
+      }
+
+      if (!TextUtils.isEmpty(message.getBody().getHexColor())) {
+        modalMessage.setTextColor(Color.parseColor(message.getBody().getHexColor()));
+      }
     }
-
-    @NonNull
-    public Button getActionButton() {
-        return modalAction;
-    }
-
-    @NonNull
-    public View getCollapseButton() {
-        return modalCollapse;
-    }
-
-    private void setMessage(InAppMessage message) {
-        if (TextUtils.isEmpty(message.getImageUrl())) {
-            modalImage.setVisibility(View.GONE);
-        } else {
-            modalImage.setVisibility(View.VISIBLE);
-        }
-
-        if (message.getTitle() != null) {
-            if (!TextUtils.isEmpty(message.getTitle().getText())) {
-                modalTitle.setVisibility(View.VISIBLE);
-                modalTitle.setText(message.getTitle().getText());
-            } else {
-                modalTitle.setVisibility(View.GONE);
-            }
-
-            if (!TextUtils.isEmpty(message.getTitle().getHexColor())) {
-                modalTitle.setTextColor(Color.parseColor(message.getTitle().getHexColor()));
-            }
-        }
-
-        if (message.getBody() != null && !TextUtils.isEmpty(message.getBody().getText())) {
-            modalScrollMessage.setVisibility(View.VISIBLE);
+  }
+
+  private void setLayoutConfig(InAppMessageLayoutConfig config) {
+    modalImage.setMaxHeight(config.getMaxImageHeight());
+    modalImage.setMaxWidth(config.getMaxImageWidth());
+  }
+
+  private void setDismissListener(View.OnClickListener dismissListener) {
+    modalCollapse.setOnClickListener(dismissListener);
+    layoutModalRoot.setDismissListener(dismissListener);
+  }
+
+  private void setActionListener(View.OnClickListener actionListener) {
+    modalAction.setOnClickListener(actionListener);
+  }
+
+  private void setButtonColorOverrides() {
+    // Set the background color of the getAction button to be the FIAM color. We do this explicitly
+    // to
+    // allow for a rounded modal (b/c overloaded background for shape and color)
+
+    if (modalAction != null
+        && message.getActionButton() != null
+        && message.getActionButton().getButtonHexColor() != null) {
+      int buttonColor = Color.parseColor(message.getActionButton().getButtonHexColor());
+
+      // Tint the button based on the background color
+      Drawable buttonDrawable = generateDrawableButton(buttonColor);
+      modalAction.setBackground(buttonDrawable);
+
+      if (modalCollapse != null) {
+        modalCollapse.setTextColor(buttonColor);
+      }
+
+      if (message.getActionButton() != null && message.getActionButton().getText() != null) {
+        if (!TextUtils.isEmpty(message.getActionButton().getText().getText())) {
+          modalAction.setVisibility(View.VISIBLE);
+          modalAction.setText(message.getActionButton().getText().getText());
         } else {
-            modalScrollMessage.setVisibility(View.GONE);
+          modalAction.setVisibility(View.GONE);
         }
+        String buttonTextColorStr = message.getActionButton().getText().getHexColor();
 
-        if (message.getBody() != null) {
-            if (!TextUtils.isEmpty(message.getBody().getText())) {
-                modalMessage.setVisibility(View.VISIBLE);
-                modalMessage.setText(message.getBody().getText());
-            } else {
-                modalMessage.setVisibility(View.GONE);
-            }
-
-            if (!TextUtils.isEmpty(message.getBody().getHexColor())) {
-                modalMessage.setTextColor(Color.parseColor(message.getBody().getHexColor()));
-            }
+        if (!TextUtils.isEmpty(buttonTextColorStr)) {
+          modalAction.setTextColor(Color.parseColor(buttonTextColorStr));
         }
+      }
+    } else {
+      if (modalAction != null) {
+        modalAction.setVisibility(View.GONE);
+      }
     }
-
-    private void setLayoutConfig(InAppMessageLayoutConfig config) {
-        modalImage.setMaxHeight(config.getMaxImageHeight());
-        modalImage.setMaxWidth(config.getMaxImageWidth());
+  }
+
+  private GradientDrawable generateDrawableButton(int color) {
+    GradientDrawable shape = new GradientDrawable();
+    shape.setShape(GradientDrawable.RECTANGLE);
+    shape.setCornerRadius(dpToPixels(50));
+    shape.setColor(color);
+    return shape;
+  }
+
+  private void setModalColorOverrides() {
+    // Set the background color of the Modal to be the FIAM color. We do this explicitly to
+    // allow for a rounded modal (b/c overloaded background for shape and color)
+    if (layoutModal != null) {
+      setGradientDrawableBgColor(layoutModal, message.getBackgroundHexColor());
     }
+  }
 
-    private void setDismissListener(View.OnClickListener dismissListener) {
-        modalCollapse.setOnClickListener(dismissListener);
-        layoutModalRoot.setDismissListener(dismissListener);
-    }
+  @VisibleForTesting
+  public void setLayoutListener(ViewTreeObserver.OnGlobalLayoutListener listener) {
+    layoutListener = listener;
+  }
 
-    private void setActionListener(View.OnClickListener actionListener) {
-        modalAction.setOnClickListener(actionListener);
+  /** Convert a value in "dp" to a "px" value for the current display. */
+  private int dpToPixels(int dp) {
+    if (getDialogView().getContext() == null) {
+      return 0;
     }
 
-    private void setButtonColorOverrides() {
-        // Set the background color of the getAction button to be the FIAM color. We do this explicitly
-        // to
-        // allow for a rounded modal (b/c overloaded background for shape and color)
-
-        if (modalAction != null
-                && message.getActionButton() != null
-                && message.getActionButton().getButtonHexColor() != null) {
-            int buttonColor = Color.parseColor(message.getActionButton().getButtonHexColor());
-
-            // Tint the button based on the background color
-            Drawable buttonDrawable = generateDrawableButton(buttonColor);
-            modalAction.setBackground(buttonDrawable);
-
-            if (modalCollapse != null) {
-                modalCollapse.setTextColor(buttonColor);
-            }
-
-            if (message.getActionButton() != null && message.getActionButton().getText() != null) {
-                if (!TextUtils.isEmpty(message.getActionButton().getText().getText())) {
-                    modalAction.setVisibility(View.VISIBLE);
-                    modalAction.setText(message.getActionButton().getText().getText());
-                } else {
-                    modalAction.setVisibility(View.GONE);
-                }
-                String buttonTextColorStr = message.getActionButton().getText().getHexColor();
-
-                if (!TextUtils.isEmpty(buttonTextColorStr)) {
-                    modalAction.setTextColor(Color.parseColor(buttonTextColorStr));
-                }
-            }
-        } else {
-            if (modalAction != null) {
-                modalAction.setVisibility(View.GONE);
-            }
-        }
-    }
+    final DisplayMetrics displayMetrics =
+        getDialogView().getContext().getResources().getDisplayMetrics();
 
-    private GradientDrawable generateDrawableButton(int color) {
-        GradientDrawable shape = new GradientDrawable();
-        shape.setShape(GradientDrawable.RECTANGLE);
-        shape.setCornerRadius(dpToPixels(50));
-        shape.setColor(color);
-        return shape;
-    }
+    return (int)
+        Math.floor(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, displayMetrics));
+  }
 
-    private void setModalColorOverrides() {
-        // Set the background color of the Modal to be the FIAM color. We do this explicitly to
-        // allow for a rounded modal (b/c overloaded background for shape and color)
-        if (layoutModal != null) {
-            setGradientDrawableBgColor(layoutModal, message.getBackgroundHexColor());
-        }
-    }
-
-    @VisibleForTesting
-    public void setLayoutListener(ViewTreeObserver.OnGlobalLayoutListener listener) {
-        layoutListener = listener;
-    }
-
-    /** Convert a value in "dp" to a "px" value for the current display. */
-    private int dpToPixels(int dp) {
-        if (getDialogView().getContext() == null) {
-            return 0;
-        }
-
-        final DisplayMetrics displayMetrics = getDialogView().getContext()
-                .getResources()
-                .getDisplayMetrics();
-
-        return (int) Math.floor(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, displayMetrics));
-    }
-
-    public class ScrollViewAdjustableListener implements ViewTreeObserver.OnGlobalLayoutListener {
-        @Override
-        public void onGlobalLayout() {
-            modalImage.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-        }
+  public class ScrollViewAdjustableListener implements ViewTreeObserver.OnGlobalLayoutListener {
+    @Override
+    public void onGlobalLayout() {
+      modalImage.getViewTreeObserver().removeOnGlobalLayoutListener(this);
     }
-
-}
\ No newline at end of file
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java
index 8bae0b1d1..f65c573ed 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java
@@ -38,5 +38,4 @@
 
   @InAppMessageScope
   BannerBindingWrapper bannerBindingWrapper();
-
-}
\ No newline at end of file
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/FiamConstraintLayout.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/FiamConstraintLayout.java
index 6d395e6b0..156e90e95 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/FiamConstraintLayout.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/FiamConstraintLayout.java
@@ -10,33 +10,32 @@
 
 public class FiamConstraintLayout extends ConstraintLayout implements BackButtonLayout {
 
-    private BackButtonHandler mBackHandler;
-
-    public FiamConstraintLayout(Context context) {
-        super(context);
-    }
-
-    public FiamConstraintLayout(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public FiamConstraintLayout(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
+  private BackButtonHandler mBackHandler;
+
+  public FiamConstraintLayout(Context context) {
+    super(context);
+  }
+
+  public FiamConstraintLayout(Context context, AttributeSet attrs) {
+    super(context, attrs);
+  }
+
+  public FiamConstraintLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+  }
+
+  @Override
+  public void setDismissListener(OnClickListener listener) {
+    mBackHandler = new BackButtonHandler(this, listener);
+  }
+
+  @Override
+  public boolean dispatchKeyEvent(KeyEvent event) {
+    Boolean handled = mBackHandler.dispatchKeyEvent(event);
+    if (handled != null) {
+      return handled;
+    } else {
+      return super.dispatchKeyEvent(event);
     }
-
-    @Override
-    public void setDismissListener(OnClickListener listener) {
-        mBackHandler = new BackButtonHandler(this, listener);
-    }
-
-    @Override
-    public boolean dispatchKeyEvent(KeyEvent event) {
-        Boolean handled = mBackHandler.dispatchKeyEvent(event);
-        if (handled != null) {
-            return handled;
-        } else {
-            return super.dispatchKeyEvent(event);
-        }
-    }
-
-}
\ No newline at end of file
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/SubheadTextView.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/SubheadTextView.java
index f471ad2f0..3e53581ea 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/SubheadTextView.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/SubheadTextView.java
@@ -10,31 +10,30 @@
 
 public class SubheadTextView extends AppCompatTextView {
 
-    public SubheadTextView(Context context) {
-        super(context);
-        setupFont(context);
+  public SubheadTextView(Context context) {
+    super(context);
+    setupFont(context);
+  }
+
+  public SubheadTextView(Context context, AttributeSet attrs) {
+    super(context, attrs);
+    setupFont(context);
+  }
+
+  public SubheadTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+    setupFont(context);
+  }
+
+  private void setupFont(Context context) {
+    setTextColor(getResources().getColor(R.color.black_80));
+    setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.subhead));
+
+    try {
+      Typeface face = Typeface.createFromAsset(context.getAssets(), "fonts/NotoSans-Regular.ttf");
+      setTypeface(face);
+    } catch (Exception e) {
+      e.printStackTrace();
     }
-
-    public SubheadTextView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        setupFont(context);
-    }
-
-    public SubheadTextView(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        setupFont(context);
-    }
-
-    private void setupFont(Context context) {
-        setTextColor(getResources().getColor(R.color.black_80));
-        setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.subhead));
-
-        try {
-            Typeface face = Typeface.createFromAsset(context.getAssets(), "fonts/NotoSans-Regular.ttf");
-            setTypeface(face);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-}
\ No newline at end of file
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/TitleTextView.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/TitleTextView.java
index 9cec94af4..669fd3db0 100644
--- a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/TitleTextView.java
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/custom/TitleTextView.java
@@ -10,32 +10,31 @@
 
 public class TitleTextView extends AppCompatTextView {
 
-    public TitleTextView(Context context) {
-        super(context);
-        setupFont(context);
+  public TitleTextView(Context context) {
+    super(context);
+    setupFont(context);
+  }
+
+  public TitleTextView(Context context, AttributeSet attrs) {
+    super(context, attrs);
+    setupFont(context);
+  }
+
+  public TitleTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+    setupFont(context);
+  }
+
+  private void setupFont(Context context) {
+    setTextColor(getResources().getColor(R.color.black_87));
+    setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.title));
+    setAllCaps(true);
+
+    try {
+      Typeface face = Typeface.createFromAsset(context.getAssets(), "fonts/MavenPro-Medium.ttf");
+      setTypeface(face);
+    } catch (Exception e) {
+      e.printStackTrace();
     }
-
-    public TitleTextView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        setupFont(context);
-    }
-
-    public TitleTextView(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        setupFont(context);
-    }
-
-    private void setupFont(Context context) {
-        setTextColor(getResources().getColor(R.color.black_87));
-        setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimension(R.dimen.title));
-        setAllCaps(true);
-
-        try {
-            Typeface face = Typeface.createFromAsset(context.getAssets(), "fonts/MavenPro-Medium.ttf");
-            setTypeface(face);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-}
\ No newline at end of file
+  }
+}
diff --git a/root-project.gradle b/root-project.gradle
index 72ed875cc..21973e7e5 100644
--- a/root-project.gradle
+++ b/root-project.gradle
@@ -32,7 +32,7 @@ buildscript {
         classpath 'org.jsoup:jsoup:1.11.2'
         classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6'
         classpath 'com.google.gms:google-services:4.1.0'
-        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
+//        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
         classpath 'digital.wup:android-maven-publish:3.6.2'
     }
 }
@@ -133,7 +133,7 @@ configure(subprojects) {
         }
 
         // Apply the retrolambda plugin
-        sub.apply plugin: 'me.tatarka.retrolambda'
+//        sub.apply plugin: 'me.tatarka.retrolambda'
 
         boolean skipPreguard = sub.getProperties().getOrDefault('firebaseSkipPreguard', 'true').toBoolean()
         def defaultPreguard = rootProject.getProperties().getOrDefault('firebaseDefaultPreguardFile', 'default-preguard.txt')
