diff --git a/firebase-dynamic-links/api.txt b/firebase-dynamic-links/api.txt
new file mode 100644
index 000000000..073da933e
--- /dev/null
+++ b/firebase-dynamic-links/api.txt
@@ -0,0 +1,128 @@
+// Signature format: 2.0
+package com.google.firebase.dynamiclinks {
+
+  public final class DynamicLink {
+    method @NonNull public Uri getUri();
+  }
+
+  public static final class DynamicLink.AndroidParameters {
+  }
+
+  public static final class DynamicLink.AndroidParameters.Builder {
+    ctor public DynamicLink.AndroidParameters.Builder();
+    ctor public DynamicLink.AndroidParameters.Builder(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.AndroidParameters build();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.AndroidParameters.Builder setFallbackUrl(@NonNull Uri);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.AndroidParameters.Builder setMinimumVersion(int);
+  }
+
+  public static final class DynamicLink.Builder {
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink buildDynamicLink();
+    method @NonNull public Task<ShortDynamicLink> buildShortDynamicLink();
+    method @NonNull public Task<ShortDynamicLink> buildShortDynamicLink(@com.google.firebase.dynamiclinks.ShortDynamicLink.Suffix int);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setAndroidParameters(@NonNull com.google.firebase.dynamiclinks.DynamicLink.AndroidParameters);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setDomainUriPrefix(@NonNull String);
+    method @Deprecated @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setDynamicLinkDomain(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setGoogleAnalyticsParameters(@NonNull com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setIosParameters(@NonNull com.google.firebase.dynamiclinks.DynamicLink.IosParameters);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setItunesConnectAnalyticsParameters(@NonNull com.google.firebase.dynamiclinks.DynamicLink.ItunesConnectAnalyticsParameters);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setLink(@NonNull Uri);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setLongLink(@NonNull Uri);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setNavigationInfoParameters(@NonNull com.google.firebase.dynamiclinks.DynamicLink.NavigationInfoParameters);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.Builder setSocialMetaTagParameters(@NonNull com.google.firebase.dynamiclinks.DynamicLink.SocialMetaTagParameters);
+  }
+
+  public static final class DynamicLink.GoogleAnalyticsParameters {
+  }
+
+  public static final class DynamicLink.GoogleAnalyticsParameters.Builder {
+    ctor public DynamicLink.GoogleAnalyticsParameters.Builder();
+    ctor public DynamicLink.GoogleAnalyticsParameters.Builder(@NonNull String, @NonNull String, @NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters build();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters.Builder setCampaign(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters.Builder setContent(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters.Builder setMedium(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters.Builder setSource(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.GoogleAnalyticsParameters.Builder setTerm(@NonNull String);
+  }
+
+  public static final class DynamicLink.IosParameters {
+  }
+
+  public static final class DynamicLink.IosParameters.Builder {
+    ctor public DynamicLink.IosParameters.Builder(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters build();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters.Builder setAppStoreId(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters.Builder setCustomScheme(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters.Builder setFallbackUrl(@NonNull Uri);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters.Builder setIpadBundleId(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters.Builder setIpadFallbackUrl(@NonNull Uri);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.IosParameters.Builder setMinimumVersion(@NonNull String);
+  }
+
+  public static final class DynamicLink.ItunesConnectAnalyticsParameters {
+  }
+
+  public static final class DynamicLink.ItunesConnectAnalyticsParameters.Builder {
+    ctor public DynamicLink.ItunesConnectAnalyticsParameters.Builder();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.ItunesConnectAnalyticsParameters build();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.ItunesConnectAnalyticsParameters.Builder setAffiliateToken(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.ItunesConnectAnalyticsParameters.Builder setCampaignToken(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.ItunesConnectAnalyticsParameters.Builder setProviderToken(@NonNull String);
+  }
+
+  public static final class DynamicLink.NavigationInfoParameters {
+  }
+
+  public static final class DynamicLink.NavigationInfoParameters.Builder {
+    ctor public DynamicLink.NavigationInfoParameters.Builder();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.NavigationInfoParameters build();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.NavigationInfoParameters.Builder setForcedRedirectEnabled(boolean);
+  }
+
+  public static final class DynamicLink.SocialMetaTagParameters {
+  }
+
+  public static final class DynamicLink.SocialMetaTagParameters.Builder {
+    ctor public DynamicLink.SocialMetaTagParameters.Builder();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.SocialMetaTagParameters build();
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.SocialMetaTagParameters.Builder setDescription(@NonNull String);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.SocialMetaTagParameters.Builder setImageUrl(@NonNull Uri);
+    method @NonNull public com.google.firebase.dynamiclinks.DynamicLink.SocialMetaTagParameters.Builder setTitle(@NonNull String);
+  }
+
+  public abstract class FirebaseDynamicLinks {
+    ctor public FirebaseDynamicLinks();
+    method @NonNull public abstract com.google.firebase.dynamiclinks.DynamicLink.Builder createDynamicLink();
+    method @NonNull public abstract Task<PendingDynamicLinkData> getDynamicLink(@NonNull Intent);
+    method @NonNull public abstract Task<PendingDynamicLinkData> getDynamicLink(@NonNull Uri);
+    method @NonNull public static com.google.firebase.dynamiclinks.FirebaseDynamicLinks getInstance();
+    method @NonNull public static com.google.firebase.dynamiclinks.FirebaseDynamicLinks getInstance(@NonNull FirebaseApp);
+  }
+
+  public class PendingDynamicLinkData {
+    ctor protected PendingDynamicLinkData(@Nullable String, int, long, @Nullable Uri);
+    method public long getClickTimestamp();
+    method @Nullable public Uri getLink();
+    method public int getMinimumAppVersion();
+    method @Nullable public Intent getUpdateAppIntent(@NonNull Context);
+  }
+
+  public interface ShortDynamicLink {
+    method @Nullable public Uri getPreviewLink();
+    method @Nullable public Uri getShortLink();
+    method @NonNull public List<? extends Warning> getWarnings();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface ShortDynamicLink.Suffix {
+    field public static final int SHORT = 2; // 0x2
+    field public static final int UNGUESSABLE = 1; // 0x1
+  }
+
+  public static interface ShortDynamicLink.Warning {
+    method @Deprecated @Nullable public String getCode();
+    method @Nullable public String getMessage();
+  }
+
+}
+
diff --git a/firebase-dynamic-links/firebase-dynamic-links.gradle b/firebase-dynamic-links/firebase-dynamic-links.gradle
new file mode 100644
index 000000000..23dac97ee
--- /dev/null
+++ b/firebase-dynamic-links/firebase-dynamic-links.gradle
@@ -0,0 +1,66 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+plugins {
+    id 'firebase-library'
+}
+
+firebaseLibrary {
+    testLab.enabled = false
+    publishSources = true
+}
+
+android {
+    adbOptions {
+        timeOutInMs 60 * 1000
+    }
+
+    compileSdkVersion project.targetSdkVersion
+    defaultConfig {
+        targetSdkVersion project.targetSdkVersion
+        minSdkVersion project.minSdkVersion
+        versionName version
+        multiDexEnabled true
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
+    packagingOptions {
+        exclude 'META-INF/DEPENDENCIES'
+    }
+
+    testOptions.unitTests.includeAndroidResources = true
+}
+
+dependencies {
+    implementation project(':firebase-common')
+
+    implementation 'androidx.annotation:annotation:1.1.0'
+
+    implementation 'com.google.android.gms:play-services-basement:17.0.0'
+    implementation 'com.google.android.gms:play-services-tasks:17.0.0'
+    implementation 'com.google.android.gms:play-services-base:17.0.0'
+
+    implementation('com.google.firebase:firebase-auth-interop:18.0.0') {
+        exclude group: "com.google.firebase", module: "firebase-common"
+    }
+    implementation('com.google.firebase:firebase-measurement-connector:18.0.0') {
+        exclude group: 'com.google.firebase', module: 'firebase-common'
+    }
+}
+
diff --git a/firebase-dynamic-links/gradle.properties b/firebase-dynamic-links/gradle.properties
new file mode 100644
index 000000000..d6e815248
--- /dev/null
+++ b/firebase-dynamic-links/gradle.properties
@@ -0,0 +1,17 @@
+# Copyright 2018 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+version=18.1.0
+latestReleasedVersion=18.0.0
+android.enableUnitTestBinaryResources=true
diff --git a/firebase-dynamic-links/src/main/AndroidManifest.xml b/firebase-dynamic-links/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..e54f1f878
--- /dev/null
+++ b/firebase-dynamic-links/src/main/AndroidManifest.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright 2018 Google LLC -->
+<!-- -->
+<!-- Licensed under the Apache License, Version 2.0 (the "License"); -->
+<!-- you may not use this file except in compliance with the License. -->
+<!-- You may obtain a copy of the License at -->
+<!-- -->
+<!--      http://www.apache.org/licenses/LICENSE-2.0 -->
+<!-- -->
+<!-- Unless required by applicable law or agreed to in writing, software -->
+<!-- distributed under the License is distributed on an "AS IS" BASIS, -->
+<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. -->
+<!-- See the License for the specific language governing permissions and -->
+<!-- limitations under the License. -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  package="com.google.firebase.dynamiclinks">
+  <uses-sdk android:minSdkVersion="16"/>
+
+  <application>
+      <service android:name="com.google.firebase.components.ComponentDiscoveryService"
+               android:exported="false">
+          <meta-data
+              android:name="com.google.firebase.components:com.google.firebase.dynamiclinks.internal.FirebaseDynamicLinkRegistrar"
+              android:value="com.google.firebase.components.ComponentRegistrar" />
+      </service>
+  </application>
+</manifest>
+
diff --git a/firebase-dynamic-links/src/main/aidl/com/google/android/gms/common/api/Status.aidl b/firebase-dynamic-links/src/main/aidl/com/google/android/gms/common/api/Status.aidl
new file mode 100644
index 000000000..701f99a91
--- /dev/null
+++ b/firebase-dynamic-links/src/main/aidl/com/google/android/gms/common/api/Status.aidl
@@ -0,0 +1,3 @@
+package com.google.android.gms.common.api;
+
+parcelable Status;
\ No newline at end of file
diff --git a/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl
new file mode 100644
index 000000000..112da96c7
--- /dev/null
+++ b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl
@@ -0,0 +1,3 @@
+package com.google.firebase.dynamiclinks.internal;
+
+parcelable DynamicLinkData;
diff --git a/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl
new file mode 100644
index 000000000..9247ee3db
--- /dev/null
+++ b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl
@@ -0,0 +1,10 @@
+package com.google.firebase.dynamiclinks.internal;
+
+import com.google.android.gms.common.api.Status;
+import com.google.firebase.dynamiclinks.internal.DynamicLinkData;
+import com.google.firebase.dynamiclinks.internal.ShortDynamicLinkImpl;
+
+oneway interface IDynamicLinksCallbacks {
+    void onGetDynamicLink(in Status status, in DynamicLinkData dynamicLinksData) = 0;
+    void onCreateShortDynamicLink(in Status status, in ShortDynamicLinkImpl shortDynamicLink) = 1;
+}
diff --git a/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl
new file mode 100644
index 000000000..e1b76b598
--- /dev/null
+++ b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl
@@ -0,0 +1,9 @@
+package com.google.firebase.dynamiclinks.internal;
+
+import android.os.Bundle;
+import com.google.firebase.dynamiclinks.internal.IDynamicLinksCallbacks;
+
+interface IDynamicLinksService {
+    void getDynamicLink(in IDynamicLinksCallbacks callback, in String dynamicLink) = 0;
+    void createShortDynamicLink(in IDynamicLinksCallbacks callback, in Bundle parameters) = 1;
+}
diff --git a/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImpl.aidl b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImpl.aidl
new file mode 100644
index 000000000..1aef5e7c8
--- /dev/null
+++ b/firebase-dynamic-links/src/main/aidl/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImpl.aidl
@@ -0,0 +1,3 @@
+package com.google.firebase.dynamiclinks.internal;
+
+parcelable ShortDynamicLinkImpl;
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/DynamicLink.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/DynamicLink.java
new file mode 100644
index 000000000..d3d65202d
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/DynamicLink.java
@@ -0,0 +1,815 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks;
+
+import android.net.Uri;
+import android.os.Bundle;
+import androidx.annotation.NonNull;
+import androidx.annotation.VisibleForTesting;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.dynamiclinks.ShortDynamicLink.Suffix;
+import com.google.firebase.dynamiclinks.internal.FirebaseDynamicLinksImpl;
+
+/**
+ * Contains Builders for constructing Dynamic Links. Returned by {@link Builder#buildDynamicLink()}
+ * with the constructed Dynamic Link.
+ */
+public final class DynamicLink {
+
+  private final Bundle builderParameters;
+
+  DynamicLink(Bundle builderParameters) {
+    this.builderParameters = builderParameters;
+  }
+
+  /**
+   * Gets the Uri for this Dynamic Link.
+   *
+   * @throws IllegalArgumentException if the FDL domain is not set. Set with {@link
+   *     Builder#setDynamicLinkDomain(String)}.
+   */
+  @NonNull
+  public Uri getUri() {
+    return FirebaseDynamicLinksImpl.createDynamicLink(builderParameters);
+  }
+
+  /** Builder for creating Dynamic Links. */
+  public static final class Builder {
+
+    // Dynamic Link parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_DOMAIN = "domain";
+    /** @hide */
+    // TODO(b/120887495): This @VisibleForTesting annotation was being ignored by prod code.
+    // Please check that removing it is correct, and remove this comment along with it.
+    // @VisibleForTesting
+    public static final String KEY_DOMAIN_URI_PREFIX = "domainUriPrefix";
+    /** @hide */
+    // TODO(b/120887495): This @VisibleForTesting annotation was being ignored by prod code.
+    // Please check that removing it is correct, and remove this comment along with it.
+    // @VisibleForTesting
+    public static final String KEY_DYNAMIC_LINK = "dynamicLink";
+    /** @hide */
+    // TODO(b/120887495): This @VisibleForTesting annotation was being ignored by prod code.
+    // Please check that removing it is correct, and remove this comment along with it.
+    // @VisibleForTesting
+    public static final String KEY_DYNAMIC_LINK_PARAMETERS = "parameters";
+    /** @hide */
+    // TODO(b/120887495): This @VisibleForTesting annotation was being ignored by prod code.
+    // Please check that removing it is correct, and remove this comment along with it.
+    // @VisibleForTesting
+    public static final String KEY_SUFFIX = "suffix";
+    /** @hide */
+    // TODO(b/120887495): This @VisibleForTesting annotation was being ignored by prod code.
+    // Please check that removing it is correct, and remove this comment along with it.
+    // @VisibleForTesting
+    public static final String KEY_API_KEY = "apiKey";
+
+    /** @hide */
+    @VisibleForTesting public static final String KEY_LINK = "link";
+
+    private static final String SCHEME_PREFIX = "https://";
+    private static final String PAGE_LINK_PATTERN = "(https:\\/\\/)?[a-z0-9]{3,}\\.page\\.link$";
+    private static final String APP_GOO_GL_PATTERN =
+        "(https:\\/\\/)?[a-z0-9]{3,}\\.app\\.goo\\.gl$";
+
+    private final FirebaseDynamicLinksImpl firebaseDynamicLinksImpl;
+    private final Bundle builderParameters;
+    private final Bundle fdlParameters;
+
+    /** @hide */
+    public Builder(FirebaseDynamicLinksImpl firebaseDynamicLinks) {
+      firebaseDynamicLinksImpl = firebaseDynamicLinks;
+      builderParameters = new Bundle();
+      if (FirebaseApp.getInstance() != null) {
+        builderParameters.putString(
+            KEY_API_KEY, FirebaseApp.getInstance().getOptions().getApiKey());
+      }
+      fdlParameters = new Bundle();
+      builderParameters.putBundle(KEY_DYNAMIC_LINK_PARAMETERS, fdlParameters);
+    }
+
+    /**
+     * Set the long Dynamic Link. This can be used with {@link #buildShortDynamicLink} to shorten an
+     * existing long FDL into a short FDL.
+     *
+     * @param longLink The long FDL to shorten.
+     */
+    @NonNull
+    public Builder setLongLink(@NonNull Uri longLink) {
+      builderParameters.putParcelable(KEY_DYNAMIC_LINK, longLink);
+      return this;
+    }
+
+    /**
+     * Set the deep link.
+     *
+     * @param link The link your app will open. You can specify any URL your app can handle, such as
+     *     a link to your app's content, or a URL that initiates some app-specific logic such as
+     *     crediting the user with a coupon, or displaying a specific welcome screen. This link must
+     *     be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme.
+     */
+    @NonNull
+    public Builder setLink(@NonNull Uri link) {
+      fdlParameters.putParcelable(KEY_LINK, link);
+      return this;
+    }
+
+    /**
+     * Sets the domain (of the form "xyz.app.goo.gl") to use for this Dynamic Link. Only applicable
+     * for *.page.link and *.app.goo.gl, use {@link #setDomainUriPrefix(String)} if domain is
+     * custom.
+     *
+     * @param dynamicLinkDomain The target project's Dynamic Links domain. You can find this value
+     *     in the Dynamic Links section of the Firebase console.
+     * @deprecated Use {@link #setDomainUriPrefix(String)} instead
+     */
+    @NonNull
+    @Deprecated
+    public Builder setDynamicLinkDomain(@NonNull String dynamicLinkDomain) {
+      if (!dynamicLinkDomain.matches(APP_GOO_GL_PATTERN)
+          && !dynamicLinkDomain.matches(PAGE_LINK_PATTERN)) {
+        throw new IllegalArgumentException(
+            "Use setDomainUriPrefix() instead, setDynamicLinkDomain() is only applicable for "
+                + "*.page.link and *.app.goo.gl domains.");
+      }
+      builderParameters.putString(KEY_DOMAIN, dynamicLinkDomain);
+      builderParameters.putString(KEY_DOMAIN_URI_PREFIX, SCHEME_PREFIX + dynamicLinkDomain);
+      return this;
+    }
+
+    /**
+     * Sets the domain uri prefix (of the form "https://xyz.app.goo.gl", "https://custom.com/xyz")
+     * to use for this Dynamic Link.
+     *
+     * @param domainUriPrefix The target project's Domain Uri Prefix. You can find this value in the
+     *     Dynamic Links section of the Firebase console.
+     */
+    @NonNull
+    public Builder setDomainUriPrefix(@NonNull String domainUriPrefix) {
+      if (domainUriPrefix.matches(APP_GOO_GL_PATTERN)
+          || domainUriPrefix.matches(PAGE_LINK_PATTERN)) {
+        builderParameters.putString(KEY_DOMAIN, domainUriPrefix.replace(SCHEME_PREFIX, ""));
+      }
+      builderParameters.putString(KEY_DOMAIN_URI_PREFIX, domainUriPrefix);
+      return this;
+    }
+
+    /**
+     * Sets the Android parameters.
+     *
+     * @param androidParameters The AndroidParameters from {@link
+     *     AndroidParameters.Builder#build()}.
+     */
+    @NonNull
+    public Builder setAndroidParameters(@NonNull AndroidParameters androidParameters) {
+      fdlParameters.putAll(androidParameters.parameters);
+      return this;
+    }
+
+    /**
+     * Sets the iOS parameters.
+     *
+     * @param iosParameters The IosParameters from {@link IosParameters.Builder#build()}.
+     */
+    @NonNull
+    public Builder setIosParameters(@NonNull IosParameters iosParameters) {
+      fdlParameters.putAll(iosParameters.parameters);
+      return this;
+    }
+
+    /**
+     * Sets the Google Analytics parameters.
+     *
+     * @param googleAnalyticsParameters The GoogleAnalyticsParameters from {@link
+     *     GoogleAnalyticsParameters.Builder#build()}.
+     */
+    @NonNull
+    public Builder setGoogleAnalyticsParameters(
+        @NonNull GoogleAnalyticsParameters googleAnalyticsParameters) {
+      fdlParameters.putAll(googleAnalyticsParameters.parameters);
+      return this;
+    }
+
+    /**
+     * Sets the iTunes Connect App Analytics parameters.
+     *
+     * @param itunesConnectAnalyticsParameters The ItunesConnectAnalyticsParameters from {@link
+     *     ItunesConnectAnalyticsParameters.Builder#build()}.
+     */
+    @NonNull
+    public Builder setItunesConnectAnalyticsParameters(
+        @NonNull ItunesConnectAnalyticsParameters itunesConnectAnalyticsParameters) {
+      fdlParameters.putAll(itunesConnectAnalyticsParameters.parameters);
+      return this;
+    }
+
+    /**
+     * Sets the social meta-tag parameters.
+     *
+     * @param socialMetaTagParameters The SocialMetaTagParameters from {@link
+     *     SocialMetaTagParameters.Builder#build()}.
+     */
+    @NonNull
+    public Builder setSocialMetaTagParameters(
+        @NonNull SocialMetaTagParameters socialMetaTagParameters) {
+      fdlParameters.putAll(socialMetaTagParameters.parameters);
+      return this;
+    }
+
+    /**
+     * Sets the navigation info parameters.
+     *
+     * @param navigationInfoParameters The NavigationInfoParameters from {@link
+     *     NavigationInfoParameters.Builder#build()}.
+     */
+    @NonNull
+    public Builder setNavigationInfoParameters(
+        @NonNull NavigationInfoParameters navigationInfoParameters) {
+      fdlParameters.putAll(navigationInfoParameters.parameters);
+      return this;
+    }
+
+    /**
+     * Creates a Dynamic Link from the parameters.
+     *
+     * @throws IllegalArgumentException if the FDL domain is not set. Set with {@link
+     *     #setDynamicLinkDomain(String)}.
+     */
+    @NonNull
+    public DynamicLink buildDynamicLink() {
+      FirebaseDynamicLinksImpl.verifyDomainUriPrefix(builderParameters);
+      return new DynamicLink(builderParameters);
+    }
+
+    /**
+     * Creates a shortened Dynamic Link from the parameters.
+     *
+     * @throws IllegalArgumentException if the FDL domain and api key are not set. Set FDL domain
+     *     with {@link Builder#setDynamicLinkDomain(String)}. Ensure that google-services.json file
+     *     is setup for the app if the api key is not set.
+     */
+    @NonNull
+    public Task<ShortDynamicLink> buildShortDynamicLink() {
+      verifyApiKey();
+      return firebaseDynamicLinksImpl.createShortDynamicLink(builderParameters);
+    }
+
+    /**
+     * Creates a shortened Dynamic Link from the parameters.
+     *
+     * @param suffix The desired length of the Dynamic Link. One of {@link Suffix#UNGUESSABLE} or
+     *     {@link Suffix#SHORT}.
+     * @throws IllegalArgumentException if the FDL domain and api key are not set. Set FDL domain
+     *     with {@link Builder#setDynamicLinkDomain(String)}. Ensure that google-services.json file
+     *     is setup for the app if the api key is not set.
+     */
+    @NonNull
+    public Task<ShortDynamicLink> buildShortDynamicLink(@Suffix int suffix) {
+      verifyApiKey();
+      builderParameters.putInt(Builder.KEY_SUFFIX, suffix);
+      return firebaseDynamicLinksImpl.createShortDynamicLink(builderParameters);
+    }
+
+    private void verifyApiKey() {
+      if (builderParameters.getString(KEY_API_KEY) == null) {
+        throw new IllegalArgumentException("Missing API key. Set with setApiKey().");
+      }
+    }
+  }
+
+  /** Android parameters. */
+  public static final class AndroidParameters {
+
+    // AndroidInfo parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_ANDROID_PACKAGE_NAME = "apn";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_ANDROID_FALLBACK_LINK = "afl";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_ANDROID_MIN_VERSION_CODE = "amv";
+
+    final Bundle parameters;
+
+    private AndroidParameters(Bundle parameters) {
+      this.parameters = parameters;
+    }
+
+    /** Builder for Android parameters. */
+    public static final class Builder {
+
+      private final Bundle parameters;
+
+      /**
+       * Create Android parameters builder, using the package name of the calling app. The app must
+       * be connected to your project from the Overview page of the Firebase console.
+       *
+       * @throws IllegalStateException if FirebaseApp has not been initialized correctly.
+       */
+      public Builder() {
+        if (FirebaseApp.getInstance() == null) {
+          throw new IllegalStateException("FirebaseApp not initialized.");
+        }
+        parameters = new Bundle();
+        parameters.putString(
+            KEY_ANDROID_PACKAGE_NAME,
+            FirebaseApp.getInstance().getApplicationContext().getPackageName());
+      }
+
+      /**
+       * Create Android parameters builder.
+       *
+       * @param packageName The package name of the Android app to use to open the link. The app
+       *     must be connected to your project from the Overview page of the Firebase console.
+       */
+      public Builder(@NonNull String packageName) {
+        parameters = new Bundle();
+        parameters.putString(KEY_ANDROID_PACKAGE_NAME, packageName);
+      }
+
+      /**
+       * Sets the link to open when the app isn't installed. Specify this to do something other than
+       * install your app from the Play Store when the app isn't installed, such as open the mobile
+       * web version of the content, or display a promotional page for your app.
+       *
+       * @param fallbackUrl The link to open on Android if the app is not installed.
+       */
+      @NonNull
+      public AndroidParameters.Builder setFallbackUrl(@NonNull Uri fallbackUrl) {
+        parameters.putParcelable(KEY_ANDROID_FALLBACK_LINK, fallbackUrl);
+        return this;
+      }
+
+      /**
+       * Sets the versionCode of the minimum version of your app that can open the link.
+       *
+       * @param minimumVersion The minimum version.
+       */
+      @NonNull
+      public AndroidParameters.Builder setMinimumVersion(int minimumVersion) {
+        parameters.putInt(KEY_ANDROID_MIN_VERSION_CODE, minimumVersion);
+        return this;
+      }
+
+      /**
+       * Build AndroidParameters for use with {@link
+       * DynamicLink.Builder#setAndroidParameters(AndroidParameters)}.
+       */
+      @NonNull
+      public AndroidParameters build() {
+        return new AndroidParameters(parameters);
+      }
+    }
+  }
+
+  /** iOS parameters. */
+  public static final class IosParameters {
+
+    // IosInfo parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IOS_BUNDLE_ID = "ibi";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IOS_FALLBACK_LINK = "ifl";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IOS_CUSTOM_SCHEME = "ius";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IPAD_FALLBACK_LINK = "ipfl";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IPAD_BUNDLE_ID = "ipbi";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IOS_APP_STORE_ID = "isi";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_IOS_MINIMUM_VERSION = "imv";
+
+    final Bundle parameters;
+
+    private IosParameters(Bundle parameters) {
+      this.parameters = parameters;
+    }
+
+    /** Builder for iOS parameters. */
+    public static final class Builder {
+
+      private final Bundle parameters;
+
+      /**
+       * Create iOS parameters builder.
+       *
+       * @param bundleId The parameters ID of the iOS app to use to open the link. The app must be
+       *     connected to your project from the Overview page of the Firebase console.
+       */
+      public Builder(@NonNull String bundleId) {
+        parameters = new Bundle();
+        parameters.putString(KEY_IOS_BUNDLE_ID, bundleId);
+      }
+
+      /**
+       * Sets the link to open when the app isn't installed. Specify this to do something other than
+       * install your app from the App Store when the app isn't installed, such as open the mobile
+       * web version of the content, or display a promotional page for your app.
+       *
+       * @param fallbackUrl The link to open on iOS if the app is not installed.
+       */
+      @NonNull
+      public IosParameters.Builder setFallbackUrl(@NonNull Uri fallbackUrl) {
+        parameters.putParcelable(KEY_IOS_FALLBACK_LINK, fallbackUrl);
+        return this;
+      }
+
+      /**
+       * Sets the app's custom URL scheme, if defined to be something other than your app's
+       * parameters ID.
+       *
+       * @param customScheme The app's custom URL scheme.
+       */
+      @NonNull
+      public IosParameters.Builder setCustomScheme(@NonNull String customScheme) {
+        parameters.putString(KEY_IOS_CUSTOM_SCHEME, customScheme);
+        return this;
+      }
+
+      /**
+       * Sets the link to open on iPads when the app isn't installed. Specify this to do something
+       * other than install your app from the App Store when the app isn't installed, such as open
+       * the web version of the content, or display a promotional page for your app. Overrides the
+       * fallback link set by {@link IosParameters.Builder#setFallbackUrl(Uri)} on iPad.
+       *
+       * @param fallbackUrl The link to open on iPad if the app is not installed.
+       */
+      @NonNull
+      public IosParameters.Builder setIpadFallbackUrl(@NonNull Uri fallbackUrl) {
+        parameters.putParcelable(KEY_IPAD_FALLBACK_LINK, fallbackUrl);
+        return this;
+      }
+
+      /**
+       * Sets the parameters ID of the iOS app to use on iPads to open the link. The app must be
+       * connected to your project from the Overview page of the Firebase console.
+       *
+       * @param bundleId The iPad parameters ID of the app.
+       */
+      @NonNull
+      public IosParameters.Builder setIpadBundleId(@NonNull String bundleId) {
+        parameters.putString(KEY_IPAD_BUNDLE_ID, bundleId);
+        return this;
+      }
+
+      /**
+       * Sets the App Store ID, used to send users to the App Store when the app isn't installed.
+       *
+       * @param appStoreId The App Store ID.
+       */
+      @NonNull
+      public IosParameters.Builder setAppStoreId(@NonNull String appStoreId) {
+        parameters.putString(KEY_IOS_APP_STORE_ID, appStoreId);
+        return this;
+      }
+
+      /**
+       * Sets the minimum version of your app that can open the link.
+       *
+       * @param minimumVersion The minimum version.
+       */
+      @NonNull
+      public IosParameters.Builder setMinimumVersion(@NonNull String minimumVersion) {
+        parameters.putString(KEY_IOS_MINIMUM_VERSION, minimumVersion);
+        return this;
+      }
+
+      /**
+       * Build IosParameters for use with {@link
+       * DynamicLink.Builder#setIosParameters(IosParameters)}.
+       */
+      @NonNull
+      public IosParameters build() {
+        return new IosParameters(parameters);
+      }
+    }
+  }
+
+  /** Google Analytics parameters. */
+  public static final class GoogleAnalyticsParameters {
+
+    // GooglePlayAnalytics parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_UTM_CAMPAIGN = "utm_campaign";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_UTM_SOURCE = "utm_source";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_UTM_MEDIUM = "utm_medium";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_UTM_TERM = "utm_term";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_UTM_CONTENT = "utm_content";
+
+    Bundle parameters;
+
+    private GoogleAnalyticsParameters(Bundle parameters) {
+      this.parameters = parameters;
+    }
+
+    /** Builder for Google Analytics parameters. */
+    public static final class Builder {
+
+      private final Bundle parameters;
+
+      /** Create Google Analytics parameters builder. */
+      public Builder() {
+        parameters = new Bundle();
+      }
+
+      /**
+       * Create Google Analytics parameters builder.
+       *
+       * @param source The campaign source; used to identify a search engine, newsletter, or other
+       *     source.
+       * @param medium The campaign medium; used to identify a medium such as email or
+       *     cost-per-click (cpc).
+       * @param campaign The campaign name; The individual campaign name, slogan, promo code, etc.
+       *     for a product.
+       */
+      public Builder(@NonNull String source, @NonNull String medium, @NonNull String campaign) {
+        parameters = new Bundle();
+        parameters.putString(KEY_UTM_SOURCE, source);
+        parameters.putString(KEY_UTM_MEDIUM, medium);
+        parameters.putString(KEY_UTM_CAMPAIGN, campaign);
+      }
+
+      /**
+       * Sets the campaign source.
+       *
+       * @param source The campaign source; used to identify a search engine, newsletter, or other
+       *     source.
+       */
+      @NonNull
+      public GoogleAnalyticsParameters.Builder setSource(@NonNull String source) {
+        parameters.putString(KEY_UTM_SOURCE, source);
+        return this;
+      }
+
+      /**
+       * Sets the campaign medium.
+       *
+       * @param medium The campaign medium; used to identify a medium such as email or
+       *     cost-per-click (cpc).
+       */
+      @NonNull
+      public GoogleAnalyticsParameters.Builder setMedium(@NonNull String medium) {
+        parameters.putString(KEY_UTM_MEDIUM, medium);
+        return this;
+      }
+
+      /**
+       * Sets the campaign name.
+       *
+       * @param campaign The campaign name; The individual campaign name, slogan, promo code, etc.
+       *     for a product.
+       */
+      @NonNull
+      public GoogleAnalyticsParameters.Builder setCampaign(@NonNull String campaign) {
+        parameters.putString(KEY_UTM_CAMPAIGN, campaign);
+        return this;
+      }
+
+      /**
+       * Sets the campaign term.
+       *
+       * @param term The campaign term; used with paid search to supply the keywords for ads.
+       */
+      @NonNull
+      public GoogleAnalyticsParameters.Builder setTerm(@NonNull String term) {
+        parameters.putString(KEY_UTM_TERM, term);
+        return this;
+      }
+
+      /**
+       * Sets the campaign content.
+       *
+       * @param content The campaign content; used for A/B testing and content-targeted ads to
+       *     differentiate ads or links that point to the same URL.
+       */
+      @NonNull
+      public GoogleAnalyticsParameters.Builder setContent(@NonNull String content) {
+        parameters.putString(KEY_UTM_CONTENT, content);
+        return this;
+      }
+
+      /**
+       * Build GoogleAnalyticsParameters for use with {@link
+       * DynamicLink.Builder#setGoogleAnalyticsParameters(GoogleAnalyticsParameters)}.
+       */
+      @NonNull
+      public GoogleAnalyticsParameters build() {
+        return new GoogleAnalyticsParameters(parameters);
+      }
+    }
+  }
+
+  /** iTunes Connect App Analytics parameters. */
+  public static final class ItunesConnectAnalyticsParameters {
+
+    // ITunesConnectAnalytics parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_ITUNES_CONNECT_PT = "pt";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_ITUNES_CONNECT_AT = "at";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_ITUNES_CONNECT_CT = "ct";
+
+    final Bundle parameters;
+
+    private ItunesConnectAnalyticsParameters(Bundle parameters) {
+      this.parameters = parameters;
+    }
+
+    /** Builder for iTunes Connect App Analytics parameters. */
+    public static final class Builder {
+
+      private final Bundle parameters;
+
+      /** Create iTunes Connect App Analytics parameter builder. */
+      public Builder() {
+        parameters = new Bundle();
+      }
+
+      /**
+       * Sets the provider token.
+       *
+       * @param providerToken The provider token that enables analytics for Dynamic Links from
+       *     within iTunes Connect.
+       */
+      @NonNull
+      public ItunesConnectAnalyticsParameters.Builder setProviderToken(
+          @NonNull String providerToken) {
+        parameters.putString(KEY_ITUNES_CONNECT_PT, providerToken);
+        return this;
+      }
+
+      /**
+       * Sets the affiliate token.
+       *
+       * @param affiliateToken The affiliate token used to create affiliate-coded links.
+       */
+      @NonNull
+      public ItunesConnectAnalyticsParameters.Builder setAffiliateToken(
+          @NonNull String affiliateToken) {
+        parameters.putString(KEY_ITUNES_CONNECT_AT, affiliateToken);
+        return this;
+      }
+
+      /**
+       * Sets the campaign token.
+       *
+       * @param campaignToken The campaign token that developers can add to any link in order to
+       *     track sales from a specific marketing campaign.
+       */
+      @NonNull
+      public ItunesConnectAnalyticsParameters.Builder setCampaignToken(
+          @NonNull String campaignToken) {
+        parameters.putString(KEY_ITUNES_CONNECT_CT, campaignToken);
+        return this;
+      }
+
+      /**
+       * Build ItunesConnectAnalyticsParameters for use with {@link
+       * DynamicLink.Builder#setItunesConnectAnalyticsParameters(ItunesConnectAnalyticsParameters)}.
+       */
+      @NonNull
+      public ItunesConnectAnalyticsParameters build() {
+        return new ItunesConnectAnalyticsParameters(parameters);
+      }
+    }
+  }
+
+  /** Social meta-tag parameters. */
+  public static final class SocialMetaTagParameters {
+
+    // SocialMetaTagInfo parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_SOCIAL_TITLE = "st";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_SOCIAL_DESCRIPTION = "sd";
+    /** @hide */
+    @VisibleForTesting public static final String KEY_SOCIAL_IMAGE_LINK = "si";
+
+    final Bundle parameters;
+
+    private SocialMetaTagParameters(Bundle parameters) {
+      this.parameters = parameters;
+    }
+
+    /** Builder for social meta-tag parameters. */
+    public static final class Builder {
+
+      private final Bundle parameters;
+
+      /** Create social meta-tag parameter builder. */
+      public Builder() {
+        parameters = new Bundle();
+      }
+
+      /**
+       * Sets the meta-tag title.
+       *
+       * @param title The title to use when the Dynamic Link is shared in a social post.
+       */
+      @NonNull
+      public SocialMetaTagParameters.Builder setTitle(@NonNull String title) {
+        parameters.putString(KEY_SOCIAL_TITLE, title);
+        return this;
+      }
+
+      /**
+       * Sets the meta-tag description.
+       *
+       * @param description The description to use when the Dynamic Link is shared in a social post.
+       */
+      @NonNull
+      public SocialMetaTagParameters.Builder setDescription(@NonNull String description) {
+        parameters.putString(KEY_SOCIAL_DESCRIPTION, description);
+        return this;
+      }
+
+      /**
+       * Sets the meta-tag image link.
+       *
+       * @param imageUrl The URL to an image related to this link.
+       */
+      @NonNull
+      public SocialMetaTagParameters.Builder setImageUrl(@NonNull Uri imageUrl) {
+        parameters.putParcelable(KEY_SOCIAL_IMAGE_LINK, imageUrl);
+        return this;
+      }
+
+      /**
+       * Build SocialMetaTagParameters for use with {@link
+       * DynamicLink.Builder#setSocialMetaTagParameters(SocialMetaTagParameters)}.
+       */
+      @NonNull
+      public SocialMetaTagParameters build() {
+        return new SocialMetaTagParameters(parameters);
+      }
+    }
+  }
+
+  /** Navigation info parameters. */
+  public static final class NavigationInfoParameters {
+
+    // NavigationInfo parameters.
+    /** @hide */
+    @VisibleForTesting public static final String KEY_FORCED_REDIRECT = "efr";
+
+    final Bundle parameters;
+
+    private NavigationInfoParameters(Bundle parameters) {
+      this.parameters = parameters;
+    }
+
+    /** Builder for navigation info parameters. */
+    public static final class Builder {
+
+      private final Bundle parameters;
+
+      /** Create navigation info parameter builder. */
+      public Builder() {
+        parameters = new Bundle();
+      }
+
+      /**
+       * Sets whether to enable force redirecting or going to the app preview page. Defaults to
+       * false.
+       *
+       * @param forcedRedirectEnabled If true, app preview page will be disabled and there will be a
+       *     redirect to the FDL. If false, go to the app preview page.
+       */
+      @NonNull
+      public NavigationInfoParameters.Builder setForcedRedirectEnabled(
+          boolean forcedRedirectEnabled) {
+        parameters.putInt(KEY_FORCED_REDIRECT, forcedRedirectEnabled ? 1 : 0);
+        return this;
+      }
+
+      /**
+       * Build NavigationInfoParameters for use with {@link
+       * DynamicLink.Builder#setNavigationInfoParameters(NavigationInfoParameters)}.
+       */
+      @NonNull
+      public NavigationInfoParameters build() {
+        return new NavigationInfoParameters(parameters);
+      }
+    }
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/FirebaseDynamicLinks.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/FirebaseDynamicLinks.java
new file mode 100644
index 000000000..6b2a3c987
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/FirebaseDynamicLinks.java
@@ -0,0 +1,130 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import androidx.annotation.NonNull;
+import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.FirebaseApp;
+
+/**
+ * Provides access to dynamic links that are received by an app at launch.
+ *
+ * <p>When a dynamic link is clicked, the app is launched, or if the app is not yet installed, the
+ * user is directed to the Play Store to install and launch the app. In both cases the dynamic link
+ * made available to the app using {@link #getDynamicLink(Intent)}. An {@link
+ * android.content.IntentFilter} for the deeplink can also be used to launch the app directly into a
+ * targeted {@link android.app.Activity} or otherwise will start in the main launch Activity.
+ *
+ * <p>Dynamic link data returned from {@link #getDynamicLink(Intent)} can be accessed using {@link
+ * PendingDynamicLinkData} class.
+ *
+ * <p><a href="https://developer.android.com/training/app-links/index.html">Android App Links</a>
+ * can also be used to launch the app with dynamic links by registering to handle your Dynamic Links
+ * in your app. The guide for setting up your app to receive Firebase Dynamic Links as an App Link
+ * can be found on the Android <a
+ * href="https://firebase.google.com/docs/dynamic-links/android/receive#app_links">Firebase Dynamic
+ * Links</a> site.
+ *
+ * <p>Dynamic link data is available from the app launch intent. This data may include data for
+ * dynamic link extensions such as app invites.
+ */
+public abstract class FirebaseDynamicLinks {
+
+  /**
+   * Returns an instance of {@link FirebaseDynamicLinks}.
+   *
+   * <p>The default {@link FirebaseApp} instance must have been initialized before this function is
+   * called. See <a
+   * href="https://firebase.google.com/docs/reference/android/com/google/firebase/FirebaseApp">
+   * FirebaseApp</a>.
+   */
+  @NonNull
+  public static synchronized FirebaseDynamicLinks getInstance() {
+    return getInstance(FirebaseApp.getInstance());
+  }
+
+  @NonNull
+  public static synchronized FirebaseDynamicLinks getInstance(@NonNull FirebaseApp firebaseApp) {
+    return firebaseApp.get(FirebaseDynamicLinks.class);
+  }
+
+  /**
+   * Determine if the app has a pending dynamic link and provide access to the dynamic link
+   * parameters. A pending dynamic link may have been previously captured when a user clicked on a
+   * dynamic link, or may be present in the intent.
+   *
+   * <p>When a dynamic link is clicked by the user, in most cases it is captured when clicked and
+   * stored until accessed by {@link #getDynamicLink(Intent)} and returned as the {@link
+   * PendingDynamicLinkData} of the {@link Task}. If the dynamic link was not captured, as is the
+   * case when App Links launches launches the app, then the dynamic link is provided in the {@link
+   * Intent#getData()}. The intent data is then processed to retrieve the dynamic link data. If the
+   * dynamic links is both captured and is present in the intent, then the captured data will take
+   * precedence. The captured data will be removed after first access.
+   *
+   * <p>The intent parameter should be the intent that launched the application, or can be null if
+   * the intent does not include the dynamic link. A non-null intent is necessary only when the app
+   * is launched directly using the dynamic link, such as when using <a
+   * href="https://developer.android.com/training/app-links/index.html">App Links</a>. The app must
+   * configure an {@link android.content.IntentFilter} to override the default capture processing
+   * when the link is clicked.
+   *
+   * <p>In the callback the {@link PendingDynamicLinkData} is returned in {@link
+   * Task#addOnSuccessListener(OnSuccessListener)} or {@link Task#addOnCompleteListener(Activity,
+   * OnCompleteListener)} which returns the most recently clicked dynamic link, or null if a dynamic
+   * link was not pending as captured data or in the intent.
+   *
+   * <p>If processing could not be completed due to an error, then {@link OnFailureListener} will be
+   * called. Notice that in the case a pending dynamic link is not present, then {@link
+   * Task#isSuccessful()} will be true and the returned {@link PendingDynamicLinkData} will be null
+   * as this is normal processing and not an error condition.
+   *
+   * <p>If a dynamic link, the call will also send FirebaseAnalytics dynamic link event.
+   */
+  @NonNull
+  public abstract Task<PendingDynamicLinkData> getDynamicLink(@NonNull Intent intent);
+
+  /**
+   * Determine if the app has a pending dynamic link and provide access to the dynamic link
+   * parameters. A pending dynamic link may have been previously captured when a user clicked on a
+   * dynamic link, or may be present in the dynamicLinkUri parameter. If both are present, the
+   * previously captured dynamic link will take precedence. The captured data will be removed after
+   * first access.
+   *
+   * <p>This method provides the same functionality as {@link #getDynamicLink(Intent)} except the
+   * Uri is provided in place of the {@link Intent}.
+   *
+   * @param dynamicLinkUri - A uri that may be a dynamic link.
+   * @return Task where {@link Task#isSuccessful()} is true when processing is completed
+   *     successfully and either a dynamic link is returned, or null if a dynamic link is not
+   *     previously captured or is in the Uri.
+   *     <p>{@link Task#isSuccessful()} will only be false when a processing error occurs.
+   */
+  @NonNull
+  public abstract Task<PendingDynamicLinkData> getDynamicLink(@NonNull Uri dynamicLinkUri);
+
+  /**
+   * Create a long or short Dynamic Link.
+   *
+   * @return Builder to create the Dynamic Link.
+   */
+  @NonNull
+  public abstract DynamicLink.Builder createDynamicLink();
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/PendingDynamicLinkData.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/PendingDynamicLinkData.java
new file mode 100644
index 000000000..765376e5a
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/PendingDynamicLinkData.java
@@ -0,0 +1,188 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.net.Uri;
+import android.os.Bundle;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
+import com.google.android.gms.common.GooglePlayServicesUtil;
+import com.google.android.gms.common.util.DefaultClock;
+import com.google.firebase.dynamiclinks.internal.DynamicLinkData;
+
+/** Provides accessor methods to dynamic links data. */
+public class PendingDynamicLinkData {
+
+  private final DynamicLinkData dynamicLinkData;
+
+  /**
+   * Create a dynamic link from parameters.
+   *
+   * @hide
+   */
+  @VisibleForTesting
+  public PendingDynamicLinkData(DynamicLinkData dynamicLinkData) {
+    if (dynamicLinkData == null) {
+      this.dynamicLinkData = null;
+      return;
+    }
+    if (dynamicLinkData.getClickTimestamp() == 0L) {
+      long now = DefaultClock.getInstance().currentTimeMillis();
+      dynamicLinkData.setClickTimestamp(now);
+    }
+    this.dynamicLinkData = dynamicLinkData;
+  }
+
+  /**
+   * Create a PendingDynamicLinkData which can be used for testing.
+   *
+   * @param deepLink dynamic link deep link, can be null.
+   * @param minVersion app minimum version. 0 if no minimum version required.
+   * @param clickTimestamp timestamp of when the dynamic link was clicked. If zero, will be current
+   *     time.
+   */
+  protected PendingDynamicLinkData(
+      @Nullable String deepLink, int minVersion, long clickTimestamp, @Nullable Uri redirectUrl) {
+    dynamicLinkData =
+        new DynamicLinkData(null, deepLink, minVersion, clickTimestamp, null, redirectUrl);
+  }
+
+  /**
+   * Return the {@link Bundle} so that 1P dynamic links extensions can access extension data. The
+   * data is stored bundle with keys defined by the extension. The bundle is shared with all
+   * extensions, so the keys should be unique using the package name of the extension to define the
+   * namespace.
+   *
+   * @return A bundle will all extension data.
+   * @hide
+   */
+  @Nullable
+  public Bundle getExtensions() {
+    if (dynamicLinkData == null) {
+      return new Bundle();
+    }
+    return dynamicLinkData.getExtensionBundle();
+  }
+
+  /**
+   * Return the link parameter of the dynamic link.
+   *
+   * <p>This link will be set as data in the launch Intent, see {@link Intent#setData(Uri)}, which
+   * will match {@link android.content.IntentFilter} to deep link into the app.
+   *
+   * @return The deep link if it exists, null otherwise.
+   */
+  @Nullable
+  public Uri getLink() {
+    if (dynamicLinkData == null) {
+      return null;
+    }
+    String deepLink = dynamicLinkData.getDeepLink();
+    if (deepLink != null) {
+      return Uri.parse(deepLink);
+    }
+    return null;
+  }
+
+  /**
+   * The minimum app version requested to process the dynamic link that can be compared directly
+   * with {@link android.content.pm.PackageInfo#versionCode}. If the minimum version code is higher
+   * than the installed app version code, the app can upgrade using {@link
+   * #getUpdateAppIntent(Context)}.
+   *
+   * @return minimum version code set on the dynamic link, or 0 if not specified.
+   */
+  public int getMinimumAppVersion() {
+    if (dynamicLinkData == null) {
+      return 0;
+    }
+    return dynamicLinkData.getMinVersion();
+  }
+
+  /**
+   * The time that the user clicked on the dynamic link. This can be used to determine the amount of
+   * time that has passed since the user selected the link until the app is launched.
+   *
+   * @return The number of milliseconds that have elapsed since January 1, 1970.
+   */
+  public long getClickTimestamp() {
+    if (dynamicLinkData == null) {
+      return 0L;
+    }
+    return dynamicLinkData.getClickTimestamp();
+  }
+
+  /**
+   * Provides the redirect url, which is used as the alternative to opening the app. This url may
+   * install the app or go to an app specific website.
+   *
+   * @return Url that can be used to create an intent to launch an activity.
+   * @hide
+   */
+  @VisibleForTesting
+  public Uri getRedirectUrl() {
+    if (dynamicLinkData == null) {
+      return null;
+    }
+    return dynamicLinkData.getRedirectUrl();
+  }
+
+  /**
+   * Provide an intent to update the app to the version in the Play Store.
+   *
+   * <p>An intent is returned to be used as a parameter to {@link
+   * android.app.Activity#startActivity(Intent)} to launch the Play Store update flow for the app.
+   * After update, if the user re-launches the app from the Play Store by selecting the displayed
+   * Continue button then the deep link will be set as the data in the re-launch intent and will
+   * launch any Activity with an {@link android.content.IntentFilter} that matches the deeplink.
+   * This is the same as the new install flow. The dynamic link returned during initial launch will
+   * not be available from {@link FirebaseDynamicLinks#getDynamicLink(Intent)} during the update
+   * re-launch.
+   *
+   * <p>If the minimum version required by the dynamic link is not greater than the currently
+   * installed version, then null is returned.
+   *
+   * @return - An {@link Intent} that will launch the Play Store to update the app, or null if the
+   *     dynamic link minimum version code is not greater than the installed version.
+   */
+  @Nullable
+  public Intent getUpdateAppIntent(@NonNull Context context) {
+    int versionCode;
+    // zero indicates any version is accepted.
+    if (getMinimumAppVersion() == 0) {
+      return null;
+    }
+    try {
+      versionCode =
+          context
+              .getPackageManager()
+              .getPackageInfo(context.getApplicationContext().getPackageName(), 0)
+              .versionCode;
+    } catch (NameNotFoundException e) {
+      // Unexpected exception, so return null indicating don't update.
+      return null;
+    }
+    if (versionCode < getMinimumAppVersion() && getRedirectUrl() != null) {
+      return new Intent(Intent.ACTION_VIEW)
+          .setData(getRedirectUrl())
+          .setPackage(GooglePlayServicesUtil.GOOGLE_PLAY_STORE_PACKAGE);
+    }
+    return null;
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/ShortDynamicLink.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/ShortDynamicLink.java
new file mode 100644
index 000000000..4af37dc14
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/ShortDynamicLink.java
@@ -0,0 +1,82 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks;
+
+import android.net.Uri;
+import androidx.annotation.IntDef;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import com.google.firebase.dynamiclinks.DynamicLink.Builder;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.util.List;
+
+/**
+ * Response from {@link Builder#buildShortDynamicLink()} that returns the shortened Dynamic Link,
+ * link flow chart, and warnings from the requested Dynamic Link.
+ */
+public interface ShortDynamicLink {
+
+  /** Gets the short Dynamic Link value. */
+  @Nullable
+  Uri getShortLink();
+
+  /** Gets the preview link to show the link flow chart. */
+  @Nullable
+  Uri getPreviewLink();
+
+  /** Gets information about potential warnings on link creation. */
+  @NonNull
+  List<? extends Warning> getWarnings();
+
+  /** Path generation option for short Dynamic Link length */
+  @Retention(RetentionPolicy.SOURCE)
+  @IntDef({Suffix.UNGUESSABLE, Suffix.SHORT})
+  @interface Suffix {
+
+    /**
+     * Shorten the path to an unguessable string. Such strings are created by base62-encoding
+     * randomly generated 96-bit numbers, and consist of 17 alphanumeric characters. Use unguessable
+     * strings to prevent your Dynamic Links from being crawled, which can potentially expose
+     * sensitive information.
+     */
+    int UNGUESSABLE = 1;
+
+    /**
+     * Shorten the path to a string that is only as long as needed to be unique, with a minimum
+     * length of 4 characters. Use this method if sensitive information would not be exposed if a
+     * short Dynamic Link URL were guessed.
+     */
+    int SHORT = 2;
+  }
+
+  /** Information about potential warnings on short Dynamic Link creation. */
+  interface Warning {
+
+    /**
+     * Gets the warning code.
+     *
+     * @deprecated See {@link #getMessage()} for more information on this warning and how to correct
+     *     it.
+     */
+    @Deprecated
+    @Nullable
+    String getCode();
+
+    /** Gets the warning message to help developers improve their requests. */
+    @Nullable
+    String getMessage();
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java
new file mode 100644
index 000000000..f49fa8640
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java
@@ -0,0 +1,123 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Parcel;
+import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
+
+/** */
+@SafeParcelable.Class(creator = "DynamicLinkDataCreator")
+public class DynamicLinkData extends AbstractSafeParcelable {
+
+  @SafeParcelable.Field(id = 1, getter = "getDynamicLink")
+  private String dynamicLink;
+
+  @SafeParcelable.Field(id = 2, getter = "getDeepLink")
+  private String deepLink;
+
+  @SafeParcelable.Field(id = 3, getter = "getMinVersion")
+  private int minVersion;
+
+  @SafeParcelable.Field(id = 4, getter = "getClickTimestamp")
+  private long clickTimestamp = 0L;
+
+  @SafeParcelable.Field(id = 5, getter = "getExtensionBundle")
+  private Bundle extensionBundle = null;
+
+  @SafeParcelable.Field(id = 6, getter = "getRedirectUrl")
+  private Uri redirectUrl;
+
+  public String getDynamicLink() {
+    return dynamicLink;
+  }
+
+  public void setDynamicLink(String dynamicLink) {
+    this.dynamicLink = dynamicLink;
+  }
+
+  public String getDeepLink() {
+    return deepLink;
+  }
+
+  public void setDeepLink(String deepLink) {
+    this.deepLink = deepLink;
+  }
+
+  public int getMinVersion() {
+    return minVersion;
+  }
+
+  public void setMinVersion(int minVersion) {
+    this.minVersion = minVersion;
+  }
+
+  public long getClickTimestamp() {
+    return clickTimestamp;
+  }
+
+  public void setClickTimestamp(long timestamp) {
+    clickTimestamp = timestamp;
+  }
+
+  public Bundle getExtensionBundle() {
+    return (extensionBundle == null) ? new Bundle() : extensionBundle;
+  }
+
+  public void setRedirectUrl(Uri redirectUrl) {
+    this.redirectUrl = redirectUrl;
+  }
+
+  public Uri getRedirectUrl() {
+    return redirectUrl;
+  }
+
+  /**
+   * Replace the existing extension data with the bundle. Clients should use {@link
+   * #getExtensionBundle()} to retrieve the current values, add new values, the replace the bundle
+   * with the updated values.
+   *
+   * @param bundle
+   */
+  public void setExtensionData(Bundle bundle) {
+    extensionBundle = bundle;
+  }
+
+  public static final Creator<DynamicLinkData> CREATOR = new DynamicLinkDataCreator();
+
+  @SafeParcelable.Constructor
+  public DynamicLinkData(
+      @Param(id = 1) String dynamicLink,
+      @Param(id = 2) String deepLink,
+      @Param(id = 3) int minVersion,
+      @Param(id = 4) long clickTimestamp,
+      @Param(id = 5) Bundle extensions,
+      @Param(id = 6) Uri redirectUrl) {
+    this.dynamicLink = dynamicLink;
+    this.deepLink = deepLink;
+    this.minVersion = minVersion;
+    this.clickTimestamp = clickTimestamp;
+    extensionBundle = extensions;
+    this.redirectUrl = redirectUrl;
+  }
+
+  @SuppressWarnings("static-access")
+  @Override
+  public void writeToParcel(Parcel dest, int flags) {
+    DynamicLinkDataCreator.writeToParcel(this, dest, flags);
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkDataCreator.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkDataCreator.java
new file mode 100644
index 000000000..ebcc2c381
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkDataCreator.java
@@ -0,0 +1,119 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelReader;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
+
+// Autogenerated, do not edit
+public class DynamicLinkDataCreator implements Parcelable.Creator<DynamicLinkData> {
+  public static final int CONTENT_DESCRIPTION = 0;
+
+  public DynamicLinkDataCreator() {}
+
+  public DynamicLinkData createFromParcel(Parcel parcel) {
+    int end = SafeParcelReader.validateObjectHeader(parcel);
+
+    String _local_safe_0a1b_dynamicLink = null;
+
+    String _local_safe_0a1b_deepLink = null;
+
+    int _local_safe_0a1b_minVersion = 0;
+
+    long _local_safe_0a1b_clickTimestamp = 0L;
+
+    Bundle _local_safe_0a1b_extensionBundle = null;
+
+    Uri _local_safe_0a1b_redirectUrl = null;
+
+    while (parcel.dataPosition() < end) {
+      int header = SafeParcelReader.readHeader(parcel);
+      switch (SafeParcelReader.getFieldId(header)) {
+        case 1:
+          _local_safe_0a1b_dynamicLink = SafeParcelReader.createString(parcel, header);
+
+          break;
+
+        case 2:
+          _local_safe_0a1b_deepLink = SafeParcelReader.createString(parcel, header);
+
+          break;
+
+        case 3:
+          _local_safe_0a1b_minVersion = SafeParcelReader.readInt(parcel, header);
+
+          break;
+
+        case 4:
+          _local_safe_0a1b_clickTimestamp = SafeParcelReader.readLong(parcel, header);
+
+          break;
+
+        case 5:
+          _local_safe_0a1b_extensionBundle = SafeParcelReader.createBundle(parcel, header);
+
+          break;
+
+        case 6:
+          _local_safe_0a1b_redirectUrl =
+              (Uri) SafeParcelReader.createParcelable(parcel, header, Uri.CREATOR);
+
+          break;
+
+        default:
+          SafeParcelReader.skipUnknownField(parcel, header);
+      }
+    }
+
+    SafeParcelReader.ensureAtEnd(parcel, end);
+
+    DynamicLinkData obj =
+        new DynamicLinkData(
+            _local_safe_0a1b_dynamicLink,
+            _local_safe_0a1b_deepLink,
+            _local_safe_0a1b_minVersion,
+            _local_safe_0a1b_clickTimestamp,
+            _local_safe_0a1b_extensionBundle,
+            _local_safe_0a1b_redirectUrl);
+
+    return obj;
+  }
+
+  public DynamicLinkData[] newArray(int size) {
+    return new DynamicLinkData[size];
+  }
+
+  static void writeToParcel(DynamicLinkData obj, Parcel parcel, int flags) {
+    int myStart = SafeParcelWriter.beginObjectHeader(parcel);
+
+    SafeParcelWriter.writeString(parcel, 1, obj.getDynamicLink(), false);
+
+    SafeParcelWriter.writeString(parcel, 2, obj.getDeepLink(), false);
+
+    SafeParcelWriter.writeInt(parcel, 3, obj.getMinVersion());
+
+    SafeParcelWriter.writeLong(parcel, 4, obj.getClickTimestamp());
+
+    SafeParcelWriter.writeBundle(parcel, 5, obj.getExtensionBundle(), false);
+
+    SafeParcelWriter.writeParcelable(parcel, 6, obj.getRedirectUrl(), flags, false);
+
+    SafeParcelWriter.finishObjectHeader(parcel, myStart);
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinksApi.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinksApi.java
new file mode 100644
index 000000000..599cafd1d
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinksApi.java
@@ -0,0 +1,68 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.content.Context;
+import android.os.Looper;
+import androidx.annotation.NonNull;
+import androidx.annotation.VisibleForTesting;
+import com.google.android.gms.common.api.Api;
+import com.google.android.gms.common.api.Api.ApiOptions.NoOptions;
+import com.google.android.gms.common.api.GoogleApi;
+import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
+import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
+import com.google.android.gms.common.internal.ClientSettings;
+
+public class DynamicLinksApi extends GoogleApi<NoOptions> {
+
+  private static final Api.ClientKey<DynamicLinksClient> CLIENT_KEY =
+      new Api.ClientKey<DynamicLinksClient>();
+
+  private static final Api.AbstractClientBuilder<DynamicLinksClient, NoOptions> CLIENT_BUILDER =
+      new Api.AbstractClientBuilder<DynamicLinksClient, NoOptions>() {
+        @Override
+        public DynamicLinksClient buildClient(
+            Context context,
+            Looper looper,
+            ClientSettings commonSettings,
+            NoOptions apiOptions,
+            ConnectionCallbacks connectedListener,
+            OnConnectionFailedListener connectionFailedListener) {
+          return new DynamicLinksClient(
+              context, looper, commonSettings, connectedListener, connectionFailedListener);
+        }
+      };
+
+  static final Api<NoOptions> API =
+      new Api<NoOptions>("DynamicLinks.API", CLIENT_BUILDER, CLIENT_KEY);
+
+  /**
+   * Use the main Looper for callbacks, otherwise the calling thread's Looper (if it has one) will
+   * be used, which is undesirable for two reasons:
+   *
+   * <p>1. Clients might accidentally wait on tasks in the same thread that created the
+   * FirebaseDynamicLinks object, thus blocking retries and creating a deadlock. 2. We want to be
+   * able to create the FirebaseDynamicLinks instance as a singleton object, so it should not depend
+   * on the state of the thread that happened to create it first.
+   *
+   * <p>Using the main Looper avoids these problems because it is always available, and it's
+   * accepted that no blocking operations should be done on it. See {@link
+   * com.google.firebase.appindexing.internal.FirebaseAppIndexImpl.FirebaseAppIndexClient}
+   */
+  @VisibleForTesting
+  public DynamicLinksApi(@NonNull Context context) {
+    super(context, API, null /* options */, Settings.DEFAULT_SETTINGS);
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinksClient.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinksClient.java
new file mode 100644
index 000000000..694db5658
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinksClient.java
@@ -0,0 +1,95 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.RemoteException;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.internal.ClientSettings;
+import com.google.android.gms.common.internal.GmsClient;
+
+/** GmsClient class for Dynamic Links. */
+public class DynamicLinksClient extends GmsClient<IDynamicLinksService> {
+
+  public static final String ACTION_START_SERVICE =
+      "com.google.firebase.dynamiclinks.service.START";
+  public static final String SERVICE_DESCRIPTOR =
+      "com.google.firebase.dynamiclinks.internal.IDynamicLinksService";
+
+  public DynamicLinksClient(
+      Context context,
+      Looper looper,
+      ClientSettings clientSettings,
+      GoogleApiClient.ConnectionCallbacks connectedListener,
+      GoogleApiClient.OnConnectionFailedListener connectionFailedListener) {
+    super(
+        context,
+        looper,
+        // ServiceId.DYNAMIC_LINKS_API_VALUE,
+        131,
+        clientSettings,
+        connectedListener,
+        connectionFailedListener);
+  }
+
+  @NonNull
+  @Override
+  protected String getStartServiceAction() {
+    return ACTION_START_SERVICE;
+  }
+
+  @NonNull
+  @Override
+  protected String getServiceDescriptor() {
+    return SERVICE_DESCRIPTOR;
+  }
+
+  @Nullable
+  @Override
+  protected IDynamicLinksService createServiceInterface(IBinder binder) {
+    return IDynamicLinksService.Stub.asInterface(binder);
+  }
+
+  void getDynamicLink(IDynamicLinksCallbacks.Stub callback, String dynamicLink) {
+    try {
+      getService().getDynamicLink(callback, dynamicLink);
+    } catch (RemoteException e) {
+      // client is dead.
+    }
+  }
+
+  void createShortDynamicLink(IDynamicLinksCallbacks.Stub callback, Bundle parameters) {
+    try {
+      getService().createShortDynamicLink(callback, parameters);
+    } catch (RemoteException e) {
+      // client is dead.
+    }
+  }
+
+  @Override
+  public int getMinApkVersion() {
+    // This should be compatible with the V17 .apk. Update this value IFF a newer .apk is required
+    // or an older version is now supported. Do _not_ use JAR_BUILD_VERSION_CODE as long as this
+    // code is shipped in the 3P SDK (which ships ~from head / dev and would not work with the head
+    // version of the .apk)..
+    // return BuildConstants.BaseApkVersion.V17;
+    return 12451000;
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/FirebaseDynamicLinkRegistrar.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/FirebaseDynamicLinkRegistrar.java
new file mode 100644
index 000000000..cfa1b34e9
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/FirebaseDynamicLinkRegistrar.java
@@ -0,0 +1,52 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import androidx.annotation.Keep;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.analytics.connector.AnalyticsConnector;
+import com.google.firebase.components.Component;
+import com.google.firebase.components.ComponentRegistrar;
+import com.google.firebase.components.Dependency;
+import com.google.firebase.dynamiclinks.FirebaseDynamicLinks;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * {@link ComponentRegistrar} for FirebaseDynamicLinks.
+ *
+ * <p>see go/firebase-components-android-integration-guide for more details
+ *
+ * @hide
+ */
+@Keep
+public final class FirebaseDynamicLinkRegistrar implements ComponentRegistrar {
+
+  @Override
+  @Keep
+  public List<Component<?>> getComponents() {
+    Component<FirebaseDynamicLinks> firebaseDynamicLinks =
+        Component.builder(FirebaseDynamicLinks.class)
+            .add(Dependency.required(FirebaseApp.class))
+            .add(Dependency.optional(AnalyticsConnector.class))
+            .factory(
+                container ->
+                    new FirebaseDynamicLinksImpl(
+                        container.get(FirebaseApp.class), container.get(AnalyticsConnector.class)))
+            .build(); // no need for eager init for the Internal component.
+
+    return Collections.singletonList(firebaseDynamicLinks);
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/FirebaseDynamicLinksImpl.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/FirebaseDynamicLinksImpl.java
new file mode 100644
index 000000000..4ba77ceb7
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/FirebaseDynamicLinksImpl.java
@@ -0,0 +1,256 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.text.TextUtils;
+import android.util.Log;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
+import com.google.android.gms.common.api.Api.ApiOptions.NoOptions;
+import com.google.android.gms.common.api.GoogleApi;
+import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.api.internal.TaskApiCall;
+import com.google.android.gms.common.api.internal.TaskUtil;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelableSerializer;
+import com.google.android.gms.tasks.Task;
+import com.google.android.gms.tasks.TaskCompletionSource;
+import com.google.android.gms.tasks.Tasks;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.analytics.connector.AnalyticsConnector;
+import com.google.firebase.dynamiclinks.DynamicLink;
+import com.google.firebase.dynamiclinks.DynamicLink.Builder;
+import com.google.firebase.dynamiclinks.FirebaseDynamicLinks;
+import com.google.firebase.dynamiclinks.PendingDynamicLinkData;
+import com.google.firebase.dynamiclinks.ShortDynamicLink;
+
+/**
+ * Implementation of FirebaseDynamicLinks that passes requests to the binder interface to gmscore.
+ */
+public class FirebaseDynamicLinksImpl extends FirebaseDynamicLinks {
+
+  // Scion data stored as a Bundle of Bundles with the event name as the key to the params Bundle.
+  public static final String KEY_SCION_DATA = "scionData";
+  public static final String EXTRA_DYNAMIC_LINK_DATA =
+      "com.google.firebase.dynamiclinks.DYNAMIC_LINK_DATA";
+
+  private static final String TAG = "FDL";
+
+  // Value must be kept in sync with analytics: AppMeasurement.FDL_ORIGIN
+  private static final String ANALYTICS_FDL_ORIGIN = "fdl";
+
+  private final GoogleApi<NoOptions> googleApi;
+
+  @Nullable private final AnalyticsConnector analytics;
+
+  public FirebaseDynamicLinksImpl(FirebaseApp firebaseApp, @Nullable AnalyticsConnector analytics) {
+    this(new DynamicLinksApi(firebaseApp.getApplicationContext()), analytics);
+  }
+
+  // This overload exists to allow injecting a mock GoogleApi instance in tests.
+  @VisibleForTesting
+  public FirebaseDynamicLinksImpl(
+      GoogleApi<NoOptions> googleApi, @Nullable AnalyticsConnector analytics) {
+    this.googleApi = googleApi;
+    this.analytics = analytics;
+
+    if (analytics == null) {
+      // b/34217790: Try to get an instance of Analytics. This initializes Google Analytics
+      // if it is set up for the app, which sets up the association for the app and package name,
+      // allowing GmsCore to log FDL events on behalf of the app.
+
+      // AppMeasurement was not found. This probably means that the app did not include
+      // the FirebaseAnalytics dependency.
+      Log.w(
+          TAG,
+          "FDL logging failed. Add a dependency for Firebase Analytics"
+              + " to your app to enable logging of Dynamic Link events.");
+    }
+  }
+
+  public PendingDynamicLinkData getPendingDynamicLinkData(@NonNull Intent intent) {
+    DynamicLinkData dynamicLinkData =
+        SafeParcelableSerializer.deserializeFromIntentExtra(
+            intent, EXTRA_DYNAMIC_LINK_DATA, DynamicLinkData.CREATOR);
+    return dynamicLinkData != null ? new PendingDynamicLinkData(dynamicLinkData) : null;
+  }
+
+  @Override
+  public Task<PendingDynamicLinkData> getDynamicLink(@NonNull final Intent intent) {
+    Task<PendingDynamicLinkData> result =
+        googleApi.doWrite(new GetDynamicLinkImpl(analytics, intent.getDataString()));
+    PendingDynamicLinkData pendingDynamicLinkData = getPendingDynamicLinkData(intent);
+    if (pendingDynamicLinkData != null) {
+      // DynamicLinkData included in the Intent, return it immediately and allow the Task to run in
+      // the background to do logging and mark the FDL as returned.
+      result = Tasks.forResult(pendingDynamicLinkData);
+    }
+    return result;
+  }
+
+  @Override
+  public Task<PendingDynamicLinkData> getDynamicLink(@NonNull final Uri dynamicLinkUri) {
+    return googleApi.doWrite(new GetDynamicLinkImpl(analytics, dynamicLinkUri.toString()));
+  }
+
+  @Override
+  public DynamicLink.Builder createDynamicLink() {
+    return new DynamicLink.Builder(this);
+  }
+
+  public static Uri createDynamicLink(Bundle builderParameters) {
+    verifyDomainUriPrefix(builderParameters);
+    Uri longLink = builderParameters.getParcelable(Builder.KEY_DYNAMIC_LINK);
+    if (longLink == null) {
+      // Long link was not supplied, build the Dynamic Link from Dynamic Link parameters.
+      Uri.Builder builder = new Uri.Builder();
+      Uri uri = Uri.parse(builderParameters.getString(Builder.KEY_DOMAIN_URI_PREFIX));
+      builder.scheme(uri.getScheme());
+      builder.authority(uri.getAuthority());
+      builder.path(uri.getPath());
+      Bundle fdlParameters = builderParameters.getBundle(Builder.KEY_DYNAMIC_LINK_PARAMETERS);
+      for (String key : fdlParameters.keySet()) {
+        Object value = fdlParameters.get(key);
+        if (value != null) {
+          builder.appendQueryParameter(key, value.toString());
+        }
+      }
+      longLink = builder.build();
+    }
+    return longLink;
+  }
+
+  public Task<ShortDynamicLink> createShortDynamicLink(final Bundle builderParameters) {
+    verifyDomainUriPrefix(builderParameters);
+    return googleApi.doWrite(new CreateShortDynamicLinkImpl(builderParameters));
+  }
+
+  public static void verifyDomainUriPrefix(Bundle builderParameters) {
+    Uri longLink = builderParameters.getParcelable(Builder.KEY_DYNAMIC_LINK);
+    if (TextUtils.isEmpty(builderParameters.getString(Builder.KEY_DOMAIN_URI_PREFIX))
+        && longLink == null) {
+      throw new IllegalArgumentException(
+          "FDL domain is missing. Set with setDomainUriPrefix() or setDynamicLinkDomain().");
+    }
+  }
+
+  static final class GetDynamicLinkImpl
+      extends TaskApiCall<DynamicLinksClient, PendingDynamicLinkData> {
+
+    private final String dynamicLink;
+    @Nullable private final AnalyticsConnector analytics;
+
+    GetDynamicLinkImpl(AnalyticsConnector analytics, String dynamicLink) {
+      this.dynamicLink = dynamicLink;
+      this.analytics = analytics;
+    }
+
+    @Override
+    protected void doExecute(
+        DynamicLinksClient clientImpl,
+        final TaskCompletionSource<PendingDynamicLinkData> completionSource)
+        throws RemoteException {
+      clientImpl.getDynamicLink(new DynamicLinkCallbacks(analytics, completionSource), dynamicLink);
+    }
+  }
+
+  static final class CreateShortDynamicLinkImpl
+      extends TaskApiCall<DynamicLinksClient, ShortDynamicLink> {
+
+    private final Bundle builderParameters;
+
+    CreateShortDynamicLinkImpl(Bundle builderParameters) {
+      this.builderParameters = builderParameters;
+    }
+
+    @Override
+    protected void doExecute(
+        DynamicLinksClient clientImpl,
+        final TaskCompletionSource<ShortDynamicLink> completionSource)
+        throws RemoteException {
+      clientImpl.createShortDynamicLink(
+          new CreateShortDynamicLinkCallbacks(completionSource), builderParameters);
+    }
+  }
+
+  static class AbstractDynamicLinkCallbacks extends IDynamicLinksCallbacks.Stub {
+
+    @Override
+    public void onGetDynamicLink(Status status, DynamicLinkData dynamicLinkData) {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void onCreateShortDynamicLink(Status status, ShortDynamicLinkImpl shortDynamicLink) {
+      throw new UnsupportedOperationException();
+    }
+  }
+
+  static class DynamicLinkCallbacks extends AbstractDynamicLinkCallbacks {
+    private final TaskCompletionSource<PendingDynamicLinkData> completionSource;
+    @Nullable private final AnalyticsConnector analytics;
+
+    public DynamicLinkCallbacks(
+        AnalyticsConnector analytics,
+        TaskCompletionSource<PendingDynamicLinkData> completionSource) {
+      this.analytics = analytics;
+      this.completionSource = completionSource;
+    }
+
+    @Override
+    public void onGetDynamicLink(Status status, DynamicLinkData dynamicLinkData) {
+      // Send result to client.
+      TaskUtil.setResultOrApiException(
+          status,
+          dynamicLinkData == null ? null : new PendingDynamicLinkData(dynamicLinkData),
+          completionSource);
+      // Log any scion data included with the result.
+      if (dynamicLinkData == null) {
+        return;
+      }
+      Bundle scionData = dynamicLinkData.getExtensionBundle().getBundle(KEY_SCION_DATA);
+      // Scion data stored with the event name as the key to the params Bundle.
+      if (scionData == null || scionData.keySet() == null) {
+        return;
+      }
+
+      if (analytics == null) {
+        return;
+      }
+
+      for (String name : scionData.keySet()) {
+        Bundle params = scionData.getBundle(name);
+        analytics.logEvent(ANALYTICS_FDL_ORIGIN, name, params);
+      }
+    }
+  }
+
+  static class CreateShortDynamicLinkCallbacks extends AbstractDynamicLinkCallbacks {
+    private final TaskCompletionSource<ShortDynamicLink> completionSource;
+
+    CreateShortDynamicLinkCallbacks(TaskCompletionSource<ShortDynamicLink> completionSource) {
+      this.completionSource = completionSource;
+    }
+
+    @Override
+    public void onCreateShortDynamicLink(Status status, ShortDynamicLinkImpl shortDynamicLink) {
+      TaskUtil.setResultOrApiException(status, shortDynamicLink, completionSource);
+    }
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImpl.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImpl.java
new file mode 100644
index 000000000..b1dca7067
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImpl.java
@@ -0,0 +1,100 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.net.Uri;
+import android.os.Parcel;
+import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
+import com.google.firebase.dynamiclinks.ShortDynamicLink;
+import java.util.List;
+
+/** {@link SafeParcelable} implementation of {@link ShortDynamicLink}. */
+@SafeParcelable.Class(creator = "ShortDynamicLinkImplCreator")
+public final class ShortDynamicLinkImpl extends AbstractSafeParcelable implements ShortDynamicLink {
+
+  public static final Creator<ShortDynamicLinkImpl> CREATOR = new ShortDynamicLinkImplCreator();
+
+  @SafeParcelable.Field(id = 1, getter = "getShortLink")
+  private final Uri shortLink;
+
+  @SafeParcelable.Field(id = 2, getter = "getPreviewLink")
+  private final Uri previewLink;
+
+  @SafeParcelable.Field(id = 3, getter = "getWarnings")
+  private final List<WarningImpl> warnings;
+
+  @SafeParcelable.Constructor
+  public ShortDynamicLinkImpl(
+      @Param(id = 1) Uri shortLink,
+      @Param(id = 2) Uri previewLink,
+      @Param(id = 3) List<WarningImpl> warnings) {
+    this.shortLink = shortLink;
+    this.previewLink = previewLink;
+    this.warnings = warnings;
+  }
+
+  @Override
+  public Uri getShortLink() {
+    return shortLink;
+  }
+
+  @Override
+  public Uri getPreviewLink() {
+    return previewLink;
+  }
+
+  @Override
+  public List<WarningImpl> getWarnings() {
+    return warnings;
+  }
+
+  @Override
+  public void writeToParcel(Parcel dest, int flags) {
+    ShortDynamicLinkImplCreator.writeToParcel(this, dest, flags);
+  }
+
+  /** {@link SafeParcelable} implementation of {@link Warning}. */
+  @SafeParcelable.Class(creator = "WarningImplCreator")
+  public static class WarningImpl extends AbstractSafeParcelable implements Warning {
+
+    public static final Creator<WarningImpl> CREATOR = new WarningImplCreator();
+
+    @SafeParcelable.Reserved({1 /* code, deprecated */})
+    @SafeParcelable.Field(id = 2, getter = "getMessage")
+    private final String message;
+
+    @SafeParcelable.Constructor
+    public WarningImpl(@Param(id = 2) String message) {
+      this.message = message;
+    }
+
+    @Override
+    public String getCode() {
+      // warningCode deprecated on server, returns non-useful, hard-coded value.
+      return null;
+    }
+
+    @Override
+    public String getMessage() {
+      return message;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+      WarningImplCreator.writeToParcel(this, dest, flags);
+    }
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImplCreator.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImplCreator.java
new file mode 100644
index 000000000..7d21232d0
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLinkImplCreator.java
@@ -0,0 +1,90 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.net.Uri;
+import android.os.Parcel;
+import android.os.Parcelable;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelReader;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
+import java.util.List;
+
+// Autogenerated, do not edit
+public class ShortDynamicLinkImplCreator implements Parcelable.Creator<ShortDynamicLinkImpl> {
+  public static final int CONTENT_DESCRIPTION = 0;
+
+  public ShortDynamicLinkImplCreator() {}
+
+  public ShortDynamicLinkImpl createFromParcel(Parcel parcel) {
+    int end = SafeParcelReader.validateObjectHeader(parcel);
+
+    Uri _local_safe_0a1b_shortLink = null;
+
+    Uri _local_safe_0a1b_previewLink = null;
+
+    List<ShortDynamicLinkImpl.WarningImpl> _local_safe_0a1b_warnings = null;
+
+    while (parcel.dataPosition() < end) {
+      int header = SafeParcelReader.readHeader(parcel);
+      switch (SafeParcelReader.getFieldId(header)) {
+        case 1:
+          _local_safe_0a1b_shortLink =
+              (Uri) SafeParcelReader.createParcelable(parcel, header, Uri.CREATOR);
+
+          break;
+
+        case 2:
+          _local_safe_0a1b_previewLink =
+              (Uri) SafeParcelReader.createParcelable(parcel, header, Uri.CREATOR);
+
+          break;
+
+        case 3:
+          _local_safe_0a1b_warnings =
+              SafeParcelReader.createTypedList(
+                  parcel, header, ShortDynamicLinkImpl.WarningImpl.CREATOR);
+
+          break;
+
+        default:
+          SafeParcelReader.skipUnknownField(parcel, header);
+      }
+    }
+
+    SafeParcelReader.ensureAtEnd(parcel, end);
+
+    ShortDynamicLinkImpl obj =
+        new ShortDynamicLinkImpl(
+            _local_safe_0a1b_shortLink, _local_safe_0a1b_previewLink, _local_safe_0a1b_warnings);
+
+    return obj;
+  }
+
+  public ShortDynamicLinkImpl[] newArray(int size) {
+    return new ShortDynamicLinkImpl[size];
+  }
+
+  static void writeToParcel(ShortDynamicLinkImpl obj, Parcel parcel, int flags) {
+    int myStart = SafeParcelWriter.beginObjectHeader(parcel);
+
+    SafeParcelWriter.writeParcelable(parcel, 1, obj.getShortLink(), flags, false);
+
+    SafeParcelWriter.writeParcelable(parcel, 2, obj.getPreviewLink(), flags, false);
+
+    SafeParcelWriter.writeTypedList(parcel, 3, obj.getWarnings(), false);
+
+    SafeParcelWriter.finishObjectHeader(parcel, myStart);
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/WarningImplCreator.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/WarningImplCreator.java
new file mode 100644
index 000000000..a22eb8a8d
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/WarningImplCreator.java
@@ -0,0 +1,65 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.dynamiclinks.internal;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelReader;
+import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
+
+// Autogenerated, do not edit
+public class WarningImplCreator implements Parcelable.Creator<ShortDynamicLinkImpl.WarningImpl> {
+  public static final int CONTENT_DESCRIPTION = 0;
+
+  public WarningImplCreator() {}
+
+  public ShortDynamicLinkImpl.WarningImpl createFromParcel(Parcel parcel) {
+    int end = SafeParcelReader.validateObjectHeader(parcel);
+
+    String _local_safe_0a1b_message = null;
+
+    while (parcel.dataPosition() < end) {
+      int header = SafeParcelReader.readHeader(parcel);
+      switch (SafeParcelReader.getFieldId(header)) {
+        case 2:
+          _local_safe_0a1b_message = SafeParcelReader.createString(parcel, header);
+
+          break;
+
+        default:
+          SafeParcelReader.skipUnknownField(parcel, header);
+      }
+    }
+
+    SafeParcelReader.ensureAtEnd(parcel, end);
+
+    ShortDynamicLinkImpl.WarningImpl obj =
+        new ShortDynamicLinkImpl.WarningImpl(_local_safe_0a1b_message);
+
+    return obj;
+  }
+
+  public ShortDynamicLinkImpl.WarningImpl[] newArray(int size) {
+    return new ShortDynamicLinkImpl.WarningImpl[size];
+  }
+
+  static void writeToParcel(ShortDynamicLinkImpl.WarningImpl obj, Parcel parcel, int flags) {
+    int myStart = SafeParcelWriter.beginObjectHeader(parcel);
+
+    SafeParcelWriter.writeString(parcel, 2, obj.getMessage(), false);
+
+    SafeParcelWriter.finishObjectHeader(parcel, myStart);
+  }
+}
diff --git a/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/package-info.java b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/package-info.java
new file mode 100644
index 000000000..051540829
--- /dev/null
+++ b/firebase-dynamic-links/src/main/java/com/google/firebase/dynamiclinks/internal/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.dynamiclinks.internal;
\ No newline at end of file
diff --git a/subprojects.cfg b/subprojects.cfg
index eb97c4a08..5ec7a5f00 100644
--- a/subprojects.cfg
+++ b/subprojects.cfg
@@ -10,6 +10,7 @@ firebase-database
 firebase-database:ktx
 firebase-database-collection
 firebase-datatransport
+firebase-dynamic-links
 firebase-firestore
 firebase-firestore:ktx
 firebase-functions
