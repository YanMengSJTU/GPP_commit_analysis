diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
index a82b1c834..01bebbf3e 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
@@ -17,6 +17,7 @@
 import static com.google.firebase.firestore.util.ApiUtil.invoke;
 import static com.google.firebase.firestore.util.ApiUtil.newInstance;
 
+import com.google.api.Property;
 import com.google.firebase.Timestamp;
 import com.google.firebase.firestore.Blob;
 import com.google.firebase.firestore.DocumentReference;
@@ -156,7 +157,16 @@ public static Object convertToPlainJavaTypes(Object object) {
     } else if (o.getClass().isArray()) {
       throw serializeError(path, "Serializing Arrays is not supported, please use Lists instead");
     } else if (o instanceof Enum) {
-      return ((Enum<?>) o).name();
+      String enumField = ((Enum<?>)o).name();
+      try {
+        if (o.getClass().getField(enumField).isAnnotationPresent(PropertyName.class)) {
+          PropertyName annotation = o.getClass().getField(enumField).getAnnotation(PropertyName.class);
+          return annotation.value();
+        }
+      } catch (Exception ex) {
+        return enumField;
+      }
+      return enumField;
     } else if (o instanceof Date
         || o instanceof Timestamp
         || o instanceof GeoPoint
@@ -324,6 +334,19 @@ public static Object convertToPlainJavaTypes(Object object) {
       String value = (String) object;
       // We cast to Class without generics here since we can't prove the bound
       // T extends Enum<T> statically
+
+      // try to use PropertyName if exist
+      Field[] enumFields = clazz.getFields();
+      for (Field field : enumFields){
+        if (field.isAnnotationPresent(PropertyName.class)) {
+          PropertyName propertyName = field.getAnnotation(PropertyName.class);
+          if (value.equals(propertyName.value())) {
+            value = field.getName();
+            break;
+          }
+        }
+      }
+
       try {
         return (T) Enum.valueOf((Class) clazz, value);
       } catch (IllegalArgumentException e) {
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
index 956b140ab..638b69275 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
@@ -21,6 +21,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 
+import com.google.api.Property;
 import com.google.firebase.firestore.Exclude;
 import com.google.firebase.firestore.PropertyName;
 import com.google.firebase.firestore.ThrowOnExtraProperties;
@@ -709,7 +710,10 @@ public static void setValue1(String value1) {
 
   private enum ComplexEnum {
     One("one"),
-    Two("two");
+    Two("two"),
+
+    @PropertyName("three")
+    THREE("three");
 
     private final String value;
 
@@ -729,6 +733,8 @@ public String getValue() {
 
     public ComplexEnum complexEnum;
 
+    public ComplexEnum enumUsingPropertyName;
+
     public SimpleEnum getEnumValue() {
       return enumValue;
     }
@@ -1974,18 +1980,20 @@ public void enumsAreSerialized() {
     EnumBean bean = new EnumBean();
     bean.enumField = SimpleEnum.Bar;
     bean.complexEnum = ComplexEnum.One;
+    bean.enumUsingPropertyName = ComplexEnum.THREE;
     bean.setEnumValue(SimpleEnum.Foo);
-
-    assertJson("{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One'}", serialize(bean));
+    Object result = serialize(bean);
+    assertJson("{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}", serialize(bean));
   }
 
   @Test
   public void enumsAreParsed() {
-    String json = "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One'}";
+    String json = "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}";
     EnumBean bean = deserialize(json, EnumBean.class);
     assertEquals(bean.enumField, SimpleEnum.Bar);
     assertEquals(bean.enumValue, SimpleEnum.Foo);
     assertEquals(bean.complexEnum, ComplexEnum.One);
+    assertEquals(bean.enumUsingPropertyName, ComplexEnum.THREE);
   }
 
   @Test
