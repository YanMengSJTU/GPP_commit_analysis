diff --git a/.idea/copyright/Apache_2___Google.xml b/.idea/copyright/Apache_2___Google.xml
deleted file mode 100644
index eee6f0138..000000000
--- a/.idea/copyright/Apache_2___Google.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<component name="CopyrightManager">
-  <copyright>
-    <option name="myName" value="Apache 2 - Google" />
-    <option name="notice" value="Copyright 2018 Google LLC&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;     http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
-  </copyright>
-</component>
\ No newline at end of file
diff --git a/.idea/copyright/profiles_settings.xml b/.idea/copyright/profiles_settings.xml
deleted file mode 100644
index 0d00e3247..000000000
--- a/.idea/copyright/profiles_settings.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<component name="CopyrightManager">
-  <settings>
-    <module2copyright>
-      <element module="All" copyright="Apache 2 - Google" />
-    </module2copyright>
-    <LanguageOptions name="__TEMPLATE__">
-      <option name="block" value="false" />
-    </LanguageOptions>
-  </settings>
-</component>
\ No newline at end of file
diff --git a/.idea/runConfigurations/Firestore_Integration_Tests.xml b/.idea/runConfigurations/Firestore_Integration_Tests.xml
deleted file mode 100644
index f9c2ad5a0..000000000
--- a/.idea/runConfigurations/Firestore_Integration_Tests.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<component name="ProjectRunConfigurationManager">
-  <configuration default="false" name="Firestore Integration Tests" type="AndroidTestRunConfigurationType" factoryName="Android Instrumented Tests">
-    <module name="firebase-firestore" />
-    <option name="TESTING_TYPE" value="1" />
-    <option name="INSTRUMENTATION_RUNNER_CLASS" value="" />
-    <option name="METHOD_NAME" value="" />
-    <option name="CLASS_NAME" value="" />
-    <option name="PACKAGE_NAME" value="com.google.firebase.firestore" />
-    <option name="EXTRA_OPTIONS" value="" />
-    <option name="CLEAR_LOGCAT" value="false" />
-    <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
-    <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
-    <option name="FORCE_STOP_RUNNING_APP" value="true" />
-    <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
-    <option name="USE_LAST_SELECTED_DEVICE" value="false" />
-    <option name="PREFERRED_AVD" value="" />
-    <option name="SELECTED_CLOUD_MATRIX_CONFIGURATION_ID" value="-1" />
-    <option name="SELECTED_CLOUD_MATRIX_PROJECT_ID" value="" />
-    <option name="DEBUGGER_TYPE" value="Auto" />
-    <Auto>
-      <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
-      <option name="SHOW_STATIC_VARS" value="true" />
-      <option name="WORKING_DIR" value="" />
-      <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
-      <option name="SHOW_OPTIMIZED_WARNING" value="true" />
-    </Auto>
-    <Hybrid>
-      <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
-      <option name="SHOW_STATIC_VARS" value="true" />
-      <option name="WORKING_DIR" value="" />
-      <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
-      <option name="SHOW_OPTIMIZED_WARNING" value="true" />
-    </Hybrid>
-    <Java />
-    <Native>
-      <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
-      <option name="SHOW_STATIC_VARS" value="true" />
-      <option name="WORKING_DIR" value="" />
-      <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
-      <option name="SHOW_OPTIMIZED_WARNING" value="true" />
-    </Native>
-    <Profilers>
-      <option name="ADVANCED_PROFILING_ENABLED" value="false" />
-    </Profilers>
-    <method>
-      <option name="Android.Gradle.BeforeRunTask" enabled="true" />
-      <option name="com.android.instantApps.provision.BeforeRunTask" enabled="true" clearCache="false" clearProvisionedDevices="false" myTimestamp="1535475311190" />
-    </method>
-  </configuration>
-</component>
\ No newline at end of file
diff --git a/.idea/runConfigurations/Firestore_Unit_Tests.xml b/.idea/runConfigurations/Firestore_Unit_Tests.xml
deleted file mode 100644
index 5bfd8accf..000000000
--- a/.idea/runConfigurations/Firestore_Unit_Tests.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<component name="ProjectRunConfigurationManager">
-  <configuration default="false" name="Firestore Unit Tests" type="AndroidJUnit" factoryName="Android JUnit">
-    <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
-    <module name="firebase-firestore" />
-    <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-    <option name="ALTERNATIVE_JRE_PATH" />
-    <option name="PACKAGE_NAME" />
-    <option name="MAIN_CLASS_NAME" value="" />
-    <option name="METHOD_NAME" value="" />
-    <option name="TEST_OBJECT" value="directory" />
-    <option name="VM_PARAMETERS" value="-ea" />
-    <option name="PARAMETERS" value="" />
-    <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$/firebase-firestore" />
-    <option name="ENV_VARIABLES" />
-    <option name="PASS_PARENT_ENVS" value="true" />
-    <option name="TEST_SEARCH_SCOPE">
-      <value defaultName="singleModule" />
-    </option>
-    <envs />
-    <dir value="$PROJECT_DIR$/firebase-firestore/src/test/java/com/google/firebase" />
-    <patterns />
-    <method />
-  </configuration>
-</component>
\ No newline at end of file
diff --git a/firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java b/firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java
index a89716f97..d8cce00f8 100644
--- a/firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java
+++ b/firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java
@@ -75,6 +75,7 @@
   FirebaseFunctions(
       Context context, String projectId, String region, ContextProvider contextProvider) {
     this.client = new OkHttpClient();
+
     this.serializer = new Serializer();
     this.contextProvider = Preconditions.checkNotNull(contextProvider);
     this.projectId = Preconditions.checkNotNull(projectId);
diff --git a/root-project.gradle b/root-project.gradle
index 50350c6eb..d8b4f146f 100644
--- a/root-project.gradle
+++ b/root-project.gradle
@@ -146,23 +146,23 @@ configure(subprojects) {
             sub.android { buildTypes { release { consumerProguardFiles 'proguard.txt' } } }
         }
 
-        sub.apply plugin: LicenseResolverPlugin
-        sub.thirdPartyLicenses {
-            def root = "file://$rootDir/third_party/licenses"
-
-            add 'CCTZ', "$root/apache-2.0.txt"
-            add 'ICU4C', "$root/icu.txt"
-            add 'JSR 305', "$root/jsr305.txt"
-            add 'PCRE', "$root/pcre.txt"
-            add 'Protobuf Nano', "$root/nanoproto.txt"
-            add 'RE2', "$root/re2.txt"
-            add 'STL', "$root/sgi-stl.txt"
-            add 'UTF', "$root/utf.txt"
-            add 'darts_clone', "$root/darts_clone.txt"
-            add 'flatbuffers', "$root/apache-2.0.txt"
-            add 'safeparcel', "$root/apache-2.0.txt"
-            add 'zlib', "$root/zlib.txt"
-        }
+//        sub.apply plugin: LicenseResolverPlugin
+//        sub.thirdPartyLicenses {
+//            def root = "file://$rootDir/third_party/licenses"
+//
+//            add 'CCTZ', "$root/apache-2.0.txt"
+//            add 'ICU4C', "$root/icu.txt"
+//            add 'JSR 305', "$root/jsr305.txt"
+//            add 'PCRE', "$root/pcre.txt"
+//            add 'Protobuf Nano', "$root/nanoproto.txt"
+//            add 'RE2', "$root/re2.txt"
+//            add 'STL', "$root/sgi-stl.txt"
+//            add 'UTF', "$root/utf.txt"
+//            add 'darts_clone', "$root/darts_clone.txt"
+//            add 'flatbuffers', "$root/apache-2.0.txt"
+//            add 'safeparcel', "$root/apache-2.0.txt"
+//            add 'zlib', "$root/zlib.txt"
+//        }
     }
 }
 
diff --git a/test-apps/build.gradle b/test-apps/build.gradle
index 2890f56bc..167f9dcd6 100644
--- a/test-apps/build.gradle
+++ b/test-apps/build.gradle
@@ -16,12 +16,12 @@
 
 buildscript {
     repositories {
+        google()
         jcenter()
         mavenLocal()
-        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.4'
+        classpath 'com.android.tools.build:gradle:3.2.1'
         classpath 'com.google.gms:google-services:4.1.0'
         classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1'
     }
diff --git a/test-apps/firestore-test-app/build.gradle b/test-apps/firestore-test-app/build.gradle
index be1c2d351..7a8d6f4ab 100644
--- a/test-apps/firestore-test-app/build.gradle
+++ b/test-apps/firestore-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.firestore"
         minSdkVersion 16
-        targetSdkVersion 27
+        targetSdkVersion 28
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
@@ -54,6 +54,10 @@ dependencies {
     implementation 'com.google.firebase:firebase-core:16+'
     implementation 'com.google.firebase:firebase-auth:16+'
     implementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.2'
+    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
+    implementation 'com.android.support:appcompat-v7:28.0.0'
+    implementation 'com.android.support:support-v4:28.0.0'
+
 
     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
diff --git a/test-apps/firestore-test-app/firebase-debug.log b/test-apps/firestore-test-app/firebase-debug.log
new file mode 100644
index 000000000..3cbdec6a1
--- /dev/null
+++ b/test-apps/firestore-test-app/firebase-debug.log
@@ -0,0 +1,20 @@
+[debug] [2018-10-20T17:28:22.847Z] ----------------------------------------------------------------------
+[debug] [2018-10-20T17:28:22.851Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\Lion\AppData\Roaming\npm\node_modules\firebase-tools\bin\firebase auth:import accounts.json --hash-algo=SHA256 --rounds=1 --project=test-firebase-android-eed88 --debug
+[debug] [2018-10-20T17:28:22.852Z] CLI Version:   5.1.1
+[debug] [2018-10-20T17:28:22.853Z] Platform:      win32
+[debug] [2018-10-20T17:28:22.854Z] Node Version:  v10.7.0
+[debug] [2018-10-20T17:28:22.855Z] Time:          Sat Oct 20 2018 20:58:22 GMT+0330 (Iran Standard Time)
+[debug] [2018-10-20T17:28:22.855Z] ----------------------------------------------------------------------
+[debug] 
+[debug] [2018-10-20T17:28:22.865Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
+[debug] [2018-10-20T17:28:22.865Z] > authorizing via signed-in user
+[debug] [2018-10-20T17:28:22.866Z] [iam] checking project test-firebase-android-eed88 for permissions ["firebase.projects.get","firebaseauth.users.create","firebaseauth.users.update"]
+[debug] [2018-10-20T17:28:22.868Z] >>> HTTP REQUEST POST https://cloudresourcemanager.googleapis.com/v1/projects/test-firebase-android-eed88:testIamPermissions  
+
+[debug] [2018-10-20T17:28:24.430Z] <<< HTTP RESPONSE 200
+[info] Processing accounts.json (146 bytes)
+[debug] [2018-10-20T17:28:24.438Z] Preparing to import 1 user records in 1 batches.
+[info] Starting importing 1 account(s).
+[debug] [2018-10-20T17:28:24.439Z] >>> HTTP REQUEST POST https://www.googleapis.com/identitytoolkit/v3/relyingparty/uploadAccount  
+
+[debug] [2018-10-20T17:28:25.528Z] <<< HTTP RESPONSE 200
diff --git a/test-apps/firestore-test-app/src/main/AndroidManifest.xml b/test-apps/firestore-test-app/src/main/AndroidManifest.xml
index 6c0a6a31f..950c0459a 100644
--- a/test-apps/firestore-test-app/src/main/AndroidManifest.xml
+++ b/test-apps/firestore-test-app/src/main/AndroidManifest.xml
@@ -18,9 +18,12 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.testapps.firestore">
     <application
+        android:name="android.support.multidex.MultiDexApplication"
         android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
         android:supportsRtl="true"
-        android:name="android.support.multidex.MultiDexApplication">
+        android:theme="@style/AppTheme">
         <activity
             android:name=".TestActivity">
             <intent-filter>
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/BaseActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/BaseActivity.java
new file mode 100644
index 000000000..8a95db36f
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/BaseActivity.java
@@ -0,0 +1,44 @@
+package com.google.firebase.testapps.firestore;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.support.annotation.VisibleForTesting;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+
+public class BaseActivity extends Activity {
+
+    @VisibleForTesting
+    public ProgressDialog mProgressDialog;
+
+    public void showProgressDialog() {
+        if (mProgressDialog == null) {
+            mProgressDialog = new ProgressDialog(this);
+            mProgressDialog.setMessage(getString(R.string.loading));
+            mProgressDialog.setIndeterminate(true);
+        }
+
+        mProgressDialog.show();
+    }
+
+    public void hideProgressDialog() {
+        if (mProgressDialog != null && mProgressDialog.isShowing()) {
+            mProgressDialog.dismiss();
+        }
+    }
+
+    public void hideKeyboard(View view) {
+        final InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
+        if (imm != null) {
+            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
+        }
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        hideProgressDialog();
+    }
+
+}
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
new file mode 100644
index 000000000..09e8921ae
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
@@ -0,0 +1,240 @@
+/**
+ * Copyright 2016 Google Inc. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.testapps.firestore;
+
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.auth.AuthResult;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+
+public class CustomAuthActivity extends BaseActivity implements
+        View.OnClickListener {
+
+    private static final String TAG = "CustomAuth";
+
+    private TextView mStatusTextView;
+    private TextView mDetailTextView;
+    private EditText mEmailField;
+    private EditText mPasswordField;
+
+    private FirebaseAuth mAuth;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_emailpassword);
+
+        // Views
+        mStatusTextView = findViewById(R.id.status);
+        mDetailTextView = findViewById(R.id.detail);
+        mEmailField = findViewById(R.id.fieldEmail);
+        mPasswordField = findViewById(R.id.fieldPassword);
+
+        // Buttons
+        findViewById(R.id.emailSignInButton).setOnClickListener(this);
+        findViewById(R.id.emailCreateAccountButton).setOnClickListener(this);
+        findViewById(R.id.signOutButton).setOnClickListener(this);
+        findViewById(R.id.verifyEmailButton).setOnClickListener(this);
+
+        mAuth = FirebaseAuth.getInstance();
+    }
+
+    // [START on_start_check_user]
+    @Override
+    public void onStart() {
+        super.onStart();
+        // Check if user is signed in (non-null) and update UI accordingly.
+        FirebaseUser currentUser = mAuth.getCurrentUser();
+        updateUI(currentUser);
+    }
+    // [END on_start_check_user]
+
+    private void createAccount(String email, String password) {
+        Log.d(TAG, "createAccount:" + email);
+        if (!validateForm()) {
+            return;
+        }
+
+        showProgressDialog();
+
+        // [START create_user_with_email]
+        mAuth.createUserWithEmailAndPassword(email, password)
+                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
+                    @Override
+                    public void onComplete(@NonNull Task<AuthResult> task) {
+                        if (task.isSuccessful()) {
+                            // Sign in success, update UI with the signed-in user's information
+                            Log.d(TAG, "createUserWithEmail:success");
+                            FirebaseUser user = mAuth.getCurrentUser();
+                            updateUI(user);
+                        } else {
+                            // If sign in fails, display a message to the user.
+                            Log.w(TAG, "createUserWithEmail:failure", task.getException());
+                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
+                                    Toast.LENGTH_SHORT).show();
+                            updateUI(null);
+                        }
+
+                        // [START_EXCLUDE]
+                        hideProgressDialog();
+                        // [END_EXCLUDE]
+                    }
+                });
+        // [END create_user_with_email]
+    }
+
+    private void signIn(String email, String password) {
+        Log.d(TAG, "signIn:" + email);
+        if (!validateForm()) {
+            return;
+        }
+
+        showProgressDialog();
+
+        // [START sign_in_with_email]
+        mAuth.signInWithEmailAndPassword(email, password)
+                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
+                    @Override
+                    public void onComplete(@NonNull Task<AuthResult> task) {
+                        if (task.isSuccessful()) {
+                            // Sign in success, update UI with the signed-in user's information
+                            Log.d(TAG, "signInWithEmail:success");
+                            FirebaseUser user = mAuth.getCurrentUser();
+                            updateUI(user);
+                        } else {
+                            // If sign in fails, display a message to the user.
+                            Log.w(TAG, "signInWithEmail:failure", task.getException());
+                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
+                                    Toast.LENGTH_SHORT).show();
+                            updateUI(null);
+                        }
+
+                        // [START_EXCLUDE]
+                        if (!task.isSuccessful()) {
+                            mStatusTextView.setText(R.string.auth_failed);
+                        }
+                        hideProgressDialog();
+                        // [END_EXCLUDE]
+                    }
+                });
+        // [END sign_in_with_email]
+    }
+
+    private void signOut() {
+        mAuth.signOut();
+        updateUI(null);
+    }
+
+    private void sendEmailVerification() {
+        // Disable button
+        findViewById(R.id.verifyEmailButton).setEnabled(false);
+
+        // Send verification email
+        // [START send_email_verification]
+        final FirebaseUser user = mAuth.getCurrentUser();
+        user.sendEmailVerification()
+                .addOnCompleteListener(this, new OnCompleteListener<Void>() {
+                    @Override
+                    public void onComplete(@NonNull Task<Void> task) {
+                        // [START_EXCLUDE]
+                        // Re-enable button
+                        findViewById(R.id.verifyEmailButton).setEnabled(true);
+
+                        if (task.isSuccessful()) {
+                            Toast.makeText(CustomAuthActivity.this,
+                                    "Verification email sent to " + user.getEmail(),
+                                    Toast.LENGTH_SHORT).show();
+                        } else {
+                            Log.e(TAG, "sendEmailVerification", task.getException());
+                            Toast.makeText(CustomAuthActivity.this,
+                                    "Failed to send verification email.",
+                                    Toast.LENGTH_SHORT).show();
+                        }
+                        // [END_EXCLUDE]
+                    }
+                });
+        // [END send_email_verification]
+    }
+
+    private boolean validateForm() {
+        boolean valid = true;
+
+        String email = mEmailField.getText().toString();
+        if (TextUtils.isEmpty(email)) {
+            mEmailField.setError("Required.");
+            valid = false;
+        } else {
+            mEmailField.setError(null);
+        }
+
+        String password = mPasswordField.getText().toString();
+        if (TextUtils.isEmpty(password)) {
+            mPasswordField.setError("Required.");
+            valid = false;
+        } else {
+            mPasswordField.setError(null);
+        }
+
+        return valid;
+    }
+
+    private void updateUI(FirebaseUser user) {
+        hideProgressDialog();
+        if (user != null) {
+            mStatusTextView.setText(getString(R.string.emailpassword_status_fmt,
+                    user.getEmail(), user.isEmailVerified()));
+            mDetailTextView.setText(getString(R.string.firebase_status_fmt, user.getUid()));
+
+            findViewById(R.id.emailPasswordButtons).setVisibility(View.GONE);
+            findViewById(R.id.emailPasswordFields).setVisibility(View.GONE);
+            findViewById(R.id.signedInButtons).setVisibility(View.VISIBLE);
+
+            findViewById(R.id.verifyEmailButton).setEnabled(!user.isEmailVerified());
+        } else {
+            mStatusTextView.setText(R.string.signed_out);
+            mDetailTextView.setText(null);
+
+            findViewById(R.id.emailPasswordButtons).setVisibility(View.VISIBLE);
+            findViewById(R.id.emailPasswordFields).setVisibility(View.VISIBLE);
+            findViewById(R.id.signedInButtons).setVisibility(View.GONE);
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        int i = v.getId();
+        if (i == R.id.emailCreateAccountButton) {
+            createAccount(mEmailField.getText().toString(), mPasswordField.getText().toString());
+        } else if (i == R.id.emailSignInButton) {
+            signIn(mEmailField.getText().toString(), mPasswordField.getText().toString());
+        } else if (i == R.id.signOutButton) {
+            signOut();
+        } else if (i == R.id.verifyEmailButton) {
+            sendEmailVerification();
+        }
+    }
+}
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java
index b991f0c83..287e2d788 100644
--- a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/TestActivity.java
@@ -25,87 +25,144 @@
 import android.util.Log;
 import android.widget.TextView;
 import android.widget.Toast;
+
+import com.google.android.gms.tasks.Continuation;
+import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
 import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.GetTokenResult;
 import com.google.firebase.firestore.DocumentSnapshot;
 import com.google.firebase.firestore.EventListener;
 import com.google.firebase.firestore.FirebaseFirestore;
 import com.google.firebase.firestore.FirebaseFirestoreException;
 import com.google.firebase.firestore.FirebaseFirestoreSettings;
+
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
 public class TestActivity extends Activity {
-  private static final Map<String, Object> restaurant = new HashMap<>();
-  private static final String TAG = TestActivity.class.toString();
-
-  static {
-    restaurant.put("location", "Google MTV");
-  }
-
-  private FirebaseFirestore db;
-  private FirebaseAuth auth;
-  private TextView restaurantTextView;
-  private final CountingIdlingResource idlingResource =
-      new CountingIdlingResource("Firebase firestore listener");
-
-  @Override
-  protected void onCreate(@Nullable Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    setContentView(R.layout.test_activity);
-
-    db = FirebaseFirestore.getInstance();
-    auth = FirebaseAuth.getInstance();
-    restaurantTextView = this.findViewById(R.id.restaurant);
-    idlingResource.increment();
-
-    // Since offline persistence is enabled by default, the event listener is invoked even without
-    db.setFirestoreSettings(
-        new FirebaseFirestoreSettings.Builder().setPersistenceEnabled(false).build());
-
-    // Listen for a change to the collection
-    db.collection("restaurants")
-        .document("Baadal")
-        .addSnapshotListener(
-            new EventListener<DocumentSnapshot>() {
-              @Override
-              public void onEvent(
-                  @javax.annotation.Nullable DocumentSnapshot snapshot,
-                  @javax.annotation.Nullable FirebaseFirestoreException e) {
-                if (snapshot != null && snapshot.exists()) {
-                  restaurantTextView.setText(snapshot.getData().toString());
-                  idlingResource.decrement();
-                }
-              }
-            });
-
-    // Signout of any existing sessions and sign in with email and password
-    auth.signOut();
-    auth.signInWithEmailAndPassword("test@mailinator.com", "password")
-        .addOnSuccessListener(
-            new OnSuccessListener<AuthResult>() {
-              @Override
-              public void onSuccess(AuthResult authResult) {
-                Toast.makeText(TestActivity.this, "Signed in", Toast.LENGTH_LONG).show();
-                db.collection("restaurants").document("Baadal").set(restaurant);
-              }
-            })
-        .addOnFailureListener(
-            new OnFailureListener() {
-              @Override
-              public void onFailure(@NonNull Exception e) {
-                Log.d(TAG, "Failed to sign in");
-                Toast.makeText(TestActivity.this, e.toString(), Toast.LENGTH_LONG).show();
-              }
-            });
-  }
-
-  @VisibleForTesting
-  @NonNull
-  @Keep
-  public IdlingResource getIdlingResource() {
-    return idlingResource;
-  }
+    private static final Map<String, Object> restaurant = new HashMap<>();
+    private static final String TAG = TestActivity.class.toString();
+
+    static {
+        restaurant.put("location", "Google MTV");
+    }
+
+    private FirebaseFirestore db;
+    private FirebaseAuth auth;
+    private TextView restaurantTextView;
+    private final CountingIdlingResource idlingResource =
+            new CountingIdlingResource("Firebase firestore listener");
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.test_activity);
+
+        init();
+
+        auth.signOut();
+
+        if (auth.getCurrentUser() != null) {
+            // already signed in
+            setDocument();
+        } else {
+            // not signed in
+            // TODO show sign-in login page intent and after successful login return token
+            String username = "mark.biria@gmail.com";
+            String password = "12345";
+
+            startTaskLogin(username, password);
+        }
+
+        // Signout of any existing sessions and sign in with email and password
+//    auth.signOut();
+    }
+
+    private void init() {
+        db = FirebaseFirestore.getInstance();
+        auth = FirebaseAuth.getInstance();
+
+        restaurantTextView = this.findViewById(R.id.restaurant);
+        idlingResource.increment();
+
+        // Since offline persistence is enabled by default, the event listener is invoked even without
+        db.setFirestoreSettings(
+                new FirebaseFirestoreSettings.Builder().setPersistenceEnabled(false).build());
+
+        // Listen for a change to the collection
+        db.collection("restaurants")
+                .document("Baadal")
+                .addSnapshotListener(
+                        new EventListener<DocumentSnapshot>() {
+                            @Override
+                            public void onEvent(
+                                    @javax.annotation.Nullable DocumentSnapshot snapshot,
+                                    @javax.annotation.Nullable FirebaseFirestoreException e) {
+                                if (snapshot != null && snapshot.exists()) {
+                                    restaurantTextView.setText(snapshot.getData().toString());
+                                    idlingResource.decrement();
+                                }
+                            }
+                        });
+    }
+
+    private void setDocument() {
+        db.collection("restaurants").document("Baadal").set(restaurant);
+    }
+
+    public Task<AuthResult> startTaskLogin(String username, String password) {
+        /**
+         * Use Tasks API to chain 3 login steps together
+         * Refer to this blog post for more details about Tasks API:
+         *   https://firebase.googleblog.com/2016/09/become-a-firebase-taskmaster-part-1.html
+         **/
+
+        Task<AuthResult> combinedTask =
+                // STEP 1: User logins with life os username and password
+                Util.getCustomTokenWithUsernameAndPassword(username, password)
+                        .continueWithTask(new Continuation<String, Task<AuthResult>>() {
+                            @Override
+                            public Task<AuthResult> then(@NonNull Task<String> task) throws Exception {
+                                // STEP 2: Use Firebase Custom Auth token to login Firebase
+                                String customToken = task.getResult();
+                                System.out.println("token: " + customToken);
+
+                                return auth.signInWithCustomToken(customToken)
+                                        .addOnSuccessListener(
+                                                new OnSuccessListener<AuthResult>() {
+                                                    @Override
+                                                    public void onSuccess(AuthResult authResult) {
+                                                        System.out.println("Signed in: "+ auth.getCurrentUser().getDisplayName()+" "+auth.getCurrentUser().getEmail()+" "+auth.getCurrentUser().getUid());
+                                                        Toast.makeText(TestActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+
+                                                        setDocument();
+                                                    }
+                                                })
+                                        .addOnFailureListener(
+                                                new OnFailureListener() {
+                                                    @Override
+                                                    public void onFailure(@NonNull Exception e) {
+                                                        System.out.println("Failed to sign in");
+                                                        Log.d(TAG, e.toString());
+
+                                                        Toast.makeText(TestActivity.this, e.toString(), Toast.LENGTH_LONG).show();
+                                                    }
+                                                });
+                            }
+                        });
+
+        return combinedTask;
+    }
+
+    @VisibleForTesting
+    @NonNull
+    @Keep
+    public IdlingResource getIdlingResource() {
+        return idlingResource;
+    }
 }
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
new file mode 100644
index 000000000..769104631
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
@@ -0,0 +1,62 @@
+package com.google.firebase.testapps.firestore;
+
+import com.google.android.gms.tasks.Task;
+import com.google.android.gms.tasks.TaskCompletionSource;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+
+import okhttp3.Call;
+import okhttp3.Callback;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+public class Util {
+    private final static String customAuthAddress = "http://192.168.1.114:3000/auth/login";
+
+    public static final MediaType JSON
+            = MediaType.parse("application/json; charset=utf-8");
+
+    static OkHttpClient client = new OkHttpClient();
+
+    public static Task<String> getCustomTokenWithUsernameAndPassword(String username, String password) {
+        final TaskCompletionSource<String> source = new TaskCompletionSource<>();
+
+        RequestBody body = RequestBody.create(JSON, "{\"password\": \"12345\",\"email\": \"m3night@gmail.com\"}");
+        Request request = new Request.Builder()
+                .url(customAuthAddress)
+                .post(body)
+                .build();
+
+        client.newCall(request).enqueue(new Callback() {
+            @Override
+            public void onFailure(Call call, IOException e) {
+                source.setException(e);
+                e.printStackTrace();
+            }
+
+            @Override
+            public void onResponse(Call call, Response response) throws IOException {
+                String jsonData = response.body().string();
+                try {
+                    JSONObject obj = new JSONObject(jsonData);
+                    String token = obj.getString("token");
+
+                    source.setResult(token);
+
+                } catch (JSONException e) {
+                    source.setException(e);
+                }
+
+            }
+        });
+
+
+        return source.getTask();
+    }
+}
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-hdpi/firebase_lockup_400.png b/test-apps/firestore-test-app/src/main/res/drawable-hdpi/firebase_lockup_400.png
new file mode 100644
index 000000000..2eb21fecd
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-hdpi/firebase_lockup_400.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-hdpi/ic_person_white.png b/test-apps/firestore-test-app/src/main/res/drawable-hdpi/ic_person_white.png
new file mode 100644
index 000000000..d5f9dec93
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-hdpi/ic_person_white.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-mdpi/firebase_lockup_400.png b/test-apps/firestore-test-app/src/main/res/drawable-mdpi/firebase_lockup_400.png
new file mode 100644
index 000000000..ffed5b182
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-mdpi/firebase_lockup_400.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-mdpi/ic_person_white.png b/test-apps/firestore-test-app/src/main/res/drawable-mdpi/ic_person_white.png
new file mode 100644
index 000000000..67ffb1092
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-mdpi/ic_person_white.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-xhdpi/firebase_lockup_400.png b/test-apps/firestore-test-app/src/main/res/drawable-xhdpi/firebase_lockup_400.png
new file mode 100644
index 000000000..78a4a2780
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-xhdpi/firebase_lockup_400.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-xhdpi/ic_person_white.png b/test-apps/firestore-test-app/src/main/res/drawable-xhdpi/ic_person_white.png
new file mode 100644
index 000000000..36b741959
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-xhdpi/ic_person_white.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-xxhdpi/firebase_lockup_400.png b/test-apps/firestore-test-app/src/main/res/drawable-xxhdpi/firebase_lockup_400.png
new file mode 100644
index 000000000..4380835f6
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-xxhdpi/firebase_lockup_400.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-xxhdpi/ic_person_white.png b/test-apps/firestore-test-app/src/main/res/drawable-xxhdpi/ic_person_white.png
new file mode 100644
index 000000000..2b1c49fd8
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-xxhdpi/ic_person_white.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/drawable-xxxhdpi/ic_person_white.png b/test-apps/firestore-test-app/src/main/res/drawable-xxxhdpi/ic_person_white.png
new file mode 100644
index 000000000..5f50eac26
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/drawable-xxxhdpi/ic_person_white.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml b/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml
new file mode 100644
index 000000000..682e48423
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/layout/activity_emailpassword.xml
@@ -0,0 +1,139 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/grey_100"
+    android:orientation="vertical"
+    android:weightSum="4">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="3"
+        android:gravity="center_horizontal"
+        android:orientation="vertical">
+
+        <ImageView
+            android:id="@+id/icon"
+            style="@style/ThemeOverlay.FirebaseIcon"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:contentDescription="@string/desc_firebase_lockup"
+            android:src="@drawable/firebase_lockup_400" />
+
+        <TextView
+            android:id="@+id/titleText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="@dimen/title_bottom_margin"
+            android:text="@string/emailpassword_title_text"
+            android:theme="@style/ThemeOverlay.MyTitleText" />
+
+        <TextView
+            android:id="@+id/status"
+            style="@style/ThemeOverlay.MyTextDetail"
+            android:text="@string/signed_out" />
+
+        <TextView
+            android:id="@+id/detail"
+            style="@style/ThemeOverlay.MyTextDetail"
+            tools:text="Firebase User ID: 123456789abc" />
+
+    </LinearLayout>
+
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:background="@color/grey_300"
+        android:gravity="center_vertical">
+
+        <LinearLayout
+            android:id="@+id/emailPasswordFields"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp">
+
+            <EditText
+                android:id="@+id/fieldEmail"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/hint_email"
+                android:inputType="textEmailAddress" />
+
+            <EditText
+                android:id="@+id/fieldPassword"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="@string/hint_password"
+                android:inputType="textPassword" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/emailPasswordButtons"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@+id/emailPasswordFields"
+            android:orientation="horizontal"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp">
+
+            <Button
+                android:id="@+id/emailSignInButton"
+                style="@style/Widget.AppCompat.Button.Colored"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="@string/sign_in"
+                android:theme="@style/ThemeOverlay.MyDarkButton" />
+
+            <Button
+                android:id="@+id/emailCreateAccountButton"
+                style="@style/Widget.AppCompat.Button.Colored"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="@string/create_account"
+                android:theme="@style/ThemeOverlay.MyDarkButton" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/signedInButtons"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:orientation="horizontal"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp"
+            android:visibility="gone"
+            android:weightSum="2.0">
+
+            <Button
+                android:id="@+id/signOutButton"
+                style="@style/Widget.AppCompat.Button.Colored"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1.0"
+                android:text="@string/sign_out"
+                android:theme="@style/ThemeOverlay.MyDarkButton" />
+
+            <Button
+                android:id="@+id/verifyEmailButton"
+                style="@style/Widget.AppCompat.Button.Colored"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1.0"
+                android:text="@string/verify_email"
+                android:theme="@style/ThemeOverlay.MyDarkButton" />
+
+        </LinearLayout>
+
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/test-apps/firestore-test-app/src/main/res/mipmap-hdpi/ic_launcher.png b/test-apps/firestore-test-app/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..2ca9f5321
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/mipmap-mdpi/ic_launcher.png b/test-apps/firestore-test-app/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..5b80da821
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/mipmap-xhdpi/ic_launcher.png b/test-apps/firestore-test-app/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..efa6027dd
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/test-apps/firestore-test-app/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..d418e2656
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/test-apps/firestore-test-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..eaf324999
Binary files /dev/null and b/test-apps/firestore-test-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/test-apps/firestore-test-app/src/main/res/values-v21/dimens.xml b/test-apps/firestore-test-app/src/main/res/values-v21/dimens.xml
new file mode 100644
index 000000000..dcdcb6f40
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values-v21/dimens.xml
@@ -0,0 +1,10 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+    <dimen name="icon_top_margin">24dp</dimen>
+    <dimen name="icon_bottom_margin">24dp</dimen>
+    <dimen name="title_bottom_margin">16dp</dimen>
+    <dimen name="field_width_standard">160dp</dimen>
+</resources>
diff --git a/test-apps/firestore-test-app/src/main/res/values-v21/styles.xml b/test-apps/firestore-test-app/src/main/res/values-v21/styles.xml
new file mode 100644
index 000000000..dbbdd40f4
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values-v21/styles.xml
@@ -0,0 +1,9 @@
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+</resources>
diff --git a/test-apps/firestore-test-app/src/main/res/values-w820dp/colors.xml b/test-apps/firestore-test-app/src/main/res/values-w820dp/colors.xml
new file mode 100644
index 000000000..df17c2619
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values-w820dp/colors.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#039BE5</color>
+    <color name="colorPrimaryDark">#0288D1</color>
+    <color name="colorAccent">#FFA000</color>
+
+    <color name="grey_100">#F5F5F5</color>
+    <color name="grey_300">#E0E0E0</color>
+    <color name="grey_500">#9E9E9E</color>
+</resources>
diff --git a/test-apps/firestore-test-app/src/main/res/values-w820dp/styles.xml b/test-apps/firestore-test-app/src/main/res/values-w820dp/styles.xml
new file mode 100644
index 000000000..b34aaffcc
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values-w820dp/styles.xml
@@ -0,0 +1,49 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+    <!-- Activity with no Title -->
+    <style name="ThemeOverlay.MyNoTitleActivity" parent="AppTheme">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <!-- Dark Buttons -->
+    <style name="ThemeOverlay.MyDarkButton" parent="ThemeOverlay.AppCompat.Dark">
+        <item name="colorButtonNormal">@color/grey_500</item>
+        <item name="colorAccent">@color/colorAccent</item>
+        <item name="android:layout_marginRight">4dp</item>
+        <item name="android:layout_marginLeft">4dp</item>
+        <item name="android:textColor">@android:color/white</item>
+    </style>
+
+    <!-- Light EditTexts -->
+    <style name="ThemeOverlay.MyLightEditText" parent="ThemeOverlay.AppCompat.Dark"/>
+
+    <style name="ThemeOverlay.MyTextDetail" parent="AppTheme">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:fadeScrollbars">true</item>
+        <item name="android:gravity">center</item>
+        <item name="android:maxLines">5</item>
+        <item name="android:padding">4dp</item>
+        <item name="android:scrollbars">vertical</item>
+        <item name="android:textSize">14sp</item>
+    </style>
+
+    <style name="ThemeOverlay.FirebaseIcon" parent="AppTheme">
+        <item name="android:layout_marginTop">@dimen/icon_top_margin</item>
+        <item name="android:layout_marginBottom">@dimen/icon_bottom_margin</item>
+    </style>
+
+    <style name="ThemeOverlay.MyTitleText" parent="AppTheme">
+        <item name="android:gravity">center</item>
+        <item name="android:textSize">36sp</item>
+    </style>
+
+</resources>
diff --git a/test-apps/firestore-test-app/src/main/res/values/colors.xml b/test-apps/firestore-test-app/src/main/res/values/colors.xml
new file mode 100644
index 000000000..df17c2619
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values/colors.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#039BE5</color>
+    <color name="colorPrimaryDark">#0288D1</color>
+    <color name="colorAccent">#FFA000</color>
+
+    <color name="grey_100">#F5F5F5</color>
+    <color name="grey_300">#E0E0E0</color>
+    <color name="grey_500">#9E9E9E</color>
+</resources>
diff --git a/test-apps/firestore-test-app/src/main/res/values/strings.xml b/test-apps/firestore-test-app/src/main/res/values/strings.xml
new file mode 100644
index 000000000..dd69aa510
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values/strings.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Custom Auth</string>
+
+    <string name="loading">Loading…</string>
+    <string name="desc_firebase_lockup">Firebase logo and name</string>
+    <string name="emailpassword_title_text">Email and Password</string>
+    <string name="signed_out">Signed Out</string>
+    <string name="hint_email">Email</string>
+    <string name="hint_password">Password</string>
+    <string name="sign_in">Sign In</string>
+    <string name="create_account">Create Account</string>
+    <string name="sign_out">Sign Out</string>
+    <string name="verify_email">Verify Email</string>
+
+</resources>
\ No newline at end of file
diff --git a/test-apps/firestore-test-app/src/main/res/values/styles.xml b/test-apps/firestore-test-app/src/main/res/values/styles.xml
new file mode 100644
index 000000000..b34aaffcc
--- /dev/null
+++ b/test-apps/firestore-test-app/src/main/res/values/styles.xml
@@ -0,0 +1,49 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+    <!-- Activity with no Title -->
+    <style name="ThemeOverlay.MyNoTitleActivity" parent="AppTheme">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <!-- Dark Buttons -->
+    <style name="ThemeOverlay.MyDarkButton" parent="ThemeOverlay.AppCompat.Dark">
+        <item name="colorButtonNormal">@color/grey_500</item>
+        <item name="colorAccent">@color/colorAccent</item>
+        <item name="android:layout_marginRight">4dp</item>
+        <item name="android:layout_marginLeft">4dp</item>
+        <item name="android:textColor">@android:color/white</item>
+    </style>
+
+    <!-- Light EditTexts -->
+    <style name="ThemeOverlay.MyLightEditText" parent="ThemeOverlay.AppCompat.Dark"/>
+
+    <style name="ThemeOverlay.MyTextDetail" parent="AppTheme">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:fadeScrollbars">true</item>
+        <item name="android:gravity">center</item>
+        <item name="android:maxLines">5</item>
+        <item name="android:padding">4dp</item>
+        <item name="android:scrollbars">vertical</item>
+        <item name="android:textSize">14sp</item>
+    </style>
+
+    <style name="ThemeOverlay.FirebaseIcon" parent="AppTheme">
+        <item name="android:layout_marginTop">@dimen/icon_top_margin</item>
+        <item name="android:layout_marginBottom">@dimen/icon_bottom_margin</item>
+    </style>
+
+    <style name="ThemeOverlay.MyTitleText" parent="AppTheme">
+        <item name="android:gravity">center</item>
+        <item name="android:textSize">36sp</item>
+    </style>
+
+</resources>
